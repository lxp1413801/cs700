

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Nov 25 21:05:39 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,class=STRCODE,delta=2
     7                           	psect	_Main_flowCalibrationTable_text,global,class=CODE,delta=2
     8                           	psect	_bkupSystemData_text,global,class=CODE,delta=2
     9                           	psect	_mainSystemData_text,global,class=CODE,delta=2
    10                           	psect	cinit,global,class=CODE,merge=1,delta=2
    11                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    17                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	text47,local,class=CODE,merge=1,delta=2
    70                           	psect	text48,local,class=CODE,merge=1,delta=2
    71                           	psect	text49,local,class=CODE,merge=1,delta=2
    72                           	psect	text50,local,class=CODE,merge=1,delta=2
    73                           	psect	text51,local,class=CODE,merge=1,delta=2
    74                           	psect	text52,local,class=CODE,merge=1,delta=2
    75                           	psect	text53,local,class=CODE,merge=1,delta=2
    76                           	psect	text54,local,class=CODE,merge=1,delta=2
    77                           	psect	text55,local,class=CODE,merge=1,delta=2
    78                           	psect	text56,local,class=CODE,merge=1,delta=2
    79                           	psect	swtext1,local,class=CONST,delta=2
    80                           	psect	text57,local,class=CODE,merge=1,delta=2
    81                           	psect	text58,local,class=CODE,merge=1,delta=2
    82                           	psect	text59,local,class=CODE,merge=1,delta=2
    83                           	psect	text60,local,class=CODE,merge=1,delta=2
    84                           	psect	text61,local,class=CODE,merge=1,delta=2
    85                           	psect	text62,local,class=CODE,merge=1,delta=2
    86                           	psect	text63,local,class=CODE,merge=1,delta=2
    87                           	psect	text64,local,class=CODE,merge=1,delta=2
    88                           	psect	text65,local,class=CODE,merge=1,delta=2
    89                           	psect	text66,local,class=CODE,merge=1,delta=2
    90                           	psect	text67,local,class=CODE,merge=1,delta=2
    91                           	psect	text68,local,class=CODE,merge=1,delta=2
    92                           	psect	text69,local,class=CODE,merge=1,delta=2
    93                           	psect	text70,local,class=CODE,merge=1,delta=2
    94                           	psect	text71,local,class=CODE,merge=1,delta=2
    95                           	psect	text72,local,class=CODE,merge=1,delta=2
    96                           	psect	text73,local,class=CODE,merge=1,delta=2
    97                           	psect	text74,local,class=CODE,merge=1,delta=2
    98                           	psect	text75,local,class=CODE,merge=1,delta=2
    99                           	psect	text76,local,class=CODE,merge=1,delta=2
   100                           	psect	text77,local,class=CODE,merge=1,delta=2
   101                           	psect	text78,local,class=CODE,merge=1,delta=2
   102                           	psect	text79,local,class=CODE,merge=1,delta=2
   103                           	psect	text80,local,class=CODE,merge=1,delta=2
   104                           	psect	text81,local,class=CODE,merge=1,delta=2,group=2
   105                           	psect	intentry,global,class=CODE,delta=2
   106                           	psect	text83,local,class=CODE,merge=1,delta=2
   107                           	psect	text84,local,class=CODE,merge=1,delta=2
   108                           	psect	text85,local,class=CODE,merge=1,delta=2
   109                           	psect	text86,local,class=CODE,merge=1,delta=2
   110                           	dabs	1,0x620,48
   111                           	dabs	1,0x5A0,80
   112                           	dabs	1,0x4A0,80,_uart1Buffer
   113                           	dabs	1,0x456,18,_cardDecBuf
   114                           	dabs	1,0x444,18,_cardIncBuf
   115                           	dabs	1,0x432,18,_cardWriteBuf
   116                           	dabs	1,0x420,18,_cardUidBlockBuf
   117                           	dabs	1,0x2370,0,_comBuffer
   118                           	dabs	1,0x7E,2
   119  0000                     
   120                           ; Version 1.41
   121                           ; Generated 25/01/2017 GMT
   122                           ; 
   123                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   124                           ; All rights reserved.
   125                           ; 
   126                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   127                           ; 
   128                           ; Redistribution and use in source and binary forms, with or without modification, are
   129                           ; permitted provided that the following conditions are met:
   130                           ; 
   131                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   132                           ;        conditions and the following disclaimer.
   133                           ; 
   134                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   135                           ;        of conditions and the following disclaimer in the documentation and/or other
   136                           ;        materials provided with the distribution.
   137                           ; 
   138                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   139                           ;        software without specific prior written permission.
   140                           ; 
   141                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   142                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   143                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   144                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   145                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   146                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   147                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   148                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   149                           ; 
   150                           ; 
   151                           ; Code-generator required, PIC16F1947 Definitions
   152                           ; 
   153                           ; SFR Addresses
   154  0000                     	;# 
   155  0001                     	;# 
   156  0002                     	;# 
   157  0003                     	;# 
   158  0004                     	;# 
   159  0005                     	;# 
   160  0006                     	;# 
   161  0007                     	;# 
   162  0008                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0016                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001C                     	;# 
   184  001E                     	;# 
   185  001F                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0094                     	;# 
   195  0095                     	;# 
   196  0096                     	;# 
   197  0097                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009A                     	;# 
   201  009B                     	;# 
   202  009B                     	;# 
   203  009C                     	;# 
   204  009D                     	;# 
   205  009E                     	;# 
   206  010C                     	;# 
   207  010D                     	;# 
   208  010E                     	;# 
   209  010F                     	;# 
   210  0110                     	;# 
   211  0111                     	;# 
   212  0112                     	;# 
   213  0113                     	;# 
   214  0114                     	;# 
   215  0115                     	;# 
   216  0116                     	;# 
   217  0117                     	;# 
   218  0118                     	;# 
   219  0119                     	;# 
   220  011A                     	;# 
   221  011B                     	;# 
   222  011D                     	;# 
   223  011E                     	;# 
   224  011F                     	;# 
   225  018C                     	;# 
   226  0190                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0193                     	;# 
   233  0194                     	;# 
   234  0195                     	;# 
   235  0196                     	;# 
   236  0199                     	;# 
   237  0199                     	;# 
   238  019A                     	;# 
   239  019A                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019C                     	;# 
   245  019C                     	;# 
   246  019D                     	;# 
   247  019D                     	;# 
   248  019E                     	;# 
   249  019E                     	;# 
   250  019F                     	;# 
   251  019F                     	;# 
   252  020D                     	;# 
   253  0211                     	;# 
   254  0211                     	;# 
   255  0212                     	;# 
   256  0212                     	;# 
   257  0213                     	;# 
   258  0213                     	;# 
   259  0214                     	;# 
   260  0214                     	;# 
   261  0215                     	;# 
   262  0215                     	;# 
   263  0215                     	;# 
   264  0216                     	;# 
   265  0216                     	;# 
   266  0217                     	;# 
   267  0217                     	;# 
   268  0219                     	;# 
   269  021A                     	;# 
   270  021B                     	;# 
   271  021C                     	;# 
   272  021D                     	;# 
   273  021E                     	;# 
   274  021F                     	;# 
   275  028C                     	;# 
   276  028D                     	;# 
   277  0291                     	;# 
   278  0291                     	;# 
   279  0292                     	;# 
   280  0293                     	;# 
   281  0294                     	;# 
   282  0295                     	;# 
   283  0295                     	;# 
   284  0296                     	;# 
   285  0298                     	;# 
   286  0298                     	;# 
   287  0299                     	;# 
   288  029A                     	;# 
   289  029B                     	;# 
   290  029C                     	;# 
   291  029C                     	;# 
   292  029D                     	;# 
   293  029E                     	;# 
   294  029F                     	;# 
   295  030C                     	;# 
   296  030D                     	;# 
   297  0311                     	;# 
   298  0311                     	;# 
   299  0312                     	;# 
   300  0313                     	;# 
   301  0314                     	;# 
   302  0315                     	;# 
   303  0315                     	;# 
   304  0316                     	;# 
   305  0318                     	;# 
   306  0318                     	;# 
   307  0319                     	;# 
   308  031A                     	;# 
   309  031C                     	;# 
   310  031C                     	;# 
   311  031D                     	;# 
   312  031E                     	;# 
   313  038C                     	;# 
   314  038D                     	;# 
   315  0394                     	;# 
   316  0395                     	;# 
   317  0396                     	;# 
   318  040C                     	;# 
   319  040D                     	;# 
   320  0415                     	;# 
   321  0416                     	;# 
   322  0417                     	;# 
   323  041C                     	;# 
   324  041D                     	;# 
   325  041E                     	;# 
   326  048D                     	;# 
   327  0491                     	;# 
   328  0492                     	;# 
   329  0493                     	;# 
   330  0493                     	;# 
   331  0494                     	;# 
   332  0495                     	;# 
   333  0496                     	;# 
   334  0497                     	;# 
   335  0791                     	;# 
   336  0792                     	;# 
   337  0793                     	;# 
   338  0794                     	;# 
   339  0795                     	;# 
   340  0798                     	;# 
   341  0799                     	;# 
   342  079A                     	;# 
   343  079B                     	;# 
   344  079C                     	;# 
   345  079D                     	;# 
   346  07A0                     	;# 
   347  07A1                     	;# 
   348  07A2                     	;# 
   349  07A3                     	;# 
   350  07A4                     	;# 
   351  07A5                     	;# 
   352  07A6                     	;# 
   353  07A7                     	;# 
   354  07A8                     	;# 
   355  07A9                     	;# 
   356  07AA                     	;# 
   357  07AB                     	;# 
   358  07AC                     	;# 
   359  07AD                     	;# 
   360  07AE                     	;# 
   361  07AF                     	;# 
   362  07B0                     	;# 
   363  07B1                     	;# 
   364  07B2                     	;# 
   365  07B3                     	;# 
   366  07B4                     	;# 
   367  07B5                     	;# 
   368  07B6                     	;# 
   369  07B7                     	;# 
   370  0FE4                     	;# 
   371  0FE5                     	;# 
   372  0FE6                     	;# 
   373  0FE7                     	;# 
   374  0FE8                     	;# 
   375  0FE9                     	;# 
   376  0FEA                     	;# 
   377  0FEB                     	;# 
   378  0FED                     	;# 
   379  0FEE                     	;# 
   380  0FEF                     	;# 
   381  0000                     	;# 
   382  0001                     	;# 
   383  0002                     	;# 
   384  0003                     	;# 
   385  0004                     	;# 
   386  0005                     	;# 
   387  0006                     	;# 
   388  0007                     	;# 
   389  0008                     	;# 
   390  0009                     	;# 
   391  000A                     	;# 
   392  000B                     	;# 
   393  000C                     	;# 
   394  000D                     	;# 
   395  000E                     	;# 
   396  000F                     	;# 
   397  0010                     	;# 
   398  0011                     	;# 
   399  0012                     	;# 
   400  0013                     	;# 
   401  0014                     	;# 
   402  0015                     	;# 
   403  0016                     	;# 
   404  0016                     	;# 
   405  0017                     	;# 
   406  0018                     	;# 
   407  0019                     	;# 
   408  001A                     	;# 
   409  001B                     	;# 
   410  001C                     	;# 
   411  001E                     	;# 
   412  001F                     	;# 
   413  008C                     	;# 
   414  008D                     	;# 
   415  008E                     	;# 
   416  008F                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0093                     	;# 
   421  0094                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0098                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  010F                     	;# 
   437  0110                     	;# 
   438  0111                     	;# 
   439  0112                     	;# 
   440  0113                     	;# 
   441  0114                     	;# 
   442  0115                     	;# 
   443  0116                     	;# 
   444  0117                     	;# 
   445  0118                     	;# 
   446  0119                     	;# 
   447  011A                     	;# 
   448  011B                     	;# 
   449  011D                     	;# 
   450  011E                     	;# 
   451  011F                     	;# 
   452  018C                     	;# 
   453  0190                     	;# 
   454  0191                     	;# 
   455  0191                     	;# 
   456  0192                     	;# 
   457  0193                     	;# 
   458  0193                     	;# 
   459  0193                     	;# 
   460  0194                     	;# 
   461  0195                     	;# 
   462  0196                     	;# 
   463  0199                     	;# 
   464  0199                     	;# 
   465  019A                     	;# 
   466  019A                     	;# 
   467  019B                     	;# 
   468  019B                     	;# 
   469  019B                     	;# 
   470  019B                     	;# 
   471  019C                     	;# 
   472  019C                     	;# 
   473  019D                     	;# 
   474  019D                     	;# 
   475  019E                     	;# 
   476  019E                     	;# 
   477  019F                     	;# 
   478  019F                     	;# 
   479  020D                     	;# 
   480  0211                     	;# 
   481  0211                     	;# 
   482  0212                     	;# 
   483  0212                     	;# 
   484  0213                     	;# 
   485  0213                     	;# 
   486  0214                     	;# 
   487  0214                     	;# 
   488  0215                     	;# 
   489  0215                     	;# 
   490  0215                     	;# 
   491  0216                     	;# 
   492  0216                     	;# 
   493  0217                     	;# 
   494  0217                     	;# 
   495  0219                     	;# 
   496  021A                     	;# 
   497  021B                     	;# 
   498  021C                     	;# 
   499  021D                     	;# 
   500  021E                     	;# 
   501  021F                     	;# 
   502  028C                     	;# 
   503  028D                     	;# 
   504  0291                     	;# 
   505  0291                     	;# 
   506  0292                     	;# 
   507  0293                     	;# 
   508  0294                     	;# 
   509  0295                     	;# 
   510  0295                     	;# 
   511  0296                     	;# 
   512  0298                     	;# 
   513  0298                     	;# 
   514  0299                     	;# 
   515  029A                     	;# 
   516  029B                     	;# 
   517  029C                     	;# 
   518  029C                     	;# 
   519  029D                     	;# 
   520  029E                     	;# 
   521  029F                     	;# 
   522  030C                     	;# 
   523  030D                     	;# 
   524  0311                     	;# 
   525  0311                     	;# 
   526  0312                     	;# 
   527  0313                     	;# 
   528  0314                     	;# 
   529  0315                     	;# 
   530  0315                     	;# 
   531  0316                     	;# 
   532  0318                     	;# 
   533  0318                     	;# 
   534  0319                     	;# 
   535  031A                     	;# 
   536  031C                     	;# 
   537  031C                     	;# 
   538  031D                     	;# 
   539  031E                     	;# 
   540  038C                     	;# 
   541  038D                     	;# 
   542  0394                     	;# 
   543  0395                     	;# 
   544  0396                     	;# 
   545  040C                     	;# 
   546  040D                     	;# 
   547  0415                     	;# 
   548  0416                     	;# 
   549  0417                     	;# 
   550  041C                     	;# 
   551  041D                     	;# 
   552  041E                     	;# 
   553  048D                     	;# 
   554  0491                     	;# 
   555  0492                     	;# 
   556  0493                     	;# 
   557  0493                     	;# 
   558  0494                     	;# 
   559  0495                     	;# 
   560  0496                     	;# 
   561  0497                     	;# 
   562  0791                     	;# 
   563  0792                     	;# 
   564  0793                     	;# 
   565  0794                     	;# 
   566  0795                     	;# 
   567  0798                     	;# 
   568  0799                     	;# 
   569  079A                     	;# 
   570  079B                     	;# 
   571  079C                     	;# 
   572  079D                     	;# 
   573  07A0                     	;# 
   574  07A1                     	;# 
   575  07A2                     	;# 
   576  07A3                     	;# 
   577  07A4                     	;# 
   578  07A5                     	;# 
   579  07A6                     	;# 
   580  07A7                     	;# 
   581  07A8                     	;# 
   582  07A9                     	;# 
   583  07AA                     	;# 
   584  07AB                     	;# 
   585  07AC                     	;# 
   586  07AD                     	;# 
   587  07AE                     	;# 
   588  07AF                     	;# 
   589  07B0                     	;# 
   590  07B1                     	;# 
   591  07B2                     	;# 
   592  07B3                     	;# 
   593  07B4                     	;# 
   594  07B5                     	;# 
   595  07B6                     	;# 
   596  07B7                     	;# 
   597  0FE4                     	;# 
   598  0FE5                     	;# 
   599  0FE6                     	;# 
   600  0FE7                     	;# 
   601  0FE8                     	;# 
   602  0FE9                     	;# 
   603  0FEA                     	;# 
   604  0FEB                     	;# 
   605  0FED                     	;# 
   606  0FEE                     	;# 
   607  0FEF                     	;# 
   608  0000                     	;# 
   609  0001                     	;# 
   610  0002                     	;# 
   611  0003                     	;# 
   612  0004                     	;# 
   613  0005                     	;# 
   614  0006                     	;# 
   615  0007                     	;# 
   616  0008                     	;# 
   617  0009                     	;# 
   618  000A                     	;# 
   619  000B                     	;# 
   620  000C                     	;# 
   621  000D                     	;# 
   622  000E                     	;# 
   623  000F                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0013                     	;# 
   628  0014                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  001E                     	;# 
   639  001F                     	;# 
   640  008C                     	;# 
   641  008D                     	;# 
   642  008E                     	;# 
   643  008F                     	;# 
   644  0090                     	;# 
   645  0091                     	;# 
   646  0092                     	;# 
   647  0093                     	;# 
   648  0094                     	;# 
   649  0095                     	;# 
   650  0096                     	;# 
   651  0097                     	;# 
   652  0098                     	;# 
   653  0099                     	;# 
   654  009A                     	;# 
   655  009B                     	;# 
   656  009B                     	;# 
   657  009C                     	;# 
   658  009D                     	;# 
   659  009E                     	;# 
   660  010C                     	;# 
   661  010D                     	;# 
   662  010E                     	;# 
   663  010F                     	;# 
   664  0110                     	;# 
   665  0111                     	;# 
   666  0112                     	;# 
   667  0113                     	;# 
   668  0114                     	;# 
   669  0115                     	;# 
   670  0116                     	;# 
   671  0117                     	;# 
   672  0118                     	;# 
   673  0119                     	;# 
   674  011A                     	;# 
   675  011B                     	;# 
   676  011D                     	;# 
   677  011E                     	;# 
   678  011F                     	;# 
   679  018C                     	;# 
   680  0190                     	;# 
   681  0191                     	;# 
   682  0191                     	;# 
   683  0192                     	;# 
   684  0193                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0199                     	;# 
   691  0199                     	;# 
   692  019A                     	;# 
   693  019A                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019C                     	;# 
   699  019C                     	;# 
   700  019D                     	;# 
   701  019D                     	;# 
   702  019E                     	;# 
   703  019E                     	;# 
   704  019F                     	;# 
   705  019F                     	;# 
   706  020D                     	;# 
   707  0211                     	;# 
   708  0211                     	;# 
   709  0212                     	;# 
   710  0212                     	;# 
   711  0213                     	;# 
   712  0213                     	;# 
   713  0214                     	;# 
   714  0214                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0216                     	;# 
   719  0216                     	;# 
   720  0217                     	;# 
   721  0217                     	;# 
   722  0219                     	;# 
   723  021A                     	;# 
   724  021B                     	;# 
   725  021C                     	;# 
   726  021D                     	;# 
   727  021E                     	;# 
   728  021F                     	;# 
   729  028C                     	;# 
   730  028D                     	;# 
   731  0291                     	;# 
   732  0291                     	;# 
   733  0292                     	;# 
   734  0293                     	;# 
   735  0294                     	;# 
   736  0295                     	;# 
   737  0295                     	;# 
   738  0296                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  029B                     	;# 
   744  029C                     	;# 
   745  029C                     	;# 
   746  029D                     	;# 
   747  029E                     	;# 
   748  029F                     	;# 
   749  030C                     	;# 
   750  030D                     	;# 
   751  0311                     	;# 
   752  0311                     	;# 
   753  0312                     	;# 
   754  0313                     	;# 
   755  0314                     	;# 
   756  0315                     	;# 
   757  0315                     	;# 
   758  0316                     	;# 
   759  0318                     	;# 
   760  0318                     	;# 
   761  0319                     	;# 
   762  031A                     	;# 
   763  031C                     	;# 
   764  031C                     	;# 
   765  031D                     	;# 
   766  031E                     	;# 
   767  038C                     	;# 
   768  038D                     	;# 
   769  0394                     	;# 
   770  0395                     	;# 
   771  0396                     	;# 
   772  040C                     	;# 
   773  040D                     	;# 
   774  0415                     	;# 
   775  0416                     	;# 
   776  0417                     	;# 
   777  041C                     	;# 
   778  041D                     	;# 
   779  041E                     	;# 
   780  048D                     	;# 
   781  0491                     	;# 
   782  0492                     	;# 
   783  0493                     	;# 
   784  0493                     	;# 
   785  0494                     	;# 
   786  0495                     	;# 
   787  0496                     	;# 
   788  0497                     	;# 
   789  0791                     	;# 
   790  0792                     	;# 
   791  0793                     	;# 
   792  0794                     	;# 
   793  0795                     	;# 
   794  0798                     	;# 
   795  0799                     	;# 
   796  079A                     	;# 
   797  079B                     	;# 
   798  079C                     	;# 
   799  079D                     	;# 
   800  07A0                     	;# 
   801  07A1                     	;# 
   802  07A2                     	;# 
   803  07A3                     	;# 
   804  07A4                     	;# 
   805  07A5                     	;# 
   806  07A6                     	;# 
   807  07A7                     	;# 
   808  07A8                     	;# 
   809  07A9                     	;# 
   810  07AA                     	;# 
   811  07AB                     	;# 
   812  07AC                     	;# 
   813  07AD                     	;# 
   814  07AE                     	;# 
   815  07AF                     	;# 
   816  07B0                     	;# 
   817  07B1                     	;# 
   818  07B2                     	;# 
   819  07B3                     	;# 
   820  07B4                     	;# 
   821  07B5                     	;# 
   822  07B6                     	;# 
   823  07B7                     	;# 
   824  0FE4                     	;# 
   825  0FE5                     	;# 
   826  0FE6                     	;# 
   827  0FE7                     	;# 
   828  0FE8                     	;# 
   829  0FE9                     	;# 
   830  0FEA                     	;# 
   831  0FEB                     	;# 
   832  0FED                     	;# 
   833  0FEE                     	;# 
   834  0FEF                     	;# 
   835  0000                     	;# 
   836  0001                     	;# 
   837  0002                     	;# 
   838  0003                     	;# 
   839  0004                     	;# 
   840  0005                     	;# 
   841  0006                     	;# 
   842  0007                     	;# 
   843  0008                     	;# 
   844  0009                     	;# 
   845  000A                     	;# 
   846  000B                     	;# 
   847  000C                     	;# 
   848  000D                     	;# 
   849  000E                     	;# 
   850  000F                     	;# 
   851  0010                     	;# 
   852  0011                     	;# 
   853  0012                     	;# 
   854  0013                     	;# 
   855  0014                     	;# 
   856  0015                     	;# 
   857  0016                     	;# 
   858  0016                     	;# 
   859  0017                     	;# 
   860  0018                     	;# 
   861  0019                     	;# 
   862  001A                     	;# 
   863  001B                     	;# 
   864  001C                     	;# 
   865  001E                     	;# 
   866  001F                     	;# 
   867  008C                     	;# 
   868  008D                     	;# 
   869  008E                     	;# 
   870  008F                     	;# 
   871  0090                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0093                     	;# 
   875  0094                     	;# 
   876  0095                     	;# 
   877  0096                     	;# 
   878  0097                     	;# 
   879  0098                     	;# 
   880  0099                     	;# 
   881  009A                     	;# 
   882  009B                     	;# 
   883  009B                     	;# 
   884  009C                     	;# 
   885  009D                     	;# 
   886  009E                     	;# 
   887  010C                     	;# 
   888  010D                     	;# 
   889  010E                     	;# 
   890  010F                     	;# 
   891  0110                     	;# 
   892  0111                     	;# 
   893  0112                     	;# 
   894  0113                     	;# 
   895  0114                     	;# 
   896  0115                     	;# 
   897  0116                     	;# 
   898  0117                     	;# 
   899  0118                     	;# 
   900  0119                     	;# 
   901  011A                     	;# 
   902  011B                     	;# 
   903  011D                     	;# 
   904  011E                     	;# 
   905  011F                     	;# 
   906  018C                     	;# 
   907  0190                     	;# 
   908  0191                     	;# 
   909  0191                     	;# 
   910  0192                     	;# 
   911  0193                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0194                     	;# 
   915  0195                     	;# 
   916  0196                     	;# 
   917  0199                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019A                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019B                     	;# 
   925  019C                     	;# 
   926  019C                     	;# 
   927  019D                     	;# 
   928  019D                     	;# 
   929  019E                     	;# 
   930  019E                     	;# 
   931  019F                     	;# 
   932  019F                     	;# 
   933  020D                     	;# 
   934  0211                     	;# 
   935  0211                     	;# 
   936  0212                     	;# 
   937  0212                     	;# 
   938  0213                     	;# 
   939  0213                     	;# 
   940  0214                     	;# 
   941  0214                     	;# 
   942  0215                     	;# 
   943  0215                     	;# 
   944  0215                     	;# 
   945  0216                     	;# 
   946  0216                     	;# 
   947  0217                     	;# 
   948  0217                     	;# 
   949  0219                     	;# 
   950  021A                     	;# 
   951  021B                     	;# 
   952  021C                     	;# 
   953  021D                     	;# 
   954  021E                     	;# 
   955  021F                     	;# 
   956  028C                     	;# 
   957  028D                     	;# 
   958  0291                     	;# 
   959  0291                     	;# 
   960  0292                     	;# 
   961  0293                     	;# 
   962  0294                     	;# 
   963  0295                     	;# 
   964  0295                     	;# 
   965  0296                     	;# 
   966  0298                     	;# 
   967  0298                     	;# 
   968  0299                     	;# 
   969  029A                     	;# 
   970  029B                     	;# 
   971  029C                     	;# 
   972  029C                     	;# 
   973  029D                     	;# 
   974  029E                     	;# 
   975  029F                     	;# 
   976  030C                     	;# 
   977  030D                     	;# 
   978  0311                     	;# 
   979  0311                     	;# 
   980  0312                     	;# 
   981  0313                     	;# 
   982  0314                     	;# 
   983  0315                     	;# 
   984  0315                     	;# 
   985  0316                     	;# 
   986  0318                     	;# 
   987  0318                     	;# 
   988  0319                     	;# 
   989  031A                     	;# 
   990  031C                     	;# 
   991  031C                     	;# 
   992  031D                     	;# 
   993  031E                     	;# 
   994  038C                     	;# 
   995  038D                     	;# 
   996  0394                     	;# 
   997  0395                     	;# 
   998  0396                     	;# 
   999  040C                     	;# 
  1000  040D                     	;# 
  1001  0415                     	;# 
  1002  0416                     	;# 
  1003  0417                     	;# 
  1004  041C                     	;# 
  1005  041D                     	;# 
  1006  041E                     	;# 
  1007  048D                     	;# 
  1008  0491                     	;# 
  1009  0492                     	;# 
  1010  0493                     	;# 
  1011  0493                     	;# 
  1012  0494                     	;# 
  1013  0495                     	;# 
  1014  0496                     	;# 
  1015  0497                     	;# 
  1016  0791                     	;# 
  1017  0792                     	;# 
  1018  0793                     	;# 
  1019  0794                     	;# 
  1020  0795                     	;# 
  1021  0798                     	;# 
  1022  0799                     	;# 
  1023  079A                     	;# 
  1024  079B                     	;# 
  1025  079C                     	;# 
  1026  079D                     	;# 
  1027  07A0                     	;# 
  1028  07A1                     	;# 
  1029  07A2                     	;# 
  1030  07A3                     	;# 
  1031  07A4                     	;# 
  1032  07A5                     	;# 
  1033  07A6                     	;# 
  1034  07A7                     	;# 
  1035  07A8                     	;# 
  1036  07A9                     	;# 
  1037  07AA                     	;# 
  1038  07AB                     	;# 
  1039  07AC                     	;# 
  1040  07AD                     	;# 
  1041  07AE                     	;# 
  1042  07AF                     	;# 
  1043  07B0                     	;# 
  1044  07B1                     	;# 
  1045  07B2                     	;# 
  1046  07B3                     	;# 
  1047  07B4                     	;# 
  1048  07B5                     	;# 
  1049  07B6                     	;# 
  1050  07B7                     	;# 
  1051  0FE4                     	;# 
  1052  0FE5                     	;# 
  1053  0FE6                     	;# 
  1054  0FE7                     	;# 
  1055  0FE8                     	;# 
  1056  0FE9                     	;# 
  1057  0FEA                     	;# 
  1058  0FEB                     	;# 
  1059  0FED                     	;# 
  1060  0FEE                     	;# 
  1061  0FEF                     	;# 
  1062  0000                     	;# 
  1063  0001                     	;# 
  1064  0002                     	;# 
  1065  0003                     	;# 
  1066  0004                     	;# 
  1067  0005                     	;# 
  1068  0006                     	;# 
  1069  0007                     	;# 
  1070  0008                     	;# 
  1071  0009                     	;# 
  1072  000A                     	;# 
  1073  000B                     	;# 
  1074  000C                     	;# 
  1075  000D                     	;# 
  1076  000E                     	;# 
  1077  000F                     	;# 
  1078  0010                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0013                     	;# 
  1082  0014                     	;# 
  1083  0015                     	;# 
  1084  0016                     	;# 
  1085  0016                     	;# 
  1086  0017                     	;# 
  1087  0018                     	;# 
  1088  0019                     	;# 
  1089  001A                     	;# 
  1090  001B                     	;# 
  1091  001C                     	;# 
  1092  001E                     	;# 
  1093  001F                     	;# 
  1094  008C                     	;# 
  1095  008D                     	;# 
  1096  008E                     	;# 
  1097  008F                     	;# 
  1098  0090                     	;# 
  1099  0091                     	;# 
  1100  0092                     	;# 
  1101  0093                     	;# 
  1102  0094                     	;# 
  1103  0095                     	;# 
  1104  0096                     	;# 
  1105  0097                     	;# 
  1106  0098                     	;# 
  1107  0099                     	;# 
  1108  009A                     	;# 
  1109  009B                     	;# 
  1110  009B                     	;# 
  1111  009C                     	;# 
  1112  009D                     	;# 
  1113  009E                     	;# 
  1114  010C                     	;# 
  1115  010D                     	;# 
  1116  010E                     	;# 
  1117  010F                     	;# 
  1118  0110                     	;# 
  1119  0111                     	;# 
  1120  0112                     	;# 
  1121  0113                     	;# 
  1122  0114                     	;# 
  1123  0115                     	;# 
  1124  0116                     	;# 
  1125  0117                     	;# 
  1126  0118                     	;# 
  1127  0119                     	;# 
  1128  011A                     	;# 
  1129  011B                     	;# 
  1130  011D                     	;# 
  1131  011E                     	;# 
  1132  011F                     	;# 
  1133  018C                     	;# 
  1134  0190                     	;# 
  1135  0191                     	;# 
  1136  0191                     	;# 
  1137  0192                     	;# 
  1138  0193                     	;# 
  1139  0193                     	;# 
  1140  0193                     	;# 
  1141  0194                     	;# 
  1142  0195                     	;# 
  1143  0196                     	;# 
  1144  0199                     	;# 
  1145  0199                     	;# 
  1146  019A                     	;# 
  1147  019A                     	;# 
  1148  019B                     	;# 
  1149  019B                     	;# 
  1150  019B                     	;# 
  1151  019B                     	;# 
  1152  019C                     	;# 
  1153  019C                     	;# 
  1154  019D                     	;# 
  1155  019D                     	;# 
  1156  019E                     	;# 
  1157  019E                     	;# 
  1158  019F                     	;# 
  1159  019F                     	;# 
  1160  020D                     	;# 
  1161  0211                     	;# 
  1162  0211                     	;# 
  1163  0212                     	;# 
  1164  0212                     	;# 
  1165  0213                     	;# 
  1166  0213                     	;# 
  1167  0214                     	;# 
  1168  0214                     	;# 
  1169  0215                     	;# 
  1170  0215                     	;# 
  1171  0215                     	;# 
  1172  0216                     	;# 
  1173  0216                     	;# 
  1174  0217                     	;# 
  1175  0217                     	;# 
  1176  0219                     	;# 
  1177  021A                     	;# 
  1178  021B                     	;# 
  1179  021C                     	;# 
  1180  021D                     	;# 
  1181  021E                     	;# 
  1182  021F                     	;# 
  1183  028C                     	;# 
  1184  028D                     	;# 
  1185  0291                     	;# 
  1186  0291                     	;# 
  1187  0292                     	;# 
  1188  0293                     	;# 
  1189  0294                     	;# 
  1190  0295                     	;# 
  1191  0295                     	;# 
  1192  0296                     	;# 
  1193  0298                     	;# 
  1194  0298                     	;# 
  1195  0299                     	;# 
  1196  029A                     	;# 
  1197  029B                     	;# 
  1198  029C                     	;# 
  1199  029C                     	;# 
  1200  029D                     	;# 
  1201  029E                     	;# 
  1202  029F                     	;# 
  1203  030C                     	;# 
  1204  030D                     	;# 
  1205  0311                     	;# 
  1206  0311                     	;# 
  1207  0312                     	;# 
  1208  0313                     	;# 
  1209  0314                     	;# 
  1210  0315                     	;# 
  1211  0315                     	;# 
  1212  0316                     	;# 
  1213  0318                     	;# 
  1214  0318                     	;# 
  1215  0319                     	;# 
  1216  031A                     	;# 
  1217  031C                     	;# 
  1218  031C                     	;# 
  1219  031D                     	;# 
  1220  031E                     	;# 
  1221  038C                     	;# 
  1222  038D                     	;# 
  1223  0394                     	;# 
  1224  0395                     	;# 
  1225  0396                     	;# 
  1226  040C                     	;# 
  1227  040D                     	;# 
  1228  0415                     	;# 
  1229  0416                     	;# 
  1230  0417                     	;# 
  1231  041C                     	;# 
  1232  041D                     	;# 
  1233  041E                     	;# 
  1234  048D                     	;# 
  1235  0491                     	;# 
  1236  0492                     	;# 
  1237  0493                     	;# 
  1238  0493                     	;# 
  1239  0494                     	;# 
  1240  0495                     	;# 
  1241  0496                     	;# 
  1242  0497                     	;# 
  1243  0791                     	;# 
  1244  0792                     	;# 
  1245  0793                     	;# 
  1246  0794                     	;# 
  1247  0795                     	;# 
  1248  0798                     	;# 
  1249  0799                     	;# 
  1250  079A                     	;# 
  1251  079B                     	;# 
  1252  079C                     	;# 
  1253  079D                     	;# 
  1254  07A0                     	;# 
  1255  07A1                     	;# 
  1256  07A2                     	;# 
  1257  07A3                     	;# 
  1258  07A4                     	;# 
  1259  07A5                     	;# 
  1260  07A6                     	;# 
  1261  07A7                     	;# 
  1262  07A8                     	;# 
  1263  07A9                     	;# 
  1264  07AA                     	;# 
  1265  07AB                     	;# 
  1266  07AC                     	;# 
  1267  07AD                     	;# 
  1268  07AE                     	;# 
  1269  07AF                     	;# 
  1270  07B0                     	;# 
  1271  07B1                     	;# 
  1272  07B2                     	;# 
  1273  07B3                     	;# 
  1274  07B4                     	;# 
  1275  07B5                     	;# 
  1276  07B6                     	;# 
  1277  07B7                     	;# 
  1278  0FE4                     	;# 
  1279  0FE5                     	;# 
  1280  0FE6                     	;# 
  1281  0FE7                     	;# 
  1282  0FE8                     	;# 
  1283  0FE9                     	;# 
  1284  0FEA                     	;# 
  1285  0FEB                     	;# 
  1286  0FED                     	;# 
  1287  0FEE                     	;# 
  1288  0FEF                     	;# 
  1289  0000                     	;# 
  1290  0001                     	;# 
  1291  0002                     	;# 
  1292  0003                     	;# 
  1293  0004                     	;# 
  1294  0005                     	;# 
  1295  0006                     	;# 
  1296  0007                     	;# 
  1297  0008                     	;# 
  1298  0009                     	;# 
  1299  000A                     	;# 
  1300  000B                     	;# 
  1301  000C                     	;# 
  1302  000D                     	;# 
  1303  000E                     	;# 
  1304  000F                     	;# 
  1305  0010                     	;# 
  1306  0011                     	;# 
  1307  0012                     	;# 
  1308  0013                     	;# 
  1309  0014                     	;# 
  1310  0015                     	;# 
  1311  0016                     	;# 
  1312  0016                     	;# 
  1313  0017                     	;# 
  1314  0018                     	;# 
  1315  0019                     	;# 
  1316  001A                     	;# 
  1317  001B                     	;# 
  1318  001C                     	;# 
  1319  001E                     	;# 
  1320  001F                     	;# 
  1321  008C                     	;# 
  1322  008D                     	;# 
  1323  008E                     	;# 
  1324  008F                     	;# 
  1325  0090                     	;# 
  1326  0091                     	;# 
  1327  0092                     	;# 
  1328  0093                     	;# 
  1329  0094                     	;# 
  1330  0095                     	;# 
  1331  0096                     	;# 
  1332  0097                     	;# 
  1333  0098                     	;# 
  1334  0099                     	;# 
  1335  009A                     	;# 
  1336  009B                     	;# 
  1337  009B                     	;# 
  1338  009C                     	;# 
  1339  009D                     	;# 
  1340  009E                     	;# 
  1341  010C                     	;# 
  1342  010D                     	;# 
  1343  010E                     	;# 
  1344  010F                     	;# 
  1345  0110                     	;# 
  1346  0111                     	;# 
  1347  0112                     	;# 
  1348  0113                     	;# 
  1349  0114                     	;# 
  1350  0115                     	;# 
  1351  0116                     	;# 
  1352  0117                     	;# 
  1353  0118                     	;# 
  1354  0119                     	;# 
  1355  011A                     	;# 
  1356  011B                     	;# 
  1357  011D                     	;# 
  1358  011E                     	;# 
  1359  011F                     	;# 
  1360  018C                     	;# 
  1361  0190                     	;# 
  1362  0191                     	;# 
  1363  0191                     	;# 
  1364  0192                     	;# 
  1365  0193                     	;# 
  1366  0193                     	;# 
  1367  0193                     	;# 
  1368  0194                     	;# 
  1369  0195                     	;# 
  1370  0196                     	;# 
  1371  0199                     	;# 
  1372  0199                     	;# 
  1373  019A                     	;# 
  1374  019A                     	;# 
  1375  019B                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019C                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019D                     	;# 
  1383  019E                     	;# 
  1384  019E                     	;# 
  1385  019F                     	;# 
  1386  019F                     	;# 
  1387  020D                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0219                     	;# 
  1404  021A                     	;# 
  1405  021B                     	;# 
  1406  021C                     	;# 
  1407  021D                     	;# 
  1408  021E                     	;# 
  1409  021F                     	;# 
  1410  028C                     	;# 
  1411  028D                     	;# 
  1412  0291                     	;# 
  1413  0291                     	;# 
  1414  0292                     	;# 
  1415  0293                     	;# 
  1416  0294                     	;# 
  1417  0295                     	;# 
  1418  0295                     	;# 
  1419  0296                     	;# 
  1420  0298                     	;# 
  1421  0298                     	;# 
  1422  0299                     	;# 
  1423  029A                     	;# 
  1424  029B                     	;# 
  1425  029C                     	;# 
  1426  029C                     	;# 
  1427  029D                     	;# 
  1428  029E                     	;# 
  1429  029F                     	;# 
  1430  030C                     	;# 
  1431  030D                     	;# 
  1432  0311                     	;# 
  1433  0311                     	;# 
  1434  0312                     	;# 
  1435  0313                     	;# 
  1436  0314                     	;# 
  1437  0315                     	;# 
  1438  0315                     	;# 
  1439  0316                     	;# 
  1440  0318                     	;# 
  1441  0318                     	;# 
  1442  0319                     	;# 
  1443  031A                     	;# 
  1444  031C                     	;# 
  1445  031C                     	;# 
  1446  031D                     	;# 
  1447  031E                     	;# 
  1448  038C                     	;# 
  1449  038D                     	;# 
  1450  0394                     	;# 
  1451  0395                     	;# 
  1452  0396                     	;# 
  1453  040C                     	;# 
  1454  040D                     	;# 
  1455  0415                     	;# 
  1456  0416                     	;# 
  1457  0417                     	;# 
  1458  041C                     	;# 
  1459  041D                     	;# 
  1460  041E                     	;# 
  1461  048D                     	;# 
  1462  0491                     	;# 
  1463  0492                     	;# 
  1464  0493                     	;# 
  1465  0493                     	;# 
  1466  0494                     	;# 
  1467  0495                     	;# 
  1468  0496                     	;# 
  1469  0497                     	;# 
  1470  0791                     	;# 
  1471  0792                     	;# 
  1472  0793                     	;# 
  1473  0794                     	;# 
  1474  0795                     	;# 
  1475  0798                     	;# 
  1476  0799                     	;# 
  1477  079A                     	;# 
  1478  079B                     	;# 
  1479  079C                     	;# 
  1480  079D                     	;# 
  1481  07A0                     	;# 
  1482  07A1                     	;# 
  1483  07A2                     	;# 
  1484  07A3                     	;# 
  1485  07A4                     	;# 
  1486  07A5                     	;# 
  1487  07A6                     	;# 
  1488  07A7                     	;# 
  1489  07A8                     	;# 
  1490  07A9                     	;# 
  1491  07AA                     	;# 
  1492  07AB                     	;# 
  1493  07AC                     	;# 
  1494  07AD                     	;# 
  1495  07AE                     	;# 
  1496  07AF                     	;# 
  1497  07B0                     	;# 
  1498  07B1                     	;# 
  1499  07B2                     	;# 
  1500  07B3                     	;# 
  1501  07B4                     	;# 
  1502  07B5                     	;# 
  1503  07B6                     	;# 
  1504  07B7                     	;# 
  1505  0FE4                     	;# 
  1506  0FE5                     	;# 
  1507  0FE6                     	;# 
  1508  0FE7                     	;# 
  1509  0FE8                     	;# 
  1510  0FE9                     	;# 
  1511  0FEA                     	;# 
  1512  0FEB                     	;# 
  1513  0FED                     	;# 
  1514  0FEE                     	;# 
  1515  0FEF                     	;# 
  1516  0000                     	;# 
  1517  0001                     	;# 
  1518  0002                     	;# 
  1519  0003                     	;# 
  1520  0004                     	;# 
  1521  0005                     	;# 
  1522  0006                     	;# 
  1523  0007                     	;# 
  1524  0008                     	;# 
  1525  0009                     	;# 
  1526  000A                     	;# 
  1527  000B                     	;# 
  1528  000C                     	;# 
  1529  000D                     	;# 
  1530  000E                     	;# 
  1531  000F                     	;# 
  1532  0010                     	;# 
  1533  0011                     	;# 
  1534  0012                     	;# 
  1535  0013                     	;# 
  1536  0014                     	;# 
  1537  0015                     	;# 
  1538  0016                     	;# 
  1539  0016                     	;# 
  1540  0017                     	;# 
  1541  0018                     	;# 
  1542  0019                     	;# 
  1543  001A                     	;# 
  1544  001B                     	;# 
  1545  001C                     	;# 
  1546  001E                     	;# 
  1547  001F                     	;# 
  1548  008C                     	;# 
  1549  008D                     	;# 
  1550  008E                     	;# 
  1551  008F                     	;# 
  1552  0090                     	;# 
  1553  0091                     	;# 
  1554  0092                     	;# 
  1555  0093                     	;# 
  1556  0094                     	;# 
  1557  0095                     	;# 
  1558  0096                     	;# 
  1559  0097                     	;# 
  1560  0098                     	;# 
  1561  0099                     	;# 
  1562  009A                     	;# 
  1563  009B                     	;# 
  1564  009B                     	;# 
  1565  009C                     	;# 
  1566  009D                     	;# 
  1567  009E                     	;# 
  1568  010C                     	;# 
  1569  010D                     	;# 
  1570  010E                     	;# 
  1571  010F                     	;# 
  1572  0110                     	;# 
  1573  0111                     	;# 
  1574  0112                     	;# 
  1575  0113                     	;# 
  1576  0114                     	;# 
  1577  0115                     	;# 
  1578  0116                     	;# 
  1579  0117                     	;# 
  1580  0118                     	;# 
  1581  0119                     	;# 
  1582  011A                     	;# 
  1583  011B                     	;# 
  1584  011D                     	;# 
  1585  011E                     	;# 
  1586  011F                     	;# 
  1587  018C                     	;# 
  1588  0190                     	;# 
  1589  0191                     	;# 
  1590  0191                     	;# 
  1591  0192                     	;# 
  1592  0193                     	;# 
  1593  0193                     	;# 
  1594  0193                     	;# 
  1595  0194                     	;# 
  1596  0195                     	;# 
  1597  0196                     	;# 
  1598  0199                     	;# 
  1599  0199                     	;# 
  1600  019A                     	;# 
  1601  019A                     	;# 
  1602  019B                     	;# 
  1603  019B                     	;# 
  1604  019B                     	;# 
  1605  019B                     	;# 
  1606  019C                     	;# 
  1607  019C                     	;# 
  1608  019D                     	;# 
  1609  019D                     	;# 
  1610  019E                     	;# 
  1611  019E                     	;# 
  1612  019F                     	;# 
  1613  019F                     	;# 
  1614  020D                     	;# 
  1615  0211                     	;# 
  1616  0211                     	;# 
  1617  0212                     	;# 
  1618  0212                     	;# 
  1619  0213                     	;# 
  1620  0213                     	;# 
  1621  0214                     	;# 
  1622  0214                     	;# 
  1623  0215                     	;# 
  1624  0215                     	;# 
  1625  0215                     	;# 
  1626  0216                     	;# 
  1627  0216                     	;# 
  1628  0217                     	;# 
  1629  0217                     	;# 
  1630  0219                     	;# 
  1631  021A                     	;# 
  1632  021B                     	;# 
  1633  021C                     	;# 
  1634  021D                     	;# 
  1635  021E                     	;# 
  1636  021F                     	;# 
  1637  028C                     	;# 
  1638  028D                     	;# 
  1639  0291                     	;# 
  1640  0291                     	;# 
  1641  0292                     	;# 
  1642  0293                     	;# 
  1643  0294                     	;# 
  1644  0295                     	;# 
  1645  0295                     	;# 
  1646  0296                     	;# 
  1647  0298                     	;# 
  1648  0298                     	;# 
  1649  0299                     	;# 
  1650  029A                     	;# 
  1651  029B                     	;# 
  1652  029C                     	;# 
  1653  029C                     	;# 
  1654  029D                     	;# 
  1655  029E                     	;# 
  1656  029F                     	;# 
  1657  030C                     	;# 
  1658  030D                     	;# 
  1659  0311                     	;# 
  1660  0311                     	;# 
  1661  0312                     	;# 
  1662  0313                     	;# 
  1663  0314                     	;# 
  1664  0315                     	;# 
  1665  0315                     	;# 
  1666  0316                     	;# 
  1667  0318                     	;# 
  1668  0318                     	;# 
  1669  0319                     	;# 
  1670  031A                     	;# 
  1671  031C                     	;# 
  1672  031C                     	;# 
  1673  031D                     	;# 
  1674  031E                     	;# 
  1675  038C                     	;# 
  1676  038D                     	;# 
  1677  0394                     	;# 
  1678  0395                     	;# 
  1679  0396                     	;# 
  1680  040C                     	;# 
  1681  040D                     	;# 
  1682  0415                     	;# 
  1683  0416                     	;# 
  1684  0417                     	;# 
  1685  041C                     	;# 
  1686  041D                     	;# 
  1687  041E                     	;# 
  1688  048D                     	;# 
  1689  0491                     	;# 
  1690  0492                     	;# 
  1691  0493                     	;# 
  1692  0493                     	;# 
  1693  0494                     	;# 
  1694  0495                     	;# 
  1695  0496                     	;# 
  1696  0497                     	;# 
  1697  0791                     	;# 
  1698  0792                     	;# 
  1699  0793                     	;# 
  1700  0794                     	;# 
  1701  0795                     	;# 
  1702  0798                     	;# 
  1703  0799                     	;# 
  1704  079A                     	;# 
  1705  079B                     	;# 
  1706  079C                     	;# 
  1707  079D                     	;# 
  1708  07A0                     	;# 
  1709  07A1                     	;# 
  1710  07A2                     	;# 
  1711  07A3                     	;# 
  1712  07A4                     	;# 
  1713  07A5                     	;# 
  1714  07A6                     	;# 
  1715  07A7                     	;# 
  1716  07A8                     	;# 
  1717  07A9                     	;# 
  1718  07AA                     	;# 
  1719  07AB                     	;# 
  1720  07AC                     	;# 
  1721  07AD                     	;# 
  1722  07AE                     	;# 
  1723  07AF                     	;# 
  1724  07B0                     	;# 
  1725  07B1                     	;# 
  1726  07B2                     	;# 
  1727  07B3                     	;# 
  1728  07B4                     	;# 
  1729  07B5                     	;# 
  1730  07B6                     	;# 
  1731  07B7                     	;# 
  1732  0FE4                     	;# 
  1733  0FE5                     	;# 
  1734  0FE6                     	;# 
  1735  0FE7                     	;# 
  1736  0FE8                     	;# 
  1737  0FE9                     	;# 
  1738  0FEA                     	;# 
  1739  0FEB                     	;# 
  1740  0FED                     	;# 
  1741  0FEE                     	;# 
  1742  0FEF                     	;# 
  1743  0000                     	;# 
  1744  0001                     	;# 
  1745  0002                     	;# 
  1746  0003                     	;# 
  1747  0004                     	;# 
  1748  0005                     	;# 
  1749  0006                     	;# 
  1750  0007                     	;# 
  1751  0008                     	;# 
  1752  0009                     	;# 
  1753  000A                     	;# 
  1754  000B                     	;# 
  1755  000C                     	;# 
  1756  000D                     	;# 
  1757  000E                     	;# 
  1758  000F                     	;# 
  1759  0010                     	;# 
  1760  0011                     	;# 
  1761  0012                     	;# 
  1762  0013                     	;# 
  1763  0014                     	;# 
  1764  0015                     	;# 
  1765  0016                     	;# 
  1766  0016                     	;# 
  1767  0017                     	;# 
  1768  0018                     	;# 
  1769  0019                     	;# 
  1770  001A                     	;# 
  1771  001B                     	;# 
  1772  001C                     	;# 
  1773  001E                     	;# 
  1774  001F                     	;# 
  1775  008C                     	;# 
  1776  008D                     	;# 
  1777  008E                     	;# 
  1778  008F                     	;# 
  1779  0090                     	;# 
  1780  0091                     	;# 
  1781  0092                     	;# 
  1782  0093                     	;# 
  1783  0094                     	;# 
  1784  0095                     	;# 
  1785  0096                     	;# 
  1786  0097                     	;# 
  1787  0098                     	;# 
  1788  0099                     	;# 
  1789  009A                     	;# 
  1790  009B                     	;# 
  1791  009B                     	;# 
  1792  009C                     	;# 
  1793  009D                     	;# 
  1794  009E                     	;# 
  1795  010C                     	;# 
  1796  010D                     	;# 
  1797  010E                     	;# 
  1798  010F                     	;# 
  1799  0110                     	;# 
  1800  0111                     	;# 
  1801  0112                     	;# 
  1802  0113                     	;# 
  1803  0114                     	;# 
  1804  0115                     	;# 
  1805  0116                     	;# 
  1806  0117                     	;# 
  1807  0118                     	;# 
  1808  0119                     	;# 
  1809  011A                     	;# 
  1810  011B                     	;# 
  1811  011D                     	;# 
  1812  011E                     	;# 
  1813  011F                     	;# 
  1814  018C                     	;# 
  1815  0190                     	;# 
  1816  0191                     	;# 
  1817  0191                     	;# 
  1818  0192                     	;# 
  1819  0193                     	;# 
  1820  0193                     	;# 
  1821  0193                     	;# 
  1822  0194                     	;# 
  1823  0195                     	;# 
  1824  0196                     	;# 
  1825  0199                     	;# 
  1826  0199                     	;# 
  1827  019A                     	;# 
  1828  019A                     	;# 
  1829  019B                     	;# 
  1830  019B                     	;# 
  1831  019B                     	;# 
  1832  019B                     	;# 
  1833  019C                     	;# 
  1834  019C                     	;# 
  1835  019D                     	;# 
  1836  019D                     	;# 
  1837  019E                     	;# 
  1838  019E                     	;# 
  1839  019F                     	;# 
  1840  019F                     	;# 
  1841  020D                     	;# 
  1842  0211                     	;# 
  1843  0211                     	;# 
  1844  0212                     	;# 
  1845  0212                     	;# 
  1846  0213                     	;# 
  1847  0213                     	;# 
  1848  0214                     	;# 
  1849  0214                     	;# 
  1850  0215                     	;# 
  1851  0215                     	;# 
  1852  0215                     	;# 
  1853  0216                     	;# 
  1854  0216                     	;# 
  1855  0217                     	;# 
  1856  0217                     	;# 
  1857  0219                     	;# 
  1858  021A                     	;# 
  1859  021B                     	;# 
  1860  021C                     	;# 
  1861  021D                     	;# 
  1862  021E                     	;# 
  1863  021F                     	;# 
  1864  028C                     	;# 
  1865  028D                     	;# 
  1866  0291                     	;# 
  1867  0291                     	;# 
  1868  0292                     	;# 
  1869  0293                     	;# 
  1870  0294                     	;# 
  1871  0295                     	;# 
  1872  0295                     	;# 
  1873  0296                     	;# 
  1874  0298                     	;# 
  1875  0298                     	;# 
  1876  0299                     	;# 
  1877  029A                     	;# 
  1878  029B                     	;# 
  1879  029C                     	;# 
  1880  029C                     	;# 
  1881  029D                     	;# 
  1882  029E                     	;# 
  1883  029F                     	;# 
  1884  030C                     	;# 
  1885  030D                     	;# 
  1886  0311                     	;# 
  1887  0311                     	;# 
  1888  0312                     	;# 
  1889  0313                     	;# 
  1890  0314                     	;# 
  1891  0315                     	;# 
  1892  0315                     	;# 
  1893  0316                     	;# 
  1894  0318                     	;# 
  1895  0318                     	;# 
  1896  0319                     	;# 
  1897  031A                     	;# 
  1898  031C                     	;# 
  1899  031C                     	;# 
  1900  031D                     	;# 
  1901  031E                     	;# 
  1902  038C                     	;# 
  1903  038D                     	;# 
  1904  0394                     	;# 
  1905  0395                     	;# 
  1906  0396                     	;# 
  1907  040C                     	;# 
  1908  040D                     	;# 
  1909  0415                     	;# 
  1910  0416                     	;# 
  1911  0417                     	;# 
  1912  041C                     	;# 
  1913  041D                     	;# 
  1914  041E                     	;# 
  1915  048D                     	;# 
  1916  0491                     	;# 
  1917  0492                     	;# 
  1918  0493                     	;# 
  1919  0493                     	;# 
  1920  0494                     	;# 
  1921  0495                     	;# 
  1922  0496                     	;# 
  1923  0497                     	;# 
  1924  0791                     	;# 
  1925  0792                     	;# 
  1926  0793                     	;# 
  1927  0794                     	;# 
  1928  0795                     	;# 
  1929  0798                     	;# 
  1930  0799                     	;# 
  1931  079A                     	;# 
  1932  079B                     	;# 
  1933  079C                     	;# 
  1934  079D                     	;# 
  1935  07A0                     	;# 
  1936  07A1                     	;# 
  1937  07A2                     	;# 
  1938  07A3                     	;# 
  1939  07A4                     	;# 
  1940  07A5                     	;# 
  1941  07A6                     	;# 
  1942  07A7                     	;# 
  1943  07A8                     	;# 
  1944  07A9                     	;# 
  1945  07AA                     	;# 
  1946  07AB                     	;# 
  1947  07AC                     	;# 
  1948  07AD                     	;# 
  1949  07AE                     	;# 
  1950  07AF                     	;# 
  1951  07B0                     	;# 
  1952  07B1                     	;# 
  1953  07B2                     	;# 
  1954  07B3                     	;# 
  1955  07B4                     	;# 
  1956  07B5                     	;# 
  1957  07B6                     	;# 
  1958  07B7                     	;# 
  1959  0FE4                     	;# 
  1960  0FE5                     	;# 
  1961  0FE6                     	;# 
  1962  0FE7                     	;# 
  1963  0FE8                     	;# 
  1964  0FE9                     	;# 
  1965  0FEA                     	;# 
  1966  0FEB                     	;# 
  1967  0FED                     	;# 
  1968  0FEE                     	;# 
  1969  0FEF                     	;# 
  1970  0000                     	;# 
  1971  0001                     	;# 
  1972  0002                     	;# 
  1973  0003                     	;# 
  1974  0004                     	;# 
  1975  0005                     	;# 
  1976  0006                     	;# 
  1977  0007                     	;# 
  1978  0008                     	;# 
  1979  0009                     	;# 
  1980  000A                     	;# 
  1981  000B                     	;# 
  1982  000C                     	;# 
  1983  000D                     	;# 
  1984  000E                     	;# 
  1985  000F                     	;# 
  1986  0010                     	;# 
  1987  0011                     	;# 
  1988  0012                     	;# 
  1989  0013                     	;# 
  1990  0014                     	;# 
  1991  0015                     	;# 
  1992  0016                     	;# 
  1993  0016                     	;# 
  1994  0017                     	;# 
  1995  0018                     	;# 
  1996  0019                     	;# 
  1997  001A                     	;# 
  1998  001B                     	;# 
  1999  001C                     	;# 
  2000  001E                     	;# 
  2001  001F                     	;# 
  2002  008C                     	;# 
  2003  008D                     	;# 
  2004  008E                     	;# 
  2005  008F                     	;# 
  2006  0090                     	;# 
  2007  0091                     	;# 
  2008  0092                     	;# 
  2009  0093                     	;# 
  2010  0094                     	;# 
  2011  0095                     	;# 
  2012  0096                     	;# 
  2013  0097                     	;# 
  2014  0098                     	;# 
  2015  0099                     	;# 
  2016  009A                     	;# 
  2017  009B                     	;# 
  2018  009B                     	;# 
  2019  009C                     	;# 
  2020  009D                     	;# 
  2021  009E                     	;# 
  2022  010C                     	;# 
  2023  010D                     	;# 
  2024  010E                     	;# 
  2025  010F                     	;# 
  2026  0110                     	;# 
  2027  0111                     	;# 
  2028  0112                     	;# 
  2029  0113                     	;# 
  2030  0114                     	;# 
  2031  0115                     	;# 
  2032  0116                     	;# 
  2033  0117                     	;# 
  2034  0118                     	;# 
  2035  0119                     	;# 
  2036  011A                     	;# 
  2037  011B                     	;# 
  2038  011D                     	;# 
  2039  011E                     	;# 
  2040  011F                     	;# 
  2041  018C                     	;# 
  2042  0190                     	;# 
  2043  0191                     	;# 
  2044  0191                     	;# 
  2045  0192                     	;# 
  2046  0193                     	;# 
  2047  0193                     	;# 
  2048  0193                     	;# 
  2049  0194                     	;# 
  2050  0195                     	;# 
  2051  0196                     	;# 
  2052  0199                     	;# 
  2053  0199                     	;# 
  2054  019A                     	;# 
  2055  019A                     	;# 
  2056  019B                     	;# 
  2057  019B                     	;# 
  2058  019B                     	;# 
  2059  019B                     	;# 
  2060  019C                     	;# 
  2061  019C                     	;# 
  2062  019D                     	;# 
  2063  019D                     	;# 
  2064  019E                     	;# 
  2065  019E                     	;# 
  2066  019F                     	;# 
  2067  019F                     	;# 
  2068  020D                     	;# 
  2069  0211                     	;# 
  2070  0211                     	;# 
  2071  0212                     	;# 
  2072  0212                     	;# 
  2073  0213                     	;# 
  2074  0213                     	;# 
  2075  0214                     	;# 
  2076  0214                     	;# 
  2077  0215                     	;# 
  2078  0215                     	;# 
  2079  0215                     	;# 
  2080  0216                     	;# 
  2081  0216                     	;# 
  2082  0217                     	;# 
  2083  0217                     	;# 
  2084  0219                     	;# 
  2085  021A                     	;# 
  2086  021B                     	;# 
  2087  021C                     	;# 
  2088  021D                     	;# 
  2089  021E                     	;# 
  2090  021F                     	;# 
  2091  028C                     	;# 
  2092  028D                     	;# 
  2093  0291                     	;# 
  2094  0291                     	;# 
  2095  0292                     	;# 
  2096  0293                     	;# 
  2097  0294                     	;# 
  2098  0295                     	;# 
  2099  0295                     	;# 
  2100  0296                     	;# 
  2101  0298                     	;# 
  2102  0298                     	;# 
  2103  0299                     	;# 
  2104  029A                     	;# 
  2105  029B                     	;# 
  2106  029C                     	;# 
  2107  029C                     	;# 
  2108  029D                     	;# 
  2109  029E                     	;# 
  2110  029F                     	;# 
  2111  030C                     	;# 
  2112  030D                     	;# 
  2113  0311                     	;# 
  2114  0311                     	;# 
  2115  0312                     	;# 
  2116  0313                     	;# 
  2117  0314                     	;# 
  2118  0315                     	;# 
  2119  0315                     	;# 
  2120  0316                     	;# 
  2121  0318                     	;# 
  2122  0318                     	;# 
  2123  0319                     	;# 
  2124  031A                     	;# 
  2125  031C                     	;# 
  2126  031C                     	;# 
  2127  031D                     	;# 
  2128  031E                     	;# 
  2129  038C                     	;# 
  2130  038D                     	;# 
  2131  0394                     	;# 
  2132  0395                     	;# 
  2133  0396                     	;# 
  2134  040C                     	;# 
  2135  040D                     	;# 
  2136  0415                     	;# 
  2137  0416                     	;# 
  2138  0417                     	;# 
  2139  041C                     	;# 
  2140  041D                     	;# 
  2141  041E                     	;# 
  2142  048D                     	;# 
  2143  0491                     	;# 
  2144  0492                     	;# 
  2145  0493                     	;# 
  2146  0493                     	;# 
  2147  0494                     	;# 
  2148  0495                     	;# 
  2149  0496                     	;# 
  2150  0497                     	;# 
  2151  0791                     	;# 
  2152  0792                     	;# 
  2153  0793                     	;# 
  2154  0794                     	;# 
  2155  0795                     	;# 
  2156  0798                     	;# 
  2157  0799                     	;# 
  2158  079A                     	;# 
  2159  079B                     	;# 
  2160  079C                     	;# 
  2161  079D                     	;# 
  2162  07A0                     	;# 
  2163  07A1                     	;# 
  2164  07A2                     	;# 
  2165  07A3                     	;# 
  2166  07A4                     	;# 
  2167  07A5                     	;# 
  2168  07A6                     	;# 
  2169  07A7                     	;# 
  2170  07A8                     	;# 
  2171  07A9                     	;# 
  2172  07AA                     	;# 
  2173  07AB                     	;# 
  2174  07AC                     	;# 
  2175  07AD                     	;# 
  2176  07AE                     	;# 
  2177  07AF                     	;# 
  2178  07B0                     	;# 
  2179  07B1                     	;# 
  2180  07B2                     	;# 
  2181  07B3                     	;# 
  2182  07B4                     	;# 
  2183  07B5                     	;# 
  2184  07B6                     	;# 
  2185  07B7                     	;# 
  2186  0FE4                     	;# 
  2187  0FE5                     	;# 
  2188  0FE6                     	;# 
  2189  0FE7                     	;# 
  2190  0FE8                     	;# 
  2191  0FE9                     	;# 
  2192  0FEA                     	;# 
  2193  0FEB                     	;# 
  2194  0FED                     	;# 
  2195  0FEE                     	;# 
  2196  0FEF                     	;# 
  2197  0000                     	;# 
  2198  0001                     	;# 
  2199  0002                     	;# 
  2200  0003                     	;# 
  2201  0004                     	;# 
  2202  0005                     	;# 
  2203  0006                     	;# 
  2204  0007                     	;# 
  2205  0008                     	;# 
  2206  0009                     	;# 
  2207  000A                     	;# 
  2208  000B                     	;# 
  2209  000C                     	;# 
  2210  000D                     	;# 
  2211  000E                     	;# 
  2212  000F                     	;# 
  2213  0010                     	;# 
  2214  0011                     	;# 
  2215  0012                     	;# 
  2216  0013                     	;# 
  2217  0014                     	;# 
  2218  0015                     	;# 
  2219  0016                     	;# 
  2220  0016                     	;# 
  2221  0017                     	;# 
  2222  0018                     	;# 
  2223  0019                     	;# 
  2224  001A                     	;# 
  2225  001B                     	;# 
  2226  001C                     	;# 
  2227  001E                     	;# 
  2228  001F                     	;# 
  2229  008C                     	;# 
  2230  008D                     	;# 
  2231  008E                     	;# 
  2232  008F                     	;# 
  2233  0090                     	;# 
  2234  0091                     	;# 
  2235  0092                     	;# 
  2236  0093                     	;# 
  2237  0094                     	;# 
  2238  0095                     	;# 
  2239  0096                     	;# 
  2240  0097                     	;# 
  2241  0098                     	;# 
  2242  0099                     	;# 
  2243  009A                     	;# 
  2244  009B                     	;# 
  2245  009B                     	;# 
  2246  009C                     	;# 
  2247  009D                     	;# 
  2248  009E                     	;# 
  2249  010C                     	;# 
  2250  010D                     	;# 
  2251  010E                     	;# 
  2252  010F                     	;# 
  2253  0110                     	;# 
  2254  0111                     	;# 
  2255  0112                     	;# 
  2256  0113                     	;# 
  2257  0114                     	;# 
  2258  0115                     	;# 
  2259  0116                     	;# 
  2260  0117                     	;# 
  2261  0118                     	;# 
  2262  0119                     	;# 
  2263  011A                     	;# 
  2264  011B                     	;# 
  2265  011D                     	;# 
  2266  011E                     	;# 
  2267  011F                     	;# 
  2268  018C                     	;# 
  2269  0190                     	;# 
  2270  0191                     	;# 
  2271  0191                     	;# 
  2272  0192                     	;# 
  2273  0193                     	;# 
  2274  0193                     	;# 
  2275  0193                     	;# 
  2276  0194                     	;# 
  2277  0195                     	;# 
  2278  0196                     	;# 
  2279  0199                     	;# 
  2280  0199                     	;# 
  2281  019A                     	;# 
  2282  019A                     	;# 
  2283  019B                     	;# 
  2284  019B                     	;# 
  2285  019B                     	;# 
  2286  019B                     	;# 
  2287  019C                     	;# 
  2288  019C                     	;# 
  2289  019D                     	;# 
  2290  019D                     	;# 
  2291  019E                     	;# 
  2292  019E                     	;# 
  2293  019F                     	;# 
  2294  019F                     	;# 
  2295  020D                     	;# 
  2296  0211                     	;# 
  2297  0211                     	;# 
  2298  0212                     	;# 
  2299  0212                     	;# 
  2300  0213                     	;# 
  2301  0213                     	;# 
  2302  0214                     	;# 
  2303  0214                     	;# 
  2304  0215                     	;# 
  2305  0215                     	;# 
  2306  0215                     	;# 
  2307  0216                     	;# 
  2308  0216                     	;# 
  2309  0217                     	;# 
  2310  0217                     	;# 
  2311  0219                     	;# 
  2312  021A                     	;# 
  2313  021B                     	;# 
  2314  021C                     	;# 
  2315  021D                     	;# 
  2316  021E                     	;# 
  2317  021F                     	;# 
  2318  028C                     	;# 
  2319  028D                     	;# 
  2320  0291                     	;# 
  2321  0291                     	;# 
  2322  0292                     	;# 
  2323  0293                     	;# 
  2324  0294                     	;# 
  2325  0295                     	;# 
  2326  0295                     	;# 
  2327  0296                     	;# 
  2328  0298                     	;# 
  2329  0298                     	;# 
  2330  0299                     	;# 
  2331  029A                     	;# 
  2332  029B                     	;# 
  2333  029C                     	;# 
  2334  029C                     	;# 
  2335  029D                     	;# 
  2336  029E                     	;# 
  2337  029F                     	;# 
  2338  030C                     	;# 
  2339  030D                     	;# 
  2340  0311                     	;# 
  2341  0311                     	;# 
  2342  0312                     	;# 
  2343  0313                     	;# 
  2344  0314                     	;# 
  2345  0315                     	;# 
  2346  0315                     	;# 
  2347  0316                     	;# 
  2348  0318                     	;# 
  2349  0318                     	;# 
  2350  0319                     	;# 
  2351  031A                     	;# 
  2352  031C                     	;# 
  2353  031C                     	;# 
  2354  031D                     	;# 
  2355  031E                     	;# 
  2356  038C                     	;# 
  2357  038D                     	;# 
  2358  0394                     	;# 
  2359  0395                     	;# 
  2360  0396                     	;# 
  2361  040C                     	;# 
  2362  040D                     	;# 
  2363  0415                     	;# 
  2364  0416                     	;# 
  2365  0417                     	;# 
  2366  041C                     	;# 
  2367  041D                     	;# 
  2368  041E                     	;# 
  2369  048D                     	;# 
  2370  0491                     	;# 
  2371  0492                     	;# 
  2372  0493                     	;# 
  2373  0493                     	;# 
  2374  0494                     	;# 
  2375  0495                     	;# 
  2376  0496                     	;# 
  2377  0497                     	;# 
  2378  0791                     	;# 
  2379  0792                     	;# 
  2380  0793                     	;# 
  2381  0794                     	;# 
  2382  0795                     	;# 
  2383  0798                     	;# 
  2384  0799                     	;# 
  2385  079A                     	;# 
  2386  079B                     	;# 
  2387  079C                     	;# 
  2388  079D                     	;# 
  2389  07A0                     	;# 
  2390  07A1                     	;# 
  2391  07A2                     	;# 
  2392  07A3                     	;# 
  2393  07A4                     	;# 
  2394  07A5                     	;# 
  2395  07A6                     	;# 
  2396  07A7                     	;# 
  2397  07A8                     	;# 
  2398  07A9                     	;# 
  2399  07AA                     	;# 
  2400  07AB                     	;# 
  2401  07AC                     	;# 
  2402  07AD                     	;# 
  2403  07AE                     	;# 
  2404  07AF                     	;# 
  2405  07B0                     	;# 
  2406  07B1                     	;# 
  2407  07B2                     	;# 
  2408  07B3                     	;# 
  2409  07B4                     	;# 
  2410  07B5                     	;# 
  2411  07B6                     	;# 
  2412  07B7                     	;# 
  2413  0FE4                     	;# 
  2414  0FE5                     	;# 
  2415  0FE6                     	;# 
  2416  0FE7                     	;# 
  2417  0FE8                     	;# 
  2418  0FE9                     	;# 
  2419  0FEA                     	;# 
  2420  0FEB                     	;# 
  2421  0FED                     	;# 
  2422  0FEE                     	;# 
  2423  0FEF                     	;# 
  2424  0000                     	;# 
  2425  0001                     	;# 
  2426  0002                     	;# 
  2427  0003                     	;# 
  2428  0004                     	;# 
  2429  0005                     	;# 
  2430  0006                     	;# 
  2431  0007                     	;# 
  2432  0008                     	;# 
  2433  0009                     	;# 
  2434  000A                     	;# 
  2435  000B                     	;# 
  2436  000C                     	;# 
  2437  000D                     	;# 
  2438  000E                     	;# 
  2439  000F                     	;# 
  2440  0010                     	;# 
  2441  0011                     	;# 
  2442  0012                     	;# 
  2443  0013                     	;# 
  2444  0014                     	;# 
  2445  0015                     	;# 
  2446  0016                     	;# 
  2447  0016                     	;# 
  2448  0017                     	;# 
  2449  0018                     	;# 
  2450  0019                     	;# 
  2451  001A                     	;# 
  2452  001B                     	;# 
  2453  001C                     	;# 
  2454  001E                     	;# 
  2455  001F                     	;# 
  2456  008C                     	;# 
  2457  008D                     	;# 
  2458  008E                     	;# 
  2459  008F                     	;# 
  2460  0090                     	;# 
  2461  0091                     	;# 
  2462  0092                     	;# 
  2463  0093                     	;# 
  2464  0094                     	;# 
  2465  0095                     	;# 
  2466  0096                     	;# 
  2467  0097                     	;# 
  2468  0098                     	;# 
  2469  0099                     	;# 
  2470  009A                     	;# 
  2471  009B                     	;# 
  2472  009B                     	;# 
  2473  009C                     	;# 
  2474  009D                     	;# 
  2475  009E                     	;# 
  2476  010C                     	;# 
  2477  010D                     	;# 
  2478  010E                     	;# 
  2479  010F                     	;# 
  2480  0110                     	;# 
  2481  0111                     	;# 
  2482  0112                     	;# 
  2483  0113                     	;# 
  2484  0114                     	;# 
  2485  0115                     	;# 
  2486  0116                     	;# 
  2487  0117                     	;# 
  2488  0118                     	;# 
  2489  0119                     	;# 
  2490  011A                     	;# 
  2491  011B                     	;# 
  2492  011D                     	;# 
  2493  011E                     	;# 
  2494  011F                     	;# 
  2495  018C                     	;# 
  2496  0190                     	;# 
  2497  0191                     	;# 
  2498  0191                     	;# 
  2499  0192                     	;# 
  2500  0193                     	;# 
  2501  0193                     	;# 
  2502  0193                     	;# 
  2503  0194                     	;# 
  2504  0195                     	;# 
  2505  0196                     	;# 
  2506  0199                     	;# 
  2507  0199                     	;# 
  2508  019A                     	;# 
  2509  019A                     	;# 
  2510  019B                     	;# 
  2511  019B                     	;# 
  2512  019B                     	;# 
  2513  019B                     	;# 
  2514  019C                     	;# 
  2515  019C                     	;# 
  2516  019D                     	;# 
  2517  019D                     	;# 
  2518  019E                     	;# 
  2519  019E                     	;# 
  2520  019F                     	;# 
  2521  019F                     	;# 
  2522  020D                     	;# 
  2523  0211                     	;# 
  2524  0211                     	;# 
  2525  0212                     	;# 
  2526  0212                     	;# 
  2527  0213                     	;# 
  2528  0213                     	;# 
  2529  0214                     	;# 
  2530  0214                     	;# 
  2531  0215                     	;# 
  2532  0215                     	;# 
  2533  0215                     	;# 
  2534  0216                     	;# 
  2535  0216                     	;# 
  2536  0217                     	;# 
  2537  0217                     	;# 
  2538  0219                     	;# 
  2539  021A                     	;# 
  2540  021B                     	;# 
  2541  021C                     	;# 
  2542  021D                     	;# 
  2543  021E                     	;# 
  2544  021F                     	;# 
  2545  028C                     	;# 
  2546  028D                     	;# 
  2547  0291                     	;# 
  2548  0291                     	;# 
  2549  0292                     	;# 
  2550  0293                     	;# 
  2551  0294                     	;# 
  2552  0295                     	;# 
  2553  0295                     	;# 
  2554  0296                     	;# 
  2555  0298                     	;# 
  2556  0298                     	;# 
  2557  0299                     	;# 
  2558  029A                     	;# 
  2559  029B                     	;# 
  2560  029C                     	;# 
  2561  029C                     	;# 
  2562  029D                     	;# 
  2563  029E                     	;# 
  2564  029F                     	;# 
  2565  030C                     	;# 
  2566  030D                     	;# 
  2567  0311                     	;# 
  2568  0311                     	;# 
  2569  0312                     	;# 
  2570  0313                     	;# 
  2571  0314                     	;# 
  2572  0315                     	;# 
  2573  0315                     	;# 
  2574  0316                     	;# 
  2575  0318                     	;# 
  2576  0318                     	;# 
  2577  0319                     	;# 
  2578  031A                     	;# 
  2579  031C                     	;# 
  2580  031C                     	;# 
  2581  031D                     	;# 
  2582  031E                     	;# 
  2583  038C                     	;# 
  2584  038D                     	;# 
  2585  0394                     	;# 
  2586  0395                     	;# 
  2587  0396                     	;# 
  2588  040C                     	;# 
  2589  040D                     	;# 
  2590  0415                     	;# 
  2591  0416                     	;# 
  2592  0417                     	;# 
  2593  041C                     	;# 
  2594  041D                     	;# 
  2595  041E                     	;# 
  2596  048D                     	;# 
  2597  0491                     	;# 
  2598  0492                     	;# 
  2599  0493                     	;# 
  2600  0493                     	;# 
  2601  0494                     	;# 
  2602  0495                     	;# 
  2603  0496                     	;# 
  2604  0497                     	;# 
  2605  0791                     	;# 
  2606  0792                     	;# 
  2607  0793                     	;# 
  2608  0794                     	;# 
  2609  0795                     	;# 
  2610  0798                     	;# 
  2611  0799                     	;# 
  2612  079A                     	;# 
  2613  079B                     	;# 
  2614  079C                     	;# 
  2615  079D                     	;# 
  2616  07A0                     	;# 
  2617  07A1                     	;# 
  2618  07A2                     	;# 
  2619  07A3                     	;# 
  2620  07A4                     	;# 
  2621  07A5                     	;# 
  2622  07A6                     	;# 
  2623  07A7                     	;# 
  2624  07A8                     	;# 
  2625  07A9                     	;# 
  2626  07AA                     	;# 
  2627  07AB                     	;# 
  2628  07AC                     	;# 
  2629  07AD                     	;# 
  2630  07AE                     	;# 
  2631  07AF                     	;# 
  2632  07B0                     	;# 
  2633  07B1                     	;# 
  2634  07B2                     	;# 
  2635  07B3                     	;# 
  2636  07B4                     	;# 
  2637  07B5                     	;# 
  2638  07B6                     	;# 
  2639  07B7                     	;# 
  2640  0FE4                     	;# 
  2641  0FE5                     	;# 
  2642  0FE6                     	;# 
  2643  0FE7                     	;# 
  2644  0FE8                     	;# 
  2645  0FE9                     	;# 
  2646  0FEA                     	;# 
  2647  0FEB                     	;# 
  2648  0FED                     	;# 
  2649  0FEE                     	;# 
  2650  0FEF                     	;# 
  2651  0000                     	;# 
  2652  0001                     	;# 
  2653  0002                     	;# 
  2654  0003                     	;# 
  2655  0004                     	;# 
  2656  0005                     	;# 
  2657  0006                     	;# 
  2658  0007                     	;# 
  2659  0008                     	;# 
  2660  0009                     	;# 
  2661  000A                     	;# 
  2662  000B                     	;# 
  2663  000C                     	;# 
  2664  000D                     	;# 
  2665  000E                     	;# 
  2666  000F                     	;# 
  2667  0010                     	;# 
  2668  0011                     	;# 
  2669  0012                     	;# 
  2670  0013                     	;# 
  2671  0014                     	;# 
  2672  0015                     	;# 
  2673  0016                     	;# 
  2674  0016                     	;# 
  2675  0017                     	;# 
  2676  0018                     	;# 
  2677  0019                     	;# 
  2678  001A                     	;# 
  2679  001B                     	;# 
  2680  001C                     	;# 
  2681  001E                     	;# 
  2682  001F                     	;# 
  2683  008C                     	;# 
  2684  008D                     	;# 
  2685  008E                     	;# 
  2686  008F                     	;# 
  2687  0090                     	;# 
  2688  0091                     	;# 
  2689  0092                     	;# 
  2690  0093                     	;# 
  2691  0094                     	;# 
  2692  0095                     	;# 
  2693  0096                     	;# 
  2694  0097                     	;# 
  2695  0098                     	;# 
  2696  0099                     	;# 
  2697  009A                     	;# 
  2698  009B                     	;# 
  2699  009B                     	;# 
  2700  009C                     	;# 
  2701  009D                     	;# 
  2702  009E                     	;# 
  2703  010C                     	;# 
  2704  010D                     	;# 
  2705  010E                     	;# 
  2706  010F                     	;# 
  2707  0110                     	;# 
  2708  0111                     	;# 
  2709  0112                     	;# 
  2710  0113                     	;# 
  2711  0114                     	;# 
  2712  0115                     	;# 
  2713  0116                     	;# 
  2714  0117                     	;# 
  2715  0118                     	;# 
  2716  0119                     	;# 
  2717  011A                     	;# 
  2718  011B                     	;# 
  2719  011D                     	;# 
  2720  011E                     	;# 
  2721  011F                     	;# 
  2722  018C                     	;# 
  2723  0190                     	;# 
  2724  0191                     	;# 
  2725  0191                     	;# 
  2726  0192                     	;# 
  2727  0193                     	;# 
  2728  0193                     	;# 
  2729  0193                     	;# 
  2730  0194                     	;# 
  2731  0195                     	;# 
  2732  0196                     	;# 
  2733  0199                     	;# 
  2734  0199                     	;# 
  2735  019A                     	;# 
  2736  019A                     	;# 
  2737  019B                     	;# 
  2738  019B                     	;# 
  2739  019B                     	;# 
  2740  019B                     	;# 
  2741  019C                     	;# 
  2742  019C                     	;# 
  2743  019D                     	;# 
  2744  019D                     	;# 
  2745  019E                     	;# 
  2746  019E                     	;# 
  2747  019F                     	;# 
  2748  019F                     	;# 
  2749  020D                     	;# 
  2750  0211                     	;# 
  2751  0211                     	;# 
  2752  0212                     	;# 
  2753  0212                     	;# 
  2754  0213                     	;# 
  2755  0213                     	;# 
  2756  0214                     	;# 
  2757  0214                     	;# 
  2758  0215                     	;# 
  2759  0215                     	;# 
  2760  0215                     	;# 
  2761  0216                     	;# 
  2762  0216                     	;# 
  2763  0217                     	;# 
  2764  0217                     	;# 
  2765  0219                     	;# 
  2766  021A                     	;# 
  2767  021B                     	;# 
  2768  021C                     	;# 
  2769  021D                     	;# 
  2770  021E                     	;# 
  2771  021F                     	;# 
  2772  028C                     	;# 
  2773  028D                     	;# 
  2774  0291                     	;# 
  2775  0291                     	;# 
  2776  0292                     	;# 
  2777  0293                     	;# 
  2778  0294                     	;# 
  2779  0295                     	;# 
  2780  0295                     	;# 
  2781  0296                     	;# 
  2782  0298                     	;# 
  2783  0298                     	;# 
  2784  0299                     	;# 
  2785  029A                     	;# 
  2786  029B                     	;# 
  2787  029C                     	;# 
  2788  029C                     	;# 
  2789  029D                     	;# 
  2790  029E                     	;# 
  2791  029F                     	;# 
  2792  030C                     	;# 
  2793  030D                     	;# 
  2794  0311                     	;# 
  2795  0311                     	;# 
  2796  0312                     	;# 
  2797  0313                     	;# 
  2798  0314                     	;# 
  2799  0315                     	;# 
  2800  0315                     	;# 
  2801  0316                     	;# 
  2802  0318                     	;# 
  2803  0318                     	;# 
  2804  0319                     	;# 
  2805  031A                     	;# 
  2806  031C                     	;# 
  2807  031C                     	;# 
  2808  031D                     	;# 
  2809  031E                     	;# 
  2810  038C                     	;# 
  2811  038D                     	;# 
  2812  0394                     	;# 
  2813  0395                     	;# 
  2814  0396                     	;# 
  2815  040C                     	;# 
  2816  040D                     	;# 
  2817  0415                     	;# 
  2818  0416                     	;# 
  2819  0417                     	;# 
  2820  041C                     	;# 
  2821  041D                     	;# 
  2822  041E                     	;# 
  2823  048D                     	;# 
  2824  0491                     	;# 
  2825  0492                     	;# 
  2826  0493                     	;# 
  2827  0493                     	;# 
  2828  0494                     	;# 
  2829  0495                     	;# 
  2830  0496                     	;# 
  2831  0497                     	;# 
  2832  0791                     	;# 
  2833  0792                     	;# 
  2834  0793                     	;# 
  2835  0794                     	;# 
  2836  0795                     	;# 
  2837  0798                     	;# 
  2838  0799                     	;# 
  2839  079A                     	;# 
  2840  079B                     	;# 
  2841  079C                     	;# 
  2842  079D                     	;# 
  2843  07A0                     	;# 
  2844  07A1                     	;# 
  2845  07A2                     	;# 
  2846  07A3                     	;# 
  2847  07A4                     	;# 
  2848  07A5                     	;# 
  2849  07A6                     	;# 
  2850  07A7                     	;# 
  2851  07A8                     	;# 
  2852  07A9                     	;# 
  2853  07AA                     	;# 
  2854  07AB                     	;# 
  2855  07AC                     	;# 
  2856  07AD                     	;# 
  2857  07AE                     	;# 
  2858  07AF                     	;# 
  2859  07B0                     	;# 
  2860  07B1                     	;# 
  2861  07B2                     	;# 
  2862  07B3                     	;# 
  2863  07B4                     	;# 
  2864  07B5                     	;# 
  2865  07B6                     	;# 
  2866  07B7                     	;# 
  2867  0FE4                     	;# 
  2868  0FE5                     	;# 
  2869  0FE6                     	;# 
  2870  0FE7                     	;# 
  2871  0FE8                     	;# 
  2872  0FE9                     	;# 
  2873  0FEA                     	;# 
  2874  0FEB                     	;# 
  2875  0FED                     	;# 
  2876  0FEE                     	;# 
  2877  0FEF                     	;# 
  2878  0000                     	;# 
  2879  0001                     	;# 
  2880  0002                     	;# 
  2881  0003                     	;# 
  2882  0004                     	;# 
  2883  0005                     	;# 
  2884  0006                     	;# 
  2885  0007                     	;# 
  2886  0008                     	;# 
  2887  0009                     	;# 
  2888  000A                     	;# 
  2889  000B                     	;# 
  2890  000C                     	;# 
  2891  000D                     	;# 
  2892  000E                     	;# 
  2893  000F                     	;# 
  2894  0010                     	;# 
  2895  0011                     	;# 
  2896  0012                     	;# 
  2897  0013                     	;# 
  2898  0014                     	;# 
  2899  0015                     	;# 
  2900  0016                     	;# 
  2901  0016                     	;# 
  2902  0017                     	;# 
  2903  0018                     	;# 
  2904  0019                     	;# 
  2905  001A                     	;# 
  2906  001B                     	;# 
  2907  001C                     	;# 
  2908  001E                     	;# 
  2909  001F                     	;# 
  2910  008C                     	;# 
  2911  008D                     	;# 
  2912  008E                     	;# 
  2913  008F                     	;# 
  2914  0090                     	;# 
  2915  0091                     	;# 
  2916  0092                     	;# 
  2917  0093                     	;# 
  2918  0094                     	;# 
  2919  0095                     	;# 
  2920  0096                     	;# 
  2921  0097                     	;# 
  2922  0098                     	;# 
  2923  0099                     	;# 
  2924  009A                     	;# 
  2925  009B                     	;# 
  2926  009B                     	;# 
  2927  009C                     	;# 
  2928  009D                     	;# 
  2929  009E                     	;# 
  2930  010C                     	;# 
  2931  010D                     	;# 
  2932  010E                     	;# 
  2933  010F                     	;# 
  2934  0110                     	;# 
  2935  0111                     	;# 
  2936  0112                     	;# 
  2937  0113                     	;# 
  2938  0114                     	;# 
  2939  0115                     	;# 
  2940  0116                     	;# 
  2941  0117                     	;# 
  2942  0118                     	;# 
  2943  0119                     	;# 
  2944  011A                     	;# 
  2945  011B                     	;# 
  2946  011D                     	;# 
  2947  011E                     	;# 
  2948  011F                     	;# 
  2949  018C                     	;# 
  2950  0190                     	;# 
  2951  0191                     	;# 
  2952  0191                     	;# 
  2953  0192                     	;# 
  2954  0193                     	;# 
  2955  0193                     	;# 
  2956  0193                     	;# 
  2957  0194                     	;# 
  2958  0195                     	;# 
  2959  0196                     	;# 
  2960  0199                     	;# 
  2961  0199                     	;# 
  2962  019A                     	;# 
  2963  019A                     	;# 
  2964  019B                     	;# 
  2965  019B                     	;# 
  2966  019B                     	;# 
  2967  019B                     	;# 
  2968  019C                     	;# 
  2969  019C                     	;# 
  2970  019D                     	;# 
  2971  019D                     	;# 
  2972  019E                     	;# 
  2973  019E                     	;# 
  2974  019F                     	;# 
  2975  019F                     	;# 
  2976  020D                     	;# 
  2977  0211                     	;# 
  2978  0211                     	;# 
  2979  0212                     	;# 
  2980  0212                     	;# 
  2981  0213                     	;# 
  2982  0213                     	;# 
  2983  0214                     	;# 
  2984  0214                     	;# 
  2985  0215                     	;# 
  2986  0215                     	;# 
  2987  0215                     	;# 
  2988  0216                     	;# 
  2989  0216                     	;# 
  2990  0217                     	;# 
  2991  0217                     	;# 
  2992  0219                     	;# 
  2993  021A                     	;# 
  2994  021B                     	;# 
  2995  021C                     	;# 
  2996  021D                     	;# 
  2997  021E                     	;# 
  2998  021F                     	;# 
  2999  028C                     	;# 
  3000  028D                     	;# 
  3001  0291                     	;# 
  3002  0291                     	;# 
  3003  0292                     	;# 
  3004  0293                     	;# 
  3005  0294                     	;# 
  3006  0295                     	;# 
  3007  0295                     	;# 
  3008  0296                     	;# 
  3009  0298                     	;# 
  3010  0298                     	;# 
  3011  0299                     	;# 
  3012  029A                     	;# 
  3013  029B                     	;# 
  3014  029C                     	;# 
  3015  029C                     	;# 
  3016  029D                     	;# 
  3017  029E                     	;# 
  3018  029F                     	;# 
  3019  030C                     	;# 
  3020  030D                     	;# 
  3021  0311                     	;# 
  3022  0311                     	;# 
  3023  0312                     	;# 
  3024  0313                     	;# 
  3025  0314                     	;# 
  3026  0315                     	;# 
  3027  0315                     	;# 
  3028  0316                     	;# 
  3029  0318                     	;# 
  3030  0318                     	;# 
  3031  0319                     	;# 
  3032  031A                     	;# 
  3033  031C                     	;# 
  3034  031C                     	;# 
  3035  031D                     	;# 
  3036  031E                     	;# 
  3037  038C                     	;# 
  3038  038D                     	;# 
  3039  0394                     	;# 
  3040  0395                     	;# 
  3041  0396                     	;# 
  3042  040C                     	;# 
  3043  040D                     	;# 
  3044  0415                     	;# 
  3045  0416                     	;# 
  3046  0417                     	;# 
  3047  041C                     	;# 
  3048  041D                     	;# 
  3049  041E                     	;# 
  3050  048D                     	;# 
  3051  0491                     	;# 
  3052  0492                     	;# 
  3053  0493                     	;# 
  3054  0493                     	;# 
  3055  0494                     	;# 
  3056  0495                     	;# 
  3057  0496                     	;# 
  3058  0497                     	;# 
  3059  0791                     	;# 
  3060  0792                     	;# 
  3061  0793                     	;# 
  3062  0794                     	;# 
  3063  0795                     	;# 
  3064  0798                     	;# 
  3065  0799                     	;# 
  3066  079A                     	;# 
  3067  079B                     	;# 
  3068  079C                     	;# 
  3069  079D                     	;# 
  3070  07A0                     	;# 
  3071  07A1                     	;# 
  3072  07A2                     	;# 
  3073  07A3                     	;# 
  3074  07A4                     	;# 
  3075  07A5                     	;# 
  3076  07A6                     	;# 
  3077  07A7                     	;# 
  3078  07A8                     	;# 
  3079  07A9                     	;# 
  3080  07AA                     	;# 
  3081  07AB                     	;# 
  3082  07AC                     	;# 
  3083  07AD                     	;# 
  3084  07AE                     	;# 
  3085  07AF                     	;# 
  3086  07B0                     	;# 
  3087  07B1                     	;# 
  3088  07B2                     	;# 
  3089  07B3                     	;# 
  3090  07B4                     	;# 
  3091  07B5                     	;# 
  3092  07B6                     	;# 
  3093  07B7                     	;# 
  3094  0FE4                     	;# 
  3095  0FE5                     	;# 
  3096  0FE6                     	;# 
  3097  0FE7                     	;# 
  3098  0FE8                     	;# 
  3099  0FE9                     	;# 
  3100  0FEA                     	;# 
  3101  0FEB                     	;# 
  3102  0FED                     	;# 
  3103  0FEE                     	;# 
  3104  0FEF                     	;# 
  3105  0000                     	;# 
  3106  0001                     	;# 
  3107  0002                     	;# 
  3108  0003                     	;# 
  3109  0004                     	;# 
  3110  0005                     	;# 
  3111  0006                     	;# 
  3112  0007                     	;# 
  3113  0008                     	;# 
  3114  0009                     	;# 
  3115  000A                     	;# 
  3116  000B                     	;# 
  3117  000C                     	;# 
  3118  000D                     	;# 
  3119  000E                     	;# 
  3120  000F                     	;# 
  3121  0010                     	;# 
  3122  0011                     	;# 
  3123  0012                     	;# 
  3124  0013                     	;# 
  3125  0014                     	;# 
  3126  0015                     	;# 
  3127  0016                     	;# 
  3128  0016                     	;# 
  3129  0017                     	;# 
  3130  0018                     	;# 
  3131  0019                     	;# 
  3132  001A                     	;# 
  3133  001B                     	;# 
  3134  001C                     	;# 
  3135  001E                     	;# 
  3136  001F                     	;# 
  3137  008C                     	;# 
  3138  008D                     	;# 
  3139  008E                     	;# 
  3140  008F                     	;# 
  3141  0090                     	;# 
  3142  0091                     	;# 
  3143  0092                     	;# 
  3144  0093                     	;# 
  3145  0094                     	;# 
  3146  0095                     	;# 
  3147  0096                     	;# 
  3148  0097                     	;# 
  3149  0098                     	;# 
  3150  0099                     	;# 
  3151  009A                     	;# 
  3152  009B                     	;# 
  3153  009B                     	;# 
  3154  009C                     	;# 
  3155  009D                     	;# 
  3156  009E                     	;# 
  3157  010C                     	;# 
  3158  010D                     	;# 
  3159  010E                     	;# 
  3160  010F                     	;# 
  3161  0110                     	;# 
  3162  0111                     	;# 
  3163  0112                     	;# 
  3164  0113                     	;# 
  3165  0114                     	;# 
  3166  0115                     	;# 
  3167  0116                     	;# 
  3168  0117                     	;# 
  3169  0118                     	;# 
  3170  0119                     	;# 
  3171  011A                     	;# 
  3172  011B                     	;# 
  3173  011D                     	;# 
  3174  011E                     	;# 
  3175  011F                     	;# 
  3176  018C                     	;# 
  3177  0190                     	;# 
  3178  0191                     	;# 
  3179  0191                     	;# 
  3180  0192                     	;# 
  3181  0193                     	;# 
  3182  0193                     	;# 
  3183  0193                     	;# 
  3184  0194                     	;# 
  3185  0195                     	;# 
  3186  0196                     	;# 
  3187  0199                     	;# 
  3188  0199                     	;# 
  3189  019A                     	;# 
  3190  019A                     	;# 
  3191  019B                     	;# 
  3192  019B                     	;# 
  3193  019B                     	;# 
  3194  019B                     	;# 
  3195  019C                     	;# 
  3196  019C                     	;# 
  3197  019D                     	;# 
  3198  019D                     	;# 
  3199  019E                     	;# 
  3200  019E                     	;# 
  3201  019F                     	;# 
  3202  019F                     	;# 
  3203  020D                     	;# 
  3204  0211                     	;# 
  3205  0211                     	;# 
  3206  0212                     	;# 
  3207  0212                     	;# 
  3208  0213                     	;# 
  3209  0213                     	;# 
  3210  0214                     	;# 
  3211  0214                     	;# 
  3212  0215                     	;# 
  3213  0215                     	;# 
  3214  0215                     	;# 
  3215  0216                     	;# 
  3216  0216                     	;# 
  3217  0217                     	;# 
  3218  0217                     	;# 
  3219  0219                     	;# 
  3220  021A                     	;# 
  3221  021B                     	;# 
  3222  021C                     	;# 
  3223  021D                     	;# 
  3224  021E                     	;# 
  3225  021F                     	;# 
  3226  028C                     	;# 
  3227  028D                     	;# 
  3228  0291                     	;# 
  3229  0291                     	;# 
  3230  0292                     	;# 
  3231  0293                     	;# 
  3232  0294                     	;# 
  3233  0295                     	;# 
  3234  0295                     	;# 
  3235  0296                     	;# 
  3236  0298                     	;# 
  3237  0298                     	;# 
  3238  0299                     	;# 
  3239  029A                     	;# 
  3240  029B                     	;# 
  3241  029C                     	;# 
  3242  029C                     	;# 
  3243  029D                     	;# 
  3244  029E                     	;# 
  3245  029F                     	;# 
  3246  030C                     	;# 
  3247  030D                     	;# 
  3248  0311                     	;# 
  3249  0311                     	;# 
  3250  0312                     	;# 
  3251  0313                     	;# 
  3252  0314                     	;# 
  3253  0315                     	;# 
  3254  0315                     	;# 
  3255  0316                     	;# 
  3256  0318                     	;# 
  3257  0318                     	;# 
  3258  0319                     	;# 
  3259  031A                     	;# 
  3260  031C                     	;# 
  3261  031C                     	;# 
  3262  031D                     	;# 
  3263  031E                     	;# 
  3264  038C                     	;# 
  3265  038D                     	;# 
  3266  0394                     	;# 
  3267  0395                     	;# 
  3268  0396                     	;# 
  3269  040C                     	;# 
  3270  040D                     	;# 
  3271  0415                     	;# 
  3272  0416                     	;# 
  3273  0417                     	;# 
  3274  041C                     	;# 
  3275  041D                     	;# 
  3276  041E                     	;# 
  3277  048D                     	;# 
  3278  0491                     	;# 
  3279  0492                     	;# 
  3280  0493                     	;# 
  3281  0493                     	;# 
  3282  0494                     	;# 
  3283  0495                     	;# 
  3284  0496                     	;# 
  3285  0497                     	;# 
  3286  0791                     	;# 
  3287  0792                     	;# 
  3288  0793                     	;# 
  3289  0794                     	;# 
  3290  0795                     	;# 
  3291  0798                     	;# 
  3292  0799                     	;# 
  3293  079A                     	;# 
  3294  079B                     	;# 
  3295  079C                     	;# 
  3296  079D                     	;# 
  3297  07A0                     	;# 
  3298  07A1                     	;# 
  3299  07A2                     	;# 
  3300  07A3                     	;# 
  3301  07A4                     	;# 
  3302  07A5                     	;# 
  3303  07A6                     	;# 
  3304  07A7                     	;# 
  3305  07A8                     	;# 
  3306  07A9                     	;# 
  3307  07AA                     	;# 
  3308  07AB                     	;# 
  3309  07AC                     	;# 
  3310  07AD                     	;# 
  3311  07AE                     	;# 
  3312  07AF                     	;# 
  3313  07B0                     	;# 
  3314  07B1                     	;# 
  3315  07B2                     	;# 
  3316  07B3                     	;# 
  3317  07B4                     	;# 
  3318  07B5                     	;# 
  3319  07B6                     	;# 
  3320  07B7                     	;# 
  3321  0FE4                     	;# 
  3322  0FE5                     	;# 
  3323  0FE6                     	;# 
  3324  0FE7                     	;# 
  3325  0FE8                     	;# 
  3326  0FE9                     	;# 
  3327  0FEA                     	;# 
  3328  0FEB                     	;# 
  3329  0FED                     	;# 
  3330  0FEE                     	;# 
  3331  0FEF                     	;# 
  3332  0000                     	;# 
  3333  0001                     	;# 
  3334  0002                     	;# 
  3335  0003                     	;# 
  3336  0004                     	;# 
  3337  0005                     	;# 
  3338  0006                     	;# 
  3339  0007                     	;# 
  3340  0008                     	;# 
  3341  0009                     	;# 
  3342  000A                     	;# 
  3343  000B                     	;# 
  3344  000C                     	;# 
  3345  000D                     	;# 
  3346  000E                     	;# 
  3347  000F                     	;# 
  3348  0010                     	;# 
  3349  0011                     	;# 
  3350  0012                     	;# 
  3351  0013                     	;# 
  3352  0014                     	;# 
  3353  0015                     	;# 
  3354  0016                     	;# 
  3355  0016                     	;# 
  3356  0017                     	;# 
  3357  0018                     	;# 
  3358  0019                     	;# 
  3359  001A                     	;# 
  3360  001B                     	;# 
  3361  001C                     	;# 
  3362  001E                     	;# 
  3363  001F                     	;# 
  3364  008C                     	;# 
  3365  008D                     	;# 
  3366  008E                     	;# 
  3367  008F                     	;# 
  3368  0090                     	;# 
  3369  0091                     	;# 
  3370  0092                     	;# 
  3371  0093                     	;# 
  3372  0094                     	;# 
  3373  0095                     	;# 
  3374  0096                     	;# 
  3375  0097                     	;# 
  3376  0098                     	;# 
  3377  0099                     	;# 
  3378  009A                     	;# 
  3379  009B                     	;# 
  3380  009B                     	;# 
  3381  009C                     	;# 
  3382  009D                     	;# 
  3383  009E                     	;# 
  3384  010C                     	;# 
  3385  010D                     	;# 
  3386  010E                     	;# 
  3387  010F                     	;# 
  3388  0110                     	;# 
  3389  0111                     	;# 
  3390  0112                     	;# 
  3391  0113                     	;# 
  3392  0114                     	;# 
  3393  0115                     	;# 
  3394  0116                     	;# 
  3395  0117                     	;# 
  3396  0118                     	;# 
  3397  0119                     	;# 
  3398  011A                     	;# 
  3399  011B                     	;# 
  3400  011D                     	;# 
  3401  011E                     	;# 
  3402  011F                     	;# 
  3403  018C                     	;# 
  3404  0190                     	;# 
  3405  0191                     	;# 
  3406  0191                     	;# 
  3407  0192                     	;# 
  3408  0193                     	;# 
  3409  0193                     	;# 
  3410  0193                     	;# 
  3411  0194                     	;# 
  3412  0195                     	;# 
  3413  0196                     	;# 
  3414  0199                     	;# 
  3415  0199                     	;# 
  3416  019A                     	;# 
  3417  019A                     	;# 
  3418  019B                     	;# 
  3419  019B                     	;# 
  3420  019B                     	;# 
  3421  019B                     	;# 
  3422  019C                     	;# 
  3423  019C                     	;# 
  3424  019D                     	;# 
  3425  019D                     	;# 
  3426  019E                     	;# 
  3427  019E                     	;# 
  3428  019F                     	;# 
  3429  019F                     	;# 
  3430  020D                     	;# 
  3431  0211                     	;# 
  3432  0211                     	;# 
  3433  0212                     	;# 
  3434  0212                     	;# 
  3435  0213                     	;# 
  3436  0213                     	;# 
  3437  0214                     	;# 
  3438  0214                     	;# 
  3439  0215                     	;# 
  3440  0215                     	;# 
  3441  0215                     	;# 
  3442  0216                     	;# 
  3443  0216                     	;# 
  3444  0217                     	;# 
  3445  0217                     	;# 
  3446  0219                     	;# 
  3447  021A                     	;# 
  3448  021B                     	;# 
  3449  021C                     	;# 
  3450  021D                     	;# 
  3451  021E                     	;# 
  3452  021F                     	;# 
  3453  028C                     	;# 
  3454  028D                     	;# 
  3455  0291                     	;# 
  3456  0291                     	;# 
  3457  0292                     	;# 
  3458  0293                     	;# 
  3459  0294                     	;# 
  3460  0295                     	;# 
  3461  0295                     	;# 
  3462  0296                     	;# 
  3463  0298                     	;# 
  3464  0298                     	;# 
  3465  0299                     	;# 
  3466  029A                     	;# 
  3467  029B                     	;# 
  3468  029C                     	;# 
  3469  029C                     	;# 
  3470  029D                     	;# 
  3471  029E                     	;# 
  3472  029F                     	;# 
  3473  030C                     	;# 
  3474  030D                     	;# 
  3475  0311                     	;# 
  3476  0311                     	;# 
  3477  0312                     	;# 
  3478  0313                     	;# 
  3479  0314                     	;# 
  3480  0315                     	;# 
  3481  0315                     	;# 
  3482  0316                     	;# 
  3483  0318                     	;# 
  3484  0318                     	;# 
  3485  0319                     	;# 
  3486  031A                     	;# 
  3487  031C                     	;# 
  3488  031C                     	;# 
  3489  031D                     	;# 
  3490  031E                     	;# 
  3491  038C                     	;# 
  3492  038D                     	;# 
  3493  0394                     	;# 
  3494  0395                     	;# 
  3495  0396                     	;# 
  3496  040C                     	;# 
  3497  040D                     	;# 
  3498  0415                     	;# 
  3499  0416                     	;# 
  3500  0417                     	;# 
  3501  041C                     	;# 
  3502  041D                     	;# 
  3503  041E                     	;# 
  3504  048D                     	;# 
  3505  0491                     	;# 
  3506  0492                     	;# 
  3507  0493                     	;# 
  3508  0493                     	;# 
  3509  0494                     	;# 
  3510  0495                     	;# 
  3511  0496                     	;# 
  3512  0497                     	;# 
  3513  0791                     	;# 
  3514  0792                     	;# 
  3515  0793                     	;# 
  3516  0794                     	;# 
  3517  0795                     	;# 
  3518  0798                     	;# 
  3519  0799                     	;# 
  3520  079A                     	;# 
  3521  079B                     	;# 
  3522  079C                     	;# 
  3523  079D                     	;# 
  3524  07A0                     	;# 
  3525  07A1                     	;# 
  3526  07A2                     	;# 
  3527  07A3                     	;# 
  3528  07A4                     	;# 
  3529  07A5                     	;# 
  3530  07A6                     	;# 
  3531  07A7                     	;# 
  3532  07A8                     	;# 
  3533  07A9                     	;# 
  3534  07AA                     	;# 
  3535  07AB                     	;# 
  3536  07AC                     	;# 
  3537  07AD                     	;# 
  3538  07AE                     	;# 
  3539  07AF                     	;# 
  3540  07B0                     	;# 
  3541  07B1                     	;# 
  3542  07B2                     	;# 
  3543  07B3                     	;# 
  3544  07B4                     	;# 
  3545  07B5                     	;# 
  3546  07B6                     	;# 
  3547  07B7                     	;# 
  3548  0FE4                     	;# 
  3549  0FE5                     	;# 
  3550  0FE6                     	;# 
  3551  0FE7                     	;# 
  3552  0FE8                     	;# 
  3553  0FE9                     	;# 
  3554  0FEA                     	;# 
  3555  0FEB                     	;# 
  3556  0FED                     	;# 
  3557  0FEE                     	;# 
  3558  0FEF                     	;# 
  3559  0000                     	;# 
  3560  0001                     	;# 
  3561  0002                     	;# 
  3562  0003                     	;# 
  3563  0004                     	;# 
  3564  0005                     	;# 
  3565  0006                     	;# 
  3566  0007                     	;# 
  3567  0008                     	;# 
  3568  0009                     	;# 
  3569  000A                     	;# 
  3570  000B                     	;# 
  3571  000C                     	;# 
  3572  000D                     	;# 
  3573  000E                     	;# 
  3574  000F                     	;# 
  3575  0010                     	;# 
  3576  0011                     	;# 
  3577  0012                     	;# 
  3578  0013                     	;# 
  3579  0014                     	;# 
  3580  0015                     	;# 
  3581  0016                     	;# 
  3582  0016                     	;# 
  3583  0017                     	;# 
  3584  0018                     	;# 
  3585  0019                     	;# 
  3586  001A                     	;# 
  3587  001B                     	;# 
  3588  001C                     	;# 
  3589  001E                     	;# 
  3590  001F                     	;# 
  3591  008C                     	;# 
  3592  008D                     	;# 
  3593  008E                     	;# 
  3594  008F                     	;# 
  3595  0090                     	;# 
  3596  0091                     	;# 
  3597  0092                     	;# 
  3598  0093                     	;# 
  3599  0094                     	;# 
  3600  0095                     	;# 
  3601  0096                     	;# 
  3602  0097                     	;# 
  3603  0098                     	;# 
  3604  0099                     	;# 
  3605  009A                     	;# 
  3606  009B                     	;# 
  3607  009B                     	;# 
  3608  009C                     	;# 
  3609  009D                     	;# 
  3610  009E                     	;# 
  3611  010C                     	;# 
  3612  010D                     	;# 
  3613  010E                     	;# 
  3614  010F                     	;# 
  3615  0110                     	;# 
  3616  0111                     	;# 
  3617  0112                     	;# 
  3618  0113                     	;# 
  3619  0114                     	;# 
  3620  0115                     	;# 
  3621  0116                     	;# 
  3622  0117                     	;# 
  3623  0118                     	;# 
  3624  0119                     	;# 
  3625  011A                     	;# 
  3626  011B                     	;# 
  3627  011D                     	;# 
  3628  011E                     	;# 
  3629  011F                     	;# 
  3630  018C                     	;# 
  3631  0190                     	;# 
  3632  0191                     	;# 
  3633  0191                     	;# 
  3634  0192                     	;# 
  3635  0193                     	;# 
  3636  0193                     	;# 
  3637  0193                     	;# 
  3638  0194                     	;# 
  3639  0195                     	;# 
  3640  0196                     	;# 
  3641  0199                     	;# 
  3642  0199                     	;# 
  3643  019A                     	;# 
  3644  019A                     	;# 
  3645  019B                     	;# 
  3646  019B                     	;# 
  3647  019B                     	;# 
  3648  019B                     	;# 
  3649  019C                     	;# 
  3650  019C                     	;# 
  3651  019D                     	;# 
  3652  019D                     	;# 
  3653  019E                     	;# 
  3654  019E                     	;# 
  3655  019F                     	;# 
  3656  019F                     	;# 
  3657  020D                     	;# 
  3658  0211                     	;# 
  3659  0211                     	;# 
  3660  0212                     	;# 
  3661  0212                     	;# 
  3662  0213                     	;# 
  3663  0213                     	;# 
  3664  0214                     	;# 
  3665  0214                     	;# 
  3666  0215                     	;# 
  3667  0215                     	;# 
  3668  0215                     	;# 
  3669  0216                     	;# 
  3670  0216                     	;# 
  3671  0217                     	;# 
  3672  0217                     	;# 
  3673  0219                     	;# 
  3674  021A                     	;# 
  3675  021B                     	;# 
  3676  021C                     	;# 
  3677  021D                     	;# 
  3678  021E                     	;# 
  3679  021F                     	;# 
  3680  028C                     	;# 
  3681  028D                     	;# 
  3682  0291                     	;# 
  3683  0291                     	;# 
  3684  0292                     	;# 
  3685  0293                     	;# 
  3686  0294                     	;# 
  3687  0295                     	;# 
  3688  0295                     	;# 
  3689  0296                     	;# 
  3690  0298                     	;# 
  3691  0298                     	;# 
  3692  0299                     	;# 
  3693  029A                     	;# 
  3694  029B                     	;# 
  3695  029C                     	;# 
  3696  029C                     	;# 
  3697  029D                     	;# 
  3698  029E                     	;# 
  3699  029F                     	;# 
  3700  030C                     	;# 
  3701  030D                     	;# 
  3702  0311                     	;# 
  3703  0311                     	;# 
  3704  0312                     	;# 
  3705  0313                     	;# 
  3706  0314                     	;# 
  3707  0315                     	;# 
  3708  0315                     	;# 
  3709  0316                     	;# 
  3710  0318                     	;# 
  3711  0318                     	;# 
  3712  0319                     	;# 
  3713  031A                     	;# 
  3714  031C                     	;# 
  3715  031C                     	;# 
  3716  031D                     	;# 
  3717  031E                     	;# 
  3718  038C                     	;# 
  3719  038D                     	;# 
  3720  0394                     	;# 
  3721  0395                     	;# 
  3722  0396                     	;# 
  3723  040C                     	;# 
  3724  040D                     	;# 
  3725  0415                     	;# 
  3726  0416                     	;# 
  3727  0417                     	;# 
  3728  041C                     	;# 
  3729  041D                     	;# 
  3730  041E                     	;# 
  3731  048D                     	;# 
  3732  0491                     	;# 
  3733  0492                     	;# 
  3734  0493                     	;# 
  3735  0493                     	;# 
  3736  0494                     	;# 
  3737  0495                     	;# 
  3738  0496                     	;# 
  3739  0497                     	;# 
  3740  0791                     	;# 
  3741  0792                     	;# 
  3742  0793                     	;# 
  3743  0794                     	;# 
  3744  0795                     	;# 
  3745  0798                     	;# 
  3746  0799                     	;# 
  3747  079A                     	;# 
  3748  079B                     	;# 
  3749  079C                     	;# 
  3750  079D                     	;# 
  3751  07A0                     	;# 
  3752  07A1                     	;# 
  3753  07A2                     	;# 
  3754  07A3                     	;# 
  3755  07A4                     	;# 
  3756  07A5                     	;# 
  3757  07A6                     	;# 
  3758  07A7                     	;# 
  3759  07A8                     	;# 
  3760  07A9                     	;# 
  3761  07AA                     	;# 
  3762  07AB                     	;# 
  3763  07AC                     	;# 
  3764  07AD                     	;# 
  3765  07AE                     	;# 
  3766  07AF                     	;# 
  3767  07B0                     	;# 
  3768  07B1                     	;# 
  3769  07B2                     	;# 
  3770  07B3                     	;# 
  3771  07B4                     	;# 
  3772  07B5                     	;# 
  3773  07B6                     	;# 
  3774  07B7                     	;# 
  3775  0FE4                     	;# 
  3776  0FE5                     	;# 
  3777  0FE6                     	;# 
  3778  0FE7                     	;# 
  3779  0FE8                     	;# 
  3780  0FE9                     	;# 
  3781  0FEA                     	;# 
  3782  0FEB                     	;# 
  3783  0FED                     	;# 
  3784  0FEE                     	;# 
  3785  0FEF                     	;# 
  3786  0000                     	;# 
  3787  0001                     	;# 
  3788  0002                     	;# 
  3789  0003                     	;# 
  3790  0004                     	;# 
  3791  0005                     	;# 
  3792  0006                     	;# 
  3793  0007                     	;# 
  3794  0008                     	;# 
  3795  0009                     	;# 
  3796  000A                     	;# 
  3797  000B                     	;# 
  3798  000C                     	;# 
  3799  000D                     	;# 
  3800  000E                     	;# 
  3801  000F                     	;# 
  3802  0010                     	;# 
  3803  0011                     	;# 
  3804  0012                     	;# 
  3805  0013                     	;# 
  3806  0014                     	;# 
  3807  0015                     	;# 
  3808  0016                     	;# 
  3809  0016                     	;# 
  3810  0017                     	;# 
  3811  0018                     	;# 
  3812  0019                     	;# 
  3813  001A                     	;# 
  3814  001B                     	;# 
  3815  001C                     	;# 
  3816  001E                     	;# 
  3817  001F                     	;# 
  3818  008C                     	;# 
  3819  008D                     	;# 
  3820  008E                     	;# 
  3821  008F                     	;# 
  3822  0090                     	;# 
  3823  0091                     	;# 
  3824  0092                     	;# 
  3825  0093                     	;# 
  3826  0094                     	;# 
  3827  0095                     	;# 
  3828  0096                     	;# 
  3829  0097                     	;# 
  3830  0098                     	;# 
  3831  0099                     	;# 
  3832  009A                     	;# 
  3833  009B                     	;# 
  3834  009B                     	;# 
  3835  009C                     	;# 
  3836  009D                     	;# 
  3837  009E                     	;# 
  3838  010C                     	;# 
  3839  010D                     	;# 
  3840  010E                     	;# 
  3841  010F                     	;# 
  3842  0110                     	;# 
  3843  0111                     	;# 
  3844  0112                     	;# 
  3845  0113                     	;# 
  3846  0114                     	;# 
  3847  0115                     	;# 
  3848  0116                     	;# 
  3849  0117                     	;# 
  3850  0118                     	;# 
  3851  0119                     	;# 
  3852  011A                     	;# 
  3853  011B                     	;# 
  3854  011D                     	;# 
  3855  011E                     	;# 
  3856  011F                     	;# 
  3857  018C                     	;# 
  3858  0190                     	;# 
  3859  0191                     	;# 
  3860  0191                     	;# 
  3861  0192                     	;# 
  3862  0193                     	;# 
  3863  0193                     	;# 
  3864  0193                     	;# 
  3865  0194                     	;# 
  3866  0195                     	;# 
  3867  0196                     	;# 
  3868  0199                     	;# 
  3869  0199                     	;# 
  3870  019A                     	;# 
  3871  019A                     	;# 
  3872  019B                     	;# 
  3873  019B                     	;# 
  3874  019B                     	;# 
  3875  019B                     	;# 
  3876  019C                     	;# 
  3877  019C                     	;# 
  3878  019D                     	;# 
  3879  019D                     	;# 
  3880  019E                     	;# 
  3881  019E                     	;# 
  3882  019F                     	;# 
  3883  019F                     	;# 
  3884  020D                     	;# 
  3885  0211                     	;# 
  3886  0211                     	;# 
  3887  0212                     	;# 
  3888  0212                     	;# 
  3889  0213                     	;# 
  3890  0213                     	;# 
  3891  0214                     	;# 
  3892  0214                     	;# 
  3893  0215                     	;# 
  3894  0215                     	;# 
  3895  0215                     	;# 
  3896  0216                     	;# 
  3897  0216                     	;# 
  3898  0217                     	;# 
  3899  0217                     	;# 
  3900  0219                     	;# 
  3901  021A                     	;# 
  3902  021B                     	;# 
  3903  021C                     	;# 
  3904  021D                     	;# 
  3905  021E                     	;# 
  3906  021F                     	;# 
  3907  028C                     	;# 
  3908  028D                     	;# 
  3909  0291                     	;# 
  3910  0291                     	;# 
  3911  0292                     	;# 
  3912  0293                     	;# 
  3913  0294                     	;# 
  3914  0295                     	;# 
  3915  0295                     	;# 
  3916  0296                     	;# 
  3917  0298                     	;# 
  3918  0298                     	;# 
  3919  0299                     	;# 
  3920  029A                     	;# 
  3921  029B                     	;# 
  3922  029C                     	;# 
  3923  029C                     	;# 
  3924  029D                     	;# 
  3925  029E                     	;# 
  3926  029F                     	;# 
  3927  030C                     	;# 
  3928  030D                     	;# 
  3929  0311                     	;# 
  3930  0311                     	;# 
  3931  0312                     	;# 
  3932  0313                     	;# 
  3933  0314                     	;# 
  3934  0315                     	;# 
  3935  0315                     	;# 
  3936  0316                     	;# 
  3937  0318                     	;# 
  3938  0318                     	;# 
  3939  0319                     	;# 
  3940  031A                     	;# 
  3941  031C                     	;# 
  3942  031C                     	;# 
  3943  031D                     	;# 
  3944  031E                     	;# 
  3945  038C                     	;# 
  3946  038D                     	;# 
  3947  0394                     	;# 
  3948  0395                     	;# 
  3949  0396                     	;# 
  3950  040C                     	;# 
  3951  040D                     	;# 
  3952  0415                     	;# 
  3953  0416                     	;# 
  3954  0417                     	;# 
  3955  041C                     	;# 
  3956  041D                     	;# 
  3957  041E                     	;# 
  3958  048D                     	;# 
  3959  0491                     	;# 
  3960  0492                     	;# 
  3961  0493                     	;# 
  3962  0493                     	;# 
  3963  0494                     	;# 
  3964  0495                     	;# 
  3965  0496                     	;# 
  3966  0497                     	;# 
  3967  0791                     	;# 
  3968  0792                     	;# 
  3969  0793                     	;# 
  3970  0794                     	;# 
  3971  0795                     	;# 
  3972  0798                     	;# 
  3973  0799                     	;# 
  3974  079A                     	;# 
  3975  079B                     	;# 
  3976  079C                     	;# 
  3977  079D                     	;# 
  3978  07A0                     	;# 
  3979  07A1                     	;# 
  3980  07A2                     	;# 
  3981  07A3                     	;# 
  3982  07A4                     	;# 
  3983  07A5                     	;# 
  3984  07A6                     	;# 
  3985  07A7                     	;# 
  3986  07A8                     	;# 
  3987  07A9                     	;# 
  3988  07AA                     	;# 
  3989  07AB                     	;# 
  3990  07AC                     	;# 
  3991  07AD                     	;# 
  3992  07AE                     	;# 
  3993  07AF                     	;# 
  3994  07B0                     	;# 
  3995  07B1                     	;# 
  3996  07B2                     	;# 
  3997  07B3                     	;# 
  3998  07B4                     	;# 
  3999  07B5                     	;# 
  4000  07B6                     	;# 
  4001  07B7                     	;# 
  4002  0FE4                     	;# 
  4003  0FE5                     	;# 
  4004  0FE6                     	;# 
  4005  0FE7                     	;# 
  4006  0FE8                     	;# 
  4007  0FE9                     	;# 
  4008  0FEA                     	;# 
  4009  0FEB                     	;# 
  4010  0FED                     	;# 
  4011  0FEE                     	;# 
  4012  0FEF                     	;# 
  4013  0000                     	;# 
  4014  0001                     	;# 
  4015  0002                     	;# 
  4016  0003                     	;# 
  4017  0004                     	;# 
  4018  0005                     	;# 
  4019  0006                     	;# 
  4020  0007                     	;# 
  4021  0008                     	;# 
  4022  0009                     	;# 
  4023  000A                     	;# 
  4024  000B                     	;# 
  4025  000C                     	;# 
  4026  000D                     	;# 
  4027  000E                     	;# 
  4028  000F                     	;# 
  4029  0010                     	;# 
  4030  0011                     	;# 
  4031  0012                     	;# 
  4032  0013                     	;# 
  4033  0014                     	;# 
  4034  0015                     	;# 
  4035  0016                     	;# 
  4036  0016                     	;# 
  4037  0017                     	;# 
  4038  0018                     	;# 
  4039  0019                     	;# 
  4040  001A                     	;# 
  4041  001B                     	;# 
  4042  001C                     	;# 
  4043  001E                     	;# 
  4044  001F                     	;# 
  4045  008C                     	;# 
  4046  008D                     	;# 
  4047  008E                     	;# 
  4048  008F                     	;# 
  4049  0090                     	;# 
  4050  0091                     	;# 
  4051  0092                     	;# 
  4052  0093                     	;# 
  4053  0094                     	;# 
  4054  0095                     	;# 
  4055  0096                     	;# 
  4056  0097                     	;# 
  4057  0098                     	;# 
  4058  0099                     	;# 
  4059  009A                     	;# 
  4060  009B                     	;# 
  4061  009B                     	;# 
  4062  009C                     	;# 
  4063  009D                     	;# 
  4064  009E                     	;# 
  4065  010C                     	;# 
  4066  010D                     	;# 
  4067  010E                     	;# 
  4068  010F                     	;# 
  4069  0110                     	;# 
  4070  0111                     	;# 
  4071  0112                     	;# 
  4072  0113                     	;# 
  4073  0114                     	;# 
  4074  0115                     	;# 
  4075  0116                     	;# 
  4076  0117                     	;# 
  4077  0118                     	;# 
  4078  0119                     	;# 
  4079  011A                     	;# 
  4080  011B                     	;# 
  4081  011D                     	;# 
  4082  011E                     	;# 
  4083  011F                     	;# 
  4084  018C                     	;# 
  4085  0190                     	;# 
  4086  0191                     	;# 
  4087  0191                     	;# 
  4088  0192                     	;# 
  4089  0193                     	;# 
  4090  0193                     	;# 
  4091  0193                     	;# 
  4092  0194                     	;# 
  4093  0195                     	;# 
  4094  0196                     	;# 
  4095  0199                     	;# 
  4096  0199                     	;# 
  4097  019A                     	;# 
  4098  019A                     	;# 
  4099  019B                     	;# 
  4100  019B                     	;# 
  4101  019B                     	;# 
  4102  019B                     	;# 
  4103  019C                     	;# 
  4104  019C                     	;# 
  4105  019D                     	;# 
  4106  019D                     	;# 
  4107  019E                     	;# 
  4108  019E                     	;# 
  4109  019F                     	;# 
  4110  019F                     	;# 
  4111  020D                     	;# 
  4112  0211                     	;# 
  4113  0211                     	;# 
  4114  0212                     	;# 
  4115  0212                     	;# 
  4116  0213                     	;# 
  4117  0213                     	;# 
  4118  0214                     	;# 
  4119  0214                     	;# 
  4120  0215                     	;# 
  4121  0215                     	;# 
  4122  0215                     	;# 
  4123  0216                     	;# 
  4124  0216                     	;# 
  4125  0217                     	;# 
  4126  0217                     	;# 
  4127  0219                     	;# 
  4128  021A                     	;# 
  4129  021B                     	;# 
  4130  021C                     	;# 
  4131  021D                     	;# 
  4132  021E                     	;# 
  4133  021F                     	;# 
  4134  028C                     	;# 
  4135  028D                     	;# 
  4136  0291                     	;# 
  4137  0291                     	;# 
  4138  0292                     	;# 
  4139  0293                     	;# 
  4140  0294                     	;# 
  4141  0295                     	;# 
  4142  0295                     	;# 
  4143  0296                     	;# 
  4144  0298                     	;# 
  4145  0298                     	;# 
  4146  0299                     	;# 
  4147  029A                     	;# 
  4148  029B                     	;# 
  4149  029C                     	;# 
  4150  029C                     	;# 
  4151  029D                     	;# 
  4152  029E                     	;# 
  4153  029F                     	;# 
  4154  030C                     	;# 
  4155  030D                     	;# 
  4156  0311                     	;# 
  4157  0311                     	;# 
  4158  0312                     	;# 
  4159  0313                     	;# 
  4160  0314                     	;# 
  4161  0315                     	;# 
  4162  0315                     	;# 
  4163  0316                     	;# 
  4164  0318                     	;# 
  4165  0318                     	;# 
  4166  0319                     	;# 
  4167  031A                     	;# 
  4168  031C                     	;# 
  4169  031C                     	;# 
  4170  031D                     	;# 
  4171  031E                     	;# 
  4172  038C                     	;# 
  4173  038D                     	;# 
  4174  0394                     	;# 
  4175  0395                     	;# 
  4176  0396                     	;# 
  4177  040C                     	;# 
  4178  040D                     	;# 
  4179  0415                     	;# 
  4180  0416                     	;# 
  4181  0417                     	;# 
  4182  041C                     	;# 
  4183  041D                     	;# 
  4184  041E                     	;# 
  4185  048D                     	;# 
  4186  0491                     	;# 
  4187  0492                     	;# 
  4188  0493                     	;# 
  4189  0493                     	;# 
  4190  0494                     	;# 
  4191  0495                     	;# 
  4192  0496                     	;# 
  4193  0497                     	;# 
  4194  0791                     	;# 
  4195  0792                     	;# 
  4196  0793                     	;# 
  4197  0794                     	;# 
  4198  0795                     	;# 
  4199  0798                     	;# 
  4200  0799                     	;# 
  4201  079A                     	;# 
  4202  079B                     	;# 
  4203  079C                     	;# 
  4204  079D                     	;# 
  4205  07A0                     	;# 
  4206  07A1                     	;# 
  4207  07A2                     	;# 
  4208  07A3                     	;# 
  4209  07A4                     	;# 
  4210  07A5                     	;# 
  4211  07A6                     	;# 
  4212  07A7                     	;# 
  4213  07A8                     	;# 
  4214  07A9                     	;# 
  4215  07AA                     	;# 
  4216  07AB                     	;# 
  4217  07AC                     	;# 
  4218  07AD                     	;# 
  4219  07AE                     	;# 
  4220  07AF                     	;# 
  4221  07B0                     	;# 
  4222  07B1                     	;# 
  4223  07B2                     	;# 
  4224  07B3                     	;# 
  4225  07B4                     	;# 
  4226  07B5                     	;# 
  4227  07B6                     	;# 
  4228  07B7                     	;# 
  4229  0FE4                     	;# 
  4230  0FE5                     	;# 
  4231  0FE6                     	;# 
  4232  0FE7                     	;# 
  4233  0FE8                     	;# 
  4234  0FE9                     	;# 
  4235  0FEA                     	;# 
  4236  0FEB                     	;# 
  4237  0FED                     	;# 
  4238  0FEE                     	;# 
  4239  0FEF                     	;# 
  4240  0000                     	;# 
  4241  0001                     	;# 
  4242  0002                     	;# 
  4243  0003                     	;# 
  4244  0004                     	;# 
  4245  0005                     	;# 
  4246  0006                     	;# 
  4247  0007                     	;# 
  4248  0008                     	;# 
  4249  0009                     	;# 
  4250  000A                     	;# 
  4251  000B                     	;# 
  4252  000C                     	;# 
  4253  000D                     	;# 
  4254  000E                     	;# 
  4255  000F                     	;# 
  4256  0010                     	;# 
  4257  0011                     	;# 
  4258  0012                     	;# 
  4259  0013                     	;# 
  4260  0014                     	;# 
  4261  0015                     	;# 
  4262  0016                     	;# 
  4263  0016                     	;# 
  4264  0017                     	;# 
  4265  0018                     	;# 
  4266  0019                     	;# 
  4267  001A                     	;# 
  4268  001B                     	;# 
  4269  001C                     	;# 
  4270  001E                     	;# 
  4271  001F                     	;# 
  4272  008C                     	;# 
  4273  008D                     	;# 
  4274  008E                     	;# 
  4275  008F                     	;# 
  4276  0090                     	;# 
  4277  0091                     	;# 
  4278  0092                     	;# 
  4279  0093                     	;# 
  4280  0094                     	;# 
  4281  0095                     	;# 
  4282  0096                     	;# 
  4283  0097                     	;# 
  4284  0098                     	;# 
  4285  0099                     	;# 
  4286  009A                     	;# 
  4287  009B                     	;# 
  4288  009B                     	;# 
  4289  009C                     	;# 
  4290  009D                     	;# 
  4291  009E                     	;# 
  4292  010C                     	;# 
  4293  010D                     	;# 
  4294  010E                     	;# 
  4295  010F                     	;# 
  4296  0110                     	;# 
  4297  0111                     	;# 
  4298  0112                     	;# 
  4299  0113                     	;# 
  4300  0114                     	;# 
  4301  0115                     	;# 
  4302  0116                     	;# 
  4303  0117                     	;# 
  4304  0118                     	;# 
  4305  0119                     	;# 
  4306  011A                     	;# 
  4307  011B                     	;# 
  4308  011D                     	;# 
  4309  011E                     	;# 
  4310  011F                     	;# 
  4311  018C                     	;# 
  4312  0190                     	;# 
  4313  0191                     	;# 
  4314  0191                     	;# 
  4315  0192                     	;# 
  4316  0193                     	;# 
  4317  0193                     	;# 
  4318  0193                     	;# 
  4319  0194                     	;# 
  4320  0195                     	;# 
  4321  0196                     	;# 
  4322  0199                     	;# 
  4323  0199                     	;# 
  4324  019A                     	;# 
  4325  019A                     	;# 
  4326  019B                     	;# 
  4327  019B                     	;# 
  4328  019B                     	;# 
  4329  019B                     	;# 
  4330  019C                     	;# 
  4331  019C                     	;# 
  4332  019D                     	;# 
  4333  019D                     	;# 
  4334  019E                     	;# 
  4335  019E                     	;# 
  4336  019F                     	;# 
  4337  019F                     	;# 
  4338  020D                     	;# 
  4339  0211                     	;# 
  4340  0211                     	;# 
  4341  0212                     	;# 
  4342  0212                     	;# 
  4343  0213                     	;# 
  4344  0213                     	;# 
  4345  0214                     	;# 
  4346  0214                     	;# 
  4347  0215                     	;# 
  4348  0215                     	;# 
  4349  0215                     	;# 
  4350  0216                     	;# 
  4351  0216                     	;# 
  4352  0217                     	;# 
  4353  0217                     	;# 
  4354  0219                     	;# 
  4355  021A                     	;# 
  4356  021B                     	;# 
  4357  021C                     	;# 
  4358  021D                     	;# 
  4359  021E                     	;# 
  4360  021F                     	;# 
  4361  028C                     	;# 
  4362  028D                     	;# 
  4363  0291                     	;# 
  4364  0291                     	;# 
  4365  0292                     	;# 
  4366  0293                     	;# 
  4367  0294                     	;# 
  4368  0295                     	;# 
  4369  0295                     	;# 
  4370  0296                     	;# 
  4371  0298                     	;# 
  4372  0298                     	;# 
  4373  0299                     	;# 
  4374  029A                     	;# 
  4375  029B                     	;# 
  4376  029C                     	;# 
  4377  029C                     	;# 
  4378  029D                     	;# 
  4379  029E                     	;# 
  4380  029F                     	;# 
  4381  030C                     	;# 
  4382  030D                     	;# 
  4383  0311                     	;# 
  4384  0311                     	;# 
  4385  0312                     	;# 
  4386  0313                     	;# 
  4387  0314                     	;# 
  4388  0315                     	;# 
  4389  0315                     	;# 
  4390  0316                     	;# 
  4391  0318                     	;# 
  4392  0318                     	;# 
  4393  0319                     	;# 
  4394  031A                     	;# 
  4395  031C                     	;# 
  4396  031C                     	;# 
  4397  031D                     	;# 
  4398  031E                     	;# 
  4399  038C                     	;# 
  4400  038D                     	;# 
  4401  0394                     	;# 
  4402  0395                     	;# 
  4403  0396                     	;# 
  4404  040C                     	;# 
  4405  040D                     	;# 
  4406  0415                     	;# 
  4407  0416                     	;# 
  4408  0417                     	;# 
  4409  041C                     	;# 
  4410  041D                     	;# 
  4411  041E                     	;# 
  4412  048D                     	;# 
  4413  0491                     	;# 
  4414  0492                     	;# 
  4415  0493                     	;# 
  4416  0493                     	;# 
  4417  0494                     	;# 
  4418  0495                     	;# 
  4419  0496                     	;# 
  4420  0497                     	;# 
  4421  0791                     	;# 
  4422  0792                     	;# 
  4423  0793                     	;# 
  4424  0794                     	;# 
  4425  0795                     	;# 
  4426  0798                     	;# 
  4427  0799                     	;# 
  4428  079A                     	;# 
  4429  079B                     	;# 
  4430  079C                     	;# 
  4431  079D                     	;# 
  4432  07A0                     	;# 
  4433  07A1                     	;# 
  4434  07A2                     	;# 
  4435  07A3                     	;# 
  4436  07A4                     	;# 
  4437  07A5                     	;# 
  4438  07A6                     	;# 
  4439  07A7                     	;# 
  4440  07A8                     	;# 
  4441  07A9                     	;# 
  4442  07AA                     	;# 
  4443  07AB                     	;# 
  4444  07AC                     	;# 
  4445  07AD                     	;# 
  4446  07AE                     	;# 
  4447  07AF                     	;# 
  4448  07B0                     	;# 
  4449  07B1                     	;# 
  4450  07B2                     	;# 
  4451  07B3                     	;# 
  4452  07B4                     	;# 
  4453  07B5                     	;# 
  4454  07B6                     	;# 
  4455  07B7                     	;# 
  4456  0FE4                     	;# 
  4457  0FE5                     	;# 
  4458  0FE6                     	;# 
  4459  0FE7                     	;# 
  4460  0FE8                     	;# 
  4461  0FE9                     	;# 
  4462  0FEA                     	;# 
  4463  0FEB                     	;# 
  4464  0FED                     	;# 
  4465  0FEE                     	;# 
  4466  0FEF                     	;# 
  4467  0000                     	;# 
  4468  0001                     	;# 
  4469  0002                     	;# 
  4470  0003                     	;# 
  4471  0004                     	;# 
  4472  0005                     	;# 
  4473  0006                     	;# 
  4474  0007                     	;# 
  4475  0008                     	;# 
  4476  0009                     	;# 
  4477  000A                     	;# 
  4478  000B                     	;# 
  4479  000C                     	;# 
  4480  000D                     	;# 
  4481  000E                     	;# 
  4482  000F                     	;# 
  4483  0010                     	;# 
  4484  0011                     	;# 
  4485  0012                     	;# 
  4486  0013                     	;# 
  4487  0014                     	;# 
  4488  0015                     	;# 
  4489  0016                     	;# 
  4490  0016                     	;# 
  4491  0017                     	;# 
  4492  0018                     	;# 
  4493  0019                     	;# 
  4494  001A                     	;# 
  4495  001B                     	;# 
  4496  001C                     	;# 
  4497  001E                     	;# 
  4498  001F                     	;# 
  4499  008C                     	;# 
  4500  008D                     	;# 
  4501  008E                     	;# 
  4502  008F                     	;# 
  4503  0090                     	;# 
  4504  0091                     	;# 
  4505  0092                     	;# 
  4506  0093                     	;# 
  4507  0094                     	;# 
  4508  0095                     	;# 
  4509  0096                     	;# 
  4510  0097                     	;# 
  4511  0098                     	;# 
  4512  0099                     	;# 
  4513  009A                     	;# 
  4514  009B                     	;# 
  4515  009B                     	;# 
  4516  009C                     	;# 
  4517  009D                     	;# 
  4518  009E                     	;# 
  4519  010C                     	;# 
  4520  010D                     	;# 
  4521  010E                     	;# 
  4522  010F                     	;# 
  4523  0110                     	;# 
  4524  0111                     	;# 
  4525  0112                     	;# 
  4526  0113                     	;# 
  4527  0114                     	;# 
  4528  0115                     	;# 
  4529  0116                     	;# 
  4530  0117                     	;# 
  4531  0118                     	;# 
  4532  0119                     	;# 
  4533  011A                     	;# 
  4534  011B                     	;# 
  4535  011D                     	;# 
  4536  011E                     	;# 
  4537  011F                     	;# 
  4538  018C                     	;# 
  4539  0190                     	;# 
  4540  0191                     	;# 
  4541  0191                     	;# 
  4542  0192                     	;# 
  4543  0193                     	;# 
  4544  0193                     	;# 
  4545  0193                     	;# 
  4546  0194                     	;# 
  4547  0195                     	;# 
  4548  0196                     	;# 
  4549  0199                     	;# 
  4550  0199                     	;# 
  4551  019A                     	;# 
  4552  019A                     	;# 
  4553  019B                     	;# 
  4554  019B                     	;# 
  4555  019B                     	;# 
  4556  019B                     	;# 
  4557  019C                     	;# 
  4558  019C                     	;# 
  4559  019D                     	;# 
  4560  019D                     	;# 
  4561  019E                     	;# 
  4562  019E                     	;# 
  4563  019F                     	;# 
  4564  019F                     	;# 
  4565  020D                     	;# 
  4566  0211                     	;# 
  4567  0211                     	;# 
  4568  0212                     	;# 
  4569  0212                     	;# 
  4570  0213                     	;# 
  4571  0213                     	;# 
  4572  0214                     	;# 
  4573  0214                     	;# 
  4574  0215                     	;# 
  4575  0215                     	;# 
  4576  0215                     	;# 
  4577  0216                     	;# 
  4578  0216                     	;# 
  4579  0217                     	;# 
  4580  0217                     	;# 
  4581  0219                     	;# 
  4582  021A                     	;# 
  4583  021B                     	;# 
  4584  021C                     	;# 
  4585  021D                     	;# 
  4586  021E                     	;# 
  4587  021F                     	;# 
  4588  028C                     	;# 
  4589  028D                     	;# 
  4590  0291                     	;# 
  4591  0291                     	;# 
  4592  0292                     	;# 
  4593  0293                     	;# 
  4594  0294                     	;# 
  4595  0295                     	;# 
  4596  0295                     	;# 
  4597  0296                     	;# 
  4598  0298                     	;# 
  4599  0298                     	;# 
  4600  0299                     	;# 
  4601  029A                     	;# 
  4602  029B                     	;# 
  4603  029C                     	;# 
  4604  029C                     	;# 
  4605  029D                     	;# 
  4606  029E                     	;# 
  4607  029F                     	;# 
  4608  030C                     	;# 
  4609  030D                     	;# 
  4610  0311                     	;# 
  4611  0311                     	;# 
  4612  0312                     	;# 
  4613  0313                     	;# 
  4614  0314                     	;# 
  4615  0315                     	;# 
  4616  0315                     	;# 
  4617  0316                     	;# 
  4618  0318                     	;# 
  4619  0318                     	;# 
  4620  0319                     	;# 
  4621  031A                     	;# 
  4622  031C                     	;# 
  4623  031C                     	;# 
  4624  031D                     	;# 
  4625  031E                     	;# 
  4626  038C                     	;# 
  4627  038D                     	;# 
  4628  0394                     	;# 
  4629  0395                     	;# 
  4630  0396                     	;# 
  4631  040C                     	;# 
  4632  040D                     	;# 
  4633  0415                     	;# 
  4634  0416                     	;# 
  4635  0417                     	;# 
  4636  041C                     	;# 
  4637  041D                     	;# 
  4638  041E                     	;# 
  4639  048D                     	;# 
  4640  0491                     	;# 
  4641  0492                     	;# 
  4642  0493                     	;# 
  4643  0493                     	;# 
  4644  0494                     	;# 
  4645  0495                     	;# 
  4646  0496                     	;# 
  4647  0497                     	;# 
  4648  0791                     	;# 
  4649  0792                     	;# 
  4650  0793                     	;# 
  4651  0794                     	;# 
  4652  0795                     	;# 
  4653  0798                     	;# 
  4654  0799                     	;# 
  4655  079A                     	;# 
  4656  079B                     	;# 
  4657  079C                     	;# 
  4658  079D                     	;# 
  4659  07A0                     	;# 
  4660  07A1                     	;# 
  4661  07A2                     	;# 
  4662  07A3                     	;# 
  4663  07A4                     	;# 
  4664  07A5                     	;# 
  4665  07A6                     	;# 
  4666  07A7                     	;# 
  4667  07A8                     	;# 
  4668  07A9                     	;# 
  4669  07AA                     	;# 
  4670  07AB                     	;# 
  4671  07AC                     	;# 
  4672  07AD                     	;# 
  4673  07AE                     	;# 
  4674  07AF                     	;# 
  4675  07B0                     	;# 
  4676  07B1                     	;# 
  4677  07B2                     	;# 
  4678  07B3                     	;# 
  4679  07B4                     	;# 
  4680  07B5                     	;# 
  4681  07B6                     	;# 
  4682  07B7                     	;# 
  4683  0FE4                     	;# 
  4684  0FE5                     	;# 
  4685  0FE6                     	;# 
  4686  0FE7                     	;# 
  4687  0FE8                     	;# 
  4688  0FE9                     	;# 
  4689  0FEA                     	;# 
  4690  0FEB                     	;# 
  4691  0FED                     	;# 
  4692  0FEE                     	;# 
  4693  0FEF                     	;# 
  4694  0000                     	;# 
  4695  0001                     	;# 
  4696  0002                     	;# 
  4697  0003                     	;# 
  4698  0004                     	;# 
  4699  0005                     	;# 
  4700  0006                     	;# 
  4701  0007                     	;# 
  4702  0008                     	;# 
  4703  0009                     	;# 
  4704  000A                     	;# 
  4705  000B                     	;# 
  4706  000C                     	;# 
  4707  000D                     	;# 
  4708  000E                     	;# 
  4709  000F                     	;# 
  4710  0010                     	;# 
  4711  0011                     	;# 
  4712  0012                     	;# 
  4713  0013                     	;# 
  4714  0014                     	;# 
  4715  0015                     	;# 
  4716  0016                     	;# 
  4717  0016                     	;# 
  4718  0017                     	;# 
  4719  0018                     	;# 
  4720  0019                     	;# 
  4721  001A                     	;# 
  4722  001B                     	;# 
  4723  001C                     	;# 
  4724  001E                     	;# 
  4725  001F                     	;# 
  4726  008C                     	;# 
  4727  008D                     	;# 
  4728  008E                     	;# 
  4729  008F                     	;# 
  4730  0090                     	;# 
  4731  0091                     	;# 
  4732  0092                     	;# 
  4733  0093                     	;# 
  4734  0094                     	;# 
  4735  0095                     	;# 
  4736  0096                     	;# 
  4737  0097                     	;# 
  4738  0098                     	;# 
  4739  0099                     	;# 
  4740  009A                     	;# 
  4741  009B                     	;# 
  4742  009B                     	;# 
  4743  009C                     	;# 
  4744  009D                     	;# 
  4745  009E                     	;# 
  4746  010C                     	;# 
  4747  010D                     	;# 
  4748  010E                     	;# 
  4749  010F                     	;# 
  4750  0110                     	;# 
  4751  0111                     	;# 
  4752  0112                     	;# 
  4753  0113                     	;# 
  4754  0114                     	;# 
  4755  0115                     	;# 
  4756  0116                     	;# 
  4757  0117                     	;# 
  4758  0118                     	;# 
  4759  0119                     	;# 
  4760  011A                     	;# 
  4761  011B                     	;# 
  4762  011D                     	;# 
  4763  011E                     	;# 
  4764  011F                     	;# 
  4765  018C                     	;# 
  4766  0190                     	;# 
  4767  0191                     	;# 
  4768  0191                     	;# 
  4769  0192                     	;# 
  4770  0193                     	;# 
  4771  0193                     	;# 
  4772  0193                     	;# 
  4773  0194                     	;# 
  4774  0195                     	;# 
  4775  0196                     	;# 
  4776  0199                     	;# 
  4777  0199                     	;# 
  4778  019A                     	;# 
  4779  019A                     	;# 
  4780  019B                     	;# 
  4781  019B                     	;# 
  4782  019B                     	;# 
  4783  019B                     	;# 
  4784  019C                     	;# 
  4785  019C                     	;# 
  4786  019D                     	;# 
  4787  019D                     	;# 
  4788  019E                     	;# 
  4789  019E                     	;# 
  4790  019F                     	;# 
  4791  019F                     	;# 
  4792  020D                     	;# 
  4793  0211                     	;# 
  4794  0211                     	;# 
  4795  0212                     	;# 
  4796  0212                     	;# 
  4797  0213                     	;# 
  4798  0213                     	;# 
  4799  0214                     	;# 
  4800  0214                     	;# 
  4801  0215                     	;# 
  4802  0215                     	;# 
  4803  0215                     	;# 
  4804  0216                     	;# 
  4805  0216                     	;# 
  4806  0217                     	;# 
  4807  0217                     	;# 
  4808  0219                     	;# 
  4809  021A                     	;# 
  4810  021B                     	;# 
  4811  021C                     	;# 
  4812  021D                     	;# 
  4813  021E                     	;# 
  4814  021F                     	;# 
  4815  028C                     	;# 
  4816  028D                     	;# 
  4817  0291                     	;# 
  4818  0291                     	;# 
  4819  0292                     	;# 
  4820  0293                     	;# 
  4821  0294                     	;# 
  4822  0295                     	;# 
  4823  0295                     	;# 
  4824  0296                     	;# 
  4825  0298                     	;# 
  4826  0298                     	;# 
  4827  0299                     	;# 
  4828  029A                     	;# 
  4829  029B                     	;# 
  4830  029C                     	;# 
  4831  029C                     	;# 
  4832  029D                     	;# 
  4833  029E                     	;# 
  4834  029F                     	;# 
  4835  030C                     	;# 
  4836  030D                     	;# 
  4837  0311                     	;# 
  4838  0311                     	;# 
  4839  0312                     	;# 
  4840  0313                     	;# 
  4841  0314                     	;# 
  4842  0315                     	;# 
  4843  0315                     	;# 
  4844  0316                     	;# 
  4845  0318                     	;# 
  4846  0318                     	;# 
  4847  0319                     	;# 
  4848  031A                     	;# 
  4849  031C                     	;# 
  4850  031C                     	;# 
  4851  031D                     	;# 
  4852  031E                     	;# 
  4853  038C                     	;# 
  4854  038D                     	;# 
  4855  0394                     	;# 
  4856  0395                     	;# 
  4857  0396                     	;# 
  4858  040C                     	;# 
  4859  040D                     	;# 
  4860  0415                     	;# 
  4861  0416                     	;# 
  4862  0417                     	;# 
  4863  041C                     	;# 
  4864  041D                     	;# 
  4865  041E                     	;# 
  4866  048D                     	;# 
  4867  0491                     	;# 
  4868  0492                     	;# 
  4869  0493                     	;# 
  4870  0493                     	;# 
  4871  0494                     	;# 
  4872  0495                     	;# 
  4873  0496                     	;# 
  4874  0497                     	;# 
  4875  0791                     	;# 
  4876  0792                     	;# 
  4877  0793                     	;# 
  4878  0794                     	;# 
  4879  0795                     	;# 
  4880  0798                     	;# 
  4881  0799                     	;# 
  4882  079A                     	;# 
  4883  079B                     	;# 
  4884  079C                     	;# 
  4885  079D                     	;# 
  4886  07A0                     	;# 
  4887  07A1                     	;# 
  4888  07A2                     	;# 
  4889  07A3                     	;# 
  4890  07A4                     	;# 
  4891  07A5                     	;# 
  4892  07A6                     	;# 
  4893  07A7                     	;# 
  4894  07A8                     	;# 
  4895  07A9                     	;# 
  4896  07AA                     	;# 
  4897  07AB                     	;# 
  4898  07AC                     	;# 
  4899  07AD                     	;# 
  4900  07AE                     	;# 
  4901  07AF                     	;# 
  4902  07B0                     	;# 
  4903  07B1                     	;# 
  4904  07B2                     	;# 
  4905  07B3                     	;# 
  4906  07B4                     	;# 
  4907  07B5                     	;# 
  4908  07B6                     	;# 
  4909  07B7                     	;# 
  4910  0FE4                     	;# 
  4911  0FE5                     	;# 
  4912  0FE6                     	;# 
  4913  0FE7                     	;# 
  4914  0FE8                     	;# 
  4915  0FE9                     	;# 
  4916  0FEA                     	;# 
  4917  0FEB                     	;# 
  4918  0FED                     	;# 
  4919  0FEE                     	;# 
  4920  0FEF                     	;# 
  4921  0000                     	;# 
  4922  0001                     	;# 
  4923  0002                     	;# 
  4924  0003                     	;# 
  4925  0004                     	;# 
  4926  0005                     	;# 
  4927  0006                     	;# 
  4928  0007                     	;# 
  4929  0008                     	;# 
  4930  0009                     	;# 
  4931  000A                     	;# 
  4932  000B                     	;# 
  4933  000C                     	;# 
  4934  000D                     	;# 
  4935  000E                     	;# 
  4936  000F                     	;# 
  4937  0010                     	;# 
  4938  0011                     	;# 
  4939  0012                     	;# 
  4940  0013                     	;# 
  4941  0014                     	;# 
  4942  0015                     	;# 
  4943  0016                     	;# 
  4944  0016                     	;# 
  4945  0017                     	;# 
  4946  0018                     	;# 
  4947  0019                     	;# 
  4948  001A                     	;# 
  4949  001B                     	;# 
  4950  001C                     	;# 
  4951  001E                     	;# 
  4952  001F                     	;# 
  4953  008C                     	;# 
  4954  008D                     	;# 
  4955  008E                     	;# 
  4956  008F                     	;# 
  4957  0090                     	;# 
  4958  0091                     	;# 
  4959  0092                     	;# 
  4960  0093                     	;# 
  4961  0094                     	;# 
  4962  0095                     	;# 
  4963  0096                     	;# 
  4964  0097                     	;# 
  4965  0098                     	;# 
  4966  0099                     	;# 
  4967  009A                     	;# 
  4968  009B                     	;# 
  4969  009B                     	;# 
  4970  009C                     	;# 
  4971  009D                     	;# 
  4972  009E                     	;# 
  4973  010C                     	;# 
  4974  010D                     	;# 
  4975  010E                     	;# 
  4976  010F                     	;# 
  4977  0110                     	;# 
  4978  0111                     	;# 
  4979  0112                     	;# 
  4980  0113                     	;# 
  4981  0114                     	;# 
  4982  0115                     	;# 
  4983  0116                     	;# 
  4984  0117                     	;# 
  4985  0118                     	;# 
  4986  0119                     	;# 
  4987  011A                     	;# 
  4988  011B                     	;# 
  4989  011D                     	;# 
  4990  011E                     	;# 
  4991  011F                     	;# 
  4992  018C                     	;# 
  4993  0190                     	;# 
  4994  0191                     	;# 
  4995  0191                     	;# 
  4996  0192                     	;# 
  4997  0193                     	;# 
  4998  0193                     	;# 
  4999  0193                     	;# 
  5000  0194                     	;# 
  5001  0195                     	;# 
  5002  0196                     	;# 
  5003  0199                     	;# 
  5004  0199                     	;# 
  5005  019A                     	;# 
  5006  019A                     	;# 
  5007  019B                     	;# 
  5008  019B                     	;# 
  5009  019B                     	;# 
  5010  019B                     	;# 
  5011  019C                     	;# 
  5012  019C                     	;# 
  5013  019D                     	;# 
  5014  019D                     	;# 
  5015  019E                     	;# 
  5016  019E                     	;# 
  5017  019F                     	;# 
  5018  019F                     	;# 
  5019  020D                     	;# 
  5020  0211                     	;# 
  5021  0211                     	;# 
  5022  0212                     	;# 
  5023  0212                     	;# 
  5024  0213                     	;# 
  5025  0213                     	;# 
  5026  0214                     	;# 
  5027  0214                     	;# 
  5028  0215                     	;# 
  5029  0215                     	;# 
  5030  0215                     	;# 
  5031  0216                     	;# 
  5032  0216                     	;# 
  5033  0217                     	;# 
  5034  0217                     	;# 
  5035  0219                     	;# 
  5036  021A                     	;# 
  5037  021B                     	;# 
  5038  021C                     	;# 
  5039  021D                     	;# 
  5040  021E                     	;# 
  5041  021F                     	;# 
  5042  028C                     	;# 
  5043  028D                     	;# 
  5044  0291                     	;# 
  5045  0291                     	;# 
  5046  0292                     	;# 
  5047  0293                     	;# 
  5048  0294                     	;# 
  5049  0295                     	;# 
  5050  0295                     	;# 
  5051  0296                     	;# 
  5052  0298                     	;# 
  5053  0298                     	;# 
  5054  0299                     	;# 
  5055  029A                     	;# 
  5056  029B                     	;# 
  5057  029C                     	;# 
  5058  029C                     	;# 
  5059  029D                     	;# 
  5060  029E                     	;# 
  5061  029F                     	;# 
  5062  030C                     	;# 
  5063  030D                     	;# 
  5064  0311                     	;# 
  5065  0311                     	;# 
  5066  0312                     	;# 
  5067  0313                     	;# 
  5068  0314                     	;# 
  5069  0315                     	;# 
  5070  0315                     	;# 
  5071  0316                     	;# 
  5072  0318                     	;# 
  5073  0318                     	;# 
  5074  0319                     	;# 
  5075  031A                     	;# 
  5076  031C                     	;# 
  5077  031C                     	;# 
  5078  031D                     	;# 
  5079  031E                     	;# 
  5080  038C                     	;# 
  5081  038D                     	;# 
  5082  0394                     	;# 
  5083  0395                     	;# 
  5084  0396                     	;# 
  5085  040C                     	;# 
  5086  040D                     	;# 
  5087  0415                     	;# 
  5088  0416                     	;# 
  5089  0417                     	;# 
  5090  041C                     	;# 
  5091  041D                     	;# 
  5092  041E                     	;# 
  5093  048D                     	;# 
  5094  0491                     	;# 
  5095  0492                     	;# 
  5096  0493                     	;# 
  5097  0493                     	;# 
  5098  0494                     	;# 
  5099  0495                     	;# 
  5100  0496                     	;# 
  5101  0497                     	;# 
  5102  0791                     	;# 
  5103  0792                     	;# 
  5104  0793                     	;# 
  5105  0794                     	;# 
  5106  0795                     	;# 
  5107  0798                     	;# 
  5108  0799                     	;# 
  5109  079A                     	;# 
  5110  079B                     	;# 
  5111  079C                     	;# 
  5112  079D                     	;# 
  5113  07A0                     	;# 
  5114  07A1                     	;# 
  5115  07A2                     	;# 
  5116  07A3                     	;# 
  5117  07A4                     	;# 
  5118  07A5                     	;# 
  5119  07A6                     	;# 
  5120  07A7                     	;# 
  5121  07A8                     	;# 
  5122  07A9                     	;# 
  5123  07AA                     	;# 
  5124  07AB                     	;# 
  5125  07AC                     	;# 
  5126  07AD                     	;# 
  5127  07AE                     	;# 
  5128  07AF                     	;# 
  5129  07B0                     	;# 
  5130  07B1                     	;# 
  5131  07B2                     	;# 
  5132  07B3                     	;# 
  5133  07B4                     	;# 
  5134  07B5                     	;# 
  5135  07B6                     	;# 
  5136  07B7                     	;# 
  5137  0FE4                     	;# 
  5138  0FE5                     	;# 
  5139  0FE6                     	;# 
  5140  0FE7                     	;# 
  5141  0FE8                     	;# 
  5142  0FE9                     	;# 
  5143  0FEA                     	;# 
  5144  0FEB                     	;# 
  5145  0FED                     	;# 
  5146  0FEE                     	;# 
  5147  0FEF                     	;# 
  5148  0000                     	;# 
  5149  0001                     	;# 
  5150  0002                     	;# 
  5151  0003                     	;# 
  5152  0004                     	;# 
  5153  0005                     	;# 
  5154  0006                     	;# 
  5155  0007                     	;# 
  5156  0008                     	;# 
  5157  0009                     	;# 
  5158  000A                     	;# 
  5159  000B                     	;# 
  5160  000C                     	;# 
  5161  000D                     	;# 
  5162  000E                     	;# 
  5163  000F                     	;# 
  5164  0010                     	;# 
  5165  0011                     	;# 
  5166  0012                     	;# 
  5167  0013                     	;# 
  5168  0014                     	;# 
  5169  0015                     	;# 
  5170  0016                     	;# 
  5171  0016                     	;# 
  5172  0017                     	;# 
  5173  0018                     	;# 
  5174  0019                     	;# 
  5175  001A                     	;# 
  5176  001B                     	;# 
  5177  001C                     	;# 
  5178  001E                     	;# 
  5179  001F                     	;# 
  5180  008C                     	;# 
  5181  008D                     	;# 
  5182  008E                     	;# 
  5183  008F                     	;# 
  5184  0090                     	;# 
  5185  0091                     	;# 
  5186  0092                     	;# 
  5187  0093                     	;# 
  5188  0094                     	;# 
  5189  0095                     	;# 
  5190  0096                     	;# 
  5191  0097                     	;# 
  5192  0098                     	;# 
  5193  0099                     	;# 
  5194  009A                     	;# 
  5195  009B                     	;# 
  5196  009B                     	;# 
  5197  009C                     	;# 
  5198  009D                     	;# 
  5199  009E                     	;# 
  5200  010C                     	;# 
  5201  010D                     	;# 
  5202  010E                     	;# 
  5203  010F                     	;# 
  5204  0110                     	;# 
  5205  0111                     	;# 
  5206  0112                     	;# 
  5207  0113                     	;# 
  5208  0114                     	;# 
  5209  0115                     	;# 
  5210  0116                     	;# 
  5211  0117                     	;# 
  5212  0118                     	;# 
  5213  0119                     	;# 
  5214  011A                     	;# 
  5215  011B                     	;# 
  5216  011D                     	;# 
  5217  011E                     	;# 
  5218  011F                     	;# 
  5219  018C                     	;# 
  5220  0190                     	;# 
  5221  0191                     	;# 
  5222  0191                     	;# 
  5223  0192                     	;# 
  5224  0193                     	;# 
  5225  0193                     	;# 
  5226  0193                     	;# 
  5227  0194                     	;# 
  5228  0195                     	;# 
  5229  0196                     	;# 
  5230  0199                     	;# 
  5231  0199                     	;# 
  5232  019A                     	;# 
  5233  019A                     	;# 
  5234  019B                     	;# 
  5235  019B                     	;# 
  5236  019B                     	;# 
  5237  019B                     	;# 
  5238  019C                     	;# 
  5239  019C                     	;# 
  5240  019D                     	;# 
  5241  019D                     	;# 
  5242  019E                     	;# 
  5243  019E                     	;# 
  5244  019F                     	;# 
  5245  019F                     	;# 
  5246  020D                     	;# 
  5247  0211                     	;# 
  5248  0211                     	;# 
  5249  0212                     	;# 
  5250  0212                     	;# 
  5251  0213                     	;# 
  5252  0213                     	;# 
  5253  0214                     	;# 
  5254  0214                     	;# 
  5255  0215                     	;# 
  5256  0215                     	;# 
  5257  0215                     	;# 
  5258  0216                     	;# 
  5259  0216                     	;# 
  5260  0217                     	;# 
  5261  0217                     	;# 
  5262  0219                     	;# 
  5263  021A                     	;# 
  5264  021B                     	;# 
  5265  021C                     	;# 
  5266  021D                     	;# 
  5267  021E                     	;# 
  5268  021F                     	;# 
  5269  028C                     	;# 
  5270  028D                     	;# 
  5271  0291                     	;# 
  5272  0291                     	;# 
  5273  0292                     	;# 
  5274  0293                     	;# 
  5275  0294                     	;# 
  5276  0295                     	;# 
  5277  0295                     	;# 
  5278  0296                     	;# 
  5279  0298                     	;# 
  5280  0298                     	;# 
  5281  0299                     	;# 
  5282  029A                     	;# 
  5283  029B                     	;# 
  5284  029C                     	;# 
  5285  029C                     	;# 
  5286  029D                     	;# 
  5287  029E                     	;# 
  5288  029F                     	;# 
  5289  030C                     	;# 
  5290  030D                     	;# 
  5291  0311                     	;# 
  5292  0311                     	;# 
  5293  0312                     	;# 
  5294  0313                     	;# 
  5295  0314                     	;# 
  5296  0315                     	;# 
  5297  0315                     	;# 
  5298  0316                     	;# 
  5299  0318                     	;# 
  5300  0318                     	;# 
  5301  0319                     	;# 
  5302  031A                     	;# 
  5303  031C                     	;# 
  5304  031C                     	;# 
  5305  031D                     	;# 
  5306  031E                     	;# 
  5307  038C                     	;# 
  5308  038D                     	;# 
  5309  0394                     	;# 
  5310  0395                     	;# 
  5311  0396                     	;# 
  5312  040C                     	;# 
  5313  040D                     	;# 
  5314  0415                     	;# 
  5315  0416                     	;# 
  5316  0417                     	;# 
  5317  041C                     	;# 
  5318  041D                     	;# 
  5319  041E                     	;# 
  5320  048D                     	;# 
  5321  0491                     	;# 
  5322  0492                     	;# 
  5323  0493                     	;# 
  5324  0493                     	;# 
  5325  0494                     	;# 
  5326  0495                     	;# 
  5327  0496                     	;# 
  5328  0497                     	;# 
  5329  0791                     	;# 
  5330  0792                     	;# 
  5331  0793                     	;# 
  5332  0794                     	;# 
  5333  0795                     	;# 
  5334  0798                     	;# 
  5335  0799                     	;# 
  5336  079A                     	;# 
  5337  079B                     	;# 
  5338  079C                     	;# 
  5339  079D                     	;# 
  5340  07A0                     	;# 
  5341  07A1                     	;# 
  5342  07A2                     	;# 
  5343  07A3                     	;# 
  5344  07A4                     	;# 
  5345  07A5                     	;# 
  5346  07A6                     	;# 
  5347  07A7                     	;# 
  5348  07A8                     	;# 
  5349  07A9                     	;# 
  5350  07AA                     	;# 
  5351  07AB                     	;# 
  5352  07AC                     	;# 
  5353  07AD                     	;# 
  5354  07AE                     	;# 
  5355  07AF                     	;# 
  5356  07B0                     	;# 
  5357  07B1                     	;# 
  5358  07B2                     	;# 
  5359  07B3                     	;# 
  5360  07B4                     	;# 
  5361  07B5                     	;# 
  5362  07B6                     	;# 
  5363  07B7                     	;# 
  5364  0FE4                     	;# 
  5365  0FE5                     	;# 
  5366  0FE6                     	;# 
  5367  0FE7                     	;# 
  5368  0FE8                     	;# 
  5369  0FE9                     	;# 
  5370  0FEA                     	;# 
  5371  0FEB                     	;# 
  5372  0FED                     	;# 
  5373  0FEE                     	;# 
  5374  0FEF                     	;# 
  5375  0000                     	;# 
  5376  0001                     	;# 
  5377  0002                     	;# 
  5378  0003                     	;# 
  5379  0004                     	;# 
  5380  0005                     	;# 
  5381  0006                     	;# 
  5382  0007                     	;# 
  5383  0008                     	;# 
  5384  0009                     	;# 
  5385  000A                     	;# 
  5386  000B                     	;# 
  5387  000C                     	;# 
  5388  000D                     	;# 
  5389  000E                     	;# 
  5390  000F                     	;# 
  5391  0010                     	;# 
  5392  0011                     	;# 
  5393  0012                     	;# 
  5394  0013                     	;# 
  5395  0014                     	;# 
  5396  0015                     	;# 
  5397  0016                     	;# 
  5398  0016                     	;# 
  5399  0017                     	;# 
  5400  0018                     	;# 
  5401  0019                     	;# 
  5402  001A                     	;# 
  5403  001B                     	;# 
  5404  001C                     	;# 
  5405  001E                     	;# 
  5406  001F                     	;# 
  5407  008C                     	;# 
  5408  008D                     	;# 
  5409  008E                     	;# 
  5410  008F                     	;# 
  5411  0090                     	;# 
  5412  0091                     	;# 
  5413  0092                     	;# 
  5414  0093                     	;# 
  5415  0094                     	;# 
  5416  0095                     	;# 
  5417  0096                     	;# 
  5418  0097                     	;# 
  5419  0098                     	;# 
  5420  0099                     	;# 
  5421  009A                     	;# 
  5422  009B                     	;# 
  5423  009B                     	;# 
  5424  009C                     	;# 
  5425  009D                     	;# 
  5426  009E                     	;# 
  5427  010C                     	;# 
  5428  010D                     	;# 
  5429  010E                     	;# 
  5430  010F                     	;# 
  5431  0110                     	;# 
  5432  0111                     	;# 
  5433  0112                     	;# 
  5434  0113                     	;# 
  5435  0114                     	;# 
  5436  0115                     	;# 
  5437  0116                     	;# 
  5438  0117                     	;# 
  5439  0118                     	;# 
  5440  0119                     	;# 
  5441  011A                     	;# 
  5442  011B                     	;# 
  5443  011D                     	;# 
  5444  011E                     	;# 
  5445  011F                     	;# 
  5446  018C                     	;# 
  5447  0190                     	;# 
  5448  0191                     	;# 
  5449  0191                     	;# 
  5450  0192                     	;# 
  5451  0193                     	;# 
  5452  0193                     	;# 
  5453  0193                     	;# 
  5454  0194                     	;# 
  5455  0195                     	;# 
  5456  0196                     	;# 
  5457  0199                     	;# 
  5458  0199                     	;# 
  5459  019A                     	;# 
  5460  019A                     	;# 
  5461  019B                     	;# 
  5462  019B                     	;# 
  5463  019B                     	;# 
  5464  019B                     	;# 
  5465  019C                     	;# 
  5466  019C                     	;# 
  5467  019D                     	;# 
  5468  019D                     	;# 
  5469  019E                     	;# 
  5470  019E                     	;# 
  5471  019F                     	;# 
  5472  019F                     	;# 
  5473  020D                     	;# 
  5474  0211                     	;# 
  5475  0211                     	;# 
  5476  0212                     	;# 
  5477  0212                     	;# 
  5478  0213                     	;# 
  5479  0213                     	;# 
  5480  0214                     	;# 
  5481  0214                     	;# 
  5482  0215                     	;# 
  5483  0215                     	;# 
  5484  0215                     	;# 
  5485  0216                     	;# 
  5486  0216                     	;# 
  5487  0217                     	;# 
  5488  0217                     	;# 
  5489  0219                     	;# 
  5490  021A                     	;# 
  5491  021B                     	;# 
  5492  021C                     	;# 
  5493  021D                     	;# 
  5494  021E                     	;# 
  5495  021F                     	;# 
  5496  028C                     	;# 
  5497  028D                     	;# 
  5498  0291                     	;# 
  5499  0291                     	;# 
  5500  0292                     	;# 
  5501  0293                     	;# 
  5502  0294                     	;# 
  5503  0295                     	;# 
  5504  0295                     	;# 
  5505  0296                     	;# 
  5506  0298                     	;# 
  5507  0298                     	;# 
  5508  0299                     	;# 
  5509  029A                     	;# 
  5510  029B                     	;# 
  5511  029C                     	;# 
  5512  029C                     	;# 
  5513  029D                     	;# 
  5514  029E                     	;# 
  5515  029F                     	;# 
  5516  030C                     	;# 
  5517  030D                     	;# 
  5518  0311                     	;# 
  5519  0311                     	;# 
  5520  0312                     	;# 
  5521  0313                     	;# 
  5522  0314                     	;# 
  5523  0315                     	;# 
  5524  0315                     	;# 
  5525  0316                     	;# 
  5526  0318                     	;# 
  5527  0318                     	;# 
  5528  0319                     	;# 
  5529  031A                     	;# 
  5530  031C                     	;# 
  5531  031C                     	;# 
  5532  031D                     	;# 
  5533  031E                     	;# 
  5534  038C                     	;# 
  5535  038D                     	;# 
  5536  0394                     	;# 
  5537  0395                     	;# 
  5538  0396                     	;# 
  5539  040C                     	;# 
  5540  040D                     	;# 
  5541  0415                     	;# 
  5542  0416                     	;# 
  5543  0417                     	;# 
  5544  041C                     	;# 
  5545  041D                     	;# 
  5546  041E                     	;# 
  5547  048D                     	;# 
  5548  0491                     	;# 
  5549  0492                     	;# 
  5550  0493                     	;# 
  5551  0493                     	;# 
  5552  0494                     	;# 
  5553  0495                     	;# 
  5554  0496                     	;# 
  5555  0497                     	;# 
  5556  0791                     	;# 
  5557  0792                     	;# 
  5558  0793                     	;# 
  5559  0794                     	;# 
  5560  0795                     	;# 
  5561  0798                     	;# 
  5562  0799                     	;# 
  5563  079A                     	;# 
  5564  079B                     	;# 
  5565  079C                     	;# 
  5566  079D                     	;# 
  5567  07A0                     	;# 
  5568  07A1                     	;# 
  5569  07A2                     	;# 
  5570  07A3                     	;# 
  5571  07A4                     	;# 
  5572  07A5                     	;# 
  5573  07A6                     	;# 
  5574  07A7                     	;# 
  5575  07A8                     	;# 
  5576  07A9                     	;# 
  5577  07AA                     	;# 
  5578  07AB                     	;# 
  5579  07AC                     	;# 
  5580  07AD                     	;# 
  5581  07AE                     	;# 
  5582  07AF                     	;# 
  5583  07B0                     	;# 
  5584  07B1                     	;# 
  5585  07B2                     	;# 
  5586  07B3                     	;# 
  5587  07B4                     	;# 
  5588  07B5                     	;# 
  5589  07B6                     	;# 
  5590  07B7                     	;# 
  5591  0FE4                     	;# 
  5592  0FE5                     	;# 
  5593  0FE6                     	;# 
  5594  0FE7                     	;# 
  5595  0FE8                     	;# 
  5596  0FE9                     	;# 
  5597  0FEA                     	;# 
  5598  0FEB                     	;# 
  5599  0FED                     	;# 
  5600  0FEE                     	;# 
  5601  0FEF                     	;# 
  5602  0000                     	;# 
  5603  0001                     	;# 
  5604  0002                     	;# 
  5605  0003                     	;# 
  5606  0004                     	;# 
  5607  0005                     	;# 
  5608  0006                     	;# 
  5609  0007                     	;# 
  5610  0008                     	;# 
  5611  0009                     	;# 
  5612  000A                     	;# 
  5613  000B                     	;# 
  5614  000C                     	;# 
  5615  000D                     	;# 
  5616  000E                     	;# 
  5617  000F                     	;# 
  5618  0010                     	;# 
  5619  0011                     	;# 
  5620  0012                     	;# 
  5621  0013                     	;# 
  5622  0014                     	;# 
  5623  0015                     	;# 
  5624  0016                     	;# 
  5625  0016                     	;# 
  5626  0017                     	;# 
  5627  0018                     	;# 
  5628  0019                     	;# 
  5629  001A                     	;# 
  5630  001B                     	;# 
  5631  001C                     	;# 
  5632  001E                     	;# 
  5633  001F                     	;# 
  5634  008C                     	;# 
  5635  008D                     	;# 
  5636  008E                     	;# 
  5637  008F                     	;# 
  5638  0090                     	;# 
  5639  0091                     	;# 
  5640  0092                     	;# 
  5641  0093                     	;# 
  5642  0094                     	;# 
  5643  0095                     	;# 
  5644  0096                     	;# 
  5645  0097                     	;# 
  5646  0098                     	;# 
  5647  0099                     	;# 
  5648  009A                     	;# 
  5649  009B                     	;# 
  5650  009B                     	;# 
  5651  009C                     	;# 
  5652  009D                     	;# 
  5653  009E                     	;# 
  5654  010C                     	;# 
  5655  010D                     	;# 
  5656  010E                     	;# 
  5657  010F                     	;# 
  5658  0110                     	;# 
  5659  0111                     	;# 
  5660  0112                     	;# 
  5661  0113                     	;# 
  5662  0114                     	;# 
  5663  0115                     	;# 
  5664  0116                     	;# 
  5665  0117                     	;# 
  5666  0118                     	;# 
  5667  0119                     	;# 
  5668  011A                     	;# 
  5669  011B                     	;# 
  5670  011D                     	;# 
  5671  011E                     	;# 
  5672  011F                     	;# 
  5673  018C                     	;# 
  5674  0190                     	;# 
  5675  0191                     	;# 
  5676  0191                     	;# 
  5677  0192                     	;# 
  5678  0193                     	;# 
  5679  0193                     	;# 
  5680  0193                     	;# 
  5681  0194                     	;# 
  5682  0195                     	;# 
  5683  0196                     	;# 
  5684  0199                     	;# 
  5685  0199                     	;# 
  5686  019A                     	;# 
  5687  019A                     	;# 
  5688  019B                     	;# 
  5689  019B                     	;# 
  5690  019B                     	;# 
  5691  019B                     	;# 
  5692  019C                     	;# 
  5693  019C                     	;# 
  5694  019D                     	;# 
  5695  019D                     	;# 
  5696  019E                     	;# 
  5697  019E                     	;# 
  5698  019F                     	;# 
  5699  019F                     	;# 
  5700  020D                     	;# 
  5701  0211                     	;# 
  5702  0211                     	;# 
  5703  0212                     	;# 
  5704  0212                     	;# 
  5705  0213                     	;# 
  5706  0213                     	;# 
  5707  0214                     	;# 
  5708  0214                     	;# 
  5709  0215                     	;# 
  5710  0215                     	;# 
  5711  0215                     	;# 
  5712  0216                     	;# 
  5713  0216                     	;# 
  5714  0217                     	;# 
  5715  0217                     	;# 
  5716  0219                     	;# 
  5717  021A                     	;# 
  5718  021B                     	;# 
  5719  021C                     	;# 
  5720  021D                     	;# 
  5721  021E                     	;# 
  5722  021F                     	;# 
  5723  028C                     	;# 
  5724  028D                     	;# 
  5725  0291                     	;# 
  5726  0291                     	;# 
  5727  0292                     	;# 
  5728  0293                     	;# 
  5729  0294                     	;# 
  5730  0295                     	;# 
  5731  0295                     	;# 
  5732  0296                     	;# 
  5733  0298                     	;# 
  5734  0298                     	;# 
  5735  0299                     	;# 
  5736  029A                     	;# 
  5737  029B                     	;# 
  5738  029C                     	;# 
  5739  029C                     	;# 
  5740  029D                     	;# 
  5741  029E                     	;# 
  5742  029F                     	;# 
  5743  030C                     	;# 
  5744  030D                     	;# 
  5745  0311                     	;# 
  5746  0311                     	;# 
  5747  0312                     	;# 
  5748  0313                     	;# 
  5749  0314                     	;# 
  5750  0315                     	;# 
  5751  0315                     	;# 
  5752  0316                     	;# 
  5753  0318                     	;# 
  5754  0318                     	;# 
  5755  0319                     	;# 
  5756  031A                     	;# 
  5757  031C                     	;# 
  5758  031C                     	;# 
  5759  031D                     	;# 
  5760  031E                     	;# 
  5761  038C                     	;# 
  5762  038D                     	;# 
  5763  0394                     	;# 
  5764  0395                     	;# 
  5765  0396                     	;# 
  5766  040C                     	;# 
  5767  040D                     	;# 
  5768  0415                     	;# 
  5769  0416                     	;# 
  5770  0417                     	;# 
  5771  041C                     	;# 
  5772  041D                     	;# 
  5773  041E                     	;# 
  5774  048D                     	;# 
  5775  0491                     	;# 
  5776  0492                     	;# 
  5777  0493                     	;# 
  5778  0493                     	;# 
  5779  0494                     	;# 
  5780  0495                     	;# 
  5781  0496                     	;# 
  5782  0497                     	;# 
  5783  0791                     	;# 
  5784  0792                     	;# 
  5785  0793                     	;# 
  5786  0794                     	;# 
  5787  0795                     	;# 
  5788  0798                     	;# 
  5789  0799                     	;# 
  5790  079A                     	;# 
  5791  079B                     	;# 
  5792  079C                     	;# 
  5793  079D                     	;# 
  5794  07A0                     	;# 
  5795  07A1                     	;# 
  5796  07A2                     	;# 
  5797  07A3                     	;# 
  5798  07A4                     	;# 
  5799  07A5                     	;# 
  5800  07A6                     	;# 
  5801  07A7                     	;# 
  5802  07A8                     	;# 
  5803  07A9                     	;# 
  5804  07AA                     	;# 
  5805  07AB                     	;# 
  5806  07AC                     	;# 
  5807  07AD                     	;# 
  5808  07AE                     	;# 
  5809  07AF                     	;# 
  5810  07B0                     	;# 
  5811  07B1                     	;# 
  5812  07B2                     	;# 
  5813  07B3                     	;# 
  5814  07B4                     	;# 
  5815  07B5                     	;# 
  5816  07B6                     	;# 
  5817  07B7                     	;# 
  5818  0FE4                     	;# 
  5819  0FE5                     	;# 
  5820  0FE6                     	;# 
  5821  0FE7                     	;# 
  5822  0FE8                     	;# 
  5823  0FE9                     	;# 
  5824  0FEA                     	;# 
  5825  0FEB                     	;# 
  5826  0FED                     	;# 
  5827  0FEE                     	;# 
  5828  0FEF                     	;# 
  5829  0000                     	;# 
  5830  0001                     	;# 
  5831  0002                     	;# 
  5832  0003                     	;# 
  5833  0004                     	;# 
  5834  0005                     	;# 
  5835  0006                     	;# 
  5836  0007                     	;# 
  5837  0008                     	;# 
  5838  0009                     	;# 
  5839  000A                     	;# 
  5840  000B                     	;# 
  5841  000C                     	;# 
  5842  000D                     	;# 
  5843  000E                     	;# 
  5844  000F                     	;# 
  5845  0010                     	;# 
  5846  0011                     	;# 
  5847  0012                     	;# 
  5848  0013                     	;# 
  5849  0014                     	;# 
  5850  0015                     	;# 
  5851  0016                     	;# 
  5852  0016                     	;# 
  5853  0017                     	;# 
  5854  0018                     	;# 
  5855  0019                     	;# 
  5856  001A                     	;# 
  5857  001B                     	;# 
  5858  001C                     	;# 
  5859  001E                     	;# 
  5860  001F                     	;# 
  5861  008C                     	;# 
  5862  008D                     	;# 
  5863  008E                     	;# 
  5864  008F                     	;# 
  5865  0090                     	;# 
  5866  0091                     	;# 
  5867  0092                     	;# 
  5868  0093                     	;# 
  5869  0094                     	;# 
  5870  0095                     	;# 
  5871  0096                     	;# 
  5872  0097                     	;# 
  5873  0098                     	;# 
  5874  0099                     	;# 
  5875  009A                     	;# 
  5876  009B                     	;# 
  5877  009B                     	;# 
  5878  009C                     	;# 
  5879  009D                     	;# 
  5880  009E                     	;# 
  5881  010C                     	;# 
  5882  010D                     	;# 
  5883  010E                     	;# 
  5884  010F                     	;# 
  5885  0110                     	;# 
  5886  0111                     	;# 
  5887  0112                     	;# 
  5888  0113                     	;# 
  5889  0114                     	;# 
  5890  0115                     	;# 
  5891  0116                     	;# 
  5892  0117                     	;# 
  5893  0118                     	;# 
  5894  0119                     	;# 
  5895  011A                     	;# 
  5896  011B                     	;# 
  5897  011D                     	;# 
  5898  011E                     	;# 
  5899  011F                     	;# 
  5900  018C                     	;# 
  5901  0190                     	;# 
  5902  0191                     	;# 
  5903  0191                     	;# 
  5904  0192                     	;# 
  5905  0193                     	;# 
  5906  0193                     	;# 
  5907  0193                     	;# 
  5908  0194                     	;# 
  5909  0195                     	;# 
  5910  0196                     	;# 
  5911  0199                     	;# 
  5912  0199                     	;# 
  5913  019A                     	;# 
  5914  019A                     	;# 
  5915  019B                     	;# 
  5916  019B                     	;# 
  5917  019B                     	;# 
  5918  019B                     	;# 
  5919  019C                     	;# 
  5920  019C                     	;# 
  5921  019D                     	;# 
  5922  019D                     	;# 
  5923  019E                     	;# 
  5924  019E                     	;# 
  5925  019F                     	;# 
  5926  019F                     	;# 
  5927  020D                     	;# 
  5928  0211                     	;# 
  5929  0211                     	;# 
  5930  0212                     	;# 
  5931  0212                     	;# 
  5932  0213                     	;# 
  5933  0213                     	;# 
  5934  0214                     	;# 
  5935  0214                     	;# 
  5936  0215                     	;# 
  5937  0215                     	;# 
  5938  0215                     	;# 
  5939  0216                     	;# 
  5940  0216                     	;# 
  5941  0217                     	;# 
  5942  0217                     	;# 
  5943  0219                     	;# 
  5944  021A                     	;# 
  5945  021B                     	;# 
  5946  021C                     	;# 
  5947  021D                     	;# 
  5948  021E                     	;# 
  5949  021F                     	;# 
  5950  028C                     	;# 
  5951  028D                     	;# 
  5952  0291                     	;# 
  5953  0291                     	;# 
  5954  0292                     	;# 
  5955  0293                     	;# 
  5956  0294                     	;# 
  5957  0295                     	;# 
  5958  0295                     	;# 
  5959  0296                     	;# 
  5960  0298                     	;# 
  5961  0298                     	;# 
  5962  0299                     	;# 
  5963  029A                     	;# 
  5964  029B                     	;# 
  5965  029C                     	;# 
  5966  029C                     	;# 
  5967  029D                     	;# 
  5968  029E                     	;# 
  5969  029F                     	;# 
  5970  030C                     	;# 
  5971  030D                     	;# 
  5972  0311                     	;# 
  5973  0311                     	;# 
  5974  0312                     	;# 
  5975  0313                     	;# 
  5976  0314                     	;# 
  5977  0315                     	;# 
  5978  0315                     	;# 
  5979  0316                     	;# 
  5980  0318                     	;# 
  5981  0318                     	;# 
  5982  0319                     	;# 
  5983  031A                     	;# 
  5984  031C                     	;# 
  5985  031C                     	;# 
  5986  031D                     	;# 
  5987  031E                     	;# 
  5988  038C                     	;# 
  5989  038D                     	;# 
  5990  0394                     	;# 
  5991  0395                     	;# 
  5992  0396                     	;# 
  5993  040C                     	;# 
  5994  040D                     	;# 
  5995  0415                     	;# 
  5996  0416                     	;# 
  5997  0417                     	;# 
  5998  041C                     	;# 
  5999  041D                     	;# 
  6000  041E                     	;# 
  6001  048D                     	;# 
  6002  0491                     	;# 
  6003  0492                     	;# 
  6004  0493                     	;# 
  6005  0493                     	;# 
  6006  0494                     	;# 
  6007  0495                     	;# 
  6008  0496                     	;# 
  6009  0497                     	;# 
  6010  0791                     	;# 
  6011  0792                     	;# 
  6012  0793                     	;# 
  6013  0794                     	;# 
  6014  0795                     	;# 
  6015  0798                     	;# 
  6016  0799                     	;# 
  6017  079A                     	;# 
  6018  079B                     	;# 
  6019  079C                     	;# 
  6020  079D                     	;# 
  6021  07A0                     	;# 
  6022  07A1                     	;# 
  6023  07A2                     	;# 
  6024  07A3                     	;# 
  6025  07A4                     	;# 
  6026  07A5                     	;# 
  6027  07A6                     	;# 
  6028  07A7                     	;# 
  6029  07A8                     	;# 
  6030  07A9                     	;# 
  6031  07AA                     	;# 
  6032  07AB                     	;# 
  6033  07AC                     	;# 
  6034  07AD                     	;# 
  6035  07AE                     	;# 
  6036  07AF                     	;# 
  6037  07B0                     	;# 
  6038  07B1                     	;# 
  6039  07B2                     	;# 
  6040  07B3                     	;# 
  6041  07B4                     	;# 
  6042  07B5                     	;# 
  6043  07B6                     	;# 
  6044  07B7                     	;# 
  6045  0FE4                     	;# 
  6046  0FE5                     	;# 
  6047  0FE6                     	;# 
  6048  0FE7                     	;# 
  6049  0FE8                     	;# 
  6050  0FE9                     	;# 
  6051  0FEA                     	;# 
  6052  0FEB                     	;# 
  6053  0FED                     	;# 
  6054  0FEE                     	;# 
  6055  0FEF                     	;# 
  6056  0000                     	;# 
  6057  0001                     	;# 
  6058  0002                     	;# 
  6059  0003                     	;# 
  6060  0004                     	;# 
  6061  0005                     	;# 
  6062  0006                     	;# 
  6063  0007                     	;# 
  6064  0008                     	;# 
  6065  0009                     	;# 
  6066  000A                     	;# 
  6067  000B                     	;# 
  6068  000C                     	;# 
  6069  000D                     	;# 
  6070  000E                     	;# 
  6071  000F                     	;# 
  6072  0010                     	;# 
  6073  0011                     	;# 
  6074  0012                     	;# 
  6075  0013                     	;# 
  6076  0014                     	;# 
  6077  0015                     	;# 
  6078  0016                     	;# 
  6079  0016                     	;# 
  6080  0017                     	;# 
  6081  0018                     	;# 
  6082  0019                     	;# 
  6083  001A                     	;# 
  6084  001B                     	;# 
  6085  001C                     	;# 
  6086  001E                     	;# 
  6087  001F                     	;# 
  6088  008C                     	;# 
  6089  008D                     	;# 
  6090  008E                     	;# 
  6091  008F                     	;# 
  6092  0090                     	;# 
  6093  0091                     	;# 
  6094  0092                     	;# 
  6095  0093                     	;# 
  6096  0094                     	;# 
  6097  0095                     	;# 
  6098  0096                     	;# 
  6099  0097                     	;# 
  6100  0098                     	;# 
  6101  0099                     	;# 
  6102  009A                     	;# 
  6103  009B                     	;# 
  6104  009B                     	;# 
  6105  009C                     	;# 
  6106  009D                     	;# 
  6107  009E                     	;# 
  6108  010C                     	;# 
  6109  010D                     	;# 
  6110  010E                     	;# 
  6111  010F                     	;# 
  6112  0110                     	;# 
  6113  0111                     	;# 
  6114  0112                     	;# 
  6115  0113                     	;# 
  6116  0114                     	;# 
  6117  0115                     	;# 
  6118  0116                     	;# 
  6119  0117                     	;# 
  6120  0118                     	;# 
  6121  0119                     	;# 
  6122  011A                     	;# 
  6123  011B                     	;# 
  6124  011D                     	;# 
  6125  011E                     	;# 
  6126  011F                     	;# 
  6127  018C                     	;# 
  6128  0190                     	;# 
  6129  0191                     	;# 
  6130  0191                     	;# 
  6131  0192                     	;# 
  6132  0193                     	;# 
  6133  0193                     	;# 
  6134  0193                     	;# 
  6135  0194                     	;# 
  6136  0195                     	;# 
  6137  0196                     	;# 
  6138  0199                     	;# 
  6139  0199                     	;# 
  6140  019A                     	;# 
  6141  019A                     	;# 
  6142  019B                     	;# 
  6143  019B                     	;# 
  6144  019B                     	;# 
  6145  019B                     	;# 
  6146  019C                     	;# 
  6147  019C                     	;# 
  6148  019D                     	;# 
  6149  019D                     	;# 
  6150  019E                     	;# 
  6151  019E                     	;# 
  6152  019F                     	;# 
  6153  019F                     	;# 
  6154  020D                     	;# 
  6155  0211                     	;# 
  6156  0211                     	;# 
  6157  0212                     	;# 
  6158  0212                     	;# 
  6159  0213                     	;# 
  6160  0213                     	;# 
  6161  0214                     	;# 
  6162  0214                     	;# 
  6163  0215                     	;# 
  6164  0215                     	;# 
  6165  0215                     	;# 
  6166  0216                     	;# 
  6167  0216                     	;# 
  6168  0217                     	;# 
  6169  0217                     	;# 
  6170  0219                     	;# 
  6171  021A                     	;# 
  6172  021B                     	;# 
  6173  021C                     	;# 
  6174  021D                     	;# 
  6175  021E                     	;# 
  6176  021F                     	;# 
  6177  028C                     	;# 
  6178  028D                     	;# 
  6179  0291                     	;# 
  6180  0291                     	;# 
  6181  0292                     	;# 
  6182  0293                     	;# 
  6183  0294                     	;# 
  6184  0295                     	;# 
  6185  0295                     	;# 
  6186  0296                     	;# 
  6187  0298                     	;# 
  6188  0298                     	;# 
  6189  0299                     	;# 
  6190  029A                     	;# 
  6191  029B                     	;# 
  6192  029C                     	;# 
  6193  029C                     	;# 
  6194  029D                     	;# 
  6195  029E                     	;# 
  6196  029F                     	;# 
  6197  030C                     	;# 
  6198  030D                     	;# 
  6199  0311                     	;# 
  6200  0311                     	;# 
  6201  0312                     	;# 
  6202  0313                     	;# 
  6203  0314                     	;# 
  6204  0315                     	;# 
  6205  0315                     	;# 
  6206  0316                     	;# 
  6207  0318                     	;# 
  6208  0318                     	;# 
  6209  0319                     	;# 
  6210  031A                     	;# 
  6211  031C                     	;# 
  6212  031C                     	;# 
  6213  031D                     	;# 
  6214  031E                     	;# 
  6215  038C                     	;# 
  6216  038D                     	;# 
  6217  0394                     	;# 
  6218  0395                     	;# 
  6219  0396                     	;# 
  6220  040C                     	;# 
  6221  040D                     	;# 
  6222  0415                     	;# 
  6223  0416                     	;# 
  6224  0417                     	;# 
  6225  041C                     	;# 
  6226  041D                     	;# 
  6227  041E                     	;# 
  6228  048D                     	;# 
  6229  0491                     	;# 
  6230  0492                     	;# 
  6231  0493                     	;# 
  6232  0493                     	;# 
  6233  0494                     	;# 
  6234  0495                     	;# 
  6235  0496                     	;# 
  6236  0497                     	;# 
  6237  0791                     	;# 
  6238  0792                     	;# 
  6239  0793                     	;# 
  6240  0794                     	;# 
  6241  0795                     	;# 
  6242  0798                     	;# 
  6243  0799                     	;# 
  6244  079A                     	;# 
  6245  079B                     	;# 
  6246  079C                     	;# 
  6247  079D                     	;# 
  6248  07A0                     	;# 
  6249  07A1                     	;# 
  6250  07A2                     	;# 
  6251  07A3                     	;# 
  6252  07A4                     	;# 
  6253  07A5                     	;# 
  6254  07A6                     	;# 
  6255  07A7                     	;# 
  6256  07A8                     	;# 
  6257  07A9                     	;# 
  6258  07AA                     	;# 
  6259  07AB                     	;# 
  6260  07AC                     	;# 
  6261  07AD                     	;# 
  6262  07AE                     	;# 
  6263  07AF                     	;# 
  6264  07B0                     	;# 
  6265  07B1                     	;# 
  6266  07B2                     	;# 
  6267  07B3                     	;# 
  6268  07B4                     	;# 
  6269  07B5                     	;# 
  6270  07B6                     	;# 
  6271  07B7                     	;# 
  6272  0FE4                     	;# 
  6273  0FE5                     	;# 
  6274  0FE6                     	;# 
  6275  0FE7                     	;# 
  6276  0FE8                     	;# 
  6277  0FE9                     	;# 
  6278  0FEA                     	;# 
  6279  0FEB                     	;# 
  6280  0FED                     	;# 
  6281  0FEE                     	;# 
  6282  0FEF                     	;# 
  6283  0000                     	;# 
  6284  0001                     	;# 
  6285  0002                     	;# 
  6286  0003                     	;# 
  6287  0004                     	;# 
  6288  0005                     	;# 
  6289  0006                     	;# 
  6290  0007                     	;# 
  6291  0008                     	;# 
  6292  0009                     	;# 
  6293  000A                     	;# 
  6294  000B                     	;# 
  6295  000C                     	;# 
  6296  000D                     	;# 
  6297  000E                     	;# 
  6298  000F                     	;# 
  6299  0010                     	;# 
  6300  0011                     	;# 
  6301  0012                     	;# 
  6302  0013                     	;# 
  6303  0014                     	;# 
  6304  0015                     	;# 
  6305  0016                     	;# 
  6306  0016                     	;# 
  6307  0017                     	;# 
  6308  0018                     	;# 
  6309  0019                     	;# 
  6310  001A                     	;# 
  6311  001B                     	;# 
  6312  001C                     	;# 
  6313  001E                     	;# 
  6314  001F                     	;# 
  6315  008C                     	;# 
  6316  008D                     	;# 
  6317  008E                     	;# 
  6318  008F                     	;# 
  6319  0090                     	;# 
  6320  0091                     	;# 
  6321  0092                     	;# 
  6322  0093                     	;# 
  6323  0094                     	;# 
  6324  0095                     	;# 
  6325  0096                     	;# 
  6326  0097                     	;# 
  6327  0098                     	;# 
  6328  0099                     	;# 
  6329  009A                     	;# 
  6330  009B                     	;# 
  6331  009B                     	;# 
  6332  009C                     	;# 
  6333  009D                     	;# 
  6334  009E                     	;# 
  6335  010C                     	;# 
  6336  010D                     	;# 
  6337  010E                     	;# 
  6338  010F                     	;# 
  6339  0110                     	;# 
  6340  0111                     	;# 
  6341  0112                     	;# 
  6342  0113                     	;# 
  6343  0114                     	;# 
  6344  0115                     	;# 
  6345  0116                     	;# 
  6346  0117                     	;# 
  6347  0118                     	;# 
  6348  0119                     	;# 
  6349  011A                     	;# 
  6350  011B                     	;# 
  6351  011D                     	;# 
  6352  011E                     	;# 
  6353  011F                     	;# 
  6354  018C                     	;# 
  6355  0190                     	;# 
  6356  0191                     	;# 
  6357  0191                     	;# 
  6358  0192                     	;# 
  6359  0193                     	;# 
  6360  0193                     	;# 
  6361  0193                     	;# 
  6362  0194                     	;# 
  6363  0195                     	;# 
  6364  0196                     	;# 
  6365  0199                     	;# 
  6366  0199                     	;# 
  6367  019A                     	;# 
  6368  019A                     	;# 
  6369  019B                     	;# 
  6370  019B                     	;# 
  6371  019B                     	;# 
  6372  019B                     	;# 
  6373  019C                     	;# 
  6374  019C                     	;# 
  6375  019D                     	;# 
  6376  019D                     	;# 
  6377  019E                     	;# 
  6378  019E                     	;# 
  6379  019F                     	;# 
  6380  019F                     	;# 
  6381  020D                     	;# 
  6382  0211                     	;# 
  6383  0211                     	;# 
  6384  0212                     	;# 
  6385  0212                     	;# 
  6386  0213                     	;# 
  6387  0213                     	;# 
  6388  0214                     	;# 
  6389  0214                     	;# 
  6390  0215                     	;# 
  6391  0215                     	;# 
  6392  0215                     	;# 
  6393  0216                     	;# 
  6394  0216                     	;# 
  6395  0217                     	;# 
  6396  0217                     	;# 
  6397  0219                     	;# 
  6398  021A                     	;# 
  6399  021B                     	;# 
  6400  021C                     	;# 
  6401  021D                     	;# 
  6402  021E                     	;# 
  6403  021F                     	;# 
  6404  028C                     	;# 
  6405  028D                     	;# 
  6406  0291                     	;# 
  6407  0291                     	;# 
  6408  0292                     	;# 
  6409  0293                     	;# 
  6410  0294                     	;# 
  6411  0295                     	;# 
  6412  0295                     	;# 
  6413  0296                     	;# 
  6414  0298                     	;# 
  6415  0298                     	;# 
  6416  0299                     	;# 
  6417  029A                     	;# 
  6418  029B                     	;# 
  6419  029C                     	;# 
  6420  029C                     	;# 
  6421  029D                     	;# 
  6422  029E                     	;# 
  6423  029F                     	;# 
  6424  030C                     	;# 
  6425  030D                     	;# 
  6426  0311                     	;# 
  6427  0311                     	;# 
  6428  0312                     	;# 
  6429  0313                     	;# 
  6430  0314                     	;# 
  6431  0315                     	;# 
  6432  0315                     	;# 
  6433  0316                     	;# 
  6434  0318                     	;# 
  6435  0318                     	;# 
  6436  0319                     	;# 
  6437  031A                     	;# 
  6438  031C                     	;# 
  6439  031C                     	;# 
  6440  031D                     	;# 
  6441  031E                     	;# 
  6442  038C                     	;# 
  6443  038D                     	;# 
  6444  0394                     	;# 
  6445  0395                     	;# 
  6446  0396                     	;# 
  6447  040C                     	;# 
  6448  040D                     	;# 
  6449  0415                     	;# 
  6450  0416                     	;# 
  6451  0417                     	;# 
  6452  041C                     	;# 
  6453  041D                     	;# 
  6454  041E                     	;# 
  6455  048D                     	;# 
  6456  0491                     	;# 
  6457  0492                     	;# 
  6458  0493                     	;# 
  6459  0493                     	;# 
  6460  0494                     	;# 
  6461  0495                     	;# 
  6462  0496                     	;# 
  6463  0497                     	;# 
  6464  0791                     	;# 
  6465  0792                     	;# 
  6466  0793                     	;# 
  6467  0794                     	;# 
  6468  0795                     	;# 
  6469  0798                     	;# 
  6470  0799                     	;# 
  6471  079A                     	;# 
  6472  079B                     	;# 
  6473  079C                     	;# 
  6474  079D                     	;# 
  6475  07A0                     	;# 
  6476  07A1                     	;# 
  6477  07A2                     	;# 
  6478  07A3                     	;# 
  6479  07A4                     	;# 
  6480  07A5                     	;# 
  6481  07A6                     	;# 
  6482  07A7                     	;# 
  6483  07A8                     	;# 
  6484  07A9                     	;# 
  6485  07AA                     	;# 
  6486  07AB                     	;# 
  6487  07AC                     	;# 
  6488  07AD                     	;# 
  6489  07AE                     	;# 
  6490  07AF                     	;# 
  6491  07B0                     	;# 
  6492  07B1                     	;# 
  6493  07B2                     	;# 
  6494  07B3                     	;# 
  6495  07B4                     	;# 
  6496  07B5                     	;# 
  6497  07B6                     	;# 
  6498  07B7                     	;# 
  6499  0FE4                     	;# 
  6500  0FE5                     	;# 
  6501  0FE6                     	;# 
  6502  0FE7                     	;# 
  6503  0FE8                     	;# 
  6504  0FE9                     	;# 
  6505  0FEA                     	;# 
  6506  0FEB                     	;# 
  6507  0FED                     	;# 
  6508  0FEE                     	;# 
  6509  0FEF                     	;# 
  6510  0000                     	;# 
  6511  0001                     	;# 
  6512  0002                     	;# 
  6513  0003                     	;# 
  6514  0004                     	;# 
  6515  0005                     	;# 
  6516  0006                     	;# 
  6517  0007                     	;# 
  6518  0008                     	;# 
  6519  0009                     	;# 
  6520  000A                     	;# 
  6521  000B                     	;# 
  6522  000C                     	;# 
  6523  000D                     	;# 
  6524  000E                     	;# 
  6525  000F                     	;# 
  6526  0010                     	;# 
  6527  0011                     	;# 
  6528  0012                     	;# 
  6529  0013                     	;# 
  6530  0014                     	;# 
  6531  0015                     	;# 
  6532  0016                     	;# 
  6533  0016                     	;# 
  6534  0017                     	;# 
  6535  0018                     	;# 
  6536  0019                     	;# 
  6537  001A                     	;# 
  6538  001B                     	;# 
  6539  001C                     	;# 
  6540  001E                     	;# 
  6541  001F                     	;# 
  6542  008C                     	;# 
  6543  008D                     	;# 
  6544  008E                     	;# 
  6545  008F                     	;# 
  6546  0090                     	;# 
  6547  0091                     	;# 
  6548  0092                     	;# 
  6549  0093                     	;# 
  6550  0094                     	;# 
  6551  0095                     	;# 
  6552  0096                     	;# 
  6553  0097                     	;# 
  6554  0098                     	;# 
  6555  0099                     	;# 
  6556  009A                     	;# 
  6557  009B                     	;# 
  6558  009B                     	;# 
  6559  009C                     	;# 
  6560  009D                     	;# 
  6561  009E                     	;# 
  6562  010C                     	;# 
  6563  010D                     	;# 
  6564  010E                     	;# 
  6565  010F                     	;# 
  6566  0110                     	;# 
  6567  0111                     	;# 
  6568  0112                     	;# 
  6569  0113                     	;# 
  6570  0114                     	;# 
  6571  0115                     	;# 
  6572  0116                     	;# 
  6573  0117                     	;# 
  6574  0118                     	;# 
  6575  0119                     	;# 
  6576  011A                     	;# 
  6577  011B                     	;# 
  6578  011D                     	;# 
  6579  011E                     	;# 
  6580  011F                     	;# 
  6581  018C                     	;# 
  6582  0190                     	;# 
  6583  0191                     	;# 
  6584  0191                     	;# 
  6585  0192                     	;# 
  6586  0193                     	;# 
  6587  0193                     	;# 
  6588  0193                     	;# 
  6589  0194                     	;# 
  6590  0195                     	;# 
  6591  0196                     	;# 
  6592  0199                     	;# 
  6593  0199                     	;# 
  6594  019A                     	;# 
  6595  019A                     	;# 
  6596  019B                     	;# 
  6597  019B                     	;# 
  6598  019B                     	;# 
  6599  019B                     	;# 
  6600  019C                     	;# 
  6601  019C                     	;# 
  6602  019D                     	;# 
  6603  019D                     	;# 
  6604  019E                     	;# 
  6605  019E                     	;# 
  6606  019F                     	;# 
  6607  019F                     	;# 
  6608  020D                     	;# 
  6609  0211                     	;# 
  6610  0211                     	;# 
  6611  0212                     	;# 
  6612  0212                     	;# 
  6613  0213                     	;# 
  6614  0213                     	;# 
  6615  0214                     	;# 
  6616  0214                     	;# 
  6617  0215                     	;# 
  6618  0215                     	;# 
  6619  0215                     	;# 
  6620  0216                     	;# 
  6621  0216                     	;# 
  6622  0217                     	;# 
  6623  0217                     	;# 
  6624  0219                     	;# 
  6625  021A                     	;# 
  6626  021B                     	;# 
  6627  021C                     	;# 
  6628  021D                     	;# 
  6629  021E                     	;# 
  6630  021F                     	;# 
  6631  028C                     	;# 
  6632  028D                     	;# 
  6633  0291                     	;# 
  6634  0291                     	;# 
  6635  0292                     	;# 
  6636  0293                     	;# 
  6637  0294                     	;# 
  6638  0295                     	;# 
  6639  0295                     	;# 
  6640  0296                     	;# 
  6641  0298                     	;# 
  6642  0298                     	;# 
  6643  0299                     	;# 
  6644  029A                     	;# 
  6645  029B                     	;# 
  6646  029C                     	;# 
  6647  029C                     	;# 
  6648  029D                     	;# 
  6649  029E                     	;# 
  6650  029F                     	;# 
  6651  030C                     	;# 
  6652  030D                     	;# 
  6653  0311                     	;# 
  6654  0311                     	;# 
  6655  0312                     	;# 
  6656  0313                     	;# 
  6657  0314                     	;# 
  6658  0315                     	;# 
  6659  0315                     	;# 
  6660  0316                     	;# 
  6661  0318                     	;# 
  6662  0318                     	;# 
  6663  0319                     	;# 
  6664  031A                     	;# 
  6665  031C                     	;# 
  6666  031C                     	;# 
  6667  031D                     	;# 
  6668  031E                     	;# 
  6669  038C                     	;# 
  6670  038D                     	;# 
  6671  0394                     	;# 
  6672  0395                     	;# 
  6673  0396                     	;# 
  6674  040C                     	;# 
  6675  040D                     	;# 
  6676  0415                     	;# 
  6677  0416                     	;# 
  6678  0417                     	;# 
  6679  041C                     	;# 
  6680  041D                     	;# 
  6681  041E                     	;# 
  6682  048D                     	;# 
  6683  0491                     	;# 
  6684  0492                     	;# 
  6685  0493                     	;# 
  6686  0493                     	;# 
  6687  0494                     	;# 
  6688  0495                     	;# 
  6689  0496                     	;# 
  6690  0497                     	;# 
  6691  0791                     	;# 
  6692  0792                     	;# 
  6693  0793                     	;# 
  6694  0794                     	;# 
  6695  0795                     	;# 
  6696  0798                     	;# 
  6697  0799                     	;# 
  6698  079A                     	;# 
  6699  079B                     	;# 
  6700  079C                     	;# 
  6701  079D                     	;# 
  6702  07A0                     	;# 
  6703  07A1                     	;# 
  6704  07A2                     	;# 
  6705  07A3                     	;# 
  6706  07A4                     	;# 
  6707  07A5                     	;# 
  6708  07A6                     	;# 
  6709  07A7                     	;# 
  6710  07A8                     	;# 
  6711  07A9                     	;# 
  6712  07AA                     	;# 
  6713  07AB                     	;# 
  6714  07AC                     	;# 
  6715  07AD                     	;# 
  6716  07AE                     	;# 
  6717  07AF                     	;# 
  6718  07B0                     	;# 
  6719  07B1                     	;# 
  6720  07B2                     	;# 
  6721  07B3                     	;# 
  6722  07B4                     	;# 
  6723  07B5                     	;# 
  6724  07B6                     	;# 
  6725  07B7                     	;# 
  6726  0FE4                     	;# 
  6727  0FE5                     	;# 
  6728  0FE6                     	;# 
  6729  0FE7                     	;# 
  6730  0FE8                     	;# 
  6731  0FE9                     	;# 
  6732  0FEA                     	;# 
  6733  0FEB                     	;# 
  6734  0FED                     	;# 
  6735  0FEE                     	;# 
  6736  0FEF                     	;# 
  6737  0000                     	;# 
  6738  0001                     	;# 
  6739  0002                     	;# 
  6740  0003                     	;# 
  6741  0004                     	;# 
  6742  0005                     	;# 
  6743  0006                     	;# 
  6744  0007                     	;# 
  6745  0008                     	;# 
  6746  0009                     	;# 
  6747  000A                     	;# 
  6748  000B                     	;# 
  6749  000C                     	;# 
  6750  000D                     	;# 
  6751  000E                     	;# 
  6752  000F                     	;# 
  6753  0010                     	;# 
  6754  0011                     	;# 
  6755  0012                     	;# 
  6756  0013                     	;# 
  6757  0014                     	;# 
  6758  0015                     	;# 
  6759  0016                     	;# 
  6760  0016                     	;# 
  6761  0017                     	;# 
  6762  0018                     	;# 
  6763  0019                     	;# 
  6764  001A                     	;# 
  6765  001B                     	;# 
  6766  001C                     	;# 
  6767  001E                     	;# 
  6768  001F                     	;# 
  6769  008C                     	;# 
  6770  008D                     	;# 
  6771  008E                     	;# 
  6772  008F                     	;# 
  6773  0090                     	;# 
  6774  0091                     	;# 
  6775  0092                     	;# 
  6776  0093                     	;# 
  6777  0094                     	;# 
  6778  0095                     	;# 
  6779  0096                     	;# 
  6780  0097                     	;# 
  6781  0098                     	;# 
  6782  0099                     	;# 
  6783  009A                     	;# 
  6784  009B                     	;# 
  6785  009B                     	;# 
  6786  009C                     	;# 
  6787  009D                     	;# 
  6788  009E                     	;# 
  6789  010C                     	;# 
  6790  010D                     	;# 
  6791  010E                     	;# 
  6792  010F                     	;# 
  6793  0110                     	;# 
  6794  0111                     	;# 
  6795  0112                     	;# 
  6796  0113                     	;# 
  6797  0114                     	;# 
  6798  0115                     	;# 
  6799  0116                     	;# 
  6800  0117                     	;# 
  6801  0118                     	;# 
  6802  0119                     	;# 
  6803  011A                     	;# 
  6804  011B                     	;# 
  6805  011D                     	;# 
  6806  011E                     	;# 
  6807  011F                     	;# 
  6808  018C                     	;# 
  6809  0190                     	;# 
  6810  0191                     	;# 
  6811  0191                     	;# 
  6812  0192                     	;# 
  6813  0193                     	;# 
  6814  0193                     	;# 
  6815  0193                     	;# 
  6816  0194                     	;# 
  6817  0195                     	;# 
  6818  0196                     	;# 
  6819  0199                     	;# 
  6820  0199                     	;# 
  6821  019A                     	;# 
  6822  019A                     	;# 
  6823  019B                     	;# 
  6824  019B                     	;# 
  6825  019B                     	;# 
  6826  019B                     	;# 
  6827  019C                     	;# 
  6828  019C                     	;# 
  6829  019D                     	;# 
  6830  019D                     	;# 
  6831  019E                     	;# 
  6832  019E                     	;# 
  6833  019F                     	;# 
  6834  019F                     	;# 
  6835  020D                     	;# 
  6836  0211                     	;# 
  6837  0211                     	;# 
  6838  0212                     	;# 
  6839  0212                     	;# 
  6840  0213                     	;# 
  6841  0213                     	;# 
  6842  0214                     	;# 
  6843  0214                     	;# 
  6844  0215                     	;# 
  6845  0215                     	;# 
  6846  0215                     	;# 
  6847  0216                     	;# 
  6848  0216                     	;# 
  6849  0217                     	;# 
  6850  0217                     	;# 
  6851  0219                     	;# 
  6852  021A                     	;# 
  6853  021B                     	;# 
  6854  021C                     	;# 
  6855  021D                     	;# 
  6856  021E                     	;# 
  6857  021F                     	;# 
  6858  028C                     	;# 
  6859  028D                     	;# 
  6860  0291                     	;# 
  6861  0291                     	;# 
  6862  0292                     	;# 
  6863  0293                     	;# 
  6864  0294                     	;# 
  6865  0295                     	;# 
  6866  0295                     	;# 
  6867  0296                     	;# 
  6868  0298                     	;# 
  6869  0298                     	;# 
  6870  0299                     	;# 
  6871  029A                     	;# 
  6872  029B                     	;# 
  6873  029C                     	;# 
  6874  029C                     	;# 
  6875  029D                     	;# 
  6876  029E                     	;# 
  6877  029F                     	;# 
  6878  030C                     	;# 
  6879  030D                     	;# 
  6880  0311                     	;# 
  6881  0311                     	;# 
  6882  0312                     	;# 
  6883  0313                     	;# 
  6884  0314                     	;# 
  6885  0315                     	;# 
  6886  0315                     	;# 
  6887  0316                     	;# 
  6888  0318                     	;# 
  6889  0318                     	;# 
  6890  0319                     	;# 
  6891  031A                     	;# 
  6892  031C                     	;# 
  6893  031C                     	;# 
  6894  031D                     	;# 
  6895  031E                     	;# 
  6896  038C                     	;# 
  6897  038D                     	;# 
  6898  0394                     	;# 
  6899  0395                     	;# 
  6900  0396                     	;# 
  6901  040C                     	;# 
  6902  040D                     	;# 
  6903  0415                     	;# 
  6904  0416                     	;# 
  6905  0417                     	;# 
  6906  041C                     	;# 
  6907  041D                     	;# 
  6908  041E                     	;# 
  6909  048D                     	;# 
  6910  0491                     	;# 
  6911  0492                     	;# 
  6912  0493                     	;# 
  6913  0493                     	;# 
  6914  0494                     	;# 
  6915  0495                     	;# 
  6916  0496                     	;# 
  6917  0497                     	;# 
  6918  0791                     	;# 
  6919  0792                     	;# 
  6920  0793                     	;# 
  6921  0794                     	;# 
  6922  0795                     	;# 
  6923  0798                     	;# 
  6924  0799                     	;# 
  6925  079A                     	;# 
  6926  079B                     	;# 
  6927  079C                     	;# 
  6928  079D                     	;# 
  6929  07A0                     	;# 
  6930  07A1                     	;# 
  6931  07A2                     	;# 
  6932  07A3                     	;# 
  6933  07A4                     	;# 
  6934  07A5                     	;# 
  6935  07A6                     	;# 
  6936  07A7                     	;# 
  6937  07A8                     	;# 
  6938  07A9                     	;# 
  6939  07AA                     	;# 
  6940  07AB                     	;# 
  6941  07AC                     	;# 
  6942  07AD                     	;# 
  6943  07AE                     	;# 
  6944  07AF                     	;# 
  6945  07B0                     	;# 
  6946  07B1                     	;# 
  6947  07B2                     	;# 
  6948  07B3                     	;# 
  6949  07B4                     	;# 
  6950  07B5                     	;# 
  6951  07B6                     	;# 
  6952  07B7                     	;# 
  6953  0FE4                     	;# 
  6954  0FE5                     	;# 
  6955  0FE6                     	;# 
  6956  0FE7                     	;# 
  6957  0FE8                     	;# 
  6958  0FE9                     	;# 
  6959  0FEA                     	;# 
  6960  0FEB                     	;# 
  6961  0FED                     	;# 
  6962  0FEE                     	;# 
  6963  0FEF                     	;# 
  6964  0000                     	;# 
  6965  0001                     	;# 
  6966  0002                     	;# 
  6967  0003                     	;# 
  6968  0004                     	;# 
  6969  0005                     	;# 
  6970  0006                     	;# 
  6971  0007                     	;# 
  6972  0008                     	;# 
  6973  0009                     	;# 
  6974  000A                     	;# 
  6975  000B                     	;# 
  6976  000C                     	;# 
  6977  000D                     	;# 
  6978  000E                     	;# 
  6979  000F                     	;# 
  6980  0010                     	;# 
  6981  0011                     	;# 
  6982  0012                     	;# 
  6983  0013                     	;# 
  6984  0014                     	;# 
  6985  0015                     	;# 
  6986  0016                     	;# 
  6987  0016                     	;# 
  6988  0017                     	;# 
  6989  0018                     	;# 
  6990  0019                     	;# 
  6991  001A                     	;# 
  6992  001B                     	;# 
  6993  001C                     	;# 
  6994  001E                     	;# 
  6995  001F                     	;# 
  6996  008C                     	;# 
  6997  008D                     	;# 
  6998  008E                     	;# 
  6999  008F                     	;# 
  7000  0090                     	;# 
  7001  0091                     	;# 
  7002  0092                     	;# 
  7003  0093                     	;# 
  7004  0094                     	;# 
  7005  0095                     	;# 
  7006  0096                     	;# 
  7007  0097                     	;# 
  7008  0098                     	;# 
  7009  0099                     	;# 
  7010  009A                     	;# 
  7011  009B                     	;# 
  7012  009B                     	;# 
  7013  009C                     	;# 
  7014  009D                     	;# 
  7015  009E                     	;# 
  7016  010C                     	;# 
  7017  010D                     	;# 
  7018  010E                     	;# 
  7019  010F                     	;# 
  7020  0110                     	;# 
  7021  0111                     	;# 
  7022  0112                     	;# 
  7023  0113                     	;# 
  7024  0114                     	;# 
  7025  0115                     	;# 
  7026  0116                     	;# 
  7027  0117                     	;# 
  7028  0118                     	;# 
  7029  0119                     	;# 
  7030  011A                     	;# 
  7031  011B                     	;# 
  7032  011D                     	;# 
  7033  011E                     	;# 
  7034  011F                     	;# 
  7035  018C                     	;# 
  7036  0190                     	;# 
  7037  0191                     	;# 
  7038  0191                     	;# 
  7039  0192                     	;# 
  7040  0193                     	;# 
  7041  0193                     	;# 
  7042  0193                     	;# 
  7043  0194                     	;# 
  7044  0195                     	;# 
  7045  0196                     	;# 
  7046  0199                     	;# 
  7047  0199                     	;# 
  7048  019A                     	;# 
  7049  019A                     	;# 
  7050  019B                     	;# 
  7051  019B                     	;# 
  7052  019B                     	;# 
  7053  019B                     	;# 
  7054  019C                     	;# 
  7055  019C                     	;# 
  7056  019D                     	;# 
  7057  019D                     	;# 
  7058  019E                     	;# 
  7059  019E                     	;# 
  7060  019F                     	;# 
  7061  019F                     	;# 
  7062  020D                     	;# 
  7063  0211                     	;# 
  7064  0211                     	;# 
  7065  0212                     	;# 
  7066  0212                     	;# 
  7067  0213                     	;# 
  7068  0213                     	;# 
  7069  0214                     	;# 
  7070  0214                     	;# 
  7071  0215                     	;# 
  7072  0215                     	;# 
  7073  0215                     	;# 
  7074  0216                     	;# 
  7075  0216                     	;# 
  7076  0217                     	;# 
  7077  0217                     	;# 
  7078  0219                     	;# 
  7079  021A                     	;# 
  7080  021B                     	;# 
  7081  021C                     	;# 
  7082  021D                     	;# 
  7083  021E                     	;# 
  7084  021F                     	;# 
  7085  028C                     	;# 
  7086  028D                     	;# 
  7087  0291                     	;# 
  7088  0291                     	;# 
  7089  0292                     	;# 
  7090  0293                     	;# 
  7091  0294                     	;# 
  7092  0295                     	;# 
  7093  0295                     	;# 
  7094  0296                     	;# 
  7095  0298                     	;# 
  7096  0298                     	;# 
  7097  0299                     	;# 
  7098  029A                     	;# 
  7099  029B                     	;# 
  7100  029C                     	;# 
  7101  029C                     	;# 
  7102  029D                     	;# 
  7103  029E                     	;# 
  7104  029F                     	;# 
  7105  030C                     	;# 
  7106  030D                     	;# 
  7107  0311                     	;# 
  7108  0311                     	;# 
  7109  0312                     	;# 
  7110  0313                     	;# 
  7111  0314                     	;# 
  7112  0315                     	;# 
  7113  0315                     	;# 
  7114  0316                     	;# 
  7115  0318                     	;# 
  7116  0318                     	;# 
  7117  0319                     	;# 
  7118  031A                     	;# 
  7119  031C                     	;# 
  7120  031C                     	;# 
  7121  031D                     	;# 
  7122  031E                     	;# 
  7123  038C                     	;# 
  7124  038D                     	;# 
  7125  0394                     	;# 
  7126  0395                     	;# 
  7127  0396                     	;# 
  7128  040C                     	;# 
  7129  040D                     	;# 
  7130  0415                     	;# 
  7131  0416                     	;# 
  7132  0417                     	;# 
  7133  041C                     	;# 
  7134  041D                     	;# 
  7135  041E                     	;# 
  7136  048D                     	;# 
  7137  0491                     	;# 
  7138  0492                     	;# 
  7139  0493                     	;# 
  7140  0493                     	;# 
  7141  0494                     	;# 
  7142  0495                     	;# 
  7143  0496                     	;# 
  7144  0497                     	;# 
  7145  0791                     	;# 
  7146  0792                     	;# 
  7147  0793                     	;# 
  7148  0794                     	;# 
  7149  0795                     	;# 
  7150  0798                     	;# 
  7151  0799                     	;# 
  7152  079A                     	;# 
  7153  079B                     	;# 
  7154  079C                     	;# 
  7155  079D                     	;# 
  7156  07A0                     	;# 
  7157  07A1                     	;# 
  7158  07A2                     	;# 
  7159  07A3                     	;# 
  7160  07A4                     	;# 
  7161  07A5                     	;# 
  7162  07A6                     	;# 
  7163  07A7                     	;# 
  7164  07A8                     	;# 
  7165  07A9                     	;# 
  7166  07AA                     	;# 
  7167  07AB                     	;# 
  7168  07AC                     	;# 
  7169  07AD                     	;# 
  7170  07AE                     	;# 
  7171  07AF                     	;# 
  7172  07B0                     	;# 
  7173  07B1                     	;# 
  7174  07B2                     	;# 
  7175  07B3                     	;# 
  7176  07B4                     	;# 
  7177  07B5                     	;# 
  7178  07B6                     	;# 
  7179  07B7                     	;# 
  7180  0FE4                     	;# 
  7181  0FE5                     	;# 
  7182  0FE6                     	;# 
  7183  0FE7                     	;# 
  7184  0FE8                     	;# 
  7185  0FE9                     	;# 
  7186  0FEA                     	;# 
  7187  0FEB                     	;# 
  7188  0FED                     	;# 
  7189  0FEE                     	;# 
  7190  0FEF                     	;_comBuffer
  7191                           
  7192 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
  7193  0000                     
  7194 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
  7195  0000                     
  7196                           	psect	idataBANK2
  7197  1D54                     __pidataBANK2:	
  7198                           
  7199                           ;initializer for _pLcdReg
  7200  1D54  34A0               	retlw	160
  7201  1D55  3407               	retlw	7
  7202                           
  7203                           ;initializer for _flowCalibrationPointSingle
  7204  1D56  3401               	retlw	1
  7205                           
  7206                           ;initializer for _noKeyEventTimeOut
  7207  1D57  341E               	retlw	30
  7208                           
  7209                           	psect	idataBANK3
  7210  1D6E                     __pidataBANK3:	
  7211                           
  7212                           ;initializer for _userKeyB
  7213  1D6E  3474               	retlw	116
  7214  1D6F  3477               	retlw	119
  7215  1D70  3464               	retlw	100
  7216  1D71  346C               	retlw	108
  7217  1D72  3462               	retlw	98
  7218  1D73  3467               	retlw	103
  7219                           
  7220                           	psect	stringtext
  7221  0098                     __pstringtext:	
  7222  0098                     _auchCRCLo:	
  7223  0098  3400               	retlw	0
  7224  0099  34C0               	retlw	192
  7225  009A  34C1               	retlw	193
  7226  009B  3401               	retlw	1
  7227  009C  34C3               	retlw	195
  7228  009D  3403               	retlw	3
  7229  009E  3402               	retlw	2
  7230  009F  34C2               	retlw	194
  7231  00A0  34C6               	retlw	198
  7232  00A1  3406               	retlw	6
  7233  00A2  3407               	retlw	7
  7234  00A3  34C7               	retlw	199
  7235  00A4  3405               	retlw	5
  7236  00A5  34C5               	retlw	197
  7237  00A6  34C4               	retlw	196
  7238  00A7  3404               	retlw	4
  7239  00A8  34CC               	retlw	204
  7240  00A9  340C               	retlw	12
  7241  00AA  340D               	retlw	13
  7242  00AB  34CD               	retlw	205
  7243  00AC  340F               	retlw	15
  7244  00AD  34CF               	retlw	207
  7245  00AE  34CE               	retlw	206
  7246  00AF  340E               	retlw	14
  7247  00B0  340A               	retlw	10
  7248  00B1  34CA               	retlw	202
  7249  00B2  34CB               	retlw	203
  7250  00B3  340B               	retlw	11
  7251  00B4  34C9               	retlw	201
  7252  00B5  3409               	retlw	9
  7253  00B6  3408               	retlw	8
  7254  00B7  34C8               	retlw	200
  7255  00B8  34D8               	retlw	216
  7256  00B9  3418               	retlw	24
  7257  00BA  3419               	retlw	25
  7258  00BB  34D9               	retlw	217
  7259  00BC  341B               	retlw	27
  7260  00BD  34DB               	retlw	219
  7261  00BE  34DA               	retlw	218
  7262  00BF  341A               	retlw	26
  7263  00C0  341E               	retlw	30
  7264  00C1  34DE               	retlw	222
  7265  00C2  34DF               	retlw	223
  7266  00C3  341F               	retlw	31
  7267  00C4  34DD               	retlw	221
  7268  00C5  341D               	retlw	29
  7269  00C6  341C               	retlw	28
  7270  00C7  34DC               	retlw	220
  7271  00C8  3414               	retlw	20
  7272  00C9  34D4               	retlw	212
  7273  00CA  34D5               	retlw	213
  7274  00CB  3415               	retlw	21
  7275  00CC  34D7               	retlw	215
  7276  00CD  3417               	retlw	23
  7277  00CE  3416               	retlw	22
  7278  00CF  34D6               	retlw	214
  7279  00D0  34D2               	retlw	210
  7280  00D1  3412               	retlw	18
  7281  00D2  3413               	retlw	19
  7282  00D3  34D3               	retlw	211
  7283  00D4  3411               	retlw	17
  7284  00D5  34D1               	retlw	209
  7285  00D6  34D0               	retlw	208
  7286  00D7  3410               	retlw	16
  7287  00D8  34F0               	retlw	240
  7288  00D9  3430               	retlw	48
  7289  00DA  3431               	retlw	49
  7290  00DB  34F1               	retlw	241
  7291  00DC  3433               	retlw	51
  7292  00DD  34F3               	retlw	243
  7293  00DE  34F2               	retlw	242
  7294  00DF  3432               	retlw	50
  7295  00E0  3436               	retlw	54
  7296  00E1  34F6               	retlw	246
  7297  00E2  34F7               	retlw	247
  7298  00E3  3437               	retlw	55
  7299  00E4  34F5               	retlw	245
  7300  00E5  3435               	retlw	53
  7301  00E6  3434               	retlw	52
  7302  00E7  34F4               	retlw	244
  7303  00E8  343C               	retlw	60
  7304  00E9  34FC               	retlw	252
  7305  00EA  34FD               	retlw	253
  7306  00EB  343D               	retlw	61
  7307  00EC  34FF               	retlw	255
  7308  00ED  343F               	retlw	63
  7309  00EE  343E               	retlw	62
  7310  00EF  34FE               	retlw	254
  7311  00F0  34FA               	retlw	250
  7312  00F1  343A               	retlw	58
  7313  00F2  343B               	retlw	59
  7314  00F3  34FB               	retlw	251
  7315  00F4  3439               	retlw	57
  7316  00F5  34F9               	retlw	249
  7317  00F6  34F8               	retlw	248
  7318  00F7  3438               	retlw	56
  7319  00F8  3428               	retlw	40
  7320  00F9  34E8               	retlw	232
  7321  00FA  34E9               	retlw	233
  7322  00FB  3429               	retlw	41
  7323  00FC  34EB               	retlw	235
  7324  00FD  342B               	retlw	43
  7325  00FE  342A               	retlw	42
  7326  00FF  34EA               	retlw	234
  7327  0100  34EE               	retlw	238
  7328  0101  342E               	retlw	46
  7329  0102  342F               	retlw	47
  7330  0103  34EF               	retlw	239
  7331  0104  342D               	retlw	45
  7332  0105  34ED               	retlw	237
  7333  0106  34EC               	retlw	236
  7334  0107  342C               	retlw	44
  7335  0108  34E4               	retlw	228
  7336  0109  3424               	retlw	36
  7337  010A  3425               	retlw	37
  7338  010B  34E5               	retlw	229
  7339  010C  3427               	retlw	39
  7340  010D  34E7               	retlw	231
  7341  010E  34E6               	retlw	230
  7342  010F  3426               	retlw	38
  7343  0110  3422               	retlw	34
  7344  0111  34E2               	retlw	226
  7345  0112  34E3               	retlw	227
  7346  0113  3423               	retlw	35
  7347  0114  34E1               	retlw	225
  7348  0115  3421               	retlw	33
  7349  0116  3420               	retlw	32
  7350  0117  34E0               	retlw	224
  7351  0118  34A0               	retlw	160
  7352  0119  3460               	retlw	96
  7353  011A  3461               	retlw	97
  7354  011B  34A1               	retlw	161
  7355  011C  3463               	retlw	99
  7356  011D  34A3               	retlw	163
  7357  011E  34A2               	retlw	162
  7358  011F  3462               	retlw	98
  7359  0120  3466               	retlw	102
  7360  0121  34A6               	retlw	166
  7361  0122  34A7               	retlw	167
  7362  0123  3467               	retlw	103
  7363  0124  34A5               	retlw	165
  7364  0125  3465               	retlw	101
  7365  0126  3464               	retlw	100
  7366  0127  34A4               	retlw	164
  7367  0128  346C               	retlw	108
  7368  0129  34AC               	retlw	172
  7369  012A  34AD               	retlw	173
  7370  012B  346D               	retlw	109
  7371  012C  34AF               	retlw	175
  7372  012D  346F               	retlw	111
  7373  012E  346E               	retlw	110
  7374  012F  34AE               	retlw	174
  7375  0130  34AA               	retlw	170
  7376  0131  346A               	retlw	106
  7377  0132  346B               	retlw	107
  7378  0133  34AB               	retlw	171
  7379  0134  3469               	retlw	105
  7380  0135  34A9               	retlw	169
  7381  0136  34A8               	retlw	168
  7382  0137  3468               	retlw	104
  7383  0138  3478               	retlw	120
  7384  0139  34B8               	retlw	184
  7385  013A  34B9               	retlw	185
  7386  013B  3479               	retlw	121
  7387  013C  34BB               	retlw	187
  7388  013D  347B               	retlw	123
  7389  013E  347A               	retlw	122
  7390  013F  34BA               	retlw	186
  7391  0140  34BE               	retlw	190
  7392  0141  347E               	retlw	126
  7393  0142  347F               	retlw	127
  7394  0143  34BF               	retlw	191
  7395  0144  347D               	retlw	125
  7396  0145  34BD               	retlw	189
  7397  0146  34BC               	retlw	188
  7398  0147  347C               	retlw	124
  7399  0148  34B4               	retlw	180
  7400  0149  3474               	retlw	116
  7401  014A  3475               	retlw	117
  7402  014B  34B5               	retlw	181
  7403  014C  3477               	retlw	119
  7404  014D  34B7               	retlw	183
  7405  014E  34B6               	retlw	182
  7406  014F  3476               	retlw	118
  7407  0150  3472               	retlw	114
  7408  0151  34B2               	retlw	178
  7409  0152  34B3               	retlw	179
  7410  0153  3473               	retlw	115
  7411  0154  34B1               	retlw	177
  7412  0155  3471               	retlw	113
  7413  0156  3470               	retlw	112
  7414  0157  34B0               	retlw	176
  7415  0158  3450               	retlw	80
  7416  0159  3490               	retlw	144
  7417  015A  3491               	retlw	145
  7418  015B  3451               	retlw	81
  7419  015C  3493               	retlw	147
  7420  015D  3453               	retlw	83
  7421  015E  3452               	retlw	82
  7422  015F  3492               	retlw	146
  7423  0160  3496               	retlw	150
  7424  0161  3456               	retlw	86
  7425  0162  3457               	retlw	87
  7426  0163  3497               	retlw	151
  7427  0164  3455               	retlw	85
  7428  0165  3495               	retlw	149
  7429  0166  3494               	retlw	148
  7430  0167  3454               	retlw	84
  7431  0168  349C               	retlw	156
  7432  0169  345C               	retlw	92
  7433  016A  345D               	retlw	93
  7434  016B  349D               	retlw	157
  7435  016C  345F               	retlw	95
  7436  016D  349F               	retlw	159
  7437  016E  349E               	retlw	158
  7438  016F  345E               	retlw	94
  7439  0170  345A               	retlw	90
  7440  0171  349A               	retlw	154
  7441  0172  349B               	retlw	155
  7442  0173  345B               	retlw	91
  7443  0174  3499               	retlw	153
  7444  0175  3459               	retlw	89
  7445  0176  3458               	retlw	88
  7446  0177  3498               	retlw	152
  7447  0178  3488               	retlw	136
  7448  0179  3448               	retlw	72
  7449  017A  3449               	retlw	73
  7450  017B  3489               	retlw	137
  7451  017C  344B               	retlw	75
  7452  017D  348B               	retlw	139
  7453  017E  348A               	retlw	138
  7454  017F  344A               	retlw	74
  7455  0180  344E               	retlw	78
  7456  0181  348E               	retlw	142
  7457  0182  348F               	retlw	143
  7458  0183  344F               	retlw	79
  7459  0184  348D               	retlw	141
  7460  0185  344D               	retlw	77
  7461  0186  344C               	retlw	76
  7462  0187  348C               	retlw	140
  7463  0188  3444               	retlw	68
  7464  0189  3484               	retlw	132
  7465  018A  3485               	retlw	133
  7466  018B  3445               	retlw	69
  7467  018C  3487               	retlw	135
  7468  018D  3447               	retlw	71
  7469  018E  3446               	retlw	70
  7470  018F  3486               	retlw	134
  7471  0190  3482               	retlw	130
  7472  0191  3442               	retlw	66
  7473  0192  3443               	retlw	67
  7474  0193  3483               	retlw	131
  7475  0194  3441               	retlw	65
  7476  0195  3481               	retlw	129
  7477  0196  3480               	retlw	128
  7478  0197  3440               	retlw	64
  7479  0198                     __end_of_auchCRCLo:	
  7480  0198                     _auchCRCHi:	
  7481  0198  3400               	retlw	0
  7482  0199  34C1               	retlw	193
  7483  019A  3481               	retlw	129
  7484  019B  3440               	retlw	64
  7485  019C  3401               	retlw	1
  7486  019D  34C0               	retlw	192
  7487  019E  3480               	retlw	128
  7488  019F  3441               	retlw	65
  7489  01A0  3401               	retlw	1
  7490  01A1  34C0               	retlw	192
  7491  01A2  3480               	retlw	128
  7492  01A3  3441               	retlw	65
  7493  01A4  3400               	retlw	0
  7494  01A5  34C1               	retlw	193
  7495  01A6  3481               	retlw	129
  7496  01A7  3440               	retlw	64
  7497  01A8  3401               	retlw	1
  7498  01A9  34C0               	retlw	192
  7499  01AA  3480               	retlw	128
  7500  01AB  3441               	retlw	65
  7501  01AC  3400               	retlw	0
  7502  01AD  34C1               	retlw	193
  7503  01AE  3481               	retlw	129
  7504  01AF  3440               	retlw	64
  7505  01B0  3400               	retlw	0
  7506  01B1  34C1               	retlw	193
  7507  01B2  3481               	retlw	129
  7508  01B3  3440               	retlw	64
  7509  01B4  3401               	retlw	1
  7510  01B5  34C0               	retlw	192
  7511  01B6  3480               	retlw	128
  7512  01B7  3441               	retlw	65
  7513  01B8  3401               	retlw	1
  7514  01B9  34C0               	retlw	192
  7515  01BA  3480               	retlw	128
  7516  01BB  3441               	retlw	65
  7517  01BC  3400               	retlw	0
  7518  01BD  34C1               	retlw	193
  7519  01BE  3481               	retlw	129
  7520  01BF  3440               	retlw	64
  7521  01C0  3400               	retlw	0
  7522  01C1  34C1               	retlw	193
  7523  01C2  3481               	retlw	129
  7524  01C3  3440               	retlw	64
  7525  01C4  3401               	retlw	1
  7526  01C5  34C0               	retlw	192
  7527  01C6  3480               	retlw	128
  7528  01C7  3441               	retlw	65
  7529  01C8  3400               	retlw	0
  7530  01C9  34C1               	retlw	193
  7531  01CA  3481               	retlw	129
  7532  01CB  3440               	retlw	64
  7533  01CC  3401               	retlw	1
  7534  01CD  34C0               	retlw	192
  7535  01CE  3480               	retlw	128
  7536  01CF  3441               	retlw	65
  7537  01D0  3401               	retlw	1
  7538  01D1  34C0               	retlw	192
  7539  01D2  3480               	retlw	128
  7540  01D3  3441               	retlw	65
  7541  01D4  3400               	retlw	0
  7542  01D5  34C1               	retlw	193
  7543  01D6  3481               	retlw	129
  7544  01D7  3440               	retlw	64
  7545  01D8  3401               	retlw	1
  7546  01D9  34C0               	retlw	192
  7547  01DA  3480               	retlw	128
  7548  01DB  3441               	retlw	65
  7549  01DC  3400               	retlw	0
  7550  01DD  34C1               	retlw	193
  7551  01DE  3481               	retlw	129
  7552  01DF  3440               	retlw	64
  7553  01E0  3400               	retlw	0
  7554  01E1  34C1               	retlw	193
  7555  01E2  3481               	retlw	129
  7556  01E3  3440               	retlw	64
  7557  01E4  3401               	retlw	1
  7558  01E5  34C0               	retlw	192
  7559  01E6  3480               	retlw	128
  7560  01E7  3441               	retlw	65
  7561  01E8  3400               	retlw	0
  7562  01E9  34C1               	retlw	193
  7563  01EA  3481               	retlw	129
  7564  01EB  3440               	retlw	64
  7565  01EC  3401               	retlw	1
  7566  01ED  34C0               	retlw	192
  7567  01EE  3480               	retlw	128
  7568  01EF  3441               	retlw	65
  7569  01F0  3401               	retlw	1
  7570  01F1  34C0               	retlw	192
  7571  01F2  3480               	retlw	128
  7572  01F3  3441               	retlw	65
  7573  01F4  3400               	retlw	0
  7574  01F5  34C1               	retlw	193
  7575  01F6  3481               	retlw	129
  7576  01F7  3440               	retlw	64
  7577  01F8  3400               	retlw	0
  7578  01F9  34C1               	retlw	193
  7579  01FA  3481               	retlw	129
  7580  01FB  3440               	retlw	64
  7581  01FC  3401               	retlw	1
  7582  01FD  34C0               	retlw	192
  7583  01FE  3480               	retlw	128
  7584  01FF  3441               	retlw	65
  7585  0200  3401               	retlw	1
  7586  0201  34C0               	retlw	192
  7587  0202  3480               	retlw	128
  7588  0203  3441               	retlw	65
  7589  0204  3400               	retlw	0
  7590  0205  34C1               	retlw	193
  7591  0206  3481               	retlw	129
  7592  0207  3440               	retlw	64
  7593  0208  3401               	retlw	1
  7594  0209  34C0               	retlw	192
  7595  020A  3480               	retlw	128
  7596  020B  3441               	retlw	65
  7597  020C  3400               	retlw	0
  7598  020D  34C1               	retlw	193
  7599  020E  3481               	retlw	129
  7600  020F  3440               	retlw	64
  7601  0210  3400               	retlw	0
  7602  0211  34C1               	retlw	193
  7603  0212  3481               	retlw	129
  7604  0213  3440               	retlw	64
  7605  0214  3401               	retlw	1
  7606  0215  34C0               	retlw	192
  7607  0216  3480               	retlw	128
  7608  0217  3441               	retlw	65
  7609  0218  3401               	retlw	1
  7610  0219  34C0               	retlw	192
  7611  021A  3480               	retlw	128
  7612  021B  3441               	retlw	65
  7613  021C  3400               	retlw	0
  7614  021D  34C1               	retlw	193
  7615  021E  3481               	retlw	129
  7616  021F  3440               	retlw	64
  7617  0220  3400               	retlw	0
  7618  0221  34C1               	retlw	193
  7619  0222  3481               	retlw	129
  7620  0223  3440               	retlw	64
  7621  0224  3401               	retlw	1
  7622  0225  34C0               	retlw	192
  7623  0226  3480               	retlw	128
  7624  0227  3441               	retlw	65
  7625  0228  3400               	retlw	0
  7626  0229  34C1               	retlw	193
  7627  022A  3481               	retlw	129
  7628  022B  3440               	retlw	64
  7629  022C  3401               	retlw	1
  7630  022D  34C0               	retlw	192
  7631  022E  3480               	retlw	128
  7632  022F  3441               	retlw	65
  7633  0230  3401               	retlw	1
  7634  0231  34C0               	retlw	192
  7635  0232  3480               	retlw	128
  7636  0233  3441               	retlw	65
  7637  0234  3400               	retlw	0
  7638  0235  34C1               	retlw	193
  7639  0236  3481               	retlw	129
  7640  0237  3440               	retlw	64
  7641  0238  3400               	retlw	0
  7642  0239  34C1               	retlw	193
  7643  023A  3481               	retlw	129
  7644  023B  3440               	retlw	64
  7645  023C  3401               	retlw	1
  7646  023D  34C0               	retlw	192
  7647  023E  3480               	retlw	128
  7648  023F  3441               	retlw	65
  7649  0240  3401               	retlw	1
  7650  0241  34C0               	retlw	192
  7651  0242  3480               	retlw	128
  7652  0243  3441               	retlw	65
  7653  0244  3400               	retlw	0
  7654  0245  34C1               	retlw	193
  7655  0246  3481               	retlw	129
  7656  0247  3440               	retlw	64
  7657  0248  3401               	retlw	1
  7658  0249  34C0               	retlw	192
  7659  024A  3480               	retlw	128
  7660  024B  3441               	retlw	65
  7661  024C  3400               	retlw	0
  7662  024D  34C1               	retlw	193
  7663  024E  3481               	retlw	129
  7664  024F  3440               	retlw	64
  7665  0250  3400               	retlw	0
  7666  0251  34C1               	retlw	193
  7667  0252  3481               	retlw	129
  7668  0253  3440               	retlw	64
  7669  0254  3401               	retlw	1
  7670  0255  34C0               	retlw	192
  7671  0256  3480               	retlw	128
  7672  0257  3441               	retlw	65
  7673  0258  3400               	retlw	0
  7674  0259  34C1               	retlw	193
  7675  025A  3481               	retlw	129
  7676  025B  3440               	retlw	64
  7677  025C  3401               	retlw	1
  7678  025D  34C0               	retlw	192
  7679  025E  3480               	retlw	128
  7680  025F  3441               	retlw	65
  7681  0260  3401               	retlw	1
  7682  0261  34C0               	retlw	192
  7683  0262  3480               	retlw	128
  7684  0263  3441               	retlw	65
  7685  0264  3400               	retlw	0
  7686  0265  34C1               	retlw	193
  7687  0266  3481               	retlw	129
  7688  0267  3440               	retlw	64
  7689  0268  3401               	retlw	1
  7690  0269  34C0               	retlw	192
  7691  026A  3480               	retlw	128
  7692  026B  3441               	retlw	65
  7693  026C  3400               	retlw	0
  7694  026D  34C1               	retlw	193
  7695  026E  3481               	retlw	129
  7696  026F  3440               	retlw	64
  7697  0270  3400               	retlw	0
  7698  0271  34C1               	retlw	193
  7699  0272  3481               	retlw	129
  7700  0273  3440               	retlw	64
  7701  0274  3401               	retlw	1
  7702  0275  34C0               	retlw	192
  7703  0276  3480               	retlw	128
  7704  0277  3441               	retlw	65
  7705  0278  3401               	retlw	1
  7706  0279  34C0               	retlw	192
  7707  027A  3480               	retlw	128
  7708  027B  3441               	retlw	65
  7709  027C  3400               	retlw	0
  7710  027D  34C1               	retlw	193
  7711  027E  3481               	retlw	129
  7712  027F  3440               	retlw	64
  7713  0280  3400               	retlw	0
  7714  0281  34C1               	retlw	193
  7715  0282  3481               	retlw	129
  7716  0283  3440               	retlw	64
  7717  0284  3401               	retlw	1
  7718  0285  34C0               	retlw	192
  7719  0286  3480               	retlw	128
  7720  0287  3441               	retlw	65
  7721  0288  3400               	retlw	0
  7722  0289  34C1               	retlw	193
  7723  028A  3481               	retlw	129
  7724  028B  3440               	retlw	64
  7725  028C  3401               	retlw	1
  7726  028D  34C0               	retlw	192
  7727  028E  3480               	retlw	128
  7728  028F  3441               	retlw	65
  7729  0290  3401               	retlw	1
  7730  0291  34C0               	retlw	192
  7731  0292  3480               	retlw	128
  7732  0293  3441               	retlw	65
  7733  0294  3400               	retlw	0
  7734  0295  34C1               	retlw	193
  7735  0296  3481               	retlw	129
  7736  0297  3440               	retlw	64
  7737  0298                     __end_of_auchCRCHi:	
  7738  0298                     _LCDDigitalIndexTable:	
  7739  0298  3430               	retlw	48
  7740  0299  3431               	retlw	49
  7741  029A  3432               	retlw	50
  7742  029B  3433               	retlw	51
  7743  029C  3434               	retlw	52
  7744  029D  3435               	retlw	53
  7745  029E  3436               	retlw	54
  7746  029F  3437               	retlw	55
  7747  02A0  3438               	retlw	56
  7748  02A1  3439               	retlw	57
  7749  02A2  3461               	retlw	97
  7750  02A3  3462               	retlw	98
  7751  02A4  3463               	retlw	99
  7752  02A5  3464               	retlw	100
  7753  02A6  3465               	retlw	101
  7754  02A7  3466               	retlw	102
  7755  02A8  3467               	retlw	103
  7756  02A9  3468               	retlw	104
  7757  02AA  3469               	retlw	105
  7758  02AB  346A               	retlw	106
  7759  02AC  346B               	retlw	107
  7760  02AD  346C               	retlw	108
  7761  02AE  346D               	retlw	109
  7762  02AF  346E               	retlw	110
  7763  02B0  346F               	retlw	111
  7764  02B1  3470               	retlw	112
  7765  02B2  3471               	retlw	113
  7766  02B3  3472               	retlw	114
  7767  02B4  3473               	retlw	115
  7768  02B5  3474               	retlw	116
  7769  02B6  3475               	retlw	117
  7770  02B7  3476               	retlw	118
  7771  02B8  3477               	retlw	119
  7772  02B9  3478               	retlw	120
  7773  02BA  3479               	retlw	121
  7774  02BB  347A               	retlw	122
  7775  02BC  342E               	retlw	46
  7776  02BD  342D               	retlw	45
  7777  02BE  343A               	retlw	58
  7778  02BF  3420               	retlw	32
  7779  02C0  3400               	retlw	0
  7780  02C1                     __end_of_LCDDigitalIndexTable:	
  7781  02C1                     _LCDDigitalTable:	
  7782  02C1  343F               	retlw	63
  7783  02C2  3430               	retlw	48
  7784  02C3  345B               	retlw	91
  7785  02C4  344F               	retlw	79
  7786  02C5  3466               	retlw	102
  7787  02C6  346D               	retlw	109
  7788  02C7  347D               	retlw	125
  7789  02C8  3407               	retlw	7
  7790  02C9  347F               	retlw	127
  7791  02CA  346F               	retlw	111
  7792  02CB  3477               	retlw	119
  7793  02CC  347C               	retlw	124
  7794  02CD  3439               	retlw	57
  7795  02CE  345E               	retlw	94
  7796  02CF  3479               	retlw	121
  7797  02D0  3471               	retlw	113
  7798  02D1  346F               	retlw	111
  7799  02D2  3476               	retlw	118
  7800  02D3  3430               	retlw	48
  7801  02D4  340E               	retlw	14
  7802  02D5  3400               	retlw	0
  7803  02D6  3438               	retlw	56
  7804  02D7  3400               	retlw	0
  7805  02D8  3437               	retlw	55
  7806  02D9  343F               	retlw	63
  7807  02DA  3473               	retlw	115
  7808  02DB  3467               	retlw	103
  7809  02DC  3431               	retlw	49
  7810  02DD  346D               	retlw	109
  7811  02DE  3478               	retlw	120
  7812  02DF  343E               	retlw	62
  7813  02E0  3400               	retlw	0
  7814  02E1  3400               	retlw	0
  7815  02E2  3400               	retlw	0
  7816  02E3  346E               	retlw	110
  7817  02E4  345B               	retlw	91
  7818  02E5  3440               	retlw	64
  7819  02E6  3440               	retlw	64
  7820  02E7  3448               	retlw	72
  7821  02E8  3400               	retlw	0
  7822  02E9                     __end_of_LCDDigitalTable:	
  7823  02E9                     _hexTable:	
  7824  02E9  3430               	retlw	48
  7825  02EA  3431               	retlw	49
  7826  02EB  3432               	retlw	50
  7827  02EC  3433               	retlw	51
  7828  02ED  3434               	retlw	52
  7829  02EE  3435               	retlw	53
  7830  02EF  3436               	retlw	54
  7831  02F0  3437               	retlw	55
  7832  02F1  3438               	retlw	56
  7833  02F2  3439               	retlw	57
  7834  02F3  3461               	retlw	97
  7835  02F4  3462               	retlw	98
  7836  02F5  3463               	retlw	99
  7837  02F6  3464               	retlw	100
  7838  02F7  3465               	retlw	101
  7839  02F8  3466               	retlw	102
  7840  02F9  3400               	retlw	0
  7841  02FA                     __end_of_hexTable:	
  7842  02FA                     _TablerxAlign:	
  7843  02FA  34FF               	retlw	255
  7844  02FB  34FE               	retlw	254
  7845  02FC  34FC               	retlw	252
  7846  02FD  34F8               	retlw	248
  7847  02FE  34F0               	retlw	240
  7848  02FF  34E0               	retlw	224
  7849  0300  34C0               	retlw	192
  7850  0301  3480               	retlw	128
  7851  0302                     __end_of_TablerxAlign:	
  7852  3F80                     _Main_flowCalibrationTable_absaddr	set	16256
  7853  3E80                     _bkupSystemData_absaddr	set	16000
  7854  3F00                     _mainSystemData_absaddr	set	16128
  7855  0302                     _defWriteBlock3:	
  7856  0302  34FF               	retlw	255
  7857  0303  34FF               	retlw	255
  7858  0304  34FF               	retlw	255
  7859  0305  34FF               	retlw	255
  7860  0306  34FF               	retlw	255
  7861  0307  34FF               	retlw	255
  7862  0308  34FF               	retlw	255
  7863  0309  3407               	retlw	7
  7864  030A  3480               	retlw	128
  7865  030B  3469               	retlw	105
  7866  030C  34FF               	retlw	255
  7867  030D  34FF               	retlw	255
  7868  030E  34FF               	retlw	255
  7869  030F  34FF               	retlw	255
  7870  0310  34FF               	retlw	255
  7871  0311  34FF               	retlw	255
  7872  0312  34D4               	retlw	212
  7873  0313  3455               	retlw	85
  7874  0314                     __end_of_defWriteBlock3:	
  7875  0314                     _defaultKeyA:	
  7876  0314  34FF               	retlw	255
  7877  0315  34FF               	retlw	255
  7878  0316  34FF               	retlw	255
  7879  0317  34FF               	retlw	255
  7880  0318  34FF               	retlw	255
  7881  0319  34FF               	retlw	255
  7882  031A                     __end_of_defaultKeyA:	
  7883  031A                     _cardKeyCreatKey:	
  7884  031A  3411               	retlw	17
  7885  031B  3433               	retlw	51
  7886  031C  3455               	retlw	85
  7887  031D  3477               	retlw	119
  7888  031E  34AA               	retlw	170
  7889  031F  34BB               	retlw	187
  7890  0320                     __end_of_cardKeyCreatKey:	
  7891  0320                     _ctrlByteDefault:	
  7892  0320  3408               	retlw	8
  7893  0321  3477               	retlw	119
  7894  0322  348F               	retlw	143
  7895  0323  3469               	retlw	105
  7896  0324                     __end_of_ctrlByteDefault:	
  7897  3F80                     _Main_flowCalibrationTable_absaddr	set	16256
  7898  0324                     STR_25:	
  7899  0324  3466               	retlw	102	;'f'
  7900  0325  342D               	retlw	45	;'-'
  7901  0326  3420               	retlw	32	;' '
  7902  0327  3420               	retlw	32	;' '
  7903  0328  3420               	retlw	32	;' '
  7904  0329  3420               	retlw	32	;' '
  7905  032A  3420               	retlw	32	;' '
  7906  032B  3420               	retlw	32	;' '
  7907  032C  3400               	retlw	0
  7908  032D                     STR_27:	
  7909  032D  3473               	retlw	115	;'s'
  7910  032E  342D               	retlw	45	;'-'
  7911  032F  3420               	retlw	32	;' '
  7912  0330  3420               	retlw	32	;' '
  7913  0331  3420               	retlw	32	;' '
  7914  0332  3420               	retlw	32	;' '
  7915  0333  3420               	retlw	32	;' '
  7916  0334  3420               	retlw	32	;' '
  7917  0335  3400               	retlw	0
  7918  0336                     STR_26:	
  7919  0336  3466               	retlw	102	;'f'
  7920  0337  342D               	retlw	45	;'-'
  7921  0338  3467               	retlw	103	;'g'
  7922  0339  346F               	retlw	111	;'o'
  7923  033A  346F               	retlw	111	;'o'
  7924  033B  3464               	retlw	100	;'d'
  7925  033C  3420               	retlw	32	;' '
  7926  033D  3420               	retlw	32	;' '
  7927  033E  3400               	retlw	0
  7928  033F                     STR_28:	
  7929  033F  3473               	retlw	115	;'s'
  7930  0340  342D               	retlw	45	;'-'
  7931  0341  3467               	retlw	103	;'g'
  7932  0342  346F               	retlw	111	;'o'
  7933  0343  346F               	retlw	111	;'o'
  7934  0344  3464               	retlw	100	;'d'
  7935  0345  3420               	retlw	32	;' '
  7936  0346  3420               	retlw	32	;' '
  7937  0347  3400               	retlw	0
  7938  0348                     STR_17:	
  7939  0348  3469               	retlw	105	;'i'
  7940  0349  346E               	retlw	110	;'n'
  7941  034A  3469               	retlw	105	;'i'
  7942  034B  3474               	retlw	116	;'t'
  7943  034C  3469               	retlw	105	;'i'
  7944  034D  3461               	retlw	97	;'a'
  7945  034E  3420               	retlw	32	;' '
  7946  034F  3420               	retlw	32	;' '
  7947  0350  3400               	retlw	0
  7948  0351                     STR_21:	
  7949  0351  3475               	retlw	117	;'u'
  7950  0352  3470               	retlw	112	;'p'
  7951  0353  3420               	retlw	32	;' '
  7952  0354  3464               	retlw	100	;'d'
  7953  0355  3461               	retlw	97	;'a'
  7954  0356  3474               	retlw	116	;'t'
  7955  0357  3461               	retlw	97	;'a'
  7956  0358  3420               	retlw	32	;' '
  7957  0359  3400               	retlw	0
  7958  035A                     STR_16:	
  7959  035A  3473               	retlw	115	;'s'
  7960  035B  3475               	retlw	117	;'u'
  7961  035C  3463               	retlw	99	;'c'
  7962  035D  3463               	retlw	99	;'c'
  7963  035E  3465               	retlw	101	;'e'
  7964  035F  3473               	retlw	115	;'s'
  7965  0360  3473               	retlw	115	;'s'
  7966  0361  3420               	retlw	32	;' '
  7967  0362  3400               	retlw	0
  7968  0363                     STR_1:	
  7969  0363  3420               	retlw	32	;' '
  7970  0364  342D               	retlw	45	;'-'
  7971  0365  3468               	retlw	104	;'h'
  7972  0366  3465               	retlw	101	;'e'
  7973  0367  346C               	retlw	108	;'l'
  7974  0368  346C               	retlw	108	;'l'
  7975  0369  346F               	retlw	111	;'o'
  7976  036A  342D               	retlw	45	;'-'
  7977  036B  3400               	retlw	0
  7978  036C                     STR_13:	
  7979  036C  3463               	retlw	99	;'c'
  7980  036D  3461               	retlw	97	;'a'
  7981  036E  3472               	retlw	114	;'r'
  7982  036F  3464               	retlw	100	;'d'
  7983  0370  342D               	retlw	45	;'-'
  7984  0371  3469               	retlw	105	;'i'
  7985  0372  3464               	retlw	100	;'d'
  7986  0373  3430               	retlw	48	;'0'
  7987  0374  3400               	retlw	0
  7988  0375                     STR_14:	
  7989  0375  3463               	retlw	99	;'c'
  7990  0376  3461               	retlw	97	;'a'
  7991  0377  3472               	retlw	114	;'r'
  7992  0378  3464               	retlw	100	;'d'
  7993  0379  342D               	retlw	45	;'-'
  7994  037A  3469               	retlw	105	;'i'
  7995  037B  3464               	retlw	100	;'d'
  7996  037C  3439               	retlw	57	;'9'
  7997  037D  3400               	retlw	0
  7998  037E                     STR_5:	
  7999  037E  3472               	retlw	114	;'r'
  8000  037F  3465               	retlw	101	;'e'
  8001  0380  3463               	retlw	99	;'c'
  8002  0381  3468               	retlw	104	;'h'
  8003  0382  3461               	retlw	97	;'a'
  8004  0383  3472               	retlw	114	;'r'
  8005  0384  3467               	retlw	103	;'g'
  8006  0385  3465               	retlw	101	;'e'
  8007  0386  3400               	retlw	0
  8008  0387                     STR_18:	
  8009  0387  346E               	retlw	110	;'n'
  8010  0388  346F               	retlw	111	;'o'
  8011  0389  3465               	retlw	101	;'e'
  8012  038A  346E               	retlw	110	;'n'
  8013  038B  346F               	retlw	111	;'o'
  8014  038C  3475               	retlw	117	;'u'
  8015  038D  3467               	retlw	103	;'g'
  8016  038E  3468               	retlw	104	;'h'
  8017  038F  3400               	retlw	0
  8018  0390                     STR_19:	
  8019  0390  3461               	retlw	97	;'a'
  8020  0391  3463               	retlw	99	;'c'
  8021  0392  3474               	retlw	116	;'t'
  8022  0393  342D               	retlw	45	;'-'
  8023  0394  346F               	retlw	111	;'o'
  8024  0395  3470               	retlw	112	;'p'
  8025  0396  3465               	retlw	101	;'e'
  8026  0397  346E               	retlw	110	;'n'
  8027  0398  3400               	retlw	0
  8028  0399                     STR_20:	
  8029  0399  3461               	retlw	97	;'a'
  8030  039A  3463               	retlw	99	;'c'
  8031  039B  3474               	retlw	116	;'t'
  8032  039C  342D               	retlw	45	;'-'
  8033  039D  346F               	retlw	111	;'o'
  8034  039E  3470               	retlw	112	;'p'
  8035  039F  3465               	retlw	101	;'e'
  8036  03A0  3472               	retlw	114	;'r'
  8037  03A1  3400               	retlw	0
  8038  03A2                     STR_24:	
  8039  03A2  3476               	retlw	118	;'v'
  8040  03A3  3465               	retlw	101	;'e'
  8041  03A4  3472               	retlw	114	;'r'
  8042  03A5  343D               	retlw	61	;'='
  8043  03A6  3465               	retlw	101	;'e'
  8044  03A7  3472               	retlw	114	;'r'
  8045  03A8  3472               	retlw	114	;'r'
  8046  03A9  3400               	retlw	0
  8047  03AA                     STR_4:	
  8048  03AA  3420               	retlw	32	;' '
  8049  03AB  3420               	retlw	32	;' '
  8050  03AC  3420               	retlw	32	;' '
  8051  03AD  3463               	retlw	99	;'c'
  8052  03AE  3475               	retlw	117	;'u'
  8053  03AF  342D               	retlw	45	;'-'
  8054  03B0  3400               	retlw	0
  8055  03B1                     STR_2:	
  8056  03B1  3420               	retlw	32	;' '
  8057  03B2  3463               	retlw	99	;'c'
  8058  03B3  3473               	retlw	115	;'s'
  8059  03B4  3437               	retlw	55	;'7'
  8060  03B5  3430               	retlw	48	;'0'
  8061  03B6  3430               	retlw	48	;'0'
  8062  03B7  3400               	retlw	0
  8063  03B8                     STR_23:	
  8064  03B8  3476               	retlw	118	;'v'
  8065  03B9  3465               	retlw	101	;'e'
  8066  03BA  3472               	retlw	114	;'r'
  8067  03BB  343D               	retlw	61	;'='
  8068  03BC  3432               	retlw	50	;'2'
  8069  03BD  3400               	retlw	0
  8070  03BE                     STR_9:	
  8071  03BE  3464               	retlw	100	;'d'
  8072  03BF  3431               	retlw	49	;'1'
  8073  03C0  3420               	retlw	32	;' '
  8074  03C1  3420               	retlw	32	;' '
  8075  03C2  3420               	retlw	32	;' '
  8076  03C3  3400               	retlw	0
  8077  03C4                     STR_11:	
  8078  03C4  3464               	retlw	100	;'d'
  8079  03C5  3432               	retlw	50	;'2'
  8080  03C6  3420               	retlw	32	;' '
  8081  03C7  3420               	retlw	32	;' '
  8082  03C8  3420               	retlw	32	;' '
  8083  03C9  3400               	retlw	0
  8084  03CA                     STR_10:	
  8085  03CA  3464               	retlw	100	;'d'
  8086  03CB  3431               	retlw	49	;'1'
  8087  03CC  3420               	retlw	32	;' '
  8088  03CD  3420               	retlw	32	;' '
  8089  03CE  342D               	retlw	45	;'-'
  8090  03CF  3400               	retlw	0
  8091  03D0                     STR_12:	
  8092  03D0  3464               	retlw	100	;'d'
  8093  03D1  3432               	retlw	50	;'2'
  8094  03D2  3420               	retlw	32	;' '
  8095  03D3  3420               	retlw	32	;' '
  8096  03D4  342D               	retlw	45	;'-'
  8097  03D5  3400               	retlw	0
  8098  03D6                     STR_6:	
  8099  03D6  3461               	retlw	97	;'a'
  8100  03D7  3464               	retlw	100	;'d'
  8101  03D8  3464               	retlw	100	;'d'
  8102  03D9  3472               	retlw	114	;'r'
  8103  03DA  342D               	retlw	45	;'-'
  8104  03DB  3400               	retlw	0
  8105  03DC                     STR_22:	
  8106  03DC  3420               	retlw	32	;' '
  8107  03DD  3465               	retlw	101	;'e'
  8108  03DE  3472               	retlw	114	;'r'
  8109  03DF  3472               	retlw	114	;'r'
  8110  03E0  342D               	retlw	45	;'-'
  8111  03E1  3400               	retlw	0
  8112  03E2                     STR_15:	
  8113  03E2  3470               	retlw	112	;'p'
  8114  03E3  3473               	retlw	115	;'s'
  8115  03E4  3464               	retlw	100	;'d'
  8116  03E5  342D               	retlw	45	;'-'
  8117  03E6  3400               	retlw	0
  8118  03E7                     STR_7:	
  8119  03E7  3464               	retlw	100	;'d'
  8120  03E8  346A               	retlw	106	;'j'
  8121  03E9  342D               	retlw	45	;'-'
  8122  03EA  3400               	retlw	0
  8123  03EB                     STR_8:	
  8124  03EB  3473               	retlw	115	;'s'
  8125  03EC  346A               	retlw	106	;'j'
  8126  03ED  342D               	retlw	45	;'-'
  8127  03EE  3400               	retlw	0
  8128  03EF                     STR_3:	
  8129  03EF  346C               	retlw	108	;'l'
  8130  03F0  342D               	retlw	45	;'-'
  8131  03F1  3400               	retlw	0
  8132                           
  8133                           ; #config settings
  8134  0000                     
  8135                           	psect	_Main_flowCalibrationTable_text
  8136  3F80                     __p_Main_flowCalibrationTable_text:	
  8137  3F80                     _Main_flowCalibrationTable:	
  8138  3F80  3400               	retlw	0
  8139  3F81  3400               	retlw	0
  8140  3F82  3400               	retlw	0
  8141  3F83  3400               	retlw	0
  8142  3F84  3400               	retlw	0
  8143  3F85  3400               	retlw	0
  8144  3F86  3400               	retlw	0
  8145  3F87  3400               	retlw	0
  8146  3F88  3400               	retlw	0
  8147  3F89  3400               	retlw	0
  8148  3F8A  3400               	retlw	0
  8149  3F8B  3400               	retlw	0
  8150  3F8C  3400               	retlw	0
  8151  3F8D  3400               	retlw	0
  8152  3F8E  3400               	retlw	0
  8153  3F8F  3400               	retlw	0
  8154  3F90  3400               	retlw	0
  8155  3F91  3400               	retlw	0
  8156  3F92  3400               	retlw	0
  8157  3F93  3400               	retlw	0
  8158  3F94  3400               	retlw	0
  8159  3F95  3400               	retlw	0
  8160  3F96  3400               	retlw	0
  8161  3F97  3400               	retlw	0
  8162  3F98  3400               	retlw	0
  8163  3F99  3400               	retlw	0
  8164  3F9A  3400               	retlw	0
  8165  3F9B  3400               	retlw	0
  8166  3F9C  3400               	retlw	0
  8167  3F9D  3400               	retlw	0
  8168  3F9E  3400               	retlw	0
  8169  3F9F  3400               	retlw	0
  8170  3FA0  3400               	retlw	0
  8171  3FA1  3400               	retlw	0
  8172  3FA2  3400               	retlw	0
  8173  3FA3  3400               	retlw	0
  8174  3FA4  3400               	retlw	0
  8175  3FA5  3400               	retlw	0
  8176  3FA6  3400               	retlw	0
  8177  3FA7  3400               	retlw	0
  8178  3FA8  3400               	retlw	0
  8179  3FA9  3400               	retlw	0
  8180  3FAA  3400               	retlw	0
  8181  3FAB  3400               	retlw	0
  8182  3FAC  3400               	retlw	0
  8183  3FAD  3400               	retlw	0
  8184  3FAE  3400               	retlw	0
  8185  3FAF  3400               	retlw	0
  8186  3FB0  3400               	retlw	0
  8187  3FB1  3400               	retlw	0
  8188  3FB2  3400               	retlw	0
  8189  3FB3  3400               	retlw	0
  8190  3FB4  3400               	retlw	0
  8191  3FB5  3400               	retlw	0
  8192  3FB6  3400               	retlw	0
  8193  3FB7  3400               	retlw	0
  8194  3FB8  3400               	retlw	0
  8195  3FB9  3400               	retlw	0
  8196  3FBA  3400               	retlw	0
  8197  3FBB  3400               	retlw	0
  8198  3FBC  3400               	retlw	0
  8199  3FBD  3400               	retlw	0
  8200  3FBE  3400               	retlw	0
  8201  3FBF  3400               	retlw	0
  8202  3FC0  3400               	retlw	0
  8203  3FC1  3400               	retlw	0
  8204  3FC2  3400               	retlw	0
  8205  3FC3  3400               	retlw	0
  8206  3FC4  3400               	retlw	0
  8207  3FC5  3400               	retlw	0
  8208  3FC6  3400               	retlw	0
  8209  3FC7  3400               	retlw	0
  8210  3FC8  3400               	retlw	0
  8211  3FC9  3400               	retlw	0
  8212  3FCA  3400               	retlw	0
  8213  3FCB  3400               	retlw	0
  8214  3FCC  3400               	retlw	0
  8215  3FCD  3400               	retlw	0
  8216  3FCE  3400               	retlw	0
  8217  3FCF  3400               	retlw	0
  8218  3FD0  3400               	retlw	0
  8219  3FD1  3400               	retlw	0
  8220  3FD2  3400               	retlw	0
  8221  3FD3  3400               	retlw	0
  8222  3FD4  3400               	retlw	0
  8223  3FD5  3400               	retlw	0
  8224  3FD6  3400               	retlw	0
  8225  3FD7  3400               	retlw	0
  8226  3FD8  3400               	retlw	0
  8227  3FD9  3400               	retlw	0
  8228  3FDA  3400               	retlw	0
  8229  3FDB  3400               	retlw	0
  8230  3FDC  3400               	retlw	0
  8231  3FDD  3400               	retlw	0
  8232  3FDE  3400               	retlw	0
  8233  3FDF  3400               	retlw	0
  8234  3FE0  3400               	retlw	0
  8235  3FE1  3400               	retlw	0
  8236  3FE2  3400               	retlw	0
  8237  3FE3  3400               	retlw	0
  8238  3FE4  3400               	retlw	0
  8239  3FE5  3400               	retlw	0
  8240  3FE6  3400               	retlw	0
  8241  3FE7  3400               	retlw	0
  8242  3FE8  3400               	retlw	0
  8243  3FE9  3400               	retlw	0
  8244  3FEA  3400               	retlw	0
  8245  3FEB  3400               	retlw	0
  8246  3FEC  3400               	retlw	0
  8247  3FED  3400               	retlw	0
  8248  3FEE  3400               	retlw	0
  8249  3FEF  3400               	retlw	0
  8250  3FF0  3400               	retlw	0
  8251  3FF1  3400               	retlw	0
  8252  3FF2  3400               	retlw	0
  8253  3FF3  3400               	retlw	0
  8254  3FF4  3400               	retlw	0
  8255  3FF5  3400               	retlw	0
  8256  3FF6  3400               	retlw	0
  8257  3FF7  3400               	retlw	0
  8258  3FF8  3400               	retlw	0
  8259  3FF9  3400               	retlw	0
  8260  3FFA  3400               	retlw	0
  8261  3FFB  3400               	retlw	0
  8262  3FFC                     __end_of_Main_flowCalibrationTable:	
  8263  3E80                     _bkupSystemData_absaddr	set	16000
  8264                           
  8265                           	psect	_bkupSystemData_text
  8266  3E80                     __p_bkupSystemData_text:	
  8267  3E80                     _bkupSystemData:	
  8268  3E80  34E1               	retlw	225
  8269  3E81  3410               	retlw	16
  8270  3E82  3400               	retlw	0
  8271  3E83  3400               	retlw	0
  8272  3E84  3400               	retlw	0
  8273  3E85  3400               	retlw	0
  8274  3E86  3400               	retlw	0
  8275  3E87  3400               	retlw	0
  8276  3E88  3441               	retlw	65
  8277  3E89  34FF               	retlw	255
  8278  3E8A  34B8               	retlw	184
  8279  3E8B  3422               	retlw	34
  8280  3E8C  3400               	retlw	0
  8281  3E8D  3400               	retlw	0
  8282  3E8E  3400               	retlw	0
  8283  3E8F  3400               	retlw	0
  8284  3E90  3400               	retlw	0
  8285  3E91  3400               	retlw	0
  8286  3E92  3464               	retlw	100
  8287  3E93  3400               	retlw	0
  8288  3E94  3432               	retlw	50
  8289  3E95  3400               	retlw	0
  8290  3E96  3428               	retlw	40
  8291  3E97  3400               	retlw	0
  8292  3E98  3400               	retlw	0
  8293  3E99  3400               	retlw	0
  8294  3E9A  34E8               	retlw	232
  8295  3E9B  3403               	retlw	3
  8296  3E9C  3400               	retlw	0
  8297  3E9D  3400               	retlw	0
  8298  3E9E  3400               	retlw	0
  8299  3E9F  3400               	retlw	0
  8300  3EA0  3400               	retlw	0
  8301  3EA1  3400               	retlw	0
  8302  3EA2  3400               	retlw	0
  8303  3EA3  3400               	retlw	0
  8304  3EA4  3410               	retlw	16
  8305  3EA5  3427               	retlw	39
  8306  3EA6  3400               	retlw	0
  8307  3EA7  3400               	retlw	0
  8308  3EA8  3430               	retlw	48
  8309  3EA9  3475               	retlw	117
  8310  3EAA  3400               	retlw	0
  8311  3EAB  3400               	retlw	0
  8312  3EAC  3400               	retlw	0
  8313  3EAD  3400               	retlw	0
  8314  3EAE  3400               	retlw	0
  8315  3EAF  3400               	retlw	0
  8316  3EB0  3400               	retlw	0
  8317  3EB1  3400               	retlw	0
  8318  3EB2  3400               	retlw	0
  8319  3EB3  3400               	retlw	0
  8320  3EB4  3400               	retlw	0
  8321  3EB5  3400               	retlw	0
  8322  3EB6  3400               	retlw	0
  8323  3EB7  3400               	retlw	0
  8324  3EB8  3400               	retlw	0
  8325  3EB9  3405               	retlw	5
  8326  3EBA  3400               	retlw	0
  8327  3EBB  3401               	retlw	1
  8328  3EBC  3400               	retlw	0
  8329  3EBD  3401               	retlw	1
  8330  3EBE  3400               	retlw	0
  8331  3EBF  3400               	retlw	0
  8332  3EC0  3400               	retlw	0
  8333  3EC1  3400               	retlw	0
  8334  3EC2  3400               	retlw	0
  8335  3EC3  3400               	retlw	0
  8336  3EC4  3400               	retlw	0
  8337  3EC5  3400               	retlw	0
  8338  3EC6  3400               	retlw	0
  8339  3EC7  3400               	retlw	0
  8340  3EC8                     __end_of_bkupSystemData:	
  8341  3F00                     _mainSystemData_absaddr	set	16128
  8342                           
  8343                           	psect	_mainSystemData_text
  8344  3F00                     __p_mainSystemData_text:	
  8345  3F00                     _mainSystemData:	
  8346  3F00  3400               	retlw	0
  8347  3F01  3400               	retlw	0
  8348  3F02  3400               	retlw	0
  8349  3F03  3400               	retlw	0
  8350  3F04  3400               	retlw	0
  8351  3F05  3400               	retlw	0
  8352  3F06  3400               	retlw	0
  8353  3F07  3400               	retlw	0
  8354  3F08  3400               	retlw	0
  8355  3F09  3400               	retlw	0
  8356  3F0A  3400               	retlw	0
  8357  3F0B  3400               	retlw	0
  8358  3F0C  3400               	retlw	0
  8359  3F0D  3400               	retlw	0
  8360  3F0E  3400               	retlw	0
  8361  3F0F  3400               	retlw	0
  8362  3F10  3400               	retlw	0
  8363  3F11  3400               	retlw	0
  8364  3F12  3400               	retlw	0
  8365  3F13  3400               	retlw	0
  8366  3F14  3400               	retlw	0
  8367  3F15  3400               	retlw	0
  8368  3F16  3400               	retlw	0
  8369  3F17  3400               	retlw	0
  8370  3F18  3400               	retlw	0
  8371  3F19  3400               	retlw	0
  8372  3F1A  3400               	retlw	0
  8373  3F1B  3400               	retlw	0
  8374  3F1C  3400               	retlw	0
  8375  3F1D  3400               	retlw	0
  8376  3F1E  3400               	retlw	0
  8377  3F1F  3400               	retlw	0
  8378  3F20  3400               	retlw	0
  8379  3F21  3400               	retlw	0
  8380  3F22  3400               	retlw	0
  8381  3F23  3400               	retlw	0
  8382  3F24  3400               	retlw	0
  8383  3F25  3400               	retlw	0
  8384  3F26  3400               	retlw	0
  8385  3F27  3400               	retlw	0
  8386  3F28  3400               	retlw	0
  8387  3F29  3400               	retlw	0
  8388  3F2A  3400               	retlw	0
  8389  3F2B  3400               	retlw	0
  8390  3F2C  3400               	retlw	0
  8391  3F2D  3400               	retlw	0
  8392  3F2E  3400               	retlw	0
  8393  3F2F  3400               	retlw	0
  8394  3F30  3400               	retlw	0
  8395  3F31  3400               	retlw	0
  8396  3F32  3400               	retlw	0
  8397  3F33  3400               	retlw	0
  8398  3F34  3400               	retlw	0
  8399  3F35  3400               	retlw	0
  8400  3F36  3400               	retlw	0
  8401  3F37  3400               	retlw	0
  8402  3F38  3400               	retlw	0
  8403  3F39  3400               	retlw	0
  8404  3F3A  3400               	retlw	0
  8405  3F3B  3400               	retlw	0
  8406  3F3C  3400               	retlw	0
  8407  3F3D  3400               	retlw	0
  8408  3F3E  3400               	retlw	0
  8409  3F3F  3400               	retlw	0
  8410  3F40  3400               	retlw	0
  8411  3F41  3400               	retlw	0
  8412  3F42  3400               	retlw	0
  8413  3F43  3400               	retlw	0
  8414  3F44  3400               	retlw	0
  8415  3F45  3400               	retlw	0
  8416  3F46  3400               	retlw	0
  8417  3F47  3400               	retlw	0
  8418  3F48                     __end_of_mainSystemData:	
  8419  000E                     _PORTCbits	set	14
  8420  000F                     _PORTDbits	set	15
  8421  000D                     _PORTB	set	13
  8422  0015                     _TMR0	set	21
  8423  000B                     _INTCONbits	set	11
  8424  0019                     _T1GCONbits	set	25
  8425  0018                     _T1CONbits	set	24
  8426  0011                     _PIR1bits	set	17
  8427  0016                     _TMR1L	set	22
  8428  0017                     _TMR1H	set	23
  8429  0019                     _T1GCON	set	25
  8430  0018                     _T1CON	set	24
  8431  008E                     _TRISCbits	set	142
  8432  008D                     _TRISBbits	set	141
  8433  008F                     _TRISDbits	set	143
  8434  008C                     _TRISAbits	set	140
  8435  0095                     _OPTION_REG	set	149
  8436  0091                     _PIE1bits	set	145
  8437  0095                     _OPTION_REGbits	set	149
  8438  008F                     _TRISD	set	143
  8439  008E                     _TRISC	set	142
  8440  008D                     _TRISB	set	141
  8441  008C                     _TRISA	set	140
  8442  0090                     _TRISE	set	144
  8443  0097                     _WDTCON	set	151
  8444  0098                     _OSCTUNE	set	152
  8445  0099                     _OSCCON	set	153
  8446  010E                     _LATCbits	set	270
  8447  010D                     _LATBbits	set	269
  8448  010F                     _LATDbits	set	271
  8449  010C                     _LATAbits	set	268
  8450  011D                     _APFCON	set	285
  8451  010E                     _LATC	set	270
  8452  010D                     _LATB	set	269
  8453  010C                     _LATA	set	268
  8454  010F                     _LATD	set	271
  8455  0110                     _LATE	set	272
  8456  018C                     _ANSELAbits	set	396
  8457  0199                     _RC1REG	set	409
  8458  019D                     _RC1STAbits	set	413
  8459  019A                     _TX1REG	set	410
  8460  019C                     _SP1BRGH	set	412
  8461  019B                     _SP1BRGL	set	411
  8462  019E                     _TX1STA	set	414
  8463  019D                     _RC1STA	set	413
  8464  019F                     _BAUD1CON	set	415
  8465  0196                     _EECON2	set	406
  8466  0193                     _EEDATL	set	403
  8467  0194                     _EEDATH	set	404
  8468  0195                     _EECON1bits	set	405
  8469  0192                     _EEADRH	set	402
  8470  0191                     _EEADRL	set	401
  8471  018C                     _ANSELA	set	396
  8472  0190                     _ANSELE	set	400
  8473  020D                     _WPUB	set	525
  8474  030C                     _TRISFbits	set	780
  8475  030D                     _TRISG	set	781
  8476  030C                     _TRISF	set	780
  8477  038C                     _LATFbits	set	908
  8478  038D                     _LATG	set	909
  8479  038C                     _LATF	set	908
  8480  040C                     _ANSELFbits	set	1036
  8481  040C                     _ANSELF	set	1036
  8482  040D                     _ANSELG	set	1037
  8483  048D                     _WPUG	set	1165
  8484  0791                     _LCDCON	set	1937
  8485  0793                     _LCDREF	set	1939
  8486  0795                     _LCDRL	set	1941
  8487  079D                     _LCDSE5	set	1949
  8488  079C                     _LCDSE4	set	1948
  8489  079B                     _LCDSE3	set	1947
  8490  079A                     _LCDSE2	set	1946
  8491  0799                     _LCDSE1	set	1945
  8492  0798                     _LCDSE0	set	1944
  8493  0792                     _LCDPSbits	set	1938
  8494  07A0                     _LCDDATA0	set	1952
  8495                           
  8496                           	psect	cinit
  8497  0039                     start_initialization:	
  8498  0039                     __initialization:		;BIGRAM
  8499                           
  8500                           ; Initialize objects allocated to BANK2
  8501  0039  0022               	movlb	2	; select bank2
  8502  003A  319D  2554  3180   	fcall	__pidataBANK2	;fetch initializer
  8503  003D  00EC               	movwf	__pdataBANK2& (0+127)
  8504  003E  319D  2555  3180   	fcall	__pidataBANK2+1	;fetch initializer
  8505  0041  00ED               	movwf	(__pdataBANK2+1)& (0+127)
  8506  0042  319D  2556  3180   	fcall	__pidataBANK2+2	;fetch initializer
  8507  0045  00EE               	movwf	(__pdataBANK2+2)& (0+127)
  8508  0046  319D  2557  3180   	fcall	__pidataBANK2+3	;fetch initializer
  8509  0049  00EF               	movwf	(__pdataBANK2+3)& (0+127)
  8510                           
  8511                           ; Initialize objects allocated to BANK3
  8512  004A  306E               	movlw	low __pidataBANK3
  8513  004B  0084               	movwf	4
  8514  004C  309D               	movlw	(high __pidataBANK3)| (0+128)
  8515  004D  0085               	movwf	5
  8516  004E  0023               	movlb	3	; select bank3
  8517  004F  0012               	moviw fsr0++
  8518  0050  00D6               	movwf	__pdataBANK3& (0+127)
  8519  0051  0012               	moviw fsr0++
  8520  0052  00D7               	movwf	(__pdataBANK3+1)& (0+127)
  8521  0053  0012               	moviw fsr0++
  8522  0054  00D8               	movwf	(__pdataBANK3+2)& (0+127)
  8523  0055  0012               	moviw fsr0++
  8524  0056  00D9               	movwf	(__pdataBANK3+3)& (0+127)
  8525  0057  0012               	moviw fsr0++
  8526  0058  00DA               	movwf	(__pdataBANK3+4)& (0+127)
  8527  0059  0012               	moviw fsr0++
  8528  005A  00DB               	movwf	(__pdataBANK3+5)& (0+127)
  8529                           
  8530                           ; Clear objects allocated to BIGRAM
  8531  005B  3070               	movlw	low (0+9072)
  8532  005C  0084               	movwf	4
  8533  005D  3023               	movlw	high (0+9072)
  8534  005E  0085               	movwf	5
  8535  005F  3080               	movlw	128
  8536  0060  00FE               	movwf	btemp
  8537  0061  3000               	movlw	0
  8538  0062  00FF               	movwf	btemp+1
  8539  0063  319D  25B0  3180   	fcall	clear_ram0
  8540                           
  8541                           ; Clear objects allocated to COMMON
  8542  0066  01F8               	clrf	__pbssCOMMON& (0+127)
  8543  0067  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  8544  0068  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  8545                           
  8546                           ; Clear objects allocated to BANK1
  8547  0069  30D7               	movlw	low __pbssBANK1
  8548  006A  0084               	movwf	4
  8549  006B  3000               	movlw	high __pbssBANK1
  8550  006C  0085               	movwf	5
  8551  006D  3019               	movlw	25
  8552  006E  00FE               	movwf	btemp
  8553  006F  3000               	movlw	0
  8554  0070  00FF               	movwf	btemp+1
  8555  0071  319D  25B0  3180   	fcall	clear_ram0
  8556                           
  8557                           ; Clear objects allocated to BANK2
  8558  0074  3020               	movlw	low __pbssBANK2
  8559  0075  0084               	movwf	4
  8560  0076  3001               	movlw	high __pbssBANK2
  8561  0077  0085               	movwf	5
  8562  0078  304C               	movlw	76
  8563  0079  00FE               	movwf	btemp
  8564  007A  3000               	movlw	0
  8565  007B  00FF               	movwf	btemp+1
  8566  007C  319D  25B0  3180   	fcall	clear_ram0
  8567                           
  8568                           ; Clear objects allocated to BANK3
  8569  007F  30A0               	movlw	low __pbssBANK3
  8570  0080  0084               	movwf	4
  8571  0081  3001               	movlw	high __pbssBANK3
  8572  0082  0085               	movwf	5
  8573  0083  3036               	movlw	54
  8574  0084  00FE               	movwf	btemp
  8575  0085  3000               	movlw	0
  8576  0086  00FF               	movwf	btemp+1
  8577  0087  319D  25B0  3180   	fcall	clear_ram0
  8578                           
  8579                           ; Clear objects allocated to BANK4
  8580  008A  3020               	movlw	low __pbssBANK4
  8581  008B  0084               	movwf	4
  8582  008C  3002               	movlw	high __pbssBANK4
  8583  008D  0085               	movwf	5
  8584  008E  3040               	movlw	64
  8585  008F  00FE               	movwf	btemp
  8586  0090  3000               	movlw	0
  8587  0091  00FF               	movwf	btemp+1
  8588  0092  319D  25B0         	fcall	clear_ram0
  8589  0094                     end_of_initialization:	
  8590                           ;End of C runtime variable initialization code
  8591                           
  8592  0094                     __end_of__initialization:	
  8593  0094  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  8594  0095  0020               	movlb	0
  8595  0096  3187  2F0F         	ljmp	_main	;jump to C main() function
  8596                           
  8597                           	psect	bssCOMMON
  8598  0078                     __pbssCOMMON:	
  8599  0078                     _bkupMenu:	
  8600  0078                     	ds	1
  8601  0079                     ___t16:	
  8602  0079                     	ds	2
  8603                           
  8604                           	psect	bssBANK1
  8605  00D7                     __pbssBANK1:	
  8606  00D7                     _fl_t32:	
  8607  00D7                     	ds	4
  8608  00DB                     ___q15:	
  8609  00DB                     	ds	2
  8610  00DD                     _rtVolume_m3:	
  8611  00DD                     	ds	2
  8612  00DF                     _timer1ReloadVal:	
  8613  00DF                     	ds	2
  8614  00E1                     _valveStatus:	
  8615  00E1                     	ds	1
  8616  00E2                     ___t8:	
  8617  00E2                     	ds	1
  8618  00E3                     _deviceStatus:	
  8619  00E3                     	ds	1
  8620  00E4                     _KeyValue:	
  8621  00E4                     	ds	1
  8622  00E5                     _menu:	
  8623  00E5                     	ds	1
  8624  00E6                     _calibLocation:	
  8625  00E6                     	ds	1
  8626  00E7                     _timer0ReloadVal:	
  8627  00E7                     	ds	1
  8628  00E8                     _rtBalanceMoney:	
  8629  00E8                     	ds	4
  8630  00EC                     ___q31:	
  8631  00EC                     	ds	4
  8632                           
  8633                           	psect	bssBANK2
  8634  0120                     __pbssBANK2:	
  8635  0120                     ___t32:	
  8636  0120                     	ds	4
  8637  0124                     _tmTemp16:	
  8638  0124                     	ds	2
  8639  0126                     _adcvalue:	
  8640  0126                     	ds	2
  8641  0128                     _fl_t16:	
  8642  0128                     	ds	2
  8643  012A                     _adcSamplingTimer:	
  8644  012A                     	ds	2
  8645  012C                     _rtVolume_L:	
  8646  012C                     	ds	2
  8647  012E                     _adcAverageValue:	
  8648  012E                     	ds	2
  8649  0130                     _password:	
  8650  0130                     	ds	2
  8651  0132                     _flow:	
  8652  0132                     	ds	2
  8653  0134                     _uart1ReceivedCount:	
  8654  0134                     	ds	2
  8655  0136                     _TMR0_InterruptHandler:	
  8656  0136                     	ds	2
  8657  0138                     _pcdPwrOn:	
  8658  0138                     	ds	1
  8659  0139                     _valveTimer:	
  8660  0139                     	ds	1
  8661  013A                     _piccResult:	
  8662  013A                     	ds	1
  8663  013B                     _offReason:	
  8664  013B                     	ds	1
  8665  013C                     _warningStatus:	
  8666  013C                     	ds	1
  8667  013D                     _smallFlowNotCare:	
  8668  013D                     	ds	1
  8669  013E                     _fl_t8:	
  8670  013E                     	ds	1
  8671  013F                     _flowCalibrationLocation:	
  8672  013F                     	ds	1
  8673  0140                     ___q7:	
  8674  0140                     	ds	1
  8675  0141                     _CardError:	
  8676  0141                     	ds	1
  8677  0142                     _uart1ReceivedTimer:	
  8678  0142                     	ds	1
  8679  0143                     _Event:	
  8680  0143                     	ds	1
  8681  0144                     _systemTickerSec:	
  8682  0144                     	ds	1
  8683  0145                     _flashOpStr:	
  8684  0145                     	ds	21
  8685  015A                     _lcdBuf:	
  8686  015A                     	ds	9
  8687  0163                     _uiAdjbuf:	
  8688  0163                     	ds	8
  8689  016B                     _rdLen:	
  8690  016B                     	ds	1
  8691                           
  8692                           	psect	dataBANK2
  8693  016C                     __pdataBANK2:	
  8694  016C                     _pLcdReg:	
  8695  016C                     	ds	2
  8696  016E                     _flowCalibrationPointSingle:	
  8697  016E                     	ds	1
  8698  016F                     _noKeyEventTimeOut:	
  8699  016F                     	ds	1
  8700                           
  8701                           	psect	bssBANK3
  8702  01A0                     __pbssBANK3:	
  8703  01A0                     _adcSamplingBuffer:	
  8704  01A0                     	ds	8
  8705  01A8                     _findCardTimer:	
  8706  01A8                     	ds	2
  8707  01AA                     _uart1ReceivedTimeout:	
  8708  01AA                     	ds	2
  8709  01AC                     _globlTickerms:	
  8710  01AC                     	ds	2
  8711  01AE                     _systemTikerms:	
  8712  01AE                     	ds	2
  8713  01B0                     _TMR1_InterruptHandler:	
  8714  01B0                     	ds	2
  8715  01B2                     _pLCD:	
  8716  01B2                     	ds	24
  8717  01CA                     _PiccUid:	
  8718  01CA                     	ds	12
  8719                           
  8720                           	psect	dataBANK3
  8721  01D6                     __pdataBANK3:	
  8722  01D6                     _userKeyB:	
  8723  01D6                     	ds	6
  8724                           
  8725                           	psect	bssBANK4
  8726  0220                     __pbssBANK4:	
  8727  0220                     _flashBuffer:	
  8728  0220                     	ds	64
  8729                           
  8730                           	psect	clrtext
  8731  1DB0                     clear_ram0:	
  8732                           ;	Called with FSR0 containing the base address, and
  8733                           ;	btemp/btemp+1 has the size to clear
  8734                           
  8735  1DB0  0064               	clrwdt	;clear the watchdog before getting into this loop
  8736  1DB1                     clrloop0:	
  8737  1DB1  0180               	clrf	0	;clear RAM location pointed to by FSR
  8738  1DB2  3101               	addfsr 0,1
  8739  1DB3  3001               	movlw	1
  8740  1DB4  02FE               	subwf	126,f
  8741  1DB5  3000               	movlw	0
  8742  1DB6  3BFF               	subwfb	127,f
  8743  1DB7  087F               	movf	127,w
  8744  1DB8  047E               	iorwf	126,w
  8745  1DB9  1903               	btfsc	3,2
  8746  1DBA  3400               	retlw	0	;all done for this memory range, return
  8747  1DBB  2DB1               	goto	clrloop0	;have we reached the end yet?
  8748                           
  8749                           	psect	cstackBANK1
  8750  00A0                     __pcstackBANK1:	
  8751  00A0                     mifare_write@blockAddr:	
  8752  00A0                     _picc_select$3171:	
  8753                           ; 1 bytes @ 0x0
  8754                           
  8755                           
  8756                           ; 2 bytes @ 0x0
  8757  00A0                     	ds	1
  8758  00A1                     mifare_write@cmdBuffer:	
  8759                           
  8760                           ; 2 bytes @ 0x1
  8761  00A1                     	ds	1
  8762  00A2                     _picc_select$3174:	
  8763                           
  8764                           ; 2 bytes @ 0x2
  8765  00A2                     	ds	1
  8766  00A3                     mifare_write@result:	
  8767                           
  8768                           ; 1 bytes @ 0x3
  8769  00A3                     	ds	1
  8770  00A4                     _picc_select$3175:	
  8771                           
  8772                           ; 2 bytes @ 0x4
  8773  00A4                     	ds	2
  8774  00A6                     picc_select@uidComplete:	
  8775                           
  8776                           ; 1 bytes @ 0x6
  8777  00A6                     	ds	1
  8778  00A7                     picc_select@selectDone:	
  8779                           
  8780                           ; 1 bytes @ 0x7
  8781  00A7                     	ds	1
  8782  00A8                     picc_select@bufferUsed:	
  8783                           
  8784                           ; 1 bytes @ 0x8
  8785  00A8                     	ds	1
  8786  00A9                     _picc_select$3167:	
  8787                           
  8788                           ; 1 bytes @ 0x9
  8789  00A9                     	ds	1
  8790  00AA                     _picc_select$3168:	
  8791                           
  8792                           ; 1 bytes @ 0xA
  8793  00AA                     	ds	1
  8794  00AB                     picc_select@rxAlign:	
  8795                           
  8796                           ; 1 bytes @ 0xB
  8797  00AB                     	ds	1
  8798  00AC                     picc_select@maxBytes:	
  8799                           
  8800                           ; 1 bytes @ 0xC
  8801  00AC                     	ds	1
  8802  00AD                     picc_select@valueOfCollReg:	
  8803                           
  8804                           ; 1 bytes @ 0xD
  8805  00AD                     	ds	1
  8806  00AE                     picc_select@buffer:	
  8807                           
  8808                           ; 9 bytes @ 0xE
  8809  00AE                     	ds	9
  8810  00B7                     picc_select@collisionPos:	
  8811                           
  8812                           ; 1 bytes @ 0x17
  8813  00B7                     	ds	1
  8814  00B8                     picc_select@useCascadeTag:	
  8815                           
  8816                           ; 1 bytes @ 0x18
  8817  00B8                     	ds	1
  8818  00B9                     picc_select@cascadeLevel:	
  8819                           
  8820                           ; 1 bytes @ 0x19
  8821  00B9                     	ds	1
  8822  00BA                     picc_select@uidIndex:	
  8823                           
  8824                           ; 1 bytes @ 0x1A
  8825  00BA                     	ds	1
  8826  00BB                     picc_select@bytesToCopy:	
  8827                           
  8828                           ; 1 bytes @ 0x1B
  8829  00BB                     	ds	1
  8830  00BC                     picc_select@responseLength:	
  8831                           
  8832                           ; 1 bytes @ 0x1C
  8833  00BC                     	ds	1
  8834  00BD                     picc_select@uid:	
  8835                           
  8836                           ; 1 bytes @ 0x1D
  8837  00BD                     	ds	1
  8838  00BE                     picc_select@responseBuffer:	
  8839                           
  8840                           ; 1 bytes @ 0x1E
  8841  00BE                     	ds	1
  8842  00BF                     picc_select@txLastBits:	
  8843                           
  8844                           ; 1 bytes @ 0x1F
  8845  00BF                     	ds	1
  8846  00C0                     picc_select@result:	
  8847                           
  8848                           ; 1 bytes @ 0x20
  8849  00C0                     	ds	1
  8850  00C1                     picc_select@count:	
  8851                           
  8852                           ; 1 bytes @ 0x21
  8853  00C1                     	ds	1
  8854  00C2                     picc_select@index:	
  8855                           
  8856                           ; 1 bytes @ 0x22
  8857  00C2                     	ds	1
  8858  00C3                     picc_select@currentLevelKnownBits:	
  8859                           
  8860                           ; 1 bytes @ 0x23
  8861  00C3                     	ds	1
  8862  00C4                     ??_rfid_comm_process_fk:	
  8863  00C4                     ??_rfid_comm_process_hs:	
  8864                           ; 1 bytes @ 0x24
  8865                           
  8866                           
  8867                           ; 1 bytes @ 0x24
  8868  00C4                     	ds	7
  8869  00CB                     rfid_comm_process_fk@ret:	
  8870  00CB                     rfid_comm_process_hs@stpIncDec:	
  8871                           ; 1 bytes @ 0x2B
  8872                           
  8873                           
  8874                           ; 2 bytes @ 0x2B
  8875  00CB                     	ds	1
  8876  00CC                     rfid_comm_process_fk@stpIncDec:	
  8877                           
  8878                           ; 2 bytes @ 0x2C
  8879  00CC                     	ds	1
  8880  00CD                     rfid_comm_process_hs@ret:	
  8881                           
  8882                           ; 1 bytes @ 0x2D
  8883  00CD                     	ds	1
  8884  00CE                     rfid_comm_process_fk@i:	
  8885  00CE                     rfid_comm_process_hs@i:	
  8886                           ; 1 bytes @ 0x2E
  8887                           
  8888                           
  8889                           ; 1 bytes @ 0x2E
  8890  00CE                     	ds	1
  8891  00CF                     rfid_comm_process_hs@result:	
  8892  00CF                     rfid_comm_process_fk@stp:	
  8893                           ; 1 bytes @ 0x2F
  8894                           
  8895                           
  8896                           ; 2 bytes @ 0x2F
  8897  00CF                     	ds	2
  8898  00D1                     rfid_comm_process_fk@result:	
  8899                           
  8900                           ; 1 bytes @ 0x31
  8901  00D1                     	ds	1
  8902  00D2                     main@buf:	
  8903                           
  8904                           ; 2 bytes @ 0x32
  8905  00D2                     	ds	2
  8906  00D4                     main@t16:	
  8907                           
  8908                           ; 2 bytes @ 0x34
  8909  00D4                     	ds	2
  8910  00D6                     main@p8:	
  8911                           
  8912                           ; 1 bytes @ 0x36
  8913  00D6                     	ds	1
  8914                           
  8915                           	psect	cstackCOMMON
  8916  0070                     __pcstackCOMMON:	
  8917  0070                     ?_PIN_MANAGER_Initialize:	
  8918  0070                     ?_OSCILLATOR_Initialize:	
  8919                           ; 1 bytes @ 0x0
  8920                           
  8921  0070                     ?_WDT_Initialize:	
  8922                           ; 1 bytes @ 0x0
  8923                           
  8924  0070                     ?_TMR1_Initialize:	
  8925                           ; 1 bytes @ 0x0
  8926                           
  8927  0070                     ?_TMR0_Initialize:	
  8928                           ; 1 bytes @ 0x0
  8929                           
  8930  0070                     ?_EUSART1_Initialize:	
  8931                           ; 1 bytes @ 0x0
  8932                           
  8933  0070                     ?_TMR1_StartTimer:	
  8934                           ; 1 bytes @ 0x0
  8935                           
  8936  0070                     ?_TMR0_ISR:	
  8937                           ; 1 bytes @ 0x0
  8938                           
  8939  0070                     ??_TMR0_ISR:	
  8940                           ; 1 bytes @ 0x0
  8941                           
  8942  0070                     ?_EUSART1_Transmit_ISR:	
  8943                           ; 1 bytes @ 0x0
  8944                           
  8945  0070                     ??_EUSART1_Transmit_ISR:	
  8946                           ; 1 bytes @ 0x0
  8947                           
  8948  0070                     ?_EUSART1_Receive_ISR:	
  8949                           ; 1 bytes @ 0x0
  8950                           
  8951  0070                     ??_EUSART1_Receive_ISR:	
  8952                           ; 1 bytes @ 0x0
  8953                           
  8954  0070                     ?_lcd_disp_all:	
  8955                           ; 1 bytes @ 0x0
  8956                           
  8957  0070                     ?_lcd_disp_refresh:	
  8958                           ; 1 bytes @ 0x0
  8959                           
  8960  0070                     ?_key_scan_call:	
  8961                           ; 1 bytes @ 0x0
  8962                           
  8963  0070                     ?_mfapi_is_new_card_present:	
  8964                           ; 1 bytes @ 0x0
  8965                           
  8966  0070                     ?_picc_halt_a:	
  8967                           ; 1 bytes @ 0x0
  8968                           
  8969  0070                     ?_picc_stop_cryptol:	
  8970                           ; 1 bytes @ 0x0
  8971                           
  8972  0070                     ?_mfrc522_hal_init:	
  8973                           ; 1 bytes @ 0x0
  8974                           
  8975  0070                     ?_mfrc522_bal_read_reg:	
  8976                           ; 1 bytes @ 0x0
  8977                           
  8978  0070                     ?_mfrc522_hal_reset_sf:	
  8979                           ; 1 bytes @ 0x0
  8980                           
  8981  0070                     ?_mfrc522_hal_set_antenna_gain:	
  8982                           ; 1 bytes @ 0x0
  8983                           
  8984  0070                     ?_mfrc522_hal_antenna_on:	
  8985                           ; 1 bytes @ 0x0
  8986                           
  8987  0070                     ?_SYSTEM_Initialize:	
  8988                           ; 1 bytes @ 0x0
  8989                           
  8990  0070                     ?_TMR1_ISR:	
  8991                           ; 1 bytes @ 0x0
  8992                           
  8993  0070                     ??_TMR1_ISR:	
  8994                           ; 1 bytes @ 0x0
  8995                           
  8996  0070                     ?_INTERRUPT_InterruptManager:	
  8997                           ; 1 bytes @ 0x0
  8998                           
  8999  0070                     ?_DATAEE_ReadByte:	
  9000                           ; 1 bytes @ 0x0
  9001                           
  9002  0070                     ?_my_uart1_received_ready:	
  9003                           ; 1 bytes @ 0x0
  9004                           
  9005  0070                     ?_data_api_system_data_get:	
  9006                           ; 1 bytes @ 0x0
  9007                           
  9008  0070                     ?_data_api_calibration_table_data_init:	
  9009                           ; 1 bytes @ 0x0
  9010                           
  9011  0070                     ?_data_api_system_data_init:	
  9012                           ; 1 bytes @ 0x0
  9013                           
  9014  0070                     ?_rfid_comm_process_fk:	
  9015                           ; 1 bytes @ 0x0
  9016                           
  9017  0070                     ?_rfid_comm_process_hs:	
  9018                           ; 1 bytes @ 0x0
  9019                           
  9020  0070                     ?_lcd_disp_code_0:	
  9021                           ; 1 bytes @ 0x0
  9022                           
  9023  0070                     ?_lcd_disp_code_1:	
  9024                           ; 1 bytes @ 0x0
  9025                           
  9026  0070                     ?_lcd_disp_code_2:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0070                     ?_lcd_disp_code_3:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0070                     ?_lcd_disp_code_4:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0070                     ?_lcd_disp_code_5:	
  9036                           ; 1 bytes @ 0x0
  9037                           
  9038  0070                     ?_lcd_disp_code_6:	
  9039                           ; 1 bytes @ 0x0
  9040                           
  9041  0070                     ?_lcd_disp_code_7:	
  9042                           ; 1 bytes @ 0x0
  9043                           
  9044  0070                     ?_lcd_config:	
  9045                           ; 1 bytes @ 0x0
  9046                           
  9047  0070                     ?_lcd_init:	
  9048                           ; 1 bytes @ 0x0
  9049                           
  9050  0070                     ?_led_port_init:	
  9051                           ; 1 bytes @ 0x0
  9052                           
  9053  0070                     ?_other_gpio_port_init:	
  9054                           ; 1 bytes @ 0x0
  9055                           
  9056  0070                     ?_mfapi_pcd_init:	
  9057                           ; 1 bytes @ 0x0
  9058                           
  9059  0070                     ?_mfrc522_bal_write_read_via_spi:	
  9060                           ; 1 bytes @ 0x0
  9061                           
  9062  0070                     ?_mfrc522_hal_get_antenna_gain:	
  9063                           ; 1 bytes @ 0x0
  9064                           
  9065  0070                     ?_m_system_init:	
  9066                           ; 1 bytes @ 0x0
  9067                           
  9068  0070                     ?_m_system_start_self_test:	
  9069                           ; 1 bytes @ 0x0
  9070                           
  9071  0070                     ?_main:	
  9072                           ; 1 bytes @ 0x0
  9073                           
  9074                           
  9075                           ; 1 bytes @ 0x0
  9076  0070                     	ds	1
  9077  0071                     EUSART1_Receive_ISR@t8:	
  9078                           
  9079                           ; 1 bytes @ 0x1
  9080  0071                     	ds	1
  9081  0072                     ??_INTERRUPT_InterruptManager:	
  9082                           
  9083                           ; 1 bytes @ 0x2
  9084  0072                     	ds	1
  9085  0073                     ??_PIN_MANAGER_Initialize:	
  9086  0073                     ??_OSCILLATOR_Initialize:	
  9087                           ; 1 bytes @ 0x3
  9088                           
  9089  0073                     ??_WDT_Initialize:	
  9090                           ; 1 bytes @ 0x3
  9091                           
  9092  0073                     ??_EUSART1_Initialize:	
  9093                           ; 1 bytes @ 0x3
  9094                           
  9095  0073                     ?_TMR1_SetInterruptHandler:	
  9096                           ; 1 bytes @ 0x3
  9097                           
  9098  0073                     ??_TMR1_StartTimer:	
  9099                           ; 1 bytes @ 0x3
  9100                           
  9101  0073                     ?_TMR0_SetInterruptHandler:	
  9102                           ; 1 bytes @ 0x3
  9103                           
  9104  0073                     ?_FLASH_EraseBlock:	
  9105                           ; 1 bytes @ 0x3
  9106                           
  9107  0073                     ??_lcd_disp_all:	
  9108                           ; 1 bytes @ 0x3
  9109                           
  9110  0073                     ?_delay:	
  9111                           ; 1 bytes @ 0x3
  9112                           
  9113  0073                     ?_m_mem_set:	
  9114                           ; 1 bytes @ 0x3
  9115                           
  9116  0073                     ?_set_globle_ticker:	
  9117                           ; 1 bytes @ 0x3
  9118                           
  9119  0073                     ?_m_mem_cpy_len:	
  9120                           ; 1 bytes @ 0x3
  9121                           
  9122  0073                     ?_DATAEE_WriteByte:	
  9123                           ; 1 bytes @ 0x3
  9124                           
  9125  0073                     ??_DATAEE_ReadByte:	
  9126                           ; 1 bytes @ 0x3
  9127                           
  9128  0073                     ??_my_uart1_received_ready:	
  9129                           ; 1 bytes @ 0x3
  9130                           
  9131  0073                     ??_data_api_system_data_get:	
  9132                           ; 1 bytes @ 0x3
  9133                           
  9134  0073                     ?_create_card_key_b:	
  9135                           ; 1 bytes @ 0x3
  9136                           
  9137  0073                     ??_lcd_disp_code_0:	
  9138                           ; 1 bytes @ 0x3
  9139                           
  9140  0073                     ??_lcd_disp_code_1:	
  9141                           ; 1 bytes @ 0x3
  9142                           
  9143  0073                     ??_lcd_disp_code_2:	
  9144                           ; 1 bytes @ 0x3
  9145                           
  9146  0073                     ??_lcd_disp_code_3:	
  9147                           ; 1 bytes @ 0x3
  9148                           
  9149  0073                     ??_lcd_disp_code_4:	
  9150                           ; 1 bytes @ 0x3
  9151                           
  9152  0073                     ??_lcd_disp_code_5:	
  9153                           ; 1 bytes @ 0x3
  9154                           
  9155  0073                     ??_lcd_disp_code_6:	
  9156                           ; 1 bytes @ 0x3
  9157                           
  9158  0073                     ??_lcd_disp_code_7:	
  9159                           ; 1 bytes @ 0x3
  9160                           
  9161  0073                     ??_led_port_init:	
  9162                           ; 1 bytes @ 0x3
  9163                           
  9164  0073                     ??_other_gpio_port_init:	
  9165                           ; 1 bytes @ 0x3
  9166                           
  9167  0073                     ??_mfrc522_bal_write_read_via_spi:	
  9168                           ; 1 bytes @ 0x3
  9169                           
  9170  0073                     ?___bmul:	
  9171                           ; 1 bytes @ 0x3
  9172                           
  9173  0073                     ?_get_globle_ticker:	
  9174                           ; 1 bytes @ 0x3
  9175                           
  9176  0073                     ?_FLASH_ReadWord:	
  9177                           ; 2 bytes @ 0x3
  9178                           
  9179  0073                     ?_crc_sum:	
  9180                           ; 2 bytes @ 0x3
  9181                           
  9182  0073                     ?___wmul:	
  9183                           ; 2 bytes @ 0x3
  9184                           
  9185  0073                     ?___awdiv:	
  9186                           ; 2 bytes @ 0x3
  9187                           
  9188  0073                     DATAEE_WriteByte@bData:	
  9189                           ; 2 bytes @ 0x3
  9190                           
  9191  0073                     DATAEE_ReadByte@bAdd:	
  9192                           ; 1 bytes @ 0x3
  9193                           
  9194  0073                     create_card_key_b@uid:	
  9195                           ; 1 bytes @ 0x3
  9196                           
  9197  0073                     ___bmul@multiplicand:	
  9198                           ; 1 bytes @ 0x3
  9199                           
  9200  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  9201                           ; 1 bytes @ 0x3
  9202                           
  9203  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  9204                           ; 2 bytes @ 0x3
  9205                           
  9206  0073                     FLASH_ReadWord@flashAddr:	
  9207                           ; 2 bytes @ 0x3
  9208                           
  9209  0073                     FLASH_EraseBlock@startAddr:	
  9210                           ; 2 bytes @ 0x3
  9211                           
  9212  0073                     delay@t:	
  9213                           ; 2 bytes @ 0x3
  9214                           
  9215  0073                     m_mem_set@buf:	
  9216                           ; 2 bytes @ 0x3
  9217                           
  9218  0073                     m_mem_cpy_len@d:	
  9219                           ; 2 bytes @ 0x3
  9220                           
  9221  0073                     set_globle_ticker@tk:	
  9222                           ; 2 bytes @ 0x3
  9223                           
  9224  0073                     crc_sum@puchMsg:	
  9225                           ; 2 bytes @ 0x3
  9226                           
  9227  0073                     ___wmul@multiplier:	
  9228                           ; 2 bytes @ 0x3
  9229                           
  9230  0073                     ___awdiv@divisor:	
  9231                           ; 2 bytes @ 0x3
  9232                           
  9233                           
  9234                           ; 2 bytes @ 0x3
  9235  0073                     	ds	1
  9236  0074                     ??_DATAEE_WriteByte:	
  9237  0074                     ?_data_api_read_eeprom:	
  9238                           ; 1 bytes @ 0x4
  9239                           
  9240  0074                     ??___bmul:	
  9241                           ; 1 bytes @ 0x4
  9242                           
  9243  0074                     DATAEE_WriteByte@bAdd:	
  9244                           ; 1 bytes @ 0x4
  9245                           
  9246  0074                     lcd_disp_code_0@code:	
  9247                           ; 1 bytes @ 0x4
  9248                           
  9249  0074                     lcd_disp_code_1@code:	
  9250                           ; 1 bytes @ 0x4
  9251                           
  9252  0074                     lcd_disp_code_2@code:	
  9253                           ; 1 bytes @ 0x4
  9254                           
  9255  0074                     lcd_disp_code_3@code:	
  9256                           ; 1 bytes @ 0x4
  9257                           
  9258  0074                     lcd_disp_code_4@code:	
  9259                           ; 1 bytes @ 0x4
  9260                           
  9261  0074                     lcd_disp_code_5@code:	
  9262                           ; 1 bytes @ 0x4
  9263                           
  9264  0074                     lcd_disp_code_6@code:	
  9265                           ; 1 bytes @ 0x4
  9266                           
  9267  0074                     lcd_disp_code_7@code:	
  9268                           ; 1 bytes @ 0x4
  9269                           
  9270  0074                     mfrc522_bal_write_read_via_spi@x:	
  9271                           ; 1 bytes @ 0x4
  9272                           
  9273  0074                     data_api_read_eeprom@buf:	
  9274                           ; 1 bytes @ 0x4
  9275                           
  9276  0074                     create_card_key_b@cckey:	
  9277                           ; 2 bytes @ 0x4
  9278                           
  9279                           
  9280                           ; 2 bytes @ 0x4
  9281  0074                     	ds	1
  9282  0075                     ??_TMR1_Initialize:	
  9283  0075                     ??_TMR0_Initialize:	
  9284                           ; 1 bytes @ 0x5
  9285                           
  9286  0075                     ??_TMR1_SetInterruptHandler:	
  9287                           ; 1 bytes @ 0x5
  9288                           
  9289  0075                     ??_TMR0_SetInterruptHandler:	
  9290                           ; 1 bytes @ 0x5
  9291                           
  9292  0075                     ??_FLASH_EraseBlock:	
  9293                           ; 1 bytes @ 0x5
  9294                           
  9295  0075                     ??_delay:	
  9296                           ; 1 bytes @ 0x5
  9297                           
  9298  0075                     ??_key_scan_call:	
  9299                           ; 1 bytes @ 0x5
  9300                           
  9301  0075                     ??_set_globle_ticker:	
  9302                           ; 1 bytes @ 0x5
  9303                           
  9304  0075                     ??_get_globle_ticker:	
  9305                           ; 1 bytes @ 0x5
  9306                           
  9307  0075                     ??_FLASH_ReadWord:	
  9308                           ; 1 bytes @ 0x5
  9309                           
  9310  0075                     ?_lcd_disp_code:	
  9311                           ; 1 bytes @ 0x5
  9312                           
  9313  0075                     FLASH_ReadWord@GIEBitValue:	
  9314                           ; 1 bytes @ 0x5
  9315                           
  9316  0075                     FLASH_EraseBlock@GIEBitValue:	
  9317                           ; 1 bytes @ 0x5
  9318                           
  9319  0075                     DATAEE_WriteByte@GIEBitValue:	
  9320                           ; 1 bytes @ 0x5
  9321                           
  9322  0075                     m_mem_set@x:	
  9323                           ; 1 bytes @ 0x5
  9324                           
  9325  0075                     lcd_disp_code@loc:	
  9326                           ; 1 bytes @ 0x5
  9327                           
  9328  0075                     mfrc522_bal_write_read_via_spi@rb:	
  9329                           ; 1 bytes @ 0x5
  9330                           
  9331  0075                     ___bmul@product:	
  9332                           ; 1 bytes @ 0x5
  9333                           
  9334  0075                     m_mem_cpy_len@s:	
  9335                           ; 1 bytes @ 0x5
  9336                           
  9337  0075                     get_globle_ticker@ret:	
  9338                           ; 2 bytes @ 0x5
  9339                           
  9340  0075                     crc_sum@usDataLen:	
  9341                           ; 2 bytes @ 0x5
  9342                           
  9343  0075                     ___wmul@multiplicand:	
  9344                           ; 2 bytes @ 0x5
  9345                           
  9346  0075                     ___awdiv@dividend:	
  9347                           ; 2 bytes @ 0x5
  9348                           
  9349                           
  9350                           ; 2 bytes @ 0x5
  9351  0075                     	ds	1
  9352  0076                     ??_SYSTEM_Initialize:	
  9353  0076                     ??_m_flash_erase:	
  9354                           ; 1 bytes @ 0x6
  9355                           
  9356  0076                     ??_m_flash_copy:	
  9357                           ; 1 bytes @ 0x6
  9358                           
  9359  0076                     ??_data_api_write_eeprom:	
  9360                           ; 1 bytes @ 0x6
  9361                           
  9362  0076                     ??_create_card_key_b:	
  9363                           ; 1 bytes @ 0x6
  9364                           
  9365  0076                     ??_lcd_disp_code:	
  9366                           ; 1 bytes @ 0x6
  9367                           
  9368  0076                     data_api_read_eeprom@addr:	
  9369                           ; 1 bytes @ 0x6
  9370                           
  9371  0076                     m_mem_set@len:	
  9372                           ; 1 bytes @ 0x6
  9373                           
  9374  0076                     lcd_disp_code@code:	
  9375                           ; 1 bytes @ 0x6
  9376                           
  9377  0076                     mfrc522_bal_write_read_via_spi@i:	
  9378                           ; 1 bytes @ 0x6
  9379                           
  9380  0076                     ___bmul@multiplier:	
  9381                           ; 1 bytes @ 0x6
  9382                           
  9383                           
  9384                           ; 1 bytes @ 0x6
  9385  0076                     	ds	1
  9386  0077                     ??_m_mem_set:	
  9387  0077                     ??_mfrc522_bal_read_reg:	
  9388                           ; 1 bytes @ 0x7
  9389                           
  9390  0077                     ??_ui_key_waite_up:	
  9391                           ; 1 bytes @ 0x7
  9392                           
  9393  0077                     ??_lcd_config:	
  9394                           ; 1 bytes @ 0x7
  9395                           
  9396  0077                     ??_lcd_init:	
  9397                           ; 1 bytes @ 0x7
  9398                           
  9399  0077                     ?_mfrc522_bal_write_reg:	
  9400                           ; 1 bytes @ 0x7
  9401                           
  9402  0077                     ??_mfrc522_bal_write_reg_len:	
  9403                           ; 1 bytes @ 0x7
  9404                           
  9405  0077                     ??_mfrc522_bal_read_fifo_len_ex:	
  9406                           ; 1 bytes @ 0x7
  9407                           
  9408  0077                     ??_m_system_init:	
  9409                           ; 1 bytes @ 0x7
  9410                           
  9411  0077                     ??_m_system_start_self_test:	
  9412                           ; 1 bytes @ 0x7
  9413                           
  9414  0077                     ??___wmul:	
  9415                           ; 1 bytes @ 0x7
  9416                           
  9417  0077                     ??___awdiv:	
  9418                           ; 1 bytes @ 0x7
  9419                           
  9420  0077                     data_api_write_eeprom@i:	
  9421                           ; 1 bytes @ 0x7
  9422                           
  9423  0077                     data_api_read_eeprom@len:	
  9424                           ; 1 bytes @ 0x7
  9425                           
  9426  0077                     m_mem_cpy_len@len:	
  9427                           ; 1 bytes @ 0x7
  9428                           
  9429  0077                     mfrc522_bal_write_reg@x:	
  9430                           ; 1 bytes @ 0x7
  9431                           
  9432                           
  9433                           ; 1 bytes @ 0x7
  9434  0077                     	ds	1
  9435  0078                     ??_mfrc522_bal_write_reg:	
  9436                           
  9437                           	psect	cstackBANK0
  9438  0020                     __pcstackBANK0:	
  9439                           ; 1 bytes @ 0x8
  9440                           
  9441  0020                     ?_FLASH_WriteBlock:	
  9442  0020                     ??_m_mem_cpy_len:	
  9443                           ; 1 bytes @ 0x0
  9444                           
  9445  0020                     ?_m_flash_erase:	
  9446                           ; 1 bytes @ 0x0
  9447                           
  9448  0020                     ?_data_api_write_eeprom:	
  9449                           ; 1 bytes @ 0x0
  9450                           
  9451  0020                     ??_data_api_read_eeprom:	
  9452                           ; 1 bytes @ 0x0
  9453                           
  9454  0020                     ?_mfrc522_bal_write_reg_len:	
  9455                           ; 1 bytes @ 0x0
  9456                           
  9457  0020                     ?_mfrc522_bal_read_fifo_len_ex:	
  9458                           ; 1 bytes @ 0x0
  9459                           
  9460  0020                     ??_crc_sum:	
  9461                           ; 1 bytes @ 0x0
  9462                           
  9463  0020                     ?_ui_key_waite_up:	
  9464                           ; 1 bytes @ 0x0
  9465                           
  9466  0020                     create_card_key_b@keyb:	
  9467                           ; 2 bytes @ 0x0
  9468                           
  9469  0020                     lcd_disp_all@x:	
  9470                           ; 1 bytes @ 0x0
  9471                           
  9472  0020                     mfrc522_bal_write_reg@reg:	
  9473                           ; 1 bytes @ 0x0
  9474                           
  9475  0020                     mfrc522_bal_read_reg@reg:	
  9476                           ; 1 bytes @ 0x0
  9477                           
  9478  0020                     ___awdiv@counter:	
  9479                           ; 1 bytes @ 0x0
  9480                           
  9481  0020                     FLASH_WriteBlock@writeAddr:	
  9482                           ; 1 bytes @ 0x0
  9483                           
  9484  0020                     m_flash_erase@addr:	
  9485                           ; 2 bytes @ 0x0
  9486                           
  9487  0020                     data_api_write_eeprom@buf:	
  9488                           ; 2 bytes @ 0x0
  9489                           
  9490  0020                     mfrc522_bal_write_reg_len@buf:	
  9491                           ; 2 bytes @ 0x0
  9492                           
  9493  0020                     mfrc522_bal_read_fifo_len_ex@buf:	
  9494                           ; 2 bytes @ 0x0
  9495                           
  9496  0020                     ___wmul@product:	
  9497                           ; 2 bytes @ 0x0
  9498                           
  9499                           
  9500                           ; 2 bytes @ 0x0
  9501  0020                     	ds	1
  9502  0021                     ??_lcd_disp_refresh:	
  9503  0021                     data_api_read_eeprom@i:	
  9504                           ; 1 bytes @ 0x1
  9505                           
  9506  0021                     create_card_key_b@i:	
  9507                           ; 1 bytes @ 0x1
  9508                           
  9509  0021                     lcd_disp_all@i:	
  9510                           ; 1 bytes @ 0x1
  9511                           
  9512  0021                     mfrc522_bal_read_reg@x:	
  9513                           ; 1 bytes @ 0x1
  9514                           
  9515  0021                     ___awdiv@sign:	
  9516                           ; 1 bytes @ 0x1
  9517                           
  9518                           
  9519                           ; 1 bytes @ 0x1
  9520  0021                     	ds	1
  9521  0022                     ?_lcd_disp_str:	
  9522  0022                     ??_mfrc522_hal_reset_sf:	
  9523                           ; 1 bytes @ 0x2
  9524                           
  9525  0022                     ??_mfrc522_hal_antenna_on:	
  9526                           ; 1 bytes @ 0x2
  9527                           
  9528  0022                     ?_mfrc522_bal_set_bit_reg:	
  9529                           ; 1 bytes @ 0x2
  9530                           
  9531  0022                     ?_mfrc522_bal_clr_bit_reg:	
  9532                           ; 1 bytes @ 0x2
  9533                           
  9534  0022                     ??_mfrc522_hal_get_antenna_gain:	
  9535                           ; 1 bytes @ 0x2
  9536                           
  9537  0022                     FLASH_WriteBlock@flashWordArray:	
  9538                           ; 1 bytes @ 0x2
  9539                           
  9540  0022                     m_flash_erase@len:	
  9541                           ; 1 bytes @ 0x2
  9542                           
  9543  0022                     data_api_write_eeprom@addr:	
  9544                           ; 1 bytes @ 0x2
  9545                           
  9546  0022                     mfrc522_bal_write_reg_len@len:	
  9547                           ; 1 bytes @ 0x2
  9548                           
  9549  0022                     mfrc522_bal_read_fifo_len_ex@len:	
  9550                           ; 1 bytes @ 0x2
  9551                           
  9552  0022                     mfrc522_bal_set_bit_reg@bits:	
  9553                           ; 1 bytes @ 0x2
  9554                           
  9555  0022                     mfrc522_bal_clr_bit_reg@bits:	
  9556                           ; 1 bytes @ 0x2
  9557                           
  9558  0022                     ui_key_waite_up@now:	
  9559                           ; 1 bytes @ 0x2
  9560                           
  9561  0022                     lcd_disp_str@str:	
  9562                           ; 2 bytes @ 0x2
  9563                           
  9564  0022                     ___awdiv@quotient:	
  9565                           ; 2 bytes @ 0x2
  9566                           
  9567                           
  9568                           ; 2 bytes @ 0x2
  9569  0022                     	ds	1
  9570  0023                     ??_FLASH_WriteBlock:	
  9571  0023                     ??_mfrc522_bal_set_bit_reg:	
  9572                           ; 1 bytes @ 0x3
  9573                           
  9574  0023                     ??_mfrc522_bal_clr_bit_reg:	
  9575                           ; 1 bytes @ 0x3
  9576                           
  9577  0023                     data_api_write_eeprom@len:	
  9578                           ; 1 bytes @ 0x3
  9579                           
  9580  0023                     mfrc522_bal_write_reg_len@reg:	
  9581                           ; 1 bytes @ 0x3
  9582                           
  9583  0023                     mfrc522_bal_read_fifo_len_ex@rx_align:	
  9584                           ; 1 bytes @ 0x3
  9585                           
  9586  0023                     mfrc522_hal_antenna_on@t8:	
  9587                           ; 1 bytes @ 0x3
  9588                           
  9589  0023                     mfrc522_hal_get_antenna_gain@ret:	
  9590                           ; 1 bytes @ 0x3
  9591                           
  9592                           
  9593                           ; 1 bytes @ 0x3
  9594  0023                     	ds	1
  9595  0024                     ??_lcd_disp_str:	
  9596  0024                     mfrc522_bal_write_reg_len@i:	
  9597                           ; 1 bytes @ 0x4
  9598                           
  9599  0024                     mfrc522_bal_read_fifo_len_ex@reg:	
  9600                           ; 1 bytes @ 0x4
  9601                           
  9602  0024                     mfrc522_bal_set_bit_reg@tmp:	
  9603                           ; 1 bytes @ 0x4
  9604                           
  9605  0024                     mfrc522_bal_clr_bit_reg@tmp:	
  9606                           ; 1 bytes @ 0x4
  9607                           
  9608                           
  9609                           ; 1 bytes @ 0x4
  9610  0024                     	ds	1
  9611  0025                     lcd_disp_str@loc:	
  9612  0025                     mfrc522_bal_read_fifo_len_ex@adr:	
  9613                           ; 1 bytes @ 0x5
  9614                           
  9615  0025                     mfrc522_bal_set_bit_reg@reg:	
  9616                           ; 1 bytes @ 0x5
  9617                           
  9618  0025                     mfrc522_bal_clr_bit_reg@reg:	
  9619                           ; 1 bytes @ 0x5
  9620                           
  9621  0025                     crc_sum@len:	
  9622                           ; 1 bytes @ 0x5
  9623                           
  9624                           
  9625                           ; 2 bytes @ 0x5
  9626  0025                     	ds	1
  9627  0026                     ??_picc_stop_cryptol:	
  9628  0026                     ??_mfrc522_hal_set_antenna_gain:	
  9629                           ; 1 bytes @ 0x6
  9630                           
  9631  0026                     ?_mfrc522_hal_calculate_crc:	
  9632                           ; 1 bytes @ 0x6
  9633                           
  9634  0026                     lcd_disp_str@index:	
  9635                           ; 1 bytes @ 0x6
  9636                           
  9637  0026                     mfrc522_bal_read_fifo_len_ex@i:	
  9638                           ; 1 bytes @ 0x6
  9639                           
  9640  0026                     FLASH_WriteBlock@blockStartAddr:	
  9641                           ; 1 bytes @ 0x6
  9642                           
  9643  0026                     mfrc522_hal_calculate_crc@data:	
  9644                           ; 2 bytes @ 0x6
  9645                           
  9646                           
  9647                           ; 2 bytes @ 0x6
  9648  0026                     	ds	1
  9649  0027                     mfrc522_hal_set_antenna_gain@gain:	
  9650  0027                     crc_sum@uIndex:	
  9651                           ; 1 bytes @ 0x7
  9652                           
  9653                           
  9654                           ; 2 bytes @ 0x7
  9655  0027                     	ds	1
  9656  0028                     ??_mfrc522_hal_init:	
  9657  0028                     FLASH_WriteBlock@GIEBitValue:	
  9658                           ; 1 bytes @ 0x8
  9659                           
  9660  0028                     mfrc522_hal_calculate_crc@length:	
  9661                           ; 1 bytes @ 0x8
  9662                           
  9663                           
  9664                           ; 1 bytes @ 0x8
  9665  0028                     	ds	1
  9666  0029                     ??_mfapi_pcd_init:	
  9667  0029                     FLASH_WriteBlock@i:	
  9668                           ; 1 bytes @ 0x9
  9669                           
  9670  0029                     crc_sum@uchCRCHi:	
  9671                           ; 1 bytes @ 0x9
  9672                           
  9673  0029                     mfrc522_hal_calculate_crc@result:	
  9674                           ; 1 bytes @ 0x9
  9675                           
  9676                           
  9677                           ; 2 bytes @ 0x9
  9678  0029                     	ds	1
  9679  002A                     ?_m_flash_copy:	
  9680  002A                     mfapi_pcd_init@v:	
  9681                           ; 1 bytes @ 0xA
  9682                           
  9683  002A                     crc_sum@uchCRCLo:	
  9684                           ; 1 bytes @ 0xA
  9685                           
  9686  002A                     m_flash_copy@addr:	
  9687                           ; 1 bytes @ 0xA
  9688                           
  9689                           
  9690                           ; 2 bytes @ 0xA
  9691  002A                     	ds	1
  9692  002B                     ?_crc_append:	
  9693  002B                     ?_crc_verify:	
  9694                           ; 1 bytes @ 0xB
  9695                           
  9696  002B                     ??_mfrc522_hal_calculate_crc:	
  9697                           ; 1 bytes @ 0xB
  9698                           
  9699  002B                     crc_verify@message:	
  9700                           ; 1 bytes @ 0xB
  9701                           
  9702  002B                     crc_append@message:	
  9703                           ; 2 bytes @ 0xB
  9704                           
  9705                           
  9706                           ; 2 bytes @ 0xB
  9707  002B                     	ds	1
  9708  002C                     m_flash_copy@buf:	
  9709                           
  9710                           ; 2 bytes @ 0xC
  9711  002C                     	ds	1
  9712  002D                     crc_verify@n:	
  9713  002D                     crc_append@n:	
  9714                           ; 2 bytes @ 0xD
  9715                           
  9716                           
  9717                           ; 2 bytes @ 0xD
  9718  002D                     	ds	1
  9719  002E                     m_flash_copy@len:	
  9720  002E                     mfrc522_hal_calculate_crc@t8:	
  9721                           ; 1 bytes @ 0xE
  9722                           
  9723                           
  9724                           ; 1 bytes @ 0xE
  9725  002E                     	ds	1
  9726  002F                     ??_crc_append:	
  9727  002F                     ??_crc_verify:	
  9728                           ; 1 bytes @ 0xF
  9729                           
  9730  002F                     m_flash_copy@offset:	
  9731                           ; 1 bytes @ 0xF
  9732                           
  9733  002F                     mfrc522_hal_calculate_crc@i:	
  9734                           ; 1 bytes @ 0xF
  9735                           
  9736                           
  9737                           ; 2 bytes @ 0xF
  9738  002F                     	ds	1
  9739  0030                     m_flash_copy@wlen:	
  9740                           
  9741                           ; 1 bytes @ 0x10
  9742  0030                     	ds	1
  9743  0031                     ?_pcd_comm_with_picc:	
  9744  0031                     pcd_comm_with_picc@waitIRQ:	
  9745                           ; 1 bytes @ 0x11
  9746                           
  9747  0031                     m_flash_copy@startAddr:	
  9748                           ; 1 bytes @ 0x11
  9749                           
  9750                           
  9751                           ; 2 bytes @ 0x11
  9752  0031                     	ds	1
  9753  0032                     pcd_comm_with_picc@sbuf:	
  9754  0032                     crc_verify@crccal:	
  9755                           ; 2 bytes @ 0x12
  9756                           
  9757                           
  9758                           ; 2 bytes @ 0x12
  9759  0032                     	ds	1
  9760  0033                     m_flash_copy@i:	
  9761                           
  9762                           ; 1 bytes @ 0x13
  9763  0033                     	ds	1
  9764  0034                     pcd_comm_with_picc@slen:	
  9765  0034                     crc_verify@expected:	
  9766                           ; 1 bytes @ 0x14
  9767                           
  9768  0034                     crc_append@crc:	
  9769                           ; 2 bytes @ 0x14
  9770                           
  9771                           
  9772                           ; 2 bytes @ 0x14
  9773  0034                     	ds	1
  9774  0035                     pcd_comm_with_picc@rbuf:	
  9775                           
  9776                           ; 2 bytes @ 0x15
  9777  0035                     	ds	1
  9778  0036                     ??_data_api_calibration_table_data_init:	
  9779  0036                     ??_data_api_system_data_init:	
  9780                           ; 1 bytes @ 0x16
  9781                           
  9782                           
  9783                           ; 1 bytes @ 0x16
  9784  0036                     	ds	1
  9785  0037                     data_api_system_data_init@sta:	
  9786  0037                     pcd_comm_with_picc@rlen:	
  9787                           ; 1 bytes @ 0x17
  9788                           
  9789                           
  9790                           ; 2 bytes @ 0x17
  9791  0037                     	ds	2
  9792  0039                     pcd_comm_with_picc@validBits:	
  9793                           
  9794                           ; 1 bytes @ 0x19
  9795  0039                     	ds	1
  9796  003A                     pcd_comm_with_picc@rxAlign:	
  9797                           
  9798                           ; 1 bytes @ 0x1A
  9799  003A                     	ds	1
  9800  003B                     pcd_comm_with_picc@checkCRC:	
  9801                           
  9802                           ; 1 bytes @ 0x1B
  9803  003B                     	ds	1
  9804  003C                     ??_pcd_comm_with_picc:	
  9805  003C                     data_api_calibration_table_data_init@sta:	
  9806                           ; 1 bytes @ 0x1C
  9807                           
  9808                           
  9809                           ; 1 bytes @ 0x1C
  9810  003C                     	ds	1
  9811  003D                     data_api_calibration_table_data_init@stp:	
  9812                           
  9813                           ; 2 bytes @ 0x1D
  9814  003D                     	ds	1
  9815  003E                     pcd_comm_with_picc@txLastBits:	
  9816                           
  9817                           ; 1 bytes @ 0x1E
  9818  003E                     	ds	1
  9819  003F                     data_api_calibration_table_data_init@i:	
  9820  003F                     pcd_comm_with_picc@bitFraming:	
  9821                           ; 1 bytes @ 0x1F
  9822                           
  9823                           
  9824                           ; 1 bytes @ 0x1F
  9825  003F                     	ds	1
  9826  0040                     _pcd_comm_with_picc$3131:	
  9827                           
  9828                           ; 2 bytes @ 0x20
  9829  0040                     	ds	2
  9830  0042                     pcd_comm_with_picc@cmd:	
  9831                           
  9832                           ; 1 bytes @ 0x22
  9833  0042                     	ds	1
  9834  0043                     pcd_comm_with_picc@controlBuffer:	
  9835                           
  9836                           ; 2 bytes @ 0x23
  9837  0043                     	ds	2
  9838  0045                     pcd_comm_with_picc@errorRegValue:	
  9839                           
  9840                           ; 1 bytes @ 0x25
  9841  0045                     	ds	1
  9842  0046                     pcd_comm_with_picc@status:	
  9843                           
  9844                           ; 1 bytes @ 0x26
  9845  0046                     	ds	1
  9846  0047                     pcd_comm_with_picc@i:	
  9847                           
  9848                           ; 2 bytes @ 0x27
  9849  0047                     	ds	2
  9850  0049                     pcd_comm_with_picc@_validBits:	
  9851                           
  9852                           ; 1 bytes @ 0x29
  9853  0049                     	ds	1
  9854  004A                     pcd_comm_with_picc@tmp8:	
  9855                           
  9856                           ; 1 bytes @ 0x2A
  9857  004A                     	ds	1
  9858  004B                     ?_picc_select:	
  9859  004B                     ?_picc_authenticate:	
  9860                           ; 1 bytes @ 0x2B
  9861                           
  9862  004B                     ?_mifare_read:	
  9863                           ; 1 bytes @ 0x2B
  9864                           
  9865  004B                     ??_picc_halt_a:	
  9866                           ; 1 bytes @ 0x2B
  9867                           
  9868  004B                     ?_picc_req_a_or_wakeup_a:	
  9869                           ; 1 bytes @ 0x2B
  9870                           
  9871  004B                     ?_pcd_mifare_transceive:	
  9872                           ; 1 bytes @ 0x2B
  9873                           
  9874  004B                     picc_req_a_or_wakeup_a@bufferATQA:	
  9875                           ; 1 bytes @ 0x2B
  9876                           
  9877  004B                     picc_select@validBits:	
  9878                           ; 1 bytes @ 0x2B
  9879                           
  9880  004B                     picc_authenticate@blockAddr:	
  9881                           ; 1 bytes @ 0x2B
  9882                           
  9883  004B                     mifare_read@buffer:	
  9884                           ; 1 bytes @ 0x2B
  9885                           
  9886  004B                     pcd_mifare_transceive@sendData:	
  9887                           ; 1 bytes @ 0x2B
  9888                           
  9889                           
  9890                           ; 2 bytes @ 0x2B
  9891  004B                     	ds	1
  9892  004C                     ??_picc_select:	
  9893  004C                     picc_req_a_or_wakeup_a@bufferSize:	
  9894                           ; 1 bytes @ 0x2C
  9895                           
  9896  004C                     mifare_read@bufferSize:	
  9897                           ; 1 bytes @ 0x2C
  9898                           
  9899  004C                     picc_authenticate@key:	
  9900                           ; 1 bytes @ 0x2C
  9901                           
  9902                           
  9903                           ; 2 bytes @ 0x2C
  9904  004C                     	ds	1
  9905  004D                     ??_mifare_read:	
  9906  004D                     ??_picc_req_a_or_wakeup_a:	
  9907                           ; 1 bytes @ 0x2D
  9908                           
  9909  004D                     pcd_mifare_transceive@sendLen:	
  9910                           ; 1 bytes @ 0x2D
  9911                           
  9912                           
  9913                           ; 1 bytes @ 0x2D
  9914  004D                     	ds	1
  9915  004E                     picc_authenticate@uid:	
  9916  004E                     pcd_mifare_transceive@acceptTimeout:	
  9917                           ; 1 bytes @ 0x2E
  9918                           
  9919  004E                     picc_halt_a@buffer:	
  9920                           ; 1 bytes @ 0x2E
  9921                           
  9922                           
  9923                           ; 4 bytes @ 0x2E
  9924  004E                     	ds	1
  9925  004F                     ??_picc_authenticate:	
  9926  004F                     ??_pcd_mifare_transceive:	
  9927                           ; 1 bytes @ 0x2F
  9928                           
  9929  004F                     mifare_read@blockAddr:	
  9930                           ; 1 bytes @ 0x2F
  9931                           
  9932                           
  9933                           ; 1 bytes @ 0x2F
  9934  004F                     	ds	1
  9935  0050                     picc_req_a_or_wakeup_a@cmd:	
  9936  0050                     mifare_read@result:	
  9937                           ; 1 bytes @ 0x30
  9938                           
  9939                           
  9940                           ; 1 bytes @ 0x30
  9941  0050                     	ds	1
  9942  0051                     picc_req_a_or_wakeup_a@__cmd:	
  9943                           
  9944                           ; 1 bytes @ 0x31
  9945  0051                     	ds	1
  9946  0052                     picc_req_a_or_wakeup_a@status:	
  9947  0052                     picc_halt_a@result:	
  9948                           ; 1 bytes @ 0x32
  9949                           
  9950  0052                     picc_authenticate@sendData:	
  9951                           ; 1 bytes @ 0x32
  9952                           
  9953                           
  9954                           ; 12 bytes @ 0x32
  9955  0052                     	ds	1
  9956  0053                     picc_req_a_or_wakeup_a@validBits:	
  9957  0053                     pcd_mifare_transceive@cmdBuffer:	
  9958                           ; 1 bytes @ 0x33
  9959                           
  9960                           
  9961                           ; 18 bytes @ 0x33
  9962  0053                     	ds	1
  9963  0054                     ??_mfapi_is_new_card_present:	
  9964                           
  9965                           ; 1 bytes @ 0x34
  9966  0054                     	ds	3
  9967  0057                     mfapi_is_new_card_present@cmd:	
  9968                           
  9969                           ; 1 bytes @ 0x37
  9970  0057                     	ds	1
  9971  0058                     mfapi_is_new_card_present@bufferATQA:	
  9972                           
  9973                           ; 2 bytes @ 0x38
  9974  0058                     	ds	2
  9975  005A                     mfapi_is_new_card_present@result:	
  9976                           
  9977                           ; 1 bytes @ 0x3A
  9978  005A                     	ds	1
  9979  005B                     mfapi_is_new_card_present@bufferSize:	
  9980                           
  9981                           ; 1 bytes @ 0x3B
  9982  005B                     	ds	3
  9983  005E                     picc_authenticate@command:	
  9984                           
  9985                           ; 1 bytes @ 0x3E
  9986  005E                     	ds	1
  9987  005F                     picc_authenticate@waitIRQ:	
  9988                           
  9989                           ; 1 bytes @ 0x3F
  9990  005F                     	ds	1
  9991  0060                     picc_authenticate@i:	
  9992                           
  9993                           ; 1 bytes @ 0x40
  9994  0060                     	ds	5
  9995  0065                     pcd_mifare_transceive@waitIRq:	
  9996                           
  9997                           ; 1 bytes @ 0x45
  9998  0065                     	ds	1
  9999  0066                     pcd_mifare_transceive@validBits:	
 10000                           
 10001                           ; 1 bytes @ 0x46
 10002  0066                     	ds	1
 10003  0067                     pcd_mifare_transceive@cmdBufferSize:	
 10004                           
 10005                           ; 1 bytes @ 0x47
 10006  0067                     	ds	1
 10007  0068                     pcd_mifare_transceive@result:	
 10008                           
 10009                           ; 1 bytes @ 0x48
 10010  0068                     	ds	1
 10011  0069                     ?_mifare_write:	
 10012  0069                     mifare_write@buffer:	
 10013                           ; 1 bytes @ 0x49
 10014                           
 10015                           
 10016                           ; 2 bytes @ 0x49
 10017  0069                     	ds	2
 10018  006B                     mifare_write@bufferSize:	
 10019                           
 10020                           ; 1 bytes @ 0x4B
 10021  006B                     	ds	1
 10022  006C                     ??_mifare_write:	
 10023                           
 10024                           ; 1 bytes @ 0x4C
 10025  006C                     	ds	2
 10026  006E                     ??_main:	
 10027                           
 10028                           ; 1 bytes @ 0x4E
 10029  006E                     	ds	1
 10030                           
 10031                           	psect	maintext
 10032  070F                     __pmaintext:	
 10033 ;;
 10034 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 10035 ;;
 10036 ;; *************** function _main *****************
 10037 ;; Defined at:
 10038 ;;		line 39 in file "main.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;		None
 10041 ;; Auto vars:     Size  Location     Type
 10042 ;;  t16             2   52[BANK1 ] unsigned int 
 10043 ;;  buf             2   50[BANK1 ] unsigned char [2]
 10044 ;;  p8              1   54[BANK1 ] PTR unsigned char 
 10045 ;;		 -> main@t16(2), 
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : B1F/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10056 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0
 10057 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10058 ;;      Totals:         0       1       5       0       0       0       0       0       0       0       0       0       
      +0
 10059 ;;Total ram usage:        6 bytes
 10060 ;; Hardware stack levels required when called:   10
 10061 ;; This function calls:
 10062 ;;		_data_api_calibration_table_data_init
 10063 ;;		_data_api_system_data_init
 10064 ;;		_delay
 10065 ;;		_key_scan_call
 10066 ;;		_lcd_disp_str
 10067 ;;		_m_system_init
 10068 ;;		_m_system_start_self_test
 10069 ;;		_mfapi_pcd_init
 10070 ;;		_my_uart1_received_ready
 10071 ;;		_rfid_comm_process_fk
 10072 ;;		_rfid_comm_process_hs
 10073 ;;		_ui_key_waite_up
 10074 ;; This function is called by:
 10075 ;;		Startup code after reset
 10076 ;; This function uses a non-reentrant model
 10077 ;;
 10078                           
 10079                           
 10080                           ;psect for function _main
 10081  070F                     _main:	
 10082                           
 10083                           ;main.c: 41: uint8_t buf[2];
 10084                           ;main.c: 42: uint8_t *p8;
 10085                           ;main.c: 43: uint16_t t16=3698;
 10086                           
 10087                           ;incstack = 0
 10088                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10089  070F  3072               	movlw	114
 10090  0710  0021               	movlb	1	; select bank1
 10091  0711  00D4               	movwf	main@t16^(0+128)
 10092  0712  300E               	movlw	14
 10093  0713  00D5               	movwf	(main@t16^(0+128)+1)
 10094                           
 10095                           ;main.c: 44: p8=(uint8_t*)(&t16);
 10096  0714  30D4               	movlw	(low (main@t16| 0))& (0+255)
 10097  0715  0020               	movlb	0	; select bank0
 10098  0716  00EE               	movwf	??_main
 10099  0717  086E               	movf	??_main,w
 10100  0718  0021               	movlb	1	; select bank1
 10101  0719  00D6               	movwf	main@p8^(0+128)
 10102                           
 10103                           ;main.c: 45: buf[0]=*p8++;
 10104  071A  0856               	movf	main@p8^(0+128),w
 10105  071B  0086               	movwf	6
 10106  071C  0187               	clrf	7
 10107  071D  0801               	movf	1,w
 10108  071E  0020               	movlb	0	; select bank0
 10109  071F  00EE               	movwf	??_main
 10110  0720  086E               	movf	??_main,w
 10111  0721  0021               	movlb	1	; select bank1
 10112  0722  00D2               	movwf	main@buf^(0+128)
 10113  0723  3001               	movlw	1
 10114  0724  0020               	movlb	0	; select bank0
 10115  0725  00EE               	movwf	??_main
 10116  0726  086E               	movf	??_main,w
 10117  0727  0021               	movlb	1	; select bank1
 10118  0728  07D6               	addwf	main@p8^(0+128),f
 10119                           
 10120                           ;main.c: 46: buf[1]=*p8;
 10121  0729  0856               	movf	main@p8^(0+128),w
 10122  072A  0086               	movwf	6
 10123  072B  0187               	clrf	7
 10124  072C  0801               	movf	1,w
 10125  072D  0020               	movlb	0	; select bank0
 10126  072E  00EE               	movwf	??_main
 10127  072F  086E               	movf	??_main,w
 10128  0730  0021               	movlb	1	; select bank1
 10129  0731  00D3               	movwf	(main@buf^(0+128)+1)
 10130                           
 10131                           ;main.c: 47: __nop();
 10132  0732  0000               	nop
 10133                           
 10134                           ;main.c: 50: m_system_init();
 10135  0733  319E  267F  3187   	fcall	_m_system_init
 10136                           
 10137                           ;main.c: 53: m_system_start_self_test();
 10138  0736  3195  25E6  3187   	fcall	_m_system_start_self_test
 10139                           
 10140                           ;main.c: 55: do{PIE1bits.RC1IE = 0;}while(0);;
 10141  0739  0021               	movlb	1	; select bank1
 10142  073A  1291               	bcf	17,5	;volatile
 10143                           
 10144                           ;main.c: 57: data_api_system_data_init();
 10145  073B  3189  2137  3187   	fcall	_data_api_system_data_init
 10146                           
 10147                           ;main.c: 58: data_api_calibration_table_data_init();
 10148  073E  3189  21C1  3187   	fcall	_data_api_calibration_table_data_init
 10149                           
 10150                           ;main.c: 60: if(mfapi_pcd_init()==1){
 10151  0741  319E  266C  3187   	fcall	_mfapi_pcd_init
 10152  0744  3A01               	xorlw	1
 10153  0745  1D03               	skipz
 10154  0746  2F4C               	goto	l13933
 10155                           
 10156                           ;main.c: 61: lcd_disp_str("ver=2");
 10157  0747  30B8               	movlw	low (STR_23| (0+32768))
 10158  0748  0020               	movlb	0	; select bank0
 10159  0749  00A2               	movwf	lcd_disp_str@str
 10160  074A  3083               	movlw	high (STR_23| (0+32768))
 10161  074B  2F50               	goto	L1
 10162  074C                     l13933:	
 10163                           ;main.c: 62: }else{
 10164                           
 10165                           
 10166                           ;main.c: 63: lcd_disp_str("ver=err");
 10167  074C  30A2               	movlw	low (STR_24| (0+32768))
 10168  074D  0020               	movlb	0	; select bank0
 10169  074E  00A2               	movwf	lcd_disp_str@str
 10170  074F  3083               	movlw	high (STR_24| (0+32768))
 10171  0750                     L1:	
 10172  0750  00A3               	movwf	lcd_disp_str@str+1
 10173  0751  3194  240F  3187   	fcall	_lcd_disp_str
 10174                           
 10175                           ;main.c: 64: }
 10176                           ;main.c: 67: my_uart1_received_ready();
 10177  0754  319D  2574  3187   	fcall	_my_uart1_received_ready
 10178  0757                     l13937:	
 10179                           ;main.c: 68: while(1){
 10180                           
 10181                           
 10182                           ;main.c: 69: key_scan_call();
 10183  0757  3190  20DF  3187   	fcall	_key_scan_call
 10184                           
 10185                           ;main.c: 70: if((KeyValue==((1<<1)))){
 10186  075A  3002               	movlw	2
 10187  075B  0021               	movlb	1	; select bank1
 10188  075C  0664               	xorwf	_KeyValue^(0+128),w
 10189  075D  1D03               	btfss	3,2
 10190  075E  2F6A               	goto	l13949
 10191                           
 10192                           ;main.c: 71: ui_key_waite_up();
 10193  075F  3193  2330  3187   	fcall	_ui_key_waite_up
 10194                           
 10195                           ;main.c: 72: if(menu==0)menu=1;
 10196  0762  0021               	movlb	1	; select bank1
 10197  0763  0865               	movf	_menu^(0+128),w
 10198  0764  1D03               	btfss	3,2
 10199  0765  2F69               	goto	l13947
 10200  0766  01E5               	clrf	_menu^(0+128)
 10201  0767  0AE5               	incf	_menu^(0+128),f
 10202  0768  2F6A               	goto	l13949
 10203  0769                     l13947:	
 10204                           
 10205                           ;main.c: 73: else{
 10206                           ;main.c: 74: menu=0;
 10207  0769  01E5               	clrf	_menu^(0+128)
 10208  076A                     l13949:	
 10209                           
 10210                           ;main.c: 75: }
 10211                           ;main.c: 76: }
 10212                           ;main.c: 77: if(menu==0){
 10213  076A  0865               	movf	_menu^(0+128),w
 10214  076B  1D03               	btfss	3,2
 10215  076C  2FA7               	goto	l13965
 10216                           
 10217                           ;main.c: 78: lcd_disp_str((uint8_t*)"f-      ");
 10218  076D  3024               	movlw	low (STR_25| (0+32768))
 10219  076E  0020               	movlb	0	; select bank0
 10220  076F  00A2               	movwf	lcd_disp_str@str
 10221  0770  3083               	movlw	high (STR_25| (0+32768))
 10222  0771  00A3               	movwf	lcd_disp_str@str+1
 10223  0772  3194  240F  3187   	fcall	_lcd_disp_str
 10224                           
 10225                           ;main.c: 79: if(rfid_comm_process_fk()){
 10226  0775  318D  25AF  3187   	fcall	_rfid_comm_process_fk
 10227  0778  3A00               	xorlw	0
 10228  0779  1903               	skipnz
 10229  077A  2F57               	goto	l13937
 10230                           
 10231                           ;main.c: 80: lcd_disp_str((uint8_t*)"f-good  ");
 10232  077B  3036               	movlw	low (STR_26| (0+32768))
 10233  077C  0020               	movlb	0	; select bank0
 10234  077D  00A2               	movwf	lcd_disp_str@str
 10235  077E  3083               	movlw	high (STR_26| (0+32768))
 10236  077F  00A3               	movwf	lcd_disp_str@str+1
 10237  0780  3194  240F  3187   	fcall	_lcd_disp_str
 10238                           
 10239                           ;main.c: 81: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 10240  0783  304C               	movlw	76
 10241  0784  00F3               	movwf	delay@t
 10242  0785  3090               	movlw	144
 10243  0786  00F4               	movwf	delay@t+1
 10244  0787  319D  25BC  3187   	fcall	_delay
 10245  078A  304C               	movlw	76
 10246  078B  00F3               	movwf	delay@t
 10247  078C  3090               	movlw	144
 10248  078D  00F4               	movwf	delay@t+1
 10249  078E  319D  25BC  3187   	fcall	_delay
 10250  0791  304C               	movlw	76
 10251  0792  00F3               	movwf	delay@t
 10252  0793  3090               	movlw	144
 10253  0794  00F4               	movwf	delay@t+1
 10254  0795  319D  25BC  3187   	fcall	_delay
 10255  0798  304C               	movlw	76
 10256  0799  00F3               	movwf	delay@t
 10257  079A  3090               	movlw	144
 10258  079B  00F4               	movwf	delay@t+1
 10259  079C  319D  25BC  3187   	fcall	_delay
 10260  079F  304C               	movlw	76
 10261  07A0  00F3               	movwf	delay@t
 10262  07A1  3090               	movlw	144
 10263  07A2  00F4               	movwf	delay@t+1
 10264  07A3  319D  25BC  3187   	fcall	_delay
 10265                           
 10266                           ;main.c: 82: }
 10267                           ;main.c: 83: }else{
 10268  07A6  2F57               	goto	l13937
 10269  07A7                     l13965:	
 10270                           
 10271                           ;main.c: 84: lcd_disp_str((uint8_t*)"s-      ");
 10272  07A7  302D               	movlw	low (STR_27| (0+32768))
 10273  07A8  0020               	movlb	0	; select bank0
 10274  07A9  00A2               	movwf	lcd_disp_str@str
 10275  07AA  3083               	movlw	high (STR_27| (0+32768))
 10276  07AB  00A3               	movwf	lcd_disp_str@str+1
 10277  07AC  3194  240F  3187   	fcall	_lcd_disp_str
 10278                           
 10279                           ;main.c: 85: if(rfid_comm_process_hs()){
 10280  07AF  318C  2402  3187   	fcall	_rfid_comm_process_hs
 10281  07B2  3A00               	xorlw	0
 10282  07B3  1903               	skipnz
 10283  07B4  2F57               	goto	l13937
 10284                           
 10285                           ;main.c: 86: lcd_disp_str((uint8_t*)"s-good  ");
 10286  07B5  303F               	movlw	low (STR_28| (0+32768))
 10287  07B6  0020               	movlb	0	; select bank0
 10288  07B7  00A2               	movwf	lcd_disp_str@str
 10289  07B8  3083               	movlw	high (STR_28| (0+32768))
 10290  07B9  00A3               	movwf	lcd_disp_str@str+1
 10291  07BA  3194  240F  3187   	fcall	_lcd_disp_str
 10292                           
 10293                           ;main.c: 87: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 10294  07BD  304C               	movlw	76
 10295  07BE  00F3               	movwf	delay@t
 10296  07BF  3090               	movlw	144
 10297  07C0  00F4               	movwf	delay@t+1
 10298  07C1  319D  25BC  3187   	fcall	_delay
 10299  07C4  304C               	movlw	76
 10300  07C5  00F3               	movwf	delay@t
 10301  07C6  3090               	movlw	144
 10302  07C7  00F4               	movwf	delay@t+1
 10303  07C8  319D  25BC  3187   	fcall	_delay
 10304  07CB  304C               	movlw	76
 10305  07CC  00F3               	movwf	delay@t
 10306  07CD  3090               	movlw	144
 10307  07CE  00F4               	movwf	delay@t+1
 10308  07CF  319D  25BC  3187   	fcall	_delay
 10309  07D2  304C               	movlw	76
 10310  07D3  00F3               	movwf	delay@t
 10311  07D4  3090               	movlw	144
 10312  07D5  00F4               	movwf	delay@t+1
 10313  07D6  319D  25BC  3187   	fcall	_delay
 10314  07D9  304C               	movlw	76
 10315  07DA  00F3               	movwf	delay@t
 10316  07DB  3090               	movlw	144
 10317  07DC  00F4               	movwf	delay@t+1
 10318  07DD  319D  25BC  3187   	fcall	_delay
 10319  07E0  2F57               	goto	l13937
 10320  07E1                     __end_of_main:	
 10321                           
 10322                           	psect	text1
 10323  1330                     __ptext1:	
 10324 ;; *************** function _ui_key_waite_up *****************
 10325 ;; Defined at:
 10326 ;;		line 15 in file "src/api/ui_key.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;  now             2    2[BANK0 ] unsigned int 
 10331 ;; Return value:  Size  Location     Type
 10332 ;;                  2    0[BANK0 ] unsigned int 
 10333 ;; Registers used:
 10334 ;;		wreg, status,2, status,0, pclath, cstack
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10340 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10341 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10343 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 10344 ;;Total ram usage:        4 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    4
 10347 ;; This function calls:
 10348 ;;		_get_globle_ticker
 10349 ;;		_key_scan_call
 10350 ;;		_set_globle_ticker
 10351 ;; This function is called by:
 10352 ;;		_main
 10353 ;;		_ui_key_process_enter
 10354 ;;		_ui_key_process
 10355 ;; This function uses a non-reentrant model
 10356 ;;
 10357                           
 10358                           
 10359                           ;psect for function _ui_key_waite_up
 10360  1330                     _ui_key_waite_up:	
 10361                           
 10362                           ;ui_key.c: 17: uint16_t now=0;
 10363                           
 10364                           ;incstack = 0
 10365                           ; Regs used in _ui_key_waite_up: [wreg+status,2+status,0+pclath+cstack]
 10366  1330  0020               	movlb	0	; select bank0
 10367  1331  01A2               	clrf	ui_key_waite_up@now
 10368  1332  01A3               	clrf	ui_key_waite_up@now+1
 10369                           
 10370                           ;ui_key.c: 20: key_scan_call();
 10371  1333  3190  20DF  3193   	fcall	_key_scan_call
 10372                           
 10373                           ;ui_key.c: 21: if (KeyValue == 0)return 0;
 10374  1336  0021               	movlb	1	; select bank1
 10375  1337  0864               	movf	_KeyValue^(0+128),w
 10376  1338  1D03               	btfss	3,2
 10377  1339  2B3E               	goto	l12701
 10378  133A  0020               	movlb	0	; select bank0
 10379  133B  01A0               	clrf	?_ui_key_waite_up
 10380  133C  01A1               	clrf	?_ui_key_waite_up+1
 10381  133D  0008               	return
 10382  133E                     l12701:	
 10383                           
 10384                           ;ui_key.c: 22: set_globle_ticker(0);
 10385  133E  3000               	movlw	0
 10386  133F  00F3               	movwf	set_globle_ticker@tk
 10387  1340  00F4               	movwf	set_globle_ticker@tk+1
 10388  1341  319D  259A  3193   	fcall	_set_globle_ticker
 10389  1344                     l625:	
 10390                           ;ui_key.c: 23: do {
 10391                           
 10392                           
 10393                           ;ui_key.c: 24: key_scan_call();
 10394  1344  3190  20DF  3193   	fcall	_key_scan_call
 10395                           
 10396                           ;ui_key.c: 25: now = get_globle_ticker();
 10397  1347  319D  25CA  3193   	fcall	_get_globle_ticker
 10398  134A  0874               	movf	?_get_globle_ticker+1,w
 10399  134B  0020               	movlb	0	; select bank0
 10400  134C  00A3               	movwf	ui_key_waite_up@now+1
 10401  134D  0873               	movf	?_get_globle_ticker,w
 10402  134E  00A2               	movwf	ui_key_waite_up@now
 10403                           
 10404                           ;ui_key.c: 26: if (KeyValue == 0)break;
 10405  134F  0021               	movlb	1	; select bank1
 10406  1350  0864               	movf	_KeyValue^(0+128),w
 10407  1351  1903               	btfsc	3,2
 10408  1352  2B5B               	goto	l12713
 10409                           
 10410                           ;ui_key.c: 27: if (now > 2000)break;
 10411  1353  3007               	movlw	7
 10412  1354  0020               	movlb	0	; select bank0
 10413  1355  0223               	subwf	ui_key_waite_up@now+1,w
 10414  1356  30D1               	movlw	209
 10415  1357  1903               	skipnz
 10416  1358  0222               	subwf	ui_key_waite_up@now,w
 10417  1359  1C03               	skipc
 10418  135A  2B44               	goto	l625
 10419  135B                     l12713:	
 10420                           ;ui_key.c: 28: } while (1);
 10421                           
 10422                           
 10423                           ;ui_key.c: 29: return (uint16_t) (now );
 10424  135B  0020               	movlb	0	; select bank0
 10425  135C  0823               	movf	ui_key_waite_up@now+1,w
 10426  135D  00A1               	movwf	?_ui_key_waite_up+1
 10427  135E  0822               	movf	ui_key_waite_up@now,w
 10428  135F  00A0               	movwf	?_ui_key_waite_up
 10429  1360  0008               	return
 10430  1361                     __end_of_ui_key_waite_up:	
 10431                           
 10432                           	psect	text2
 10433  1D9A                     __ptext2:	
 10434 ;; *************** function _set_globle_ticker *****************
 10435 ;; Defined at:
 10436 ;;		line 14 in file "src/driver/timer.c"
 10437 ;; Parameters:    Size  Location     Type
 10438 ;;  tk              2    3[COMMON] unsigned int 
 10439 ;; Auto vars:     Size  Location     Type
 10440 ;;		None
 10441 ;; Return value:  Size  Location     Type
 10442 ;;                  1    wreg      void 
 10443 ;; Registers used:
 10444 ;;		wreg
 10445 ;; Tracked objects:
 10446 ;;		On entry : 0/0
 10447 ;;		On exit  : 0/0
 10448 ;;		Unchanged: 0/0
 10449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10450 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10453 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10454 ;;Total ram usage:        2 bytes
 10455 ;; Hardware stack levels used:    1
 10456 ;; Hardware stack levels required when called:    2
 10457 ;; This function calls:
 10458 ;;		Nothing
 10459 ;; This function is called by:
 10460 ;;		_ui_key_waite_up
 10461 ;;		_key_process_up_down_variable_speed_ex
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _set_globle_ticker
 10467  1D9A                     _set_globle_ticker:	
 10468                           
 10469                           ;incstack = 0
 10470                           ; Regs used in _set_globle_ticker: [wreg]
 10471                           ;timer.c: 16: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 10472  1D9A  130B               	bcf	11,6	;volatile
 10473  1D9B  138B               	bcf	11,7	;volatile
 10474                           
 10475                           ;timer.c: 17: globlTickerms=tk;
 10476  1D9C  0874               	movf	set_globle_ticker@tk+1,w
 10477  1D9D  0023               	movlb	3	; select bank3
 10478  1D9E  00AD               	movwf	(_globlTickerms+1)^(0+384)
 10479  1D9F  0873               	movf	set_globle_ticker@tk,w
 10480  1DA0  00AC               	movwf	_globlTickerms^(0+384)
 10481                           
 10482                           ;timer.c: 18: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 10483  1DA1  178B               	bsf	11,7	;volatile
 10484  1DA2  170B               	bsf	11,6	;volatile
 10485  1DA3  0008               	return
 10486  1DA4                     __end_of_set_globle_ticker:	
 10487                           
 10488                           	psect	text3
 10489  10DF                     __ptext3:	
 10490 ;; *************** function _key_scan_call *****************
 10491 ;; Defined at:
 10492 ;;		line 7 in file "src/driver/key.c"
 10493 ;; Parameters:    Size  Location     Type
 10494 ;;		None
 10495 ;; Auto vars:     Size  Location     Type
 10496 ;;		None
 10497 ;; Return value:  Size  Location     Type
 10498 ;;                  1    wreg      void 
 10499 ;; Registers used:
 10500 ;;		wreg, status,2, status,0, pclath, cstack
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10507 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10509 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10510 ;;Total ram usage:        1 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    3
 10513 ;; This function calls:
 10514 ;;		_delay
 10515 ;; This function is called by:
 10516 ;;		_ui_key_waite_up
 10517 ;;		_main
 10518 ;;		_key_process_up_down_variable_speed_ex
 10519 ;;		_ui_key_process
 10520 ;; This function uses a non-reentrant model
 10521 ;;
 10522                           
 10523                           
 10524                           ;psect for function _key_scan_call
 10525  10DF                     _key_scan_call:	
 10526                           
 10527                           ;key.c: 9: KeyValue=0;
 10528                           
 10529                           ;incstack = 0
 10530                           ; Regs used in _key_scan_call: [wreg+status,2+status,0+pclath+cstack]
 10531  10DF  0021               	movlb	1	; select bank1
 10532  10E0  01E4               	clrf	_KeyValue^(0+128)
 10533                           
 10534                           ;key.c: 12: if((PORTB & 0x0e) != 0x0e){
 10535  10E1  300E               	movlw	14
 10536  10E2  0020               	movlb	0	; select bank0
 10537  10E3  050D               	andwf	13,w	;volatile
 10538  10E4  00F5               	movwf	??_key_scan_call
 10539  10E5  300E               	movlw	14
 10540  10E6  0675               	xorwf	??_key_scan_call,w
 10541  10E7  1903               	btfsc	3,2
 10542  10E8  0008               	return
 10543                           
 10544                           ;key.c: 15: delay(1847);;
 10545  10E9  3037               	movlw	55
 10546  10EA  00F3               	movwf	delay@t
 10547  10EB  3007               	movlw	7
 10548  10EC  00F4               	movwf	delay@t+1
 10549  10ED  319D  25BC  3190   	fcall	_delay
 10550                           
 10551                           ;key.c: 16: if((PORTB & 0x0e)!=0x0e)
 10552  10F0  300E               	movlw	14
 10553  10F1  0020               	movlb	0	; select bank0
 10554  10F2  050D               	andwf	13,w	;volatile
 10555  10F3  00F5               	movwf	??_key_scan_call
 10556  10F4  300E               	movlw	14
 10557  10F5  0675               	xorwf	??_key_scan_call,w
 10558  10F6  1903               	btfsc	3,2
 10559  10F7  0008               	return
 10560                           
 10561                           ;key.c: 17: {
 10562                           ;key.c: 18: KeyValue=(PORTB & 0x0e);
 10563  10F8  080D               	movf	13,w	;volatile
 10564  10F9  390E               	andlw	14
 10565  10FA  00F5               	movwf	??_key_scan_call
 10566  10FB  0875               	movf	??_key_scan_call,w
 10567  10FC  0021               	movlb	1	; select bank1
 10568  10FD  00E4               	movwf	_KeyValue^(0+128)
 10569                           
 10570                           ;key.c: 19: KeyValue>>=1;
 10571  10FE  1003               	clrc
 10572  10FF  0CE4               	rrf	_KeyValue^(0+128),f
 10573                           
 10574                           ;key.c: 20: KeyValue = ~KeyValue;
 10575  1100  09E4               	comf	_KeyValue^(0+128),f
 10576                           
 10577                           ;key.c: 21: KeyValue &=0x07;
 10578  1101  3007               	movlw	7
 10579  1102  00F5               	movwf	??_key_scan_call
 10580  1103  0875               	movf	??_key_scan_call,w
 10581  1104  05E4               	andwf	_KeyValue^(0+128),f
 10582  1105  0008               	return
 10583  1106                     __end_of_key_scan_call:	
 10584                           
 10585                           	psect	text4
 10586  1DCA                     __ptext4:	
 10587 ;; *************** function _get_globle_ticker *****************
 10588 ;; Defined at:
 10589 ;;		line 20 in file "src/driver/timer.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;  ret             2    5[COMMON] unsigned int 
 10594 ;; Return value:  Size  Location     Type
 10595 ;;                  2    3[COMMON] unsigned int 
 10596 ;; Registers used:
 10597 ;;		wreg
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10603 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10604 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10606 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10607 ;;Total ram usage:        4 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    2
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_ui_key_waite_up
 10614 ;;		_key_process_up_down_variable_speed_ex
 10615 ;; This function uses a non-reentrant model
 10616 ;;
 10617                           
 10618                           
 10619                           ;psect for function _get_globle_ticker
 10620  1DCA                     _get_globle_ticker:	
 10621                           
 10622                           ;incstack = 0
 10623                           ; Regs used in _get_globle_ticker: [wreg]
 10624                           ;timer.c: 22: uint16_t ret;
 10625                           ;timer.c: 23: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 10626  1DCA  130B               	bcf	11,6	;volatile
 10627  1DCB  138B               	bcf	11,7	;volatile
 10628                           
 10629                           ;timer.c: 24: ret=globlTickerms;
 10630  1DCC  0023               	movlb	3	; select bank3
 10631  1DCD  082D               	movf	(_globlTickerms+1)^(0+384),w
 10632  1DCE  00F6               	movwf	get_globle_ticker@ret+1
 10633  1DCF  082C               	movf	_globlTickerms^(0+384),w
 10634  1DD0  00F5               	movwf	get_globle_ticker@ret
 10635                           
 10636                           ;timer.c: 25: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 10637  1DD1  178B               	bsf	11,7	;volatile
 10638  1DD2  170B               	bsf	11,6	;volatile
 10639                           
 10640                           ;timer.c: 26: return ret;
 10641  1DD3  0876               	movf	get_globle_ticker@ret+1,w
 10642  1DD4  00F4               	movwf	?_get_globle_ticker+1
 10643  1DD5  0875               	movf	get_globle_ticker@ret,w
 10644  1DD6  00F3               	movwf	?_get_globle_ticker
 10645  1DD7  0008               	return
 10646  1DD8                     __end_of_get_globle_ticker:	
 10647                           
 10648                           	psect	text5
 10649  0C02                     __ptext5:	
 10650 ;; *************** function _rfid_comm_process_hs *****************
 10651 ;; Defined at:
 10652 ;;		line 128 in file "src/app/rfid_demo.c"
 10653 ;; Parameters:    Size  Location     Type
 10654 ;;		None
 10655 ;; Auto vars:     Size  Location     Type
 10656 ;;  stpIncDec       2   43[BANK1 ] PTR struct .
 10657 ;;		 -> comBuffer(128), 
 10658 ;;  result          1   47[BANK1 ] enum E5493
 10659 ;;  i               1   46[BANK1 ] unsigned char 
 10660 ;;  ret             1   45[BANK1 ] unsigned char 
 10661 ;; Return value:  Size  Location     Type
 10662 ;;                  1    wreg      unsigned char 
 10663 ;; Registers used:
 10664 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10665 ;; Tracked objects:
 10666 ;;		On entry : 0/0
 10667 ;;		On exit  : 0/0
 10668 ;;		Unchanged: 0/0
 10669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10671 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0
 10672 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0
 10673 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0
 10674 ;;Total ram usage:       12 bytes
 10675 ;; Hardware stack levels used:    1
 10676 ;; Hardware stack levels required when called:    9
 10677 ;; This function calls:
 10678 ;;		_create_card_key_b
 10679 ;;		_m_mem_cpy_len
 10680 ;;		_m_mem_set
 10681 ;;		_mfapi_is_new_card_present
 10682 ;;		_mifare_read
 10683 ;;		_mifare_write
 10684 ;;		_picc_authenticate
 10685 ;;		_picc_halt_a
 10686 ;;		_picc_select
 10687 ;;		_picc_stop_cryptol
 10688 ;; This function is called by:
 10689 ;;		_main
 10690 ;; This function uses a non-reentrant model
 10691 ;;
 10692                           
 10693                           
 10694                           ;psect for function _rfid_comm_process_hs
 10695  0C02                     _rfid_comm_process_hs:	
 10696                           
 10697                           ;rfid_demo.c: 134: ret=0;
 10698                           
 10699                           ;incstack = 0
 10700                           ; Regs used in _rfid_comm_process_hs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10701                           ;rfid_demo.c: 130: em_PcdStatusCode result;
 10702                           ;rfid_demo.c: 131: uint8_t ret;
 10703                           ;rfid_demo.c: 132: uint8_t i;
 10704                           ;rfid_demo.c: 133: do{
 10705  0C02  0021               	movlb	1	; select bank1
 10706  0C03  01CD               	clrf	rfid_comm_process_hs@ret^(0+128)
 10707                           
 10708                           ;rfid_demo.c: 135: if (!(mfapi_is_new_card_present()))break;
 10709  0C04  3192  22FF  318C   	fcall	_mfapi_is_new_card_present
 10710  0C07  3A00               	xorlw	0
 10711  0C08  1903               	btfsc	3,2
 10712  0C09  2DA4               	goto	l13543
 10713                           
 10714                           ;rfid_demo.c: 136: result = picc_select(&PiccUid, 0);
 10715  0C0A  0020               	movlb	0	; select bank0
 10716  0C0B  01CB               	clrf	picc_select@validBits
 10717  0C0C  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 10718  0C0D  3183  23F2  318C   	fcall	_picc_select
 10719  0C10  0021               	movlb	1	; select bank1
 10720  0C11  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10721  0C12  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10722  0C13  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10723                           
 10724                           ;rfid_demo.c: 137: if (result != STATUS_OK)break;
 10725  0C14  084F               	movf	rfid_comm_process_hs@result^(0+128),w
 10726  0C15  1D03               	btfss	3,2
 10727  0C16  2DA4               	goto	l13543
 10728                           
 10729                           ;rfid_demo.c: 139: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 3, (st_MifareKey*)
      +                           defaultKeyA, &PiccUid);
 10730  0C17  3003               	movlw	3
 10731  0C18  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10732  0C19  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10733  0C1A  0020               	movlb	0	; select bank0
 10734  0C1B  00CB               	movwf	picc_authenticate@blockAddr
 10735  0C1C  3014               	movlw	low (_defaultKeyA| (0+32768))
 10736  0C1D  00CC               	movwf	picc_authenticate@key
 10737  0C1E  3083               	movlw	high (_defaultKeyA| (0+32768))
 10738  0C1F  00CD               	movwf	picc_authenticate@key+1
 10739  0C20  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 10740  0C21  0021               	movlb	1	; select bank1
 10741  0C22  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 10742  0C23  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 10743  0C24  0020               	movlb	0	; select bank0
 10744  0C25  00CE               	movwf	picc_authenticate@uid
 10745  0C26  3060               	movlw	96
 10746  0C27  3196  2645  318C   	fcall	_picc_authenticate
 10747  0C2A  0021               	movlb	1	; select bank1
 10748  0C2B  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 10749  0C2C  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 10750  0C2D  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10751                           
 10752                           ;rfid_demo.c: 140: if (result != STATUS_OK)return 0;
 10753  0C2E  084F               	movf	rfid_comm_process_hs@result^(0+128),w
 10754  0C2F  1903               	btfsc	3,2
 10755  0C30  2C33               	goto	l13475
 10756  0C31  3000               	movlw	0
 10757  0C32  0008               	return
 10758  0C33                     l13475:	
 10759                           
 10760                           ;rfid_demo.c: 141: rdLen=18;
 10761  0C33  3012               	movlw	18
 10762  0C34  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10763  0C35  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10764  0C36  0022               	movlb	2	; select bank2
 10765  0C37  00EB               	movwf	_rdLen^(0+256)
 10766                           
 10767                           ;rfid_demo.c: 142: result = mifare_read(0, cardUidBlockBuf, &rdLen);
 10768  0C38  3020               	movlw	32
 10769  0C39  0021               	movlb	1	; select bank1
 10770  0C3A  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10771  0C3B  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10772  0C3C  0020               	movlb	0	; select bank0
 10773  0C3D  00CB               	movwf	mifare_read@buffer
 10774  0C3E  306B               	movlw	(low (_rdLen| (0+256)))& (0+255)
 10775  0C3F  0021               	movlb	1	; select bank1
 10776  0C40  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 10777  0C41  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 10778  0C42  0020               	movlb	0	; select bank0
 10779  0C43  00CC               	movwf	mifare_read@bufferSize
 10780  0C44  3000               	movlw	0
 10781  0C45  3195  2592  318C   	fcall	_mifare_read
 10782  0C48  0021               	movlb	1	; select bank1
 10783  0C49  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 10784  0C4A  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 10785  0C4B  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10786                           
 10787                           ;rfid_demo.c: 143: if (result != STATUS_OK) return 0;
 10788  0C4C  084F               	movf	rfid_comm_process_hs@result^(0+128),w
 10789  0C4D  1903               	btfsc	3,2
 10790  0C4E  2C51               	goto	l13485
 10791  0C4F  3000               	movlw	0
 10792  0C50  0008               	return
 10793  0C51                     l13485:	
 10794                           
 10795                           ;rfid_demo.c: 145: m_mem_cpy_len(comBuffer,cardUidBlockBuf,18);
 10796  0C51  3070               	movlw	112
 10797  0C52  00F3               	movwf	m_mem_cpy_len@d
 10798  0C53  3023               	movlw	35
 10799  0C54  00F4               	movwf	m_mem_cpy_len@d+1
 10800  0C55  3020               	movlw	32
 10801  0C56  00F5               	movwf	m_mem_cpy_len@s
 10802  0C57  3004               	movlw	4
 10803  0C58  00F6               	movwf	m_mem_cpy_len@s+1
 10804  0C59  3012               	movlw	18
 10805  0C5A  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10806  0C5B  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10807  0C5C  00F7               	movwf	m_mem_cpy_len@len
 10808  0C5D  319F  2756  318C   	fcall	_m_mem_cpy_len
 10809                           
 10810                           ;rfid_demo.c: 146: create_card_key_b(userKeyB,cardUidBlockBuf,(uint8_t*)cardKeyCreatKey)
      +                          ;
 10811  0C60  3020               	movlw	32
 10812  0C61  0021               	movlb	1	; select bank1
 10813  0C62  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10814  0C63  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10815  0C64  00F3               	movwf	create_card_key_b@uid
 10816  0C65  301A               	movlw	low (_cardKeyCreatKey| (0+32768))
 10817  0C66  00F4               	movwf	create_card_key_b@cckey
 10818  0C67  3083               	movlw	high (_cardKeyCreatKey| (0+32768))
 10819  0C68  00F5               	movwf	create_card_key_b@cckey+1
 10820  0C69  30D6               	movlw	(low (_userKeyB| (0+256)))& (0+255)
 10821  0C6A  3191  2106  318C   	fcall	_create_card_key_b
 10822                           
 10823                           ;rfid_demo.c: 147: m_mem_set(comBuffer,0,48);
 10824  0C6D  3070               	movlw	112
 10825  0C6E  00F3               	movwf	m_mem_set@buf
 10826  0C6F  3023               	movlw	35
 10827  0C70  00F4               	movwf	m_mem_set@buf+1
 10828  0C71  01F5               	clrf	m_mem_set@x
 10829  0C72  3030               	movlw	48
 10830  0C73  0021               	movlb	1	; select bank1
 10831  0C74  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10832  0C75  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10833  0C76  00F6               	movwf	m_mem_set@len
 10834  0C77  319D  25F6  318C   	fcall	_m_mem_set
 10835                           
 10836                           ;rfid_demo.c: 148: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, (st_MifareKey*)
      +                           defaultKeyA, &PiccUid);
 10837  0C7A  3007               	movlw	7
 10838  0C7B  0021               	movlb	1	; select bank1
 10839  0C7C  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10840  0C7D  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10841  0C7E  0020               	movlb	0	; select bank0
 10842  0C7F  00CB               	movwf	picc_authenticate@blockAddr
 10843  0C80  3014               	movlw	low (_defaultKeyA| (0+32768))
 10844  0C81  00CC               	movwf	picc_authenticate@key
 10845  0C82  3083               	movlw	high (_defaultKeyA| (0+32768))
 10846  0C83  00CD               	movwf	picc_authenticate@key+1
 10847  0C84  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 10848  0C85  0021               	movlb	1	; select bank1
 10849  0C86  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 10850  0C87  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 10851  0C88  0020               	movlb	0	; select bank0
 10852  0C89  00CE               	movwf	picc_authenticate@uid
 10853  0C8A  3060               	movlw	96
 10854  0C8B  3196  2645  318C   	fcall	_picc_authenticate
 10855  0C8E  0021               	movlb	1	; select bank1
 10856  0C8F  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 10857  0C90  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 10858  0C91  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10859                           
 10860                           ;rfid_demo.c: 149: for(__t8=4;__t8<7;__t8++){
 10861  0C92  3004               	movlw	4
 10862  0C93  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10863  0C94  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10864  0C95  00E2               	movwf	___t8^(0+128)
 10865  0C96  3007               	movlw	7
 10866  0C97  0262               	subwf	___t8^(0+128),w
 10867  0C98  1803               	btfsc	3,0
 10868  0C99  2CE0               	goto	l13507
 10869  0C9A                     l13497:	
 10870                           
 10871                           ;rfid_demo.c: 150: m_mem_cpy_len(cardWriteBuf,comBuffer+(__t8-4)*16,16);
 10872  0C9A  3032               	movlw	50
 10873  0C9B  00F3               	movwf	m_mem_cpy_len@d
 10874  0C9C  3004               	movlw	4
 10875  0C9D  00F4               	movwf	m_mem_cpy_len@d+1
 10876  0C9E  0862               	movf	___t8^(0+128),w
 10877  0C9F  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10878  0CA0  01C5               	clrf	(??_rfid_comm_process_hs^(0+128)+1)
 10879  0CA1  0EC4               	swapf	??_rfid_comm_process_hs^(0+128),f
 10880  0CA2  0EC5               	swapf	(??_rfid_comm_process_hs^(0+128)+1),f
 10881  0CA3  30F0               	movlw	240
 10882  0CA4  05C5               	andwf	(??_rfid_comm_process_hs^(0+128)+1),f
 10883  0CA5  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10884  0CA6  390F               	andlw	15
 10885  0CA7  04C5               	iorwf	(??_rfid_comm_process_hs^(0+128)+1),f
 10886  0CA8  30F0               	movlw	240
 10887  0CA9  05C4               	andwf	??_rfid_comm_process_hs^(0+128),f
 10888  0CAA  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10889  0CAB  3EC0               	addlw	192
 10890  0CAC  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 10891  0CAD  30FF               	movlw	255
 10892  0CAE  3D45               	addwfc	(??_rfid_comm_process_hs+1)^(0+128),w
 10893  0CAF  00C7               	movwf	(??_rfid_comm_process_hs+3)^(0+128)
 10894  0CB0  3070               	movlw	112
 10895  0CB1  00C8               	movwf	(??_rfid_comm_process_hs+4)^(0+128)
 10896  0CB2  3023               	movlw	35
 10897  0CB3  00C9               	movwf	((??_rfid_comm_process_hs+4)^(0+128)+1)
 10898  0CB4  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 10899  0CB5  0748               	addwf	(??_rfid_comm_process_hs+4)^(0+128),w
 10900  0CB6  00F5               	movwf	m_mem_cpy_len@s
 10901  0CB7  0847               	movf	(??_rfid_comm_process_hs+3)^(0+128),w
 10902  0CB8  3D49               	addwfc	(??_rfid_comm_process_hs+5)^(0+128),w
 10903  0CB9  00F6               	movwf	m_mem_cpy_len@s+1
 10904  0CBA  3010               	movlw	16
 10905  0CBB  00CA               	movwf	(??_rfid_comm_process_hs+6)^(0+128)
 10906  0CBC  084A               	movf	(??_rfid_comm_process_hs+6)^(0+128),w
 10907  0CBD  00F7               	movwf	m_mem_cpy_len@len
 10908  0CBE  319F  2756  318C   	fcall	_m_mem_cpy_len
 10909                           
 10910                           ;rfid_demo.c: 151: result = mifare_write(__t8, cardWriteBuf, 16);
 10911  0CC1  3032               	movlw	50
 10912  0CC2  0020               	movlb	0	; select bank0
 10913  0CC3  00E9               	movwf	mifare_write@buffer
 10914  0CC4  3004               	movlw	4
 10915  0CC5  00EA               	movwf	mifare_write@buffer+1
 10916  0CC6  3010               	movlw	16
 10917  0CC7  0021               	movlb	1	; select bank1
 10918  0CC8  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10919  0CC9  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10920  0CCA  0020               	movlb	0	; select bank0
 10921  0CCB  00EB               	movwf	mifare_write@bufferSize
 10922  0CCC  0021               	movlb	1	; select bank1
 10923  0CCD  0862               	movf	___t8^(0+128),w
 10924  0CCE  3194  2457  318C   	fcall	_mifare_write
 10925  0CD1  0021               	movlb	1	; select bank1
 10926  0CD2  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 10927  0CD3  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 10928  0CD4  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10929                           
 10930                           ;rfid_demo.c: 152: if(result!=STATUS_OK)break;
 10931  0CD5  084F               	movf	rfid_comm_process_hs@result^(0+128),w
 10932  0CD6  1D03               	btfss	3,2
 10933  0CD7  2CE0               	goto	l13507
 10934  0CD8  3001               	movlw	1
 10935  0CD9  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10936  0CDA  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10937  0CDB  07E2               	addwf	___t8^(0+128),f
 10938  0CDC  3007               	movlw	7
 10939  0CDD  0262               	subwf	___t8^(0+128),w
 10940  0CDE  1C03               	skipc
 10941  0CDF  2C9A               	goto	l13497
 10942  0CE0                     l13507:	
 10943                           
 10944                           ;rfid_demo.c: 153: }
 10945                           ;rfid_demo.c: 154: m_mem_cpy_len(cardWriteBuf,(uint8_t*)defWriteBlock3,18);
 10946  0CE0  3032               	movlw	50
 10947  0CE1  00F3               	movwf	m_mem_cpy_len@d
 10948  0CE2  3004               	movlw	4
 10949  0CE3  00F4               	movwf	m_mem_cpy_len@d+1
 10950  0CE4  3002               	movlw	low (_defWriteBlock3| (0+32768))
 10951  0CE5  00F5               	movwf	m_mem_cpy_len@s
 10952  0CE6  3083               	movlw	high (_defWriteBlock3| (0+32768))
 10953  0CE7  00F6               	movwf	m_mem_cpy_len@s+1
 10954  0CE8  3012               	movlw	18
 10955  0CE9  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10956  0CEA  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10957  0CEB  00F7               	movwf	m_mem_cpy_len@len
 10958  0CEC  319F  2756  318C   	fcall	_m_mem_cpy_len
 10959                           
 10960                           ;rfid_demo.c: 156: for(i=11;i<16;i+=4)
 10961  0CEF  300B               	movlw	11
 10962  0CF0  0021               	movlb	1	; select bank1
 10963  0CF1  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10964  0CF2  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10965  0CF3  00CE               	movwf	rfid_comm_process_hs@i^(0+128)
 10966  0CF4  3010               	movlw	16
 10967  0CF5  024E               	subwf	rfid_comm_process_hs@i^(0+128),w
 10968  0CF6  1803               	btfsc	3,0
 10969  0CF7  2D30               	goto	l13527
 10970  0CF8                     l13515:	
 10971                           
 10972                           ;rfid_demo.c: 157: {
 10973                           ;rfid_demo.c: 158: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B,i, (st_MifareKey*) 
      +                          userKeyB, &PiccUid);
 10974  0CF8  084E               	movf	rfid_comm_process_hs@i^(0+128),w
 10975  0CF9  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 10976  0CFA  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 10977  0CFB  0020               	movlb	0	; select bank0
 10978  0CFC  00CB               	movwf	picc_authenticate@blockAddr
 10979  0CFD  30D6               	movlw	low _userKeyB
 10980  0CFE  00CC               	movwf	picc_authenticate@key
 10981  0CFF  3001               	movlw	high _userKeyB
 10982  0D00  00CD               	movwf	picc_authenticate@key+1
 10983  0D01  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 10984  0D02  0021               	movlb	1	; select bank1
 10985  0D03  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 10986  0D04  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 10987  0D05  0020               	movlb	0	; select bank0
 10988  0D06  00CE               	movwf	picc_authenticate@uid
 10989  0D07  3061               	movlw	97
 10990  0D08  3196  2645  318C   	fcall	_picc_authenticate
 10991  0D0B  0021               	movlb	1	; select bank1
 10992  0D0C  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 10993  0D0D  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 10994  0D0E  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 10995                           
 10996                           ;rfid_demo.c: 159: result = mifare_write(i, cardWriteBuf, 16);
 10997  0D0F  3032               	movlw	50
 10998  0D10  0020               	movlb	0	; select bank0
 10999  0D11  00E9               	movwf	mifare_write@buffer
 11000  0D12  3004               	movlw	4
 11001  0D13  00EA               	movwf	mifare_write@buffer+1
 11002  0D14  3010               	movlw	16
 11003  0D15  0021               	movlb	1	; select bank1
 11004  0D16  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11005  0D17  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11006  0D18  0020               	movlb	0	; select bank0
 11007  0D19  00EB               	movwf	mifare_write@bufferSize
 11008  0D1A  0021               	movlb	1	; select bank1
 11009  0D1B  084E               	movf	rfid_comm_process_hs@i^(0+128),w
 11010  0D1C  3194  2457  318C   	fcall	_mifare_write
 11011  0D1F  0021               	movlb	1	; select bank1
 11012  0D20  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 11013  0D21  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 11014  0D22  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 11015                           
 11016                           ;rfid_demo.c: 160: if(result!=STATUS_OK)return 0;
 11017  0D23  084F               	movf	rfid_comm_process_hs@result^(0+128),w
 11018  0D24  1903               	btfsc	3,2
 11019  0D25  2D28               	goto	l13523
 11020  0D26  3000               	movlw	0
 11021  0D27  0008               	return
 11022  0D28                     l13523:	
 11023  0D28  3004               	movlw	4
 11024  0D29  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11025  0D2A  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11026  0D2B  07CE               	addwf	rfid_comm_process_hs@i^(0+128),f
 11027  0D2C  3010               	movlw	16
 11028  0D2D  024E               	subwf	rfid_comm_process_hs@i^(0+128),w
 11029  0D2E  1C03               	skipc
 11030  0D2F  2CF8               	goto	l13515
 11031  0D30                     l13527:	
 11032                           
 11033                           ;rfid_demo.c: 161: }
 11034                           ;rfid_demo.c: 162: st_cardValueStrucrtDef* stpIncDec=(st_cardValueStrucrtDef*)comBuffer;
 11035  0D30  3070               	movlw	112
 11036  0D31  00CB               	movwf	rfid_comm_process_hs@stpIncDec^(0+128)
 11037  0D32  3023               	movlw	35
 11038  0D33  00CC               	movwf	(rfid_comm_process_hs@stpIncDec^(0+128)+1)
 11039                           
 11040                           ;rfid_demo.c: 163: m_mem_set(comBuffer,0,18);
 11041  0D34  3070               	movlw	112
 11042  0D35  00F3               	movwf	m_mem_set@buf
 11043  0D36  3023               	movlw	35
 11044  0D37  00F4               	movwf	m_mem_set@buf+1
 11045  0D38  01F5               	clrf	m_mem_set@x
 11046  0D39  3012               	movlw	18
 11047  0D3A  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11048  0D3B  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11049  0D3C  00F6               	movwf	m_mem_set@len
 11050  0D3D  319D  25F6  318C   	fcall	_m_mem_set
 11051                           
 11052                           ;rfid_demo.c: 164: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 11, (st_MifareKey*
      +                          ) defaultKeyA, &PiccUid);
 11053  0D40  300B               	movlw	11
 11054  0D41  0021               	movlb	1	; select bank1
 11055  0D42  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11056  0D43  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11057  0D44  0020               	movlb	0	; select bank0
 11058  0D45  00CB               	movwf	picc_authenticate@blockAddr
 11059  0D46  3014               	movlw	low (_defaultKeyA| (0+32768))
 11060  0D47  00CC               	movwf	picc_authenticate@key
 11061  0D48  3083               	movlw	high (_defaultKeyA| (0+32768))
 11062  0D49  00CD               	movwf	picc_authenticate@key+1
 11063  0D4A  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11064  0D4B  0021               	movlb	1	; select bank1
 11065  0D4C  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 11066  0D4D  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 11067  0D4E  0020               	movlb	0	; select bank0
 11068  0D4F  00CE               	movwf	picc_authenticate@uid
 11069  0D50  3060               	movlw	96
 11070  0D51  3196  2645  318C   	fcall	_picc_authenticate
 11071  0D54  0021               	movlb	1	; select bank1
 11072  0D55  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 11073  0D56  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 11074  0D57  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 11075                           
 11076                           ;rfid_demo.c: 165: result = mifare_write(8, comBuffer, 16);
 11077  0D58  3070               	movlw	112
 11078  0D59  0020               	movlb	0	; select bank0
 11079  0D5A  00E9               	movwf	mifare_write@buffer
 11080  0D5B  3023               	movlw	35
 11081  0D5C  00EA               	movwf	mifare_write@buffer+1
 11082  0D5D  3010               	movlw	16
 11083  0D5E  0021               	movlb	1	; select bank1
 11084  0D5F  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11085  0D60  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11086  0D61  0020               	movlb	0	; select bank0
 11087  0D62  00EB               	movwf	mifare_write@bufferSize
 11088  0D63  3008               	movlw	8
 11089  0D64  3194  2457  318C   	fcall	_mifare_write
 11090  0D67  0021               	movlb	1	; select bank1
 11091  0D68  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 11092  0D69  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 11093  0D6A  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 11094                           
 11095                           ;rfid_demo.c: 166: m_mem_set(comBuffer,0,18);
 11096  0D6B  3070               	movlw	112
 11097  0D6C  00F3               	movwf	m_mem_set@buf
 11098  0D6D  3023               	movlw	35
 11099  0D6E  00F4               	movwf	m_mem_set@buf+1
 11100  0D6F  01F5               	clrf	m_mem_set@x
 11101  0D70  3012               	movlw	18
 11102  0D71  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11103  0D72  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11104  0D73  00F6               	movwf	m_mem_set@len
 11105  0D74  319D  25F6  318C   	fcall	_m_mem_set
 11106                           
 11107                           ;rfid_demo.c: 167: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 15, (st_MifareKey*
      +                          ) defaultKeyA, &PiccUid);
 11108  0D77  300F               	movlw	15
 11109  0D78  0021               	movlb	1	; select bank1
 11110  0D79  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11111  0D7A  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11112  0D7B  0020               	movlb	0	; select bank0
 11113  0D7C  00CB               	movwf	picc_authenticate@blockAddr
 11114  0D7D  3014               	movlw	low (_defaultKeyA| (0+32768))
 11115  0D7E  00CC               	movwf	picc_authenticate@key
 11116  0D7F  3083               	movlw	high (_defaultKeyA| (0+32768))
 11117  0D80  00CD               	movwf	picc_authenticate@key+1
 11118  0D81  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11119  0D82  0021               	movlb	1	; select bank1
 11120  0D83  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 11121  0D84  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 11122  0D85  0020               	movlb	0	; select bank0
 11123  0D86  00CE               	movwf	picc_authenticate@uid
 11124  0D87  3060               	movlw	96
 11125  0D88  3196  2645  318C   	fcall	_picc_authenticate
 11126  0D8B  0021               	movlb	1	; select bank1
 11127  0D8C  00C6               	movwf	(??_rfid_comm_process_hs+2)^(0+128)
 11128  0D8D  0846               	movf	(??_rfid_comm_process_hs+2)^(0+128),w
 11129  0D8E  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 11130                           
 11131                           ;rfid_demo.c: 168: result = mifare_write(12, comBuffer, 16);
 11132  0D8F  3070               	movlw	112
 11133  0D90  0020               	movlb	0	; select bank0
 11134  0D91  00E9               	movwf	mifare_write@buffer
 11135  0D92  3023               	movlw	35
 11136  0D93  00EA               	movwf	mifare_write@buffer+1
 11137  0D94  3010               	movlw	16
 11138  0D95  0021               	movlb	1	; select bank1
 11139  0D96  00C4               	movwf	??_rfid_comm_process_hs^(0+128)
 11140  0D97  0844               	movf	??_rfid_comm_process_hs^(0+128),w
 11141  0D98  0020               	movlb	0	; select bank0
 11142  0D99  00EB               	movwf	mifare_write@bufferSize
 11143  0D9A  300C               	movlw	12
 11144  0D9B  3194  2457  318C   	fcall	_mifare_write
 11145  0D9E  0021               	movlb	1	; select bank1
 11146  0D9F  00C5               	movwf	(??_rfid_comm_process_hs+1)^(0+128)
 11147  0DA0  0845               	movf	(??_rfid_comm_process_hs+1)^(0+128),w
 11148  0DA1  00CF               	movwf	rfid_comm_process_hs@result^(0+128)
 11149                           
 11150                           ;rfid_demo.c: 170: ret=1;
 11151  0DA2  01CD               	clrf	rfid_comm_process_hs@ret^(0+128)
 11152  0DA3  0ACD               	incf	rfid_comm_process_hs@ret^(0+128),f
 11153  0DA4                     l13543:	
 11154                           ;rfid_demo.c: 171: }while(0);
 11155                           ;rfid_demo.c: 172: do{ picc_halt_a(); picc_stop_cryptol(); picc_halt_a(); }while(0);;
 11156                           
 11157  0DA4  3188  2001  318C   	fcall	_picc_halt_a
 11158  0DA7  319D  257D  318C   	fcall	_picc_stop_cryptol
 11159  0DAA  3188  2001         	fcall	_picc_halt_a
 11160                           
 11161                           ;rfid_demo.c: 173: return ret;
 11162  0DAC  0021               	movlb	1	; select bank1
 11163  0DAD  084D               	movf	rfid_comm_process_hs@ret^(0+128),w
 11164  0DAE  0008               	return
 11165  0DAF                     __end_of_rfid_comm_process_hs:	
 11166                           
 11167                           	psect	text6
 11168  0DAF                     __ptext6:	
 11169 ;; *************** function _rfid_comm_process_fk *****************
 11170 ;; Defined at:
 11171 ;;		line 67 in file "src/app/rfid_demo.c"
 11172 ;; Parameters:    Size  Location     Type
 11173 ;;		None
 11174 ;; Auto vars:     Size  Location     Type
 11175 ;;  stp             2   47[BANK1 ] PTR struct .
 11176 ;;		 -> comBuffer(128), 
 11177 ;;  stpIncDec       2   44[BANK1 ] PTR struct .
 11178 ;;		 -> comBuffer(128), 
 11179 ;;  result          1   49[BANK1 ] enum E5493
 11180 ;;  i               1   46[BANK1 ] unsigned char 
 11181 ;;  ret             1   43[BANK1 ] unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      unsigned char 
 11184 ;; Registers used:
 11185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11192 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0
 11193 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0
 11194 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0
 11195 ;;Total ram usage:       14 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    9
 11198 ;; This function calls:
 11199 ;;		_crc_append
 11200 ;;		_create_card_key_b
 11201 ;;		_m_mem_cpy_len
 11202 ;;		_m_mem_set
 11203 ;;		_mfapi_is_new_card_present
 11204 ;;		_mifare_read
 11205 ;;		_mifare_write
 11206 ;;		_picc_authenticate
 11207 ;;		_picc_halt_a
 11208 ;;		_picc_select
 11209 ;;		_picc_stop_cryptol
 11210 ;; This function is called by:
 11211 ;;		_main
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           
 11216                           ;psect for function _rfid_comm_process_fk
 11217  0DAF                     _rfid_comm_process_fk:	
 11218                           
 11219                           ;rfid_demo.c: 73: ret=0;
 11220                           
 11221                           ;incstack = 0
 11222                           ; Regs used in _rfid_comm_process_fk: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11223                           ;rfid_demo.c: 69: em_PcdStatusCode result;
 11224                           ;rfid_demo.c: 70: uint8_t ret;
 11225                           ;rfid_demo.c: 71: uint8_t i;
 11226                           ;rfid_demo.c: 72: do{
 11227  0DAF  0021               	movlb	1	; select bank1
 11228  0DB0  01CB               	clrf	rfid_comm_process_fk@ret^(0+128)
 11229                           
 11230                           ;rfid_demo.c: 74: if (!(mfapi_is_new_card_present()))break;
 11231  0DB1  3192  22FF  318D   	fcall	_mfapi_is_new_card_present
 11232  0DB4  3A00               	xorlw	0
 11233  0DB5  1903               	btfsc	3,2
 11234  0DB6  2FF5               	goto	l13445
 11235                           
 11236                           ;rfid_demo.c: 75: result = picc_select(&PiccUid, 0);
 11237  0DB7  0020               	movlb	0	; select bank0
 11238  0DB8  01CB               	clrf	picc_select@validBits
 11239  0DB9  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11240  0DBA  3183  23F2  318D   	fcall	_picc_select
 11241  0DBD  0021               	movlb	1	; select bank1
 11242  0DBE  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11243  0DBF  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11244  0DC0  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11245                           
 11246                           ;rfid_demo.c: 76: if (result != STATUS_OK)break;
 11247  0DC1  0851               	movf	rfid_comm_process_fk@result^(0+128),w
 11248  0DC2  1D03               	btfss	3,2
 11249  0DC3  2FF5               	goto	l13445
 11250                           
 11251                           ;rfid_demo.c: 78: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 3, (st_MifareKey*) 
      +                          defaultKeyA, &PiccUid);
 11252  0DC4  3003               	movlw	3
 11253  0DC5  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11254  0DC6  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11255  0DC7  0020               	movlb	0	; select bank0
 11256  0DC8  00CB               	movwf	picc_authenticate@blockAddr
 11257  0DC9  3014               	movlw	low (_defaultKeyA| (0+32768))
 11258  0DCA  00CC               	movwf	picc_authenticate@key
 11259  0DCB  3083               	movlw	high (_defaultKeyA| (0+32768))
 11260  0DCC  00CD               	movwf	picc_authenticate@key+1
 11261  0DCD  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11262  0DCE  0021               	movlb	1	; select bank1
 11263  0DCF  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11264  0DD0  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11265  0DD1  0020               	movlb	0	; select bank0
 11266  0DD2  00CE               	movwf	picc_authenticate@uid
 11267  0DD3  3060               	movlw	96
 11268  0DD4  3196  2645  318D   	fcall	_picc_authenticate
 11269  0DD7  0021               	movlb	1	; select bank1
 11270  0DD8  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11271  0DD9  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11272  0DDA  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11273                           
 11274                           ;rfid_demo.c: 79: if (result != STATUS_OK)return 0;
 11275  0DDB  0851               	movf	rfid_comm_process_fk@result^(0+128),w
 11276  0DDC  1903               	btfsc	3,2
 11277  0DDD  2DE0               	goto	l13353
 11278  0DDE  3000               	movlw	0
 11279  0DDF  0008               	return
 11280  0DE0                     l13353:	
 11281                           
 11282                           ;rfid_demo.c: 80: rdLen=18;
 11283  0DE0  3012               	movlw	18
 11284  0DE1  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11285  0DE2  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11286  0DE3  0022               	movlb	2	; select bank2
 11287  0DE4  00EB               	movwf	_rdLen^(0+256)
 11288                           
 11289                           ;rfid_demo.c: 81: result = mifare_read(0, cardUidBlockBuf, &rdLen);
 11290  0DE5  3020               	movlw	32
 11291  0DE6  0021               	movlb	1	; select bank1
 11292  0DE7  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11293  0DE8  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11294  0DE9  0020               	movlb	0	; select bank0
 11295  0DEA  00CB               	movwf	mifare_read@buffer
 11296  0DEB  306B               	movlw	(low (_rdLen| (0+256)))& (0+255)
 11297  0DEC  0021               	movlb	1	; select bank1
 11298  0DED  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11299  0DEE  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11300  0DEF  0020               	movlb	0	; select bank0
 11301  0DF0  00CC               	movwf	mifare_read@bufferSize
 11302  0DF1  3000               	movlw	0
 11303  0DF2  3195  2592  318D   	fcall	_mifare_read
 11304  0DF5  0021               	movlb	1	; select bank1
 11305  0DF6  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11306  0DF7  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11307  0DF8  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11308                           
 11309                           ;rfid_demo.c: 82: if (result != STATUS_OK) return 0;
 11310  0DF9  0851               	movf	rfid_comm_process_fk@result^(0+128),w
 11311  0DFA  1903               	btfsc	3,2
 11312  0DFB  2DFE               	goto	l13363
 11313  0DFC  3000               	movlw	0
 11314  0DFD  0008               	return
 11315  0DFE                     l13363:	
 11316                           
 11317                           ;rfid_demo.c: 84: m_mem_cpy_len(comBuffer,cardUidBlockBuf,18);
 11318  0DFE  3070               	movlw	112
 11319  0DFF  00F3               	movwf	m_mem_cpy_len@d
 11320  0E00  3023               	movlw	35
 11321  0E01  00F4               	movwf	m_mem_cpy_len@d+1
 11322  0E02  3020               	movlw	32
 11323  0E03  00F5               	movwf	m_mem_cpy_len@s
 11324  0E04  3004               	movlw	4
 11325  0E05  00F6               	movwf	m_mem_cpy_len@s+1
 11326  0E06  3012               	movlw	18
 11327  0E07  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11328  0E08  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11329  0E09  00F7               	movwf	m_mem_cpy_len@len
 11330  0E0A  319F  2756  318D   	fcall	_m_mem_cpy_len
 11331                           
 11332                           ;rfid_demo.c: 85: create_card_key_b(userKeyB,cardUidBlockBuf,(uint8_t*)cardKeyCreatKey);
 11333  0E0D  3020               	movlw	32
 11334  0E0E  0021               	movlb	1	; select bank1
 11335  0E0F  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11336  0E10  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11337  0E11  00F3               	movwf	create_card_key_b@uid
 11338  0E12  301A               	movlw	low (_cardKeyCreatKey| (0+32768))
 11339  0E13  00F4               	movwf	create_card_key_b@cckey
 11340  0E14  3083               	movlw	high (_cardKeyCreatKey| (0+32768))
 11341  0E15  00F5               	movwf	create_card_key_b@cckey+1
 11342  0E16  30D6               	movlw	(low (_userKeyB| (0+256)))& (0+255)
 11343  0E17  3191  2106  318D   	fcall	_create_card_key_b
 11344                           
 11345                           ;rfid_demo.c: 86: m_mem_set(comBuffer,0,48);
 11346  0E1A  3070               	movlw	112
 11347  0E1B  00F3               	movwf	m_mem_set@buf
 11348  0E1C  3023               	movlw	35
 11349  0E1D  00F4               	movwf	m_mem_set@buf+1
 11350  0E1E  01F5               	clrf	m_mem_set@x
 11351  0E1F  3030               	movlw	48
 11352  0E20  0021               	movlb	1	; select bank1
 11353  0E21  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11354  0E22  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11355  0E23  00F6               	movwf	m_mem_set@len
 11356  0E24  319D  25F6  318D   	fcall	_m_mem_set
 11357                           
 11358                           ;rfid_demo.c: 87: st_cardHeaderDef* stp=(st_cardHeaderDef*)comBuffer;
 11359  0E27  3070               	movlw	112
 11360  0E28  0021               	movlb	1	; select bank1
 11361  0E29  00CF               	movwf	rfid_comm_process_fk@stp^(0+128)
 11362  0E2A  3023               	movlw	35
 11363  0E2B  00D0               	movwf	(rfid_comm_process_fk@stp^(0+128)+1)
 11364                           
 11365                           ;rfid_demo.c: 88: stp->ver=100;
 11366  0E2C  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11367  0E2D  0086               	movwf	6
 11368  0E2E  0850               	movf	(rfid_comm_process_fk@stp+1)^(0+128),w
 11369  0E2F  0087               	movwf	7
 11370  0E30  3064               	movlw	100
 11371  0E31  0081               	movwf	1
 11372                           
 11373                           ;rfid_demo.c: 89: stp->cardType=0xaa;
 11374  0E32  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11375  0E33  3E01               	addlw	1
 11376  0E34  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11377  0E35  3000               	movlw	0
 11378  0E36  3D50               	addwfc	(rfid_comm_process_fk@stp+1)^(0+128),w
 11379  0E37  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11380  0E38  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11381  0E39  0086               	movwf	6
 11382  0E3A  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11383  0E3B  0087               	movwf	7
 11384  0E3C  30AA               	movlw	170
 11385  0E3D  0081               	movwf	1
 11386                           
 11387                           ;rfid_demo.c: 90: stp->deviceID=4321;
 11388  0E3E  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11389  0E3F  0086               	movwf	6
 11390  0E40  0850               	movf	(rfid_comm_process_fk@stp+1)^(0+128),w
 11391  0E41  0087               	movwf	7
 11392  0E42  3148               	addfsr 1,8
 11393  0E43  30E1               	movlw	225
 11394  0E44  3FC0               	movwi [0]fsr1
 11395  0E45  3010               	movlw	16
 11396  0E46  3FC1               	movwi [1]fsr1
 11397  0E47  3000               	movlw	0
 11398  0E48  3FC2               	movwi [2]fsr1
 11399  0E49  3000               	movlw	0
 11400  0E4A  3FC3               	movwi [3]fsr1
 11401                           
 11402                           ;rfid_demo.c: 91: stp->CompanyCode=1234;
 11403  0E4B  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11404  0E4C  0086               	movwf	6
 11405  0E4D  0850               	movf	(rfid_comm_process_fk@stp+1)^(0+128),w
 11406  0E4E  0087               	movwf	7
 11407  0E4F  3142               	addfsr 1,2
 11408  0E50  30D2               	movlw	210
 11409  0E51  3FC0               	movwi [0]fsr1
 11410  0E52  3004               	movlw	4
 11411  0E53  3FC1               	movwi [1]fsr1
 11412                           
 11413                           ;rfid_demo.c: 92: stp->keyUpdate=0xff;
 11414  0E54  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11415  0E55  3E0C               	addlw	12
 11416  0E56  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11417  0E57  3000               	movlw	0
 11418  0E58  3D50               	addwfc	(rfid_comm_process_fk@stp+1)^(0+128),w
 11419  0E59  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11420  0E5A  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11421  0E5B  0086               	movwf	6
 11422  0E5C  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11423  0E5D  0087               	movwf	7
 11424  0E5E  30FF               	movlw	255
 11425  0E5F  0081               	movwf	1
 11426                           
 11427                           ;rfid_demo.c: 93: m_mem_cpy_len(stp->cardkeyBcreatKey,(uint8_t*)cardKeyCreatKey,6);
 11428  0E60  084F               	movf	rfid_comm_process_fk@stp^(0+128),w
 11429  0E61  3E20               	addlw	32
 11430  0E62  00F3               	movwf	m_mem_cpy_len@d
 11431  0E63  3000               	movlw	0
 11432  0E64  3D50               	addwfc	(rfid_comm_process_fk@stp+1)^(0+128),w
 11433  0E65  00F4               	movwf	m_mem_cpy_len@d+1
 11434  0E66  301A               	movlw	low (_cardKeyCreatKey| (0+32768))
 11435  0E67  00F5               	movwf	m_mem_cpy_len@s
 11436  0E68  3083               	movlw	high (_cardKeyCreatKey| (0+32768))
 11437  0E69  00F6               	movwf	m_mem_cpy_len@s+1
 11438  0E6A  3006               	movlw	6
 11439  0E6B  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11440  0E6C  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11441  0E6D  00F7               	movwf	m_mem_cpy_len@len
 11442  0E6E  319F  2756  318D   	fcall	_m_mem_cpy_len
 11443                           
 11444                           ;rfid_demo.c: 94: crc_append(comBuffer,sizeof(st_cardHeaderDef)-2);
 11445  0E71  3070               	movlw	112
 11446  0E72  0020               	movlb	0	; select bank0
 11447  0E73  00AB               	movwf	crc_append@message
 11448  0E74  3023               	movlw	35
 11449  0E75  00AC               	movwf	crc_append@message+1
 11450  0E76  302E               	movlw	46
 11451  0E77  00AD               	movwf	crc_append@n
 11452  0E78  3000               	movlw	0
 11453  0E79  00AE               	movwf	crc_append@n+1
 11454  0E7A  3192  22CE  318D   	fcall	_crc_append
 11455                           
 11456                           ;rfid_demo.c: 95: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, (st_MifareKey*) 
      +                          defaultKeyA, &PiccUid);
 11457  0E7D  3007               	movlw	7
 11458  0E7E  0021               	movlb	1	; select bank1
 11459  0E7F  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11460  0E80  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11461  0E81  0020               	movlb	0	; select bank0
 11462  0E82  00CB               	movwf	picc_authenticate@blockAddr
 11463  0E83  3014               	movlw	low (_defaultKeyA| (0+32768))
 11464  0E84  00CC               	movwf	picc_authenticate@key
 11465  0E85  3083               	movlw	high (_defaultKeyA| (0+32768))
 11466  0E86  00CD               	movwf	picc_authenticate@key+1
 11467  0E87  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11468  0E88  0021               	movlb	1	; select bank1
 11469  0E89  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11470  0E8A  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11471  0E8B  0020               	movlb	0	; select bank0
 11472  0E8C  00CE               	movwf	picc_authenticate@uid
 11473  0E8D  3060               	movlw	96
 11474  0E8E  3196  2645  318D   	fcall	_picc_authenticate
 11475  0E91  0021               	movlb	1	; select bank1
 11476  0E92  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11477  0E93  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11478  0E94  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11479                           
 11480                           ;rfid_demo.c: 96: for(__t8=4;__t8<7;__t8++){
 11481  0E95  3004               	movlw	4
 11482  0E96  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11483  0E97  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11484  0E98  00E2               	movwf	___t8^(0+128)
 11485  0E99  3007               	movlw	7
 11486  0E9A  0262               	subwf	___t8^(0+128),w
 11487  0E9B  1803               	btfsc	3,0
 11488  0E9C  2EE3               	goto	l13401
 11489  0E9D                     l13391:	
 11490                           
 11491                           ;rfid_demo.c: 97: m_mem_cpy_len(cardWriteBuf,comBuffer+(__t8-4)*16,16);
 11492  0E9D  3032               	movlw	50
 11493  0E9E  00F3               	movwf	m_mem_cpy_len@d
 11494  0E9F  3004               	movlw	4
 11495  0EA0  00F4               	movwf	m_mem_cpy_len@d+1
 11496  0EA1  0862               	movf	___t8^(0+128),w
 11497  0EA2  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11498  0EA3  01C5               	clrf	(??_rfid_comm_process_fk^(0+128)+1)
 11499  0EA4  0EC4               	swapf	??_rfid_comm_process_fk^(0+128),f
 11500  0EA5  0EC5               	swapf	(??_rfid_comm_process_fk^(0+128)+1),f
 11501  0EA6  30F0               	movlw	240
 11502  0EA7  05C5               	andwf	(??_rfid_comm_process_fk^(0+128)+1),f
 11503  0EA8  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11504  0EA9  390F               	andlw	15
 11505  0EAA  04C5               	iorwf	(??_rfid_comm_process_fk^(0+128)+1),f
 11506  0EAB  30F0               	movlw	240
 11507  0EAC  05C4               	andwf	??_rfid_comm_process_fk^(0+128),f
 11508  0EAD  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11509  0EAE  3EC0               	addlw	192
 11510  0EAF  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11511  0EB0  30FF               	movlw	255
 11512  0EB1  3D45               	addwfc	(??_rfid_comm_process_fk+1)^(0+128),w
 11513  0EB2  00C7               	movwf	(??_rfid_comm_process_fk+3)^(0+128)
 11514  0EB3  3070               	movlw	112
 11515  0EB4  00C8               	movwf	(??_rfid_comm_process_fk+4)^(0+128)
 11516  0EB5  3023               	movlw	35
 11517  0EB6  00C9               	movwf	((??_rfid_comm_process_fk+4)^(0+128)+1)
 11518  0EB7  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11519  0EB8  0748               	addwf	(??_rfid_comm_process_fk+4)^(0+128),w
 11520  0EB9  00F5               	movwf	m_mem_cpy_len@s
 11521  0EBA  0847               	movf	(??_rfid_comm_process_fk+3)^(0+128),w
 11522  0EBB  3D49               	addwfc	(??_rfid_comm_process_fk+5)^(0+128),w
 11523  0EBC  00F6               	movwf	m_mem_cpy_len@s+1
 11524  0EBD  3010               	movlw	16
 11525  0EBE  00CA               	movwf	(??_rfid_comm_process_fk+6)^(0+128)
 11526  0EBF  084A               	movf	(??_rfid_comm_process_fk+6)^(0+128),w
 11527  0EC0  00F7               	movwf	m_mem_cpy_len@len
 11528  0EC1  319F  2756  318D   	fcall	_m_mem_cpy_len
 11529                           
 11530                           ;rfid_demo.c: 98: result = mifare_write(__t8, cardWriteBuf, 16);
 11531  0EC4  3032               	movlw	50
 11532  0EC5  0020               	movlb	0	; select bank0
 11533  0EC6  00E9               	movwf	mifare_write@buffer
 11534  0EC7  3004               	movlw	4
 11535  0EC8  00EA               	movwf	mifare_write@buffer+1
 11536  0EC9  3010               	movlw	16
 11537  0ECA  0021               	movlb	1	; select bank1
 11538  0ECB  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11539  0ECC  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11540  0ECD  0020               	movlb	0	; select bank0
 11541  0ECE  00EB               	movwf	mifare_write@bufferSize
 11542  0ECF  0021               	movlb	1	; select bank1
 11543  0ED0  0862               	movf	___t8^(0+128),w
 11544  0ED1  3194  2457  318D   	fcall	_mifare_write
 11545  0ED4  0021               	movlb	1	; select bank1
 11546  0ED5  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11547  0ED6  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11548  0ED7  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11549                           
 11550                           ;rfid_demo.c: 99: if(result!=STATUS_OK)break;
 11551  0ED8  0851               	movf	rfid_comm_process_fk@result^(0+128),w
 11552  0ED9  1D03               	btfss	3,2
 11553  0EDA  2EE3               	goto	l13401
 11554  0EDB  3001               	movlw	1
 11555  0EDC  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11556  0EDD  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11557  0EDE  07E2               	addwf	___t8^(0+128),f
 11558  0EDF  3007               	movlw	7
 11559  0EE0  0262               	subwf	___t8^(0+128),w
 11560  0EE1  1C03               	skipc
 11561  0EE2  2E9D               	goto	l13391
 11562  0EE3                     l13401:	
 11563                           
 11564                           ;rfid_demo.c: 100: }
 11565                           ;rfid_demo.c: 101: m_mem_cpy_len(cardWriteBuf,(uint8_t*)userKeyB,6);
 11566  0EE3  3032               	movlw	50
 11567  0EE4  00F3               	movwf	m_mem_cpy_len@d
 11568  0EE5  3004               	movlw	4
 11569  0EE6  00F4               	movwf	m_mem_cpy_len@d+1
 11570  0EE7  30D6               	movlw	low _userKeyB
 11571  0EE8  00F5               	movwf	m_mem_cpy_len@s
 11572  0EE9  3001               	movlw	high _userKeyB
 11573  0EEA  00F6               	movwf	m_mem_cpy_len@s+1
 11574  0EEB  3006               	movlw	6
 11575  0EEC  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11576  0EED  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11577  0EEE  00F7               	movwf	m_mem_cpy_len@len
 11578  0EEF  319F  2756  318D   	fcall	_m_mem_cpy_len
 11579                           
 11580                           ;rfid_demo.c: 102: m_mem_cpy_len(cardWriteBuf+6,(uint8_t*)ctrlByteDefault,4);
 11581  0EF2  3038               	movlw	56
 11582  0EF3  00F3               	movwf	m_mem_cpy_len@d
 11583  0EF4  3004               	movlw	4
 11584  0EF5  00F4               	movwf	m_mem_cpy_len@d+1
 11585  0EF6  3020               	movlw	low (_ctrlByteDefault| (0+32768))
 11586  0EF7  00F5               	movwf	m_mem_cpy_len@s
 11587  0EF8  3083               	movlw	high (_ctrlByteDefault| (0+32768))
 11588  0EF9  00F6               	movwf	m_mem_cpy_len@s+1
 11589  0EFA  3004               	movlw	4
 11590  0EFB  0021               	movlb	1	; select bank1
 11591  0EFC  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11592  0EFD  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11593  0EFE  00F7               	movwf	m_mem_cpy_len@len
 11594  0EFF  319F  2756  318D   	fcall	_m_mem_cpy_len
 11595                           
 11596                           ;rfid_demo.c: 103: m_mem_cpy_len(cardWriteBuf+10,userKeyB,6);
 11597  0F02  303C               	movlw	60
 11598  0F03  00F3               	movwf	m_mem_cpy_len@d
 11599  0F04  3004               	movlw	4
 11600  0F05  00F4               	movwf	m_mem_cpy_len@d+1
 11601  0F06  30D6               	movlw	low _userKeyB
 11602  0F07  00F5               	movwf	m_mem_cpy_len@s
 11603  0F08  3001               	movlw	high _userKeyB
 11604  0F09  00F6               	movwf	m_mem_cpy_len@s+1
 11605  0F0A  3006               	movlw	6
 11606  0F0B  0021               	movlb	1	; select bank1
 11607  0F0C  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11608  0F0D  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11609  0F0E  00F7               	movwf	m_mem_cpy_len@len
 11610  0F0F  319F  2756  318D   	fcall	_m_mem_cpy_len
 11611                           
 11612                           ;rfid_demo.c: 105: for(i=11;i<16;i+=4)
 11613  0F12  300B               	movlw	11
 11614  0F13  0021               	movlb	1	; select bank1
 11615  0F14  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11616  0F15  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11617  0F16  00CE               	movwf	rfid_comm_process_fk@i^(0+128)
 11618  0F17  3010               	movlw	16
 11619  0F18  024E               	subwf	rfid_comm_process_fk@i^(0+128),w
 11620  0F19  1803               	btfsc	3,0
 11621  0F1A  2F53               	goto	l13421
 11622  0F1B                     l13409:	
 11623                           
 11624                           ;rfid_demo.c: 106: {
 11625                           ;rfid_demo.c: 107: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A,i, (st_MifareKey*) 
      +                          defaultKeyA, &PiccUid);
 11626  0F1B  084E               	movf	rfid_comm_process_fk@i^(0+128),w
 11627  0F1C  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11628  0F1D  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11629  0F1E  0020               	movlb	0	; select bank0
 11630  0F1F  00CB               	movwf	picc_authenticate@blockAddr
 11631  0F20  3014               	movlw	low (_defaultKeyA| (0+32768))
 11632  0F21  00CC               	movwf	picc_authenticate@key
 11633  0F22  3083               	movlw	high (_defaultKeyA| (0+32768))
 11634  0F23  00CD               	movwf	picc_authenticate@key+1
 11635  0F24  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11636  0F25  0021               	movlb	1	; select bank1
 11637  0F26  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11638  0F27  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11639  0F28  0020               	movlb	0	; select bank0
 11640  0F29  00CE               	movwf	picc_authenticate@uid
 11641  0F2A  3060               	movlw	96
 11642  0F2B  3196  2645  318D   	fcall	_picc_authenticate
 11643  0F2E  0021               	movlb	1	; select bank1
 11644  0F2F  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11645  0F30  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11646  0F31  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11647                           
 11648                           ;rfid_demo.c: 108: result = mifare_write(i, cardWriteBuf, 16);
 11649  0F32  3032               	movlw	50
 11650  0F33  0020               	movlb	0	; select bank0
 11651  0F34  00E9               	movwf	mifare_write@buffer
 11652  0F35  3004               	movlw	4
 11653  0F36  00EA               	movwf	mifare_write@buffer+1
 11654  0F37  3010               	movlw	16
 11655  0F38  0021               	movlb	1	; select bank1
 11656  0F39  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11657  0F3A  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11658  0F3B  0020               	movlb	0	; select bank0
 11659  0F3C  00EB               	movwf	mifare_write@bufferSize
 11660  0F3D  0021               	movlb	1	; select bank1
 11661  0F3E  084E               	movf	rfid_comm_process_fk@i^(0+128),w
 11662  0F3F  3194  2457  318D   	fcall	_mifare_write
 11663  0F42  0021               	movlb	1	; select bank1
 11664  0F43  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11665  0F44  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11666  0F45  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11667                           
 11668                           ;rfid_demo.c: 109: if(result!=STATUS_OK)return 0;
 11669  0F46  0851               	movf	rfid_comm_process_fk@result^(0+128),w
 11670  0F47  1903               	btfsc	3,2
 11671  0F48  2F4B               	goto	l13417
 11672  0F49  3000               	movlw	0
 11673  0F4A  0008               	return
 11674  0F4B                     l13417:	
 11675  0F4B  3004               	movlw	4
 11676  0F4C  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11677  0F4D  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11678  0F4E  07CE               	addwf	rfid_comm_process_fk@i^(0+128),f
 11679  0F4F  3010               	movlw	16
 11680  0F50  024E               	subwf	rfid_comm_process_fk@i^(0+128),w
 11681  0F51  1C03               	skipc
 11682  0F52  2F1B               	goto	l13409
 11683  0F53                     l13421:	
 11684                           
 11685                           ;rfid_demo.c: 110: }
 11686                           ;rfid_demo.c: 111: st_cardValueStrucrtDef* stpIncDec=(st_cardValueStrucrtDef*)comBuffer;
 11687  0F53  3070               	movlw	112
 11688  0F54  00CC               	movwf	rfid_comm_process_fk@stpIncDec^(0+128)
 11689  0F55  3023               	movlw	35
 11690  0F56  00CD               	movwf	(rfid_comm_process_fk@stpIncDec^(0+128)+1)
 11691                           
 11692                           ;rfid_demo.c: 112: m_mem_set(comBuffer,0,18);
 11693  0F57  3070               	movlw	112
 11694  0F58  00F3               	movwf	m_mem_set@buf
 11695  0F59  3023               	movlw	35
 11696  0F5A  00F4               	movwf	m_mem_set@buf+1
 11697  0F5B  01F5               	clrf	m_mem_set@x
 11698  0F5C  3012               	movlw	18
 11699  0F5D  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11700  0F5E  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11701  0F5F  00F6               	movwf	m_mem_set@len
 11702  0F60  319D  25F6  318D   	fcall	_m_mem_set
 11703                           
 11704                           ;rfid_demo.c: 113: stpIncDec->Times=1;
 11705  0F63  0021               	movlb	1	; select bank1
 11706  0F64  084C               	movf	rfid_comm_process_fk@stpIncDec^(0+128),w
 11707  0F65  0086               	movwf	6
 11708  0F66  084D               	movf	(rfid_comm_process_fk@stpIncDec+1)^(0+128),w
 11709  0F67  0087               	movwf	7
 11710  0F68  3144               	addfsr 1,4
 11711  0F69  3001               	movlw	1
 11712  0F6A  3FC0               	movwi [0]fsr1
 11713  0F6B  3000               	movlw	0
 11714  0F6C  3FC1               	movwi [1]fsr1
 11715                           
 11716                           ;rfid_demo.c: 114: stpIncDec->Value=300000;
 11717  0F6D  084C               	movf	rfid_comm_process_fk@stpIncDec^(0+128),w
 11718  0F6E  0086               	movwf	6
 11719  0F6F  084D               	movf	(rfid_comm_process_fk@stpIncDec+1)^(0+128),w
 11720  0F70  0087               	movwf	7
 11721  0F71  30E0               	movlw	224
 11722  0F72  3FC0               	movwi [0]fsr1
 11723  0F73  3093               	movlw	147
 11724  0F74  3FC1               	movwi [1]fsr1
 11725  0F75  3004               	movlw	4
 11726  0F76  3FC2               	movwi [2]fsr1
 11727  0F77  3000               	movlw	0
 11728  0F78  3FC3               	movwi [3]fsr1
 11729                           
 11730                           ;rfid_demo.c: 115: crc_append(comBuffer,sizeof(st_cardValueStrucrtDef)-2);
 11731  0F79  3070               	movlw	112
 11732  0F7A  0020               	movlb	0	; select bank0
 11733  0F7B  00AB               	movwf	crc_append@message
 11734  0F7C  3023               	movlw	35
 11735  0F7D  00AC               	movwf	crc_append@message+1
 11736  0F7E  3006               	movlw	6
 11737  0F7F  00AD               	movwf	crc_append@n
 11738  0F80  3000               	movlw	0
 11739  0F81  00AE               	movwf	crc_append@n+1
 11740  0F82  3192  22CE  318D   	fcall	_crc_append
 11741                           
 11742                           ;rfid_demo.c: 116: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 11, (st_MifareKey*
      +                          ) userKeyB, &PiccUid);
 11743  0F85  300B               	movlw	11
 11744  0F86  0021               	movlb	1	; select bank1
 11745  0F87  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11746  0F88  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11747  0F89  0020               	movlb	0	; select bank0
 11748  0F8A  00CB               	movwf	picc_authenticate@blockAddr
 11749  0F8B  30D6               	movlw	low _userKeyB
 11750  0F8C  00CC               	movwf	picc_authenticate@key
 11751  0F8D  3001               	movlw	high _userKeyB
 11752  0F8E  00CD               	movwf	picc_authenticate@key+1
 11753  0F8F  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11754  0F90  0021               	movlb	1	; select bank1
 11755  0F91  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11756  0F92  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11757  0F93  0020               	movlb	0	; select bank0
 11758  0F94  00CE               	movwf	picc_authenticate@uid
 11759  0F95  3061               	movlw	97
 11760  0F96  3196  2645  318D   	fcall	_picc_authenticate
 11761  0F99  0021               	movlb	1	; select bank1
 11762  0F9A  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11763  0F9B  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11764  0F9C  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11765                           
 11766                           ;rfid_demo.c: 117: result = mifare_write(8, comBuffer, 16);
 11767  0F9D  3070               	movlw	112
 11768  0F9E  0020               	movlb	0	; select bank0
 11769  0F9F  00E9               	movwf	mifare_write@buffer
 11770  0FA0  3023               	movlw	35
 11771  0FA1  00EA               	movwf	mifare_write@buffer+1
 11772  0FA2  3010               	movlw	16
 11773  0FA3  0021               	movlb	1	; select bank1
 11774  0FA4  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11775  0FA5  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11776  0FA6  0020               	movlb	0	; select bank0
 11777  0FA7  00EB               	movwf	mifare_write@bufferSize
 11778  0FA8  3008               	movlw	8
 11779  0FA9  3194  2457  318D   	fcall	_mifare_write
 11780  0FAC  0021               	movlb	1	; select bank1
 11781  0FAD  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11782  0FAE  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11783  0FAF  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11784                           
 11785                           ;rfid_demo.c: 118: m_mem_set(comBuffer,0,18);
 11786  0FB0  3070               	movlw	112
 11787  0FB1  00F3               	movwf	m_mem_set@buf
 11788  0FB2  3023               	movlw	35
 11789  0FB3  00F4               	movwf	m_mem_set@buf+1
 11790  0FB4  01F5               	clrf	m_mem_set@x
 11791  0FB5  3012               	movlw	18
 11792  0FB6  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11793  0FB7  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11794  0FB8  00F6               	movwf	m_mem_set@len
 11795  0FB9  319D  25F6  318D   	fcall	_m_mem_set
 11796                           
 11797                           ;rfid_demo.c: 119: crc_append(comBuffer,sizeof(st_cardValueStrucrtDef)-2);
 11798  0FBC  3070               	movlw	112
 11799  0FBD  0020               	movlb	0	; select bank0
 11800  0FBE  00AB               	movwf	crc_append@message
 11801  0FBF  3023               	movlw	35
 11802  0FC0  00AC               	movwf	crc_append@message+1
 11803  0FC1  3006               	movlw	6
 11804  0FC2  00AD               	movwf	crc_append@n
 11805  0FC3  3000               	movlw	0
 11806  0FC4  00AE               	movwf	crc_append@n+1
 11807  0FC5  3192  22CE  318D   	fcall	_crc_append
 11808                           
 11809                           ;rfid_demo.c: 120: result = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_MifareKey*
      +                          ) userKeyB, &PiccUid);
 11810  0FC8  300F               	movlw	15
 11811  0FC9  0021               	movlb	1	; select bank1
 11812  0FCA  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11813  0FCB  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11814  0FCC  0020               	movlb	0	; select bank0
 11815  0FCD  00CB               	movwf	picc_authenticate@blockAddr
 11816  0FCE  30D6               	movlw	low _userKeyB
 11817  0FCF  00CC               	movwf	picc_authenticate@key
 11818  0FD0  3001               	movlw	high _userKeyB
 11819  0FD1  00CD               	movwf	picc_authenticate@key+1
 11820  0FD2  30CA               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 11821  0FD3  0021               	movlb	1	; select bank1
 11822  0FD4  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11823  0FD5  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11824  0FD6  0020               	movlb	0	; select bank0
 11825  0FD7  00CE               	movwf	picc_authenticate@uid
 11826  0FD8  3061               	movlw	97
 11827  0FD9  3196  2645  318D   	fcall	_picc_authenticate
 11828  0FDC  0021               	movlb	1	; select bank1
 11829  0FDD  00C6               	movwf	(??_rfid_comm_process_fk+2)^(0+128)
 11830  0FDE  0846               	movf	(??_rfid_comm_process_fk+2)^(0+128),w
 11831  0FDF  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11832                           
 11833                           ;rfid_demo.c: 121: result = mifare_write(12, comBuffer, 16);
 11834  0FE0  3070               	movlw	112
 11835  0FE1  0020               	movlb	0	; select bank0
 11836  0FE2  00E9               	movwf	mifare_write@buffer
 11837  0FE3  3023               	movlw	35
 11838  0FE4  00EA               	movwf	mifare_write@buffer+1
 11839  0FE5  3010               	movlw	16
 11840  0FE6  0021               	movlb	1	; select bank1
 11841  0FE7  00C4               	movwf	??_rfid_comm_process_fk^(0+128)
 11842  0FE8  0844               	movf	??_rfid_comm_process_fk^(0+128),w
 11843  0FE9  0020               	movlb	0	; select bank0
 11844  0FEA  00EB               	movwf	mifare_write@bufferSize
 11845  0FEB  300C               	movlw	12
 11846  0FEC  3194  2457  318D   	fcall	_mifare_write
 11847  0FEF  0021               	movlb	1	; select bank1
 11848  0FF0  00C5               	movwf	(??_rfid_comm_process_fk+1)^(0+128)
 11849  0FF1  0845               	movf	(??_rfid_comm_process_fk+1)^(0+128),w
 11850  0FF2  00D1               	movwf	rfid_comm_process_fk@result^(0+128)
 11851                           
 11852                           ;rfid_demo.c: 123: ret=1;
 11853  0FF3  01CB               	clrf	rfid_comm_process_fk@ret^(0+128)
 11854  0FF4  0ACB               	incf	rfid_comm_process_fk@ret^(0+128),f
 11855  0FF5                     l13445:	
 11856                           ;rfid_demo.c: 124: }while(0);
 11857                           ;rfid_demo.c: 125: do{ picc_halt_a(); picc_stop_cryptol(); picc_halt_a(); }while(0);;
 11858                           
 11859  0FF5  3188  2001  318D   	fcall	_picc_halt_a
 11860  0FF8  319D  257D  318D   	fcall	_picc_stop_cryptol
 11861  0FFB  3188  2001         	fcall	_picc_halt_a
 11862                           
 11863                           ;rfid_demo.c: 126: return ret;
 11864  0FFD  0021               	movlb	1	; select bank1
 11865  0FFE  084B               	movf	rfid_comm_process_fk@ret^(0+128),w
 11866  0FFF  0008               	return
 11867  1000                     __end_of_rfid_comm_process_fk:	
 11868                           
 11869                           	psect	text7
 11870  1D7D                     __ptext7:	
 11871 ;; *************** function _picc_stop_cryptol *****************
 11872 ;; Defined at:
 11873 ;;		line 308 in file "src/nfc/pal/mfrc522_picc.c"
 11874 ;; Parameters:    Size  Location     Type
 11875 ;;		None
 11876 ;; Auto vars:     Size  Location     Type
 11877 ;;		None
 11878 ;; Return value:  Size  Location     Type
 11879 ;;                  1    wreg      void 
 11880 ;; Registers used:
 11881 ;;		wreg, status,2, status,0, pclath, cstack
 11882 ;; Tracked objects:
 11883 ;;		On entry : 0/0
 11884 ;;		On exit  : 0/0
 11885 ;;		Unchanged: 0/0
 11886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11890 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11891 ;;Total ram usage:        1 bytes
 11892 ;; Hardware stack levels used:    1
 11893 ;; Hardware stack levels required when called:    5
 11894 ;; This function calls:
 11895 ;;		_mfrc522_bal_clr_bit_reg
 11896 ;; This function is called by:
 11897 ;;		_rfid_comm_process_fk
 11898 ;;		_rfid_comm_process_hs
 11899 ;; This function uses a non-reentrant model
 11900 ;;
 11901                           
 11902                           
 11903                           ;psect for function _picc_stop_cryptol
 11904  1D7D                     _picc_stop_cryptol:	
 11905                           
 11906                           ;mfrc522_picc.c: 309: mfrc522_bal_clr_bit_reg(Status2Reg, 0x08);
 11907                           
 11908                           ;incstack = 0
 11909                           ; Regs used in _picc_stop_cryptol: [wreg+status,2+status,0+pclath+cstack]
 11910  1D7D  3008               	movlw	8
 11911  1D7E  0020               	movlb	0	; select bank0
 11912  1D7F  00A6               	movwf	??_picc_stop_cryptol
 11913  1D80  0826               	movf	??_picc_stop_cryptol,w
 11914  1D81  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 11915  1D82  3008               	movlw	8
 11916  1D83  319E  26AA         	fcall	_mfrc522_bal_clr_bit_reg
 11917  1D85  0008               	return
 11918  1D86                     __end_of_picc_stop_cryptol:	
 11919                           
 11920                           	psect	text8
 11921  03F2                     __ptext8:	
 11922 ;; *************** function _picc_select *****************
 11923 ;; Defined at:
 11924 ;;		line 126 in file "src/nfc/pal/mfrc522_picc.c"
 11925 ;; Parameters:    Size  Location     Type
 11926 ;;  uid             1    wreg     PTR struct __PICC_UID
 11927 ;;		 -> PiccUid(12), 
 11928 ;;  validBits       1   43[BANK0 ] unsigned char 
 11929 ;; Auto vars:     Size  Location     Type
 11930 ;;  uid             1   29[BANK1 ] PTR struct __PICC_UID
 11931 ;;		 -> PiccUid(12), 
 11932 ;;  collisionPos    1   23[BANK1 ] unsigned char 
 11933 ;;  valueOfCollR    1   13[BANK1 ] unsigned char 
 11934 ;;  maxBytes        1   12[BANK1 ] unsigned char 
 11935 ;;  bytesToCopy     1   27[BANK1 ] unsigned char 
 11936 ;;  buffer          9   14[BANK1 ] unsigned char [9]
 11937 ;;  currentLevel    1   35[BANK1 ] unsigned char 
 11938 ;;  index           1   34[BANK1 ] unsigned char 
 11939 ;;  count           1   33[BANK1 ] unsigned char 
 11940 ;;  result          1   32[BANK1 ] enum E5272
 11941 ;;  txLastBits      1   31[BANK1 ] unsigned char 
 11942 ;;  responseBuff    1   30[BANK1 ] PTR unsigned char 
 11943 ;;		 -> picc_select@buffer(9), 
 11944 ;;  responseLeng    1   28[BANK1 ] unsigned char 
 11945 ;;  uidIndex        1   26[BANK1 ] unsigned char 
 11946 ;;  cascadeLevel    1   25[BANK1 ] unsigned char 
 11947 ;;  useCascadeTa    1   24[BANK1 ] unsigned char 
 11948 ;;  rxAlign         1   11[BANK1 ] unsigned char 
 11949 ;;  bufferUsed      1    8[BANK1 ] unsigned char 
 11950 ;;  selectDone      1    7[BANK1 ] unsigned char 
 11951 ;;  uidComplete     1    6[BANK1 ] unsigned char 
 11952 ;; Return value:  Size  Location     Type
 11953 ;;                  1    wreg      enum E5493
 11954 ;; Registers used:
 11955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11956 ;; Tracked objects:
 11957 ;;		On entry : 0/0
 11958 ;;		On exit  : 0/0
 11959 ;;		Unchanged: 0/0
 11960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11961 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11962 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0
 11963 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 11964 ;;      Totals:         0       6      36       0       0       0       0       0       0       0       0       0       
      +0
 11965 ;;Total ram usage:       42 bytes
 11966 ;; Hardware stack levels used:    1
 11967 ;; Hardware stack levels required when called:    7
 11968 ;; This function calls:
 11969 ;;		___awdiv
 11970 ;;		___bmul
 11971 ;;		_mfrc522_bal_clr_bit_reg
 11972 ;;		_mfrc522_bal_read_reg
 11973 ;;		_mfrc522_bal_write_reg
 11974 ;;		_mfrc522_hal_calculate_crc
 11975 ;;		_pcd_comm_with_picc
 11976 ;; This function is called by:
 11977 ;;		_rfid_comm_process_fk
 11978 ;;		_rfid_comm_process_hs
 11979 ;; This function uses a non-reentrant model
 11980 ;;
 11981                           
 11982                           
 11983                           ;psect for function _picc_select
 11984  03F2                     _picc_select:	
 11985                           
 11986                           ;incstack = 0
 11987                           ; Regs used in _picc_select: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11988                           ;picc_select@uid stored from wreg
 11989  03F2  0021               	movlb	1	; select bank1
 11990  03F3  00BD               	movwf	picc_select@uid^(0+128)
 11991                           
 11992                           ;mfrc522_picc.c: 127: bool uidComplete;
 11993                           ;mfrc522_picc.c: 128: bool selectDone;
 11994                           ;mfrc522_picc.c: 129: bool useCascadeTag;
 11995                           ;mfrc522_picc.c: 130: uint8_t cascadeLevel = 1;
 11996  03F4  01B9               	clrf	picc_select@cascadeLevel^(0+128)
 11997  03F5  0AB9               	incf	picc_select@cascadeLevel^(0+128),f
 11998                           
 11999                           ;mfrc522_picc.c: 131: em_PcdStatusCode result;
 12000                           ;mfrc522_picc.c: 132: uint8_t count;
 12001                           ;mfrc522_picc.c: 133: uint8_t index;
 12002                           ;mfrc522_picc.c: 134: uint8_t uidIndex;
 12003                           ;mfrc522_picc.c: 135: uint8_t currentLevelKnownBits;
 12004                           ;mfrc522_picc.c: 136: uint8_t buffer[9];
 12005                           ;mfrc522_picc.c: 137: uint8_t bufferUsed;
 12006                           ;mfrc522_picc.c: 138: uint8_t rxAlign;
 12007                           ;mfrc522_picc.c: 139: uint8_t txLastBits;
 12008                           ;mfrc522_picc.c: 140: uint8_t *responseBuffer;
 12009                           ;mfrc522_picc.c: 141: uint8_t responseLength;
 12010                           ;mfrc522_picc.c: 144: if (validBits > 80) return STATUS_INVALID;
 12011  03F6  3051               	movlw	81
 12012  03F7  0020               	movlb	0	; select bank0
 12013  03F8  024B               	subwf	picc_select@validBits,w
 12014  03F9  1C03               	skipc
 12015  03FA  2BFD               	goto	l12221
 12016  03FB  3006               	movlw	6
 12017  03FC  0008               	return
 12018  03FD                     l12221:	
 12019                           
 12020                           ;mfrc522_picc.c: 145: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 12021  03FD  3080               	movlw	128
 12022  03FE  00CC               	movwf	??_picc_select
 12023  03FF  084C               	movf	??_picc_select,w
 12024  0400  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 12025  0401  300E               	movlw	14
 12026  0402  319E  26AA  3183   	fcall	_mfrc522_bal_clr_bit_reg
 12027                           
 12028                           ;mfrc522_picc.c: 146: uidComplete = 0;
 12029  0405  0021               	movlb	1	; select bank1
 12030  0406  01A6               	clrf	picc_select@uidComplete^(0+128)
 12031  0407                     l12445:	
 12032                           ;mfrc522_picc.c: 147: while (!uidComplete) {
 12033                           
 12034  0407  0021               	movlb	1	; select bank1
 12035  0408  0826               	movf	picc_select@uidComplete^(0+128),w
 12036  0409  1D03               	btfss	3,2
 12037  040A  2EF9               	goto	l12447
 12038                           
 12039                           ;mfrc522_picc.c: 148: if (cascadeLevel == 1) {
 12040  040B  0339               	decf	picc_select@cascadeLevel^(0+128),w
 12041  040C  1D03               	btfss	3,2
 12042  040D  2C28               	goto	l12241
 12043                           
 12044                           ;mfrc522_picc.c: 149: buffer[0] = PICC_CMD_SEL_CL1;
 12045  040E  3093               	movlw	147
 12046  040F  0020               	movlb	0	; select bank0
 12047  0410  00CC               	movwf	??_picc_select
 12048  0411  084C               	movf	??_picc_select,w
 12049  0412  0021               	movlb	1	; select bank1
 12050  0413  00AE               	movwf	picc_select@buffer^(0+128)
 12051                           
 12052                           ;mfrc522_picc.c: 150: uidIndex = 0;
 12053  0414  01BA               	clrf	picc_select@uidIndex^(0+128)
 12054                           
 12055                           ;mfrc522_picc.c: 151: useCascadeTag = validBits && uid->size > 4;
 12056  0415  01A9               	clrf	_picc_select$3167^(0+128)
 12057  0416  0020               	movlb	0	; select bank0
 12058  0417  084B               	movf	picc_select@validBits,w
 12059  0418  1903               	btfsc	3,2
 12060  0419  2C25               	goto	l12239
 12061  041A  0021               	movlb	1	; select bank1
 12062  041B  083D               	movf	picc_select@uid^(0+128),w
 12063  041C  0086               	movwf	6
 12064  041D  3001               	movlw	1	; select bank2/3
 12065  041E  0087               	movwf	7
 12066  041F  3005               	movlw	5
 12067  0420  0201               	subwf	1,w
 12068  0421  1C03               	skipc
 12069  0422  2C25               	goto	l12239
 12070  0423  01A9               	clrf	_picc_select$3167^(0+128)
 12071  0424  0AA9               	incf	_picc_select$3167^(0+128),f
 12072  0425                     l12239:	
 12073  0425  0021               	movlb	1	; select bank1
 12074  0426  0829               	movf	_picc_select$3167^(0+128),w
 12075  0427  2C4A               	goto	L2
 12076  0428                     l12241:	
 12077                           ;mfrc522_picc.c: 152: } else if (cascadeLevel == 2) {
 12078                           
 12079  0428  3002               	movlw	2
 12080  0429  0639               	xorwf	picc_select@cascadeLevel^(0+128),w
 12081  042A  1D03               	btfss	3,2
 12082  042B  2C50               	goto	l12255
 12083                           
 12084                           ;mfrc522_picc.c: 153: buffer[0] = PICC_CMD_SEL_CL2;
 12085  042C  3095               	movlw	149
 12086  042D  0020               	movlb	0	; select bank0
 12087  042E  00CC               	movwf	??_picc_select
 12088  042F  084C               	movf	??_picc_select,w
 12089  0430  0021               	movlb	1	; select bank1
 12090  0431  00AE               	movwf	picc_select@buffer^(0+128)
 12091                           
 12092                           ;mfrc522_picc.c: 154: uidIndex = 3;
 12093  0432  3003               	movlw	3
 12094  0433  0020               	movlb	0	; select bank0
 12095  0434  00CC               	movwf	??_picc_select
 12096  0435  084C               	movf	??_picc_select,w
 12097  0436  0021               	movlb	1	; select bank1
 12098  0437  00BA               	movwf	picc_select@uidIndex^(0+128)
 12099                           
 12100                           ;mfrc522_picc.c: 155: useCascadeTag = validBits && uid->size > 7;
 12101  0438  01AA               	clrf	_picc_select$3168^(0+128)
 12102  0439  0020               	movlb	0	; select bank0
 12103  043A  084B               	movf	picc_select@validBits,w
 12104  043B  1903               	btfsc	3,2
 12105  043C  2C48               	goto	l12253
 12106  043D  0021               	movlb	1	; select bank1
 12107  043E  083D               	movf	picc_select@uid^(0+128),w
 12108  043F  0086               	movwf	6
 12109  0440  3001               	movlw	1	; select bank2/3
 12110  0441  0087               	movwf	7
 12111  0442  3008               	movlw	8
 12112  0443  0201               	subwf	1,w
 12113  0444  1C03               	skipc
 12114  0445  2C48               	goto	l12253
 12115  0446  01AA               	clrf	_picc_select$3168^(0+128)
 12116  0447  0AAA               	incf	_picc_select$3168^(0+128),f
 12117  0448                     l12253:	
 12118  0448  0021               	movlb	1	; select bank1
 12119  0449  082A               	movf	_picc_select$3168^(0+128),w
 12120  044A                     L2:	
 12121  044A  0020               	movlb	0	; select bank0
 12122  044B  00CC               	movwf	??_picc_select
 12123  044C  084C               	movf	??_picc_select,w
 12124  044D  0021               	movlb	1	; select bank1
 12125  044E  00B8               	movwf	picc_select@useCascadeTag^(0+128)
 12126                           
 12127                           ;mfrc522_picc.c: 156: } else if (cascadeLevel == 3) {
 12128  044F  2C64               	goto	l12265
 12129  0450                     l12255:	
 12130  0450  3003               	movlw	3
 12131  0451  0639               	xorwf	picc_select@cascadeLevel^(0+128),w
 12132  0452  1D03               	btfss	3,2
 12133  0453  2C62               	goto	l12261
 12134                           
 12135                           ;mfrc522_picc.c: 157: buffer[0] = PICC_CMD_SEL_CL3;
 12136  0454  3097               	movlw	151
 12137  0455  0020               	movlb	0	; select bank0
 12138  0456  00CC               	movwf	??_picc_select
 12139  0457  084C               	movf	??_picc_select,w
 12140  0458  0021               	movlb	1	; select bank1
 12141  0459  00AE               	movwf	picc_select@buffer^(0+128)
 12142                           
 12143                           ;mfrc522_picc.c: 158: uidIndex = 6;
 12144  045A  3006               	movlw	6
 12145  045B  0020               	movlb	0	; select bank0
 12146  045C  00CC               	movwf	??_picc_select
 12147  045D  084C               	movf	??_picc_select,w
 12148  045E  0021               	movlb	1	; select bank1
 12149  045F  00BA               	movwf	picc_select@uidIndex^(0+128)
 12150                           
 12151                           ;mfrc522_picc.c: 159: useCascadeTag = 0;
 12152  0460  01B8               	clrf	picc_select@useCascadeTag^(0+128)
 12153                           
 12154                           ;mfrc522_picc.c: 160: } else {
 12155  0461  2C64               	goto	l12265
 12156  0462                     l12261:	
 12157                           
 12158                           ;mfrc522_picc.c: 161: return STATUS_INTERNAL_ERROR;
 12159  0462  3005               	movlw	5
 12160  0463  0008               	return
 12161  0464                     l12265:	
 12162                           
 12163                           ;mfrc522_picc.c: 162: }
 12164                           ;mfrc522_picc.c: 164: if (validBits < (8 * uidIndex)) {
 12165  0464  083A               	movf	picc_select@uidIndex^(0+128),w
 12166  0465  0020               	movlb	0	; select bank0
 12167  0466  00CC               	movwf	??_picc_select
 12168  0467  01CD               	clrf	??_picc_select+1
 12169  0468  35CC               	lslf	??_picc_select,f
 12170  0469  0DCD               	rlf	??_picc_select+1,f
 12171  046A  35CC               	lslf	??_picc_select,f
 12172  046B  0DCD               	rlf	??_picc_select+1,f
 12173  046C  35CC               	lslf	??_picc_select,f
 12174  046D  0DCD               	rlf	??_picc_select+1,f
 12175  046E  084D               	movf	??_picc_select+1,w
 12176  046F  3A80               	xorlw	128
 12177  0470  3C80               	sublw	128
 12178  0471  1D03               	skipz
 12179  0472  2C75               	goto	u10605
 12180  0473  084C               	movf	??_picc_select,w
 12181  0474  024B               	subwf	picc_select@validBits,w
 12182  0475                     u10605:	
 12183  0475  1803               	skipnc
 12184  0476  2C7A               	goto	l12269
 12185                           
 12186                           ;mfrc522_picc.c: 165: currentLevelKnownBits = 0;
 12187  0477  0021               	movlb	1	; select bank1
 12188  0478  01C3               	clrf	picc_select@currentLevelKnownBits^(0+128)
 12189                           
 12190                           ;mfrc522_picc.c: 166: } else {
 12191  0479  2C8B               	goto	l12271
 12192  047A                     l12269:	
 12193                           
 12194                           ;mfrc522_picc.c: 167: currentLevelKnownBits = validBits - (8 * uidIndex);
 12195  047A  0021               	movlb	1	; select bank1
 12196  047B  083A               	movf	picc_select@uidIndex^(0+128),w
 12197  047C  0020               	movlb	0	; select bank0
 12198  047D  00CC               	movwf	??_picc_select
 12199  047E  3002               	movlw	2
 12200  047F                     u10615:	
 12201  047F  35CC               	lslf	??_picc_select,f
 12202  0480  3EFF               	addlw	-1
 12203  0481  1D03               	skipz
 12204  0482  2C7F               	goto	u10615
 12205  0483  354C               	lslf	??_picc_select,w
 12206  0484  3AFF               	xorlw	255
 12207  0485  3E01               	addlw	1
 12208  0486  074B               	addwf	picc_select@validBits,w
 12209  0487  00CD               	movwf	??_picc_select+1
 12210  0488  084D               	movf	??_picc_select+1,w
 12211  0489  0021               	movlb	1	; select bank1
 12212  048A  00C3               	movwf	picc_select@currentLevelKnownBits^(0+128)
 12213  048B                     l12271:	
 12214                           
 12215                           ;mfrc522_picc.c: 168: }
 12216                           ;mfrc522_picc.c: 169: index = 2;
 12217  048B  3002               	movlw	2
 12218  048C  0020               	movlb	0	; select bank0
 12219  048D  00CC               	movwf	??_picc_select
 12220  048E  084C               	movf	??_picc_select,w
 12221  048F  0021               	movlb	1	; select bank1
 12222  0490  00C2               	movwf	picc_select@index^(0+128)
 12223                           
 12224                           ;mfrc522_picc.c: 170: if (useCascadeTag) {
 12225  0491  0838               	movf	picc_select@useCascadeTag^(0+128),w
 12226  0492  1903               	btfsc	3,2
 12227  0493  2CA4               	goto	l12279
 12228                           
 12229                           ;mfrc522_picc.c: 171: buffer[index++] = PICC_CMD_CT;
 12230  0494  3088               	movlw	136
 12231  0495  0020               	movlb	0	; select bank0
 12232  0496  00CC               	movwf	??_picc_select
 12233  0497  0021               	movlb	1	; select bank1
 12234  0498  0842               	movf	picc_select@index^(0+128),w
 12235  0499  3EAE               	addlw	(low (picc_select@buffer| 0))& (0+255)
 12236  049A  0086               	movwf	6
 12237  049B  0187               	clrf	7
 12238  049C  0020               	movlb	0	; select bank0
 12239  049D  084C               	movf	??_picc_select,w
 12240  049E  0081               	movwf	1
 12241  049F  3001               	movlw	1
 12242  04A0  00CC               	movwf	??_picc_select
 12243  04A1  084C               	movf	??_picc_select,w
 12244  04A2  0021               	movlb	1	; select bank1
 12245  04A3  07C2               	addwf	picc_select@index^(0+128),f
 12246  04A4                     l12279:	
 12247                           
 12248                           ;mfrc522_picc.c: 172: }
 12249                           ;mfrc522_picc.c: 173: uint8_t bytesToCopy;
 12250                           ;mfrc522_picc.c: 174: bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits %
      +                           8 ? 1 : 0);
 12251  04A4  3008               	movlw	8
 12252  04A5  00F3               	movwf	___awdiv@divisor
 12253  04A6  3000               	movlw	0
 12254  04A7  00F4               	movwf	___awdiv@divisor+1
 12255  04A8  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12256  04A9  0020               	movlb	0	; select bank0
 12257  04AA  00CC               	movwf	??_picc_select
 12258  04AB  01CD               	clrf	??_picc_select+1
 12259  04AC  084C               	movf	??_picc_select,w
 12260  04AD  00F5               	movwf	___awdiv@dividend
 12261  04AE  084D               	movf	??_picc_select+1,w
 12262  04AF  00F6               	movwf	___awdiv@dividend+1
 12263  04B0  3195  2540  3183   	fcall	___awdiv
 12264  04B3  0873               	movf	?___awdiv,w
 12265  04B4  0020               	movlb	0	; select bank0
 12266  04B5  00CE               	movwf	??_picc_select+2
 12267  04B6  0874               	movf	?___awdiv+1,w
 12268  04B7  00CF               	movwf	??_picc_select+3
 12269  04B8  0021               	movlb	1	; select bank1
 12270  04B9  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12271  04BA  3907               	andlw	7
 12272  04BB  1903               	btfsc	3,2
 12273  04BC  2CBF               	goto	u10630
 12274  04BD  3001               	movlw	1
 12275  04BE  2CC0               	goto	u10640
 12276  04BF                     u10630:	
 12277  04BF  3000               	movlw	0
 12278  04C0                     u10640:	
 12279  04C0  0020               	movlb	0	; select bank0
 12280  04C1  074E               	addwf	??_picc_select+2,w
 12281  04C2  00D0               	movwf	??_picc_select+4
 12282  04C3  0850               	movf	??_picc_select+4,w
 12283  04C4  0021               	movlb	1	; select bank1
 12284  04C5  00BB               	movwf	picc_select@bytesToCopy^(0+128)
 12285                           
 12286                           ;mfrc522_picc.c: 175: if (bytesToCopy) {
 12287  04C6  083B               	movf	picc_select@bytesToCopy^(0+128),w
 12288  04C7  1903               	btfsc	3,2
 12289  04C8  2D07               	goto	l12301
 12290                           
 12291                           ;mfrc522_picc.c: 176: uint8_t maxBytes = useCascadeTag ? 3 : 4;
 12292  04C9  0838               	movf	picc_select@useCascadeTag^(0+128),w
 12293  04CA  1D03               	btfss	3,2
 12294  04CB  2CCE               	goto	l12287
 12295  04CC  3004               	movlw	4
 12296  04CD  2CCF               	goto	L3
 12297  04CE                     l12287:	
 12298  04CE  3003               	movlw	3
 12299  04CF                     L3:	
 12300  04CF  00A0               	movwf	_picc_select$3171^(0+128)
 12301  04D0  3000               	movlw	0
 12302  04D1  00A1               	movwf	(_picc_select$3171^(0+128)+1)
 12303  04D2  0820               	movf	_picc_select$3171^(0+128),w
 12304  04D3  0020               	movlb	0	; select bank0
 12305  04D4  00CC               	movwf	??_picc_select
 12306  04D5  084C               	movf	??_picc_select,w
 12307  04D6  0021               	movlb	1	; select bank1
 12308  04D7  00AC               	movwf	picc_select@maxBytes^(0+128)
 12309                           
 12310                           ;mfrc522_picc.c: 177: if (bytesToCopy > maxBytes) {
 12311  04D8  083B               	movf	picc_select@bytesToCopy^(0+128),w
 12312  04D9  022C               	subwf	picc_select@maxBytes^(0+128),w
 12313  04DA  1803               	skipnc
 12314  04DB  2CE2               	goto	l12291
 12315                           
 12316                           ;mfrc522_picc.c: 178: bytesToCopy = maxBytes;
 12317  04DC  082C               	movf	picc_select@maxBytes^(0+128),w
 12318  04DD  0020               	movlb	0	; select bank0
 12319  04DE  00CC               	movwf	??_picc_select
 12320  04DF  084C               	movf	??_picc_select,w
 12321  04E0  0021               	movlb	1	; select bank1
 12322  04E1  00BB               	movwf	picc_select@bytesToCopy^(0+128)
 12323  04E2                     l12291:	
 12324                           
 12325                           ;mfrc522_picc.c: 179: }
 12326                           ;mfrc522_picc.c: 180: for (count = 0; count < bytesToCopy; count++) {
 12327  04E2  01C1               	clrf	picc_select@count^(0+128)
 12328  04E3                     l12299:	
 12329  04E3  083B               	movf	picc_select@bytesToCopy^(0+128),w
 12330  04E4  0241               	subwf	picc_select@count^(0+128),w
 12331  04E5  1803               	btfsc	3,0
 12332  04E6  2D07               	goto	l12301
 12333                           
 12334                           ;mfrc522_picc.c: 181: buffer[index++] = uid->uidByte[uidIndex + count];
 12335  04E7  083A               	movf	picc_select@uidIndex^(0+128),w
 12336  04E8  0741               	addwf	picc_select@count^(0+128),w
 12337  04E9  3E01               	addlw	1
 12338  04EA  073D               	addwf	picc_select@uid^(0+128),w
 12339  04EB  0020               	movlb	0	; select bank0
 12340  04EC  00CC               	movwf	??_picc_select
 12341  04ED  084C               	movf	??_picc_select,w
 12342  04EE  0086               	movwf	6
 12343  04EF  3001               	movlw	1	; select bank2/3
 12344  04F0  0087               	movwf	7
 12345  04F1  0801               	movf	1,w
 12346  04F2  00CD               	movwf	??_picc_select+1
 12347  04F3  0021               	movlb	1	; select bank1
 12348  04F4  0842               	movf	picc_select@index^(0+128),w
 12349  04F5  3EAE               	addlw	(low (picc_select@buffer| 0))& (0+255)
 12350  04F6  0086               	movwf	6
 12351  04F7  0187               	clrf	7
 12352  04F8  0020               	movlb	0	; select bank0
 12353  04F9  084D               	movf	??_picc_select+1,w
 12354  04FA  0081               	movwf	1
 12355  04FB  3001               	movlw	1
 12356  04FC  00CC               	movwf	??_picc_select
 12357  04FD  084C               	movf	??_picc_select,w
 12358  04FE  0021               	movlb	1	; select bank1
 12359  04FF  07C2               	addwf	picc_select@index^(0+128),f
 12360  0500  3001               	movlw	1
 12361  0501  0020               	movlb	0	; select bank0
 12362  0502  00CC               	movwf	??_picc_select
 12363  0503  084C               	movf	??_picc_select,w
 12364  0504  0021               	movlb	1	; select bank1
 12365  0505  07C1               	addwf	picc_select@count^(0+128),f
 12366  0506  2CE3               	goto	l12299
 12367  0507                     l12301:	
 12368                           
 12369                           ;mfrc522_picc.c: 182: }
 12370                           ;mfrc522_picc.c: 183: }
 12371                           ;mfrc522_picc.c: 184: if (useCascadeTag) {
 12372  0507  0838               	movf	picc_select@useCascadeTag^(0+128),w
 12373  0508  1903               	btfsc	3,2
 12374  0509  2D10               	goto	l12305
 12375                           
 12376                           ;mfrc522_picc.c: 185: currentLevelKnownBits += 8;
 12377  050A  3008               	movlw	8
 12378  050B  0020               	movlb	0	; select bank0
 12379  050C  00CC               	movwf	??_picc_select
 12380  050D  084C               	movf	??_picc_select,w
 12381  050E  0021               	movlb	1	; select bank1
 12382  050F  07C3               	addwf	picc_select@currentLevelKnownBits^(0+128),f
 12383  0510                     l12305:	
 12384                           
 12385                           ;mfrc522_picc.c: 186: }
 12386                           ;mfrc522_picc.c: 188: selectDone = 0;
 12387  0510  01A7               	clrf	picc_select@selectDone^(0+128)
 12388  0511                     l12391:	
 12389                           ;mfrc522_picc.c: 189: while (!selectDone) {
 12390                           
 12391  0511  0021               	movlb	1	; select bank1
 12392  0512  0827               	movf	picc_select@selectDone^(0+128),w
 12393  0513  1D03               	btfss	3,2
 12394  0514  2E65               	goto	l12393
 12395                           
 12396                           ;mfrc522_picc.c: 190: if (currentLevelKnownBits >= 32) {
 12397  0515  3020               	movlw	32
 12398  0516  0243               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 12399  0517  1C03               	skipc
 12400  0518  2D51               	goto	l12329
 12401                           
 12402                           ;mfrc522_picc.c: 192: buffer[1] = 0x70;
 12403  0519  3070               	movlw	112
 12404  051A  0020               	movlb	0	; select bank0
 12405  051B  00CC               	movwf	??_picc_select
 12406  051C  084C               	movf	??_picc_select,w
 12407  051D  0021               	movlb	1	; select bank1
 12408  051E  00AF               	movwf	(picc_select@buffer^(0+128)+1)
 12409                           
 12410                           ;mfrc522_picc.c: 193: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 12411  051F  0830               	movf	(picc_select@buffer^(0+128)+2),w
 12412  0520  0631               	xorwf	(picc_select@buffer^(0+128)+3),w
 12413  0521  0632               	xorwf	(picc_select@buffer^(0+128)+4),w
 12414  0522  0633               	xorwf	(picc_select@buffer^(0+128)+5),w
 12415  0523  0020               	movlb	0	; select bank0
 12416  0524  00CC               	movwf	??_picc_select
 12417  0525  084C               	movf	??_picc_select,w
 12418  0526  0021               	movlb	1	; select bank1
 12419  0527  00B4               	movwf	(picc_select@buffer^(0+128)+6)
 12420                           
 12421                           ;mfrc522_picc.c: 194: result = mfrc522_hal_calculate_crc(buffer, 7, &buffer[7]);
 12422  0528  30AE               	movlw	low picc_select@buffer
 12423  0529  0020               	movlb	0	; select bank0
 12424  052A  00A6               	movwf	mfrc522_hal_calculate_crc@data
 12425  052B  3000               	movlw	high picc_select@buffer
 12426  052C  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 12427  052D  3007               	movlw	7
 12428  052E  00CC               	movwf	??_picc_select
 12429  052F  084C               	movf	??_picc_select,w
 12430  0530  00A8               	movwf	mfrc522_hal_calculate_crc@length
 12431  0531  30B5               	movlw	low (picc_select@buffer+7)
 12432  0532  00A9               	movwf	mfrc522_hal_calculate_crc@result
 12433  0533  3000               	movlw	high (picc_select@buffer+7)
 12434  0534  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 12435  0535  3197  2719  3183   	fcall	_mfrc522_hal_calculate_crc
 12436  0538  0020               	movlb	0	; select bank0
 12437  0539  00CD               	movwf	??_picc_select+1
 12438  053A  084D               	movf	??_picc_select+1,w
 12439  053B  0021               	movlb	1	; select bank1
 12440  053C  00C0               	movwf	picc_select@result^(0+128)
 12441                           
 12442                           ;mfrc522_picc.c: 195: if (result != STATUS_OK) {
 12443  053D  0840               	movf	picc_select@result^(0+128),w
 12444  053E  1903               	btfsc	3,2
 12445  053F  2D42               	goto	l12321
 12446                           
 12447                           ;mfrc522_picc.c: 196: return result;
 12448  0540  0840               	movf	picc_select@result^(0+128),w
 12449  0541  0008               	return
 12450  0542                     l12321:	
 12451                           
 12452                           ;mfrc522_picc.c: 197: }
 12453                           ;mfrc522_picc.c: 198: txLastBits = 0;
 12454  0542  01BF               	clrf	picc_select@txLastBits^(0+128)
 12455                           
 12456                           ;mfrc522_picc.c: 199: bufferUsed = 9;
 12457  0543  3009               	movlw	9
 12458  0544  0020               	movlb	0	; select bank0
 12459  0545  00CC               	movwf	??_picc_select
 12460  0546  084C               	movf	??_picc_select,w
 12461  0547  0021               	movlb	1	; select bank1
 12462  0548  00A8               	movwf	picc_select@bufferUsed^(0+128)
 12463                           
 12464                           ;mfrc522_picc.c: 201: responseBuffer = &buffer[6];
 12465  0549  30B4               	movlw	(low ((picc_select@buffer| 0+6)))& (0+255)
 12466  054A  0020               	movlb	0	; select bank0
 12467  054B  00CC               	movwf	??_picc_select
 12468  054C  084C               	movf	??_picc_select,w
 12469  054D  0021               	movlb	1	; select bank1
 12470  054E  00BE               	movwf	picc_select@responseBuffer^(0+128)
 12471                           
 12472                           ;mfrc522_picc.c: 202: responseLength = 3;
 12473  054F  3003               	movlw	3
 12474  0550  2D9A               	goto	L4
 12475  0551                     l12329:	
 12476                           ;mfrc522_picc.c: 203: } else {
 12477                           
 12478                           
 12479                           ;mfrc522_picc.c: 204: txLastBits = currentLevelKnownBits % 8;
 12480  0551  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12481  0552  3907               	andlw	7
 12482  0553  0020               	movlb	0	; select bank0
 12483  0554  00CC               	movwf	??_picc_select
 12484  0555  084C               	movf	??_picc_select,w
 12485  0556  0021               	movlb	1	; select bank1
 12486  0557  00BF               	movwf	picc_select@txLastBits^(0+128)
 12487                           
 12488                           ;mfrc522_picc.c: 205: count = currentLevelKnownBits / 8;
 12489  0558  3008               	movlw	8
 12490  0559  00F3               	movwf	___awdiv@divisor
 12491  055A  3000               	movlw	0
 12492  055B  00F4               	movwf	___awdiv@divisor+1
 12493  055C  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12494  055D  0020               	movlb	0	; select bank0
 12495  055E  00CC               	movwf	??_picc_select
 12496  055F  01CD               	clrf	??_picc_select+1
 12497  0560  084C               	movf	??_picc_select,w
 12498  0561  00F5               	movwf	___awdiv@dividend
 12499  0562  084D               	movf	??_picc_select+1,w
 12500  0563  00F6               	movwf	___awdiv@dividend+1
 12501  0564  3195  2540  3183   	fcall	___awdiv
 12502  0567  0873               	movf	?___awdiv,w
 12503  0568  0020               	movlb	0	; select bank0
 12504  0569  00CE               	movwf	??_picc_select+2
 12505  056A  084E               	movf	??_picc_select+2,w
 12506  056B  0021               	movlb	1	; select bank1
 12507  056C  00C1               	movwf	picc_select@count^(0+128)
 12508                           
 12509                           ;mfrc522_picc.c: 206: index = 2 + count;
 12510  056D  0841               	movf	picc_select@count^(0+128),w
 12511  056E  3E02               	addlw	2
 12512  056F  0020               	movlb	0	; select bank0
 12513  0570  00CC               	movwf	??_picc_select
 12514  0571  084C               	movf	??_picc_select,w
 12515  0572  0021               	movlb	1	; select bank1
 12516  0573  00C2               	movwf	picc_select@index^(0+128)
 12517                           
 12518                           ;mfrc522_picc.c: 207: buffer[1] = (index << 4) + txLastBits;
 12519  0574  0842               	movf	picc_select@index^(0+128),w
 12520  0575  0020               	movlb	0	; select bank0
 12521  0576  00CC               	movwf	??_picc_select
 12522  0577  3003               	movlw	3
 12523  0578                     u10725:	
 12524  0578  35CC               	lslf	??_picc_select,f
 12525  0579  3EFF               	addlw	-1
 12526  057A  1D03               	skipz
 12527  057B  2D78               	goto	u10725
 12528  057C  354C               	lslf	??_picc_select,w
 12529  057D  0021               	movlb	1	; select bank1
 12530  057E  073F               	addwf	picc_select@txLastBits^(0+128),w
 12531  057F  0020               	movlb	0	; select bank0
 12532  0580  00CD               	movwf	??_picc_select+1
 12533  0581  084D               	movf	??_picc_select+1,w
 12534  0582  0021               	movlb	1	; select bank1
 12535  0583  00AF               	movwf	(picc_select@buffer^(0+128)+1)
 12536                           
 12537                           ;mfrc522_picc.c: 208: bufferUsed = index + (txLastBits ? 1 : 0);
 12538  0584  083F               	movf	picc_select@txLastBits^(0+128),w
 12539  0585  1903               	btfsc	3,2
 12540  0586  2D89               	goto	u10730
 12541  0587  3001               	movlw	1
 12542  0588  2D8A               	goto	u10740
 12543  0589                     u10730:	
 12544  0589  3000               	movlw	0
 12545  058A                     u10740:	
 12546  058A  0742               	addwf	picc_select@index^(0+128),w
 12547  058B  0020               	movlb	0	; select bank0
 12548  058C  00CC               	movwf	??_picc_select
 12549  058D  084C               	movf	??_picc_select,w
 12550  058E  0021               	movlb	1	; select bank1
 12551  058F  00A8               	movwf	picc_select@bufferUsed^(0+128)
 12552                           
 12553                           ;mfrc522_picc.c: 209: responseBuffer = &buffer[index];
 12554  0590  0842               	movf	picc_select@index^(0+128),w
 12555  0591  3EAE               	addlw	(low (picc_select@buffer| 0))& (0+255)
 12556  0592  0020               	movlb	0	; select bank0
 12557  0593  00CC               	movwf	??_picc_select
 12558  0594  084C               	movf	??_picc_select,w
 12559  0595  0021               	movlb	1	; select bank1
 12560  0596  00BE               	movwf	picc_select@responseBuffer^(0+128)
 12561                           
 12562                           ;mfrc522_picc.c: 210: responseLength = sizeof (buffer) - index;
 12563  0597  0342               	decf	picc_select@index^(0+128),w
 12564  0598  3AFF               	xorlw	255
 12565  0599  3E09               	addlw	9
 12566  059A                     L4:	
 12567  059A  0020               	movlb	0	; select bank0
 12568  059B  00CC               	movwf	??_picc_select
 12569  059C  084C               	movf	??_picc_select,w
 12570  059D  0021               	movlb	1	; select bank1
 12571  059E  00BC               	movwf	picc_select@responseLength^(0+128)
 12572                           
 12573                           ;mfrc522_picc.c: 211: }
 12574                           ;mfrc522_picc.c: 213: rxAlign = txLastBits;
 12575  059F  083F               	movf	picc_select@txLastBits^(0+128),w
 12576  05A0  0020               	movlb	0	; select bank0
 12577  05A1  00CC               	movwf	??_picc_select
 12578  05A2  084C               	movf	??_picc_select,w
 12579  05A3  0021               	movlb	1	; select bank1
 12580  05A4  00AB               	movwf	picc_select@rxAlign^(0+128)
 12581                           
 12582                           ;mfrc522_picc.c: 214: mfrc522_bal_write_reg(BitFramingReg, (rxAlign << 4) + txLastBits);
 12583  05A5  082B               	movf	picc_select@rxAlign^(0+128),w
 12584  05A6  0020               	movlb	0	; select bank0
 12585  05A7  00CC               	movwf	??_picc_select
 12586  05A8  3003               	movlw	3
 12587  05A9                     u10755:	
 12588  05A9  35CC               	lslf	??_picc_select,f
 12589  05AA  3EFF               	addlw	-1
 12590  05AB  1D03               	skipz
 12591  05AC  2DA9               	goto	u10755
 12592  05AD  354C               	lslf	??_picc_select,w
 12593  05AE  0021               	movlb	1	; select bank1
 12594  05AF  073F               	addwf	picc_select@txLastBits^(0+128),w
 12595  05B0  0020               	movlb	0	; select bank0
 12596  05B1  00CD               	movwf	??_picc_select+1
 12597  05B2  084D               	movf	??_picc_select+1,w
 12598  05B3  00F7               	movwf	mfrc522_bal_write_reg@x
 12599  05B4  300D               	movlw	13
 12600  05B5  319E  2639  3183   	fcall	_mfrc522_bal_write_reg
 12601                           
 12602                           ;mfrc522_picc.c: 217: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, bufferUsed
      +                          , responseBuffer, &responseLength, &txLastBits, rxAlign, 0);
 12603  05B8  3030               	movlw	48
 12604  05B9  0020               	movlb	0	; select bank0
 12605  05BA  00CC               	movwf	??_picc_select
 12606  05BB  084C               	movf	??_picc_select,w
 12607  05BC  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 12608  05BD  30AE               	movlw	low picc_select@buffer
 12609  05BE  00B2               	movwf	pcd_comm_with_picc@sbuf
 12610  05BF  3000               	movlw	high picc_select@buffer
 12611  05C0  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 12612  05C1  0021               	movlb	1	; select bank1
 12613  05C2  0828               	movf	picc_select@bufferUsed^(0+128),w
 12614  05C3  0020               	movlb	0	; select bank0
 12615  05C4  00CD               	movwf	??_picc_select+1
 12616  05C5  084D               	movf	??_picc_select+1,w
 12617  05C6  00B4               	movwf	pcd_comm_with_picc@slen
 12618  05C7  0021               	movlb	1	; select bank1
 12619  05C8  083E               	movf	picc_select@responseBuffer^(0+128),w
 12620  05C9  0020               	movlb	0	; select bank0
 12621  05CA  00B5               	movwf	pcd_comm_with_picc@rbuf
 12622  05CB  3000               	movlw	0
 12623  05CC  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 12624  05CD  30BC               	movlw	low picc_select@responseLength
 12625  05CE  00B7               	movwf	pcd_comm_with_picc@rlen
 12626  05CF  3000               	movlw	high picc_select@responseLength
 12627  05D0  00B8               	movwf	pcd_comm_with_picc@rlen+1
 12628  05D1  30BF               	movlw	(low (picc_select@txLastBits| 0))& (0+255)
 12629  05D2  00CE               	movwf	??_picc_select+2
 12630  05D3  084E               	movf	??_picc_select+2,w
 12631  05D4  00B9               	movwf	pcd_comm_with_picc@validBits
 12632  05D5  0021               	movlb	1	; select bank1
 12633  05D6  082B               	movf	picc_select@rxAlign^(0+128),w
 12634  05D7  0020               	movlb	0	; select bank0
 12635  05D8  00CF               	movwf	??_picc_select+3
 12636  05D9  084F               	movf	??_picc_select+3,w
 12637  05DA  00BA               	movwf	pcd_comm_with_picc@rxAlign
 12638  05DB  01BB               	clrf	pcd_comm_with_picc@checkCRC
 12639  05DC  300C               	movlw	12
 12640  05DD  318A  22B5  3183   	fcall	_pcd_comm_with_picc
 12641  05E0  0020               	movlb	0	; select bank0
 12642  05E1  00D0               	movwf	??_picc_select+4
 12643  05E2  0850               	movf	??_picc_select+4,w
 12644  05E3  0021               	movlb	1	; select bank1
 12645  05E4  00C0               	movwf	picc_select@result^(0+128)
 12646                           
 12647                           ;mfrc522_picc.c: 218: if (result == STATUS_COLLISION) {
 12648  05E5  3002               	movlw	2
 12649  05E6  0640               	xorwf	picc_select@result^(0+128),w
 12650  05E7  1D03               	btfss	3,2
 12651  05E8  2E51               	goto	l12377
 12652                           
 12653                           ;mfrc522_picc.c: 219: uint8_t valueOfCollReg = mfrc522_bal_read_reg(CollReg);
 12654  05E9  300E               	movlw	14
 12655  05EA  319F  2709  3183   	fcall	_mfrc522_bal_read_reg
 12656  05ED  0020               	movlb	0	; select bank0
 12657  05EE  00CC               	movwf	??_picc_select
 12658  05EF  084C               	movf	??_picc_select,w
 12659  05F0  0021               	movlb	1	; select bank1
 12660  05F1  00AD               	movwf	picc_select@valueOfCollReg^(0+128)
 12661                           
 12662                           ;mfrc522_picc.c: 220: if (valueOfCollReg & 0x20) {
 12663  05F2  1EAD               	btfss	picc_select@valueOfCollReg^(0+128),5
 12664  05F3  2DF6               	goto	l12359
 12665                           
 12666                           ;mfrc522_picc.c: 221: return STATUS_COLLISION;
 12667  05F4  3002               	movlw	2
 12668  05F5  0008               	return
 12669  05F6                     l12359:	
 12670                           
 12671                           ;mfrc522_picc.c: 222: }
 12672                           ;mfrc522_picc.c: 223: uint8_t collisionPos = valueOfCollReg & 0x1F;
 12673  05F6  082D               	movf	picc_select@valueOfCollReg^(0+128),w
 12674  05F7  391F               	andlw	31
 12675  05F8  0020               	movlb	0	; select bank0
 12676  05F9  00CC               	movwf	??_picc_select
 12677  05FA  084C               	movf	??_picc_select,w
 12678  05FB  0021               	movlb	1	; select bank1
 12679  05FC  00B7               	movwf	picc_select@collisionPos^(0+128)
 12680                           
 12681                           ;mfrc522_picc.c: 224: if (collisionPos == 0) {
 12682  05FD  0837               	movf	picc_select@collisionPos^(0+128),w
 12683  05FE  1D03               	btfss	3,2
 12684  05FF  2E06               	goto	l2244
 12685                           
 12686                           ;mfrc522_picc.c: 225: collisionPos = 32;
 12687  0600  3020               	movlw	32
 12688  0601  0020               	movlb	0	; select bank0
 12689  0602  00CC               	movwf	??_picc_select
 12690  0603  084C               	movf	??_picc_select,w
 12691  0604  0021               	movlb	1	; select bank1
 12692  0605  00B7               	movwf	picc_select@collisionPos^(0+128)
 12693  0606                     l2244:	
 12694                           
 12695                           ;mfrc522_picc.c: 226: }
 12696                           ;mfrc522_picc.c: 227: if (collisionPos <= currentLevelKnownBits) {
 12697  0606  0837               	movf	picc_select@collisionPos^(0+128),w
 12698  0607  0243               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 12699  0608  1C03               	skipc
 12700  0609  2E0C               	goto	l12369
 12701                           
 12702                           ;mfrc522_picc.c: 228: return STATUS_INTERNAL_ERROR;
 12703  060A  3005               	movlw	5
 12704  060B  0008               	return
 12705  060C                     l12369:	
 12706                           
 12707                           ;mfrc522_picc.c: 229: }
 12708                           ;mfrc522_picc.c: 230: currentLevelKnownBits = collisionPos;
 12709  060C  0837               	movf	picc_select@collisionPos^(0+128),w
 12710  060D  0020               	movlb	0	; select bank0
 12711  060E  00CC               	movwf	??_picc_select
 12712  060F  084C               	movf	??_picc_select,w
 12713  0610  0021               	movlb	1	; select bank1
 12714  0611  00C3               	movwf	picc_select@currentLevelKnownBits^(0+128)
 12715                           
 12716                           ;mfrc522_picc.c: 231: count = (currentLevelKnownBits - 1) % 8;
 12717  0612  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12718  0613  3EFF               	addlw	255
 12719  0614  3907               	andlw	7
 12720  0615  0020               	movlb	0	; select bank0
 12721  0616  00CC               	movwf	??_picc_select
 12722  0617  084C               	movf	??_picc_select,w
 12723  0618  0021               	movlb	1	; select bank1
 12724  0619  00C1               	movwf	picc_select@count^(0+128)
 12725                           
 12726                           ;mfrc522_picc.c: 232: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
 12727  061A  3008               	movlw	8
 12728  061B  00F3               	movwf	___awdiv@divisor
 12729  061C  3000               	movlw	0
 12730  061D  00F4               	movwf	___awdiv@divisor+1
 12731  061E  0843               	movf	picc_select@currentLevelKnownBits^(0+128),w
 12732  061F  0020               	movlb	0	; select bank0
 12733  0620  00CC               	movwf	??_picc_select
 12734  0621  01CD               	clrf	??_picc_select+1
 12735  0622  084C               	movf	??_picc_select,w
 12736  0623  00F5               	movwf	___awdiv@dividend
 12737  0624  084D               	movf	??_picc_select+1,w
 12738  0625  00F6               	movwf	___awdiv@dividend+1
 12739  0626  3195  2540  3183   	fcall	___awdiv
 12740  0629  0873               	movf	?___awdiv,w
 12741  062A  0020               	movlb	0	; select bank0
 12742  062B  00CE               	movwf	??_picc_select+2
 12743  062C  0874               	movf	?___awdiv+1,w
 12744  062D  00CF               	movwf	??_picc_select+3
 12745  062E  0021               	movlb	1	; select bank1
 12746  062F  0841               	movf	picc_select@count^(0+128),w
 12747  0630  1903               	btfsc	3,2
 12748  0631  2E34               	goto	u10800
 12749  0632  3001               	movlw	1
 12750  0633  2E35               	goto	u10810
 12751  0634                     u10800:	
 12752  0634  3000               	movlw	0
 12753  0635                     u10810:	
 12754  0635  0020               	movlb	0	; select bank0
 12755  0636  074E               	addwf	??_picc_select+2,w
 12756  0637  3E01               	addlw	1
 12757  0638  00D0               	movwf	??_picc_select+4
 12758  0639  0850               	movf	??_picc_select+4,w
 12759  063A  0021               	movlb	1	; select bank1
 12760  063B  00C2               	movwf	picc_select@index^(0+128)
 12761                           
 12762                           ;mfrc522_picc.c: 233: buffer[index] |= (1 << count);
 12763  063C  3001               	movlw	1
 12764  063D  0020               	movlb	0	; select bank0
 12765  063E  00CC               	movwf	??_picc_select
 12766  063F  0021               	movlb	1	; select bank1
 12767  0640  0A41               	incf	picc_select@count^(0+128),w
 12768  0641  0020               	movlb	0	; select bank0
 12769  0642  2E44               	goto	u10824
 12770  0643                     u10825:	
 12771  0643  35CC               	lslf	??_picc_select,f
 12772  0644                     u10824:	
 12773  0644  0B89               	decfsz	9,f
 12774  0645  2E43               	goto	u10825
 12775  0646  084C               	movf	??_picc_select,w
 12776  0647  00CD               	movwf	??_picc_select+1
 12777  0648  0021               	movlb	1	; select bank1
 12778  0649  0842               	movf	picc_select@index^(0+128),w
 12779  064A  3EAE               	addlw	(low (picc_select@buffer| 0))& (0+255)
 12780  064B  0086               	movwf	6
 12781  064C  0187               	clrf	7
 12782  064D  0020               	movlb	0	; select bank0
 12783  064E  084D               	movf	??_picc_select+1,w
 12784  064F  0481               	iorwf	1,f
 12785                           
 12786                           ;mfrc522_picc.c: 234: } else if (result != STATUS_OK) {
 12787  0650  2D11               	goto	l12391
 12788  0651                     l12377:	
 12789  0651  0021               	movlb	1	; select bank1
 12790  0652  0840               	movf	picc_select@result^(0+128),w
 12791  0653  1903               	btfsc	3,2
 12792  0654  2E57               	goto	l12385
 12793                           
 12794                           ;mfrc522_picc.c: 235: return result;
 12795  0655  0840               	movf	picc_select@result^(0+128),w
 12796  0656  0008               	return
 12797  0657                     l12385:	
 12798                           ;mfrc522_picc.c: 236: } else {
 12799                           
 12800                           
 12801                           ;mfrc522_picc.c: 237: if (currentLevelKnownBits >= 32) {
 12802  0657  3020               	movlw	32
 12803  0658  0243               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 12804  0659  1C03               	skipc
 12805  065A  2E5E               	goto	l12389
 12806                           
 12807                           ;mfrc522_picc.c: 238: selectDone = 1;
 12808  065B  01A7               	clrf	picc_select@selectDone^(0+128)
 12809  065C  0AA7               	incf	picc_select@selectDone^(0+128),f
 12810                           
 12811                           ;mfrc522_picc.c: 239: } else {
 12812  065D  2D11               	goto	l12391
 12813  065E                     l12389:	
 12814                           
 12815                           ;mfrc522_picc.c: 240: currentLevelKnownBits = 32;
 12816  065E  3020               	movlw	32
 12817  065F  0020               	movlb	0	; select bank0
 12818  0660  00CC               	movwf	??_picc_select
 12819  0661  084C               	movf	??_picc_select,w
 12820  0662  0021               	movlb	1	; select bank1
 12821  0663  00C3               	movwf	picc_select@currentLevelKnownBits^(0+128)
 12822  0664  2D11               	goto	l12391
 12823  0665                     l12393:	
 12824                           
 12825                           ;mfrc522_picc.c: 241: }
 12826                           ;mfrc522_picc.c: 242: }
 12827                           ;mfrc522_picc.c: 243: }
 12828                           ;mfrc522_picc.c: 244: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
 12829  0665  3088               	movlw	136
 12830  0666  0630               	xorwf	(picc_select@buffer^(0+128)+2),w
 12831  0667  1903               	btfsc	3,2
 12832  0668  2E6B               	goto	l12397
 12833  0669  3002               	movlw	2
 12834  066A  2E6C               	goto	L5
 12835  066B                     l12397:	
 12836  066B  3003               	movlw	3
 12837  066C                     L5:	
 12838  066C  00A2               	movwf	_picc_select$3174^(0+128)
 12839  066D  3000               	movlw	0
 12840  066E  00A3               	movwf	(_picc_select$3174^(0+128)+1)
 12841  066F  0822               	movf	_picc_select$3174^(0+128),w
 12842  0670  0020               	movlb	0	; select bank0
 12843  0671  00CC               	movwf	??_picc_select
 12844  0672  084C               	movf	??_picc_select,w
 12845  0673  0021               	movlb	1	; select bank1
 12846  0674  00C2               	movwf	picc_select@index^(0+128)
 12847                           
 12848                           ;mfrc522_picc.c: 245: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 12849  0675  3088               	movlw	136
 12850  0676  0630               	xorwf	(picc_select@buffer^(0+128)+2),w
 12851  0677  1903               	btfsc	3,2
 12852  0678  2E7B               	goto	l12403
 12853  0679  3004               	movlw	4
 12854  067A  2E7C               	goto	L6
 12855  067B                     l12403:	
 12856  067B  3003               	movlw	3
 12857  067C                     L6:	
 12858  067C  00A4               	movwf	_picc_select$3175^(0+128)
 12859  067D  3000               	movlw	0
 12860  067E  00A5               	movwf	(_picc_select$3175^(0+128)+1)
 12861  067F  0824               	movf	_picc_select$3175^(0+128),w
 12862  0680  0020               	movlb	0	; select bank0
 12863  0681  00CC               	movwf	??_picc_select
 12864  0682  084C               	movf	??_picc_select,w
 12865  0683  0021               	movlb	1	; select bank1
 12866  0684  00BB               	movwf	picc_select@bytesToCopy^(0+128)
 12867                           
 12868                           ;mfrc522_picc.c: 246: for (count = 0; count < bytesToCopy; count++) {
 12869  0685  01C1               	clrf	picc_select@count^(0+128)
 12870  0686                     l12413:	
 12871  0686  083B               	movf	picc_select@bytesToCopy^(0+128),w
 12872  0687  0241               	subwf	picc_select@count^(0+128),w
 12873  0688  1803               	btfsc	3,0
 12874  0689  2EAA               	goto	l12415
 12875                           
 12876                           ;mfrc522_picc.c: 247: uid->uidByte[uidIndex + count] = buffer[index++];
 12877  068A  0842               	movf	picc_select@index^(0+128),w
 12878  068B  3EAE               	addlw	(low (picc_select@buffer| 0))& (0+255)
 12879  068C  0086               	movwf	6
 12880  068D  0187               	clrf	7
 12881  068E  0801               	movf	1,w
 12882  068F  0020               	movlb	0	; select bank0
 12883  0690  00CC               	movwf	??_picc_select
 12884  0691  0021               	movlb	1	; select bank1
 12885  0692  083A               	movf	picc_select@uidIndex^(0+128),w
 12886  0693  0741               	addwf	picc_select@count^(0+128),w
 12887  0694  3E01               	addlw	1
 12888  0695  073D               	addwf	picc_select@uid^(0+128),w
 12889  0696  0020               	movlb	0	; select bank0
 12890  0697  00CD               	movwf	??_picc_select+1
 12891  0698  084D               	movf	??_picc_select+1,w
 12892  0699  0086               	movwf	6
 12893  069A  3001               	movlw	1	; select bank2/3
 12894  069B  0087               	movwf	7
 12895  069C  084C               	movf	??_picc_select,w
 12896  069D  0081               	movwf	1
 12897  069E  3001               	movlw	1
 12898  069F  00CC               	movwf	??_picc_select
 12899  06A0  084C               	movf	??_picc_select,w
 12900  06A1  0021               	movlb	1	; select bank1
 12901  06A2  07C2               	addwf	picc_select@index^(0+128),f
 12902  06A3  3001               	movlw	1
 12903  06A4  0020               	movlb	0	; select bank0
 12904  06A5  00CC               	movwf	??_picc_select
 12905  06A6  084C               	movf	??_picc_select,w
 12906  06A7  0021               	movlb	1	; select bank1
 12907  06A8  07C1               	addwf	picc_select@count^(0+128),f
 12908  06A9  2E86               	goto	l12413
 12909  06AA                     l12415:	
 12910                           
 12911                           ;mfrc522_picc.c: 248: }
 12912                           ;mfrc522_picc.c: 249: if (responseLength != 3 || txLastBits != 0) {
 12913  06AA  3003               	movlw	3
 12914  06AB  063C               	xorwf	picc_select@responseLength^(0+128),w
 12915  06AC  1903               	btfsc	3,2
 12916  06AD  083F               	movf	picc_select@txLastBits^(0+128),w
 12917  06AE  1903               	btfsc	3,2
 12918  06AF  2EB2               	goto	l12423
 12919                           
 12920                           ;mfrc522_picc.c: 250: return STATUS_ERROR;
 12921  06B0  3001               	movlw	1
 12922  06B1  0008               	return
 12923  06B2                     l12423:	
 12924                           
 12925                           ;mfrc522_picc.c: 251: }
 12926                           ;mfrc522_picc.c: 252: result = mfrc522_hal_calculate_crc(responseBuffer, 1, &buffer[2]);
 12927  06B2  083E               	movf	picc_select@responseBuffer^(0+128),w
 12928  06B3  0020               	movlb	0	; select bank0
 12929  06B4  00A6               	movwf	mfrc522_hal_calculate_crc@data
 12930  06B5  3000               	movlw	0
 12931  06B6  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 12932  06B7  01A8               	clrf	mfrc522_hal_calculate_crc@length
 12933  06B8  0AA8               	incf	mfrc522_hal_calculate_crc@length,f
 12934  06B9  30B0               	movlw	low (picc_select@buffer+2)
 12935  06BA  00A9               	movwf	mfrc522_hal_calculate_crc@result
 12936  06BB  3000               	movlw	high (picc_select@buffer+2)
 12937  06BC  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 12938  06BD  3197  2719  3183   	fcall	_mfrc522_hal_calculate_crc
 12939  06C0  0020               	movlb	0	; select bank0
 12940  06C1  00CC               	movwf	??_picc_select
 12941  06C2  084C               	movf	??_picc_select,w
 12942  06C3  0021               	movlb	1	; select bank1
 12943  06C4  00C0               	movwf	picc_select@result^(0+128)
 12944                           
 12945                           ;mfrc522_picc.c: 253: if (result != STATUS_OK) {
 12946  06C5  0840               	movf	picc_select@result^(0+128),w
 12947  06C6  1903               	btfsc	3,2
 12948  06C7  2ECA               	goto	l12431
 12949                           
 12950                           ;mfrc522_picc.c: 254: return result;
 12951  06C8  0840               	movf	picc_select@result^(0+128),w
 12952  06C9  0008               	return
 12953  06CA                     l12431:	
 12954                           
 12955                           ;mfrc522_picc.c: 255: }
 12956                           ;mfrc522_picc.c: 256: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuff
      +                          er[2])) {
 12957  06CA  0A3E               	incf	picc_select@responseBuffer^(0+128),w
 12958  06CB  0086               	movwf	6
 12959  06CC  0187               	clrf	7
 12960  06CD  0830               	movf	(picc_select@buffer^(0+128)+2),w
 12961  06CE  0601               	xorwf	1,w
 12962  06CF  1D03               	skipz
 12963  06D0  2ED9               	goto	l12435
 12964  06D1  083E               	movf	picc_select@responseBuffer^(0+128),w
 12965  06D2  3E02               	addlw	2
 12966  06D3  0086               	movwf	6
 12967  06D4  0187               	clrf	7
 12968  06D5  0831               	movf	(picc_select@buffer^(0+128)+3),w
 12969  06D6  0601               	xorwf	1,w
 12970  06D7  1903               	skipnz
 12971  06D8  2EDB               	goto	l12439
 12972  06D9                     l12435:	
 12973                           
 12974                           ;mfrc522_picc.c: 257: return STATUS_CRC_WRONG;
 12975  06D9  3007               	movlw	7
 12976  06DA  0008               	return
 12977  06DB                     l12439:	
 12978                           
 12979                           ;mfrc522_picc.c: 258: }
 12980                           ;mfrc522_picc.c: 259: if (responseBuffer[0] & 0x04) {
 12981  06DB  083E               	movf	picc_select@responseBuffer^(0+128),w
 12982  06DC  0086               	movwf	6
 12983  06DD  0187               	clrf	7
 12984  06DE  1D01               	btfss	1,2
 12985  06DF  2EE7               	goto	l2270
 12986                           
 12987                           ;mfrc522_picc.c: 260: cascadeLevel++;
 12988  06E0  3001               	movlw	1
 12989  06E1  0020               	movlb	0	; select bank0
 12990  06E2  00CC               	movwf	??_picc_select
 12991  06E3  084C               	movf	??_picc_select,w
 12992  06E4  0021               	movlb	1	; select bank1
 12993  06E5  07B9               	addwf	picc_select@cascadeLevel^(0+128),f
 12994                           
 12995                           ;mfrc522_picc.c: 261: } else {
 12996  06E6  2C07               	goto	l12445
 12997  06E7                     l2270:	
 12998                           
 12999                           ;mfrc522_picc.c: 262: uidComplete = 1;
 13000  06E7  01A6               	clrf	picc_select@uidComplete^(0+128)
 13001  06E8  0AA6               	incf	picc_select@uidComplete^(0+128),f
 13002                           
 13003                           ;mfrc522_picc.c: 264: uid->sak = responseBuffer[0];
 13004  06E9  083E               	movf	picc_select@responseBuffer^(0+128),w
 13005  06EA  0086               	movwf	6
 13006  06EB  0187               	clrf	7
 13007  06EC  0801               	movf	1,w
 13008  06ED  0020               	movlb	0	; select bank0
 13009  06EE  00CC               	movwf	??_picc_select
 13010  06EF  0021               	movlb	1	; select bank1
 13011  06F0  083D               	movf	picc_select@uid^(0+128),w
 13012  06F1  3E0B               	addlw	11
 13013  06F2  0086               	movwf	6
 13014  06F3  3001               	movlw	1	; select bank2/3
 13015  06F4  0087               	movwf	7
 13016  06F5  0020               	movlb	0	; select bank0
 13017  06F6  084C               	movf	??_picc_select,w
 13018  06F7  0081               	movwf	1
 13019  06F8  2C07               	goto	l12445
 13020  06F9                     l12447:	
 13021                           
 13022                           ;mfrc522_picc.c: 266: }
 13023                           ;mfrc522_picc.c: 267: }
 13024                           ;mfrc522_picc.c: 268: uid->size = 3 * cascadeLevel + 1;
 13025  06F9  3003               	movlw	3
 13026  06FA  0020               	movlb	0	; select bank0
 13027  06FB  00CC               	movwf	??_picc_select
 13028  06FC  084C               	movf	??_picc_select,w
 13029  06FD  00F3               	movwf	___bmul@multiplicand
 13030  06FE  0021               	movlb	1	; select bank1
 13031  06FF  0839               	movf	picc_select@cascadeLevel^(0+128),w
 13032  0700  319E  265B         	fcall	___bmul
 13033  0702  3E01               	addlw	1
 13034  0703  0020               	movlb	0	; select bank0
 13035  0704  00CD               	movwf	??_picc_select+1
 13036  0705  0021               	movlb	1	; select bank1
 13037  0706  083D               	movf	picc_select@uid^(0+128),w
 13038  0707  0086               	movwf	6
 13039  0708  3001               	movlw	1	; select bank2/3
 13040  0709  0087               	movwf	7
 13041  070A  0020               	movlb	0	; select bank0
 13042  070B  084D               	movf	??_picc_select+1,w
 13043  070C  0081               	movwf	1
 13044                           
 13045                           ;mfrc522_picc.c: 269: return STATUS_OK;
 13046  070D  3000               	movlw	0
 13047  070E  0008               	return
 13048  070F                     __end_of_picc_select:	
 13049                           
 13050                           	psect	text9
 13051  1E5B                     __ptext9:	
 13052 ;; *************** function ___bmul *****************
 13053 ;; Defined at:
 13054 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul8.c"
 13055 ;; Parameters:    Size  Location     Type
 13056 ;;  multiplier      1    wreg     unsigned char 
 13057 ;;  multiplicand    1    3[COMMON] unsigned char 
 13058 ;; Auto vars:     Size  Location     Type
 13059 ;;  multiplier      1    6[COMMON] unsigned char 
 13060 ;;  product         1    5[COMMON] unsigned char 
 13061 ;; Return value:  Size  Location     Type
 13062 ;;                  1    wreg      unsigned char 
 13063 ;; Registers used:
 13064 ;;		wreg, status,2, status,0
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13070 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13072 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13073 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13074 ;;Total ram usage:        4 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:    2
 13077 ;; This function calls:
 13078 ;;		Nothing
 13079 ;; This function is called by:
 13080 ;;		_picc_select
 13081 ;;		_lcd_set_com_seg
 13082 ;; This function uses a non-reentrant model
 13083 ;;
 13084                           
 13085                           
 13086                           ;psect for function ___bmul
 13087  1E5B                     ___bmul:	
 13088                           
 13089                           ;incstack = 0
 13090                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 13091                           ;___bmul@multiplier stored from wreg
 13092  1E5B  00F6               	movwf	___bmul@multiplier
 13093  1E5C  01F5               	clrf	___bmul@product
 13094  1E5D                     l8327:	
 13095  1E5D  1C76               	btfss	___bmul@multiplier,0
 13096  1E5E  2E63               	goto	l8331
 13097  1E5F  0873               	movf	___bmul@multiplicand,w
 13098  1E60  00F4               	movwf	??___bmul
 13099  1E61  0874               	movf	??___bmul,w
 13100  1E62  07F5               	addwf	___bmul@product,f
 13101  1E63                     l8331:	
 13102  1E63  1003               	clrc
 13103  1E64  0DF3               	rlf	___bmul@multiplicand,f
 13104  1E65  1003               	clrc
 13105  1E66  0CF6               	rrf	___bmul@multiplier,f
 13106  1E67  0876               	movf	___bmul@multiplier,w
 13107  1E68  1D03               	btfss	3,2
 13108  1E69  2E5D               	goto	l8327
 13109  1E6A  0875               	movf	___bmul@product,w
 13110  1E6B  0008               	return
 13111  1E6C                     __end_of___bmul:	
 13112                           
 13113                           	psect	text10
 13114  1540                     __ptext10:	
 13115 ;; *************** function ___awdiv *****************
 13116 ;; Defined at:
 13117 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
 13118 ;; Parameters:    Size  Location     Type
 13119 ;;  divisor         2    3[COMMON] int 
 13120 ;;  dividend        2    5[COMMON] int 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;  quotient        2    2[BANK0 ] int 
 13123 ;;  sign            1    1[BANK0 ] unsigned char 
 13124 ;;  counter         1    0[BANK0 ] unsigned char 
 13125 ;; Return value:  Size  Location     Type
 13126 ;;                  2    3[COMMON] int 
 13127 ;; Registers used:
 13128 ;;		wreg, status,2, status,0
 13129 ;; Tracked objects:
 13130 ;;		On entry : 0/0
 13131 ;;		On exit  : 0/0
 13132 ;;		Unchanged: 0/0
 13133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13134 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13135 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13136 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13137 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13138 ;;Total ram usage:        9 bytes
 13139 ;; Hardware stack levels used:    1
 13140 ;; Hardware stack levels required when called:    2
 13141 ;; This function calls:
 13142 ;;		Nothing
 13143 ;; This function is called by:
 13144 ;;		_picc_select
 13145 ;;		_ui_disp_set_calib
 13146 ;;		_ui_key_process_enter
 13147 ;;		_ui_key_set_process
 13148 ;;		_btea
 13149 ;;		_lcd_set_com_seg
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function ___awdiv
 13155  1540                     ___awdiv:	
 13156                           
 13157                           ;incstack = 0
 13158                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13159  1540  0020               	movlb	0	; select bank0
 13160  1541  01A1               	clrf	___awdiv@sign
 13161  1542  1FF4               	btfss	___awdiv@divisor+1,7
 13162  1543  2D4B               	goto	l8347
 13163  1544  09F3               	comf	___awdiv@divisor,f
 13164  1545  09F4               	comf	___awdiv@divisor+1,f
 13165  1546  0AF3               	incf	___awdiv@divisor,f
 13166  1547  1903               	skipnz
 13167  1548  0AF4               	incf	___awdiv@divisor+1,f
 13168  1549  01A1               	clrf	___awdiv@sign
 13169  154A  0AA1               	incf	___awdiv@sign,f
 13170  154B                     l8347:	
 13171  154B  1FF6               	btfss	___awdiv@dividend+1,7
 13172  154C  2D56               	goto	l8353
 13173  154D  09F5               	comf	___awdiv@dividend,f
 13174  154E  09F6               	comf	___awdiv@dividend+1,f
 13175  154F  0AF5               	incf	___awdiv@dividend,f
 13176  1550  1903               	skipnz
 13177  1551  0AF6               	incf	___awdiv@dividend+1,f
 13178  1552  3001               	movlw	1
 13179  1553  00F7               	movwf	??___awdiv
 13180  1554  0877               	movf	??___awdiv,w
 13181  1555  06A1               	xorwf	___awdiv@sign,f
 13182  1556                     l8353:	
 13183  1556  01A2               	clrf	___awdiv@quotient
 13184  1557  01A3               	clrf	___awdiv@quotient+1
 13185  1558  0873               	movf	___awdiv@divisor,w
 13186  1559  0474               	iorwf	___awdiv@divisor+1,w
 13187  155A  1903               	btfsc	3,2
 13188  155B  2D85               	goto	l8375
 13189  155C  01A0               	clrf	___awdiv@counter
 13190  155D  0AA0               	incf	___awdiv@counter,f
 13191  155E                     l8363:	
 13192  155E  1BF4               	btfsc	___awdiv@divisor+1,7
 13193  155F  2D6A               	goto	l8365
 13194  1560  3001               	movlw	1
 13195  1561                     u6025:	
 13196  1561  35F3               	lslf	___awdiv@divisor,f
 13197  1562  0DF4               	rlf	___awdiv@divisor+1,f
 13198  1563  0B89               	decfsz	9,f
 13199  1564  2D61               	goto	u6025
 13200  1565  3001               	movlw	1
 13201  1566  00F7               	movwf	??___awdiv
 13202  1567  0877               	movf	??___awdiv,w
 13203  1568  07A0               	addwf	___awdiv@counter,f
 13204  1569  2D5E               	goto	l8363
 13205  156A                     l8365:	
 13206  156A  3001               	movlw	1
 13207  156B                     u6045:	
 13208  156B  35A2               	lslf	___awdiv@quotient,f
 13209  156C  0DA3               	rlf	___awdiv@quotient+1,f
 13210  156D  0B89               	decfsz	9,f
 13211  156E  2D6B               	goto	u6045
 13212  156F  0874               	movf	___awdiv@divisor+1,w
 13213  1570  0276               	subwf	___awdiv@dividend+1,w
 13214  1571  1D03               	skipz
 13215  1572  2D75               	goto	u6055
 13216  1573  0873               	movf	___awdiv@divisor,w
 13217  1574  0275               	subwf	___awdiv@dividend,w
 13218  1575                     u6055:	
 13219  1575  1C03               	skipc
 13220  1576  2D7C               	goto	l8371
 13221  1577  0873               	movf	___awdiv@divisor,w
 13222  1578  02F5               	subwf	___awdiv@dividend,f
 13223  1579  0874               	movf	___awdiv@divisor+1,w
 13224  157A  3BF6               	subwfb	___awdiv@dividend+1,f
 13225  157B  1422               	bsf	___awdiv@quotient,0
 13226  157C                     l8371:	
 13227  157C  3001               	movlw	1
 13228  157D                     u6065:	
 13229  157D  36F4               	lsrf	___awdiv@divisor+1,f
 13230  157E  0CF3               	rrf	___awdiv@divisor,f
 13231  157F  0B89               	decfsz	9,f
 13232  1580  2D7D               	goto	u6065
 13233  1581  3001               	movlw	1
 13234  1582  02A0               	subwf	___awdiv@counter,f
 13235  1583  1D03               	btfss	3,2
 13236  1584  2D6A               	goto	l8365
 13237  1585                     l8375:	
 13238  1585  0821               	movf	___awdiv@sign,w
 13239  1586  1903               	btfsc	3,2
 13240  1587  2D8D               	goto	l8379
 13241  1588  09A2               	comf	___awdiv@quotient,f
 13242  1589  09A3               	comf	___awdiv@quotient+1,f
 13243  158A  0AA2               	incf	___awdiv@quotient,f
 13244  158B  1903               	skipnz
 13245  158C  0AA3               	incf	___awdiv@quotient+1,f
 13246  158D                     l8379:	
 13247  158D  0823               	movf	___awdiv@quotient+1,w
 13248  158E  00F4               	movwf	?___awdiv+1
 13249  158F  0822               	movf	___awdiv@quotient,w
 13250  1590  00F3               	movwf	?___awdiv
 13251  1591  0008               	return
 13252  1592                     __end_of___awdiv:	
 13253                           
 13254                           	psect	text11
 13255  0801                     __ptext11:	
 13256 ;; *************** function _picc_halt_a *****************
 13257 ;; Defined at:
 13258 ;;		line 272 in file "src/nfc/pal/mfrc522_picc.c"
 13259 ;; Parameters:    Size  Location     Type
 13260 ;;		None
 13261 ;; Auto vars:     Size  Location     Type
 13262 ;;  buffer          4   46[BANK0 ] unsigned char [4]
 13263 ;;  result          1   50[BANK0 ] enum E5272
 13264 ;; Return value:  Size  Location     Type
 13265 ;;                  1    wreg      enum E5493
 13266 ;; Registers used:
 13267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13268 ;; Tracked objects:
 13269 ;;		On entry : 0/0
 13270 ;;		On exit  : 0/0
 13271 ;;		Unchanged: 0/0
 13272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13274 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 13275 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13276 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 13277 ;;Total ram usage:        8 bytes
 13278 ;; Hardware stack levels used:    1
 13279 ;; Hardware stack levels required when called:    7
 13280 ;; This function calls:
 13281 ;;		_mfrc522_hal_calculate_crc
 13282 ;;		_pcd_comm_with_picc
 13283 ;; This function is called by:
 13284 ;;		_rfid_comm_process_fk
 13285 ;;		_rfid_comm_process_hs
 13286 ;; This function uses a non-reentrant model
 13287 ;;
 13288                           
 13289                           
 13290                           ;psect for function _picc_halt_a
 13291  0801                     _picc_halt_a:	
 13292                           
 13293                           ;mfrc522_picc.c: 273: em_PcdStatusCode result;
 13294                           ;mfrc522_picc.c: 274: uint8_t buffer[4];
 13295                           ;mfrc522_picc.c: 276: buffer[0] = PICC_CMD_HLTA;
 13296                           
 13297                           ;incstack = 0
 13298                           ; Regs used in _picc_halt_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13299  0801  3050               	movlw	80
 13300  0802  0020               	movlb	0	; select bank0
 13301  0803  00CB               	movwf	??_picc_halt_a
 13302  0804  084B               	movf	??_picc_halt_a,w
 13303  0805  00CE               	movwf	picc_halt_a@buffer
 13304                           
 13305                           ;mfrc522_picc.c: 277: buffer[1] = 0;
 13306  0806  01CF               	clrf	picc_halt_a@buffer+1
 13307                           
 13308                           ;mfrc522_picc.c: 278: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 13309  0807  304E               	movlw	low picc_halt_a@buffer
 13310  0808  00A6               	movwf	mfrc522_hal_calculate_crc@data
 13311  0809  3000               	movlw	high picc_halt_a@buffer
 13312  080A  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 13313  080B  3002               	movlw	2
 13314  080C  00CB               	movwf	??_picc_halt_a
 13315  080D  084B               	movf	??_picc_halt_a,w
 13316  080E  00A8               	movwf	mfrc522_hal_calculate_crc@length
 13317  080F  3050               	movlw	low (picc_halt_a@buffer+2)
 13318  0810  00A9               	movwf	mfrc522_hal_calculate_crc@result
 13319  0811  3000               	movlw	high (picc_halt_a@buffer+2)
 13320  0812  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 13321  0813  3197  2719  3188   	fcall	_mfrc522_hal_calculate_crc
 13322  0816  0020               	movlb	0	; select bank0
 13323  0817  00CC               	movwf	??_picc_halt_a+1
 13324  0818  084C               	movf	??_picc_halt_a+1,w
 13325  0819  00D2               	movwf	picc_halt_a@result
 13326                           
 13327                           ;mfrc522_picc.c: 279: if (result != STATUS_OK)return result;
 13328  081A  0852               	movf	picc_halt_a@result,w
 13329  081B  1D03               	btfss	3,2
 13330  081C  0008               	return
 13331                           
 13332                           ;mfrc522_picc.c: 282: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, sizeof (bu
      +                          ffer), (0), (0), (0), 0, 0);
 13333                           
 13334                           ;	Return value of _picc_halt_a is never used
 13335  081D  3030               	movlw	48
 13336  081E  00CB               	movwf	??_picc_halt_a
 13337  081F  084B               	movf	??_picc_halt_a,w
 13338  0820  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 13339  0821  304E               	movlw	low picc_halt_a@buffer
 13340  0822  00B2               	movwf	pcd_comm_with_picc@sbuf
 13341  0823  3000               	movlw	high picc_halt_a@buffer
 13342  0824  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 13343  0825  3004               	movlw	4
 13344  0826  00CC               	movwf	??_picc_halt_a+1
 13345  0827  084C               	movf	??_picc_halt_a+1,w
 13346  0828  00B4               	movwf	pcd_comm_with_picc@slen
 13347  0829  3000               	movlw	0
 13348  082A  00B5               	movwf	pcd_comm_with_picc@rbuf
 13349  082B  3000               	movlw	0
 13350  082C  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 13351  082D  3000               	movlw	0
 13352  082E  00B7               	movwf	pcd_comm_with_picc@rlen
 13353  082F  3000               	movlw	0
 13354  0830  00B8               	movwf	pcd_comm_with_picc@rlen+1
 13355  0831  01B9               	clrf	pcd_comm_with_picc@validBits
 13356  0832  01BA               	clrf	pcd_comm_with_picc@rxAlign
 13357  0833  01BB               	clrf	pcd_comm_with_picc@checkCRC
 13358  0834  300C               	movlw	12
 13359  0835  318A  22B5         	fcall	_pcd_comm_with_picc
 13360  0837  0020               	movlb	0	; select bank0
 13361  0838  00CD               	movwf	??_picc_halt_a+2
 13362  0839  084D               	movf	??_picc_halt_a+2,w
 13363  083A  00D2               	movwf	picc_halt_a@result
 13364                           
 13365                           ;	Return value of _picc_halt_a is never used
 13366                           
 13367                           ;	Return value of _picc_halt_a is never used
 13368  083B  0008               	return
 13369  083C                     __end_of_picc_halt_a:	
 13370                           ;mfrc522_picc.c: 285: return result;
 13371                           ;	Return value of _picc_halt_a is never used
 13372                           
 13373                           
 13374                           	psect	text12
 13375  1645                     __ptext12:	
 13376 ;; *************** function _picc_authenticate *****************
 13377 ;; Defined at:
 13378 ;;		line 288 in file "src/nfc/pal/mfrc522_picc.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  command         1    wreg     unsigned char 
 13381 ;;  blockAddr       1   43[BANK0 ] unsigned char 
 13382 ;;  key             2   44[BANK0 ] PTR struct .
 13383 ;;		 -> userKeyB(6), defaultKeyA(6), 
 13384 ;;  uid             1   46[BANK0 ] PTR struct __PICC_UID
 13385 ;;		 -> PiccUid(12), 
 13386 ;; Auto vars:     Size  Location     Type
 13387 ;;  command         1   62[BANK0 ] unsigned char 
 13388 ;;  sendData       12   50[BANK0 ] unsigned char [12]
 13389 ;;  i               1   64[BANK0 ] unsigned char 
 13390 ;;  waitIRQ         1   63[BANK0 ] unsigned char 
 13391 ;; Return value:  Size  Location     Type
 13392 ;;                  1    wreg      enum E5493
 13393 ;; Registers used:
 13394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13395 ;; Tracked objects:
 13396 ;;		On entry : 0/0
 13397 ;;		On exit  : 0/0
 13398 ;;		Unchanged: 0/0
 13399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13400 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13401 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0
 13402 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13403 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 13404 ;;Total ram usage:       22 bytes
 13405 ;; Hardware stack levels used:    1
 13406 ;; Hardware stack levels required when called:    7
 13407 ;; This function calls:
 13408 ;;		_pcd_comm_with_picc
 13409 ;; This function is called by:
 13410 ;;		_rfid_comm_process_fk
 13411 ;;		_rfid_comm_process_hs
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           
 13416                           ;psect for function _picc_authenticate
 13417  1645                     _picc_authenticate:	
 13418                           
 13419                           ;incstack = 0
 13420                           ; Regs used in _picc_authenticate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13421                           ;picc_authenticate@command stored from wreg
 13422  1645  0020               	movlb	0	; select bank0
 13423  1646  00DE               	movwf	picc_authenticate@command
 13424                           
 13425                           ;mfrc522_picc.c: 289: uint8_t waitIRQ = 0x10;
 13426  1647  3010               	movlw	16
 13427  1648  00CF               	movwf	??_picc_authenticate
 13428  1649  084F               	movf	??_picc_authenticate,w
 13429  164A  00DF               	movwf	picc_authenticate@waitIRQ
 13430                           
 13431                           ;mfrc522_picc.c: 290: uint8_t i;
 13432                           ;mfrc522_picc.c: 291: uint8_t sendData[12];
 13433                           ;mfrc522_picc.c: 292: sendData[0] = command;
 13434  164B  085E               	movf	picc_authenticate@command,w
 13435  164C  00CF               	movwf	??_picc_authenticate
 13436  164D  084F               	movf	??_picc_authenticate,w
 13437  164E  00D2               	movwf	picc_authenticate@sendData
 13438                           
 13439                           ;mfrc522_picc.c: 293: sendData[1] = blockAddr;
 13440  164F  084B               	movf	picc_authenticate@blockAddr,w
 13441  1650  00CF               	movwf	??_picc_authenticate
 13442  1651  084F               	movf	??_picc_authenticate,w
 13443  1652  00D3               	movwf	picc_authenticate@sendData+1
 13444                           
 13445                           ;mfrc522_picc.c: 294: for (i = 0; i < MF_KEY_SIZE; i++) {
 13446  1653  01E0               	clrf	picc_authenticate@i
 13447  1654  3006               	movlw	6
 13448  1655  0260               	subwf	picc_authenticate@i,w
 13449  1656  1803               	btfsc	3,0
 13450  1657  2E74               	goto	l12467
 13451  1658                     l12461:	
 13452                           
 13453                           ;mfrc522_picc.c: 295: sendData[2 + i] = key->keyByte[i];
 13454  1658  084D               	movf	picc_authenticate@key+1,w
 13455  1659  00D0               	movwf	??_picc_authenticate+1
 13456  165A  084C               	movf	picc_authenticate@key,w
 13457  165B  00CF               	movwf	??_picc_authenticate
 13458  165C  0860               	movf	picc_authenticate@i,w
 13459  165D  074F               	addwf	??_picc_authenticate,w
 13460  165E  0084               	movwf	4
 13461  165F  0850               	movf	??_picc_authenticate+1,w
 13462  1660  1803               	skipnc
 13463  1661  0A50               	incf	??_picc_authenticate+1,w
 13464  1662  0085               	movwf	5
 13465  1663  0800               	movf	0,w	;code access
 13466  1664  00D1               	movwf	??_picc_authenticate+2
 13467  1665  0860               	movf	picc_authenticate@i,w
 13468  1666  3E02               	addlw	2
 13469  1667  3E52               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 13470  1668  0086               	movwf	6
 13471  1669  0187               	clrf	7
 13472  166A  0851               	movf	??_picc_authenticate+2,w
 13473  166B  0081               	movwf	1
 13474  166C  3001               	movlw	1
 13475  166D  00CF               	movwf	??_picc_authenticate
 13476  166E  084F               	movf	??_picc_authenticate,w
 13477  166F  07E0               	addwf	picc_authenticate@i,f
 13478  1670  3006               	movlw	6
 13479  1671  0260               	subwf	picc_authenticate@i,w
 13480  1672  1C03               	skipc
 13481  1673  2E58               	goto	l12461
 13482  1674                     l12467:	
 13483                           
 13484                           ;mfrc522_picc.c: 296: }
 13485                           ;mfrc522_picc.c: 297: for (i = 0; i < 4; i++) {
 13486  1674  01E0               	clrf	picc_authenticate@i
 13487  1675  3004               	movlw	4
 13488  1676  0260               	subwf	picc_authenticate@i,w
 13489  1677  1803               	btfsc	3,0
 13490  1678  2E92               	goto	l12479
 13491  1679                     l12473:	
 13492                           
 13493                           ;mfrc522_picc.c: 298: sendData[8 + i] = uid->uidByte[i];
 13494  1679  0860               	movf	picc_authenticate@i,w
 13495  167A  3E01               	addlw	1
 13496  167B  074E               	addwf	picc_authenticate@uid,w
 13497  167C  00CF               	movwf	??_picc_authenticate
 13498  167D  084F               	movf	??_picc_authenticate,w
 13499  167E  0086               	movwf	6
 13500  167F  3001               	movlw	1	; select bank2/3
 13501  1680  0087               	movwf	7
 13502  1681  0801               	movf	1,w
 13503  1682  00D0               	movwf	??_picc_authenticate+1
 13504  1683  0860               	movf	picc_authenticate@i,w
 13505  1684  3E08               	addlw	8
 13506  1685  3E52               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 13507  1686  0086               	movwf	6
 13508  1687  0187               	clrf	7
 13509  1688  0850               	movf	??_picc_authenticate+1,w
 13510  1689  0081               	movwf	1
 13511  168A  3001               	movlw	1
 13512  168B  00CF               	movwf	??_picc_authenticate
 13513  168C  084F               	movf	??_picc_authenticate,w
 13514  168D  07E0               	addwf	picc_authenticate@i,f
 13515  168E  3004               	movlw	4
 13516  168F  0260               	subwf	picc_authenticate@i,w
 13517  1690  1C03               	skipc
 13518  1691  2E79               	goto	l12473
 13519  1692                     l12479:	
 13520                           
 13521                           ;mfrc522_picc.c: 299: }
 13522                           ;mfrc522_picc.c: 300: return pcd_comm_with_picc(PCD_MFAuthent, waitIRQ, &sendData[0], si
      +                          zeof (sendData), (0), (0), (0), 0, 0);
 13523  1692  085F               	movf	picc_authenticate@waitIRQ,w
 13524  1693  00CF               	movwf	??_picc_authenticate
 13525  1694  084F               	movf	??_picc_authenticate,w
 13526  1695  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 13527  1696  3052               	movlw	low picc_authenticate@sendData
 13528  1697  00B2               	movwf	pcd_comm_with_picc@sbuf
 13529  1698  3000               	movlw	high picc_authenticate@sendData
 13530  1699  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 13531  169A  300C               	movlw	12
 13532  169B  00D0               	movwf	??_picc_authenticate+1
 13533  169C  0850               	movf	??_picc_authenticate+1,w
 13534  169D  00B4               	movwf	pcd_comm_with_picc@slen
 13535  169E  3000               	movlw	0
 13536  169F  00B5               	movwf	pcd_comm_with_picc@rbuf
 13537  16A0  3000               	movlw	0
 13538  16A1  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 13539  16A2  3000               	movlw	0
 13540  16A3  00B7               	movwf	pcd_comm_with_picc@rlen
 13541  16A4  3000               	movlw	0
 13542  16A5  00B8               	movwf	pcd_comm_with_picc@rlen+1
 13543  16A6  01B9               	clrf	pcd_comm_with_picc@validBits
 13544  16A7  01BA               	clrf	pcd_comm_with_picc@rxAlign
 13545  16A8  01BB               	clrf	pcd_comm_with_picc@checkCRC
 13546  16A9  300E               	movlw	14
 13547  16AA  318A  22B5         	fcall	_pcd_comm_with_picc
 13548  16AC  0008               	return
 13549  16AD                     __end_of_picc_authenticate:	
 13550                           
 13551                           	psect	text13
 13552  1457                     __ptext13:	
 13553 ;; *************** function _mifare_write *****************
 13554 ;; Defined at:
 13555 ;;		line 57 in file "src/nfc/pal/mfrc522_mifare.c"
 13556 ;; Parameters:    Size  Location     Type
 13557 ;;  blockAddr       1    wreg     unsigned char 
 13558 ;;  buffer          2   73[BANK0 ] PTR unsigned char 
 13559 ;;		 -> cardWriteBuf(18), comBuffer(128), 
 13560 ;;  bufferSize      1   75[BANK0 ] unsigned char 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  blockAddr       1    0[BANK1 ] unsigned char 
 13563 ;;  cmdBuffer       2    1[BANK1 ] unsigned char [2]
 13564 ;;  result          1    3[BANK1 ] enum E5272
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      enum E5493
 13567 ;; Registers used:
 13568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13574 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13575 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0
 13576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13577 ;;      Totals:         0       5       4       0       0       0       0       0       0       0       0       0       
      +0
 13578 ;;Total ram usage:        9 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    8
 13581 ;; This function calls:
 13582 ;;		_pcd_mifare_transceive
 13583 ;; This function is called by:
 13584 ;;		_rfid_comm_process_fk
 13585 ;;		_rfid_comm_process_hs
 13586 ;; This function uses a non-reentrant model
 13587 ;;
 13588                           
 13589                           
 13590                           ;psect for function _mifare_write
 13591  1457                     _mifare_write:	
 13592                           
 13593                           ;incstack = 0
 13594                           ; Regs used in _mifare_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13595                           ;mifare_write@blockAddr stored from wreg
 13596  1457  0021               	movlb	1	; select bank1
 13597  1458  00A0               	movwf	mifare_write@blockAddr^(0+128)
 13598                           
 13599                           ;mfrc522_mifare.c: 64: em_PcdStatusCode result;
 13600                           ;mfrc522_mifare.c: 65: if (buffer == (0) || bufferSize < 16)
 13601  1459  0020               	movlb	0	; select bank0
 13602  145A  0869               	movf	mifare_write@buffer,w
 13603  145B  046A               	iorwf	mifare_write@buffer+1,w
 13604  145C  1903               	btfsc	3,2
 13605  145D  2C62               	goto	l12509
 13606  145E  3010               	movlw	16
 13607  145F  026B               	subwf	mifare_write@bufferSize,w
 13608  1460  1803               	skipnc
 13609  1461  2C64               	goto	l12513
 13610  1462                     l12509:	
 13611                           
 13612                           ;mfrc522_mifare.c: 66: {
 13613                           ;mfrc522_mifare.c: 67: return STATUS_INVALID;
 13614  1462  3006               	movlw	6
 13615  1463  0008               	return
 13616  1464                     l12513:	
 13617                           
 13618                           ;mfrc522_mifare.c: 68: }
 13619                           ;mfrc522_mifare.c: 69: uint8_t cmdBuffer[2];
 13620                           ;mfrc522_mifare.c: 70: cmdBuffer[0] = PICC_CMD_MF_WRITE;
 13621  1464  30A0               	movlw	160
 13622  1465  00EC               	movwf	??_mifare_write
 13623  1466  086C               	movf	??_mifare_write,w
 13624  1467  0021               	movlb	1	; select bank1
 13625  1468  00A1               	movwf	mifare_write@cmdBuffer^(0+128)
 13626                           
 13627                           ;mfrc522_mifare.c: 71: cmdBuffer[1] = blockAddr;
 13628  1469  0820               	movf	mifare_write@blockAddr^(0+128),w
 13629  146A  0020               	movlb	0	; select bank0
 13630  146B  00EC               	movwf	??_mifare_write
 13631  146C  086C               	movf	??_mifare_write,w
 13632  146D  0021               	movlb	1	; select bank1
 13633  146E  00A2               	movwf	(mifare_write@cmdBuffer^(0+128)+1)
 13634                           
 13635                           ;mfrc522_mifare.c: 72: result = pcd_mifare_transceive(cmdBuffer, 2,0);
 13636  146F  30A1               	movlw	low mifare_write@cmdBuffer
 13637  1470  0020               	movlb	0	; select bank0
 13638  1471  00CB               	movwf	pcd_mifare_transceive@sendData
 13639  1472  3000               	movlw	high mifare_write@cmdBuffer
 13640  1473  00CC               	movwf	pcd_mifare_transceive@sendData+1
 13641  1474  3002               	movlw	2
 13642  1475  00EC               	movwf	??_mifare_write
 13643  1476  086C               	movf	??_mifare_write,w
 13644  1477  00CD               	movwf	pcd_mifare_transceive@sendLen
 13645  1478  01CE               	clrf	pcd_mifare_transceive@acceptTimeout
 13646  1479  3188  20B5  3194   	fcall	_pcd_mifare_transceive
 13647  147C  0020               	movlb	0	; select bank0
 13648  147D  00ED               	movwf	??_mifare_write+1
 13649  147E  086D               	movf	??_mifare_write+1,w
 13650  147F  0021               	movlb	1	; select bank1
 13651  1480  00A3               	movwf	mifare_write@result^(0+128)
 13652                           
 13653                           ;mfrc522_mifare.c: 73: if (result != STATUS_OK)
 13654  1481  0823               	movf	mifare_write@result^(0+128),w
 13655  1482  1903               	btfsc	3,2
 13656  1483  2C86               	goto	l12523
 13657                           
 13658                           ;mfrc522_mifare.c: 74: {
 13659                           ;mfrc522_mifare.c: 75: return result;
 13660  1484  0823               	movf	mifare_write@result^(0+128),w
 13661  1485  0008               	return
 13662  1486                     l12523:	
 13663                           
 13664                           ;mfrc522_mifare.c: 76: }
 13665                           ;mfrc522_mifare.c: 77: result = pcd_mifare_transceive(buffer, bufferSize,0);
 13666  1486  0020               	movlb	0	; select bank0
 13667  1487  086A               	movf	mifare_write@buffer+1,w
 13668  1488  00CC               	movwf	pcd_mifare_transceive@sendData+1
 13669  1489  0869               	movf	mifare_write@buffer,w
 13670  148A  00CB               	movwf	pcd_mifare_transceive@sendData
 13671  148B  086B               	movf	mifare_write@bufferSize,w
 13672  148C  00EC               	movwf	??_mifare_write
 13673  148D  086C               	movf	??_mifare_write,w
 13674  148E  00CD               	movwf	pcd_mifare_transceive@sendLen
 13675  148F  01CE               	clrf	pcd_mifare_transceive@acceptTimeout
 13676  1490  3188  20B5  3194   	fcall	_pcd_mifare_transceive
 13677  1493  0020               	movlb	0	; select bank0
 13678  1494  00ED               	movwf	??_mifare_write+1
 13679  1495  086D               	movf	??_mifare_write+1,w
 13680  1496  0021               	movlb	1	; select bank1
 13681  1497  00A3               	movwf	mifare_write@result^(0+128)
 13682                           
 13683                           ;mfrc522_mifare.c: 78: if (result != STATUS_OK)
 13684  1498  0823               	movf	mifare_write@result^(0+128),w
 13685  1499  1903               	btfsc	3,2
 13686  149A  2C9D               	goto	l12531
 13687                           
 13688                           ;mfrc522_mifare.c: 79: {
 13689                           ;mfrc522_mifare.c: 80: return result;
 13690  149B  0823               	movf	mifare_write@result^(0+128),w
 13691  149C  0008               	return
 13692  149D                     l12531:	
 13693                           
 13694                           ;mfrc522_mifare.c: 81: }
 13695                           ;mfrc522_mifare.c: 82: return STATUS_OK;
 13696  149D  3000               	movlw	0
 13697  149E  0008               	return
 13698  149F                     __end_of_mifare_write:	
 13699                           
 13700                           	psect	text14
 13701  08B5                     __ptext14:	
 13702 ;; *************** function _pcd_mifare_transceive *****************
 13703 ;; Defined at:
 13704 ;;		line 127 in file "src/nfc/pal/mfrc522_mifare.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;  sendData        2   43[BANK0 ] PTR unsigned char 
 13707 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), cardWriteBuf(18)
      +, 
 13708 ;;		 -> comBuffer(128), 
 13709 ;;  sendLen         1   45[BANK0 ] unsigned char 
 13710 ;;  acceptTimeou    1   46[BANK0 ] unsigned char 
 13711 ;; Auto vars:     Size  Location     Type
 13712 ;;  cmdBuffer      18   51[BANK0 ] unsigned char [18]
 13713 ;;  result          1   72[BANK0 ] enum E5272
 13714 ;;  cmdBufferSiz    1   71[BANK0 ] unsigned char 
 13715 ;;  validBits       1   70[BANK0 ] unsigned char 
 13716 ;;  waitIRq         1   69[BANK0 ] unsigned char 
 13717 ;; Return value:  Size  Location     Type
 13718 ;;                  1    wreg      enum E5272
 13719 ;; Registers used:
 13720 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13721 ;; Tracked objects:
 13722 ;;		On entry : 0/0
 13723 ;;		On exit  : 0/0
 13724 ;;		Unchanged: 0/0
 13725 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13726 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13727 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 13728 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13729 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0
 13730 ;;Total ram usage:       30 bytes
 13731 ;; Hardware stack levels used:    1
 13732 ;; Hardware stack levels required when called:    7
 13733 ;; This function calls:
 13734 ;;		_m_mem_cpy_len
 13735 ;;		_mfrc522_hal_calculate_crc
 13736 ;;		_pcd_comm_with_picc
 13737 ;; This function is called by:
 13738 ;;		_mifare_write
 13739 ;;		_mifare_two_Step_helper
 13740 ;; This function uses a non-reentrant model
 13741 ;;
 13742                           
 13743                           
 13744                           ;psect for function _pcd_mifare_transceive
 13745  08B5                     _pcd_mifare_transceive:	
 13746                           
 13747                           ;mfrc522_mifare.c: 134: em_PcdStatusCode result;
 13748                           ;mfrc522_mifare.c: 135: uint8_t cmdBuffer[18];
 13749                           ;mfrc522_mifare.c: 138: if (sendData == (0) || sendLen > 16)
 13750                           
 13751                           ;incstack = 0
 13752                           ; Regs used in _pcd_mifare_transceive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13753  08B5  0020               	movlb	0	; select bank0
 13754  08B6  084B               	movf	pcd_mifare_transceive@sendData,w
 13755  08B7  044C               	iorwf	pcd_mifare_transceive@sendData+1,w
 13756  08B8  1903               	btfsc	3,2
 13757  08B9  28BE               	goto	l11891
 13758  08BA  3011               	movlw	17
 13759  08BB  024D               	subwf	pcd_mifare_transceive@sendLen,w
 13760  08BC  1C03               	skipc
 13761  08BD  28C0               	goto	l11895
 13762  08BE                     l11891:	
 13763                           
 13764                           ;mfrc522_mifare.c: 139: {
 13765                           ;mfrc522_mifare.c: 140: return STATUS_INVALID;
 13766  08BE  3006               	movlw	6
 13767  08BF  0008               	return
 13768  08C0                     l11895:	
 13769                           
 13770                           ;mfrc522_mifare.c: 141: }
 13771                           ;mfrc522_mifare.c: 144: m_mem_cpy_len(cmdBuffer, sendData, sendLen);
 13772  08C0  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 13773  08C1  00F3               	movwf	m_mem_cpy_len@d
 13774  08C2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 13775  08C3  00F4               	movwf	m_mem_cpy_len@d+1
 13776  08C4  084C               	movf	pcd_mifare_transceive@sendData+1,w
 13777  08C5  00F6               	movwf	m_mem_cpy_len@s+1
 13778  08C6  084B               	movf	pcd_mifare_transceive@sendData,w
 13779  08C7  00F5               	movwf	m_mem_cpy_len@s
 13780  08C8  084D               	movf	pcd_mifare_transceive@sendLen,w
 13781  08C9  00CF               	movwf	??_pcd_mifare_transceive
 13782  08CA  084F               	movf	??_pcd_mifare_transceive,w
 13783  08CB  00F7               	movwf	m_mem_cpy_len@len
 13784  08CC  319F  2756  3188   	fcall	_m_mem_cpy_len
 13785                           
 13786                           ;mfrc522_mifare.c: 145: result = mfrc522_hal_calculate_crc(cmdBuffer, sendLen, &cmdBuffe
      +                          r[sendLen]);
 13787  08CF  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 13788  08D0  0020               	movlb	0	; select bank0
 13789  08D1  00A6               	movwf	mfrc522_hal_calculate_crc@data
 13790  08D2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 13791  08D3  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 13792  08D4  084D               	movf	pcd_mifare_transceive@sendLen,w
 13793  08D5  00CF               	movwf	??_pcd_mifare_transceive
 13794  08D6  084F               	movf	??_pcd_mifare_transceive,w
 13795  08D7  00A8               	movwf	mfrc522_hal_calculate_crc@length
 13796  08D8  084D               	movf	pcd_mifare_transceive@sendLen,w
 13797  08D9  3E53               	addlw	(low (pcd_mifare_transceive@cmdBuffer| 0))& (0+255)
 13798  08DA  00A9               	movwf	mfrc522_hal_calculate_crc@result
 13799  08DB  3000               	movlw	0
 13800  08DC  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 13801  08DD  3197  2719  3188   	fcall	_mfrc522_hal_calculate_crc
 13802  08E0  0020               	movlb	0	; select bank0
 13803  08E1  00D0               	movwf	??_pcd_mifare_transceive+1
 13804  08E2  0850               	movf	??_pcd_mifare_transceive+1,w
 13805  08E3  00E8               	movwf	pcd_mifare_transceive@result
 13806                           
 13807                           ;mfrc522_mifare.c: 146: if (result != STATUS_OK)
 13808  08E4  0868               	movf	pcd_mifare_transceive@result,w
 13809  08E5  1903               	btfsc	3,2
 13810  08E6  28E9               	goto	l11905
 13811                           
 13812                           ;mfrc522_mifare.c: 147: {
 13813                           ;mfrc522_mifare.c: 148: return result;
 13814  08E7  0868               	movf	pcd_mifare_transceive@result,w
 13815  08E8  0008               	return
 13816  08E9                     l11905:	
 13817                           
 13818                           ;mfrc522_mifare.c: 149: }
 13819                           ;mfrc522_mifare.c: 150: sendLen += 2;
 13820  08E9  3002               	movlw	2
 13821  08EA  00CF               	movwf	??_pcd_mifare_transceive
 13822  08EB  084F               	movf	??_pcd_mifare_transceive,w
 13823  08EC  07CD               	addwf	pcd_mifare_transceive@sendLen,f
 13824                           
 13825                           ;mfrc522_mifare.c: 153: uint8_t waitIRq = 0x30;
 13826  08ED  3030               	movlw	48
 13827  08EE  00CF               	movwf	??_pcd_mifare_transceive
 13828  08EF  084F               	movf	??_pcd_mifare_transceive,w
 13829  08F0  00E5               	movwf	pcd_mifare_transceive@waitIRq
 13830                           
 13831                           ;mfrc522_mifare.c: 154: uint8_t cmdBufferSize = sizeof(cmdBuffer);
 13832  08F1  3012               	movlw	18
 13833  08F2  00CF               	movwf	??_pcd_mifare_transceive
 13834  08F3  084F               	movf	??_pcd_mifare_transceive,w
 13835  08F4  00E7               	movwf	pcd_mifare_transceive@cmdBufferSize
 13836                           
 13837                           ;mfrc522_mifare.c: 155: uint8_t validBits = 0;
 13838  08F5  01E6               	clrf	pcd_mifare_transceive@validBits
 13839                           
 13840                           ;mfrc522_mifare.c: 156: result = pcd_comm_with_picc(PCD_Transceive, waitIRq, cmdBuffer, 
      +                          sendLen, cmdBuffer, &cmdBufferSize, &validBits,0,0);
 13841  08F6  0865               	movf	pcd_mifare_transceive@waitIRq,w
 13842  08F7  00CF               	movwf	??_pcd_mifare_transceive
 13843  08F8  084F               	movf	??_pcd_mifare_transceive,w
 13844  08F9  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 13845  08FA  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 13846  08FB  00B2               	movwf	pcd_comm_with_picc@sbuf
 13847  08FC  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 13848  08FD  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 13849  08FE  084D               	movf	pcd_mifare_transceive@sendLen,w
 13850  08FF  00D0               	movwf	??_pcd_mifare_transceive+1
 13851  0900  0850               	movf	??_pcd_mifare_transceive+1,w
 13852  0901  00B4               	movwf	pcd_comm_with_picc@slen
 13853  0902  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 13854  0903  00B5               	movwf	pcd_comm_with_picc@rbuf
 13855  0904  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 13856  0905  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 13857  0906  3067               	movlw	low pcd_mifare_transceive@cmdBufferSize
 13858  0907  00B7               	movwf	pcd_comm_with_picc@rlen
 13859  0908  3000               	movlw	high pcd_mifare_transceive@cmdBufferSize
 13860  0909  00B8               	movwf	pcd_comm_with_picc@rlen+1
 13861  090A  3066               	movlw	(low (pcd_mifare_transceive@validBits| 0))& (0+255)
 13862  090B  00D1               	movwf	??_pcd_mifare_transceive+2
 13863  090C  0851               	movf	??_pcd_mifare_transceive+2,w
 13864  090D  00B9               	movwf	pcd_comm_with_picc@validBits
 13865  090E  01BA               	clrf	pcd_comm_with_picc@rxAlign
 13866  090F  01BB               	clrf	pcd_comm_with_picc@checkCRC
 13867  0910  300C               	movlw	12
 13868  0911  318A  22B5  3188   	fcall	_pcd_comm_with_picc
 13869  0914  0020               	movlb	0	; select bank0
 13870  0915  00D2               	movwf	??_pcd_mifare_transceive+3
 13871  0916  0852               	movf	??_pcd_mifare_transceive+3,w
 13872  0917  00E8               	movwf	pcd_mifare_transceive@result
 13873                           
 13874                           ;mfrc522_mifare.c: 157: if (acceptTimeout && result == STATUS_TIMEOUT)
 13875  0918  084E               	movf	pcd_mifare_transceive@acceptTimeout,w
 13876  0919  1903               	btfsc	3,2
 13877  091A  2921               	goto	l11923
 13878  091B  3003               	movlw	3
 13879  091C  0668               	xorwf	pcd_mifare_transceive@result,w
 13880  091D  1D03               	btfss	3,2
 13881  091E  2921               	goto	l11923
 13882                           
 13883                           ;mfrc522_mifare.c: 158: {
 13884                           ;mfrc522_mifare.c: 159: return STATUS_OK;
 13885  091F  3000               	movlw	0
 13886  0920  0008               	return
 13887  0921                     l11923:	
 13888                           
 13889                           ;mfrc522_mifare.c: 160: }
 13890                           ;mfrc522_mifare.c: 161: if (result != STATUS_OK)
 13891  0921  0868               	movf	pcd_mifare_transceive@result,w
 13892  0922  1903               	btfsc	3,2
 13893  0923  2926               	goto	l11929
 13894                           
 13895                           ;mfrc522_mifare.c: 162: {
 13896                           ;mfrc522_mifare.c: 163: return result;
 13897  0924  0868               	movf	pcd_mifare_transceive@result,w
 13898  0925  0008               	return
 13899  0926                     l11929:	
 13900                           
 13901                           ;mfrc522_mifare.c: 164: }
 13902                           ;mfrc522_mifare.c: 166: if (cmdBufferSize != 1 || validBits != 4)
 13903  0926  0367               	decf	pcd_mifare_transceive@cmdBufferSize,w
 13904  0927  1D03               	btfss	3,2
 13905  0928  292D               	goto	l11933
 13906  0929  3004               	movlw	4
 13907  092A  0666               	xorwf	pcd_mifare_transceive@validBits,w
 13908  092B  1903               	btfsc	3,2
 13909  092C  292F               	goto	l11937
 13910  092D                     l11933:	
 13911                           
 13912                           ;mfrc522_mifare.c: 167: {
 13913                           ;mfrc522_mifare.c: 168: return STATUS_ERROR;
 13914  092D  3001               	movlw	1
 13915  092E  0008               	return
 13916  092F                     l11937:	
 13917                           
 13918                           ;mfrc522_mifare.c: 169: }
 13919                           ;mfrc522_mifare.c: 170: if (cmdBuffer[0] != MF_ACK)
 13920  092F  300A               	movlw	10
 13921  0930  0653               	xorwf	pcd_mifare_transceive@cmdBuffer,w
 13922  0931  1903               	btfsc	3,2
 13923  0932  2935               	goto	l11943
 13924                           
 13925                           ;mfrc522_mifare.c: 171: {
 13926                           ;mfrc522_mifare.c: 172: return STATUS_MIFARE_NACK;
 13927  0933  30FF               	movlw	255
 13928  0934  0008               	return
 13929  0935                     l11943:	
 13930                           
 13931                           ;mfrc522_mifare.c: 173: }
 13932                           ;mfrc522_mifare.c: 174: return STATUS_OK;
 13933  0935  3000               	movlw	0
 13934  0936  0008               	return
 13935  0937                     __end_of_pcd_mifare_transceive:	
 13936                           
 13937                           	psect	text15
 13938  1592                     __ptext15:	
 13939 ;; *************** function _mifare_read *****************
 13940 ;; Defined at:
 13941 ;;		line 35 in file "src/nfc/pal/mfrc522_mifare.c"
 13942 ;; Parameters:    Size  Location     Type
 13943 ;;  blockAddr       1    wreg     unsigned char 
 13944 ;;  buffer          1   43[BANK0 ] PTR unsigned char 
 13945 ;;		 -> cardUidBlockBuf(18), 
 13946 ;;  bufferSize      1   44[BANK0 ] PTR unsigned char 
 13947 ;;		 -> rdLen(1), 
 13948 ;; Auto vars:     Size  Location     Type
 13949 ;;  blockAddr       1   47[BANK0 ] unsigned char 
 13950 ;;  result          1   48[BANK0 ] enum E5272
 13951 ;; Return value:  Size  Location     Type
 13952 ;;                  1    wreg      enum E5493
 13953 ;; Registers used:
 13954 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13960 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13962 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13963 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 13964 ;;Total ram usage:        6 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; Hardware stack levels required when called:    7
 13967 ;; This function calls:
 13968 ;;		_mfrc522_hal_calculate_crc
 13969 ;;		_pcd_comm_with_picc
 13970 ;; This function is called by:
 13971 ;;		_rfid_comm_process_fk
 13972 ;;		_rfid_comm_process_hs
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           
 13977                           ;psect for function _mifare_read
 13978  1592                     _mifare_read:	
 13979                           
 13980                           ;incstack = 0
 13981                           ; Regs used in _mifare_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13982                           ;mifare_read@blockAddr stored from wreg
 13983  1592  0020               	movlb	0	; select bank0
 13984  1593  00CF               	movwf	mifare_read@blockAddr
 13985                           
 13986                           ;mfrc522_mifare.c: 42: em_PcdStatusCode result;
 13987                           ;mfrc522_mifare.c: 43: if (buffer == (0) || *bufferSize < 18)
 13988  1594  084B               	movf	mifare_read@buffer,w
 13989  1595  1903               	btfsc	3,2
 13990  1596  2D9F               	goto	l12487
 13991  1597  084C               	movf	mifare_read@bufferSize,w
 13992  1598  0086               	movwf	6
 13993  1599  3001               	movlw	1	; select bank2/3
 13994  159A  0087               	movwf	7
 13995  159B  3012               	movlw	18
 13996  159C  0201               	subwf	1,w
 13997  159D  1803               	skipnc
 13998  159E  2DA1               	goto	l12491
 13999  159F                     l12487:	
 14000                           
 14001                           ;mfrc522_mifare.c: 44: {
 14002                           ;mfrc522_mifare.c: 45: return STATUS_NO_ROOM;
 14003  159F  3004               	movlw	4
 14004  15A0  0008               	return
 14005  15A1                     l12491:	
 14006                           
 14007                           ;mfrc522_mifare.c: 46: }
 14008                           ;mfrc522_mifare.c: 47: buffer[0] = PICC_CMD_MF_READ;
 14009  15A1  3030               	movlw	48
 14010  15A2  00CD               	movwf	??_mifare_read
 14011  15A3  084B               	movf	mifare_read@buffer,w
 14012  15A4  0086               	movwf	6
 14013  15A5  3004               	movlw	4	; select bank8/9
 14014  15A6  0087               	movwf	7
 14015  15A7  084D               	movf	??_mifare_read,w
 14016  15A8  0081               	movwf	1
 14017                           
 14018                           ;mfrc522_mifare.c: 48: buffer[1] = blockAddr;
 14019  15A9  084F               	movf	mifare_read@blockAddr,w
 14020  15AA  00CD               	movwf	??_mifare_read
 14021  15AB  0A4B               	incf	mifare_read@buffer,w
 14022  15AC  0086               	movwf	6
 14023  15AD  3004               	movlw	4	; select bank8/9
 14024  15AE  0087               	movwf	7
 14025  15AF  084D               	movf	??_mifare_read,w
 14026  15B0  0081               	movwf	1
 14027                           
 14028                           ;mfrc522_mifare.c: 49: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 14029  15B1  084B               	movf	mifare_read@buffer,w
 14030  15B2  00A6               	movwf	mfrc522_hal_calculate_crc@data
 14031  15B3  3004               	movlw	4
 14032  15B4  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 14033  15B5  3002               	movlw	2
 14034  15B6  00CD               	movwf	??_mifare_read
 14035  15B7  084D               	movf	??_mifare_read,w
 14036  15B8  00A8               	movwf	mfrc522_hal_calculate_crc@length
 14037  15B9  084B               	movf	mifare_read@buffer,w
 14038  15BA  3E02               	addlw	2
 14039  15BB  00A9               	movwf	mfrc522_hal_calculate_crc@result
 14040  15BC  3004               	movlw	4
 14041  15BD  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 14042  15BE  3197  2719  3195   	fcall	_mfrc522_hal_calculate_crc
 14043  15C1  0020               	movlb	0	; select bank0
 14044  15C2  00CE               	movwf	??_mifare_read+1
 14045  15C3  084E               	movf	??_mifare_read+1,w
 14046  15C4  00D0               	movwf	mifare_read@result
 14047                           
 14048                           ;mfrc522_mifare.c: 50: if (result != STATUS_OK) {
 14049  15C5  0850               	movf	mifare_read@result,w
 14050  15C6  1903               	btfsc	3,2
 14051  15C7  2DCA               	goto	l12501
 14052                           
 14053                           ;mfrc522_mifare.c: 51: return result;
 14054  15C8  0850               	movf	mifare_read@result,w
 14055  15C9  0008               	return
 14056  15CA                     l12501:	
 14057                           
 14058                           ;mfrc522_mifare.c: 52: }
 14059                           ;mfrc522_mifare.c: 54: return pcd_comm_with_picc(PCD_Transceive,0x30,buffer, 4, buffer, 
      +                          bufferSize, (0), 0, 1);
 14060  15CA  3030               	movlw	48
 14061  15CB  00CD               	movwf	??_mifare_read
 14062  15CC  084D               	movf	??_mifare_read,w
 14063  15CD  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 14064  15CE  084B               	movf	mifare_read@buffer,w
 14065  15CF  00B2               	movwf	pcd_comm_with_picc@sbuf
 14066  15D0  3004               	movlw	4
 14067  15D1  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 14068  15D2  3004               	movlw	4
 14069  15D3  00CE               	movwf	??_mifare_read+1
 14070  15D4  084E               	movf	??_mifare_read+1,w
 14071  15D5  00B4               	movwf	pcd_comm_with_picc@slen
 14072  15D6  084B               	movf	mifare_read@buffer,w
 14073  15D7  00B5               	movwf	pcd_comm_with_picc@rbuf
 14074  15D8  3004               	movlw	4
 14075  15D9  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 14076  15DA  084C               	movf	mifare_read@bufferSize,w
 14077  15DB  00B7               	movwf	pcd_comm_with_picc@rlen
 14078  15DC  3001               	movlw	1
 14079  15DD  00B8               	movwf	pcd_comm_with_picc@rlen+1
 14080  15DE  01B9               	clrf	pcd_comm_with_picc@validBits
 14081  15DF  01BA               	clrf	pcd_comm_with_picc@rxAlign
 14082  15E0  01BB               	clrf	pcd_comm_with_picc@checkCRC
 14083  15E1  0ABB               	incf	pcd_comm_with_picc@checkCRC,f
 14084  15E2  300C               	movlw	12
 14085  15E3  318A  22B5         	fcall	_pcd_comm_with_picc
 14086  15E5  0008               	return
 14087  15E6                     __end_of_mifare_read:	
 14088                           
 14089                           	psect	text16
 14090  12FF                     __ptext16:	
 14091 ;; *************** function _mfapi_is_new_card_present *****************
 14092 ;; Defined at:
 14093 ;;		line 81 in file "src/nfc/apl/mfrc522_apl.c"
 14094 ;; Parameters:    Size  Location     Type
 14095 ;;		None
 14096 ;; Auto vars:     Size  Location     Type
 14097 ;;  bufferATQA      2   56[BANK0 ] unsigned char [2]
 14098 ;;  bufferSize      1   59[BANK0 ] unsigned char 
 14099 ;;  result          1   58[BANK0 ] enum E5272
 14100 ;;  cmd             1   55[BANK0 ] unsigned char 
 14101 ;; Return value:  Size  Location     Type
 14102 ;;                  1    wreg      unsigned char 
 14103 ;; Registers used:
 14104 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14105 ;; Tracked objects:
 14106 ;;		On entry : 0/0
 14107 ;;		On exit  : 0/0
 14108 ;;		Unchanged: 0/0
 14109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14110 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14111 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14112 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14113 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 14114 ;;Total ram usage:        8 bytes
 14115 ;; Hardware stack levels used:    1
 14116 ;; Hardware stack levels required when called:    8
 14117 ;; This function calls:
 14118 ;;		_m_mem_set
 14119 ;;		_picc_req_a_or_wakeup_a
 14120 ;; This function is called by:
 14121 ;;		_rfid_comm_process_fk
 14122 ;;		_rfid_comm_process_hs
 14123 ;; This function uses a non-reentrant model
 14124 ;;
 14125                           
 14126                           
 14127                           ;psect for function _mfapi_is_new_card_present
 14128  12FF                     _mfapi_is_new_card_present:	
 14129                           
 14130                           ;mfrc522_apl.c: 82: uint8_t cmd;
 14131                           ;mfrc522_apl.c: 83: uint8_t bufferATQA[2];
 14132                           ;mfrc522_apl.c: 84: uint8_t bufferSize = sizeof (bufferATQA);
 14133                           
 14134                           ;incstack = 0
 14135                           ; Regs used in _mfapi_is_new_card_present: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14136  12FF  3002               	movlw	2
 14137  1300  0020               	movlb	0	; select bank0
 14138  1301  00D4               	movwf	??_mfapi_is_new_card_present
 14139  1302  0854               	movf	??_mfapi_is_new_card_present,w
 14140  1303  00DB               	movwf	mfapi_is_new_card_present@bufferSize
 14141                           
 14142                           ;mfrc522_apl.c: 85: em_PcdStatusCode result;
 14143                           ;mfrc522_apl.c: 86: m_mem_set((uint8_t*) (&PiccUid), 0, sizeof (PiccUid));
 14144  1304  30CA               	movlw	low _PiccUid
 14145  1305  00F3               	movwf	m_mem_set@buf
 14146  1306  3001               	movlw	high _PiccUid
 14147  1307  00F4               	movwf	m_mem_set@buf+1
 14148  1308  01F5               	clrf	m_mem_set@x
 14149  1309  300C               	movlw	12
 14150  130A  00D4               	movwf	??_mfapi_is_new_card_present
 14151  130B  0854               	movf	??_mfapi_is_new_card_present,w
 14152  130C  00F6               	movwf	m_mem_set@len
 14153  130D  319D  25F6  3192   	fcall	_m_mem_set
 14154                           
 14155                           ;mfrc522_apl.c: 87: ;
 14156                           ;mfrc522_apl.c: 88: cmd = PICC_CMD_REQA;
 14157  1310  3026               	movlw	38
 14158  1311  0020               	movlb	0	; select bank0
 14159  1312  00D4               	movwf	??_mfapi_is_new_card_present
 14160  1313  0854               	movf	??_mfapi_is_new_card_present,w
 14161  1314  00D7               	movwf	mfapi_is_new_card_present@cmd
 14162                           
 14163                           ;mfrc522_apl.c: 89: result = picc_req_a_or_wakeup_a(cmd, bufferATQA, &bufferSize);
 14164  1315  3058               	movlw	(low (mfapi_is_new_card_present@bufferATQA| 0))& (0+255)
 14165  1316  00D4               	movwf	??_mfapi_is_new_card_present
 14166  1317  0854               	movf	??_mfapi_is_new_card_present,w
 14167  1318  00CB               	movwf	picc_req_a_or_wakeup_a@bufferATQA
 14168  1319  305B               	movlw	(low (mfapi_is_new_card_present@bufferSize| 0))& (0+255)
 14169  131A  00D5               	movwf	??_mfapi_is_new_card_present+1
 14170  131B  0855               	movf	??_mfapi_is_new_card_present+1,w
 14171  131C  00CC               	movwf	picc_req_a_or_wakeup_a@bufferSize
 14172  131D  0857               	movf	mfapi_is_new_card_present@cmd,w
 14173  131E  3194  24EF  3192   	fcall	_picc_req_a_or_wakeup_a
 14174  1321  0020               	movlb	0	; select bank0
 14175  1322  00D6               	movwf	??_mfapi_is_new_card_present+2
 14176  1323  0856               	movf	??_mfapi_is_new_card_present+2,w
 14177  1324  00DA               	movwf	mfapi_is_new_card_present@result
 14178                           
 14179                           ;mfrc522_apl.c: 90: if (result == STATUS_OK || result == STATUS_COLLISION) {
 14180  1325  085A               	movf	mfapi_is_new_card_present@result,w
 14181  1326  1903               	btfsc	3,2
 14182  1327  2B2C               	goto	l12205
 14183  1328  3002               	movlw	2
 14184  1329  065A               	xorwf	mfapi_is_new_card_present@result,w
 14185  132A  1D03               	btfss	3,2
 14186  132B  2B2E               	goto	l12209
 14187  132C                     l12205:	
 14188                           
 14189                           ;mfrc522_apl.c: 91: return 1;
 14190  132C  3001               	movlw	1
 14191  132D  0008               	return
 14192  132E                     l12209:	
 14193                           
 14194                           ;mfrc522_apl.c: 92: }
 14195                           ;mfrc522_apl.c: 93: return 0;
 14196  132E  3000               	movlw	0
 14197  132F  0008               	return
 14198  1330                     __end_of_mfapi_is_new_card_present:	
 14199                           
 14200                           	psect	text17
 14201  14EF                     __ptext17:	
 14202 ;; *************** function _picc_req_a_or_wakeup_a *****************
 14203 ;; Defined at:
 14204 ;;		line 108 in file "src/nfc/pal/mfrc522_picc.c"
 14205 ;; Parameters:    Size  Location     Type
 14206 ;;  cmd             1    wreg     unsigned char 
 14207 ;;  bufferATQA      1   43[BANK0 ] PTR unsigned char 
 14208 ;;		 -> mfapi_is_new_card_present@bufferATQA(2), 
 14209 ;;  bufferSize      1   44[BANK0 ] PTR unsigned char 
 14210 ;;		 -> mfapi_is_new_card_present@bufferSize(1), 
 14211 ;; Auto vars:     Size  Location     Type
 14212 ;;  cmd             1   48[BANK0 ] unsigned char 
 14213 ;;  validBits       1   51[BANK0 ] unsigned char 
 14214 ;;  status          1   50[BANK0 ] enum E5272
 14215 ;;  __cmd           1   49[BANK0 ] unsigned char 
 14216 ;; Return value:  Size  Location     Type
 14217 ;;                  1    wreg      enum E5272
 14218 ;; Registers used:
 14219 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14220 ;; Tracked objects:
 14221 ;;		On entry : 0/0
 14222 ;;		On exit  : 0/0
 14223 ;;		Unchanged: 0/0
 14224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14226 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14227 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14228 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0
 14229 ;;Total ram usage:        9 bytes
 14230 ;; Hardware stack levels used:    1
 14231 ;; Hardware stack levels required when called:    7
 14232 ;; This function calls:
 14233 ;;		_mfrc522_bal_clr_bit_reg
 14234 ;;		_pcd_comm_with_picc
 14235 ;; This function is called by:
 14236 ;;		_mfapi_is_new_card_present
 14237 ;; This function uses a non-reentrant model
 14238 ;;
 14239                           
 14240                           
 14241                           ;psect for function _picc_req_a_or_wakeup_a
 14242  14EF                     _picc_req_a_or_wakeup_a:	
 14243                           
 14244                           ;incstack = 0
 14245                           ; Regs used in _picc_req_a_or_wakeup_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14246                           ;picc_req_a_or_wakeup_a@cmd stored from wreg
 14247  14EF  0020               	movlb	0	; select bank0
 14248  14F0  00D0               	movwf	picc_req_a_or_wakeup_a@cmd
 14249                           
 14250                           ;mfrc522_picc.c: 109: uint8_t validBits;
 14251                           ;mfrc522_picc.c: 110: em_PcdStatusCode status;
 14252                           ;mfrc522_picc.c: 111: uint8_t __cmd=cmd;
 14253  14F1  0850               	movf	picc_req_a_or_wakeup_a@cmd,w
 14254  14F2  00CD               	movwf	??_picc_req_a_or_wakeup_a
 14255  14F3  084D               	movf	??_picc_req_a_or_wakeup_a,w
 14256  14F4  00D1               	movwf	picc_req_a_or_wakeup_a@__cmd
 14257                           
 14258                           ;mfrc522_picc.c: 113: if (bufferATQA == (0) || *bufferSize < 2) {
 14259  14F5  084B               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 14260  14F6  1903               	btfsc	3,2
 14261  14F7  2CFF               	goto	l11845
 14262  14F8  084C               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 14263  14F9  0086               	movwf	6
 14264  14FA  0187               	clrf	7
 14265  14FB  3002               	movlw	2
 14266  14FC  0201               	subwf	1,w
 14267  14FD  1803               	skipnc
 14268  14FE  2D01               	goto	l11849
 14269  14FF                     l11845:	
 14270                           
 14271                           ;mfrc522_picc.c: 114: return STATUS_NO_ROOM;
 14272  14FF  3004               	movlw	4
 14273  1500  0008               	return
 14274  1501                     l11849:	
 14275                           
 14276                           ;mfrc522_picc.c: 115: }
 14277                           ;mfrc522_picc.c: 116: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 14278  1501  3080               	movlw	128
 14279  1502  00CD               	movwf	??_picc_req_a_or_wakeup_a
 14280  1503  084D               	movf	??_picc_req_a_or_wakeup_a,w
 14281  1504  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 14282  1505  300E               	movlw	14
 14283  1506  319E  26AA  3194   	fcall	_mfrc522_bal_clr_bit_reg
 14284                           
 14285                           ;mfrc522_picc.c: 117: validBits = 7;
 14286  1509  3007               	movlw	7
 14287  150A  0020               	movlb	0	; select bank0
 14288  150B  00CD               	movwf	??_picc_req_a_or_wakeup_a
 14289  150C  084D               	movf	??_picc_req_a_or_wakeup_a,w
 14290  150D  00D3               	movwf	picc_req_a_or_wakeup_a@validBits
 14291                           
 14292                           ;mfrc522_picc.c: 120: status=pcd_comm_with_picc(PCD_Transceive,0x30,&__cmd, 1, bufferATQ
      +                          A, bufferSize, &validBits, 0, 0);
 14293  150E  3030               	movlw	48
 14294  150F  00CD               	movwf	??_picc_req_a_or_wakeup_a
 14295  1510  084D               	movf	??_picc_req_a_or_wakeup_a,w
 14296  1511  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 14297  1512  3051               	movlw	low picc_req_a_or_wakeup_a@__cmd
 14298  1513  00B2               	movwf	pcd_comm_with_picc@sbuf
 14299  1514  3000               	movlw	high picc_req_a_or_wakeup_a@__cmd
 14300  1515  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 14301  1516  01B4               	clrf	pcd_comm_with_picc@slen
 14302  1517  0AB4               	incf	pcd_comm_with_picc@slen,f
 14303  1518  084B               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 14304  1519  00B5               	movwf	pcd_comm_with_picc@rbuf
 14305  151A  3000               	movlw	0
 14306  151B  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 14307  151C  084C               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 14308  151D  00B7               	movwf	pcd_comm_with_picc@rlen
 14309  151E  3000               	movlw	0
 14310  151F  00B8               	movwf	pcd_comm_with_picc@rlen+1
 14311  1520  3053               	movlw	(low (picc_req_a_or_wakeup_a@validBits| 0))& (0+255)
 14312  1521  00CE               	movwf	??_picc_req_a_or_wakeup_a+1
 14313  1522  084E               	movf	??_picc_req_a_or_wakeup_a+1,w
 14314  1523  00B9               	movwf	pcd_comm_with_picc@validBits
 14315  1524  01BA               	clrf	pcd_comm_with_picc@rxAlign
 14316  1525  01BB               	clrf	pcd_comm_with_picc@checkCRC
 14317  1526  300C               	movlw	12
 14318  1527  318A  22B5  3194   	fcall	_pcd_comm_with_picc
 14319  152A  0020               	movlb	0	; select bank0
 14320  152B  00CF               	movwf	??_picc_req_a_or_wakeup_a+2
 14321  152C  084F               	movf	??_picc_req_a_or_wakeup_a+2,w
 14322  152D  00D2               	movwf	picc_req_a_or_wakeup_a@status
 14323                           
 14324                           ;mfrc522_picc.c: 121: if (status != STATUS_OK) return status;
 14325  152E  0852               	movf	picc_req_a_or_wakeup_a@status,w
 14326  152F  1903               	btfsc	3,2
 14327  1530  2D33               	goto	l11861
 14328  1531  0852               	movf	picc_req_a_or_wakeup_a@status,w
 14329  1532  0008               	return
 14330  1533                     l11861:	
 14331                           
 14332                           ;mfrc522_picc.c: 122: if (*bufferSize != 2 || validBits != 0) return STATUS_ERROR;
 14333  1533  084C               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 14334  1534  0086               	movwf	6
 14335  1535  0187               	clrf	7
 14336  1536  3002               	movlw	2
 14337  1537  0601               	xorwf	1,w
 14338  1538  1903               	btfsc	3,2
 14339  1539  0853               	movf	picc_req_a_or_wakeup_a@validBits,w
 14340  153A  1903               	btfsc	3,2
 14341  153B  2D3E               	goto	l11869
 14342  153C  3001               	movlw	1
 14343  153D  0008               	return
 14344  153E                     l11869:	
 14345                           
 14346                           ;mfrc522_picc.c: 123: return STATUS_OK;
 14347  153E  3000               	movlw	0
 14348  153F  0008               	return
 14349  1540                     __end_of_picc_req_a_or_wakeup_a:	
 14350                           
 14351                           	psect	text18
 14352  0AB5                     __ptext18:	
 14353 ;; *************** function _pcd_comm_with_picc *****************
 14354 ;; Defined at:
 14355 ;;		line 35 in file "src/nfc/pal/mfrc522_picc.c"
 14356 ;; Parameters:    Size  Location     Type
 14357 ;;  cmd             1    wreg     unsigned char 
 14358 ;;  waitIRQ         1   17[BANK0 ] unsigned char 
 14359 ;;  sbuf            2   18[BANK0 ] PTR unsigned char 
 14360 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 14361 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), cardUidBlockBuf(18), 
 14362 ;;  slen            1   20[BANK0 ] unsigned char 
 14363 ;;  rbuf            2   21[BANK0 ] PTR unsigned char 
 14364 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardUidBloc
      +kBuf(18), 
 14365 ;;		 -> NULL(0), 
 14366 ;;  rlen            2   23[BANK0 ] PTR unsigned char 
 14367 ;;		 -> pcd_mifare_transceive@cmdBufferSize(1), picc_select@responseLength(1), mfapi_is_new_card_present@bufferSize(1), 
      +rdLen(1), 
 14368 ;;		 -> NULL(0), 
 14369 ;;  validBits       1   25[BANK0 ] PTR unsigned char 
 14370 ;;		 -> pcd_mifare_transceive@validBits(1), picc_select@txLastBits(1), picc_req_a_or_wakeup_a@validBits(1), NULL(0), 
 14371 ;;  rxAlign         1   26[BANK0 ] unsigned char 
 14372 ;;  checkCRC        1   27[BANK0 ] unsigned char 
 14373 ;; Auto vars:     Size  Location     Type
 14374 ;;  cmd             1   34[BANK0 ] unsigned char 
 14375 ;;  controlBuffe    2   35[BANK0 ] unsigned char [2]
 14376 ;;  status          1   38[BANK0 ] enum E5272
 14377 ;;  i               2   39[BANK0 ] unsigned int 
 14378 ;;  tmp8            1   42[BANK0 ] unsigned char 
 14379 ;;  _validBits      1   41[BANK0 ] unsigned char 
 14380 ;;  errorRegValu    1   37[BANK0 ] unsigned char 
 14381 ;;  bitFraming      1   31[BANK0 ] unsigned char 
 14382 ;;  txLastBits      1   30[BANK0 ] unsigned char 
 14383 ;; Return value:  Size  Location     Type
 14384 ;;                  1    wreg      enum E5272
 14385 ;; Registers used:
 14386 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14387 ;; Tracked objects:
 14388 ;;		On entry : 0/0
 14389 ;;		On exit  : 0/0
 14390 ;;		Unchanged: 0/0
 14391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14392 ;;      Params:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 14393 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 14394 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14395 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0
 14396 ;;Total ram usage:       26 bytes
 14397 ;; Hardware stack levels used:    1
 14398 ;; Hardware stack levels required when called:    6
 14399 ;; This function calls:
 14400 ;;		_mfrc522_bal_read_fifo_len_ex
 14401 ;;		_mfrc522_bal_read_reg
 14402 ;;		_mfrc522_bal_set_bit_reg
 14403 ;;		_mfrc522_bal_write_reg
 14404 ;;		_mfrc522_bal_write_reg_len
 14405 ;;		_mfrc522_hal_calculate_crc
 14406 ;; This function is called by:
 14407 ;;		_picc_req_a_or_wakeup_a
 14408 ;;		_picc_select
 14409 ;;		_picc_halt_a
 14410 ;;		_picc_authenticate
 14411 ;;		_mifare_read
 14412 ;;		_pcd_mifare_transceive
 14413 ;; This function uses a non-reentrant model
 14414 ;;
 14415                           
 14416                           
 14417                           ;psect for function _pcd_comm_with_picc
 14418  0AB5                     _pcd_comm_with_picc:	
 14419                           
 14420                           ;incstack = 0
 14421                           ; Regs used in _pcd_comm_with_picc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14422                           ;pcd_comm_with_picc@cmd stored from wreg
 14423  0AB5  0020               	movlb	0	; select bank0
 14424  0AB6  00C2               	movwf	pcd_comm_with_picc@cmd
 14425                           
 14426                           ;mfrc522_picc.c: 47: uint8_t tmp8, _validBits;
 14427                           ;mfrc522_picc.c: 48: uint16_t i;
 14428                           ;mfrc522_picc.c: 50: uint8_t txLastBits = validBits ? (*validBits) : 0;
 14429  0AB7  0839               	movf	pcd_comm_with_picc@validBits,w
 14430  0AB8  1D03               	btfss	3,2
 14431  0AB9  2ABD               	goto	l11535
 14432  0ABA  01C0               	clrf	_pcd_comm_with_picc$3131
 14433  0ABB  01C1               	clrf	_pcd_comm_with_picc$3131+1
 14434  0ABC  2AC7               	goto	l11537
 14435  0ABD                     l11535:	
 14436  0ABD  0839               	movf	pcd_comm_with_picc@validBits,w
 14437  0ABE  0086               	movwf	6
 14438  0ABF  0187               	clrf	7
 14439  0AC0  0801               	movf	1,w
 14440  0AC1  00BC               	movwf	??_pcd_comm_with_picc
 14441  0AC2  01BD               	clrf	??_pcd_comm_with_picc+1
 14442  0AC3  083C               	movf	??_pcd_comm_with_picc,w
 14443  0AC4  00C0               	movwf	_pcd_comm_with_picc$3131
 14444  0AC5  083D               	movf	??_pcd_comm_with_picc+1,w
 14445  0AC6  00C1               	movwf	_pcd_comm_with_picc$3131+1
 14446  0AC7                     l11537:	
 14447  0AC7  0840               	movf	_pcd_comm_with_picc$3131,w
 14448  0AC8  00BC               	movwf	??_pcd_comm_with_picc
 14449  0AC9  083C               	movf	??_pcd_comm_with_picc,w
 14450  0ACA  00BE               	movwf	pcd_comm_with_picc@txLastBits
 14451                           
 14452                           ;mfrc522_picc.c: 51: uint8_t bitFraming = (rxAlign << 4) + txLastBits;
 14453  0ACB  083A               	movf	pcd_comm_with_picc@rxAlign,w
 14454  0ACC  00BC               	movwf	??_pcd_comm_with_picc
 14455  0ACD  3003               	movlw	3
 14456  0ACE                     u9775:	
 14457  0ACE  35BC               	lslf	??_pcd_comm_with_picc,f
 14458  0ACF  3EFF               	addlw	-1
 14459  0AD0  1D03               	skipz
 14460  0AD1  2ACE               	goto	u9775
 14461  0AD2  353C               	lslf	??_pcd_comm_with_picc,w
 14462  0AD3  073E               	addwf	pcd_comm_with_picc@txLastBits,w
 14463  0AD4  00BD               	movwf	??_pcd_comm_with_picc+1
 14464  0AD5  083D               	movf	??_pcd_comm_with_picc+1,w
 14465  0AD6  00BF               	movwf	pcd_comm_with_picc@bitFraming
 14466                           
 14467                           ;mfrc522_picc.c: 53: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 14468  0AD7  01F7               	clrf	mfrc522_bal_write_reg@x
 14469  0AD8  3001               	movlw	1
 14470  0AD9  319E  2639  318A   	fcall	_mfrc522_bal_write_reg
 14471                           
 14472                           ;mfrc522_picc.c: 54: mfrc522_bal_write_reg(ComIrqReg, 0x7F);
 14473  0ADC  307F               	movlw	127
 14474  0ADD  0020               	movlb	0	; select bank0
 14475  0ADE  00BC               	movwf	??_pcd_comm_with_picc
 14476  0ADF  083C               	movf	??_pcd_comm_with_picc,w
 14477  0AE0  00F7               	movwf	mfrc522_bal_write_reg@x
 14478  0AE1  3004               	movlw	4
 14479  0AE2  319E  2639  318A   	fcall	_mfrc522_bal_write_reg
 14480                           
 14481                           ;mfrc522_picc.c: 55: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 14482  0AE5  3080               	movlw	128
 14483  0AE6  0020               	movlb	0	; select bank0
 14484  0AE7  00BC               	movwf	??_pcd_comm_with_picc
 14485  0AE8  083C               	movf	??_pcd_comm_with_picc,w
 14486  0AE9  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 14487  0AEA  300A               	movlw	10
 14488  0AEB  319E  26C1  318A   	fcall	_mfrc522_bal_set_bit_reg
 14489                           
 14490                           ;mfrc522_picc.c: 56: mfrc522_bal_write_reg_len(FIFODataReg, sbuf, slen);
 14491  0AEE  0020               	movlb	0	; select bank0
 14492  0AEF  0833               	movf	pcd_comm_with_picc@sbuf+1,w
 14493  0AF0  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 14494  0AF1  0832               	movf	pcd_comm_with_picc@sbuf,w
 14495  0AF2  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 14496  0AF3  0834               	movf	pcd_comm_with_picc@slen,w
 14497  0AF4  00BC               	movwf	??_pcd_comm_with_picc
 14498  0AF5  083C               	movf	??_pcd_comm_with_picc,w
 14499  0AF6  00A2               	movwf	mfrc522_bal_write_reg_len@len
 14500  0AF7  3009               	movlw	9
 14501  0AF8  3190  20B9  318A   	fcall	_mfrc522_bal_write_reg_len
 14502                           
 14503                           ;mfrc522_picc.c: 57: mfrc522_bal_write_reg(BitFramingReg, bitFraming);
 14504  0AFB  0020               	movlb	0	; select bank0
 14505  0AFC  083F               	movf	pcd_comm_with_picc@bitFraming,w
 14506  0AFD  00BC               	movwf	??_pcd_comm_with_picc
 14507  0AFE  083C               	movf	??_pcd_comm_with_picc,w
 14508  0AFF  00F7               	movwf	mfrc522_bal_write_reg@x
 14509  0B00  300D               	movlw	13
 14510  0B01  319E  2639  318A   	fcall	_mfrc522_bal_write_reg
 14511                           
 14512                           ;mfrc522_picc.c: 58: mfrc522_bal_write_reg(CommandReg, cmd);
 14513  0B04  0020               	movlb	0	; select bank0
 14514  0B05  0842               	movf	pcd_comm_with_picc@cmd,w
 14515  0B06  00BC               	movwf	??_pcd_comm_with_picc
 14516  0B07  083C               	movf	??_pcd_comm_with_picc,w
 14517  0B08  00F7               	movwf	mfrc522_bal_write_reg@x
 14518  0B09  3001               	movlw	1
 14519  0B0A  319E  2639  318A   	fcall	_mfrc522_bal_write_reg
 14520                           
 14521                           ;mfrc522_picc.c: 59: if (cmd == PCD_Transceive) {
 14522  0B0D  300C               	movlw	12
 14523  0B0E  0020               	movlb	0	; select bank0
 14524  0B0F  0642               	xorwf	pcd_comm_with_picc@cmd,w
 14525  0B10  1D03               	btfss	3,2
 14526  0B11  2B1A               	goto	l11555
 14527                           
 14528                           ;mfrc522_picc.c: 60: mfrc522_bal_set_bit_reg(BitFramingReg, 0x80);
 14529  0B12  3080               	movlw	128
 14530  0B13  00BC               	movwf	??_pcd_comm_with_picc
 14531  0B14  083C               	movf	??_pcd_comm_with_picc,w
 14532  0B15  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 14533  0B16  300D               	movlw	13
 14534  0B17  319E  26C1  318A   	fcall	_mfrc522_bal_set_bit_reg
 14535  0B1A                     l11555:	
 14536                           
 14537                           ;mfrc522_picc.c: 61: }
 14538                           ;mfrc522_picc.c: 63: i = 2000;
 14539  0B1A  30D0               	movlw	208
 14540  0B1B  0020               	movlb	0	; select bank0
 14541  0B1C  00C7               	movwf	pcd_comm_with_picc@i
 14542  0B1D  3007               	movlw	7
 14543  0B1E  00C8               	movwf	pcd_comm_with_picc@i+1
 14544  0B1F                     l11575:	
 14545                           ;mfrc522_picc.c: 64: while (i) {
 14546                           
 14547  0B1F  0847               	movf	pcd_comm_with_picc@i,w
 14548  0B20  0448               	iorwf	pcd_comm_with_picc@i+1,w
 14549  0B21  1903               	btfsc	3,2
 14550  0B22  2B3D               	goto	l11577
 14551                           
 14552                           ;mfrc522_picc.c: 65: tmp8 = mfrc522_bal_read_reg(ComIrqReg);
 14553  0B23  3004               	movlw	4
 14554  0B24  319F  2709  318A   	fcall	_mfrc522_bal_read_reg
 14555  0B27  0020               	movlb	0	; select bank0
 14556  0B28  00BC               	movwf	??_pcd_comm_with_picc
 14557  0B29  083C               	movf	??_pcd_comm_with_picc,w
 14558  0B2A  00CA               	movwf	pcd_comm_with_picc@tmp8
 14559                           
 14560                           ;mfrc522_picc.c: 66: if (tmp8 & waitIRQ) break;
 14561  0B2B  084A               	movf	pcd_comm_with_picc@tmp8,w
 14562  0B2C  0531               	andwf	pcd_comm_with_picc@waitIRQ,w
 14563  0B2D  1D03               	btfss	3,2
 14564  0B2E  2B3D               	goto	l11577
 14565                           
 14566                           ;mfrc522_picc.c: 67: if (tmp8 & 0x01) return STATUS_TIMEOUT;
 14567  0B2F  1C4A               	btfss	pcd_comm_with_picc@tmp8,0
 14568  0B30  2B33               	goto	l11567
 14569  0B31  3003               	movlw	3
 14570  0B32  0008               	return
 14571  0B33                     l11567:	
 14572                           
 14573                           ;mfrc522_picc.c: 68: i--;
 14574  0B33  3001               	movlw	1
 14575  0B34  02C7               	subwf	pcd_comm_with_picc@i,f
 14576  0B35  3000               	movlw	0
 14577  0B36  3BC8               	subwfb	pcd_comm_with_picc@i+1,f
 14578                           
 14579                           ;mfrc522_picc.c: 69: if(i==0)return STATUS_TIMEOUT;
 14580  0B37  0847               	movf	pcd_comm_with_picc@i,w
 14581  0B38  0448               	iorwf	pcd_comm_with_picc@i+1,w
 14582  0B39  1D03               	btfss	3,2
 14583  0B3A  2B1F               	goto	l11575
 14584  0B3B  3003               	movlw	3
 14585  0B3C  0008               	return
 14586  0B3D                     l11577:	
 14587                           
 14588                           ;mfrc522_picc.c: 70: }
 14589                           ;mfrc522_picc.c: 71: uint8_t errorRegValue = mfrc522_bal_read_reg(ErrorReg);
 14590  0B3D  3006               	movlw	6
 14591  0B3E  319F  2709  318A   	fcall	_mfrc522_bal_read_reg
 14592  0B41  0020               	movlb	0	; select bank0
 14593  0B42  00BC               	movwf	??_pcd_comm_with_picc
 14594  0B43  083C               	movf	??_pcd_comm_with_picc,w
 14595  0B44  00C5               	movwf	pcd_comm_with_picc@errorRegValue
 14596                           
 14597                           ;mfrc522_picc.c: 72: if (errorRegValue & 0x13)return STATUS_ERROR;
 14598  0B45  0845               	movf	pcd_comm_with_picc@errorRegValue,w
 14599  0B46  3913               	andlw	19
 14600  0B47  1903               	btfsc	3,2
 14601  0B48  2B4B               	goto	l11585
 14602  0B49  3001               	movlw	1
 14603  0B4A  0008               	return
 14604  0B4B                     l11585:	
 14605                           
 14606                           ;mfrc522_picc.c: 73: if ((rbuf != (0))&& (rlen != (0))) {
 14607  0B4B  0835               	movf	pcd_comm_with_picc@rbuf,w
 14608  0B4C  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 14609  0B4D  1903               	btfsc	3,2
 14610  0B4E  2B8E               	goto	l11607
 14611  0B4F  0837               	movf	pcd_comm_with_picc@rlen,w
 14612  0B50  0438               	iorwf	pcd_comm_with_picc@rlen+1,w
 14613  0B51  1903               	btfsc	3,2
 14614  0B52  2B8E               	goto	l11607
 14615                           
 14616                           ;mfrc522_picc.c: 74: tmp8 = mfrc522_bal_read_reg(FIFOLevelReg);
 14617  0B53  300A               	movlw	10
 14618  0B54  319F  2709  318A   	fcall	_mfrc522_bal_read_reg
 14619  0B57  0020               	movlb	0	; select bank0
 14620  0B58  00BC               	movwf	??_pcd_comm_with_picc
 14621  0B59  083C               	movf	??_pcd_comm_with_picc,w
 14622  0B5A  00CA               	movwf	pcd_comm_with_picc@tmp8
 14623                           
 14624                           ;mfrc522_picc.c: 75: if (tmp8 > *rlen) return STATUS_NO_ROOM;
 14625  0B5B  0837               	movf	pcd_comm_with_picc@rlen,w
 14626  0B5C  0086               	movwf	6
 14627  0B5D  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14628  0B5E  0087               	movwf	7
 14629  0B5F  084A               	movf	pcd_comm_with_picc@tmp8,w
 14630  0B60  0201               	subwf	1,w
 14631  0B61  1803               	skipnc
 14632  0B62  2B65               	goto	l11597
 14633  0B63  3004               	movlw	4
 14634  0B64  0008               	return
 14635  0B65                     l11597:	
 14636                           
 14637                           ;mfrc522_picc.c: 76: *rlen = tmp8;
 14638  0B65  0837               	movf	pcd_comm_with_picc@rlen,w
 14639  0B66  0086               	movwf	6
 14640  0B67  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14641  0B68  0087               	movwf	7
 14642  0B69  084A               	movf	pcd_comm_with_picc@tmp8,w
 14643  0B6A  0081               	movwf	1
 14644                           
 14645                           ;mfrc522_picc.c: 77: mfrc522_bal_read_fifo_len_ex(FIFODataReg, rbuf, tmp8, rxAlign);
 14646  0B6B  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 14647  0B6C  00A1               	movwf	mfrc522_bal_read_fifo_len_ex@buf+1
 14648  0B6D  0835               	movf	pcd_comm_with_picc@rbuf,w
 14649  0B6E  00A0               	movwf	mfrc522_bal_read_fifo_len_ex@buf
 14650  0B6F  084A               	movf	pcd_comm_with_picc@tmp8,w
 14651  0B70  00BC               	movwf	??_pcd_comm_with_picc
 14652  0B71  083C               	movf	??_pcd_comm_with_picc,w
 14653  0B72  00A2               	movwf	mfrc522_bal_read_fifo_len_ex@len
 14654  0B73  083A               	movf	pcd_comm_with_picc@rxAlign,w
 14655  0B74  00BD               	movwf	??_pcd_comm_with_picc+1
 14656  0B75  083D               	movf	??_pcd_comm_with_picc+1,w
 14657  0B76  00A3               	movwf	mfrc522_bal_read_fifo_len_ex@rx_align
 14658  0B77  3009               	movlw	9
 14659  0B78  3193  23CD  318A   	fcall	_mfrc522_bal_read_fifo_len_ex
 14660                           
 14661                           ;mfrc522_picc.c: 78: _validBits = mfrc522_bal_read_reg(ControlReg) & 0x07;
 14662  0B7B  300C               	movlw	12
 14663  0B7C  319F  2709  318A   	fcall	_mfrc522_bal_read_reg
 14664  0B7F  3907               	andlw	7
 14665  0B80  0020               	movlb	0	; select bank0
 14666  0B81  00BC               	movwf	??_pcd_comm_with_picc
 14667  0B82  083C               	movf	??_pcd_comm_with_picc,w
 14668  0B83  00C9               	movwf	pcd_comm_with_picc@_validBits
 14669                           
 14670                           ;mfrc522_picc.c: 80: if (validBits != (0)) {
 14671  0B84  0839               	movf	pcd_comm_with_picc@validBits,w
 14672  0B85  1903               	btfsc	3,2
 14673  0B86  2B8E               	goto	l11607
 14674                           
 14675                           ;mfrc522_picc.c: 81: *validBits = _validBits;
 14676  0B87  0849               	movf	pcd_comm_with_picc@_validBits,w
 14677  0B88  00BC               	movwf	??_pcd_comm_with_picc
 14678  0B89  0839               	movf	pcd_comm_with_picc@validBits,w
 14679  0B8A  0086               	movwf	6
 14680  0B8B  0187               	clrf	7
 14681  0B8C  083C               	movf	??_pcd_comm_with_picc,w
 14682  0B8D  0081               	movwf	1
 14683  0B8E                     l11607:	
 14684                           
 14685                           ;mfrc522_picc.c: 82: }
 14686                           ;mfrc522_picc.c: 83: }
 14687                           ;mfrc522_picc.c: 84: if (errorRegValue & 0x08) return STATUS_COLLISION;
 14688  0B8E  1DC5               	btfss	pcd_comm_with_picc@errorRegValue,3
 14689  0B8F  2B92               	goto	l11613
 14690  0B90  3002               	movlw	2
 14691  0B91  0008               	return
 14692  0B92                     l11613:	
 14693                           
 14694                           ;mfrc522_picc.c: 85: if ((rbuf != (0)) && (rlen != (0)) && checkCRC) {
 14695  0B92  0835               	movf	pcd_comm_with_picc@rbuf,w
 14696  0B93  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 14697  0B94  1903               	btfsc	3,2
 14698  0B95  2C00               	goto	l11651
 14699  0B96  0837               	movf	pcd_comm_with_picc@rlen,w
 14700  0B97  0438               	iorwf	pcd_comm_with_picc@rlen+1,w
 14701  0B98  1903               	btfsc	3,2
 14702  0B99  2C00               	goto	l11651
 14703  0B9A  083B               	movf	pcd_comm_with_picc@checkCRC,w
 14704  0B9B  1903               	btfsc	3,2
 14705  0B9C  2C00               	goto	l11651
 14706                           
 14707                           ;mfrc522_picc.c: 86: if (*rlen == 1 && _validBits == 4) return STATUS_MIFARE_NACK;
 14708  0B9D  0837               	movf	pcd_comm_with_picc@rlen,w
 14709  0B9E  0086               	movwf	6
 14710  0B9F  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14711  0BA0  0087               	movwf	7
 14712  0BA1  0301               	decf	1,w
 14713  0BA2  1D03               	btfss	3,2
 14714  0BA3  2BAA               	goto	l11627
 14715  0BA4  3004               	movlw	4
 14716  0BA5  0649               	xorwf	pcd_comm_with_picc@_validBits,w
 14717  0BA6  1D03               	btfss	3,2
 14718  0BA7  2BAA               	goto	l11627
 14719  0BA8  30FF               	movlw	255
 14720  0BA9  0008               	return
 14721  0BAA                     l11627:	
 14722                           
 14723                           ;mfrc522_picc.c: 87: if (*rlen < 2 || _validBits != 0) return STATUS_CRC_WRONG;
 14724  0BAA  0837               	movf	pcd_comm_with_picc@rlen,w
 14725  0BAB  0086               	movwf	6
 14726  0BAC  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14727  0BAD  0087               	movwf	7
 14728  0BAE  3002               	movlw	2
 14729  0BAF  0201               	subwf	1,w
 14730  0BB0  1C03               	skipc
 14731  0BB1  2BB5               	goto	l11631
 14732  0BB2  0849               	movf	pcd_comm_with_picc@_validBits,w
 14733  0BB3  1903               	btfsc	3,2
 14734  0BB4  2BB7               	goto	l11635
 14735  0BB5                     l11631:	
 14736  0BB5  3007               	movlw	7
 14737  0BB6  0008               	return
 14738  0BB7                     l11635:	
 14739                           
 14740                           ;mfrc522_picc.c: 88: uint8_t controlBuffer[2];
 14741                           ;mfrc522_picc.c: 89: em_PcdStatusCode status = mfrc522_hal_calculate_crc(rbuf, *rlen - 2
      +                          , controlBuffer);
 14742  0BB7  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 14743  0BB8  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 14744  0BB9  0835               	movf	pcd_comm_with_picc@rbuf,w
 14745  0BBA  00A6               	movwf	mfrc522_hal_calculate_crc@data
 14746  0BBB  0837               	movf	pcd_comm_with_picc@rlen,w
 14747  0BBC  0086               	movwf	6
 14748  0BBD  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14749  0BBE  0087               	movwf	7
 14750  0BBF  0801               	movf	1,w
 14751  0BC0  3EFE               	addlw	254
 14752  0BC1  00BC               	movwf	??_pcd_comm_with_picc
 14753  0BC2  083C               	movf	??_pcd_comm_with_picc,w
 14754  0BC3  00A8               	movwf	mfrc522_hal_calculate_crc@length
 14755  0BC4  3043               	movlw	low pcd_comm_with_picc@controlBuffer
 14756  0BC5  00A9               	movwf	mfrc522_hal_calculate_crc@result
 14757  0BC6  3000               	movlw	high pcd_comm_with_picc@controlBuffer
 14758  0BC7  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 14759  0BC8  3197  2719  318A   	fcall	_mfrc522_hal_calculate_crc
 14760  0BCB  0020               	movlb	0	; select bank0
 14761  0BCC  00BD               	movwf	??_pcd_comm_with_picc+1
 14762  0BCD  083D               	movf	??_pcd_comm_with_picc+1,w
 14763  0BCE  00C6               	movwf	pcd_comm_with_picc@status
 14764                           
 14765                           ;mfrc522_picc.c: 90: if (status != STATUS_OK) return status;
 14766  0BCF  0846               	movf	pcd_comm_with_picc@status,w
 14767  0BD0  1903               	btfsc	3,2
 14768  0BD1  2BD4               	goto	l11643
 14769  0BD2  0846               	movf	pcd_comm_with_picc@status,w
 14770  0BD3  0008               	return
 14771  0BD4                     l11643:	
 14772                           
 14773                           ;mfrc522_picc.c: 92: if ((rbuf[*rlen - 2] != controlBuffer[0]) || (rbuf[*rlen - 1] != co
      +                          ntrolBuffer[1])) {
 14774  0BD4  0837               	movf	pcd_comm_with_picc@rlen,w
 14775  0BD5  0086               	movwf	6
 14776  0BD6  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14777  0BD7  0087               	movwf	7
 14778  0BD8  0801               	movf	1,w
 14779  0BD9  3EFE               	addlw	254
 14780  0BDA  00BC               	movwf	??_pcd_comm_with_picc
 14781  0BDB  30FF               	movlw	255
 14782  0BDC  1803               	skipnc
 14783  0BDD  3000               	movlw	0
 14784  0BDE  00BD               	movwf	??_pcd_comm_with_picc+1
 14785  0BDF  083C               	movf	??_pcd_comm_with_picc,w
 14786  0BE0  0735               	addwf	pcd_comm_with_picc@rbuf,w
 14787  0BE1  0086               	movwf	6
 14788  0BE2  083D               	movf	??_pcd_comm_with_picc+1,w
 14789  0BE3  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 14790  0BE4  0087               	movwf	7
 14791  0BE5  0801               	movf	1,w
 14792  0BE6  0643               	xorwf	pcd_comm_with_picc@controlBuffer,w
 14793  0BE7  1D03               	skipz
 14794  0BE8  2BFE               	goto	l11647
 14795  0BE9  0837               	movf	pcd_comm_with_picc@rlen,w
 14796  0BEA  0086               	movwf	6
 14797  0BEB  0838               	movf	pcd_comm_with_picc@rlen+1,w
 14798  0BEC  0087               	movwf	7
 14799  0BED  0801               	movf	1,w
 14800  0BEE  3EFF               	addlw	255
 14801  0BEF  00BC               	movwf	??_pcd_comm_with_picc
 14802  0BF0  30FF               	movlw	255
 14803  0BF1  1803               	skipnc
 14804  0BF2  3000               	movlw	0
 14805  0BF3  00BD               	movwf	??_pcd_comm_with_picc+1
 14806  0BF4  083C               	movf	??_pcd_comm_with_picc,w
 14807  0BF5  0735               	addwf	pcd_comm_with_picc@rbuf,w
 14808  0BF6  0086               	movwf	6
 14809  0BF7  083D               	movf	??_pcd_comm_with_picc+1,w
 14810  0BF8  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 14811  0BF9  0087               	movwf	7
 14812  0BFA  0801               	movf	1,w
 14813  0BFB  0644               	xorwf	pcd_comm_with_picc@controlBuffer+1,w
 14814  0BFC  1903               	skipnz
 14815  0BFD  2C00               	goto	l11651
 14816  0BFE                     l11647:	
 14817                           
 14818                           ;mfrc522_picc.c: 93: return STATUS_CRC_WRONG;
 14819  0BFE  3007               	movlw	7
 14820  0BFF  0008               	return
 14821  0C00                     l11651:	
 14822                           
 14823                           ;mfrc522_picc.c: 94: }
 14824                           ;mfrc522_picc.c: 95: }
 14825                           ;mfrc522_picc.c: 96: return STATUS_OK;
 14826  0C00  3000               	movlw	0
 14827  0C01  0008               	return
 14828  0C02                     __end_of_pcd_comm_with_picc:	
 14829                           
 14830                           	psect	text19
 14831  1719                     __ptext19:	
 14832 ;; *************** function _mfrc522_hal_calculate_crc *****************
 14833 ;; Defined at:
 14834 ;;		line 68 in file "src/nfc/hal/mfrc522_hal.c"
 14835 ;; Parameters:    Size  Location     Type
 14836 ;;  data            2    6[BANK0 ] PTR unsigned char 
 14837 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), mfapi_is_new_card_present@buf
      +ferATQA(2), 
 14838 ;;		 -> cardUidBlockBuf(18), NULL(0), 
 14839 ;;  length          1    8[BANK0 ] unsigned char 
 14840 ;;  result          2    9[BANK0 ] PTR unsigned char 
 14841 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), pcd_comm_with_picc@controlBuf
      +fer(2), 
 14842 ;;		 -> cardUidBlockBuf(18), 
 14843 ;; Auto vars:     Size  Location     Type
 14844 ;;  i               2   15[BANK0 ] unsigned int 
 14845 ;;  t8              1   14[BANK0 ] unsigned char 
 14846 ;; Return value:  Size  Location     Type
 14847 ;;                  1    wreg      enum E5272
 14848 ;; Registers used:
 14849 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14850 ;; Tracked objects:
 14851 ;;		On entry : 0/0
 14852 ;;		On exit  : 0/0
 14853 ;;		Unchanged: 0/0
 14854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14855 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14856 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14857 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14858 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 14859 ;;Total ram usage:       11 bytes
 14860 ;; Hardware stack levels used:    1
 14861 ;; Hardware stack levels required when called:    5
 14862 ;; This function calls:
 14863 ;;		_mfrc522_bal_read_reg
 14864 ;;		_mfrc522_bal_set_bit_reg
 14865 ;;		_mfrc522_bal_write_reg
 14866 ;;		_mfrc522_bal_write_reg_len
 14867 ;; This function is called by:
 14868 ;;		_pcd_comm_with_picc
 14869 ;;		_picc_select
 14870 ;;		_picc_halt_a
 14871 ;;		_mifare_read
 14872 ;;		_pcd_mifare_transceive
 14873 ;; This function uses a non-reentrant model
 14874 ;;
 14875                           
 14876                           
 14877                           ;psect for function _mfrc522_hal_calculate_crc
 14878  1719                     _mfrc522_hal_calculate_crc:	
 14879                           
 14880                           ;mfrc522_hal.c: 70: uint16_t i = 1847;
 14881                           
 14882                           ;incstack = 0
 14883                           ; Regs used in _mfrc522_hal_calculate_crc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14884  1719  3037               	movlw	55
 14885  171A  0020               	movlb	0	; select bank0
 14886  171B  00AF               	movwf	mfrc522_hal_calculate_crc@i
 14887  171C  3007               	movlw	7
 14888  171D  00B0               	movwf	mfrc522_hal_calculate_crc@i+1
 14889                           
 14890                           ;mfrc522_hal.c: 71: uint8_t t8;
 14891                           ;mfrc522_hal.c: 72: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 14892  171E  01F7               	clrf	mfrc522_bal_write_reg@x
 14893  171F  3001               	movlw	1
 14894  1720  319E  2639  3197   	fcall	_mfrc522_bal_write_reg
 14895                           
 14896                           ;mfrc522_hal.c: 73: mfrc522_bal_write_reg(DivIrqReg, 0x04);
 14897  1723  3004               	movlw	4
 14898  1724  0020               	movlb	0	; select bank0
 14899  1725  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14900  1726  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14901  1727  00F7               	movwf	mfrc522_bal_write_reg@x
 14902  1728  3005               	movlw	5
 14903  1729  319E  2639  3197   	fcall	_mfrc522_bal_write_reg
 14904                           
 14905                           ;mfrc522_hal.c: 74: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 14906  172C  3080               	movlw	128
 14907  172D  0020               	movlb	0	; select bank0
 14908  172E  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14909  172F  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14910  1730  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 14911  1731  300A               	movlw	10
 14912  1732  319E  26C1  3197   	fcall	_mfrc522_bal_set_bit_reg
 14913                           
 14914                           ;mfrc522_hal.c: 75: mfrc522_bal_write_reg_len(FIFODataReg,data,length);
 14915  1735  0020               	movlb	0	; select bank0
 14916  1736  0827               	movf	mfrc522_hal_calculate_crc@data+1,w
 14917  1737  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 14918  1738  0826               	movf	mfrc522_hal_calculate_crc@data,w
 14919  1739  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 14920  173A  0828               	movf	mfrc522_hal_calculate_crc@length,w
 14921  173B  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14922  173C  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14923  173D  00A2               	movwf	mfrc522_bal_write_reg_len@len
 14924  173E  3009               	movlw	9
 14925  173F  3190  20B9  3197   	fcall	_mfrc522_bal_write_reg_len
 14926                           
 14927                           ;mfrc522_hal.c: 76: mfrc522_bal_write_reg(CommandReg, PCD_CalcCRC);
 14928  1742  3003               	movlw	3
 14929  1743  0020               	movlb	0	; select bank0
 14930  1744  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14931  1745  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14932  1746  00F7               	movwf	mfrc522_bal_write_reg@x
 14933  1747  3001               	movlw	1
 14934  1748  319E  2639  3197   	fcall	_mfrc522_bal_write_reg
 14935  174B                     l11333:	
 14936                           ;mfrc522_hal.c: 77: while(i)
 14937                           
 14938  174B  0020               	movlb	0	; select bank0
 14939  174C  082F               	movf	mfrc522_hal_calculate_crc@i,w
 14940  174D  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 14941  174E  1903               	btfsc	3,2
 14942  174F  2F5F               	goto	l11335
 14943                           
 14944                           ;mfrc522_hal.c: 78: {
 14945                           ;mfrc522_hal.c: 79: i--;
 14946  1750  3001               	movlw	1
 14947  1751  0020               	movlb	0	; select bank0
 14948  1752  02AF               	subwf	mfrc522_hal_calculate_crc@i,f
 14949  1753  3000               	movlw	0
 14950  1754  3BB0               	subwfb	mfrc522_hal_calculate_crc@i+1,f
 14951                           
 14952                           ;mfrc522_hal.c: 80: t8 = mfrc522_bal_read_reg(DivIrqReg);
 14953  1755  3005               	movlw	5
 14954  1756  319F  2709  3197   	fcall	_mfrc522_bal_read_reg
 14955  1759  0020               	movlb	0	; select bank0
 14956  175A  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14957  175B  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14958  175C  00AE               	movwf	mfrc522_hal_calculate_crc@t8
 14959                           
 14960                           ;mfrc522_hal.c: 81: if (t8 & 0x04)break;
 14961  175D  1D2E               	btfss	mfrc522_hal_calculate_crc@t8,2
 14962  175E  2F4B               	goto	l11333
 14963  175F                     l11335:	
 14964                           
 14965                           ;mfrc522_hal.c: 82: }
 14966                           ;mfrc522_hal.c: 83: if(i==0)return STATUS_TIMEOUT;
 14967  175F  082F               	movf	mfrc522_hal_calculate_crc@i,w
 14968  1760  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 14969  1761  1D03               	btfss	3,2
 14970  1762  2F65               	goto	l11341
 14971  1763  3003               	movlw	3
 14972  1764  0008               	return
 14973  1765                     l11341:	
 14974                           
 14975                           ;mfrc522_hal.c: 84: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 14976  1765  01F7               	clrf	mfrc522_bal_write_reg@x
 14977  1766  3001               	movlw	1
 14978  1767  319E  2639  3197   	fcall	_mfrc522_bal_write_reg
 14979                           
 14980                           ;mfrc522_hal.c: 85: result[0] = mfrc522_bal_read_reg(CRCResultRegL);
 14981  176A  3022               	movlw	34
 14982  176B  319F  2709  3197   	fcall	_mfrc522_bal_read_reg
 14983  176E  0020               	movlb	0	; select bank0
 14984  176F  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14985  1770  0829               	movf	mfrc522_hal_calculate_crc@result,w
 14986  1771  0086               	movwf	6
 14987  1772  082A               	movf	mfrc522_hal_calculate_crc@result+1,w
 14988  1773  0087               	movwf	7
 14989  1774  082B               	movf	??_mfrc522_hal_calculate_crc,w
 14990  1775  0081               	movwf	1
 14991                           
 14992                           ;mfrc522_hal.c: 86: result[1] = mfrc522_bal_read_reg(CRCResultRegH);
 14993  1776  3021               	movlw	33
 14994  1777  319F  2709         	fcall	_mfrc522_bal_read_reg
 14995  1779  0020               	movlb	0	; select bank0
 14996  177A  00AB               	movwf	??_mfrc522_hal_calculate_crc
 14997  177B  0829               	movf	mfrc522_hal_calculate_crc@result,w
 14998  177C  3E01               	addlw	1
 14999  177D  00AC               	movwf	??_mfrc522_hal_calculate_crc+1
 15000  177E  3000               	movlw	0
 15001  177F  3D2A               	addwfc	mfrc522_hal_calculate_crc@result+1,w
 15002  1780  00AD               	movwf	??_mfrc522_hal_calculate_crc+2
 15003  1781  082C               	movf	??_mfrc522_hal_calculate_crc+1,w
 15004  1782  0086               	movwf	6
 15005  1783  082D               	movf	??_mfrc522_hal_calculate_crc+2,w
 15006  1784  0087               	movwf	7
 15007  1785  082B               	movf	??_mfrc522_hal_calculate_crc,w
 15008  1786  0081               	movwf	1
 15009                           
 15010                           ;mfrc522_hal.c: 87: return STATUS_OK;
 15011  1787  3000               	movlw	0
 15012  1788  0008               	return
 15013  1789                     __end_of_mfrc522_hal_calculate_crc:	
 15014                           
 15015                           	psect	text20
 15016  10B9                     __ptext20:	
 15017 ;; *************** function _mfrc522_bal_write_reg_len *****************
 15018 ;; Defined at:
 15019 ;;		line 59 in file "src/nfc/bal/mfrc522_bal.c"
 15020 ;; Parameters:    Size  Location     Type
 15021 ;;  reg             1    wreg     unsigned char 
 15022 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 15023 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 15024 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), mfapi_is_new_card_present@bufferATQA(2), cardUidBlockBuf(18), NULL(0), 
 15025 ;;  len             1    2[BANK0 ] unsigned char 
 15026 ;; Auto vars:     Size  Location     Type
 15027 ;;  reg             1    3[BANK0 ] unsigned char 
 15028 ;;  i               1    4[BANK0 ] unsigned char 
 15029 ;; Return value:  Size  Location     Type
 15030 ;;                  1    wreg      void 
 15031 ;; Registers used:
 15032 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15033 ;; Tracked objects:
 15034 ;;		On entry : 0/0
 15035 ;;		On exit  : 0/0
 15036 ;;		Unchanged: 0/0
 15037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15038 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15039 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15041 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0
 15042 ;;Total ram usage:        6 bytes
 15043 ;; Hardware stack levels used:    1
 15044 ;; Hardware stack levels required when called:    3
 15045 ;; This function calls:
 15046 ;;		_mfrc522_bal_write_read_via_spi
 15047 ;; This function is called by:
 15048 ;;		_mfrc522_hal_calculate_crc
 15049 ;;		_pcd_comm_with_picc
 15050 ;; This function uses a non-reentrant model
 15051 ;;
 15052                           
 15053                           
 15054                           ;psect for function _mfrc522_bal_write_reg_len
 15055  10B9                     _mfrc522_bal_write_reg_len:	
 15056                           
 15057                           ;incstack = 0
 15058                           ; Regs used in _mfrc522_bal_write_reg_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 15059                           ;mfrc522_bal_write_reg_len@reg stored from wreg
 15060  10B9  0020               	movlb	0	; select bank0
 15061  10BA  00A3               	movwf	mfrc522_bal_write_reg_len@reg
 15062                           
 15063                           ;mfrc522_bal.c: 61: uint8_t i;
 15064                           ;mfrc522_bal.c: 62: do { LATCbits.LATC2 = 0; } while(0);;
 15065  10BB  0022               	movlb	2	; select bank2
 15066  10BC  110E               	bcf	14,2	;volatile
 15067                           
 15068                           ;mfrc522_bal.c: 63: do { LATCbits.LATC3 = 0; } while(0);;
 15069  10BD  118E               	bcf	14,3	;volatile
 15070                           
 15071                           ;mfrc522_bal.c: 64: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 15072  10BE  0020               	movlb	0	; select bank0
 15073  10BF  3523               	lslf	mfrc522_bal_write_reg_len@reg,w
 15074  10C0  397E               	andlw	126
 15075  10C1  3190  2072  3190   	fcall	_mfrc522_bal_write_read_via_spi
 15076                           
 15077                           ;mfrc522_bal.c: 65: for(i=0;i<len;i++)
 15078  10C4  0020               	movlb	0	; select bank0
 15079  10C5  01A4               	clrf	mfrc522_bal_write_reg_len@i
 15080  10C6                     l11185:	
 15081  10C6  0822               	movf	mfrc522_bal_write_reg_len@len,w
 15082  10C7  0224               	subwf	mfrc522_bal_write_reg_len@i,w
 15083  10C8  1803               	btfsc	3,0
 15084  10C9  28DC               	goto	l2039
 15085                           
 15086                           ;mfrc522_bal.c: 66: {
 15087                           ;mfrc522_bal.c: 67: mfrc522_bal_write_read_via_spi(*buf++);
 15088  10CA  0820               	movf	mfrc522_bal_write_reg_len@buf,w
 15089  10CB  0086               	movwf	6
 15090  10CC  0821               	movf	mfrc522_bal_write_reg_len@buf+1,w
 15091  10CD  0087               	movwf	7
 15092  10CE  0801               	movf	1,w
 15093  10CF  3190  2072  3190   	fcall	_mfrc522_bal_write_read_via_spi
 15094  10D2  3001               	movlw	1
 15095  10D3  0020               	movlb	0	; select bank0
 15096  10D4  07A0               	addwf	mfrc522_bal_write_reg_len@buf,f
 15097  10D5  3000               	movlw	0
 15098  10D6  3DA1               	addwfc	mfrc522_bal_write_reg_len@buf+1,f
 15099  10D7  3001               	movlw	1
 15100  10D8  00F7               	movwf	??_mfrc522_bal_write_reg_len
 15101  10D9  0877               	movf	??_mfrc522_bal_write_reg_len,w
 15102  10DA  07A4               	addwf	mfrc522_bal_write_reg_len@i,f
 15103  10DB  28C6               	goto	l11185
 15104  10DC                     l2039:	
 15105                           ;mfrc522_bal.c: 68: }
 15106                           ;mfrc522_bal.c: 69: do { LATCbits.LATC2 = 1; } while(0);;
 15107                           
 15108  10DC  0022               	movlb	2	; select bank2
 15109  10DD  150E               	bsf	14,2	;volatile
 15110  10DE  0008               	return
 15111  10DF                     __end_of_mfrc522_bal_write_reg_len:	
 15112                           
 15113                           	psect	text21
 15114  13CD                     __ptext21:	
 15115 ;; *************** function _mfrc522_bal_read_fifo_len_ex *****************
 15116 ;; Defined at:
 15117 ;;		line 115 in file "src/nfc/bal/mfrc522_bal.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  reg             1    wreg     unsigned char 
 15120 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 15121 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardUidBloc
      +kBuf(18), 
 15122 ;;		 -> NULL(0), 
 15123 ;;  len             1    2[BANK0 ] unsigned char 
 15124 ;;  rx_align        1    3[BANK0 ] unsigned char 
 15125 ;; Auto vars:     Size  Location     Type
 15126 ;;  reg             1    4[BANK0 ] unsigned char 
 15127 ;;  i               1    6[BANK0 ] unsigned char 
 15128 ;;  adr             1    5[BANK0 ] unsigned char 
 15129 ;; Return value:  Size  Location     Type
 15130 ;;                  1    wreg      void 
 15131 ;; Registers used:
 15132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15133 ;; Tracked objects:
 15134 ;;		On entry : 0/0
 15135 ;;		On exit  : 0/0
 15136 ;;		Unchanged: 0/0
 15137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 15139 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15141 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0
 15142 ;;Total ram usage:        8 bytes
 15143 ;; Hardware stack levels used:    1
 15144 ;; Hardware stack levels required when called:    3
 15145 ;; This function calls:
 15146 ;;		_mfrc522_bal_write_read_via_spi
 15147 ;; This function is called by:
 15148 ;;		_pcd_comm_with_picc
 15149 ;; This function uses a non-reentrant model
 15150 ;;
 15151                           
 15152                           
 15153                           ;psect for function _mfrc522_bal_read_fifo_len_ex
 15154  13CD                     _mfrc522_bal_read_fifo_len_ex:	
 15155                           
 15156                           ;incstack = 0
 15157                           ; Regs used in _mfrc522_bal_read_fifo_len_ex: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 15158                           ;mfrc522_bal_read_fifo_len_ex@reg stored from wreg
 15159  13CD  0020               	movlb	0	; select bank0
 15160  13CE  00A4               	movwf	mfrc522_bal_read_fifo_len_ex@reg
 15161                           
 15162                           ;mfrc522_bal.c: 117: uint8_t adr;
 15163                           ;mfrc522_bal.c: 118: uint8_t i;
 15164                           ;mfrc522_bal.c: 119: do { LATCbits.LATC2 = 0; } while(0);;
 15165  13CF  0022               	movlb	2	; select bank2
 15166  13D0  110E               	bcf	14,2	;volatile
 15167                           
 15168                           ;mfrc522_bal.c: 120: do { LATCbits.LATC3 = 0; } while(0);;
 15169  13D1  118E               	bcf	14,3	;volatile
 15170                           
 15171                           ;mfrc522_bal.c: 121: adr=((reg<<1) & 0x7e) | 0x80;
 15172  13D2  0020               	movlb	0	; select bank0
 15173  13D3  3524               	lslf	mfrc522_bal_read_fifo_len_ex@reg,w
 15174  13D4  397E               	andlw	126
 15175  13D5  3880               	iorlw	128
 15176  13D6  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 15177  13D7  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 15178  13D8  00A5               	movwf	mfrc522_bal_read_fifo_len_ex@adr
 15179                           
 15180                           ;mfrc522_bal.c: 122: mfrc522_bal_write_read_via_spi(adr);
 15181  13D9  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 15182  13DA  3190  2072  3193   	fcall	_mfrc522_bal_write_read_via_spi
 15183                           
 15184                           ;mfrc522_bal.c: 123: for(i=0;i<len;i++)
 15185  13DD  0020               	movlb	0	; select bank0
 15186  13DE  01A6               	clrf	mfrc522_bal_read_fifo_len_ex@i
 15187  13DF                     l11307:	
 15188  13DF  0822               	movf	mfrc522_bal_read_fifo_len_ex@len,w
 15189  13E0  0226               	subwf	mfrc522_bal_read_fifo_len_ex@i,w
 15190  13E1  1803               	btfsc	3,0
 15191  13E2  2BF8               	goto	l2066
 15192                           
 15193                           ;mfrc522_bal.c: 124: {
 15194                           ;mfrc522_bal.c: 125: *buf++=mfrc522_bal_write_read_via_spi(adr);
 15195  13E3  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 15196  13E4  3190  2072  3193   	fcall	_mfrc522_bal_write_read_via_spi
 15197  13E7  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 15198  13E8  0020               	movlb	0	; select bank0
 15199  13E9  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 15200  13EA  0086               	movwf	6
 15201  13EB  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 15202  13EC  0087               	movwf	7
 15203  13ED  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 15204  13EE  0081               	movwf	1
 15205  13EF  3001               	movlw	1
 15206  13F0  07A0               	addwf	mfrc522_bal_read_fifo_len_ex@buf,f
 15207  13F1  3000               	movlw	0
 15208  13F2  3DA1               	addwfc	mfrc522_bal_read_fifo_len_ex@buf+1,f
 15209  13F3  3001               	movlw	1
 15210  13F4  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 15211  13F5  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 15212  13F6  07A6               	addwf	mfrc522_bal_read_fifo_len_ex@i,f
 15213  13F7  2BDF               	goto	l11307
 15214  13F8                     l2066:	
 15215                           ;mfrc522_bal.c: 126: }
 15216                           ;mfrc522_bal.c: 127: do { LATCbits.LATC2 = 1; } while(0);;
 15217                           
 15218  13F8  0022               	movlb	2	; select bank2
 15219  13F9  150E               	bsf	14,2	;volatile
 15220                           
 15221                           ;mfrc522_bal.c: 128: i=TablerxAlign[rx_align];
 15222  13FA  0020               	movlb	0	; select bank0
 15223  13FB  0823               	movf	mfrc522_bal_read_fifo_len_ex@rx_align,w
 15224  13FC  3EFA               	addlw	low (_TablerxAlign| (0+32768))
 15225  13FD  0084               	movwf	4
 15226  13FE  3082               	movlw	high (_TablerxAlign| (0+32768))
 15227  13FF  1803               	skipnc
 15228  1400  3E01               	addlw	1
 15229  1401  0085               	movwf	5
 15230  1402  0800               	movf	0,w	;code access
 15231  1403  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 15232  1404  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 15233  1405  00A6               	movwf	mfrc522_bal_read_fifo_len_ex@i
 15234                           
 15235                           ;mfrc522_bal.c: 129: buf[0] &= i;
 15236  1406  0826               	movf	mfrc522_bal_read_fifo_len_ex@i,w
 15237  1407  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 15238  1408  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 15239  1409  0086               	movwf	6
 15240  140A  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 15241  140B  0087               	movwf	7
 15242  140C  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 15243  140D  0581               	andwf	1,f
 15244  140E  0008               	return
 15245  140F                     __end_of_mfrc522_bal_read_fifo_len_ex:	
 15246                           
 15247                           	psect	text22
 15248  1DF6                     __ptext22:	
 15249 ;; *************** function _m_mem_set *****************
 15250 ;; Defined at:
 15251 ;;		line 32 in file "src/depend/m_string.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  buf             2    3[COMMON] PTR unsigned char 
 15254 ;;		 -> pLCD(24), PiccUid(12), comBuffer(128), flashOpStr(21), 
 15255 ;;		 -> lcdBuf(9), 
 15256 ;;  x               1    5[COMMON] unsigned char 
 15257 ;;  len             1    6[COMMON] unsigned char 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;		None
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  1    wreg      void 
 15262 ;; Registers used:
 15263 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15269 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15270 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15272 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15273 ;;Total ram usage:        4 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    2
 15276 ;; This function calls:
 15277 ;;		Nothing
 15278 ;; This function is called by:
 15279 ;;		_rfid_comm_process_fk
 15280 ;;		_rfid_comm_process_hs
 15281 ;;		_mfapi_is_new_card_present
 15282 ;;		_ui_disp_str_num_s
 15283 ;;		_ui_disp_flow
 15284 ;;		_ui_disp_totale_v
 15285 ;;		_ui_disp_set_line
 15286 ;;		_ui_disp_set_calib
 15287 ;;		_ui_key_process_down
 15288 ;;		_lcd_clear_buffer
 15289 ;; This function uses a non-reentrant model
 15290 ;;
 15291                           
 15292                           
 15293                           ;psect for function _m_mem_set
 15294  1DF6                     _m_mem_set:	
 15295  1DF6                     l7769:	
 15296                           ;m_string.c: 34: while(len--)
 15297                           
 15298                           ;incstack = 0
 15299                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
 15300                           
 15301  1DF6  3001               	movlw	1
 15302  1DF7  02F6               	subwf	m_mem_set@len,f
 15303  1DF8  0A76               	incf	m_mem_set@len,w
 15304  1DF9  1903               	btfsc	3,2
 15305  1DFA  0008               	return
 15306                           
 15307                           ;m_string.c: 35: {
 15308                           ;m_string.c: 36: *buf++=x;
 15309  1DFB  0873               	movf	m_mem_set@buf,w
 15310  1DFC  0086               	movwf	6
 15311  1DFD  0874               	movf	m_mem_set@buf+1,w
 15312  1DFE  0087               	movwf	7
 15313  1DFF  0875               	movf	m_mem_set@x,w
 15314  1E00  0081               	movwf	1
 15315  1E01  3001               	movlw	1
 15316  1E02  07F3               	addwf	m_mem_set@buf,f
 15317  1E03  3000               	movlw	0
 15318  1E04  3DF4               	addwfc	m_mem_set@buf+1,f
 15319  1E05  2DF6               	goto	l7769
 15320  1E06                     __end_of_m_mem_set:	
 15321                           
 15322                           	psect	text23
 15323  1106                     __ptext23:	
 15324 ;; *************** function _create_card_key_b *****************
 15325 ;; Defined at:
 15326 ;;		line 58 in file "src/app/rfid_demo.c"
 15327 ;; Parameters:    Size  Location     Type
 15328 ;;  keyb            1    wreg     PTR unsigned char 
 15329 ;;		 -> userKeyB(6), 
 15330 ;;  uid             1    3[COMMON] PTR unsigned char 
 15331 ;;		 -> cardUidBlockBuf(18), 
 15332 ;;  cckey           2    4[COMMON] PTR unsigned char 
 15333 ;;		 -> cardKeyCreatKey(6), 
 15334 ;; Auto vars:     Size  Location     Type
 15335 ;;  keyb            1    0[BANK0 ] PTR unsigned char 
 15336 ;;		 -> userKeyB(6), 
 15337 ;;  i               1    1[BANK0 ] unsigned char 
 15338 ;; Return value:  Size  Location     Type
 15339 ;;                  1    wreg      void 
 15340 ;; Registers used:
 15341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 15342 ;; Tracked objects:
 15343 ;;		On entry : 0/0
 15344 ;;		On exit  : 0/0
 15345 ;;		Unchanged: 0/0
 15346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15347 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15348 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15349 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15350 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15351 ;;Total ram usage:        7 bytes
 15352 ;; Hardware stack levels used:    1
 15353 ;; Hardware stack levels required when called:    2
 15354 ;; This function calls:
 15355 ;;		Nothing
 15356 ;; This function is called by:
 15357 ;;		_rfid_comm_process_fk
 15358 ;;		_rfid_comm_process_hs
 15359 ;; This function uses a non-reentrant model
 15360 ;;
 15361                           
 15362                           
 15363                           ;psect for function _create_card_key_b
 15364  1106                     _create_card_key_b:	
 15365                           
 15366                           ;incstack = 0
 15367                           ; Regs used in _create_card_key_b: [wreg-fsr1h+status,2+status,0+pclath]
 15368                           ;create_card_key_b@keyb stored from wreg
 15369  1106  0020               	movlb	0	; select bank0
 15370  1107  00A0               	movwf	create_card_key_b@keyb
 15371                           
 15372                           ;rfid_demo.c: 59: uint8_t i;
 15373                           ;rfid_demo.c: 60: for(i=0;i<6;i++){
 15374  1108  01A1               	clrf	create_card_key_b@i
 15375  1109                     L7:	
 15376  1109  3006               	movlw	6
 15377  110A  0221               	subwf	create_card_key_b@i,w
 15378  110B  1803               	btfsc	3,0
 15379  110C  0008               	return
 15380                           
 15381                           ;rfid_demo.c: 61: *keyb=*uid ^ *cckey;
 15382  110D  0874               	movf	create_card_key_b@cckey,w
 15383  110E  0084               	movwf	4
 15384  110F  0875               	movf	create_card_key_b@cckey+1,w
 15385  1110  0085               	movwf	5
 15386  1111  0800               	movf	0,w	;code access
 15387  1112  00F6               	movwf	??_create_card_key_b
 15388  1113  0873               	movf	create_card_key_b@uid,w
 15389  1114  0086               	movwf	6
 15390  1115  3004               	movlw	4	; select bank8/9
 15391  1116  0087               	movwf	7
 15392  1117  0801               	movf	1,w
 15393  1118  0676               	xorwf	??_create_card_key_b,w
 15394  1119  00F7               	movwf	??_create_card_key_b+1
 15395  111A  0820               	movf	create_card_key_b@keyb,w
 15396  111B  0086               	movwf	6
 15397  111C  3001               	movlw	1	; select bank2/3
 15398  111D  0087               	movwf	7
 15399  111E  0877               	movf	??_create_card_key_b+1,w
 15400  111F  0081               	movwf	1
 15401                           
 15402                           ;rfid_demo.c: 62: keyb++;
 15403  1120  3001               	movlw	1
 15404  1121  00F6               	movwf	??_create_card_key_b
 15405  1122  0876               	movf	??_create_card_key_b,w
 15406  1123  07A0               	addwf	create_card_key_b@keyb,f
 15407                           
 15408                           ;rfid_demo.c: 63: uid++;
 15409  1124  3001               	movlw	1
 15410  1125  00F6               	movwf	??_create_card_key_b
 15411  1126  0876               	movf	??_create_card_key_b,w
 15412  1127  07F3               	addwf	create_card_key_b@uid,f
 15413                           
 15414                           ;rfid_demo.c: 64: cckey++;
 15415  1128  3001               	movlw	1
 15416  1129  07F4               	addwf	create_card_key_b@cckey,f
 15417  112A  3000               	movlw	0
 15418  112B  3DF5               	addwfc	create_card_key_b@cckey+1,f
 15419  112C  3001               	movlw	1
 15420  112D  00F6               	movwf	??_create_card_key_b
 15421  112E  0876               	movf	??_create_card_key_b,w
 15422  112F  07A1               	addwf	create_card_key_b@i,f
 15423  1130  2909               	goto	L7
 15424  1131                     __end_of_create_card_key_b:	
 15425                           
 15426                           	psect	text24
 15427  1D74                     __ptext24:	
 15428 ;; *************** function _my_uart1_received_ready *****************
 15429 ;; Defined at:
 15430 ;;		line 223 in file "mcc_generated_files/eusart1.c"
 15431 ;; Parameters:    Size  Location     Type
 15432 ;;		None
 15433 ;; Auto vars:     Size  Location     Type
 15434 ;;		None
 15435 ;; Return value:  Size  Location     Type
 15436 ;;                  1    wreg      void 
 15437 ;; Registers used:
 15438 ;;		status,2
 15439 ;; Tracked objects:
 15440 ;;		On entry : 0/0
 15441 ;;		On exit  : 0/0
 15442 ;;		Unchanged: 0/0
 15443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15448 ;;Total ram usage:        0 bytes
 15449 ;; Hardware stack levels used:    1
 15450 ;; Hardware stack levels required when called:    2
 15451 ;; This function calls:
 15452 ;;		Nothing
 15453 ;; This function is called by:
 15454 ;;		_main
 15455 ;; This function uses a non-reentrant model
 15456 ;;
 15457                           
 15458                           
 15459                           ;psect for function _my_uart1_received_ready
 15460  1D74                     _my_uart1_received_ready:	
 15461                           
 15462                           ;eusart1.c: 226: PIE1bits.RC1IE = 0;
 15463                           
 15464                           ;incstack = 0
 15465                           ; Regs used in _my_uart1_received_ready: [status,2]
 15466  1D74  0021               	movlb	1	; select bank1
 15467  1D75  1291               	bcf	17,5	;volatile
 15468                           
 15469                           ;eusart1.c: 227: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 15470  1D76  0022               	movlb	2	; select bank2
 15471  1D77  120C               	bcf	12,4	;volatile
 15472                           
 15473                           ;eusart1.c: 228: uart1ReceivedCount=0;
 15474  1D78  01B4               	clrf	_uart1ReceivedCount^(0+256)
 15475  1D79  01B5               	clrf	(_uart1ReceivedCount+1)^(0+256)
 15476                           
 15477                           ;eusart1.c: 229: PIE1bits.RC1IE = 1;
 15478  1D7A  0021               	movlb	1	; select bank1
 15479  1D7B  1691               	bsf	17,5	;volatile
 15480  1D7C  0008               	return
 15481  1D7D                     __end_of_my_uart1_received_ready:	
 15482                           
 15483                           	psect	text25
 15484  1E6C                     __ptext25:	
 15485 ;; *************** function _mfapi_pcd_init *****************
 15486 ;; Defined at:
 15487 ;;		line 63 in file "src/nfc/apl/mfrc522_apl.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;		None
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  v               1   10[BANK0 ] unsigned char 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  1    wreg      unsigned char 
 15494 ;; Registers used:
 15495 ;;		wreg, status,2, status,0, pclath, cstack
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15503 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15505 ;;Total ram usage:        2 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    7
 15508 ;; This function calls:
 15509 ;;		_mfrc522_bal_read_reg
 15510 ;;		_mfrc522_hal_init
 15511 ;; This function is called by:
 15512 ;;		_main
 15513 ;; This function uses a non-reentrant model
 15514 ;;
 15515                           
 15516                           
 15517                           ;psect for function _mfapi_pcd_init
 15518  1E6C                     _mfapi_pcd_init:	
 15519                           
 15520                           ;mfrc522_apl.c: 64: uint8_t v;
 15521                           ;mfrc522_apl.c: 65: mfrc522_hal_init();
 15522                           
 15523                           ;incstack = 0
 15524                           ; Regs used in _mfapi_pcd_init: [wreg+status,2+status,0+pclath+cstack]
 15525  1E6C  3188  203C  319E   	fcall	_mfrc522_hal_init
 15526                           
 15527                           ;mfrc522_apl.c: 69: v = mfrc522_bal_read_reg(VersionReg);
 15528  1E6F  3037               	movlw	55
 15529  1E70  319F  2709  319E   	fcall	_mfrc522_bal_read_reg
 15530  1E73  0020               	movlb	0	; select bank0
 15531  1E74  00A9               	movwf	??_mfapi_pcd_init
 15532  1E75  0829               	movf	??_mfapi_pcd_init,w
 15533  1E76  00AA               	movwf	mfapi_pcd_init@v
 15534                           
 15535                           ;mfrc522_apl.c: 75: if(v == 0x92){
 15536  1E77  3092               	movlw	146
 15537  1E78  062A               	xorwf	mfapi_pcd_init@v,w
 15538  1E79  1D03               	btfss	3,2
 15539  1E7A  2E7D               	goto	l13583
 15540                           
 15541                           ;mfrc522_apl.c: 76: return 1;
 15542  1E7B  3001               	movlw	1
 15543  1E7C  0008               	return
 15544  1E7D                     l13583:	
 15545                           
 15546                           ;mfrc522_apl.c: 77: }
 15547                           ;mfrc522_apl.c: 78: return 0;
 15548  1E7D  3000               	movlw	0
 15549  1E7E  0008               	return
 15550  1E7F                     __end_of_mfapi_pcd_init:	
 15551                           
 15552                           	psect	text26
 15553  083C                     __ptext26:	
 15554 ;; *************** function _mfrc522_hal_init *****************
 15555 ;; Defined at:
 15556 ;;		line 99 in file "src/nfc/hal/mfrc522_hal.c"
 15557 ;; Parameters:    Size  Location     Type
 15558 ;;		None
 15559 ;; Auto vars:     Size  Location     Type
 15560 ;;		None
 15561 ;; Return value:  Size  Location     Type
 15562 ;;                  1    wreg      void 
 15563 ;; Registers used:
 15564 ;;		wreg, status,2, status,0, pclath, cstack
 15565 ;; Tracked objects:
 15566 ;;		On entry : 0/0
 15567 ;;		On exit  : 0/0
 15568 ;;		Unchanged: 0/0
 15569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15572 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15574 ;;Total ram usage:        1 bytes
 15575 ;; Hardware stack levels used:    1
 15576 ;; Hardware stack levels required when called:    6
 15577 ;; This function calls:
 15578 ;;		_delay
 15579 ;;		_mfrc522_bal_write_reg
 15580 ;;		_mfrc522_hal_antenna_on
 15581 ;;		_mfrc522_hal_reset_sf
 15582 ;;		_mfrc522_hal_set_antenna_gain
 15583 ;; This function is called by:
 15584 ;;		_mfapi_pcd_init
 15585 ;; This function uses a non-reentrant model
 15586 ;;
 15587                           
 15588                           
 15589                           ;psect for function _mfrc522_hal_init
 15590  083C                     _mfrc522_hal_init:	
 15591                           
 15592                           ;incstack = 0
 15593                           ; Regs used in _mfrc522_hal_init: [wreg+status,2+status,0+pclath+cstack]
 15594                           ;mfrc522_hal.c: 102: do{ do { TRISBbits.TRISB5 = 0; } while(0); do { TRISCbits.TRISC2 = 
      +                          0; } while(0); do { TRISCbits.TRISC3 = 0; } while(0); do { TRISCbits.TRISC4 = 0; } while
      +                          (0); do { TRISCbits.TRISC5 = 1; } while(0); do { LATBbits.LATB5 = 1; } while(0); do { LA
      +                          TCbits.
 15595  083C  0021               	movlb	1	; select bank1
 15596  083D  128D               	bcf	13,5	;volatile
 15597  083E  110E               	bcf	14,2	;volatile
 15598  083F  118E               	bcf	14,3	;volatile
 15599  0840  120E               	bcf	14,4	;volatile
 15600  0841  168E               	bsf	14,5	;volatile
 15601  0842  0022               	movlb	2	; select bank2
 15602  0843  168D               	bsf	13,5	;volatile
 15603  0844  150E               	bsf	14,2	;volatile
 15604  0845  158E               	bsf	14,3	;volatile
 15605  0846  168E               	bsf	14,5	;volatile
 15606                           
 15607                           ;mfrc522_hal.c: 104: ;;
 15608                           ;mfrc522_hal.c: 105: delay(1847);
 15609  0847  3037               	movlw	55
 15610  0848  00F3               	movwf	delay@t
 15611  0849  3007               	movlw	7
 15612  084A  00F4               	movwf	delay@t+1
 15613  084B  319D  25BC  3188   	fcall	_delay
 15614                           
 15615                           ;mfrc522_hal.c: 107: do { LATBbits.LATB5 = 0; } while(0);;;;
 15616  084E  0022               	movlb	2	; select bank2
 15617  084F  128D               	bcf	13,5	;volatile
 15618                           
 15619                           ;mfrc522_hal.c: 108: delay(1847);
 15620  0850  3037               	movlw	55
 15621  0851  00F3               	movwf	delay@t
 15622  0852  3007               	movlw	7
 15623  0853  00F4               	movwf	delay@t+1
 15624  0854  319D  25BC  3188   	fcall	_delay
 15625                           
 15626                           ;mfrc522_hal.c: 109: do { LATBbits.LATB5 = 1; } while(0);;;;
 15627  0857  0022               	movlb	2	; select bank2
 15628  0858  168D               	bsf	13,5	;volatile
 15629                           
 15630                           ;mfrc522_hal.c: 111: delay(1847);
 15631  0859  3037               	movlw	55
 15632  085A  00F3               	movwf	delay@t
 15633  085B  3007               	movlw	7
 15634  085C  00F4               	movwf	delay@t+1
 15635  085D  319D  25BC  3188   	fcall	_delay
 15636                           
 15637                           ;mfrc522_hal.c: 112: mfrc522_hal_reset_sf();
 15638  0860  319E  264A  3188   	fcall	_mfrc522_hal_reset_sf
 15639                           
 15640                           ;mfrc522_hal.c: 113: delay(1847);
 15641  0863  3037               	movlw	55
 15642  0864  00F3               	movwf	delay@t
 15643  0865  3007               	movlw	7
 15644  0866  00F4               	movwf	delay@t+1
 15645  0867  319D  25BC  3188   	fcall	_delay
 15646                           
 15647                           ;mfrc522_hal.c: 116: mfrc522_bal_write_reg(TModeReg, 0x80);
 15648  086A  3080               	movlw	128
 15649  086B  0020               	movlb	0	; select bank0
 15650  086C  00A8               	movwf	??_mfrc522_hal_init
 15651  086D  0828               	movf	??_mfrc522_hal_init,w
 15652  086E  00F7               	movwf	mfrc522_bal_write_reg@x
 15653  086F  302A               	movlw	42
 15654  0870  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15655                           
 15656                           ;mfrc522_hal.c: 117: mfrc522_bal_write_reg(TPrescalerReg, 0xA9);
 15657  0873  30A9               	movlw	169
 15658  0874  0020               	movlb	0	; select bank0
 15659  0875  00A8               	movwf	??_mfrc522_hal_init
 15660  0876  0828               	movf	??_mfrc522_hal_init,w
 15661  0877  00F7               	movwf	mfrc522_bal_write_reg@x
 15662  0878  302B               	movlw	43
 15663  0879  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15664                           
 15665                           ;mfrc522_hal.c: 118: mfrc522_bal_write_reg(TReloadRegH, 0x04);
 15666  087C  3004               	movlw	4
 15667  087D  0020               	movlb	0	; select bank0
 15668  087E  00A8               	movwf	??_mfrc522_hal_init
 15669  087F  0828               	movf	??_mfrc522_hal_init,w
 15670  0880  00F7               	movwf	mfrc522_bal_write_reg@x
 15671  0881  302C               	movlw	44
 15672  0882  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15673                           
 15674                           ;mfrc522_hal.c: 119: mfrc522_bal_write_reg(TReloadRegL, 0xE8);
 15675  0885  30E8               	movlw	232
 15676  0886  0020               	movlb	0	; select bank0
 15677  0887  00A8               	movwf	??_mfrc522_hal_init
 15678  0888  0828               	movf	??_mfrc522_hal_init,w
 15679  0889  00F7               	movwf	mfrc522_bal_write_reg@x
 15680  088A  302D               	movlw	45
 15681  088B  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15682                           
 15683                           ;mfrc522_hal.c: 120: mfrc522_bal_write_reg(TxASKReg, 0x40);
 15684  088E  3040               	movlw	64
 15685  088F  0020               	movlb	0	; select bank0
 15686  0890  00A8               	movwf	??_mfrc522_hal_init
 15687  0891  0828               	movf	??_mfrc522_hal_init,w
 15688  0892  00F7               	movwf	mfrc522_bal_write_reg@x
 15689  0893  3015               	movlw	21
 15690  0894  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15691                           
 15692                           ;mfrc522_hal.c: 121: mfrc522_bal_write_reg(ModeReg, 0x3D);
 15693  0897  303D               	movlw	61
 15694  0898  0020               	movlb	0	; select bank0
 15695  0899  00A8               	movwf	??_mfrc522_hal_init
 15696  089A  0828               	movf	??_mfrc522_hal_init,w
 15697  089B  00F7               	movwf	mfrc522_bal_write_reg@x
 15698  089C  3011               	movlw	17
 15699  089D  319E  2639  3188   	fcall	_mfrc522_bal_write_reg
 15700                           
 15701                           ;mfrc522_hal.c: 122: delay(1847);
 15702  08A0  3037               	movlw	55
 15703  08A1  00F3               	movwf	delay@t
 15704  08A2  3007               	movlw	7
 15705  08A3  00F4               	movwf	delay@t+1
 15706  08A4  319D  25BC  3188   	fcall	_delay
 15707                           
 15708                           ;mfrc522_hal.c: 123: mfrc522_hal_set_antenna_gain(RxGain_max);
 15709  08A7  3070               	movlw	112
 15710  08A8  319F  2771  3188   	fcall	_mfrc522_hal_set_antenna_gain
 15711                           
 15712                           ;mfrc522_hal.c: 124: mfrc522_hal_antenna_on();
 15713  08AB  319E  26D8  3188   	fcall	_mfrc522_hal_antenna_on
 15714                           
 15715                           ;mfrc522_hal.c: 125: delay(1847);
 15716  08AE  3037               	movlw	55
 15717  08AF  00F3               	movwf	delay@t
 15718  08B0  3007               	movlw	7
 15719  08B1  00F4               	movwf	delay@t+1
 15720  08B2  319D  25BC         	fcall	_delay
 15721  08B4  0008               	return
 15722  08B5                     __end_of_mfrc522_hal_init:	
 15723                           
 15724                           	psect	text27
 15725  1F71                     __ptext27:	
 15726 ;; *************** function _mfrc522_hal_set_antenna_gain *****************
 15727 ;; Defined at:
 15728 ;;		line 159 in file "src/nfc/hal/mfrc522_hal.c"
 15729 ;; Parameters:    Size  Location     Type
 15730 ;;  gain            1    wreg     unsigned char 
 15731 ;; Auto vars:     Size  Location     Type
 15732 ;;  gain            1    7[BANK0 ] unsigned char 
 15733 ;; Return value:  Size  Location     Type
 15734 ;;                  1    wreg      void 
 15735 ;; Registers used:
 15736 ;;		wreg, status,2, status,0, pclath, cstack
 15737 ;; Tracked objects:
 15738 ;;		On entry : 0/0
 15739 ;;		On exit  : 0/0
 15740 ;;		Unchanged: 0/0
 15741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15743 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15745 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15746 ;;Total ram usage:        2 bytes
 15747 ;; Hardware stack levels used:    1
 15748 ;; Hardware stack levels required when called:    5
 15749 ;; This function calls:
 15750 ;;		_mfrc522_bal_clr_bit_reg
 15751 ;;		_mfrc522_bal_set_bit_reg
 15752 ;;		_mfrc522_hal_get_antenna_gain
 15753 ;; This function is called by:
 15754 ;;		_mfrc522_hal_init
 15755 ;; This function uses a non-reentrant model
 15756 ;;
 15757                           
 15758                           
 15759                           ;psect for function _mfrc522_hal_set_antenna_gain
 15760  1F71                     _mfrc522_hal_set_antenna_gain:	
 15761                           
 15762                           ;incstack = 0
 15763                           ; Regs used in _mfrc522_hal_set_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 15764                           ;mfrc522_hal_set_antenna_gain@gain stored from wreg
 15765  1F71  0020               	movlb	0	; select bank0
 15766  1F72  00A7               	movwf	mfrc522_hal_set_antenna_gain@gain
 15767                           
 15768                           ;mfrc522_hal.c: 161: if (mfrc522_hal_get_antenna_gain() != gain)
 15769  1F73  319D  25E7  319F   	fcall	_mfrc522_hal_get_antenna_gain
 15770  1F76  0020               	movlb	0	; select bank0
 15771  1F77  0627               	xorwf	mfrc522_hal_set_antenna_gain@gain,w
 15772  1F78  1903               	skipnz
 15773  1F79  0008               	return
 15774                           
 15775                           ;mfrc522_hal.c: 162: {
 15776                           ;mfrc522_hal.c: 163: mfrc522_bal_clr_bit_reg(RFCfgReg, (0x07<<4));
 15777  1F7A  3070               	movlw	112
 15778  1F7B  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 15779  1F7C  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 15780  1F7D  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 15781  1F7E  3026               	movlw	38
 15782  1F7F  319E  26AA  319F   	fcall	_mfrc522_bal_clr_bit_reg
 15783                           
 15784                           ;mfrc522_hal.c: 164: mfrc522_bal_set_bit_reg(RFCfgReg, gain & (0x07<<4));
 15785  1F82  0020               	movlb	0	; select bank0
 15786  1F83  0827               	movf	mfrc522_hal_set_antenna_gain@gain,w
 15787  1F84  3970               	andlw	112
 15788  1F85  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 15789  1F86  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 15790  1F87  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 15791  1F88  3026               	movlw	38
 15792  1F89  319E  26C1         	fcall	_mfrc522_bal_set_bit_reg
 15793  1F8B  0008               	return
 15794  1F8C                     __end_of_mfrc522_hal_set_antenna_gain:	
 15795                           
 15796                           	psect	text28
 15797  1DE7                     __ptext28:	
 15798 ;; *************** function _mfrc522_hal_get_antenna_gain *****************
 15799 ;; Defined at:
 15800 ;;		line 151 in file "src/nfc/hal/mfrc522_hal.c"
 15801 ;; Parameters:    Size  Location     Type
 15802 ;;		None
 15803 ;; Auto vars:     Size  Location     Type
 15804 ;;  ret             1    3[BANK0 ] unsigned char 
 15805 ;; Return value:  Size  Location     Type
 15806 ;;                  1    wreg      unsigned char 
 15807 ;; Registers used:
 15808 ;;		wreg, status,2, status,0, pclath, cstack
 15809 ;; Tracked objects:
 15810 ;;		On entry : 0/0
 15811 ;;		On exit  : 0/0
 15812 ;;		Unchanged: 0/0
 15813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15815 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15816 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15817 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15818 ;;Total ram usage:        2 bytes
 15819 ;; Hardware stack levels used:    1
 15820 ;; Hardware stack levels required when called:    4
 15821 ;; This function calls:
 15822 ;;		_mfrc522_bal_read_reg
 15823 ;; This function is called by:
 15824 ;;		_mfrc522_hal_set_antenna_gain
 15825 ;; This function uses a non-reentrant model
 15826 ;;
 15827                           
 15828                           
 15829                           ;psect for function _mfrc522_hal_get_antenna_gain
 15830  1DE7                     _mfrc522_hal_get_antenna_gain:	
 15831                           
 15832                           ;mfrc522_hal.c: 153: uint8_t ret=0;
 15833                           
 15834                           ;incstack = 0
 15835                           ; Regs used in _mfrc522_hal_get_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 15836  1DE7  0020               	movlb	0	; select bank0
 15837  1DE8  01A3               	clrf	mfrc522_hal_get_antenna_gain@ret
 15838                           
 15839                           ;mfrc522_hal.c: 154: ret=mfrc522_bal_read_reg(RFCfgReg);
 15840  1DE9  3026               	movlw	38
 15841  1DEA  319F  2709         	fcall	_mfrc522_bal_read_reg
 15842  1DEC  0020               	movlb	0	; select bank0
 15843  1DED  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 15844  1DEE  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 15845  1DEF  00A3               	movwf	mfrc522_hal_get_antenna_gain@ret
 15846                           
 15847                           ;mfrc522_hal.c: 155: ret &= (0x07<<4);
 15848  1DF0  3070               	movlw	112
 15849  1DF1  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 15850  1DF2  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 15851  1DF3  05A3               	andwf	mfrc522_hal_get_antenna_gain@ret,f
 15852                           
 15853                           ;mfrc522_hal.c: 156: return ret;
 15854  1DF4  0823               	movf	mfrc522_hal_get_antenna_gain@ret,w
 15855  1DF5  0008               	return
 15856  1DF6                     __end_of_mfrc522_hal_get_antenna_gain:	
 15857                           
 15858                           	psect	text29
 15859  1EC1                     __ptext29:	
 15860 ;; *************** function _mfrc522_bal_set_bit_reg *****************
 15861 ;; Defined at:
 15862 ;;		line 134 in file "src/nfc/bal/mfrc522_bal.c"
 15863 ;; Parameters:    Size  Location     Type
 15864 ;;  reg             1    wreg     unsigned char 
 15865 ;;  bits            1    2[BANK0 ] unsigned char 
 15866 ;; Auto vars:     Size  Location     Type
 15867 ;;  reg             1    5[BANK0 ] unsigned char 
 15868 ;;  tmp             1    4[BANK0 ] unsigned char 
 15869 ;; Return value:  Size  Location     Type
 15870 ;;                  1    wreg      void 
 15871 ;; Registers used:
 15872 ;;		wreg, status,2, status,0, pclath, cstack
 15873 ;; Tracked objects:
 15874 ;;		On entry : 0/0
 15875 ;;		On exit  : 0/0
 15876 ;;		Unchanged: 0/0
 15877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15878 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15879 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15880 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15881 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 15882 ;;Total ram usage:        4 bytes
 15883 ;; Hardware stack levels used:    1
 15884 ;; Hardware stack levels required when called:    4
 15885 ;; This function calls:
 15886 ;;		_mfrc522_bal_read_reg
 15887 ;;		_mfrc522_bal_write_reg
 15888 ;; This function is called by:
 15889 ;;		_mfrc522_hal_calculate_crc
 15890 ;;		_mfrc522_hal_set_antenna_gain
 15891 ;;		_pcd_comm_with_picc
 15892 ;; This function uses a non-reentrant model
 15893 ;;
 15894                           
 15895                           
 15896                           ;psect for function _mfrc522_bal_set_bit_reg
 15897  1EC1                     _mfrc522_bal_set_bit_reg:	
 15898                           
 15899                           ;incstack = 0
 15900                           ; Regs used in _mfrc522_bal_set_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 15901                           ;mfrc522_bal_set_bit_reg@reg stored from wreg
 15902  1EC1  0020               	movlb	0	; select bank0
 15903  1EC2  00A5               	movwf	mfrc522_bal_set_bit_reg@reg
 15904                           
 15905                           ;mfrc522_bal.c: 136: uint8_t tmp = 0x0;
 15906  1EC3  01A4               	clrf	mfrc522_bal_set_bit_reg@tmp
 15907                           
 15908                           ;mfrc522_bal.c: 137: tmp = mfrc522_bal_read_reg(reg);
 15909  1EC4  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 15910  1EC5  319F  2709  319E   	fcall	_mfrc522_bal_read_reg
 15911  1EC8  0020               	movlb	0	; select bank0
 15912  1EC9  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 15913  1ECA  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 15914  1ECB  00A4               	movwf	mfrc522_bal_set_bit_reg@tmp
 15915                           
 15916                           ;mfrc522_bal.c: 138: tmp|=bits;
 15917  1ECC  0822               	movf	mfrc522_bal_set_bit_reg@bits,w
 15918  1ECD  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 15919  1ECE  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 15920  1ECF  04A4               	iorwf	mfrc522_bal_set_bit_reg@tmp,f
 15921                           
 15922                           ;mfrc522_bal.c: 139: mfrc522_bal_write_reg(reg,tmp);
 15923  1ED0  0824               	movf	mfrc522_bal_set_bit_reg@tmp,w
 15924  1ED1  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 15925  1ED2  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 15926  1ED3  00F7               	movwf	mfrc522_bal_write_reg@x
 15927  1ED4  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 15928  1ED5  319E  2639         	fcall	_mfrc522_bal_write_reg
 15929  1ED7  0008               	return
 15930  1ED8                     __end_of_mfrc522_bal_set_bit_reg:	
 15931                           
 15932                           	psect	text30
 15933  1EAA                     __ptext30:	
 15934 ;; *************** function _mfrc522_bal_clr_bit_reg *****************
 15935 ;; Defined at:
 15936 ;;		line 144 in file "src/nfc/bal/mfrc522_bal.c"
 15937 ;; Parameters:    Size  Location     Type
 15938 ;;  reg             1    wreg     unsigned char 
 15939 ;;  bits            1    2[BANK0 ] unsigned char 
 15940 ;; Auto vars:     Size  Location     Type
 15941 ;;  reg             1    5[BANK0 ] unsigned char 
 15942 ;;  tmp             1    4[BANK0 ] unsigned char 
 15943 ;; Return value:  Size  Location     Type
 15944 ;;                  1    wreg      void 
 15945 ;; Registers used:
 15946 ;;		wreg, status,2, status,0, pclath, cstack
 15947 ;; Tracked objects:
 15948 ;;		On entry : 0/0
 15949 ;;		On exit  : 0/0
 15950 ;;		Unchanged: 0/0
 15951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15952 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15953 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15954 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15955 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 15956 ;;Total ram usage:        4 bytes
 15957 ;; Hardware stack levels used:    1
 15958 ;; Hardware stack levels required when called:    4
 15959 ;; This function calls:
 15960 ;;		_mfrc522_bal_read_reg
 15961 ;;		_mfrc522_bal_write_reg
 15962 ;; This function is called by:
 15963 ;;		_mfrc522_hal_set_antenna_gain
 15964 ;;		_picc_req_a_or_wakeup_a
 15965 ;;		_picc_select
 15966 ;;		_picc_stop_cryptol
 15967 ;;		_mfrc522_hal_antenna_off
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970                           
 15971                           
 15972                           ;psect for function _mfrc522_bal_clr_bit_reg
 15973  1EAA                     _mfrc522_bal_clr_bit_reg:	
 15974                           
 15975                           ;incstack = 0
 15976                           ; Regs used in _mfrc522_bal_clr_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 15977                           ;mfrc522_bal_clr_bit_reg@reg stored from wreg
 15978  1EAA  0020               	movlb	0	; select bank0
 15979  1EAB  00A5               	movwf	mfrc522_bal_clr_bit_reg@reg
 15980                           
 15981                           ;mfrc522_bal.c: 146: uint8_t tmp = 0x0;
 15982  1EAC  01A4               	clrf	mfrc522_bal_clr_bit_reg@tmp
 15983                           
 15984                           ;mfrc522_bal.c: 147: tmp = mfrc522_bal_read_reg(reg);
 15985  1EAD  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 15986  1EAE  319F  2709  319E   	fcall	_mfrc522_bal_read_reg
 15987  1EB1  0020               	movlb	0	; select bank0
 15988  1EB2  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 15989  1EB3  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 15990  1EB4  00A4               	movwf	mfrc522_bal_clr_bit_reg@tmp
 15991                           
 15992                           ;mfrc522_bal.c: 148: tmp &= ~bits;
 15993  1EB5  0922               	comf	mfrc522_bal_clr_bit_reg@bits,w
 15994  1EB6  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 15995  1EB7  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 15996  1EB8  05A4               	andwf	mfrc522_bal_clr_bit_reg@tmp,f
 15997                           
 15998                           ;mfrc522_bal.c: 149: mfrc522_bal_write_reg(reg,tmp);
 15999  1EB9  0824               	movf	mfrc522_bal_clr_bit_reg@tmp,w
 16000  1EBA  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 16001  1EBB  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 16002  1EBC  00F7               	movwf	mfrc522_bal_write_reg@x
 16003  1EBD  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 16004  1EBE  319E  2639         	fcall	_mfrc522_bal_write_reg
 16005  1EC0  0008               	return
 16006  1EC1                     __end_of_mfrc522_bal_clr_bit_reg:	
 16007                           
 16008                           	psect	text31
 16009  1E4A                     __ptext31:	
 16010 ;; *************** function _mfrc522_hal_reset_sf *****************
 16011 ;; Defined at:
 16012 ;;		line 128 in file "src/nfc/hal/mfrc522_hal.c"
 16013 ;; Parameters:    Size  Location     Type
 16014 ;;		None
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;		None
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  1    wreg      void 
 16019 ;; Registers used:
 16020 ;;		wreg, status,2, status,0, pclath, cstack
 16021 ;; Tracked objects:
 16022 ;;		On entry : 0/0
 16023 ;;		On exit  : 0/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16028 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16029 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16030 ;;Total ram usage:        1 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:    4
 16033 ;; This function calls:
 16034 ;;		_mfrc522_bal_read_reg
 16035 ;;		_mfrc522_bal_write_reg
 16036 ;; This function is called by:
 16037 ;;		_mfrc522_hal_init
 16038 ;; This function uses a non-reentrant model
 16039 ;;
 16040                           
 16041                           
 16042                           ;psect for function _mfrc522_hal_reset_sf
 16043  1E4A                     _mfrc522_hal_reset_sf:	
 16044                           
 16045                           ;mfrc522_hal.c: 130: mfrc522_bal_write_reg(CommandReg, PCD_SoftReset);
 16046                           
 16047                           ;incstack = 0
 16048                           ; Regs used in _mfrc522_hal_reset_sf: [wreg+status,2+status,0+pclath+cstack]
 16049  1E4A  300F               	movlw	15
 16050  1E4B  0020               	movlb	0	; select bank0
 16051  1E4C  00A2               	movwf	??_mfrc522_hal_reset_sf
 16052  1E4D  0822               	movf	??_mfrc522_hal_reset_sf,w
 16053  1E4E  00F7               	movwf	mfrc522_bal_write_reg@x
 16054  1E4F  3001               	movlw	1
 16055  1E50  319E  2639  319E   	fcall	_mfrc522_bal_write_reg
 16056  1E53                     l11875:	
 16057                           ;mfrc522_hal.c: 133: {
 16058                           
 16059                           ;mfrc522_hal.c: 131: ;;
 16060                           ;mfrc522_hal.c: 132: while (mfrc522_bal_read_reg(CommandReg) & (1<<4))
 16061                           
 16062  1E53  3001               	movlw	1
 16063  1E54  319F  2709  319E   	fcall	_mfrc522_bal_read_reg
 16064  1E57  3910               	andlw	16
 16065  1E58  1903               	btfsc	3,2
 16066  1E59  0008               	return
 16067  1E5A  2E53               	goto	l11875
 16068  1E5B                     __end_of_mfrc522_hal_reset_sf:	
 16069                           
 16070                           	psect	text32
 16071  1ED8                     __ptext32:	
 16072 ;; *************** function _mfrc522_hal_antenna_on *****************
 16073 ;; Defined at:
 16074 ;;		line 137 in file "src/nfc/hal/mfrc522_hal.c"
 16075 ;; Parameters:    Size  Location     Type
 16076 ;;		None
 16077 ;; Auto vars:     Size  Location     Type
 16078 ;;  t8              1    3[BANK0 ] unsigned char 
 16079 ;; Return value:  Size  Location     Type
 16080 ;;                  1    wreg      void 
 16081 ;; Registers used:
 16082 ;;		wreg, status,2, status,0, pclath, cstack
 16083 ;; Tracked objects:
 16084 ;;		On entry : 0/0
 16085 ;;		On exit  : 0/0
 16086 ;;		Unchanged: 0/0
 16087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16089 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16091 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16092 ;;Total ram usage:        2 bytes
 16093 ;; Hardware stack levels used:    1
 16094 ;; Hardware stack levels required when called:    4
 16095 ;; This function calls:
 16096 ;;		_mfrc522_bal_read_reg
 16097 ;;		_mfrc522_bal_write_reg
 16098 ;; This function is called by:
 16099 ;;		_mfrc522_hal_init
 16100 ;; This function uses a non-reentrant model
 16101 ;;
 16102                           
 16103                           
 16104                           ;psect for function _mfrc522_hal_antenna_on
 16105  1ED8                     _mfrc522_hal_antenna_on:	
 16106                           
 16107                           ;mfrc522_hal.c: 139: uint8_t t8;
 16108                           ;mfrc522_hal.c: 140: t8= mfrc522_bal_read_reg(TxControlReg);
 16109                           
 16110                           ;incstack = 0
 16111                           ; Regs used in _mfrc522_hal_antenna_on: [wreg+status,2+status,0+pclath+cstack]
 16112  1ED8  3014               	movlw	20
 16113  1ED9  319F  2709  319E   	fcall	_mfrc522_bal_read_reg
 16114  1EDC  0020               	movlb	0	; select bank0
 16115  1EDD  00A2               	movwf	??_mfrc522_hal_antenna_on
 16116  1EDE  0822               	movf	??_mfrc522_hal_antenna_on,w
 16117  1EDF  00A3               	movwf	mfrc522_hal_antenna_on@t8
 16118                           
 16119                           ;mfrc522_hal.c: 141: if((t8&0x03)!=0x03)
 16120  1EE0  3003               	movlw	3
 16121  1EE1  0523               	andwf	mfrc522_hal_antenna_on@t8,w
 16122  1EE2  00A2               	movwf	??_mfrc522_hal_antenna_on
 16123  1EE3  3003               	movlw	3
 16124  1EE4  0622               	xorwf	??_mfrc522_hal_antenna_on,w
 16125  1EE5  1903               	btfsc	3,2
 16126  1EE6  0008               	return
 16127                           
 16128                           ;mfrc522_hal.c: 142: {
 16129                           ;mfrc522_hal.c: 143: mfrc522_bal_write_reg(TxControlReg, t8 | 0x03);
 16130  1EE7  0823               	movf	mfrc522_hal_antenna_on@t8,w
 16131  1EE8  3803               	iorlw	3
 16132  1EE9  00A2               	movwf	??_mfrc522_hal_antenna_on
 16133  1EEA  0822               	movf	??_mfrc522_hal_antenna_on,w
 16134  1EEB  00F7               	movwf	mfrc522_bal_write_reg@x
 16135  1EEC  3014               	movlw	20
 16136  1EED  319E  2639         	fcall	_mfrc522_bal_write_reg
 16137  1EEF  0008               	return
 16138  1EF0                     __end_of_mfrc522_hal_antenna_on:	
 16139                           
 16140                           	psect	text33
 16141  1E39                     __ptext33:	
 16142 ;; *************** function _mfrc522_bal_write_reg *****************
 16143 ;; Defined at:
 16144 ;;		line 47 in file "src/nfc/bal/mfrc522_bal.c"
 16145 ;; Parameters:    Size  Location     Type
 16146 ;;  reg             1    wreg     unsigned char 
 16147 ;;  x               1    7[COMMON] unsigned char 
 16148 ;; Auto vars:     Size  Location     Type
 16149 ;;  reg             1    0[BANK0 ] unsigned char 
 16150 ;; Return value:  Size  Location     Type
 16151 ;;                  1    wreg      void 
 16152 ;; Registers used:
 16153 ;;		wreg, status,2, status,0, pclath, cstack
 16154 ;; Tracked objects:
 16155 ;;		On entry : 0/0
 16156 ;;		On exit  : 0/0
 16157 ;;		Unchanged: 0/0
 16158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16159 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16160 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16162 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16163 ;;Total ram usage:        2 bytes
 16164 ;; Hardware stack levels used:    1
 16165 ;; Hardware stack levels required when called:    3
 16166 ;; This function calls:
 16167 ;;		_mfrc522_bal_write_read_via_spi
 16168 ;; This function is called by:
 16169 ;;		_mfrc522_bal_set_bit_reg
 16170 ;;		_mfrc522_bal_clr_bit_reg
 16171 ;;		_mfrc522_hal_calculate_crc
 16172 ;;		_mfrc522_hal_init
 16173 ;;		_mfrc522_hal_reset_sf
 16174 ;;		_mfrc522_hal_antenna_on
 16175 ;;		_pcd_comm_with_picc
 16176 ;;		_picc_select
 16177 ;; This function uses a non-reentrant model
 16178 ;;
 16179                           
 16180                           
 16181                           ;psect for function _mfrc522_bal_write_reg
 16182  1E39                     _mfrc522_bal_write_reg:	
 16183                           
 16184                           ;incstack = 0
 16185                           ; Regs used in _mfrc522_bal_write_reg: [wreg+status,2+status,0+pclath+cstack]
 16186                           ;mfrc522_bal_write_reg@reg stored from wreg
 16187  1E39  0020               	movlb	0	; select bank0
 16188  1E3A  00A0               	movwf	mfrc522_bal_write_reg@reg
 16189                           
 16190                           ;mfrc522_bal.c: 49: do { LATCbits.LATC2 = 0; } while(0);;
 16191  1E3B  0022               	movlb	2	; select bank2
 16192  1E3C  110E               	bcf	14,2	;volatile
 16193                           
 16194                           ;mfrc522_bal.c: 51: do { LATCbits.LATC3 = 0; } while(0);;
 16195  1E3D  118E               	bcf	14,3	;volatile
 16196                           
 16197                           ;mfrc522_bal.c: 52: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 16198  1E3E  0020               	movlb	0	; select bank0
 16199  1E3F  3520               	lslf	mfrc522_bal_write_reg@reg,w
 16200  1E40  397E               	andlw	126
 16201  1E41  3190  2072  319E   	fcall	_mfrc522_bal_write_read_via_spi
 16202                           
 16203                           ;mfrc522_bal.c: 53: mfrc522_bal_write_read_via_spi(x);
 16204  1E44  0877               	movf	mfrc522_bal_write_reg@x,w
 16205  1E45  3190  2072         	fcall	_mfrc522_bal_write_read_via_spi
 16206                           
 16207                           ;mfrc522_bal.c: 54: do { LATCbits.LATC2 = 1; } while(0);;
 16208  1E47  0022               	movlb	2	; select bank2
 16209  1E48  150E               	bsf	14,2	;volatile
 16210  1E49  0008               	return
 16211  1E4A                     __end_of_mfrc522_bal_write_reg:	
 16212                           
 16213                           	psect	text34
 16214  1F09                     __ptext34:	
 16215 ;; *************** function _mfrc522_bal_read_reg *****************
 16216 ;; Defined at:
 16217 ;;		line 75 in file "src/nfc/bal/mfrc522_bal.c"
 16218 ;; Parameters:    Size  Location     Type
 16219 ;;  reg             1    wreg     unsigned char 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  reg             1    0[BANK0 ] unsigned char 
 16222 ;;  x               1    1[BANK0 ] unsigned char 
 16223 ;; Return value:  Size  Location     Type
 16224 ;;                  1    wreg      unsigned char 
 16225 ;; Registers used:
 16226 ;;		wreg, status,2, status,0, pclath, cstack
 16227 ;; Tracked objects:
 16228 ;;		On entry : 0/0
 16229 ;;		On exit  : 0/0
 16230 ;;		Unchanged: 0/0
 16231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16233 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16235 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16236 ;;Total ram usage:        3 bytes
 16237 ;; Hardware stack levels used:    1
 16238 ;; Hardware stack levels required when called:    3
 16239 ;; This function calls:
 16240 ;;		_mfrc522_bal_write_read_via_spi
 16241 ;; This function is called by:
 16242 ;;		_mfapi_pcd_init
 16243 ;;		_mfrc522_bal_set_bit_reg
 16244 ;;		_mfrc522_bal_clr_bit_reg
 16245 ;;		_mfrc522_hal_calculate_crc
 16246 ;;		_mfrc522_hal_reset_sf
 16247 ;;		_mfrc522_hal_antenna_on
 16248 ;;		_mfrc522_hal_get_antenna_gain
 16249 ;;		_pcd_comm_with_picc
 16250 ;;		_picc_select
 16251 ;; This function uses a non-reentrant model
 16252 ;;
 16253                           
 16254                           
 16255                           ;psect for function _mfrc522_bal_read_reg
 16256  1F09                     _mfrc522_bal_read_reg:	
 16257                           
 16258                           ;incstack = 0
 16259                           ; Regs used in _mfrc522_bal_read_reg: [wreg+status,2+status,0+pclath+cstack]
 16260                           ;mfrc522_bal_read_reg@reg stored from wreg
 16261  1F09  0020               	movlb	0	; select bank0
 16262  1F0A  00A0               	movwf	mfrc522_bal_read_reg@reg
 16263                           
 16264                           ;mfrc522_bal.c: 77: uint8_t x=0;
 16265  1F0B  01A1               	clrf	mfrc522_bal_read_reg@x
 16266                           
 16267                           ;mfrc522_bal.c: 78: do { LATCbits.LATC2 = 0; } while(0);;
 16268  1F0C  0022               	movlb	2	; select bank2
 16269  1F0D  110E               	bcf	14,2	;volatile
 16270                           
 16271                           ;mfrc522_bal.c: 79: do { LATCbits.LATC3 = 0; } while(0);;
 16272  1F0E  118E               	bcf	14,3	;volatile
 16273                           
 16274                           ;mfrc522_bal.c: 80: mfrc522_bal_write_read_via_spi(((reg<<1) & 0x7e) | 0x80);
 16275  1F0F  0020               	movlb	0	; select bank0
 16276  1F10  3520               	lslf	mfrc522_bal_read_reg@reg,w
 16277  1F11  397E               	andlw	126
 16278  1F12  3880               	iorlw	128
 16279  1F13  3190  2072  319F   	fcall	_mfrc522_bal_write_read_via_spi
 16280                           
 16281                           ;mfrc522_bal.c: 81: x=mfrc522_bal_write_read_via_spi(0x00);
 16282  1F16  3000               	movlw	0
 16283  1F17  3190  2072         	fcall	_mfrc522_bal_write_read_via_spi
 16284  1F19  00F7               	movwf	??_mfrc522_bal_read_reg
 16285  1F1A  0877               	movf	??_mfrc522_bal_read_reg,w
 16286  1F1B  0020               	movlb	0	; select bank0
 16287  1F1C  00A1               	movwf	mfrc522_bal_read_reg@x
 16288                           
 16289                           ;mfrc522_bal.c: 82: do { LATCbits.LATC2 = 1; } while(0);;
 16290  1F1D  0022               	movlb	2	; select bank2
 16291  1F1E  150E               	bsf	14,2	;volatile
 16292                           
 16293                           ;mfrc522_bal.c: 83: return x;
 16294  1F1F  0020               	movlb	0	; select bank0
 16295  1F20  0821               	movf	mfrc522_bal_read_reg@x,w
 16296  1F21  0008               	return
 16297  1F22                     __end_of_mfrc522_bal_read_reg:	
 16298                           
 16299                           	psect	text35
 16300  1072                     __ptext35:	
 16301 ;; *************** function _mfrc522_bal_write_read_via_spi *****************
 16302 ;; Defined at:
 16303 ;;		line 19 in file "src/nfc/bal/mfrc522_bal.c"
 16304 ;; Parameters:    Size  Location     Type
 16305 ;;  x               1    wreg     unsigned char 
 16306 ;; Auto vars:     Size  Location     Type
 16307 ;;  x               1    4[COMMON] unsigned char 
 16308 ;;  i               1    6[COMMON] unsigned char 
 16309 ;;  rb              1    5[COMMON] unsigned char 
 16310 ;; Return value:  Size  Location     Type
 16311 ;;                  1    wreg      unsigned char 
 16312 ;; Registers used:
 16313 ;;		wreg, status,2, status,0
 16314 ;; Tracked objects:
 16315 ;;		On entry : 0/0
 16316 ;;		On exit  : 0/0
 16317 ;;		Unchanged: 0/0
 16318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16320 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16322 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16323 ;;Total ram usage:        4 bytes
 16324 ;; Hardware stack levels used:    1
 16325 ;; Hardware stack levels required when called:    2
 16326 ;; This function calls:
 16327 ;;		Nothing
 16328 ;; This function is called by:
 16329 ;;		_mfrc522_bal_write_reg
 16330 ;;		_mfrc522_bal_write_reg_len
 16331 ;;		_mfrc522_bal_read_reg
 16332 ;;		_mfrc522_bal_read_fifo_len_ex
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _mfrc522_bal_write_read_via_spi
 16338  1072                     _mfrc522_bal_write_read_via_spi:	
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _mfrc522_bal_write_read_via_spi: [wreg+status,2+status,0]
 16342                           ;mfrc522_bal_write_read_via_spi@x stored from wreg
 16343  1072  00F4               	movwf	mfrc522_bal_write_read_via_spi@x
 16344                           
 16345                           ;mfrc522_bal.c: 21: uint8_t i;
 16346                           ;mfrc522_bal.c: 22: uint8_t rb=0;
 16347  1073  01F5               	clrf	mfrc522_bal_write_read_via_spi@rb
 16348                           
 16349                           ;mfrc522_bal.c: 23: for(i=0;i<8;i++)
 16350  1074  01F6               	clrf	mfrc522_bal_write_read_via_spi@i
 16351  1075  3008               	movlw	8
 16352  1076  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 16353  1077  1803               	btfsc	3,0
 16354  1078  2890               	goto	l2018
 16355  1079                     l2007:	
 16356                           ;mfrc522_bal.c: 24: {
 16357                           ;mfrc522_bal.c: 25: do { LATCbits.LATC3 = 0; } while(0);;
 16358                           
 16359  1079  0022               	movlb	2	; select bank2
 16360  107A  118E               	bcf	14,3	;volatile
 16361                           
 16362                           ;mfrc522_bal.c: 27: if(x&0x80){
 16363  107B  1FF4               	btfss	mfrc522_bal_write_read_via_spi@x,7
 16364  107C  287F               	goto	l2013
 16365                           
 16366                           ;mfrc522_bal.c: 28: do { LATCbits.LATC4 = 1; } while(0);;
 16367  107D  160E               	bsf	14,4	;volatile
 16368                           
 16369                           ;mfrc522_bal.c: 29: }
 16370  107E  2880               	goto	l2015
 16371  107F                     l2013:	
 16372                           ;mfrc522_bal.c: 30: else{
 16373                           ;mfrc522_bal.c: 31: do { LATCbits.LATC4 = 0; } while(0);;
 16374                           
 16375  107F  120E               	bcf	14,4	;volatile
 16376  1080                     l2015:	
 16377                           ;mfrc522_bal.c: 32: }
 16378                           ;mfrc522_bal.c: 33: do { LATCbits.LATC3 = 1; } while(0);;
 16379                           
 16380  1080  158E               	bsf	14,3	;volatile
 16381                           
 16382                           ;mfrc522_bal.c: 34: x<<=1;
 16383  1081  1003               	clrc
 16384  1082  0DF4               	rlf	mfrc522_bal_write_read_via_spi@x,f
 16385                           
 16386                           ;mfrc522_bal.c: 36: rb<<=1;
 16387  1083  1003               	clrc
 16388  1084  0DF5               	rlf	mfrc522_bal_write_read_via_spi@rb,f
 16389                           
 16390                           ;mfrc522_bal.c: 37: if(PORTCbits.RC5)
 16391  1085  0020               	movlb	0	; select bank0
 16392  1086  1A8E               	btfsc	14,5	;volatile
 16393                           
 16394                           ;mfrc522_bal.c: 38: rb|=1;
 16395  1087  1475               	bsf	mfrc522_bal_write_read_via_spi@rb,0
 16396  1088  3001               	movlw	1
 16397  1089  00F3               	movwf	??_mfrc522_bal_write_read_via_spi
 16398  108A  0873               	movf	??_mfrc522_bal_write_read_via_spi,w
 16399  108B  07F6               	addwf	mfrc522_bal_write_read_via_spi@i,f
 16400  108C  3008               	movlw	8
 16401  108D  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 16402  108E  1C03               	skipc
 16403  108F  2879               	goto	l2007
 16404  1090                     l2018:	
 16405                           ;mfrc522_bal.c: 39: }
 16406                           ;mfrc522_bal.c: 40: do { LATCbits.LATC3 = 0; } while(0);;
 16407                           
 16408  1090  0022               	movlb	2	; select bank2
 16409  1091  118E               	bcf	14,3	;volatile
 16410                           
 16411                           ;mfrc522_bal.c: 41: return rb;
 16412  1092  0875               	movf	mfrc522_bal_write_read_via_spi@rb,w
 16413  1093  0008               	return
 16414  1094                     __end_of_mfrc522_bal_write_read_via_spi:	
 16415                           
 16416                           	psect	text36
 16417  15E6                     __ptext36:	
 16418 ;; *************** function _m_system_start_self_test *****************
 16419 ;; Defined at:
 16420 ;;		line 19 in file "main.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;		None
 16423 ;; Auto vars:     Size  Location     Type
 16424 ;;		None
 16425 ;; Return value:  Size  Location     Type
 16426 ;;                  1    wreg      void 
 16427 ;; Registers used:
 16428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16429 ;; Tracked objects:
 16430 ;;		On entry : 0/0
 16431 ;;		On exit  : 0/0
 16432 ;;		Unchanged: 0/0
 16433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16438 ;;Total ram usage:        0 bytes
 16439 ;; Hardware stack levels used:    1
 16440 ;; Hardware stack levels required when called:    3
 16441 ;; This function calls:
 16442 ;;		_delay
 16443 ;;		_lcd_disp_all
 16444 ;; This function is called by:
 16445 ;;		_main
 16446 ;; This function uses a non-reentrant model
 16447 ;;
 16448                           
 16449                           
 16450                           ;psect for function _m_system_start_self_test
 16451  15E6                     _m_system_start_self_test:	
 16452                           
 16453                           ;main.c: 23: lcd_disp_all(0x00);;
 16454                           
 16455                           ;incstack = 0
 16456                           ; Regs used in _m_system_start_self_test: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 16457  15E6  3000               	movlw	0
 16458  15E7  319F  27E3  3195   	fcall	_lcd_disp_all
 16459                           
 16460                           ;main.c: 24: do{ do { LATAbits.LATA3 = 1; } while(0);;do { LATFbits.LATF0 = 1; } while(0
      +                          );;do { LATFbits.LATF1 = 1; } while(0);; do { LATAbits.LATA2 = 1; } while(0);;do { LATAb
      +                          its.LATA0 = 1; } while(0);;}while(0);;
 16461  15EA  0022               	movlb	2	; select bank2
 16462  15EB  158C               	bsf	12,3	;volatile
 16463  15EC  0027               	movlb	7	; select bank7
 16464  15ED  140C               	bsf	12,0	;volatile
 16465  15EE  148C               	bsf	12,1	;volatile
 16466  15EF  0022               	movlb	2	; select bank2
 16467  15F0  150C               	bsf	12,2	;volatile
 16468  15F1  140C               	bsf	12,0	;volatile
 16469                           
 16470                           ;main.c: 26: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 16471  15F2  304C               	movlw	76
 16472  15F3  00F3               	movwf	delay@t
 16473  15F4  3090               	movlw	144
 16474  15F5  00F4               	movwf	delay@t+1
 16475  15F6  319D  25BC  3195   	fcall	_delay
 16476  15F9  304C               	movlw	76
 16477  15FA  00F3               	movwf	delay@t
 16478  15FB  3090               	movlw	144
 16479  15FC  00F4               	movwf	delay@t+1
 16480  15FD  319D  25BC  3195   	fcall	_delay
 16481  1600  304C               	movlw	76
 16482  1601  00F3               	movwf	delay@t
 16483  1602  3090               	movlw	144
 16484  1603  00F4               	movwf	delay@t+1
 16485  1604  319D  25BC  3195   	fcall	_delay
 16486  1607  304C               	movlw	76
 16487  1608  00F3               	movwf	delay@t
 16488  1609  3090               	movlw	144
 16489  160A  00F4               	movwf	delay@t+1
 16490  160B  319D  25BC  3195   	fcall	_delay
 16491  160E  304C               	movlw	76
 16492  160F  00F3               	movwf	delay@t
 16493  1610  3090               	movlw	144
 16494  1611  00F4               	movwf	delay@t+1
 16495  1612  319D  25BC  3195   	fcall	_delay
 16496                           
 16497                           ;main.c: 27: lcd_disp_all(0xff);;
 16498  1615  30FF               	movlw	255
 16499  1616  319F  27E3  3195   	fcall	_lcd_disp_all
 16500                           
 16501                           ;main.c: 29: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 16502  1619  304C               	movlw	76
 16503  161A  00F3               	movwf	delay@t
 16504  161B  3090               	movlw	144
 16505  161C  00F4               	movwf	delay@t+1
 16506  161D  319D  25BC  3195   	fcall	_delay
 16507  1620  304C               	movlw	76
 16508  1621  00F3               	movwf	delay@t
 16509  1622  3090               	movlw	144
 16510  1623  00F4               	movwf	delay@t+1
 16511  1624  319D  25BC  3195   	fcall	_delay
 16512  1627  304C               	movlw	76
 16513  1628  00F3               	movwf	delay@t
 16514  1629  3090               	movlw	144
 16515  162A  00F4               	movwf	delay@t+1
 16516  162B  319D  25BC  3195   	fcall	_delay
 16517  162E  304C               	movlw	76
 16518  162F  00F3               	movwf	delay@t
 16519  1630  3090               	movlw	144
 16520  1631  00F4               	movwf	delay@t+1
 16521  1632  319D  25BC  3195   	fcall	_delay
 16522  1635  304C               	movlw	76
 16523  1636  00F3               	movwf	delay@t
 16524  1637  3090               	movlw	144
 16525  1638  00F4               	movwf	delay@t+1
 16526  1639  319D  25BC         	fcall	_delay
 16527                           
 16528                           ;main.c: 30: do{ do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF0 = 0; } while(0
      +                          );;do { LATFbits.LATF1 = 0; } while(0);; do { LATAbits.LATA2 = 0; } while(0);;do { LATAb
      +                          its.LATA0 = 0; } while(0);;}while(0);;
 16529  163B  0022               	movlb	2	; select bank2
 16530  163C  118C               	bcf	12,3	;volatile
 16531  163D  0027               	movlb	7	; select bank7
 16532  163E  100C               	bcf	12,0	;volatile
 16533  163F  108C               	bcf	12,1	;volatile
 16534  1640  0022               	movlb	2	; select bank2
 16535  1641  110C               	bcf	12,2	;volatile
 16536  1642  100C               	bcf	12,0	;volatile
 16537                           
 16538                           ;main.c: 31: do { LATAbits.LATA1 = 1; } while(0);;
 16539  1643  148C               	bsf	12,1	;volatile
 16540  1644  0008               	return
 16541  1645                     __end_of_m_system_start_self_test:	
 16542                           
 16543                           	psect	text37
 16544  1DBC                     __ptext37:	
 16545 ;; *************** function _delay *****************
 16546 ;; Defined at:
 16547 ;;		line 5 in file "src/depend/delay.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;  t               2    3[COMMON] unsigned int 
 16550 ;; Auto vars:     Size  Location     Type
 16551 ;;		None
 16552 ;; Return value:  Size  Location     Type
 16553 ;;                  1    wreg      void 
 16554 ;; Registers used:
 16555 ;;		wreg, status,2, status,0
 16556 ;; Tracked objects:
 16557 ;;		On entry : 0/0
 16558 ;;		On exit  : 0/0
 16559 ;;		Unchanged: 0/0
 16560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16561 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16565 ;;Total ram usage:        2 bytes
 16566 ;; Hardware stack levels used:    1
 16567 ;; Hardware stack levels required when called:    2
 16568 ;; This function calls:
 16569 ;;		Nothing
 16570 ;; This function is called by:
 16571 ;;		_key_scan_call
 16572 ;;		_mfrc522_hal_init
 16573 ;;		_m_system_start_self_test
 16574 ;;		_main
 16575 ;;		_ui_disp_hello
 16576 ;;		_ui_disp_str_dly
 16577 ;;		_led_all_test
 16578 ;;		_iic_start
 16579 ;;		_iic_stop
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           
 16584                           ;psect for function _delay
 16585  1DBC                     _delay:	
 16586  1DBC                     l11743:	
 16587                           ;delay.c: 7: while(t--)
 16588                           
 16589                           ;incstack = 0
 16590                           ; Regs used in _delay: [wreg+status,2+status,0]
 16591                           
 16592  1DBC  3001               	movlw	1
 16593  1DBD  02F3               	subwf	delay@t,f
 16594  1DBE  3000               	movlw	0
 16595  1DBF  3BF4               	subwfb	delay@t+1,f
 16596  1DC0  0A73               	incf	delay@t,w
 16597  1DC1  1903               	btfsc	3,2
 16598  1DC2  0A74               	incf	delay@t+1,w
 16599  1DC3  1903               	btfsc	3,2
 16600  1DC4  0008               	return
 16601                           
 16602                           ;delay.c: 8: {
 16603                           ;delay.c: 9: __nop();
 16604  1DC5  0000               	nop
 16605                           
 16606                           ;delay.c: 10: __nop();
 16607  1DC6  0000               	nop
 16608                           
 16609                           ;delay.c: 11: __nop();
 16610  1DC7  0000               	nop
 16611                           
 16612                           ;delay.c: 12: __nop();
 16613  1DC8  0000               	nop
 16614  1DC9  2DBC               	goto	l11743
 16615  1DCA                     __end_of_delay:	
 16616                           
 16617                           	psect	text38
 16618  1E7F                     __ptext38:	
 16619 ;; *************** function _m_system_init *****************
 16620 ;; Defined at:
 16621 ;;		line 3 in file "main.c"
 16622 ;; Parameters:    Size  Location     Type
 16623 ;;		None
 16624 ;; Auto vars:     Size  Location     Type
 16625 ;;		None
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  1    wreg      void 
 16628 ;; Registers used:
 16629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : 0/0
 16632 ;;		On exit  : 0/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16636 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16638 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16639 ;;Total ram usage:        0 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    5
 16642 ;; This function calls:
 16643 ;;		_SYSTEM_Initialize
 16644 ;;		_lcd_init
 16645 ;;		_led_port_init
 16646 ;;		_other_gpio_port_init
 16647 ;; This function is called by:
 16648 ;;		_main
 16649 ;; This function uses a non-reentrant model
 16650 ;;
 16651                           
 16652                           
 16653                           ;psect for function _m_system_init
 16654  1E7F                     _m_system_init:	
 16655                           
 16656                           ;main.c: 5: SYSTEM_Initialize();
 16657                           
 16658                           ;incstack = 0
 16659                           ; Regs used in _m_system_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16660  1E7F  3190  2000  319E   	fcall	_SYSTEM_Initialize
 16661                           
 16662                           ;main.c: 9: do{ do { TRISBbits.TRISB1 = 1; } while(0); do { TRISBbits.TRISB2 = 1; } whil
      +                          e(0); do { TRISBbits.TRISB3 = 1; } while(0); }while(0);;
 16663  1E82  0021               	movlb	1	; select bank1
 16664  1E83  148D               	bsf	13,1	;volatile
 16665  1E84  150D               	bsf	13,2	;volatile
 16666  1E85  158D               	bsf	13,3	;volatile
 16667                           
 16668                           ;main.c: 10: led_port_init();
 16669  1E86  319E  26F0  319E   	fcall	_led_port_init
 16670                           
 16671                           ;main.c: 11: other_gpio_port_init();
 16672  1E89  319D  2590  319E   	fcall	_other_gpio_port_init
 16673                           
 16674                           ;main.c: 13: lcd_init();
 16675  1E8C  319D  255D         	fcall	_lcd_init
 16676                           
 16677                           ;main.c: 14: do{LCDCON=0x8F;}while(0);;
 16678  1E8E  308F               	movlw	143
 16679  1E8F  002F               	movlb	15	; select bank15
 16680  1E90  0091               	movwf	17	;volatile
 16681                           
 16682                           ;main.c: 17: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 16683  1E91  178B               	bsf	11,7	;volatile
 16684  1E92  170B               	bsf	11,6	;volatile
 16685  1E93  0008               	return
 16686  1E94                     __end_of_m_system_init:	
 16687                           
 16688                           	psect	text39
 16689  1D90                     __ptext39:	
 16690 ;; *************** function _other_gpio_port_init *****************
 16691 ;; Defined at:
 16692 ;;		line 5 in file "src/driver/other-gpio.c"
 16693 ;; Parameters:    Size  Location     Type
 16694 ;;		None
 16695 ;; Auto vars:     Size  Location     Type
 16696 ;;		None
 16697 ;; Return value:  Size  Location     Type
 16698 ;;                  1    wreg      void 
 16699 ;; Registers used:
 16700 ;;		None
 16701 ;; Tracked objects:
 16702 ;;		On entry : 0/0
 16703 ;;		On exit  : 0/0
 16704 ;;		Unchanged: 0/0
 16705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16710 ;;Total ram usage:        0 bytes
 16711 ;; Hardware stack levels used:    1
 16712 ;; Hardware stack levels required when called:    2
 16713 ;; This function calls:
 16714 ;;		Nothing
 16715 ;; This function is called by:
 16716 ;;		_m_system_init
 16717 ;; This function uses a non-reentrant model
 16718 ;;
 16719                           
 16720                           
 16721                           ;psect for function _other_gpio_port_init
 16722  1D90                     _other_gpio_port_init:	
 16723                           
 16724                           ;incstack = 0
 16725                           ; Regs used in _other_gpio_port_init: []
 16726                           ;other-gpio.c: 7: do{ do{do { TRISAbits.TRISA4 = 0; } while(0);}while(0);; do{ do { TRIS
      +                          Abits.TRISA5 = 1; } while(0);}while(0);; do{ do { TRISBbits.TRISB4 = 1; } while(0);}whil
      +                          e(0);; do{ do { TRISBbits.TRISB0 = 0; } while(0); }while(0);; do { LATDbits.LATD7 = 0; }
      +                           whi
 16727  1D90  0021               	movlb	1	; select bank1
 16728  1D91  120C               	bcf	12,4	;volatile
 16729  1D92  168C               	bsf	12,5	;volatile
 16730  1D93  160D               	bsf	13,4	;volatile
 16731  1D94  100D               	bcf	13,0	;volatile
 16732  1D95  0022               	movlb	2	; select bank2
 16733  1D96  138F               	bcf	15,7	;volatile
 16734  1D97  0021               	movlb	1	; select bank1
 16735  1D98  138F               	bcf	15,7	;volatile
 16736  1D99  0008               	return
 16737  1D9A                     __end_of_other_gpio_port_init:	
 16738                           
 16739                           	psect	text40
 16740  1EF0                     __ptext40:	
 16741 ;; *************** function _led_port_init *****************
 16742 ;; Defined at:
 16743 ;;		line 4 in file "src/driver/led.c"
 16744 ;; Parameters:    Size  Location     Type
 16745 ;;		None
 16746 ;; Auto vars:     Size  Location     Type
 16747 ;;		None
 16748 ;; Return value:  Size  Location     Type
 16749 ;;                  1    wreg      void 
 16750 ;; Registers used:
 16751 ;;		None
 16752 ;; Tracked objects:
 16753 ;;		On entry : 0/0
 16754 ;;		On exit  : 0/0
 16755 ;;		Unchanged: 0/0
 16756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16761 ;;Total ram usage:        0 bytes
 16762 ;; Hardware stack levels used:    1
 16763 ;; Hardware stack levels required when called:    2
 16764 ;; This function calls:
 16765 ;;		Nothing
 16766 ;; This function is called by:
 16767 ;;		_m_system_init
 16768 ;; This function uses a non-reentrant model
 16769 ;;
 16770                           
 16771                           
 16772                           ;psect for function _led_port_init
 16773  1EF0                     _led_port_init:	
 16774                           
 16775                           ;incstack = 0
 16776                           ; Regs used in _led_port_init: []
 16777                           ;led.c: 6: do{ do { ANSELAbits.ANSA3 = 0; } while(0); do { TRISAbits.TRISA3 = 0; } while
      +                          (0); }while(0);;
 16778  1EF0  0023               	movlb	3	; select bank3
 16779  1EF1  118C               	bcf	12,3	;volatile
 16780  1EF2  0021               	movlb	1	; select bank1
 16781  1EF3  118C               	bcf	12,3	;volatile
 16782                           
 16783                           ;led.c: 7: do{ do { ANSELFbits.ANSF0 = 0; } while(0); do { TRISFbits.TRISF0 = 0; } while
      +                          (0); }while(0);;
 16784  1EF4  0028               	movlb	8	; select bank8
 16785  1EF5  100C               	bcf	12,0	;volatile
 16786  1EF6  0026               	movlb	6	; select bank6
 16787  1EF7  100C               	bcf	12,0	;volatile
 16788                           
 16789                           ;led.c: 8: do{ do { ANSELFbits.ANSF1 = 0; } while(0); do { TRISFbits.TRISF1 = 0; } while
      +                          (0); }while(0);;
 16790  1EF8  0028               	movlb	8	; select bank8
 16791  1EF9  108C               	bcf	12,1	;volatile
 16792  1EFA  0026               	movlb	6	; select bank6
 16793  1EFB  108C               	bcf	12,1	;volatile
 16794                           
 16795                           ;led.c: 9: do{ do { ANSELAbits.ANSA2 = 0; } while(0); do { TRISAbits.TRISA2 = 0; } while
      +                          (0); }while(0);;
 16796  1EFC  0023               	movlb	3	; select bank3
 16797  1EFD  110C               	bcf	12,2	;volatile
 16798  1EFE  0021               	movlb	1	; select bank1
 16799  1EFF  110C               	bcf	12,2	;volatile
 16800                           
 16801                           ;led.c: 10: do{ do { ANSELAbits.ANSA0 = 0; } while(0); do { TRISAbits.TRISA0 = 0; } whil
      +                          e(0); }while(0);;
 16802  1F00  0023               	movlb	3	; select bank3
 16803  1F01  100C               	bcf	12,0	;volatile
 16804  1F02  0021               	movlb	1	; select bank1
 16805  1F03  100C               	bcf	12,0	;volatile
 16806                           
 16807                           ;led.c: 11: do{ do { ANSELAbits.ANSA1 = 0; } while(0); do { TRISAbits.TRISA1 = 0; } whil
      +                          e(0); }while(0);;
 16808  1F04  0023               	movlb	3	; select bank3
 16809  1F05  108C               	bcf	12,1	;volatile
 16810  1F06  0021               	movlb	1	; select bank1
 16811  1F07  108C               	bcf	12,1	;volatile
 16812  1F08  0008               	return
 16813  1F09                     __end_of_led_port_init:	
 16814                           
 16815                           	psect	text41
 16816  1D5D                     __ptext41:	
 16817 ;; *************** function _lcd_init *****************
 16818 ;; Defined at:
 16819 ;;		line 250 in file "src/driver/lcd.c"
 16820 ;; Parameters:    Size  Location     Type
 16821 ;;		None
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;		None
 16824 ;; Return value:  Size  Location     Type
 16825 ;;                  1    wreg      void 
 16826 ;; Registers used:
 16827 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16828 ;; Tracked objects:
 16829 ;;		On entry : 0/0
 16830 ;;		On exit  : 0/0
 16831 ;;		Unchanged: 0/0
 16832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16837 ;;Total ram usage:        0 bytes
 16838 ;; Hardware stack levels used:    1
 16839 ;; Hardware stack levels required when called:    4
 16840 ;; This function calls:
 16841 ;;		_lcd_config
 16842 ;; This function is called by:
 16843 ;;		_m_system_init
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           
 16848                           ;psect for function _lcd_init
 16849  1D5D                     _lcd_init:	
 16850                           
 16851                           ;lcd.c: 253: lcd_config();
 16852                           
 16853                           ;incstack = 0
 16854                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16855  1D5D  3190  2051         	fcall	_lcd_config
 16856                           
 16857                           ;lcd.c: 254: do { LATAbits.LATA1 = 1; } while(0);;
 16858  1D5F  0022               	movlb	2	; select bank2
 16859  1D60  148C               	bsf	12,1	;volatile
 16860  1D61  0008               	return
 16861  1D62                     __end_of_lcd_init:	
 16862                           
 16863                           	psect	text42
 16864  1051                     __ptext42:	
 16865 ;; *************** function _lcd_config *****************
 16866 ;; Defined at:
 16867 ;;		line 211 in file "src/driver/lcd.c"
 16868 ;; Parameters:    Size  Location     Type
 16869 ;;		None
 16870 ;; Auto vars:     Size  Location     Type
 16871 ;;		None
 16872 ;; Return value:  Size  Location     Type
 16873 ;;                  1    wreg      void 
 16874 ;; Registers used:
 16875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16876 ;; Tracked objects:
 16877 ;;		On entry : 0/0
 16878 ;;		On exit  : 0/0
 16879 ;;		Unchanged: 0/0
 16880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16885 ;;Total ram usage:        0 bytes
 16886 ;; Hardware stack levels used:    1
 16887 ;; Hardware stack levels required when called:    3
 16888 ;; This function calls:
 16889 ;;		_lcd_disp_all
 16890 ;; This function is called by:
 16891 ;;		_lcd_init
 16892 ;; This function uses a non-reentrant model
 16893 ;;
 16894                           
 16895                           
 16896                           ;psect for function _lcd_config
 16897  1051                     _lcd_config:	
 16898                           
 16899                           ;lcd.c: 215: LCDPSbits.WFT = 0;
 16900                           
 16901                           ;incstack = 0
 16902                           ; Regs used in _lcd_config: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16903  1051  002F               	movlb	15	; select bank15
 16904  1052  1392               	bcf	18,7	;volatile
 16905                           
 16906                           ;lcd.c: 216: LCDPSbits.BIASMD = 0;
 16907  1053  1312               	bcf	18,6	;volatile
 16908                           
 16909                           ;lcd.c: 217: LCDPSbits.LP=0x07;
 16910  1054  0812               	movf	18,w	;volatile
 16911  1055  39F0               	andlw	-16
 16912  1056  3807               	iorlw	7
 16913  1057  0092               	movwf	18	;volatile
 16914                           
 16915                           ;lcd.c: 225: LCDSE0 = 0x1f;
 16916  1058  301F               	movlw	31
 16917  1059  0098               	movwf	24	;volatile
 16918                           
 16919                           ;lcd.c: 226: LCDSE1 = 0x00;
 16920  105A  0199               	clrf	25	;volatile
 16921                           
 16922                           ;lcd.c: 227: LCDSE2 = 0xf0;
 16923  105B  30F0               	movlw	240
 16924  105C  009A               	movwf	26	;volatile
 16925                           
 16926                           ;lcd.c: 228: LCDSE3 = 0x87;
 16927  105D  3087               	movlw	135
 16928  105E  009B               	movwf	27	;volatile
 16929                           
 16930                           ;lcd.c: 229: LCDSE4 = 0x00;
 16931  105F  019C               	clrf	28	;volatile
 16932                           
 16933                           ;lcd.c: 230: LCDSE5 = 0b00111100;
 16934  1060  303C               	movlw	60
 16935  1061  009D               	movwf	29	;volatile
 16936                           
 16937                           ;lcd.c: 234: lcd_disp_all(0x00);;
 16938  1062  3000               	movlw	0
 16939  1063  319F  27E3  3190   	fcall	_lcd_disp_all
 16940                           
 16941                           ;lcd.c: 240: LCDRL=0xFF;
 16942  1066  30FF               	movlw	255
 16943  1067  002F               	movlb	15	; select bank15
 16944  1068  0095               	movwf	21	;volatile
 16945                           
 16946                           ;lcd.c: 241: LCDREF= 0x80 ;
 16947  1069  3080               	movlw	128
 16948  106A  0093               	movwf	19	;volatile
 16949                           
 16950                           ;lcd.c: 247: lcd_disp_all(0x00);;
 16951  106B  3000               	movlw	0
 16952  106C  319F  27E3         	fcall	_lcd_disp_all
 16953                           
 16954                           ;lcd.c: 248: do{LCDCON=0x8F;}while(0);;
 16955  106E  308F               	movlw	143
 16956  106F  002F               	movlb	15	; select bank15
 16957  1070  0091               	movwf	17	;volatile
 16958  1071  0008               	return
 16959  1072                     __end_of_lcd_config:	
 16960                           
 16961                           	psect	text43
 16962  1FE3                     __ptext43:	
 16963 ;; *************** function _lcd_disp_all *****************
 16964 ;; Defined at:
 16965 ;;		line 194 in file "src/driver/lcd.c"
 16966 ;; Parameters:    Size  Location     Type
 16967 ;;  x               1    wreg     unsigned char 
 16968 ;; Auto vars:     Size  Location     Type
 16969 ;;  x               1    0[BANK0 ] unsigned char 
 16970 ;;  i               1    1[BANK0 ] unsigned char 
 16971 ;; Return value:  Size  Location     Type
 16972 ;;                  1    wreg      void 
 16973 ;; Registers used:
 16974 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16975 ;; Tracked objects:
 16976 ;;		On entry : 0/0
 16977 ;;		On exit  : 0/0
 16978 ;;		Unchanged: 0/0
 16979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16981 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16982 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16983 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16984 ;;Total ram usage:        6 bytes
 16985 ;; Hardware stack levels used:    1
 16986 ;; Hardware stack levels required when called:    2
 16987 ;; This function calls:
 16988 ;;		Nothing
 16989 ;; This function is called by:
 16990 ;;		_lcd_config
 16991 ;;		_m_system_start_self_test
 16992 ;;		_ui_disp_hello
 16993 ;;		_ui_disp_str_dly
 16994 ;; This function uses a non-reentrant model
 16995 ;;
 16996                           
 16997                           
 16998                           ;psect for function _lcd_disp_all
 16999  1FE3                     _lcd_disp_all:	
 17000                           
 17001                           ;incstack = 0
 17002                           ; Regs used in _lcd_disp_all: [wreg+fsr1l+fsr1h+status,2+status,0]
 17003                           ;lcd_disp_all@x stored from wreg
 17004  1FE3  0020               	movlb	0	; select bank0
 17005  1FE4  00A0               	movwf	lcd_disp_all@x
 17006                           
 17007                           ;lcd.c: 196: uint8_t i;
 17008                           ;lcd.c: 197: for(i=0;i<24;i++)
 17009  1FE5  01A1               	clrf	lcd_disp_all@i
 17010  1FE6                     L8:	
 17011  1FE6  3018               	movlw	24
 17012  1FE7  0221               	subwf	lcd_disp_all@i,w
 17013  1FE8  1803               	btfsc	3,0
 17014  1FE9  0008               	return
 17015                           
 17016                           ;lcd.c: 198: {
 17017                           ;lcd.c: 199: pLcdReg[i]=x;
 17018  1FEA  0821               	movf	lcd_disp_all@i,w
 17019  1FEB  00F3               	movwf	??_lcd_disp_all
 17020  1FEC  01F4               	clrf	??_lcd_disp_all+1
 17021  1FED  0873               	movf	??_lcd_disp_all,w
 17022  1FEE  0022               	movlb	2	; select bank2
 17023  1FEF  076C               	addwf	_pLcdReg^(0+256),w
 17024  1FF0  00F5               	movwf	??_lcd_disp_all+2
 17025  1FF1  0874               	movf	??_lcd_disp_all+1,w
 17026  1FF2  3D6D               	addwfc	(_pLcdReg+1)^(0+256),w
 17027  1FF3  00F6               	movwf	??_lcd_disp_all+3
 17028  1FF4  0875               	movf	??_lcd_disp_all+2,w
 17029  1FF5  0086               	movwf	6
 17030  1FF6  0876               	movf	??_lcd_disp_all+3,w
 17031  1FF7  0087               	movwf	7
 17032  1FF8  0020               	movlb	0	; select bank0
 17033  1FF9  0820               	movf	lcd_disp_all@x,w
 17034  1FFA  0081               	movwf	1
 17035  1FFB  3001               	movlw	1
 17036  1FFC  00F3               	movwf	??_lcd_disp_all
 17037  1FFD  0873               	movf	??_lcd_disp_all,w
 17038  1FFE  07A1               	addwf	lcd_disp_all@i,f
 17039  1FFF  2FE6               	goto	L8
 17040  2000                     __end_of_lcd_disp_all:	
 17041                           
 17042                           	psect	text44
 17043  1000                     __ptext44:	
 17044 ;; *************** function _SYSTEM_Initialize *****************
 17045 ;; Defined at:
 17046 ;;		line 70 in file "mcc_generated_files/mcc.c"
 17047 ;; Parameters:    Size  Location     Type
 17048 ;;		None
 17049 ;; Auto vars:     Size  Location     Type
 17050 ;;		None
 17051 ;; Return value:  Size  Location     Type
 17052 ;;                  1    wreg      void 
 17053 ;; Registers used:
 17054 ;;		wreg, status,2, status,0, pclath, cstack
 17055 ;; Tracked objects:
 17056 ;;		On entry : 0/0
 17057 ;;		On exit  : 0/0
 17058 ;;		Unchanged: 0/0
 17059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17062 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17063 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17064 ;;Total ram usage:        0 bytes
 17065 ;; Hardware stack levels used:    1
 17066 ;; Hardware stack levels required when called:    4
 17067 ;; This function calls:
 17068 ;;		_EUSART1_Initialize
 17069 ;;		_OSCILLATOR_Initialize
 17070 ;;		_PIN_MANAGER_Initialize
 17071 ;;		_TMR0_Initialize
 17072 ;;		_TMR1_Initialize
 17073 ;;		_WDT_Initialize
 17074 ;; This function is called by:
 17075 ;;		_m_system_init
 17076 ;; This function uses a non-reentrant model
 17077 ;;
 17078                           
 17079                           
 17080                           ;psect for function _SYSTEM_Initialize
 17081  1000                     _SYSTEM_Initialize:	
 17082                           
 17083                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 17084                           
 17085                           ;incstack = 0
 17086                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17087  1000  3193  2361  3190   	fcall	_PIN_MANAGER_Initialize
 17088                           
 17089                           ;mcc.c: 74: OSCILLATOR_Initialize();
 17090  1003  319D  2558  3190   	fcall	_OSCILLATOR_Initialize
 17091                           
 17092                           ;mcc.c: 75: WDT_Initialize();
 17093  1006  319D  2550  3190   	fcall	_WDT_Initialize
 17094                           
 17095                           ;mcc.c: 76: TMR1_Initialize();
 17096  1009  319F  27C6  3190   	fcall	_TMR1_Initialize
 17097                           
 17098                           ;mcc.c: 77: TMR0_Initialize();
 17099  100C  319E  2694  3190   	fcall	_TMR0_Initialize
 17100                           
 17101                           ;mcc.c: 78: EUSART1_Initialize();
 17102  100F  319D  25D8         	fcall	_EUSART1_Initialize
 17103  1011  0008               	return
 17104  1012                     __end_of_SYSTEM_Initialize:	
 17105                           
 17106                           	psect	text45
 17107  1D50                     __ptext45:	
 17108 ;; *************** function _WDT_Initialize *****************
 17109 ;; Defined at:
 17110 ;;		line 91 in file "mcc_generated_files/mcc.c"
 17111 ;; Parameters:    Size  Location     Type
 17112 ;;		None
 17113 ;; Auto vars:     Size  Location     Type
 17114 ;;		None
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  1    wreg      void 
 17117 ;; Registers used:
 17118 ;;		wreg
 17119 ;; Tracked objects:
 17120 ;;		On entry : 0/0
 17121 ;;		On exit  : 0/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17128 ;;Total ram usage:        0 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    2
 17131 ;; This function calls:
 17132 ;;		Nothing
 17133 ;; This function is called by:
 17134 ;;		_SYSTEM_Initialize
 17135 ;; This function uses a non-reentrant model
 17136 ;;
 17137                           
 17138                           
 17139                           ;psect for function _WDT_Initialize
 17140  1D50                     _WDT_Initialize:	
 17141                           
 17142                           ;mcc.c: 94: WDTCON = 0x16;
 17143                           
 17144                           ;incstack = 0
 17145                           ; Regs used in _WDT_Initialize: [wreg]
 17146  1D50  3016               	movlw	22
 17147  1D51  0021               	movlb	1	; select bank1
 17148  1D52  0097               	movwf	23	;volatile
 17149  1D53  0008               	return
 17150  1D54                     __end_of_WDT_Initialize:	
 17151                           
 17152                           	psect	text46
 17153  1FC6                     __ptext46:	
 17154 ;; *************** function _TMR1_Initialize *****************
 17155 ;; Defined at:
 17156 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 17157 ;; Parameters:    Size  Location     Type
 17158 ;;		None
 17159 ;; Auto vars:     Size  Location     Type
 17160 ;;		None
 17161 ;; Return value:  Size  Location     Type
 17162 ;;                  1    wreg      void 
 17163 ;; Registers used:
 17164 ;;		wreg, status,2, status,0, pclath, cstack
 17165 ;; Tracked objects:
 17166 ;;		On entry : 0/0
 17167 ;;		On exit  : 0/0
 17168 ;;		Unchanged: 0/0
 17169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17174 ;;Total ram usage:        0 bytes
 17175 ;; Hardware stack levels used:    1
 17176 ;; Hardware stack levels required when called:    3
 17177 ;; This function calls:
 17178 ;;		_TMR1_SetInterruptHandler
 17179 ;;		_TMR1_StartTimer
 17180 ;; This function is called by:
 17181 ;;		_SYSTEM_Initialize
 17182 ;; This function uses a non-reentrant model
 17183 ;;
 17184                           
 17185                           
 17186                           ;psect for function _TMR1_Initialize
 17187  1FC6                     _TMR1_Initialize:	
 17188                           
 17189                           ;tmr1.c: 69: T1CON = 0x8C;
 17190                           
 17191                           ;incstack = 0
 17192                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17193  1FC6  308C               	movlw	140
 17194  1FC7  0020               	movlb	0	; select bank0
 17195  1FC8  0098               	movwf	24	;volatile
 17196                           
 17197                           ;tmr1.c: 72: T1GCON = 0x01;
 17198  1FC9  3001               	movlw	1
 17199  1FCA  0099               	movwf	25	;volatile
 17200                           
 17201                           ;tmr1.c: 75: TMR1H = 0x80;
 17202  1FCB  3080               	movlw	128
 17203  1FCC  0097               	movwf	23	;volatile
 17204                           
 17205                           ;tmr1.c: 78: TMR1L = 0x00;
 17206  1FCD  0196               	clrf	22	;volatile
 17207                           
 17208                           ;tmr1.c: 81: timer1ReloadVal=(TMR1H << 8) | TMR1L;
 17209  1FCE  0817               	movf	23,w	;volatile
 17210  1FCF  0021               	movlb	1	; select bank1
 17211  1FD0  00E0               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 17212  1FD1  0020               	movlb	0	; select bank0
 17213  1FD2  0816               	movf	22,w	;volatile
 17214  1FD3  0021               	movlb	1	; select bank1
 17215  1FD4  00DF               	movwf	_timer1ReloadVal^(0+128)	;volatile
 17216                           
 17217                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
 17218  1FD5  0020               	movlb	0	; select bank0
 17219  1FD6  1011               	bcf	17,0	;volatile
 17220                           
 17221                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
 17222  1FD7  0021               	movlb	1	; select bank1
 17223  1FD8  1411               	bsf	17,0	;volatile
 17224                           
 17225                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 17226  1FD9  3000               	movlw	0
 17227  1FDA  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 17228  1FDB  3000               	movlw	0
 17229  1FDC  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 17230  1FDD  319D  2568  319F   	fcall	_TMR1_SetInterruptHandler
 17231                           
 17232                           ;tmr1.c: 93: TMR1_StartTimer();
 17233  1FE0  319D  254D         	fcall	_TMR1_StartTimer
 17234  1FE2  0008               	return
 17235  1FE3                     __end_of_TMR1_Initialize:	
 17236                           
 17237                           	psect	text47
 17238  1D4D                     __ptext47:	
 17239 ;; *************** function _TMR1_StartTimer *****************
 17240 ;; Defined at:
 17241 ;;		line 96 in file "mcc_generated_files/tmr1.c"
 17242 ;; Parameters:    Size  Location     Type
 17243 ;;		None
 17244 ;; Auto vars:     Size  Location     Type
 17245 ;;		None
 17246 ;; Return value:  Size  Location     Type
 17247 ;;                  1    wreg      void 
 17248 ;; Registers used:
 17249 ;;		None
 17250 ;; Tracked objects:
 17251 ;;		On entry : 0/0
 17252 ;;		On exit  : 0/0
 17253 ;;		Unchanged: 0/0
 17254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17259 ;;Total ram usage:        0 bytes
 17260 ;; Hardware stack levels used:    1
 17261 ;; Hardware stack levels required when called:    2
 17262 ;; This function calls:
 17263 ;;		Nothing
 17264 ;; This function is called by:
 17265 ;;		_TMR1_Initialize
 17266 ;; This function uses a non-reentrant model
 17267 ;;
 17268                           
 17269                           
 17270                           ;psect for function _TMR1_StartTimer
 17271  1D4D                     _TMR1_StartTimer:	
 17272                           
 17273                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
 17274                           
 17275                           ;incstack = 0
 17276                           ; Regs used in _TMR1_StartTimer: []
 17277  1D4D  0020               	movlb	0	; select bank0
 17278  1D4E  1418               	bsf	24,0	;volatile
 17279  1D4F  0008               	return
 17280  1D50                     __end_of_TMR1_StartTimer:	
 17281                           
 17282                           	psect	text48
 17283  1D68                     __ptext48:	
 17284 ;; *************** function _TMR1_SetInterruptHandler *****************
 17285 ;; Defined at:
 17286 ;;		line 175 in file "mcc_generated_files/tmr1.c"
 17287 ;; Parameters:    Size  Location     Type
 17288 ;;  InterruptHan    2    3[COMMON] PTR void 
 17289 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 17290 ;; Auto vars:     Size  Location     Type
 17291 ;;		None
 17292 ;; Return value:  Size  Location     Type
 17293 ;;                  1    wreg      void 
 17294 ;; Registers used:
 17295 ;;		wreg
 17296 ;; Tracked objects:
 17297 ;;		On entry : 0/0
 17298 ;;		On exit  : 0/0
 17299 ;;		Unchanged: 0/0
 17300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17304 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17305 ;;Total ram usage:        2 bytes
 17306 ;; Hardware stack levels used:    1
 17307 ;; Hardware stack levels required when called:    2
 17308 ;; This function calls:
 17309 ;;		Nothing
 17310 ;; This function is called by:
 17311 ;;		_TMR1_Initialize
 17312 ;; This function uses a non-reentrant model
 17313 ;;
 17314                           
 17315                           
 17316                           ;psect for function _TMR1_SetInterruptHandler
 17317  1D68                     _TMR1_SetInterruptHandler:	
 17318                           
 17319                           ;tmr1.c: 176: TMR1_InterruptHandler = InterruptHandler;
 17320                           
 17321                           ;incstack = 0
 17322                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 17323  1D68  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 17324  1D69  0023               	movlb	3	; select bank3
 17325  1D6A  00B1               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
 17326  1D6B  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 17327  1D6C  00B0               	movwf	_TMR1_InterruptHandler^(0+384)
 17328  1D6D  0008               	return
 17329  1D6E                     __end_of_TMR1_SetInterruptHandler:	
 17330                           
 17331                           	psect	text49
 17332  1E94                     __ptext49:	
 17333 ;; *************** function _TMR0_Initialize *****************
 17334 ;; Defined at:
 17335 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 17336 ;; Parameters:    Size  Location     Type
 17337 ;;		None
 17338 ;; Auto vars:     Size  Location     Type
 17339 ;;		None
 17340 ;; Return value:  Size  Location     Type
 17341 ;;                  1    wreg      void 
 17342 ;; Registers used:
 17343 ;;		wreg, status,2, status,0, pclath, cstack
 17344 ;; Tracked objects:
 17345 ;;		On entry : 0/0
 17346 ;;		On exit  : 0/0
 17347 ;;		Unchanged: 0/0
 17348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17353 ;;Total ram usage:        1 bytes
 17354 ;; Hardware stack levels used:    1
 17355 ;; Hardware stack levels required when called:    3
 17356 ;; This function calls:
 17357 ;;		_TMR0_SetInterruptHandler
 17358 ;; This function is called by:
 17359 ;;		_SYSTEM_Initialize
 17360 ;; This function uses a non-reentrant model
 17361 ;;
 17362                           
 17363                           
 17364                           ;psect for function _TMR0_Initialize
 17365  1E94                     _TMR0_Initialize:	
 17366                           
 17367                           ;tmr0.c: 69: OPTION_REG = (OPTION_REG & 0xC0) | 0xC7 & 0x3F;
 17368                           
 17369                           ;incstack = 0
 17370                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 17371  1E94  0021               	movlb	1	; select bank1
 17372  1E95  0815               	movf	21,w	;volatile
 17373  1E96  39C0               	andlw	192
 17374  1E97  3807               	iorlw	7
 17375  1E98  0095               	movwf	21	;volatile
 17376                           
 17377                           ;tmr0.c: 72: TMR0 = 0x94;
 17378  1E99  3094               	movlw	148
 17379  1E9A  0020               	movlb	0	; select bank0
 17380  1E9B  0095               	movwf	21	;volatile
 17381                           
 17382                           ;tmr0.c: 75: timer0ReloadVal= 148;
 17383  1E9C  3094               	movlw	148
 17384  1E9D  00F5               	movwf	??_TMR0_Initialize
 17385  1E9E  0875               	movf	??_TMR0_Initialize,w
 17386  1E9F  0021               	movlb	1	; select bank1
 17387  1EA0  00E7               	movwf	_timer0ReloadVal^(0+128)	;volatile
 17388                           
 17389                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
 17390  1EA1  110B               	bcf	11,2	;volatile
 17391                           
 17392                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
 17393  1EA2  168B               	bsf	11,5	;volatile
 17394                           
 17395                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 17396  1EA3  3000               	movlw	0
 17397  1EA4  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 17398  1EA5  3000               	movlw	0
 17399  1EA6  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 17400  1EA7  319D  2562         	fcall	_TMR0_SetInterruptHandler
 17401  1EA9  0008               	return
 17402  1EAA                     __end_of_TMR0_Initialize:	
 17403                           
 17404                           	psect	text50
 17405  1D62                     __ptext50:	
 17406 ;; *************** function _TMR0_SetInterruptHandler *****************
 17407 ;; Defined at:
 17408 ;;		line 138 in file "mcc_generated_files/tmr0.c"
 17409 ;; Parameters:    Size  Location     Type
 17410 ;;  InterruptHan    2    3[COMMON] PTR void 
 17411 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 17412 ;; Auto vars:     Size  Location     Type
 17413 ;;		None
 17414 ;; Return value:  Size  Location     Type
 17415 ;;                  1    wreg      void 
 17416 ;; Registers used:
 17417 ;;		wreg
 17418 ;; Tracked objects:
 17419 ;;		On entry : 0/0
 17420 ;;		On exit  : 0/0
 17421 ;;		Unchanged: 0/0
 17422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17423 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17427 ;;Total ram usage:        2 bytes
 17428 ;; Hardware stack levels used:    1
 17429 ;; Hardware stack levels required when called:    2
 17430 ;; This function calls:
 17431 ;;		Nothing
 17432 ;; This function is called by:
 17433 ;;		_TMR0_Initialize
 17434 ;; This function uses a non-reentrant model
 17435 ;;
 17436                           
 17437                           
 17438                           ;psect for function _TMR0_SetInterruptHandler
 17439  1D62                     _TMR0_SetInterruptHandler:	
 17440                           
 17441                           ;tmr0.c: 139: TMR0_InterruptHandler = InterruptHandler;
 17442                           
 17443                           ;incstack = 0
 17444                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 17445  1D62  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 17446  1D63  0022               	movlb	2	; select bank2
 17447  1D64  00B7               	movwf	(_TMR0_InterruptHandler+1)^(0+256)
 17448  1D65  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 17449  1D66  00B6               	movwf	_TMR0_InterruptHandler^(0+256)
 17450  1D67  0008               	return
 17451  1D68                     __end_of_TMR0_SetInterruptHandler:	
 17452                           
 17453                           	psect	text51
 17454  1361                     __ptext51:	
 17455 ;; *************** function _PIN_MANAGER_Initialize *****************
 17456 ;; Defined at:
 17457 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 17458 ;; Parameters:    Size  Location     Type
 17459 ;;		None
 17460 ;; Auto vars:     Size  Location     Type
 17461 ;;		None
 17462 ;; Return value:  Size  Location     Type
 17463 ;;                  1    wreg      void 
 17464 ;; Registers used:
 17465 ;;		wreg, status,2
 17466 ;; Tracked objects:
 17467 ;;		On entry : 0/0
 17468 ;;		On exit  : 0/0
 17469 ;;		Unchanged: 0/0
 17470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17475 ;;Total ram usage:        0 bytes
 17476 ;; Hardware stack levels used:    1
 17477 ;; Hardware stack levels required when called:    2
 17478 ;; This function calls:
 17479 ;;		Nothing
 17480 ;; This function is called by:
 17481 ;;		_SYSTEM_Initialize
 17482 ;; This function uses a non-reentrant model
 17483 ;;
 17484                           
 17485                           
 17486                           ;psect for function _PIN_MANAGER_Initialize
 17487  1361                     _PIN_MANAGER_Initialize:	
 17488                           
 17489                           ;pin_manager.c: 56: LATE = 0x00;
 17490                           
 17491                           ;incstack = 0
 17492                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 17493  1361  0022               	movlb	2	; select bank2
 17494  1362  0190               	clrf	16	;volatile
 17495                           
 17496                           ;pin_manager.c: 57: LATD = 0x02;
 17497  1363  3002               	movlw	2
 17498  1364  008F               	movwf	15	;volatile
 17499                           
 17500                           ;pin_manager.c: 58: LATA = 0x00;
 17501  1365  018C               	clrf	12	;volatile
 17502                           
 17503                           ;pin_manager.c: 59: LATF = 0x00;
 17504  1366  0027               	movlb	7	; select bank7
 17505  1367  018C               	clrf	12	;volatile
 17506                           
 17507                           ;pin_manager.c: 60: LATB = 0x00;
 17508  1368  0022               	movlb	2	; select bank2
 17509  1369  018D               	clrf	13	;volatile
 17510                           
 17511                           ;pin_manager.c: 61: LATG = 0x00;
 17512  136A  0027               	movlb	7	; select bank7
 17513  136B  018D               	clrf	13	;volatile
 17514                           
 17515                           ;pin_manager.c: 62: LATC = 0x00;
 17516  136C  0022               	movlb	2	; select bank2
 17517  136D  018E               	clrf	14	;volatile
 17518                           
 17519                           ;pin_manager.c: 67: TRISE = 0xDF;
 17520  136E  30DF               	movlw	223
 17521  136F  0021               	movlb	1	; select bank1
 17522  1370  0090               	movwf	16	;volatile
 17523                           
 17524                           ;pin_manager.c: 68: TRISF = 0xFF;
 17525  1371  30FF               	movlw	255
 17526  1372  0026               	movlb	6	; select bank6
 17527  1373  008C               	movwf	12	;volatile
 17528                           
 17529                           ;pin_manager.c: 69: TRISA = 0xFF;
 17530  1374  30FF               	movlw	255
 17531  1375  0021               	movlb	1	; select bank1
 17532  1376  008C               	movwf	12	;volatile
 17533                           
 17534                           ;pin_manager.c: 70: TRISG = 0x3F;
 17535  1377  303F               	movlw	63
 17536  1378  0026               	movlb	6	; select bank6
 17537  1379  008D               	movwf	13	;volatile
 17538                           
 17539                           ;pin_manager.c: 71: TRISB = 0xFF;
 17540  137A  30FF               	movlw	255
 17541  137B  0021               	movlb	1	; select bank1
 17542  137C  008D               	movwf	13	;volatile
 17543                           
 17544                           ;pin_manager.c: 72: TRISC = 0xFF;
 17545  137D  30FF               	movlw	255
 17546  137E  008E               	movwf	14	;volatile
 17547                           
 17548                           ;pin_manager.c: 73: TRISD = 0xFD;
 17549  137F  30FD               	movlw	253
 17550  1380  008F               	movwf	15	;volatile
 17551                           
 17552                           ;pin_manager.c: 78: ANSELE = 0x00;
 17553  1381  0023               	movlb	3	; select bank3
 17554  1382  0190               	clrf	16	;volatile
 17555                           
 17556                           ;pin_manager.c: 79: ANSELG = 0x1C;
 17557  1383  301C               	movlw	28
 17558  1384  0028               	movlb	8	; select bank8
 17559  1385  008D               	movwf	13	;volatile
 17560                           
 17561                           ;pin_manager.c: 80: ANSELF = 0xFF;
 17562  1386  30FF               	movlw	255
 17563  1387  008C               	movwf	12	;volatile
 17564                           
 17565                           ;pin_manager.c: 81: ANSELA = 0x2F;
 17566  1388  302F               	movlw	47
 17567  1389  0023               	movlb	3	; select bank3
 17568  138A  008C               	movwf	12	;volatile
 17569                           
 17570                           ;pin_manager.c: 86: WPUB = 0xFF;
 17571  138B  30FF               	movlw	255
 17572  138C  0024               	movlb	4	; select bank4
 17573  138D  008D               	movwf	13	;volatile
 17574                           
 17575                           ;pin_manager.c: 87: WPUG = 0x20;
 17576  138E  3020               	movlw	32
 17577  138F  0029               	movlb	9	; select bank9
 17578  1390  008D               	movwf	13	;volatile
 17579                           
 17580                           ;pin_manager.c: 88: OPTION_REGbits.nWPUEN = 0;
 17581  1391  0021               	movlb	1	; select bank1
 17582  1392  1395               	bcf	21,7	;volatile
 17583                           
 17584                           ;pin_manager.c: 94: APFCON = 0x00;
 17585  1393  0022               	movlb	2	; select bank2
 17586  1394  019D               	clrf	29	;volatile
 17587  1395  0008               	return
 17588  1396                     __end_of_PIN_MANAGER_Initialize:	
 17589                           
 17590                           	psect	text52
 17591  1D58                     __ptext52:	
 17592 ;; *************** function _OSCILLATOR_Initialize *****************
 17593 ;; Defined at:
 17594 ;;		line 81 in file "mcc_generated_files/mcc.c"
 17595 ;; Parameters:    Size  Location     Type
 17596 ;;		None
 17597 ;; Auto vars:     Size  Location     Type
 17598 ;;		None
 17599 ;; Return value:  Size  Location     Type
 17600 ;;                  1    wreg      void 
 17601 ;; Registers used:
 17602 ;;		wreg, status,2
 17603 ;; Tracked objects:
 17604 ;;		On entry : 0/0
 17605 ;;		On exit  : 0/0
 17606 ;;		Unchanged: 0/0
 17607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17612 ;;Total ram usage:        0 bytes
 17613 ;; Hardware stack levels used:    1
 17614 ;; Hardware stack levels required when called:    2
 17615 ;; This function calls:
 17616 ;;		Nothing
 17617 ;; This function is called by:
 17618 ;;		_SYSTEM_Initialize
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           
 17623                           ;psect for function _OSCILLATOR_Initialize
 17624  1D58                     _OSCILLATOR_Initialize:	
 17625                           
 17626                           ;mcc.c: 84: OSCCON = 0x78;
 17627                           
 17628                           ;incstack = 0
 17629                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 17630  1D58  3078               	movlw	120
 17631  1D59  0021               	movlb	1	; select bank1
 17632  1D5A  0099               	movwf	25	;volatile
 17633                           
 17634                           ;mcc.c: 86: OSCTUNE = 0x00;
 17635  1D5B  0198               	clrf	24	;volatile
 17636  1D5C  0008               	return
 17637  1D5D                     __end_of_OSCILLATOR_Initialize:	
 17638                           
 17639                           	psect	text53
 17640  1DD8                     __ptext53:	
 17641 ;; *************** function _EUSART1_Initialize *****************
 17642 ;; Defined at:
 17643 ;;		line 83 in file "mcc_generated_files/eusart1.c"
 17644 ;; Parameters:    Size  Location     Type
 17645 ;;		None
 17646 ;; Auto vars:     Size  Location     Type
 17647 ;;		None
 17648 ;; Return value:  Size  Location     Type
 17649 ;;                  1    wreg      void 
 17650 ;; Registers used:
 17651 ;;		wreg
 17652 ;; Tracked objects:
 17653 ;;		On entry : 0/0
 17654 ;;		On exit  : 0/0
 17655 ;;		Unchanged: 0/0
 17656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17660 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17661 ;;Total ram usage:        0 bytes
 17662 ;; Hardware stack levels used:    1
 17663 ;; Hardware stack levels required when called:    2
 17664 ;; This function calls:
 17665 ;;		Nothing
 17666 ;; This function is called by:
 17667 ;;		_SYSTEM_Initialize
 17668 ;; This function uses a non-reentrant model
 17669 ;;
 17670                           
 17671                           
 17672                           ;psect for function _EUSART1_Initialize
 17673  1DD8                     _EUSART1_Initialize:	
 17674                           
 17675                           ;eusart1.c: 86: PIE1bits.RC1IE = 0;
 17676                           
 17677                           ;incstack = 0
 17678                           ; Regs used in _EUSART1_Initialize: [wreg]
 17679  1DD8  0021               	movlb	1	; select bank1
 17680  1DD9  1291               	bcf	17,5	;volatile
 17681                           
 17682                           ;eusart1.c: 87: PIE1bits.TX1IE = 0;
 17683  1DDA  1211               	bcf	17,4	;volatile
 17684                           
 17685                           ;eusart1.c: 92: BAUD1CON = 0x08;
 17686  1DDB  3008               	movlw	8
 17687  1DDC  0023               	movlb	3	; select bank3
 17688  1DDD  009F               	movwf	31	;volatile
 17689                           
 17690                           ;eusart1.c: 95: RC1STA = 0xD0;
 17691  1DDE  30D0               	movlw	208
 17692  1DDF  009D               	movwf	29	;volatile
 17693                           
 17694                           ;eusart1.c: 98: TX1STA = 0x64;
 17695  1DE0  3064               	movlw	100
 17696  1DE1  009E               	movwf	30	;volatile
 17697                           
 17698                           ;eusart1.c: 101: SP1BRGL = 0x1F;
 17699  1DE2  301F               	movlw	31
 17700  1DE3  009B               	movwf	27	;volatile
 17701                           
 17702                           ;eusart1.c: 104: SP1BRGH = 0x01;
 17703  1DE4  3001               	movlw	1
 17704  1DE5  009C               	movwf	28	;volatile
 17705  1DE6  0008               	return
 17706  1DE7                     __end_of_EUSART1_Initialize:	
 17707                           
 17708                           	psect	text54
 17709  140F                     __ptext54:	
 17710 ;; *************** function _lcd_disp_str *****************
 17711 ;; Defined at:
 17712 ;;		line 180 in file "src/driver/lcd.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;  str             2    2[BANK0 ] PTR unsigned char 
 17715 ;;		 -> STR_28(9), STR_27(9), STR_26(9), STR_25(9), 
 17716 ;;		 -> STR_24(8), STR_23(6), STR_21(9), STR_20(9), 
 17717 ;;		 -> STR_19(9), STR_18(9), STR_17(9), STR_16(9), 
 17718 ;;		 -> STR_14(9), STR_13(9), STR_5(9), lcdBuf(9), 
 17719 ;;		 -> STR_1(9), 
 17720 ;; Auto vars:     Size  Location     Type
 17721 ;;  index           1    6[BANK0 ] unsigned char 
 17722 ;;  loc             1    5[BANK0 ] unsigned char 
 17723 ;; Return value:  Size  Location     Type
 17724 ;;                  1    wreg      void 
 17725 ;; Registers used:
 17726 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17727 ;; Tracked objects:
 17728 ;;		On entry : 0/0
 17729 ;;		On exit  : 0/0
 17730 ;;		Unchanged: 0/0
 17731 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 17733 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 17734 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17735 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 17736 ;;Total ram usage:        5 bytes
 17737 ;; Hardware stack levels used:    1
 17738 ;; Hardware stack levels required when called:    4
 17739 ;; This function calls:
 17740 ;;		_lcd_disp_code
 17741 ;;		_lcd_disp_refresh
 17742 ;; This function is called by:
 17743 ;;		_main
 17744 ;;		_ui_disp_hello
 17745 ;;		_ui_disp_str_num_s
 17746 ;;		_ui_disp_flow
 17747 ;;		_ui_disp_totale_v
 17748 ;;		_ui_disp_balance_and_volume
 17749 ;;		_ui_disp_set_line
 17750 ;;		_ui_disp_recharge
 17751 ;;		_ui_disp_clear_card_id
 17752 ;;		_ui_disp_set_calib
 17753 ;;		_ui_disp_rfid_err
 17754 ;; This function uses a non-reentrant model
 17755 ;;
 17756                           
 17757                           
 17758                           ;psect for function _lcd_disp_str
 17759  140F                     _lcd_disp_str:	
 17760                           
 17761                           ;lcd.c: 182: uint8_t loc=0;
 17762                           
 17763                           ;incstack = 0
 17764                           ; Regs used in _lcd_disp_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17765  140F  0020               	movlb	0	; select bank0
 17766  1410  01A5               	clrf	lcd_disp_str@loc
 17767                           
 17768                           ;lcd.c: 183: uint8_t index=0;
 17769  1411  01A6               	clrf	lcd_disp_str@index
 17770  1412                     l12669:	
 17771                           ;lcd.c: 184: while(*str!='\0'){
 17772                           
 17773  1412  0822               	movf	lcd_disp_str@str,w
 17774  1413  0084               	movwf	4
 17775  1414  0823               	movf	lcd_disp_str@str+1,w
 17776  1415  0085               	movwf	5
 17777  1416  0012               	moviw fsr0++
 17778  1417  1903               	btfsc	3,2
 17779  1418  2C54               	goto	l12671
 17780                           
 17781                           ;lcd.c: 185: for(index=0;index<40;index++){
 17782  1419  01A6               	clrf	lcd_disp_str@index
 17783  141A  3028               	movlw	40
 17784  141B  0226               	subwf	lcd_disp_str@index,w
 17785  141C  1803               	btfsc	3,0
 17786  141D  2C37               	goto	l12661
 17787  141E                     l12653:	
 17788                           
 17789                           ;lcd.c: 186: if(*str==LCDDigitalIndexTable[index])break;
 17790  141E  0826               	movf	lcd_disp_str@index,w
 17791  141F  3E98               	addlw	low (_LCDDigitalIndexTable| (0+32768))
 17792  1420  0084               	movwf	4
 17793  1421  3082               	movlw	high (_LCDDigitalIndexTable| (0+32768))
 17794  1422  1803               	skipnc
 17795  1423  3E01               	addlw	1
 17796  1424  0085               	movwf	5
 17797  1425  0800               	movf	0,w	;code access
 17798  1426  00A4               	movwf	??_lcd_disp_str
 17799  1427  0822               	movf	lcd_disp_str@str,w
 17800  1428  0084               	movwf	4
 17801  1429  0823               	movf	lcd_disp_str@str+1,w
 17802  142A  0085               	movwf	5
 17803  142B  0800               	movf	0,w	;code access
 17804  142C  0624               	xorwf	??_lcd_disp_str,w
 17805  142D  1903               	btfsc	3,2
 17806  142E  2C37               	goto	l12661
 17807  142F  3001               	movlw	1
 17808  1430  00A4               	movwf	??_lcd_disp_str
 17809  1431  0824               	movf	??_lcd_disp_str,w
 17810  1432  07A6               	addwf	lcd_disp_str@index,f
 17811  1433  3028               	movlw	40
 17812  1434  0226               	subwf	lcd_disp_str@index,w
 17813  1435  1C03               	skipc
 17814  1436  2C1E               	goto	l12653
 17815  1437                     l12661:	
 17816                           
 17817                           ;lcd.c: 187: }
 17818                           ;lcd.c: 188: if(index<40)lcd_disp_code(LCDDigitalTable[index],loc);
 17819  1437  3028               	movlw	40
 17820  1438  0226               	subwf	lcd_disp_str@index,w
 17821  1439  1803               	skipnc
 17822  143A  2C4A               	goto	l12665
 17823  143B  0825               	movf	lcd_disp_str@loc,w
 17824  143C  00A4               	movwf	??_lcd_disp_str
 17825  143D  0824               	movf	??_lcd_disp_str,w
 17826  143E  00F5               	movwf	lcd_disp_code@loc
 17827  143F  0826               	movf	lcd_disp_str@index,w
 17828  1440  3EC1               	addlw	low (_LCDDigitalTable| (0+32768))
 17829  1441  0084               	movwf	4
 17830  1442  3082               	movlw	high (_LCDDigitalTable| (0+32768))
 17831  1443  1803               	skipnc
 17832  1444  3E01               	addlw	1
 17833  1445  0085               	movwf	5
 17834  1446  0800               	movf	0,w	;code access
 17835  1447  3191  2131  3194   	fcall	_lcd_disp_code
 17836  144A                     l12665:	
 17837                           
 17838                           ;lcd.c: 189: str++;
 17839  144A  3001               	movlw	1
 17840  144B  0020               	movlb	0	; select bank0
 17841  144C  07A2               	addwf	lcd_disp_str@str,f
 17842  144D  3000               	movlw	0
 17843  144E  3DA3               	addwfc	lcd_disp_str@str+1,f
 17844                           
 17845                           ;lcd.c: 190: loc++;
 17846  144F  3001               	movlw	1
 17847  1450  00A4               	movwf	??_lcd_disp_str
 17848  1451  0824               	movf	??_lcd_disp_str,w
 17849  1452  07A5               	addwf	lcd_disp_str@loc,f
 17850  1453  2C12               	goto	l12669
 17851  1454                     l12671:	
 17852                           
 17853                           ;lcd.c: 191: }
 17854                           ;lcd.c: 192: lcd_disp_refresh();
 17855  1454  319E  2628         	fcall	_lcd_disp_refresh
 17856  1456  0008               	return
 17857  1457                     __end_of_lcd_disp_str:	
 17858                           
 17859                           	psect	text55
 17860  1E28                     __ptext55:	
 17861 ;; *************** function _lcd_disp_refresh *****************
 17862 ;; Defined at:
 17863 ;;		line 202 in file "src/driver/lcd.c"
 17864 ;; Parameters:    Size  Location     Type
 17865 ;;		None
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;		None
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      void 
 17870 ;; Registers used:
 17871 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17879 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17880 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17881 ;;Total ram usage:        1 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    3
 17884 ;; This function calls:
 17885 ;;		_m_mem_cpy_len
 17886 ;; This function is called by:
 17887 ;;		_lcd_disp_str
 17888 ;;		_ui_disp_hello
 17889 ;;		_ui_disp_str_num_s
 17890 ;;		_ui_disp_str_dly
 17891 ;;		_ui_disp_set_line_reset
 17892 ;;		_ui_disp_small_flow_how_care
 17893 ;;		_ui_disp_modbus_id
 17894 ;;		_ui_disp_set_price
 17895 ;;		_ui_disp_set_transferMoneyLimit
 17896 ;;		_ui_disp_set_balanceWarning
 17897 ;;		_ui_disp_set_balanceOff
 17898 ;;		_ui_disp_menu
 17899 ;;		_ui_disp_rfid_err
 17900 ;; This function uses a non-reentrant model
 17901 ;;
 17902                           
 17903                           
 17904                           ;psect for function _lcd_disp_refresh
 17905  1E28                     _lcd_disp_refresh:	
 17906                           
 17907                           ;lcd.c: 204: m_mem_cpy_len(pLcdReg,pLCD,24);
 17908                           
 17909                           ;incstack = 0
 17910                           ; Regs used in _lcd_disp_refresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17911  1E28  0022               	movlb	2	; select bank2
 17912  1E29  086D               	movf	(_pLcdReg+1)^(0+256),w
 17913  1E2A  00F4               	movwf	m_mem_cpy_len@d+1
 17914  1E2B  086C               	movf	_pLcdReg^(0+256),w
 17915  1E2C  00F3               	movwf	m_mem_cpy_len@d
 17916  1E2D  30B2               	movlw	low _pLCD
 17917  1E2E  00F5               	movwf	m_mem_cpy_len@s
 17918  1E2F  3001               	movlw	high _pLCD
 17919  1E30  00F6               	movwf	m_mem_cpy_len@s+1
 17920  1E31  3018               	movlw	24
 17921  1E32  0020               	movlb	0	; select bank0
 17922  1E33  00A1               	movwf	??_lcd_disp_refresh
 17923  1E34  0821               	movf	??_lcd_disp_refresh,w
 17924  1E35  00F7               	movwf	m_mem_cpy_len@len
 17925  1E36  319F  2756         	fcall	_m_mem_cpy_len
 17926  1E38  0008               	return
 17927  1E39                     __end_of_lcd_disp_refresh:	
 17928                           
 17929                           	psect	text56
 17930  1131                     __ptext56:	
 17931 ;; *************** function _lcd_disp_code *****************
 17932 ;; Defined at:
 17933 ;;		line 157 in file "src/driver/lcd.c"
 17934 ;; Parameters:    Size  Location     Type
 17935 ;;  code            1    wreg     unsigned char 
 17936 ;;  loc             1    5[COMMON] unsigned char 
 17937 ;; Auto vars:     Size  Location     Type
 17938 ;;  code            1    6[COMMON] unsigned char 
 17939 ;; Return value:  Size  Location     Type
 17940 ;;                  1    wreg      void 
 17941 ;; Registers used:
 17942 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 17943 ;; Tracked objects:
 17944 ;;		On entry : 0/0
 17945 ;;		On exit  : 0/0
 17946 ;;		Unchanged: 0/0
 17947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17948 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17951 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17952 ;;Total ram usage:        2 bytes
 17953 ;; Hardware stack levels used:    1
 17954 ;; Hardware stack levels required when called:    3
 17955 ;; This function calls:
 17956 ;;		_lcd_disp_code_0
 17957 ;;		_lcd_disp_code_1
 17958 ;;		_lcd_disp_code_2
 17959 ;;		_lcd_disp_code_3
 17960 ;;		_lcd_disp_code_4
 17961 ;;		_lcd_disp_code_5
 17962 ;;		_lcd_disp_code_6
 17963 ;;		_lcd_disp_code_7
 17964 ;; This function is called by:
 17965 ;;		_lcd_disp_str
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           
 17970                           ;psect for function _lcd_disp_code
 17971  1131                     _lcd_disp_code:	
 17972                           
 17973                           ;incstack = 0
 17974                           ; Regs used in _lcd_disp_code: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 17975                           ;lcd_disp_code@code stored from wreg
 17976  1131  00F6               	movwf	lcd_disp_code@code
 17977                           
 17978                           ;lcd.c: 159: switch(loc){
 17979  1132  2953               	goto	l9023
 17980  1133                     l9005:	
 17981                           ;lcd.c: 160: case 0:lcd_disp_code_0(code);break;
 17982                           
 17983  1133  0876               	movf	lcd_disp_code@code,w
 17984  1134  3191  215E         	fcall	_lcd_disp_code_0
 17985  1136  0008               	return
 17986  1137                     l9007:	
 17987                           ;lcd.c: 161: case 1:lcd_disp_code_1(code);break;
 17988                           
 17989  1137  0876               	movf	lcd_disp_code@code,w
 17990  1138  3191  218C         	fcall	_lcd_disp_code_1
 17991  113A  0008               	return
 17992  113B                     l9009:	
 17993                           ;lcd.c: 162: case 2:lcd_disp_code_2(code);break;
 17994                           
 17995  113B  0876               	movf	lcd_disp_code@code,w
 17996  113C  3191  21BA         	fcall	_lcd_disp_code_2
 17997  113E  0008               	return
 17998  113F                     l9011:	
 17999                           ;lcd.c: 163: case 3:lcd_disp_code_3(code);break;
 18000                           
 18001  113F  0876               	movf	lcd_disp_code@code,w
 18002  1140  3191  21E8         	fcall	_lcd_disp_code_3
 18003  1142  0008               	return
 18004  1143                     l9013:	
 18005                           ;lcd.c: 164: case 4:lcd_disp_code_4(code);break;
 18006                           
 18007  1143  0876               	movf	lcd_disp_code@code,w
 18008  1144  3192  2216         	fcall	_lcd_disp_code_4
 18009  1146  0008               	return
 18010  1147                     l9015:	
 18011                           ;lcd.c: 165: case 5:lcd_disp_code_5(code);break;
 18012                           
 18013  1147  0876               	movf	lcd_disp_code@code,w
 18014  1148  3192  2244         	fcall	_lcd_disp_code_5
 18015  114A  0008               	return
 18016  114B                     l9017:	
 18017                           ;lcd.c: 166: case 6:lcd_disp_code_6(code);break;
 18018                           
 18019  114B  0876               	movf	lcd_disp_code@code,w
 18020  114C  3192  2272         	fcall	_lcd_disp_code_6
 18021  114E  0008               	return
 18022  114F                     l9019:	
 18023                           ;lcd.c: 167: case 7:lcd_disp_code_7(code);break;
 18024                           
 18025  114F  0876               	movf	lcd_disp_code@code,w
 18026  1150  3192  22A0         	fcall	_lcd_disp_code_7
 18027                           
 18028                           ;lcd.c: 169: }
 18029                           
 18030                           ;lcd.c: 168: default:break;
 18031  1152  0008               	return
 18032  1153                     l9023:	
 18033  1153  0875               	movf	lcd_disp_code@loc,w
 18034                           
 18035                           ; Switch size 1, requested type "space"
 18036                           ; Number of cases is 8, Range of values is 0 to 7
 18037                           ; switch strategies available:
 18038                           ; Name         Instructions Cycles
 18039                           ; direct_byte           22     6 (fixed)
 18040                           ; simple_byte           25    13 (average)
 18041                           ; jumptable            260     6 (fixed)
 18042                           ;	Chosen strategy is direct_byte
 18043  1154  0084               	movwf	4
 18044  1155  3008               	movlw	8
 18045  1156  0204               	subwf	4,w
 18046  1157  1803               	skipnc
 18047  1158  0008               	return
 18048  1159  3198               	movlp	high S13999
 18049  115A  3504               	lslf	4,w
 18050  115B  3E00               	addlw	low S13999
 18051  115C  0082               	movwf	2
 18052  115D  0008               	return
 18053  115E                     __end_of_lcd_disp_code:	
 18054                           
 18055                           	psect	swtext1
 18056  1800                     __pswtext1:	
 18057  1800                     S13999:	
 18058  1800  3191  2933         	ljmp	l9005
 18059  1802  3191  2937         	ljmp	l9007
 18060  1804  3191  293B         	ljmp	l9009
 18061  1806  3191  293F         	ljmp	l9011
 18062  1808  3191  2943         	ljmp	l9013
 18063  180A  3191  2947         	ljmp	l9015
 18064  180C  3191  294B         	ljmp	l9017
 18065  180E  3191  294F         	ljmp	l9019
 18066                           
 18067                           	psect	text57
 18068  12A0                     __ptext57:	
 18069 ;; *************** function _lcd_disp_code_7 *****************
 18070 ;; Defined at:
 18071 ;;		line 145 in file "src/driver/lcd.c"
 18072 ;; Parameters:    Size  Location     Type
 18073 ;;  code            1    wreg     unsigned char 
 18074 ;; Auto vars:     Size  Location     Type
 18075 ;;  code            1    4[COMMON] unsigned char 
 18076 ;; Return value:  Size  Location     Type
 18077 ;;                  1    wreg      void 
 18078 ;; Registers used:
 18079 ;;		wreg, status,2, status,0
 18080 ;; Tracked objects:
 18081 ;;		On entry : 0/0
 18082 ;;		On exit  : 0/0
 18083 ;;		Unchanged: 0/0
 18084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18088 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18089 ;;Total ram usage:        2 bytes
 18090 ;; Hardware stack levels used:    1
 18091 ;; Hardware stack levels required when called:    2
 18092 ;; This function calls:
 18093 ;;		Nothing
 18094 ;; This function is called by:
 18095 ;;		_lcd_disp_code
 18096 ;; This function uses a non-reentrant model
 18097 ;;
 18098                           
 18099                           
 18100                           ;psect for function _lcd_disp_code_7
 18101  12A0                     _lcd_disp_code_7:	
 18102                           
 18103                           ;incstack = 0
 18104                           ; Regs used in _lcd_disp_code_7: [wreg+status,2+status,0]
 18105                           ;lcd_disp_code_7@code stored from wreg
 18106  12A0  00F4               	movwf	lcd_disp_code_7@code
 18107                           
 18108                           ;lcd.c: 147: do{ pLCD[2] &= ~(1<<7); if(code&0x20){ pLCD[2] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18109  12A1  307F               	movlw	127
 18110  12A2  00F3               	movwf	??_lcd_disp_code_7
 18111  12A3  0873               	movf	??_lcd_disp_code_7,w
 18112  12A4  0023               	movlb	3	; select bank3
 18113  12A5  05B4               	andwf	(_pLCD^(0+384)+2),f
 18114  12A6  1AF4               	btfsc	lcd_disp_code_7@code,5
 18115  12A7  17B4               	bsf	(_pLCD^(0+384)+2),7
 18116                           
 18117                           ;lcd.c: 148: do{ pLCD[5] &= ~(1<<7); if(code&0x40){ pLCD[5] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18118  12A8  307F               	movlw	127
 18119  12A9  00F3               	movwf	??_lcd_disp_code_7
 18120  12AA  0873               	movf	??_lcd_disp_code_7,w
 18121  12AB  05B7               	andwf	(_pLCD^(0+384)+5),f
 18122  12AC  1B74               	btfsc	lcd_disp_code_7@code,6
 18123  12AD  17B7               	bsf	(_pLCD^(0+384)+5),7
 18124                           
 18125                           ;lcd.c: 149: do{ pLCD[8] &= ~(1<<7); if(code&0x10){ pLCD[8] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18126  12AE  307F               	movlw	127
 18127  12AF  00F3               	movwf	??_lcd_disp_code_7
 18128  12B0  0873               	movf	??_lcd_disp_code_7,w
 18129  12B1  05BA               	andwf	(_pLCD^(0+384)+8),f
 18130  12B2  1A74               	btfsc	lcd_disp_code_7@code,4
 18131  12B3  17BA               	bsf	(_pLCD^(0+384)+8),7
 18132                           
 18133                           ;lcd.c: 150: do{ pLCD[11] &= ~(1<<7); if(code&0x08){ pLCD[11] |= (1<<7); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18134  12B4  307F               	movlw	127
 18135  12B5  00F3               	movwf	??_lcd_disp_code_7
 18136  12B6  0873               	movf	??_lcd_disp_code_7,w
 18137  12B7  05BD               	andwf	(_pLCD^(0+384)+11),f
 18138  12B8  19F4               	btfsc	lcd_disp_code_7@code,3
 18139  12B9  17BD               	bsf	(_pLCD^(0+384)+11),7
 18140                           
 18141                           ;lcd.c: 152: do{ pLCD[2] &= ~(1<<6); if(code&0x01){ pLCD[2] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18142  12BA  30BF               	movlw	191
 18143  12BB  00F3               	movwf	??_lcd_disp_code_7
 18144  12BC  0873               	movf	??_lcd_disp_code_7,w
 18145  12BD  05B4               	andwf	(_pLCD^(0+384)+2),f
 18146  12BE  1874               	btfsc	lcd_disp_code_7@code,0
 18147  12BF  1734               	bsf	(_pLCD^(0+384)+2),6
 18148                           
 18149                           ;lcd.c: 153: do{ pLCD[5] &= ~(1<<6); if(code&0x02){ pLCD[5] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18150  12C0  30BF               	movlw	191
 18151  12C1  00F3               	movwf	??_lcd_disp_code_7
 18152  12C2  0873               	movf	??_lcd_disp_code_7,w
 18153  12C3  05B7               	andwf	(_pLCD^(0+384)+5),f
 18154  12C4  18F4               	btfsc	lcd_disp_code_7@code,1
 18155  12C5  1737               	bsf	(_pLCD^(0+384)+5),6
 18156                           
 18157                           ;lcd.c: 154: do{ pLCD[8] &= ~(1<<6); if(code&0x04){ pLCD[8] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18158  12C6  30BF               	movlw	191
 18159  12C7  00F3               	movwf	??_lcd_disp_code_7
 18160  12C8  0873               	movf	??_lcd_disp_code_7,w
 18161  12C9  05BA               	andwf	(_pLCD^(0+384)+8),f
 18162  12CA  1D74               	btfss	lcd_disp_code_7@code,2
 18163  12CB  0008               	return
 18164  12CC  173A               	bsf	(_pLCD^(0+384)+8),6
 18165  12CD  0008               	return
 18166  12CE                     __end_of_lcd_disp_code_7:	
 18167                           
 18168                           	psect	text58
 18169  1272                     __ptext58:	
 18170 ;; *************** function _lcd_disp_code_6 *****************
 18171 ;; Defined at:
 18172 ;;		line 133 in file "src/driver/lcd.c"
 18173 ;; Parameters:    Size  Location     Type
 18174 ;;  code            1    wreg     unsigned char 
 18175 ;; Auto vars:     Size  Location     Type
 18176 ;;  code            1    4[COMMON] unsigned char 
 18177 ;; Return value:  Size  Location     Type
 18178 ;;                  1    wreg      void 
 18179 ;; Registers used:
 18180 ;;		wreg, status,2, status,0
 18181 ;; Tracked objects:
 18182 ;;		On entry : 0/0
 18183 ;;		On exit  : 0/0
 18184 ;;		Unchanged: 0/0
 18185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18187 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18189 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18190 ;;Total ram usage:        2 bytes
 18191 ;; Hardware stack levels used:    1
 18192 ;; Hardware stack levels required when called:    2
 18193 ;; This function calls:
 18194 ;;		Nothing
 18195 ;; This function is called by:
 18196 ;;		_lcd_disp_code
 18197 ;; This function uses a non-reentrant model
 18198 ;;
 18199                           
 18200                           
 18201                           ;psect for function _lcd_disp_code_6
 18202  1272                     _lcd_disp_code_6:	
 18203                           
 18204                           ;incstack = 0
 18205                           ; Regs used in _lcd_disp_code_6: [wreg+status,2+status,0]
 18206                           ;lcd_disp_code_6@code stored from wreg
 18207  1272  00F4               	movwf	lcd_disp_code_6@code
 18208                           
 18209                           ;lcd.c: 135: do{ pLCD[12] &= ~(1<<1); if(code&0x20){ pLCD[12] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18210  1273  30FD               	movlw	253
 18211  1274  00F3               	movwf	??_lcd_disp_code_6
 18212  1275  0873               	movf	??_lcd_disp_code_6,w
 18213  1276  0023               	movlb	3	; select bank3
 18214  1277  05BE               	andwf	(_pLCD^(0+384)+12),f
 18215  1278  1AF4               	btfsc	lcd_disp_code_6@code,5
 18216  1279  14BE               	bsf	(_pLCD^(0+384)+12),1
 18217                           
 18218                           ;lcd.c: 136: do{ pLCD[15] &= ~(1<<1); if(code&0x40){ pLCD[15] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18219  127A  30FD               	movlw	253
 18220  127B  00F3               	movwf	??_lcd_disp_code_6
 18221  127C  0873               	movf	??_lcd_disp_code_6,w
 18222  127D  05C1               	andwf	(_pLCD^(0+384)+15),f
 18223  127E  1B74               	btfsc	lcd_disp_code_6@code,6
 18224  127F  14C1               	bsf	(_pLCD^(0+384)+15),1
 18225                           
 18226                           ;lcd.c: 137: do{ pLCD[18] &= ~(1<<1); if(code&0x10){ pLCD[18] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18227  1280  30FD               	movlw	253
 18228  1281  00F3               	movwf	??_lcd_disp_code_6
 18229  1282  0873               	movf	??_lcd_disp_code_6,w
 18230  1283  05C4               	andwf	(_pLCD^(0+384)+18),f
 18231  1284  1A74               	btfsc	lcd_disp_code_6@code,4
 18232  1285  14C4               	bsf	(_pLCD^(0+384)+18),1
 18233                           
 18234                           ;lcd.c: 138: do{ pLCD[21] &= ~(1<<1); if(code&0x08){ pLCD[21] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18235  1286  30FD               	movlw	253
 18236  1287  00F3               	movwf	??_lcd_disp_code_6
 18237  1288  0873               	movf	??_lcd_disp_code_6,w
 18238  1289  05C7               	andwf	(_pLCD^(0+384)+21),f
 18239  128A  19F4               	btfsc	lcd_disp_code_6@code,3
 18240  128B  14C7               	bsf	(_pLCD^(0+384)+21),1
 18241                           
 18242                           ;lcd.c: 140: do{ pLCD[12] &= ~(1<<0); if(code&0x01){ pLCD[12] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18243  128C  30FE               	movlw	254
 18244  128D  00F3               	movwf	??_lcd_disp_code_6
 18245  128E  0873               	movf	??_lcd_disp_code_6,w
 18246  128F  05BE               	andwf	(_pLCD^(0+384)+12),f
 18247  1290  1874               	btfsc	lcd_disp_code_6@code,0
 18248  1291  143E               	bsf	(_pLCD^(0+384)+12),0
 18249                           
 18250                           ;lcd.c: 141: do{ pLCD[15] &= ~(1<<0); if(code&0x02){ pLCD[15] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18251  1292  30FE               	movlw	254
 18252  1293  00F3               	movwf	??_lcd_disp_code_6
 18253  1294  0873               	movf	??_lcd_disp_code_6,w
 18254  1295  05C1               	andwf	(_pLCD^(0+384)+15),f
 18255  1296  18F4               	btfsc	lcd_disp_code_6@code,1
 18256  1297  1441               	bsf	(_pLCD^(0+384)+15),0
 18257                           
 18258                           ;lcd.c: 142: do{ pLCD[18] &= ~(1<<0); if(code&0x04){ pLCD[18] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18259  1298  30FE               	movlw	254
 18260  1299  00F3               	movwf	??_lcd_disp_code_6
 18261  129A  0873               	movf	??_lcd_disp_code_6,w
 18262  129B  05C4               	andwf	(_pLCD^(0+384)+18),f
 18263  129C  1D74               	btfss	lcd_disp_code_6@code,2
 18264  129D  0008               	return
 18265  129E  1444               	bsf	(_pLCD^(0+384)+18),0
 18266  129F  0008               	return
 18267  12A0                     __end_of_lcd_disp_code_6:	
 18268                           
 18269                           	psect	text59
 18270  1244                     __ptext59:	
 18271 ;; *************** function _lcd_disp_code_5 *****************
 18272 ;; Defined at:
 18273 ;;		line 121 in file "src/driver/lcd.c"
 18274 ;; Parameters:    Size  Location     Type
 18275 ;;  code            1    wreg     unsigned char 
 18276 ;; Auto vars:     Size  Location     Type
 18277 ;;  code            1    4[COMMON] unsigned char 
 18278 ;; Return value:  Size  Location     Type
 18279 ;;                  1    wreg      void 
 18280 ;; Registers used:
 18281 ;;		wreg, status,2, status,0
 18282 ;; Tracked objects:
 18283 ;;		On entry : 0/0
 18284 ;;		On exit  : 0/0
 18285 ;;		Unchanged: 0/0
 18286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18291 ;;Total ram usage:        2 bytes
 18292 ;; Hardware stack levels used:    1
 18293 ;; Hardware stack levels required when called:    2
 18294 ;; This function calls:
 18295 ;;		Nothing
 18296 ;; This function is called by:
 18297 ;;		_lcd_disp_code
 18298 ;; This function uses a non-reentrant model
 18299 ;;
 18300                           
 18301                           
 18302                           ;psect for function _lcd_disp_code_5
 18303  1244                     _lcd_disp_code_5:	
 18304                           
 18305                           ;incstack = 0
 18306                           ; Regs used in _lcd_disp_code_5: [wreg+status,2+status,0]
 18307                           ;lcd_disp_code_5@code stored from wreg
 18308  1244  00F4               	movwf	lcd_disp_code_5@code
 18309                           
 18310                           ;lcd.c: 123: do{ pLCD[14] &= ~(1<<5); if(code&0x20){ pLCD[14] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18311  1245  30DF               	movlw	223
 18312  1246  00F3               	movwf	??_lcd_disp_code_5
 18313  1247  0873               	movf	??_lcd_disp_code_5,w
 18314  1248  0023               	movlb	3	; select bank3
 18315  1249  05C0               	andwf	(_pLCD^(0+384)+14),f
 18316  124A  1AF4               	btfsc	lcd_disp_code_5@code,5
 18317  124B  16C0               	bsf	(_pLCD^(0+384)+14),5
 18318                           
 18319                           ;lcd.c: 124: do{ pLCD[17] &= ~(1<<5); if(code&0x40){ pLCD[17] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18320  124C  30DF               	movlw	223
 18321  124D  00F3               	movwf	??_lcd_disp_code_5
 18322  124E  0873               	movf	??_lcd_disp_code_5,w
 18323  124F  05C3               	andwf	(_pLCD^(0+384)+17),f
 18324  1250  1B74               	btfsc	lcd_disp_code_5@code,6
 18325  1251  16C3               	bsf	(_pLCD^(0+384)+17),5
 18326                           
 18327                           ;lcd.c: 125: do{ pLCD[20] &= ~(1<<5); if(code&0x10){ pLCD[20] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18328  1252  30DF               	movlw	223
 18329  1253  00F3               	movwf	??_lcd_disp_code_5
 18330  1254  0873               	movf	??_lcd_disp_code_5,w
 18331  1255  05C6               	andwf	(_pLCD^(0+384)+20),f
 18332  1256  1A74               	btfsc	lcd_disp_code_5@code,4
 18333  1257  16C6               	bsf	(_pLCD^(0+384)+20),5
 18334                           
 18335                           ;lcd.c: 126: do{ pLCD[23] &= ~(1<<5); if(code&0x08){ pLCD[23] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18336  1258  30DF               	movlw	223
 18337  1259  00F3               	movwf	??_lcd_disp_code_5
 18338  125A  0873               	movf	??_lcd_disp_code_5,w
 18339  125B  05C9               	andwf	(_pLCD^(0+384)+23),f
 18340  125C  19F4               	btfsc	lcd_disp_code_5@code,3
 18341  125D  16C9               	bsf	(_pLCD^(0+384)+23),5
 18342                           
 18343                           ;lcd.c: 128: do{ pLCD[12] &= ~(1<<2); if(code&0x01){ pLCD[12] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18344  125E  30FB               	movlw	251
 18345  125F  00F3               	movwf	??_lcd_disp_code_5
 18346  1260  0873               	movf	??_lcd_disp_code_5,w
 18347  1261  05BE               	andwf	(_pLCD^(0+384)+12),f
 18348  1262  1874               	btfsc	lcd_disp_code_5@code,0
 18349  1263  153E               	bsf	(_pLCD^(0+384)+12),2
 18350                           
 18351                           ;lcd.c: 129: do{ pLCD[15] &= ~(1<<2); if(code&0x02){ pLCD[15] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18352  1264  30FB               	movlw	251
 18353  1265  00F3               	movwf	??_lcd_disp_code_5
 18354  1266  0873               	movf	??_lcd_disp_code_5,w
 18355  1267  05C1               	andwf	(_pLCD^(0+384)+15),f
 18356  1268  18F4               	btfsc	lcd_disp_code_5@code,1
 18357  1269  1541               	bsf	(_pLCD^(0+384)+15),2
 18358                           
 18359                           ;lcd.c: 130: do{ pLCD[18] &= ~(1<<2); if(code&0x04){ pLCD[18] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18360  126A  30FB               	movlw	251
 18361  126B  00F3               	movwf	??_lcd_disp_code_5
 18362  126C  0873               	movf	??_lcd_disp_code_5,w
 18363  126D  05C4               	andwf	(_pLCD^(0+384)+18),f
 18364  126E  1D74               	btfss	lcd_disp_code_5@code,2
 18365  126F  0008               	return
 18366  1270  1544               	bsf	(_pLCD^(0+384)+18),2
 18367  1271  0008               	return
 18368  1272                     __end_of_lcd_disp_code_5:	
 18369                           
 18370                           	psect	text60
 18371  1216                     __ptext60:	
 18372 ;; *************** function _lcd_disp_code_4 *****************
 18373 ;; Defined at:
 18374 ;;		line 109 in file "src/driver/lcd.c"
 18375 ;; Parameters:    Size  Location     Type
 18376 ;;  code            1    wreg     unsigned char 
 18377 ;; Auto vars:     Size  Location     Type
 18378 ;;  code            1    4[COMMON] unsigned char 
 18379 ;; Return value:  Size  Location     Type
 18380 ;;                  1    wreg      void 
 18381 ;; Registers used:
 18382 ;;		wreg, status,2, status,0
 18383 ;; Tracked objects:
 18384 ;;		On entry : 0/0
 18385 ;;		On exit  : 0/0
 18386 ;;		Unchanged: 0/0
 18387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18390 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18391 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18392 ;;Total ram usage:        2 bytes
 18393 ;; Hardware stack levels used:    1
 18394 ;; Hardware stack levels required when called:    2
 18395 ;; This function calls:
 18396 ;;		Nothing
 18397 ;; This function is called by:
 18398 ;;		_lcd_disp_code
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           
 18403                           ;psect for function _lcd_disp_code_4
 18404  1216                     _lcd_disp_code_4:	
 18405                           
 18406                           ;incstack = 0
 18407                           ; Regs used in _lcd_disp_code_4: [wreg+status,2+status,0]
 18408                           ;lcd_disp_code_4@code stored from wreg
 18409  1216  00F4               	movwf	lcd_disp_code_4@code
 18410                           
 18411                           ;lcd.c: 111: do{ pLCD[14] &= ~(1<<3); if(code&0x20){ pLCD[14] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18412  1217  30F7               	movlw	247
 18413  1218  00F3               	movwf	??_lcd_disp_code_4
 18414  1219  0873               	movf	??_lcd_disp_code_4,w
 18415  121A  0023               	movlb	3	; select bank3
 18416  121B  05C0               	andwf	(_pLCD^(0+384)+14),f
 18417  121C  1AF4               	btfsc	lcd_disp_code_4@code,5
 18418  121D  15C0               	bsf	(_pLCD^(0+384)+14),3
 18419                           
 18420                           ;lcd.c: 112: do{ pLCD[17] &= ~(1<<3); if(code&0x40){ pLCD[17] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18421  121E  30F7               	movlw	247
 18422  121F  00F3               	movwf	??_lcd_disp_code_4
 18423  1220  0873               	movf	??_lcd_disp_code_4,w
 18424  1221  05C3               	andwf	(_pLCD^(0+384)+17),f
 18425  1222  1B74               	btfsc	lcd_disp_code_4@code,6
 18426  1223  15C3               	bsf	(_pLCD^(0+384)+17),3
 18427                           
 18428                           ;lcd.c: 113: do{ pLCD[20] &= ~(1<<3); if(code&0x10){ pLCD[20] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18429  1224  30F7               	movlw	247
 18430  1225  00F3               	movwf	??_lcd_disp_code_4
 18431  1226  0873               	movf	??_lcd_disp_code_4,w
 18432  1227  05C6               	andwf	(_pLCD^(0+384)+20),f
 18433  1228  1A74               	btfsc	lcd_disp_code_4@code,4
 18434  1229  15C6               	bsf	(_pLCD^(0+384)+20),3
 18435                           
 18436                           ;lcd.c: 114: do{ pLCD[23] &= ~(1<<3); if(code&0x08){ pLCD[23] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18437  122A  30F7               	movlw	247
 18438  122B  00F3               	movwf	??_lcd_disp_code_4
 18439  122C  0873               	movf	??_lcd_disp_code_4,w
 18440  122D  05C9               	andwf	(_pLCD^(0+384)+23),f
 18441  122E  19F4               	btfsc	lcd_disp_code_4@code,3
 18442  122F  15C9               	bsf	(_pLCD^(0+384)+23),3
 18443                           
 18444                           ;lcd.c: 116: do{ pLCD[14] &= ~(1<<4); if(code&0x01){ pLCD[14] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18445  1230  30EF               	movlw	239
 18446  1231  00F3               	movwf	??_lcd_disp_code_4
 18447  1232  0873               	movf	??_lcd_disp_code_4,w
 18448  1233  05C0               	andwf	(_pLCD^(0+384)+14),f
 18449  1234  1874               	btfsc	lcd_disp_code_4@code,0
 18450  1235  1640               	bsf	(_pLCD^(0+384)+14),4
 18451                           
 18452                           ;lcd.c: 117: do{ pLCD[17] &= ~(1<<4); if(code&0x02){ pLCD[17] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18453  1236  30EF               	movlw	239
 18454  1237  00F3               	movwf	??_lcd_disp_code_4
 18455  1238  0873               	movf	??_lcd_disp_code_4,w
 18456  1239  05C3               	andwf	(_pLCD^(0+384)+17),f
 18457  123A  18F4               	btfsc	lcd_disp_code_4@code,1
 18458  123B  1643               	bsf	(_pLCD^(0+384)+17),4
 18459                           
 18460                           ;lcd.c: 118: do{ pLCD[20] &= ~(1<<4); if(code&0x04){ pLCD[20] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18461  123C  30EF               	movlw	239
 18462  123D  00F3               	movwf	??_lcd_disp_code_4
 18463  123E  0873               	movf	??_lcd_disp_code_4,w
 18464  123F  05C6               	andwf	(_pLCD^(0+384)+20),f
 18465  1240  1D74               	btfss	lcd_disp_code_4@code,2
 18466  1241  0008               	return
 18467  1242  1646               	bsf	(_pLCD^(0+384)+20),4
 18468  1243  0008               	return
 18469  1244                     __end_of_lcd_disp_code_4:	
 18470                           
 18471                           	psect	text61
 18472  11E8                     __ptext61:	
 18473 ;; *************** function _lcd_disp_code_3 *****************
 18474 ;; Defined at:
 18475 ;;		line 97 in file "src/driver/lcd.c"
 18476 ;; Parameters:    Size  Location     Type
 18477 ;;  code            1    wreg     unsigned char 
 18478 ;; Auto vars:     Size  Location     Type
 18479 ;;  code            1    4[COMMON] unsigned char 
 18480 ;; Return value:  Size  Location     Type
 18481 ;;                  1    wreg      void 
 18482 ;; Registers used:
 18483 ;;		wreg, status,2, status,0
 18484 ;; Tracked objects:
 18485 ;;		On entry : 0/0
 18486 ;;		On exit  : 0/0
 18487 ;;		Unchanged: 0/0
 18488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18490 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18491 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18492 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18493 ;;Total ram usage:        2 bytes
 18494 ;; Hardware stack levels used:    1
 18495 ;; Hardware stack levels required when called:    2
 18496 ;; This function calls:
 18497 ;;		Nothing
 18498 ;; This function is called by:
 18499 ;;		_lcd_disp_code
 18500 ;; This function uses a non-reentrant model
 18501 ;;
 18502                           
 18503                           
 18504                           ;psect for function _lcd_disp_code_3
 18505  11E8                     _lcd_disp_code_3:	
 18506                           
 18507                           ;incstack = 0
 18508                           ; Regs used in _lcd_disp_code_3: [wreg+status,2+status,0]
 18509                           ;lcd_disp_code_3@code stored from wreg
 18510  11E8  00F4               	movwf	lcd_disp_code_3@code
 18511                           
 18512                           ;lcd.c: 99: do{ pLCD[2] &= ~(1<<4); if(code&0x20){ pLCD[2] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18513  11E9  30EF               	movlw	239
 18514  11EA  00F3               	movwf	??_lcd_disp_code_3
 18515  11EB  0873               	movf	??_lcd_disp_code_3,w
 18516  11EC  0023               	movlb	3	; select bank3
 18517  11ED  05B4               	andwf	(_pLCD^(0+384)+2),f
 18518  11EE  1AF4               	btfsc	lcd_disp_code_3@code,5
 18519  11EF  1634               	bsf	(_pLCD^(0+384)+2),4
 18520                           
 18521                           ;lcd.c: 100: do{ pLCD[5] &= ~(1<<4); if(code&0x40){ pLCD[5] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18522  11F0  30EF               	movlw	239
 18523  11F1  00F3               	movwf	??_lcd_disp_code_3
 18524  11F2  0873               	movf	??_lcd_disp_code_3,w
 18525  11F3  05B7               	andwf	(_pLCD^(0+384)+5),f
 18526  11F4  1B74               	btfsc	lcd_disp_code_3@code,6
 18527  11F5  1637               	bsf	(_pLCD^(0+384)+5),4
 18528                           
 18529                           ;lcd.c: 101: do{ pLCD[8] &= ~(1<<4); if(code&0x10){ pLCD[8] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18530  11F6  30EF               	movlw	239
 18531  11F7  00F3               	movwf	??_lcd_disp_code_3
 18532  11F8  0873               	movf	??_lcd_disp_code_3,w
 18533  11F9  05BA               	andwf	(_pLCD^(0+384)+8),f
 18534  11FA  1A74               	btfsc	lcd_disp_code_3@code,4
 18535  11FB  163A               	bsf	(_pLCD^(0+384)+8),4
 18536                           
 18537                           ;lcd.c: 102: do{ pLCD[11] &= ~(1<<4); if(code&0x08){ pLCD[11] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 18538  11FC  30EF               	movlw	239
 18539  11FD  00F3               	movwf	??_lcd_disp_code_3
 18540  11FE  0873               	movf	??_lcd_disp_code_3,w
 18541  11FF  05BD               	andwf	(_pLCD^(0+384)+11),f
 18542  1200  19F4               	btfsc	lcd_disp_code_3@code,3
 18543  1201  163D               	bsf	(_pLCD^(0+384)+11),4
 18544                           
 18545                           ;lcd.c: 104: do{ pLCD[2] &= ~(1<<5); if(code&0x01){ pLCD[2] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18546  1202  30DF               	movlw	223
 18547  1203  00F3               	movwf	??_lcd_disp_code_3
 18548  1204  0873               	movf	??_lcd_disp_code_3,w
 18549  1205  05B4               	andwf	(_pLCD^(0+384)+2),f
 18550  1206  1874               	btfsc	lcd_disp_code_3@code,0
 18551  1207  16B4               	bsf	(_pLCD^(0+384)+2),5
 18552                           
 18553                           ;lcd.c: 105: do{ pLCD[5] &= ~(1<<5); if(code&0x02){ pLCD[5] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18554  1208  30DF               	movlw	223
 18555  1209  00F3               	movwf	??_lcd_disp_code_3
 18556  120A  0873               	movf	??_lcd_disp_code_3,w
 18557  120B  05B7               	andwf	(_pLCD^(0+384)+5),f
 18558  120C  18F4               	btfsc	lcd_disp_code_3@code,1
 18559  120D  16B7               	bsf	(_pLCD^(0+384)+5),5
 18560                           
 18561                           ;lcd.c: 106: do{ pLCD[8] &= ~(1<<5); if(code&0x04){ pLCD[8] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 18562  120E  30DF               	movlw	223
 18563  120F  00F3               	movwf	??_lcd_disp_code_3
 18564  1210  0873               	movf	??_lcd_disp_code_3,w
 18565  1211  05BA               	andwf	(_pLCD^(0+384)+8),f
 18566  1212  1D74               	btfss	lcd_disp_code_3@code,2
 18567  1213  0008               	return
 18568  1214  16BA               	bsf	(_pLCD^(0+384)+8),5
 18569  1215  0008               	return
 18570  1216                     __end_of_lcd_disp_code_3:	
 18571                           
 18572                           	psect	text62
 18573  11BA                     __ptext62:	
 18574 ;; *************** function _lcd_disp_code_2 *****************
 18575 ;; Defined at:
 18576 ;;		line 85 in file "src/driver/lcd.c"
 18577 ;; Parameters:    Size  Location     Type
 18578 ;;  code            1    wreg     unsigned char 
 18579 ;; Auto vars:     Size  Location     Type
 18580 ;;  code            1    4[COMMON] unsigned char 
 18581 ;; Return value:  Size  Location     Type
 18582 ;;                  1    wreg      void 
 18583 ;; Registers used:
 18584 ;;		wreg, status,2, status,0
 18585 ;; Tracked objects:
 18586 ;;		On entry : 0/0
 18587 ;;		On exit  : 0/0
 18588 ;;		Unchanged: 0/0
 18589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18591 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18592 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18593 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18594 ;;Total ram usage:        2 bytes
 18595 ;; Hardware stack levels used:    1
 18596 ;; Hardware stack levels required when called:    2
 18597 ;; This function calls:
 18598 ;;		Nothing
 18599 ;; This function is called by:
 18600 ;;		_lcd_disp_code
 18601 ;; This function uses a non-reentrant model
 18602 ;;
 18603                           
 18604                           
 18605                           ;psect for function _lcd_disp_code_2
 18606  11BA                     _lcd_disp_code_2:	
 18607                           
 18608                           ;incstack = 0
 18609                           ; Regs used in _lcd_disp_code_2: [wreg+status,2+status,0]
 18610                           ;lcd_disp_code_2@code stored from wreg
 18611  11BA  00F4               	movwf	lcd_disp_code_2@code
 18612                           
 18613                           ;lcd.c: 87: do{ pLCD[0] &= ~(1<<3); if(code&0x20){ pLCD[0] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18614  11BB  30F7               	movlw	247
 18615  11BC  00F3               	movwf	??_lcd_disp_code_2
 18616  11BD  0873               	movf	??_lcd_disp_code_2,w
 18617  11BE  0023               	movlb	3	; select bank3
 18618  11BF  05B2               	andwf	_pLCD^(0+384),f
 18619  11C0  1AF4               	btfsc	lcd_disp_code_2@code,5
 18620  11C1  15B2               	bsf	_pLCD^(0+384),3
 18621                           
 18622                           ;lcd.c: 88: do{ pLCD[3] &= ~(1<<3); if(code&0x40){ pLCD[3] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18623  11C2  30F7               	movlw	247
 18624  11C3  00F3               	movwf	??_lcd_disp_code_2
 18625  11C4  0873               	movf	??_lcd_disp_code_2,w
 18626  11C5  05B5               	andwf	(_pLCD^(0+384)+3),f
 18627  11C6  1B74               	btfsc	lcd_disp_code_2@code,6
 18628  11C7  15B5               	bsf	(_pLCD^(0+384)+3),3
 18629                           
 18630                           ;lcd.c: 89: do{ pLCD[6] &= ~(1<<3); if(code&0x10){ pLCD[6] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18631  11C8  30F7               	movlw	247
 18632  11C9  00F3               	movwf	??_lcd_disp_code_2
 18633  11CA  0873               	movf	??_lcd_disp_code_2,w
 18634  11CB  05B8               	andwf	(_pLCD^(0+384)+6),f
 18635  11CC  1A74               	btfsc	lcd_disp_code_2@code,4
 18636  11CD  15B8               	bsf	(_pLCD^(0+384)+6),3
 18637                           
 18638                           ;lcd.c: 90: do{ pLCD[9] &= ~(1<<3); if(code&0x08){ pLCD[9] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18639  11CE  30F7               	movlw	247
 18640  11CF  00F3               	movwf	??_lcd_disp_code_2
 18641  11D0  0873               	movf	??_lcd_disp_code_2,w
 18642  11D1  05BB               	andwf	(_pLCD^(0+384)+9),f
 18643  11D2  19F4               	btfsc	lcd_disp_code_2@code,3
 18644  11D3  15BB               	bsf	(_pLCD^(0+384)+9),3
 18645                           
 18646                           ;lcd.c: 92: do{ pLCD[0] &= ~(1<<4); if(code&0x01){ pLCD[0] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18647  11D4  30EF               	movlw	239
 18648  11D5  00F3               	movwf	??_lcd_disp_code_2
 18649  11D6  0873               	movf	??_lcd_disp_code_2,w
 18650  11D7  05B2               	andwf	_pLCD^(0+384),f
 18651  11D8  1874               	btfsc	lcd_disp_code_2@code,0
 18652  11D9  1632               	bsf	_pLCD^(0+384),4
 18653                           
 18654                           ;lcd.c: 93: do{ pLCD[3] &= ~(1<<4); if(code&0x02){ pLCD[3] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18655  11DA  30EF               	movlw	239
 18656  11DB  00F3               	movwf	??_lcd_disp_code_2
 18657  11DC  0873               	movf	??_lcd_disp_code_2,w
 18658  11DD  05B5               	andwf	(_pLCD^(0+384)+3),f
 18659  11DE  18F4               	btfsc	lcd_disp_code_2@code,1
 18660  11DF  1635               	bsf	(_pLCD^(0+384)+3),4
 18661                           
 18662                           ;lcd.c: 94: do{ pLCD[6] &= ~(1<<4); if(code&0x04){ pLCD[6] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18663  11E0  30EF               	movlw	239
 18664  11E1  00F3               	movwf	??_lcd_disp_code_2
 18665  11E2  0873               	movf	??_lcd_disp_code_2,w
 18666  11E3  05B8               	andwf	(_pLCD^(0+384)+6),f
 18667  11E4  1D74               	btfss	lcd_disp_code_2@code,2
 18668  11E5  0008               	return
 18669  11E6  1638               	bsf	(_pLCD^(0+384)+6),4
 18670  11E7  0008               	return
 18671  11E8                     __end_of_lcd_disp_code_2:	
 18672                           
 18673                           	psect	text63
 18674  118C                     __ptext63:	
 18675 ;; *************** function _lcd_disp_code_1 *****************
 18676 ;; Defined at:
 18677 ;;		line 73 in file "src/driver/lcd.c"
 18678 ;; Parameters:    Size  Location     Type
 18679 ;;  code            1    wreg     unsigned char 
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;  code            1    4[COMMON] unsigned char 
 18682 ;; Return value:  Size  Location     Type
 18683 ;;                  1    wreg      void 
 18684 ;; Registers used:
 18685 ;;		wreg, status,2, status,0
 18686 ;; Tracked objects:
 18687 ;;		On entry : 0/0
 18688 ;;		On exit  : 0/0
 18689 ;;		Unchanged: 0/0
 18690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18695 ;;Total ram usage:        2 bytes
 18696 ;; Hardware stack levels used:    1
 18697 ;; Hardware stack levels required when called:    2
 18698 ;; This function calls:
 18699 ;;		Nothing
 18700 ;; This function is called by:
 18701 ;;		_lcd_disp_code
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           
 18706                           ;psect for function _lcd_disp_code_1
 18707  118C                     _lcd_disp_code_1:	
 18708                           
 18709                           ;incstack = 0
 18710                           ; Regs used in _lcd_disp_code_1: [wreg+status,2+status,0]
 18711                           ;lcd_disp_code_1@code stored from wreg
 18712  118C  00F4               	movwf	lcd_disp_code_1@code
 18713                           
 18714                           ;lcd.c: 75: do{ pLCD[0] &= ~(1<<1); if(code&0x20){ pLCD[0] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18715  118D  30FD               	movlw	253
 18716  118E  00F3               	movwf	??_lcd_disp_code_1
 18717  118F  0873               	movf	??_lcd_disp_code_1,w
 18718  1190  0023               	movlb	3	; select bank3
 18719  1191  05B2               	andwf	_pLCD^(0+384),f
 18720  1192  1AF4               	btfsc	lcd_disp_code_1@code,5
 18721  1193  14B2               	bsf	_pLCD^(0+384),1
 18722                           
 18723                           ;lcd.c: 76: do{ pLCD[3] &= ~(1<<1); if(code&0x40){ pLCD[3] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18724  1194  30FD               	movlw	253
 18725  1195  00F3               	movwf	??_lcd_disp_code_1
 18726  1196  0873               	movf	??_lcd_disp_code_1,w
 18727  1197  05B5               	andwf	(_pLCD^(0+384)+3),f
 18728  1198  1B74               	btfsc	lcd_disp_code_1@code,6
 18729  1199  14B5               	bsf	(_pLCD^(0+384)+3),1
 18730                           
 18731                           ;lcd.c: 77: do{ pLCD[6] &= ~(1<<1); if(code&0x10){ pLCD[6] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18732  119A  30FD               	movlw	253
 18733  119B  00F3               	movwf	??_lcd_disp_code_1
 18734  119C  0873               	movf	??_lcd_disp_code_1,w
 18735  119D  05B8               	andwf	(_pLCD^(0+384)+6),f
 18736  119E  1A74               	btfsc	lcd_disp_code_1@code,4
 18737  119F  14B8               	bsf	(_pLCD^(0+384)+6),1
 18738                           
 18739                           ;lcd.c: 78: do{ pLCD[9] &= ~(1<<1); if(code&0x08){ pLCD[9] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18740  11A0  30FD               	movlw	253
 18741  11A1  00F3               	movwf	??_lcd_disp_code_1
 18742  11A2  0873               	movf	??_lcd_disp_code_1,w
 18743  11A3  05BB               	andwf	(_pLCD^(0+384)+9),f
 18744  11A4  19F4               	btfsc	lcd_disp_code_1@code,3
 18745  11A5  14BB               	bsf	(_pLCD^(0+384)+9),1
 18746                           
 18747                           ;lcd.c: 80: do{ pLCD[0] &= ~(1<<2); if(code&0x01){ pLCD[0] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18748  11A6  30FB               	movlw	251
 18749  11A7  00F3               	movwf	??_lcd_disp_code_1
 18750  11A8  0873               	movf	??_lcd_disp_code_1,w
 18751  11A9  05B2               	andwf	_pLCD^(0+384),f
 18752  11AA  1874               	btfsc	lcd_disp_code_1@code,0
 18753  11AB  1532               	bsf	_pLCD^(0+384),2
 18754                           
 18755                           ;lcd.c: 81: do{ pLCD[3] &= ~(1<<2); if(code&0x02){ pLCD[3] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18756  11AC  30FB               	movlw	251
 18757  11AD  00F3               	movwf	??_lcd_disp_code_1
 18758  11AE  0873               	movf	??_lcd_disp_code_1,w
 18759  11AF  05B5               	andwf	(_pLCD^(0+384)+3),f
 18760  11B0  18F4               	btfsc	lcd_disp_code_1@code,1
 18761  11B1  1535               	bsf	(_pLCD^(0+384)+3),2
 18762                           
 18763                           ;lcd.c: 82: do{ pLCD[6] &= ~(1<<2); if(code&0x04){ pLCD[6] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18764  11B2  30FB               	movlw	251
 18765  11B3  00F3               	movwf	??_lcd_disp_code_1
 18766  11B4  0873               	movf	??_lcd_disp_code_1,w
 18767  11B5  05B8               	andwf	(_pLCD^(0+384)+6),f
 18768  11B6  1D74               	btfss	lcd_disp_code_1@code,2
 18769  11B7  0008               	return
 18770  11B8  1538               	bsf	(_pLCD^(0+384)+6),2
 18771  11B9  0008               	return
 18772  11BA                     __end_of_lcd_disp_code_1:	
 18773                           
 18774                           	psect	text64
 18775  115E                     __ptext64:	
 18776 ;; *************** function _lcd_disp_code_0 *****************
 18777 ;; Defined at:
 18778 ;;		line 61 in file "src/driver/lcd.c"
 18779 ;; Parameters:    Size  Location     Type
 18780 ;;  code            1    wreg     unsigned char 
 18781 ;; Auto vars:     Size  Location     Type
 18782 ;;  code            1    4[COMMON] unsigned char 
 18783 ;; Return value:  Size  Location     Type
 18784 ;;                  1    wreg      void 
 18785 ;; Registers used:
 18786 ;;		wreg, status,2, status,0
 18787 ;; Tracked objects:
 18788 ;;		On entry : 0/0
 18789 ;;		On exit  : 0/0
 18790 ;;		Unchanged: 0/0
 18791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18793 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18794 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18795 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18796 ;;Total ram usage:        2 bytes
 18797 ;; Hardware stack levels used:    1
 18798 ;; Hardware stack levels required when called:    2
 18799 ;; This function calls:
 18800 ;;		Nothing
 18801 ;; This function is called by:
 18802 ;;		_lcd_disp_code
 18803 ;; This function uses a non-reentrant model
 18804 ;;
 18805                           
 18806                           
 18807                           ;psect for function _lcd_disp_code_0
 18808  115E                     _lcd_disp_code_0:	
 18809                           
 18810                           ;incstack = 0
 18811                           ; Regs used in _lcd_disp_code_0: [wreg+status,2+status,0]
 18812                           ;lcd_disp_code_0@code stored from wreg
 18813  115E  00F4               	movwf	lcd_disp_code_0@code
 18814                           
 18815                           ;lcd.c: 63: do{ pLCD[12] &= ~(1<<7); if(code&0x20){ pLCD[12] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 18816  115F  307F               	movlw	127
 18817  1160  00F3               	movwf	??_lcd_disp_code_0
 18818  1161  0873               	movf	??_lcd_disp_code_0,w
 18819  1162  0023               	movlb	3	; select bank3
 18820  1163  05BE               	andwf	(_pLCD^(0+384)+12),f
 18821  1164  1AF4               	btfsc	lcd_disp_code_0@code,5
 18822  1165  17BE               	bsf	(_pLCD^(0+384)+12),7
 18823                           
 18824                           ;lcd.c: 64: do{ pLCD[15] &= ~(1<<7); if(code&0x40){ pLCD[15] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 18825  1166  307F               	movlw	127
 18826  1167  00F3               	movwf	??_lcd_disp_code_0
 18827  1168  0873               	movf	??_lcd_disp_code_0,w
 18828  1169  05C1               	andwf	(_pLCD^(0+384)+15),f
 18829  116A  1B74               	btfsc	lcd_disp_code_0@code,6
 18830  116B  17C1               	bsf	(_pLCD^(0+384)+15),7
 18831                           
 18832                           ;lcd.c: 65: do{ pLCD[18] &= ~(1<<7); if(code&0x10){ pLCD[18] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 18833  116C  307F               	movlw	127
 18834  116D  00F3               	movwf	??_lcd_disp_code_0
 18835  116E  0873               	movf	??_lcd_disp_code_0,w
 18836  116F  05C4               	andwf	(_pLCD^(0+384)+18),f
 18837  1170  1A74               	btfsc	lcd_disp_code_0@code,4
 18838  1171  17C4               	bsf	(_pLCD^(0+384)+18),7
 18839                           
 18840                           ;lcd.c: 66: do{ pLCD[21] &= ~(1<<7); if(code&0x08){ pLCD[21] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 18841  1172  307F               	movlw	127
 18842  1173  00F3               	movwf	??_lcd_disp_code_0
 18843  1174  0873               	movf	??_lcd_disp_code_0,w
 18844  1175  05C7               	andwf	(_pLCD^(0+384)+21),f
 18845  1176  19F4               	btfsc	lcd_disp_code_0@code,3
 18846  1177  17C7               	bsf	(_pLCD^(0+384)+21),7
 18847                           
 18848                           ;lcd.c: 68: do{ pLCD[0] &= ~(1<<0); if(code&0x01){ pLCD[0] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18849  1178  30FE               	movlw	254
 18850  1179  00F3               	movwf	??_lcd_disp_code_0
 18851  117A  0873               	movf	??_lcd_disp_code_0,w
 18852  117B  05B2               	andwf	_pLCD^(0+384),f
 18853  117C  1874               	btfsc	lcd_disp_code_0@code,0
 18854  117D  1432               	bsf	_pLCD^(0+384),0
 18855                           
 18856                           ;lcd.c: 69: do{ pLCD[3] &= ~(1<<0); if(code&0x02){ pLCD[3] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18857  117E  30FE               	movlw	254
 18858  117F  00F3               	movwf	??_lcd_disp_code_0
 18859  1180  0873               	movf	??_lcd_disp_code_0,w
 18860  1181  05B5               	andwf	(_pLCD^(0+384)+3),f
 18861  1182  18F4               	btfsc	lcd_disp_code_0@code,1
 18862  1183  1435               	bsf	(_pLCD^(0+384)+3),0
 18863                           
 18864                           ;lcd.c: 70: do{ pLCD[6] &= ~(1<<0); if(code&0x04){ pLCD[6] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 18865  1184  30FE               	movlw	254
 18866  1185  00F3               	movwf	??_lcd_disp_code_0
 18867  1186  0873               	movf	??_lcd_disp_code_0,w
 18868  1187  05B8               	andwf	(_pLCD^(0+384)+6),f
 18869  1188  1D74               	btfss	lcd_disp_code_0@code,2
 18870  1189  0008               	return
 18871  118A  1438               	bsf	(_pLCD^(0+384)+6),0
 18872  118B  0008               	return
 18873  118C                     __end_of_lcd_disp_code_0:	
 18874                           
 18875                           	psect	text65
 18876  0937                     __ptext65:	
 18877 ;; *************** function _data_api_system_data_init *****************
 18878 ;; Defined at:
 18879 ;;		line 163 in file "src/app/appdata.c"
 18880 ;; Parameters:    Size  Location     Type
 18881 ;;		None
 18882 ;; Auto vars:     Size  Location     Type
 18883 ;;  sta             1   23[BANK0 ] unsigned char 
 18884 ;; Return value:  Size  Location     Type
 18885 ;;                  1    wreg      unsigned char 
 18886 ;; Registers used:
 18887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18888 ;; Tracked objects:
 18889 ;;		On entry : 0/0
 18890 ;;		On exit  : 0/0
 18891 ;;		Unchanged: 0/0
 18892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18895 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18896 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18897 ;;Total ram usage:        2 bytes
 18898 ;; Hardware stack levels used:    1
 18899 ;; Hardware stack levels required when called:    5
 18900 ;; This function calls:
 18901 ;;		_crc_append
 18902 ;;		_crc_verify
 18903 ;;		_data_api_read_eeprom
 18904 ;;		_data_api_system_data_get
 18905 ;;		_data_api_write_eeprom
 18906 ;;		_m_flash_copy
 18907 ;;		_m_flash_erase
 18908 ;;		_m_mem_cpy_len
 18909 ;; This function is called by:
 18910 ;;		_main
 18911 ;; This function uses a non-reentrant model
 18912 ;;
 18913                           
 18914                           
 18915                           ;psect for function _data_api_system_data_init
 18916  0937                     _data_api_system_data_init:	
 18917                           
 18918                           ;appdata.c: 164: uint8_t sta = 0;
 18919                           
 18920                           ;incstack = 0
 18921                           ; Regs used in _data_api_system_data_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18922  0937  0020               	movlb	0	; select bank0
 18923  0938  01B7               	clrf	data_api_system_data_init@sta
 18924                           
 18925                           ;appdata.c: 166: sta=crc_verify((uint8_t*)(&mainSystemData),sizeof (st_SystemData));
 18926  0939  3000               	movlw	0
 18927  093A  00AB               	movwf	crc_verify@message
 18928  093B  30BF               	movlw	191
 18929  093C  00AC               	movwf	crc_verify@message+1
 18930  093D  3048               	movlw	72
 18931  093E  00AD               	movwf	crc_verify@n
 18932  093F  3000               	movlw	0
 18933  0940  00AE               	movwf	crc_verify@n+1
 18934  0941  3193  2396  3189   	fcall	_crc_verify
 18935  0944  0020               	movlb	0	; select bank0
 18936  0945  00B6               	movwf	??_data_api_system_data_init
 18937  0946  0836               	movf	??_data_api_system_data_init,w
 18938  0947  00B7               	movwf	data_api_system_data_init@sta
 18939                           
 18940                           ;appdata.c: 167: if (!sta){
 18941  0948  0837               	movf	data_api_system_data_init@sta,w
 18942  0949  1D03               	btfss	3,2
 18943  094A  29BE               	goto	l13255
 18944                           
 18945                           ;appdata.c: 168: data_api_read_eeprom(comBuffer,0x00,sizeof (st_SystemData));
 18946  094B  3070               	movlw	112
 18947  094C  00F4               	movwf	data_api_read_eeprom@buf
 18948  094D  3023               	movlw	35
 18949  094E  00F5               	movwf	data_api_read_eeprom@buf+1
 18950  094F  01F6               	clrf	data_api_read_eeprom@addr
 18951  0950  3048               	movlw	72
 18952  0951  00B6               	movwf	??_data_api_system_data_init
 18953  0952  0836               	movf	??_data_api_system_data_init,w
 18954  0953  00F7               	movwf	data_api_read_eeprom@len
 18955  0954  3187  27E1  3189   	fcall	_data_api_read_eeprom
 18956                           
 18957                           ;appdata.c: 169: sta=crc_verify(comBuffer,sizeof (st_SystemData));
 18958  0957  3070               	movlw	112
 18959  0958  0020               	movlb	0	; select bank0
 18960  0959  00AB               	movwf	crc_verify@message
 18961  095A  3023               	movlw	35
 18962  095B  00AC               	movwf	crc_verify@message+1
 18963  095C  3048               	movlw	72
 18964  095D  00AD               	movwf	crc_verify@n
 18965  095E  3000               	movlw	0
 18966  095F  00AE               	movwf	crc_verify@n+1
 18967  0960  3193  2396  3189   	fcall	_crc_verify
 18968  0963  0020               	movlb	0	; select bank0
 18969  0964  00B6               	movwf	??_data_api_system_data_init
 18970  0965  0836               	movf	??_data_api_system_data_init,w
 18971  0966  00B7               	movwf	data_api_system_data_init@sta
 18972                           
 18973                           ;appdata.c: 171: if(!sta){
 18974  0967  0837               	movf	data_api_system_data_init@sta,w
 18975  0968  1D03               	btfss	3,2
 18976  0969  2992               	goto	l13249
 18977                           
 18978                           ;appdata.c: 172: m_mem_cpy_len(comBuffer,(uint8_t*)(&bkupSystemData),sizeof (st_SystemDa
      +                          ta)-2);
 18979  096A  3070               	movlw	112
 18980  096B  00F3               	movwf	m_mem_cpy_len@d
 18981  096C  3023               	movlw	35
 18982  096D  00F4               	movwf	m_mem_cpy_len@d+1
 18983  096E  3080               	movlw	128
 18984  096F  00F5               	movwf	m_mem_cpy_len@s
 18985  0970  30BE               	movlw	190
 18986  0971  00F6               	movwf	m_mem_cpy_len@s+1
 18987  0972  3046               	movlw	70
 18988  0973  00B6               	movwf	??_data_api_system_data_init
 18989  0974  0836               	movf	??_data_api_system_data_init,w
 18990  0975  00F7               	movwf	m_mem_cpy_len@len
 18991  0976  319F  2756  3189   	fcall	_m_mem_cpy_len
 18992                           
 18993                           ;appdata.c: 173: crc_append(comBuffer,sizeof (st_SystemData)-2);
 18994  0979  3070               	movlw	112
 18995  097A  0020               	movlb	0	; select bank0
 18996  097B  00AB               	movwf	crc_append@message
 18997  097C  3023               	movlw	35
 18998  097D  00AC               	movwf	crc_append@message+1
 18999  097E  3046               	movlw	70
 19000  097F  00AD               	movwf	crc_append@n
 19001  0980  3000               	movlw	0
 19002  0981  00AE               	movwf	crc_append@n+1
 19003  0982  3192  22CE  3189   	fcall	_crc_append
 19004                           
 19005                           ;appdata.c: 174: data_api_write_eeprom(comBuffer,0x00,sizeof(st_SystemData));
 19006  0985  3070               	movlw	112
 19007  0986  0020               	movlb	0	; select bank0
 19008  0987  00A0               	movwf	data_api_write_eeprom@buf
 19009  0988  3023               	movlw	35
 19010  0989  00A1               	movwf	data_api_write_eeprom@buf+1
 19011  098A  01A2               	clrf	data_api_write_eeprom@addr
 19012  098B  3048               	movlw	72
 19013  098C  00B6               	movwf	??_data_api_system_data_init
 19014  098D  0836               	movf	??_data_api_system_data_init,w
 19015  098E  00A3               	movwf	data_api_write_eeprom@len
 19016  098F  3190  2030  3189   	fcall	_data_api_write_eeprom
 19017  0992                     l13249:	
 19018                           
 19019                           ;appdata.c: 175: }
 19020                           ;appdata.c: 176: m_flash_erase((0x4000-0x100), sizeof (st_SystemData));
 19021  0992  3000               	movlw	0
 19022  0993  0020               	movlb	0	; select bank0
 19023  0994  00A0               	movwf	m_flash_erase@addr
 19024  0995  303F               	movlw	63
 19025  0996  00A1               	movwf	m_flash_erase@addr+1
 19026  0997  3048               	movlw	72
 19027  0998  00B6               	movwf	??_data_api_system_data_init
 19028  0999  0836               	movf	??_data_api_system_data_init,w
 19029  099A  00A2               	movwf	m_flash_erase@len
 19030  099B  319F  273C  3189   	fcall	_m_flash_erase
 19031                           
 19032                           ;appdata.c: 177: m_flash_copy((0x4000-0x100),comBuffer, sizeof (st_SystemData));
 19033  099E  3000               	movlw	0
 19034  099F  0020               	movlb	0	; select bank0
 19035  09A0  00AA               	movwf	m_flash_copy@addr
 19036  09A1  303F               	movlw	63
 19037  09A2  00AB               	movwf	m_flash_copy@addr+1
 19038  09A3  3070               	movlw	112
 19039  09A4  00AC               	movwf	m_flash_copy@buf
 19040  09A5  3023               	movlw	35
 19041  09A6  00AD               	movwf	m_flash_copy@buf+1
 19042  09A7  3048               	movlw	72
 19043  09A8  00B6               	movwf	??_data_api_system_data_init
 19044  09A9  0836               	movf	??_data_api_system_data_init,w
 19045  09AA  00AE               	movwf	m_flash_copy@len
 19046  09AB  3197  2789  3189   	fcall	_m_flash_copy
 19047                           
 19048                           ;appdata.c: 178: sta=crc_verify((uint8_t*)(&mainSystemData),sizeof (st_SystemData));
 19049  09AE  3000               	movlw	0
 19050  09AF  0020               	movlb	0	; select bank0
 19051  09B0  00AB               	movwf	crc_verify@message
 19052  09B1  30BF               	movlw	191
 19053  09B2  00AC               	movwf	crc_verify@message+1
 19054  09B3  3048               	movlw	72
 19055  09B4  00AD               	movwf	crc_verify@n
 19056  09B5  3000               	movlw	0
 19057  09B6  00AE               	movwf	crc_verify@n+1
 19058  09B7  3193  2396  3189   	fcall	_crc_verify
 19059  09BA  0020               	movlb	0	; select bank0
 19060  09BB  00B6               	movwf	??_data_api_system_data_init
 19061  09BC  0836               	movf	??_data_api_system_data_init,w
 19062  09BD  00B7               	movwf	data_api_system_data_init@sta
 19063  09BE                     l13255:	
 19064                           
 19065                           ;appdata.c: 179: }
 19066                           ;appdata.c: 181: data_api_system_data_get();
 19067  09BE  319D  2586         	fcall	_data_api_system_data_get
 19068  09C0  0008               	return
 19069  09C1                     __end_of_data_api_system_data_init:	
 19070                           ;appdata.c: 182: return sta;
 19071                           ;	Return value of _data_api_system_data_init is never used
 19072                           
 19073                           
 19074                           	psect	text66
 19075  1D86                     __ptext66:	
 19076 ;; *************** function _data_api_system_data_get *****************
 19077 ;; Defined at:
 19078 ;;		line 112 in file "src/app/appdata.c"
 19079 ;; Parameters:    Size  Location     Type
 19080 ;;		None
 19081 ;; Auto vars:     Size  Location     Type
 19082 ;;		None
 19083 ;; Return value:  Size  Location     Type
 19084 ;;                  1    wreg      void 
 19085 ;; Registers used:
 19086 ;;		wreg, fsr0l, fsr0h, pclath
 19087 ;; Tracked objects:
 19088 ;;		On entry : 0/0
 19089 ;;		On exit  : 0/0
 19090 ;;		Unchanged: 0/0
 19091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19094 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19095 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19096 ;;Total ram usage:        1 bytes
 19097 ;; Hardware stack levels used:    1
 19098 ;; Hardware stack levels required when called:    2
 19099 ;; This function calls:
 19100 ;;		Nothing
 19101 ;; This function is called by:
 19102 ;;		_data_api_system_data_init
 19103 ;;		_data_api_rt_data_save
 19104 ;; This function uses a non-reentrant model
 19105 ;;
 19106                           
 19107                           
 19108                           ;psect for function _data_api_system_data_get
 19109  1D86                     _data_api_system_data_get:	
 19110                           
 19111                           ;appdata.c: 113: deviceStatus.byte=mainSystemData.status.byte;
 19112                           
 19113                           ;incstack = 0
 19114                           ; Regs used in _data_api_system_data_get: [wreg-fsr0h+pclath]
 19115  1D86  303E               	movlw	62
 19116  1D87  0084               	movwf	4
 19117  1D88  30BF               	movlw	191
 19118  1D89  0085               	movwf	5
 19119  1D8A  0800               	movf	0,w	;code access
 19120  1D8B  00F3               	movwf	??_data_api_system_data_get
 19121  1D8C  0873               	movf	??_data_api_system_data_get,w
 19122  1D8D  0021               	movlb	1	; select bank1
 19123  1D8E  00E3               	movwf	_deviceStatus^(0+128)
 19124  1D8F  0008               	return
 19125  1D90                     __end_of_data_api_system_data_get:	
 19126                           
 19127                           	psect	text67
 19128  09C1                     __ptext67:	
 19129 ;; *************** function _data_api_calibration_table_data_init *****************
 19130 ;; Defined at:
 19131 ;;		line 141 in file "src/app/appdata.c"
 19132 ;; Parameters:    Size  Location     Type
 19133 ;;		None
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;  stp             2   29[BANK0 ] PTR struct .
 19136 ;;		 -> comBuffer(128), 
 19137 ;;  i               1   31[BANK0 ] unsigned char 
 19138 ;;  sta             1   28[BANK0 ] unsigned char 
 19139 ;; Return value:  Size  Location     Type
 19140 ;;                  1    wreg      unsigned char 
 19141 ;; Registers used:
 19142 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19143 ;; Tracked objects:
 19144 ;;		On entry : 0/0
 19145 ;;		On exit  : 0/0
 19146 ;;		Unchanged: 0/0
 19147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19149 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 19150 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 19151 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 19152 ;;Total ram usage:       10 bytes
 19153 ;; Hardware stack levels used:    1
 19154 ;; Hardware stack levels required when called:    5
 19155 ;; This function calls:
 19156 ;;		___wmul
 19157 ;;		_crc_append
 19158 ;;		_crc_verify
 19159 ;;		_data_api_read_eeprom
 19160 ;;		_data_api_write_eeprom
 19161 ;;		_m_flash_copy
 19162 ;;		_m_flash_erase
 19163 ;; This function is called by:
 19164 ;;		_main
 19165 ;; This function uses a non-reentrant model
 19166 ;;
 19167                           
 19168                           
 19169                           ;psect for function _data_api_calibration_table_data_init
 19170  09C1                     _data_api_calibration_table_data_init:	
 19171                           
 19172                           ;appdata.c: 142: uint8_t i,sta;
 19173                           ;appdata.c: 143: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 19174                           
 19175                           ;incstack = 0
 19176                           ; Regs used in _data_api_calibration_table_data_init: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 19177  09C1  3070               	movlw	112
 19178  09C2  0020               	movlb	0	; select bank0
 19179  09C3  00BD               	movwf	data_api_calibration_table_data_init@stp
 19180  09C4  3023               	movlw	35
 19181  09C5  00BE               	movwf	data_api_calibration_table_data_init@stp+1
 19182                           
 19183                           ;appdata.c: 144: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable),sizeof (st_flowCa
      +                          librationTable));
 19184  09C6  3080               	movlw	128
 19185  09C7  00AB               	movwf	crc_verify@message
 19186  09C8  30BF               	movlw	191
 19187  09C9  00AC               	movwf	crc_verify@message+1
 19188  09CA  307C               	movlw	124
 19189  09CB  00AD               	movwf	crc_verify@n
 19190  09CC  3000               	movlw	0
 19191  09CD  00AE               	movwf	crc_verify@n+1
 19192  09CE  3193  2396  3189   	fcall	_crc_verify
 19193  09D1  0020               	movlb	0	; select bank0
 19194  09D2  00B6               	movwf	??_data_api_calibration_table_data_init
 19195  09D3  0836               	movf	??_data_api_calibration_table_data_init,w
 19196  09D4  00BC               	movwf	data_api_calibration_table_data_init@sta
 19197                           
 19198                           ;appdata.c: 145: if(!sta){
 19199  09D5  083C               	movf	data_api_calibration_table_data_init@sta,w
 19200  09D6  1D03               	btfss	3,2
 19201  09D7  0008               	return
 19202                           
 19203                           ;appdata.c: 146: data_api_read_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 19204  09D8  3070               	movlw	112
 19205  09D9  00F4               	movwf	data_api_read_eeprom@buf
 19206  09DA  3023               	movlw	35
 19207  09DB  00F5               	movwf	data_api_read_eeprom@buf+1
 19208  09DC  3080               	movlw	128
 19209  09DD  00B6               	movwf	??_data_api_calibration_table_data_init
 19210  09DE  0836               	movf	??_data_api_calibration_table_data_init,w
 19211  09DF  00F6               	movwf	data_api_read_eeprom@addr
 19212  09E0  307C               	movlw	124
 19213  09E1  00B7               	movwf	??_data_api_calibration_table_data_init+1
 19214  09E2  0837               	movf	??_data_api_calibration_table_data_init+1,w
 19215  09E3  00F7               	movwf	data_api_read_eeprom@len
 19216  09E4  3187  27E1  3189   	fcall	_data_api_read_eeprom
 19217                           
 19218                           ;appdata.c: 147: sta=crc_verify(comBuffer,sizeof (st_flowCalibrationTable));
 19219  09E7  3070               	movlw	112
 19220  09E8  0020               	movlb	0	; select bank0
 19221  09E9  00AB               	movwf	crc_verify@message
 19222  09EA  3023               	movlw	35
 19223  09EB  00AC               	movwf	crc_verify@message+1
 19224  09EC  307C               	movlw	124
 19225  09ED  00AD               	movwf	crc_verify@n
 19226  09EE  3000               	movlw	0
 19227  09EF  00AE               	movwf	crc_verify@n+1
 19228  09F0  3193  2396  3189   	fcall	_crc_verify
 19229  09F3  0020               	movlb	0	; select bank0
 19230  09F4  00B6               	movwf	??_data_api_calibration_table_data_init
 19231  09F5  0836               	movf	??_data_api_calibration_table_data_init,w
 19232  09F6  00BC               	movwf	data_api_calibration_table_data_init@sta
 19233                           
 19234                           ;appdata.c: 148: if(!sta){
 19235  09F7  083C               	movf	data_api_calibration_table_data_init@sta,w
 19236  09F8  1D03               	btfss	3,2
 19237  09F9  2A89               	goto	l13225
 19238                           
 19239                           ;appdata.c: 149: for(i=0;i<30;i++){
 19240  09FA  01BF               	clrf	data_api_calibration_table_data_init@i
 19241  09FB  301E               	movlw	30
 19242  09FC  023F               	subwf	data_api_calibration_table_data_init@i,w
 19243  09FD  1803               	btfsc	3,0
 19244  09FE  2A4C               	goto	l13219
 19245  09FF                     l13213:	
 19246                           
 19247                           ;appdata.c: 150: stp->flowCalibrationArr[i].adcValue=2000*(i+1);
 19248  09FF  083F               	movf	data_api_calibration_table_data_init@i,w
 19249  0A00  3E01               	addlw	1
 19250  0A01  00F3               	movwf	___wmul@multiplier
 19251  0A02  3000               	movlw	0
 19252  0A03  1803               	skipnc
 19253  0A04  3001               	movlw	1
 19254  0A05  00F4               	movwf	___wmul@multiplier+1
 19255  0A06  30D0               	movlw	208
 19256  0A07  00F5               	movwf	___wmul@multiplicand
 19257  0A08  3007               	movlw	7
 19258  0A09  00F6               	movwf	___wmul@multiplicand+1
 19259  0A0A  3190  2012  3189   	fcall	___wmul
 19260  0A0D  0020               	movlb	0	; select bank0
 19261  0A0E  083F               	movf	data_api_calibration_table_data_init@i,w
 19262  0A0F  00B6               	movwf	??_data_api_calibration_table_data_init
 19263  0A10  01B7               	clrf	??_data_api_calibration_table_data_init+1
 19264  0A11  35B6               	lslf	??_data_api_calibration_table_data_init,f
 19265  0A12  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 19266  0A13  35B6               	lslf	??_data_api_calibration_table_data_init,f
 19267  0A14  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 19268  0A15  0836               	movf	??_data_api_calibration_table_data_init,w
 19269  0A16  073D               	addwf	data_api_calibration_table_data_init@stp,w
 19270  0A17  0086               	movwf	6
 19271  0A18  0837               	movf	??_data_api_calibration_table_data_init+1,w
 19272  0A19  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 19273  0A1A  0087               	movwf	7
 19274  0A1B  0873               	movf	?___wmul,w
 19275  0A1C  3FC0               	movwi [0]fsr1
 19276  0A1D  0874               	movf	?___wmul+1,w
 19277  0A1E  3FC1               	movwi [1]fsr1
 19278                           
 19279                           ;appdata.c: 151: stp->flowCalibrationArr[i].rtflowValue=100*i;
 19280  0A1F  083F               	movf	data_api_calibration_table_data_init@i,w
 19281  0A20  00B6               	movwf	??_data_api_calibration_table_data_init
 19282  0A21  01B7               	clrf	??_data_api_calibration_table_data_init+1
 19283  0A22  0836               	movf	??_data_api_calibration_table_data_init,w
 19284  0A23  00F3               	movwf	___wmul@multiplier
 19285  0A24  0837               	movf	??_data_api_calibration_table_data_init+1,w
 19286  0A25  00F4               	movwf	___wmul@multiplier+1
 19287  0A26  3064               	movlw	100
 19288  0A27  00F5               	movwf	___wmul@multiplicand
 19289  0A28  3000               	movlw	0
 19290  0A29  00F6               	movwf	___wmul@multiplicand+1
 19291  0A2A  3190  2012  3189   	fcall	___wmul
 19292  0A2D  0020               	movlb	0	; select bank0
 19293  0A2E  083F               	movf	data_api_calibration_table_data_init@i,w
 19294  0A2F  00B8               	movwf	??_data_api_calibration_table_data_init+2
 19295  0A30  01B9               	clrf	??_data_api_calibration_table_data_init+3
 19296  0A31  35B8               	lslf	??_data_api_calibration_table_data_init+2,f
 19297  0A32  0DB9               	rlf	??_data_api_calibration_table_data_init+3,f
 19298  0A33  35B8               	lslf	??_data_api_calibration_table_data_init+2,f
 19299  0A34  0DB9               	rlf	??_data_api_calibration_table_data_init+3,f
 19300  0A35  0838               	movf	??_data_api_calibration_table_data_init+2,w
 19301  0A36  073D               	addwf	data_api_calibration_table_data_init@stp,w
 19302  0A37  00BA               	movwf	??_data_api_calibration_table_data_init+4
 19303  0A38  0839               	movf	??_data_api_calibration_table_data_init+3,w
 19304  0A39  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 19305  0A3A  00BB               	movwf	??_data_api_calibration_table_data_init+5
 19306  0A3B  083A               	movf	??_data_api_calibration_table_data_init+4,w
 19307  0A3C  0086               	movwf	6
 19308  0A3D  083B               	movf	??_data_api_calibration_table_data_init+5,w
 19309  0A3E  0087               	movwf	7
 19310  0A3F  3142               	addfsr 1,2
 19311  0A40  0873               	movf	?___wmul,w
 19312  0A41  3FC0               	movwi [0]fsr1
 19313  0A42  0874               	movf	?___wmul+1,w
 19314  0A43  3FC1               	movwi [1]fsr1
 19315  0A44  3001               	movlw	1
 19316  0A45  00B6               	movwf	??_data_api_calibration_table_data_init
 19317  0A46  0836               	movf	??_data_api_calibration_table_data_init,w
 19318  0A47  07BF               	addwf	data_api_calibration_table_data_init@i,f
 19319  0A48  301E               	movlw	30
 19320  0A49  023F               	subwf	data_api_calibration_table_data_init@i,w
 19321  0A4A  1C03               	skipc
 19322  0A4B  29FF               	goto	l13213
 19323  0A4C                     l13219:	
 19324                           
 19325                           ;appdata.c: 152: }
 19326                           ;appdata.c: 153: stp->maxFlow=stp->flowCalibrationArr[i-1].rtflowValue;
 19327  0A4C  083F               	movf	data_api_calibration_table_data_init@i,w
 19328  0A4D  00B6               	movwf	??_data_api_calibration_table_data_init
 19329  0A4E  01B7               	clrf	??_data_api_calibration_table_data_init+1
 19330  0A4F  35B6               	lslf	??_data_api_calibration_table_data_init,f
 19331  0A50  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 19332  0A51  35B6               	lslf	??_data_api_calibration_table_data_init,f
 19333  0A52  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 19334  0A53  0836               	movf	??_data_api_calibration_table_data_init,w
 19335  0A54  3EFC               	addlw	252
 19336  0A55  00B8               	movwf	??_data_api_calibration_table_data_init+2
 19337  0A56  30FF               	movlw	255
 19338  0A57  3D37               	addwfc	??_data_api_calibration_table_data_init+1,w
 19339  0A58  00B9               	movwf	??_data_api_calibration_table_data_init+3
 19340  0A59  0838               	movf	??_data_api_calibration_table_data_init+2,w
 19341  0A5A  073D               	addwf	data_api_calibration_table_data_init@stp,w
 19342  0A5B  00BA               	movwf	??_data_api_calibration_table_data_init+4
 19343  0A5C  0839               	movf	??_data_api_calibration_table_data_init+3,w
 19344  0A5D  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 19345  0A5E  00BB               	movwf	??_data_api_calibration_table_data_init+5
 19346  0A5F  083A               	movf	??_data_api_calibration_table_data_init+4,w
 19347  0A60  0086               	movwf	6
 19348  0A61  083B               	movf	??_data_api_calibration_table_data_init+5,w
 19349  0A62  0087               	movwf	7
 19350  0A63  3142               	addfsr 1,2
 19351  0A64  083D               	movf	data_api_calibration_table_data_init@stp,w
 19352  0A65  3E78               	addlw	120
 19353  0A66  0084               	movwf	4
 19354  0A67  3000               	movlw	0
 19355  0A68  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 19356  0A69  0085               	movwf	5
 19357  0A6A  3F40               	moviw [0]fsr1
 19358  0A6B  3F80               	movwi [0]fsr0
 19359  0A6C  3F41               	moviw [1]fsr1
 19360  0A6D  3F81               	movwi [1]fsr0
 19361                           
 19362                           ;appdata.c: 154: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 19363  0A6E  3070               	movlw	112
 19364  0A6F  00AB               	movwf	crc_append@message
 19365  0A70  3023               	movlw	35
 19366  0A71  00AC               	movwf	crc_append@message+1
 19367  0A72  307A               	movlw	122
 19368  0A73  00AD               	movwf	crc_append@n
 19369  0A74  3000               	movlw	0
 19370  0A75  00AE               	movwf	crc_append@n+1
 19371  0A76  3192  22CE  3189   	fcall	_crc_append
 19372                           
 19373                           ;appdata.c: 155: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 19374  0A79  3070               	movlw	112
 19375  0A7A  0020               	movlb	0	; select bank0
 19376  0A7B  00A0               	movwf	data_api_write_eeprom@buf
 19377  0A7C  3023               	movlw	35
 19378  0A7D  00A1               	movwf	data_api_write_eeprom@buf+1
 19379  0A7E  3080               	movlw	128
 19380  0A7F  00B6               	movwf	??_data_api_calibration_table_data_init
 19381  0A80  0836               	movf	??_data_api_calibration_table_data_init,w
 19382  0A81  00A2               	movwf	data_api_write_eeprom@addr
 19383  0A82  307C               	movlw	124
 19384  0A83  00B7               	movwf	??_data_api_calibration_table_data_init+1
 19385  0A84  0837               	movf	??_data_api_calibration_table_data_init+1,w
 19386  0A85  00A3               	movwf	data_api_write_eeprom@len
 19387  0A86  3190  2030  3189   	fcall	_data_api_write_eeprom
 19388  0A89                     l13225:	
 19389                           
 19390                           ;appdata.c: 156: }
 19391                           ;appdata.c: 157: m_flash_erase((0x4000-0x80), sizeof (st_SystemData));
 19392  0A89  3080               	movlw	128
 19393  0A8A  0020               	movlb	0	; select bank0
 19394  0A8B  00A0               	movwf	m_flash_erase@addr
 19395  0A8C  303F               	movlw	63
 19396  0A8D  00A1               	movwf	m_flash_erase@addr+1
 19397  0A8E  3048               	movlw	72
 19398  0A8F  00B6               	movwf	??_data_api_calibration_table_data_init
 19399  0A90  0836               	movf	??_data_api_calibration_table_data_init,w
 19400  0A91  00A2               	movwf	m_flash_erase@len
 19401  0A92  319F  273C  3189   	fcall	_m_flash_erase
 19402                           
 19403                           ;appdata.c: 158: m_flash_copy((0x4000-0x80),comBuffer,sizeof(st_flowCalibrationTable));
 19404  0A95  3080               	movlw	128
 19405  0A96  0020               	movlb	0	; select bank0
 19406  0A97  00AA               	movwf	m_flash_copy@addr
 19407  0A98  303F               	movlw	63
 19408  0A99  00AB               	movwf	m_flash_copy@addr+1
 19409  0A9A  3070               	movlw	112
 19410  0A9B  00AC               	movwf	m_flash_copy@buf
 19411  0A9C  3023               	movlw	35
 19412  0A9D  00AD               	movwf	m_flash_copy@buf+1
 19413  0A9E  307C               	movlw	124
 19414  0A9F  00B6               	movwf	??_data_api_calibration_table_data_init
 19415  0AA0  0836               	movf	??_data_api_calibration_table_data_init,w
 19416  0AA1  00AE               	movwf	m_flash_copy@len
 19417  0AA2  3197  2789  3189   	fcall	_m_flash_copy
 19418                           
 19419                           ;appdata.c: 159: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowC
      +                          alibrationTable) );
 19420  0AA5  3080               	movlw	128
 19421  0AA6  0020               	movlb	0	; select bank0
 19422  0AA7  00AB               	movwf	crc_verify@message
 19423  0AA8  30BF               	movlw	191
 19424  0AA9  00AC               	movwf	crc_verify@message+1
 19425  0AAA  307C               	movlw	124
 19426  0AAB  00AD               	movwf	crc_verify@n
 19427  0AAC  3000               	movlw	0
 19428  0AAD  00AE               	movwf	crc_verify@n+1
 19429  0AAE  3193  2396         	fcall	_crc_verify
 19430  0AB0  0020               	movlb	0	; select bank0
 19431  0AB1  00B6               	movwf	??_data_api_calibration_table_data_init
 19432  0AB2  0836               	movf	??_data_api_calibration_table_data_init,w
 19433  0AB3  00BC               	movwf	data_api_calibration_table_data_init@sta
 19434  0AB4  0008               	return
 19435  0AB5                     __end_of_data_api_calibration_table_data_init:	
 19436                           ;appdata.c: 160: }
 19437                           ;appdata.c: 161: return sta;
 19438                           ;	Return value of _data_api_calibration_table_data_init is never used
 19439                           
 19440                           
 19441                           	psect	text68
 19442  1F3C                     __ptext68:	
 19443 ;; *************** function _m_flash_erase *****************
 19444 ;; Defined at:
 19445 ;;		line 74 in file "src/app/appdata.c"
 19446 ;; Parameters:    Size  Location     Type
 19447 ;;  addr            2    0[BANK0 ] unsigned int 
 19448 ;;  len             1    2[BANK0 ] unsigned char 
 19449 ;; Auto vars:     Size  Location     Type
 19450 ;;		None
 19451 ;; Return value:  Size  Location     Type
 19452 ;;                  1    wreg      unsigned char 
 19453 ;; Registers used:
 19454 ;;		wreg, status,2, status,0, pclath, cstack
 19455 ;; Tracked objects:
 19456 ;;		On entry : 0/0
 19457 ;;		On exit  : 0/0
 19458 ;;		Unchanged: 0/0
 19459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19460 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19464 ;;Total ram usage:        3 bytes
 19465 ;; Hardware stack levels used:    1
 19466 ;; Hardware stack levels required when called:    3
 19467 ;; This function calls:
 19468 ;;		_FLASH_EraseBlock
 19469 ;; This function is called by:
 19470 ;;		_data_api_calibration_table_data_init
 19471 ;;		_data_api_system_data_init
 19472 ;; This function uses a non-reentrant model
 19473 ;;
 19474                           
 19475                           
 19476                           ;psect for function _m_flash_erase
 19477  1F3C                     _m_flash_erase:	
 19478  1F3C                     l12103:	
 19479                           ;appdata.c: 75: while (len) {
 19480                           
 19481                           ;incstack = 0
 19482                           ; Regs used in _m_flash_erase: [wreg+status,2+status,0+pclath+cstack]
 19483                           
 19484  1F3C  0020               	movlb	0	; select bank0
 19485  1F3D  0822               	movf	m_flash_erase@len,w
 19486  1F3E  1903               	btfsc	3,2
 19487  1F3F  0008               	return
 19488                           
 19489                           ;appdata.c: 76: FLASH_EraseBlock(addr);
 19490  1F40  0020               	movlb	0	; select bank0
 19491  1F41  0821               	movf	m_flash_erase@addr+1,w
 19492  1F42  00F4               	movwf	FLASH_EraseBlock@startAddr+1
 19493  1F43  0820               	movf	m_flash_erase@addr,w
 19494  1F44  00F3               	movwf	FLASH_EraseBlock@startAddr
 19495  1F45  319F  27A9  319F   	fcall	_FLASH_EraseBlock
 19496                           
 19497                           ;appdata.c: 77: addr += 32;
 19498  1F48  3020               	movlw	32
 19499  1F49  0020               	movlb	0	; select bank0
 19500  1F4A  07A0               	addwf	m_flash_erase@addr,f
 19501  1F4B  3000               	movlw	0
 19502  1F4C  3DA1               	addwfc	m_flash_erase@addr+1,f
 19503                           
 19504                           ;appdata.c: 78: if (len >= 32) {
 19505  1F4D  3020               	movlw	32
 19506  1F4E  0222               	subwf	m_flash_erase@len,w
 19507  1F4F  1C03               	skipc
 19508  1F50  2F54               	goto	l12101
 19509                           
 19510                           ;appdata.c: 79: len -= 32;
 19511  1F51  3020               	movlw	32
 19512  1F52  02A2               	subwf	m_flash_erase@len,f
 19513                           
 19514                           ;appdata.c: 80: } else
 19515  1F53  2F3C               	goto	l12103
 19516  1F54                     l12101:	
 19517                           
 19518                           ;appdata.c: 81: len = 0;
 19519  1F54  01A2               	clrf	m_flash_erase@len
 19520  1F55  2F3C               	goto	l12103
 19521  1F56                     __end_of_m_flash_erase:	
 19522                           ;appdata.c: 82: }
 19523                           ;appdata.c: 83: return 1;
 19524                           ;	Return value of _m_flash_erase is never used
 19525                           
 19526                           
 19527                           	psect	text69
 19528  1789                     __ptext69:	
 19529 ;; *************** function _m_flash_copy *****************
 19530 ;; Defined at:
 19531 ;;		line 85 in file "src/app/appdata.c"
 19532 ;; Parameters:    Size  Location     Type
 19533 ;;  addr            2   10[BANK0 ] unsigned int 
 19534 ;;  buf             2   12[BANK0 ] PTR const unsigned char 
 19535 ;;		 -> comBuffer(128), 
 19536 ;;  len             1   14[BANK0 ] unsigned char 
 19537 ;; Auto vars:     Size  Location     Type
 19538 ;;  startAddr       2   17[BANK0 ] unsigned int 
 19539 ;;  i               1   19[BANK0 ] unsigned char 
 19540 ;;  wlen            1   16[BANK0 ] unsigned char 
 19541 ;;  offset          1   15[BANK0 ] unsigned char 
 19542 ;; Return value:  Size  Location     Type
 19543 ;;                  1    wreg      unsigned char 
 19544 ;; Registers used:
 19545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19546 ;; Tracked objects:
 19547 ;;		On entry : 0/0
 19548 ;;		On exit  : 0/0
 19549 ;;		Unchanged: 0/0
 19550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19551 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 19552 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 19553 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19554 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0
 19555 ;;Total ram usage:       12 bytes
 19556 ;; Hardware stack levels used:    1
 19557 ;; Hardware stack levels required when called:    4
 19558 ;; This function calls:
 19559 ;;		_FLASH_ReadWord
 19560 ;;		_FLASH_WriteBlock
 19561 ;; This function is called by:
 19562 ;;		_data_api_calibration_table_data_init
 19563 ;;		_data_api_system_data_init
 19564 ;;		_data_api_rt_data_save
 19565 ;;		_data_api_calibration_table_data_save
 19566 ;; This function uses a non-reentrant model
 19567 ;;
 19568                           
 19569                           
 19570                           ;psect for function _m_flash_copy
 19571  1789                     _m_flash_copy:	
 19572                           
 19573                           ;appdata.c: 86: uint8_t i;
 19574                           ;appdata.c: 87: uint16_t startAddr;
 19575                           ;appdata.c: 88: uint8_t offset;
 19576                           ;appdata.c: 89: uint8_t wlen;
 19577                           ;appdata.c: 90: startAddr = addr;
 19578                           
 19579                           ;incstack = 0
 19580                           ; Regs used in _m_flash_copy: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19581  1789  0020               	movlb	0	; select bank0
 19582  178A  082B               	movf	m_flash_copy@addr+1,w
 19583  178B  00B2               	movwf	m_flash_copy@startAddr+1
 19584  178C  082A               	movf	m_flash_copy@addr,w
 19585  178D  00B1               	movwf	m_flash_copy@startAddr
 19586  178E                     l12149:	
 19587                           ;appdata.c: 91: while (len) {
 19588                           
 19589  178E  082E               	movf	m_flash_copy@len,w
 19590  178F  1903               	btfsc	3,2
 19591  1790  0008               	return
 19592                           
 19593                           ;appdata.c: 92: offset = (uint8_t) (startAddr & (32 - 1));
 19594  1791  0831               	movf	m_flash_copy@startAddr,w
 19595  1792  391F               	andlw	31
 19596  1793  00F6               	movwf	??_m_flash_copy
 19597  1794  0876               	movf	??_m_flash_copy,w
 19598  1795  00AF               	movwf	m_flash_copy@offset
 19599                           
 19600                           ;appdata.c: 93: startAddr = startAddr & ~(32 - 1);
 19601  1796  30E0               	movlw	224
 19602  1797  0531               	andwf	m_flash_copy@startAddr,w
 19603  1798  00B1               	movwf	m_flash_copy@startAddr
 19604  1799  30FF               	movlw	255
 19605  179A  0532               	andwf	m_flash_copy@startAddr+1,w
 19606  179B  00B2               	movwf	m_flash_copy@startAddr+1
 19607                           
 19608                           ;appdata.c: 94: for (i = 0; i < 32; i++) {
 19609  179C  01B3               	clrf	m_flash_copy@i
 19610  179D  3020               	movlw	32
 19611  179E  0233               	subwf	m_flash_copy@i,w
 19612  179F  1803               	btfsc	3,0
 19613  17A0  2FBD               	goto	l12121
 19614  17A1                     l12115:	
 19615                           
 19616                           ;appdata.c: 96: flashBuffer[i] = FLASH_ReadWord((startAddr + i));
 19617  17A1  0833               	movf	m_flash_copy@i,w
 19618  17A2  0731               	addwf	m_flash_copy@startAddr,w
 19619  17A3  00F3               	movwf	FLASH_ReadWord@flashAddr
 19620  17A4  0832               	movf	m_flash_copy@startAddr+1,w
 19621  17A5  1803               	skipnc
 19622  17A6  0A32               	incf	m_flash_copy@startAddr+1,w
 19623  17A7  00F4               	movwf	FLASH_ReadWord@flashAddr+1
 19624  17A8  319F  2722  3197   	fcall	_FLASH_ReadWord
 19625  17AB  0020               	movlb	0	; select bank0
 19626  17AC  3533               	lslf	m_flash_copy@i,w
 19627  17AD  3E20               	addlw	(low (_flashBuffer| (0+512)))& (0+255)
 19628  17AE  0086               	movwf	6
 19629  17AF  3002               	movlw	2	; select bank4/5
 19630  17B0  0087               	movwf	7
 19631  17B1  0873               	movf	?_FLASH_ReadWord,w
 19632  17B2  3FC0               	movwi [0]fsr1
 19633  17B3  0874               	movf	?_FLASH_ReadWord+1,w
 19634  17B4  3FC1               	movwi [1]fsr1
 19635  17B5  3001               	movlw	1
 19636  17B6  00F6               	movwf	??_m_flash_copy
 19637  17B7  0876               	movf	??_m_flash_copy,w
 19638  17B8  07B3               	addwf	m_flash_copy@i,f
 19639  17B9  3020               	movlw	32
 19640  17BA  0233               	subwf	m_flash_copy@i,w
 19641  17BB  1C03               	skipc
 19642  17BC  2FA1               	goto	l12115
 19643  17BD                     l12121:	
 19644                           
 19645                           ;appdata.c: 97: }
 19646                           ;appdata.c: 98: wlen = 0;
 19647  17BD  01B0               	clrf	m_flash_copy@wlen
 19648                           
 19649                           ;appdata.c: 99: for (i = offset; i < 32; i++) {
 19650  17BE  082F               	movf	m_flash_copy@offset,w
 19651  17BF  00F6               	movwf	??_m_flash_copy
 19652  17C0  0876               	movf	??_m_flash_copy,w
 19653  17C1  00B3               	movwf	m_flash_copy@i
 19654  17C2  3020               	movlw	32
 19655  17C3  0233               	subwf	m_flash_copy@i,w
 19656  17C4  1803               	btfsc	3,0
 19657  17C5  2FEA               	goto	l12143
 19658  17C6                     l12129:	
 19659                           
 19660                           ;appdata.c: 100: flashBuffer[i] = (uint16_t) (*buf);
 19661  17C6  082C               	movf	m_flash_copy@buf,w
 19662  17C7  0086               	movwf	6
 19663  17C8  082D               	movf	m_flash_copy@buf+1,w
 19664  17C9  0087               	movwf	7
 19665  17CA  0801               	movf	1,w
 19666  17CB  00F6               	movwf	??_m_flash_copy
 19667  17CC  01F7               	clrf	??_m_flash_copy+1
 19668  17CD  3533               	lslf	m_flash_copy@i,w
 19669  17CE  3E20               	addlw	(low (_flashBuffer| (0+512)))& (0+255)
 19670  17CF  0086               	movwf	6
 19671  17D0  3002               	movlw	2	; select bank4/5
 19672  17D1  0087               	movwf	7
 19673  17D2  0876               	movf	??_m_flash_copy,w
 19674  17D3  3FC0               	movwi [0]fsr1
 19675  17D4  0877               	movf	??_m_flash_copy+1,w
 19676  17D5  3FC1               	movwi [1]fsr1
 19677                           
 19678                           ;appdata.c: 101: buf++;
 19679  17D6  3001               	movlw	1
 19680  17D7  07AC               	addwf	m_flash_copy@buf,f
 19681  17D8  3000               	movlw	0
 19682  17D9  3DAD               	addwfc	m_flash_copy@buf+1,f
 19683                           
 19684                           ;appdata.c: 102: wlen++;
 19685  17DA  3001               	movlw	1
 19686  17DB  00F6               	movwf	??_m_flash_copy
 19687  17DC  0876               	movf	??_m_flash_copy,w
 19688  17DD  07B0               	addwf	m_flash_copy@wlen,f
 19689                           
 19690                           ;appdata.c: 103: if (wlen >= len)break;
 19691  17DE  082E               	movf	m_flash_copy@len,w
 19692  17DF  0230               	subwf	m_flash_copy@wlen,w
 19693  17E0  1803               	btfsc	3,0
 19694  17E1  2FEA               	goto	l12143
 19695  17E2  3001               	movlw	1
 19696  17E3  00F6               	movwf	??_m_flash_copy
 19697  17E4  0876               	movf	??_m_flash_copy,w
 19698  17E5  07B3               	addwf	m_flash_copy@i,f
 19699  17E6  3020               	movlw	32
 19700  17E7  0233               	subwf	m_flash_copy@i,w
 19701  17E8  1C03               	skipc
 19702  17E9  2FC6               	goto	l12129
 19703  17EA                     l12143:	
 19704                           
 19705                           ;appdata.c: 104: }
 19706                           ;appdata.c: 105: FLASH_WriteBlock(startAddr, flashBuffer);
 19707  17EA  0832               	movf	m_flash_copy@startAddr+1,w
 19708  17EB  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
 19709  17EC  0831               	movf	m_flash_copy@startAddr,w
 19710  17ED  00A0               	movwf	FLASH_WriteBlock@writeAddr
 19711  17EE  3020               	movlw	(low (_flashBuffer| (0+512)))& (0+255)
 19712  17EF  00F6               	movwf	??_m_flash_copy
 19713  17F0  0876               	movf	??_m_flash_copy,w
 19714  17F1  00A2               	movwf	FLASH_WriteBlock@flashWordArray
 19715  17F2  3196  26AD  3197   	fcall	_FLASH_WriteBlock
 19716                           
 19717                           ;appdata.c: 106: len -= wlen;
 19718  17F5  0020               	movlb	0	; select bank0
 19719  17F6  0830               	movf	m_flash_copy@wlen,w
 19720  17F7  02AE               	subwf	m_flash_copy@len,f
 19721                           
 19722                           ;appdata.c: 107: startAddr += wlen;
 19723  17F8  0830               	movf	m_flash_copy@wlen,w
 19724  17F9  00F6               	movwf	??_m_flash_copy
 19725  17FA  01F7               	clrf	??_m_flash_copy+1
 19726  17FB  0876               	movf	??_m_flash_copy,w
 19727  17FC  07B1               	addwf	m_flash_copy@startAddr,f
 19728  17FD  0877               	movf	??_m_flash_copy+1,w
 19729  17FE  3DB2               	addwfc	m_flash_copy@startAddr+1,f
 19730  17FF  2F8E               	goto	l12149
 19731  1800                     __end_of_m_flash_copy:	
 19732                           ;appdata.c: 108: }
 19733                           ;appdata.c: 109: return 1;
 19734                           ;	Return value of _m_flash_copy is never used
 19735                           
 19736                           
 19737                           	psect	text70
 19738  16AD                     __ptext70:	
 19739 ;; *************** function _FLASH_WriteBlock *****************
 19740 ;; Defined at:
 19741 ;;		line 94 in file "mcc_generated_files/memory.c"
 19742 ;; Parameters:    Size  Location     Type
 19743 ;;  writeAddr       2    0[BANK0 ] unsigned int 
 19744 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned int 
 19745 ;;		 -> flashBuffer(64), 
 19746 ;; Auto vars:     Size  Location     Type
 19747 ;;  blockStartAd    2    6[BANK0 ] unsigned int 
 19748 ;;  i               1    9[BANK0 ] unsigned char 
 19749 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
 19750 ;; Return value:  Size  Location     Type
 19751 ;;                  1    wreg      char 
 19752 ;; Registers used:
 19753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19754 ;; Tracked objects:
 19755 ;;		On entry : 0/0
 19756 ;;		On exit  : 0/0
 19757 ;;		Unchanged: 0/0
 19758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19759 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19760 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 19761 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19762 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 19763 ;;Total ram usage:       10 bytes
 19764 ;; Hardware stack levels used:    1
 19765 ;; Hardware stack levels required when called:    3
 19766 ;; This function calls:
 19767 ;;		_FLASH_EraseBlock
 19768 ;; This function is called by:
 19769 ;;		_m_flash_copy
 19770 ;;		_FLASH_WriteWord
 19771 ;; This function uses a non-reentrant model
 19772 ;;
 19773                           
 19774                           
 19775                           ;psect for function _FLASH_WriteBlock
 19776  16AD                     _FLASH_WriteBlock:	
 19777                           
 19778                           ;memory.c: 96: uint16_t blockStartAddr = (uint16_t )(writeAddr & ((16384-1) ^ (32-1)));
 19779                           
 19780                           ;incstack = 0
 19781                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19782  16AD  30E0               	movlw	224
 19783  16AE  0020               	movlb	0	; select bank0
 19784  16AF  0520               	andwf	FLASH_WriteBlock@writeAddr,w
 19785  16B0  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
 19786  16B1  303F               	movlw	63
 19787  16B2  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
 19788  16B3  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
 19789                           
 19790                           ;memory.c: 97: uint8_t GIEBitValue = INTCONbits.GIE;
 19791  16B4  3000               	movlw	0
 19792  16B5  1B8B               	btfsc	11,7	;volatile
 19793  16B6  3001               	movlw	1
 19794  16B7  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
 19795                           
 19796                           ;memory.c: 98: uint8_t i;
 19797                           ;memory.c: 101: if( writeAddr != blockStartAddr )
 19798  16B8  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 19799  16B9  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 19800  16BA  1D03               	skipz
 19801  16BB  2EBE               	goto	u9995
 19802  16BC  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
 19803  16BD  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
 19804  16BE                     u9995:	
 19805  16BE  1D03               	btfss	3,2
 19806  16BF  0008               	return
 19807                           
 19808                           ;memory.c: 104: }
 19809                           ;memory.c: 106: INTCONbits.GIE = 0;
 19810                           
 19811                           ;memory.c: 102: {
 19812                           ;memory.c: 103: return -1;
 19813                           ;	Return value of _FLASH_WriteBlock is never used
 19814  16C0  138B               	bcf	11,7	;volatile
 19815                           
 19816                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
 19817  16C1  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 19818  16C2  00F4               	movwf	FLASH_EraseBlock@startAddr+1
 19819  16C3  0820               	movf	FLASH_WriteBlock@writeAddr,w
 19820  16C4  00F3               	movwf	FLASH_EraseBlock@startAddr
 19821  16C5  319F  27A9  3196   	fcall	_FLASH_EraseBlock
 19822                           
 19823                           ;memory.c: 112: EECON1bits.EEPGD = 1;
 19824  16C8  0023               	movlb	3	; select bank3
 19825  16C9  1795               	bsf	21,7	;volsfr
 19826                           
 19827                           ;memory.c: 113: EECON1bits.CFGS = 0;
 19828  16CA  1315               	bcf	21,6	;volsfr
 19829                           
 19830                           ;memory.c: 114: EECON1bits.WREN = 1;
 19831  16CB  1515               	bsf	21,2	;volsfr
 19832                           
 19833                           ;memory.c: 115: EECON1bits.LWLO = 1;
 19834  16CC  1695               	bsf	21,5	;volsfr
 19835                           
 19836                           ;memory.c: 117: for (i=0; i<32; i++)
 19837  16CD  0020               	movlb	0	; select bank0
 19838  16CE  01A9               	clrf	FLASH_WriteBlock@i
 19839  16CF  3020               	movlw	32
 19840  16D0  0229               	subwf	FLASH_WriteBlock@i,w
 19841  16D1  1803               	btfsc	3,0
 19842  16D2  2F10               	goto	l246
 19843  16D3                     l11679:	
 19844                           
 19845                           ;memory.c: 118: {
 19846                           ;memory.c: 120: EEADRL = (writeAddr & 0xFF);
 19847  16D3  0820               	movf	FLASH_WriteBlock@writeAddr,w
 19848  16D4  0023               	movlb	3	; select bank3
 19849  16D5  0091               	movwf	17	;volatile
 19850                           
 19851                           ;memory.c: 122: EEADRH = ((writeAddr & 0xFF00) >> 8);
 19852  16D6  0020               	movlb	0	; select bank0
 19853  16D7  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 19854  16D8  0023               	movlb	3	; select bank3
 19855  16D9  0092               	movwf	18	;volatile
 19856                           
 19857                           ;memory.c: 125: EEDATL = flashWordArray[i];
 19858  16DA  0020               	movlb	0	; select bank0
 19859  16DB  3529               	lslf	FLASH_WriteBlock@i,w
 19860  16DC  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 19861  16DD  00A3               	movwf	??_FLASH_WriteBlock
 19862  16DE  0823               	movf	??_FLASH_WriteBlock,w
 19863  16DF  0086               	movwf	6
 19864  16E0  3002               	movlw	2	; select bank4/5
 19865  16E1  0087               	movwf	7
 19866  16E2  0801               	movf	1,w
 19867  16E3  0023               	movlb	3	; select bank3
 19868  16E4  0093               	movwf	19	;volatile
 19869                           
 19870                           ;memory.c: 126: EEDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 19871  16E5  0020               	movlb	0	; select bank0
 19872  16E6  3529               	lslf	FLASH_WriteBlock@i,w
 19873  16E7  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 19874  16E8  00A3               	movwf	??_FLASH_WriteBlock
 19875  16E9  0823               	movf	??_FLASH_WriteBlock,w
 19876  16EA  0086               	movwf	6
 19877  16EB  3002               	movlw	2	; select bank4/5
 19878  16EC  0087               	movwf	7
 19879  16ED  3F40               	moviw [0]fsr1
 19880  16EE  00A4               	movwf	??_FLASH_WriteBlock+1
 19881  16EF  3F41               	moviw [1]fsr1
 19882  16F0  00A5               	movwf	??_FLASH_WriteBlock+2
 19883  16F1  0825               	movf	??_FLASH_WriteBlock+2,w
 19884  16F2  0023               	movlb	3	; select bank3
 19885  16F3  0094               	movwf	20	;volatile
 19886                           
 19887                           ;memory.c: 128: if(i == (32-1))
 19888  16F4  301F               	movlw	31
 19889  16F5  0020               	movlb	0	; select bank0
 19890  16F6  0629               	xorwf	FLASH_WriteBlock@i,w
 19891  16F7  1D03               	btfss	3,2
 19892  16F8  2EFB               	goto	l11691
 19893                           
 19894                           ;memory.c: 129: {
 19895                           ;memory.c: 131: EECON1bits.LWLO = 0;
 19896  16F9  0023               	movlb	3	; select bank3
 19897  16FA  1295               	bcf	21,5	;volsfr
 19898  16FB                     l11691:	
 19899                           
 19900                           ;memory.c: 132: }
 19901                           ;memory.c: 134: EECON2 = 0x55;
 19902  16FB  3055               	movlw	85
 19903  16FC  0023               	movlb	3	; select bank3
 19904  16FD  0096               	movwf	22	;volsfr
 19905                           
 19906                           ;memory.c: 135: EECON2 = 0xAA;
 19907  16FE  30AA               	movlw	170
 19908  16FF  0096               	movwf	22	;volsfr
 19909                           
 19910                           ;memory.c: 136: EECON1bits.WR = 1;
 19911  1700  1495               	bsf	21,1	;volsfr
 19912                           
 19913                           ;memory.c: 137: __nop();
 19914  1701  0000               	nop
 19915                           
 19916                           ;memory.c: 138: __nop();
 19917  1702  0000               	nop
 19918                           
 19919                           ;memory.c: 140: writeAddr++;
 19920  1703  3001               	movlw	1
 19921  1704  0020               	movlb	0	; select bank0
 19922  1705  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
 19923  1706  3000               	movlw	0
 19924  1707  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 19925  1708  3001               	movlw	1
 19926  1709  00A3               	movwf	??_FLASH_WriteBlock
 19927  170A  0823               	movf	??_FLASH_WriteBlock,w
 19928  170B  07A9               	addwf	FLASH_WriteBlock@i,f
 19929  170C  3020               	movlw	32
 19930  170D  0229               	subwf	FLASH_WriteBlock@i,w
 19931  170E  1C03               	skipc
 19932  170F  2ED3               	goto	l11679
 19933  1710                     l246:	
 19934                           
 19935                           ;memory.c: 141: }
 19936                           ;memory.c: 143: EECON1bits.WREN = 0;
 19937  1710  0023               	movlb	3	; select bank3
 19938  1711  1115               	bcf	21,2	;volsfr
 19939                           
 19940                           ;memory.c: 144: INTCONbits.GIE = GIEBitValue;
 19941  1712  0020               	movlb	0	; select bank0
 19942  1713  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
 19943  1714  1C03               	skipc
 19944  1715  138B               	bcf	11,7	;volatile
 19945  1716  1803               	skipnc
 19946  1717  178B               	bsf	11,7	;volatile
 19947  1718  0008               	return
 19948  1719                     __end_of_FLASH_WriteBlock:	
 19949                           ;memory.c: 146: return 0;
 19950                           ;	Return value of _FLASH_WriteBlock is never used
 19951                           
 19952                           
 19953                           	psect	text71
 19954  1FA9                     __ptext71:	
 19955 ;; *************** function _FLASH_EraseBlock *****************
 19956 ;; Defined at:
 19957 ;;		line 149 in file "mcc_generated_files/memory.c"
 19958 ;; Parameters:    Size  Location     Type
 19959 ;;  startAddr       2    3[COMMON] unsigned int 
 19960 ;; Auto vars:     Size  Location     Type
 19961 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 19962 ;; Return value:  Size  Location     Type
 19963 ;;                  1    wreg      void 
 19964 ;; Registers used:
 19965 ;;		wreg, status,2, status,0
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19972 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19974 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19975 ;;Total ram usage:        3 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; Hardware stack levels required when called:    2
 19978 ;; This function calls:
 19979 ;;		Nothing
 19980 ;; This function is called by:
 19981 ;;		_FLASH_WriteBlock
 19982 ;;		_m_flash_erase
 19983 ;; This function uses a non-reentrant model
 19984 ;;
 19985                           
 19986                           
 19987                           ;psect for function _FLASH_EraseBlock
 19988  1FA9                     _FLASH_EraseBlock:	
 19989                           
 19990                           ;memory.c: 151: uint8_t GIEBitValue = INTCONbits.GIE;
 19991                           
 19992                           ;incstack = 0
 19993                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 19994  1FA9  3000               	movlw	0
 19995  1FAA  1B8B               	btfsc	11,7	;volatile
 19996  1FAB  3001               	movlw	1
 19997  1FAC  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
 19998                           
 19999                           ;memory.c: 153: INTCONbits.GIE = 0;
 20000  1FAD  138B               	bcf	11,7	;volatile
 20001                           
 20002                           ;memory.c: 155: EEADRL = (startAddr & 0xFF);
 20003  1FAE  0873               	movf	FLASH_EraseBlock@startAddr,w
 20004  1FAF  0023               	movlb	3	; select bank3
 20005  1FB0  0091               	movwf	17	;volatile
 20006                           
 20007                           ;memory.c: 157: EEADRH = ((startAddr & 0xFF00) >> 8);
 20008  1FB1  0874               	movf	FLASH_EraseBlock@startAddr+1,w
 20009  1FB2  0092               	movwf	18	;volatile
 20010                           
 20011                           ;memory.c: 160: EECON1bits.CFGS = 0;
 20012  1FB3  1315               	bcf	21,6	;volsfr
 20013                           
 20014                           ;memory.c: 161: EECON1bits.EEPGD = 1;
 20015  1FB4  1795               	bsf	21,7	;volsfr
 20016                           
 20017                           ;memory.c: 162: EECON1bits.FREE = 1;
 20018  1FB5  1615               	bsf	21,4	;volsfr
 20019                           
 20020                           ;memory.c: 163: EECON1bits.WREN = 1;
 20021  1FB6  1515               	bsf	21,2	;volsfr
 20022                           
 20023                           ;memory.c: 166: EECON2 = 0x55;
 20024  1FB7  3055               	movlw	85
 20025  1FB8  0096               	movwf	22	;volsfr
 20026                           
 20027                           ;memory.c: 167: EECON2 = 0xAA;
 20028  1FB9  30AA               	movlw	170
 20029  1FBA  0096               	movwf	22	;volsfr
 20030                           
 20031                           ;memory.c: 168: EECON1bits.WR = 1;
 20032  1FBB  1495               	bsf	21,1	;volsfr
 20033                           
 20034                           ;memory.c: 169: __nop();
 20035  1FBC  0000               	nop
 20036                           
 20037                           ;memory.c: 170: __nop();
 20038  1FBD  0000               	nop
 20039                           
 20040                           ;memory.c: 172: EECON1bits.WREN = 0;
 20041  1FBE  0023               	movlb	3	; select bank3
 20042  1FBF  1115               	bcf	21,2	;volsfr
 20043                           
 20044                           ;memory.c: 173: INTCONbits.GIE = GIEBitValue;
 20045  1FC0  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
 20046  1FC1  1C03               	skipc
 20047  1FC2  138B               	bcf	11,7	;volatile
 20048  1FC3  1803               	skipnc
 20049  1FC4  178B               	bsf	11,7	;volatile
 20050  1FC5  0008               	return
 20051  1FC6                     __end_of_FLASH_EraseBlock:	
 20052                           
 20053                           	psect	text72
 20054  1F22                     __ptext72:	
 20055 ;; *************** function _FLASH_ReadWord *****************
 20056 ;; Defined at:
 20057 ;;		line 57 in file "mcc_generated_files/memory.c"
 20058 ;; Parameters:    Size  Location     Type
 20059 ;;  flashAddr       2    3[COMMON] unsigned int 
 20060 ;; Auto vars:     Size  Location     Type
 20061 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 20062 ;; Return value:  Size  Location     Type
 20063 ;;                  2    3[COMMON] unsigned int 
 20064 ;; Registers used:
 20065 ;;		wreg, status,2, status,0
 20066 ;; Tracked objects:
 20067 ;;		On entry : 0/0
 20068 ;;		On exit  : 0/0
 20069 ;;		Unchanged: 0/0
 20070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20071 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20073 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20074 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20075 ;;Total ram usage:        3 bytes
 20076 ;; Hardware stack levels used:    1
 20077 ;; Hardware stack levels required when called:    2
 20078 ;; This function calls:
 20079 ;;		Nothing
 20080 ;; This function is called by:
 20081 ;;		_m_flash_copy
 20082 ;;		_FLASH_WriteWord
 20083 ;; This function uses a non-reentrant model
 20084 ;;
 20085                           
 20086                           
 20087                           ;psect for function _FLASH_ReadWord
 20088  1F22                     _FLASH_ReadWord:	
 20089                           
 20090                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 20091                           
 20092                           ;incstack = 0
 20093                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 20094  1F22  3000               	movlw	0
 20095  1F23  1B8B               	btfsc	11,7	;volatile
 20096  1F24  3001               	movlw	1
 20097  1F25  00F5               	movwf	FLASH_ReadWord@GIEBitValue
 20098                           
 20099                           ;memory.c: 61: INTCONbits.GIE = 0;
 20100  1F26  138B               	bcf	11,7	;volatile
 20101                           
 20102                           ;memory.c: 62: EEADRL = (flashAddr & 0x00FF);
 20103  1F27  0873               	movf	FLASH_ReadWord@flashAddr,w
 20104  1F28  0023               	movlb	3	; select bank3
 20105  1F29  0091               	movwf	17	;volatile
 20106                           
 20107                           ;memory.c: 63: EEADRH = ((flashAddr & 0xFF00) >> 8);
 20108  1F2A  0874               	movf	FLASH_ReadWord@flashAddr+1,w
 20109  1F2B  0092               	movwf	18	;volatile
 20110                           
 20111                           ;memory.c: 65: EECON1bits.CFGS = 0;
 20112  1F2C  1315               	bcf	21,6	;volsfr
 20113                           
 20114                           ;memory.c: 66: EECON1bits.EEPGD = 1;
 20115  1F2D  1795               	bsf	21,7	;volsfr
 20116                           
 20117                           ;memory.c: 67: EECON1bits.RD = 1;
 20118  1F2E  1415               	bsf	21,0	;volsfr
 20119                           
 20120                           ;memory.c: 68: __nop();
 20121  1F2F  0000               	nop
 20122                           
 20123                           ;memory.c: 69: __nop();
 20124  1F30  0000               	nop
 20125                           
 20126                           ;memory.c: 70: INTCONbits.GIE = GIEBitValue;
 20127  1F31  0C75               	rrf	FLASH_ReadWord@GIEBitValue,w
 20128  1F32  1C03               	skipc
 20129  1F33  138B               	bcf	11,7	;volatile
 20130  1F34  1803               	skipnc
 20131  1F35  178B               	bsf	11,7	;volatile
 20132                           
 20133                           ;memory.c: 72: return ((EEDATH << 8) | EEDATL);
 20134  1F36  0023               	movlb	3	; select bank3
 20135  1F37  0814               	movf	20,w	;volatile
 20136  1F38  00F4               	movwf	?_FLASH_ReadWord+1
 20137  1F39  0813               	movf	19,w	;volatile
 20138  1F3A  00F3               	movwf	?_FLASH_ReadWord
 20139  1F3B  0008               	return
 20140  1F3C                     __end_of_FLASH_ReadWord:	
 20141                           
 20142                           	psect	text73
 20143  1030                     __ptext73:	
 20144 ;; *************** function _data_api_write_eeprom *****************
 20145 ;; Defined at:
 20146 ;;		line 117 in file "src/app/appdata.c"
 20147 ;; Parameters:    Size  Location     Type
 20148 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 20149 ;;		 -> comBuffer(128), 
 20150 ;;  addr            1    2[BANK0 ] unsigned char 
 20151 ;;  len             1    3[BANK0 ] unsigned char 
 20152 ;; Auto vars:     Size  Location     Type
 20153 ;;  i               1    7[COMMON] unsigned char 
 20154 ;; Return value:  Size  Location     Type
 20155 ;;                  1    wreg      void 
 20156 ;; Registers used:
 20157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20158 ;; Tracked objects:
 20159 ;;		On entry : 0/0
 20160 ;;		On exit  : 0/0
 20161 ;;		Unchanged: 0/0
 20162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20163 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20164 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20166 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20167 ;;Total ram usage:        6 bytes
 20168 ;; Hardware stack levels used:    1
 20169 ;; Hardware stack levels required when called:    3
 20170 ;; This function calls:
 20171 ;;		_DATAEE_WriteByte
 20172 ;; This function is called by:
 20173 ;;		_data_api_calibration_table_data_init
 20174 ;;		_data_api_system_data_init
 20175 ;;		_data_api_rt_data_save
 20176 ;;		_data_api_calibration_table_data_save
 20177 ;; This function uses a non-reentrant model
 20178 ;;
 20179                           
 20180                           
 20181                           ;psect for function _data_api_write_eeprom
 20182  1030                     _data_api_write_eeprom:	
 20183                           
 20184                           ;appdata.c: 118: uint8_t i;
 20185                           ;appdata.c: 119: for(i=0;i<len;i++){
 20186                           
 20187                           ;incstack = 0
 20188                           ; Regs used in _data_api_write_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20189  1030  01F7               	clrf	data_api_write_eeprom@i
 20190  1031                     l12161:	
 20191  1031  0020               	movlb	0	; select bank0
 20192  1032  0823               	movf	data_api_write_eeprom@len,w
 20193  1033  0277               	subwf	data_api_write_eeprom@i,w
 20194  1034  1803               	btfsc	3,0
 20195  1035  0008               	return
 20196                           
 20197                           ;appdata.c: 120: DATAEE_WriteByte(addr,*buf);
 20198  1036  0020               	movlb	0	; select bank0
 20199  1037  0820               	movf	data_api_write_eeprom@buf,w
 20200  1038  0086               	movwf	6
 20201  1039  0821               	movf	data_api_write_eeprom@buf+1,w
 20202  103A  0087               	movwf	7
 20203  103B  0801               	movf	1,w
 20204  103C  00F6               	movwf	??_data_api_write_eeprom
 20205  103D  0876               	movf	??_data_api_write_eeprom,w
 20206  103E  00F3               	movwf	DATAEE_WriteByte@bData
 20207  103F  0822               	movf	data_api_write_eeprom@addr,w
 20208  1040  319F  278C  3190   	fcall	_DATAEE_WriteByte
 20209                           
 20210                           ;appdata.c: 121: buf++;
 20211  1043  3001               	movlw	1
 20212  1044  0020               	movlb	0	; select bank0
 20213  1045  07A0               	addwf	data_api_write_eeprom@buf,f
 20214  1046  3000               	movlw	0
 20215  1047  3DA1               	addwfc	data_api_write_eeprom@buf+1,f
 20216                           
 20217                           ;appdata.c: 122: addr++;
 20218  1048  3001               	movlw	1
 20219  1049  00F6               	movwf	??_data_api_write_eeprom
 20220  104A  0876               	movf	??_data_api_write_eeprom,w
 20221  104B  07A2               	addwf	data_api_write_eeprom@addr,f
 20222  104C  3001               	movlw	1
 20223  104D  00F6               	movwf	??_data_api_write_eeprom
 20224  104E  0876               	movf	??_data_api_write_eeprom,w
 20225  104F  07F7               	addwf	data_api_write_eeprom@i,f
 20226  1050  2831               	goto	l12161
 20227  1051                     __end_of_data_api_write_eeprom:	
 20228                           
 20229                           	psect	text74
 20230  1F8C                     __ptext74:	
 20231 ;; *************** function _DATAEE_WriteByte *****************
 20232 ;; Defined at:
 20233 ;;		line 180 in file "mcc_generated_files/memory.c"
 20234 ;; Parameters:    Size  Location     Type
 20235 ;;  bAdd            1    wreg     unsigned char 
 20236 ;;  bData           1    3[COMMON] unsigned char 
 20237 ;; Auto vars:     Size  Location     Type
 20238 ;;  bAdd            1    4[COMMON] unsigned char 
 20239 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 20240 ;; Return value:  Size  Location     Type
 20241 ;;                  1    wreg      void 
 20242 ;; Registers used:
 20243 ;;		wreg, status,2, status,0
 20244 ;; Tracked objects:
 20245 ;;		On entry : 0/0
 20246 ;;		On exit  : 0/0
 20247 ;;		Unchanged: 0/0
 20248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20249 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20250 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20252 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20253 ;;Total ram usage:        3 bytes
 20254 ;; Hardware stack levels used:    1
 20255 ;; Hardware stack levels required when called:    2
 20256 ;; This function calls:
 20257 ;;		Nothing
 20258 ;; This function is called by:
 20259 ;;		_data_api_write_eeprom
 20260 ;;		_data_api_write_eeprom_clr
 20261 ;; This function uses a non-reentrant model
 20262 ;;
 20263                           
 20264                           
 20265                           ;psect for function _DATAEE_WriteByte
 20266  1F8C                     _DATAEE_WriteByte:	
 20267                           
 20268                           ;incstack = 0
 20269                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 20270                           ;DATAEE_WriteByte@bAdd stored from wreg
 20271  1F8C  00F4               	movwf	DATAEE_WriteByte@bAdd
 20272                           
 20273                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 20274  1F8D  01F5               	clrf	DATAEE_WriteByte@GIEBitValue
 20275                           
 20276                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 20277  1F8E  0874               	movf	DATAEE_WriteByte@bAdd,w
 20278  1F8F  0023               	movlb	3	; select bank3
 20279  1F90  0091               	movwf	17	;volatile
 20280                           
 20281                           ;memory.c: 185: EEDATL = bData;
 20282  1F91  0873               	movf	DATAEE_WriteByte@bData,w
 20283  1F92  0093               	movwf	19	;volatile
 20284                           
 20285                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 20286  1F93  1395               	bcf	21,7	;volsfr
 20287                           
 20288                           ;memory.c: 187: EECON1bits.CFGS = 0;
 20289  1F94  1315               	bcf	21,6	;volsfr
 20290                           
 20291                           ;memory.c: 188: EECON1bits.WREN = 1;
 20292  1F95  1515               	bsf	21,2	;volsfr
 20293                           
 20294                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 20295  1F96  3000               	movlw	0
 20296  1F97  1B8B               	btfsc	11,7	;volatile
 20297  1F98  3001               	movlw	1
 20298  1F99  00F5               	movwf	DATAEE_WriteByte@GIEBitValue
 20299                           
 20300                           ;memory.c: 191: INTCONbits.GIE = 0;
 20301  1F9A  138B               	bcf	11,7	;volatile
 20302                           
 20303                           ;memory.c: 192: EECON2 = 0x55;
 20304  1F9B  3055               	movlw	85
 20305  1F9C  0096               	movwf	22	;volsfr
 20306                           
 20307                           ;memory.c: 193: EECON2 = 0xAA;
 20308  1F9D  30AA               	movlw	170
 20309  1F9E  0096               	movwf	22	;volsfr
 20310                           
 20311                           ;memory.c: 194: EECON1bits.WR = 1;
 20312  1F9F  1495               	bsf	21,1	;volsfr
 20313  1FA0                     l253:	
 20314                           ;memory.c: 197: {
 20315                           
 20316                           ;memory.c: 196: while (EECON1bits.WR)
 20317                           
 20318  1FA0  1895               	btfsc	21,1	;volsfr
 20319  1FA1  2FA0               	goto	l253
 20320                           
 20321                           ;memory.c: 198: }
 20322                           ;memory.c: 200: EECON1bits.WREN = 0;
 20323  1FA2  1115               	bcf	21,2	;volsfr
 20324                           
 20325                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 20326  1FA3  0C75               	rrf	DATAEE_WriteByte@GIEBitValue,w
 20327  1FA4  1C03               	skipc
 20328  1FA5  138B               	bcf	11,7	;volatile
 20329  1FA6  1803               	skipnc
 20330  1FA7  178B               	bsf	11,7	;volatile
 20331  1FA8  0008               	return
 20332  1FA9                     __end_of_DATAEE_WriteByte:	
 20333                           
 20334                           	psect	text75
 20335  07E1                     __ptext75:	
 20336 ;; *************** function _data_api_read_eeprom *****************
 20337 ;; Defined at:
 20338 ;;		line 133 in file "src/app/appdata.c"
 20339 ;; Parameters:    Size  Location     Type
 20340 ;;  buf             2    4[COMMON] PTR unsigned char 
 20341 ;;		 -> comBuffer(128), 
 20342 ;;  addr            1    6[COMMON] unsigned char 
 20343 ;;  len             1    7[COMMON] unsigned char 
 20344 ;; Auto vars:     Size  Location     Type
 20345 ;;  i               1    1[BANK0 ] unsigned char 
 20346 ;; Return value:  Size  Location     Type
 20347 ;;                  1    wreg      void 
 20348 ;; Registers used:
 20349 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20350 ;; Tracked objects:
 20351 ;;		On entry : 0/0
 20352 ;;		On exit  : 0/0
 20353 ;;		Unchanged: 0/0
 20354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20355 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20356 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20357 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20358 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20359 ;;Total ram usage:        6 bytes
 20360 ;; Hardware stack levels used:    1
 20361 ;; Hardware stack levels required when called:    3
 20362 ;; This function calls:
 20363 ;;		_DATAEE_ReadByte
 20364 ;; This function is called by:
 20365 ;;		_data_api_calibration_table_data_init
 20366 ;;		_data_api_system_data_init
 20367 ;; This function uses a non-reentrant model
 20368 ;;
 20369                           
 20370                           
 20371                           ;psect for function _data_api_read_eeprom
 20372  07E1                     _data_api_read_eeprom:	
 20373                           
 20374                           ;appdata.c: 134: uint8_t i;
 20375                           ;appdata.c: 135: for(i=0;i<len;i++){
 20376                           
 20377                           ;incstack = 0
 20378                           ; Regs used in _data_api_read_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20379  07E1  0020               	movlb	0	; select bank0
 20380  07E2  01A1               	clrf	data_api_read_eeprom@i
 20381  07E3                     l12173:	
 20382  07E3  0877               	movf	data_api_read_eeprom@len,w
 20383  07E4  0221               	subwf	data_api_read_eeprom@i,w
 20384  07E5  1803               	btfsc	3,0
 20385  07E6  0008               	return
 20386                           
 20387                           ;appdata.c: 136: *buf=DATAEE_ReadByte(addr);
 20388  07E7  0876               	movf	data_api_read_eeprom@addr,w
 20389  07E8  319D  25A4  3187   	fcall	_DATAEE_ReadByte
 20390  07EB  0020               	movlb	0	; select bank0
 20391  07EC  00A0               	movwf	??_data_api_read_eeprom
 20392  07ED  0874               	movf	data_api_read_eeprom@buf,w
 20393  07EE  0086               	movwf	6
 20394  07EF  0875               	movf	data_api_read_eeprom@buf+1,w
 20395  07F0  0087               	movwf	7
 20396  07F1  0820               	movf	??_data_api_read_eeprom,w
 20397  07F2  0081               	movwf	1
 20398                           
 20399                           ;appdata.c: 137: buf++;
 20400  07F3  3001               	movlw	1
 20401  07F4  07F4               	addwf	data_api_read_eeprom@buf,f
 20402  07F5  3000               	movlw	0
 20403  07F6  3DF5               	addwfc	data_api_read_eeprom@buf+1,f
 20404                           
 20405                           ;appdata.c: 138: addr++;
 20406  07F7  3001               	movlw	1
 20407  07F8  00A0               	movwf	??_data_api_read_eeprom
 20408  07F9  0820               	movf	??_data_api_read_eeprom,w
 20409  07FA  07F6               	addwf	data_api_read_eeprom@addr,f
 20410  07FB  3001               	movlw	1
 20411  07FC  00A0               	movwf	??_data_api_read_eeprom
 20412  07FD  0820               	movf	??_data_api_read_eeprom,w
 20413  07FE  07A1               	addwf	data_api_read_eeprom@i,f
 20414  07FF  2FE3               	goto	l12173
 20415  0800                     __end_of_data_api_read_eeprom:	
 20416                           
 20417                           	psect	text76
 20418  1DA4                     __ptext76:	
 20419 ;; *************** function _DATAEE_ReadByte *****************
 20420 ;; Defined at:
 20421 ;;		line 204 in file "mcc_generated_files/memory.c"
 20422 ;; Parameters:    Size  Location     Type
 20423 ;;  bAdd            1    wreg     unsigned char 
 20424 ;; Auto vars:     Size  Location     Type
 20425 ;;  bAdd            1    3[COMMON] unsigned char 
 20426 ;; Return value:  Size  Location     Type
 20427 ;;                  1    wreg      unsigned char 
 20428 ;; Registers used:
 20429 ;;		wreg
 20430 ;; Tracked objects:
 20431 ;;		On entry : 0/0
 20432 ;;		On exit  : 0/0
 20433 ;;		Unchanged: 0/0
 20434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20436 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20438 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20439 ;;Total ram usage:        1 bytes
 20440 ;; Hardware stack levels used:    1
 20441 ;; Hardware stack levels required when called:    2
 20442 ;; This function calls:
 20443 ;;		Nothing
 20444 ;; This function is called by:
 20445 ;;		_data_api_read_eeprom
 20446 ;; This function uses a non-reentrant model
 20447 ;;
 20448                           
 20449                           
 20450                           ;psect for function _DATAEE_ReadByte
 20451  1DA4                     _DATAEE_ReadByte:	
 20452                           
 20453                           ;incstack = 0
 20454                           ; Regs used in _DATAEE_ReadByte: [wreg]
 20455                           ;DATAEE_ReadByte@bAdd stored from wreg
 20456  1DA4  00F3               	movwf	DATAEE_ReadByte@bAdd
 20457                           
 20458                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 20459  1DA5  0873               	movf	DATAEE_ReadByte@bAdd,w
 20460  1DA6  0023               	movlb	3	; select bank3
 20461  1DA7  0091               	movwf	17	;volatile
 20462                           
 20463                           ;memory.c: 207: EECON1bits.CFGS = 0;
 20464  1DA8  1315               	bcf	21,6	;volsfr
 20465                           
 20466                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 20467  1DA9  1395               	bcf	21,7	;volsfr
 20468                           
 20469                           ;memory.c: 209: EECON1bits.RD = 1;
 20470  1DAA  1415               	bsf	21,0	;volsfr
 20471                           
 20472                           ;memory.c: 210: __nop();
 20473  1DAB  0000               	nop
 20474                           
 20475                           ;memory.c: 211: __nop();
 20476  1DAC  0000               	nop
 20477                           
 20478                           ;memory.c: 213: return (EEDATL);
 20479  1DAD  0023               	movlb	3	; select bank3
 20480  1DAE  0813               	movf	19,w	;volatile
 20481  1DAF  0008               	return
 20482  1DB0                     __end_of_DATAEE_ReadByte:	
 20483                           
 20484                           	psect	text77
 20485  1396                     __ptext77:	
 20486 ;; *************** function _crc_verify *****************
 20487 ;; Defined at:
 20488 ;;		line 77 in file "src/protocol/crc16_sf.c"
 20489 ;; Parameters:    Size  Location     Type
 20490 ;;  message         2   11[BANK0 ] PTR unsigned char 
 20491 ;;		 -> bkupSystemData(72), comBuffer(128), Main_flowCalibrationTable(124), mainSystemData(72), 
 20492 ;;  n               2   13[BANK0 ] unsigned int 
 20493 ;; Auto vars:     Size  Location     Type
 20494 ;;  expected        2   20[BANK0 ] unsigned int 
 20495 ;;  crccal          2   18[BANK0 ] unsigned int 
 20496 ;; Return value:  Size  Location     Type
 20497 ;;                  1    wreg      unsigned char 
 20498 ;; Registers used:
 20499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20500 ;; Tracked objects:
 20501 ;;		On entry : 0/0
 20502 ;;		On exit  : 0/0
 20503 ;;		Unchanged: 0/0
 20504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20506 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20507 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20508 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 20509 ;;Total ram usage:       11 bytes
 20510 ;; Hardware stack levels used:    1
 20511 ;; Hardware stack levels required when called:    3
 20512 ;; This function calls:
 20513 ;;		_crc_sum
 20514 ;;		_m_mem_cpy_len
 20515 ;; This function is called by:
 20516 ;;		_data_api_calibration_table_data_init
 20517 ;;		_data_api_system_data_init
 20518 ;;		_modbus_response_process
 20519 ;;		_data_api_rt_data_save
 20520 ;;		_data_api_calibration_table_data_save
 20521 ;; This function uses a non-reentrant model
 20522 ;;
 20523                           
 20524                           
 20525                           ;psect for function _crc_verify
 20526  1396                     _crc_verify:	
 20527                           
 20528                           ;crc16_sf.c: 79: uint16_t expected,crccal;
 20529                           ;crc16_sf.c: 82: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 20530                           
 20531                           ;incstack = 0
 20532                           ; Regs used in _crc_verify: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20533  1396  3034               	movlw	low crc_verify@expected
 20534  1397  00F3               	movwf	m_mem_cpy_len@d
 20535  1398  3000               	movlw	high crc_verify@expected
 20536  1399  00F4               	movwf	m_mem_cpy_len@d+1
 20537  139A  0020               	movlb	0	; select bank0
 20538  139B  082D               	movf	crc_verify@n,w
 20539  139C  072B               	addwf	crc_verify@message,w
 20540  139D  00AF               	movwf	??_crc_verify
 20541  139E  082E               	movf	crc_verify@n+1,w
 20542  139F  3D2C               	addwfc	crc_verify@message+1,w
 20543  13A0  00B0               	movwf	??_crc_verify+1
 20544  13A1  082F               	movf	??_crc_verify,w
 20545  13A2  3EFE               	addlw	254
 20546  13A3  00F5               	movwf	m_mem_cpy_len@s
 20547  13A4  30FF               	movlw	255
 20548  13A5  3D30               	addwfc	??_crc_verify+1,w
 20549  13A6  00F6               	movwf	m_mem_cpy_len@s+1
 20550  13A7  3002               	movlw	2
 20551  13A8  00B1               	movwf	??_crc_verify+2
 20552  13A9  0831               	movf	??_crc_verify+2,w
 20553  13AA  00F7               	movwf	m_mem_cpy_len@len
 20554  13AB  319F  2756  3193   	fcall	_m_mem_cpy_len
 20555                           
 20556                           ;crc16_sf.c: 83: crccal=crc_sum(message,n - 2);
 20557  13AE  0020               	movlb	0	; select bank0
 20558  13AF  082C               	movf	crc_verify@message+1,w
 20559  13B0  00F4               	movwf	crc_sum@puchMsg+1
 20560  13B1  082B               	movf	crc_verify@message,w
 20561  13B2  00F3               	movwf	crc_sum@puchMsg
 20562  13B3  082D               	movf	crc_verify@n,w
 20563  13B4  3EFE               	addlw	254
 20564  13B5  00F5               	movwf	crc_sum@usDataLen
 20565  13B6  30FF               	movlw	255
 20566  13B7  3D2E               	addwfc	crc_verify@n+1,w
 20567  13B8  00F6               	movwf	crc_sum@usDataLen+1
 20568  13B9  3194  249F  3193   	fcall	_crc_sum
 20569  13BC  0874               	movf	?_crc_sum+1,w
 20570  13BD  0020               	movlb	0	; select bank0
 20571  13BE  00B3               	movwf	crc_verify@crccal+1
 20572  13BF  0873               	movf	?_crc_sum,w
 20573  13C0  00B2               	movwf	crc_verify@crccal
 20574                           
 20575                           ;crc16_sf.c: 84: if(expected!=crccal)return 0;
 20576  13C1  0833               	movf	crc_verify@crccal+1,w
 20577  13C2  0635               	xorwf	crc_verify@expected+1,w
 20578  13C3  1D03               	skipz
 20579  13C4  2BC7               	goto	u10375
 20580  13C5  0832               	movf	crc_verify@crccal,w
 20581  13C6  0634               	xorwf	crc_verify@expected,w
 20582  13C7                     u10375:	
 20583  13C7  1903               	skipnz
 20584  13C8  2BCB               	goto	l12087
 20585  13C9  3000               	movlw	0
 20586  13CA  0008               	return
 20587  13CB                     l12087:	
 20588                           
 20589                           ;crc16_sf.c: 85: return 1;
 20590  13CB  3001               	movlw	1
 20591  13CC  0008               	return
 20592  13CD                     __end_of_crc_verify:	
 20593                           
 20594                           	psect	text78
 20595  1F56                     __ptext78:	
 20596 ;; *************** function _m_mem_cpy_len *****************
 20597 ;; Defined at:
 20598 ;;		line 47 in file "src/depend/m_string.c"
 20599 ;; Parameters:    Size  Location     Type
 20600 ;;  d               2    3[COMMON] PTR unsigned char 
 20601 ;;		 -> crc_verify@expected(2), pcd_mifare_transceive@cmdBuffer(18), LCDDATA0(1), cardWriteBuf(18), 
 20602 ;;		 -> comBuffer(128), flashOpStr(21), uiAdjbuf(8), 
 20603 ;;  s               2    5[COMMON] PTR unsigned char 
 20604 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), pLCD(24), 
 20605 ;;		 -> defWriteBlock3(18), ctrlByteDefault(4), cardWriteBuf(18), cardKeyCreatKey(6), 
 20606 ;;		 -> userKeyB(6), cardUidBlockBuf(18), bkupSystemData(72), RAM(4096), 
 20607 ;;		 -> comBuffer(128), Main_flowCalibrationTable(124), flashOpStr(21), uiAdjbuf(8), 
 20608 ;;		 -> mainSystemData.flowRatio(2), rtBalanceMoney(4), __q31(4), mainSystemData(72), 
 20609 ;;		 -> __t16(2), 
 20610 ;;  len             1    7[COMMON] unsigned char 
 20611 ;; Auto vars:     Size  Location     Type
 20612 ;;		None
 20613 ;; Return value:  Size  Location     Type
 20614 ;;                  1    wreg      void 
 20615 ;; Registers used:
 20616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 20617 ;; Tracked objects:
 20618 ;;		On entry : 0/0
 20619 ;;		On exit  : 0/0
 20620 ;;		Unchanged: 0/0
 20621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20622 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20623 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20624 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20625 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20626 ;;Total ram usage:        6 bytes
 20627 ;; Hardware stack levels used:    1
 20628 ;; Hardware stack levels required when called:    2
 20629 ;; This function calls:
 20630 ;;		Nothing
 20631 ;; This function is called by:
 20632 ;;		_data_api_system_data_init
 20633 ;;		_rfid_comm_process_fk
 20634 ;;		_rfid_comm_process_hs
 20635 ;;		_lcd_disp_refresh
 20636 ;;		_pcd_mifare_transceive
 20637 ;;		_crc_verify
 20638 ;;		_ui_key_process_enter
 20639 ;;		_ui_key_set_process
 20640 ;;		_modbus_response_write_flash_sys
 20641 ;;		_modbus_response_write_flash_clib
 20642 ;;		_modbus_response_read_flash_data
 20643 ;;		_modbus_response_read_status_register
 20644 ;;		_data_api_rt_data_save
 20645 ;;		_data_api_calibration_table_data_save
 20646 ;; This function uses a non-reentrant model
 20647 ;;
 20648                           
 20649                           
 20650                           ;psect for function _m_mem_cpy_len
 20651  1F56                     _m_mem_cpy_len:	
 20652  1F56                     l11511:	
 20653                           ;m_string.c: 50: while(len)
 20654                           
 20655                           ;incstack = 0
 20656                           ; Regs used in _m_mem_cpy_len: [wreg-fsr1h+status,2+status,0+pclath]
 20657                           
 20658  1F56  0877               	movf	m_mem_cpy_len@len,w
 20659  1F57  1903               	btfsc	3,2
 20660  1F58  0008               	return
 20661                           
 20662                           ;m_string.c: 51: {
 20663                           ;m_string.c: 52: *d++=*s++;
 20664  1F59  0875               	movf	m_mem_cpy_len@s,w
 20665  1F5A  0084               	movwf	4
 20666  1F5B  0876               	movf	m_mem_cpy_len@s+1,w
 20667  1F5C  0085               	movwf	5
 20668  1F5D  0800               	movf	0,w	;code access
 20669  1F5E  0020               	movlb	0	; select bank0
 20670  1F5F  00A0               	movwf	??_m_mem_cpy_len
 20671  1F60  0873               	movf	m_mem_cpy_len@d,w
 20672  1F61  0086               	movwf	6
 20673  1F62  0874               	movf	m_mem_cpy_len@d+1,w
 20674  1F63  0087               	movwf	7
 20675  1F64  0820               	movf	??_m_mem_cpy_len,w
 20676  1F65  0081               	movwf	1
 20677  1F66  3001               	movlw	1
 20678  1F67  07F5               	addwf	m_mem_cpy_len@s,f
 20679  1F68  3000               	movlw	0
 20680  1F69  3DF6               	addwfc	m_mem_cpy_len@s+1,f
 20681  1F6A  3001               	movlw	1
 20682  1F6B  07F3               	addwf	m_mem_cpy_len@d,f
 20683  1F6C  3000               	movlw	0
 20684  1F6D  3DF4               	addwfc	m_mem_cpy_len@d+1,f
 20685                           
 20686                           ;m_string.c: 53: len--;
 20687  1F6E  3001               	movlw	1
 20688  1F6F  02F7               	subwf	m_mem_cpy_len@len,f
 20689  1F70  2F56               	goto	l11511
 20690  1F71                     __end_of_m_mem_cpy_len:	
 20691                           
 20692                           	psect	text79
 20693  12CE                     __ptext79:	
 20694 ;; *************** function _crc_append *****************
 20695 ;; Defined at:
 20696 ;;		line 87 in file "src/protocol/crc16_sf.c"
 20697 ;; Parameters:    Size  Location     Type
 20698 ;;  message         2   11[BANK0 ] PTR unsigned char 
 20699 ;;		 -> comBuffer(128), 
 20700 ;;  n               2   13[BANK0 ] unsigned int 
 20701 ;; Auto vars:     Size  Location     Type
 20702 ;;  crc             2   20[BANK0 ] unsigned int 
 20703 ;; Return value:  Size  Location     Type
 20704 ;;                  1    wreg      void 
 20705 ;; Registers used:
 20706 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20707 ;; Tracked objects:
 20708 ;;		On entry : 0/0
 20709 ;;		On exit  : 0/0
 20710 ;;		Unchanged: 0/0
 20711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20712 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20713 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20714 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 20715 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 20716 ;;Total ram usage:       11 bytes
 20717 ;; Hardware stack levels used:    1
 20718 ;; Hardware stack levels required when called:    3
 20719 ;; This function calls:
 20720 ;;		_crc_sum
 20721 ;; This function is called by:
 20722 ;;		_data_api_calibration_table_data_init
 20723 ;;		_data_api_system_data_init
 20724 ;;		_rfid_comm_process_fk
 20725 ;;		_modbus_response_illgeal_function
 20726 ;;		_modbus_response_read_flash_data
 20727 ;;		_modbus_response_read_status_register
 20728 ;;		_data_api_rt_data_save
 20729 ;;		_data_api_calibration_table_data_save
 20730 ;; This function uses a non-reentrant model
 20731 ;;
 20732                           
 20733                           
 20734                           ;psect for function _crc_append
 20735  12CE                     _crc_append:	
 20736                           
 20737                           ;crc16_sf.c: 89: uint16_t crc;
 20738                           ;crc16_sf.c: 90: crc = crc_sum(message, n);
 20739                           
 20740                           ;incstack = 0
 20741                           ; Regs used in _crc_append: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20742  12CE  0020               	movlb	0	; select bank0
 20743  12CF  082C               	movf	crc_append@message+1,w
 20744  12D0  00F4               	movwf	crc_sum@puchMsg+1
 20745  12D1  082B               	movf	crc_append@message,w
 20746  12D2  00F3               	movwf	crc_sum@puchMsg
 20747  12D3  082E               	movf	crc_append@n+1,w
 20748  12D4  00F6               	movwf	crc_sum@usDataLen+1
 20749  12D5  082D               	movf	crc_append@n,w
 20750  12D6  00F5               	movwf	crc_sum@usDataLen
 20751  12D7  3194  249F         	fcall	_crc_sum
 20752  12D9  0874               	movf	?_crc_sum+1,w
 20753  12DA  0020               	movlb	0	; select bank0
 20754  12DB  00B5               	movwf	crc_append@crc+1
 20755  12DC  0873               	movf	?_crc_sum,w
 20756  12DD  00B4               	movwf	crc_append@crc
 20757                           
 20758                           ;crc16_sf.c: 91: message[n] = (uint8_t)(crc & 0xff);
 20759  12DE  082D               	movf	crc_append@n,w
 20760  12DF  072B               	addwf	crc_append@message,w
 20761  12E0  00AF               	movwf	??_crc_append
 20762  12E1  082E               	movf	crc_append@n+1,w
 20763  12E2  3D2C               	addwfc	crc_append@message+1,w
 20764  12E3  00B0               	movwf	??_crc_append+1
 20765  12E4  082F               	movf	??_crc_append,w
 20766  12E5  0086               	movwf	6
 20767  12E6  0830               	movf	??_crc_append+1,w
 20768  12E7  0087               	movwf	7
 20769  12E8  0834               	movf	crc_append@crc,w
 20770  12E9  0081               	movwf	1
 20771                           
 20772                           ;crc16_sf.c: 92: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 20773  12EA  0835               	movf	crc_append@crc+1,w
 20774  12EB  00AF               	movwf	??_crc_append
 20775  12EC  082D               	movf	crc_append@n,w
 20776  12ED  3E01               	addlw	1
 20777  12EE  00B0               	movwf	??_crc_append+1
 20778  12EF  3000               	movlw	0
 20779  12F0  3D2E               	addwfc	crc_append@n+1,w
 20780  12F1  00B1               	movwf	??_crc_append+2
 20781  12F2  0830               	movf	??_crc_append+1,w
 20782  12F3  072B               	addwf	crc_append@message,w
 20783  12F4  00B2               	movwf	??_crc_append+3
 20784  12F5  0831               	movf	??_crc_append+2,w
 20785  12F6  3D2C               	addwfc	crc_append@message+1,w
 20786  12F7  00B3               	movwf	??_crc_append+4
 20787  12F8  0832               	movf	??_crc_append+3,w
 20788  12F9  0086               	movwf	6
 20789  12FA  0833               	movf	??_crc_append+4,w
 20790  12FB  0087               	movwf	7
 20791  12FC  082F               	movf	??_crc_append,w
 20792  12FD  0081               	movwf	1
 20793  12FE  0008               	return
 20794  12FF                     __end_of_crc_append:	
 20795                           
 20796                           	psect	text80
 20797  149F                     __ptext80:	
 20798 ;; *************** function _crc_sum *****************
 20799 ;; Defined at:
 20800 ;;		line 62 in file "src/protocol/crc16_sf.c"
 20801 ;; Parameters:    Size  Location     Type
 20802 ;;  puchMsg         2    3[COMMON] PTR unsigned char 
 20803 ;;		 -> bkupSystemData(72), comBuffer(128), Main_flowCalibrationTable(124), mainSystemData(72), 
 20804 ;;  usDataLen       2    5[COMMON] unsigned int 
 20805 ;; Auto vars:     Size  Location     Type
 20806 ;;  uIndex          2    7[BANK0 ] unsigned int 
 20807 ;;  len             2    5[BANK0 ] unsigned int 
 20808 ;;  uchCRCLo        1   10[BANK0 ] unsigned char 
 20809 ;;  uchCRCHi        1    9[BANK0 ] unsigned char 
 20810 ;; Return value:  Size  Location     Type
 20811 ;;                  2    3[COMMON] unsigned int 
 20812 ;; Registers used:
 20813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 20814 ;; Tracked objects:
 20815 ;;		On entry : 0/0
 20816 ;;		On exit  : 0/0
 20817 ;;		Unchanged: 0/0
 20818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20820 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 20821 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 20822 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0
 20823 ;;Total ram usage:       15 bytes
 20824 ;; Hardware stack levels used:    1
 20825 ;; Hardware stack levels required when called:    2
 20826 ;; This function calls:
 20827 ;;		Nothing
 20828 ;; This function is called by:
 20829 ;;		_crc_verify
 20830 ;;		_crc_append
 20831 ;; This function uses a non-reentrant model
 20832 ;;
 20833                           
 20834                           
 20835                           ;psect for function _crc_sum
 20836  149F                     _crc_sum:	
 20837                           
 20838                           ;crc16_sf.c: 64: uint16_t len;
 20839                           ;crc16_sf.c: 65: len=usDataLen;
 20840                           
 20841                           ;incstack = 0
 20842                           ; Regs used in _crc_sum: [wreg-fsr0h+status,2+status,0+pclath]
 20843  149F  0876               	movf	crc_sum@usDataLen+1,w
 20844  14A0  0020               	movlb	0	; select bank0
 20845  14A1  00A6               	movwf	crc_sum@len+1
 20846  14A2  0875               	movf	crc_sum@usDataLen,w
 20847  14A3  00A5               	movwf	crc_sum@len
 20848                           
 20849                           ;crc16_sf.c: 66: uint8_t uchCRCHi = 0xFF ;
 20850  14A4  30FF               	movlw	255
 20851  14A5  00A0               	movwf	??_crc_sum
 20852  14A6  0820               	movf	??_crc_sum,w
 20853  14A7  00A9               	movwf	crc_sum@uchCRCHi
 20854                           
 20855                           ;crc16_sf.c: 67: uint8_t uchCRCLo = 0xFF ;
 20856  14A8  30FF               	movlw	255
 20857  14A9  00A0               	movwf	??_crc_sum
 20858  14AA  0820               	movf	??_crc_sum,w
 20859  14AB  00AA               	movwf	crc_sum@uchCRCLo
 20860  14AC                     l11957:	
 20861                           ;crc16_sf.c: 68: uint16_t uIndex ;
 20862                           ;crc16_sf.c: 69: while (len--)
 20863                           
 20864  14AC  3001               	movlw	1
 20865  14AD  02A5               	subwf	crc_sum@len,f
 20866  14AE  3000               	movlw	0
 20867  14AF  3BA6               	subwfb	crc_sum@len+1,f
 20868  14B0  0A25               	incf	crc_sum@len,w
 20869  14B1  1903               	btfsc	3,2
 20870  14B2  0A26               	incf	crc_sum@len+1,w
 20871  14B3  1903               	btfsc	3,2
 20872  14B4  2CDF               	goto	l11959
 20873                           
 20874                           ;crc16_sf.c: 70: {
 20875                           ;crc16_sf.c: 71: uIndex = (uchCRCLo ^ *puchMsg++) ;
 20876  14B5  0873               	movf	crc_sum@puchMsg,w
 20877  14B6  0084               	movwf	4
 20878  14B7  0874               	movf	crc_sum@puchMsg+1,w
 20879  14B8  0085               	movwf	5
 20880  14B9  0800               	movf	0,w	;code access
 20881  14BA  062A               	xorwf	crc_sum@uchCRCLo,w
 20882  14BB  00A0               	movwf	??_crc_sum
 20883  14BC  01A1               	clrf	??_crc_sum+1
 20884  14BD  0820               	movf	??_crc_sum,w
 20885  14BE  00A7               	movwf	crc_sum@uIndex
 20886  14BF  0821               	movf	??_crc_sum+1,w
 20887  14C0  00A8               	movwf	crc_sum@uIndex+1
 20888  14C1  3001               	movlw	1
 20889  14C2  07F3               	addwf	crc_sum@puchMsg,f
 20890  14C3  3000               	movlw	0
 20891  14C4  3DF4               	addwfc	crc_sum@puchMsg+1,f
 20892                           
 20893                           ;crc16_sf.c: 72: uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 20894  14C5  0828               	movf	crc_sum@uIndex+1,w
 20895  14C6  0085               	movwf	5
 20896  14C7  0827               	movf	crc_sum@uIndex,w
 20897  14C8  0084               	movwf	4
 20898  14C9  3098               	movlw	low (_auchCRCHi| (0+32768))
 20899  14CA  0784               	addwf	4,f
 20900  14CB  3081               	movlw	high (_auchCRCHi| (0+32768))
 20901  14CC  3D85               	addwfc	5,f
 20902  14CD  0800               	movf	0,w	;code access
 20903  14CE  0629               	xorwf	crc_sum@uchCRCHi,w
 20904  14CF  00A0               	movwf	??_crc_sum
 20905  14D0  0820               	movf	??_crc_sum,w
 20906  14D1  00AA               	movwf	crc_sum@uchCRCLo
 20907                           
 20908                           ;crc16_sf.c: 73: uchCRCHi = auchCRCLo[uIndex] ;
 20909  14D2  0828               	movf	crc_sum@uIndex+1,w
 20910  14D3  0085               	movwf	5
 20911  14D4  0827               	movf	crc_sum@uIndex,w
 20912  14D5  0084               	movwf	4
 20913  14D6  3098               	movlw	low (_auchCRCLo| (0+32768))
 20914  14D7  0784               	addwf	4,f
 20915  14D8  3080               	movlw	high (_auchCRCLo| (0+32768))
 20916  14D9  3D85               	addwfc	5,f
 20917  14DA  0800               	movf	0,w	;code access
 20918  14DB  00A0               	movwf	??_crc_sum
 20919  14DC  0820               	movf	??_crc_sum,w
 20920  14DD  00A9               	movwf	crc_sum@uchCRCHi
 20921  14DE  2CAC               	goto	l11957
 20922  14DF                     l11959:	
 20923                           
 20924                           ;crc16_sf.c: 74: }
 20925                           ;crc16_sf.c: 75: return (uchCRCHi << 8 | uchCRCLo) ;
 20926  14DF  082A               	movf	crc_sum@uchCRCLo,w
 20927  14E0  00A0               	movwf	??_crc_sum
 20928  14E1  01A1               	clrf	??_crc_sum+1
 20929  14E2  0829               	movf	crc_sum@uchCRCHi,w
 20930  14E3  00A2               	movwf	??_crc_sum+2
 20931  14E4  01A3               	clrf	??_crc_sum+3
 20932  14E5  0822               	movf	??_crc_sum+2,w
 20933  14E6  00A3               	movwf	??_crc_sum+3
 20934  14E7  01A2               	clrf	??_crc_sum+2
 20935  14E8  0820               	movf	??_crc_sum,w
 20936  14E9  0422               	iorwf	??_crc_sum+2,w
 20937  14EA  00F3               	movwf	?_crc_sum
 20938  14EB  0821               	movf	??_crc_sum+1,w
 20939  14EC  0423               	iorwf	??_crc_sum+3,w
 20940  14ED  00F4               	movwf	?_crc_sum+1
 20941  14EE  0008               	return
 20942  14EF                     __end_of_crc_sum:	
 20943                           
 20944                           	psect	text81
 20945  1012                     __ptext81:	
 20946 ;; *************** function ___wmul *****************
 20947 ;; Defined at:
 20948 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 20949 ;; Parameters:    Size  Location     Type
 20950 ;;  multiplier      2    3[COMMON] unsigned int 
 20951 ;;  multiplicand    2    5[COMMON] unsigned int 
 20952 ;; Auto vars:     Size  Location     Type
 20953 ;;  product         2    0[BANK0 ] unsigned int 
 20954 ;; Return value:  Size  Location     Type
 20955 ;;                  2    3[COMMON] unsigned int 
 20956 ;; Registers used:
 20957 ;;		wreg, status,2, status,0
 20958 ;; Tracked objects:
 20959 ;;		On entry : 0/0
 20960 ;;		On exit  : 0/0
 20961 ;;		Unchanged: 0/0
 20962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20963 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20964 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20966 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20967 ;;Total ram usage:        6 bytes
 20968 ;; Hardware stack levels used:    1
 20969 ;; Hardware stack levels required when called:    2
 20970 ;; This function calls:
 20971 ;;		Nothing
 20972 ;; This function is called by:
 20973 ;;		_data_api_calibration_table_data_init
 20974 ;;		_ui_key_set_process
 20975 ;;		_app_flow_adc_2_flow
 20976 ;; This function uses a non-reentrant model
 20977 ;;
 20978                           
 20979                           
 20980                           ;psect for function ___wmul
 20981  1012                     ___wmul:	
 20982                           
 20983                           ;incstack = 0
 20984                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 20985  1012  0020               	movlb	0	; select bank0
 20986  1013  01A0               	clrf	___wmul@product
 20987  1014  01A1               	clrf	___wmul@product+1
 20988  1015                     l12617:	
 20989  1015  1C73               	btfss	___wmul@multiplier,0
 20990  1016  281C               	goto	l2549
 20991  1017  0875               	movf	___wmul@multiplicand,w
 20992  1018  0020               	movlb	0	; select bank0
 20993  1019  07A0               	addwf	___wmul@product,f
 20994  101A  0876               	movf	___wmul@multiplicand+1,w
 20995  101B  3DA1               	addwfc	___wmul@product+1,f
 20996  101C                     l2549:	
 20997  101C  3001               	movlw	1
 20998  101D                     u11125:	
 20999  101D  35F5               	lslf	___wmul@multiplicand,f
 21000  101E  0DF6               	rlf	___wmul@multiplicand+1,f
 21001  101F  0B89               	decfsz	9,f
 21002  1020  281D               	goto	u11125
 21003  1021  3001               	movlw	1
 21004  1022                     u11135:	
 21005  1022  36F4               	lsrf	___wmul@multiplier+1,f
 21006  1023  0CF3               	rrf	___wmul@multiplier,f
 21007  1024  0B89               	decfsz	9,f
 21008  1025  2822               	goto	u11135
 21009  1026  0873               	movf	___wmul@multiplier,w
 21010  1027  0474               	iorwf	___wmul@multiplier+1,w
 21011  1028  1D03               	btfss	3,2
 21012  1029  2815               	goto	l12617
 21013  102A  0020               	movlb	0	; select bank0
 21014  102B  0821               	movf	___wmul@product+1,w
 21015  102C  00F4               	movwf	?___wmul+1
 21016  102D  0820               	movf	___wmul@product,w
 21017  102E  00F3               	movwf	?___wmul
 21018  102F  0008               	return
 21019  1030                     __end_of___wmul:	
 21020                           
 21021                           	psect	intentry
 21022  0004                     __pintentry:	
 21023 ;; *************** function _INTERRUPT_InterruptManager *****************
 21024 ;; Defined at:
 21025 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 21026 ;; Parameters:    Size  Location     Type
 21027 ;;		None
 21028 ;; Auto vars:     Size  Location     Type
 21029 ;;		None
 21030 ;; Return value:  Size  Location     Type
 21031 ;;                  1    wreg      void 
 21032 ;; Registers used:
 21033 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21034 ;; Tracked objects:
 21035 ;;		On entry : 0/0
 21036 ;;		On exit  : 0/0
 21037 ;;		Unchanged: 0/0
 21038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21041 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21042 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21043 ;;Total ram usage:        1 bytes
 21044 ;; Hardware stack levels used:    1
 21045 ;; Hardware stack levels required when called:    1
 21046 ;; This function calls:
 21047 ;;		_EUSART1_Receive_ISR
 21048 ;;		_EUSART1_Transmit_ISR
 21049 ;;		_TMR0_ISR
 21050 ;;		_TMR1_ISR
 21051 ;; This function is called by:
 21052 ;;		Interrupt level 1
 21053 ;; This function uses a non-reentrant model
 21054 ;;
 21055                           
 21056  0004                     _INTERRUPT_InterruptManager:	
 21057                           
 21058                           ;incstack = 0
 21059  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 21060                           
 21061                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 21062  0005  3180               	pagesel	$
 21063  0006  0020               	movlb	0	; select bank0
 21064  0007  087F               	movf	127,w
 21065  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 21066                           
 21067                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 21068  0009  1A8B               	btfsc	11,5	;volatile
 21069  000A  1D0B               	btfss	11,2	;volatile
 21070  000B  2810               	goto	i1l159
 21071                           
 21072                           ;interrupt_manager.c: 56: {
 21073                           ;interrupt_manager.c: 57: TMR0_ISR();
 21074  000C  319E  2606  3180   	fcall	_TMR0_ISR
 21075                           
 21076                           ;interrupt_manager.c: 58: }
 21077  000F  2832               	goto	i1l167
 21078  0010                     i1l159:	
 21079                           
 21080                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 21081  0010  1F0B               	btfss	11,6	;volatile
 21082  0011  281C               	goto	i1l161
 21083  0012  0021               	movlb	1	; select bank1
 21084  0013  1E11               	btfss	17,4	;volatile
 21085  0014  281C               	goto	i1l161
 21086  0015  0020               	movlb	0	; select bank0
 21087  0016  1E11               	btfss	17,4	;volatile
 21088  0017  281C               	goto	i1l161
 21089                           
 21090                           ;interrupt_manager.c: 60: {
 21091                           ;interrupt_manager.c: 61: EUSART1_Transmit_ISR();
 21092  0018  319D  254A  3180   	fcall	_EUSART1_Transmit_ISR
 21093                           
 21094                           ;interrupt_manager.c: 62: }
 21095  001B  2832               	goto	i1l167
 21096  001C                     i1l161:	
 21097                           
 21098                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 21099  001C  1F0B               	btfss	11,6	;volatile
 21100  001D  2828               	goto	i1l163
 21101  001E  0021               	movlb	1	; select bank1
 21102  001F  1E91               	btfss	17,5	;volatile
 21103  0020  2828               	goto	i1l163
 21104  0021  0020               	movlb	0	; select bank0
 21105  0022  1E91               	btfss	17,5	;volatile
 21106  0023  2828               	goto	i1l163
 21107                           
 21108                           ;interrupt_manager.c: 64: {
 21109                           ;interrupt_manager.c: 65: EUSART1_Receive_ISR();
 21110  0024  3190  2094  3180   	fcall	_EUSART1_Receive_ISR
 21111                           
 21112                           ;interrupt_manager.c: 66: }
 21113  0027  2832               	goto	i1l167
 21114  0028                     i1l163:	
 21115                           
 21116                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 21117  0028  1F0B               	btfss	11,6	;volatile
 21118  0029  2832               	goto	i1l167
 21119  002A  0021               	movlb	1	; select bank1
 21120  002B  1C11               	btfss	17,0	;volatile
 21121  002C  2832               	goto	i1l167
 21122  002D  0020               	movlb	0	; select bank0
 21123  002E  1C11               	btfss	17,0	;volatile
 21124  002F  2832               	goto	i1l167
 21125                           
 21126                           ;interrupt_manager.c: 68: {
 21127                           ;interrupt_manager.c: 69: TMR1_ISR();
 21128  0030  319E  2617         	fcall	_TMR1_ISR
 21129  0032                     i1l167:	
 21130                           ;interrupt_manager.c: 71: else
 21131                           ;interrupt_manager.c: 72: {
 21132                           
 21133                           ;interrupt_manager.c: 70: }
 21134                           
 21135  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 21136  0033  0020               	movlb	0	; select bank0
 21137  0034  00FF               	movwf	127
 21138  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 21139  0036  0009               	retfie
 21140  0037                     __end_of_INTERRUPT_InterruptManager:	
 21141                           
 21142                           	psect	text83
 21143  1E17                     __ptext83:	
 21144 ;; *************** function _TMR1_ISR *****************
 21145 ;; Defined at:
 21146 ;;		line 156 in file "mcc_generated_files/tmr1.c"
 21147 ;; Parameters:    Size  Location     Type
 21148 ;;		None
 21149 ;; Auto vars:     Size  Location     Type
 21150 ;;		None
 21151 ;; Return value:  Size  Location     Type
 21152 ;;                  1    wreg      void 
 21153 ;; Registers used:
 21154 ;;		wreg, status,2, status,0
 21155 ;; Tracked objects:
 21156 ;;		On entry : 0/0
 21157 ;;		On exit  : 0/0
 21158 ;;		Unchanged: 0/0
 21159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21162 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21164 ;;Total ram usage:        1 bytes
 21165 ;; Hardware stack levels used:    1
 21166 ;; This function calls:
 21167 ;;		Nothing
 21168 ;; This function is called by:
 21169 ;;		_INTERRUPT_InterruptManager
 21170 ;; This function uses a non-reentrant model
 21171 ;;
 21172                           
 21173                           
 21174                           ;psect for function _TMR1_ISR
 21175  1E17                     _TMR1_ISR:	
 21176                           
 21177                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
 21178                           
 21179                           ;incstack = 0
 21180                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0]
 21181  1E17  0020               	movlb	0	; select bank0
 21182  1E18  1011               	bcf	17,0	;volatile
 21183                           
 21184                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 21185  1E19  0021               	movlb	1	; select bank1
 21186  1E1A  0860               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 21187  1E1B  0020               	movlb	0	; select bank0
 21188  1E1C  0097               	movwf	23	;volatile
 21189                           
 21190                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
 21191  1E1D  0021               	movlb	1	; select bank1
 21192  1E1E  085F               	movf	_timer1ReloadVal^(0+128),w	;volatile
 21193  1E1F  0020               	movlb	0	; select bank0
 21194  1E20  0096               	movwf	22	;volatile
 21195                           
 21196                           ;tmr1.c: 169: systemTickerSec++;
 21197  1E21  3001               	movlw	1
 21198  1E22  00F0               	movwf	??_TMR1_ISR
 21199  1E23  0870               	movf	??_TMR1_ISR,w
 21200  1E24  0022               	movlb	2	; select bank2
 21201  1E25  07C4               	addwf	_systemTickerSec^(0+256),f
 21202                           
 21203                           ;tmr1.c: 170: Event |= (0x01<<5);
 21204  1E26  16C3               	bsf	_Event^(0+256),5
 21205  1E27  0008               	return
 21206  1E28                     __end_of_TMR1_ISR:	
 21207                           
 21208                           	psect	text84
 21209  1E06                     __ptext84:	
 21210 ;; *************** function _TMR0_ISR *****************
 21211 ;; Defined at:
 21212 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 21213 ;; Parameters:    Size  Location     Type
 21214 ;;		None
 21215 ;; Auto vars:     Size  Location     Type
 21216 ;;		None
 21217 ;; Return value:  Size  Location     Type
 21218 ;;                  1    wreg      void 
 21219 ;; Registers used:
 21220 ;;		wreg
 21221 ;; Tracked objects:
 21222 ;;		On entry : 0/0
 21223 ;;		On exit  : 0/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21230 ;;Total ram usage:        0 bytes
 21231 ;; Hardware stack levels used:    1
 21232 ;; This function calls:
 21233 ;;		Nothing
 21234 ;; This function is called by:
 21235 ;;		_INTERRUPT_InterruptManager
 21236 ;; This function uses a non-reentrant model
 21237 ;;
 21238                           
 21239                           
 21240                           ;psect for function _TMR0_ISR
 21241  1E06                     _TMR0_ISR:	
 21242                           
 21243                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
 21244                           
 21245                           ;incstack = 0
 21246                           ; Regs used in _TMR0_ISR: [wreg]
 21247  1E06  110B               	bcf	11,2	;volatile
 21248                           
 21249                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
 21250  1E07  0021               	movlb	1	; select bank1
 21251  1E08  0867               	movf	_timer0ReloadVal^(0+128),w	;volatile
 21252  1E09  0020               	movlb	0	; select bank0
 21253  1E0A  0095               	movwf	21	;volatile
 21254                           
 21255                           ;tmr0.c: 120: systemTikerms+=10;
 21256  1E0B  300A               	movlw	10
 21257  1E0C  0023               	movlb	3	; select bank3
 21258  1E0D  07AE               	addwf	_systemTikerms^(0+384),f
 21259  1E0E  3000               	movlw	0
 21260  1E0F  3DAF               	addwfc	(_systemTikerms+1)^(0+384),f
 21261                           
 21262                           ;tmr0.c: 121: globlTickerms+=10;
 21263  1E10  300A               	movlw	10
 21264  1E11  07AC               	addwf	_globlTickerms^(0+384),f
 21265  1E12  3000               	movlw	0
 21266  1E13  3DAD               	addwfc	(_globlTickerms+1)^(0+384),f
 21267                           
 21268                           ;tmr0.c: 122: Event |= (0x01<<4);
 21269  1E14  0022               	movlb	2	; select bank2
 21270  1E15  1643               	bsf	_Event^(0+256),4
 21271  1E16  0008               	return
 21272  1E17                     __end_of_TMR0_ISR:	
 21273                           
 21274                           	psect	text85
 21275  1D4A                     __ptext85:	
 21276 ;; *************** function _EUSART1_Transmit_ISR *****************
 21277 ;; Defined at:
 21278 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 21279 ;; Parameters:    Size  Location     Type
 21280 ;;		None
 21281 ;; Auto vars:     Size  Location     Type
 21282 ;;		None
 21283 ;; Return value:  Size  Location     Type
 21284 ;;                  1    wreg      void 
 21285 ;; Registers used:
 21286 ;;		None
 21287 ;; Tracked objects:
 21288 ;;		On entry : 0/0
 21289 ;;		On exit  : 0/0
 21290 ;;		Unchanged: 0/0
 21291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21296 ;;Total ram usage:        0 bytes
 21297 ;; Hardware stack levels used:    1
 21298 ;; This function calls:
 21299 ;;		Nothing
 21300 ;; This function is called by:
 21301 ;;		_INTERRUPT_InterruptManager
 21302 ;; This function uses a non-reentrant model
 21303 ;;
 21304                           
 21305                           
 21306                           ;psect for function _EUSART1_Transmit_ISR
 21307  1D4A                     _EUSART1_Transmit_ISR:	
 21308                           
 21309                           ;eusart1.c: 183: PIE1bits.TX1IE = 0;
 21310                           
 21311                           ;incstack = 0
 21312                           ; Regs used in _EUSART1_Transmit_ISR: []
 21313  1D4A  0021               	movlb	1	; select bank1
 21314  1D4B  1211               	bcf	17,4	;volatile
 21315  1D4C  0008               	return
 21316  1D4D                     __end_of_EUSART1_Transmit_ISR:	
 21317                           
 21318                           	psect	text86
 21319  1094                     __ptext86:	
 21320 ;; *************** function _EUSART1_Receive_ISR *****************
 21321 ;; Defined at:
 21322 ;;		line 232 in file "mcc_generated_files/eusart1.c"
 21323 ;; Parameters:    Size  Location     Type
 21324 ;;		None
 21325 ;; Auto vars:     Size  Location     Type
 21326 ;;  t8              1    1[COMMON] unsigned char 
 21327 ;; Return value:  Size  Location     Type
 21328 ;;                  1    wreg      void 
 21329 ;; Registers used:
 21330 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21331 ;; Tracked objects:
 21332 ;;		On entry : 0/0
 21333 ;;		On exit  : 0/0
 21334 ;;		Unchanged: 0/0
 21335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21337 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21339 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21340 ;;Total ram usage:        2 bytes
 21341 ;; Hardware stack levels used:    1
 21342 ;; This function calls:
 21343 ;;		Nothing
 21344 ;; This function is called by:
 21345 ;;		_INTERRUPT_InterruptManager
 21346 ;; This function uses a non-reentrant model
 21347 ;;
 21348                           
 21349                           
 21350                           ;psect for function _EUSART1_Receive_ISR
 21351  1094                     _EUSART1_Receive_ISR:	
 21352                           
 21353                           ;eusart1.c: 234: uint8_t t8;
 21354                           ;eusart1.c: 235: if(1 == RC1STAbits.OERR)
 21355                           
 21356                           ;incstack = 0
 21357                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 21358  1094  0023               	movlb	3	; select bank3
 21359  1095  1C9D               	btfss	29,1	;volatile
 21360  1096  289A               	goto	i1l9173
 21361                           
 21362                           ;eusart1.c: 236: {
 21363                           ;eusart1.c: 239: RC1STAbits.CREN = 0;
 21364  1097  121D               	bcf	29,4	;volatile
 21365                           
 21366                           ;eusart1.c: 240: RC1STAbits.CREN = 1;
 21367  1098  161D               	bsf	29,4	;volatile
 21368                           
 21369                           ;eusart1.c: 242: }
 21370  1099  0008               	return
 21371  109A                     i1l9173:	
 21372                           
 21373                           ;eusart1.c: 243: else{
 21374                           ;eusart1.c: 244: t8=RC1REG;
 21375  109A  0819               	movf	25,w	;volatile
 21376  109B  00F0               	movwf	??_EUSART1_Receive_ISR
 21377  109C  0870               	movf	??_EUSART1_Receive_ISR,w
 21378  109D  00F1               	movwf	EUSART1_Receive_ISR@t8
 21379                           
 21380                           ;eusart1.c: 245: if(uart1ReceivedCount<80)
 21381  109E  3000               	movlw	0
 21382  109F  0022               	movlb	2	; select bank2
 21383  10A0  0235               	subwf	(_uart1ReceivedCount+1)^(0+256),w
 21384  10A1  3050               	movlw	80
 21385  10A2  1903               	skipnz
 21386  10A3  0234               	subwf	_uart1ReceivedCount^(0+256),w
 21387  10A4  1803               	skipnc
 21388  10A5  28B3               	goto	i1l9179
 21389                           
 21390                           ;eusart1.c: 246: {
 21391                           ;eusart1.c: 247: uart1Buffer[uart1ReceivedCount]=t8;
 21392  10A6  0871               	movf	EUSART1_Receive_ISR@t8,w
 21393  10A7  00F0               	movwf	??_EUSART1_Receive_ISR
 21394  10A8  0834               	movf	_uart1ReceivedCount^(0+256),w
 21395  10A9  3EA0               	addlw	160
 21396  10AA  0086               	movwf	6
 21397  10AB  3004               	movlw	4	; select bank9/10
 21398  10AC  0087               	movwf	7
 21399  10AD  0870               	movf	??_EUSART1_Receive_ISR,w
 21400  10AE  0081               	movwf	1
 21401                           
 21402                           ;eusart1.c: 248: uart1ReceivedCount++;
 21403  10AF  3001               	movlw	1
 21404  10B0  07B4               	addwf	_uart1ReceivedCount^(0+256),f
 21405  10B1  3000               	movlw	0
 21406  10B2  3DB5               	addwfc	(_uart1ReceivedCount+1)^(0+256),f
 21407  10B3                     i1l9179:	
 21408                           
 21409                           ;eusart1.c: 249: }
 21410                           ;eusart1.c: 250: uart1ReceivedTimer=1;
 21411  10B3  01C2               	clrf	_uart1ReceivedTimer^(0+256)
 21412  10B4  0AC2               	incf	_uart1ReceivedTimer^(0+256),f
 21413                           
 21414                           ;eusart1.c: 251: uart1ReceivedTimeout=0;
 21415  10B5  0023               	movlb	3	; select bank3
 21416  10B6  01AA               	clrf	_uart1ReceivedTimeout^(0+384)
 21417  10B7  01AB               	clrf	(_uart1ReceivedTimeout+1)^(0+384)
 21418  10B8  0008               	return
 21419  10B9                     __end_of_EUSART1_Receive_ISR:	
 21420  007E                     btemp	set	126	;btemp
 21421  007E                     int$flags	set	126
 21422  007E                     wtemp0	set	126


Data Sizes:
    Strings     206
    Constant    652
    Data        10
    BSS         222
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     79      79
    BANK1            80     55      80
    BANK2            80      0      80
    BANK3            80      0      60
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8             8      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    mfrc522_bal_read_reg_len$1	PTR unsigned char  size(1) Largest target is 0

    main@p8	PTR unsigned char  size(1) Largest target is 2
		 -> main@t16(BANK1[2]), 

    crc_append@message	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 128
		 -> bkupSystemData(CODE[72]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(CODE[124]), mainSystemData(CODE[72]), 

    crc_sum@puchMsg	PTR unsigned char  size(2) Largest target is 128
		 -> bkupSystemData(CODE[72]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(CODE[124]), mainSystemData(CODE[72]), 

    pcd_mifare_transceive@sendData	PTR unsigned char  size(2) Largest target is 128
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), cardWriteBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), 

    mifare_write@buffer	PTR unsigned char  size(2) Largest target is 128
		 -> cardWriteBuf(BANK8[18]), comBuffer(BIGRAM[128]), 

    mifare_read@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> rdLen(BANK2[1]), 

    mifare_read@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardUidBlockBuf(BANK8[18]), 

    picc_authenticate@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_authenticate@key	PTR struct . size(2) Largest target is 6
		 -> userKeyB(BANK3[6]), defaultKeyA(CODE[6]), 

    picc_select@responseBuffer	PTR unsigned char  size(1) Largest target is 9
		 -> picc_select@buffer(BANK1[9]), 

    picc_select@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_req_a_or_wakeup_a@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> mfapi_is_new_card_present@bufferSize(BANK0[1]), 

    picc_req_a_or_wakeup_a@bufferATQA	PTR unsigned char  size(1) Largest target is 2
		 -> mfapi_is_new_card_present@bufferATQA(BANK0[2]), 

    pcd_comm_with_picc@rlen	PTR unsigned char  size(2) Largest target is 1
		 -> pcd_mifare_transceive@cmdBufferSize(BANK0[1]), picc_select@responseLength(BANK1[1]), mfapi_is_new_card_present@bufferSize(BANK0[1]), rdLen(BANK2[1]), 
		 -> NULL(NULL[0]), 

    pcd_comm_with_picc@rbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardUidBlockBuf(BANK8[18]), 
		 -> NULL(NULL[0]), 

    pcd_comm_with_picc@sbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), cardUidBlockBuf(BANK8[18]), 

    pcd_comm_with_picc@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@validBits(BANK0[1]), picc_select@txLastBits(BANK1[1]), picc_req_a_or_wakeup_a@validBits(BANK0[1]), NULL(NULL[0]), 

    mfrc522_hal_calculate_crc@result	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), pcd_comm_with_picc@controlBuffer(BANK0[2]), 
		 -> cardUidBlockBuf(BANK8[18]), 

    mfrc522_hal_calculate_crc@data	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), 
		 -> cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    mfrc522_bal_read_fifo_len_ex@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardUidBlockBuf(BANK8[18]), 
		 -> NULL(NULL[0]), 

    mfrc522_bal_write_reg_len@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    lcd_disp_str@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_28(CODE[9]), STR_27(CODE[9]), STR_26(CODE[9]), STR_25(CODE[9]), 
		 -> STR_24(CODE[8]), STR_23(CODE[6]), STR_21(CODE[9]), STR_20(CODE[9]), 
		 -> STR_19(CODE[9]), STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), 
		 -> STR_14(CODE[9]), STR_13(CODE[9]), STR_5(CODE[9]), lcdBuf(BANK2[9]), 
		 -> STR_1(CODE[9]), 

    pLcdReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR15[1]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 4096
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), pLCD(BANK3[24]), 
		 -> defWriteBlock3(CODE[18]), ctrlByteDefault(CODE[4]), cardWriteBuf(BANK8[18]), cardKeyCreatKey(CODE[6]), 
		 -> userKeyB(BANK3[6]), cardUidBlockBuf(BANK8[18]), bkupSystemData(CODE[72]), RAM(DATA[4096]), 
		 -> comBuffer(BIGRAM[128]), Main_flowCalibrationTable(CODE[124]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> mainSystemData.flowRatio(CODE[2]), rtBalanceMoney(BANK1[4]), __q31(BANK1[4]), mainSystemData(CODE[72]), 
		 -> __t16(COMMON[2]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 128
		 -> crc_verify@expected(BANK0[2]), pcd_mifare_transceive@cmdBuffer(BANK0[18]), LCDDATA0(SFR15[1]), cardWriteBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 

    m_mem_set@buf	PTR unsigned char  size(2) Largest target is 128
		 -> pLCD(BANK3[24]), PiccUid(BANK3[12]), comBuffer(BIGRAM[128]), flashOpStr(BANK2[21]), 
		 -> lcdBuf(BANK2[9]), 

    rfid_comm_process_hs@stpIncDec	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    rfid_comm_process_fk@stpIncDec	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    rfid_comm_process_fk@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    create_card_key_b@cckey	PTR unsigned char  size(2) Largest target is 6
		 -> cardKeyCreatKey(CODE[6]), 

    create_card_key_b@uid	PTR unsigned char  size(1) Largest target is 18
		 -> cardUidBlockBuf(BANK8[18]), 

    create_card_key_b@keyb	PTR unsigned char  size(1) Largest target is 6
		 -> userKeyB(BANK3[6]), 

    data_api_calibration_table_data_init@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_read_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_write_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    m_flash_copy@buf	PTR const unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> flashBuffer(BANK4[64]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _ui_key_waite_up->_get_globle_ticker
    _key_scan_call->_delay
    _rfid_comm_process_hs->_create_card_key_b
    _rfid_comm_process_hs->_m_mem_cpy_len
    _rfid_comm_process_fk->_create_card_key_b
    _rfid_comm_process_fk->_m_mem_cpy_len
    _picc_select->___awdiv
    _picc_select->_mfrc522_bal_read_reg
    _picc_select->_mfrc522_bal_write_reg
    _pcd_mifare_transceive->_m_mem_cpy_len
    _pcd_comm_with_picc->_mfrc522_bal_read_fifo_len_ex
    _pcd_comm_with_picc->_mfrc522_bal_read_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg_len
    _mfrc522_hal_calculate_crc->_mfrc522_bal_read_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg_len
    _mfrc522_bal_write_reg_len->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_fifo_len_ex->_mfrc522_bal_write_read_via_spi
    _mfapi_pcd_init->_mfrc522_bal_read_reg
    _mfrc522_hal_init->_mfrc522_bal_write_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_write_reg
    _mfrc522_bal_write_reg->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_reg->_mfrc522_bal_write_read_via_spi
    _m_system_start_self_test->_lcd_disp_all
    _lcd_config->_lcd_disp_all
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_code->_lcd_disp_code_0
    _lcd_disp_code->_lcd_disp_code_1
    _lcd_disp_code->_lcd_disp_code_2
    _lcd_disp_code->_lcd_disp_code_3
    _lcd_disp_code->_lcd_disp_code_4
    _lcd_disp_code->_lcd_disp_code_5
    _lcd_disp_code->_lcd_disp_code_6
    _lcd_disp_code->_lcd_disp_code_7
    _data_api_system_data_init->_data_api_read_eeprom
    _data_api_system_data_init->_data_api_write_eeprom
    _data_api_system_data_init->_m_flash_copy
    _data_api_system_data_init->_m_mem_cpy_len
    _data_api_calibration_table_data_init->_data_api_read_eeprom
    _data_api_calibration_table_data_init->_data_api_write_eeprom
    _data_api_calibration_table_data_init->_m_flash_copy
    _m_flash_erase->_FLASH_EraseBlock
    _m_flash_copy->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _data_api_write_eeprom->_DATAEE_WriteByte
    _data_api_read_eeprom->_DATAEE_ReadByte
    _crc_verify->_m_mem_cpy_len
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR

Critical Paths under _main in BANK0

    _rfid_comm_process_hs->_mifare_write
    _rfid_comm_process_fk->_mifare_write
    _picc_stop_cryptol->_mfrc522_bal_clr_bit_reg
    _picc_select->_pcd_comm_with_picc
    _picc_halt_a->_pcd_comm_with_picc
    _picc_authenticate->_pcd_comm_with_picc
    _mifare_write->_pcd_mifare_transceive
    _pcd_mifare_transceive->_pcd_comm_with_picc
    _mifare_read->_pcd_comm_with_picc
    _mfapi_is_new_card_present->_picc_req_a_or_wakeup_a
    _picc_req_a_or_wakeup_a->_pcd_comm_with_picc
    _pcd_comm_with_picc->_mfrc522_hal_calculate_crc
    _mfrc522_hal_calculate_crc->_mfrc522_bal_set_bit_reg
    _mfapi_pcd_init->_mfrc522_hal_init
    _mfrc522_hal_init->_mfrc522_hal_set_antenna_gain
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_clr_bit_reg
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_set_bit_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _m_system_start_self_test->_lcd_disp_all
    _lcd_config->_lcd_disp_all
    _lcd_disp_str->_lcd_disp_refresh
    _lcd_disp_refresh->_m_mem_cpy_len
    _data_api_system_data_init->_crc_append
    _data_api_system_data_init->_crc_verify
    _data_api_calibration_table_data_init->_crc_append
    _data_api_calibration_table_data_init->_crc_verify
    _m_flash_copy->_FLASH_WriteBlock
    _crc_verify->_crc_sum
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rfid_comm_process_fk
    _rfid_comm_process_hs->_picc_select
    _rfid_comm_process_fk->_picc_select

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  477952
                                             78 BANK0      1     1      0
                                             50 BANK1      5     5      0
_data_api_calibration_table_data_ini
          _data_api_system_data_init
                              _delay
                      _key_scan_call
                       _lcd_disp_str
                      _m_system_init
           _m_system_start_self_test
                     _mfapi_pcd_init
            _my_uart1_received_ready
               _rfid_comm_process_fk
               _rfid_comm_process_hs
                    _ui_key_waite_up
 ---------------------------------------------------------------------------------
 (1) _ui_key_waite_up                                      4     2      2    4124
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (2) _set_globle_ticker                                    2     0      2     211
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _key_scan_call                                        1     1      0    3811
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _get_globle_ticker                                    4     2      2      34
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _rfid_comm_process_hs                                12    12      0  192026
                                             36 BANK1     12    12      0
                  _create_card_key_b
                      _m_mem_cpy_len
                          _m_mem_set
          _mfapi_is_new_card_present
                        _mifare_read
                       _mifare_write
                  _picc_authenticate
                        _picc_halt_a
                        _picc_select
                  _picc_stop_cryptol
 ---------------------------------------------------------------------------------
 (1) _rfid_comm_process_fk                                14    14      0  195168
                                             36 BANK1     14    14      0
                         _crc_append
                  _create_card_key_b
                      _m_mem_cpy_len
                          _m_mem_set
          _mfapi_is_new_card_present
                        _mifare_read
                       _mifare_write
                  _picc_authenticate
                        _picc_halt_a
                        _picc_select
                  _picc_stop_cryptol
 ---------------------------------------------------------------------------------
 (2) _picc_stop_cryptol                                    1     1      0    2707
                                              6 BANK0      1     1      0
            _mfrc522_bal_clr_bit_reg
 ---------------------------------------------------------------------------------
 (2) _picc_select                                         42    41      1   37280
                                             43 BANK0      6     5      1
                                              0 BANK1     36    36      0
                            ___awdiv
                             ___bmul
            _mfrc522_bal_clr_bit_reg
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     320
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1820
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _picc_halt_a                                          8     8      0   26612
                                             43 BANK0      8     8      0
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _picc_authenticate                                   22    18      4   22395
                                             43 BANK0     22    18      4
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mifare_write                                         9     6      3   37726
                                             73 BANK0      5     2      3
                                              0 BANK1      4     4      0
              _pcd_mifare_transceive
 ---------------------------------------------------------------------------------
 (3) _pcd_mifare_transceive                               30    26      4   35927
                                             43 BANK0     30    26      4
                      _m_mem_cpy_len
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mifare_read                                          6     4      2   27086
                                             43 BANK0      6     4      2
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mfapi_is_new_card_present                            8     8      0   26080
                                             52 BANK0      8     8      0
                          _m_mem_set
             _picc_req_a_or_wakeup_a
 ---------------------------------------------------------------------------------
 (3) _picc_req_a_or_wakeup_a                               9     7      2   22378
                                             43 BANK0      9     7      2
            _mfrc522_bal_clr_bit_reg
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _pcd_comm_with_picc                                  26    15     11   19129
                                             17 BANK0     26    15     11
       _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
          _mfrc522_hal_calculate_crc
 ---------------------------------------------------------------------------------
 (4) _mfrc522_hal_calculate_crc                           11     6      5    7222
                                              6 BANK0     11     6      5
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_write_reg_len                            6     3      3     635
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (4) _mfrc522_bal_read_fifo_len_ex                         8     4      4     706
                                              7 COMMON     1     1      0
                                              0 BANK0      7     3      4
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (3) _m_mem_set                                            4     0      4    3487
                                              3 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (2) _create_card_key_b                                    7     4      3     602
                                              3 COMMON     5     2      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _my_uart1_received_ready                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mfapi_pcd_init                                       2     2      0   15918
                                              9 BANK0      2     2      0
               _mfrc522_bal_read_reg
                   _mfrc522_hal_init
 ---------------------------------------------------------------------------------
 (2) _mfrc522_hal_init                                     1     1      0   15674
                                              8 BANK0      1     1      0
                              _delay
              _mfrc522_bal_write_reg
             _mfrc522_hal_antenna_on
               _mfrc522_hal_reset_sf
       _mfrc522_hal_set_antenna_gain
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_set_antenna_gain                         2     2      0    5636
                                              6 BANK0      2     2      0
            _mfrc522_bal_clr_bit_reg
            _mfrc522_bal_set_bit_reg
       _mfrc522_hal_get_antenna_gain
 ---------------------------------------------------------------------------------
 (4) _mfrc522_hal_get_antenna_gain                         2     2      0     250
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_set_bit_reg                              4     3      1    2617
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_bal_clr_bit_reg                              4     3      1    2707
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_reset_sf                                 1     1      0    2124
                                              2 BANK0      1     1      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_antenna_on                               2     2      0    2189
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (4) _mfrc522_bal_write_reg                                2     1      1    1914
                                              7 COMMON     1     0      1
                                              0 BANK0      1     1      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (4) _mfrc522_bal_read_reg                                 3     3      0     210
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_write_read_via_spi                       4     4      0     142
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _m_system_start_self_test                             0     0      0    3941
                              _delay
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (3) _delay                                                2     0      2    3811
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _m_system_init                                        0     0      0     326
                  _SYSTEM_Initialize
                           _lcd_init
                      _led_port_init
               _other_gpio_port_init
 ---------------------------------------------------------------------------------
 (2) _other_gpio_port_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _led_port_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0     130
                         _lcd_config
 ---------------------------------------------------------------------------------
 (3) _lcd_config                                           0     0      0     130
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (2) _lcd_disp_all                                         6     6      0     130
                                              3 COMMON     4     4      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     196
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR1_SetInterruptHandler                             2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0      98
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcd_disp_str                                         5     3      2   11504
                                              2 BANK0      5     3      2
                      _lcd_disp_code
                   _lcd_disp_refresh
 ---------------------------------------------------------------------------------
 (2) _lcd_disp_refresh                                     1     1      0    7662
                                              1 BANK0      1     1      0
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _lcd_disp_code                                        2     1      1    1506
                                              5 COMMON     2     1      1
                    _lcd_disp_code_0
                    _lcd_disp_code_1
                    _lcd_disp_code_2
                    _lcd_disp_code_3
                    _lcd_disp_code_4
                    _lcd_disp_code_5
                    _lcd_disp_code_6
                    _lcd_disp_code_7
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_7                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_6                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_5                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_4                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_3                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_2                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_1                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_code_0                                      2     2      0     154
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _data_api_system_data_init                            2     2      0   26637
                                             22 BANK0      2     2      0
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
           _data_api_system_data_get
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_flash_erase
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _data_api_system_data_get                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _data_api_calibration_table_data_init                10    10      0   20538
                                             22 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_flash_erase
 ---------------------------------------------------------------------------------
 (2) _m_flash_erase                                        3     0      3     681
                                              0 BANK0      3     0      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (2) _m_flash_copy                                        12     7      5    2952
                                              6 COMMON     2     2      0
                                             10 BANK0     10     5      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_WriteBlock                                    10     7      3    1028
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (3) _FLASH_EraseBlock                                     3     1      2     219
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (3) _FLASH_ReadWord                                       3     1      2     219
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _data_api_write_eeprom                                6     2      4    1495
                                              6 COMMON     2     2      0
                                              0 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_WriteByte                                     3     2      1     279
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _data_api_read_eeprom                                 6     2      4     707
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _crc_verify                                          11     7      4   10168
                                             11 BANK0     11     7      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _m_mem_cpy_len                                        6     1      5    7662
                                              3 COMMON     5     0      5
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _crc_append                                          11     7      4    2891
                                             11 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (3) _crc_sum                                             15    11      4     660
                                              3 COMMON     4     0      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1216
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTERRUPT_InterruptManager                           1     1      0      23
                                              2 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _TMR0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _EUSART1_Receive_ISR                                 2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _data_api_calibration_table_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_flash_copy
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _m_flash_erase
       _FLASH_EraseBlock
   _data_api_system_data_init
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_system_data_get
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_flash_copy
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _m_flash_erase
       _FLASH_EraseBlock
     _m_mem_cpy_len
   _delay
   _key_scan_call
     _delay
   _lcd_disp_str
     _lcd_disp_code
       _lcd_disp_code_0
       _lcd_disp_code_1
       _lcd_disp_code_2
       _lcd_disp_code_3
       _lcd_disp_code_4
       _lcd_disp_code_5
       _lcd_disp_code_6
       _lcd_disp_code_7
     _lcd_disp_refresh
       _m_mem_cpy_len
   _m_system_init
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
         _TMR1_StartTimer
       _WDT_Initialize
     _lcd_init
       _lcd_config
         _lcd_disp_all
     _led_port_init
     _other_gpio_port_init
   _m_system_start_self_test
     _delay
     _lcd_disp_all
   _mfapi_pcd_init
     _mfrc522_bal_read_reg
       _mfrc522_bal_write_read_via_spi
     _mfrc522_hal_init
       _delay
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_antenna_on
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_reset_sf
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_set_antenna_gain
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_get_antenna_gain
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
   _my_uart1_received_ready
   _rfid_comm_process_fk
     _crc_append
       _crc_sum
     _create_card_key_b
     _m_mem_cpy_len
     _m_mem_set
     _mfapi_is_new_card_present
       _m_mem_set
       _picc_req_a_or_wakeup_a
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _mifare_read
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _mifare_write
       _pcd_mifare_transceive
         _m_mem_cpy_len
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _picc_authenticate
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_halt_a
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_select
       ___awdiv
       ___bmul
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_read_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_stop_cryptol
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
   _rfid_comm_process_hs
     _create_card_key_b
     _m_mem_cpy_len
     _m_mem_set
     _mfapi_is_new_card_present
       _m_mem_set
       _picc_req_a_or_wakeup_a
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _mifare_read
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _mifare_write
       _pcd_mifare_transceive
         _m_mem_cpy_len
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _picc_authenticate
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_halt_a
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_select
       ___awdiv
       ___bmul
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_read_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_stop_cryptol
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
   _ui_key_waite_up
     _get_globle_ticker
     _key_scan_call
       _delay
     _set_globle_ticker

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4F      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     37      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      3C      11       75.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     176      20        0.0%
BITBANK8             8      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8                8      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK10           50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK10              50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK11           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK11               0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
DATA                 0      0     176      27        0.0%
BITBANK12           30      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12               0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Nov 25 21:05:39 2018

                        rfid_comm_process_hs@i 00CE                    mfrc522_bal_set_bit_reg@bits 0022  
                      ?_picc_req_a_or_wakeup_a 004B                                              pc 0002  
                      rfid_comm_process_fk@ret 00CB                        rfid_comm_process_fk@stp 00CF  
                               ___bmul@product 0075                                    __CFG_CP$OFF 0000  
                      rfid_comm_process_hs@ret 00CD                                   ___awdiv@sign 0021  
                          ___wmul@multiplicand 0075                        _mfrc522_bal_set_bit_reg 1EC1  
                             _picc_select$3171 00A0                               _picc_select$3174 00A2  
                             _picc_select$3167 00A9                               _picc_select$3175 00A4  
                             _picc_select$3168 00AA                __end_of_mfrc522_bal_clr_bit_reg 1EC1  
                              _timer0ReloadVal 00E7                                  ?_m_flash_copy 002A  
                         _data_api_read_eeprom 07E1                                            l253 1FA0  
                                          l246 1710                                            l625 1344  
                   _flowCalibrationPointSingle 016E                                   __CFG_CPD$OFF 0000  
                              _timer1ReloadVal 00DF                                _ui_key_waite_up 1330  
                   __size_of_picc_authenticate 0068                                   __CFG_BORV$LO 0000  
                                          wreg 0009                                   __CFG_IESO$ON 0000  
                                 __CFG_FOSC$HS 0000                            lcd_disp_code_0@code 0074  
                               ?_m_flash_erase 0020                            lcd_disp_code_1@code 0074  
                          lcd_disp_code_2@code 0074                            lcd_disp_code_3@code 0074  
                          lcd_disp_code_4@code 0074                            lcd_disp_code_5@code 0074  
                          lcd_disp_code_6@code 0074                 FLASH_WriteBlock@flashWordArray 0022  
                                _led_port_init 1EF0                    mfrc522_hal_calculate_crc@t8 002E  
                          lcd_disp_code_7@code 0074                                   __CFG_LVP$OFF 0000  
                                         l2013 107F                                           l2015 1080  
                                         l2007 1079                                           l2018 1090  
                                         l2039 10DC                                           l2066 13F8  
                                         l2244 0606                                           l2270 06E7  
                                         l2549 101C                                           l9011 113F  
                                         l9013 1143                                           l9005 1133  
                                         l9015 1147                                           l9007 1137  
                                         l9023 1153                                           l9017 114B  
                                         l9009 113B                                           l9019 114F  
                                         l8331 1E63                                           l8327 1E5D  
                                         l8353 1556                                           l8371 157C  
                                         l8363 155E                                           l8347 154B  
                                         l8365 156A                                           l8375 1585  
                                         l8379 158D                                           l7769 1DF6  
                                         STR_1 0363                                           STR_2 03B1  
                                         STR_3 03EF                                           STR_4 03AA  
                                         STR_5 037E                                           STR_6 03D6  
                                         STR_7 03E7                                           STR_8 03EB  
                                         STR_9 03BE                                           _LATA 010C  
                                         _LATB 010D                                           _LATC 010E  
                                         _LATD 010F                                           _LATE 0110  
                                         _LATF 038C                                           _LATG 038D  
                                         u6025 1561                                           u6045 156B  
                                         u6055 1575                                           u6065 157D  
                                _m_mem_cpy_len 1F56                                           u9775 0ACE  
                                         _TMR0 0015                                           u9995 16BE  
                               ??_lcd_disp_all 0073                                           _WPUB 020D  
                                         _WPUG 048D                                 ??_lcd_disp_str 0024  
                                 __CFG_WRT$OFF 0000                                  __CFG_FCMEN$ON 0000  
                                         _pLCD 01B2                                           ___q7 0140  
                                         ___t8 00E2                   __end_of_LCDDigitalIndexTable 02C1  
                    __size_of_lcd_disp_refresh 0011                                           _main 070F  
                                         _flow 0132                                           _menu 00E5  
                           ui_key_waite_up@now 0022                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           btemp 007E  
                            ?_FLASH_WriteBlock 0020                                  __CFG_BOREN$ON 0000  
                       ??_mfrc522_bal_read_reg 0077                 __size_of_pcd_mifare_transceive 0082  
                                _globlTickerms 01AC                                 picc_select@uid 00BD  
                                         start 0037                         create_card_key_b@cckey 0074  
                __end_of_pcd_mifare_transceive 0937               __size_of_my_uart1_received_ready 0009  
                           ??_FLASH_WriteBlock 0023                      data_api_write_eeprom@addr 0022  
                   ??_TMR1_SetInterruptHandler 0075                 __end_of_picc_req_a_or_wakeup_a 1540  
                            ___bmul@multiplier 0076                                  __CFG_MCLRE$ON 0000  
                                        S13999 1800                pcd_comm_with_picc@errorRegValue 0045  
                    __size_of_DATAEE_WriteByte 001D                                  lcd_disp_all@i 0021  
                                lcd_disp_all@x 0020                        __end_of_TMR0_Initialize 1EAA  
                                 ?_mifare_read 004B                                 ??_m_flash_copy 0076  
                         _mfrc522_hal_reset_sf 1E4A            mfapi_is_new_card_present@bufferATQA 0058  
               __size_of_OSCILLATOR_Initialize 0005                  __end_of_OSCILLATOR_Initialize 1D5D  
                                        l12101 1F54                                          l12103 1F3C  
                                        l12121 17BD                                          l12115 17A1  
                                        l11307 13DF                                          l11341 1765  
                                        l11333 174B                                          l12205 132C  
                                        l12301 0507                                          l12221 03FD  
                                        l11511 1F56                                          l12143 17EA  
                                        l11335 175F                                          l12161 1031  
                                        l12129 17C6                                          l11185 10C6  
                                        l12209 132E                                          l12321 0542  
                                        l12305 0510                                          l12241 0428  
                                        l12403 067B                                          l12173 07E3  
                                        l12149 178E                                          l13213 09FF  
                                        l11613 0B92                                          l12501 15CA  
                                        l12413 0686                                          l12261 0462  
                                        l12253 0448                                          l12087 13CB  
                                        l11631 0BB5                                          l11607 0B8E  
                                        l11535 0ABD                                          l12431 06CA  
                                        l12423 06B2                                          l12415 06AA  
                                        l12271 048B                                          l12255 0450  
                                        l12239 0425                                          l13225 0A89  
                                        l11537 0AC7                                          l12513 1464  
                                        l12329 0551                                          l12265 0464  
                                        l13401 0EE3                                          l13219 0A4C  
                                        l11643 0BD4                                          l11635 0BB7  
                                        l11627 0BAA                                          l11651 0C00  
                                        l11555 0B1A                                          l12531 149D  
                                        l12523 1486                                          l12435 06D9  
                                        l12291 04E2                                          l12509 1462  
                                        l12461 1658                                          l12269 047A  
                                        l12445 0407                                          l13421 0F53  
                                        l12701 133E                                          l13255 09BE  
                                        l11743 1DBC                                          l11647 0BFE  
                                        l11567 0B33                                          l11575 0B1F  
                                        l12447 06F9                                          l12439 06DB  
                                        l12359 05F6                                          l12391 0511  
                                        l12287 04CE                                          l12279 04A4  
                                        l12617 1015                                          l13249 0992  
                                        l11585 0B4B                                          l11577 0B3D  
                                        l11905 08E9                                          l12473 1679  
                                        l12393 0665                                          l12385 0657  
                                        l12369 060C                                          l12377 0651  
                                        l13417 0F4B                                          l13409 0F1B  
                                        l13353 0DE0                                          l12713 135B  
                                        l11691 16FB                                          l12491 15A1  
                                        l11923 0921                                          l12467 1674  
                                        l12299 04E3                                          l13363 0DFE  
                                        l13523 0D28                                          l13515 0CF8  
                                        l13507 0CE0                                          l12661 1437  
                                        l12653 141E                                          l11597 0B65  
                                        l11861 1533                                          l11845 14FF  
                                        l11933 092D                                          l12397 066B  
                                        l12389 065E                                          l13445 0FF5  
                                        l11679 16D3                                          l12671 1454  
                                        l12487 159F                                          l11943 0935  
                                        l12479 1692                                          l13391 0E9D  
                                        l13527 0D30                                          l13543 0DA4  
                                        l12665 144A                                          l11849 1501  
                                        l11937 092F                                          l11929 0926  
                        ?_data_api_read_eeprom 0074                                          l11875 1E53  
                                        l11891 08BE                                          l13475 0C33  
                                        l11957 14AC                                          l12669 1412  
                                        l11869 153E                                          l13485 0C51  
                                        l11959 14DF                                          l13583 1E7D  
                                        l11895 08C0                                          l13497 0C9A  
                                        l13933 074C                                          l13937 0757  
                                        l13947 0769                                          l13965 07A7  
                                        l13949 076A           mfrc522_bal_read_fifo_len_ex@rx_align 0023  
                                        ?_main 0070            mfapi_is_new_card_present@bufferSize 005B  
                              __end_of___awdiv 1592                                          STR_10 03CA  
                                        STR_11 03C4                                          STR_12 03D0  
                                        STR_20 0399                                          STR_13 036C  
                                        STR_21 0351                                          STR_22 03DC  
                                        STR_14 0375                                          STR_15 03E2  
                                        STR_23 03B8                                          STR_24 03A2  
                                        STR_16 035A                                          STR_17 0348  
                                        STR_25 0324                                  __CFG_WDTE$OFF 0000  
                                        STR_18 0387                                          STR_26 0336  
                                        STR_19 0390                                          STR_27 032D  
                                        STR_28 033F                                _TMR1_StartTimer 1D4D  
                                        u11125 101D                                          u11135 1022  
                              ___awdiv@divisor 0073                                          u10605 0475  
                                        u10630 04BF                                          u10375 13C7  
                                        u10615 047F                                          u10800 0634  
                                        u10640 04C0                                          _T1CON 0018  
                                        u10810 0635                                          u10730 0589  
                                        u10740 058A                                          u10725 0578  
                                        u10824 0644                                          u10825 0643  
                                        u10755 05A9                                          _LCDRL 0795  
                   pcd_comm_with_picc@checkCRC 003B                                          i1l161 001C  
                                        i1l163 0028                                          i1l167 0032  
                                        i1l159 0010                                ___awdiv@counter 0020  
                                        _TMR1H 0017                                          _TMR1L 0016  
                                        _PORTB 000D                                ??_lcd_disp_code 0076  
                                        _TRISA 008C                                          _TRISB 008D  
                                        _TRISC 008E                                          _TRISD 008F  
                                        _TRISE 0090                                          _TRISF 030C  
                                        _TRISG 030D                        _pcd_comm_with_picc$3131 0040  
                            _adcSamplingBuffer 01A0              __size_of_TMR0_SetInterruptHandler 0006  
                    ?_TMR0_SetInterruptHandler 0073                                          _Event 0143  
                         _EUSART1_Transmit_ISR 1D4A                                          ___q31 00EC  
                                        ___q15 00DB                                          ___t32 0120  
                                        ___t16 0079                                __end_of_crc_sum 14EF  
                             __end_of_TMR0_ISR 1E17                               __end_of_TMR1_ISR 1E28  
                               ?_led_port_init 0070                                _DATAEE_ReadByte 1DA4  
                                        _delay 1DBC                                          _fl_t8 013E  
                                 ?_picc_halt_a 0070                                          _rdLen 016B  
                               _WDT_Initialize 1D50                    __size_of_pcd_comm_with_picc 014D  
              mfrc522_hal_get_antenna_gain@ret 0023                                 ?_m_mem_cpy_len 0073  
                   __size_of_create_card_key_b 002B                                   ?_picc_select 004B  
                      __end_of_TMR1_Initialize 1FE3                        __size_of_mfapi_pcd_init 0013  
                           crc_verify@expected 0034                                          status 0003  
              __size_of_mfrc522_hal_antenna_on 0018                                          wtemp0 007E  
           __size_of_mfrc522_hal_calculate_crc 0070                   pcd_comm_with_picc@txLastBits 003E  
         __end_of_mfrc522_hal_get_antenna_gain 1DF6          __size_of_mfrc522_hal_get_antenna_gain 000F  
                 _mfrc522_hal_get_antenna_gain 1DE7                    ??_mfapi_is_new_card_present 0054  
                              _systemTickerSec 0144                              ?_mfrc522_hal_init 0070  
                              __initialization 0039                      ??_mfrc522_bal_set_bit_reg 0023  
                   __end_of_EUSART1_Initialize 1DE7                                   __end_of_main 07E1  
                           ??_mfrc522_hal_init 0028                        __end_of_ui_key_waite_up 1361  
                pcd_mifare_transceive@sendData 004B                          ?_mfrc522_hal_reset_sf 0070  
                  ?_INTERRUPT_InterruptManager 0070                       picc_select@useCascadeTag 00B8  
                                       ??_main 006E             __size_of_data_api_system_data_init 008A  
                      __size_of_FLASH_ReadWord 001A                                 __CFG_PLLEN$OFF 0000  
                              ??_m_flash_erase 0076                                 _mainSystemData 3F00  
                        ?_EUSART1_Transmit_ISR 0070                         __end_of_WDT_Initialize 1D54  
                                ?_mifare_write 0069                         _mainSystemData_absaddr 3F00  
                                       ?_delay 0073                       _data_api_system_data_get 1D86  
                    FLASH_WriteBlock@writeAddr 0020                                         _EEADRH 0192  
                                       _EEADRL 0191                                         _EEDATH 0194  
                                       _EEDATL 0193                                         _EECON2 0196  
                          pcd_comm_with_picc@i 0047                               ___awdiv@dividend 0075  
                                       _APFCON 011D                                         _ANSELA 018C  
                                       _ANSELE 0190                                         _ANSELF 040C  
                                       _ANSELG 040D                                         _T1GCON 0019  
                                       _LCDCON 0791                                         _LCDSE0 0798  
                                       _LCDSE1 0799                                         _LCDSE2 079A  
                                       _LCDSE3 079B                                         _LCDSE4 079C  
                                       _LCDSE5 079D                                         _LCDREF 0793  
                                       _RC1REG 0199                                         _RC1STA 019D  
                      ??_mfrc522_bal_write_reg 0078                                         i1l9173 109A  
                                       i1l9179 10B3               ??_mfrc522_bal_write_read_via_spi 0073  
              ?_mfrc522_bal_write_read_via_spi 0070                      __size_of_FLASH_EraseBlock 001D  
                                       _OSCCON 0099                                         _TX1REG 019A  
                                       _WDTCON 0097                                         _TX1STA 019E  
                                 m_mem_set@buf 0073                                   m_mem_set@len 0076  
                       __size_of_key_scan_call 0027                                 __CFG_PWRTE$OFF 0000  
            __end_of_mfrc522_hal_calculate_crc 1789                  ?_mfrc522_hal_get_antenna_gain 0070  
 __end_of_data_api_calibration_table_data_init 0AB5  __size_of_data_api_calibration_table_data_init 00F4  
       ??_data_api_calibration_table_data_init 0036          ?_data_api_calibration_table_data_init 0070  
         _data_api_calibration_table_data_init 09C1                   _TMR1_DefaultInterruptHandler 0000  
                             __end_of_hexTable 02FA                               __end_of_lcd_init 1D62  
                         mifare_read@blockAddr 004F                                         ___bmul 1E5B  
                      __end_of_TMR1_StartTimer 1D50                                         ___wmul 1012  
                                    ??___awdiv 0077                                 __CFG_STVREN$ON 0000  
                                       _fl_t16 0128                                         _fl_t32 00D7  
                 __end_of_other_gpio_port_init 1D9A                                         _lcdBuf 015A  
                        EUSART1_Receive_ISR@t8 0071                         ??_data_api_read_eeprom 0020  
                                m_flash_copy@i 0033                               ?_TMR0_Initialize 0070  
                                       delay@t 0073                               ___awdiv@quotient 0022  
                         __end_of_lcd_disp_all 2000                         _mfrc522_hal_antenna_on 1ED8  
                         __end_of_lcd_disp_str 1457                         __end_of_mainSystemData 3F48  
                                       main@p8 00D6                                      ??_crc_sum 0020  
             mfrc522_hal_set_antenna_gain@gain 0027                        __end_of_DATAEE_ReadByte 1DB0  
               pcd_mifare_transceive@cmdBuffer 0053                           _LCDDigitalIndexTable 0298  
                        data_api_read_eeprom@i 0021                       __size_of_lcd_disp_code_0 002E  
                     __size_of_lcd_disp_code_1 002E                       __size_of_lcd_disp_code_2 002E  
                     __size_of_lcd_disp_code_3 002E                       __size_of_lcd_disp_code_4 002E  
                     __size_of_lcd_disp_code_5 002E                       __size_of_lcd_disp_code_6 002E  
                     __size_of_lcd_disp_code_7 002E                 __size_of_data_api_write_eeprom 0021  
                      FLASH_ReadWord@flashAddr 0073                  mfrc522_bal_read_fifo_len_ex@i 0026  
                              ??_led_port_init 0073                                 ??_mifare_write 006C  
                __end_of_data_api_write_eeprom 1051              __end_of_data_api_system_data_init 09C1  
                    _mfapi_is_new_card_present 12FF                                   _cardWriteBuf 0432  
                              ?_WDT_Initialize 0070                               picc_select@count 00C1  
                             picc_select@index 00C2                                ??_m_mem_cpy_len 0020  
              __end_of_mfrc522_bal_set_bit_reg 1ED8                       data_api_write_eeprom@buf 0020  
                     data_api_write_eeprom@len 0023       TMR0_SetInterruptHandler@InterruptHandler 0073  
     TMR1_SetInterruptHandler@InterruptHandler 0073                    ??_mfrc522_bal_write_reg_len 0077  
                             ?_TMR1_Initialize 0070                              _SYSTEM_Initialize 1000  
                             _lcd_disp_refresh 1E28                           __end_of_m_flash_copy 1800  
                      __end_of__initialization 0094                        _my_uart1_received_ready 1D74  
                           ?_SYSTEM_Initialize 0070                    pcd_comm_with_picc@validBits 0039  
                            lcd_disp_code@code 0076                            ___bmul@multiplicand 0073  
                         create_card_key_b@uid 0073                                 __pcstackCOMMON 0070  
                                 __pidataBANK2 1D54                                   __pidataBANK3 1D6E  
                       ??_mfrc522_hal_reset_sf 0022                            ??_SYSTEM_Initialize 0076  
                   mfrc522_bal_write_reg_len@i 0024                                      ?_TMR0_ISR 0070  
                                    ?_TMR1_ISR 0070                                  __end_of_delay 1DCA  
                             _DATAEE_WriteByte 1F8C                               ?_ui_key_waite_up 0020  
                       __size_of_m_system_init 0015                           __size_of_mifare_read 0054  
                       ??_EUSART1_Transmit_ISR 0070                                  _key_scan_call 10DF  
                                   _cardDecBuf 0456                                 _OPTION_REGbits 0095  
                 __end_of_rfid_comm_process_fk 1000                   __end_of_rfid_comm_process_hs 0DAF  
                                   _cardIncBuf 0444                 pcd_mifare_transceive@validBits 0066  
                  __end_of_EUSART1_Receive_ISR 10B9                    FLASH_WriteBlock@GIEBitValue 0028  
                                      ??_delay 0075                              crc_append@message 002B  
                     ?_mfrc522_bal_clr_bit_reg 0022                      __end_of_SYSTEM_Initialize 1012  
                           __size_of_m_mem_set 0010                                     __pbssBANK1 00D7  
                                   __pbssBANK2 0120                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                           __size_of_picc_halt_a 003B  
              mfrc522_bal_write_read_via_spi@i 0076                mfrc522_bal_write_read_via_spi@x 0074  
                               _mfapi_pcd_init 1E6C                             create_card_key_b@i 0021  
                              __CFG_VCAPEN$OFF 0000                       _m_system_start_self_test 15E6  
                         __size_of_picc_select 031D                                     __pmaintext 070F  
                mfrc522_hal_calculate_crc@data 0026                                lcd_disp_str@loc 0025  
                                      ?___bmul 0073                                lcd_disp_str@str 0022  
             __end_of_TMR0_SetInterruptHandler 1D68                                        ?___wmul 0073  
              picc_req_a_or_wakeup_a@validBits 0053                               ?_TMR1_StartTimer 0070  
                                   ??_TMR0_ISR 0070                                     ??_TMR1_ISR 0070  
                    _mfrc522_bal_write_reg_len 10B9                mfrc522_hal_calculate_crc@length 0028  
                              mfapi_pcd_init@v 002A                                     __pintentry 0004  
               ??_mfrc522_hal_get_antenna_gain 0022                              lcd_disp_str@index 0026  
              mfrc522_hal_calculate_crc@result 0029                                     _crc_append 12CE  
                    __size_of_FLASH_WriteBlock 006C                                 ?_key_scan_call 0070  
                             ?_DATAEE_ReadByte 0070                                 _FLASH_ReadWord 1F22  
                                   _crc_verify 1396                                     _flashOpStr 0145  
                                   _lcd_config 1051                                        _SP1BRGH 019C  
                                      _SP1BRGL 019B                                        _OSCTUNE 0098  
                                _calibLocation 00E6                              ??_lcd_disp_code_0 0073  
                            ??_lcd_disp_code_1 0073                              ??_lcd_disp_code_2 0073  
                            ??_lcd_disp_code_3 0073                              ??_lcd_disp_code_4 0073  
                            ??_lcd_disp_code_5 0073                              ??_lcd_disp_code_6 0073  
                            ??_lcd_disp_code_7 0073                         __end_of_mfapi_pcd_init 1E7F  
                                    ?_lcd_init 0070                      ??_my_uart1_received_ready 0073  
                         _other_gpio_port_init 1D90                              __end_of_auchCRCHi 0298  
                            __end_of_auchCRCLo 0198                               _FLASH_EraseBlock 1FA9  
                                _m_system_init 1E7F                                _ctrlByteDefault 0320  
                         DATAEE_WriteByte@bAdd 0074                                   _deviceStatus 00E3  
        data_api_calibration_table_data_init@i 003F                                        _PiccUid 01CA  
                      picc_select@cascadeLevel 00B9                         pcd_comm_with_picc@rbuf 0035  
                       pcd_comm_with_picc@tmp8 004A                         pcd_comm_with_picc@sbuf 0032  
                         __end_of_mifare_write 149F                         pcd_comm_with_picc@rlen 0037  
                       pcd_comm_with_picc@slen 0034                  __size_of_mfrc522_bal_read_reg 0019  
                        _pcd_mifare_transceive 08B5                          __size_of_lcd_disp_all 001D  
                            _picc_stop_cryptol 1D7D                          __size_of_lcd_disp_str 0048  
                              __size_of___bmul 0011              _Main_flowCalibrationTable_absaddr 3F80  
                                      ___awdiv 1540                          picc_select@bufferUsed 00A8  
                            m_flash_erase@addr 0020                                __size_of___wmul 001E  
                rfid_comm_process_fk@stpIncDec 00CC                        mfrc522_bal_read_reg@reg 0020  
                                      _pLcdReg 016C                             ?_picc_stop_cryptol 0070  
                            __end_of_m_mem_set 1E06              __p_Main_flowCalibrationTable_text 3F80  
                         __end_of_TablerxAlign 0302                                     _piccResult 013A  
                       __end_of_FLASH_ReadWord 1F3C                     ??_data_api_system_data_get 0073  
                            _noKeyEventTimeOut 016F                                        __ptext1 1330  
                                      __ptext2 1D9A                                        __ptext3 10DF  
                                      __ptext4 1DCA                                        __ptext5 0C02  
                                      __ptext6 0DAF                                        __ptext7 1D7D  
                                      __ptext8 03F2                                        __ptext9 1E5B  
                                      _crc_sum 149F                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 1D58                            ??_picc_stop_cryptol 0026  
            __size_of_TMR1_SetInterruptHandler 0006                     __end_of_pcd_comm_with_picc 0C02  
                    __size_of_mfrc522_hal_init 0079                             _EUSART1_Initialize 1DD8  
                                    _LCDPSbits 0792                       ??_PIN_MANAGER_Initialize 0073  
                    ?_TMR1_SetInterruptHandler 0073                          __end_of_lcd_disp_code 115E  
                        mifare_read@bufferSize 004C                          __size_of_m_flash_copy 0077  
                                      main@t16 00D4                                        main@buf 00D2  
                   __size_of_SYSTEM_Initialize 0012                                        clrloop0 1DB1  
                                   ??_lcd_init 0077                                ?_mfapi_pcd_init 0070  
                        ?_other_gpio_port_init 0070                           end_of_initialization 0094  
                          set_globle_ticker@tk 0073                                 ?_m_system_init 0070  
                          ?_EUSART1_Initialize 0070             __size_of_mfapi_is_new_card_present 0031  
                                 _lcd_disp_all 1FE3                 __size_of_mfrc522_bal_write_reg 0011  
                                 _lcd_disp_str 140F                  __end_of_mfrc522_bal_write_reg 1E4A  
                    __end_of_picc_stop_cryptol 1D86                              picc_select@buffer 00AE  
                         _rfid_comm_process_fk 0DAF                           _rfid_comm_process_hs 0C02  
                       mfrc522_bal_write_reg@x 0077                              picc_select@result 00C0  
                      ?_mfrc522_hal_antenna_on 0070                                     _valveTimer 0139  
                                 __pstringtext 0098                __end_of_my_uart1_received_ready 1D7D  
                    FLASH_ReadWord@GIEBitValue 0075                                     _rtVolume_L 012C  
                         ??_EUSART1_Initialize 0073                                ??_key_scan_call 0075  
                     picc_authenticate@command 005E                                    ?_crc_append 002B  
                           _uart1ReceivedCount 0134                                ?_FLASH_ReadWord 0073  
                           _uart1ReceivedTimer 0142                               ??_WDT_Initialize 0073  
                     __end_of_lcd_disp_refresh 1E39                       _TMR0_SetInterruptHandler 1D62  
                                    _PORTCbits 000E                                   _m_flash_copy 1789  
                                    _PORTDbits 000F                                    ?_crc_verify 002B  
                     picc_authenticate@waitIRQ 005F                          picc_select@selectDone 00A7  
                                   crc_sum@len 0025                                    ?_lcd_config 0070  
                                    _TRISAbits 008C                                      _TRISBbits 008D  
                                    _TRISCbits 008E                                      _TRISDbits 008F  
                                    _TRISFbits 030C                        __end_of_ctrlByteDefault 0324  
                        __end_of_m_flash_erase 1F56                     mfrc522_bal_set_bit_reg@reg 0025  
                   mfrc522_bal_set_bit_reg@tmp 0024                       __end_of_DATAEE_WriteByte 1FA9  
                                    _CardError 0141                       ??_picc_req_a_or_wakeup_a 004D  
                        picc_select@txLastBits 00BF                            __end_of_defaultKeyA 031A  
                              _cardKeyCreatKey 031A                     mfrc522_hal_calculate_crc@i 002F  
            __end_of_mfapi_is_new_card_present 1330                       ?_mfrc522_bal_set_bit_reg 0022  
                            mifare_read@buffer 004B                              FLASH_WriteBlock@i 0029  
                        ?_rfid_comm_process_fk 0070                          ?_rfid_comm_process_hs 0070  
                       ?_pcd_mifare_transceive 004B                          create_card_key_b@keyb 0020  
               __end_of_mfrc522_hal_antenna_on 1EF0                              mifare_read@result 0050  
                                _systemTikerms 01AE                     ?_mfrc522_hal_calculate_crc 0026  
                               __end_of___bmul 1E6C                                 __end_of___wmul 1030  
                  picc_req_a_or_wakeup_a@__cmd 0051                                     m_mem_set@x 0075  
         __end_of_mfrc522_bal_read_fifo_len_ex 140F          __size_of_mfrc522_bal_read_fifo_len_ex 0042  
                 _mfrc522_bal_read_fifo_len_ex 13CD                              __size_of_TMR0_ISR 0011  
                            __size_of_TMR1_ISR 0011                               _adcSamplingTimer 012A  
                             _FLASH_WriteBlock 16AD                         ?_OSCILLATOR_Initialize 0070  
                __size_of_data_api_read_eeprom 001F                         data_api_write_eeprom@i 0077  
                            crc_verify@message 002B             __size_of_mfrc522_bal_write_reg_len 0026  
                          start_initialization 0039                      picc_authenticate@sendData 0052  
                     __size_of_TMR0_Initialize 0016                     ??_m_system_start_self_test 0077  
              __size_of_PIN_MANAGER_Initialize 0035                          __end_of_led_port_init 1F09  
                   ?_data_api_system_data_init 0070                          _data_api_write_eeprom 1030  
                              _LCDDigitalTable 02C1                         ??_other_gpio_port_init 0073  
                              ??_m_system_init 0077                   pcd_mifare_transceive@sendLen 004D  
                 pcd_mifare_transceive@waitIRq 0065                          __end_of_m_mem_cpy_len 1F71  
                 data_api_system_data_init@sta 0037               picc_req_a_or_wakeup_a@bufferATQA 004B  
                        __size_of_mifare_write 0048                            __size_of_crc_append 0031  
             picc_req_a_or_wakeup_a@bufferSize 004C                            DATAEE_ReadByte@bAdd 0073  
                     pcd_comm_with_picc@status 0046                            __size_of_crc_verify 0037  
                   __size_of_picc_stop_cryptol 0009             pcd_mifare_transceive@acceptTimeout 004E  
             __size_of_mfrc522_bal_clr_bit_reg 0017                       __size_of_TMR1_Initialize 001D  
                          __size_of_lcd_config 0021                          mfrc522_bal_read_reg@x 0021  
                                     ??___bmul 0074                                       ??___wmul 0077  
                        m_flash_copy@startAddr 0031                                    __pdataBANK2 016C  
                                  __pdataBANK3 01D6                                  ??_mifare_read 004D  
                rfid_comm_process_hs@stpIncDec 00CB                  __size_of_mfrc522_hal_reset_sf 0011  
                  FLASH_EraseBlock@GIEBitValue 0075               __end_of_data_api_system_data_get 1D90  
                           mifare_write@buffer 0069                       __end_of_FLASH_EraseBlock 1FC6  
                              _lcd_disp_code_0 115E                                _lcd_disp_code_1 118C  
                              _lcd_disp_code_2 11BA                                _lcd_disp_code_3 11E8  
                              _lcd_disp_code_4 1216                                _lcd_disp_code_5 1244  
                              _lcd_disp_code_6 1272                                _lcd_disp_code_7 12A0  
                ?_mfrc522_bal_read_fifo_len_ex 0020                             mifare_write@result 00A3  
         __end_of_mfrc522_hal_set_antenna_gain 1F8C          __size_of_mfrc522_hal_set_antenna_gain 001B  
                 _mfrc522_hal_set_antenna_gain 1F71                                    __pbssBIGRAM 2370  
                              _cardUidBlockBuf 0420                                    __pbssCOMMON 0078  
                             _mfrc522_hal_init 083C               mfrc522_bal_write_read_via_spi@rb 0075  
                             lcd_disp_code@loc 0075                                      ___latbits 0003  
                     __size_of_ui_key_waite_up 0031                  __size_of_EUSART1_Transmit_ISR 0003  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00A0  
                                 _mifare_write 1457              __end_of_mfrc522_bal_write_reg_len 10DF  
                                  _defaultKeyA 0314                        __end_of_cardKeyCreatKey 0320  
                                ??_picc_halt_a 004B                                  ??_picc_select 004C  
                            _get_globle_ticker 1DCA                              _set_globle_ticker 1D9A  
                                 _TablerxAlign 02FA                   __size_of_EUSART1_Receive_ISR 0025  
                            __size_of_lcd_init 0005                              picc_halt_a@buffer 004E  
                           ?_get_globle_ticker 0073                __size_of_picc_req_a_or_wakeup_a 0051  
                           ?_set_globle_ticker 0073                        picc_select@collisionPos 00B7  
                       ??_rfid_comm_process_fk 00C4                          _TMR0_InterruptHandler 0136  
                       ??_rfid_comm_process_hs 00C4                              picc_halt_a@result 0052  
                                    _auchCRCHi 0198                                      _auchCRCLo 0098  
                               _rtBalanceMoney 00E8                         _PIN_MANAGER_Initialize 1361  
            __end_of_Main_flowCalibrationTable 3FFC                                      _comBuffer 2370  
                          ??_get_globle_ticker 0075                            ??_set_globle_ticker 0075  
             __end_of_TMR1_SetInterruptHandler 1D6E                     picc_authenticate@blockAddr 004B  
                                     ?___awdiv 0073                   mfrc522_bal_write_reg_len@buf 0020  
                 mfrc522_bal_write_reg_len@len 0022                   mfrc522_bal_write_reg_len@reg 0023  
                 ??_INTERRUPT_InterruptManager 0072                                      __pswtext1 1800  
                                     ?_crc_sum 0073                        __end_of_LCDDigitalTable 02E9  
                                     _BAUD1CON 019F                                      _m_mem_set 1DF6  
                     __size_of_TMR1_StartTimer 0003                               ??_mfapi_pcd_init 0029  
                 __end_of_mfrc522_bal_read_reg 1F22                                      _offReason 013B  
                          __end_of_mifare_read 15E6                         ?_data_api_write_eeprom 0020  
                        pcd_comm_with_picc@cmd 0042                  ?_mfrc522_hal_set_antenna_gain 0070  
                 picc_req_a_or_wakeup_a@status 0052               picc_select@currentLevelKnownBits 00C3  
                             m_flash_copy@addr 002A                      __end_of_get_globle_ticker 1DD8  
                    __end_of_set_globle_ticker 1DA4                               m_flash_erase@len 0022  
                               __size_of_delay 000E                                       _LCDDATA0 07A0  
                             m_flash_copy@wlen 0030                       __size_of_DATAEE_ReadByte 000C  
               FLASH_WriteBlock@blockStartAddr 0026                                    _flashBuffer 0220  
                            ??_TMR0_Initialize 0075                mfapi_is_new_card_present@result 005A  
                               ___wmul@product 0020                                       _LATAbits 010C  
                                     _LATBbits 010D                                       _LATCbits 010E  
                          __end_of_picc_halt_a 083C                                       _LATDbits 010F  
                                     _LATFbits 038C                             _pcd_comm_with_picc 0AB5  
                                    clear_ram0 1DB0                                 m_mem_cpy_len@d 0073  
                               m_mem_cpy_len@s 0075                                       _PIE1bits 0091  
                          __end_of_picc_select 070F            __size_of_INTERRUPT_InterruptManager 0033  
                   ??_TMR0_SetInterruptHandler 0075                                       _PIR1bits 0011  
                    FLASH_EraseBlock@startAddr 0073                               ??_FLASH_ReadWord 0075  
                      __end_of_lcd_disp_code_0 118C                        __end_of_lcd_disp_code_1 11BA  
                      __end_of_lcd_disp_code_2 11E8                        __end_of_lcd_disp_code_3 1216  
                      __end_of_lcd_disp_code_4 1244                        __end_of_lcd_disp_code_5 1272  
                      __end_of_lcd_disp_code_6 12A0                        __end_of_lcd_disp_code_7 12CE  
                             crc_sum@usDataLen 0075                            ?_pcd_comm_with_picc 0031  
                                     _TMR0_ISR 1E06                                       _TMR1_ISR 1E17  
      data_api_calibration_table_data_init@sta 003C        data_api_calibration_table_data_init@stp 003D  
                                 ??_crc_append 002F                                  _findCardTimer 01A8  
                         picc_select@validBits 004B                         _picc_req_a_or_wakeup_a 14EF  
                            ??_TMR1_Initialize 0075                              ___wmul@multiplier 0073  
                            ?_lcd_disp_refresh 0070                                   ??_crc_verify 002F  
                                   ?_m_mem_set 0073                      picc_select@valueOfCollReg 00AD  
                                 ??_lcd_config 0077                             ??_lcd_disp_refresh 0021  
             __end_of_m_system_start_self_test 1645                       ?_my_uart1_received_ready 0070  
                        DATAEE_WriteByte@bData 0073                      pcd_comm_with_picc@rxAlign 003A  
                    pcd_comm_with_picc@waitIRQ 0031                 ??_mfrc522_bal_read_fifo_len_ex 0077  
                         ??_pcd_comm_with_picc 003C                               crc_verify@crccal 0032  
                     data_api_read_eeprom@addr 0076                              ?_DATAEE_WriteByte 0073  
                                     _KeyValue 00E4              __size_of_data_api_system_data_get 000A  
                            ??_ui_key_waite_up 0077                      ?_data_api_system_data_get 0070  
                      ??_pcd_mifare_transceive 004F                       __end_of_FLASH_WriteBlock 1719  
                           ??_DATAEE_WriteByte 0074                                 _bkupSystemData 3E80  
                           __end_of_crc_append 12FF                                     _EECON1bits 0195  
                      _mfrc522_bal_clr_bit_reg 1EAA                          _mfrc522_bal_write_reg 1E39  
                           __end_of_crc_verify 13CD             pcd_mifare_transceive@cmdBufferSize 0067  
                           __end_of_lcd_config 1072                    ??_mfrc522_hal_calculate_crc 002B  
                       __size_of_lcd_disp_code 002D                        ??_OSCILLATOR_Initialize 0073  
                             __size_of___awdiv 0052                    __size_of_EUSART1_Initialize 000F  
                                  _mifare_read 1592                       _TMR1_SetInterruptHandler 1D68  
                        __end_of_key_scan_call 1106               __size_of_mfrc522_bal_set_bit_reg 0017  
                           m_flash_copy@offset 002F                                     _ANSELAbits 018C  
                                   _ANSELFbits 040C                                       _adcvalue 0126  
                        _TMR1_InterruptHandler 01B0                               __size_of_crc_sum 0050  
                       __p_mainSystemData_text 3F00                     rfid_comm_process_fk@result 00D1  
                                crc_append@crc 0034                         _bkupSystemData_absaddr 3E80  
                  ??_data_api_system_data_init 0036                     __size_of_get_globle_ticker 000E  
                   __size_of_set_globle_ticker 000A                                       __ptext10 1540  
                                     __ptext11 0801                                       __ptext20 10B9  
                                     __ptext12 1645                                       __ptext21 13CD  
                                     __ptext13 1457                                     _T1GCONbits 0019  
                                     __ptext30 1EAA                                       __ptext22 1DF6  
                                     __ptext14 08B5                                       __ptext31 1E4A  
                                     __ptext23 1106                                       __ptext15 1592  
                                     __ptext40 1EF0                                       __ptext32 1ED8  
                                     __ptext24 1D74                                       __ptext16 12FF  
                                     __ptext41 1D5D                                       __ptext33 1E39  
                                     __ptext25 1E6C                                       __ptext17 14EF  
                                     __ptext50 1D62                                       __ptext42 1051  
                                     __ptext34 1F09                                       __ptext26 083C  
                                     __ptext18 0AB5                                       __ptext51 1361  
                                     __ptext43 1FE3                                       __ptext35 1072  
                                     __ptext27 1F71                                       __ptext19 1719  
                                     __ptext60 1216                                       __ptext52 1D58  
                                     __ptext44 1000                                       __ptext36 15E6  
                                     __ptext28 1DE7                                       __ptext61 11E8  
                                     __ptext53 1DD8                                       __ptext45 1D50  
                                     __ptext37 1DBC                                       __ptext29 1EC1  
                                     __ptext70 16AD                                       __ptext62 11BA  
                                     __ptext54 140F                                       __ptext46 1FC6  
                                     __ptext38 1E7F                                       __ptext71 1FA9  
                                     __ptext63 118C                                       __ptext55 1E28  
                                     __ptext47 1D4D                                       __ptext39 1D90  
                                     __ptext80 149F                                       __ptext72 1F22  
                                     __ptext64 115E                                       __ptext56 1131  
                                     __ptext48 1D68                                       __ptext81 1012  
                                     __ptext73 1030                                       __ptext65 0937  
                                     __ptext57 12A0                                       __ptext49 1E94  
                                     __ptext74 1F8C                                       __ptext66 1D86  
                                     __ptext58 1272                                       __ptext83 1E17  
                                     __ptext75 07E1                                       __ptext67 09C1  
                                     __ptext59 1244                                       __ptext84 1E06  
                                     __ptext76 1DA4                                       __ptext68 1F3C  
                                     __ptext85 1D4A                                       __ptext77 1396  
                                     __ptext69 1789                                       __ptext86 1094  
                                     __ptext78 1F56                                       __ptext79 12CE  
                            _picc_authenticate 1645                                       _bkupMenu 0078  
                                  _picc_halt_a 0801                                       _hexTable 02E9  
                                     _lcd_init 1D5D                      picc_req_a_or_wakeup_a@cmd 0050  
                            ??_TMR1_StartTimer 0073                                    _picc_select 03F2  
               ??_mfrc522_hal_set_antenna_gain 0026                             ?_picc_authenticate 004B  
                  DATAEE_WriteByte@GIEBitValue 0075                         __end_of_bkupSystemData 3EC8  
                                     _pcdPwrOn 0138                         mifare_write@bufferSize 006B  
                                     _uiAdjbuf 0163                   __end_of_data_api_read_eeprom 0800  
                              m_flash_copy@buf 002C                                m_flash_copy@len 002E  
                                __size_of_main 00D2                     rfid_comm_process_hs@result 00CF  
                             _smallFlowNotCare 013D                                crc_sum@uchCRCHi 0029  
                              crc_sum@uchCRCLo 002A                            picc_select@maxBytes 00AC  
                 _TMR0_DefaultInterruptHandler 0000                       mfrc522_hal_antenna_on@t8 0023  
                            ??_DATAEE_ReadByte 0073                                       _tmTemp16 0124  
                          ??_picc_authenticate 004F                     ?_mfapi_is_new_card_present 0070  
                                     _password 0130                       __end_of_mfrc522_hal_init 08B5  
                         _mfrc522_bal_read_reg 1F09                                     _RC1STAbits 019D  
              pcd_comm_with_picc@controlBuffer 0043                               ?_lcd_disp_code_0 0070  
                             ?_lcd_disp_code_1 0070                               ?_lcd_disp_code_2 0070  
                             ?_lcd_disp_code_3 0070                               ?_lcd_disp_code_4 0070  
                             ?_lcd_disp_code_5 0070                               ?_lcd_disp_code_6 0070  
                             ?_lcd_disp_code_7 0070                            picc_select@uidIndex 00BA  
                     mfrc522_bal_write_reg@reg 0020                         __size_of_m_flash_erase 001A  
                                     int$flags 007E                                       _userKeyB 01D6  
           __end_of_INTERRUPT_InterruptManager 0037                     _INTERRUPT_InterruptManager 0004  
                         get_globle_ticker@ret 0075                            _EUSART1_Receive_ISR 1094  
                            ?_FLASH_EraseBlock 0073         __end_of_mfrc522_bal_write_read_via_spi 1094  
      __size_of_mfrc522_bal_write_read_via_spi 0022                 _mfrc522_bal_write_read_via_spi 1072  
                               _defWriteBlock3 0302                   mfapi_is_new_card_present@cmd 0057  
                      data_api_read_eeprom@buf 0074                                    ??_m_mem_set 0077  
                      data_api_read_eeprom@len 0077                                    _uart1Buffer 04A0  
                      _flowCalibrationLocation 013F                          mifare_write@cmdBuffer 00A1  
                           ??_FLASH_EraseBlock 0075                                     _INTCONbits 000B  
                    __end_of_picc_authenticate 16AD                      picc_select@responseBuffer 00BE  
                             m_mem_cpy_len@len 0077                      picc_select@responseLength 00BC  
                    _mfrc522_hal_calculate_crc 1719                                  _lcd_disp_code 1131  
                       picc_select@bytesToCopy 00BB                mfrc522_bal_read_fifo_len_ex@adr 0025  
              mfrc522_bal_read_fifo_len_ex@buf 0020                mfrc522_bal_read_fifo_len_ex@len 0022  
              mfrc522_bal_read_fifo_len_ex@reg 0024                        __size_of_WDT_Initialize 0004  
                        mifare_write@blockAddr 00A0                   __end_of_mfrc522_hal_reset_sf 1E5B  
                       __p_bkupSystemData_text 3E80                          __end_of_m_system_init 1E94  
                                     intlevel1 0000                  __size_of_other_gpio_port_init 000A  
                         ?_EUSART1_Receive_ISR 0070                      ??_mfrc522_bal_clr_bit_reg 0023  
                            _create_card_key_b 1106                        ?_PIN_MANAGER_Initialize 0070  
                            __CFG_CLKOUTEN$OFF 0000                         ?_mfrc522_bal_write_reg 0077  
                           ?_create_card_key_b 0073                   __end_of_EUSART1_Transmit_ISR 1D4D  
                        ?_mfrc522_bal_read_reg 0070                                _adcAverageValue 012E  
            __size_of_m_system_start_self_test 005F                      ?_m_system_start_self_test 0070  
                    _data_api_system_data_init 0937                             picc_select@rxAlign 00AB  
                         _uart1ReceivedTimeout 01AA                                 crc_sum@puchMsg 0073  
                       __size_of_led_port_init 0019                            ??_create_card_key_b 0076  
                       __end_of_defWriteBlock3 0314                         __size_of_m_mem_cpy_len 001B  
                                  _valveStatus 00E1                        ??_data_api_write_eeprom 0076  
                                _warningStatus 013C                                     _OPTION_REG 0095  
                                  _rtVolume_m3 00DD                                    crc_append@n 002D  
                    _Main_flowCalibrationTable 3F80                                _TMR0_Initialize 1E94  
                                crc_sum@uIndex 0027                    mfrc522_bal_clr_bit_reg@bits 0022  
                 pcd_comm_with_picc@bitFraming 003F                         picc_select@uidComplete 00A6  
                               ?_lcd_disp_code 0075                           picc_authenticate@key 004C  
                         picc_authenticate@uid 004E                                  _m_flash_erase 1F3C  
                   ?_mfrc522_bal_write_reg_len 0020                      __end_of_create_card_key_b 1131  
                        ??_EUSART1_Receive_ISR 0070                 __end_of_PIN_MANAGER_Initialize 1396  
                   mfrc522_bal_clr_bit_reg@reg 0025                     mfrc522_bal_clr_bit_reg@tmp 0024  
                     ??_mfrc522_hal_antenna_on 0022                                  ?_lcd_disp_all 0070  
                 pcd_comm_with_picc@_validBits 0049                                  ?_lcd_disp_str 0022  
                           picc_authenticate@i 0060                                    crc_verify@n 002D  
                  pcd_mifare_transceive@result 0068                                _TMR1_Initialize 1FC6  
                __size_of_rfid_comm_process_fk 0251                  __size_of_rfid_comm_process_hs 01AD  
                        rfid_comm_process_fk@i 00CE  
