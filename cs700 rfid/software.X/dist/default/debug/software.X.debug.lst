

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Nov 25 00:29:22 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	stringtext15,global,class=STRCODE,delta=2
    24                           	psect	stringtext16,global,class=STRCODE,delta=2
    25                           	psect	stringtext17,global,class=STRCODE,delta=2
    26                           	psect	stringtext18,global,class=STRCODE,delta=2
    27                           	psect	stringtext19,global,class=STRCODE,delta=2
    28                           	psect	stringtext20,global,class=STRCODE,delta=2
    29                           	psect	stringtext21,global,class=STRCODE,delta=2
    30                           	psect	stringtext22,global,class=STRCODE,delta=2
    31                           	psect	stringtext23,global,class=STRCODE,delta=2
    32                           	psect	stringtext24,global,class=STRCODE,delta=2
    33                           	psect	stringtext25,global,class=STRCODE,delta=2
    34                           	psect	stringtext26,global,class=STRCODE,delta=2
    35                           	psect	stringtext27,global,class=STRCODE,delta=2
    36                           	psect	stringtext28,global,class=STRCODE,delta=2
    37                           	psect	stringtext29,global,class=STRCODE,delta=2
    38                           	psect	cinit,global,class=CODE,merge=1,delta=2
    39                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    40                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    41                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    42                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    43                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    44                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    45                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    46                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    47                           	psect	inittext,global,class=CODE,delta=2
    48                           	psect	clrtext,global,class=CODE,delta=2
    49                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    50                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    51                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    52                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    53                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    54                           	psect	text1,local,class=CODE,merge=1,delta=2
    55                           	psect	text2,local,class=CODE,merge=1,delta=2
    56                           	psect	text3,local,class=CODE,merge=1,delta=2
    57                           	psect	text4,local,class=CODE,merge=1,delta=2
    58                           	psect	text5,local,class=CODE,merge=1,delta=2
    59                           	psect	text6,local,class=CODE,merge=1,delta=2
    60                           	psect	text7,local,class=CODE,merge=1,delta=2
    61                           	psect	text8,local,class=CODE,merge=1,delta=2
    62                           	psect	text9,local,class=CODE,merge=1,delta=2
    63                           	psect	text10,local,class=CODE,merge=1,delta=2
    64                           	psect	text11,local,class=CODE,merge=1,delta=2
    65                           	psect	text12,local,class=CODE,merge=1,delta=2
    66                           	psect	text13,local,class=CODE,merge=1,delta=2
    67                           	psect	text14,local,class=CODE,merge=1,delta=2
    68                           	psect	text15,local,class=CODE,merge=1,delta=2
    69                           	psect	text16,local,class=CODE,merge=1,delta=2
    70                           	psect	text17,local,class=CODE,merge=1,delta=2
    71                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text19,local,class=CODE,merge=1,delta=2
    73                           	psect	text20,local,class=CODE,merge=1,delta=2
    74                           	psect	text21,local,class=CODE,merge=1,delta=2
    75                           	psect	text22,local,class=CODE,merge=1,delta=2
    76                           	psect	text23,local,class=CODE,merge=1,delta=2
    77                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	text26,local,class=CODE,merge=1,delta=2
    80                           	psect	text27,local,class=CODE,merge=1,delta=2
    81                           	psect	text28,local,class=CODE,merge=1,delta=2
    82                           	psect	text29,local,class=CODE,merge=1,delta=2
    83                           	psect	text30,local,class=CODE,merge=1,delta=2
    84                           	psect	text31,local,class=CODE,merge=1,delta=2
    85                           	psect	text32,local,class=CODE,merge=1,delta=2
    86                           	psect	text33,local,class=CODE,merge=1,delta=2
    87                           	psect	text34,local,class=CODE,merge=1,delta=2
    88                           	psect	text35,local,class=CODE,merge=1,delta=2
    89                           	psect	text36,local,class=CODE,merge=1,delta=2
    90                           	psect	text37,local,class=CODE,merge=1,delta=2
    91                           	psect	text38,local,class=CODE,merge=1,delta=2
    92                           	psect	text39,local,class=CODE,merge=1,delta=2
    93                           	psect	text40,local,class=CODE,merge=1,delta=2
    94                           	psect	text41,local,class=CODE,merge=1,delta=2
    95                           	psect	text42,local,class=CODE,merge=1,delta=2
    96                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text44,local,class=CODE,merge=1,delta=2
    98                           	psect	text45,local,class=CODE,merge=1,delta=2
    99                           	psect	text46,local,class=CODE,merge=1,delta=2
   100                           	psect	text47,local,class=CODE,merge=1,delta=2
   101                           	psect	text48,local,class=CODE,merge=1,delta=2
   102                           	psect	swtext1,local,class=CONST,delta=2
   103                           	psect	text49,local,class=CODE,merge=1,delta=2
   104                           	psect	text50,local,class=CODE,merge=1,delta=2
   105                           	psect	text51,local,class=CODE,merge=1,delta=2
   106                           	psect	text52,local,class=CODE,merge=1,delta=2
   107                           	psect	text53,local,class=CODE,merge=1,delta=2
   108                           	psect	text54,local,class=CODE,merge=1,delta=2
   109                           	psect	text55,local,class=CODE,merge=1,delta=2
   110                           	psect	text56,local,class=CODE,merge=1,delta=2
   111                           	psect	text57,local,class=CODE,merge=1,delta=2
   112                           	psect	text58,local,class=CODE,merge=1,delta=2
   113                           	psect	swtext2,local,class=CONST,delta=2
   114                           	psect	text59,local,class=CODE,merge=1,delta=2
   115                           	psect	text60,local,class=CODE,merge=1,delta=2
   116                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
   117                           	psect	text62,local,class=CODE,merge=1,delta=2
   118                           	psect	text63,local,class=CODE,merge=1,delta=2
   119                           	psect	text64,local,class=CODE,merge=1,delta=2
   120                           	psect	text65,local,class=CODE,merge=1,delta=2
   121                           	psect	text66,local,class=CODE,merge=1,delta=2
   122                           	psect	text67,local,class=CODE,merge=1,delta=2
   123                           	psect	text68,local,class=CODE,merge=1,delta=2
   124                           	psect	text69,local,class=CODE,merge=1,delta=2
   125                           	psect	text70,local,class=CODE,merge=1,delta=2
   126                           	psect	text71,local,class=CODE,merge=1,delta=2
   127                           	psect	text72,local,class=CODE,merge=1,delta=2
   128                           	psect	text73,local,class=CODE,merge=1,delta=2
   129                           	psect	text74,local,class=CODE,merge=1,delta=2
   130                           	psect	text75,local,class=CODE,merge=1,delta=2,group=2
   131                           	psect	text76,local,class=CODE,merge=1,delta=2,group=2
   132                           	psect	text77,local,class=CODE,merge=1,delta=2
   133                           	psect	text78,local,class=CODE,merge=1,delta=2
   134                           	psect	text79,local,class=CODE,merge=1,delta=2
   135                           	psect	text80,local,class=CODE,merge=1,delta=2
   136                           	psect	text81,local,class=CODE,merge=1,delta=2
   137                           	psect	text82,local,class=CODE,merge=1,delta=2
   138                           	psect	text83,local,class=CODE,merge=1,delta=2
   139                           	psect	text84,local,class=CODE,merge=1,delta=2
   140                           	psect	text85,local,class=CODE,merge=1,delta=2
   141                           	psect	text86,local,class=CODE,merge=1,delta=2
   142                           	psect	text87,local,class=CODE,merge=1,delta=2
   143                           	psect	text88,local,class=CODE,merge=1,delta=2
   144                           	psect	text89,local,class=CODE,merge=1,delta=2
   145                           	psect	text90,local,class=CODE,merge=1,delta=2
   146                           	psect	text91,local,class=CODE,merge=1,delta=2
   147                           	psect	text92,local,class=CODE,merge=1,delta=2
   148                           	psect	text93,local,class=CODE,merge=1,delta=2
   149                           	psect	text94,local,class=CODE,merge=1,delta=2
   150                           	psect	text95,local,class=CODE,merge=1,delta=2
   151                           	psect	text96,local,class=CODE,merge=1,delta=2
   152                           	psect	text97,local,class=CODE,merge=1,delta=2
   153                           	psect	swtext3,local,class=CONST,delta=2
   154                           	psect	text98,local,class=CODE,merge=1,delta=2,group=2
   155                           	psect	text99,local,class=CODE,merge=1,delta=2
   156                           	psect	text100,local,class=CODE,merge=1,delta=2
   157                           	psect	text101,local,class=CODE,merge=1,delta=2
   158                           	psect	text102,local,class=CODE,merge=1,delta=2
   159                           	psect	text103,local,class=CODE,merge=1,delta=2
   160                           	psect	text104,local,class=CODE,merge=1,delta=2
   161                           	psect	text105,local,class=CODE,merge=1,delta=2
   162                           	psect	text106,local,class=CODE,merge=1,delta=2
   163                           	psect	text107,local,class=CODE,merge=1,delta=2
   164                           	psect	text108,local,class=CODE,merge=1,delta=2
   165                           	psect	text109,local,class=CODE,merge=1,delta=2
   166                           	psect	text110,local,class=CODE,merge=1,delta=2
   167                           	psect	text111,local,class=CODE,merge=1,delta=2
   168                           	psect	text112,local,class=CODE,merge=1,delta=2
   169                           	psect	text113,local,class=CODE,merge=1,delta=2
   170                           	psect	text114,local,class=CODE,merge=1,delta=2
   171                           	psect	text115,local,class=CODE,merge=1,delta=2
   172                           	psect	text116,local,class=CODE,merge=1,delta=2
   173                           	psect	text117,local,class=CODE,merge=1,delta=2
   174                           	psect	text118,local,class=CODE,merge=1,delta=2
   175                           	psect	text119,local,class=CODE,merge=1,delta=2
   176                           	psect	text120,local,class=CODE,merge=1,delta=2
   177                           	psect	text121,local,class=CODE,merge=1,delta=2
   178                           	psect	text122,local,class=CODE,merge=1,delta=2
   179                           	psect	text123,local,class=CODE,merge=1,delta=2
   180                           	psect	text124,local,class=CODE,merge=1,delta=2
   181                           	psect	text125,local,class=CODE,merge=1,delta=2
   182                           	psect	text126,local,class=CODE,merge=1,delta=2
   183                           	psect	text127,local,class=CODE,merge=1,delta=2
   184                           	psect	text128,local,class=CODE,merge=1,delta=2,group=2
   185                           	psect	text129,local,class=CODE,merge=1,delta=2
   186                           	psect	text130,local,class=CODE,merge=1,delta=2
   187                           	psect	text131,local,class=CODE,merge=1,delta=2
   188                           	psect	text132,local,class=CODE,merge=1,delta=2
   189                           	psect	text133,local,class=CODE,merge=1,delta=2
   190                           	psect	text134,local,class=CODE,merge=1,delta=2
   191                           	psect	text135,local,class=CODE,merge=1,delta=2
   192                           	psect	text136,local,class=CODE,merge=1,delta=2
   193                           	psect	text137,local,class=CODE,merge=1,delta=2,group=2
   194                           	psect	text138,local,class=CODE,merge=1,delta=2,group=2
   195                           	psect	text139,local,class=CODE,merge=1,delta=2
   196                           	psect	text140,local,class=CODE,merge=1,delta=2
   197                           	psect	text141,local,class=CODE,merge=1,delta=2
   198                           	psect	text142,local,class=CODE,merge=1,delta=2
   199                           	psect	text143,local,class=CODE,merge=1,delta=2
   200                           	psect	text144,local,class=CODE,merge=1,delta=2
   201                           	psect	text145,local,class=CODE,merge=1,delta=2
   202                           	psect	text146,local,class=CODE,merge=1,delta=2
   203                           	psect	text147,local,class=CODE,merge=1,delta=2
   204                           	psect	text148,local,class=CODE,merge=1,delta=2
   205                           	psect	text149,local,class=CODE,merge=1,delta=2
   206                           	psect	text150,local,class=CODE,merge=1,delta=2
   207                           	psect	text151,local,class=CODE,merge=1,delta=2
   208                           	psect	text152,local,class=CODE,merge=1,delta=2
   209                           	psect	text153,local,class=CODE,merge=1,delta=2
   210                           	psect	text154,local,class=CODE,merge=1,delta=2
   211                           	psect	text155,local,class=CODE,merge=1,delta=2
   212                           	psect	text156,local,class=CODE,merge=1,delta=2
   213                           	psect	text157,local,class=CODE,merge=1,delta=2
   214                           	psect	text158,local,class=CODE,merge=1,delta=2
   215                           	psect	text159,local,class=CODE,merge=1,delta=2
   216                           	psect	text160,local,class=CODE,merge=1,delta=2
   217                           	psect	text161,local,class=CODE,merge=1,delta=2
   218                           	psect	text162,local,class=CODE,merge=1,delta=2,group=2
   219                           	psect	intentry,global,class=CODE,delta=2
   220                           	psect	text164,local,class=CODE,merge=1,delta=2
   221                           	psect	text165,local,class=CODE,merge=1,delta=2
   222                           	psect	text166,local,class=CODE,merge=1,delta=2
   223                           	psect	text167,local,class=CODE,merge=1,delta=2
   224                           	dabs	1,0x620,48
   225                           	dabs	1,0x5A4,76
   226                           	dabs	1,0x3A0,80
   227                           	dabs	1,0x340,48
   228                           	dabs	1,0x4A0,80,_uart1Buffer
   229                           	dabs	1,0x456,18,_cardDecBuf
   230                           	dabs	1,0x444,18,_cardIncBuf
   231                           	dabs	1,0x432,18,_cardWriteBuf
   232                           	dabs	1,0x420,18,_cardUidBlockBuf
   233                           	dabs	1,0x2200,0,_comBuffer
   234                           	dabs	1,0x2374,0,_Main_flowCalibrationTable
   235                           	dabs	1,0x7E,2
   236  0000                     
   237                           ; Version 1.42
   238                           ; Generated 13/04/2017 GMT
   239                           ; 
   240                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   241                           ; All rights reserved.
   242                           ; 
   243                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   244                           ; 
   245                           ; Redistribution and use in source and binary forms, with or without modification, are
   246                           ; permitted provided that the following conditions are met:
   247                           ; 
   248                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   249                           ;        conditions and the following disclaimer.
   250                           ; 
   251                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   252                           ;        of conditions and the following disclaimer in the documentation and/or other
   253                           ;        materials provided with the distribution.
   254                           ; 
   255                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   256                           ;        software without specific prior written permission.
   257                           ; 
   258                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   259                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   260                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   261                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   262                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   263                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   264                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   265                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   266                           ; 
   267                           ; 
   268                           ; Code-generator required, PIC16F1947 Definitions
   269                           ; 
   270                           ; SFR Addresses
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001E                     	;# 
   302  001F                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  008F                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0094                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  0110                     	;# 
   328  0111                     	;# 
   329  0112                     	;# 
   330  0113                     	;# 
   331  0114                     	;# 
   332  0115                     	;# 
   333  0116                     	;# 
   334  0117                     	;# 
   335  0118                     	;# 
   336  0119                     	;# 
   337  011A                     	;# 
   338  011B                     	;# 
   339  011D                     	;# 
   340  011E                     	;# 
   341  011F                     	;# 
   342  018C                     	;# 
   343  0190                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  0199                     	;# 
   355  019A                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019D                     	;# 
   365  019E                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  019F                     	;# 
   369  020D                     	;# 
   370  0211                     	;# 
   371  0211                     	;# 
   372  0212                     	;# 
   373  0212                     	;# 
   374  0213                     	;# 
   375  0213                     	;# 
   376  0214                     	;# 
   377  0214                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0216                     	;# 
   382  0216                     	;# 
   383  0217                     	;# 
   384  0217                     	;# 
   385  0219                     	;# 
   386  021A                     	;# 
   387  021B                     	;# 
   388  021C                     	;# 
   389  021D                     	;# 
   390  021E                     	;# 
   391  021F                     	;# 
   392  028C                     	;# 
   393  028D                     	;# 
   394  0291                     	;# 
   395  0291                     	;# 
   396  0292                     	;# 
   397  0293                     	;# 
   398  0294                     	;# 
   399  0295                     	;# 
   400  0295                     	;# 
   401  0296                     	;# 
   402  0298                     	;# 
   403  0298                     	;# 
   404  0299                     	;# 
   405  029A                     	;# 
   406  029B                     	;# 
   407  029C                     	;# 
   408  029C                     	;# 
   409  029D                     	;# 
   410  029E                     	;# 
   411  029F                     	;# 
   412  030C                     	;# 
   413  030D                     	;# 
   414  0311                     	;# 
   415  0311                     	;# 
   416  0312                     	;# 
   417  0313                     	;# 
   418  0314                     	;# 
   419  0315                     	;# 
   420  0315                     	;# 
   421  0316                     	;# 
   422  0318                     	;# 
   423  0318                     	;# 
   424  0319                     	;# 
   425  031A                     	;# 
   426  031C                     	;# 
   427  031C                     	;# 
   428  031D                     	;# 
   429  031E                     	;# 
   430  038C                     	;# 
   431  038D                     	;# 
   432  0394                     	;# 
   433  0395                     	;# 
   434  0396                     	;# 
   435  040C                     	;# 
   436  040D                     	;# 
   437  0415                     	;# 
   438  0416                     	;# 
   439  0417                     	;# 
   440  041C                     	;# 
   441  041D                     	;# 
   442  041E                     	;# 
   443  048D                     	;# 
   444  0491                     	;# 
   445  0492                     	;# 
   446  0493                     	;# 
   447  0493                     	;# 
   448  0494                     	;# 
   449  0495                     	;# 
   450  0496                     	;# 
   451  0497                     	;# 
   452  0791                     	;# 
   453  0792                     	;# 
   454  0793                     	;# 
   455  0794                     	;# 
   456  0795                     	;# 
   457  0798                     	;# 
   458  0799                     	;# 
   459  079A                     	;# 
   460  079B                     	;# 
   461  079C                     	;# 
   462  079D                     	;# 
   463  07A0                     	;# 
   464  07A1                     	;# 
   465  07A2                     	;# 
   466  07A3                     	;# 
   467  07A4                     	;# 
   468  07A5                     	;# 
   469  07A6                     	;# 
   470  07A7                     	;# 
   471  07A8                     	;# 
   472  07A9                     	;# 
   473  07AA                     	;# 
   474  07AB                     	;# 
   475  07AC                     	;# 
   476  07AD                     	;# 
   477  07AE                     	;# 
   478  07AF                     	;# 
   479  07B0                     	;# 
   480  07B1                     	;# 
   481  07B2                     	;# 
   482  07B3                     	;# 
   483  07B4                     	;# 
   484  07B5                     	;# 
   485  07B6                     	;# 
   486  07B7                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  000F                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0013                     	;# 
   518  0014                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  008F                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  010F                     	;# 
   554  0110                     	;# 
   555  0111                     	;# 
   556  0112                     	;# 
   557  0113                     	;# 
   558  0114                     	;# 
   559  0115                     	;# 
   560  0116                     	;# 
   561  0117                     	;# 
   562  0118                     	;# 
   563  0119                     	;# 
   564  011A                     	;# 
   565  011B                     	;# 
   566  011D                     	;# 
   567  011E                     	;# 
   568  011F                     	;# 
   569  018C                     	;# 
   570  0190                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0193                     	;# 
   577  0194                     	;# 
   578  0195                     	;# 
   579  0196                     	;# 
   580  0199                     	;# 
   581  0199                     	;# 
   582  019A                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019C                     	;# 
   590  019D                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019E                     	;# 
   594  019F                     	;# 
   595  019F                     	;# 
   596  020D                     	;# 
   597  0211                     	;# 
   598  0211                     	;# 
   599  0212                     	;# 
   600  0212                     	;# 
   601  0213                     	;# 
   602  0213                     	;# 
   603  0214                     	;# 
   604  0214                     	;# 
   605  0215                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0216                     	;# 
   609  0216                     	;# 
   610  0217                     	;# 
   611  0217                     	;# 
   612  0219                     	;# 
   613  021A                     	;# 
   614  021B                     	;# 
   615  021C                     	;# 
   616  021D                     	;# 
   617  021E                     	;# 
   618  021F                     	;# 
   619  028C                     	;# 
   620  028D                     	;# 
   621  0291                     	;# 
   622  0291                     	;# 
   623  0292                     	;# 
   624  0293                     	;# 
   625  0294                     	;# 
   626  0295                     	;# 
   627  0295                     	;# 
   628  0296                     	;# 
   629  0298                     	;# 
   630  0298                     	;# 
   631  0299                     	;# 
   632  029A                     	;# 
   633  029B                     	;# 
   634  029C                     	;# 
   635  029C                     	;# 
   636  029D                     	;# 
   637  029E                     	;# 
   638  029F                     	;# 
   639  030C                     	;# 
   640  030D                     	;# 
   641  0311                     	;# 
   642  0311                     	;# 
   643  0312                     	;# 
   644  0313                     	;# 
   645  0314                     	;# 
   646  0315                     	;# 
   647  0315                     	;# 
   648  0316                     	;# 
   649  0318                     	;# 
   650  0318                     	;# 
   651  0319                     	;# 
   652  031A                     	;# 
   653  031C                     	;# 
   654  031C                     	;# 
   655  031D                     	;# 
   656  031E                     	;# 
   657  038C                     	;# 
   658  038D                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  040C                     	;# 
   663  040D                     	;# 
   664  0415                     	;# 
   665  0416                     	;# 
   666  0417                     	;# 
   667  041C                     	;# 
   668  041D                     	;# 
   669  041E                     	;# 
   670  048D                     	;# 
   671  0491                     	;# 
   672  0492                     	;# 
   673  0493                     	;# 
   674  0493                     	;# 
   675  0494                     	;# 
   676  0495                     	;# 
   677  0496                     	;# 
   678  0497                     	;# 
   679  0791                     	;# 
   680  0792                     	;# 
   681  0793                     	;# 
   682  0794                     	;# 
   683  0795                     	;# 
   684  0798                     	;# 
   685  0799                     	;# 
   686  079A                     	;# 
   687  079B                     	;# 
   688  079C                     	;# 
   689  079D                     	;# 
   690  07A0                     	;# 
   691  07A1                     	;# 
   692  07A2                     	;# 
   693  07A3                     	;# 
   694  07A4                     	;# 
   695  07A5                     	;# 
   696  07A6                     	;# 
   697  07A7                     	;# 
   698  07A8                     	;# 
   699  07A9                     	;# 
   700  07AA                     	;# 
   701  07AB                     	;# 
   702  07AC                     	;# 
   703  07AD                     	;# 
   704  07AE                     	;# 
   705  07AF                     	;# 
   706  07B0                     	;# 
   707  07B1                     	;# 
   708  07B2                     	;# 
   709  07B3                     	;# 
   710  07B4                     	;# 
   711  07B5                     	;# 
   712  07B6                     	;# 
   713  07B7                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  000E                     	;# 
   740  000F                     	;# 
   741  0010                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0014                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  001E                     	;# 
   756  001F                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  008F                     	;# 
   761  0090                     	;# 
   762  0091                     	;# 
   763  0092                     	;# 
   764  0093                     	;# 
   765  0094                     	;# 
   766  0095                     	;# 
   767  0096                     	;# 
   768  0097                     	;# 
   769  0098                     	;# 
   770  0099                     	;# 
   771  009A                     	;# 
   772  009B                     	;# 
   773  009B                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  010C                     	;# 
   778  010D                     	;# 
   779  010E                     	;# 
   780  010F                     	;# 
   781  0110                     	;# 
   782  0111                     	;# 
   783  0112                     	;# 
   784  0113                     	;# 
   785  0114                     	;# 
   786  0115                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  0118                     	;# 
   790  0119                     	;# 
   791  011A                     	;# 
   792  011B                     	;# 
   793  011D                     	;# 
   794  011E                     	;# 
   795  011F                     	;# 
   796  018C                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019A                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019C                     	;# 
   817  019D                     	;# 
   818  019D                     	;# 
   819  019E                     	;# 
   820  019E                     	;# 
   821  019F                     	;# 
   822  019F                     	;# 
   823  020D                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0216                     	;# 
   836  0216                     	;# 
   837  0217                     	;# 
   838  0217                     	;# 
   839  0219                     	;# 
   840  021A                     	;# 
   841  021B                     	;# 
   842  021C                     	;# 
   843  021D                     	;# 
   844  021E                     	;# 
   845  021F                     	;# 
   846  028C                     	;# 
   847  028D                     	;# 
   848  0291                     	;# 
   849  0291                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0295                     	;# 
   855  0296                     	;# 
   856  0298                     	;# 
   857  0298                     	;# 
   858  0299                     	;# 
   859  029A                     	;# 
   860  029B                     	;# 
   861  029C                     	;# 
   862  029C                     	;# 
   863  029D                     	;# 
   864  029E                     	;# 
   865  029F                     	;# 
   866  030C                     	;# 
   867  030D                     	;# 
   868  0311                     	;# 
   869  0311                     	;# 
   870  0312                     	;# 
   871  0313                     	;# 
   872  0314                     	;# 
   873  0315                     	;# 
   874  0315                     	;# 
   875  0316                     	;# 
   876  0318                     	;# 
   877  0318                     	;# 
   878  0319                     	;# 
   879  031A                     	;# 
   880  031C                     	;# 
   881  031C                     	;# 
   882  031D                     	;# 
   883  031E                     	;# 
   884  038C                     	;# 
   885  038D                     	;# 
   886  0394                     	;# 
   887  0395                     	;# 
   888  0396                     	;# 
   889  040C                     	;# 
   890  040D                     	;# 
   891  0415                     	;# 
   892  0416                     	;# 
   893  0417                     	;# 
   894  041C                     	;# 
   895  041D                     	;# 
   896  041E                     	;# 
   897  048D                     	;# 
   898  0491                     	;# 
   899  0492                     	;# 
   900  0493                     	;# 
   901  0493                     	;# 
   902  0494                     	;# 
   903  0495                     	;# 
   904  0496                     	;# 
   905  0497                     	;# 
   906  0791                     	;# 
   907  0792                     	;# 
   908  0793                     	;# 
   909  0794                     	;# 
   910  0795                     	;# 
   911  0798                     	;# 
   912  0799                     	;# 
   913  079A                     	;# 
   914  079B                     	;# 
   915  079C                     	;# 
   916  079D                     	;# 
   917  07A0                     	;# 
   918  07A1                     	;# 
   919  07A2                     	;# 
   920  07A3                     	;# 
   921  07A4                     	;# 
   922  07A5                     	;# 
   923  07A6                     	;# 
   924  07A7                     	;# 
   925  07A8                     	;# 
   926  07A9                     	;# 
   927  07AA                     	;# 
   928  07AB                     	;# 
   929  07AC                     	;# 
   930  07AD                     	;# 
   931  07AE                     	;# 
   932  07AF                     	;# 
   933  07B0                     	;# 
   934  07B1                     	;# 
   935  07B2                     	;# 
   936  07B3                     	;# 
   937  07B4                     	;# 
   938  07B5                     	;# 
   939  07B6                     	;# 
   940  07B7                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  000F                     	;# 
   968  0010                     	;# 
   969  0011                     	;# 
   970  0012                     	;# 
   971  0013                     	;# 
   972  0014                     	;# 
   973  0015                     	;# 
   974  0016                     	;# 
   975  0016                     	;# 
   976  0017                     	;# 
   977  0018                     	;# 
   978  0019                     	;# 
   979  001A                     	;# 
   980  001B                     	;# 
   981  001C                     	;# 
   982  001E                     	;# 
   983  001F                     	;# 
   984  008C                     	;# 
   985  008D                     	;# 
   986  008E                     	;# 
   987  008F                     	;# 
   988  0090                     	;# 
   989  0091                     	;# 
   990  0092                     	;# 
   991  0093                     	;# 
   992  0094                     	;# 
   993  0095                     	;# 
   994  0096                     	;# 
   995  0097                     	;# 
   996  0098                     	;# 
   997  0099                     	;# 
   998  009A                     	;# 
   999  009B                     	;# 
  1000  009B                     	;# 
  1001  009C                     	;# 
  1002  009D                     	;# 
  1003  009E                     	;# 
  1004  010C                     	;# 
  1005  010D                     	;# 
  1006  010E                     	;# 
  1007  010F                     	;# 
  1008  0110                     	;# 
  1009  0111                     	;# 
  1010  0112                     	;# 
  1011  0113                     	;# 
  1012  0114                     	;# 
  1013  0115                     	;# 
  1014  0116                     	;# 
  1015  0117                     	;# 
  1016  0118                     	;# 
  1017  0119                     	;# 
  1018  011A                     	;# 
  1019  011B                     	;# 
  1020  011D                     	;# 
  1021  011E                     	;# 
  1022  011F                     	;# 
  1023  018C                     	;# 
  1024  0190                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  0199                     	;# 
  1036  019A                     	;# 
  1037  019A                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019D                     	;# 
  1045  019D                     	;# 
  1046  019E                     	;# 
  1047  019E                     	;# 
  1048  019F                     	;# 
  1049  019F                     	;# 
  1050  020D                     	;# 
  1051  0211                     	;# 
  1052  0211                     	;# 
  1053  0212                     	;# 
  1054  0212                     	;# 
  1055  0213                     	;# 
  1056  0213                     	;# 
  1057  0214                     	;# 
  1058  0214                     	;# 
  1059  0215                     	;# 
  1060  0215                     	;# 
  1061  0215                     	;# 
  1062  0216                     	;# 
  1063  0216                     	;# 
  1064  0217                     	;# 
  1065  0217                     	;# 
  1066  0219                     	;# 
  1067  021A                     	;# 
  1068  021B                     	;# 
  1069  021C                     	;# 
  1070  021D                     	;# 
  1071  021E                     	;# 
  1072  021F                     	;# 
  1073  028C                     	;# 
  1074  028D                     	;# 
  1075  0291                     	;# 
  1076  0291                     	;# 
  1077  0292                     	;# 
  1078  0293                     	;# 
  1079  0294                     	;# 
  1080  0295                     	;# 
  1081  0295                     	;# 
  1082  0296                     	;# 
  1083  0298                     	;# 
  1084  0298                     	;# 
  1085  0299                     	;# 
  1086  029A                     	;# 
  1087  029B                     	;# 
  1088  029C                     	;# 
  1089  029C                     	;# 
  1090  029D                     	;# 
  1091  029E                     	;# 
  1092  029F                     	;# 
  1093  030C                     	;# 
  1094  030D                     	;# 
  1095  0311                     	;# 
  1096  0311                     	;# 
  1097  0312                     	;# 
  1098  0313                     	;# 
  1099  0314                     	;# 
  1100  0315                     	;# 
  1101  0315                     	;# 
  1102  0316                     	;# 
  1103  0318                     	;# 
  1104  0318                     	;# 
  1105  0319                     	;# 
  1106  031A                     	;# 
  1107  031C                     	;# 
  1108  031C                     	;# 
  1109  031D                     	;# 
  1110  031E                     	;# 
  1111  038C                     	;# 
  1112  038D                     	;# 
  1113  0394                     	;# 
  1114  0395                     	;# 
  1115  0396                     	;# 
  1116  040C                     	;# 
  1117  040D                     	;# 
  1118  0415                     	;# 
  1119  0416                     	;# 
  1120  0417                     	;# 
  1121  041C                     	;# 
  1122  041D                     	;# 
  1123  041E                     	;# 
  1124  048D                     	;# 
  1125  0491                     	;# 
  1126  0492                     	;# 
  1127  0493                     	;# 
  1128  0493                     	;# 
  1129  0494                     	;# 
  1130  0495                     	;# 
  1131  0496                     	;# 
  1132  0497                     	;# 
  1133  0791                     	;# 
  1134  0792                     	;# 
  1135  0793                     	;# 
  1136  0794                     	;# 
  1137  0795                     	;# 
  1138  0798                     	;# 
  1139  0799                     	;# 
  1140  079A                     	;# 
  1141  079B                     	;# 
  1142  079C                     	;# 
  1143  079D                     	;# 
  1144  07A0                     	;# 
  1145  07A1                     	;# 
  1146  07A2                     	;# 
  1147  07A3                     	;# 
  1148  07A4                     	;# 
  1149  07A5                     	;# 
  1150  07A6                     	;# 
  1151  07A7                     	;# 
  1152  07A8                     	;# 
  1153  07A9                     	;# 
  1154  07AA                     	;# 
  1155  07AB                     	;# 
  1156  07AC                     	;# 
  1157  07AD                     	;# 
  1158  07AE                     	;# 
  1159  07AF                     	;# 
  1160  07B0                     	;# 
  1161  07B1                     	;# 
  1162  07B2                     	;# 
  1163  07B3                     	;# 
  1164  07B4                     	;# 
  1165  07B5                     	;# 
  1166  07B6                     	;# 
  1167  07B7                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179  0000                     	;# 
  1180  0001                     	;# 
  1181  0002                     	;# 
  1182  0003                     	;# 
  1183  0004                     	;# 
  1184  0005                     	;# 
  1185  0006                     	;# 
  1186  0007                     	;# 
  1187  0008                     	;# 
  1188  0009                     	;# 
  1189  000A                     	;# 
  1190  000B                     	;# 
  1191  000C                     	;# 
  1192  000D                     	;# 
  1193  000E                     	;# 
  1194  000F                     	;# 
  1195  0010                     	;# 
  1196  0011                     	;# 
  1197  0012                     	;# 
  1198  0013                     	;# 
  1199  0014                     	;# 
  1200  0015                     	;# 
  1201  0016                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001C                     	;# 
  1209  001E                     	;# 
  1210  001F                     	;# 
  1211  008C                     	;# 
  1212  008D                     	;# 
  1213  008E                     	;# 
  1214  008F                     	;# 
  1215  0090                     	;# 
  1216  0091                     	;# 
  1217  0092                     	;# 
  1218  0093                     	;# 
  1219  0094                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0098                     	;# 
  1224  0099                     	;# 
  1225  009A                     	;# 
  1226  009B                     	;# 
  1227  009B                     	;# 
  1228  009C                     	;# 
  1229  009D                     	;# 
  1230  009E                     	;# 
  1231  010C                     	;# 
  1232  010D                     	;# 
  1233  010E                     	;# 
  1234  010F                     	;# 
  1235  0110                     	;# 
  1236  0111                     	;# 
  1237  0112                     	;# 
  1238  0113                     	;# 
  1239  0114                     	;# 
  1240  0115                     	;# 
  1241  0116                     	;# 
  1242  0117                     	;# 
  1243  0118                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011B                     	;# 
  1247  011D                     	;# 
  1248  011E                     	;# 
  1249  011F                     	;# 
  1250  018C                     	;# 
  1251  0190                     	;# 
  1252  0191                     	;# 
  1253  0191                     	;# 
  1254  0192                     	;# 
  1255  0193                     	;# 
  1256  0193                     	;# 
  1257  0193                     	;# 
  1258  0194                     	;# 
  1259  0195                     	;# 
  1260  0196                     	;# 
  1261  0199                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019A                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019C                     	;# 
  1270  019C                     	;# 
  1271  019D                     	;# 
  1272  019D                     	;# 
  1273  019E                     	;# 
  1274  019E                     	;# 
  1275  019F                     	;# 
  1276  019F                     	;# 
  1277  020D                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  0212                     	;# 
  1281  0212                     	;# 
  1282  0213                     	;# 
  1283  0213                     	;# 
  1284  0214                     	;# 
  1285  0214                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0215                     	;# 
  1289  0216                     	;# 
  1290  0216                     	;# 
  1291  0217                     	;# 
  1292  0217                     	;# 
  1293  0219                     	;# 
  1294  021A                     	;# 
  1295  021B                     	;# 
  1296  021C                     	;# 
  1297  021D                     	;# 
  1298  021E                     	;# 
  1299  021F                     	;# 
  1300  028C                     	;# 
  1301  028D                     	;# 
  1302  0291                     	;# 
  1303  0291                     	;# 
  1304  0292                     	;# 
  1305  0293                     	;# 
  1306  0294                     	;# 
  1307  0295                     	;# 
  1308  0295                     	;# 
  1309  0296                     	;# 
  1310  0298                     	;# 
  1311  0298                     	;# 
  1312  0299                     	;# 
  1313  029A                     	;# 
  1314  029B                     	;# 
  1315  029C                     	;# 
  1316  029C                     	;# 
  1317  029D                     	;# 
  1318  029E                     	;# 
  1319  029F                     	;# 
  1320  030C                     	;# 
  1321  030D                     	;# 
  1322  0311                     	;# 
  1323  0311                     	;# 
  1324  0312                     	;# 
  1325  0313                     	;# 
  1326  0314                     	;# 
  1327  0315                     	;# 
  1328  0315                     	;# 
  1329  0316                     	;# 
  1330  0318                     	;# 
  1331  0318                     	;# 
  1332  0319                     	;# 
  1333  031A                     	;# 
  1334  031C                     	;# 
  1335  031C                     	;# 
  1336  031D                     	;# 
  1337  031E                     	;# 
  1338  038C                     	;# 
  1339  038D                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  040C                     	;# 
  1344  040D                     	;# 
  1345  0415                     	;# 
  1346  0416                     	;# 
  1347  0417                     	;# 
  1348  041C                     	;# 
  1349  041D                     	;# 
  1350  041E                     	;# 
  1351  048D                     	;# 
  1352  0491                     	;# 
  1353  0492                     	;# 
  1354  0493                     	;# 
  1355  0493                     	;# 
  1356  0494                     	;# 
  1357  0495                     	;# 
  1358  0496                     	;# 
  1359  0497                     	;# 
  1360  0791                     	;# 
  1361  0792                     	;# 
  1362  0793                     	;# 
  1363  0794                     	;# 
  1364  0795                     	;# 
  1365  0798                     	;# 
  1366  0799                     	;# 
  1367  079A                     	;# 
  1368  079B                     	;# 
  1369  079C                     	;# 
  1370  079D                     	;# 
  1371  07A0                     	;# 
  1372  07A1                     	;# 
  1373  07A2                     	;# 
  1374  07A3                     	;# 
  1375  07A4                     	;# 
  1376  07A5                     	;# 
  1377  07A6                     	;# 
  1378  07A7                     	;# 
  1379  07A8                     	;# 
  1380  07A9                     	;# 
  1381  07AA                     	;# 
  1382  07AB                     	;# 
  1383  07AC                     	;# 
  1384  07AD                     	;# 
  1385  07AE                     	;# 
  1386  07AF                     	;# 
  1387  07B0                     	;# 
  1388  07B1                     	;# 
  1389  07B2                     	;# 
  1390  07B3                     	;# 
  1391  07B4                     	;# 
  1392  07B5                     	;# 
  1393  07B6                     	;# 
  1394  07B7                     	;# 
  1395  0FE4                     	;# 
  1396  0FE5                     	;# 
  1397  0FE6                     	;# 
  1398  0FE7                     	;# 
  1399  0FE8                     	;# 
  1400  0FE9                     	;# 
  1401  0FEA                     	;# 
  1402  0FEB                     	;# 
  1403  0FED                     	;# 
  1404  0FEE                     	;# 
  1405  0FEF                     	;# 
  1406  0000                     	;# 
  1407  0001                     	;# 
  1408  0002                     	;# 
  1409  0003                     	;# 
  1410  0004                     	;# 
  1411  0005                     	;# 
  1412  0006                     	;# 
  1413  0007                     	;# 
  1414  0008                     	;# 
  1415  0009                     	;# 
  1416  000A                     	;# 
  1417  000B                     	;# 
  1418  000C                     	;# 
  1419  000D                     	;# 
  1420  000E                     	;# 
  1421  000F                     	;# 
  1422  0010                     	;# 
  1423  0011                     	;# 
  1424  0012                     	;# 
  1425  0013                     	;# 
  1426  0014                     	;# 
  1427  0015                     	;# 
  1428  0016                     	;# 
  1429  0016                     	;# 
  1430  0017                     	;# 
  1431  0018                     	;# 
  1432  0019                     	;# 
  1433  001A                     	;# 
  1434  001B                     	;# 
  1435  001C                     	;# 
  1436  001E                     	;# 
  1437  001F                     	;# 
  1438  008C                     	;# 
  1439  008D                     	;# 
  1440  008E                     	;# 
  1441  008F                     	;# 
  1442  0090                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0093                     	;# 
  1446  0094                     	;# 
  1447  0095                     	;# 
  1448  0096                     	;# 
  1449  0097                     	;# 
  1450  0098                     	;# 
  1451  0099                     	;# 
  1452  009A                     	;# 
  1453  009B                     	;# 
  1454  009B                     	;# 
  1455  009C                     	;# 
  1456  009D                     	;# 
  1457  009E                     	;# 
  1458  010C                     	;# 
  1459  010D                     	;# 
  1460  010E                     	;# 
  1461  010F                     	;# 
  1462  0110                     	;# 
  1463  0111                     	;# 
  1464  0112                     	;# 
  1465  0113                     	;# 
  1466  0114                     	;# 
  1467  0115                     	;# 
  1468  0116                     	;# 
  1469  0117                     	;# 
  1470  0118                     	;# 
  1471  0119                     	;# 
  1472  011A                     	;# 
  1473  011B                     	;# 
  1474  011D                     	;# 
  1475  011E                     	;# 
  1476  011F                     	;# 
  1477  018C                     	;# 
  1478  0190                     	;# 
  1479  0191                     	;# 
  1480  0191                     	;# 
  1481  0192                     	;# 
  1482  0193                     	;# 
  1483  0193                     	;# 
  1484  0193                     	;# 
  1485  0194                     	;# 
  1486  0195                     	;# 
  1487  0196                     	;# 
  1488  0199                     	;# 
  1489  0199                     	;# 
  1490  019A                     	;# 
  1491  019A                     	;# 
  1492  019B                     	;# 
  1493  019B                     	;# 
  1494  019B                     	;# 
  1495  019B                     	;# 
  1496  019C                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019D                     	;# 
  1500  019E                     	;# 
  1501  019E                     	;# 
  1502  019F                     	;# 
  1503  019F                     	;# 
  1504  020D                     	;# 
  1505  0211                     	;# 
  1506  0211                     	;# 
  1507  0212                     	;# 
  1508  0212                     	;# 
  1509  0213                     	;# 
  1510  0213                     	;# 
  1511  0214                     	;# 
  1512  0214                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0215                     	;# 
  1516  0216                     	;# 
  1517  0216                     	;# 
  1518  0217                     	;# 
  1519  0217                     	;# 
  1520  0219                     	;# 
  1521  021A                     	;# 
  1522  021B                     	;# 
  1523  021C                     	;# 
  1524  021D                     	;# 
  1525  021E                     	;# 
  1526  021F                     	;# 
  1527  028C                     	;# 
  1528  028D                     	;# 
  1529  0291                     	;# 
  1530  0291                     	;# 
  1531  0292                     	;# 
  1532  0293                     	;# 
  1533  0294                     	;# 
  1534  0295                     	;# 
  1535  0295                     	;# 
  1536  0296                     	;# 
  1537  0298                     	;# 
  1538  0298                     	;# 
  1539  0299                     	;# 
  1540  029A                     	;# 
  1541  029B                     	;# 
  1542  029C                     	;# 
  1543  029C                     	;# 
  1544  029D                     	;# 
  1545  029E                     	;# 
  1546  029F                     	;# 
  1547  030C                     	;# 
  1548  030D                     	;# 
  1549  0311                     	;# 
  1550  0311                     	;# 
  1551  0312                     	;# 
  1552  0313                     	;# 
  1553  0314                     	;# 
  1554  0315                     	;# 
  1555  0315                     	;# 
  1556  0316                     	;# 
  1557  0318                     	;# 
  1558  0318                     	;# 
  1559  0319                     	;# 
  1560  031A                     	;# 
  1561  031C                     	;# 
  1562  031C                     	;# 
  1563  031D                     	;# 
  1564  031E                     	;# 
  1565  038C                     	;# 
  1566  038D                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  040C                     	;# 
  1571  040D                     	;# 
  1572  0415                     	;# 
  1573  0416                     	;# 
  1574  0417                     	;# 
  1575  041C                     	;# 
  1576  041D                     	;# 
  1577  041E                     	;# 
  1578  048D                     	;# 
  1579  0491                     	;# 
  1580  0492                     	;# 
  1581  0493                     	;# 
  1582  0493                     	;# 
  1583  0494                     	;# 
  1584  0495                     	;# 
  1585  0496                     	;# 
  1586  0497                     	;# 
  1587  0791                     	;# 
  1588  0792                     	;# 
  1589  0793                     	;# 
  1590  0794                     	;# 
  1591  0795                     	;# 
  1592  0798                     	;# 
  1593  0799                     	;# 
  1594  079A                     	;# 
  1595  079B                     	;# 
  1596  079C                     	;# 
  1597  079D                     	;# 
  1598  07A0                     	;# 
  1599  07A1                     	;# 
  1600  07A2                     	;# 
  1601  07A3                     	;# 
  1602  07A4                     	;# 
  1603  07A5                     	;# 
  1604  07A6                     	;# 
  1605  07A7                     	;# 
  1606  07A8                     	;# 
  1607  07A9                     	;# 
  1608  07AA                     	;# 
  1609  07AB                     	;# 
  1610  07AC                     	;# 
  1611  07AD                     	;# 
  1612  07AE                     	;# 
  1613  07AF                     	;# 
  1614  07B0                     	;# 
  1615  07B1                     	;# 
  1616  07B2                     	;# 
  1617  07B3                     	;# 
  1618  07B4                     	;# 
  1619  07B5                     	;# 
  1620  07B6                     	;# 
  1621  07B7                     	;# 
  1622  0FE4                     	;# 
  1623  0FE5                     	;# 
  1624  0FE6                     	;# 
  1625  0FE7                     	;# 
  1626  0FE8                     	;# 
  1627  0FE9                     	;# 
  1628  0FEA                     	;# 
  1629  0FEB                     	;# 
  1630  0FED                     	;# 
  1631  0FEE                     	;# 
  1632  0FEF                     	;# 
  1633  0000                     	;# 
  1634  0001                     	;# 
  1635  0002                     	;# 
  1636  0003                     	;# 
  1637  0004                     	;# 
  1638  0005                     	;# 
  1639  0006                     	;# 
  1640  0007                     	;# 
  1641  0008                     	;# 
  1642  0009                     	;# 
  1643  000A                     	;# 
  1644  000B                     	;# 
  1645  000C                     	;# 
  1646  000D                     	;# 
  1647  000E                     	;# 
  1648  000F                     	;# 
  1649  0010                     	;# 
  1650  0011                     	;# 
  1651  0012                     	;# 
  1652  0013                     	;# 
  1653  0014                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  001E                     	;# 
  1664  001F                     	;# 
  1665  008C                     	;# 
  1666  008D                     	;# 
  1667  008E                     	;# 
  1668  008F                     	;# 
  1669  0090                     	;# 
  1670  0091                     	;# 
  1671  0092                     	;# 
  1672  0093                     	;# 
  1673  0094                     	;# 
  1674  0095                     	;# 
  1675  0096                     	;# 
  1676  0097                     	;# 
  1677  0098                     	;# 
  1678  0099                     	;# 
  1679  009A                     	;# 
  1680  009B                     	;# 
  1681  009B                     	;# 
  1682  009C                     	;# 
  1683  009D                     	;# 
  1684  009E                     	;# 
  1685  010C                     	;# 
  1686  010D                     	;# 
  1687  010E                     	;# 
  1688  010F                     	;# 
  1689  0110                     	;# 
  1690  0111                     	;# 
  1691  0112                     	;# 
  1692  0113                     	;# 
  1693  0114                     	;# 
  1694  0115                     	;# 
  1695  0116                     	;# 
  1696  0117                     	;# 
  1697  0118                     	;# 
  1698  0119                     	;# 
  1699  011A                     	;# 
  1700  011B                     	;# 
  1701  011D                     	;# 
  1702  011E                     	;# 
  1703  011F                     	;# 
  1704  018C                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0193                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0199                     	;# 
  1716  0199                     	;# 
  1717  019A                     	;# 
  1718  019A                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019C                     	;# 
  1724  019C                     	;# 
  1725  019D                     	;# 
  1726  019D                     	;# 
  1727  019E                     	;# 
  1728  019E                     	;# 
  1729  019F                     	;# 
  1730  019F                     	;# 
  1731  020D                     	;# 
  1732  0211                     	;# 
  1733  0211                     	;# 
  1734  0212                     	;# 
  1735  0212                     	;# 
  1736  0213                     	;# 
  1737  0213                     	;# 
  1738  0214                     	;# 
  1739  0214                     	;# 
  1740  0215                     	;# 
  1741  0215                     	;# 
  1742  0215                     	;# 
  1743  0216                     	;# 
  1744  0216                     	;# 
  1745  0217                     	;# 
  1746  0217                     	;# 
  1747  0219                     	;# 
  1748  021A                     	;# 
  1749  021B                     	;# 
  1750  021C                     	;# 
  1751  021D                     	;# 
  1752  021E                     	;# 
  1753  021F                     	;# 
  1754  028C                     	;# 
  1755  028D                     	;# 
  1756  0291                     	;# 
  1757  0291                     	;# 
  1758  0292                     	;# 
  1759  0293                     	;# 
  1760  0294                     	;# 
  1761  0295                     	;# 
  1762  0295                     	;# 
  1763  0296                     	;# 
  1764  0298                     	;# 
  1765  0298                     	;# 
  1766  0299                     	;# 
  1767  029A                     	;# 
  1768  029B                     	;# 
  1769  029C                     	;# 
  1770  029C                     	;# 
  1771  029D                     	;# 
  1772  029E                     	;# 
  1773  029F                     	;# 
  1774  030C                     	;# 
  1775  030D                     	;# 
  1776  0311                     	;# 
  1777  0311                     	;# 
  1778  0312                     	;# 
  1779  0313                     	;# 
  1780  0314                     	;# 
  1781  0315                     	;# 
  1782  0315                     	;# 
  1783  0316                     	;# 
  1784  0318                     	;# 
  1785  0318                     	;# 
  1786  0319                     	;# 
  1787  031A                     	;# 
  1788  031C                     	;# 
  1789  031C                     	;# 
  1790  031D                     	;# 
  1791  031E                     	;# 
  1792  038C                     	;# 
  1793  038D                     	;# 
  1794  0394                     	;# 
  1795  0395                     	;# 
  1796  0396                     	;# 
  1797  040C                     	;# 
  1798  040D                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  041C                     	;# 
  1803  041D                     	;# 
  1804  041E                     	;# 
  1805  048D                     	;# 
  1806  0491                     	;# 
  1807  0492                     	;# 
  1808  0493                     	;# 
  1809  0493                     	;# 
  1810  0494                     	;# 
  1811  0495                     	;# 
  1812  0496                     	;# 
  1813  0497                     	;# 
  1814  0791                     	;# 
  1815  0792                     	;# 
  1816  0793                     	;# 
  1817  0794                     	;# 
  1818  0795                     	;# 
  1819  0798                     	;# 
  1820  0799                     	;# 
  1821  079A                     	;# 
  1822  079B                     	;# 
  1823  079C                     	;# 
  1824  079D                     	;# 
  1825  07A0                     	;# 
  1826  07A1                     	;# 
  1827  07A2                     	;# 
  1828  07A3                     	;# 
  1829  07A4                     	;# 
  1830  07A5                     	;# 
  1831  07A6                     	;# 
  1832  07A7                     	;# 
  1833  07A8                     	;# 
  1834  07A9                     	;# 
  1835  07AA                     	;# 
  1836  07AB                     	;# 
  1837  07AC                     	;# 
  1838  07AD                     	;# 
  1839  07AE                     	;# 
  1840  07AF                     	;# 
  1841  07B0                     	;# 
  1842  07B1                     	;# 
  1843  07B2                     	;# 
  1844  07B3                     	;# 
  1845  07B4                     	;# 
  1846  07B5                     	;# 
  1847  07B6                     	;# 
  1848  07B7                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  000F                     	;# 
  1876  0010                     	;# 
  1877  0011                     	;# 
  1878  0012                     	;# 
  1879  0013                     	;# 
  1880  0014                     	;# 
  1881  0015                     	;# 
  1882  0016                     	;# 
  1883  0016                     	;# 
  1884  0017                     	;# 
  1885  0018                     	;# 
  1886  0019                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001C                     	;# 
  1890  001E                     	;# 
  1891  001F                     	;# 
  1892  008C                     	;# 
  1893  008D                     	;# 
  1894  008E                     	;# 
  1895  008F                     	;# 
  1896  0090                     	;# 
  1897  0091                     	;# 
  1898  0092                     	;# 
  1899  0093                     	;# 
  1900  0094                     	;# 
  1901  0095                     	;# 
  1902  0096                     	;# 
  1903  0097                     	;# 
  1904  0098                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  010F                     	;# 
  1916  0110                     	;# 
  1917  0111                     	;# 
  1918  0112                     	;# 
  1919  0113                     	;# 
  1920  0114                     	;# 
  1921  0115                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  0118                     	;# 
  1925  0119                     	;# 
  1926  011A                     	;# 
  1927  011B                     	;# 
  1928  011D                     	;# 
  1929  011E                     	;# 
  1930  011F                     	;# 
  1931  018C                     	;# 
  1932  0190                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0193                     	;# 
  1939  0194                     	;# 
  1940  0195                     	;# 
  1941  0196                     	;# 
  1942  0199                     	;# 
  1943  0199                     	;# 
  1944  019A                     	;# 
  1945  019A                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019F                     	;# 
  1957  019F                     	;# 
  1958  020D                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0219                     	;# 
  1975  021A                     	;# 
  1976  021B                     	;# 
  1977  021C                     	;# 
  1978  021D                     	;# 
  1979  021E                     	;# 
  1980  021F                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  0291                     	;# 
  1984  0291                     	;# 
  1985  0292                     	;# 
  1986  0293                     	;# 
  1987  0294                     	;# 
  1988  0295                     	;# 
  1989  0295                     	;# 
  1990  0296                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029B                     	;# 
  1996  029C                     	;# 
  1997  029C                     	;# 
  1998  029D                     	;# 
  1999  029E                     	;# 
  2000  029F                     	;# 
  2001  030C                     	;# 
  2002  030D                     	;# 
  2003  0311                     	;# 
  2004  0311                     	;# 
  2005  0312                     	;# 
  2006  0313                     	;# 
  2007  0314                     	;# 
  2008  0315                     	;# 
  2009  0315                     	;# 
  2010  0316                     	;# 
  2011  0318                     	;# 
  2012  0318                     	;# 
  2013  0319                     	;# 
  2014  031A                     	;# 
  2015  031C                     	;# 
  2016  031C                     	;# 
  2017  031D                     	;# 
  2018  031E                     	;# 
  2019  038C                     	;# 
  2020  038D                     	;# 
  2021  0394                     	;# 
  2022  0395                     	;# 
  2023  0396                     	;# 
  2024  040C                     	;# 
  2025  040D                     	;# 
  2026  0415                     	;# 
  2027  0416                     	;# 
  2028  0417                     	;# 
  2029  041C                     	;# 
  2030  041D                     	;# 
  2031  041E                     	;# 
  2032  048D                     	;# 
  2033  0491                     	;# 
  2034  0492                     	;# 
  2035  0493                     	;# 
  2036  0493                     	;# 
  2037  0494                     	;# 
  2038  0495                     	;# 
  2039  0496                     	;# 
  2040  0497                     	;# 
  2041  0791                     	;# 
  2042  0792                     	;# 
  2043  0793                     	;# 
  2044  0794                     	;# 
  2045  0795                     	;# 
  2046  0798                     	;# 
  2047  0799                     	;# 
  2048  079A                     	;# 
  2049  079B                     	;# 
  2050  079C                     	;# 
  2051  079D                     	;# 
  2052  07A0                     	;# 
  2053  07A1                     	;# 
  2054  07A2                     	;# 
  2055  07A3                     	;# 
  2056  07A4                     	;# 
  2057  07A5                     	;# 
  2058  07A6                     	;# 
  2059  07A7                     	;# 
  2060  07A8                     	;# 
  2061  07A9                     	;# 
  2062  07AA                     	;# 
  2063  07AB                     	;# 
  2064  07AC                     	;# 
  2065  07AD                     	;# 
  2066  07AE                     	;# 
  2067  07AF                     	;# 
  2068  07B0                     	;# 
  2069  07B1                     	;# 
  2070  07B2                     	;# 
  2071  07B3                     	;# 
  2072  07B4                     	;# 
  2073  07B5                     	;# 
  2074  07B6                     	;# 
  2075  07B7                     	;# 
  2076  0FE4                     	;# 
  2077  0FE5                     	;# 
  2078  0FE6                     	;# 
  2079  0FE7                     	;# 
  2080  0FE8                     	;# 
  2081  0FE9                     	;# 
  2082  0FEA                     	;# 
  2083  0FEB                     	;# 
  2084  0FED                     	;# 
  2085  0FEE                     	;# 
  2086  0FEF                     	;# 
  2087  0000                     	;# 
  2088  0001                     	;# 
  2089  0002                     	;# 
  2090  0003                     	;# 
  2091  0004                     	;# 
  2092  0005                     	;# 
  2093  0006                     	;# 
  2094  0007                     	;# 
  2095  0008                     	;# 
  2096  0009                     	;# 
  2097  000A                     	;# 
  2098  000B                     	;# 
  2099  000C                     	;# 
  2100  000D                     	;# 
  2101  000E                     	;# 
  2102  000F                     	;# 
  2103  0010                     	;# 
  2104  0011                     	;# 
  2105  0012                     	;# 
  2106  0013                     	;# 
  2107  0014                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  001E                     	;# 
  2118  001F                     	;# 
  2119  008C                     	;# 
  2120  008D                     	;# 
  2121  008E                     	;# 
  2122  008F                     	;# 
  2123  0090                     	;# 
  2124  0091                     	;# 
  2125  0092                     	;# 
  2126  0093                     	;# 
  2127  0094                     	;# 
  2128  0095                     	;# 
  2129  0096                     	;# 
  2130  0097                     	;# 
  2131  0098                     	;# 
  2132  0099                     	;# 
  2133  009A                     	;# 
  2134  009B                     	;# 
  2135  009B                     	;# 
  2136  009C                     	;# 
  2137  009D                     	;# 
  2138  009E                     	;# 
  2139  010C                     	;# 
  2140  010D                     	;# 
  2141  010E                     	;# 
  2142  010F                     	;# 
  2143  0110                     	;# 
  2144  0111                     	;# 
  2145  0112                     	;# 
  2146  0113                     	;# 
  2147  0114                     	;# 
  2148  0115                     	;# 
  2149  0116                     	;# 
  2150  0117                     	;# 
  2151  0118                     	;# 
  2152  0119                     	;# 
  2153  011A                     	;# 
  2154  011B                     	;# 
  2155  011D                     	;# 
  2156  011E                     	;# 
  2157  011F                     	;# 
  2158  018C                     	;# 
  2159  0190                     	;# 
  2160  0191                     	;# 
  2161  0191                     	;# 
  2162  0192                     	;# 
  2163  0193                     	;# 
  2164  0193                     	;# 
  2165  0193                     	;# 
  2166  0194                     	;# 
  2167  0195                     	;# 
  2168  0196                     	;# 
  2169  0199                     	;# 
  2170  0199                     	;# 
  2171  019A                     	;# 
  2172  019A                     	;# 
  2173  019B                     	;# 
  2174  019B                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019C                     	;# 
  2178  019C                     	;# 
  2179  019D                     	;# 
  2180  019D                     	;# 
  2181  019E                     	;# 
  2182  019E                     	;# 
  2183  019F                     	;# 
  2184  019F                     	;# 
  2185  020D                     	;# 
  2186  0211                     	;# 
  2187  0211                     	;# 
  2188  0212                     	;# 
  2189  0212                     	;# 
  2190  0213                     	;# 
  2191  0213                     	;# 
  2192  0214                     	;# 
  2193  0214                     	;# 
  2194  0215                     	;# 
  2195  0215                     	;# 
  2196  0215                     	;# 
  2197  0216                     	;# 
  2198  0216                     	;# 
  2199  0217                     	;# 
  2200  0217                     	;# 
  2201  0219                     	;# 
  2202  021A                     	;# 
  2203  021B                     	;# 
  2204  021C                     	;# 
  2205  021D                     	;# 
  2206  021E                     	;# 
  2207  021F                     	;# 
  2208  028C                     	;# 
  2209  028D                     	;# 
  2210  0291                     	;# 
  2211  0291                     	;# 
  2212  0292                     	;# 
  2213  0293                     	;# 
  2214  0294                     	;# 
  2215  0295                     	;# 
  2216  0295                     	;# 
  2217  0296                     	;# 
  2218  0298                     	;# 
  2219  0298                     	;# 
  2220  0299                     	;# 
  2221  029A                     	;# 
  2222  029B                     	;# 
  2223  029C                     	;# 
  2224  029C                     	;# 
  2225  029D                     	;# 
  2226  029E                     	;# 
  2227  029F                     	;# 
  2228  030C                     	;# 
  2229  030D                     	;# 
  2230  0311                     	;# 
  2231  0311                     	;# 
  2232  0312                     	;# 
  2233  0313                     	;# 
  2234  0314                     	;# 
  2235  0315                     	;# 
  2236  0315                     	;# 
  2237  0316                     	;# 
  2238  0318                     	;# 
  2239  0318                     	;# 
  2240  0319                     	;# 
  2241  031A                     	;# 
  2242  031C                     	;# 
  2243  031C                     	;# 
  2244  031D                     	;# 
  2245  031E                     	;# 
  2246  038C                     	;# 
  2247  038D                     	;# 
  2248  0394                     	;# 
  2249  0395                     	;# 
  2250  0396                     	;# 
  2251  040C                     	;# 
  2252  040D                     	;# 
  2253  0415                     	;# 
  2254  0416                     	;# 
  2255  0417                     	;# 
  2256  041C                     	;# 
  2257  041D                     	;# 
  2258  041E                     	;# 
  2259  048D                     	;# 
  2260  0491                     	;# 
  2261  0492                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0495                     	;# 
  2266  0496                     	;# 
  2267  0497                     	;# 
  2268  0791                     	;# 
  2269  0792                     	;# 
  2270  0793                     	;# 
  2271  0794                     	;# 
  2272  0795                     	;# 
  2273  0798                     	;# 
  2274  0799                     	;# 
  2275  079A                     	;# 
  2276  079B                     	;# 
  2277  079C                     	;# 
  2278  079D                     	;# 
  2279  07A0                     	;# 
  2280  07A1                     	;# 
  2281  07A2                     	;# 
  2282  07A3                     	;# 
  2283  07A4                     	;# 
  2284  07A5                     	;# 
  2285  07A6                     	;# 
  2286  07A7                     	;# 
  2287  07A8                     	;# 
  2288  07A9                     	;# 
  2289  07AA                     	;# 
  2290  07AB                     	;# 
  2291  07AC                     	;# 
  2292  07AD                     	;# 
  2293  07AE                     	;# 
  2294  07AF                     	;# 
  2295  07B0                     	;# 
  2296  07B1                     	;# 
  2297  07B2                     	;# 
  2298  07B3                     	;# 
  2299  07B4                     	;# 
  2300  07B5                     	;# 
  2301  07B6                     	;# 
  2302  07B7                     	;# 
  2303  0FE4                     	;# 
  2304  0FE5                     	;# 
  2305  0FE6                     	;# 
  2306  0FE7                     	;# 
  2307  0FE8                     	;# 
  2308  0FE9                     	;# 
  2309  0FEA                     	;# 
  2310  0FEB                     	;# 
  2311  0FED                     	;# 
  2312  0FEE                     	;# 
  2313  0FEF                     	;# 
  2314  0000                     	;# 
  2315  0001                     	;# 
  2316  0002                     	;# 
  2317  0003                     	;# 
  2318  0004                     	;# 
  2319  0005                     	;# 
  2320  0006                     	;# 
  2321  0007                     	;# 
  2322  0008                     	;# 
  2323  0009                     	;# 
  2324  000A                     	;# 
  2325  000B                     	;# 
  2326  000C                     	;# 
  2327  000D                     	;# 
  2328  000E                     	;# 
  2329  000F                     	;# 
  2330  0010                     	;# 
  2331  0011                     	;# 
  2332  0012                     	;# 
  2333  0013                     	;# 
  2334  0014                     	;# 
  2335  0015                     	;# 
  2336  0016                     	;# 
  2337  0016                     	;# 
  2338  0017                     	;# 
  2339  0018                     	;# 
  2340  0019                     	;# 
  2341  001A                     	;# 
  2342  001B                     	;# 
  2343  001C                     	;# 
  2344  001E                     	;# 
  2345  001F                     	;# 
  2346  008C                     	;# 
  2347  008D                     	;# 
  2348  008E                     	;# 
  2349  008F                     	;# 
  2350  0090                     	;# 
  2351  0091                     	;# 
  2352  0092                     	;# 
  2353  0093                     	;# 
  2354  0094                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  010C                     	;# 
  2367  010D                     	;# 
  2368  010E                     	;# 
  2369  010F                     	;# 
  2370  0110                     	;# 
  2371  0111                     	;# 
  2372  0112                     	;# 
  2373  0113                     	;# 
  2374  0114                     	;# 
  2375  0115                     	;# 
  2376  0116                     	;# 
  2377  0117                     	;# 
  2378  0118                     	;# 
  2379  0119                     	;# 
  2380  011A                     	;# 
  2381  011B                     	;# 
  2382  011D                     	;# 
  2383  011E                     	;# 
  2384  011F                     	;# 
  2385  018C                     	;# 
  2386  0190                     	;# 
  2387  0191                     	;# 
  2388  0191                     	;# 
  2389  0192                     	;# 
  2390  0193                     	;# 
  2391  0193                     	;# 
  2392  0193                     	;# 
  2393  0194                     	;# 
  2394  0195                     	;# 
  2395  0196                     	;# 
  2396  0199                     	;# 
  2397  0199                     	;# 
  2398  019A                     	;# 
  2399  019A                     	;# 
  2400  019B                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019C                     	;# 
  2405  019C                     	;# 
  2406  019D                     	;# 
  2407  019D                     	;# 
  2408  019E                     	;# 
  2409  019E                     	;# 
  2410  019F                     	;# 
  2411  019F                     	;# 
  2412  020D                     	;# 
  2413  0211                     	;# 
  2414  0211                     	;# 
  2415  0212                     	;# 
  2416  0212                     	;# 
  2417  0213                     	;# 
  2418  0213                     	;# 
  2419  0214                     	;# 
  2420  0214                     	;# 
  2421  0215                     	;# 
  2422  0215                     	;# 
  2423  0215                     	;# 
  2424  0216                     	;# 
  2425  0216                     	;# 
  2426  0217                     	;# 
  2427  0217                     	;# 
  2428  0219                     	;# 
  2429  021A                     	;# 
  2430  021B                     	;# 
  2431  021C                     	;# 
  2432  021D                     	;# 
  2433  021E                     	;# 
  2434  021F                     	;# 
  2435  028C                     	;# 
  2436  028D                     	;# 
  2437  0291                     	;# 
  2438  0291                     	;# 
  2439  0292                     	;# 
  2440  0293                     	;# 
  2441  0294                     	;# 
  2442  0295                     	;# 
  2443  0295                     	;# 
  2444  0296                     	;# 
  2445  0298                     	;# 
  2446  0298                     	;# 
  2447  0299                     	;# 
  2448  029A                     	;# 
  2449  029B                     	;# 
  2450  029C                     	;# 
  2451  029C                     	;# 
  2452  029D                     	;# 
  2453  029E                     	;# 
  2454  029F                     	;# 
  2455  030C                     	;# 
  2456  030D                     	;# 
  2457  0311                     	;# 
  2458  0311                     	;# 
  2459  0312                     	;# 
  2460  0313                     	;# 
  2461  0314                     	;# 
  2462  0315                     	;# 
  2463  0315                     	;# 
  2464  0316                     	;# 
  2465  0318                     	;# 
  2466  0318                     	;# 
  2467  0319                     	;# 
  2468  031A                     	;# 
  2469  031C                     	;# 
  2470  031C                     	;# 
  2471  031D                     	;# 
  2472  031E                     	;# 
  2473  038C                     	;# 
  2474  038D                     	;# 
  2475  0394                     	;# 
  2476  0395                     	;# 
  2477  0396                     	;# 
  2478  040C                     	;# 
  2479  040D                     	;# 
  2480  0415                     	;# 
  2481  0416                     	;# 
  2482  0417                     	;# 
  2483  041C                     	;# 
  2484  041D                     	;# 
  2485  041E                     	;# 
  2486  048D                     	;# 
  2487  0491                     	;# 
  2488  0492                     	;# 
  2489  0493                     	;# 
  2490  0493                     	;# 
  2491  0494                     	;# 
  2492  0495                     	;# 
  2493  0496                     	;# 
  2494  0497                     	;# 
  2495  0791                     	;# 
  2496  0792                     	;# 
  2497  0793                     	;# 
  2498  0794                     	;# 
  2499  0795                     	;# 
  2500  0798                     	;# 
  2501  0799                     	;# 
  2502  079A                     	;# 
  2503  079B                     	;# 
  2504  079C                     	;# 
  2505  079D                     	;# 
  2506  07A0                     	;# 
  2507  07A1                     	;# 
  2508  07A2                     	;# 
  2509  07A3                     	;# 
  2510  07A4                     	;# 
  2511  07A5                     	;# 
  2512  07A6                     	;# 
  2513  07A7                     	;# 
  2514  07A8                     	;# 
  2515  07A9                     	;# 
  2516  07AA                     	;# 
  2517  07AB                     	;# 
  2518  07AC                     	;# 
  2519  07AD                     	;# 
  2520  07AE                     	;# 
  2521  07AF                     	;# 
  2522  07B0                     	;# 
  2523  07B1                     	;# 
  2524  07B2                     	;# 
  2525  07B3                     	;# 
  2526  07B4                     	;# 
  2527  07B5                     	;# 
  2528  07B6                     	;# 
  2529  07B7                     	;# 
  2530  0FE4                     	;# 
  2531  0FE5                     	;# 
  2532  0FE6                     	;# 
  2533  0FE7                     	;# 
  2534  0FE8                     	;# 
  2535  0FE9                     	;# 
  2536  0FEA                     	;# 
  2537  0FEB                     	;# 
  2538  0FED                     	;# 
  2539  0FEE                     	;# 
  2540  0FEF                     	;# 
  2541  0000                     	;# 
  2542  0001                     	;# 
  2543  0002                     	;# 
  2544  0003                     	;# 
  2545  0004                     	;# 
  2546  0005                     	;# 
  2547  0006                     	;# 
  2548  0007                     	;# 
  2549  0008                     	;# 
  2550  0009                     	;# 
  2551  000A                     	;# 
  2552  000B                     	;# 
  2553  000C                     	;# 
  2554  000D                     	;# 
  2555  000E                     	;# 
  2556  000F                     	;# 
  2557  0010                     	;# 
  2558  0011                     	;# 
  2559  0012                     	;# 
  2560  0013                     	;# 
  2561  0014                     	;# 
  2562  0015                     	;# 
  2563  0016                     	;# 
  2564  0016                     	;# 
  2565  0017                     	;# 
  2566  0018                     	;# 
  2567  0019                     	;# 
  2568  001A                     	;# 
  2569  001B                     	;# 
  2570  001C                     	;# 
  2571  001E                     	;# 
  2572  001F                     	;# 
  2573  008C                     	;# 
  2574  008D                     	;# 
  2575  008E                     	;# 
  2576  008F                     	;# 
  2577  0090                     	;# 
  2578  0091                     	;# 
  2579  0092                     	;# 
  2580  0093                     	;# 
  2581  0094                     	;# 
  2582  0095                     	;# 
  2583  0096                     	;# 
  2584  0097                     	;# 
  2585  0098                     	;# 
  2586  0099                     	;# 
  2587  009A                     	;# 
  2588  009B                     	;# 
  2589  009B                     	;# 
  2590  009C                     	;# 
  2591  009D                     	;# 
  2592  009E                     	;# 
  2593  010C                     	;# 
  2594  010D                     	;# 
  2595  010E                     	;# 
  2596  010F                     	;# 
  2597  0110                     	;# 
  2598  0111                     	;# 
  2599  0112                     	;# 
  2600  0113                     	;# 
  2601  0114                     	;# 
  2602  0115                     	;# 
  2603  0116                     	;# 
  2604  0117                     	;# 
  2605  0118                     	;# 
  2606  0119                     	;# 
  2607  011A                     	;# 
  2608  011B                     	;# 
  2609  011D                     	;# 
  2610  011E                     	;# 
  2611  011F                     	;# 
  2612  018C                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  019A                     	;# 
  2626  019A                     	;# 
  2627  019B                     	;# 
  2628  019B                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019C                     	;# 
  2632  019C                     	;# 
  2633  019D                     	;# 
  2634  019D                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019F                     	;# 
  2638  019F                     	;# 
  2639  020D                     	;# 
  2640  0211                     	;# 
  2641  0211                     	;# 
  2642  0212                     	;# 
  2643  0212                     	;# 
  2644  0213                     	;# 
  2645  0213                     	;# 
  2646  0214                     	;# 
  2647  0214                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0216                     	;# 
  2652  0216                     	;# 
  2653  0217                     	;# 
  2654  0217                     	;# 
  2655  0219                     	;# 
  2656  021A                     	;# 
  2657  021B                     	;# 
  2658  021C                     	;# 
  2659  021D                     	;# 
  2660  021E                     	;# 
  2661  021F                     	;# 
  2662  028C                     	;# 
  2663  028D                     	;# 
  2664  0291                     	;# 
  2665  0291                     	;# 
  2666  0292                     	;# 
  2667  0293                     	;# 
  2668  0294                     	;# 
  2669  0295                     	;# 
  2670  0295                     	;# 
  2671  0296                     	;# 
  2672  0298                     	;# 
  2673  0298                     	;# 
  2674  0299                     	;# 
  2675  029A                     	;# 
  2676  029B                     	;# 
  2677  029C                     	;# 
  2678  029C                     	;# 
  2679  029D                     	;# 
  2680  029E                     	;# 
  2681  029F                     	;# 
  2682  030C                     	;# 
  2683  030D                     	;# 
  2684  0311                     	;# 
  2685  0311                     	;# 
  2686  0312                     	;# 
  2687  0313                     	;# 
  2688  0314                     	;# 
  2689  0315                     	;# 
  2690  0315                     	;# 
  2691  0316                     	;# 
  2692  0318                     	;# 
  2693  0318                     	;# 
  2694  0319                     	;# 
  2695  031A                     	;# 
  2696  031C                     	;# 
  2697  031C                     	;# 
  2698  031D                     	;# 
  2699  031E                     	;# 
  2700  038C                     	;# 
  2701  038D                     	;# 
  2702  0394                     	;# 
  2703  0395                     	;# 
  2704  0396                     	;# 
  2705  040C                     	;# 
  2706  040D                     	;# 
  2707  0415                     	;# 
  2708  0416                     	;# 
  2709  0417                     	;# 
  2710  041C                     	;# 
  2711  041D                     	;# 
  2712  041E                     	;# 
  2713  048D                     	;# 
  2714  0491                     	;# 
  2715  0492                     	;# 
  2716  0493                     	;# 
  2717  0493                     	;# 
  2718  0494                     	;# 
  2719  0495                     	;# 
  2720  0496                     	;# 
  2721  0497                     	;# 
  2722  0791                     	;# 
  2723  0792                     	;# 
  2724  0793                     	;# 
  2725  0794                     	;# 
  2726  0795                     	;# 
  2727  0798                     	;# 
  2728  0799                     	;# 
  2729  079A                     	;# 
  2730  079B                     	;# 
  2731  079C                     	;# 
  2732  079D                     	;# 
  2733  07A0                     	;# 
  2734  07A1                     	;# 
  2735  07A2                     	;# 
  2736  07A3                     	;# 
  2737  07A4                     	;# 
  2738  07A5                     	;# 
  2739  07A6                     	;# 
  2740  07A7                     	;# 
  2741  07A8                     	;# 
  2742  07A9                     	;# 
  2743  07AA                     	;# 
  2744  07AB                     	;# 
  2745  07AC                     	;# 
  2746  07AD                     	;# 
  2747  07AE                     	;# 
  2748  07AF                     	;# 
  2749  07B0                     	;# 
  2750  07B1                     	;# 
  2751  07B2                     	;# 
  2752  07B3                     	;# 
  2753  07B4                     	;# 
  2754  07B5                     	;# 
  2755  07B6                     	;# 
  2756  07B7                     	;# 
  2757  0FE4                     	;# 
  2758  0FE5                     	;# 
  2759  0FE6                     	;# 
  2760  0FE7                     	;# 
  2761  0FE8                     	;# 
  2762  0FE9                     	;# 
  2763  0FEA                     	;# 
  2764  0FEB                     	;# 
  2765  0FED                     	;# 
  2766  0FEE                     	;# 
  2767  0FEF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000D                     	;# 
  2782  000E                     	;# 
  2783  000F                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  001E                     	;# 
  2799  001F                     	;# 
  2800  008C                     	;# 
  2801  008D                     	;# 
  2802  008E                     	;# 
  2803  008F                     	;# 
  2804  0090                     	;# 
  2805  0091                     	;# 
  2806  0092                     	;# 
  2807  0093                     	;# 
  2808  0094                     	;# 
  2809  0095                     	;# 
  2810  0096                     	;# 
  2811  0097                     	;# 
  2812  0098                     	;# 
  2813  0099                     	;# 
  2814  009A                     	;# 
  2815  009B                     	;# 
  2816  009B                     	;# 
  2817  009C                     	;# 
  2818  009D                     	;# 
  2819  009E                     	;# 
  2820  010C                     	;# 
  2821  010D                     	;# 
  2822  010E                     	;# 
  2823  010F                     	;# 
  2824  0110                     	;# 
  2825  0111                     	;# 
  2826  0112                     	;# 
  2827  0113                     	;# 
  2828  0114                     	;# 
  2829  0115                     	;# 
  2830  0116                     	;# 
  2831  0117                     	;# 
  2832  0118                     	;# 
  2833  0119                     	;# 
  2834  011A                     	;# 
  2835  011B                     	;# 
  2836  011D                     	;# 
  2837  011E                     	;# 
  2838  011F                     	;# 
  2839  018C                     	;# 
  2840  0190                     	;# 
  2841  0191                     	;# 
  2842  0191                     	;# 
  2843  0192                     	;# 
  2844  0193                     	;# 
  2845  0193                     	;# 
  2846  0193                     	;# 
  2847  0194                     	;# 
  2848  0195                     	;# 
  2849  0196                     	;# 
  2850  0199                     	;# 
  2851  0199                     	;# 
  2852  019A                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  020D                     	;# 
  2867  0211                     	;# 
  2868  0211                     	;# 
  2869  0212                     	;# 
  2870  0212                     	;# 
  2871  0213                     	;# 
  2872  0213                     	;# 
  2873  0214                     	;# 
  2874  0214                     	;# 
  2875  0215                     	;# 
  2876  0215                     	;# 
  2877  0215                     	;# 
  2878  0216                     	;# 
  2879  0216                     	;# 
  2880  0217                     	;# 
  2881  0217                     	;# 
  2882  0219                     	;# 
  2883  021A                     	;# 
  2884  021B                     	;# 
  2885  021C                     	;# 
  2886  021D                     	;# 
  2887  021E                     	;# 
  2888  021F                     	;# 
  2889  028C                     	;# 
  2890  028D                     	;# 
  2891  0291                     	;# 
  2892  0291                     	;# 
  2893  0292                     	;# 
  2894  0293                     	;# 
  2895  0294                     	;# 
  2896  0295                     	;# 
  2897  0295                     	;# 
  2898  0296                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029B                     	;# 
  2904  029C                     	;# 
  2905  029C                     	;# 
  2906  029D                     	;# 
  2907  029E                     	;# 
  2908  029F                     	;# 
  2909  030C                     	;# 
  2910  030D                     	;# 
  2911  0311                     	;# 
  2912  0311                     	;# 
  2913  0312                     	;# 
  2914  0313                     	;# 
  2915  0314                     	;# 
  2916  0315                     	;# 
  2917  0315                     	;# 
  2918  0316                     	;# 
  2919  0318                     	;# 
  2920  0318                     	;# 
  2921  0319                     	;# 
  2922  031A                     	;# 
  2923  031C                     	;# 
  2924  031C                     	;# 
  2925  031D                     	;# 
  2926  031E                     	;# 
  2927  038C                     	;# 
  2928  038D                     	;# 
  2929  0394                     	;# 
  2930  0395                     	;# 
  2931  0396                     	;# 
  2932  040C                     	;# 
  2933  040D                     	;# 
  2934  0415                     	;# 
  2935  0416                     	;# 
  2936  0417                     	;# 
  2937  041C                     	;# 
  2938  041D                     	;# 
  2939  041E                     	;# 
  2940  048D                     	;# 
  2941  0491                     	;# 
  2942  0492                     	;# 
  2943  0493                     	;# 
  2944  0493                     	;# 
  2945  0494                     	;# 
  2946  0495                     	;# 
  2947  0496                     	;# 
  2948  0497                     	;# 
  2949  0791                     	;# 
  2950  0792                     	;# 
  2951  0793                     	;# 
  2952  0794                     	;# 
  2953  0795                     	;# 
  2954  0798                     	;# 
  2955  0799                     	;# 
  2956  079A                     	;# 
  2957  079B                     	;# 
  2958  079C                     	;# 
  2959  079D                     	;# 
  2960  07A0                     	;# 
  2961  07A1                     	;# 
  2962  07A2                     	;# 
  2963  07A3                     	;# 
  2964  07A4                     	;# 
  2965  07A5                     	;# 
  2966  07A6                     	;# 
  2967  07A7                     	;# 
  2968  07A8                     	;# 
  2969  07A9                     	;# 
  2970  07AA                     	;# 
  2971  07AB                     	;# 
  2972  07AC                     	;# 
  2973  07AD                     	;# 
  2974  07AE                     	;# 
  2975  07AF                     	;# 
  2976  07B0                     	;# 
  2977  07B1                     	;# 
  2978  07B2                     	;# 
  2979  07B3                     	;# 
  2980  07B4                     	;# 
  2981  07B5                     	;# 
  2982  07B6                     	;# 
  2983  07B7                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  001E                     	;# 
  3026  001F                     	;# 
  3027  008C                     	;# 
  3028  008D                     	;# 
  3029  008E                     	;# 
  3030  008F                     	;# 
  3031  0090                     	;# 
  3032  0091                     	;# 
  3033  0092                     	;# 
  3034  0093                     	;# 
  3035  0094                     	;# 
  3036  0095                     	;# 
  3037  0096                     	;# 
  3038  0097                     	;# 
  3039  0098                     	;# 
  3040  0099                     	;# 
  3041  009A                     	;# 
  3042  009B                     	;# 
  3043  009B                     	;# 
  3044  009C                     	;# 
  3045  009D                     	;# 
  3046  009E                     	;# 
  3047  010C                     	;# 
  3048  010D                     	;# 
  3049  010E                     	;# 
  3050  010F                     	;# 
  3051  0110                     	;# 
  3052  0111                     	;# 
  3053  0112                     	;# 
  3054  0113                     	;# 
  3055  0114                     	;# 
  3056  0115                     	;# 
  3057  0116                     	;# 
  3058  0117                     	;# 
  3059  0118                     	;# 
  3060  0119                     	;# 
  3061  011A                     	;# 
  3062  011B                     	;# 
  3063  011D                     	;# 
  3064  011E                     	;# 
  3065  011F                     	;# 
  3066  018C                     	;# 
  3067  0190                     	;# 
  3068  0191                     	;# 
  3069  0191                     	;# 
  3070  0192                     	;# 
  3071  0193                     	;# 
  3072  0193                     	;# 
  3073  0193                     	;# 
  3074  0194                     	;# 
  3075  0195                     	;# 
  3076  0196                     	;# 
  3077  0199                     	;# 
  3078  0199                     	;# 
  3079  019A                     	;# 
  3080  019A                     	;# 
  3081  019B                     	;# 
  3082  019B                     	;# 
  3083  019B                     	;# 
  3084  019B                     	;# 
  3085  019C                     	;# 
  3086  019C                     	;# 
  3087  019D                     	;# 
  3088  019D                     	;# 
  3089  019E                     	;# 
  3090  019E                     	;# 
  3091  019F                     	;# 
  3092  019F                     	;# 
  3093  020D                     	;# 
  3094  0211                     	;# 
  3095  0211                     	;# 
  3096  0212                     	;# 
  3097  0212                     	;# 
  3098  0213                     	;# 
  3099  0213                     	;# 
  3100  0214                     	;# 
  3101  0214                     	;# 
  3102  0215                     	;# 
  3103  0215                     	;# 
  3104  0215                     	;# 
  3105  0216                     	;# 
  3106  0216                     	;# 
  3107  0217                     	;# 
  3108  0217                     	;# 
  3109  0219                     	;# 
  3110  021A                     	;# 
  3111  021B                     	;# 
  3112  021C                     	;# 
  3113  021D                     	;# 
  3114  021E                     	;# 
  3115  021F                     	;# 
  3116  028C                     	;# 
  3117  028D                     	;# 
  3118  0291                     	;# 
  3119  0291                     	;# 
  3120  0292                     	;# 
  3121  0293                     	;# 
  3122  0294                     	;# 
  3123  0295                     	;# 
  3124  0295                     	;# 
  3125  0296                     	;# 
  3126  0298                     	;# 
  3127  0298                     	;# 
  3128  0299                     	;# 
  3129  029A                     	;# 
  3130  029B                     	;# 
  3131  029C                     	;# 
  3132  029C                     	;# 
  3133  029D                     	;# 
  3134  029E                     	;# 
  3135  029F                     	;# 
  3136  030C                     	;# 
  3137  030D                     	;# 
  3138  0311                     	;# 
  3139  0311                     	;# 
  3140  0312                     	;# 
  3141  0313                     	;# 
  3142  0314                     	;# 
  3143  0315                     	;# 
  3144  0315                     	;# 
  3145  0316                     	;# 
  3146  0318                     	;# 
  3147  0318                     	;# 
  3148  0319                     	;# 
  3149  031A                     	;# 
  3150  031C                     	;# 
  3151  031C                     	;# 
  3152  031D                     	;# 
  3153  031E                     	;# 
  3154  038C                     	;# 
  3155  038D                     	;# 
  3156  0394                     	;# 
  3157  0395                     	;# 
  3158  0396                     	;# 
  3159  040C                     	;# 
  3160  040D                     	;# 
  3161  0415                     	;# 
  3162  0416                     	;# 
  3163  0417                     	;# 
  3164  041C                     	;# 
  3165  041D                     	;# 
  3166  041E                     	;# 
  3167  048D                     	;# 
  3168  0491                     	;# 
  3169  0492                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0496                     	;# 
  3175  0497                     	;# 
  3176  0791                     	;# 
  3177  0792                     	;# 
  3178  0793                     	;# 
  3179  0794                     	;# 
  3180  0795                     	;# 
  3181  0798                     	;# 
  3182  0799                     	;# 
  3183  079A                     	;# 
  3184  079B                     	;# 
  3185  079C                     	;# 
  3186  079D                     	;# 
  3187  07A0                     	;# 
  3188  07A1                     	;# 
  3189  07A2                     	;# 
  3190  07A3                     	;# 
  3191  07A4                     	;# 
  3192  07A5                     	;# 
  3193  07A6                     	;# 
  3194  07A7                     	;# 
  3195  07A8                     	;# 
  3196  07A9                     	;# 
  3197  07AA                     	;# 
  3198  07AB                     	;# 
  3199  07AC                     	;# 
  3200  07AD                     	;# 
  3201  07AE                     	;# 
  3202  07AF                     	;# 
  3203  07B0                     	;# 
  3204  07B1                     	;# 
  3205  07B2                     	;# 
  3206  07B3                     	;# 
  3207  07B4                     	;# 
  3208  07B5                     	;# 
  3209  07B6                     	;# 
  3210  07B7                     	;# 
  3211  0FE4                     	;# 
  3212  0FE5                     	;# 
  3213  0FE6                     	;# 
  3214  0FE7                     	;# 
  3215  0FE8                     	;# 
  3216  0FE9                     	;# 
  3217  0FEA                     	;# 
  3218  0FEB                     	;# 
  3219  0FED                     	;# 
  3220  0FEE                     	;# 
  3221  0FEF                     	;# 
  3222  0000                     	;# 
  3223  0001                     	;# 
  3224  0002                     	;# 
  3225  0003                     	;# 
  3226  0004                     	;# 
  3227  0005                     	;# 
  3228  0006                     	;# 
  3229  0007                     	;# 
  3230  0008                     	;# 
  3231  0009                     	;# 
  3232  000A                     	;# 
  3233  000B                     	;# 
  3234  000C                     	;# 
  3235  000D                     	;# 
  3236  000E                     	;# 
  3237  000F                     	;# 
  3238  0010                     	;# 
  3239  0011                     	;# 
  3240  0012                     	;# 
  3241  0013                     	;# 
  3242  0014                     	;# 
  3243  0015                     	;# 
  3244  0016                     	;# 
  3245  0016                     	;# 
  3246  0017                     	;# 
  3247  0018                     	;# 
  3248  0019                     	;# 
  3249  001A                     	;# 
  3250  001B                     	;# 
  3251  001C                     	;# 
  3252  001E                     	;# 
  3253  001F                     	;# 
  3254  008C                     	;# 
  3255  008D                     	;# 
  3256  008E                     	;# 
  3257  008F                     	;# 
  3258  0090                     	;# 
  3259  0091                     	;# 
  3260  0092                     	;# 
  3261  0093                     	;# 
  3262  0094                     	;# 
  3263  0095                     	;# 
  3264  0096                     	;# 
  3265  0097                     	;# 
  3266  0098                     	;# 
  3267  0099                     	;# 
  3268  009A                     	;# 
  3269  009B                     	;# 
  3270  009B                     	;# 
  3271  009C                     	;# 
  3272  009D                     	;# 
  3273  009E                     	;# 
  3274  010C                     	;# 
  3275  010D                     	;# 
  3276  010E                     	;# 
  3277  010F                     	;# 
  3278  0110                     	;# 
  3279  0111                     	;# 
  3280  0112                     	;# 
  3281  0113                     	;# 
  3282  0114                     	;# 
  3283  0115                     	;# 
  3284  0116                     	;# 
  3285  0117                     	;# 
  3286  0118                     	;# 
  3287  0119                     	;# 
  3288  011A                     	;# 
  3289  011B                     	;# 
  3290  011D                     	;# 
  3291  011E                     	;# 
  3292  011F                     	;# 
  3293  018C                     	;# 
  3294  0190                     	;# 
  3295  0191                     	;# 
  3296  0191                     	;# 
  3297  0192                     	;# 
  3298  0193                     	;# 
  3299  0193                     	;# 
  3300  0193                     	;# 
  3301  0194                     	;# 
  3302  0195                     	;# 
  3303  0196                     	;# 
  3304  0199                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019B                     	;# 
  3310  019B                     	;# 
  3311  019B                     	;# 
  3312  019C                     	;# 
  3313  019C                     	;# 
  3314  019D                     	;# 
  3315  019D                     	;# 
  3316  019E                     	;# 
  3317  019E                     	;# 
  3318  019F                     	;# 
  3319  019F                     	;# 
  3320  020D                     	;# 
  3321  0211                     	;# 
  3322  0211                     	;# 
  3323  0212                     	;# 
  3324  0212                     	;# 
  3325  0213                     	;# 
  3326  0213                     	;# 
  3327  0214                     	;# 
  3328  0214                     	;# 
  3329  0215                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0219                     	;# 
  3337  021A                     	;# 
  3338  021B                     	;# 
  3339  021C                     	;# 
  3340  021D                     	;# 
  3341  021E                     	;# 
  3342  021F                     	;# 
  3343  028C                     	;# 
  3344  028D                     	;# 
  3345  0291                     	;# 
  3346  0291                     	;# 
  3347  0292                     	;# 
  3348  0293                     	;# 
  3349  0294                     	;# 
  3350  0295                     	;# 
  3351  0295                     	;# 
  3352  0296                     	;# 
  3353  0298                     	;# 
  3354  0298                     	;# 
  3355  0299                     	;# 
  3356  029A                     	;# 
  3357  029B                     	;# 
  3358  029C                     	;# 
  3359  029C                     	;# 
  3360  029D                     	;# 
  3361  029E                     	;# 
  3362  029F                     	;# 
  3363  030C                     	;# 
  3364  030D                     	;# 
  3365  0311                     	;# 
  3366  0311                     	;# 
  3367  0312                     	;# 
  3368  0313                     	;# 
  3369  0314                     	;# 
  3370  0315                     	;# 
  3371  0315                     	;# 
  3372  0316                     	;# 
  3373  0318                     	;# 
  3374  0318                     	;# 
  3375  0319                     	;# 
  3376  031A                     	;# 
  3377  031C                     	;# 
  3378  031C                     	;# 
  3379  031D                     	;# 
  3380  031E                     	;# 
  3381  038C                     	;# 
  3382  038D                     	;# 
  3383  0394                     	;# 
  3384  0395                     	;# 
  3385  0396                     	;# 
  3386  040C                     	;# 
  3387  040D                     	;# 
  3388  0415                     	;# 
  3389  0416                     	;# 
  3390  0417                     	;# 
  3391  041C                     	;# 
  3392  041D                     	;# 
  3393  041E                     	;# 
  3394  048D                     	;# 
  3395  0491                     	;# 
  3396  0492                     	;# 
  3397  0493                     	;# 
  3398  0493                     	;# 
  3399  0494                     	;# 
  3400  0495                     	;# 
  3401  0496                     	;# 
  3402  0497                     	;# 
  3403  0791                     	;# 
  3404  0792                     	;# 
  3405  0793                     	;# 
  3406  0794                     	;# 
  3407  0795                     	;# 
  3408  0798                     	;# 
  3409  0799                     	;# 
  3410  079A                     	;# 
  3411  079B                     	;# 
  3412  079C                     	;# 
  3413  079D                     	;# 
  3414  07A0                     	;# 
  3415  07A1                     	;# 
  3416  07A2                     	;# 
  3417  07A3                     	;# 
  3418  07A4                     	;# 
  3419  07A5                     	;# 
  3420  07A6                     	;# 
  3421  07A7                     	;# 
  3422  07A8                     	;# 
  3423  07A9                     	;# 
  3424  07AA                     	;# 
  3425  07AB                     	;# 
  3426  07AC                     	;# 
  3427  07AD                     	;# 
  3428  07AE                     	;# 
  3429  07AF                     	;# 
  3430  07B0                     	;# 
  3431  07B1                     	;# 
  3432  07B2                     	;# 
  3433  07B3                     	;# 
  3434  07B4                     	;# 
  3435  07B5                     	;# 
  3436  07B6                     	;# 
  3437  07B7                     	;# 
  3438  0FE4                     	;# 
  3439  0FE5                     	;# 
  3440  0FE6                     	;# 
  3441  0FE7                     	;# 
  3442  0FE8                     	;# 
  3443  0FE9                     	;# 
  3444  0FEA                     	;# 
  3445  0FEB                     	;# 
  3446  0FED                     	;# 
  3447  0FEE                     	;# 
  3448  0FEF                     	;# 
  3449  0000                     	;# 
  3450  0001                     	;# 
  3451  0002                     	;# 
  3452  0003                     	;# 
  3453  0004                     	;# 
  3454  0005                     	;# 
  3455  0006                     	;# 
  3456  0007                     	;# 
  3457  0008                     	;# 
  3458  0009                     	;# 
  3459  000A                     	;# 
  3460  000B                     	;# 
  3461  000C                     	;# 
  3462  000D                     	;# 
  3463  000E                     	;# 
  3464  000F                     	;# 
  3465  0010                     	;# 
  3466  0011                     	;# 
  3467  0012                     	;# 
  3468  0013                     	;# 
  3469  0014                     	;# 
  3470  0015                     	;# 
  3471  0016                     	;# 
  3472  0016                     	;# 
  3473  0017                     	;# 
  3474  0018                     	;# 
  3475  0019                     	;# 
  3476  001A                     	;# 
  3477  001B                     	;# 
  3478  001C                     	;# 
  3479  001E                     	;# 
  3480  001F                     	;# 
  3481  008C                     	;# 
  3482  008D                     	;# 
  3483  008E                     	;# 
  3484  008F                     	;# 
  3485  0090                     	;# 
  3486  0091                     	;# 
  3487  0092                     	;# 
  3488  0093                     	;# 
  3489  0094                     	;# 
  3490  0095                     	;# 
  3491  0096                     	;# 
  3492  0097                     	;# 
  3493  0098                     	;# 
  3494  0099                     	;# 
  3495  009A                     	;# 
  3496  009B                     	;# 
  3497  009B                     	;# 
  3498  009C                     	;# 
  3499  009D                     	;# 
  3500  009E                     	;# 
  3501  010C                     	;# 
  3502  010D                     	;# 
  3503  010E                     	;# 
  3504  010F                     	;# 
  3505  0110                     	;# 
  3506  0111                     	;# 
  3507  0112                     	;# 
  3508  0113                     	;# 
  3509  0114                     	;# 
  3510  0115                     	;# 
  3511  0116                     	;# 
  3512  0117                     	;# 
  3513  0118                     	;# 
  3514  0119                     	;# 
  3515  011A                     	;# 
  3516  011B                     	;# 
  3517  011D                     	;# 
  3518  011E                     	;# 
  3519  011F                     	;# 
  3520  018C                     	;# 
  3521  0190                     	;# 
  3522  0191                     	;# 
  3523  0191                     	;# 
  3524  0192                     	;# 
  3525  0193                     	;# 
  3526  0193                     	;# 
  3527  0193                     	;# 
  3528  0194                     	;# 
  3529  0195                     	;# 
  3530  0196                     	;# 
  3531  0199                     	;# 
  3532  0199                     	;# 
  3533  019A                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019B                     	;# 
  3537  019B                     	;# 
  3538  019B                     	;# 
  3539  019C                     	;# 
  3540  019C                     	;# 
  3541  019D                     	;# 
  3542  019D                     	;# 
  3543  019E                     	;# 
  3544  019E                     	;# 
  3545  019F                     	;# 
  3546  019F                     	;# 
  3547  020D                     	;# 
  3548  0211                     	;# 
  3549  0211                     	;# 
  3550  0212                     	;# 
  3551  0212                     	;# 
  3552  0213                     	;# 
  3553  0213                     	;# 
  3554  0214                     	;# 
  3555  0214                     	;# 
  3556  0215                     	;# 
  3557  0215                     	;# 
  3558  0215                     	;# 
  3559  0216                     	;# 
  3560  0216                     	;# 
  3561  0217                     	;# 
  3562  0217                     	;# 
  3563  0219                     	;# 
  3564  021A                     	;# 
  3565  021B                     	;# 
  3566  021C                     	;# 
  3567  021D                     	;# 
  3568  021E                     	;# 
  3569  021F                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  0291                     	;# 
  3573  0291                     	;# 
  3574  0292                     	;# 
  3575  0293                     	;# 
  3576  0294                     	;# 
  3577  0295                     	;# 
  3578  0295                     	;# 
  3579  0296                     	;# 
  3580  0298                     	;# 
  3581  0298                     	;# 
  3582  0299                     	;# 
  3583  029A                     	;# 
  3584  029B                     	;# 
  3585  029C                     	;# 
  3586  029C                     	;# 
  3587  029D                     	;# 
  3588  029E                     	;# 
  3589  029F                     	;# 
  3590  030C                     	;# 
  3591  030D                     	;# 
  3592  0311                     	;# 
  3593  0311                     	;# 
  3594  0312                     	;# 
  3595  0313                     	;# 
  3596  0314                     	;# 
  3597  0315                     	;# 
  3598  0315                     	;# 
  3599  0316                     	;# 
  3600  0318                     	;# 
  3601  0318                     	;# 
  3602  0319                     	;# 
  3603  031A                     	;# 
  3604  031C                     	;# 
  3605  031C                     	;# 
  3606  031D                     	;# 
  3607  031E                     	;# 
  3608  038C                     	;# 
  3609  038D                     	;# 
  3610  0394                     	;# 
  3611  0395                     	;# 
  3612  0396                     	;# 
  3613  040C                     	;# 
  3614  040D                     	;# 
  3615  0415                     	;# 
  3616  0416                     	;# 
  3617  0417                     	;# 
  3618  041C                     	;# 
  3619  041D                     	;# 
  3620  041E                     	;# 
  3621  048D                     	;# 
  3622  0491                     	;# 
  3623  0492                     	;# 
  3624  0493                     	;# 
  3625  0493                     	;# 
  3626  0494                     	;# 
  3627  0495                     	;# 
  3628  0496                     	;# 
  3629  0497                     	;# 
  3630  0791                     	;# 
  3631  0792                     	;# 
  3632  0793                     	;# 
  3633  0794                     	;# 
  3634  0795                     	;# 
  3635  0798                     	;# 
  3636  0799                     	;# 
  3637  079A                     	;# 
  3638  079B                     	;# 
  3639  079C                     	;# 
  3640  079D                     	;# 
  3641  07A0                     	;# 
  3642  07A1                     	;# 
  3643  07A2                     	;# 
  3644  07A3                     	;# 
  3645  07A4                     	;# 
  3646  07A5                     	;# 
  3647  07A6                     	;# 
  3648  07A7                     	;# 
  3649  07A8                     	;# 
  3650  07A9                     	;# 
  3651  07AA                     	;# 
  3652  07AB                     	;# 
  3653  07AC                     	;# 
  3654  07AD                     	;# 
  3655  07AE                     	;# 
  3656  07AF                     	;# 
  3657  07B0                     	;# 
  3658  07B1                     	;# 
  3659  07B2                     	;# 
  3660  07B3                     	;# 
  3661  07B4                     	;# 
  3662  07B5                     	;# 
  3663  07B6                     	;# 
  3664  07B7                     	;# 
  3665  0FE4                     	;# 
  3666  0FE5                     	;# 
  3667  0FE6                     	;# 
  3668  0FE7                     	;# 
  3669  0FE8                     	;# 
  3670  0FE9                     	;# 
  3671  0FEA                     	;# 
  3672  0FEB                     	;# 
  3673  0FED                     	;# 
  3674  0FEE                     	;# 
  3675  0FEF                     	;# 
  3676  0000                     	;# 
  3677  0001                     	;# 
  3678  0002                     	;# 
  3679  0003                     	;# 
  3680  0004                     	;# 
  3681  0005                     	;# 
  3682  0006                     	;# 
  3683  0007                     	;# 
  3684  0008                     	;# 
  3685  0009                     	;# 
  3686  000A                     	;# 
  3687  000B                     	;# 
  3688  000C                     	;# 
  3689  000D                     	;# 
  3690  000E                     	;# 
  3691  000F                     	;# 
  3692  0010                     	;# 
  3693  0011                     	;# 
  3694  0012                     	;# 
  3695  0013                     	;# 
  3696  0014                     	;# 
  3697  0015                     	;# 
  3698  0016                     	;# 
  3699  0016                     	;# 
  3700  0017                     	;# 
  3701  0018                     	;# 
  3702  0019                     	;# 
  3703  001A                     	;# 
  3704  001B                     	;# 
  3705  001C                     	;# 
  3706  001E                     	;# 
  3707  001F                     	;# 
  3708  008C                     	;# 
  3709  008D                     	;# 
  3710  008E                     	;# 
  3711  008F                     	;# 
  3712  0090                     	;# 
  3713  0091                     	;# 
  3714  0092                     	;# 
  3715  0093                     	;# 
  3716  0094                     	;# 
  3717  0095                     	;# 
  3718  0096                     	;# 
  3719  0097                     	;# 
  3720  0098                     	;# 
  3721  0099                     	;# 
  3722  009A                     	;# 
  3723  009B                     	;# 
  3724  009B                     	;# 
  3725  009C                     	;# 
  3726  009D                     	;# 
  3727  009E                     	;# 
  3728  010C                     	;# 
  3729  010D                     	;# 
  3730  010E                     	;# 
  3731  010F                     	;# 
  3732  0110                     	;# 
  3733  0111                     	;# 
  3734  0112                     	;# 
  3735  0113                     	;# 
  3736  0114                     	;# 
  3737  0115                     	;# 
  3738  0116                     	;# 
  3739  0117                     	;# 
  3740  0118                     	;# 
  3741  0119                     	;# 
  3742  011A                     	;# 
  3743  011B                     	;# 
  3744  011D                     	;# 
  3745  011E                     	;# 
  3746  011F                     	;# 
  3747  018C                     	;# 
  3748  0190                     	;# 
  3749  0191                     	;# 
  3750  0191                     	;# 
  3751  0192                     	;# 
  3752  0193                     	;# 
  3753  0193                     	;# 
  3754  0193                     	;# 
  3755  0194                     	;# 
  3756  0195                     	;# 
  3757  0196                     	;# 
  3758  0199                     	;# 
  3759  0199                     	;# 
  3760  019A                     	;# 
  3761  019A                     	;# 
  3762  019B                     	;# 
  3763  019B                     	;# 
  3764  019B                     	;# 
  3765  019B                     	;# 
  3766  019C                     	;# 
  3767  019C                     	;# 
  3768  019D                     	;# 
  3769  019D                     	;# 
  3770  019E                     	;# 
  3771  019E                     	;# 
  3772  019F                     	;# 
  3773  019F                     	;# 
  3774  020D                     	;# 
  3775  0211                     	;# 
  3776  0211                     	;# 
  3777  0212                     	;# 
  3778  0212                     	;# 
  3779  0213                     	;# 
  3780  0213                     	;# 
  3781  0214                     	;# 
  3782  0214                     	;# 
  3783  0215                     	;# 
  3784  0215                     	;# 
  3785  0215                     	;# 
  3786  0216                     	;# 
  3787  0216                     	;# 
  3788  0217                     	;# 
  3789  0217                     	;# 
  3790  0219                     	;# 
  3791  021A                     	;# 
  3792  021B                     	;# 
  3793  021C                     	;# 
  3794  021D                     	;# 
  3795  021E                     	;# 
  3796  021F                     	;# 
  3797  028C                     	;# 
  3798  028D                     	;# 
  3799  0291                     	;# 
  3800  0291                     	;# 
  3801  0292                     	;# 
  3802  0293                     	;# 
  3803  0294                     	;# 
  3804  0295                     	;# 
  3805  0295                     	;# 
  3806  0296                     	;# 
  3807  0298                     	;# 
  3808  0298                     	;# 
  3809  0299                     	;# 
  3810  029A                     	;# 
  3811  029B                     	;# 
  3812  029C                     	;# 
  3813  029C                     	;# 
  3814  029D                     	;# 
  3815  029E                     	;# 
  3816  029F                     	;# 
  3817  030C                     	;# 
  3818  030D                     	;# 
  3819  0311                     	;# 
  3820  0311                     	;# 
  3821  0312                     	;# 
  3822  0313                     	;# 
  3823  0314                     	;# 
  3824  0315                     	;# 
  3825  0315                     	;# 
  3826  0316                     	;# 
  3827  0318                     	;# 
  3828  0318                     	;# 
  3829  0319                     	;# 
  3830  031A                     	;# 
  3831  031C                     	;# 
  3832  031C                     	;# 
  3833  031D                     	;# 
  3834  031E                     	;# 
  3835  038C                     	;# 
  3836  038D                     	;# 
  3837  0394                     	;# 
  3838  0395                     	;# 
  3839  0396                     	;# 
  3840  040C                     	;# 
  3841  040D                     	;# 
  3842  0415                     	;# 
  3843  0416                     	;# 
  3844  0417                     	;# 
  3845  041C                     	;# 
  3846  041D                     	;# 
  3847  041E                     	;# 
  3848  048D                     	;# 
  3849  0491                     	;# 
  3850  0492                     	;# 
  3851  0493                     	;# 
  3852  0493                     	;# 
  3853  0494                     	;# 
  3854  0495                     	;# 
  3855  0496                     	;# 
  3856  0497                     	;# 
  3857  0791                     	;# 
  3858  0792                     	;# 
  3859  0793                     	;# 
  3860  0794                     	;# 
  3861  0795                     	;# 
  3862  0798                     	;# 
  3863  0799                     	;# 
  3864  079A                     	;# 
  3865  079B                     	;# 
  3866  079C                     	;# 
  3867  079D                     	;# 
  3868  07A0                     	;# 
  3869  07A1                     	;# 
  3870  07A2                     	;# 
  3871  07A3                     	;# 
  3872  07A4                     	;# 
  3873  07A5                     	;# 
  3874  07A6                     	;# 
  3875  07A7                     	;# 
  3876  07A8                     	;# 
  3877  07A9                     	;# 
  3878  07AA                     	;# 
  3879  07AB                     	;# 
  3880  07AC                     	;# 
  3881  07AD                     	;# 
  3882  07AE                     	;# 
  3883  07AF                     	;# 
  3884  07B0                     	;# 
  3885  07B1                     	;# 
  3886  07B2                     	;# 
  3887  07B3                     	;# 
  3888  07B4                     	;# 
  3889  07B5                     	;# 
  3890  07B6                     	;# 
  3891  07B7                     	;# 
  3892  0FE4                     	;# 
  3893  0FE5                     	;# 
  3894  0FE6                     	;# 
  3895  0FE7                     	;# 
  3896  0FE8                     	;# 
  3897  0FE9                     	;# 
  3898  0FEA                     	;# 
  3899  0FEB                     	;# 
  3900  0FED                     	;# 
  3901  0FEE                     	;# 
  3902  0FEF                     	;# 
  3903  0000                     	;# 
  3904  0001                     	;# 
  3905  0002                     	;# 
  3906  0003                     	;# 
  3907  0004                     	;# 
  3908  0005                     	;# 
  3909  0006                     	;# 
  3910  0007                     	;# 
  3911  0008                     	;# 
  3912  0009                     	;# 
  3913  000A                     	;# 
  3914  000B                     	;# 
  3915  000C                     	;# 
  3916  000D                     	;# 
  3917  000E                     	;# 
  3918  000F                     	;# 
  3919  0010                     	;# 
  3920  0011                     	;# 
  3921  0012                     	;# 
  3922  0013                     	;# 
  3923  0014                     	;# 
  3924  0015                     	;# 
  3925  0016                     	;# 
  3926  0016                     	;# 
  3927  0017                     	;# 
  3928  0018                     	;# 
  3929  0019                     	;# 
  3930  001A                     	;# 
  3931  001B                     	;# 
  3932  001C                     	;# 
  3933  001E                     	;# 
  3934  001F                     	;# 
  3935  008C                     	;# 
  3936  008D                     	;# 
  3937  008E                     	;# 
  3938  008F                     	;# 
  3939  0090                     	;# 
  3940  0091                     	;# 
  3941  0092                     	;# 
  3942  0093                     	;# 
  3943  0094                     	;# 
  3944  0095                     	;# 
  3945  0096                     	;# 
  3946  0097                     	;# 
  3947  0098                     	;# 
  3948  0099                     	;# 
  3949  009A                     	;# 
  3950  009B                     	;# 
  3951  009B                     	;# 
  3952  009C                     	;# 
  3953  009D                     	;# 
  3954  009E                     	;# 
  3955  010C                     	;# 
  3956  010D                     	;# 
  3957  010E                     	;# 
  3958  010F                     	;# 
  3959  0110                     	;# 
  3960  0111                     	;# 
  3961  0112                     	;# 
  3962  0113                     	;# 
  3963  0114                     	;# 
  3964  0115                     	;# 
  3965  0116                     	;# 
  3966  0117                     	;# 
  3967  0118                     	;# 
  3968  0119                     	;# 
  3969  011A                     	;# 
  3970  011B                     	;# 
  3971  011D                     	;# 
  3972  011E                     	;# 
  3973  011F                     	;# 
  3974  018C                     	;# 
  3975  0190                     	;# 
  3976  0191                     	;# 
  3977  0191                     	;# 
  3978  0192                     	;# 
  3979  0193                     	;# 
  3980  0193                     	;# 
  3981  0193                     	;# 
  3982  0194                     	;# 
  3983  0195                     	;# 
  3984  0196                     	;# 
  3985  0199                     	;# 
  3986  0199                     	;# 
  3987  019A                     	;# 
  3988  019A                     	;# 
  3989  019B                     	;# 
  3990  019B                     	;# 
  3991  019B                     	;# 
  3992  019B                     	;# 
  3993  019C                     	;# 
  3994  019C                     	;# 
  3995  019D                     	;# 
  3996  019D                     	;# 
  3997  019E                     	;# 
  3998  019E                     	;# 
  3999  019F                     	;# 
  4000  019F                     	;# 
  4001  020D                     	;# 
  4002  0211                     	;# 
  4003  0211                     	;# 
  4004  0212                     	;# 
  4005  0212                     	;# 
  4006  0213                     	;# 
  4007  0213                     	;# 
  4008  0214                     	;# 
  4009  0214                     	;# 
  4010  0215                     	;# 
  4011  0215                     	;# 
  4012  0215                     	;# 
  4013  0216                     	;# 
  4014  0216                     	;# 
  4015  0217                     	;# 
  4016  0217                     	;# 
  4017  0219                     	;# 
  4018  021A                     	;# 
  4019  021B                     	;# 
  4020  021C                     	;# 
  4021  021D                     	;# 
  4022  021E                     	;# 
  4023  021F                     	;# 
  4024  028C                     	;# 
  4025  028D                     	;# 
  4026  0291                     	;# 
  4027  0291                     	;# 
  4028  0292                     	;# 
  4029  0293                     	;# 
  4030  0294                     	;# 
  4031  0295                     	;# 
  4032  0295                     	;# 
  4033  0296                     	;# 
  4034  0298                     	;# 
  4035  0298                     	;# 
  4036  0299                     	;# 
  4037  029A                     	;# 
  4038  029B                     	;# 
  4039  029C                     	;# 
  4040  029C                     	;# 
  4041  029D                     	;# 
  4042  029E                     	;# 
  4043  029F                     	;# 
  4044  030C                     	;# 
  4045  030D                     	;# 
  4046  0311                     	;# 
  4047  0311                     	;# 
  4048  0312                     	;# 
  4049  0313                     	;# 
  4050  0314                     	;# 
  4051  0315                     	;# 
  4052  0315                     	;# 
  4053  0316                     	;# 
  4054  0318                     	;# 
  4055  0318                     	;# 
  4056  0319                     	;# 
  4057  031A                     	;# 
  4058  031C                     	;# 
  4059  031C                     	;# 
  4060  031D                     	;# 
  4061  031E                     	;# 
  4062  038C                     	;# 
  4063  038D                     	;# 
  4064  0394                     	;# 
  4065  0395                     	;# 
  4066  0396                     	;# 
  4067  040C                     	;# 
  4068  040D                     	;# 
  4069  0415                     	;# 
  4070  0416                     	;# 
  4071  0417                     	;# 
  4072  041C                     	;# 
  4073  041D                     	;# 
  4074  041E                     	;# 
  4075  048D                     	;# 
  4076  0491                     	;# 
  4077  0492                     	;# 
  4078  0493                     	;# 
  4079  0493                     	;# 
  4080  0494                     	;# 
  4081  0495                     	;# 
  4082  0496                     	;# 
  4083  0497                     	;# 
  4084  0791                     	;# 
  4085  0792                     	;# 
  4086  0793                     	;# 
  4087  0794                     	;# 
  4088  0795                     	;# 
  4089  0798                     	;# 
  4090  0799                     	;# 
  4091  079A                     	;# 
  4092  079B                     	;# 
  4093  079C                     	;# 
  4094  079D                     	;# 
  4095  07A0                     	;# 
  4096  07A1                     	;# 
  4097  07A2                     	;# 
  4098  07A3                     	;# 
  4099  07A4                     	;# 
  4100  07A5                     	;# 
  4101  07A6                     	;# 
  4102  07A7                     	;# 
  4103  07A8                     	;# 
  4104  07A9                     	;# 
  4105  07AA                     	;# 
  4106  07AB                     	;# 
  4107  07AC                     	;# 
  4108  07AD                     	;# 
  4109  07AE                     	;# 
  4110  07AF                     	;# 
  4111  07B0                     	;# 
  4112  07B1                     	;# 
  4113  07B2                     	;# 
  4114  07B3                     	;# 
  4115  07B4                     	;# 
  4116  07B5                     	;# 
  4117  07B6                     	;# 
  4118  07B7                     	;# 
  4119  0FE4                     	;# 
  4120  0FE5                     	;# 
  4121  0FE6                     	;# 
  4122  0FE7                     	;# 
  4123  0FE8                     	;# 
  4124  0FE9                     	;# 
  4125  0FEA                     	;# 
  4126  0FEB                     	;# 
  4127  0FED                     	;# 
  4128  0FEE                     	;# 
  4129  0FEF                     	;# 
  4130  0000                     	;# 
  4131  0001                     	;# 
  4132  0002                     	;# 
  4133  0003                     	;# 
  4134  0004                     	;# 
  4135  0005                     	;# 
  4136  0006                     	;# 
  4137  0007                     	;# 
  4138  0008                     	;# 
  4139  0009                     	;# 
  4140  000A                     	;# 
  4141  000B                     	;# 
  4142  000C                     	;# 
  4143  000D                     	;# 
  4144  000E                     	;# 
  4145  000F                     	;# 
  4146  0010                     	;# 
  4147  0011                     	;# 
  4148  0012                     	;# 
  4149  0013                     	;# 
  4150  0014                     	;# 
  4151  0015                     	;# 
  4152  0016                     	;# 
  4153  0016                     	;# 
  4154  0017                     	;# 
  4155  0018                     	;# 
  4156  0019                     	;# 
  4157  001A                     	;# 
  4158  001B                     	;# 
  4159  001C                     	;# 
  4160  001E                     	;# 
  4161  001F                     	;# 
  4162  008C                     	;# 
  4163  008D                     	;# 
  4164  008E                     	;# 
  4165  008F                     	;# 
  4166  0090                     	;# 
  4167  0091                     	;# 
  4168  0092                     	;# 
  4169  0093                     	;# 
  4170  0094                     	;# 
  4171  0095                     	;# 
  4172  0096                     	;# 
  4173  0097                     	;# 
  4174  0098                     	;# 
  4175  0099                     	;# 
  4176  009A                     	;# 
  4177  009B                     	;# 
  4178  009B                     	;# 
  4179  009C                     	;# 
  4180  009D                     	;# 
  4181  009E                     	;# 
  4182  010C                     	;# 
  4183  010D                     	;# 
  4184  010E                     	;# 
  4185  010F                     	;# 
  4186  0110                     	;# 
  4187  0111                     	;# 
  4188  0112                     	;# 
  4189  0113                     	;# 
  4190  0114                     	;# 
  4191  0115                     	;# 
  4192  0116                     	;# 
  4193  0117                     	;# 
  4194  0118                     	;# 
  4195  0119                     	;# 
  4196  011A                     	;# 
  4197  011B                     	;# 
  4198  011D                     	;# 
  4199  011E                     	;# 
  4200  011F                     	;# 
  4201  018C                     	;# 
  4202  0190                     	;# 
  4203  0191                     	;# 
  4204  0191                     	;# 
  4205  0192                     	;# 
  4206  0193                     	;# 
  4207  0193                     	;# 
  4208  0193                     	;# 
  4209  0194                     	;# 
  4210  0195                     	;# 
  4211  0196                     	;# 
  4212  0199                     	;# 
  4213  0199                     	;# 
  4214  019A                     	;# 
  4215  019A                     	;# 
  4216  019B                     	;# 
  4217  019B                     	;# 
  4218  019B                     	;# 
  4219  019B                     	;# 
  4220  019C                     	;# 
  4221  019C                     	;# 
  4222  019D                     	;# 
  4223  019D                     	;# 
  4224  019E                     	;# 
  4225  019E                     	;# 
  4226  019F                     	;# 
  4227  019F                     	;# 
  4228  020D                     	;# 
  4229  0211                     	;# 
  4230  0211                     	;# 
  4231  0212                     	;# 
  4232  0212                     	;# 
  4233  0213                     	;# 
  4234  0213                     	;# 
  4235  0214                     	;# 
  4236  0214                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0216                     	;# 
  4241  0216                     	;# 
  4242  0217                     	;# 
  4243  0217                     	;# 
  4244  0219                     	;# 
  4245  021A                     	;# 
  4246  021B                     	;# 
  4247  021C                     	;# 
  4248  021D                     	;# 
  4249  021E                     	;# 
  4250  021F                     	;# 
  4251  028C                     	;# 
  4252  028D                     	;# 
  4253  0291                     	;# 
  4254  0291                     	;# 
  4255  0292                     	;# 
  4256  0293                     	;# 
  4257  0294                     	;# 
  4258  0295                     	;# 
  4259  0295                     	;# 
  4260  0296                     	;# 
  4261  0298                     	;# 
  4262  0298                     	;# 
  4263  0299                     	;# 
  4264  029A                     	;# 
  4265  029B                     	;# 
  4266  029C                     	;# 
  4267  029C                     	;# 
  4268  029D                     	;# 
  4269  029E                     	;# 
  4270  029F                     	;# 
  4271  030C                     	;# 
  4272  030D                     	;# 
  4273  0311                     	;# 
  4274  0311                     	;# 
  4275  0312                     	;# 
  4276  0313                     	;# 
  4277  0314                     	;# 
  4278  0315                     	;# 
  4279  0315                     	;# 
  4280  0316                     	;# 
  4281  0318                     	;# 
  4282  0318                     	;# 
  4283  0319                     	;# 
  4284  031A                     	;# 
  4285  031C                     	;# 
  4286  031C                     	;# 
  4287  031D                     	;# 
  4288  031E                     	;# 
  4289  038C                     	;# 
  4290  038D                     	;# 
  4291  0394                     	;# 
  4292  0395                     	;# 
  4293  0396                     	;# 
  4294  040C                     	;# 
  4295  040D                     	;# 
  4296  0415                     	;# 
  4297  0416                     	;# 
  4298  0417                     	;# 
  4299  041C                     	;# 
  4300  041D                     	;# 
  4301  041E                     	;# 
  4302  048D                     	;# 
  4303  0491                     	;# 
  4304  0492                     	;# 
  4305  0493                     	;# 
  4306  0493                     	;# 
  4307  0494                     	;# 
  4308  0495                     	;# 
  4309  0496                     	;# 
  4310  0497                     	;# 
  4311  0791                     	;# 
  4312  0792                     	;# 
  4313  0793                     	;# 
  4314  0794                     	;# 
  4315  0795                     	;# 
  4316  0798                     	;# 
  4317  0799                     	;# 
  4318  079A                     	;# 
  4319  079B                     	;# 
  4320  079C                     	;# 
  4321  079D                     	;# 
  4322  07A0                     	;# 
  4323  07A1                     	;# 
  4324  07A2                     	;# 
  4325  07A3                     	;# 
  4326  07A4                     	;# 
  4327  07A5                     	;# 
  4328  07A6                     	;# 
  4329  07A7                     	;# 
  4330  07A8                     	;# 
  4331  07A9                     	;# 
  4332  07AA                     	;# 
  4333  07AB                     	;# 
  4334  07AC                     	;# 
  4335  07AD                     	;# 
  4336  07AE                     	;# 
  4337  07AF                     	;# 
  4338  07B0                     	;# 
  4339  07B1                     	;# 
  4340  07B2                     	;# 
  4341  07B3                     	;# 
  4342  07B4                     	;# 
  4343  07B5                     	;# 
  4344  07B6                     	;# 
  4345  07B7                     	;# 
  4346  0FE4                     	;# 
  4347  0FE5                     	;# 
  4348  0FE6                     	;# 
  4349  0FE7                     	;# 
  4350  0FE8                     	;# 
  4351  0FE9                     	;# 
  4352  0FEA                     	;# 
  4353  0FEB                     	;# 
  4354  0FED                     	;# 
  4355  0FEE                     	;# 
  4356  0FEF                     	;# 
  4357  0000                     	;# 
  4358  0001                     	;# 
  4359  0002                     	;# 
  4360  0003                     	;# 
  4361  0004                     	;# 
  4362  0005                     	;# 
  4363  0006                     	;# 
  4364  0007                     	;# 
  4365  0008                     	;# 
  4366  0009                     	;# 
  4367  000A                     	;# 
  4368  000B                     	;# 
  4369  000C                     	;# 
  4370  000D                     	;# 
  4371  000E                     	;# 
  4372  000F                     	;# 
  4373  0010                     	;# 
  4374  0011                     	;# 
  4375  0012                     	;# 
  4376  0013                     	;# 
  4377  0014                     	;# 
  4378  0015                     	;# 
  4379  0016                     	;# 
  4380  0016                     	;# 
  4381  0017                     	;# 
  4382  0018                     	;# 
  4383  0019                     	;# 
  4384  001A                     	;# 
  4385  001B                     	;# 
  4386  001C                     	;# 
  4387  001E                     	;# 
  4388  001F                     	;# 
  4389  008C                     	;# 
  4390  008D                     	;# 
  4391  008E                     	;# 
  4392  008F                     	;# 
  4393  0090                     	;# 
  4394  0091                     	;# 
  4395  0092                     	;# 
  4396  0093                     	;# 
  4397  0094                     	;# 
  4398  0095                     	;# 
  4399  0096                     	;# 
  4400  0097                     	;# 
  4401  0098                     	;# 
  4402  0099                     	;# 
  4403  009A                     	;# 
  4404  009B                     	;# 
  4405  009B                     	;# 
  4406  009C                     	;# 
  4407  009D                     	;# 
  4408  009E                     	;# 
  4409  010C                     	;# 
  4410  010D                     	;# 
  4411  010E                     	;# 
  4412  010F                     	;# 
  4413  0110                     	;# 
  4414  0111                     	;# 
  4415  0112                     	;# 
  4416  0113                     	;# 
  4417  0114                     	;# 
  4418  0115                     	;# 
  4419  0116                     	;# 
  4420  0117                     	;# 
  4421  0118                     	;# 
  4422  0119                     	;# 
  4423  011A                     	;# 
  4424  011B                     	;# 
  4425  011D                     	;# 
  4426  011E                     	;# 
  4427  011F                     	;# 
  4428  018C                     	;# 
  4429  0190                     	;# 
  4430  0191                     	;# 
  4431  0191                     	;# 
  4432  0192                     	;# 
  4433  0193                     	;# 
  4434  0193                     	;# 
  4435  0193                     	;# 
  4436  0194                     	;# 
  4437  0195                     	;# 
  4438  0196                     	;# 
  4439  0199                     	;# 
  4440  0199                     	;# 
  4441  019A                     	;# 
  4442  019A                     	;# 
  4443  019B                     	;# 
  4444  019B                     	;# 
  4445  019B                     	;# 
  4446  019B                     	;# 
  4447  019C                     	;# 
  4448  019C                     	;# 
  4449  019D                     	;# 
  4450  019D                     	;# 
  4451  019E                     	;# 
  4452  019E                     	;# 
  4453  019F                     	;# 
  4454  019F                     	;# 
  4455  020D                     	;# 
  4456  0211                     	;# 
  4457  0211                     	;# 
  4458  0212                     	;# 
  4459  0212                     	;# 
  4460  0213                     	;# 
  4461  0213                     	;# 
  4462  0214                     	;# 
  4463  0214                     	;# 
  4464  0215                     	;# 
  4465  0215                     	;# 
  4466  0215                     	;# 
  4467  0216                     	;# 
  4468  0216                     	;# 
  4469  0217                     	;# 
  4470  0217                     	;# 
  4471  0219                     	;# 
  4472  021A                     	;# 
  4473  021B                     	;# 
  4474  021C                     	;# 
  4475  021D                     	;# 
  4476  021E                     	;# 
  4477  021F                     	;# 
  4478  028C                     	;# 
  4479  028D                     	;# 
  4480  0291                     	;# 
  4481  0291                     	;# 
  4482  0292                     	;# 
  4483  0293                     	;# 
  4484  0294                     	;# 
  4485  0295                     	;# 
  4486  0295                     	;# 
  4487  0296                     	;# 
  4488  0298                     	;# 
  4489  0298                     	;# 
  4490  0299                     	;# 
  4491  029A                     	;# 
  4492  029B                     	;# 
  4493  029C                     	;# 
  4494  029C                     	;# 
  4495  029D                     	;# 
  4496  029E                     	;# 
  4497  029F                     	;# 
  4498  030C                     	;# 
  4499  030D                     	;# 
  4500  0311                     	;# 
  4501  0311                     	;# 
  4502  0312                     	;# 
  4503  0313                     	;# 
  4504  0314                     	;# 
  4505  0315                     	;# 
  4506  0315                     	;# 
  4507  0316                     	;# 
  4508  0318                     	;# 
  4509  0318                     	;# 
  4510  0319                     	;# 
  4511  031A                     	;# 
  4512  031C                     	;# 
  4513  031C                     	;# 
  4514  031D                     	;# 
  4515  031E                     	;# 
  4516  038C                     	;# 
  4517  038D                     	;# 
  4518  0394                     	;# 
  4519  0395                     	;# 
  4520  0396                     	;# 
  4521  040C                     	;# 
  4522  040D                     	;# 
  4523  0415                     	;# 
  4524  0416                     	;# 
  4525  0417                     	;# 
  4526  041C                     	;# 
  4527  041D                     	;# 
  4528  041E                     	;# 
  4529  048D                     	;# 
  4530  0491                     	;# 
  4531  0492                     	;# 
  4532  0493                     	;# 
  4533  0493                     	;# 
  4534  0494                     	;# 
  4535  0495                     	;# 
  4536  0496                     	;# 
  4537  0497                     	;# 
  4538  0791                     	;# 
  4539  0792                     	;# 
  4540  0793                     	;# 
  4541  0794                     	;# 
  4542  0795                     	;# 
  4543  0798                     	;# 
  4544  0799                     	;# 
  4545  079A                     	;# 
  4546  079B                     	;# 
  4547  079C                     	;# 
  4548  079D                     	;# 
  4549  07A0                     	;# 
  4550  07A1                     	;# 
  4551  07A2                     	;# 
  4552  07A3                     	;# 
  4553  07A4                     	;# 
  4554  07A5                     	;# 
  4555  07A6                     	;# 
  4556  07A7                     	;# 
  4557  07A8                     	;# 
  4558  07A9                     	;# 
  4559  07AA                     	;# 
  4560  07AB                     	;# 
  4561  07AC                     	;# 
  4562  07AD                     	;# 
  4563  07AE                     	;# 
  4564  07AF                     	;# 
  4565  07B0                     	;# 
  4566  07B1                     	;# 
  4567  07B2                     	;# 
  4568  07B3                     	;# 
  4569  07B4                     	;# 
  4570  07B5                     	;# 
  4571  07B6                     	;# 
  4572  07B7                     	;# 
  4573  0FE4                     	;# 
  4574  0FE5                     	;# 
  4575  0FE6                     	;# 
  4576  0FE7                     	;# 
  4577  0FE8                     	;# 
  4578  0FE9                     	;# 
  4579  0FEA                     	;# 
  4580  0FEB                     	;# 
  4581  0FED                     	;# 
  4582  0FEE                     	;# 
  4583  0FEF                     	;# 
  4584  0000                     	;# 
  4585  0001                     	;# 
  4586  0002                     	;# 
  4587  0003                     	;# 
  4588  0004                     	;# 
  4589  0005                     	;# 
  4590  0006                     	;# 
  4591  0007                     	;# 
  4592  0008                     	;# 
  4593  0009                     	;# 
  4594  000A                     	;# 
  4595  000B                     	;# 
  4596  000C                     	;# 
  4597  000D                     	;# 
  4598  000E                     	;# 
  4599  000F                     	;# 
  4600  0010                     	;# 
  4601  0011                     	;# 
  4602  0012                     	;# 
  4603  0013                     	;# 
  4604  0014                     	;# 
  4605  0015                     	;# 
  4606  0016                     	;# 
  4607  0016                     	;# 
  4608  0017                     	;# 
  4609  0018                     	;# 
  4610  0019                     	;# 
  4611  001A                     	;# 
  4612  001B                     	;# 
  4613  001C                     	;# 
  4614  001E                     	;# 
  4615  001F                     	;# 
  4616  008C                     	;# 
  4617  008D                     	;# 
  4618  008E                     	;# 
  4619  008F                     	;# 
  4620  0090                     	;# 
  4621  0091                     	;# 
  4622  0092                     	;# 
  4623  0093                     	;# 
  4624  0094                     	;# 
  4625  0095                     	;# 
  4626  0096                     	;# 
  4627  0097                     	;# 
  4628  0098                     	;# 
  4629  0099                     	;# 
  4630  009A                     	;# 
  4631  009B                     	;# 
  4632  009B                     	;# 
  4633  009C                     	;# 
  4634  009D                     	;# 
  4635  009E                     	;# 
  4636  010C                     	;# 
  4637  010D                     	;# 
  4638  010E                     	;# 
  4639  010F                     	;# 
  4640  0110                     	;# 
  4641  0111                     	;# 
  4642  0112                     	;# 
  4643  0113                     	;# 
  4644  0114                     	;# 
  4645  0115                     	;# 
  4646  0116                     	;# 
  4647  0117                     	;# 
  4648  0118                     	;# 
  4649  0119                     	;# 
  4650  011A                     	;# 
  4651  011B                     	;# 
  4652  011D                     	;# 
  4653  011E                     	;# 
  4654  011F                     	;# 
  4655  018C                     	;# 
  4656  0190                     	;# 
  4657  0191                     	;# 
  4658  0191                     	;# 
  4659  0192                     	;# 
  4660  0193                     	;# 
  4661  0193                     	;# 
  4662  0193                     	;# 
  4663  0194                     	;# 
  4664  0195                     	;# 
  4665  0196                     	;# 
  4666  0199                     	;# 
  4667  0199                     	;# 
  4668  019A                     	;# 
  4669  019A                     	;# 
  4670  019B                     	;# 
  4671  019B                     	;# 
  4672  019B                     	;# 
  4673  019B                     	;# 
  4674  019C                     	;# 
  4675  019C                     	;# 
  4676  019D                     	;# 
  4677  019D                     	;# 
  4678  019E                     	;# 
  4679  019E                     	;# 
  4680  019F                     	;# 
  4681  019F                     	;# 
  4682  020D                     	;# 
  4683  0211                     	;# 
  4684  0211                     	;# 
  4685  0212                     	;# 
  4686  0212                     	;# 
  4687  0213                     	;# 
  4688  0213                     	;# 
  4689  0214                     	;# 
  4690  0214                     	;# 
  4691  0215                     	;# 
  4692  0215                     	;# 
  4693  0215                     	;# 
  4694  0216                     	;# 
  4695  0216                     	;# 
  4696  0217                     	;# 
  4697  0217                     	;# 
  4698  0219                     	;# 
  4699  021A                     	;# 
  4700  021B                     	;# 
  4701  021C                     	;# 
  4702  021D                     	;# 
  4703  021E                     	;# 
  4704  021F                     	;# 
  4705  028C                     	;# 
  4706  028D                     	;# 
  4707  0291                     	;# 
  4708  0291                     	;# 
  4709  0292                     	;# 
  4710  0293                     	;# 
  4711  0294                     	;# 
  4712  0295                     	;# 
  4713  0295                     	;# 
  4714  0296                     	;# 
  4715  0298                     	;# 
  4716  0298                     	;# 
  4717  0299                     	;# 
  4718  029A                     	;# 
  4719  029B                     	;# 
  4720  029C                     	;# 
  4721  029C                     	;# 
  4722  029D                     	;# 
  4723  029E                     	;# 
  4724  029F                     	;# 
  4725  030C                     	;# 
  4726  030D                     	;# 
  4727  0311                     	;# 
  4728  0311                     	;# 
  4729  0312                     	;# 
  4730  0313                     	;# 
  4731  0314                     	;# 
  4732  0315                     	;# 
  4733  0315                     	;# 
  4734  0316                     	;# 
  4735  0318                     	;# 
  4736  0318                     	;# 
  4737  0319                     	;# 
  4738  031A                     	;# 
  4739  031C                     	;# 
  4740  031C                     	;# 
  4741  031D                     	;# 
  4742  031E                     	;# 
  4743  038C                     	;# 
  4744  038D                     	;# 
  4745  0394                     	;# 
  4746  0395                     	;# 
  4747  0396                     	;# 
  4748  040C                     	;# 
  4749  040D                     	;# 
  4750  0415                     	;# 
  4751  0416                     	;# 
  4752  0417                     	;# 
  4753  041C                     	;# 
  4754  041D                     	;# 
  4755  041E                     	;# 
  4756  048D                     	;# 
  4757  0491                     	;# 
  4758  0492                     	;# 
  4759  0493                     	;# 
  4760  0493                     	;# 
  4761  0494                     	;# 
  4762  0495                     	;# 
  4763  0496                     	;# 
  4764  0497                     	;# 
  4765  0791                     	;# 
  4766  0792                     	;# 
  4767  0793                     	;# 
  4768  0794                     	;# 
  4769  0795                     	;# 
  4770  0798                     	;# 
  4771  0799                     	;# 
  4772  079A                     	;# 
  4773  079B                     	;# 
  4774  079C                     	;# 
  4775  079D                     	;# 
  4776  07A0                     	;# 
  4777  07A1                     	;# 
  4778  07A2                     	;# 
  4779  07A3                     	;# 
  4780  07A4                     	;# 
  4781  07A5                     	;# 
  4782  07A6                     	;# 
  4783  07A7                     	;# 
  4784  07A8                     	;# 
  4785  07A9                     	;# 
  4786  07AA                     	;# 
  4787  07AB                     	;# 
  4788  07AC                     	;# 
  4789  07AD                     	;# 
  4790  07AE                     	;# 
  4791  07AF                     	;# 
  4792  07B0                     	;# 
  4793  07B1                     	;# 
  4794  07B2                     	;# 
  4795  07B3                     	;# 
  4796  07B4                     	;# 
  4797  07B5                     	;# 
  4798  07B6                     	;# 
  4799  07B7                     	;# 
  4800  0FE4                     	;# 
  4801  0FE5                     	;# 
  4802  0FE6                     	;# 
  4803  0FE7                     	;# 
  4804  0FE8                     	;# 
  4805  0FE9                     	;# 
  4806  0FEA                     	;# 
  4807  0FEB                     	;# 
  4808  0FED                     	;# 
  4809  0FEE                     	;# 
  4810  0FEF                     	;# 
  4811  0000                     	;# 
  4812  0001                     	;# 
  4813  0002                     	;# 
  4814  0003                     	;# 
  4815  0004                     	;# 
  4816  0005                     	;# 
  4817  0006                     	;# 
  4818  0007                     	;# 
  4819  0008                     	;# 
  4820  0009                     	;# 
  4821  000A                     	;# 
  4822  000B                     	;# 
  4823  000C                     	;# 
  4824  000D                     	;# 
  4825  000E                     	;# 
  4826  000F                     	;# 
  4827  0010                     	;# 
  4828  0011                     	;# 
  4829  0012                     	;# 
  4830  0013                     	;# 
  4831  0014                     	;# 
  4832  0015                     	;# 
  4833  0016                     	;# 
  4834  0016                     	;# 
  4835  0017                     	;# 
  4836  0018                     	;# 
  4837  0019                     	;# 
  4838  001A                     	;# 
  4839  001B                     	;# 
  4840  001C                     	;# 
  4841  001E                     	;# 
  4842  001F                     	;# 
  4843  008C                     	;# 
  4844  008D                     	;# 
  4845  008E                     	;# 
  4846  008F                     	;# 
  4847  0090                     	;# 
  4848  0091                     	;# 
  4849  0092                     	;# 
  4850  0093                     	;# 
  4851  0094                     	;# 
  4852  0095                     	;# 
  4853  0096                     	;# 
  4854  0097                     	;# 
  4855  0098                     	;# 
  4856  0099                     	;# 
  4857  009A                     	;# 
  4858  009B                     	;# 
  4859  009B                     	;# 
  4860  009C                     	;# 
  4861  009D                     	;# 
  4862  009E                     	;# 
  4863  010C                     	;# 
  4864  010D                     	;# 
  4865  010E                     	;# 
  4866  010F                     	;# 
  4867  0110                     	;# 
  4868  0111                     	;# 
  4869  0112                     	;# 
  4870  0113                     	;# 
  4871  0114                     	;# 
  4872  0115                     	;# 
  4873  0116                     	;# 
  4874  0117                     	;# 
  4875  0118                     	;# 
  4876  0119                     	;# 
  4877  011A                     	;# 
  4878  011B                     	;# 
  4879  011D                     	;# 
  4880  011E                     	;# 
  4881  011F                     	;# 
  4882  018C                     	;# 
  4883  0190                     	;# 
  4884  0191                     	;# 
  4885  0191                     	;# 
  4886  0192                     	;# 
  4887  0193                     	;# 
  4888  0193                     	;# 
  4889  0193                     	;# 
  4890  0194                     	;# 
  4891  0195                     	;# 
  4892  0196                     	;# 
  4893  0199                     	;# 
  4894  0199                     	;# 
  4895  019A                     	;# 
  4896  019A                     	;# 
  4897  019B                     	;# 
  4898  019B                     	;# 
  4899  019B                     	;# 
  4900  019B                     	;# 
  4901  019C                     	;# 
  4902  019C                     	;# 
  4903  019D                     	;# 
  4904  019D                     	;# 
  4905  019E                     	;# 
  4906  019E                     	;# 
  4907  019F                     	;# 
  4908  019F                     	;# 
  4909  020D                     	;# 
  4910  0211                     	;# 
  4911  0211                     	;# 
  4912  0212                     	;# 
  4913  0212                     	;# 
  4914  0213                     	;# 
  4915  0213                     	;# 
  4916  0214                     	;# 
  4917  0214                     	;# 
  4918  0215                     	;# 
  4919  0215                     	;# 
  4920  0215                     	;# 
  4921  0216                     	;# 
  4922  0216                     	;# 
  4923  0217                     	;# 
  4924  0217                     	;# 
  4925  0219                     	;# 
  4926  021A                     	;# 
  4927  021B                     	;# 
  4928  021C                     	;# 
  4929  021D                     	;# 
  4930  021E                     	;# 
  4931  021F                     	;# 
  4932  028C                     	;# 
  4933  028D                     	;# 
  4934  0291                     	;# 
  4935  0291                     	;# 
  4936  0292                     	;# 
  4937  0293                     	;# 
  4938  0294                     	;# 
  4939  0295                     	;# 
  4940  0295                     	;# 
  4941  0296                     	;# 
  4942  0298                     	;# 
  4943  0298                     	;# 
  4944  0299                     	;# 
  4945  029A                     	;# 
  4946  029B                     	;# 
  4947  029C                     	;# 
  4948  029C                     	;# 
  4949  029D                     	;# 
  4950  029E                     	;# 
  4951  029F                     	;# 
  4952  030C                     	;# 
  4953  030D                     	;# 
  4954  0311                     	;# 
  4955  0311                     	;# 
  4956  0312                     	;# 
  4957  0313                     	;# 
  4958  0314                     	;# 
  4959  0315                     	;# 
  4960  0315                     	;# 
  4961  0316                     	;# 
  4962  0318                     	;# 
  4963  0318                     	;# 
  4964  0319                     	;# 
  4965  031A                     	;# 
  4966  031C                     	;# 
  4967  031C                     	;# 
  4968  031D                     	;# 
  4969  031E                     	;# 
  4970  038C                     	;# 
  4971  038D                     	;# 
  4972  0394                     	;# 
  4973  0395                     	;# 
  4974  0396                     	;# 
  4975  040C                     	;# 
  4976  040D                     	;# 
  4977  0415                     	;# 
  4978  0416                     	;# 
  4979  0417                     	;# 
  4980  041C                     	;# 
  4981  041D                     	;# 
  4982  041E                     	;# 
  4983  048D                     	;# 
  4984  0491                     	;# 
  4985  0492                     	;# 
  4986  0493                     	;# 
  4987  0493                     	;# 
  4988  0494                     	;# 
  4989  0495                     	;# 
  4990  0496                     	;# 
  4991  0497                     	;# 
  4992  0791                     	;# 
  4993  0792                     	;# 
  4994  0793                     	;# 
  4995  0794                     	;# 
  4996  0795                     	;# 
  4997  0798                     	;# 
  4998  0799                     	;# 
  4999  079A                     	;# 
  5000  079B                     	;# 
  5001  079C                     	;# 
  5002  079D                     	;# 
  5003  07A0                     	;# 
  5004  07A1                     	;# 
  5005  07A2                     	;# 
  5006  07A3                     	;# 
  5007  07A4                     	;# 
  5008  07A5                     	;# 
  5009  07A6                     	;# 
  5010  07A7                     	;# 
  5011  07A8                     	;# 
  5012  07A9                     	;# 
  5013  07AA                     	;# 
  5014  07AB                     	;# 
  5015  07AC                     	;# 
  5016  07AD                     	;# 
  5017  07AE                     	;# 
  5018  07AF                     	;# 
  5019  07B0                     	;# 
  5020  07B1                     	;# 
  5021  07B2                     	;# 
  5022  07B3                     	;# 
  5023  07B4                     	;# 
  5024  07B5                     	;# 
  5025  07B6                     	;# 
  5026  07B7                     	;# 
  5027  0FE4                     	;# 
  5028  0FE5                     	;# 
  5029  0FE6                     	;# 
  5030  0FE7                     	;# 
  5031  0FE8                     	;# 
  5032  0FE9                     	;# 
  5033  0FEA                     	;# 
  5034  0FEB                     	;# 
  5035  0FED                     	;# 
  5036  0FEE                     	;# 
  5037  0FEF                     	;# 
  5038  0000                     	;# 
  5039  0001                     	;# 
  5040  0002                     	;# 
  5041  0003                     	;# 
  5042  0004                     	;# 
  5043  0005                     	;# 
  5044  0006                     	;# 
  5045  0007                     	;# 
  5046  0008                     	;# 
  5047  0009                     	;# 
  5048  000A                     	;# 
  5049  000B                     	;# 
  5050  000C                     	;# 
  5051  000D                     	;# 
  5052  000E                     	;# 
  5053  000F                     	;# 
  5054  0010                     	;# 
  5055  0011                     	;# 
  5056  0012                     	;# 
  5057  0013                     	;# 
  5058  0014                     	;# 
  5059  0015                     	;# 
  5060  0016                     	;# 
  5061  0016                     	;# 
  5062  0017                     	;# 
  5063  0018                     	;# 
  5064  0019                     	;# 
  5065  001A                     	;# 
  5066  001B                     	;# 
  5067  001C                     	;# 
  5068  001E                     	;# 
  5069  001F                     	;# 
  5070  008C                     	;# 
  5071  008D                     	;# 
  5072  008E                     	;# 
  5073  008F                     	;# 
  5074  0090                     	;# 
  5075  0091                     	;# 
  5076  0092                     	;# 
  5077  0093                     	;# 
  5078  0094                     	;# 
  5079  0095                     	;# 
  5080  0096                     	;# 
  5081  0097                     	;# 
  5082  0098                     	;# 
  5083  0099                     	;# 
  5084  009A                     	;# 
  5085  009B                     	;# 
  5086  009B                     	;# 
  5087  009C                     	;# 
  5088  009D                     	;# 
  5089  009E                     	;# 
  5090  010C                     	;# 
  5091  010D                     	;# 
  5092  010E                     	;# 
  5093  010F                     	;# 
  5094  0110                     	;# 
  5095  0111                     	;# 
  5096  0112                     	;# 
  5097  0113                     	;# 
  5098  0114                     	;# 
  5099  0115                     	;# 
  5100  0116                     	;# 
  5101  0117                     	;# 
  5102  0118                     	;# 
  5103  0119                     	;# 
  5104  011A                     	;# 
  5105  011B                     	;# 
  5106  011D                     	;# 
  5107  011E                     	;# 
  5108  011F                     	;# 
  5109  018C                     	;# 
  5110  0190                     	;# 
  5111  0191                     	;# 
  5112  0191                     	;# 
  5113  0192                     	;# 
  5114  0193                     	;# 
  5115  0193                     	;# 
  5116  0193                     	;# 
  5117  0194                     	;# 
  5118  0195                     	;# 
  5119  0196                     	;# 
  5120  0199                     	;# 
  5121  0199                     	;# 
  5122  019A                     	;# 
  5123  019A                     	;# 
  5124  019B                     	;# 
  5125  019B                     	;# 
  5126  019B                     	;# 
  5127  019B                     	;# 
  5128  019C                     	;# 
  5129  019C                     	;# 
  5130  019D                     	;# 
  5131  019D                     	;# 
  5132  019E                     	;# 
  5133  019E                     	;# 
  5134  019F                     	;# 
  5135  019F                     	;# 
  5136  020D                     	;# 
  5137  0211                     	;# 
  5138  0211                     	;# 
  5139  0212                     	;# 
  5140  0212                     	;# 
  5141  0213                     	;# 
  5142  0213                     	;# 
  5143  0214                     	;# 
  5144  0214                     	;# 
  5145  0215                     	;# 
  5146  0215                     	;# 
  5147  0215                     	;# 
  5148  0216                     	;# 
  5149  0216                     	;# 
  5150  0217                     	;# 
  5151  0217                     	;# 
  5152  0219                     	;# 
  5153  021A                     	;# 
  5154  021B                     	;# 
  5155  021C                     	;# 
  5156  021D                     	;# 
  5157  021E                     	;# 
  5158  021F                     	;# 
  5159  028C                     	;# 
  5160  028D                     	;# 
  5161  0291                     	;# 
  5162  0291                     	;# 
  5163  0292                     	;# 
  5164  0293                     	;# 
  5165  0294                     	;# 
  5166  0295                     	;# 
  5167  0295                     	;# 
  5168  0296                     	;# 
  5169  0298                     	;# 
  5170  0298                     	;# 
  5171  0299                     	;# 
  5172  029A                     	;# 
  5173  029B                     	;# 
  5174  029C                     	;# 
  5175  029C                     	;# 
  5176  029D                     	;# 
  5177  029E                     	;# 
  5178  029F                     	;# 
  5179  030C                     	;# 
  5180  030D                     	;# 
  5181  0311                     	;# 
  5182  0311                     	;# 
  5183  0312                     	;# 
  5184  0313                     	;# 
  5185  0314                     	;# 
  5186  0315                     	;# 
  5187  0315                     	;# 
  5188  0316                     	;# 
  5189  0318                     	;# 
  5190  0318                     	;# 
  5191  0319                     	;# 
  5192  031A                     	;# 
  5193  031C                     	;# 
  5194  031C                     	;# 
  5195  031D                     	;# 
  5196  031E                     	;# 
  5197  038C                     	;# 
  5198  038D                     	;# 
  5199  0394                     	;# 
  5200  0395                     	;# 
  5201  0396                     	;# 
  5202  040C                     	;# 
  5203  040D                     	;# 
  5204  0415                     	;# 
  5205  0416                     	;# 
  5206  0417                     	;# 
  5207  041C                     	;# 
  5208  041D                     	;# 
  5209  041E                     	;# 
  5210  048D                     	;# 
  5211  0491                     	;# 
  5212  0492                     	;# 
  5213  0493                     	;# 
  5214  0493                     	;# 
  5215  0494                     	;# 
  5216  0495                     	;# 
  5217  0496                     	;# 
  5218  0497                     	;# 
  5219  0791                     	;# 
  5220  0792                     	;# 
  5221  0793                     	;# 
  5222  0794                     	;# 
  5223  0795                     	;# 
  5224  0798                     	;# 
  5225  0799                     	;# 
  5226  079A                     	;# 
  5227  079B                     	;# 
  5228  079C                     	;# 
  5229  079D                     	;# 
  5230  07A0                     	;# 
  5231  07A1                     	;# 
  5232  07A2                     	;# 
  5233  07A3                     	;# 
  5234  07A4                     	;# 
  5235  07A5                     	;# 
  5236  07A6                     	;# 
  5237  07A7                     	;# 
  5238  07A8                     	;# 
  5239  07A9                     	;# 
  5240  07AA                     	;# 
  5241  07AB                     	;# 
  5242  07AC                     	;# 
  5243  07AD                     	;# 
  5244  07AE                     	;# 
  5245  07AF                     	;# 
  5246  07B0                     	;# 
  5247  07B1                     	;# 
  5248  07B2                     	;# 
  5249  07B3                     	;# 
  5250  07B4                     	;# 
  5251  07B5                     	;# 
  5252  07B6                     	;# 
  5253  07B7                     	;# 
  5254  0FE4                     	;# 
  5255  0FE5                     	;# 
  5256  0FE6                     	;# 
  5257  0FE7                     	;# 
  5258  0FE8                     	;# 
  5259  0FE9                     	;# 
  5260  0FEA                     	;# 
  5261  0FEB                     	;# 
  5262  0FED                     	;# 
  5263  0FEE                     	;# 
  5264  0FEF                     	;# 
  5265  0000                     	;# 
  5266  0001                     	;# 
  5267  0002                     	;# 
  5268  0003                     	;# 
  5269  0004                     	;# 
  5270  0005                     	;# 
  5271  0006                     	;# 
  5272  0007                     	;# 
  5273  0008                     	;# 
  5274  0009                     	;# 
  5275  000A                     	;# 
  5276  000B                     	;# 
  5277  000C                     	;# 
  5278  000D                     	;# 
  5279  000E                     	;# 
  5280  000F                     	;# 
  5281  0010                     	;# 
  5282  0011                     	;# 
  5283  0012                     	;# 
  5284  0013                     	;# 
  5285  0014                     	;# 
  5286  0015                     	;# 
  5287  0016                     	;# 
  5288  0016                     	;# 
  5289  0017                     	;# 
  5290  0018                     	;# 
  5291  0019                     	;# 
  5292  001A                     	;# 
  5293  001B                     	;# 
  5294  001C                     	;# 
  5295  001E                     	;# 
  5296  001F                     	;# 
  5297  008C                     	;# 
  5298  008D                     	;# 
  5299  008E                     	;# 
  5300  008F                     	;# 
  5301  0090                     	;# 
  5302  0091                     	;# 
  5303  0092                     	;# 
  5304  0093                     	;# 
  5305  0094                     	;# 
  5306  0095                     	;# 
  5307  0096                     	;# 
  5308  0097                     	;# 
  5309  0098                     	;# 
  5310  0099                     	;# 
  5311  009A                     	;# 
  5312  009B                     	;# 
  5313  009B                     	;# 
  5314  009C                     	;# 
  5315  009D                     	;# 
  5316  009E                     	;# 
  5317  010C                     	;# 
  5318  010D                     	;# 
  5319  010E                     	;# 
  5320  010F                     	;# 
  5321  0110                     	;# 
  5322  0111                     	;# 
  5323  0112                     	;# 
  5324  0113                     	;# 
  5325  0114                     	;# 
  5326  0115                     	;# 
  5327  0116                     	;# 
  5328  0117                     	;# 
  5329  0118                     	;# 
  5330  0119                     	;# 
  5331  011A                     	;# 
  5332  011B                     	;# 
  5333  011D                     	;# 
  5334  011E                     	;# 
  5335  011F                     	;# 
  5336  018C                     	;# 
  5337  0190                     	;# 
  5338  0191                     	;# 
  5339  0191                     	;# 
  5340  0192                     	;# 
  5341  0193                     	;# 
  5342  0193                     	;# 
  5343  0193                     	;# 
  5344  0194                     	;# 
  5345  0195                     	;# 
  5346  0196                     	;# 
  5347  0199                     	;# 
  5348  0199                     	;# 
  5349  019A                     	;# 
  5350  019A                     	;# 
  5351  019B                     	;# 
  5352  019B                     	;# 
  5353  019B                     	;# 
  5354  019B                     	;# 
  5355  019C                     	;# 
  5356  019C                     	;# 
  5357  019D                     	;# 
  5358  019D                     	;# 
  5359  019E                     	;# 
  5360  019E                     	;# 
  5361  019F                     	;# 
  5362  019F                     	;# 
  5363  020D                     	;# 
  5364  0211                     	;# 
  5365  0211                     	;# 
  5366  0212                     	;# 
  5367  0212                     	;# 
  5368  0213                     	;# 
  5369  0213                     	;# 
  5370  0214                     	;# 
  5371  0214                     	;# 
  5372  0215                     	;# 
  5373  0215                     	;# 
  5374  0215                     	;# 
  5375  0216                     	;# 
  5376  0216                     	;# 
  5377  0217                     	;# 
  5378  0217                     	;# 
  5379  0219                     	;# 
  5380  021A                     	;# 
  5381  021B                     	;# 
  5382  021C                     	;# 
  5383  021D                     	;# 
  5384  021E                     	;# 
  5385  021F                     	;# 
  5386  028C                     	;# 
  5387  028D                     	;# 
  5388  0291                     	;# 
  5389  0291                     	;# 
  5390  0292                     	;# 
  5391  0293                     	;# 
  5392  0294                     	;# 
  5393  0295                     	;# 
  5394  0295                     	;# 
  5395  0296                     	;# 
  5396  0298                     	;# 
  5397  0298                     	;# 
  5398  0299                     	;# 
  5399  029A                     	;# 
  5400  029B                     	;# 
  5401  029C                     	;# 
  5402  029C                     	;# 
  5403  029D                     	;# 
  5404  029E                     	;# 
  5405  029F                     	;# 
  5406  030C                     	;# 
  5407  030D                     	;# 
  5408  0311                     	;# 
  5409  0311                     	;# 
  5410  0312                     	;# 
  5411  0313                     	;# 
  5412  0314                     	;# 
  5413  0315                     	;# 
  5414  0315                     	;# 
  5415  0316                     	;# 
  5416  0318                     	;# 
  5417  0318                     	;# 
  5418  0319                     	;# 
  5419  031A                     	;# 
  5420  031C                     	;# 
  5421  031C                     	;# 
  5422  031D                     	;# 
  5423  031E                     	;# 
  5424  038C                     	;# 
  5425  038D                     	;# 
  5426  0394                     	;# 
  5427  0395                     	;# 
  5428  0396                     	;# 
  5429  040C                     	;# 
  5430  040D                     	;# 
  5431  0415                     	;# 
  5432  0416                     	;# 
  5433  0417                     	;# 
  5434  041C                     	;# 
  5435  041D                     	;# 
  5436  041E                     	;# 
  5437  048D                     	;# 
  5438  0491                     	;# 
  5439  0492                     	;# 
  5440  0493                     	;# 
  5441  0493                     	;# 
  5442  0494                     	;# 
  5443  0495                     	;# 
  5444  0496                     	;# 
  5445  0497                     	;# 
  5446  0791                     	;# 
  5447  0792                     	;# 
  5448  0793                     	;# 
  5449  0794                     	;# 
  5450  0795                     	;# 
  5451  0798                     	;# 
  5452  0799                     	;# 
  5453  079A                     	;# 
  5454  079B                     	;# 
  5455  079C                     	;# 
  5456  079D                     	;# 
  5457  07A0                     	;# 
  5458  07A1                     	;# 
  5459  07A2                     	;# 
  5460  07A3                     	;# 
  5461  07A4                     	;# 
  5462  07A5                     	;# 
  5463  07A6                     	;# 
  5464  07A7                     	;# 
  5465  07A8                     	;# 
  5466  07A9                     	;# 
  5467  07AA                     	;# 
  5468  07AB                     	;# 
  5469  07AC                     	;# 
  5470  07AD                     	;# 
  5471  07AE                     	;# 
  5472  07AF                     	;# 
  5473  07B0                     	;# 
  5474  07B1                     	;# 
  5475  07B2                     	;# 
  5476  07B3                     	;# 
  5477  07B4                     	;# 
  5478  07B5                     	;# 
  5479  07B6                     	;# 
  5480  07B7                     	;# 
  5481  0FE4                     	;# 
  5482  0FE5                     	;# 
  5483  0FE6                     	;# 
  5484  0FE7                     	;# 
  5485  0FE8                     	;# 
  5486  0FE9                     	;# 
  5487  0FEA                     	;# 
  5488  0FEB                     	;# 
  5489  0FED                     	;# 
  5490  0FEE                     	;# 
  5491  0FEF                     	;# 
  5492  0000                     	;# 
  5493  0001                     	;# 
  5494  0002                     	;# 
  5495  0003                     	;# 
  5496  0004                     	;# 
  5497  0005                     	;# 
  5498  0006                     	;# 
  5499  0007                     	;# 
  5500  0008                     	;# 
  5501  0009                     	;# 
  5502  000A                     	;# 
  5503  000B                     	;# 
  5504  000C                     	;# 
  5505  000D                     	;# 
  5506  000E                     	;# 
  5507  000F                     	;# 
  5508  0010                     	;# 
  5509  0011                     	;# 
  5510  0012                     	;# 
  5511  0013                     	;# 
  5512  0014                     	;# 
  5513  0015                     	;# 
  5514  0016                     	;# 
  5515  0016                     	;# 
  5516  0017                     	;# 
  5517  0018                     	;# 
  5518  0019                     	;# 
  5519  001A                     	;# 
  5520  001B                     	;# 
  5521  001C                     	;# 
  5522  001E                     	;# 
  5523  001F                     	;# 
  5524  008C                     	;# 
  5525  008D                     	;# 
  5526  008E                     	;# 
  5527  008F                     	;# 
  5528  0090                     	;# 
  5529  0091                     	;# 
  5530  0092                     	;# 
  5531  0093                     	;# 
  5532  0094                     	;# 
  5533  0095                     	;# 
  5534  0096                     	;# 
  5535  0097                     	;# 
  5536  0098                     	;# 
  5537  0099                     	;# 
  5538  009A                     	;# 
  5539  009B                     	;# 
  5540  009B                     	;# 
  5541  009C                     	;# 
  5542  009D                     	;# 
  5543  009E                     	;# 
  5544  010C                     	;# 
  5545  010D                     	;# 
  5546  010E                     	;# 
  5547  010F                     	;# 
  5548  0110                     	;# 
  5549  0111                     	;# 
  5550  0112                     	;# 
  5551  0113                     	;# 
  5552  0114                     	;# 
  5553  0115                     	;# 
  5554  0116                     	;# 
  5555  0117                     	;# 
  5556  0118                     	;# 
  5557  0119                     	;# 
  5558  011A                     	;# 
  5559  011B                     	;# 
  5560  011D                     	;# 
  5561  011E                     	;# 
  5562  011F                     	;# 
  5563  018C                     	;# 
  5564  0190                     	;# 
  5565  0191                     	;# 
  5566  0191                     	;# 
  5567  0192                     	;# 
  5568  0193                     	;# 
  5569  0193                     	;# 
  5570  0193                     	;# 
  5571  0194                     	;# 
  5572  0195                     	;# 
  5573  0196                     	;# 
  5574  0199                     	;# 
  5575  0199                     	;# 
  5576  019A                     	;# 
  5577  019A                     	;# 
  5578  019B                     	;# 
  5579  019B                     	;# 
  5580  019B                     	;# 
  5581  019B                     	;# 
  5582  019C                     	;# 
  5583  019C                     	;# 
  5584  019D                     	;# 
  5585  019D                     	;# 
  5586  019E                     	;# 
  5587  019E                     	;# 
  5588  019F                     	;# 
  5589  019F                     	;# 
  5590  020D                     	;# 
  5591  0211                     	;# 
  5592  0211                     	;# 
  5593  0212                     	;# 
  5594  0212                     	;# 
  5595  0213                     	;# 
  5596  0213                     	;# 
  5597  0214                     	;# 
  5598  0214                     	;# 
  5599  0215                     	;# 
  5600  0215                     	;# 
  5601  0215                     	;# 
  5602  0216                     	;# 
  5603  0216                     	;# 
  5604  0217                     	;# 
  5605  0217                     	;# 
  5606  0219                     	;# 
  5607  021A                     	;# 
  5608  021B                     	;# 
  5609  021C                     	;# 
  5610  021D                     	;# 
  5611  021E                     	;# 
  5612  021F                     	;# 
  5613  028C                     	;# 
  5614  028D                     	;# 
  5615  0291                     	;# 
  5616  0291                     	;# 
  5617  0292                     	;# 
  5618  0293                     	;# 
  5619  0294                     	;# 
  5620  0295                     	;# 
  5621  0295                     	;# 
  5622  0296                     	;# 
  5623  0298                     	;# 
  5624  0298                     	;# 
  5625  0299                     	;# 
  5626  029A                     	;# 
  5627  029B                     	;# 
  5628  029C                     	;# 
  5629  029C                     	;# 
  5630  029D                     	;# 
  5631  029E                     	;# 
  5632  029F                     	;# 
  5633  030C                     	;# 
  5634  030D                     	;# 
  5635  0311                     	;# 
  5636  0311                     	;# 
  5637  0312                     	;# 
  5638  0313                     	;# 
  5639  0314                     	;# 
  5640  0315                     	;# 
  5641  0315                     	;# 
  5642  0316                     	;# 
  5643  0318                     	;# 
  5644  0318                     	;# 
  5645  0319                     	;# 
  5646  031A                     	;# 
  5647  031C                     	;# 
  5648  031C                     	;# 
  5649  031D                     	;# 
  5650  031E                     	;# 
  5651  038C                     	;# 
  5652  038D                     	;# 
  5653  0394                     	;# 
  5654  0395                     	;# 
  5655  0396                     	;# 
  5656  040C                     	;# 
  5657  040D                     	;# 
  5658  0415                     	;# 
  5659  0416                     	;# 
  5660  0417                     	;# 
  5661  041C                     	;# 
  5662  041D                     	;# 
  5663  041E                     	;# 
  5664  048D                     	;# 
  5665  0491                     	;# 
  5666  0492                     	;# 
  5667  0493                     	;# 
  5668  0493                     	;# 
  5669  0494                     	;# 
  5670  0495                     	;# 
  5671  0496                     	;# 
  5672  0497                     	;# 
  5673  0791                     	;# 
  5674  0792                     	;# 
  5675  0793                     	;# 
  5676  0794                     	;# 
  5677  0795                     	;# 
  5678  0798                     	;# 
  5679  0799                     	;# 
  5680  079A                     	;# 
  5681  079B                     	;# 
  5682  079C                     	;# 
  5683  079D                     	;# 
  5684  07A0                     	;# 
  5685  07A1                     	;# 
  5686  07A2                     	;# 
  5687  07A3                     	;# 
  5688  07A4                     	;# 
  5689  07A5                     	;# 
  5690  07A6                     	;# 
  5691  07A7                     	;# 
  5692  07A8                     	;# 
  5693  07A9                     	;# 
  5694  07AA                     	;# 
  5695  07AB                     	;# 
  5696  07AC                     	;# 
  5697  07AD                     	;# 
  5698  07AE                     	;# 
  5699  07AF                     	;# 
  5700  07B0                     	;# 
  5701  07B1                     	;# 
  5702  07B2                     	;# 
  5703  07B3                     	;# 
  5704  07B4                     	;# 
  5705  07B5                     	;# 
  5706  07B6                     	;# 
  5707  07B7                     	;# 
  5708  0FE4                     	;# 
  5709  0FE5                     	;# 
  5710  0FE6                     	;# 
  5711  0FE7                     	;# 
  5712  0FE8                     	;# 
  5713  0FE9                     	;# 
  5714  0FEA                     	;# 
  5715  0FEB                     	;# 
  5716  0FED                     	;# 
  5717  0FEE                     	;# 
  5718  0FEF                     	;# 
  5719  0000                     	;# 
  5720  0001                     	;# 
  5721  0002                     	;# 
  5722  0003                     	;# 
  5723  0004                     	;# 
  5724  0005                     	;# 
  5725  0006                     	;# 
  5726  0007                     	;# 
  5727  0008                     	;# 
  5728  0009                     	;# 
  5729  000A                     	;# 
  5730  000B                     	;# 
  5731  000C                     	;# 
  5732  000D                     	;# 
  5733  000E                     	;# 
  5734  000F                     	;# 
  5735  0010                     	;# 
  5736  0011                     	;# 
  5737  0012                     	;# 
  5738  0013                     	;# 
  5739  0014                     	;# 
  5740  0015                     	;# 
  5741  0016                     	;# 
  5742  0016                     	;# 
  5743  0017                     	;# 
  5744  0018                     	;# 
  5745  0019                     	;# 
  5746  001A                     	;# 
  5747  001B                     	;# 
  5748  001C                     	;# 
  5749  001E                     	;# 
  5750  001F                     	;# 
  5751  008C                     	;# 
  5752  008D                     	;# 
  5753  008E                     	;# 
  5754  008F                     	;# 
  5755  0090                     	;# 
  5756  0091                     	;# 
  5757  0092                     	;# 
  5758  0093                     	;# 
  5759  0094                     	;# 
  5760  0095                     	;# 
  5761  0096                     	;# 
  5762  0097                     	;# 
  5763  0098                     	;# 
  5764  0099                     	;# 
  5765  009A                     	;# 
  5766  009B                     	;# 
  5767  009B                     	;# 
  5768  009C                     	;# 
  5769  009D                     	;# 
  5770  009E                     	;# 
  5771  010C                     	;# 
  5772  010D                     	;# 
  5773  010E                     	;# 
  5774  010F                     	;# 
  5775  0110                     	;# 
  5776  0111                     	;# 
  5777  0112                     	;# 
  5778  0113                     	;# 
  5779  0114                     	;# 
  5780  0115                     	;# 
  5781  0116                     	;# 
  5782  0117                     	;# 
  5783  0118                     	;# 
  5784  0119                     	;# 
  5785  011A                     	;# 
  5786  011B                     	;# 
  5787  011D                     	;# 
  5788  011E                     	;# 
  5789  011F                     	;# 
  5790  018C                     	;# 
  5791  0190                     	;# 
  5792  0191                     	;# 
  5793  0191                     	;# 
  5794  0192                     	;# 
  5795  0193                     	;# 
  5796  0193                     	;# 
  5797  0193                     	;# 
  5798  0194                     	;# 
  5799  0195                     	;# 
  5800  0196                     	;# 
  5801  0199                     	;# 
  5802  0199                     	;# 
  5803  019A                     	;# 
  5804  019A                     	;# 
  5805  019B                     	;# 
  5806  019B                     	;# 
  5807  019B                     	;# 
  5808  019B                     	;# 
  5809  019C                     	;# 
  5810  019C                     	;# 
  5811  019D                     	;# 
  5812  019D                     	;# 
  5813  019E                     	;# 
  5814  019E                     	;# 
  5815  019F                     	;# 
  5816  019F                     	;# 
  5817  020D                     	;# 
  5818  0211                     	;# 
  5819  0211                     	;# 
  5820  0212                     	;# 
  5821  0212                     	;# 
  5822  0213                     	;# 
  5823  0213                     	;# 
  5824  0214                     	;# 
  5825  0214                     	;# 
  5826  0215                     	;# 
  5827  0215                     	;# 
  5828  0215                     	;# 
  5829  0216                     	;# 
  5830  0216                     	;# 
  5831  0217                     	;# 
  5832  0217                     	;# 
  5833  0219                     	;# 
  5834  021A                     	;# 
  5835  021B                     	;# 
  5836  021C                     	;# 
  5837  021D                     	;# 
  5838  021E                     	;# 
  5839  021F                     	;# 
  5840  028C                     	;# 
  5841  028D                     	;# 
  5842  0291                     	;# 
  5843  0291                     	;# 
  5844  0292                     	;# 
  5845  0293                     	;# 
  5846  0294                     	;# 
  5847  0295                     	;# 
  5848  0295                     	;# 
  5849  0296                     	;# 
  5850  0298                     	;# 
  5851  0298                     	;# 
  5852  0299                     	;# 
  5853  029A                     	;# 
  5854  029B                     	;# 
  5855  029C                     	;# 
  5856  029C                     	;# 
  5857  029D                     	;# 
  5858  029E                     	;# 
  5859  029F                     	;# 
  5860  030C                     	;# 
  5861  030D                     	;# 
  5862  0311                     	;# 
  5863  0311                     	;# 
  5864  0312                     	;# 
  5865  0313                     	;# 
  5866  0314                     	;# 
  5867  0315                     	;# 
  5868  0315                     	;# 
  5869  0316                     	;# 
  5870  0318                     	;# 
  5871  0318                     	;# 
  5872  0319                     	;# 
  5873  031A                     	;# 
  5874  031C                     	;# 
  5875  031C                     	;# 
  5876  031D                     	;# 
  5877  031E                     	;# 
  5878  038C                     	;# 
  5879  038D                     	;# 
  5880  0394                     	;# 
  5881  0395                     	;# 
  5882  0396                     	;# 
  5883  040C                     	;# 
  5884  040D                     	;# 
  5885  0415                     	;# 
  5886  0416                     	;# 
  5887  0417                     	;# 
  5888  041C                     	;# 
  5889  041D                     	;# 
  5890  041E                     	;# 
  5891  048D                     	;# 
  5892  0491                     	;# 
  5893  0492                     	;# 
  5894  0493                     	;# 
  5895  0493                     	;# 
  5896  0494                     	;# 
  5897  0495                     	;# 
  5898  0496                     	;# 
  5899  0497                     	;# 
  5900  0791                     	;# 
  5901  0792                     	;# 
  5902  0793                     	;# 
  5903  0794                     	;# 
  5904  0795                     	;# 
  5905  0798                     	;# 
  5906  0799                     	;# 
  5907  079A                     	;# 
  5908  079B                     	;# 
  5909  079C                     	;# 
  5910  079D                     	;# 
  5911  07A0                     	;# 
  5912  07A1                     	;# 
  5913  07A2                     	;# 
  5914  07A3                     	;# 
  5915  07A4                     	;# 
  5916  07A5                     	;# 
  5917  07A6                     	;# 
  5918  07A7                     	;# 
  5919  07A8                     	;# 
  5920  07A9                     	;# 
  5921  07AA                     	;# 
  5922  07AB                     	;# 
  5923  07AC                     	;# 
  5924  07AD                     	;# 
  5925  07AE                     	;# 
  5926  07AF                     	;# 
  5927  07B0                     	;# 
  5928  07B1                     	;# 
  5929  07B2                     	;# 
  5930  07B3                     	;# 
  5931  07B4                     	;# 
  5932  07B5                     	;# 
  5933  07B6                     	;# 
  5934  07B7                     	;# 
  5935  0FE4                     	;# 
  5936  0FE5                     	;# 
  5937  0FE6                     	;# 
  5938  0FE7                     	;# 
  5939  0FE8                     	;# 
  5940  0FE9                     	;# 
  5941  0FEA                     	;# 
  5942  0FEB                     	;# 
  5943  0FED                     	;# 
  5944  0FEE                     	;# 
  5945  0FEF                     	;# 
  5946  0000                     	;# 
  5947  0001                     	;# 
  5948  0002                     	;# 
  5949  0003                     	;# 
  5950  0004                     	;# 
  5951  0005                     	;# 
  5952  0006                     	;# 
  5953  0007                     	;# 
  5954  0008                     	;# 
  5955  0009                     	;# 
  5956  000A                     	;# 
  5957  000B                     	;# 
  5958  000C                     	;# 
  5959  000D                     	;# 
  5960  000E                     	;# 
  5961  000F                     	;# 
  5962  0010                     	;# 
  5963  0011                     	;# 
  5964  0012                     	;# 
  5965  0013                     	;# 
  5966  0014                     	;# 
  5967  0015                     	;# 
  5968  0016                     	;# 
  5969  0016                     	;# 
  5970  0017                     	;# 
  5971  0018                     	;# 
  5972  0019                     	;# 
  5973  001A                     	;# 
  5974  001B                     	;# 
  5975  001C                     	;# 
  5976  001E                     	;# 
  5977  001F                     	;# 
  5978  008C                     	;# 
  5979  008D                     	;# 
  5980  008E                     	;# 
  5981  008F                     	;# 
  5982  0090                     	;# 
  5983  0091                     	;# 
  5984  0092                     	;# 
  5985  0093                     	;# 
  5986  0094                     	;# 
  5987  0095                     	;# 
  5988  0096                     	;# 
  5989  0097                     	;# 
  5990  0098                     	;# 
  5991  0099                     	;# 
  5992  009A                     	;# 
  5993  009B                     	;# 
  5994  009B                     	;# 
  5995  009C                     	;# 
  5996  009D                     	;# 
  5997  009E                     	;# 
  5998  010C                     	;# 
  5999  010D                     	;# 
  6000  010E                     	;# 
  6001  010F                     	;# 
  6002  0110                     	;# 
  6003  0111                     	;# 
  6004  0112                     	;# 
  6005  0113                     	;# 
  6006  0114                     	;# 
  6007  0115                     	;# 
  6008  0116                     	;# 
  6009  0117                     	;# 
  6010  0118                     	;# 
  6011  0119                     	;# 
  6012  011A                     	;# 
  6013  011B                     	;# 
  6014  011D                     	;# 
  6015  011E                     	;# 
  6016  011F                     	;# 
  6017  018C                     	;# 
  6018  0190                     	;# 
  6019  0191                     	;# 
  6020  0191                     	;# 
  6021  0192                     	;# 
  6022  0193                     	;# 
  6023  0193                     	;# 
  6024  0193                     	;# 
  6025  0194                     	;# 
  6026  0195                     	;# 
  6027  0196                     	;# 
  6028  0199                     	;# 
  6029  0199                     	;# 
  6030  019A                     	;# 
  6031  019A                     	;# 
  6032  019B                     	;# 
  6033  019B                     	;# 
  6034  019B                     	;# 
  6035  019B                     	;# 
  6036  019C                     	;# 
  6037  019C                     	;# 
  6038  019D                     	;# 
  6039  019D                     	;# 
  6040  019E                     	;# 
  6041  019E                     	;# 
  6042  019F                     	;# 
  6043  019F                     	;# 
  6044  020D                     	;# 
  6045  0211                     	;# 
  6046  0211                     	;# 
  6047  0212                     	;# 
  6048  0212                     	;# 
  6049  0213                     	;# 
  6050  0213                     	;# 
  6051  0214                     	;# 
  6052  0214                     	;# 
  6053  0215                     	;# 
  6054  0215                     	;# 
  6055  0215                     	;# 
  6056  0216                     	;# 
  6057  0216                     	;# 
  6058  0217                     	;# 
  6059  0217                     	;# 
  6060  0219                     	;# 
  6061  021A                     	;# 
  6062  021B                     	;# 
  6063  021C                     	;# 
  6064  021D                     	;# 
  6065  021E                     	;# 
  6066  021F                     	;# 
  6067  028C                     	;# 
  6068  028D                     	;# 
  6069  0291                     	;# 
  6070  0291                     	;# 
  6071  0292                     	;# 
  6072  0293                     	;# 
  6073  0294                     	;# 
  6074  0295                     	;# 
  6075  0295                     	;# 
  6076  0296                     	;# 
  6077  0298                     	;# 
  6078  0298                     	;# 
  6079  0299                     	;# 
  6080  029A                     	;# 
  6081  029B                     	;# 
  6082  029C                     	;# 
  6083  029C                     	;# 
  6084  029D                     	;# 
  6085  029E                     	;# 
  6086  029F                     	;# 
  6087  030C                     	;# 
  6088  030D                     	;# 
  6089  0311                     	;# 
  6090  0311                     	;# 
  6091  0312                     	;# 
  6092  0313                     	;# 
  6093  0314                     	;# 
  6094  0315                     	;# 
  6095  0315                     	;# 
  6096  0316                     	;# 
  6097  0318                     	;# 
  6098  0318                     	;# 
  6099  0319                     	;# 
  6100  031A                     	;# 
  6101  031C                     	;# 
  6102  031C                     	;# 
  6103  031D                     	;# 
  6104  031E                     	;# 
  6105  038C                     	;# 
  6106  038D                     	;# 
  6107  0394                     	;# 
  6108  0395                     	;# 
  6109  0396                     	;# 
  6110  040C                     	;# 
  6111  040D                     	;# 
  6112  0415                     	;# 
  6113  0416                     	;# 
  6114  0417                     	;# 
  6115  041C                     	;# 
  6116  041D                     	;# 
  6117  041E                     	;# 
  6118  048D                     	;# 
  6119  0491                     	;# 
  6120  0492                     	;# 
  6121  0493                     	;# 
  6122  0493                     	;# 
  6123  0494                     	;# 
  6124  0495                     	;# 
  6125  0496                     	;# 
  6126  0497                     	;# 
  6127  0791                     	;# 
  6128  0792                     	;# 
  6129  0793                     	;# 
  6130  0794                     	;# 
  6131  0795                     	;# 
  6132  0798                     	;# 
  6133  0799                     	;# 
  6134  079A                     	;# 
  6135  079B                     	;# 
  6136  079C                     	;# 
  6137  079D                     	;# 
  6138  07A0                     	;# 
  6139  07A1                     	;# 
  6140  07A2                     	;# 
  6141  07A3                     	;# 
  6142  07A4                     	;# 
  6143  07A5                     	;# 
  6144  07A6                     	;# 
  6145  07A7                     	;# 
  6146  07A8                     	;# 
  6147  07A9                     	;# 
  6148  07AA                     	;# 
  6149  07AB                     	;# 
  6150  07AC                     	;# 
  6151  07AD                     	;# 
  6152  07AE                     	;# 
  6153  07AF                     	;# 
  6154  07B0                     	;# 
  6155  07B1                     	;# 
  6156  07B2                     	;# 
  6157  07B3                     	;# 
  6158  07B4                     	;# 
  6159  07B5                     	;# 
  6160  07B6                     	;# 
  6161  07B7                     	;# 
  6162  0FE4                     	;# 
  6163  0FE5                     	;# 
  6164  0FE6                     	;# 
  6165  0FE7                     	;# 
  6166  0FE8                     	;# 
  6167  0FE9                     	;# 
  6168  0FEA                     	;# 
  6169  0FEB                     	;# 
  6170  0FED                     	;# 
  6171  0FEE                     	;# 
  6172  0FEF                     	;# 
  6173  0000                     	;# 
  6174  0001                     	;# 
  6175  0002                     	;# 
  6176  0003                     	;# 
  6177  0004                     	;# 
  6178  0005                     	;# 
  6179  0006                     	;# 
  6180  0007                     	;# 
  6181  0008                     	;# 
  6182  0009                     	;# 
  6183  000A                     	;# 
  6184  000B                     	;# 
  6185  000C                     	;# 
  6186  000D                     	;# 
  6187  000E                     	;# 
  6188  000F                     	;# 
  6189  0010                     	;# 
  6190  0011                     	;# 
  6191  0012                     	;# 
  6192  0013                     	;# 
  6193  0014                     	;# 
  6194  0015                     	;# 
  6195  0016                     	;# 
  6196  0016                     	;# 
  6197  0017                     	;# 
  6198  0018                     	;# 
  6199  0019                     	;# 
  6200  001A                     	;# 
  6201  001B                     	;# 
  6202  001C                     	;# 
  6203  001E                     	;# 
  6204  001F                     	;# 
  6205  008C                     	;# 
  6206  008D                     	;# 
  6207  008E                     	;# 
  6208  008F                     	;# 
  6209  0090                     	;# 
  6210  0091                     	;# 
  6211  0092                     	;# 
  6212  0093                     	;# 
  6213  0094                     	;# 
  6214  0095                     	;# 
  6215  0096                     	;# 
  6216  0097                     	;# 
  6217  0098                     	;# 
  6218  0099                     	;# 
  6219  009A                     	;# 
  6220  009B                     	;# 
  6221  009B                     	;# 
  6222  009C                     	;# 
  6223  009D                     	;# 
  6224  009E                     	;# 
  6225  010C                     	;# 
  6226  010D                     	;# 
  6227  010E                     	;# 
  6228  010F                     	;# 
  6229  0110                     	;# 
  6230  0111                     	;# 
  6231  0112                     	;# 
  6232  0113                     	;# 
  6233  0114                     	;# 
  6234  0115                     	;# 
  6235  0116                     	;# 
  6236  0117                     	;# 
  6237  0118                     	;# 
  6238  0119                     	;# 
  6239  011A                     	;# 
  6240  011B                     	;# 
  6241  011D                     	;# 
  6242  011E                     	;# 
  6243  011F                     	;# 
  6244  018C                     	;# 
  6245  0190                     	;# 
  6246  0191                     	;# 
  6247  0191                     	;# 
  6248  0192                     	;# 
  6249  0193                     	;# 
  6250  0193                     	;# 
  6251  0193                     	;# 
  6252  0194                     	;# 
  6253  0195                     	;# 
  6254  0196                     	;# 
  6255  0199                     	;# 
  6256  0199                     	;# 
  6257  019A                     	;# 
  6258  019A                     	;# 
  6259  019B                     	;# 
  6260  019B                     	;# 
  6261  019B                     	;# 
  6262  019B                     	;# 
  6263  019C                     	;# 
  6264  019C                     	;# 
  6265  019D                     	;# 
  6266  019D                     	;# 
  6267  019E                     	;# 
  6268  019E                     	;# 
  6269  019F                     	;# 
  6270  019F                     	;# 
  6271  020D                     	;# 
  6272  0211                     	;# 
  6273  0211                     	;# 
  6274  0212                     	;# 
  6275  0212                     	;# 
  6276  0213                     	;# 
  6277  0213                     	;# 
  6278  0214                     	;# 
  6279  0214                     	;# 
  6280  0215                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0219                     	;# 
  6288  021A                     	;# 
  6289  021B                     	;# 
  6290  021C                     	;# 
  6291  021D                     	;# 
  6292  021E                     	;# 
  6293  021F                     	;# 
  6294  028C                     	;# 
  6295  028D                     	;# 
  6296  0291                     	;# 
  6297  0291                     	;# 
  6298  0292                     	;# 
  6299  0293                     	;# 
  6300  0294                     	;# 
  6301  0295                     	;# 
  6302  0295                     	;# 
  6303  0296                     	;# 
  6304  0298                     	;# 
  6305  0298                     	;# 
  6306  0299                     	;# 
  6307  029A                     	;# 
  6308  029B                     	;# 
  6309  029C                     	;# 
  6310  029C                     	;# 
  6311  029D                     	;# 
  6312  029E                     	;# 
  6313  029F                     	;# 
  6314  030C                     	;# 
  6315  030D                     	;# 
  6316  0311                     	;# 
  6317  0311                     	;# 
  6318  0312                     	;# 
  6319  0313                     	;# 
  6320  0314                     	;# 
  6321  0315                     	;# 
  6322  0315                     	;# 
  6323  0316                     	;# 
  6324  0318                     	;# 
  6325  0318                     	;# 
  6326  0319                     	;# 
  6327  031A                     	;# 
  6328  031C                     	;# 
  6329  031C                     	;# 
  6330  031D                     	;# 
  6331  031E                     	;# 
  6332  038C                     	;# 
  6333  038D                     	;# 
  6334  0394                     	;# 
  6335  0395                     	;# 
  6336  0396                     	;# 
  6337  040C                     	;# 
  6338  040D                     	;# 
  6339  0415                     	;# 
  6340  0416                     	;# 
  6341  0417                     	;# 
  6342  041C                     	;# 
  6343  041D                     	;# 
  6344  041E                     	;# 
  6345  048D                     	;# 
  6346  0491                     	;# 
  6347  0492                     	;# 
  6348  0493                     	;# 
  6349  0493                     	;# 
  6350  0494                     	;# 
  6351  0495                     	;# 
  6352  0496                     	;# 
  6353  0497                     	;# 
  6354  0791                     	;# 
  6355  0792                     	;# 
  6356  0793                     	;# 
  6357  0794                     	;# 
  6358  0795                     	;# 
  6359  0798                     	;# 
  6360  0799                     	;# 
  6361  079A                     	;# 
  6362  079B                     	;# 
  6363  079C                     	;# 
  6364  079D                     	;# 
  6365  07A0                     	;# 
  6366  07A1                     	;# 
  6367  07A2                     	;# 
  6368  07A3                     	;# 
  6369  07A4                     	;# 
  6370  07A5                     	;# 
  6371  07A6                     	;# 
  6372  07A7                     	;# 
  6373  07A8                     	;# 
  6374  07A9                     	;# 
  6375  07AA                     	;# 
  6376  07AB                     	;# 
  6377  07AC                     	;# 
  6378  07AD                     	;# 
  6379  07AE                     	;# 
  6380  07AF                     	;# 
  6381  07B0                     	;# 
  6382  07B1                     	;# 
  6383  07B2                     	;# 
  6384  07B3                     	;# 
  6385  07B4                     	;# 
  6386  07B5                     	;# 
  6387  07B6                     	;# 
  6388  07B7                     	;# 
  6389  0FE4                     	;# 
  6390  0FE5                     	;# 
  6391  0FE6                     	;# 
  6392  0FE7                     	;# 
  6393  0FE8                     	;# 
  6394  0FE9                     	;# 
  6395  0FEA                     	;# 
  6396  0FEB                     	;# 
  6397  0FED                     	;# 
  6398  0FEE                     	;# 
  6399  0FEF                     	;# 
  6400  0000                     	;# 
  6401  0001                     	;# 
  6402  0002                     	;# 
  6403  0003                     	;# 
  6404  0004                     	;# 
  6405  0005                     	;# 
  6406  0006                     	;# 
  6407  0007                     	;# 
  6408  0008                     	;# 
  6409  0009                     	;# 
  6410  000A                     	;# 
  6411  000B                     	;# 
  6412  000C                     	;# 
  6413  000D                     	;# 
  6414  000E                     	;# 
  6415  000F                     	;# 
  6416  0010                     	;# 
  6417  0011                     	;# 
  6418  0012                     	;# 
  6419  0013                     	;# 
  6420  0014                     	;# 
  6421  0015                     	;# 
  6422  0016                     	;# 
  6423  0016                     	;# 
  6424  0017                     	;# 
  6425  0018                     	;# 
  6426  0019                     	;# 
  6427  001A                     	;# 
  6428  001B                     	;# 
  6429  001C                     	;# 
  6430  001E                     	;# 
  6431  001F                     	;# 
  6432  008C                     	;# 
  6433  008D                     	;# 
  6434  008E                     	;# 
  6435  008F                     	;# 
  6436  0090                     	;# 
  6437  0091                     	;# 
  6438  0092                     	;# 
  6439  0093                     	;# 
  6440  0094                     	;# 
  6441  0095                     	;# 
  6442  0096                     	;# 
  6443  0097                     	;# 
  6444  0098                     	;# 
  6445  0099                     	;# 
  6446  009A                     	;# 
  6447  009B                     	;# 
  6448  009B                     	;# 
  6449  009C                     	;# 
  6450  009D                     	;# 
  6451  009E                     	;# 
  6452  010C                     	;# 
  6453  010D                     	;# 
  6454  010E                     	;# 
  6455  010F                     	;# 
  6456  0110                     	;# 
  6457  0111                     	;# 
  6458  0112                     	;# 
  6459  0113                     	;# 
  6460  0114                     	;# 
  6461  0115                     	;# 
  6462  0116                     	;# 
  6463  0117                     	;# 
  6464  0118                     	;# 
  6465  0119                     	;# 
  6466  011A                     	;# 
  6467  011B                     	;# 
  6468  011D                     	;# 
  6469  011E                     	;# 
  6470  011F                     	;# 
  6471  018C                     	;# 
  6472  0190                     	;# 
  6473  0191                     	;# 
  6474  0191                     	;# 
  6475  0192                     	;# 
  6476  0193                     	;# 
  6477  0193                     	;# 
  6478  0193                     	;# 
  6479  0194                     	;# 
  6480  0195                     	;# 
  6481  0196                     	;# 
  6482  0199                     	;# 
  6483  0199                     	;# 
  6484  019A                     	;# 
  6485  019A                     	;# 
  6486  019B                     	;# 
  6487  019B                     	;# 
  6488  019B                     	;# 
  6489  019B                     	;# 
  6490  019C                     	;# 
  6491  019C                     	;# 
  6492  019D                     	;# 
  6493  019D                     	;# 
  6494  019E                     	;# 
  6495  019E                     	;# 
  6496  019F                     	;# 
  6497  019F                     	;# 
  6498  020D                     	;# 
  6499  0211                     	;# 
  6500  0211                     	;# 
  6501  0212                     	;# 
  6502  0212                     	;# 
  6503  0213                     	;# 
  6504  0213                     	;# 
  6505  0214                     	;# 
  6506  0214                     	;# 
  6507  0215                     	;# 
  6508  0215                     	;# 
  6509  0215                     	;# 
  6510  0216                     	;# 
  6511  0216                     	;# 
  6512  0217                     	;# 
  6513  0217                     	;# 
  6514  0219                     	;# 
  6515  021A                     	;# 
  6516  021B                     	;# 
  6517  021C                     	;# 
  6518  021D                     	;# 
  6519  021E                     	;# 
  6520  021F                     	;# 
  6521  028C                     	;# 
  6522  028D                     	;# 
  6523  0291                     	;# 
  6524  0291                     	;# 
  6525  0292                     	;# 
  6526  0293                     	;# 
  6527  0294                     	;# 
  6528  0295                     	;# 
  6529  0295                     	;# 
  6530  0296                     	;# 
  6531  0298                     	;# 
  6532  0298                     	;# 
  6533  0299                     	;# 
  6534  029A                     	;# 
  6535  029B                     	;# 
  6536  029C                     	;# 
  6537  029C                     	;# 
  6538  029D                     	;# 
  6539  029E                     	;# 
  6540  029F                     	;# 
  6541  030C                     	;# 
  6542  030D                     	;# 
  6543  0311                     	;# 
  6544  0311                     	;# 
  6545  0312                     	;# 
  6546  0313                     	;# 
  6547  0314                     	;# 
  6548  0315                     	;# 
  6549  0315                     	;# 
  6550  0316                     	;# 
  6551  0318                     	;# 
  6552  0318                     	;# 
  6553  0319                     	;# 
  6554  031A                     	;# 
  6555  031C                     	;# 
  6556  031C                     	;# 
  6557  031D                     	;# 
  6558  031E                     	;# 
  6559  038C                     	;# 
  6560  038D                     	;# 
  6561  0394                     	;# 
  6562  0395                     	;# 
  6563  0396                     	;# 
  6564  040C                     	;# 
  6565  040D                     	;# 
  6566  0415                     	;# 
  6567  0416                     	;# 
  6568  0417                     	;# 
  6569  041C                     	;# 
  6570  041D                     	;# 
  6571  041E                     	;# 
  6572  048D                     	;# 
  6573  0491                     	;# 
  6574  0492                     	;# 
  6575  0493                     	;# 
  6576  0493                     	;# 
  6577  0494                     	;# 
  6578  0495                     	;# 
  6579  0496                     	;# 
  6580  0497                     	;# 
  6581  0791                     	;# 
  6582  0792                     	;# 
  6583  0793                     	;# 
  6584  0794                     	;# 
  6585  0795                     	;# 
  6586  0798                     	;# 
  6587  0799                     	;# 
  6588  079A                     	;# 
  6589  079B                     	;# 
  6590  079C                     	;# 
  6591  079D                     	;# 
  6592  07A0                     	;# 
  6593  07A1                     	;# 
  6594  07A2                     	;# 
  6595  07A3                     	;# 
  6596  07A4                     	;# 
  6597  07A5                     	;# 
  6598  07A6                     	;# 
  6599  07A7                     	;# 
  6600  07A8                     	;# 
  6601  07A9                     	;# 
  6602  07AA                     	;# 
  6603  07AB                     	;# 
  6604  07AC                     	;# 
  6605  07AD                     	;# 
  6606  07AE                     	;# 
  6607  07AF                     	;# 
  6608  07B0                     	;# 
  6609  07B1                     	;# 
  6610  07B2                     	;# 
  6611  07B3                     	;# 
  6612  07B4                     	;# 
  6613  07B5                     	;# 
  6614  07B6                     	;# 
  6615  07B7                     	;# 
  6616  0FE4                     	;# 
  6617  0FE5                     	;# 
  6618  0FE6                     	;# 
  6619  0FE7                     	;# 
  6620  0FE8                     	;# 
  6621  0FE9                     	;# 
  6622  0FEA                     	;# 
  6623  0FEB                     	;# 
  6624  0FED                     	;# 
  6625  0FEE                     	;# 
  6626  0FEF                     	;# 
  6627  0000                     	;# 
  6628  0001                     	;# 
  6629  0002                     	;# 
  6630  0003                     	;# 
  6631  0004                     	;# 
  6632  0005                     	;# 
  6633  0006                     	;# 
  6634  0007                     	;# 
  6635  0008                     	;# 
  6636  0009                     	;# 
  6637  000A                     	;# 
  6638  000B                     	;# 
  6639  000C                     	;# 
  6640  000D                     	;# 
  6641  000E                     	;# 
  6642  000F                     	;# 
  6643  0010                     	;# 
  6644  0011                     	;# 
  6645  0012                     	;# 
  6646  0013                     	;# 
  6647  0014                     	;# 
  6648  0015                     	;# 
  6649  0016                     	;# 
  6650  0016                     	;# 
  6651  0017                     	;# 
  6652  0018                     	;# 
  6653  0019                     	;# 
  6654  001A                     	;# 
  6655  001B                     	;# 
  6656  001C                     	;# 
  6657  001E                     	;# 
  6658  001F                     	;# 
  6659  008C                     	;# 
  6660  008D                     	;# 
  6661  008E                     	;# 
  6662  008F                     	;# 
  6663  0090                     	;# 
  6664  0091                     	;# 
  6665  0092                     	;# 
  6666  0093                     	;# 
  6667  0094                     	;# 
  6668  0095                     	;# 
  6669  0096                     	;# 
  6670  0097                     	;# 
  6671  0098                     	;# 
  6672  0099                     	;# 
  6673  009A                     	;# 
  6674  009B                     	;# 
  6675  009B                     	;# 
  6676  009C                     	;# 
  6677  009D                     	;# 
  6678  009E                     	;# 
  6679  010C                     	;# 
  6680  010D                     	;# 
  6681  010E                     	;# 
  6682  010F                     	;# 
  6683  0110                     	;# 
  6684  0111                     	;# 
  6685  0112                     	;# 
  6686  0113                     	;# 
  6687  0114                     	;# 
  6688  0115                     	;# 
  6689  0116                     	;# 
  6690  0117                     	;# 
  6691  0118                     	;# 
  6692  0119                     	;# 
  6693  011A                     	;# 
  6694  011B                     	;# 
  6695  011D                     	;# 
  6696  011E                     	;# 
  6697  011F                     	;# 
  6698  018C                     	;# 
  6699  0190                     	;# 
  6700  0191                     	;# 
  6701  0191                     	;# 
  6702  0192                     	;# 
  6703  0193                     	;# 
  6704  0193                     	;# 
  6705  0193                     	;# 
  6706  0194                     	;# 
  6707  0195                     	;# 
  6708  0196                     	;# 
  6709  0199                     	;# 
  6710  0199                     	;# 
  6711  019A                     	;# 
  6712  019A                     	;# 
  6713  019B                     	;# 
  6714  019B                     	;# 
  6715  019B                     	;# 
  6716  019B                     	;# 
  6717  019C                     	;# 
  6718  019C                     	;# 
  6719  019D                     	;# 
  6720  019D                     	;# 
  6721  019E                     	;# 
  6722  019E                     	;# 
  6723  019F                     	;# 
  6724  019F                     	;# 
  6725  020D                     	;# 
  6726  0211                     	;# 
  6727  0211                     	;# 
  6728  0212                     	;# 
  6729  0212                     	;# 
  6730  0213                     	;# 
  6731  0213                     	;# 
  6732  0214                     	;# 
  6733  0214                     	;# 
  6734  0215                     	;# 
  6735  0215                     	;# 
  6736  0215                     	;# 
  6737  0216                     	;# 
  6738  0216                     	;# 
  6739  0217                     	;# 
  6740  0217                     	;# 
  6741  0219                     	;# 
  6742  021A                     	;# 
  6743  021B                     	;# 
  6744  021C                     	;# 
  6745  021D                     	;# 
  6746  021E                     	;# 
  6747  021F                     	;# 
  6748  028C                     	;# 
  6749  028D                     	;# 
  6750  0291                     	;# 
  6751  0291                     	;# 
  6752  0292                     	;# 
  6753  0293                     	;# 
  6754  0294                     	;# 
  6755  0295                     	;# 
  6756  0295                     	;# 
  6757  0296                     	;# 
  6758  0298                     	;# 
  6759  0298                     	;# 
  6760  0299                     	;# 
  6761  029A                     	;# 
  6762  029B                     	;# 
  6763  029C                     	;# 
  6764  029C                     	;# 
  6765  029D                     	;# 
  6766  029E                     	;# 
  6767  029F                     	;# 
  6768  030C                     	;# 
  6769  030D                     	;# 
  6770  0311                     	;# 
  6771  0311                     	;# 
  6772  0312                     	;# 
  6773  0313                     	;# 
  6774  0314                     	;# 
  6775  0315                     	;# 
  6776  0315                     	;# 
  6777  0316                     	;# 
  6778  0318                     	;# 
  6779  0318                     	;# 
  6780  0319                     	;# 
  6781  031A                     	;# 
  6782  031C                     	;# 
  6783  031C                     	;# 
  6784  031D                     	;# 
  6785  031E                     	;# 
  6786  038C                     	;# 
  6787  038D                     	;# 
  6788  0394                     	;# 
  6789  0395                     	;# 
  6790  0396                     	;# 
  6791  040C                     	;# 
  6792  040D                     	;# 
  6793  0415                     	;# 
  6794  0416                     	;# 
  6795  0417                     	;# 
  6796  041C                     	;# 
  6797  041D                     	;# 
  6798  041E                     	;# 
  6799  048D                     	;# 
  6800  0491                     	;# 
  6801  0492                     	;# 
  6802  0493                     	;# 
  6803  0493                     	;# 
  6804  0494                     	;# 
  6805  0495                     	;# 
  6806  0496                     	;# 
  6807  0497                     	;# 
  6808  0791                     	;# 
  6809  0792                     	;# 
  6810  0793                     	;# 
  6811  0794                     	;# 
  6812  0795                     	;# 
  6813  0798                     	;# 
  6814  0799                     	;# 
  6815  079A                     	;# 
  6816  079B                     	;# 
  6817  079C                     	;# 
  6818  079D                     	;# 
  6819  07A0                     	;# 
  6820  07A1                     	;# 
  6821  07A2                     	;# 
  6822  07A3                     	;# 
  6823  07A4                     	;# 
  6824  07A5                     	;# 
  6825  07A6                     	;# 
  6826  07A7                     	;# 
  6827  07A8                     	;# 
  6828  07A9                     	;# 
  6829  07AA                     	;# 
  6830  07AB                     	;# 
  6831  07AC                     	;# 
  6832  07AD                     	;# 
  6833  07AE                     	;# 
  6834  07AF                     	;# 
  6835  07B0                     	;# 
  6836  07B1                     	;# 
  6837  07B2                     	;# 
  6838  07B3                     	;# 
  6839  07B4                     	;# 
  6840  07B5                     	;# 
  6841  07B6                     	;# 
  6842  07B7                     	;# 
  6843  0FE4                     	;# 
  6844  0FE5                     	;# 
  6845  0FE6                     	;# 
  6846  0FE7                     	;# 
  6847  0FE8                     	;# 
  6848  0FE9                     	;# 
  6849  0FEA                     	;# 
  6850  0FEB                     	;# 
  6851  0FED                     	;# 
  6852  0FEE                     	;# 
  6853  0FEF                     	;# 
  6854  0000                     	;# 
  6855  0001                     	;# 
  6856  0002                     	;# 
  6857  0003                     	;# 
  6858  0004                     	;# 
  6859  0005                     	;# 
  6860  0006                     	;# 
  6861  0007                     	;# 
  6862  0008                     	;# 
  6863  0009                     	;# 
  6864  000A                     	;# 
  6865  000B                     	;# 
  6866  000C                     	;# 
  6867  000D                     	;# 
  6868  000E                     	;# 
  6869  000F                     	;# 
  6870  0010                     	;# 
  6871  0011                     	;# 
  6872  0012                     	;# 
  6873  0013                     	;# 
  6874  0014                     	;# 
  6875  0015                     	;# 
  6876  0016                     	;# 
  6877  0016                     	;# 
  6878  0017                     	;# 
  6879  0018                     	;# 
  6880  0019                     	;# 
  6881  001A                     	;# 
  6882  001B                     	;# 
  6883  001C                     	;# 
  6884  001E                     	;# 
  6885  001F                     	;# 
  6886  008C                     	;# 
  6887  008D                     	;# 
  6888  008E                     	;# 
  6889  008F                     	;# 
  6890  0090                     	;# 
  6891  0091                     	;# 
  6892  0092                     	;# 
  6893  0093                     	;# 
  6894  0094                     	;# 
  6895  0095                     	;# 
  6896  0096                     	;# 
  6897  0097                     	;# 
  6898  0098                     	;# 
  6899  0099                     	;# 
  6900  009A                     	;# 
  6901  009B                     	;# 
  6902  009B                     	;# 
  6903  009C                     	;# 
  6904  009D                     	;# 
  6905  009E                     	;# 
  6906  010C                     	;# 
  6907  010D                     	;# 
  6908  010E                     	;# 
  6909  010F                     	;# 
  6910  0110                     	;# 
  6911  0111                     	;# 
  6912  0112                     	;# 
  6913  0113                     	;# 
  6914  0114                     	;# 
  6915  0115                     	;# 
  6916  0116                     	;# 
  6917  0117                     	;# 
  6918  0118                     	;# 
  6919  0119                     	;# 
  6920  011A                     	;# 
  6921  011B                     	;# 
  6922  011D                     	;# 
  6923  011E                     	;# 
  6924  011F                     	;# 
  6925  018C                     	;# 
  6926  0190                     	;# 
  6927  0191                     	;# 
  6928  0191                     	;# 
  6929  0192                     	;# 
  6930  0193                     	;# 
  6931  0193                     	;# 
  6932  0193                     	;# 
  6933  0194                     	;# 
  6934  0195                     	;# 
  6935  0196                     	;# 
  6936  0199                     	;# 
  6937  0199                     	;# 
  6938  019A                     	;# 
  6939  019A                     	;# 
  6940  019B                     	;# 
  6941  019B                     	;# 
  6942  019B                     	;# 
  6943  019B                     	;# 
  6944  019C                     	;# 
  6945  019C                     	;# 
  6946  019D                     	;# 
  6947  019D                     	;# 
  6948  019E                     	;# 
  6949  019E                     	;# 
  6950  019F                     	;# 
  6951  019F                     	;# 
  6952  020D                     	;# 
  6953  0211                     	;# 
  6954  0211                     	;# 
  6955  0212                     	;# 
  6956  0212                     	;# 
  6957  0213                     	;# 
  6958  0213                     	;# 
  6959  0214                     	;# 
  6960  0214                     	;# 
  6961  0215                     	;# 
  6962  0215                     	;# 
  6963  0215                     	;# 
  6964  0216                     	;# 
  6965  0216                     	;# 
  6966  0217                     	;# 
  6967  0217                     	;# 
  6968  0219                     	;# 
  6969  021A                     	;# 
  6970  021B                     	;# 
  6971  021C                     	;# 
  6972  021D                     	;# 
  6973  021E                     	;# 
  6974  021F                     	;# 
  6975  028C                     	;# 
  6976  028D                     	;# 
  6977  0291                     	;# 
  6978  0291                     	;# 
  6979  0292                     	;# 
  6980  0293                     	;# 
  6981  0294                     	;# 
  6982  0295                     	;# 
  6983  0295                     	;# 
  6984  0296                     	;# 
  6985  0298                     	;# 
  6986  0298                     	;# 
  6987  0299                     	;# 
  6988  029A                     	;# 
  6989  029B                     	;# 
  6990  029C                     	;# 
  6991  029C                     	;# 
  6992  029D                     	;# 
  6993  029E                     	;# 
  6994  029F                     	;# 
  6995  030C                     	;# 
  6996  030D                     	;# 
  6997  0311                     	;# 
  6998  0311                     	;# 
  6999  0312                     	;# 
  7000  0313                     	;# 
  7001  0314                     	;# 
  7002  0315                     	;# 
  7003  0315                     	;# 
  7004  0316                     	;# 
  7005  0318                     	;# 
  7006  0318                     	;# 
  7007  0319                     	;# 
  7008  031A                     	;# 
  7009  031C                     	;# 
  7010  031C                     	;# 
  7011  031D                     	;# 
  7012  031E                     	;# 
  7013  038C                     	;# 
  7014  038D                     	;# 
  7015  0394                     	;# 
  7016  0395                     	;# 
  7017  0396                     	;# 
  7018  040C                     	;# 
  7019  040D                     	;# 
  7020  0415                     	;# 
  7021  0416                     	;# 
  7022  0417                     	;# 
  7023  041C                     	;# 
  7024  041D                     	;# 
  7025  041E                     	;# 
  7026  048D                     	;# 
  7027  0491                     	;# 
  7028  0492                     	;# 
  7029  0493                     	;# 
  7030  0493                     	;# 
  7031  0494                     	;# 
  7032  0495                     	;# 
  7033  0496                     	;# 
  7034  0497                     	;# 
  7035  0791                     	;# 
  7036  0792                     	;# 
  7037  0793                     	;# 
  7038  0794                     	;# 
  7039  0795                     	;# 
  7040  0798                     	;# 
  7041  0799                     	;# 
  7042  079A                     	;# 
  7043  079B                     	;# 
  7044  079C                     	;# 
  7045  079D                     	;# 
  7046  07A0                     	;# 
  7047  07A1                     	;# 
  7048  07A2                     	;# 
  7049  07A3                     	;# 
  7050  07A4                     	;# 
  7051  07A5                     	;# 
  7052  07A6                     	;# 
  7053  07A7                     	;# 
  7054  07A8                     	;# 
  7055  07A9                     	;# 
  7056  07AA                     	;# 
  7057  07AB                     	;# 
  7058  07AC                     	;# 
  7059  07AD                     	;# 
  7060  07AE                     	;# 
  7061  07AF                     	;# 
  7062  07B0                     	;# 
  7063  07B1                     	;# 
  7064  07B2                     	;# 
  7065  07B3                     	;# 
  7066  07B4                     	;# 
  7067  07B5                     	;# 
  7068  07B6                     	;# 
  7069  07B7                     	;# 
  7070  0FE4                     	;# 
  7071  0FE5                     	;# 
  7072  0FE6                     	;# 
  7073  0FE7                     	;# 
  7074  0FE8                     	;# 
  7075  0FE9                     	;# 
  7076  0FEA                     	;# 
  7077  0FEB                     	;# 
  7078  0FED                     	;# 
  7079  0FEE                     	;# 
  7080  0FEF                     	;_comBuffer
  7081                           
  7082 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
  7083  0000                     
  7084 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
  7085  0000                     
  7086                           	psect	idataBANK2
  7087  3AD2                     __pidataBANK2:	
  7088                           
  7089                           ;initializer for _pLcdReg
  7090  3AD2  34A0               	retlw	160
  7091  3AD3  3407               	retlw	7
  7092                           
  7093                           ;initializer for _flowCalibrationPointSingle
  7094  3AD4  3401               	retlw	1
  7095                           
  7096                           ;initializer for _noKeyEventTimeOut
  7097  3AD5  341E               	retlw	30
  7098                           
  7099                           	psect	idataBANK3
  7100  3AF2                     __pidataBANK3:	
  7101                           
  7102                           ;initializer for _userKeyB
  7103  3AF2  3474               	retlw	116
  7104  3AF3  3477               	retlw	119
  7105  3AF4  3464               	retlw	100
  7106  3AF5  346C               	retlw	108
  7107  3AF6  3462               	retlw	98
  7108  3AF7  3467               	retlw	103
  7109                           
  7110                           	psect	idataBANK4
  7111  290D                     __pidataBANK4:	
  7112                           
  7113                           ;initializer for _mainSystemData
  7114  290D  34E1               	retlw	225
  7115  290E  3410               	retlw	16
  7116  290F  3400               	retlw	0
  7117  2910  3400               	retlw	0
  7118  2911  3400               	retlw	0
  7119  2912  3400               	retlw	0
  7120  2913  3400               	retlw	0
  7121  2914  3400               	retlw	0
  7122  2915  3441               	retlw	65
  7123  2916  34FF               	retlw	255
  7124  2917  34B8               	retlw	184
  7125  2918  3422               	retlw	34
  7126  2919  3400               	retlw	0
  7127  291A  3400               	retlw	0
  7128  291B  3400               	retlw	0
  7129  291C  3400               	retlw	0
  7130  291D  3400               	retlw	0
  7131  291E  3400               	retlw	0
  7132  291F  3464               	retlw	100
  7133  2920  3400               	retlw	0
  7134  2921  3432               	retlw	50
  7135  2922  3400               	retlw	0
  7136  2923  3428               	retlw	40
  7137  2924  3400               	retlw	0
  7138  2925  3400               	retlw	0
  7139  2926  3400               	retlw	0
  7140  2927  34E8               	retlw	232
  7141  2928  3403               	retlw	3
  7142  2929  3400               	retlw	0
  7143  292A  3400               	retlw	0
  7144  292B  3400               	retlw	0
  7145  292C  3400               	retlw	0
  7146  292D  3400               	retlw	0
  7147  292E  3400               	retlw	0
  7148  292F  3400               	retlw	0
  7149  2930  3400               	retlw	0
  7150  2931  3464               	retlw	100
  7151  2932  3400               	retlw	0
  7152  2933  3400               	retlw	0
  7153  2934  3400               	retlw	0
  7154  2935  34E0               	retlw	224
  7155  2936  3493               	retlw	147
  7156  2937  3404               	retlw	4
  7157  2938  3400               	retlw	0
  7158  2939  3400               	retlw	0
  7159  293A  3400               	retlw	0
  7160  293B  3400               	retlw	0
  7161  293C  3400               	retlw	0
  7162  293D  3400               	retlw	0
  7163  293E  3400               	retlw	0
  7164  293F  3400               	retlw	0
  7165  2940  3400               	retlw	0
  7166  2941  3400               	retlw	0
  7167  2942  3400               	retlw	0
  7168  2943  3400               	retlw	0
  7169  2944  3400               	retlw	0
  7170  2945  3400               	retlw	0
  7171  2946  3405               	retlw	5
  7172  2947  3400               	retlw	0
  7173  2948  3401               	retlw	1
  7174  2949  3400               	retlw	0
  7175  294A  3401               	retlw	1
  7176  294B  3400               	retlw	0
  7177  294C  3401               	retlw	1
  7178  294D  3400               	retlw	0
  7179  294E  3400               	retlw	0
  7180  294F  3400               	retlw	0
  7181  2950  3400               	retlw	0
  7182  2951  3400               	retlw	0
  7183  2952  3400               	retlw	0
  7184  2953  3400               	retlw	0
  7185  2954  3400               	retlw	0
  7186                           
  7187                           	psect	stringtext1
  7188  3800                     __pstringtext1:	
  7189  3800                     _LCDDigitalIndexTable:	
  7190  3800  3430               	retlw	48
  7191  3801  3431               	retlw	49
  7192  3802  3432               	retlw	50
  7193  3803  3433               	retlw	51
  7194  3804  3434               	retlw	52
  7195  3805  3435               	retlw	53
  7196  3806  3436               	retlw	54
  7197  3807  3437               	retlw	55
  7198  3808  3438               	retlw	56
  7199  3809  3439               	retlw	57
  7200  380A  3461               	retlw	97
  7201  380B  3462               	retlw	98
  7202  380C  3463               	retlw	99
  7203  380D  3464               	retlw	100
  7204  380E  3465               	retlw	101
  7205  380F  3466               	retlw	102
  7206  3810  3467               	retlw	103
  7207  3811  3468               	retlw	104
  7208  3812  3469               	retlw	105
  7209  3813  346A               	retlw	106
  7210  3814  346B               	retlw	107
  7211  3815  346C               	retlw	108
  7212  3816  346D               	retlw	109
  7213  3817  346E               	retlw	110
  7214  3818  346F               	retlw	111
  7215  3819  3470               	retlw	112
  7216  381A  3471               	retlw	113
  7217  381B  3472               	retlw	114
  7218  381C  3473               	retlw	115
  7219  381D  3474               	retlw	116
  7220  381E  3475               	retlw	117
  7221  381F  3476               	retlw	118
  7222  3820  3477               	retlw	119
  7223  3821  3478               	retlw	120
  7224  3822  3479               	retlw	121
  7225  3823  347A               	retlw	122
  7226  3824  342E               	retlw	46
  7227  3825  342D               	retlw	45
  7228  3826  343A               	retlw	58
  7229  3827  3420               	retlw	32
  7230  3828  3400               	retlw	0
  7231  3829                     __end_of_LCDDigitalIndexTable:	
  7232                           
  7233                           	psect	stringtext2
  7234  3829                     __pstringtext2:	
  7235  3829                     _LCDDigitalTable:	
  7236  3829  343F               	retlw	63
  7237  382A  3406               	retlw	6
  7238  382B  345B               	retlw	91
  7239  382C  344F               	retlw	79
  7240  382D  3466               	retlw	102
  7241  382E  346D               	retlw	109
  7242  382F  347D               	retlw	125
  7243  3830  3407               	retlw	7
  7244  3831  347F               	retlw	127
  7245  3832  346F               	retlw	111
  7246  3833  3477               	retlw	119
  7247  3834  347C               	retlw	124
  7248  3835  3439               	retlw	57
  7249  3836  345E               	retlw	94
  7250  3837  3479               	retlw	121
  7251  3838  3471               	retlw	113
  7252  3839  346F               	retlw	111
  7253  383A  3476               	retlw	118
  7254  383B  3406               	retlw	6
  7255  383C  340E               	retlw	14
  7256  383D  347A               	retlw	122
  7257  383E  3438               	retlw	56
  7258  383F  3400               	retlw	0
  7259  3840  3437               	retlw	55
  7260  3841  345C               	retlw	92
  7261  3842  3473               	retlw	115
  7262  3843  3467               	retlw	103
  7263  3844  3450               	retlw	80
  7264  3845  346D               	retlw	109
  7265  3846  3478               	retlw	120
  7266  3847  343E               	retlw	62
  7267  3848  3400               	retlw	0
  7268  3849  3400               	retlw	0
  7269  384A  3400               	retlw	0
  7270  384B  346E               	retlw	110
  7271  384C  345B               	retlw	91
  7272  384D  3440               	retlw	64
  7273  384E  3440               	retlw	64
  7274  384F  3448               	retlw	72
  7275  3850  3400               	retlw	0
  7276  3851                     __end_of_LCDDigitalTable:	
  7277                           
  7278                           	psect	stringtext3
  7279  3869                     __pstringtext3:	
  7280  3869                     _hexTable:	
  7281  3869  3430               	retlw	48
  7282  386A  3431               	retlw	49
  7283  386B  3432               	retlw	50
  7284  386C  3433               	retlw	51
  7285  386D  3434               	retlw	52
  7286  386E  3435               	retlw	53
  7287  386F  3436               	retlw	54
  7288  3870  3437               	retlw	55
  7289  3871  3438               	retlw	56
  7290  3872  3439               	retlw	57
  7291  3873  3461               	retlw	97
  7292  3874  3462               	retlw	98
  7293  3875  3463               	retlw	99
  7294  3876  3464               	retlw	100
  7295  3877  3465               	retlw	101
  7296  3878  3466               	retlw	102
  7297  3879  3400               	retlw	0
  7298  387A                     __end_of_hexTable:	
  7299                           
  7300                           	psect	stringtext4
  7301  390F                     __pstringtext4:	
  7302  390F                     _TablerxAlign:	
  7303  390F  34FF               	retlw	255
  7304  3910  34FE               	retlw	254
  7305  3911  34FC               	retlw	252
  7306  3912  34F8               	retlw	248
  7307  3913  34F0               	retlw	240
  7308  3914  34E0               	retlw	224
  7309  3915  34C0               	retlw	192
  7310  3916  3480               	retlw	128
  7311  3917                     __end_of_TablerxAlign:	
  7312                           
  7313                           	psect	stringtext5
  7314  3925                     __pstringtext5:	
  7315  3925                     _defaultKeyA:	
  7316  3925  34FF               	retlw	255
  7317  3926  34FF               	retlw	255
  7318  3927  34FF               	retlw	255
  7319  3928  34FF               	retlw	255
  7320  3929  34FF               	retlw	255
  7321  392A  34FF               	retlw	255
  7322  392B                     __end_of_defaultKeyA:	
  7323                           
  7324                           	psect	nvBANK2
  7325  016D                     __pnvBANK2:	
  7326  016D                     _timer1ReloadVal:	
  7327  016D                     	ds	2
  7328  016F                     _timer0ReloadVal:	
  7329  016F                     	ds	1
  7330                           
  7331                           	psect	nvBANK3
  7332  01CE                     __pnvBANK3:	
  7333  01CE                     _TMR0_InterruptHandler:	
  7334  01CE                     	ds	2
  7335  01D0                     _TMR1_InterruptHandler:	
  7336  01D0                     	ds	2
  7337  000D                     _PORTBbits	set	13
  7338  000C                     _PORTAbits	set	12
  7339  000E                     _PORTCbits	set	14
  7340  000F                     _PORTDbits	set	15
  7341  000D                     _PORTB	set	13
  7342  0015                     _TMR0	set	21
  7343  000B                     _INTCONbits	set	11
  7344  0018                     _T1CONbits	set	24
  7345  0011                     _PIR1bits	set	17
  7346  0016                     _TMR1L	set	22
  7347  0017                     _TMR1H	set	23
  7348  0019                     _T1GCON	set	25
  7349  0018                     _T1CON	set	24
  7350  008E                     _TRISCbits	set	142
  7351  008D                     _TRISBbits	set	141
  7352  008F                     _TRISDbits	set	143
  7353  008C                     _TRISAbits	set	140
  7354  0095                     _OPTION_REG	set	149
  7355  0091                     _PIE1bits	set	145
  7356  0095                     _OPTION_REGbits	set	149
  7357  008F                     _TRISD	set	143
  7358  008E                     _TRISC	set	142
  7359  008D                     _TRISB	set	141
  7360  008C                     _TRISA	set	140
  7361  0090                     _TRISE	set	144
  7362  0097                     _WDTCON	set	151
  7363  0098                     _OSCTUNE	set	152
  7364  0099                     _OSCCON	set	153
  7365  010E                     _LATCbits	set	270
  7366  010D                     _LATBbits	set	269
  7367  010F                     _LATDbits	set	271
  7368  010C                     _LATAbits	set	268
  7369  011D                     _APFCON	set	285
  7370  010E                     _LATC	set	270
  7371  010D                     _LATB	set	269
  7372  010C                     _LATA	set	268
  7373  010F                     _LATD	set	271
  7374  0110                     _LATE	set	272
  7375  018C                     _ANSELAbits	set	396
  7376  0199                     _RC1REG	set	409
  7377  019D                     _RC1STAbits	set	413
  7378  019A                     _TX1REG	set	410
  7379  019C                     _SP1BRGH	set	412
  7380  019B                     _SP1BRGL	set	411
  7381  019E                     _TX1STA	set	414
  7382  019D                     _RC1STA	set	413
  7383  019F                     _BAUD1CON	set	415
  7384  0196                     _EECON2	set	406
  7385  0195                     _EECON1bits	set	405
  7386  0193                     _EEDATL	set	403
  7387  0191                     _EEADRL	set	401
  7388  018C                     _ANSELA	set	396
  7389  0190                     _ANSELE	set	400
  7390  020D                     _WPUB	set	525
  7391  030C                     _TRISFbits	set	780
  7392  030D                     _TRISG	set	781
  7393  030C                     _TRISF	set	780
  7394  038C                     _LATFbits	set	908
  7395  038D                     _LATG	set	909
  7396  038C                     _LATF	set	908
  7397  040C                     _ANSELFbits	set	1036
  7398  040C                     _ANSELF	set	1036
  7399  040D                     _ANSELG	set	1037
  7400  048D                     _WPUG	set	1165
  7401  0791                     _LCDCON	set	1937
  7402  0793                     _LCDREF	set	1939
  7403  0795                     _LCDRL	set	1941
  7404  0794                     _LCDCST	set	1940
  7405  079D                     _LCDSE5	set	1949
  7406  079C                     _LCDSE4	set	1948
  7407  079B                     _LCDSE3	set	1947
  7408  079A                     _LCDSE2	set	1946
  7409  0799                     _LCDSE1	set	1945
  7410  0798                     _LCDSE0	set	1944
  7411  0792                     _LCDPSbits	set	1938
  7412  07A0                     _LCDDATA0	set	1952
  7413                           
  7414                           	psect	stringtext6
  7415  389A                     __pstringtext6:	
  7416  389A                     STR_24:	
  7417  389A  342D               	retlw	45	;'-'
  7418  389B  342D               	retlw	45	;'-'
  7419  389C  3466               	retlw	102	;'f'
  7420  389D  3475               	retlw	117	;'u'
  7421  389E  346C               	retlw	108	;'l'
  7422  389F  346C               	retlw	108	;'l'
  7423  38A0  342D               	retlw	45	;'-'
  7424  38A1  342D               	retlw	45	;'-'
  7425  38A2  3400               	retlw	0
  7426                           
  7427                           	psect	stringtext7
  7428  38A3                     __pstringtext7:	
  7429  38A3                     STR_4:	
  7430  38A3  346B               	retlw	107	;'k'
  7431  38A4  3430               	retlw	48	;'0'
  7432  38A5  3420               	retlw	32	;' '
  7433  38A6  3420               	retlw	32	;' '
  7434  38A7  3420               	retlw	32	;' '
  7435  38A8  3420               	retlw	32	;' '
  7436  38A9  3420               	retlw	32	;' '
  7437  38AA  3420               	retlw	32	;' '
  7438  38AB  3400               	retlw	0
  7439                           
  7440                           	psect	stringtext8
  7441  38AC                     __pstringtext8:	
  7442  38AC                     STR_22:	
  7443  38AC  3420               	retlw	32	;' '
  7444  38AD  3420               	retlw	32	;' '
  7445  38AE  3420               	retlw	32	;' '
  7446  38AF  3420               	retlw	32	;' '
  7447  38B0  3430               	retlw	48	;'0'
  7448  38B1  346E               	retlw	110	;'n'
  7449  38B2  3420               	retlw	32	;' '
  7450  38B3  3420               	retlw	32	;' '
  7451  38B4  3400               	retlw	0
  7452                           
  7453                           	psect	stringtext9
  7454  38B5                     __pstringtext9:	
  7455  38B5                     STR_21:	
  7456  38B5  3420               	retlw	32	;' '
  7457  38B6  3468               	retlw	104	;'h'
  7458  38B7  3461               	retlw	97	;'a'
  7459  38B8  3420               	retlw	32	;' '
  7460  38B9  3430               	retlw	48	;'0'
  7461  38BA  346E               	retlw	110	;'n'
  7462  38BB  3420               	retlw	32	;' '
  7463  38BC  3420               	retlw	32	;' '
  7464  38BD  3400               	retlw	0
  7465                           
  7466                           	psect	stringtext10
  7467  38BE                     __pstringtext10:	
  7468  38BE                     STR_20:	
  7469  38BE  3420               	retlw	32	;' '
  7470  38BF  3420               	retlw	32	;' '
  7471  38C0  3420               	retlw	32	;' '
  7472  38C1  3420               	retlw	32	;' '
  7473  38C2  3430               	retlw	48	;'0'
  7474  38C3  3466               	retlw	102	;'f'
  7475  38C4  3466               	retlw	102	;'f'
  7476  38C5  3420               	retlw	32	;' '
  7477  38C6  3400               	retlw	0
  7478                           
  7479                           	psect	stringtext11
  7480  38C7                     __pstringtext11:	
  7481  38C7                     STR_19:	
  7482  38C7  3420               	retlw	32	;' '
  7483  38C8  346C               	retlw	108	;'l'
  7484  38C9  3461               	retlw	97	;'a'
  7485  38CA  3420               	retlw	32	;' '
  7486  38CB  3430               	retlw	48	;'0'
  7487  38CC  3466               	retlw	102	;'f'
  7488  38CD  3466               	retlw	102	;'f'
  7489  38CE  3420               	retlw	32	;' '
  7490  38CF  3400               	retlw	0
  7491                           
  7492                           	psect	stringtext12
  7493  38D0                     __pstringtext12:	
  7494  38D0                     STR_3:	
  7495  38D0  3420               	retlw	32	;' '
  7496  38D1  3420               	retlw	32	;' '
  7497  38D2  3465               	retlw	101	;'e'
  7498  38D3  3472               	retlw	114	;'r'
  7499  38D4  3472               	retlw	114	;'r'
  7500  38D5  346F               	retlw	111	;'o'
  7501  38D6  3472               	retlw	114	;'r'
  7502  38D7  3420               	retlw	32	;' '
  7503  38D8  3400               	retlw	0
  7504                           
  7505                           	psect	stringtext13
  7506  38D9                     __pstringtext13:	
  7507  38D9                     STR_1:	
  7508  38D9  3420               	retlw	32	;' '
  7509  38DA  342D               	retlw	45	;'-'
  7510  38DB  3468               	retlw	104	;'h'
  7511  38DC  3465               	retlw	101	;'e'
  7512  38DD  346C               	retlw	108	;'l'
  7513  38DE  346C               	retlw	108	;'l'
  7514  38DF  3430               	retlw	48	;'0'
  7515  38E0  342D               	retlw	45	;'-'
  7516  38E1  3400               	retlw	0
  7517                           
  7518                           	psect	stringtext14
  7519  38E2                     __pstringtext14:	
  7520  38E2                     STR_15:	
  7521  38E2  3420               	retlw	32	;' '
  7522  38E3  3420               	retlw	32	;' '
  7523  38E4  3420               	retlw	32	;' '
  7524  38E5  3463               	retlw	99	;'c'
  7525  38E6  342D               	retlw	45	;'-'
  7526  38E7  3469               	retlw	105	;'i'
  7527  38E8  3464               	retlw	100	;'d'
  7528  38E9  3430               	retlw	48	;'0'
  7529  38EA  3400               	retlw	0
  7530                           
  7531                           	psect	stringtext15
  7532  38EB                     __pstringtext15:	
  7533  38EB                     STR_16:	
  7534  38EB  3420               	retlw	32	;' '
  7535  38EC  3420               	retlw	32	;' '
  7536  38ED  3420               	retlw	32	;' '
  7537  38EE  3463               	retlw	99	;'c'
  7538  38EF  342D               	retlw	45	;'-'
  7539  38F0  3469               	retlw	105	;'i'
  7540  38F1  3464               	retlw	100	;'d'
  7541  38F2  3439               	retlw	57	;'9'
  7542  38F3  3400               	retlw	0
  7543                           
  7544                           	psect	stringtext16
  7545  38F4                     __pstringtext16:	
  7546  38F4                     STR_7:	
  7547  38F4  3472               	retlw	114	;'r'
  7548  38F5  3465               	retlw	101	;'e'
  7549  38F6  3463               	retlw	99	;'c'
  7550  38F7  3468               	retlw	104	;'h'
  7551  38F8  3461               	retlw	97	;'a'
  7552  38F9  3472               	retlw	114	;'r'
  7553  38FA  3467               	retlw	103	;'g'
  7554  38FB  3465               	retlw	101	;'e'
  7555  38FC  3400               	retlw	0
  7556                           
  7557                           	psect	stringtext17
  7558  38FD                     __pstringtext17:	
  7559  38FD                     STR_18:	
  7560  38FD  3420               	retlw	32	;' '
  7561  38FE  3420               	retlw	32	;' '
  7562  38FF  3420               	retlw	32	;' '
  7563  3900  3420               	retlw	32	;' '
  7564  3901  3473               	retlw	115	;'s'
  7565  3902  346C               	retlw	108	;'l'
  7566  3903  342D               	retlw	45	;'-'
  7567  3904  3466               	retlw	102	;'f'
  7568  3905  3400               	retlw	0
  7569                           
  7570                           	psect	stringtext18
  7571  3906                     __pstringtext18:	
  7572  3906                     STR_17:	
  7573  3906  3420               	retlw	32	;' '
  7574  3907  3420               	retlw	32	;' '
  7575  3908  3420               	retlw	32	;' '
  7576  3909  3420               	retlw	32	;' '
  7577  390A  3473               	retlw	115	;'s'
  7578  390B  346C               	retlw	108	;'l'
  7579  390C  342D               	retlw	45	;'-'
  7580  390D  346C               	retlw	108	;'l'
  7581  390E  3400               	retlw	0
  7582                           
  7583                           	psect	stringtext19
  7584  3917                     __pstringtext19:	
  7585  3917                     STR_6:	
  7586  3917  3420               	retlw	32	;' '
  7587  3918  3420               	retlw	32	;' '
  7588  3919  3420               	retlw	32	;' '
  7589  391A  3463               	retlw	99	;'c'
  7590  391B  3475               	retlw	117	;'u'
  7591  391C  342D               	retlw	45	;'-'
  7592  391D  3400               	retlw	0
  7593                           
  7594                           	psect	stringtext20
  7595  391E                     __pstringtext20:	
  7596  391E                     STR_2:	
  7597  391E  3420               	retlw	32	;' '
  7598  391F  3463               	retlw	99	;'c'
  7599  3920  3473               	retlw	115	;'s'
  7600  3921  3437               	retlw	55	;'7'
  7601  3922  3430               	retlw	48	;'0'
  7602  3923  3430               	retlw	48	;'0'
  7603  3924  3400               	retlw	0
  7604                           
  7605                           	psect	stringtext21
  7606  392B                     __pstringtext21:	
  7607  392B                     STR_11:	
  7608  392B  3464               	retlw	100	;'d'
  7609  392C  3431               	retlw	49	;'1'
  7610  392D  3420               	retlw	32	;' '
  7611  392E  3420               	retlw	32	;' '
  7612  392F  3420               	retlw	32	;' '
  7613  3930  3400               	retlw	0
  7614                           
  7615                           	psect	stringtext22
  7616  3931                     __pstringtext22:	
  7617  3931                     STR_13:	
  7618  3931  3464               	retlw	100	;'d'
  7619  3932  3432               	retlw	50	;'2'
  7620  3933  3420               	retlw	32	;' '
  7621  3934  3420               	retlw	32	;' '
  7622  3935  3420               	retlw	32	;' '
  7623  3936  3400               	retlw	0
  7624                           
  7625                           	psect	stringtext23
  7626  3937                     __pstringtext23:	
  7627  3937                     STR_12:	
  7628  3937  3464               	retlw	100	;'d'
  7629  3938  3431               	retlw	49	;'1'
  7630  3939  3420               	retlw	32	;' '
  7631  393A  3420               	retlw	32	;' '
  7632  393B  342D               	retlw	45	;'-'
  7633  393C  3400               	retlw	0
  7634                           
  7635                           	psect	stringtext24
  7636  393D                     __pstringtext24:	
  7637  393D                     STR_14:	
  7638  393D  3464               	retlw	100	;'d'
  7639  393E  3432               	retlw	50	;'2'
  7640  393F  3420               	retlw	32	;' '
  7641  3940  3420               	retlw	32	;' '
  7642  3941  342D               	retlw	45	;'-'
  7643  3942  3400               	retlw	0
  7644                           
  7645                           	psect	stringtext25
  7646  3943                     __pstringtext25:	
  7647  3943                     STR_10:	
  7648  3943  3464               	retlw	100	;'d'
  7649  3944  3469               	retlw	105	;'i'
  7650  3945  3464               	retlw	100	;'d'
  7651  3946  342D               	retlw	45	;'-'
  7652  3947  3400               	retlw	0
  7653                           
  7654                           	psect	stringtext26
  7655  3948                     __pstringtext26:	
  7656  3948                     STR_23:	
  7657  3948  3470               	retlw	112	;'p'
  7658  3949  3473               	retlw	115	;'s'
  7659  394A  3464               	retlw	100	;'d'
  7660  394B  342D               	retlw	45	;'-'
  7661  394C  3400               	retlw	0
  7662                           
  7663                           	psect	stringtext27
  7664  394D                     __pstringtext27:	
  7665  394D                     STR_9:	
  7666  394D  3473               	retlw	115	;'s'
  7667  394E  346A               	retlw	106	;'j'
  7668  394F  342D               	retlw	45	;'-'
  7669  3950  3400               	retlw	0
  7670                           
  7671                           	psect	stringtext28
  7672  3951                     __pstringtext28:	
  7673  3951                     STR_5:	
  7674  3951  346C               	retlw	108	;'l'
  7675  3952  342D               	retlw	45	;'-'
  7676  3953  3400               	retlw	0
  7677                           
  7678                           	psect	stringtext29
  7679  0000                     __pstringtext29:	
  7680  3944                     
  7681                           ; #config settings
  7682  0000                     
  7683                           	psect	cinit
  7684  0039                     start_initialization:	
  7685  0039                     __initialization:		;BIGRAM
  7686                           
  7687                           ; Initialize objects allocated to BANK2
  7688  0039  30D2               	movlw	low __pidataBANK2
  7689  003A  0084               	movwf	4
  7690  003B  30BA               	movlw	(high __pidataBANK2)| (0+128)
  7691  003C  0085               	movwf	5
  7692  003D  3069               	movlw	low __pdataBANK2
  7693  003E  0086               	movwf	6
  7694  003F  3001               	movlw	high __pdataBANK2
  7695  0040  0087               	movwf	7
  7696  0041  3000               	movlw	0
  7697  0042  00FF               	movwf	btemp+1
  7698  0043  3004               	movlw	4
  7699  0044  31BB  2357  3180   	fcall	init_ram
  7700                           
  7701                           ; Initialize objects allocated to BANK3
  7702  0047  30F2               	movlw	low __pidataBANK3
  7703  0048  0084               	movwf	4
  7704  0049  30BA               	movlw	(high __pidataBANK3)| (0+128)
  7705  004A  0085               	movwf	5
  7706  004B  30C8               	movlw	low __pdataBANK3
  7707  004C  0086               	movwf	6
  7708  004D  3001               	movlw	high __pdataBANK3
  7709  004E  0087               	movwf	7
  7710  004F  3000               	movlw	0
  7711  0050  00FF               	movwf	btemp+1
  7712  0051  3006               	movlw	6
  7713  0052  31BB  2357  3180   	fcall	init_ram
  7714                           
  7715                           ; Initialize objects allocated to BANK4
  7716  0055  300D               	movlw	low __pidataBANK4
  7717  0056  0084               	movwf	4
  7718  0057  30A9               	movlw	(high __pidataBANK4)| (0+128)
  7719  0058  0085               	movwf	5
  7720  0059  3020               	movlw	low __pdataBANK4
  7721  005A  0086               	movwf	6
  7722  005B  3002               	movlw	high __pdataBANK4
  7723  005C  0087               	movwf	7
  7724  005D  3000               	movlw	0
  7725  005E  00FF               	movwf	btemp+1
  7726  005F  3048               	movlw	72
  7727  0060  31BB  2357  3180   	fcall	init_ram
  7728                           
  7729                           ; Clear objects allocated to BIGRAM
  7730  0063  3000               	movlw	low (0+8704)
  7731  0064  0084               	movwf	4
  7732  0065  3022               	movlw	high (0+8704)
  7733  0066  0085               	movwf	5
  7734  0067  30FC               	movlw	252
  7735  0068  00FE               	movwf	btemp
  7736  0069  3000               	movlw	0
  7737  006A  00FF               	movwf	btemp+1
  7738  006B  31BB  234B  3180   	fcall	clear_ram0
  7739                           
  7740                           ; Clear objects allocated to COMMON
  7741  006E  01F8               	clrf	__pbssCOMMON& (0+127)
  7742  006F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  7743  0070  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  7744                           
  7745                           ; Clear objects allocated to BANK1
  7746  0071  30A0               	movlw	low __pbssBANK1
  7747  0072  0084               	movwf	4
  7748  0073  3000               	movlw	high __pbssBANK1
  7749  0074  0085               	movwf	5
  7750  0075  302B               	movlw	43
  7751  0076  00FE               	movwf	btemp
  7752  0077  3000               	movlw	0
  7753  0078  00FF               	movwf	btemp+1
  7754  0079  31BB  234B  3180   	fcall	clear_ram0
  7755                           
  7756                           ; Clear objects allocated to BANK2
  7757  007C  3020               	movlw	low __pbssBANK2
  7758  007D  0084               	movwf	4
  7759  007E  3001               	movlw	high __pbssBANK2
  7760  007F  0085               	movwf	5
  7761  0080  3049               	movlw	73
  7762  0081  00FE               	movwf	btemp
  7763  0082  3000               	movlw	0
  7764  0083  00FF               	movwf	btemp+1
  7765  0084  31BB  234B  3180   	fcall	clear_ram0
  7766                           
  7767                           ; Clear objects allocated to BANK3
  7768  0087  30A0               	movlw	low __pbssBANK3
  7769  0088  0084               	movwf	4
  7770  0089  3001               	movlw	high __pbssBANK3
  7771  008A  0085               	movwf	5
  7772  008B  3028               	movlw	40
  7773  008C  00FE               	movwf	btemp
  7774  008D  3000               	movlw	0
  7775  008E  00FF               	movwf	btemp+1
  7776  008F  31BB  234B  3180   	fcall	clear_ram0
  7777                           
  7778                           ; Clear objects allocated to BANK5
  7779  0092  30A0               	movlw	low __pbssBANK5
  7780  0093  0084               	movwf	4
  7781  0094  3002               	movlw	high __pbssBANK5
  7782  0095  0085               	movwf	5
  7783  0096  3028               	movlw	40
  7784  0097  00FE               	movwf	btemp
  7785  0098  3000               	movlw	0
  7786  0099  00FF               	movwf	btemp+1
  7787  009A  31BB  234B         	fcall	clear_ram0
  7788  009C                     end_of_initialization:	
  7789                           ;End of C runtime variable initialization code
  7790                           
  7791  009C                     __end_of__initialization:	
  7792  009C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7793  009D  0020               	movlb	0
  7794  009E  319A  2AB9         	ljmp	_main	;jump to C main() function
  7795                           
  7796                           	psect	bssCOMMON
  7797  0078                     __pbssCOMMON:	
  7798  0078                     ___t16:	
  7799  0078                     	ds	2
  7800  007A                     _valveStatus:	
  7801  007A                     	ds	1
  7802                           
  7803                           	psect	bssBANK1
  7804  00A0                     __pbssBANK1:	
  7805  00A0                     _rtVolume_L:	
  7806  00A0                     	ds	4
  7807  00A4                     _fl_t32:	
  7808  00A4                     	ds	4
  7809  00A8                     _rtBalanceMoney:	
  7810  00A8                     	ds	4
  7811  00AC                     ___q31:	
  7812  00AC                     	ds	4
  7813  00B0                     _rtVolume_m3:	
  7814  00B0                     	ds	4
  7815  00B4                     ___t32:	
  7816  00B4                     	ds	4
  7817  00B8                     _adcAverageValue:	
  7818  00B8                     	ds	2
  7819  00BA                     ___q15:	
  7820  00BA                     	ds	2
  7821  00BC                     _flow:	
  7822  00BC                     	ds	2
  7823  00BE                     _piccResult:	
  7824  00BE                     	ds	1
  7825  00BF                     _adcSamplingTimes:	
  7826  00BF                     	ds	1
  7827  00C0                     _deviceStatus:	
  7828  00C0                     	ds	1
  7829  00C1                     _KeyValue:	
  7830  00C1                     	ds	1
  7831  00C2                     _bkupMenu:	
  7832  00C2                     	ds	1
  7833  00C3                     _menu:	
  7834  00C3                     	ds	1
  7835  00C4                     _opReason:	
  7836  00C4                     	ds	1
  7837  00C5                     _calibLocation:	
  7838  00C5                     	ds	1
  7839  00C6                     _flowError:	
  7840  00C6                     	ds	1
  7841  00C7                     _sendCount:	
  7842  00C7                     	ds	1
  7843  00C8                     _Event:	
  7844  00C8                     	ds	1
  7845  00C9                     _rdLen:	
  7846  00C9                     	ds	1
  7847  00CA                     ___t8:	
  7848  00CA                     	ds	1
  7849                           
  7850                           	psect	bssBANK2
  7851  0120                     __pbssBANK2:	
  7852  0120                     _tmTemp16:	
  7853  0120                     	ds	2
  7854  0122                     _adcvalue:	
  7855  0122                     	ds	2
  7856  0124                     _fl_t16:	
  7857  0124                     	ds	2
  7858  0126                     _adcSamplingTimerOneTime:	
  7859  0126                     	ds	2
  7860  0128                     _adcSamplingTimer:	
  7861  0128                     	ds	2
  7862  012A                     _password:	
  7863  012A                     	ds	2
  7864  012C                     _uart1ReceivedCount:	
  7865  012C                     	ds	2
  7866  012E                     _uart1ReceivedTimeout:	
  7867  012E                     	ds	2
  7868  0130                     _globlTickerms:	
  7869  0130                     	ds	2
  7870  0132                     _systemTikerms:	
  7871  0132                     	ds	2
  7872  0134                     _firstPowerDown:	
  7873  0134                     	ds	1
  7874  0135                     _pcdPwrOn:	
  7875  0135                     	ds	1
  7876  0136                     _hour:	
  7877  0136                     	ds	1
  7878  0137                     _min:	
  7879  0137                     	ds	1
  7880  0138                     _valveTimer:	
  7881  0138                     	ds	1
  7882  0139                     _CardError:	
  7883  0139                     	ds	1
  7884  013A                     _warningStatus:	
  7885  013A                     	ds	1
  7886  013B                     _smallFlowNotCare:	
  7887  013B                     	ds	1
  7888  013C                     _fl_t8:	
  7889  013C                     	ds	1
  7890  013D                     _flowCalibrationLocation:	
  7891  013D                     	ds	1
  7892  013E                     ___q7:	
  7893  013E                     	ds	1
  7894  013F                     _sec:	
  7895  013F                     	ds	1
  7896  0140                     _uart1ReceivedTimer:	
  7897  0140                     	ds	1
  7898  0141                     _calVolumeTimeSec:	
  7899  0141                     	ds	1
  7900  0142                     _systemTickerSec:	
  7901  0142                     	ds	1
  7902  0143                     _flashOpStr:	
  7903  0143                     	ds	21
  7904  0158                     _lcdBuf:	
  7905  0158                     	ds	9
  7906  0161                     _uiAdjbuf:	
  7907  0161                     	ds	8
  7908                           
  7909                           	psect	dataBANK2
  7910  0169                     __pdataBANK2:	
  7911  0169                     _pLcdReg:	
  7912  0169                     	ds	2
  7913  016B                     _flowCalibrationPointSingle:	
  7914  016B                     	ds	1
  7915  016C                     _noKeyEventTimeOut:	
  7916  016C                     	ds	1
  7917                           
  7918                           	psect	bssBANK3
  7919  01A0                     __pbssBANK3:	
  7920  01A0                     _findCardTimer:	
  7921  01A0                     	ds	2
  7922  01A2                     _calVolumeTs:	
  7923  01A2                     	ds	2
  7924  01A4                     _pLCD:	
  7925  01A4                     	ds	24
  7926  01BC                     _PiccUid:	
  7927  01BC                     	ds	12
  7928                           
  7929                           	psect	dataBANK3
  7930  01C8                     __pdataBANK3:	
  7931  01C8                     _userKeyB:	
  7932  01C8                     	ds	6
  7933                           
  7934                           	psect	dataBANK4
  7935  0220                     __pdataBANK4:	
  7936  0220                     _mainSystemData:	
  7937  0220                     	ds	72
  7938                           
  7939                           	psect	bssBANK5
  7940  02A0                     __pbssBANK5:	
  7941  02A0                     _adcSamplingBuffer:	
  7942  02A0                     	ds	40
  7943                           
  7944                           	psect	inittext
  7945  3B57                     init_ram:	
  7946  3B57  00FE               	movwf	126
  7947  3B58                     initloop:	
  7948  3B58  0012               	moviw fsr0++
  7949  3B59  001E               	movwi fsr1++
  7950  3B5A  3001               	movlw	1
  7951  3B5B  02FE               	subwf	126,f
  7952  3B5C  3000               	movlw	0
  7953  3B5D  3BFF               	subwfb	127,f
  7954  3B5E  087F               	movf	127,w
  7955  3B5F  047E               	iorwf	126,w
  7956  3B60  1903               	btfsc	3,2
  7957  3B61  3400               	retlw	0
  7958  3B62  2B58               	goto	initloop
  7959                           
  7960                           	psect	clrtext
  7961  3B4B                     clear_ram0:	
  7962                           ;	Called with FSR0 containing the base address, and
  7963                           ;	btemp/btemp+1 has the size to clear
  7964                           
  7965  3B4B  0064               	clrwdt	;clear the watchdog before getting into this loop
  7966  3B4C                     clrloop0:	
  7967  3B4C  0180               	clrf	0	;clear RAM location pointed to by FSR
  7968  3B4D  3101               	addfsr 0,1
  7969  3B4E  3001               	movlw	1
  7970  3B4F  02FE               	subwf	126,f
  7971  3B50  3000               	movlw	0
  7972  3B51  3BFF               	subwfb	127,f
  7973  3B52  087F               	movf	127,w
  7974  3B53  047E               	iorwf	126,w
  7975  3B54  1903               	btfsc	3,2
  7976  3B55  3400               	retlw	0	;all done for this memory range, return
  7977  3B56  2B4C               	goto	clrloop0	;have we reached the end yet?
  7978                           
  7979                           	psect	cstackBANK3
  7980  01D2                     __pcstackBANK3:	
  7981  01D2                     rfid_comm_process@ret:	
  7982                           
  7983                           ; 1 bytes @ 0x0
  7984  01D2                     	ds	1
  7985  01D3                     ??_main:	
  7986                           
  7987                           ; 1 bytes @ 0x1
  7988  01D3                     	ds	1
  7989  01D4                     main@tm:	
  7990                           
  7991                           ; 1 bytes @ 0x2
  7992  01D4                     	ds	1
  7993                           
  7994                           	psect	cstackBANK1
  7995  00CB                     __pcstackBANK1:	
  7996  00CB                     mifare_write@blockAddr:	
  7997  00CB                     _picc_select$3248:	
  7998                           ; 1 bytes @ 0x0
  7999                           
  8000                           
  8001                           ; 2 bytes @ 0x0
  8002  00CB                     	ds	1
  8003  00CC                     mifare_write@cmdBuffer:	
  8004                           
  8005                           ; 2 bytes @ 0x1
  8006  00CC                     	ds	1
  8007  00CD                     _picc_select$3251:	
  8008                           
  8009                           ; 2 bytes @ 0x2
  8010  00CD                     	ds	1
  8011  00CE                     mifare_write@result:	
  8012                           
  8013                           ; 1 bytes @ 0x3
  8014  00CE                     	ds	1
  8015  00CF                     ??_rfid_comm_process_read_header:	
  8016  00CF                     ??_rfid_comm_process_recharge:	
  8017                           ; 1 bytes @ 0x4
  8018                           
  8019  00CF                     _picc_select$3252:	
  8020                           ; 1 bytes @ 0x4
  8021                           
  8022                           
  8023                           ; 2 bytes @ 0x4
  8024  00CF                     	ds	2
  8025  00D1                     picc_select@uidComplete:	
  8026                           
  8027                           ; 1 bytes @ 0x6
  8028  00D1                     	ds	1
  8029  00D2                     picc_select@selectDone:	
  8030                           
  8031                           ; 1 bytes @ 0x7
  8032  00D2                     	ds	1
  8033  00D3                     picc_select@bufferUsed:	
  8034                           
  8035                           ; 1 bytes @ 0x8
  8036  00D3                     	ds	1
  8037  00D4                     _picc_select$3244:	
  8038                           
  8039                           ; 1 bytes @ 0x9
  8040  00D4                     	ds	1
  8041  00D5                     _picc_select$3245:	
  8042                           
  8043                           ; 1 bytes @ 0xA
  8044  00D5                     	ds	1
  8045  00D6                     picc_select@rxAlign:	
  8046                           
  8047                           ; 1 bytes @ 0xB
  8048  00D6                     	ds	1
  8049  00D7                     picc_select@maxBytes:	
  8050                           
  8051                           ; 1 bytes @ 0xC
  8052  00D7                     	ds	1
  8053  00D8                     picc_select@valueOfCollReg:	
  8054                           
  8055                           ; 1 bytes @ 0xD
  8056  00D8                     	ds	1
  8057  00D9                     picc_select@buffer:	
  8058                           
  8059                           ; 9 bytes @ 0xE
  8060  00D9                     	ds	9
  8061  00E2                     picc_select@collisionPos:	
  8062                           
  8063                           ; 1 bytes @ 0x17
  8064  00E2                     	ds	1
  8065  00E3                     picc_select@useCascadeTag:	
  8066                           
  8067                           ; 1 bytes @ 0x18
  8068  00E3                     	ds	1
  8069  00E4                     picc_select@cascadeLevel:	
  8070                           
  8071                           ; 1 bytes @ 0x19
  8072  00E4                     	ds	1
  8073  00E5                     picc_select@uidIndex:	
  8074                           
  8075                           ; 1 bytes @ 0x1A
  8076  00E5                     	ds	1
  8077  00E6                     picc_select@bytesToCopy:	
  8078                           
  8079                           ; 1 bytes @ 0x1B
  8080  00E6                     	ds	1
  8081  00E7                     picc_select@responseLength:	
  8082                           
  8083                           ; 1 bytes @ 0x1C
  8084  00E7                     	ds	1
  8085  00E8                     picc_select@responseBuffer:	
  8086                           
  8087                           ; 1 bytes @ 0x1D
  8088  00E8                     	ds	1
  8089  00E9                     picc_select@uid:	
  8090                           
  8091                           ; 1 bytes @ 0x1E
  8092  00E9                     	ds	1
  8093  00EA                     picc_select@txLastBits:	
  8094                           
  8095                           ; 1 bytes @ 0x1F
  8096  00EA                     	ds	1
  8097  00EB                     picc_select@result:	
  8098                           
  8099                           ; 1 bytes @ 0x20
  8100  00EB                     	ds	1
  8101  00EC                     picc_select@count:	
  8102                           
  8103                           ; 1 bytes @ 0x21
  8104  00EC                     	ds	1
  8105  00ED                     picc_select@index:	
  8106                           
  8107                           ; 1 bytes @ 0x22
  8108  00ED                     	ds	1
  8109  00EE                     picc_select@currentLevelKnownBits:	
  8110                           
  8111                           ; 1 bytes @ 0x23
  8112  00EE                     	ds	1
  8113  00EF                     ??_rfid_comm_process:	
  8114                           
  8115                           ; 1 bytes @ 0x24
  8116  00EF                     	ds	1
  8117                           
  8118                           	psect	cstackCOMMON
  8119  0070                     __pcstackCOMMON:	
  8120  0070                     ?_PIN_MANAGER_Initialize:	
  8121  0070                     ?_OSCILLATOR_Initialize:	
  8122                           ; 1 bytes @ 0x0
  8123                           
  8124  0070                     ?_WDT_Initialize:	
  8125                           ; 1 bytes @ 0x0
  8126                           
  8127  0070                     ?_TMR1_Initialize:	
  8128                           ; 1 bytes @ 0x0
  8129                           
  8130  0070                     ?_TMR0_Initialize:	
  8131                           ; 1 bytes @ 0x0
  8132                           
  8133  0070                     ?_EUSART1_Initialize:	
  8134                           ; 1 bytes @ 0x0
  8135                           
  8136  0070                     ?_TMR1_StartTimer:	
  8137                           ; 1 bytes @ 0x0
  8138                           
  8139  0070                     ?_TMR0_ISR:	
  8140                           ; 1 bytes @ 0x0
  8141                           
  8142  0070                     ??_TMR0_ISR:	
  8143                           ; 1 bytes @ 0x0
  8144                           
  8145  0070                     ?_EUSART1_Transmit_ISR:	
  8146                           ; 1 bytes @ 0x0
  8147                           
  8148  0070                     ??_EUSART1_Transmit_ISR:	
  8149                           ; 1 bytes @ 0x0
  8150                           
  8151  0070                     ?_EUSART1_Receive_ISR:	
  8152                           ; 1 bytes @ 0x0
  8153                           
  8154  0070                     ??_EUSART1_Receive_ISR:	
  8155                           ; 1 bytes @ 0x0
  8156                           
  8157  0070                     ?_lcd_clear_buffer:	
  8158                           ; 1 bytes @ 0x0
  8159                           
  8160  0070                     ?_lcd_disp_all:	
  8161                           ; 1 bytes @ 0x0
  8162                           
  8163  0070                     ?_lcd_disp_cln:	
  8164                           ; 1 bytes @ 0x0
  8165                           
  8166  0070                     ?_lcd_disp_refresh:	
  8167                           ; 1 bytes @ 0x0
  8168                           
  8169  0070                     ?_key_scan_call:	
  8170                           ; 1 bytes @ 0x0
  8171                           
  8172  0070                     ?_data_api_rt_data_save:	
  8173                           ; 1 bytes @ 0x0
  8174                           
  8175  0070                     ?_valve_off:	
  8176                           ; 1 bytes @ 0x0
  8177                           
  8178  0070                     ?_valve_on:	
  8179                           ; 1 bytes @ 0x0
  8180                           
  8181  0070                     ?_mfapi_is_new_card_present:	
  8182                           ; 1 bytes @ 0x0
  8183                           
  8184  0070                     ?_picc_halt_a:	
  8185                           ; 1 bytes @ 0x0
  8186                           
  8187  0070                     ?_picc_stop_cryptol:	
  8188                           ; 1 bytes @ 0x0
  8189                           
  8190  0070                     ?_mfrc522_hal_init:	
  8191                           ; 1 bytes @ 0x0
  8192                           
  8193  0070                     ?_mfrc522_bal_read_reg:	
  8194                           ; 1 bytes @ 0x0
  8195                           
  8196  0070                     ?_mfrc522_hal_reset_sf:	
  8197                           ; 1 bytes @ 0x0
  8198                           
  8199  0070                     ?_mfrc522_hal_set_antenna_gain:	
  8200                           ; 1 bytes @ 0x0
  8201                           
  8202  0070                     ?_mfrc522_hal_antenna_on:	
  8203                           ; 1 bytes @ 0x0
  8204                           
  8205  0070                     ?_SYSTEM_Initialize:	
  8206                           ; 1 bytes @ 0x0
  8207                           
  8208  0070                     ?_TMR1_ISR:	
  8209                           ; 1 bytes @ 0x0
  8210                           
  8211  0070                     ??_TMR1_ISR:	
  8212                           ; 1 bytes @ 0x0
  8213                           
  8214  0070                     ?_INTERRUPT_InterruptManager:	
  8215                           ; 1 bytes @ 0x0
  8216                           
  8217  0070                     ?_DATAEE_ReadByte:	
  8218                           ; 1 bytes @ 0x0
  8219                           
  8220  0070                     ?_my_uart1_received_ready:	
  8221                           ; 1 bytes @ 0x0
  8222                           
  8223  0070                     ?_ui_start_display:	
  8224                           ; 1 bytes @ 0x0
  8225                           
  8226  0070                     ?_ui_disp_flow_error:	
  8227                           ; 1 bytes @ 0x0
  8228                           
  8229  0070                     ?_ui_disp_flow:	
  8230                           ; 1 bytes @ 0x0
  8231                           
  8232  0070                     ?_ui_disp_totale_v:	
  8233                           ; 1 bytes @ 0x0
  8234                           
  8235  0070                     ?_ui_disp_transfer_money:	
  8236                           ; 1 bytes @ 0x0
  8237                           
  8238  0070                     ?_ui_disp_balance_and_volume:	
  8239                           ; 1 bytes @ 0x0
  8240                           
  8241  0070                     ?_ui_disp_clear_totale:	
  8242                           ; 1 bytes @ 0x0
  8243                           
  8244  0070                     ?_ui_disp_clear_balance:	
  8245                           ; 1 bytes @ 0x0
  8246                           
  8247  0070                     ?_ui_disp_set_line:	
  8248                           ; 1 bytes @ 0x0
  8249                           
  8250  0070                     ?_ui_disp_small_flow_how_care:	
  8251                           ; 1 bytes @ 0x0
  8252                           
  8253  0070                     ?_ui_disp_modbus_id:	
  8254                           ; 1 bytes @ 0x0
  8255                           
  8256  0070                     ?_ui_disp_set_price:	
  8257                           ; 1 bytes @ 0x0
  8258                           
  8259  0070                     ?_ui_disp_set_transferMoneyLimit:	
  8260                           ; 1 bytes @ 0x0
  8261                           
  8262  0070                     ?_ui_disp_set_device_id:	
  8263                           ; 1 bytes @ 0x0
  8264                           
  8265  0070                     ?_ui_disp_set_balanceWarning:	
  8266                           ; 1 bytes @ 0x0
  8267                           
  8268  0070                     ?_ui_disp_set_balanceOff:	
  8269                           ; 1 bytes @ 0x0
  8270                           
  8271  0070                     ?_ui_disp_set_calib:	
  8272                           ; 1 bytes @ 0x0
  8273                           
  8274  0070                     ?_ui_disp_set_imd_flow_uint:	
  8275                           ; 1 bytes @ 0x0
  8276                           
  8277  0070                     ?_ui_disp_menu:	
  8278                           ; 1 bytes @ 0x0
  8279                           
  8280  0070                     ?_ui_key_process_up_down_main:	
  8281                           ; 1 bytes @ 0x0
  8282                           
  8283  0070                     ?_ui_key_process_down:	
  8284                           ; 1 bytes @ 0x0
  8285                           
  8286  0070                     ?_ui_key_process_up_down:	
  8287                           ; 1 bytes @ 0x0
  8288                           
  8289  0070                     ?_ui_key_process_enter:	
  8290                           ; 1 bytes @ 0x0
  8291                           
  8292  0070                     ?_ui_key_process_cancel:	
  8293                           ; 1 bytes @ 0x0
  8294                           
  8295  0070                     ?_ui_key_set_process:	
  8296                           ; 1 bytes @ 0x0
  8297                           
  8298  0070                     ?_ui_key_process:	
  8299                           ; 1 bytes @ 0x0
  8300                           
  8301  0070                     ?_modbus_response_write_single_register:	
  8302                           ; 1 bytes @ 0x0
  8303                           
  8304  0070                     ?_modbus_response_command:	
  8305                           ; 1 bytes @ 0x0
  8306                           
  8307  0070                     ?_modbus_response_write_clib_data:	
  8308                           ; 1 bytes @ 0x0
  8309                           
  8310  0070                     ?_modbus_response_read_clib_data:	
  8311                           ; 1 bytes @ 0x0
  8312                           
  8313  0070                     ?_data_api_system_data_get:	
  8314                           ; 1 bytes @ 0x0
  8315                           
  8316  0070                     ?_data_api_calibration_table_data_init:	
  8317                           ; 1 bytes @ 0x0
  8318                           
  8319  0070                     ?_data_api_system_data_init:	
  8320                           ; 1 bytes @ 0x0
  8321                           
  8322  0070                     ?_data_api_flash_process:	
  8323                           ; 1 bytes @ 0x0
  8324                           
  8325  0070                     ?_in_app_vavle_off:	
  8326                           ; 1 bytes @ 0x0
  8327                           
  8328  0070                     ?_in_app_vavle_on:	
  8329                           ; 1 bytes @ 0x0
  8330                           
  8331  0070                     ?_app_flow_rt_volume_cal_ex:	
  8332                           ; 1 bytes @ 0x0
  8333                           
  8334  0070                     ?_app_flow_rt_balance_money_cal:	
  8335                           ; 1 bytes @ 0x0
  8336                           
  8337  0070                     ?_app_flow_money_warning:	
  8338                           ; 1 bytes @ 0x0
  8339                           
  8340  0070                     ?_app_flow_money_off:	
  8341                           ; 1 bytes @ 0x0
  8342                           
  8343  0070                     ?_flow_sampling_process:	
  8344                           ; 1 bytes @ 0x0
  8345                           
  8346  0070                     ?_rfid_comm_process_read_header:	
  8347                           ; 1 bytes @ 0x0
  8348                           
  8349  0070                     ?_rfid_comm_process_read_inc:	
  8350                           ; 1 bytes @ 0x0
  8351                           
  8352  0070                     ?_rfid_comm_process_read_dec:	
  8353                           ; 1 bytes @ 0x0
  8354                           
  8355  0070                     ?_rfid_comm_process_recharge:	
  8356                           ; 1 bytes @ 0x0
  8357                           
  8358  0070                     ?_rfid_comm_process:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_lcd_disp_code_0:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_lcd_disp_code_1:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_lcd_disp_code_2:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_lcd_disp_code_3:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_lcd_disp_code_4:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ?_lcd_disp_code_5:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_lcd_disp_code_6:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ?_lcd_disp_code_7:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ?_lcd_config:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_lcd_init:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ?_led_port_init:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_iic_start:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ?_iic_stop:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_iic_send_ack:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ?_iic_waite_ack:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_iic_send_byte:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ?_iic_received_byte:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_iic_received_byte_if_ack:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_other_gpio_port_init:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_valve_stop:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_timer0_irq_callback:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_timer1_irq_callback:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_mfapi_pcd_init:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_mfrc522_bal_write_read_via_spi:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_mfrc522_hal_get_antenna_gain:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_m_system_init:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ?_event_power_monitor:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_event_door_monitor:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ?_main:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448                           
  8449                           ; 1 bytes @ 0x0
  8450  0070                     	ds	1
  8451  0071                     EUSART1_Receive_ISR@t8:	
  8452                           
  8453                           ; 1 bytes @ 0x1
  8454  0071                     	ds	1
  8455  0072                     ??_INTERRUPT_InterruptManager:	
  8456                           
  8457                           ; 1 bytes @ 0x2
  8458  0072                     	ds	1
  8459  0073                     ??_PIN_MANAGER_Initialize:	
  8460  0073                     ??_OSCILLATOR_Initialize:	
  8461                           ; 1 bytes @ 0x3
  8462                           
  8463  0073                     ??_WDT_Initialize:	
  8464                           ; 1 bytes @ 0x3
  8465                           
  8466  0073                     ??_EUSART1_Initialize:	
  8467                           ; 1 bytes @ 0x3
  8468                           
  8469  0073                     ?_TMR1_SetInterruptHandler:	
  8470                           ; 1 bytes @ 0x3
  8471                           
  8472  0073                     ??_TMR1_StartTimer:	
  8473                           ; 1 bytes @ 0x3
  8474                           
  8475  0073                     ?_TMR0_SetInterruptHandler:	
  8476                           ; 1 bytes @ 0x3
  8477                           
  8478  0073                     ?_m_mem_set:	
  8479                           ; 1 bytes @ 0x3
  8480                           
  8481  0073                     ??_lcd_disp_all:	
  8482                           ; 1 bytes @ 0x3
  8483                           
  8484  0073                     ?_set_globle_ticker:	
  8485                           ; 1 bytes @ 0x3
  8486                           
  8487  0073                     ?_m_mem_cpy_len:	
  8488                           ; 1 bytes @ 0x3
  8489                           
  8490  0073                     ??_valve_off:	
  8491                           ; 1 bytes @ 0x3
  8492                           
  8493  0073                     ??_valve_on:	
  8494                           ; 1 bytes @ 0x3
  8495                           
  8496  0073                     ?_delay:	
  8497                           ; 1 bytes @ 0x3
  8498                           
  8499  0073                     ?_DATAEE_WriteByte:	
  8500                           ; 1 bytes @ 0x3
  8501                           
  8502  0073                     ??_DATAEE_ReadByte:	
  8503                           ; 1 bytes @ 0x3
  8504                           
  8505  0073                     ?_my_uart1_send_poll:	
  8506                           ; 1 bytes @ 0x3
  8507                           
  8508  0073                     ??_my_uart1_received_ready:	
  8509                           ; 1 bytes @ 0x3
  8510                           
  8511  0073                     ?_ui_head_hide:	
  8512                           ; 1 bytes @ 0x3
  8513                           
  8514  0073                     ?_ui_mem_cpy:	
  8515                           ; 1 bytes @ 0x3
  8516                           
  8517  0073                     ??_ui_key_process_up_down_main:	
  8518                           ; 1 bytes @ 0x3
  8519                           
  8520  0073                     ??_data_api_system_data_get:	
  8521                           ; 1 bytes @ 0x3
  8522                           
  8523  0073                     ?_app_flow_lookup:	
  8524                           ; 1 bytes @ 0x3
  8525                           
  8526  0073                     ??_app_flow_money_warning:	
  8527                           ; 1 bytes @ 0x3
  8528                           
  8529  0073                     ?_create_card_key_b:	
  8530                           ; 1 bytes @ 0x3
  8531                           
  8532  0073                     ??_lcd_disp_code_0:	
  8533                           ; 1 bytes @ 0x3
  8534                           
  8535  0073                     ??_lcd_disp_code_1:	
  8536                           ; 1 bytes @ 0x3
  8537                           
  8538  0073                     ??_lcd_disp_code_2:	
  8539                           ; 1 bytes @ 0x3
  8540                           
  8541  0073                     ??_lcd_disp_code_3:	
  8542                           ; 1 bytes @ 0x3
  8543                           
  8544  0073                     ??_lcd_disp_code_4:	
  8545                           ; 1 bytes @ 0x3
  8546                           
  8547  0073                     ??_lcd_disp_code_5:	
  8548                           ; 1 bytes @ 0x3
  8549                           
  8550  0073                     ??_lcd_disp_code_6:	
  8551                           ; 1 bytes @ 0x3
  8552                           
  8553  0073                     ??_lcd_disp_code_7:	
  8554                           ; 1 bytes @ 0x3
  8555                           
  8556  0073                     ??_led_port_init:	
  8557                           ; 1 bytes @ 0x3
  8558                           
  8559  0073                     ??_iic_send_ack:	
  8560                           ; 1 bytes @ 0x3
  8561                           
  8562  0073                     ??_iic_received_byte:	
  8563                           ; 1 bytes @ 0x3
  8564                           
  8565  0073                     ??_other_gpio_port_init:	
  8566                           ; 1 bytes @ 0x3
  8567                           
  8568  0073                     ??_valve_stop:	
  8569                           ; 1 bytes @ 0x3
  8570                           
  8571  0073                     ??_timer0_irq_callback:	
  8572                           ; 1 bytes @ 0x3
  8573                           
  8574  0073                     ??_mfrc522_bal_write_read_via_spi:	
  8575                           ; 1 bytes @ 0x3
  8576                           
  8577  0073                     ??_event_power_monitor:	
  8578                           ; 1 bytes @ 0x3
  8579                           
  8580  0073                     ??_event_door_monitor:	
  8581                           ; 1 bytes @ 0x3
  8582                           
  8583  0073                     ??___lmul:	
  8584                           ; 1 bytes @ 0x3
  8585                           
  8586  0073                     ??___aldiv:	
  8587                           ; 1 bytes @ 0x3
  8588                           
  8589  0073                     ??___almod:	
  8590                           ; 1 bytes @ 0x3
  8591                           
  8592  0073                     ?___lbmod:	
  8593                           ; 1 bytes @ 0x3
  8594                           
  8595  0073                     ??___llmod:	
  8596                           ; 1 bytes @ 0x3
  8597                           
  8598  0073                     ?_get_globle_ticker:	
  8599                           ; 1 bytes @ 0x3
  8600                           
  8601  0073                     ?_crc_sum:	
  8602                           ; 2 bytes @ 0x3
  8603                           
  8604  0073                     ?___wmul:	
  8605                           ; 2 bytes @ 0x3
  8606                           
  8607  0073                     ?___awdiv:	
  8608                           ; 2 bytes @ 0x3
  8609                           
  8610  0073                     ?___awmod:	
  8611                           ; 2 bytes @ 0x3
  8612                           
  8613  0073                     ?___lwdiv:	
  8614                           ; 2 bytes @ 0x3
  8615                           
  8616  0073                     ?___lwmod:	
  8617                           ; 2 bytes @ 0x3
  8618                           
  8619  0073                     DATAEE_WriteByte@bData:	
  8620                           ; 2 bytes @ 0x3
  8621                           
  8622  0073                     DATAEE_ReadByte@bAdd:	
  8623                           ; 1 bytes @ 0x3
  8624                           
  8625  0073                     my_uart1_send_poll@len:	
  8626                           ; 1 bytes @ 0x3
  8627                           
  8628  0073                     ui_head_hide@loc:	
  8629                           ; 1 bytes @ 0x3
  8630                           
  8631  0073                     create_card_key_b@uid:	
  8632                           ; 1 bytes @ 0x3
  8633                           
  8634  0073                     iic_send_ack@ack:	
  8635                           ; 1 bytes @ 0x3
  8636                           
  8637  0073                     ___lbmod@divisor:	
  8638                           ; 1 bytes @ 0x3
  8639                           
  8640  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  8641                           ; 1 bytes @ 0x3
  8642                           
  8643  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  8644                           ; 2 bytes @ 0x3
  8645                           
  8646  0073                     ui_mem_cpy@s:	
  8647                           ; 2 bytes @ 0x3
  8648                           
  8649  0073                     app_flow_lookup@adcValue:	
  8650                           ; 2 bytes @ 0x3
  8651                           
  8652  0073                     delay@t:	
  8653                           ; 2 bytes @ 0x3
  8654                           
  8655  0073                     m_mem_set@buf:	
  8656                           ; 2 bytes @ 0x3
  8657                           
  8658  0073                     m_mem_cpy_len@d:	
  8659                           ; 2 bytes @ 0x3
  8660                           
  8661  0073                     set_globle_ticker@tk:	
  8662                           ; 2 bytes @ 0x3
  8663                           
  8664  0073                     crc_sum@buf:	
  8665                           ; 2 bytes @ 0x3
  8666                           
  8667  0073                     ___wmul@multiplier:	
  8668                           ; 2 bytes @ 0x3
  8669                           
  8670  0073                     ___awdiv@divisor:	
  8671                           ; 2 bytes @ 0x3
  8672                           
  8673  0073                     ___awmod@divisor:	
  8674                           ; 2 bytes @ 0x3
  8675                           
  8676  0073                     ___lwdiv@divisor:	
  8677                           ; 2 bytes @ 0x3
  8678                           
  8679  0073                     ___lwmod@divisor:	
  8680                           ; 2 bytes @ 0x3
  8681                           
  8682  0073                     ___lmul@product:	
  8683                           ; 2 bytes @ 0x3
  8684                           
  8685                           
  8686                           ; 4 bytes @ 0x3
  8687  0073                     	ds	1
  8688  0074                     ?_data_api_read_eeprom:	
  8689  0074                     ??_DATAEE_WriteByte:	
  8690                           ; 1 bytes @ 0x4
  8691                           
  8692  0074                     ??_my_uart1_send_poll:	
  8693                           ; 1 bytes @ 0x4
  8694                           
  8695  0074                     ??_ui_head_hide:	
  8696                           ; 1 bytes @ 0x4
  8697                           
  8698  0074                     ??_in_app_vavle_off:	
  8699                           ; 1 bytes @ 0x4
  8700                           
  8701  0074                     ??_in_app_vavle_on:	
  8702                           ; 1 bytes @ 0x4
  8703                           
  8704  0074                     ??_timer1_irq_callback:	
  8705                           ; 1 bytes @ 0x4
  8706                           
  8707  0074                     ??___lbmod:	
  8708                           ; 1 bytes @ 0x4
  8709                           
  8710  0074                     DATAEE_WriteByte@bAdd:	
  8711                           ; 1 bytes @ 0x4
  8712                           
  8713  0074                     ui_key_process_up_down_main@up:	
  8714                           ; 1 bytes @ 0x4
  8715                           
  8716  0074                     create_card_key_b@cckey:	
  8717                           ; 1 bytes @ 0x4
  8718                           
  8719  0074                     lcd_disp_code_0@code:	
  8720                           ; 1 bytes @ 0x4
  8721                           
  8722  0074                     lcd_disp_code_1@code:	
  8723                           ; 1 bytes @ 0x4
  8724                           
  8725  0074                     lcd_disp_code_2@code:	
  8726                           ; 1 bytes @ 0x4
  8727                           
  8728  0074                     lcd_disp_code_3@code:	
  8729                           ; 1 bytes @ 0x4
  8730                           
  8731  0074                     lcd_disp_code_4@code:	
  8732                           ; 1 bytes @ 0x4
  8733                           
  8734  0074                     lcd_disp_code_5@code:	
  8735                           ; 1 bytes @ 0x4
  8736                           
  8737  0074                     lcd_disp_code_6@code:	
  8738                           ; 1 bytes @ 0x4
  8739                           
  8740  0074                     lcd_disp_code_7@code:	
  8741                           ; 1 bytes @ 0x4
  8742                           
  8743  0074                     iic_received_byte@ret:	
  8744                           ; 1 bytes @ 0x4
  8745                           
  8746  0074                     mfrc522_bal_write_read_via_spi@x:	
  8747                           ; 1 bytes @ 0x4
  8748                           
  8749  0074                     ___almod@counter:	
  8750                           ; 1 bytes @ 0x4
  8751                           
  8752  0074                     ___llmod@counter:	
  8753                           ; 1 bytes @ 0x4
  8754                           
  8755  0074                     data_api_read_eeprom@buf:	
  8756                           ; 1 bytes @ 0x4
  8757                           
  8758                           
  8759                           ; 2 bytes @ 0x4
  8760  0074                     	ds	1
  8761  0075                     ??_TMR1_Initialize:	
  8762  0075                     ??_TMR0_Initialize:	
  8763                           ; 1 bytes @ 0x5
  8764                           
  8765  0075                     ??_TMR1_SetInterruptHandler:	
  8766                           ; 1 bytes @ 0x5
  8767                           
  8768  0075                     ??_TMR0_SetInterruptHandler:	
  8769                           ; 1 bytes @ 0x5
  8770                           
  8771  0075                     ??_key_scan_call:	
  8772                           ; 1 bytes @ 0x5
  8773                           
  8774  0075                     ??_set_globle_ticker:	
  8775                           ; 1 bytes @ 0x5
  8776                           
  8777  0075                     ??_get_globle_ticker:	
  8778                           ; 1 bytes @ 0x5
  8779                           
  8780  0075                     ??_delay:	
  8781                           ; 1 bytes @ 0x5
  8782                           
  8783  0075                     ??_ui_mem_cpy:	
  8784                           ; 1 bytes @ 0x5
  8785                           
  8786  0075                     ??_create_card_key_b:	
  8787                           ; 1 bytes @ 0x5
  8788                           
  8789  0075                     ?_lcd_disp_code:	
  8790                           ; 1 bytes @ 0x5
  8791                           
  8792  0075                     ??_iic_start:	
  8793                           ; 1 bytes @ 0x5
  8794                           
  8795  0075                     ??_iic_stop:	
  8796                           ; 1 bytes @ 0x5
  8797                           
  8798  0075                     ??_iic_waite_ack:	
  8799                           ; 1 bytes @ 0x5
  8800                           
  8801  0075                     DATAEE_WriteByte@GIEBitValue:	
  8802                           ; 1 bytes @ 0x5
  8803                           
  8804  0075                     my_uart1_send_poll@buf:	
  8805                           ; 1 bytes @ 0x5
  8806                           
  8807  0075                     ui_head_hide@ret:	
  8808                           ; 1 bytes @ 0x5
  8809                           
  8810  0075                     in_app_vavle_off@op:	
  8811                           ; 1 bytes @ 0x5
  8812                           
  8813  0075                     in_app_vavle_on@op:	
  8814                           ; 1 bytes @ 0x5
  8815                           
  8816  0075                     app_flow_lookup@i:	
  8817                           ; 1 bytes @ 0x5
  8818                           
  8819  0075                     m_mem_set@x:	
  8820                           ; 1 bytes @ 0x5
  8821                           
  8822  0075                     lcd_disp_code@loc:	
  8823                           ; 1 bytes @ 0x5
  8824                           
  8825  0075                     iic_received_byte@i:	
  8826                           ; 1 bytes @ 0x5
  8827                           
  8828  0075                     mfrc522_bal_write_read_via_spi@rb:	
  8829                           ; 1 bytes @ 0x5
  8830                           
  8831  0075                     ___almod@sign:	
  8832                           ; 1 bytes @ 0x5
  8833                           
  8834  0075                     m_mem_cpy_len@s:	
  8835                           ; 1 bytes @ 0x5
  8836                           
  8837  0075                     get_globle_ticker@ret:	
  8838                           ; 2 bytes @ 0x5
  8839                           
  8840  0075                     crc_sum@len:	
  8841                           ; 2 bytes @ 0x5
  8842                           
  8843  0075                     ___wmul@multiplicand:	
  8844                           ; 2 bytes @ 0x5
  8845                           
  8846  0075                     ___awdiv@dividend:	
  8847                           ; 2 bytes @ 0x5
  8848                           
  8849  0075                     ___awmod@dividend:	
  8850                           ; 2 bytes @ 0x5
  8851                           
  8852  0075                     ___lwdiv@dividend:	
  8853                           ; 2 bytes @ 0x5
  8854                           
  8855  0075                     ___lwmod@dividend:	
  8856                           ; 2 bytes @ 0x5
  8857                           
  8858                           
  8859                           ; 2 bytes @ 0x5
  8860  0075                     	ds	1
  8861  0076                     ??_SYSTEM_Initialize:	
  8862  0076                     ??_data_api_write_eeprom:	
  8863                           ; 1 bytes @ 0x6
  8864                           
  8865  0076                     ??_app_flow_money_off:	
  8866                           ; 1 bytes @ 0x6
  8867                           
  8868  0076                     ??_lcd_disp_code:	
  8869                           ; 1 bytes @ 0x6
  8870                           
  8871  0076                     ??_iic_received_byte_if_ack:	
  8872                           ; 1 bytes @ 0x6
  8873                           
  8874  0076                     ui_head_hide@str:	
  8875                           ; 1 bytes @ 0x6
  8876                           
  8877  0076                     ui_mem_cpy@len:	
  8878                           ; 1 bytes @ 0x6
  8879                           
  8880  0076                     data_api_read_eeprom@addr:	
  8881                           ; 1 bytes @ 0x6
  8882                           
  8883  0076                     create_card_key_b@keyb:	
  8884                           ; 1 bytes @ 0x6
  8885                           
  8886  0076                     m_mem_set@len:	
  8887                           ; 1 bytes @ 0x6
  8888                           
  8889  0076                     lcd_disp_code@code:	
  8890                           ; 1 bytes @ 0x6
  8891                           
  8892  0076                     iic_waite_ack@timeout:	
  8893                           ; 1 bytes @ 0x6
  8894                           
  8895  0076                     mfrc522_bal_write_read_via_spi@i:	
  8896                           ; 1 bytes @ 0x6
  8897                           
  8898                           
  8899                           ; 1 bytes @ 0x6
  8900  0076                     	ds	1
  8901  0077                     ??_m_math_pow:	
  8902  0077                     ??_lcd_clear_buffer:	
  8903                           ; 1 bytes @ 0x7
  8904                           
  8905  0077                     ??_m_mem_set:	
  8906                           ; 1 bytes @ 0x7
  8907                           
  8908  0077                     ??_mfrc522_bal_read_reg:	
  8909                           ; 1 bytes @ 0x7
  8910                           
  8911  0077                     ??_ui_key_waite_up:	
  8912                           ; 1 bytes @ 0x7
  8913                           
  8914  0077                     ??_ui_key_waite_up_ex:	
  8915                           ; 1 bytes @ 0x7
  8916                           
  8917  0077                     ??_modbus_response_illgeal_function:	
  8918                           ; 1 bytes @ 0x7
  8919                           
  8920  0077                     ??_lcd_config:	
  8921                           ; 1 bytes @ 0x7
  8922                           
  8923  0077                     ??_lcd_init:	
  8924                           ; 1 bytes @ 0x7
  8925                           
  8926  0077                     ??_iic_send_byte:	
  8927                           ; 1 bytes @ 0x7
  8928                           
  8929  0077                     ?_mfrc522_bal_write_reg:	
  8930                           ; 1 bytes @ 0x7
  8931                           
  8932  0077                     ??_mfrc522_bal_write_reg_len:	
  8933                           ; 1 bytes @ 0x7
  8934                           
  8935  0077                     ??_mfrc522_bal_read_fifo_len_ex:	
  8936                           ; 1 bytes @ 0x7
  8937                           
  8938  0077                     ??_m_system_init:	
  8939                           ; 1 bytes @ 0x7
  8940                           
  8941  0077                     ??___wmul:	
  8942                           ; 1 bytes @ 0x7
  8943                           
  8944  0077                     ??___awdiv:	
  8945                           ; 1 bytes @ 0x7
  8946                           
  8947  0077                     ??___awmod:	
  8948                           ; 1 bytes @ 0x7
  8949                           
  8950  0077                     ??___lldiv:	
  8951                           ; 1 bytes @ 0x7
  8952                           
  8953  0077                     ??___lwdiv:	
  8954                           ; 1 bytes @ 0x7
  8955                           
  8956  0077                     ??___lwmod:	
  8957                           ; 1 bytes @ 0x7
  8958                           
  8959  0077                     ui_uint32_2_str@buf:	
  8960                           ; 1 bytes @ 0x7
  8961                           
  8962  0077                     ui_mem_cpy@d:	
  8963                           ; 1 bytes @ 0x7
  8964                           
  8965  0077                     data_api_write_eeprom@i:	
  8966                           ; 1 bytes @ 0x7
  8967                           
  8968  0077                     data_api_read_eeprom@len:	
  8969                           ; 1 bytes @ 0x7
  8970                           
  8971  0077                     create_card_key_b@i:	
  8972                           ; 1 bytes @ 0x7
  8973                           
  8974  0077                     m_mem_cpy_len@len:	
  8975                           ; 1 bytes @ 0x7
  8976                           
  8977  0077                     mfrc522_bal_write_reg@x:	
  8978                           ; 1 bytes @ 0x7
  8979                           
  8980                           
  8981                           ; 1 bytes @ 0x7
  8982  0077                     	ds	1
  8983  0078                     ??_ui_disp_flow_error:	
  8984  0078                     ??_ui_disp_clear_totale:	
  8985                           ; 1 bytes @ 0x8
  8986                           
  8987  0078                     ??_ui_disp_clear_balance:	
  8988                           ; 1 bytes @ 0x8
  8989                           
  8990  0078                     ??_ui_disp_set_transferMoneyLimit:	
  8991                           ; 1 bytes @ 0x8
  8992                           
  8993  0078                     ??_ui_disp_set_device_id:	
  8994                           ; 1 bytes @ 0x8
  8995                           
  8996  0078                     ??_ui_disp_set_balanceWarning:	
  8997                           ; 1 bytes @ 0x8
  8998                           
  8999  0078                     ??_ui_disp_set_balanceOff:	
  9000                           ; 1 bytes @ 0x8
  9001                           
  9002  0078                     ??_ui_disp_set_imd_flow_uint:	
  9003                           ; 1 bytes @ 0x8
  9004                           
  9005  0078                     ??_mfrc522_bal_write_reg:	
  9006                           ; 1 bytes @ 0x8
  9007                           
  9008                           
  9009                           	psect	cstackBANK0
  9010  0020                     __pcstackBANK0:	
  9011                           ; 1 bytes @ 0x8
  9012                           
  9013  0020                     ??_m_mem_cpy_len:	
  9014  0020                     ??_data_api_read_eeprom:	
  9015                           ; 1 bytes @ 0x0
  9016                           
  9017  0020                     ?_data_api_write_eeprom:	
  9018                           ; 1 bytes @ 0x0
  9019                           
  9020  0020                     ??_app_flow_lookup:	
  9021                           ; 1 bytes @ 0x0
  9022                           
  9023  0020                     ?_mfrc522_bal_write_reg_len:	
  9024                           ; 1 bytes @ 0x0
  9025                           
  9026  0020                     ?_mfrc522_bal_read_fifo_len_ex:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0020                     ??_crc_sum:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0020                     ?_ui_key_waite_up:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0020                     ?_ui_key_waite_up_ex:	
  9036                           ; 2 bytes @ 0x0
  9037                           
  9038  0020                     ?___lmul:	
  9039                           ; 2 bytes @ 0x0
  9040                           
  9041  0020                     ?___aldiv:	
  9042                           ; 4 bytes @ 0x0
  9043                           
  9044  0020                     ?___almod:	
  9045                           ; 4 bytes @ 0x0
  9046                           
  9047  0020                     ?___llmod:	
  9048                           ; 4 bytes @ 0x0
  9049                           
  9050  0020                     lcd_disp_all@x:	
  9051                           ; 4 bytes @ 0x0
  9052                           
  9053  0020                     iic_send_byte@x:	
  9054                           ; 1 bytes @ 0x0
  9055                           
  9056  0020                     iic_received_byte_if_ack@ack:	
  9057                           ; 1 bytes @ 0x0
  9058                           
  9059  0020                     mfrc522_bal_write_reg@reg:	
  9060                           ; 1 bytes @ 0x0
  9061                           
  9062  0020                     mfrc522_bal_read_reg@reg:	
  9063                           ; 1 bytes @ 0x0
  9064                           
  9065  0020                     ___awdiv@counter:	
  9066                           ; 1 bytes @ 0x0
  9067                           
  9068  0020                     ___awmod@counter:	
  9069                           ; 1 bytes @ 0x0
  9070                           
  9071  0020                     ___lbmod@dividend:	
  9072                           ; 1 bytes @ 0x0
  9073                           
  9074  0020                     ___lwmod@counter:	
  9075                           ; 1 bytes @ 0x0
  9076                           
  9077  0020                     ui_key_waite_up_ex@tm:	
  9078                           ; 1 bytes @ 0x0
  9079                           
  9080  0020                     data_api_write_eeprom@buf:	
  9081                           ; 2 bytes @ 0x0
  9082                           
  9083  0020                     mfrc522_bal_write_reg_len@buf:	
  9084                           ; 2 bytes @ 0x0
  9085                           
  9086  0020                     mfrc522_bal_read_fifo_len_ex@buf:	
  9087                           ; 2 bytes @ 0x0
  9088                           
  9089  0020                     ___wmul@product:	
  9090                           ; 2 bytes @ 0x0
  9091                           
  9092  0020                     ___lwdiv@quotient:	
  9093                           ; 2 bytes @ 0x0
  9094                           
  9095  0020                     ___lmul@multiplier:	
  9096                           ; 2 bytes @ 0x0
  9097                           
  9098  0020                     ___aldiv@divisor:	
  9099                           ; 4 bytes @ 0x0
  9100                           
  9101  0020                     ___almod@divisor:	
  9102                           ; 4 bytes @ 0x0
  9103                           
  9104  0020                     ___llmod@divisor:	
  9105                           ; 4 bytes @ 0x0
  9106                           
  9107                           
  9108                           ; 4 bytes @ 0x0
  9109  0020                     	ds	1
  9110  0021                     ??_lcd_disp_refresh:	
  9111  0021                     ??_mfrc522_hal_reset_sf:	
  9112                           ; 1 bytes @ 0x1
  9113                           
  9114  0021                     data_api_read_eeprom@i:	
  9115                           ; 1 bytes @ 0x1
  9116                           
  9117  0021                     lcd_disp_all@i:	
  9118                           ; 1 bytes @ 0x1
  9119                           
  9120  0021                     iic_send_byte@i:	
  9121                           ; 1 bytes @ 0x1
  9122                           
  9123  0021                     iic_received_byte_if_ack@ret:	
  9124                           ; 1 bytes @ 0x1
  9125                           
  9126  0021                     mfrc522_bal_read_reg@x:	
  9127                           ; 1 bytes @ 0x1
  9128                           
  9129  0021                     ___awdiv@sign:	
  9130                           ; 1 bytes @ 0x1
  9131                           
  9132  0021                     ___awmod@sign:	
  9133                           ; 1 bytes @ 0x1
  9134                           
  9135  0021                     ___lbmod@counter:	
  9136                           ; 1 bytes @ 0x1
  9137                           
  9138                           
  9139                           ; 1 bytes @ 0x1
  9140  0021                     	ds	1
  9141  0022                     ?_lcd_disp_str:	
  9142  0022                     ?_adc_mcp3241_start_convert_16:	
  9143                           ; 1 bytes @ 0x2
  9144                           
  9145  0022                     ??_mfrc522_hal_antenna_on:	
  9146                           ; 1 bytes @ 0x2
  9147                           
  9148  0022                     ?_mfrc522_bal_set_bit_reg:	
  9149                           ; 1 bytes @ 0x2
  9150                           
  9151  0022                     ?_mfrc522_bal_clr_bit_reg:	
  9152                           ; 1 bytes @ 0x2
  9153                           
  9154  0022                     ??_mfrc522_hal_get_antenna_gain:	
  9155                           ; 1 bytes @ 0x2
  9156                           
  9157  0022                     ?_adc_mcp3241_read_convert_16:	
  9158                           ; 1 bytes @ 0x2
  9159                           
  9160  0022                     data_api_write_eeprom@addr:	
  9161                           ; 2 bytes @ 0x2
  9162                           
  9163  0022                     adc_mcp3241_start_convert_16@g:	
  9164                           ; 1 bytes @ 0x2
  9165                           
  9166  0022                     mfrc522_bal_write_reg_len@len:	
  9167                           ; 1 bytes @ 0x2
  9168                           
  9169  0022                     mfrc522_bal_read_fifo_len_ex@len:	
  9170                           ; 1 bytes @ 0x2
  9171                           
  9172  0022                     mfrc522_bal_set_bit_reg@bits:	
  9173                           ; 1 bytes @ 0x2
  9174                           
  9175  0022                     mfrc522_bal_clr_bit_reg@bits:	
  9176                           ; 1 bytes @ 0x2
  9177                           
  9178  0022                     ___lbmod@rem:	
  9179                           ; 1 bytes @ 0x2
  9180                           
  9181  0022                     ___lwdiv@counter:	
  9182                           ; 1 bytes @ 0x2
  9183                           
  9184  0022                     ui_key_waite_up@now:	
  9185                           ; 1 bytes @ 0x2
  9186                           
  9187  0022                     ui_key_waite_up_ex@now:	
  9188                           ; 2 bytes @ 0x2
  9189                           
  9190  0022                     lcd_disp_str@str:	
  9191                           ; 2 bytes @ 0x2
  9192                           
  9193  0022                     crc_sum@j:	
  9194                           ; 2 bytes @ 0x2
  9195                           
  9196  0022                     ___awdiv@quotient:	
  9197                           ; 2 bytes @ 0x2
  9198                           
  9199                           
  9200                           ; 2 bytes @ 0x2
  9201  0022                     	ds	1
  9202  0023                     ??_adc_mcp3241_start_convert_16:	
  9203  0023                     ??_mfrc522_bal_set_bit_reg:	
  9204                           ; 1 bytes @ 0x3
  9205                           
  9206  0023                     ??_mfrc522_bal_clr_bit_reg:	
  9207                           ; 1 bytes @ 0x3
  9208                           
  9209  0023                     data_api_write_eeprom@len:	
  9210                           ; 1 bytes @ 0x3
  9211                           
  9212  0023                     mfrc522_bal_write_reg_len@reg:	
  9213                           ; 1 bytes @ 0x3
  9214                           
  9215  0023                     mfrc522_bal_read_fifo_len_ex@rx_align:	
  9216                           ; 1 bytes @ 0x3
  9217                           
  9218  0023                     mfrc522_hal_antenna_on@t8:	
  9219                           ; 1 bytes @ 0x3
  9220                           
  9221  0023                     mfrc522_hal_get_antenna_gain@ret:	
  9222                           ; 1 bytes @ 0x3
  9223                           
  9224                           
  9225                           ; 1 bytes @ 0x3
  9226  0023                     	ds	1
  9227  0024                     ??_lcd_disp_str:	
  9228  0024                     ??_adc_mcp3241_read_convert_16:	
  9229                           ; 1 bytes @ 0x4
  9230                           
  9231  0024                     ?___bmul:	
  9232                           ; 1 bytes @ 0x4
  9233                           
  9234  0024                     adc_mcp3241_start_convert_16@b:	
  9235                           ; 1 bytes @ 0x4
  9236                           
  9237  0024                     mfrc522_bal_write_reg_len@i:	
  9238                           ; 1 bytes @ 0x4
  9239                           
  9240  0024                     mfrc522_bal_read_fifo_len_ex@reg:	
  9241                           ; 1 bytes @ 0x4
  9242                           
  9243  0024                     mfrc522_bal_set_bit_reg@tmp:	
  9244                           ; 1 bytes @ 0x4
  9245                           
  9246  0024                     mfrc522_bal_clr_bit_reg@tmp:	
  9247                           ; 1 bytes @ 0x4
  9248                           
  9249  0024                     ___bmul@multiplicand:	
  9250                           ; 1 bytes @ 0x4
  9251                           
  9252  0024                     crc_sum@i:	
  9253                           ; 1 bytes @ 0x4
  9254                           
  9255  0024                     ___lmul@multiplicand:	
  9256                           ; 2 bytes @ 0x4
  9257                           
  9258  0024                     ___aldiv@dividend:	
  9259                           ; 4 bytes @ 0x4
  9260                           
  9261  0024                     ___almod@dividend:	
  9262                           ; 4 bytes @ 0x4
  9263                           
  9264  0024                     ___llmod@dividend:	
  9265                           ; 4 bytes @ 0x4
  9266                           
  9267                           
  9268                           ; 4 bytes @ 0x4
  9269  0024                     	ds	1
  9270  0025                     ??___bmul:	
  9271  0025                     lcd_disp_str@loc:	
  9272                           ; 1 bytes @ 0x5
  9273                           
  9274  0025                     adc_mcp3241_start_convert_16@t8:	
  9275                           ; 1 bytes @ 0x5
  9276                           
  9277  0025                     mfrc522_bal_read_fifo_len_ex@adr:	
  9278                           ; 1 bytes @ 0x5
  9279                           
  9280  0025                     mfrc522_bal_set_bit_reg@reg:	
  9281                           ; 1 bytes @ 0x5
  9282                           
  9283  0025                     mfrc522_bal_clr_bit_reg@reg:	
  9284                           ; 1 bytes @ 0x5
  9285                           
  9286                           
  9287                           ; 1 bytes @ 0x5
  9288  0025                     	ds	1
  9289  0026                     ??_picc_stop_cryptol:	
  9290  0026                     ??_mfrc522_hal_set_antenna_gain:	
  9291                           ; 1 bytes @ 0x6
  9292                           
  9293  0026                     ?_mfrc522_hal_calculate_crc:	
  9294                           ; 1 bytes @ 0x6
  9295                           
  9296  0026                     lcd_disp_str@index:	
  9297                           ; 1 bytes @ 0x6
  9298                           
  9299  0026                     adc_mcp3241_read_convert_16@sta:	
  9300                           ; 1 bytes @ 0x6
  9301                           
  9302  0026                     mfrc522_bal_read_fifo_len_ex@i:	
  9303                           ; 1 bytes @ 0x6
  9304                           
  9305  0026                     ___bmul@product:	
  9306                           ; 1 bytes @ 0x6
  9307                           
  9308  0026                     mfrc522_hal_calculate_crc@data:	
  9309                           ; 1 bytes @ 0x6
  9310                           
  9311  0026                     crc_sum@crc:	
  9312                           ; 2 bytes @ 0x6
  9313                           
  9314                           
  9315                           ; 2 bytes @ 0x6
  9316  0026                     	ds	1
  9317  0027                     ?_ui_disp_str_num:	
  9318  0027                     ?_ui_disp_str_num_ex:	
  9319                           ; 1 bytes @ 0x7
  9320                           
  9321  0027                     mfrc522_hal_set_antenna_gain@gain:	
  9322                           ; 1 bytes @ 0x7
  9323                           
  9324  0027                     ___bmul@multiplier:	
  9325                           ; 1 bytes @ 0x7
  9326                           
  9327  0027                     ui_disp_str_num@str:	
  9328                           ; 1 bytes @ 0x7
  9329                           
  9330  0027                     ui_disp_str_num_ex@str:	
  9331                           ; 2 bytes @ 0x7
  9332                           
  9333  0027                     adc_mcp3241_read_convert_16@t16:	
  9334                           ; 2 bytes @ 0x7
  9335                           
  9336                           
  9337                           ; 2 bytes @ 0x7
  9338  0027                     	ds	1
  9339  0028                     ?_crc_append:	
  9340  0028                     ?_crc_verify:	
  9341                           ; 1 bytes @ 0x8
  9342                           
  9343  0028                     ??_mfrc522_hal_init:	
  9344                           ; 1 bytes @ 0x8
  9345                           
  9346  0028                     ?_lcd_set_com_seg:	
  9347                           ; 1 bytes @ 0x8
  9348                           
  9349  0028                     ?_m_math_pow:	
  9350                           ; 2 bytes @ 0x8
  9351                           
  9352  0028                     ?___lldiv:	
  9353                           ; 4 bytes @ 0x8
  9354                           
  9355  0028                     lcd_set_com_seg@seg:	
  9356                           ; 4 bytes @ 0x8
  9357                           
  9358  0028                     mfrc522_hal_calculate_crc@length:	
  9359                           ; 1 bytes @ 0x8
  9360                           
  9361  0028                     ___aldiv@counter:	
  9362                           ; 1 bytes @ 0x8
  9363                           
  9364  0028                     crc_verify@message:	
  9365                           ; 1 bytes @ 0x8
  9366                           
  9367  0028                     crc_append@message:	
  9368                           ; 2 bytes @ 0x8
  9369                           
  9370  0028                     m_math_pow@x:	
  9371                           ; 2 bytes @ 0x8
  9372                           
  9373  0028                     ___lldiv@divisor:	
  9374                           ; 4 bytes @ 0x8
  9375                           
  9376                           
  9377                           ; 4 bytes @ 0x8
  9378  0028                     	ds	1
  9379  0029                     ??_mfapi_pcd_init:	
  9380  0029                     lcd_set_com_seg@show:	
  9381                           ; 1 bytes @ 0x9
  9382                           
  9383  0029                     ___aldiv@sign:	
  9384                           ; 1 bytes @ 0x9
  9385                           
  9386  0029                     ui_disp_str_num@num:	
  9387                           ; 1 bytes @ 0x9
  9388                           
  9389  0029                     ui_disp_str_num_ex@num:	
  9390                           ; 2 bytes @ 0x9
  9391                           
  9392  0029                     mfrc522_hal_calculate_crc@result:	
  9393                           ; 2 bytes @ 0x9
  9394                           
  9395                           
  9396                           ; 2 bytes @ 0x9
  9397  0029                     	ds	1
  9398  002A                     ??_lcd_set_com_seg:	
  9399  002A                     mfapi_pcd_init@v:	
  9400                           ; 1 bytes @ 0xA
  9401                           
  9402  002A                     crc_verify@n:	
  9403                           ; 1 bytes @ 0xA
  9404                           
  9405  002A                     crc_append@n:	
  9406                           ; 2 bytes @ 0xA
  9407                           
  9408  002A                     ___aldiv@quotient:	
  9409                           ; 2 bytes @ 0xA
  9410                           
  9411                           
  9412                           ; 4 bytes @ 0xA
  9413  002A                     	ds	1
  9414  002B                     ??_ui_disp_str_num:	
  9415  002B                     ??_ui_disp_str_num_ex:	
  9416                           ; 1 bytes @ 0xB
  9417                           
  9418  002B                     ??_mfrc522_hal_calculate_crc:	
  9419                           ; 1 bytes @ 0xB
  9420                           
  9421                           
  9422                           ; 1 bytes @ 0xB
  9423  002B                     	ds	1
  9424  002C                     ??_crc_append:	
  9425  002C                     ??_crc_verify:	
  9426                           ; 1 bytes @ 0xC
  9427                           
  9428  002C                     m_math_pow@y:	
  9429                           ; 1 bytes @ 0xC
  9430                           
  9431  002C                     ___lldiv@dividend:	
  9432                           ; 1 bytes @ 0xC
  9433                           
  9434                           
  9435                           ; 4 bytes @ 0xC
  9436  002C                     	ds	1
  9437  002D                     ??_ui_start_display:	
  9438  002D                     ??_ui_disp_small_flow_how_care:	
  9439                           ; 1 bytes @ 0xD
  9440                           
  9441  002D                     ??_ui_disp_modbus_id:	
  9442                           ; 1 bytes @ 0xD
  9443                           
  9444  002D                     m_math_pow@ret:	
  9445                           ; 1 bytes @ 0xD
  9446                           
  9447                           
  9448                           ; 4 bytes @ 0xD
  9449  002D                     	ds	1
  9450  002E                     ??_ui_key_process_enter:	
  9451  002E                     lcd_set_com_seg@addr:	
  9452                           ; 1 bytes @ 0xE
  9453                           
  9454  002E                     mfrc522_hal_calculate_crc@t8:	
  9455                           ; 1 bytes @ 0xE
  9456                           
  9457                           
  9458                           ; 1 bytes @ 0xE
  9459  002E                     	ds	1
  9460  002F                     ui_start_display@dly:	
  9461  002F                     lcd_set_com_seg@com:	
  9462                           ; 1 bytes @ 0xF
  9463                           
  9464  002F                     mfrc522_hal_calculate_crc@i:	
  9465                           ; 1 bytes @ 0xF
  9466                           
  9467  002F                     crc_verify@crccal:	
  9468                           ; 2 bytes @ 0xF
  9469                           
  9470                           
  9471                           ; 2 bytes @ 0xF
  9472  002F                     	ds	1
  9473  0030                     lcd_set_com_seg@p:	
  9474  0030                     ___lldiv@quotient:	
  9475                           ; 1 bytes @ 0x10
  9476                           
  9477                           
  9478                           ; 4 bytes @ 0x10
  9479  0030                     	ds	1
  9480  0031                     ?_ui_uint32_2_str:	
  9481  0031                     ?_pcd_comm_with_picc:	
  9482                           ; 1 bytes @ 0x11
  9483                           
  9484  0031                     lcd_set_com_seg@bloc:	
  9485                           ; 1 bytes @ 0x11
  9486                           
  9487  0031                     pcd_comm_with_picc@waitIRQ:	
  9488                           ; 1 bytes @ 0x11
  9489                           
  9490  0031                     crc_verify@expected:	
  9491                           ; 1 bytes @ 0x11
  9492                           
  9493  0031                     crc_append@crc:	
  9494                           ; 2 bytes @ 0x11
  9495                           
  9496  0031                     ui_uint32_2_str@x:	
  9497                           ; 2 bytes @ 0x11
  9498                           
  9499                           
  9500                           ; 4 bytes @ 0x11
  9501  0031                     	ds	1
  9502  0032                     ?_lcd_disp_dp:	
  9503  0032                     ??_lcd_disp_cln:	
  9504                           ; 1 bytes @ 0x12
  9505                           
  9506  0032                     lcd_disp_dp@show:	
  9507                           ; 1 bytes @ 0x12
  9508                           
  9509  0032                     pcd_comm_with_picc@sbuf:	
  9510                           ; 1 bytes @ 0x12
  9511                           
  9512                           
  9513                           ; 2 bytes @ 0x12
  9514  0032                     	ds	1
  9515  0033                     ??_lcd_disp_dp:	
  9516  0033                     ?_data_api_calibration_table_data_save:	
  9517                           ; 1 bytes @ 0x13
  9518                           
  9519  0033                     ??_data_api_rt_data_save:	
  9520                           ; 1 bytes @ 0x13
  9521                           
  9522  0033                     ?_modbus_response_illgeal_function:	
  9523                           ; 1 bytes @ 0x13
  9524                           
  9525  0033                     ??_data_api_calibration_table_data_init:	
  9526                           ; 1 bytes @ 0x13
  9527                           
  9528  0033                     ??_data_api_system_data_init:	
  9529                           ; 1 bytes @ 0x13
  9530                           
  9531  0033                     modbus_response_illgeal_function@errcode:	
  9532                           ; 1 bytes @ 0x13
  9533                           
  9534  0033                     data_api_calibration_table_data_save@single:	
  9535                           ; 1 bytes @ 0x13
  9536                           
  9537                           
  9538                           ; 1 bytes @ 0x13
  9539  0033                     	ds	1
  9540  0034                     ??_data_api_calibration_table_data_save:	
  9541  0034                     modbus_response_illgeal_function@pmdbs:	
  9542                           ; 1 bytes @ 0x14
  9543                           
  9544  0034                     data_api_system_data_init@sta:	
  9545                           ; 1 bytes @ 0x14
  9546                           
  9547  0034                     lcd_disp_cln@show:	
  9548                           ; 1 bytes @ 0x14
  9549                           
  9550  0034                     pcd_comm_with_picc@slen:	
  9551                           ; 1 bytes @ 0x14
  9552                           
  9553  0034                     ___lldiv@counter:	
  9554                           ; 1 bytes @ 0x14
  9555                           
  9556                           
  9557                           ; 1 bytes @ 0x14
  9558  0034                     	ds	1
  9559  0035                     ??_app_flow_rt_volume_cal_ex:	
  9560  0035                     ??_app_flow_rt_balance_money_cal:	
  9561                           ; 1 bytes @ 0x15
  9562                           
  9563  0035                     ?_getRegisterVal:	
  9564                           ; 1 bytes @ 0x15
  9565                           
  9566  0035                     ?_app_flow_adc_2_flow:	
  9567                           ; 2 bytes @ 0x15
  9568                           
  9569  0035                     ?_app_flow_get_adcAverageValue:	
  9570                           ; 2 bytes @ 0x15
  9571                           
  9572  0035                     ui_uint32_2_str@len:	
  9573                           ; 2 bytes @ 0x15
  9574                           
  9575  0035                     modbus_response_illgeal_function@buf:	
  9576                           ; 1 bytes @ 0x15
  9577                           
  9578  0035                     lcd_disp_dp@dec:	
  9579                           ; 1 bytes @ 0x15
  9580                           
  9581  0035                     getRegisterVal@addr:	
  9582                           ; 1 bytes @ 0x15
  9583                           
  9584  0035                     pcd_comm_with_picc@rbuf:	
  9585                           ; 2 bytes @ 0x15
  9586                           
  9587                           
  9588                           ; 2 bytes @ 0x15
  9589  0035                     	ds	1
  9590  0036                     ??_ui_uint32_2_str:	
  9591  0036                     ??_modbus_response_write_single_register:	
  9592                           ; 1 bytes @ 0x16
  9593                           
  9594  0036                     ??_modbus_response_read_clib_data:	
  9595                           ; 1 bytes @ 0x16
  9596                           
  9597  0036                     data_api_rt_data_save@stp:	
  9598                           ; 1 bytes @ 0x16
  9599                           
  9600                           
  9601                           ; 2 bytes @ 0x16
  9602  0036                     	ds	1
  9603  0037                     ??_app_flow_adc_2_flow:	
  9604  0037                     ??_app_flow_get_adcAverageValue:	
  9605                           ; 1 bytes @ 0x17
  9606                           
  9607  0037                     getRegisterVal@tempData:	
  9608                           ; 1 bytes @ 0x17
  9609                           
  9610  0037                     pcd_comm_with_picc@rlen:	
  9611                           ; 1 bytes @ 0x17
  9612                           
  9613                           
  9614                           ; 1 bytes @ 0x17
  9615  0037                     	ds	1
  9616  0038                     ??_getRegisterVal:	
  9617  0038                     modbus_response_write_single_register@len:	
  9618                           ; 1 bytes @ 0x18
  9619                           
  9620  0038                     pcd_comm_with_picc@validBits:	
  9621                           ; 1 bytes @ 0x18
  9622                           
  9623                           
  9624                           ; 1 bytes @ 0x18
  9625  0038                     	ds	1
  9626  0039                     data_api_calibration_table_data_init@sta:	
  9627  0039                     pcd_comm_with_picc@rxAlign:	
  9628                           ; 1 bytes @ 0x19
  9629                           
  9630  0039                     modbus_response_write_single_register@startAddr:	
  9631                           ; 1 bytes @ 0x19
  9632                           
  9633                           
  9634                           ; 2 bytes @ 0x19
  9635  0039                     	ds	1
  9636  003A                     ??_ui_disp_flow:	
  9637  003A                     ??_ui_disp_totale_v:	
  9638                           ; 1 bytes @ 0x1A
  9639                           
  9640  003A                     ??_ui_disp_transfer_money:	
  9641                           ; 1 bytes @ 0x1A
  9642                           
  9643  003A                     ??_ui_disp_balance_and_volume:	
  9644                           ; 1 bytes @ 0x1A
  9645                           
  9646  003A                     ??_ui_disp_set_line:	
  9647                           ; 1 bytes @ 0x1A
  9648                           
  9649  003A                     ??_ui_disp_set_price:	
  9650                           ; 1 bytes @ 0x1A
  9651                           
  9652  003A                     ??_ui_disp_set_calib:	
  9653                           ; 1 bytes @ 0x1A
  9654                           
  9655  003A                     pcd_comm_with_picc@checkCRC:	
  9656                           ; 1 bytes @ 0x1A
  9657                           
  9658  003A                     modbus_response_read_clib_data@startAddr:	
  9659                           ; 1 bytes @ 0x1A
  9660                           
  9661  003A                     data_api_calibration_table_data_init@stp:	
  9662                           ; 2 bytes @ 0x1A
  9663                           
  9664                           
  9665                           ; 2 bytes @ 0x1A
  9666  003A                     	ds	1
  9667  003B                     ??_pcd_comm_with_picc:	
  9668  003B                     modbus_response_write_single_register@pmdbs:	
  9669                           ; 1 bytes @ 0x1B
  9670                           
  9671                           
  9672                           ; 1 bytes @ 0x1B
  9673  003B                     	ds	1
  9674  003C                     ui_disp_flow@decnum:	
  9675  003C                     ui_disp_totale_v@decnum:	
  9676                           ; 1 bytes @ 0x1C
  9677                           
  9678  003C                     ui_disp_balance_and_volume@ret:	
  9679                           ; 1 bytes @ 0x1C
  9680                           
  9681  003C                     modbus_response_write_single_register@rbuf:	
  9682                           ; 1 bytes @ 0x1C
  9683                           
  9684  003C                     modbus_response_read_clib_data@pmdbs:	
  9685                           ; 1 bytes @ 0x1C
  9686                           
  9687  003C                     data_api_calibration_table_data_init@i:	
  9688                           ; 1 bytes @ 0x1C
  9689                           
  9690  003C                     ui_disp_set_line@t16:	
  9691                           ; 1 bytes @ 0x1C
  9692                           
  9693  003C                     getRegisterVal@result:	
  9694                           ; 2 bytes @ 0x1C
  9695                           
  9696                           
  9697                           ; 2 bytes @ 0x1C
  9698  003C                     	ds	1
  9699  003D                     ui_disp_set_calib@loc:	
  9700  003D                     pcd_comm_with_picc@txLastBits:	
  9701                           ; 1 bytes @ 0x1D
  9702                           
  9703  003D                     modbus_response_read_clib_data@len:	
  9704                           ; 1 bytes @ 0x1D
  9705                           
  9706  003D                     ui_disp_flow@flw:	
  9707                           ; 2 bytes @ 0x1D
  9708                           
  9709  003D                     _app_flow_adc_2_flow$4474:	
  9710                           ; 4 bytes @ 0x1D
  9711                           
  9712                           
  9713                           ; 4 bytes @ 0x1D
  9714  003D                     	ds	1
  9715  003E                     pcd_comm_with_picc@bitFraming:	
  9716  003E                     getRegisterVal@tempAddr:	
  9717                           ; 1 bytes @ 0x1E
  9718                           
  9719                           
  9720                           ; 2 bytes @ 0x1E
  9721  003E                     	ds	1
  9722  003F                     modbus_response_read_clib_data@buf:	
  9723  003F                     app_flow_get_adcAverageValue@maxIndex:	
  9724                           ; 1 bytes @ 0x1F
  9725                           
  9726  003F                     _pcd_comm_with_picc$3208:	
  9727                           ; 1 bytes @ 0x1F
  9728                           
  9729                           
  9730                           ; 2 bytes @ 0x1F
  9731  003F                     	ds	1
  9732  0040                     ??_modbus_response_command:	
  9733  0040                     app_flow_get_adcAverageValue@minIndex:	
  9734                           ; 1 bytes @ 0x20
  9735                           
  9736                           
  9737                           ; 1 bytes @ 0x20
  9738  0040                     	ds	1
  9739  0041                     ??_ui_disp_menu:	
  9740  0041                     pcd_comm_with_picc@cmd:	
  9741                           ; 1 bytes @ 0x21
  9742                           
  9743  0041                     app_flow_adc_2_flow@flw2:	
  9744                           ; 1 bytes @ 0x21
  9745                           
  9746  0041                     app_flow_get_adcAverageValue@min:	
  9747                           ; 2 bytes @ 0x21
  9748                           
  9749                           
  9750                           ; 2 bytes @ 0x21
  9751  0041                     	ds	1
  9752  0042                     modbus_response_command@tmpAddr:	
  9753  0042                     data_api_calibration_table_data_save@stp:	
  9754                           ; 2 bytes @ 0x22
  9755                           
  9756  0042                     pcd_comm_with_picc@controlBuffer:	
  9757                           ; 2 bytes @ 0x22
  9758                           
  9759                           
  9760                           ; 2 bytes @ 0x22
  9761  0042                     	ds	1
  9762  0043                     ?_key_process_up_down_variable_speed_ex:	
  9763  0043                     app_flow_get_adcAverageValue@j:	
  9764                           ; 1 bytes @ 0x23
  9765                           
  9766  0043                     key_process_up_down_variable_speed_ex@min:	
  9767                           ; 1 bytes @ 0x23
  9768                           
  9769  0043                     app_flow_adc_2_flow@ad2:	
  9770                           ; 2 bytes @ 0x23
  9771                           
  9772                           
  9773                           ; 2 bytes @ 0x23
  9774  0043                     	ds	1
  9775  0044                     data_api_calibration_table_data_save@loc:	
  9776  0044                     pcd_comm_with_picc@errorRegValue:	
  9777                           ; 1 bytes @ 0x24
  9778                           
  9779  0044                     modbus_response_command@startAddr:	
  9780                           ; 1 bytes @ 0x24
  9781                           
  9782  0044                     app_flow_get_adcAverageValue@max:	
  9783                           ; 2 bytes @ 0x24
  9784                           
  9785                           
  9786                           ; 2 bytes @ 0x24
  9787  0044                     	ds	1
  9788  0045                     data_api_calibration_table_data_save@i:	
  9789  0045                     pcd_comm_with_picc@status:	
  9790                           ; 1 bytes @ 0x25
  9791                           
  9792  0045                     key_process_up_down_variable_speed_ex@max:	
  9793                           ; 1 bytes @ 0x25
  9794                           
  9795  0045                     app_flow_adc_2_flow@flw1:	
  9796                           ; 2 bytes @ 0x25
  9797                           
  9798                           
  9799                           ; 2 bytes @ 0x25
  9800  0045                     	ds	1
  9801  0046                     ??_ui_key_process_down:	
  9802  0046                     ??_ui_key_process_cancel:	
  9803                           ; 1 bytes @ 0x26
  9804                           
  9805  0046                     ??_ui_key_set_process:	
  9806                           ; 1 bytes @ 0x26
  9807                           
  9808  0046                     ??_modbus_response_write_clib_data:	
  9809                           ; 1 bytes @ 0x26
  9810                           
  9811  0046                     ??_data_api_flash_process:	
  9812                           ; 1 bytes @ 0x26
  9813                           
  9814  0046                     modbus_response_command@pmdbs:	
  9815                           ; 1 bytes @ 0x26
  9816                           
  9817  0046                     pcd_comm_with_picc@i:	
  9818                           ; 1 bytes @ 0x26
  9819                           
  9820  0046                     app_flow_get_adcAverageValue@ret:	
  9821                           ; 2 bytes @ 0x26
  9822                           
  9823                           
  9824                           ; 4 bytes @ 0x26
  9825  0046                     	ds	1
  9826  0047                     key_process_up_down_variable_speed_ex@up:	
  9827  0047                     ui_key_set_process@ret:	
  9828                           ; 1 bytes @ 0x27
  9829                           
  9830  0047                     modbus_response_command@i:	
  9831                           ; 1 bytes @ 0x27
  9832                           
  9833  0047                     app_flow_adc_2_flow@ad1:	
  9834                           ; 1 bytes @ 0x27
  9835                           
  9836                           
  9837                           ; 2 bytes @ 0x27
  9838  0047                     	ds	1
  9839  0048                     ??_key_process_up_down_variable_speed_ex:	
  9840  0048                     modbus_response_command@len:	
  9841                           ; 1 bytes @ 0x28
  9842                           
  9843  0048                     pcd_comm_with_picc@_validBits:	
  9844                           ; 1 bytes @ 0x28
  9845                           
  9846  0048                     modbus_response_write_clib_data@t16:	
  9847                           ; 1 bytes @ 0x28
  9848                           
  9849                           
  9850                           ; 2 bytes @ 0x28
  9851  0048                     	ds	1
  9852  0049                     modbus_response_command@rbuf:	
  9853  0049                     app_flow_adc_2_flow@index:	
  9854                           ; 1 bytes @ 0x29
  9855                           
  9856  0049                     pcd_comm_with_picc@tmp8:	
  9857                           ; 1 bytes @ 0x29
  9858                           
  9859                           
  9860                           ; 1 bytes @ 0x29
  9861  0049                     	ds	1
  9862  004A                     ?_picc_authenticate:	
  9863  004A                     ?_mifare_read:	
  9864                           ; 1 bytes @ 0x2A
  9865                           
  9866  004A                     ?_picc_select:	
  9867                           ; 1 bytes @ 0x2A
  9868                           
  9869  004A                     ??_picc_halt_a:	
  9870                           ; 1 bytes @ 0x2A
  9871                           
  9872  004A                     ?_picc_req_a_or_wakeup_a:	
  9873                           ; 1 bytes @ 0x2A
  9874                           
  9875  004A                     ?_pcd_mifare_transceive:	
  9876                           ; 1 bytes @ 0x2A
  9877                           
  9878  004A                     app_flow_get_adcAverageValue@i:	
  9879                           ; 1 bytes @ 0x2A
  9880                           
  9881  004A                     picc_req_a_or_wakeup_a@bufferATQA:	
  9882                           ; 1 bytes @ 0x2A
  9883                           
  9884  004A                     picc_select@validBits:	
  9885                           ; 1 bytes @ 0x2A
  9886                           
  9887  004A                     picc_authenticate@blockAddr:	
  9888                           ; 1 bytes @ 0x2A
  9889                           
  9890  004A                     mifare_read@buffer:	
  9891                           ; 1 bytes @ 0x2A
  9892                           
  9893  004A                     modbus_response_command@tempData:	
  9894                           ; 1 bytes @ 0x2A
  9895                           
  9896  004A                     modbus_response_write_clib_data@startAddr:	
  9897                           ; 2 bytes @ 0x2A
  9898                           
  9899  004A                     pcd_mifare_transceive@sendData:	
  9900                           ; 2 bytes @ 0x2A
  9901                           
  9902                           
  9903                           ; 2 bytes @ 0x2A
  9904  004A                     	ds	1
  9905  004B                     ??_picc_select:	
  9906  004B                     ??_flow_sampling_process:	
  9907                           ; 1 bytes @ 0x2B
  9908                           
  9909  004B                     picc_req_a_or_wakeup_a@bufferSize:	
  9910                           ; 1 bytes @ 0x2B
  9911                           
  9912  004B                     mifare_read@bufferSize:	
  9913                           ; 1 bytes @ 0x2B
  9914                           
  9915  004B                     picc_authenticate@key:	
  9916                           ; 1 bytes @ 0x2B
  9917                           
  9918                           
  9919                           ; 2 bytes @ 0x2B
  9920  004B                     	ds	1
  9921  004C                     ??_mifare_read:	
  9922  004C                     ??_picc_req_a_or_wakeup_a:	
  9923                           ; 1 bytes @ 0x2C
  9924                           
  9925  004C                     key_process_up_down_variable_speed_ex@key:	
  9926                           ; 1 bytes @ 0x2C
  9927                           
  9928  004C                     modbus_response_write_clib_data@buf:	
  9929                           ; 1 bytes @ 0x2C
  9930                           
  9931  004C                     flow_sampling_process@i:	
  9932                           ; 1 bytes @ 0x2C
  9933                           
  9934  004C                     pcd_mifare_transceive@sendLen:	
  9935                           ; 1 bytes @ 0x2C
  9936                           
  9937                           
  9938                           ; 1 bytes @ 0x2C
  9939  004C                     	ds	1
  9940  004D                     key_process_up_down_variable_speed_ex@change:	
  9941  004D                     modbus_response_write_clib_data@pmdbs:	
  9942                           ; 1 bytes @ 0x2D
  9943                           
  9944  004D                     picc_authenticate@uid:	
  9945                           ; 1 bytes @ 0x2D
  9946                           
  9947  004D                     pcd_mifare_transceive@acceptTimeout:	
  9948                           ; 1 bytes @ 0x2D
  9949                           
  9950  004D                     picc_halt_a@buffer:	
  9951                           ; 1 bytes @ 0x2D
  9952                           
  9953                           
  9954                           ; 4 bytes @ 0x2D
  9955  004D                     	ds	1
  9956  004E                     ??_picc_authenticate:	
  9957  004E                     ??_pcd_mifare_transceive:	
  9958                           ; 1 bytes @ 0x2E
  9959                           
  9960  004E                     ?_modbus_response_process:	
  9961                           ; 1 bytes @ 0x2E
  9962                           
  9963  004E                     key_process_up_down_variable_speed_ex@speed:	
  9964                           ; 1 bytes @ 0x2E
  9965                           
  9966  004E                     modbus_response_process@rlen:	
  9967                           ; 2 bytes @ 0x2E
  9968                           
  9969                           
  9970                           ; 2 bytes @ 0x2E
  9971  004E                     	ds	1
  9972  004F                     mifare_read@blockAddr:	
  9973                           
  9974                           ; 1 bytes @ 0x2F
  9975  004F                     	ds	1
  9976  0050                     ??_modbus_response_process:	
  9977  0050                     ui_key_process_cancel@ret:	
  9978                           ; 1 bytes @ 0x30
  9979                           
  9980  0050                     picc_req_a_or_wakeup_a@cmd:	
  9981                           ; 1 bytes @ 0x30
  9982                           
  9983  0050                     mifare_read@result:	
  9984                           ; 1 bytes @ 0x30
  9985                           
  9986  0050                     key_process_up_down_variable_speed_ex@t32:	
  9987                           ; 1 bytes @ 0x30
  9988                           
  9989                           
  9990                           ; 2 bytes @ 0x30
  9991  0050                     	ds	1
  9992  0051                     modbus_response_process@resp:	
  9993  0051                     picc_req_a_or_wakeup_a@__cmd:	
  9994                           ; 1 bytes @ 0x31
  9995                           
  9996  0051                     picc_halt_a@result:	
  9997                           ; 1 bytes @ 0x31
  9998                           
  9999  0051                     picc_authenticate@sendData:	
 10000                           ; 1 bytes @ 0x31
 10001                           
 10002                           
 10003                           ; 12 bytes @ 0x31
 10004  0051                     	ds	1
 10005  0052                     key_process_up_down_variable_speed_ex@val:	
 10006  0052                     modbus_response_process@pmdbs:	
 10007                           ; 1 bytes @ 0x32
 10008                           
 10009  0052                     picc_req_a_or_wakeup_a@status:	
 10010                           ; 1 bytes @ 0x32
 10011                           
 10012                           
 10013                           ; 1 bytes @ 0x32
 10014  0052                     	ds	1
 10015  0053                     ??_ui_key_process_up_down:	
 10016  0053                     modbus_response_process@rbuf:	
 10017                           ; 1 bytes @ 0x33
 10018                           
 10019  0053                     picc_req_a_or_wakeup_a@validBits:	
 10020                           ; 1 bytes @ 0x33
 10021                           
 10022  0053                     pcd_mifare_transceive@cmdBuffer:	
 10023                           ; 1 bytes @ 0x33
 10024                           
 10025                           
 10026                           ; 18 bytes @ 0x33
 10027  0053                     	ds	1
 10028  0054                     ??_mfapi_is_new_card_present:	
 10029  0054                     ui_key_process_up_down@up:	
 10030                           ; 1 bytes @ 0x34
 10031                           
 10032                           
 10033                           ; 1 bytes @ 0x34
 10034  0054                     	ds	1
 10035  0055                     ??_ui_key_process:	
 10036                           
 10037                           ; 1 bytes @ 0x35
 10038  0055                     	ds	1
 10039  0056                     ui_key_process@t16:	
 10040                           
 10041                           ; 2 bytes @ 0x36
 10042  0056                     	ds	1
 10043  0057                     mfapi_is_new_card_present@cmd:	
 10044                           
 10045                           ; 1 bytes @ 0x37
 10046  0057                     	ds	1
 10047  0058                     mfapi_is_new_card_present@bufferATQA:	
 10048                           
 10049                           ; 2 bytes @ 0x38
 10050  0058                     	ds	2
 10051  005A                     mfapi_is_new_card_present@result:	
 10052                           
 10053                           ; 1 bytes @ 0x3A
 10054  005A                     	ds	1
 10055  005B                     mfapi_is_new_card_present@bufferSize:	
 10056                           
 10057                           ; 1 bytes @ 0x3B
 10058  005B                     	ds	2
 10059  005D                     picc_authenticate@command:	
 10060                           
 10061                           ; 1 bytes @ 0x3D
 10062  005D                     	ds	1
 10063  005E                     picc_authenticate@waitIRQ:	
 10064                           
 10065                           ; 1 bytes @ 0x3E
 10066  005E                     	ds	1
 10067  005F                     picc_authenticate@i:	
 10068                           
 10069                           ; 1 bytes @ 0x3F
 10070  005F                     	ds	1
 10071  0060                     ??_rfid_comm_process_read_inc:	
 10072  0060                     ??_rfid_comm_process_read_dec:	
 10073                           ; 1 bytes @ 0x40
 10074                           
 10075                           
 10076                           ; 1 bytes @ 0x40
 10077  0060                     	ds	3
 10078  0063                     rfid_comm_process_read_inc@ret:	
 10079  0063                     rfid_comm_process_read_dec@ret:	
 10080                           ; 1 bytes @ 0x43
 10081                           
 10082                           
 10083                           ; 1 bytes @ 0x43
 10084  0063                     	ds	2
 10085  0065                     pcd_mifare_transceive@waitIRq:	
 10086                           
 10087                           ; 1 bytes @ 0x45
 10088  0065                     	ds	1
 10089  0066                     pcd_mifare_transceive@validBits:	
 10090                           
 10091                           ; 1 bytes @ 0x46
 10092  0066                     	ds	1
 10093  0067                     pcd_mifare_transceive@cmdBufferSize:	
 10094                           
 10095                           ; 1 bytes @ 0x47
 10096  0067                     	ds	1
 10097  0068                     pcd_mifare_transceive@result:	
 10098                           
 10099                           ; 1 bytes @ 0x48
 10100  0068                     	ds	1
 10101  0069                     ?_mifare_write:	
 10102  0069                     mifare_write@buffer:	
 10103                           ; 1 bytes @ 0x49
 10104                           
 10105                           
 10106                           ; 1 bytes @ 0x49
 10107  0069                     	ds	1
 10108  006A                     mifare_write@bufferSize:	
 10109                           
 10110                           ; 1 bytes @ 0x4A
 10111  006A                     	ds	1
 10112  006B                     ??_mifare_write:	
 10113                           
 10114                           ; 1 bytes @ 0x4B
 10115  006B                     	ds	2
 10116  006D                     rfid_comm_process_read_header@ret:	
 10117  006D                     rfid_comm_process_recharge@ret:	
 10118                           ; 1 bytes @ 0x4D
 10119                           
 10120                           
 10121                           ; 1 bytes @ 0x4D
 10122  006D                     	ds	1
 10123  006E                     rfid_comm_process_recharge@stpInc:	
 10124  006E                     rfid_comm_process_read_header@stp:	
 10125                           ; 1 bytes @ 0x4E
 10126                           
 10127                           
 10128                           ; 2 bytes @ 0x4E
 10129  006E                     	ds	1
 10130  006F                     rfid_comm_process_recharge@stpDec:	
 10131                           
 10132                           ; 1 bytes @ 0x4F
 10133  006F                     	ds	1
 10134                           
 10135                           	psect	maintext
 10136  1AB9                     __pmaintext:	
 10137 ;;
 10138 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 10139 ;;
 10140 ;; *************** function _main *****************
 10141 ;; Defined at:
 10142 ;;		line 55 in file "main.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;		None
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  tm              1    2[BANK3 ] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;                  1    wreg      void 
 10149 ;; Registers used:
 10150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : B1F/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10157 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 10158 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 10159 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0
 10160 ;;Total ram usage:        2 bytes
 10161 ;; Hardware stack levels required when called:   12
 10162 ;; This function calls:
 10163 ;;		_data_api_calibration_table_data_init
 10164 ;;		_data_api_flash_process
 10165 ;;		_data_api_system_data_init
 10166 ;;		_delay
 10167 ;;		_event_door_monitor
 10168 ;;		_event_power_monitor
 10169 ;;		_flow_sampling_process
 10170 ;;		_in_app_vavle_on
 10171 ;;		_m_system_init
 10172 ;;		_mfapi_pcd_init
 10173 ;;		_modbus_response_process
 10174 ;;		_my_uart1_received_ready
 10175 ;;		_rfid_comm_process
 10176 ;;		_timer0_irq_callback
 10177 ;;		_timer1_irq_callback
 10178 ;;		_ui_disp_menu
 10179 ;;		_ui_key_process
 10180 ;;		_ui_start_display
 10181 ;; This function is called by:
 10182 ;;		Startup code after reset
 10183 ;; This function uses a non-reentrant model
 10184 ;;
 10185                           
 10186                           
 10187                           ;psect for function _main
 10188  1AB9                     _main:	
 10189                           
 10190                           ;main.c: 57: uint8_t tm=0;
 10191                           
 10192                           ;incstack = 0
 10193                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10194  1AB9  0023               	movlb	3	; select bank3
 10195  1ABA  01D4               	clrf	main@tm^(0+384)
 10196                           
 10197                           ;main.c: 58: m_system_init();
 10198  1ABB  31BC  24BA  319A   	fcall	_m_system_init
 10199                           
 10200                           ;main.c: 59: ui_start_display();
 10201  1ABE  31B7  2777  319A   	fcall	_ui_start_display
 10202                           
 10203                           ;main.c: 60: do{PIE1bits.RC1IE = 0;}while(0);;
 10204  1AC1  0021               	movlb	1	; select bank1
 10205  1AC2  1291               	bcf	17,5	;volatile
 10206                           
 10207                           ;main.c: 62: data_api_system_data_init();
 10208  1AC3  31A9  2155  319A   	fcall	_data_api_system_data_init
 10209                           
 10210                           ;main.c: 63: data_api_calibration_table_data_init();
 10211  1AC6  319C  2460  319A   	fcall	_data_api_calibration_table_data_init
 10212                           
 10213                           ;main.c: 65: mfapi_pcd_init();
 10214  1AC9  31BB  231D  319A   	fcall	_mfapi_pcd_init
 10215                           
 10216                           ;main.c: 67: my_uart1_received_ready();
 10217  1ACC  31BB  2301  319A   	fcall	_my_uart1_received_ready
 10218                           
 10219                           ;main.c: 68: calVolumeTimeSec=0;
 10220  1ACF  0022               	movlb	2	; select bank2
 10221  1AD0  01C1               	clrf	_calVolumeTimeSec^(0+256)
 10222                           
 10223                           ;main.c: 69: Event &= ~(uint8_t)(0x01<<7);
 10224  1AD1  307F               	movlw	127
 10225  1AD2  0023               	movlb	3	; select bank3
 10226  1AD3  00D3               	movwf	??_main^(0+384)
 10227  1AD4  0853               	movf	??_main^(0+384),w
 10228  1AD5  0021               	movlb	1	; select bank1
 10229  1AD6  05C8               	andwf	_Event^(0+128),f
 10230                           
 10231                           ;main.c: 70: menu=mainSystemData.menuBackUp;
 10232  1AD7  0024               	movlb	4	; select bank4
 10233  1AD8  0842               	movf	(_mainSystemData^(0+512)+34),w
 10234  1AD9  0023               	movlb	3	; select bank3
 10235  1ADA  00D3               	movwf	??_main^(0+384)
 10236  1ADB  0853               	movf	??_main^(0+384),w
 10237  1ADC  0021               	movlb	1	; select bank1
 10238  1ADD  00C3               	movwf	_menu^(0+128)
 10239                           
 10240                           ;main.c: 71: bkupMenu=menu;
 10241  1ADE  0843               	movf	_menu^(0+128),w
 10242  1ADF  0023               	movlb	3	; select bank3
 10243  1AE0  00D3               	movwf	??_main^(0+384)
 10244  1AE1  0853               	movf	??_main^(0+384),w
 10245  1AE2  0021               	movlb	1	; select bank1
 10246  1AE3  00C2               	movwf	_bkupMenu^(0+128)
 10247  1AE4                     l17145:	
 10248                           ;main.c: 72: while (1){
 10249                           
 10250                           
 10251                           ;main.c: 73: event_door_monitor();
 10252  1AE4  31BA  22E0  319A   	fcall	_event_door_monitor
 10253                           
 10254                           ;main.c: 74: event_power_monitor();
 10255  1AE7  31BB  237F  319A   	fcall	_event_power_monitor
 10256                           
 10257                           ;main.c: 75: if(Event & (0x01<<4)){timer0_irq_callback();}
 10258  1AEA  0021               	movlb	1	; select bank1
 10259  1AEB  1E48               	btfss	_Event^(0+128),4
 10260  1AEC  2AF0               	goto	l17153
 10261  1AED  31B2  22CD  319A   	fcall	_timer0_irq_callback
 10262  1AF0                     l17153:	
 10263                           
 10264                           ;main.c: 76: if(Event & (0x01<<5)){timer1_irq_callback();}
 10265  1AF0  0021               	movlb	1	; select bank1
 10266  1AF1  1EC8               	btfss	_Event^(0+128),5
 10267  1AF2  2AF6               	goto	l17157
 10268  1AF3  3198  2003  319A   	fcall	_timer1_irq_callback
 10269  1AF6                     l17157:	
 10270                           
 10271                           ;main.c: 77: if(Event & (0x01<<0)){rfid_comm_process(); }
 10272  1AF6  0021               	movlb	1	; select bank1
 10273  1AF7  1C48               	btfss	_Event^(0+128),0
 10274  1AF8  2AFC               	goto	l17161
 10275  1AF9  319E  261C  319A   	fcall	_rfid_comm_process
 10276  1AFC                     l17161:	
 10277                           
 10278                           ;main.c: 78: if(Event & (0x01<<1)){
 10279  1AFC  0021               	movlb	1	; select bank1
 10280  1AFD  1CC8               	btfss	_Event^(0+128),1
 10281  1AFE  2B1C               	goto	l17175
 10282                           
 10283                           ;main.c: 79: tm++;
 10284  1AFF  3001               	movlw	1
 10285  1B00  0023               	movlb	3	; select bank3
 10286  1B01  00D3               	movwf	??_main^(0+384)
 10287  1B02  0853               	movf	??_main^(0+384),w
 10288  1B03  07D4               	addwf	main@tm^(0+384),f
 10289                           
 10290                           ;main.c: 80: if(tm>=10){
 10291  1B04  300A               	movlw	10
 10292  1B05  0254               	subwf	main@tm^(0+384),w
 10293  1B06  1C03               	skipc
 10294  1B07  2B19               	goto	l17173
 10295                           
 10296                           ;main.c: 81: tm=0;
 10297  1B08  01D4               	clrf	main@tm^(0+384)
 10298                           
 10299                           ;main.c: 83: if(deviceStatus.bits.noEnough){
 10300  1B09  0021               	movlb	1	; select bank1
 10301  1B0A  18C0               	btfsc	_deviceStatus^(0+128),1
 10302  1B0B  2B14               	goto	L1
 10303                           
 10304                           ;main.c: 86: else if(warningStatus.bits.moneyLowWarning){
 10305                           
 10306                           ;main.c: 85: }
 10307                           
 10308                           ;main.c: 84: do { LATAbits.LATA0 = 1; } while(0);;
 10309  1B0C  0022               	movlb	2	; select bank2
 10310  1B0D  1E3A               	btfss	_warningStatus^(0+256),4
 10311  1B0E  2B18               	goto	l2596
 10312                           
 10313                           ;main.c: 87: do { LATAbits.LATA0 = ~LATAbits.LATA0; } while(0);;
 10314  1B0F  1003               	clrc
 10315  1B10  1C0C               	btfss	12,0	;volatile
 10316  1B11  1403               	setc
 10317  1B12  1C03               	btfss	3,0
 10318  1B13  2B17               	goto	u16300
 10319  1B14                     L1:	
 10320  1B14  0022               	movlb	2	; select bank2
 10321  1B15  140C               	bsf	12,0	;volatile
 10322  1B16  2B19               	goto	l17173
 10323  1B17                     u16300:	
 10324  1B17  0022               	movlb	2	; select bank2
 10325  1B18                     l2596:	
 10326                           ;main.c: 89: do { LATAbits.LATA0 = 0; } while(0);;
 10327                           
 10328                           ;main.c: 88: }else {
 10329                           
 10330  1B18  100C               	bcf	12,0	;volatile
 10331  1B19                     l17173:	
 10332                           
 10333                           ;main.c: 90: }
 10334                           ;main.c: 91: }
 10335                           ;main.c: 92: flow_sampling_process();
 10336  1B19  31AF  2709  319A   	fcall	_flow_sampling_process
 10337  1B1C                     l17175:	
 10338                           
 10339                           ;main.c: 93: }
 10340                           ;main.c: 94: if(Event & (0x01<<6)){
 10341  1B1C  0021               	movlb	1	; select bank1
 10342  1B1D  1F48               	btfss	_Event^(0+128),6
 10343  1B1E  2B2F               	goto	l17183
 10344                           
 10345                           ;main.c: 95: if(flashOpStr.op==enFLASH_NOTHING){
 10346  1B1F  0022               	movlb	2	; select bank2
 10347  1B20  0857               	movf	(_flashOpStr^(0+256)+20),w
 10348  1B21  1D03               	btfss	3,2
 10349  1B22  2B2F               	goto	l17183
 10350                           
 10351                           ;main.c: 96: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10352  1B23  3002               	movlw	2
 10353  1B24  0023               	movlb	3	; select bank3
 10354  1B25  00D3               	movwf	??_main^(0+384)
 10355  1B26  0853               	movf	??_main^(0+384),w
 10356  1B27  0022               	movlb	2	; select bank2
 10357  1B28  00D7               	movwf	(_flashOpStr^(0+256)+20)
 10358                           
 10359                           ;main.c: 98: Event &= ~(0x01<<6);
 10360  1B29  30BF               	movlw	191
 10361  1B2A  0023               	movlb	3	; select bank3
 10362  1B2B  00D3               	movwf	??_main^(0+384)
 10363  1B2C  0853               	movf	??_main^(0+384),w
 10364  1B2D  0021               	movlb	1	; select bank1
 10365  1B2E  05C8               	andwf	_Event^(0+128),f
 10366  1B2F                     l17183:	
 10367                           
 10368                           ;main.c: 99: }
 10369                           ;main.c: 100: }
 10370                           ;main.c: 101: if(Event & (0x01<<3)){
 10371  1B2F  0021               	movlb	1	; select bank1
 10372  1B30  1DC8               	btfss	_Event^(0+128),3
 10373  1B31  2B35               	goto	l17187
 10374                           
 10375                           ;main.c: 102: ui_disp_menu();
 10376  1B32  319F  2707  319A   	fcall	_ui_disp_menu
 10377  1B35                     l17187:	
 10378                           
 10379                           ;main.c: 103: }
 10380                           ;main.c: 104: if(Event & (0x01<<2)){
 10381  1B35  0021               	movlb	1	; select bank1
 10382  1B36  1D48               	btfss	_Event^(0+128),2
 10383  1B37  2B56               	goto	l17197
 10384                           
 10385                           ;main.c: 105: do{PIE1bits.RC1IE = 0;}while(0);
 10386  1B38  1291               	bcf	17,5	;volatile
 10387                           
 10388                           ;main.c: 106: modbus_response_process(uart1Buffer,uart1ReceivedCount);
 10389  1B39  0022               	movlb	2	; select bank2
 10390  1B3A  082D               	movf	(_uart1ReceivedCount+1)^(0+256),w
 10391  1B3B  0020               	movlb	0	; select bank0
 10392  1B3C  00CF               	movwf	modbus_response_process@rlen+1
 10393  1B3D  0022               	movlb	2	; select bank2
 10394  1B3E  082C               	movf	_uart1ReceivedCount^(0+256),w
 10395  1B3F  0020               	movlb	0	; select bank0
 10396  1B40  00CE               	movwf	modbus_response_process@rlen
 10397  1B41  30A0               	movlw	160
 10398  1B42  31AB  2341  319A   	fcall	_modbus_response_process
 10399                           
 10400                           ;main.c: 107: Event &= ~(0x01<<2);
 10401  1B45  30FB               	movlw	251
 10402  1B46  0023               	movlb	3	; select bank3
 10403  1B47  00D3               	movwf	??_main^(0+384)
 10404  1B48  0853               	movf	??_main^(0+384),w
 10405  1B49  0021               	movlb	1	; select bank1
 10406  1B4A  05C8               	andwf	_Event^(0+128),f
 10407                           
 10408                           ;main.c: 108: delay(1847);
 10409  1B4B  3037               	movlw	55
 10410  1B4C  00F3               	movwf	delay@t
 10411  1B4D  3007               	movlw	7
 10412  1B4E  00F4               	movwf	delay@t+1
 10413  1B4F  31BB  2363  319A   	fcall	_delay
 10414                           
 10415                           ;main.c: 109: my_uart1_received_ready();
 10416  1B52  31BB  2301  319A   	fcall	_my_uart1_received_ready
 10417                           
 10418                           ;main.c: 110: }
 10419  1B55  2B59               	goto	l17199
 10420  1B56                     l17197:	
 10421                           
 10422                           ;main.c: 111: else {
 10423                           ;main.c: 112: ui_key_process();
 10424  1B56  31AE  2619  319A   	fcall	_ui_key_process
 10425  1B59                     l17199:	
 10426                           
 10427                           ;main.c: 113: }
 10428                           ;main.c: 114: if(bkupMenu!=mainSystemData.menuBackUp){
 10429  1B59  0024               	movlb	4	; select bank4
 10430  1B5A  0842               	movf	(_mainSystemData^(0+512)+34),w
 10431  1B5B  0021               	movlb	1	; select bank1
 10432  1B5C  0642               	xorwf	_bkupMenu^(0+128),w
 10433  1B5D  1903               	skipnz
 10434  1B5E  2B6B               	goto	l17207
 10435                           
 10436                           ;main.c: 115: if(flashOpStr.op == enFLASH_NOTHING){
 10437  1B5F  0022               	movlb	2	; select bank2
 10438  1B60  0857               	movf	(_flashOpStr^(0+256)+20),w
 10439  1B61  1D03               	btfss	3,2
 10440  1B62  2B6B               	goto	l17207
 10441                           
 10442                           ;main.c: 116: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10443  1B63  3002               	movlw	2
 10444  1B64  0023               	movlb	3	; select bank3
 10445  1B65  00D3               	movwf	??_main^(0+384)
 10446  1B66  0853               	movf	??_main^(0+384),w
 10447  1B67  0022               	movlb	2	; select bank2
 10448  1B68  00D7               	movwf	(_flashOpStr^(0+256)+20)
 10449                           
 10450                           ;main.c: 117: flashOpStr.len=0;
 10451  1B69  01C5               	clrf	(_flashOpStr^(0+256)+2)
 10452  1B6A  01C6               	clrf	((_flashOpStr+1)^(0+256)+2)
 10453  1B6B                     l17207:	
 10454                           
 10455                           ;main.c: 118: }
 10456                           ;main.c: 119: }
 10457                           ;main.c: 120: if(flashOpStr.op!=enFLASH_NOTHING){
 10458  1B6B  0022               	movlb	2	; select bank2
 10459  1B6C  0857               	movf	(_flashOpStr^(0+256)+20),w
 10460  1B6D  1903               	btfsc	3,2
 10461  1B6E  2B74               	goto	l17213
 10462                           
 10463                           ;main.c: 123: data_api_flash_process();
 10464  1B6F  31BD  25D9  319A   	fcall	_data_api_flash_process
 10465                           
 10466                           ;main.c: 124: flashOpStr.op = enFLASH_NOTHING;
 10467  1B72  0022               	movlb	2	; select bank2
 10468  1B73  01D7               	clrf	(_flashOpStr^(0+256)+20)
 10469  1B74                     l17213:	
 10470                           
 10471                           ;main.c: 125: }
 10472                           ;main.c: 126: if(deviceStatus.bits.noEnough==0){
 10473  1B74  0021               	movlb	1	; select bank1
 10474  1B75  18C0               	btfsc	_deviceStatus^(0+128),1
 10475  1B76  2B7B               	goto	l17217
 10476                           
 10477                           ;main.c: 127: in_app_vavle_on(ON_REASON_HA);
 10478  1B77  3003               	movlw	3
 10479  1B78  31BE  26BF  319A   	fcall	_in_app_vavle_on
 10480  1B7B                     l17217:	
 10481                           
 10482                           ;main.c: 128: }
 10483                           ;main.c: 129: if(noKeyEventTimeOut==0 ){
 10484  1B7B  0022               	movlb	2	; select bank2
 10485  1B7C  086C               	movf	_noKeyEventTimeOut^(0+256),w
 10486  1B7D  1D03               	btfss	3,2
 10487  1B7E  2AE4               	goto	l17145
 10488                           
 10489                           ;main.c: 130: if(menu!=0x50){
 10490  1B7F  3050               	movlw	80
 10491  1B80  0021               	movlb	1	; select bank1
 10492  1B81  0643               	xorwf	_menu^(0+128),w
 10493  1B82  1903               	btfsc	3,2
 10494  1B83  2AE4               	goto	l17145
 10495                           
 10496                           ;main.c: 131: menu=bkupMenu;
 10497  1B84  0842               	movf	_bkupMenu^(0+128),w
 10498  1B85  0023               	movlb	3	; select bank3
 10499  1B86  00D3               	movwf	??_main^(0+384)
 10500  1B87  0853               	movf	??_main^(0+384),w
 10501  1B88  0021               	movlb	1	; select bank1
 10502  1B89  00C3               	movwf	_menu^(0+128)
 10503  1B8A  2AE4               	goto	l17145
 10504  1B8B                     __end_of_main:	
 10505                           
 10506                           	psect	text1
 10507  3777                     __ptext1:	
 10508 ;; *************** function _ui_start_display *****************
 10509 ;; Defined at:
 10510 ;;		line 118 in file "src/api/ui.c"
 10511 ;; Parameters:    Size  Location     Type
 10512 ;;		None
 10513 ;; Auto vars:     Size  Location     Type
 10514 ;;  dly             1   15[BANK0 ] unsigned char 
 10515 ;; Return value:  Size  Location     Type
 10516 ;;                  1    wreg      void 
 10517 ;; Registers used:
 10518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10519 ;; Tracked objects:
 10520 ;;		On entry : 0/0
 10521 ;;		On exit  : 0/0
 10522 ;;		Unchanged: 0/0
 10523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10526 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 10528 ;;Total ram usage:        3 bytes
 10529 ;; Hardware stack levels used:    1
 10530 ;; Hardware stack levels required when called:    6
 10531 ;; This function calls:
 10532 ;;		_lcd_disp_all
 10533 ;;		_lcd_disp_str
 10534 ;;		_ui_disp_str_num
 10535 ;; This function is called by:
 10536 ;;		_main
 10537 ;; This function uses a non-reentrant model
 10538 ;;
 10539                           
 10540                           
 10541                           ;psect for function _ui_start_display
 10542  3777                     _ui_start_display:	
 10543                           
 10544                           ;ui.c: 119: uint8_t dly=9;
 10545                           
 10546                           ;incstack = 0
 10547                           ; Regs used in _ui_start_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10548  3777  3009               	movlw	9
 10549  3778  0020               	movlb	0	; select bank0
 10550  3779  00AD               	movwf	??_ui_start_display
 10551  377A  082D               	movf	??_ui_start_display,w
 10552  377B  00AF               	movwf	ui_start_display@dly
 10553                           
 10554                           ;ui.c: 120: lcd_disp_all(0x00);;
 10555  377C  3000               	movlw	0
 10556  377D  31BE  2665  31B7   	fcall	_lcd_disp_all
 10557  3780                     l385:	
 10558                           ;ui.c: 121: while((Event & (0x01<<5))==0);
 10559                           
 10560  3780  0021               	movlb	1	; select bank1
 10561  3781  1EC8               	btfss	_Event^(0+128),5
 10562  3782  2F80               	goto	l385
 10563                           
 10564                           ;ui.c: 122: Event &= ~(0x01<<5);
 10565  3783  30DF               	movlw	223
 10566  3784  0020               	movlb	0	; select bank0
 10567  3785  00AD               	movwf	??_ui_start_display
 10568  3786  082D               	movf	??_ui_start_display,w
 10569  3787  0021               	movlb	1	; select bank1
 10570  3788  05C8               	andwf	_Event^(0+128),f
 10571                           
 10572                           ;ui.c: 123: lcd_disp_str((uint8_t*) " -hell0-");
 10573  3789  30D9               	movlw	low (STR_1| (0+32768))
 10574  378A  0020               	movlb	0	; select bank0
 10575  378B  00A2               	movwf	lcd_disp_str@str
 10576  378C  30B8               	movlw	high (STR_1| (0+32768))
 10577  378D  00A3               	movwf	lcd_disp_str@str+1
 10578  378E  31A8  20C5  31B7   	fcall	_lcd_disp_str
 10579  3791                     l388:	
 10580                           ;ui.c: 124: while((Event & (0x01<<5))==0);
 10581                           
 10582  3791  0021               	movlb	1	; select bank1
 10583  3792  1EC8               	btfss	_Event^(0+128),5
 10584  3793  2F91               	goto	l388
 10585                           
 10586                           ;ui.c: 125: Event &= ~(0x01<<5);
 10587  3794  30DF               	movlw	223
 10588  3795  0020               	movlb	0	; select bank0
 10589  3796  00AD               	movwf	??_ui_start_display
 10590  3797  082D               	movf	??_ui_start_display,w
 10591  3798  0021               	movlb	1	; select bank1
 10592  3799  05C8               	andwf	_Event^(0+128),f
 10593  379A                     l391:	
 10594                           ;ui.c: 127: while(dly>0){
 10595                           
 10596  379A  0020               	movlb	0	; select bank0
 10597  379B  082F               	movf	ui_start_display@dly,w
 10598  379C  1903               	btfsc	3,2
 10599  379D  0008               	return
 10600                           
 10601                           ;ui.c: 128: ui_disp_str_num((uint8_t*)" cs700", dly);
 10602  379E  301E               	movlw	low (STR_2| (0+32768))
 10603  379F  0020               	movlb	0	; select bank0
 10604  37A0  00A7               	movwf	ui_disp_str_num@str
 10605  37A1  30B9               	movlw	high (STR_2| (0+32768))
 10606  37A2  00A8               	movwf	ui_disp_str_num@str+1
 10607  37A3  082F               	movf	ui_start_display@dly,w
 10608  37A4  00AD               	movwf	??_ui_start_display
 10609  37A5  01AE               	clrf	??_ui_start_display+1
 10610  37A6  082D               	movf	??_ui_start_display,w
 10611  37A7  00A9               	movwf	ui_disp_str_num@num
 10612  37A8  082E               	movf	??_ui_start_display+1,w
 10613  37A9  00AA               	movwf	ui_disp_str_num@num+1
 10614  37AA  31A5  2531  31B7   	fcall	_ui_disp_str_num
 10615  37AD                     l393:	
 10616                           ;ui.c: 130: while((Event & (0x01<<5))==0);
 10617                           
 10618  37AD  0021               	movlb	1	; select bank1
 10619  37AE  1EC8               	btfss	_Event^(0+128),5
 10620  37AF  2FAD               	goto	l393
 10621                           
 10622                           ;ui.c: 131: Event &= ~(0x01<<5);
 10623  37B0  30DF               	movlw	223
 10624  37B1  0020               	movlb	0	; select bank0
 10625  37B2  00AD               	movwf	??_ui_start_display
 10626  37B3  082D               	movf	??_ui_start_display,w
 10627  37B4  0021               	movlb	1	; select bank1
 10628  37B5  05C8               	andwf	_Event^(0+128),f
 10629                           
 10630                           ;ui.c: 132: dly--;
 10631  37B6  3001               	movlw	1
 10632  37B7  0020               	movlb	0	; select bank0
 10633  37B8  02AF               	subwf	ui_start_display@dly,f
 10634  37B9  2F9A               	goto	l391
 10635  37BA                     __end_of_ui_start_display:	
 10636                           
 10637                           	psect	text2
 10638  2E19                     __ptext2:	
 10639 ;; *************** function _ui_key_process *****************
 10640 ;; Defined at:
 10641 ;;		line 473 in file "src/api/ui_key.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;		None
 10644 ;; Auto vars:     Size  Location     Type
 10645 ;;  t16             2   54[BANK0 ] unsigned int 
 10646 ;; Return value:  Size  Location     Type
 10647 ;;                  1    wreg      void 
 10648 ;; Registers used:
 10649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10650 ;; Tracked objects:
 10651 ;;		On entry : 0/0
 10652 ;;		On exit  : 0/0
 10653 ;;		Unchanged: 0/0
 10654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10656 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10658 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 10659 ;;Total ram usage:        3 bytes
 10660 ;; Hardware stack levels used:    1
 10661 ;; Hardware stack levels required when called:   11
 10662 ;; This function calls:
 10663 ;;		_key_scan_call
 10664 ;;		_ui_disp_menu
 10665 ;;		_ui_key_process_cancel
 10666 ;;		_ui_key_process_down
 10667 ;;		_ui_key_process_enter
 10668 ;;		_ui_key_process_up_down
 10669 ;;		_ui_key_set_process
 10670 ;;		_ui_key_waite_up
 10671 ;;		_ui_key_waite_up_ex
 10672 ;; This function is called by:
 10673 ;;		_main
 10674 ;; This function uses a non-reentrant model
 10675 ;;
 10676                           
 10677                           
 10678                           ;psect for function _ui_key_process
 10679  2E19                     _ui_key_process:	
 10680                           
 10681                           ;ui_key.c: 475: uint16_t t16;
 10682                           ;ui_key.c: 476: key_scan_call();
 10683                           
 10684                           ;incstack = 0
 10685                           ; Regs used in _ui_key_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10686  2E19  31B0  200D  31AE   	fcall	_key_scan_call
 10687                           
 10688                           ;ui_key.c: 477: if(KeyValue)noKeyEventTimeOut=30;
 10689  2E1C  0021               	movlb	1	; select bank1
 10690  2E1D  0841               	movf	_KeyValue^(0+128),w
 10691  2E1E  1903               	btfsc	3,2
 10692  2E1F  2E7A               	goto	l17111
 10693  2E20  301E               	movlw	30
 10694  2E21  0020               	movlb	0	; select bank0
 10695  2E22  00D5               	movwf	??_ui_key_process
 10696  2E23  0855               	movf	??_ui_key_process,w
 10697  2E24  0022               	movlb	2	; select bank2
 10698  2E25  00EC               	movwf	_noKeyEventTimeOut^(0+256)
 10699                           
 10700                           ;ui_key.c: 478: switch (KeyValue) {
 10701  2E26  2E7A               	goto	l17111
 10702  2E27                     l17079:	
 10703                           ;ui_key.c: 479: case (1<<2): ui_key_process_up_down(1);
 10704                           
 10705  2E27  3001               	movlw	1
 10706  2E28  319D  2536  31AE   	fcall	_ui_key_process_up_down
 10707                           
 10708                           ;ui_key.c: 480: break;
 10709  2E2B  2E86               	goto	l17113
 10710  2E2C                     l17081:	
 10711                           ;ui_key.c: 481: case (1<<1):
 10712                           
 10713                           
 10714                           ;ui_key.c: 482: if(menu<3){
 10715  2E2C  3003               	movlw	3
 10716  2E2D  0021               	movlb	1	; select bank1
 10717  2E2E  0243               	subwf	_menu^(0+128),w
 10718  2E2F  1803               	skipnc
 10719  2E30  2E45               	goto	l17089
 10720                           
 10721                           ;ui_key.c: 483: t16=ui_key_waite_up_ex(1000);
 10722  2E31  30E8               	movlw	232
 10723  2E32  0020               	movlb	0	; select bank0
 10724  2E33  00A0               	movwf	ui_key_waite_up_ex@tm
 10725  2E34  3003               	movlw	3
 10726  2E35  00A1               	movwf	ui_key_waite_up_ex@tm+1
 10727  2E36  31B4  24B1  31AE   	fcall	_ui_key_waite_up_ex
 10728  2E39  0020               	movlb	0	; select bank0
 10729  2E3A  0821               	movf	?_ui_key_waite_up_ex+1,w
 10730  2E3B  00D7               	movwf	ui_key_process@t16+1
 10731  2E3C  0820               	movf	?_ui_key_waite_up_ex,w
 10732  2E3D  00D6               	movwf	ui_key_process@t16
 10733                           
 10734                           ;ui_key.c: 484: if(t16>=1000)return;
 10735  2E3E  3003               	movlw	3
 10736  2E3F  0257               	subwf	ui_key_process@t16+1,w
 10737  2E40  30E8               	movlw	232
 10738  2E41  1903               	skipnz
 10739  2E42  0256               	subwf	ui_key_process@t16,w
 10740  2E43  1803               	btfsc	3,0
 10741  2E44  0008               	return
 10742  2E45                     l17089:	
 10743                           
 10744                           ;ui_key.c: 485: }
 10745                           ;ui_key.c: 486: if(!ui_key_process_down())
 10746  2E45  31A3  23F1  31AE   	fcall	_ui_key_process_down
 10747  2E48  3A00               	xorlw	0
 10748  2E49  1D03               	skipz
 10749  2E4A  2E86               	goto	l17113
 10750                           
 10751                           ;ui_key.c: 487: ui_key_process_up_down(0);
 10752  2E4B  3000               	movlw	0
 10753  2E4C  319D  2536  31AE   	fcall	_ui_key_process_up_down
 10754                           
 10755                           ;ui_key.c: 488: break;
 10756  2E4F  2E86               	goto	l17113
 10757  2E50                     l17093:	
 10758                           ;ui_key.c: 489: case (1<<0):
 10759                           
 10760                           
 10761                           ;ui_key.c: 490: __t16=ui_key_waite_up();
 10762  2E50  31B4  241E  31AE   	fcall	_ui_key_waite_up
 10763  2E53  0020               	movlb	0	; select bank0
 10764  2E54  0821               	movf	?_ui_key_waite_up+1,w
 10765  2E55  00F9               	movwf	___t16+1
 10766  2E56  0820               	movf	?_ui_key_waite_up,w
 10767  2E57  00F8               	movwf	___t16
 10768                           
 10769                           ;ui_key.c: 491: if(__t16>=2000){
 10770  2E58  3007               	movlw	7
 10771  2E59  0279               	subwf	___t16+1,w
 10772  2E5A  30D0               	movlw	208
 10773  2E5B  1903               	skipnz
 10774  2E5C  0278               	subwf	___t16,w
 10775  2E5D  1C03               	skipc
 10776  2E5E  2E70               	goto	l17105
 10777                           
 10778                           ;ui_key.c: 492: if(KeyValue==((1<<0)+(1<<2))){
 10779  2E5F  3005               	movlw	5
 10780  2E60  0021               	movlb	1	; select bank1
 10781  2E61  0641               	xorwf	_KeyValue^(0+128),w
 10782  2E62  1D03               	btfss	3,2
 10783  2E63  2E68               	goto	l17101
 10784                           
 10785                           ;ui_key.c: 493: ui_key_process_enter();
 10786  2E64  3188  2022  31AE   	fcall	_ui_key_process_enter
 10787                           
 10788                           ;ui_key.c: 494: }else if(KeyValue==((1<<0))){
 10789  2E67  2E73               	goto	l17107
 10790  2E68                     l17101:	
 10791  2E68  0021               	movlb	1	; select bank1
 10792  2E69  0341               	decf	_KeyValue^(0+128),w
 10793  2E6A  1D03               	btfss	3,2
 10794  2E6B  2E73               	goto	l17107
 10795                           
 10796                           ;ui_key.c: 495: ui_key_set_process();
 10797  2E6C  3196  2630  31AE   	fcall	_ui_key_set_process
 10798                           
 10799                           ;ui_key.c: 497: }
 10800                           ;ui_key.c: 499: }else{
 10801  2E6F  2E73               	goto	l17107
 10802  2E70                     l17105:	
 10803                           
 10804                           ;ui_key.c: 500: ui_key_process_cancel();
 10805  2E70  3191  21D0  31AE   	fcall	_ui_key_process_cancel
 10806  2E73                     l17107:	
 10807                           
 10808                           ;ui_key.c: 502: }
 10809                           ;ui_key.c: 503: KeyValue=0x08;
 10810  2E73  3008               	movlw	8
 10811  2E74  0020               	movlb	0	; select bank0
 10812  2E75  00D5               	movwf	??_ui_key_process
 10813  2E76  0855               	movf	??_ui_key_process,w
 10814  2E77  0021               	movlb	1	; select bank1
 10815  2E78  00C1               	movwf	_KeyValue^(0+128)
 10816                           
 10817                           ;ui_key.c: 506: }
 10818                           
 10819                           ;ui_key.c: 505: default:break;
 10820                           
 10821                           ;ui_key.c: 504: break;
 10822  2E79  2E86               	goto	l17113
 10823  2E7A                     l17111:	
 10824  2E7A  0021               	movlb	1	; select bank1
 10825  2E7B  0841               	movf	_KeyValue^(0+128),w
 10826                           
 10827                           ; Switch size 1, requested type "space"
 10828                           ; Number of cases is 3, Range of values is 1 to 4
 10829                           ; switch strategies available:
 10830                           ; Name         Instructions Cycles
 10831                           ; simple_byte           10     6 (average)
 10832                           ; direct_byte           17     9 (fixed)
 10833                           ; jumptable            263     9 (fixed)
 10834                           ;	Chosen strategy is simple_byte
 10835  2E7C  3A01               	xorlw	1	; case 1
 10836  2E7D  1903               	skipnz
 10837  2E7E  2E50               	goto	l17093
 10838  2E7F  3A03               	xorlw	3	; case 2
 10839  2E80  1903               	skipnz
 10840  2E81  2E2C               	goto	l17081
 10841  2E82  3A06               	xorlw	6	; case 4
 10842  2E83  1903               	skipnz
 10843  2E84  2E27               	goto	l17079
 10844  2E85  2E86               	goto	l17113
 10845  2E86                     l17113:	
 10846                           
 10847                           ;ui_key.c: 508: if (KeyValue){
 10848  2E86  0021               	movlb	1	; select bank1
 10849  2E87  0841               	movf	_KeyValue^(0+128),w
 10850  2E88  1903               	btfsc	3,2
 10851  2E89  0008               	return
 10852                           
 10853                           ;ui_key.c: 509: ui_disp_menu();
 10854  2E8A  319F  2707  31AE   	fcall	_ui_disp_menu
 10855                           
 10856                           ;ui_key.c: 510: ui_key_waite_up();
 10857  2E8D  31B4  241E         	fcall	_ui_key_waite_up
 10858  2E8F  0008               	return
 10859  2E90                     __end_of_ui_key_process:	
 10860                           
 10861                           	psect	text3
 10862  34B1                     __ptext3:	
 10863 ;; *************** function _ui_key_waite_up_ex *****************
 10864 ;; Defined at:
 10865 ;;		line 31 in file "src/api/ui_key.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;  tm              2    0[BANK0 ] unsigned int 
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;  now             2    2[BANK0 ] unsigned int 
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  2    0[BANK0 ] unsigned int 
 10872 ;; Registers used:
 10873 ;;		wreg, status,2, status,0, pclath, cstack
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10882 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 10883 ;;Total ram usage:        4 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    4
 10886 ;; This function calls:
 10887 ;;		_get_globle_ticker
 10888 ;;		_key_scan_call
 10889 ;;		_set_globle_ticker
 10890 ;; This function is called by:
 10891 ;;		_ui_key_process
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _ui_key_waite_up_ex
 10897  34B1                     _ui_key_waite_up_ex:	
 10898                           
 10899                           ;ui_key.c: 33: uint16_t now=0;
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _ui_key_waite_up_ex: [wreg+status,2+status,0+pclath+cstack]
 10903  34B1  0020               	movlb	0	; select bank0
 10904  34B2  01A2               	clrf	ui_key_waite_up_ex@now
 10905  34B3  01A3               	clrf	ui_key_waite_up_ex@now+1
 10906                           
 10907                           ;ui_key.c: 36: key_scan_call();
 10908  34B4  31B0  200D  31B4   	fcall	_key_scan_call
 10909                           
 10910                           ;ui_key.c: 37: if (KeyValue == 0)return 0;
 10911  34B7  0021               	movlb	1	; select bank1
 10912  34B8  0841               	movf	_KeyValue^(0+128),w
 10913  34B9  1D03               	btfss	3,2
 10914  34BA  2CBF               	goto	l14607
 10915  34BB  0020               	movlb	0	; select bank0
 10916  34BC  01A0               	clrf	?_ui_key_waite_up_ex
 10917  34BD  01A1               	clrf	?_ui_key_waite_up_ex+1
 10918  34BE  0008               	return
 10919  34BF                     l14607:	
 10920                           
 10921                           ;ui_key.c: 38: set_globle_ticker(0);
 10922  34BF  3000               	movlw	0
 10923  34C0  00F3               	movwf	set_globle_ticker@tk
 10924  34C1  00F4               	movwf	set_globle_ticker@tk+1
 10925  34C2  31BB  2313  31B4   	fcall	_set_globle_ticker
 10926  34C5                     l606:	
 10927                           ;ui_key.c: 39: do {
 10928                           
 10929                           
 10930                           ;ui_key.c: 40: key_scan_call();
 10931  34C5  31B0  200D  31B4   	fcall	_key_scan_call
 10932                           
 10933                           ;ui_key.c: 41: now = get_globle_ticker();
 10934  34C8  31BB  2371  31B4   	fcall	_get_globle_ticker
 10935  34CB  0874               	movf	?_get_globle_ticker+1,w
 10936  34CC  0020               	movlb	0	; select bank0
 10937  34CD  00A3               	movwf	ui_key_waite_up_ex@now+1
 10938  34CE  0873               	movf	?_get_globle_ticker,w
 10939  34CF  00A2               	movwf	ui_key_waite_up_ex@now
 10940                           
 10941                           ;ui_key.c: 42: if (KeyValue == 0)break;
 10942  34D0  0021               	movlb	1	; select bank1
 10943  34D1  0841               	movf	_KeyValue^(0+128),w
 10944  34D2  1903               	btfsc	3,2
 10945  34D3  2CDD               	goto	l14619
 10946                           
 10947                           ;ui_key.c: 43: if (now > tm)break;
 10948  34D4  0020               	movlb	0	; select bank0
 10949  34D5  0823               	movf	ui_key_waite_up_ex@now+1,w
 10950  34D6  0221               	subwf	ui_key_waite_up_ex@tm+1,w
 10951  34D7  1D03               	skipz
 10952  34D8  2CDB               	goto	u13445
 10953  34D9  0822               	movf	ui_key_waite_up_ex@now,w
 10954  34DA  0220               	subwf	ui_key_waite_up_ex@tm,w
 10955  34DB                     u13445:	
 10956  34DB  1803               	skipnc
 10957  34DC  2CC5               	goto	l606
 10958  34DD                     l14619:	
 10959                           ;ui_key.c: 44: } while (1);
 10960                           
 10961                           
 10962                           ;ui_key.c: 45: return (uint16_t) (now );
 10963  34DD  0020               	movlb	0	; select bank0
 10964  34DE  0823               	movf	ui_key_waite_up_ex@now+1,w
 10965  34DF  00A1               	movwf	?_ui_key_waite_up_ex+1
 10966  34E0  0822               	movf	ui_key_waite_up_ex@now,w
 10967  34E1  00A0               	movwf	?_ui_key_waite_up_ex
 10968  34E2  0008               	return
 10969  34E3                     __end_of_ui_key_waite_up_ex:	
 10970                           
 10971                           	psect	text4
 10972  1630                     __ptext4:	
 10973 ;; *************** function _ui_key_set_process *****************
 10974 ;; Defined at:
 10975 ;;		line 316 in file "src/api/ui_key.c"
 10976 ;; Parameters:    Size  Location     Type
 10977 ;;		None
 10978 ;; Auto vars:     Size  Location     Type
 10979 ;;  ret             1   39[BANK0 ] unsigned char 
 10980 ;; Return value:  Size  Location     Type
 10981 ;;                  1    wreg      void 
 10982 ;; Registers used:
 10983 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10984 ;; Tracked objects:
 10985 ;;		On entry : 0/0
 10986 ;;		On exit  : 0/0
 10987 ;;		Unchanged: 0/0
 10988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10990 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10992 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10993 ;;Total ram usage:        2 bytes
 10994 ;; Hardware stack levels used:    1
 10995 ;; Hardware stack levels required when called:    5
 10996 ;; This function calls:
 10997 ;;		___awdiv
 10998 ;;		___wmul
 10999 ;;		_data_api_calibration_table_data_save
 11000 ;;		_m_mem_cpy_len
 11001 ;; This function is called by:
 11002 ;;		_ui_key_process
 11003 ;; This function uses a non-reentrant model
 11004 ;;
 11005                           
 11006                           
 11007                           ;psect for function _ui_key_set_process
 11008  1630                     _ui_key_set_process:	
 11009                           
 11010                           ;ui_key.c: 318: uint8_t ret=0;
 11011                           
 11012                           ;incstack = 0
 11013                           ; Regs used in _ui_key_set_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11014  1630  0020               	movlb	0	; select bank0
 11015  1631  01C7               	clrf	ui_key_set_process@ret
 11016                           
 11017                           ;ui_key.c: 319: switch(menu){
 11018  1632  2FDE               	goto	l14973
 11019  1633                     l14843:	
 11020                           ;ui_key.c: 326: case 0x40:
 11021                           
 11022                           
 11023                           ;ui_key.c: 327: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->flowRatio));
 11024  1633  301A               	movlw	26
 11025  1634  0022               	movlb	2	; select bank2
 11026  1635  00C3               	movwf	_flashOpStr^(0+256)
 11027  1636  3000               	movlw	0
 11028  1637  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11029                           
 11030                           ;ui_key.c: 329: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11031  1638  3002               	movlw	2
 11032  1639  0020               	movlb	0	; select bank0
 11033  163A  00C6               	movwf	??_ui_key_set_process
 11034  163B  0846               	movf	??_ui_key_set_process,w
 11035  163C  0022               	movlb	2	; select bank2
 11036  163D  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11037                           
 11038                           ;ui_key.c: 330: flashOpStr.len=2;
 11039  163E  3002               	movlw	2
 11040  163F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11041  1640  3000               	movlw	0
 11042  1641  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11043                           
 11044                           ;ui_key.c: 331: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)uiAdjbuf ,2);
 11045  1642  3047               	movlw	low (_flashOpStr+4)
 11046  1643  00F3               	movwf	m_mem_cpy_len@d
 11047  1644  3001               	movlw	high (_flashOpStr+4)
 11048  1645  00F4               	movwf	m_mem_cpy_len@d+1
 11049  1646  3061               	movlw	low _uiAdjbuf
 11050  1647  00F5               	movwf	m_mem_cpy_len@s
 11051  1648  3001               	movlw	high _uiAdjbuf
 11052  1649  00F6               	movwf	m_mem_cpy_len@s+1
 11053  164A  3002               	movlw	2
 11054  164B  0020               	movlb	0	; select bank0
 11055  164C  00C6               	movwf	??_ui_key_set_process
 11056  164D  0846               	movf	??_ui_key_set_process,w
 11057  164E  00F7               	movwf	m_mem_cpy_len@len
 11058  164F  31BD  25A3         	fcall	_m_mem_cpy_len
 11059                           
 11060                           ;ui_key.c: 332: menu=bkupMenu;break;
 11061  1651  0021               	movlb	1	; select bank1
 11062  1652  0842               	movf	_bkupMenu^(0+128),w
 11063  1653  0020               	movlb	0	; select bank0
 11064  1654  00C6               	movwf	??_ui_key_set_process
 11065  1655  0846               	movf	??_ui_key_set_process,w
 11066  1656  0021               	movlb	1	; select bank1
 11067  1657  00C3               	movwf	_menu^(0+128)
 11068  1658  0008               	return
 11069  1659                     l699:	
 11070                           ;ui_key.c: 333: case 0x50:
 11071                           
 11072                           
 11073                           ;ui_key.c: 334: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 11074  1659  0022               	movlb	2	; select bank2
 11075  165A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 11076  165B  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 11077                           
 11078                           ;ui_key.c: 335: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 11079  165C  3061               	movlw	low (_uiAdjbuf| (0+256))
 11080  165D  0086               	movwf	6
 11081  165E  3001               	movlw	1	; select bank2/3
 11082  165F  0087               	movwf	7
 11083  1660  3F40               	moviw [0]fsr1
 11084  1661  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11085  1662  3F41               	moviw [1]fsr1
 11086  1663  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11087                           
 11088                           ;ui_key.c: 336: ret=data_api_calibration_table_data_save(calibLocation,0);
 11089  1664  0020               	movlb	0	; select bank0
 11090  1665  01B3               	clrf	data_api_calibration_table_data_save@single
 11091  1666  0021               	movlb	1	; select bank1
 11092  1667  0845               	movf	_calibLocation^(0+128),w
 11093  1668  3192  22FB  3196   	fcall	_data_api_calibration_table_data_save
 11094  166B  0020               	movlb	0	; select bank0
 11095  166C  00C6               	movwf	??_ui_key_set_process
 11096  166D  0846               	movf	??_ui_key_set_process,w
 11097  166E  00C7               	movwf	ui_key_set_process@ret
 11098                           
 11099                           ;ui_key.c: 338: if(!ret){
 11100  166F  0847               	movf	ui_key_set_process@ret,w
 11101  1670  1903               	btfsc	3,2
 11102  1671  0008               	return
 11103                           
 11104                           ;ui_key.c: 340: }
 11105                           ;ui_key.c: 342: calibLocation=0;
 11106                           
 11107                           ;ui_key.c: 339: break;
 11108  1672  0021               	movlb	1	; select bank1
 11109  1673  01C5               	clrf	_calibLocation^(0+128)
 11110                           
 11111                           ;ui_key.c: 343: menu=bkupMenu;break;
 11112  1674  0842               	movf	_bkupMenu^(0+128),w
 11113  1675  0020               	movlb	0	; select bank0
 11114  1676  00C6               	movwf	??_ui_key_set_process
 11115  1677  0846               	movf	??_ui_key_set_process,w
 11116  1678  0021               	movlb	1	; select bank1
 11117  1679  00C3               	movwf	_menu^(0+128)
 11118  167A  0008               	return
 11119  167B                     l14865:	
 11120                           ;ui_key.c: 344: case 0x60:
 11121                           
 11122                           
 11123                           ;ui_key.c: 345: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->deviceID));
 11124  167B  0022               	movlb	2	; select bank2
 11125  167C  01C3               	clrf	_flashOpStr^(0+256)
 11126  167D  01C4               	clrf	(_flashOpStr+1)^(0+256)
 11127                           
 11128                           ;ui_key.c: 347: flashOpStr.len=4;
 11129  167E  3004               	movlw	4
 11130  167F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11131  1680  3000               	movlw	0
 11132  1681  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11133                           
 11134                           ;ui_key.c: 348: flashOpStr.buf[0]=uiAdjbuf[0];
 11135  1682  0861               	movf	_uiAdjbuf^(0+256),w
 11136  1683  0020               	movlb	0	; select bank0
 11137  1684  00C6               	movwf	??_ui_key_set_process
 11138  1685  0846               	movf	??_ui_key_set_process,w
 11139  1686  0022               	movlb	2	; select bank2
 11140  1687  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11141                           
 11142                           ;ui_key.c: 349: flashOpStr.buf[1]=uiAdjbuf[1];
 11143  1688  0862               	movf	(_uiAdjbuf^(0+256)+1),w
 11144  1689  0020               	movlb	0	; select bank0
 11145  168A  00C6               	movwf	??_ui_key_set_process
 11146  168B  0846               	movf	??_ui_key_set_process,w
 11147  168C  0022               	movlb	2	; select bank2
 11148  168D  00C8               	movwf	(_flashOpStr^(0+256)+5)
 11149                           
 11150                           ;ui_key.c: 350: flashOpStr.buf[2]=0;
 11151  168E  01C9               	clrf	(_flashOpStr^(0+256)+6)
 11152                           
 11153                           ;ui_key.c: 351: flashOpStr.buf[3]=0;
 11154  168F  01CA               	clrf	(_flashOpStr^(0+256)+7)
 11155                           
 11156                           ;ui_key.c: 352: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11157  1690  3002               	movlw	2
 11158  1691  0020               	movlb	0	; select bank0
 11159  1692  00C6               	movwf	??_ui_key_set_process
 11160  1693  0846               	movf	??_ui_key_set_process,w
 11161  1694  0022               	movlb	2	; select bank2
 11162  1695  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11163                           
 11164                           ;ui_key.c: 353: menu=bkupMenu;
 11165  1696  0021               	movlb	1	; select bank1
 11166  1697  0842               	movf	_bkupMenu^(0+128),w
 11167  1698  0020               	movlb	0	; select bank0
 11168  1699  00C6               	movwf	??_ui_key_set_process
 11169  169A  0846               	movf	??_ui_key_set_process,w
 11170  169B  0021               	movlb	1	; select bank1
 11171  169C  00C3               	movwf	_menu^(0+128)
 11172                           
 11173                           ;ui_key.c: 354: break;
 11174  169D  0008               	return
 11175  169E                     l14881:	
 11176                           ;ui_key.c: 355: case 0x70:
 11177                           
 11178                           
 11179                           ;ui_key.c: 356: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->smallFlowNotCa
      +                          re));
 11180  169E  3039               	movlw	57
 11181  169F  0022               	movlb	2	; select bank2
 11182  16A0  00C3               	movwf	_flashOpStr^(0+256)
 11183  16A1  3000               	movlw	0
 11184  16A2  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11185                           
 11186                           ;ui_key.c: 358: flashOpStr.len=1;
 11187  16A3  3001               	movlw	1
 11188  16A4  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11189  16A5  3000               	movlw	0
 11190  16A6  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11191                           
 11192                           ;ui_key.c: 359: flashOpStr.buf[0]=uiAdjbuf[0];
 11193  16A7  0861               	movf	_uiAdjbuf^(0+256),w
 11194  16A8  0020               	movlb	0	; select bank0
 11195  16A9  00C6               	movwf	??_ui_key_set_process
 11196  16AA  0846               	movf	??_ui_key_set_process,w
 11197  16AB  0022               	movlb	2	; select bank2
 11198  16AC  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11199                           
 11200                           ;ui_key.c: 360: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11201  16AD  3002               	movlw	2
 11202  16AE  0020               	movlb	0	; select bank0
 11203  16AF  00C6               	movwf	??_ui_key_set_process
 11204  16B0  0846               	movf	??_ui_key_set_process,w
 11205  16B1  0022               	movlb	2	; select bank2
 11206  16B2  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11207                           
 11208                           ;ui_key.c: 361: menu=bkupMenu;
 11209  16B3  0021               	movlb	1	; select bank1
 11210  16B4  0842               	movf	_bkupMenu^(0+128),w
 11211  16B5  0020               	movlb	0	; select bank0
 11212  16B6  00C6               	movwf	??_ui_key_set_process
 11213  16B7  0846               	movf	??_ui_key_set_process,w
 11214  16B8  0021               	movlb	1	; select bank1
 11215  16B9  00C3               	movwf	_menu^(0+128)
 11216                           
 11217                           ;ui_key.c: 362: break;
 11218  16BA  0008               	return
 11219  16BB                     l14891:	
 11220                           ;ui_key.c: 363: case 0x80:
 11221                           
 11222                           
 11223                           ;ui_key.c: 364: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->price));
 11224  16BB  3012               	movlw	18
 11225  16BC  0022               	movlb	2	; select bank2
 11226  16BD  00C3               	movwf	_flashOpStr^(0+256)
 11227  16BE  3000               	movlw	0
 11228  16BF  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11229                           
 11230                           ;ui_key.c: 366: flashOpStr.len=2;
 11231  16C0  3002               	movlw	2
 11232  16C1  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11233  16C2  3000               	movlw	0
 11234  16C3  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11235                           
 11236                           ;ui_key.c: 367: flashOpStr.buf[0]=uiAdjbuf[0];
 11237  16C4  0861               	movf	_uiAdjbuf^(0+256),w
 11238  16C5  0020               	movlb	0	; select bank0
 11239  16C6  00C6               	movwf	??_ui_key_set_process
 11240  16C7  0846               	movf	??_ui_key_set_process,w
 11241  16C8  0022               	movlb	2	; select bank2
 11242  16C9  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11243                           
 11244                           ;ui_key.c: 368: flashOpStr.buf[1]=uiAdjbuf[1];
 11245  16CA  0862               	movf	(_uiAdjbuf^(0+256)+1),w
 11246  16CB  0020               	movlb	0	; select bank0
 11247  16CC  00C6               	movwf	??_ui_key_set_process
 11248  16CD  0846               	movf	??_ui_key_set_process,w
 11249  16CE  0022               	movlb	2	; select bank2
 11250  16CF  00C8               	movwf	(_flashOpStr^(0+256)+5)
 11251                           
 11252                           ;ui_key.c: 369: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11253  16D0  3002               	movlw	2
 11254  16D1  0020               	movlb	0	; select bank0
 11255  16D2  00C6               	movwf	??_ui_key_set_process
 11256  16D3  0846               	movf	??_ui_key_set_process,w
 11257  16D4  0022               	movlb	2	; select bank2
 11258  16D5  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11259                           
 11260                           ;ui_key.c: 370: menu=bkupMenu;
 11261  16D6  0021               	movlb	1	; select bank1
 11262  16D7  0842               	movf	_bkupMenu^(0+128),w
 11263  16D8  0020               	movlb	0	; select bank0
 11264  16D9  00C6               	movwf	??_ui_key_set_process
 11265  16DA  0846               	movf	??_ui_key_set_process,w
 11266  16DB  0021               	movlb	1	; select bank1
 11267  16DC  00C3               	movwf	_menu^(0+128)
 11268                           
 11269                           ;ui_key.c: 371: break;
 11270  16DD  0008               	return
 11271  16DE                     l14903:	
 11272                           ;ui_key.c: 372: case 0x90:
 11273                           
 11274                           
 11275                           ;ui_key.c: 373: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->transferMoneyL
      +                          imit));
 11276  16DE  3024               	movlw	36
 11277  16DF  0022               	movlb	2	; select bank2
 11278  16E0  00C3               	movwf	_flashOpStr^(0+256)
 11279  16E1  3000               	movlw	0
 11280  16E2  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11281                           
 11282                           ;ui_key.c: 375: __t16=*((uint16_t*)uiAdjbuf);
 11283  16E3  3061               	movlw	low (_uiAdjbuf| (0+256))
 11284  16E4  0086               	movwf	6
 11285  16E5  3001               	movlw	1	; select bank2/3
 11286  16E6  0087               	movwf	7
 11287  16E7  3F40               	moviw [0]fsr1
 11288  16E8  00F8               	movwf	___t16
 11289  16E9  3F41               	moviw [1]fsr1
 11290  16EA  00F9               	movwf	___t16+1
 11291                           
 11292                           ;ui_key.c: 376: __t32=__t16*100;
 11293  16EB  0879               	movf	___t16+1,w
 11294  16EC  00F4               	movwf	___wmul@multiplier+1
 11295  16ED  0878               	movf	___t16,w
 11296  16EE  00F3               	movwf	___wmul@multiplier
 11297  16EF  3064               	movlw	100
 11298  16F0  00F5               	movwf	___wmul@multiplicand
 11299  16F1  3000               	movlw	0
 11300  16F2  00F6               	movwf	___wmul@multiplicand+1
 11301  16F3  31BE  2682         	fcall	___wmul
 11302  16F5  0873               	movf	?___wmul,w
 11303  16F6  0021               	movlb	1	; select bank1
 11304  16F7  00B4               	movwf	___t32^(0+128)
 11305  16F8  0874               	movf	?___wmul+1,w
 11306  16F9  00B5               	movwf	(___t32^(0+128)+1)
 11307  16FA  01B6               	clrf	(___t32^(0+128)+2)
 11308  16FB  01B7               	clrf	(___t32^(0+128)+3)
 11309                           
 11310                           ;ui_key.c: 378: *((uint32_t*)(flashOpStr.buf))=__t32;
 11311  16FC  0837               	movf	(___t32+3)^(0+128),w
 11312  16FD  0022               	movlb	2	; select bank2
 11313  16FE  00CA               	movwf	((_flashOpStr+3)^(0+256)+4)
 11314  16FF  0021               	movlb	1	; select bank1
 11315  1700  0836               	movf	(___t32+2)^(0+128),w
 11316  1701  0022               	movlb	2	; select bank2
 11317  1702  00C9               	movwf	((_flashOpStr+2)^(0+256)+4)
 11318  1703  0021               	movlb	1	; select bank1
 11319  1704  0835               	movf	(___t32+1)^(0+128),w
 11320  1705  0022               	movlb	2	; select bank2
 11321  1706  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11322  1707  0021               	movlb	1	; select bank1
 11323  1708  0834               	movf	___t32^(0+128),w
 11324  1709  0022               	movlb	2	; select bank2
 11325  170A  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11326                           
 11327                           ;ui_key.c: 379: flashOpStr.len=4;
 11328  170B  3004               	movlw	4
 11329  170C  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11330  170D  3000               	movlw	0
 11331  170E  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11332                           
 11333                           ;ui_key.c: 384: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11334  170F  3002               	movlw	2
 11335  1710  0020               	movlb	0	; select bank0
 11336  1711  00C6               	movwf	??_ui_key_set_process
 11337  1712  0846               	movf	??_ui_key_set_process,w
 11338  1713  0022               	movlb	2	; select bank2
 11339  1714  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11340                           
 11341                           ;ui_key.c: 385: menu=bkupMenu;
 11342  1715  0021               	movlb	1	; select bank1
 11343  1716  0842               	movf	_bkupMenu^(0+128),w
 11344  1717  0020               	movlb	0	; select bank0
 11345  1718  00C6               	movwf	??_ui_key_set_process
 11346  1719  0846               	movf	??_ui_key_set_process,w
 11347  171A  0021               	movlb	1	; select bank1
 11348  171B  00C3               	movwf	_menu^(0+128)
 11349                           
 11350                           ;ui_key.c: 386: break;
 11351  171C  0008               	return
 11352  171D                     l14917:	
 11353                           ;ui_key.c: 388: case 0xa0:
 11354                           
 11355                           
 11356                           ;ui_key.c: 389: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->shortID));
 11357  171D  3009               	movlw	9
 11358  171E  0022               	movlb	2	; select bank2
 11359  171F  00C3               	movwf	_flashOpStr^(0+256)
 11360  1720  3000               	movlw	0
 11361  1721  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11362                           
 11363                           ;ui_key.c: 391: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11364  1722  3002               	movlw	2
 11365  1723  0020               	movlb	0	; select bank0
 11366  1724  00C6               	movwf	??_ui_key_set_process
 11367  1725  0846               	movf	??_ui_key_set_process,w
 11368  1726  0022               	movlb	2	; select bank2
 11369  1727  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11370                           
 11371                           ;ui_key.c: 392: flashOpStr.len=1;
 11372  1728  3001               	movlw	1
 11373  1729  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11374  172A  3000               	movlw	0
 11375  172B  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11376                           
 11377                           ;ui_key.c: 394: flashOpStr.buf[0]=uiAdjbuf[0];
 11378  172C  0861               	movf	_uiAdjbuf^(0+256),w
 11379  172D  0020               	movlb	0	; select bank0
 11380  172E  00C6               	movwf	??_ui_key_set_process
 11381  172F  0846               	movf	??_ui_key_set_process,w
 11382  1730  0022               	movlb	2	; select bank2
 11383  1731  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11384                           
 11385                           ;ui_key.c: 396: menu=bkupMenu;
 11386  1732  0021               	movlb	1	; select bank1
 11387  1733  0842               	movf	_bkupMenu^(0+128),w
 11388  1734  0020               	movlb	0	; select bank0
 11389  1735  00C6               	movwf	??_ui_key_set_process
 11390  1736  0846               	movf	??_ui_key_set_process,w
 11391  1737  0021               	movlb	1	; select bank1
 11392  1738  00C3               	movwf	_menu^(0+128)
 11393                           
 11394                           ;ui_key.c: 397: break;
 11395  1739  0008               	return
 11396  173A                     l14927:	
 11397                           ;ui_key.c: 413: case 0xb0:
 11398                           
 11399                           
 11400                           ;ui_key.c: 414: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceWarning
      +                          ));
 11401  173A  3014               	movlw	20
 11402  173B  0022               	movlb	2	; select bank2
 11403  173C  00C3               	movwf	_flashOpStr^(0+256)
 11404  173D  3000               	movlw	0
 11405  173E  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11406                           
 11407                           ;ui_key.c: 416: flashOpStr.len=2;
 11408  173F  3002               	movlw	2
 11409  1740  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11410  1741  3000               	movlw	0
 11411  1742  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11412                           
 11413                           ;ui_key.c: 417: __t16=*((uint16_t*)uiAdjbuf);
 11414  1743  3061               	movlw	low (_uiAdjbuf| (0+256))
 11415  1744  0086               	movwf	6
 11416  1745  3001               	movlw	1	; select bank2/3
 11417  1746  0087               	movwf	7
 11418  1747  3F40               	moviw [0]fsr1
 11419  1748  00F8               	movwf	___t16
 11420  1749  3F41               	moviw [1]fsr1
 11421  174A  00F9               	movwf	___t16+1
 11422                           
 11423                           ;ui_key.c: 418: __t16*=100;
 11424  174B  3064               	movlw	100
 11425  174C  00F3               	movwf	___wmul@multiplier
 11426  174D  3000               	movlw	0
 11427  174E  00F4               	movwf	___wmul@multiplier+1
 11428  174F  0879               	movf	___t16+1,w
 11429  1750  00F6               	movwf	___wmul@multiplicand+1
 11430  1751  0878               	movf	___t16,w
 11431  1752  00F5               	movwf	___wmul@multiplicand
 11432  1753  31BE  2682  3196   	fcall	___wmul
 11433  1756  0874               	movf	?___wmul+1,w
 11434  1757  00F9               	movwf	___t16+1
 11435  1758  0873               	movf	?___wmul,w
 11436  1759  00F8               	movwf	___t16
 11437                           
 11438                           ;ui_key.c: 419: *((uint16_t*)flashOpStr.buf)=__t16;
 11439  175A  0879               	movf	___t16+1,w
 11440  175B  0022               	movlb	2	; select bank2
 11441  175C  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11442  175D  0878               	movf	___t16,w
 11443  175E  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11444                           
 11445                           ;ui_key.c: 420: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11446  175F  3002               	movlw	2
 11447  1760  0020               	movlb	0	; select bank0
 11448  1761  00C6               	movwf	??_ui_key_set_process
 11449  1762  0846               	movf	??_ui_key_set_process,w
 11450  1763  0022               	movlb	2	; select bank2
 11451  1764  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11452                           
 11453                           ;ui_key.c: 421: flashOpStr.len=2;
 11454  1765  3002               	movlw	2
 11455  1766  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11456  1767  3000               	movlw	0
 11457  1768  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11458                           
 11459                           ;ui_key.c: 422: *(int16_t*)uiAdjbuf=(mainSystemData.balanceOff/100);
 11460  1769  3064               	movlw	100
 11461  176A  00F3               	movwf	___awdiv@divisor
 11462  176B  3000               	movlw	0
 11463  176C  00F4               	movwf	___awdiv@divisor+1
 11464  176D  0024               	movlb	4	; select bank4
 11465  176E  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 11466  176F  00F6               	movwf	___awdiv@dividend+1
 11467  1770  0836               	movf	(_mainSystemData^(0+512)+22),w
 11468  1771  00F5               	movwf	___awdiv@dividend
 11469  1772  31A9  21F3         	fcall	___awdiv
 11470  1774  3061               	movlw	low (_uiAdjbuf| (0+256))
 11471  1775  0086               	movwf	6
 11472  1776  3001               	movlw	1	; select bank2/3
 11473  1777  0087               	movwf	7
 11474  1778  0873               	movf	?___awdiv,w
 11475  1779  3FC0               	movwi [0]fsr1
 11476  177A  0874               	movf	?___awdiv+1,w
 11477  177B  3FC1               	movwi [1]fsr1
 11478                           
 11479                           ;ui_key.c: 423: menu=bkupMenu;
 11480  177C  0021               	movlb	1	; select bank1
 11481  177D  0842               	movf	_bkupMenu^(0+128),w
 11482  177E  0020               	movlb	0	; select bank0
 11483  177F  00C6               	movwf	??_ui_key_set_process
 11484  1780  0846               	movf	??_ui_key_set_process,w
 11485  1781  0021               	movlb	1	; select bank1
 11486  1782  00C3               	movwf	_menu^(0+128)
 11487                           
 11488                           ;ui_key.c: 424: break;
 11489  1783  0008               	return
 11490  1784                     l14943:	
 11491                           ;ui_key.c: 425: case 0xb1:
 11492                           
 11493                           
 11494                           ;ui_key.c: 426: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceOff));
 11495  1784  3016               	movlw	22
 11496  1785  0022               	movlb	2	; select bank2
 11497  1786  00C3               	movwf	_flashOpStr^(0+256)
 11498  1787  3000               	movlw	0
 11499  1788  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11500                           
 11501                           ;ui_key.c: 428: flashOpStr.len=2;
 11502  1789  3002               	movlw	2
 11503  178A  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11504  178B  3000               	movlw	0
 11505  178C  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11506                           
 11507                           ;ui_key.c: 429: __t16=*((uint16_t*)uiAdjbuf);
 11508  178D  3061               	movlw	low (_uiAdjbuf| (0+256))
 11509  178E  0086               	movwf	6
 11510  178F  3001               	movlw	1	; select bank2/3
 11511  1790  0087               	movwf	7
 11512  1791  3F40               	moviw [0]fsr1
 11513  1792  00F8               	movwf	___t16
 11514  1793  3F41               	moviw [1]fsr1
 11515  1794  00F9               	movwf	___t16+1
 11516                           
 11517                           ;ui_key.c: 430: __t16*=100;
 11518  1795  3064               	movlw	100
 11519  1796  00F3               	movwf	___wmul@multiplier
 11520  1797  3000               	movlw	0
 11521  1798  00F4               	movwf	___wmul@multiplier+1
 11522  1799  0879               	movf	___t16+1,w
 11523  179A  00F6               	movwf	___wmul@multiplicand+1
 11524  179B  0878               	movf	___t16,w
 11525  179C  00F5               	movwf	___wmul@multiplicand
 11526  179D  31BE  2682         	fcall	___wmul
 11527  179F  0874               	movf	?___wmul+1,w
 11528  17A0  00F9               	movwf	___t16+1
 11529  17A1  0873               	movf	?___wmul,w
 11530  17A2  00F8               	movwf	___t16
 11531                           
 11532                           ;ui_key.c: 431: *((uint16_t*)flashOpStr.buf)=__t16;
 11533  17A3  0879               	movf	___t16+1,w
 11534  17A4  0022               	movlb	2	; select bank2
 11535  17A5  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11536  17A6  0878               	movf	___t16,w
 11537  17A7  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11538                           
 11539                           ;ui_key.c: 432: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11540  17A8  3002               	movlw	2
 11541  17A9  0020               	movlb	0	; select bank0
 11542  17AA  00C6               	movwf	??_ui_key_set_process
 11543  17AB  0846               	movf	??_ui_key_set_process,w
 11544  17AC  0022               	movlb	2	; select bank2
 11545  17AD  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11546                           
 11547                           ;ui_key.c: 433: flashOpStr.len=2;
 11548  17AE  3002               	movlw	2
 11549  17AF  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11550  17B0  3000               	movlw	0
 11551  17B1  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11552                           
 11553                           ;ui_key.c: 434: menu=bkupMenu;
 11554  17B2  0021               	movlb	1	; select bank1
 11555  17B3  0842               	movf	_bkupMenu^(0+128),w
 11556  17B4  0020               	movlb	0	; select bank0
 11557  17B5  00C6               	movwf	??_ui_key_set_process
 11558  17B6  0846               	movf	??_ui_key_set_process,w
 11559  17B7  0021               	movlb	1	; select bank1
 11560  17B8  00C3               	movwf	_menu^(0+128)
 11561                           
 11562                           ;ui_key.c: 435: break;
 11563  17B9  0008               	return
 11564  17BA                     l14959:	
 11565                           ;ui_key.c: 461: case 0xf1:
 11566                           
 11567                           
 11568                           ;ui_key.c: 462: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->imdFlowUnit));
 11569  17BA  303C               	movlw	60
 11570  17BB  0022               	movlb	2	; select bank2
 11571  17BC  00C3               	movwf	_flashOpStr^(0+256)
 11572  17BD  3000               	movlw	0
 11573  17BE  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11574                           
 11575                           ;ui_key.c: 463: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11576  17BF  3002               	movlw	2
 11577  17C0  0020               	movlb	0	; select bank0
 11578  17C1  00C6               	movwf	??_ui_key_set_process
 11579  17C2  0846               	movf	??_ui_key_set_process,w
 11580  17C3  0022               	movlb	2	; select bank2
 11581  17C4  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11582                           
 11583                           ;ui_key.c: 464: flashOpStr.len=1;
 11584  17C5  3001               	movlw	1
 11585  17C6  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11586  17C7  3000               	movlw	0
 11587  17C8  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11588                           
 11589                           ;ui_key.c: 465: flashOpStr.buf[0]=uiAdjbuf[0];
 11590  17C9  0861               	movf	_uiAdjbuf^(0+256),w
 11591  17CA  0020               	movlb	0	; select bank0
 11592  17CB  00C6               	movwf	??_ui_key_set_process
 11593  17CC  0846               	movf	??_ui_key_set_process,w
 11594  17CD  0022               	movlb	2	; select bank2
 11595  17CE  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11596                           
 11597                           ;ui_key.c: 466: menu=bkupMenu;
 11598  17CF  0021               	movlb	1	; select bank1
 11599  17D0  0842               	movf	_bkupMenu^(0+128),w
 11600  17D1  0020               	movlb	0	; select bank0
 11601  17D2  00C6               	movwf	??_ui_key_set_process
 11602  17D3  0846               	movf	??_ui_key_set_process,w
 11603  17D4  0021               	movlb	1	; select bank1
 11604  17D5  00C3               	movwf	_menu^(0+128)
 11605                           
 11606                           ;ui_key.c: 467: break;
 11607  17D6  0008               	return
 11608  17D7                     l14969:	
 11609                           ;ui_key.c: 468: default:
 11610                           
 11611                           
 11612                           ;ui_key.c: 469: menu=bkupMenu;break;
 11613  17D7  0842               	movf	_bkupMenu^(0+128),w
 11614  17D8  0020               	movlb	0	; select bank0
 11615  17D9  00C6               	movwf	??_ui_key_set_process
 11616  17DA  0846               	movf	??_ui_key_set_process,w
 11617  17DB  0021               	movlb	1	; select bank1
 11618  17DC  00C3               	movwf	_menu^(0+128)
 11619                           
 11620                           ;ui_key.c: 470: }
 11621  17DD  0008               	return
 11622  17DE                     l14973:	
 11623  17DE  0021               	movlb	1	; select bank1
 11624  17DF  0843               	movf	_menu^(0+128),w
 11625                           
 11626                           ; Switch size 1, requested type "space"
 11627                           ; Number of cases is 10, Range of values is 64 to 241
 11628                           ; switch strategies available:
 11629                           ; Name         Instructions Cycles
 11630                           ; simple_byte           31    16 (average)
 11631                           ; jumptable            263     9 (fixed)
 11632                           ;	Chosen strategy is simple_byte
 11633  17E0  3A40               	xorlw	64	; case 64
 11634  17E1  1903               	skipnz
 11635  17E2  2E33               	goto	l14843
 11636  17E3  3A10               	xorlw	16	; case 80
 11637  17E4  1903               	skipnz
 11638  17E5  2E59               	goto	l699
 11639  17E6  3A30               	xorlw	48	; case 96
 11640  17E7  1903               	skipnz
 11641  17E8  2E7B               	goto	l14865
 11642  17E9  3A10               	xorlw	16	; case 112
 11643  17EA  1903               	skipnz
 11644  17EB  2E9E               	goto	l14881
 11645  17EC  3AF0               	xorlw	240	; case 128
 11646  17ED  1903               	skipnz
 11647  17EE  2EBB               	goto	l14891
 11648  17EF  3A10               	xorlw	16	; case 144
 11649  17F0  1903               	skipnz
 11650  17F1  2EDE               	goto	l14903
 11651  17F2  3A30               	xorlw	48	; case 160
 11652  17F3  1903               	skipnz
 11653  17F4  2F1D               	goto	l14917
 11654  17F5  3A10               	xorlw	16	; case 176
 11655  17F6  1903               	skipnz
 11656  17F7  2F3A               	goto	l14927
 11657  17F8  3A01               	xorlw	1	; case 177
 11658  17F9  1903               	skipnz
 11659  17FA  2F84               	goto	l14943
 11660  17FB  3A40               	xorlw	64	; case 241
 11661  17FC  1903               	skipnz
 11662  17FD  2FBA               	goto	l14959
 11663  17FE  2FD7               	goto	l14969
 11664  17FF  0008               	return
 11665  1800                     __end_of_ui_key_set_process:	
 11666                           
 11667                           	psect	text5
 11668  1D36                     __ptext5:	
 11669 ;; *************** function _ui_key_process_up_down *****************
 11670 ;; Defined at:
 11671 ;;		line 154 in file "src/api/ui_key.c"
 11672 ;; Parameters:    Size  Location     Type
 11673 ;;  up              1    wreg     unsigned char 
 11674 ;; Auto vars:     Size  Location     Type
 11675 ;;  up              1   52[BANK0 ] unsigned char 
 11676 ;; Return value:  Size  Location     Type
 11677 ;;                  1    wreg      void 
 11678 ;; Registers used:
 11679 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11680 ;; Tracked objects:
 11681 ;;		On entry : 0/0
 11682 ;;		On exit  : 0/0
 11683 ;;		Unchanged: 0/0
 11684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 11689 ;;Total ram usage:        2 bytes
 11690 ;; Hardware stack levels used:    1
 11691 ;; Hardware stack levels required when called:   10
 11692 ;; This function calls:
 11693 ;;		_key_process_up_down_variable_speed_ex
 11694 ;;		_ui_key_process_up_down_main
 11695 ;; This function is called by:
 11696 ;;		_ui_key_process
 11697 ;; This function uses a non-reentrant model
 11698 ;;
 11699                           
 11700                           
 11701                           ;psect for function _ui_key_process_up_down
 11702  1D36                     _ui_key_process_up_down:	
 11703                           
 11704                           ;incstack = 0
 11705                           ; Regs used in _ui_key_process_up_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11706                           ;ui_key_process_up_down@up stored from wreg
 11707  1D36  0020               	movlb	0	; select bank0
 11708  1D37  00D4               	movwf	ui_key_process_up_down@up
 11709                           
 11710                           ;ui_key.c: 155: if(menu<3){
 11711  1D38  3003               	movlw	3
 11712  1D39  0021               	movlb	1	; select bank1
 11713  1D3A  0243               	subwf	_menu^(0+128),w
 11714  1D3B  1803               	skipnc
 11715  1D3C  2DF7               	goto	l17057
 11716                           
 11717                           ;ui_key.c: 156: ui_key_process_up_down_main(up);
 11718  1D3D  0020               	movlb	0	; select bank0
 11719  1D3E  0854               	movf	ui_key_process_up_down@up,w
 11720  1D3F  31A0  2000         	fcall	_ui_key_process_up_down_main
 11721                           
 11722                           ;ui_key.c: 157: return;
 11723  1D41  0008               	return
 11724  1D42                     l17033:	
 11725                           ;ui_key.c: 161: case 0x10:
 11726                           
 11727                           ;ui_key.c: 158: }
 11728                           ;ui_key.c: 159: switch(menu){
 11729                           
 11730                           
 11731                           ;ui_key.c: 162: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 200, up);
 11732  1D42  3000               	movlw	0
 11733  1D43  0020               	movlb	0	; select bank0
 11734  1D44  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11735  1D45  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11736  1D46  30C8               	movlw	200
 11737  1D47  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11738  1D48  3000               	movlw	0
 11739  1D49  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11740  1D4A  0854               	movf	ui_key_process_up_down@up,w
 11741  1D4B  00D3               	movwf	??_ui_key_process_up_down
 11742  1D4C  0853               	movf	??_ui_key_process_up_down,w
 11743  1D4D  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11744  1D4E  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11745  1D4F  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11746                           
 11747                           ;ui_key.c: 163: break;
 11748  1D51  0008               	return
 11749  1D52                     l17035:	
 11750                           ;ui_key.c: 164: case 0x40:
 11751                           
 11752                           
 11753                           ;ui_key.c: 165: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,1, 9999, up);
 11754  1D52  3001               	movlw	1
 11755  1D53  0020               	movlb	0	; select bank0
 11756  1D54  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11757  1D55  3000               	movlw	0
 11758  1D56  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11759  1D57  300F               	movlw	15
 11760  1D58  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11761  1D59  3027               	movlw	39
 11762  1D5A  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11763  1D5B  0854               	movf	ui_key_process_up_down@up,w
 11764  1D5C  00D3               	movwf	??_ui_key_process_up_down
 11765  1D5D  0853               	movf	??_ui_key_process_up_down,w
 11766  1D5E  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11767  1D5F  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11768  1D60  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11769                           
 11770                           ;ui_key.c: 166: break;
 11771  1D62  0008               	return
 11772  1D63                     l17037:	
 11773                           ;ui_key.c: 167: case 0x50:
 11774                           
 11775                           
 11776                           ;ui_key.c: 168: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 9999, up);
 11777  1D63  3000               	movlw	0
 11778  1D64  0020               	movlb	0	; select bank0
 11779  1D65  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11780  1D66  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11781  1D67  300F               	movlw	15
 11782  1D68  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11783  1D69  3027               	movlw	39
 11784  1D6A  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11785  1D6B  0854               	movf	ui_key_process_up_down@up,w
 11786  1D6C  00D3               	movwf	??_ui_key_process_up_down
 11787  1D6D  0853               	movf	??_ui_key_process_up_down,w
 11788  1D6E  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11789  1D6F  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11790  1D70  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11791                           
 11792                           ;ui_key.c: 169: break;
 11793  1D72  0008               	return
 11794  1D73                     l17039:	
 11795                           ;ui_key.c: 170: case 0x60:
 11796                           
 11797                           
 11798                           ;ui_key.c: 171: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 9999, up);
 11799  1D73  3000               	movlw	0
 11800  1D74  0020               	movlb	0	; select bank0
 11801  1D75  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11802  1D76  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11803  1D77  300F               	movlw	15
 11804  1D78  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11805  1D79  3027               	movlw	39
 11806  1D7A  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11807  1D7B  0854               	movf	ui_key_process_up_down@up,w
 11808  1D7C  00D3               	movwf	??_ui_key_process_up_down
 11809  1D7D  0853               	movf	??_ui_key_process_up_down,w
 11810  1D7E  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11811  1D7F  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11812  1D80  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11813                           
 11814                           ;ui_key.c: 172: break;
 11815  1D82  0008               	return
 11816  1D83                     l17041:	
 11817                           ;ui_key.c: 173: case 0xa0:
 11818                           
 11819                           
 11820                           ;ui_key.c: 174: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,1, 253, up);
 11821  1D83  3001               	movlw	1
 11822  1D84  0020               	movlb	0	; select bank0
 11823  1D85  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11824  1D86  3000               	movlw	0
 11825  1D87  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11826  1D88  30FD               	movlw	253
 11827  1D89  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11828  1D8A  3000               	movlw	0
 11829  1D8B  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11830  1D8C  0854               	movf	ui_key_process_up_down@up,w
 11831  1D8D  00D3               	movwf	??_ui_key_process_up_down
 11832  1D8E  0853               	movf	??_ui_key_process_up_down,w
 11833  1D8F  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11834  1D90  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11835  1D91  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11836                           
 11837                           ;ui_key.c: 175: break;
 11838  1D93  0008               	return
 11839  1D94                     l17043:	
 11840                           ;ui_key.c: 177: case 0x70:
 11841                           
 11842                           
 11843                           ;ui_key.c: 178: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 20, up);
 11844  1D94  3000               	movlw	0
 11845  1D95  0020               	movlb	0	; select bank0
 11846  1D96  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11847  1D97  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11848  1D98  3014               	movlw	20
 11849  1D99  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11850  1D9A  3000               	movlw	0
 11851  1D9B  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11852  1D9C  0854               	movf	ui_key_process_up_down@up,w
 11853  1D9D  00D3               	movwf	??_ui_key_process_up_down
 11854  1D9E  0853               	movf	??_ui_key_process_up_down,w
 11855  1D9F  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11856  1DA0  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11857  1DA1  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11858                           
 11859                           ;ui_key.c: 179: break;
 11860  1DA3  0008               	return
 11861  1DA4                     l17045:	
 11862                           ;ui_key.c: 180: case 0x80:
 11863                           
 11864                           
 11865                           ;ui_key.c: 181: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,10, 1000, up);
 11866  1DA4  300A               	movlw	10
 11867  1DA5  0020               	movlb	0	; select bank0
 11868  1DA6  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11869  1DA7  3000               	movlw	0
 11870  1DA8  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11871  1DA9  30E8               	movlw	232
 11872  1DAA  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11873  1DAB  3003               	movlw	3
 11874  1DAC  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11875  1DAD  0854               	movf	ui_key_process_up_down@up,w
 11876  1DAE  00D3               	movwf	??_ui_key_process_up_down
 11877  1DAF  0853               	movf	??_ui_key_process_up_down,w
 11878  1DB0  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11879  1DB1  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11880  1DB2  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11881                           
 11882                           ;ui_key.c: 182: break;
 11883  1DB4  0008               	return
 11884  1DB5                     l17047:	
 11885                           ;ui_key.c: 183: case 0x90:
 11886                           
 11887                           
 11888                           ;ui_key.c: 184: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 1000, up);
 11889  1DB5  3000               	movlw	0
 11890  1DB6  0020               	movlb	0	; select bank0
 11891  1DB7  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11892  1DB8  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11893  1DB9  30E8               	movlw	232
 11894  1DBA  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11895  1DBB  3003               	movlw	3
 11896  1DBC  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11897  1DBD  0854               	movf	ui_key_process_up_down@up,w
 11898  1DBE  00D3               	movwf	??_ui_key_process_up_down
 11899  1DBF  0853               	movf	??_ui_key_process_up_down,w
 11900  1DC0  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11901  1DC1  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11902  1DC2  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11903                           
 11904                           ;ui_key.c: 185: break;
 11905  1DC4  0008               	return
 11906  1DC5                     l17049:	
 11907                           ;ui_key.c: 186: case 0xb0:
 11908                           
 11909                           
 11910                           ;ui_key.c: 187: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 11911  1DC5  309C               	movlw	156
 11912  1DC6  0020               	movlb	0	; select bank0
 11913  1DC7  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11914  1DC8  30FF               	movlw	255
 11915  1DC9  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11916  1DCA  3064               	movlw	100
 11917  1DCB  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11918  1DCC  3000               	movlw	0
 11919  1DCD  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11920  1DCE  0854               	movf	ui_key_process_up_down@up,w
 11921  1DCF  00D3               	movwf	??_ui_key_process_up_down
 11922  1DD0  0853               	movf	??_ui_key_process_up_down,w
 11923  1DD1  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11924  1DD2  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11925  1DD3  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11926                           
 11927                           ;ui_key.c: 188: break;
 11928  1DD5  0008               	return
 11929  1DD6                     l17051:	
 11930                           ;ui_key.c: 189: case 0xb1:
 11931                           
 11932                           
 11933                           ;ui_key.c: 190: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 11934  1DD6  309C               	movlw	156
 11935  1DD7  0020               	movlb	0	; select bank0
 11936  1DD8  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11937  1DD9  30FF               	movlw	255
 11938  1DDA  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11939  1DDB  3064               	movlw	100
 11940  1DDC  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11941  1DDD  3000               	movlw	0
 11942  1DDE  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11943  1DDF  0854               	movf	ui_key_process_up_down@up,w
 11944  1DE0  00D3               	movwf	??_ui_key_process_up_down
 11945  1DE1  0853               	movf	??_ui_key_process_up_down,w
 11946  1DE2  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11947  1DE3  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11948  1DE4  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11949                           
 11950                           ;ui_key.c: 191: break;
 11951  1DE6  0008               	return
 11952  1DE7                     l17053:	
 11953                           ;ui_key.c: 192: case 0xf1:
 11954                           
 11955                           
 11956                           ;ui_key.c: 193: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 1, up);
 11957  1DE7  3000               	movlw	0
 11958  1DE8  0020               	movlb	0	; select bank0
 11959  1DE9  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11960  1DEA  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11961  1DEB  3001               	movlw	1
 11962  1DEC  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11963  1DED  3000               	movlw	0
 11964  1DEE  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11965  1DEF  0854               	movf	ui_key_process_up_down@up,w
 11966  1DF0  00D3               	movwf	??_ui_key_process_up_down
 11967  1DF1  0853               	movf	??_ui_key_process_up_down,w
 11968  1DF2  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11969  1DF3  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11970  1DF4  319B  238B         	fcall	_key_process_up_down_variable_speed_ex
 11971                           
 11972                           ;ui_key.c: 195: }
 11973                           
 11974                           ;ui_key.c: 194: break;
 11975  1DF6  0008               	return
 11976  1DF7                     l17057:	
 11977  1DF7  0021               	movlb	1	; select bank1
 11978  1DF8  0843               	movf	_menu^(0+128),w
 11979                           
 11980                           ; Switch size 1, requested type "space"
 11981                           ; Number of cases is 11, Range of values is 16 to 241
 11982                           ; switch strategies available:
 11983                           ; Name         Instructions Cycles
 11984                           ; simple_byte           34    18 (average)
 11985                           ; jumptable            263     9 (fixed)
 11986                           ;	Chosen strategy is simple_byte
 11987  1DF9  3A10               	xorlw	16	; case 16
 11988  1DFA  1903               	skipnz
 11989  1DFB  2D42               	goto	l17033
 11990  1DFC  3A50               	xorlw	80	; case 64
 11991  1DFD  1903               	skipnz
 11992  1DFE  2D52               	goto	l17035
 11993  1DFF  3A10               	xorlw	16	; case 80
 11994  1E00  1903               	skipnz
 11995  1E01  2D63               	goto	l17037
 11996  1E02  3A30               	xorlw	48	; case 96
 11997  1E03  1903               	skipnz
 11998  1E04  2D73               	goto	l17039
 11999  1E05  3A10               	xorlw	16	; case 112
 12000  1E06  1903               	skipnz
 12001  1E07  2D94               	goto	l17043
 12002  1E08  3AF0               	xorlw	240	; case 128
 12003  1E09  1903               	skipnz
 12004  1E0A  2DA4               	goto	l17045
 12005  1E0B  3A10               	xorlw	16	; case 144
 12006  1E0C  1903               	skipnz
 12007  1E0D  2DB5               	goto	l17047
 12008  1E0E  3A30               	xorlw	48	; case 160
 12009  1E0F  1903               	skipnz
 12010  1E10  2D83               	goto	l17041
 12011  1E11  3A10               	xorlw	16	; case 176
 12012  1E12  1903               	skipnz
 12013  1E13  2DC5               	goto	l17049
 12014  1E14  3A01               	xorlw	1	; case 177
 12015  1E15  1903               	skipnz
 12016  1E16  2DD6               	goto	l17051
 12017  1E17  3A40               	xorlw	64	; case 241
 12018  1E18  1903               	skipnz
 12019  1E19  2DE7               	goto	l17053
 12020  1E1A  2E1B               	goto	l648
 12021  1E1B                     l648:	
 12022  1E1B  0008               	return
 12023  1E1C                     __end_of_ui_key_process_up_down:	
 12024                           
 12025                           	psect	text6
 12026  2000                     __ptext6:	
 12027 ;; *************** function _ui_key_process_up_down_main *****************
 12028 ;; Defined at:
 12029 ;;		line 89 in file "src/api/ui_key.c"
 12030 ;; Parameters:    Size  Location     Type
 12031 ;;  up              1    wreg     unsigned char 
 12032 ;; Auto vars:     Size  Location     Type
 12033 ;;  up              1    4[COMMON] unsigned char 
 12034 ;; Return value:  Size  Location     Type
 12035 ;;                  1    wreg      void 
 12036 ;; Registers used:
 12037 ;;		wreg, status,2, status,0
 12038 ;; Tracked objects:
 12039 ;;		On entry : 0/0
 12040 ;;		On exit  : 0/0
 12041 ;;		Unchanged: 0/0
 12042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12044 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12047 ;;Total ram usage:        2 bytes
 12048 ;; Hardware stack levels used:    1
 12049 ;; Hardware stack levels required when called:    2
 12050 ;; This function calls:
 12051 ;;		Nothing
 12052 ;; This function is called by:
 12053 ;;		_ui_key_process_up_down
 12054 ;; This function uses a non-reentrant model
 12055 ;;
 12056                           
 12057                           
 12058                           ;psect for function _ui_key_process_up_down_main
 12059  2000                     _ui_key_process_up_down_main:	
 12060                           
 12061                           ;incstack = 0
 12062                           ; Regs used in _ui_key_process_up_down_main: [wreg+status,2+status,0]
 12063                           ;ui_key_process_up_down_main@up stored from wreg
 12064  2000  00F4               	movwf	ui_key_process_up_down_main@up
 12065                           
 12066                           ;ui_key.c: 91: if(!up){
 12067  2001  0874               	movf	ui_key_process_up_down_main@up,w
 12068  2002  1D03               	btfss	3,2
 12069  2003  280D               	goto	l14217
 12070                           
 12071                           ;ui_key.c: 93: menu++;
 12072  2004  3001               	movlw	1
 12073  2005  00F3               	movwf	??_ui_key_process_up_down_main
 12074  2006  0873               	movf	??_ui_key_process_up_down_main,w
 12075  2007  0021               	movlb	1	; select bank1
 12076  2008  07C3               	addwf	_menu^(0+128),f
 12077                           
 12078                           ;ui_key.c: 94: if(menu>2)menu=0;
 12079  2009  3003               	movlw	3
 12080  200A  0243               	subwf	_menu^(0+128),w
 12081  200B  1803               	btfsc	3,0
 12082  200C  01C3               	clrf	_menu^(0+128)
 12083  200D                     l14217:	
 12084                           
 12085                           ;ui_key.c: 95: }
 12086                           ;ui_key.c: 96: bkupMenu=menu;
 12087  200D  0021               	movlb	1	; select bank1
 12088  200E  0843               	movf	_menu^(0+128),w
 12089  200F  00F3               	movwf	??_ui_key_process_up_down_main
 12090  2010  0873               	movf	??_ui_key_process_up_down_main,w
 12091  2011  00C2               	movwf	_bkupMenu^(0+128)
 12092  2012  0008               	return
 12093  2013                     __end_of_ui_key_process_up_down_main:	
 12094                           
 12095                           	psect	text7
 12096  1B8B                     __ptext7:	
 12097 ;; *************** function _key_process_up_down_variable_speed_ex *****************
 12098 ;; Defined at:
 12099 ;;		line 47 in file "src/api/ui_key.c"
 12100 ;; Parameters:    Size  Location     Type
 12101 ;;  val             1    wreg     PTR int 
 12102 ;;		 -> uiAdjbuf(8), 
 12103 ;;  min             2   35[BANK0 ] int 
 12104 ;;  max             2   37[BANK0 ] int 
 12105 ;;  up              1   39[BANK0 ] unsigned char 
 12106 ;; Auto vars:     Size  Location     Type
 12107 ;;  val             1   50[BANK0 ] PTR int 
 12108 ;;		 -> uiAdjbuf(8), 
 12109 ;;  t32             2   48[BANK0 ] unsigned int 
 12110 ;;  speed           2   46[BANK0 ] unsigned int 
 12111 ;;  change          1   45[BANK0 ] unsigned char 
 12112 ;;  key             1   44[BANK0 ] unsigned char 
 12113 ;; Return value:  Size  Location     Type
 12114 ;;                  1    wreg      void 
 12115 ;; Registers used:
 12116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12117 ;; Tracked objects:
 12118 ;;		On entry : 0/0
 12119 ;;		On exit  : 0/0
 12120 ;;		Unchanged: 0/0
 12121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12122 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 12123 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 12124 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 12125 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0
 12126 ;;Total ram usage:       16 bytes
 12127 ;; Hardware stack levels used:    1
 12128 ;; Hardware stack levels required when called:    9
 12129 ;; This function calls:
 12130 ;;		_get_globle_ticker
 12131 ;;		_key_scan_call
 12132 ;;		_set_globle_ticker
 12133 ;;		_ui_disp_menu
 12134 ;; This function is called by:
 12135 ;;		_ui_key_process_up_down
 12136 ;; This function uses a non-reentrant model
 12137 ;;
 12138                           
 12139                           
 12140                           ;psect for function _key_process_up_down_variable_speed_ex
 12141  1B8B                     _key_process_up_down_variable_speed_ex:	
 12142                           
 12143                           ;incstack = 0
 12144                           ; Regs used in _key_process_up_down_variable_speed_ex: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 12145                           ;key_process_up_down_variable_speed_ex@val stored from wreg
 12146  1B8B  0020               	movlb	0	; select bank0
 12147  1B8C  00D2               	movwf	key_process_up_down_variable_speed_ex@val
 12148                           
 12149                           ;ui_key.c: 49: bool change = 1;
 12150  1B8D  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12151  1B8E  0ACD               	incf	key_process_up_down_variable_speed_ex@change,f
 12152                           
 12153                           ;ui_key.c: 50: uint16_t speed = 0, t32;
 12154  1B8F  01CE               	clrf	key_process_up_down_variable_speed_ex@speed
 12155  1B90  01CF               	clrf	key_process_up_down_variable_speed_ex@speed+1
 12156                           
 12157                           ;ui_key.c: 51: uint8_t key = KeyValue;
 12158  1B91  0021               	movlb	1	; select bank1
 12159  1B92  0841               	movf	_KeyValue^(0+128),w
 12160  1B93  0020               	movlb	0	; select bank0
 12161  1B94  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12162  1B95  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12163  1B96  00CC               	movwf	key_process_up_down_variable_speed_ex@key
 12164                           
 12165                           ;ui_key.c: 52: if(min>=max)return;
 12166  1B97  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12167  1B98  3A80               	xorlw	128
 12168  1B99  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12169  1B9A  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12170  1B9B  3A80               	xorlw	128
 12171  1B9C  0248               	subwf	??_key_process_up_down_variable_speed_ex,w
 12172  1B9D  1D03               	skipz
 12173  1B9E  2BA1               	goto	u15995
 12174  1B9F  0845               	movf	key_process_up_down_variable_speed_ex@max,w
 12175  1BA0  0243               	subwf	key_process_up_down_variable_speed_ex@min,w
 12176  1BA1                     u15995:	
 12177  1BA1  1803               	btfsc	3,0
 12178  1BA2  0008               	return
 12179                           
 12180                           ;ui_key.c: 53: set_globle_ticker(0);
 12181  1BA3  3000               	movlw	0
 12182  1BA4  00F3               	movwf	set_globle_ticker@tk
 12183  1BA5  00F4               	movwf	set_globle_ticker@tk+1
 12184  1BA6  31BB  2313  319B   	fcall	_set_globle_ticker
 12185  1BA9                     l16977:	
 12186                           ;ui_key.c: 54: do {
 12187                           
 12188                           
 12189                           ;ui_key.c: 55: if (change == 1) {
 12190  1BA9  0020               	movlb	0	; select bank0
 12191  1BAA  034D               	decf	key_process_up_down_variable_speed_ex@change,w
 12192  1BAB  1D03               	btfss	3,2
 12193  1BAC  2C04               	goto	l16997
 12194                           
 12195                           ;ui_key.c: 56: change = 0;
 12196  1BAD  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12197                           
 12198                           ;ui_key.c: 57: if (up) {
 12199  1BAE  0847               	movf	key_process_up_down_variable_speed_ex@up,w
 12200  1BAF  1903               	btfsc	3,2
 12201  1BB0  2BD8               	goto	l16989
 12202                           
 12203                           ;ui_key.c: 58: (*val) += 1;
 12204  1BB1  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12205  1BB2  0086               	movwf	6
 12206  1BB3  3001               	movlw	1	; select bank2/3
 12207  1BB4  0087               	movwf	7
 12208  1BB5  3001               	movlw	1
 12209  1BB6  0781               	addwf	1,f
 12210  1BB7  3141               	addfsr 1,1
 12211  1BB8  1803               	skipnc
 12212  1BB9  0A81               	incf	1,f
 12213                           
 12214                           ;ui_key.c: 59: if (*val > max)*val = min;
 12215  1BBA  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12216  1BBB  0086               	movwf	6
 12217  1BBC  3001               	movlw	1	; select bank2/3
 12218  1BBD  0087               	movwf	7
 12219  1BBE  3F40               	moviw [0]fsr1
 12220  1BBF  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12221  1BC0  3F41               	moviw [1]fsr1
 12222  1BC1  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12223  1BC2  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12224  1BC3  3A80               	xorlw	128
 12225  1BC4  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12226  1BC5  0849               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12227  1BC6  3A80               	xorlw	128
 12228  1BC7  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12229  1BC8  1D03               	skipz
 12230  1BC9  2BCC               	goto	u16025
 12231  1BCA  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12232  1BCB  0245               	subwf	key_process_up_down_variable_speed_ex@max,w
 12233  1BCC                     u16025:	
 12234  1BCC  1803               	skipnc
 12235  1BCD  2C01               	goto	l16995
 12236  1BCE  0020               	movlb	0	; select bank0
 12237  1BCF  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12238  1BD0  0086               	movwf	6
 12239  1BD1  3001               	movlw	1	; select bank2/3
 12240  1BD2  0087               	movwf	7
 12241  1BD3  0843               	movf	key_process_up_down_variable_speed_ex@min,w
 12242  1BD4  3FC0               	movwi [0]fsr1
 12243  1BD5  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12244  1BD6  3FC1               	movwi [1]fsr1
 12245                           
 12246                           ;ui_key.c: 60: } else {
 12247  1BD7  2C01               	goto	l16995
 12248  1BD8                     l16989:	
 12249                           
 12250                           ;ui_key.c: 61: if (*val <= min)*val = max;
 12251  1BD8  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12252  1BD9  0086               	movwf	6
 12253  1BDA  3001               	movlw	1	; select bank2/3
 12254  1BDB  0087               	movwf	7
 12255  1BDC  3F40               	moviw [0]fsr1
 12256  1BDD  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12257  1BDE  3F41               	moviw [1]fsr1
 12258  1BDF  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12259  1BE0  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12260  1BE1  3A80               	xorlw	128
 12261  1BE2  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12262  1BE3  0849               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12263  1BE4  3A80               	xorlw	128
 12264  1BE5  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12265  1BE6  1D03               	skipz
 12266  1BE7  2BEA               	goto	u16035
 12267  1BE8  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12268  1BE9  0243               	subwf	key_process_up_down_variable_speed_ex@min,w
 12269  1BEA                     u16035:	
 12270  1BEA  1C03               	skipc
 12271  1BEB  2BF6               	goto	l16993
 12272  1BEC  0020               	movlb	0	; select bank0
 12273  1BED  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12274  1BEE  0086               	movwf	6
 12275  1BEF  3001               	movlw	1	; select bank2/3
 12276  1BF0  0087               	movwf	7
 12277  1BF1  0845               	movf	key_process_up_down_variable_speed_ex@max,w
 12278  1BF2  3FC0               	movwi [0]fsr1
 12279  1BF3  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12280  1BF4  3FC1               	movwi [1]fsr1
 12281  1BF5  2C01               	goto	l16995
 12282  1BF6                     l16993:	
 12283                           
 12284                           ;ui_key.c: 62: else {
 12285                           ;ui_key.c: 63: (*val) -= 1;
 12286  1BF6  0020               	movlb	0	; select bank0
 12287  1BF7  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12288  1BF8  0086               	movwf	6
 12289  1BF9  3001               	movlw	1	; select bank2/3
 12290  1BFA  0087               	movwf	7
 12291  1BFB  30FF               	movlw	255
 12292  1BFC  0781               	addwf	1,f
 12293  1BFD  3141               	addfsr 1,1
 12294  1BFE  30FF               	movlw	255
 12295  1BFF  3D81               	addwfc	1,f
 12296  1C00  317F               	addfsr 1,-1
 12297  1C01                     l16995:	
 12298                           
 12299                           ;ui_key.c: 64: }
 12300                           ;ui_key.c: 65: }
 12301                           ;ui_key.c: 66: ui_disp_menu();
 12302  1C01  319F  2707  319B   	fcall	_ui_disp_menu
 12303  1C04                     l16997:	
 12304                           
 12305                           ;ui_key.c: 67: }
 12306                           ;ui_key.c: 68: key_scan_call();
 12307  1C04  31B0  200D  319B   	fcall	_key_scan_call
 12308                           
 12309                           ;ui_key.c: 69: if (key != KeyValue)break;
 12310  1C07  0020               	movlb	0	; select bank0
 12311  1C08  084C               	movf	key_process_up_down_variable_speed_ex@key,w
 12312  1C09  0021               	movlb	1	; select bank1
 12313  1C0A  0641               	xorwf	_KeyValue^(0+128),w
 12314  1C0B  1D03               	btfss	3,2
 12315  1C0C  0008               	return
 12316                           
 12317                           ;ui_key.c: 70: t32 = get_globle_ticker();
 12318  1C0D  31BB  2371  319B   	fcall	_get_globle_ticker
 12319  1C10  0874               	movf	?_get_globle_ticker+1,w
 12320  1C11  0020               	movlb	0	; select bank0
 12321  1C12  00D1               	movwf	key_process_up_down_variable_speed_ex@t32+1
 12322  1C13  0873               	movf	?_get_globle_ticker,w
 12323  1C14  00D0               	movwf	key_process_up_down_variable_speed_ex@t32
 12324                           
 12325                           ;ui_key.c: 71: if (t32 <= 1000) {
 12326  1C15  3003               	movlw	3
 12327  1C16  0251               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12328  1C17  30E9               	movlw	233
 12329  1C18  1903               	skipnz
 12330  1C19  0250               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12331  1C1A  1803               	skipnc
 12332  1C1B  2C2D               	goto	l17013
 12333                           
 12334                           ;ui_key.c: 72: if (t32 - speed >= 200) {
 12335  1C1C  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12336  1C1D  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12337  1C1E  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12338  1C1F  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12339  1C20  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12340  1C21  1903               	skipnz
 12341  1C22  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12342  1C23  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12343  1C24  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12344  1C25  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12345  1C26  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12346  1C27  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12347  1C28  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12348  1C29  3000               	movlw	0
 12349  1C2A  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12350  1C2B  30C8               	movlw	200
 12351  1C2C  2C55               	goto	L2
 12352  1C2D                     l17013:	
 12353                           ;ui_key.c: 75: }
 12354                           ;ui_key.c: 76: } else if (t32 <= 2000) {
 12355                           
 12356                           ;ui_key.c: 74: change = 1;
 12357                           
 12358                           ;ui_key.c: 73: speed = t32;
 12359                           
 12360  1C2D  3007               	movlw	7
 12361  1C2E  0251               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12362  1C2F  30D1               	movlw	209
 12363  1C30  1903               	skipnz
 12364  1C31  0250               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12365  1C32  1803               	skipnc
 12366  1C33  2C45               	goto	l17021
 12367                           
 12368                           ;ui_key.c: 77: if (t32 - speed >= 100) {
 12369  1C34  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12370  1C35  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12371  1C36  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12372  1C37  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12373  1C38  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12374  1C39  1903               	skipnz
 12375  1C3A  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12376  1C3B  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12377  1C3C  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12378  1C3D  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12379  1C3E  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12380  1C3F  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12381  1C40  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12382  1C41  3000               	movlw	0
 12383  1C42  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12384  1C43  3064               	movlw	100
 12385  1C44  2C55               	goto	L2
 12386  1C45                     l17021:	
 12387                           ;ui_key.c: 80: }
 12388                           ;ui_key.c: 81: } else {
 12389                           
 12390                           ;ui_key.c: 79: change = 1;
 12391                           
 12392                           ;ui_key.c: 78: speed = t32;
 12393                           
 12394                           
 12395                           ;ui_key.c: 82: if (t32 - speed >= 10) {
 12396  1C45  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12397  1C46  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12398  1C47  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12399  1C48  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12400  1C49  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12401  1C4A  1903               	skipnz
 12402  1C4B  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12403  1C4C  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12404  1C4D  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12405  1C4E  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12406  1C4F  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12407  1C50  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12408  1C51  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12409  1C52  3000               	movlw	0
 12410  1C53  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12411  1C54  300A               	movlw	10
 12412  1C55                     L2:	
 12413  1C55  1903               	skipnz
 12414  1C56  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12415  1C57  1C03               	skipc
 12416  1C58  2BA9               	goto	l16977
 12417                           
 12418                           ;ui_key.c: 83: speed = t32;
 12419  1C59  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12420  1C5A  00CF               	movwf	key_process_up_down_variable_speed_ex@speed+1
 12421  1C5B  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12422  1C5C  00CE               	movwf	key_process_up_down_variable_speed_ex@speed
 12423                           
 12424                           ;ui_key.c: 84: change = 1;
 12425  1C5D  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12426  1C5E  0ACD               	incf	key_process_up_down_variable_speed_ex@change,f
 12427                           
 12428                           ;ui_key.c: 85: }
 12429                           ;ui_key.c: 86: }
 12430                           ;ui_key.c: 87: } while (1);
 12431  1C5F  2BA9               	goto	l16977
 12432  1C60                     __end_of_key_process_up_down_variable_speed_ex:	
 12433                           
 12434                           	psect	text8
 12435  1F07                     __ptext8:	
 12436 ;; *************** function _ui_disp_menu *****************
 12437 ;; Defined at:
 12438 ;;		line 549 in file "src/api/ui.c"
 12439 ;; Parameters:    Size  Location     Type
 12440 ;;		None
 12441 ;; Auto vars:     Size  Location     Type
 12442 ;;		None
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  1    wreg      void 
 12445 ;; Registers used:
 12446 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12455 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12456 ;;Total ram usage:        2 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    8
 12459 ;; This function calls:
 12460 ;;		_lcd_clear_buffer
 12461 ;;		_lcd_disp_refresh
 12462 ;;		_lcd_disp_str
 12463 ;;		_ui_disp_balance_and_volume
 12464 ;;		_ui_disp_clear_balance
 12465 ;;		_ui_disp_clear_totale
 12466 ;;		_ui_disp_flow
 12467 ;;		_ui_disp_modbus_id
 12468 ;;		_ui_disp_set_balanceOff
 12469 ;;		_ui_disp_set_balanceWarning
 12470 ;;		_ui_disp_set_calib
 12471 ;;		_ui_disp_set_device_id
 12472 ;;		_ui_disp_set_imd_flow_uint
 12473 ;;		_ui_disp_set_line
 12474 ;;		_ui_disp_set_price
 12475 ;;		_ui_disp_set_transferMoneyLimit
 12476 ;;		_ui_disp_small_flow_how_care
 12477 ;;		_ui_disp_str_num_ex
 12478 ;;		_ui_disp_totale_v
 12479 ;;		_ui_disp_transfer_money
 12480 ;; This function is called by:
 12481 ;;		_key_process_up_down_variable_speed_ex
 12482 ;;		_ui_key_process
 12483 ;;		_main
 12484 ;; This function uses a non-reentrant model
 12485 ;;
 12486                           
 12487                           
 12488                           ;psect for function _ui_disp_menu
 12489  1F07                     _ui_disp_menu:	
 12490                           
 12491                           ;ui.c: 550: Event &= ~(0x01<<3);
 12492                           
 12493                           ;incstack = 0
 12494                           ; Regs used in _ui_disp_menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12495  1F07  30F7               	movlw	247
 12496  1F08  0020               	movlb	0	; select bank0
 12497  1F09  00C1               	movwf	??_ui_disp_menu
 12498  1F0A  0841               	movf	??_ui_disp_menu,w
 12499  1F0B  0021               	movlb	1	; select bank1
 12500  1F0C  05C8               	andwf	_Event^(0+128),f
 12501                           
 12502                           ;ui.c: 551: if((valveStatus==VALVE_CLOSEING || valveStatus==VALVE_OPENING || valveStatus
      +                          ==VALVE_CLOSED) && (menu<3)){
 12503  1F0D  3004               	movlw	4
 12504  1F0E  067A               	xorwf	_valveStatus,w
 12505  1F0F  1903               	btfsc	3,2
 12506  1F10  2F17               	goto	l16875
 12507  1F11  3003               	movlw	3
 12508  1F12  067A               	xorwf	_valveStatus,w
 12509  1F13  1D03               	btfss	3,2
 12510  1F14  037A               	decf	_valveStatus,w
 12511  1F15  1D03               	btfss	3,2
 12512  1F16  2FC6               	goto	l16963
 12513  1F17                     l16875:	
 12514  1F17  3003               	movlw	3
 12515  1F18  0243               	subwf	_menu^(0+128),w
 12516  1F19  1803               	skipnc
 12517  1F1A  2FC6               	goto	l16963
 12518                           
 12519                           ;ui.c: 552: lcd_clear_buffer();
 12520  1F1B  31BB  233F  319F   	fcall	_lcd_clear_buffer
 12521                           
 12522                           ;ui.c: 553: if(valveStatus==VALVE_CLOSED || (sec&0x01)){
 12523  1F1E  037A               	decf	_valveStatus,w
 12524  1F1F  1903               	btfsc	3,2
 12525  1F20  2F24               	goto	l16883
 12526  1F21  0022               	movlb	2	; select bank2
 12527  1F22  1C3F               	btfss	_sec^(0+256),0
 12528  1F23  2F57               	goto	l16899
 12529  1F24                     l16883:	
 12530                           
 12531                           ;ui.c: 555: if(opReason==OFF_REASON_LA){
 12532  1F24  0021               	movlb	1	; select bank1
 12533  1F25  0344               	decf	_opReason^(0+128),w	;volatile
 12534  1F26  1D03               	btfss	3,2
 12535  1F27  2F30               	goto	l16887
 12536                           
 12537                           ;ui.c: 556: lcd_disp_str((uint8_t*)" la 0ff ");
 12538  1F28  30C7               	movlw	low (STR_19| (0+32768))
 12539  1F29  0020               	movlb	0	; select bank0
 12540  1F2A  00A2               	movwf	lcd_disp_str@str
 12541  1F2B  30B8               	movlw	high (STR_19| (0+32768))
 12542  1F2C  00A3               	movwf	lcd_disp_str@str+1
 12543  1F2D  31A8  20C5  319F   	fcall	_lcd_disp_str
 12544  1F30                     l16887:	
 12545                           
 12546                           ;ui.c: 557: }
 12547                           ;ui.c: 558: if(opReason== OFF_REASON_MAN){
 12548  1F30  3002               	movlw	2
 12549  1F31  0021               	movlb	1	; select bank1
 12550  1F32  0644               	xorwf	_opReason^(0+128),w	;volatile
 12551  1F33  1D03               	btfss	3,2
 12552  1F34  2F3D               	goto	l16891
 12553                           
 12554                           ;ui.c: 559: lcd_disp_str((uint8_t*)"    0ff ");
 12555  1F35  30BE               	movlw	low (STR_20| (0+32768))
 12556  1F36  0020               	movlb	0	; select bank0
 12557  1F37  00A2               	movwf	lcd_disp_str@str
 12558  1F38  30B8               	movlw	high (STR_20| (0+32768))
 12559  1F39  00A3               	movwf	lcd_disp_str@str+1
 12560  1F3A  31A8  20C5  319F   	fcall	_lcd_disp_str
 12561  1F3D                     l16891:	
 12562                           
 12563                           ;ui.c: 560: }
 12564                           ;ui.c: 561: if(opReason==ON_REASON_HA){
 12565  1F3D  3003               	movlw	3
 12566  1F3E  0021               	movlb	1	; select bank1
 12567  1F3F  0644               	xorwf	_opReason^(0+128),w	;volatile
 12568  1F40  1D03               	btfss	3,2
 12569  1F41  2F4A               	goto	l16895
 12570                           
 12571                           ;ui.c: 562: lcd_disp_str((uint8_t*)" ha 0n  ");
 12572  1F42  30B5               	movlw	low (STR_21| (0+32768))
 12573  1F43  0020               	movlb	0	; select bank0
 12574  1F44  00A2               	movwf	lcd_disp_str@str
 12575  1F45  30B8               	movlw	high (STR_21| (0+32768))
 12576  1F46  00A3               	movwf	lcd_disp_str@str+1
 12577  1F47  31A8  20C5  319F   	fcall	_lcd_disp_str
 12578  1F4A                     l16895:	
 12579                           
 12580                           ;ui.c: 563: }
 12581                           ;ui.c: 564: if(opReason==ON_REASON_MAN){
 12582  1F4A  3004               	movlw	4
 12583  1F4B  0021               	movlb	1	; select bank1
 12584  1F4C  0644               	xorwf	_opReason^(0+128),w	;volatile
 12585  1F4D  1D03               	btfss	3,2
 12586  1F4E  0008               	return
 12587                           
 12588                           ;ui.c: 565: lcd_disp_str((uint8_t*)"    0n  ");
 12589  1F4F  30AC               	movlw	low (STR_22| (0+32768))
 12590  1F50  0020               	movlb	0	; select bank0
 12591  1F51  00A2               	movwf	lcd_disp_str@str
 12592  1F52  30B8               	movlw	high (STR_22| (0+32768))
 12593  1F53  00A3               	movwf	lcd_disp_str@str+1
 12594  1F54  31A8  20C5         	fcall	_lcd_disp_str
 12595                           
 12596                           ;ui.c: 566: }
 12597                           ;ui.c: 567: }else{
 12598  1F56  0008               	return
 12599  1F57                     l16899:	
 12600                           
 12601                           ;ui.c: 568: lcd_disp_refresh();
 12602  1F57  31BB  23DD         	fcall	_lcd_disp_refresh
 12603                           
 12604                           ;ui.c: 569: }
 12605                           ;ui.c: 570: return;
 12606  1F59  0008               	return
 12607  1F5A                     l16903:	
 12608                           ;ui.c: 574: {
 12609                           ;ui.c: 575: case 0: {ui_disp_flow(); do { LATFbits.LATF1 = 1; } while(0);;do { LATAbits.
      +                          LATA3 = 0; } while(0);;do { LATFbits.LATF0 = 0; } while(0);;break;}
 12610                           
 12611                           ;ui.c: 571: }
 12612                           ;ui.c: 573: switch (menu )
 12613                           
 12614  1F5A  31A2  22BE         	fcall	_ui_disp_flow
 12615  1F5C  0027               	movlb	7	; select bank7
 12616  1F5D  148C               	bsf	12,1	;volatile
 12617  1F5E  0022               	movlb	2	; select bank2
 12618  1F5F  118C               	bcf	12,3	;volatile
 12619  1F60  0027               	movlb	7	; select bank7
 12620  1F61  100C               	bcf	12,0	;volatile
 12621  1F62  0008               	return
 12622  1F63                     l16911:	
 12623                           ;ui.c: 576: case 1: {ui_disp_totale_v(); do { LATAbits.LATA3 = 1; } while(0);;do { LATFb
      +                          its.LATF0 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12624                           
 12625  1F63  31AD  25A3         	fcall	_ui_disp_totale_v
 12626  1F65  0022               	movlb	2	; select bank2
 12627  1F66  158C               	bsf	12,3	;volatile
 12628  1F67  0027               	movlb	7	; select bank7
 12629  1F68  100C               	bcf	12,0	;volatile
 12630  1F69  108C               	bcf	12,1	;volatile
 12631  1F6A  0008               	return
 12632  1F6B                     l16919:	
 12633                           ;ui.c: 577: case 2: {ui_disp_balance_and_volume(); do { LATFbits.LATF0 = 1; } while(0);;
      +                          do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12634                           
 12635  1F6B  3194  247D         	fcall	_ui_disp_balance_and_volume
 12636  1F6D  0027               	movlb	7	; select bank7
 12637  1F6E  140C               	bsf	12,0	;volatile
 12638  1F6F  0022               	movlb	2	; select bank2
 12639  1F70  118C               	bcf	12,3	;volatile
 12640  1F71  0027               	movlb	7	; select bank7
 12641  1F72  108C               	bcf	12,1	;volatile
 12642  1F73  0008               	return
 12643  1F74                     l16927:	
 12644                           ;ui.c: 578: case 0x10: {
 12645                           
 12646                           
 12647                           ;ui.c: 579: password=(uint8_t)(*((uint16_t*)uiAdjbuf));
 12648  1F74  0022               	movlb	2	; select bank2
 12649  1F75  0861               	movf	_uiAdjbuf^(0+256),w
 12650  1F76  0020               	movlb	0	; select bank0
 12651  1F77  00C1               	movwf	??_ui_disp_menu
 12652  1F78  01C2               	clrf	??_ui_disp_menu+1
 12653  1F79  0841               	movf	??_ui_disp_menu,w
 12654  1F7A  0022               	movlb	2	; select bank2
 12655  1F7B  00AA               	movwf	_password^(0+256)
 12656  1F7C  0020               	movlb	0	; select bank0
 12657  1F7D  0842               	movf	??_ui_disp_menu+1,w
 12658  1F7E  0022               	movlb	2	; select bank2
 12659  1F7F  00AB               	movwf	(_password+1)^(0+256)
 12660                           
 12661                           ;ui.c: 580: ui_disp_str_num_ex((uint8_t*)"psd-", password);
 12662  1F80  3048               	movlw	low (STR_23| (0+32768))
 12663  1F81  0020               	movlb	0	; select bank0
 12664  1F82  00A7               	movwf	ui_disp_str_num_ex@str
 12665  1F83  30B9               	movlw	high (STR_23| (0+32768))
 12666  1F84  00A8               	movwf	ui_disp_str_num_ex@str+1
 12667  1F85  0022               	movlb	2	; select bank2
 12668  1F86  082B               	movf	(_password+1)^(0+256),w
 12669  1F87  0020               	movlb	0	; select bank0
 12670  1F88  00AA               	movwf	ui_disp_str_num_ex@num+1
 12671  1F89  0022               	movlb	2	; select bank2
 12672  1F8A  082A               	movf	_password^(0+256),w
 12673  1F8B  0020               	movlb	0	; select bank0
 12674  1F8C  00A9               	movwf	ui_disp_str_num_ex@num
 12675  1F8D  31A6  268F         	fcall	_ui_disp_str_num_ex
 12676                           
 12677                           ;ui.c: 581: break;}
 12678  1F8F  0008               	return
 12679  1F90                     l16931:	
 12680                           ;ui.c: 582: case 0x20: {ui_disp_clear_balance(); break; }
 12681                           
 12682  1F90  31BC  246B         	fcall	_ui_disp_clear_balance
 12683  1F92  0008               	return
 12684  1F93                     l16933:	
 12685                           ;ui.c: 583: case 0x30: {ui_disp_clear_totale(); break; }
 12686                           
 12687  1F93  31BC  2446         	fcall	_ui_disp_clear_totale
 12688  1F95  0008               	return
 12689  1F96                     l16935:	
 12690                           ;ui.c: 584: case 0x40: {ui_disp_set_line(); break; }
 12691                           
 12692  1F96  31A8  207E         	fcall	_ui_disp_set_line
 12693  1F98  0008               	return
 12694  1F99                     l16937:	
 12695                           ;ui.c: 585: case 0xe0:
 12696                           
 12697                           
 12698                           ;ui.c: 586: ui_disp_set_calib();
 12699  1F99  31A1  2117  319F   	fcall	_ui_disp_set_calib
 12700                           
 12701                           ;ui.c: 587: do { LATFbits.LATF1 = ~LATFbits.LATF1; } while(0);;
 12702  1F9C  1003               	clrc
 12703  1F9D  0027               	movlb	7	; select bank7
 12704  1F9E  1C8C               	btfss	12,1	;volatile
 12705  1F9F  1403               	setc
 12706  1FA0  1C03               	btfss	3,0
 12707  1FA1  2FA5               	goto	u15970
 12708  1FA2  0027               	movlb	7	; select bank7
 12709  1FA3  148C               	bsf	12,1	;volatile
 12710  1FA4  0008               	return
 12711  1FA5                     u15970:	
 12712  1FA5  0027               	movlb	7	; select bank7
 12713  1FA6  108C               	bcf	12,1	;volatile
 12714                           
 12715                           ;ui.c: 588: break;
 12716  1FA7  0008               	return
 12717  1FA8                     l16941:	
 12718                           ;ui.c: 589: case 0x50: {ui_disp_set_calib();break;}
 12719                           
 12720  1FA8  31A1  2117         	fcall	_ui_disp_set_calib
 12721  1FAA  0008               	return
 12722  1FAB                     l16943:	
 12723                           ;ui.c: 590: case 0x60: {ui_disp_set_device_id();break;}
 12724                           
 12725  1FAB  31BC  2492         	fcall	_ui_disp_set_device_id
 12726  1FAD  0008               	return
 12727  1FAE                     l16945:	
 12728                           ;ui.c: 591: case 0x70: {ui_disp_small_flow_how_care();break;}
 12729                           
 12730  1FAE  31BB  23FF         	fcall	_ui_disp_small_flow_how_care
 12731  1FB0  0008               	return
 12732  1FB1                     l16947:	
 12733                           ;ui.c: 593: case 0x80: {ui_disp_set_price();break;}
 12734                           
 12735  1FB1  31AB  239B         	fcall	_ui_disp_set_price
 12736  1FB3  0008               	return
 12737  1FB4                     l16949:	
 12738                           ;ui.c: 594: case 0x90: {ui_disp_set_transferMoneyLimit();break;}
 12739                           
 12740  1FB4  31BC  24A6         	fcall	_ui_disp_set_transferMoneyLimit
 12741  1FB6  0008               	return
 12742  1FB7                     l16951:	
 12743                           ;ui.c: 595: case 0xa0: {ui_disp_modbus_id(); break;}
 12744                           
 12745  1FB7  31BB  23EE         	fcall	_ui_disp_modbus_id
 12746  1FB9  0008               	return
 12747  1FBA                     l16953:	
 12748                           ;ui.c: 597: case 0xb0:{ui_disp_set_balanceWarning();break;};
 12749                           
 12750  1FBA  31B4  2480         	fcall	_ui_disp_set_balanceWarning
 12751  1FBC  0008               	return
 12752  1FBD                     l16955:	
 12753                           ;ui.c: 598: case 0xb1:{ui_disp_set_balanceOff();break;}
 12754                           
 12755  1FBD  31B4  244F         	fcall	_ui_disp_set_balanceOff
 12756  1FBF  0008               	return
 12757  1FC0                     l16957:	
 12758                           ;ui.c: 601: case 0xc0: {ui_disp_transfer_money(); break;}
 12759                           
 12760  1FC0  31A1  2199         	fcall	_ui_disp_transfer_money
 12761  1FC2  0008               	return
 12762  1FC3                     l16959:	
 12763                           ;ui.c: 605: case 0xf1:{ui_disp_set_imd_flow_uint();break;}
 12764                           
 12765  1FC3  31BD  252A         	fcall	_ui_disp_set_imd_flow_uint
 12766                           
 12767                           ;ui.c: 638: }
 12768  1FC5  0008               	return
 12769  1FC6                     l16963:	
 12770  1FC6  0021               	movlb	1	; select bank1
 12771  1FC7  0843               	movf	_menu^(0+128),w
 12772                           
 12773                           ; Switch size 1, requested type "space"
 12774                           ; Number of cases is 18, Range of values is 0 to 241
 12775                           ; switch strategies available:
 12776                           ; Name         Instructions Cycles
 12777                           ; simple_byte           55    28 (average)
 12778                           ; jumptable            260     6 (fixed)
 12779                           ;	Chosen strategy is simple_byte
 12780  1FC8  3A00               	xorlw	0	; case 0
 12781  1FC9  1903               	skipnz
 12782  1FCA  2F5A               	goto	l16903
 12783  1FCB  3A01               	xorlw	1	; case 1
 12784  1FCC  1903               	skipnz
 12785  1FCD  2F63               	goto	l16911
 12786  1FCE  3A03               	xorlw	3	; case 2
 12787  1FCF  1903               	skipnz
 12788  1FD0  2F6B               	goto	l16919
 12789  1FD1  3A12               	xorlw	18	; case 16
 12790  1FD2  1903               	skipnz
 12791  1FD3  2F74               	goto	l16927
 12792  1FD4  3A30               	xorlw	48	; case 32
 12793  1FD5  1903               	skipnz
 12794  1FD6  2F90               	goto	l16931
 12795  1FD7  3A10               	xorlw	16	; case 48
 12796  1FD8  1903               	skipnz
 12797  1FD9  2F93               	goto	l16933
 12798  1FDA  3A70               	xorlw	112	; case 64
 12799  1FDB  1903               	skipnz
 12800  1FDC  2F96               	goto	l16935
 12801  1FDD  3A10               	xorlw	16	; case 80
 12802  1FDE  1903               	skipnz
 12803  1FDF  2FA8               	goto	l16941
 12804  1FE0  3A30               	xorlw	48	; case 96
 12805  1FE1  1903               	skipnz
 12806  1FE2  2FAB               	goto	l16943
 12807  1FE3  3A10               	xorlw	16	; case 112
 12808  1FE4  1903               	skipnz
 12809  1FE5  2FAE               	goto	l16945
 12810  1FE6  3AF0               	xorlw	240	; case 128
 12811  1FE7  1903               	skipnz
 12812  1FE8  2FB1               	goto	l16947
 12813  1FE9  3A10               	xorlw	16	; case 144
 12814  1FEA  1903               	skipnz
 12815  1FEB  2FB4               	goto	l16949
 12816  1FEC  3A30               	xorlw	48	; case 160
 12817  1FED  1903               	skipnz
 12818  1FEE  2FB7               	goto	l16951
 12819  1FEF  3A10               	xorlw	16	; case 176
 12820  1FF0  1903               	skipnz
 12821  1FF1  2FBA               	goto	l16953
 12822  1FF2  3A01               	xorlw	1	; case 177
 12823  1FF3  1903               	skipnz
 12824  1FF4  2FBD               	goto	l16955
 12825  1FF5  3A71               	xorlw	113	; case 192
 12826  1FF6  1903               	skipnz
 12827  1FF7  2FC0               	goto	l16957
 12828  1FF8  3A20               	xorlw	32	; case 224
 12829  1FF9  1903               	skipnz
 12830  1FFA  2F99               	goto	l16937
 12831  1FFB  3A11               	xorlw	17	; case 241
 12832  1FFC  1903               	skipnz
 12833  1FFD  2FC3               	goto	l16959
 12834  1FFE  2FFF               	goto	l509
 12835  1FFF                     l509:	
 12836  1FFF  0008               	return
 12837  2000                     __end_of_ui_disp_menu:	
 12838                           
 12839                           	psect	text9
 12840  2199                     __ptext9:	
 12841 ;; *************** function _ui_disp_transfer_money *****************
 12842 ;; Defined at:
 12843 ;;		line 250 in file "src/api/ui.c"
 12844 ;; Parameters:    Size  Location     Type
 12845 ;;		None
 12846 ;; Auto vars:     Size  Location     Type
 12847 ;;		None
 12848 ;; Return value:  Size  Location     Type
 12849 ;;                  1    wreg      void 
 12850 ;; Registers used:
 12851 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12852 ;; Tracked objects:
 12853 ;;		On entry : 0/0
 12854 ;;		On exit  : 0/0
 12855 ;;		Unchanged: 0/0
 12856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12860 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12861 ;;Total ram usage:        2 bytes
 12862 ;; Hardware stack levels used:    1
 12863 ;; Hardware stack levels required when called:    5
 12864 ;; This function calls:
 12865 ;;		___lldiv
 12866 ;;		_lcd_clear_buffer
 12867 ;;		_lcd_disp_str
 12868 ;;		_m_mem_set
 12869 ;;		_ui_head_hide
 12870 ;;		_ui_uint32_2_str
 12871 ;; This function is called by:
 12872 ;;		_ui_disp_menu
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           
 12877                           ;psect for function _ui_disp_transfer_money
 12878  2199                     _ui_disp_transfer_money:	
 12879                           
 12880                           ;ui.c: 251: lcd_clear_buffer();
 12881                           
 12882                           ;incstack = 0
 12883                           ; Regs used in _ui_disp_transfer_money: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12884  2199  31BB  233F  31A1   	fcall	_lcd_clear_buffer
 12885                           
 12886                           ;ui.c: 252: if(mainSystemData.cardID ==0 ){
 12887  219C  0024               	movlb	4	; select bank4
 12888  219D  0827               	movf	((_mainSystemData+3)^(0+512)+4),w
 12889  219E  0426               	iorwf	((_mainSystemData+2)^(0+512)+4),w
 12890  219F  0425               	iorwf	((_mainSystemData+1)^(0+512)+4),w
 12891  21A0  0424               	iorwf	(_mainSystemData^(0+512)+4),w
 12892  21A1  1D03               	skipz
 12893  21A2  29AB               	goto	l13287
 12894                           
 12895                           ;ui.c: 253: lcd_disp_str((uint8_t*)"k0      ");
 12896  21A3  30A3               	movlw	low (STR_4| (0+32768))
 12897  21A4  0020               	movlb	0	; select bank0
 12898  21A5  00A2               	movwf	lcd_disp_str@str
 12899  21A6  30B8               	movlw	high (STR_4| (0+32768))
 12900  21A7  00A3               	movwf	lcd_disp_str@str+1
 12901  21A8  31A8  20C5         	fcall	_lcd_disp_str
 12902                           
 12903                           ;ui.c: 254: }else{
 12904  21AA  0008               	return
 12905  21AB                     l13287:	
 12906                           
 12907                           ;ui.c: 255: __t32=mainSystemData.transferMoney;
 12908  21AB  300C               	movlw	12
 12909  21AC  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 12910  21AD  0086               	movwf	6
 12911  21AE  3002               	movlw	2	; select bank4/5
 12912  21AF  0087               	movwf	7
 12913  21B0  3F40               	moviw [0]fsr1
 12914  21B1  0021               	movlb	1	; select bank1
 12915  21B2  00B4               	movwf	___t32^(0+128)
 12916  21B3  3F41               	moviw [1]fsr1
 12917  21B4  00B5               	movwf	(___t32+1)^(0+128)
 12918  21B5  3F42               	moviw [2]fsr1
 12919  21B6  00B6               	movwf	(___t32+2)^(0+128)
 12920  21B7  3F43               	moviw [3]fsr1
 12921  21B8  00B7               	movwf	(___t32+3)^(0+128)
 12922                           
 12923                           ;ui.c: 256: __t32/=100;
 12924  21B9  3000               	movlw	0
 12925  21BA  0020               	movlb	0	; select bank0
 12926  21BB  00AB               	movwf	___lldiv@divisor+3
 12927  21BC  3000               	movlw	0
 12928  21BD  00AA               	movwf	___lldiv@divisor+2
 12929  21BE  3000               	movlw	0
 12930  21BF  00A9               	movwf	___lldiv@divisor+1
 12931  21C0  3064               	movlw	100
 12932  21C1  00A8               	movwf	___lldiv@divisor
 12933  21C2  0021               	movlb	1	; select bank1
 12934  21C3  0837               	movf	(___t32+3)^(0+128),w
 12935  21C4  0020               	movlb	0	; select bank0
 12936  21C5  00AF               	movwf	___lldiv@dividend+3
 12937  21C6  0021               	movlb	1	; select bank1
 12938  21C7  0836               	movf	(___t32+2)^(0+128),w
 12939  21C8  0020               	movlb	0	; select bank0
 12940  21C9  00AE               	movwf	___lldiv@dividend+2
 12941  21CA  0021               	movlb	1	; select bank1
 12942  21CB  0835               	movf	(___t32+1)^(0+128),w
 12943  21CC  0020               	movlb	0	; select bank0
 12944  21CD  00AD               	movwf	___lldiv@dividend+1
 12945  21CE  0021               	movlb	1	; select bank1
 12946  21CF  0834               	movf	___t32^(0+128),w
 12947  21D0  0020               	movlb	0	; select bank0
 12948  21D1  00AC               	movwf	___lldiv@dividend
 12949  21D2  31AA  2245  31A1   	fcall	___lldiv
 12950  21D5  0020               	movlb	0	; select bank0
 12951  21D6  082B               	movf	?___lldiv+3,w
 12952  21D7  0021               	movlb	1	; select bank1
 12953  21D8  00B7               	movwf	(___t32+3)^(0+128)
 12954  21D9  0020               	movlb	0	; select bank0
 12955  21DA  082A               	movf	?___lldiv+2,w
 12956  21DB  0021               	movlb	1	; select bank1
 12957  21DC  00B6               	movwf	(___t32+2)^(0+128)
 12958  21DD  0020               	movlb	0	; select bank0
 12959  21DE  0829               	movf	?___lldiv+1,w
 12960  21DF  0021               	movlb	1	; select bank1
 12961  21E0  00B5               	movwf	(___t32+1)^(0+128)
 12962  21E1  0020               	movlb	0	; select bank0
 12963  21E2  0828               	movf	?___lldiv,w
 12964  21E3  0021               	movlb	1	; select bank1
 12965  21E4  00B4               	movwf	___t32^(0+128)
 12966                           
 12967                           ;ui.c: 257: m_mem_set(lcdBuf, ' ', sizeof (lcdBuf));
 12968  21E5  3058               	movlw	low _lcdBuf
 12969  21E6  00F3               	movwf	m_mem_set@buf
 12970  21E7  3001               	movlw	high _lcdBuf
 12971  21E8  00F4               	movwf	m_mem_set@buf+1
 12972  21E9  3020               	movlw	32
 12973  21EA  0020               	movlb	0	; select bank0
 12974  21EB  00BA               	movwf	??_ui_disp_transfer_money
 12975  21EC  083A               	movf	??_ui_disp_transfer_money,w
 12976  21ED  00F5               	movwf	m_mem_set@x
 12977  21EE  3009               	movlw	9
 12978  21EF  00BB               	movwf	??_ui_disp_transfer_money+1
 12979  21F0  083B               	movf	??_ui_disp_transfer_money+1,w
 12980  21F1  00F6               	movwf	m_mem_set@len
 12981  21F2  31BB  23BC  31A1   	fcall	_m_mem_set
 12982                           
 12983                           ;ui.c: 258: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __t32, 8-1);
 12984  21F5  0021               	movlb	1	; select bank1
 12985  21F6  0837               	movf	(___t32+3)^(0+128),w
 12986  21F7  0020               	movlb	0	; select bank0
 12987  21F8  00B4               	movwf	ui_uint32_2_str@x+3
 12988  21F9  0021               	movlb	1	; select bank1
 12989  21FA  0836               	movf	(___t32+2)^(0+128),w
 12990  21FB  0020               	movlb	0	; select bank0
 12991  21FC  00B3               	movwf	ui_uint32_2_str@x+2
 12992  21FD  0021               	movlb	1	; select bank1
 12993  21FE  0835               	movf	(___t32+1)^(0+128),w
 12994  21FF  0020               	movlb	0	; select bank0
 12995  2200  00B2               	movwf	ui_uint32_2_str@x+1
 12996  2201  0021               	movlb	1	; select bank1
 12997  2202  0834               	movf	___t32^(0+128),w
 12998  2203  0020               	movlb	0	; select bank0
 12999  2204  00B1               	movwf	ui_uint32_2_str@x
 13000  2205  3007               	movlw	7
 13001  2206  00BA               	movwf	??_ui_disp_transfer_money
 13002  2207  083A               	movf	??_ui_disp_transfer_money,w
 13003  2208  00B5               	movwf	ui_uint32_2_str@len
 13004  2209  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13005  220A  31A7  2747  31A1   	fcall	_ui_uint32_2_str
 13006                           
 13007                           ;ui.c: 259: ui_head_hide(lcdBuf, 8 - 1 - 0);
 13008  220D  3007               	movlw	7
 13009  220E  0020               	movlb	0	; select bank0
 13010  220F  00BA               	movwf	??_ui_disp_transfer_money
 13011  2210  083A               	movf	??_ui_disp_transfer_money,w
 13012  2211  00F3               	movwf	ui_head_hide@loc
 13013  2212  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13014  2213  31B0  20AE  31A1   	fcall	_ui_head_hide
 13015                           
 13016                           ;ui.c: 260: lcdBuf[0] = 'k';
 13017  2216  306B               	movlw	107
 13018  2217  0020               	movlb	0	; select bank0
 13019  2218  00BA               	movwf	??_ui_disp_transfer_money
 13020  2219  083A               	movf	??_ui_disp_transfer_money,w
 13021  221A  0022               	movlb	2	; select bank2
 13022  221B  00D8               	movwf	_lcdBuf^(0+256)
 13023                           
 13024                           ;ui.c: 261: lcdBuf[1] = 'j';
 13025  221C  306A               	movlw	106
 13026  221D  0020               	movlb	0	; select bank0
 13027  221E  00BA               	movwf	??_ui_disp_transfer_money
 13028  221F  083A               	movf	??_ui_disp_transfer_money,w
 13029  2220  0022               	movlb	2	; select bank2
 13030  2221  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13031                           
 13032                           ;ui.c: 264: lcd_disp_str(lcdBuf);
 13033  2222  3058               	movlw	low _lcdBuf
 13034  2223  0020               	movlb	0	; select bank0
 13035  2224  00A2               	movwf	lcd_disp_str@str
 13036  2225  3001               	movlw	high _lcdBuf
 13037  2226  00A3               	movwf	lcd_disp_str@str+1
 13038  2227  31A8  20C5         	fcall	_lcd_disp_str
 13039  2229  0008               	return
 13040  222A                     __end_of_ui_disp_transfer_money:	
 13041                           
 13042                           	psect	text10
 13043  268F                     __ptext10:	
 13044 ;; *************** function _ui_disp_str_num_ex *****************
 13045 ;; Defined at:
 13046 ;;		line 87 in file "src/api/ui.c"
 13047 ;; Parameters:    Size  Location     Type
 13048 ;;  str             2    7[BANK0 ] PTR unsigned char 
 13049 ;;		 -> STR_23(5), 
 13050 ;;  num             2    9[BANK0 ] unsigned int 
 13051 ;; Auto vars:     Size  Location     Type
 13052 ;;		None
 13053 ;; Return value:  Size  Location     Type
 13054 ;;                  1    wreg      void 
 13055 ;; Registers used:
 13056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13057 ;; Tracked objects:
 13058 ;;		On entry : 0/0
 13059 ;;		On exit  : 0/0
 13060 ;;		Unchanged: 0/0
 13061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13065 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 13066 ;;Total ram usage:        6 bytes
 13067 ;; Hardware stack levels used:    1
 13068 ;; Hardware stack levels required when called:    5
 13069 ;; This function calls:
 13070 ;;		___lwdiv
 13071 ;;		___lwmod
 13072 ;;		_lcd_clear_buffer
 13073 ;;		_lcd_disp_str
 13074 ;;		_m_mem_set
 13075 ;;		_ui_mem_cpy
 13076 ;; This function is called by:
 13077 ;;		_ui_disp_menu
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           
 13082                           ;psect for function _ui_disp_str_num_ex
 13083  268F                     _ui_disp_str_num_ex:	
 13084                           
 13085                           ;ui.c: 89: lcd_clear_buffer();
 13086                           
 13087                           ;incstack = 0
 13088                           ; Regs used in _ui_disp_str_num_ex: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13089  268F  31BB  233F  31A6   	fcall	_lcd_clear_buffer
 13090                           
 13091                           ;ui.c: 90: m_mem_set(lcdBuf, ' ', 8);
 13092  2692  3058               	movlw	low _lcdBuf
 13093  2693  00F3               	movwf	m_mem_set@buf
 13094  2694  3001               	movlw	high _lcdBuf
 13095  2695  00F4               	movwf	m_mem_set@buf+1
 13096  2696  3020               	movlw	32
 13097  2697  0020               	movlb	0	; select bank0
 13098  2698  00AB               	movwf	??_ui_disp_str_num_ex
 13099  2699  082B               	movf	??_ui_disp_str_num_ex,w
 13100  269A  00F5               	movwf	m_mem_set@x
 13101  269B  3008               	movlw	8
 13102  269C  00AC               	movwf	??_ui_disp_str_num_ex+1
 13103  269D  082C               	movf	??_ui_disp_str_num_ex+1,w
 13104  269E  00F6               	movwf	m_mem_set@len
 13105  269F  31BB  23BC  31A6   	fcall	_m_mem_set
 13106                           
 13107                           ;ui.c: 91: lcdBuf[8] = '\0';
 13108  26A2  0022               	movlb	2	; select bank2
 13109  26A3  01E0               	clrf	(_lcdBuf^(0+256)+8)
 13110                           
 13111                           ;ui.c: 92: ui_mem_cpy(lcdBuf, str);
 13112  26A4  0020               	movlb	0	; select bank0
 13113  26A5  0828               	movf	ui_disp_str_num_ex@str+1,w
 13114  26A6  00F4               	movwf	ui_mem_cpy@s+1
 13115  26A7  0827               	movf	ui_disp_str_num_ex@str,w
 13116  26A8  00F3               	movwf	ui_mem_cpy@s
 13117  26A9  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13118  26AA  31BF  278C  31A6   	fcall	_ui_mem_cpy
 13119                           
 13120                           ;ui.c: 93: lcdBuf[5]='0';
 13121  26AD  3030               	movlw	48
 13122  26AE  0020               	movlb	0	; select bank0
 13123  26AF  00AB               	movwf	??_ui_disp_str_num_ex
 13124  26B0  082B               	movf	??_ui_disp_str_num_ex,w
 13125  26B1  0022               	movlb	2	; select bank2
 13126  26B2  00DD               	movwf	(_lcdBuf^(0+256)+5)
 13127                           
 13128                           ;ui.c: 94: lcdBuf[6]='0';
 13129  26B3  3030               	movlw	48
 13130  26B4  0020               	movlb	0	; select bank0
 13131  26B5  00AB               	movwf	??_ui_disp_str_num_ex
 13132  26B6  082B               	movf	??_ui_disp_str_num_ex,w
 13133  26B7  0022               	movlb	2	; select bank2
 13134  26B8  00DE               	movwf	(_lcdBuf^(0+256)+6)
 13135                           
 13136                           ;ui.c: 95: __t16 = num;
 13137  26B9  0020               	movlb	0	; select bank0
 13138  26BA  082A               	movf	ui_disp_str_num_ex@num+1,w
 13139  26BB  00F9               	movwf	___t16+1
 13140  26BC  0829               	movf	ui_disp_str_num_ex@num,w
 13141  26BD  00F8               	movwf	___t16
 13142                           
 13143                           ;ui.c: 96: lcdBuf[7] = '0' + (__t16 % 10);
 13144  26BE  300A               	movlw	10
 13145  26BF  00F3               	movwf	___lwmod@divisor
 13146  26C0  3000               	movlw	0
 13147  26C1  00F4               	movwf	___lwmod@divisor+1
 13148  26C2  0879               	movf	___t16+1,w
 13149  26C3  00F6               	movwf	___lwmod@dividend+1
 13150  26C4  0878               	movf	___t16,w
 13151  26C5  00F5               	movwf	___lwmod@dividend
 13152  26C6  31B1  2130  31A6   	fcall	___lwmod
 13153  26C9  0873               	movf	?___lwmod,w
 13154  26CA  3E30               	addlw	48
 13155  26CB  0020               	movlb	0	; select bank0
 13156  26CC  00AB               	movwf	??_ui_disp_str_num_ex
 13157  26CD  082B               	movf	??_ui_disp_str_num_ex,w
 13158  26CE  0022               	movlb	2	; select bank2
 13159  26CF  00DF               	movwf	(_lcdBuf^(0+256)+7)
 13160                           
 13161                           ;ui.c: 97: __t16 /= 10;
 13162  26D0  300A               	movlw	10
 13163  26D1  00F3               	movwf	___lwdiv@divisor
 13164  26D2  3000               	movlw	0
 13165  26D3  00F4               	movwf	___lwdiv@divisor+1
 13166  26D4  0879               	movf	___t16+1,w
 13167  26D5  00F6               	movwf	___lwdiv@dividend+1
 13168  26D6  0878               	movf	___t16,w
 13169  26D7  00F5               	movwf	___lwdiv@dividend
 13170  26D8  31B5  2518  31A6   	fcall	___lwdiv
 13171  26DB  0874               	movf	?___lwdiv+1,w
 13172  26DC  00F9               	movwf	___t16+1
 13173  26DD  0873               	movf	?___lwdiv,w
 13174  26DE  00F8               	movwf	___t16
 13175                           
 13176                           ;ui.c: 98: if (__t16 > 0) {
 13177  26DF  0878               	movf	___t16,w
 13178  26E0  0479               	iorwf	___t16+1,w
 13179  26E1  1903               	btfsc	3,2
 13180  26E2  2F3F               	goto	l16835
 13181                           
 13182                           ;ui.c: 99: lcdBuf[6] = '0' + (__t16 % 10);
 13183  26E3  300A               	movlw	10
 13184  26E4  00F3               	movwf	___lwmod@divisor
 13185  26E5  3000               	movlw	0
 13186  26E6  00F4               	movwf	___lwmod@divisor+1
 13187  26E7  0879               	movf	___t16+1,w
 13188  26E8  00F6               	movwf	___lwmod@dividend+1
 13189  26E9  0878               	movf	___t16,w
 13190  26EA  00F5               	movwf	___lwmod@dividend
 13191  26EB  31B1  2130  31A6   	fcall	___lwmod
 13192  26EE  0873               	movf	?___lwmod,w
 13193  26EF  3E30               	addlw	48
 13194  26F0  0020               	movlb	0	; select bank0
 13195  26F1  00AB               	movwf	??_ui_disp_str_num_ex
 13196  26F2  082B               	movf	??_ui_disp_str_num_ex,w
 13197  26F3  0022               	movlb	2	; select bank2
 13198  26F4  00DE               	movwf	(_lcdBuf^(0+256)+6)
 13199                           
 13200                           ;ui.c: 100: __t16 /= 10;
 13201  26F5  300A               	movlw	10
 13202  26F6  00F3               	movwf	___lwdiv@divisor
 13203  26F7  3000               	movlw	0
 13204  26F8  00F4               	movwf	___lwdiv@divisor+1
 13205  26F9  0879               	movf	___t16+1,w
 13206  26FA  00F6               	movwf	___lwdiv@dividend+1
 13207  26FB  0878               	movf	___t16,w
 13208  26FC  00F5               	movwf	___lwdiv@dividend
 13209  26FD  31B5  2518  31A6   	fcall	___lwdiv
 13210  2700  0874               	movf	?___lwdiv+1,w
 13211  2701  00F9               	movwf	___t16+1
 13212  2702  0873               	movf	?___lwdiv,w
 13213  2703  00F8               	movwf	___t16
 13214                           
 13215                           ;ui.c: 101: if (__t16 > 0) {
 13216  2704  0878               	movf	___t16,w
 13217  2705  0479               	iorwf	___t16+1,w
 13218  2706  1903               	btfsc	3,2
 13219  2707  2F3F               	goto	l16835
 13220                           
 13221                           ;ui.c: 102: lcdBuf[5] = '0' + (__t16 % 10);
 13222  2708  300A               	movlw	10
 13223  2709  00F3               	movwf	___lwmod@divisor
 13224  270A  3000               	movlw	0
 13225  270B  00F4               	movwf	___lwmod@divisor+1
 13226  270C  0879               	movf	___t16+1,w
 13227  270D  00F6               	movwf	___lwmod@dividend+1
 13228  270E  0878               	movf	___t16,w
 13229  270F  00F5               	movwf	___lwmod@dividend
 13230  2710  31B1  2130  31A6   	fcall	___lwmod
 13231  2713  0873               	movf	?___lwmod,w
 13232  2714  3E30               	addlw	48
 13233  2715  0020               	movlb	0	; select bank0
 13234  2716  00AB               	movwf	??_ui_disp_str_num_ex
 13235  2717  082B               	movf	??_ui_disp_str_num_ex,w
 13236  2718  0022               	movlb	2	; select bank2
 13237  2719  00DD               	movwf	(_lcdBuf^(0+256)+5)
 13238                           
 13239                           ;ui.c: 103: __t16 /= 10;
 13240  271A  300A               	movlw	10
 13241  271B  00F3               	movwf	___lwdiv@divisor
 13242  271C  3000               	movlw	0
 13243  271D  00F4               	movwf	___lwdiv@divisor+1
 13244  271E  0879               	movf	___t16+1,w
 13245  271F  00F6               	movwf	___lwdiv@dividend+1
 13246  2720  0878               	movf	___t16,w
 13247  2721  00F5               	movwf	___lwdiv@dividend
 13248  2722  31B5  2518  31A6   	fcall	___lwdiv
 13249  2725  0874               	movf	?___lwdiv+1,w
 13250  2726  00F9               	movwf	___t16+1
 13251  2727  0873               	movf	?___lwdiv,w
 13252  2728  00F8               	movwf	___t16
 13253                           
 13254                           ;ui.c: 104: if (__t16 > 0) {
 13255  2729  0878               	movf	___t16,w
 13256  272A  0479               	iorwf	___t16+1,w
 13257  272B  1903               	btfsc	3,2
 13258  272C  2F3F               	goto	l16835
 13259                           
 13260                           ;ui.c: 105: lcdBuf[4] = '0' + (__t16 % 10);
 13261  272D  300A               	movlw	10
 13262  272E  00F3               	movwf	___lwmod@divisor
 13263  272F  3000               	movlw	0
 13264  2730  00F4               	movwf	___lwmod@divisor+1
 13265  2731  0879               	movf	___t16+1,w
 13266  2732  00F6               	movwf	___lwmod@dividend+1
 13267  2733  0878               	movf	___t16,w
 13268  2734  00F5               	movwf	___lwmod@dividend
 13269  2735  31B1  2130  31A6   	fcall	___lwmod
 13270  2738  0873               	movf	?___lwmod,w
 13271  2739  3E30               	addlw	48
 13272  273A  0020               	movlb	0	; select bank0
 13273  273B  00AB               	movwf	??_ui_disp_str_num_ex
 13274  273C  082B               	movf	??_ui_disp_str_num_ex,w
 13275  273D  0022               	movlb	2	; select bank2
 13276  273E  00DC               	movwf	(_lcdBuf^(0+256)+4)
 13277  273F                     l16835:	
 13278                           
 13279                           ;ui.c: 106: }
 13280                           ;ui.c: 107: }
 13281                           ;ui.c: 108: }
 13282                           ;ui.c: 109: lcd_disp_str(lcdBuf);
 13283  273F  3058               	movlw	low _lcdBuf
 13284  2740  0020               	movlb	0	; select bank0
 13285  2741  00A2               	movwf	lcd_disp_str@str
 13286  2742  3001               	movlw	high _lcdBuf
 13287  2743  00A3               	movwf	lcd_disp_str@str+1
 13288  2744  31A8  20C5         	fcall	_lcd_disp_str
 13289  2746  0008               	return
 13290  2747                     __end_of_ui_disp_str_num_ex:	
 13291                           
 13292                           	psect	text11
 13293  3BFF                     __ptext11:	
 13294 ;; *************** function _ui_disp_small_flow_how_care *****************
 13295 ;; Defined at:
 13296 ;;		line 387 in file "src/api/ui.c"
 13297 ;; Parameters:    Size  Location     Type
 13298 ;;		None
 13299 ;; Auto vars:     Size  Location     Type
 13300 ;;		None
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  1    wreg      void 
 13303 ;; Registers used:
 13304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13312 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13314 ;;Total ram usage:        2 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    6
 13317 ;; This function calls:
 13318 ;;		_ui_disp_str_num
 13319 ;; This function is called by:
 13320 ;;		_ui_disp_menu
 13321 ;; This function uses a non-reentrant model
 13322 ;;
 13323                           
 13324                           
 13325                           ;psect for function _ui_disp_small_flow_how_care
 13326  3BFF                     _ui_disp_small_flow_how_care:	
 13327                           
 13328                           ;ui.c: 389: ui_disp_str_num((uint8_t*)"   cu-", uiAdjbuf[0]);
 13329                           
 13330                           ;incstack = 0
 13331                           ; Regs used in _ui_disp_small_flow_how_care: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13332  3BFF  3017               	movlw	low (STR_6| (0+32768))
 13333  3C00  0020               	movlb	0	; select bank0
 13334  3C01  00A7               	movwf	ui_disp_str_num@str
 13335  3C02  30B9               	movlw	high (STR_6| (0+32768))
 13336  3C03  00A8               	movwf	ui_disp_str_num@str+1
 13337  3C04  0022               	movlb	2	; select bank2
 13338  3C05  0861               	movf	_uiAdjbuf^(0+256),w
 13339  3C06  0020               	movlb	0	; select bank0
 13340  3C07  00AD               	movwf	??_ui_disp_small_flow_how_care
 13341  3C08  01AE               	clrf	??_ui_disp_small_flow_how_care+1
 13342  3C09  082D               	movf	??_ui_disp_small_flow_how_care,w
 13343  3C0A  00A9               	movwf	ui_disp_str_num@num
 13344  3C0B  082E               	movf	??_ui_disp_small_flow_how_care+1,w
 13345  3C0C  00AA               	movwf	ui_disp_str_num@num+1
 13346  3C0D  31A5  2531         	fcall	_ui_disp_str_num
 13347  3C0F  0008               	return
 13348  3C10                     __end_of_ui_disp_small_flow_how_care:	
 13349                           
 13350                           	psect	text12
 13351  3CA6                     __ptext12:	
 13352 ;; *************** function _ui_disp_set_transferMoneyLimit *****************
 13353 ;; Defined at:
 13354 ;;		line 492 in file "src/api/ui.c"
 13355 ;; Parameters:    Size  Location     Type
 13356 ;;		None
 13357 ;; Auto vars:     Size  Location     Type
 13358 ;;		None
 13359 ;; Return value:  Size  Location     Type
 13360 ;;                  1    wreg      void 
 13361 ;; Registers used:
 13362 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13363 ;; Tracked objects:
 13364 ;;		On entry : 0/0
 13365 ;;		On exit  : 0/0
 13366 ;;		Unchanged: 0/0
 13367 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13370 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13371 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13372 ;;Total ram usage:        0 bytes
 13373 ;; Hardware stack levels used:    1
 13374 ;; Hardware stack levels required when called:    6
 13375 ;; This function calls:
 13376 ;;		_ui_disp_str_num
 13377 ;; This function is called by:
 13378 ;;		_ui_disp_menu
 13379 ;; This function uses a non-reentrant model
 13380 ;;
 13381                           
 13382                           
 13383                           ;psect for function _ui_disp_set_transferMoneyLimit
 13384  3CA6                     _ui_disp_set_transferMoneyLimit:	
 13385                           
 13386                           ;ui.c: 493: __t16=*((uint16_t*)(uiAdjbuf));
 13387                           
 13388                           ;incstack = 0
 13389                           ; Regs used in _ui_disp_set_transferMoneyLimit: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13390  3CA6  3061               	movlw	low (_uiAdjbuf| (0+256))
 13391  3CA7  0086               	movwf	6
 13392  3CA8  3001               	movlw	1	; select bank2/3
 13393  3CA9  0087               	movwf	7
 13394  3CAA  3F40               	moviw [0]fsr1
 13395  3CAB  00F8               	movwf	___t16
 13396  3CAC  3F41               	moviw [1]fsr1
 13397  3CAD  00F9               	movwf	___t16+1
 13398                           
 13399                           ;ui.c: 494: ui_disp_str_num((uint8_t*)"sj-",__t16);
 13400  3CAE  304D               	movlw	low (STR_9| (0+32768))
 13401  3CAF  0020               	movlb	0	; select bank0
 13402  3CB0  00A7               	movwf	ui_disp_str_num@str
 13403  3CB1  30B9               	movlw	high (STR_9| (0+32768))
 13404  3CB2  00A8               	movwf	ui_disp_str_num@str+1
 13405  3CB3  0879               	movf	___t16+1,w
 13406  3CB4  00AA               	movwf	ui_disp_str_num@num+1
 13407  3CB5  0878               	movf	___t16,w
 13408  3CB6  00A9               	movwf	ui_disp_str_num@num
 13409  3CB7  31A5  2531         	fcall	_ui_disp_str_num
 13410  3CB9  0008               	return
 13411  3CBA                     __end_of_ui_disp_set_transferMoneyLimit:	
 13412                           
 13413                           	psect	text13
 13414  2B9B                     __ptext13:	
 13415 ;; *************** function _ui_disp_set_price *****************
 13416 ;; Defined at:
 13417 ;;		line 472 in file "src/api/ui.c"
 13418 ;; Parameters:    Size  Location     Type
 13419 ;;		None
 13420 ;; Auto vars:     Size  Location     Type
 13421 ;;		None
 13422 ;; Return value:  Size  Location     Type
 13423 ;;                  1    wreg      void 
 13424 ;; Registers used:
 13425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13426 ;; Tracked objects:
 13427 ;;		On entry : 0/0
 13428 ;;		On exit  : 0/0
 13429 ;;		Unchanged: 0/0
 13430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13433 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13434 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13435 ;;Total ram usage:        3 bytes
 13436 ;; Hardware stack levels used:    1
 13437 ;; Hardware stack levels required when called:    5
 13438 ;; This function calls:
 13439 ;;		_lcd_clear_buffer
 13440 ;;		_lcd_disp_dp
 13441 ;;		_lcd_disp_str
 13442 ;;		_m_mem_set
 13443 ;;		_ui_head_hide
 13444 ;;		_ui_uint32_2_str
 13445 ;; This function is called by:
 13446 ;;		_ui_disp_menu
 13447 ;; This function uses a non-reentrant model
 13448 ;;
 13449                           
 13450                           
 13451                           ;psect for function _ui_disp_set_price
 13452  2B9B                     _ui_disp_set_price:	
 13453                           
 13454                           ;ui.c: 481: m_mem_set(lcdBuf,'0',sizeof(lcdBuf));
 13455                           
 13456                           ;incstack = 0
 13457                           ; Regs used in _ui_disp_set_price: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13458  2B9B  3058               	movlw	low _lcdBuf
 13459  2B9C  00F3               	movwf	m_mem_set@buf
 13460  2B9D  3001               	movlw	high _lcdBuf
 13461  2B9E  00F4               	movwf	m_mem_set@buf+1
 13462  2B9F  3030               	movlw	48
 13463  2BA0  0020               	movlb	0	; select bank0
 13464  2BA1  00BA               	movwf	??_ui_disp_set_price
 13465  2BA2  083A               	movf	??_ui_disp_set_price,w
 13466  2BA3  00F5               	movwf	m_mem_set@x
 13467  2BA4  3009               	movlw	9
 13468  2BA5  00BB               	movwf	??_ui_disp_set_price+1
 13469  2BA6  083B               	movf	??_ui_disp_set_price+1,w
 13470  2BA7  00F6               	movwf	m_mem_set@len
 13471  2BA8  31BB  23BC  31AB   	fcall	_m_mem_set
 13472                           
 13473                           ;ui.c: 482: __t16=*((uint16_t*)(uiAdjbuf));
 13474  2BAB  3061               	movlw	low (_uiAdjbuf| (0+256))
 13475  2BAC  0086               	movwf	6
 13476  2BAD  3001               	movlw	1	; select bank2/3
 13477  2BAE  0087               	movwf	7
 13478  2BAF  3F40               	moviw [0]fsr1
 13479  2BB0  00F8               	movwf	___t16
 13480  2BB1  3F41               	moviw [1]fsr1
 13481  2BB2  00F9               	movwf	___t16+1
 13482                           
 13483                           ;ui.c: 483: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), *((int16_t*)(uiAd
      +                          jbuf)), 3);
 13484  2BB3  3061               	movlw	low (_uiAdjbuf| (0+256))
 13485  2BB4  0086               	movwf	6
 13486  2BB5  3001               	movlw	1	; select bank2/3
 13487  2BB6  0087               	movwf	7
 13488  2BB7  3F40               	moviw [0]fsr1
 13489  2BB8  0020               	movlb	0	; select bank0
 13490  2BB9  00BA               	movwf	??_ui_disp_set_price
 13491  2BBA  3F41               	moviw [1]fsr1
 13492  2BBB  00BB               	movwf	??_ui_disp_set_price+1
 13493  2BBC  083A               	movf	??_ui_disp_set_price,w
 13494  2BBD  00B1               	movwf	ui_uint32_2_str@x
 13495  2BBE  083B               	movf	??_ui_disp_set_price+1,w
 13496  2BBF  00B2               	movwf	ui_uint32_2_str@x+1
 13497  2BC0  0D89               	rlf	9,f
 13498  2BC1  3B89               	subwfb	9,f
 13499  2BC2  0989               	comf	9,f
 13500  2BC3  00B3               	movwf	ui_uint32_2_str@x+2
 13501  2BC4  00B4               	movwf	ui_uint32_2_str@x+3
 13502  2BC5  3003               	movlw	3
 13503  2BC6  00BC               	movwf	??_ui_disp_set_price+2
 13504  2BC7  083C               	movf	??_ui_disp_set_price+2,w
 13505  2BC8  00B5               	movwf	ui_uint32_2_str@len
 13506  2BC9  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13507  2BCA  31A7  2747  31AB   	fcall	_ui_uint32_2_str
 13508                           
 13509                           ;ui.c: 484: ui_head_hide(lcdBuf, 5);
 13510  2BCD  3005               	movlw	5
 13511  2BCE  0020               	movlb	0	; select bank0
 13512  2BCF  00BA               	movwf	??_ui_disp_set_price
 13513  2BD0  083A               	movf	??_ui_disp_set_price,w
 13514  2BD1  00F3               	movwf	ui_head_hide@loc
 13515  2BD2  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13516  2BD3  31B0  20AE  31AB   	fcall	_ui_head_hide
 13517                           
 13518                           ;ui.c: 485: lcdBuf[0]='d';
 13519  2BD6  3064               	movlw	100
 13520  2BD7  0020               	movlb	0	; select bank0
 13521  2BD8  00BA               	movwf	??_ui_disp_set_price
 13522  2BD9  083A               	movf	??_ui_disp_set_price,w
 13523  2BDA  0022               	movlb	2	; select bank2
 13524  2BDB  00D8               	movwf	_lcdBuf^(0+256)
 13525                           
 13526                           ;ui.c: 486: lcdBuf[1]='j';
 13527  2BDC  306A               	movlw	106
 13528  2BDD  0020               	movlb	0	; select bank0
 13529  2BDE  00BA               	movwf	??_ui_disp_set_price
 13530  2BDF  083A               	movf	??_ui_disp_set_price,w
 13531  2BE0  0022               	movlb	2	; select bank2
 13532  2BE1  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13533                           
 13534                           ;ui.c: 487: lcdBuf[2]='-';
 13535  2BE2  302D               	movlw	45
 13536  2BE3  0020               	movlb	0	; select bank0
 13537  2BE4  00BA               	movwf	??_ui_disp_set_price
 13538  2BE5  083A               	movf	??_ui_disp_set_price,w
 13539  2BE6  0022               	movlb	2	; select bank2
 13540  2BE7  00DA               	movwf	(_lcdBuf^(0+256)+2)
 13541                           
 13542                           ;ui.c: 488: lcd_clear_buffer();
 13543  2BE8  31BB  233F  31AB   	fcall	_lcd_clear_buffer
 13544                           
 13545                           ;ui.c: 489: lcd_disp_dp(2, 1);
 13546  2BEB  0020               	movlb	0	; select bank0
 13547  2BEC  01B2               	clrf	lcd_disp_dp@show
 13548  2BED  0AB2               	incf	lcd_disp_dp@show,f
 13549  2BEE  3002               	movlw	2
 13550  2BEF  31AC  245F  31AB   	fcall	_lcd_disp_dp
 13551                           
 13552                           ;ui.c: 490: lcd_disp_str(lcdBuf);
 13553  2BF2  3058               	movlw	low _lcdBuf
 13554  2BF3  0020               	movlb	0	; select bank0
 13555  2BF4  00A2               	movwf	lcd_disp_str@str
 13556  2BF5  3001               	movlw	high _lcdBuf
 13557  2BF6  00A3               	movwf	lcd_disp_str@str+1
 13558  2BF7  31A8  20C5         	fcall	_lcd_disp_str
 13559  2BF9  0008               	return
 13560  2BFA                     __end_of_ui_disp_set_price:	
 13561                           
 13562                           	psect	text14
 13563  287E                     __ptext14:	
 13564 ;; *************** function _ui_disp_set_line *****************
 13565 ;; Defined at:
 13566 ;;		line 352 in file "src/api/ui.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;		None
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  t16             2   28[BANK0 ] unsigned int 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      void 
 13573 ;; Registers used:
 13574 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13581 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13582 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13583 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13584 ;;Total ram usage:        4 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    5
 13587 ;; This function calls:
 13588 ;;		_lcd_clear_buffer
 13589 ;;		_lcd_disp_dp
 13590 ;;		_lcd_disp_str
 13591 ;;		_m_mem_set
 13592 ;;		_ui_uint32_2_str
 13593 ;; This function is called by:
 13594 ;;		_ui_disp_menu
 13595 ;; This function uses a non-reentrant model
 13596 ;;
 13597                           
 13598                           
 13599                           ;psect for function _ui_disp_set_line
 13600  287E                     _ui_disp_set_line:	
 13601                           
 13602                           ;ui.c: 353: uint16_t t16=(*((uint16_t*)uiAdjbuf));
 13603                           
 13604                           ;incstack = 0
 13605                           ; Regs used in _ui_disp_set_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13606  287E  3061               	movlw	low (_uiAdjbuf| (0+256))
 13607  287F  0086               	movwf	6
 13608  2880  3001               	movlw	1	; select bank2/3
 13609  2881  0087               	movwf	7
 13610  2882  3F40               	moviw [0]fsr1
 13611  2883  0020               	movlb	0	; select bank0
 13612  2884  00BC               	movwf	ui_disp_set_line@t16
 13613  2885  3F41               	moviw [1]fsr1
 13614  2886  00BD               	movwf	ui_disp_set_line@t16+1
 13615                           
 13616                           ;ui.c: 354: m_mem_set(lcdBuf, ' ', sizeof (lcdBuf));
 13617  2887  3058               	movlw	low _lcdBuf
 13618  2888  00F3               	movwf	m_mem_set@buf
 13619  2889  3001               	movlw	high _lcdBuf
 13620  288A  00F4               	movwf	m_mem_set@buf+1
 13621  288B  3020               	movlw	32
 13622  288C  00BA               	movwf	??_ui_disp_set_line
 13623  288D  083A               	movf	??_ui_disp_set_line,w
 13624  288E  00F5               	movwf	m_mem_set@x
 13625  288F  3009               	movlw	9
 13626  2890  00BB               	movwf	??_ui_disp_set_line+1
 13627  2891  083B               	movf	??_ui_disp_set_line+1,w
 13628  2892  00F6               	movwf	m_mem_set@len
 13629  2893  31BB  23BC  31A8   	fcall	_m_mem_set
 13630                           
 13631                           ;ui.c: 355: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), t16, 4);
 13632  2896  0020               	movlb	0	; select bank0
 13633  2897  083C               	movf	ui_disp_set_line@t16,w
 13634  2898  00B1               	movwf	ui_uint32_2_str@x
 13635  2899  083D               	movf	ui_disp_set_line@t16+1,w
 13636  289A  00B2               	movwf	ui_uint32_2_str@x+1
 13637  289B  01B3               	clrf	ui_uint32_2_str@x+2
 13638  289C  01B4               	clrf	ui_uint32_2_str@x+3
 13639  289D  3004               	movlw	4
 13640  289E  00BA               	movwf	??_ui_disp_set_line
 13641  289F  083A               	movf	??_ui_disp_set_line,w
 13642  28A0  00B5               	movwf	ui_uint32_2_str@len
 13643  28A1  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13644  28A2  31A7  2747  31A8   	fcall	_ui_uint32_2_str
 13645                           
 13646                           ;ui.c: 356: lcdBuf[0]='l';
 13647  28A5  306C               	movlw	108
 13648  28A6  0020               	movlb	0	; select bank0
 13649  28A7  00BA               	movwf	??_ui_disp_set_line
 13650  28A8  083A               	movf	??_ui_disp_set_line,w
 13651  28A9  0022               	movlb	2	; select bank2
 13652  28AA  00D8               	movwf	_lcdBuf^(0+256)
 13653                           
 13654                           ;ui.c: 357: lcd_clear_buffer();
 13655  28AB  31BB  233F  31A8   	fcall	_lcd_clear_buffer
 13656                           
 13657                           ;ui.c: 358: lcd_disp_dp(3, 1);
 13658  28AE  0020               	movlb	0	; select bank0
 13659  28AF  01B2               	clrf	lcd_disp_dp@show
 13660  28B0  0AB2               	incf	lcd_disp_dp@show,f
 13661  28B1  3003               	movlw	3
 13662  28B2  31AC  245F  31A8   	fcall	_lcd_disp_dp
 13663                           
 13664                           ;ui.c: 359: lcd_disp_str(lcdBuf);
 13665  28B5  3058               	movlw	low _lcdBuf
 13666  28B6  0020               	movlb	0	; select bank0
 13667  28B7  00A2               	movwf	lcd_disp_str@str
 13668  28B8  3001               	movlw	high _lcdBuf
 13669  28B9  00A3               	movwf	lcd_disp_str@str+1
 13670  28BA  31A8  20C5  31A8   	fcall	_lcd_disp_str
 13671                           
 13672                           ;ui.c: 382: lcd_disp_str(lcdBuf);
 13673  28BD  3058               	movlw	low _lcdBuf
 13674  28BE  0020               	movlb	0	; select bank0
 13675  28BF  00A2               	movwf	lcd_disp_str@str
 13676  28C0  3001               	movlw	high _lcdBuf
 13677  28C1  00A3               	movwf	lcd_disp_str@str+1
 13678  28C2  31A8  20C5         	fcall	_lcd_disp_str
 13679  28C4  0008               	return
 13680  28C5                     __end_of_ui_disp_set_line:	
 13681                           
 13682                           	psect	text15
 13683  3D2A                     __ptext15:	
 13684 ;; *************** function _ui_disp_set_imd_flow_uint *****************
 13685 ;; Defined at:
 13686 ;;		line 540 in file "src/api/ui.c"
 13687 ;; Parameters:    Size  Location     Type
 13688 ;;		None
 13689 ;; Auto vars:     Size  Location     Type
 13690 ;;		None
 13691 ;; Return value:  Size  Location     Type
 13692 ;;                  1    wreg      void 
 13693 ;; Registers used:
 13694 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13695 ;; Tracked objects:
 13696 ;;		On entry : 0/0
 13697 ;;		On exit  : 0/0
 13698 ;;		Unchanged: 0/0
 13699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13704 ;;Total ram usage:        0 bytes
 13705 ;; Hardware stack levels used:    1
 13706 ;; Hardware stack levels required when called:    5
 13707 ;; This function calls:
 13708 ;;		_lcd_clear_buffer
 13709 ;;		_lcd_disp_str
 13710 ;; This function is called by:
 13711 ;;		_ui_disp_menu
 13712 ;; This function uses a non-reentrant model
 13713 ;;
 13714                           
 13715                           
 13716                           ;psect for function _ui_disp_set_imd_flow_uint
 13717  3D2A                     _ui_disp_set_imd_flow_uint:	
 13718                           
 13719                           ;ui.c: 541: lcd_clear_buffer();
 13720                           
 13721                           ;incstack = 0
 13722                           ; Regs used in _ui_disp_set_imd_flow_uint: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13723  3D2A  31BB  233F  31BD   	fcall	_lcd_clear_buffer
 13724                           
 13725                           ;ui.c: 543: if(uiAdjbuf[0]==0){
 13726  3D2D  0022               	movlb	2	; select bank2
 13727  3D2E  0861               	movf	_uiAdjbuf^(0+256),w
 13728  3D2F  1D03               	btfss	3,2
 13729  3D30  2D39               	goto	l13413
 13730                           
 13731                           ;ui.c: 544: lcd_disp_str((uint8_t*)"    sl-l");
 13732  3D31  3006               	movlw	low (STR_17| (0+32768))
 13733  3D32  0020               	movlb	0	; select bank0
 13734  3D33  00A2               	movwf	lcd_disp_str@str
 13735  3D34  30B9               	movlw	high (STR_17| (0+32768))
 13736  3D35  00A3               	movwf	lcd_disp_str@str+1
 13737  3D36  31A8  20C5         	fcall	_lcd_disp_str
 13738                           
 13739                           ;ui.c: 545: }else{
 13740  3D38  0008               	return
 13741  3D39                     l13413:	
 13742                           
 13743                           ;ui.c: 546: lcd_disp_str((uint8_t*)"    sl-f");
 13744  3D39  30FD               	movlw	low (STR_18| (0+32768))
 13745  3D3A  0020               	movlb	0	; select bank0
 13746  3D3B  00A2               	movwf	lcd_disp_str@str
 13747  3D3C  30B8               	movlw	high (STR_18| (0+32768))
 13748  3D3D  00A3               	movwf	lcd_disp_str@str+1
 13749  3D3E  31A8  20C5         	fcall	_lcd_disp_str
 13750  3D40  0008               	return
 13751  3D41                     __end_of_ui_disp_set_imd_flow_uint:	
 13752                           
 13753                           	psect	text16
 13754  3C92                     __ptext16:	
 13755 ;; *************** function _ui_disp_set_device_id *****************
 13756 ;; Defined at:
 13757 ;;		line 496 in file "src/api/ui.c"
 13758 ;; Parameters:    Size  Location     Type
 13759 ;;		None
 13760 ;; Auto vars:     Size  Location     Type
 13761 ;;		None
 13762 ;; Return value:  Size  Location     Type
 13763 ;;                  1    wreg      void 
 13764 ;; Registers used:
 13765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13766 ;; Tracked objects:
 13767 ;;		On entry : 0/0
 13768 ;;		On exit  : 0/0
 13769 ;;		Unchanged: 0/0
 13770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13775 ;;Total ram usage:        0 bytes
 13776 ;; Hardware stack levels used:    1
 13777 ;; Hardware stack levels required when called:    6
 13778 ;; This function calls:
 13779 ;;		_ui_disp_str_num
 13780 ;; This function is called by:
 13781 ;;		_ui_disp_menu
 13782 ;; This function uses a non-reentrant model
 13783 ;;
 13784                           
 13785                           
 13786                           ;psect for function _ui_disp_set_device_id
 13787  3C92                     _ui_disp_set_device_id:	
 13788                           
 13789                           ;ui.c: 497: __t16=*((uint16_t*)(uiAdjbuf));
 13790                           
 13791                           ;incstack = 0
 13792                           ; Regs used in _ui_disp_set_device_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13793  3C92  3061               	movlw	low (_uiAdjbuf| (0+256))
 13794  3C93  0086               	movwf	6
 13795  3C94  3001               	movlw	1	; select bank2/3
 13796  3C95  0087               	movwf	7
 13797  3C96  3F40               	moviw [0]fsr1
 13798  3C97  00F8               	movwf	___t16
 13799  3C98  3F41               	moviw [1]fsr1
 13800  3C99  00F9               	movwf	___t16+1
 13801                           
 13802                           ;ui.c: 498: ui_disp_str_num((uint8_t*)"did-",__t16);
 13803  3C9A  3043               	movlw	low (STR_10| (0+32768))
 13804  3C9B  0020               	movlb	0	; select bank0
 13805  3C9C  00A7               	movwf	ui_disp_str_num@str
 13806  3C9D  30B9               	movlw	high (STR_10| (0+32768))
 13807  3C9E  00A8               	movwf	ui_disp_str_num@str+1
 13808  3C9F  0879               	movf	___t16+1,w
 13809  3CA0  00AA               	movwf	ui_disp_str_num@num+1
 13810  3CA1  0878               	movf	___t16,w
 13811  3CA2  00A9               	movwf	ui_disp_str_num@num
 13812  3CA3  31A5  2531         	fcall	_ui_disp_str_num
 13813  3CA5  0008               	return
 13814  3CA6                     __end_of_ui_disp_set_device_id:	
 13815                           
 13816                           	psect	text17
 13817  2117                     __ptext17:	
 13818 ;; *************** function _ui_disp_set_calib *****************
 13819 ;; Defined at:
 13820 ;;		line 528 in file "src/api/ui.c"
 13821 ;; Parameters:    Size  Location     Type
 13822 ;;		None
 13823 ;; Auto vars:     Size  Location     Type
 13824 ;;  loc             1   29[BANK0 ] unsigned char 
 13825 ;; Return value:  Size  Location     Type
 13826 ;;                  1    wreg      void 
 13827 ;; Registers used:
 13828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13829 ;; Tracked objects:
 13830 ;;		On entry : 0/0
 13831 ;;		On exit  : 0/0
 13832 ;;		Unchanged: 0/0
 13833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 13836 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13837 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13838 ;;Total ram usage:        4 bytes
 13839 ;; Hardware stack levels used:    1
 13840 ;; Hardware stack levels required when called:    5
 13841 ;; This function calls:
 13842 ;;		___awdiv
 13843 ;;		___awmod
 13844 ;;		___lbmod
 13845 ;;		_lcd_clear_buffer
 13846 ;;		_lcd_disp_dp
 13847 ;;		_lcd_disp_str
 13848 ;;		_m_mem_set
 13849 ;;		_ui_head_hide
 13850 ;;		_ui_uint32_2_str
 13851 ;; This function is called by:
 13852 ;;		_ui_disp_menu
 13853 ;; This function uses a non-reentrant model
 13854 ;;
 13855                           
 13856                           
 13857                           ;psect for function _ui_disp_set_calib
 13858  2117                     _ui_disp_set_calib:	
 13859                           
 13860                           ;ui.c: 529: uint8_t loc=calibLocation;
 13861                           
 13862                           ;incstack = 0
 13863                           ; Regs used in _ui_disp_set_calib: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13864  2117  0021               	movlb	1	; select bank1
 13865  2118  0845               	movf	_calibLocation^(0+128),w
 13866  2119  0020               	movlb	0	; select bank0
 13867  211A  00BA               	movwf	??_ui_disp_set_calib
 13868  211B  083A               	movf	??_ui_disp_set_calib,w
 13869  211C  00BD               	movwf	ui_disp_set_calib@loc
 13870                           
 13871                           ;ui.c: 530: m_mem_set(lcdBuf,'0',sizeof(lcdBuf));
 13872  211D  3058               	movlw	low _lcdBuf
 13873  211E  00F3               	movwf	m_mem_set@buf
 13874  211F  3001               	movlw	high _lcdBuf
 13875  2120  00F4               	movwf	m_mem_set@buf+1
 13876  2121  3030               	movlw	48
 13877  2122  00BA               	movwf	??_ui_disp_set_calib
 13878  2123  083A               	movf	??_ui_disp_set_calib,w
 13879  2124  00F5               	movwf	m_mem_set@x
 13880  2125  3009               	movlw	9
 13881  2126  00BB               	movwf	??_ui_disp_set_calib+1
 13882  2127  083B               	movf	??_ui_disp_set_calib+1,w
 13883  2128  00F6               	movwf	m_mem_set@len
 13884  2129  31BB  23BC  31A1   	fcall	_m_mem_set
 13885                           
 13886                           ;ui.c: 531: loc%=100;
 13887  212C  3064               	movlw	100
 13888  212D  0020               	movlb	0	; select bank0
 13889  212E  00BA               	movwf	??_ui_disp_set_calib
 13890  212F  083A               	movf	??_ui_disp_set_calib,w
 13891  2130  00F3               	movwf	___lbmod@divisor
 13892  2131  083D               	movf	ui_disp_set_calib@loc,w
 13893  2132  31BE  26DF  31A1   	fcall	___lbmod
 13894  2135  0020               	movlb	0	; select bank0
 13895  2136  00BB               	movwf	??_ui_disp_set_calib+1
 13896  2137  083B               	movf	??_ui_disp_set_calib+1,w
 13897  2138  00BD               	movwf	ui_disp_set_calib@loc
 13898                           
 13899                           ;ui.c: 532: lcdBuf[0]=loc/10 + '0';
 13900  2139  300A               	movlw	10
 13901  213A  00F3               	movwf	___awdiv@divisor
 13902  213B  3000               	movlw	0
 13903  213C  00F4               	movwf	___awdiv@divisor+1
 13904  213D  083D               	movf	ui_disp_set_calib@loc,w
 13905  213E  00BA               	movwf	??_ui_disp_set_calib
 13906  213F  01BB               	clrf	??_ui_disp_set_calib+1
 13907  2140  083A               	movf	??_ui_disp_set_calib,w
 13908  2141  00F5               	movwf	___awdiv@dividend
 13909  2142  083B               	movf	??_ui_disp_set_calib+1,w
 13910  2143  00F6               	movwf	___awdiv@dividend+1
 13911  2144  31A9  21F3  31A1   	fcall	___awdiv
 13912  2147  0873               	movf	?___awdiv,w
 13913  2148  3E30               	addlw	48
 13914  2149  0020               	movlb	0	; select bank0
 13915  214A  00BC               	movwf	??_ui_disp_set_calib+2
 13916  214B  083C               	movf	??_ui_disp_set_calib+2,w
 13917  214C  0022               	movlb	2	; select bank2
 13918  214D  00D8               	movwf	_lcdBuf^(0+256)
 13919                           
 13920                           ;ui.c: 533: lcdBuf[1]=loc%10 + '0';
 13921  214E  300A               	movlw	10
 13922  214F  00F3               	movwf	___awmod@divisor
 13923  2150  3000               	movlw	0
 13924  2151  00F4               	movwf	___awmod@divisor+1
 13925  2152  0020               	movlb	0	; select bank0
 13926  2153  083D               	movf	ui_disp_set_calib@loc,w
 13927  2154  00BA               	movwf	??_ui_disp_set_calib
 13928  2155  01BB               	clrf	??_ui_disp_set_calib+1
 13929  2156  083A               	movf	??_ui_disp_set_calib,w
 13930  2157  00F5               	movwf	___awmod@dividend
 13931  2158  083B               	movf	??_ui_disp_set_calib+1,w
 13932  2159  00F6               	movwf	___awmod@dividend+1
 13933  215A  31B7  27BA  31A1   	fcall	___awmod
 13934  215D  0873               	movf	?___awmod,w
 13935  215E  3E30               	addlw	48
 13936  215F  0020               	movlb	0	; select bank0
 13937  2160  00BC               	movwf	??_ui_disp_set_calib+2
 13938  2161  083C               	movf	??_ui_disp_set_calib+2,w
 13939  2162  0022               	movlb	2	; select bank2
 13940  2163  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13941                           
 13942                           ;ui.c: 534: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), *((int16_t*)(uiAd
      +                          jbuf)), 4);
 13943  2164  3061               	movlw	low (_uiAdjbuf| (0+256))
 13944  2165  0086               	movwf	6
 13945  2166  3001               	movlw	1	; select bank2/3
 13946  2167  0087               	movwf	7
 13947  2168  3F40               	moviw [0]fsr1
 13948  2169  0020               	movlb	0	; select bank0
 13949  216A  00BA               	movwf	??_ui_disp_set_calib
 13950  216B  3F41               	moviw [1]fsr1
 13951  216C  00BB               	movwf	??_ui_disp_set_calib+1
 13952  216D  083A               	movf	??_ui_disp_set_calib,w
 13953  216E  00B1               	movwf	ui_uint32_2_str@x
 13954  216F  083B               	movf	??_ui_disp_set_calib+1,w
 13955  2170  00B2               	movwf	ui_uint32_2_str@x+1
 13956  2171  0D89               	rlf	9,f
 13957  2172  3B89               	subwfb	9,f
 13958  2173  0989               	comf	9,f
 13959  2174  00B3               	movwf	ui_uint32_2_str@x+2
 13960  2175  00B4               	movwf	ui_uint32_2_str@x+3
 13961  2176  3004               	movlw	4
 13962  2177  00BC               	movwf	??_ui_disp_set_calib+2
 13963  2178  083C               	movf	??_ui_disp_set_calib+2,w
 13964  2179  00B5               	movwf	ui_uint32_2_str@len
 13965  217A  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13966  217B  31A7  2747  31A1   	fcall	_ui_uint32_2_str
 13967                           
 13968                           ;ui.c: 535: ui_head_hide(lcdBuf+2, 4);
 13969  217E  3004               	movlw	4
 13970  217F  0020               	movlb	0	; select bank0
 13971  2180  00BA               	movwf	??_ui_disp_set_calib
 13972  2181  083A               	movf	??_ui_disp_set_calib,w
 13973  2182  00F3               	movwf	ui_head_hide@loc
 13974  2183  305A               	movlw	(low ((_lcdBuf| (0+256)+2)))& (0+255)
 13975  2184  31B0  20AE  31A1   	fcall	_ui_head_hide
 13976                           
 13977                           ;ui.c: 536: lcd_clear_buffer();
 13978  2187  31BB  233F  31A1   	fcall	_lcd_clear_buffer
 13979                           
 13980                           ;ui.c: 537: lcd_disp_dp(1, 1);
 13981  218A  0020               	movlb	0	; select bank0
 13982  218B  01B2               	clrf	lcd_disp_dp@show
 13983  218C  0AB2               	incf	lcd_disp_dp@show,f
 13984  218D  3001               	movlw	1
 13985  218E  31AC  245F  31A1   	fcall	_lcd_disp_dp
 13986                           
 13987                           ;ui.c: 538: lcd_disp_str(lcdBuf);
 13988  2191  3058               	movlw	low _lcdBuf
 13989  2192  0020               	movlb	0	; select bank0
 13990  2193  00A2               	movwf	lcd_disp_str@str
 13991  2194  3001               	movlw	high _lcdBuf
 13992  2195  00A3               	movwf	lcd_disp_str@str+1
 13993  2196  31A8  20C5         	fcall	_lcd_disp_str
 13994  2198  0008               	return
 13995  2199                     __end_of_ui_disp_set_calib:	
 13996                           
 13997                           	psect	text18
 13998  37BA                     __ptext18:	
 13999 ;; *************** function ___awmod *****************
 14000 ;; Defined at:
 14001 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
 14002 ;; Parameters:    Size  Location     Type
 14003 ;;  divisor         2    3[COMMON] int 
 14004 ;;  dividend        2    5[COMMON] int 
 14005 ;; Auto vars:     Size  Location     Type
 14006 ;;  sign            1    1[BANK0 ] unsigned char 
 14007 ;;  counter         1    0[BANK0 ] unsigned char 
 14008 ;; Return value:  Size  Location     Type
 14009 ;;                  2    3[COMMON] int 
 14010 ;; Registers used:
 14011 ;;		wreg, status,2, status,0
 14012 ;; Tracked objects:
 14013 ;;		On entry : 0/0
 14014 ;;		On exit  : 0/0
 14015 ;;		Unchanged: 0/0
 14016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14017 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14018 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14019 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14020 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14021 ;;Total ram usage:        7 bytes
 14022 ;; Hardware stack levels used:    1
 14023 ;; Hardware stack levels required when called:    2
 14024 ;; This function calls:
 14025 ;;		Nothing
 14026 ;; This function is called by:
 14027 ;;		_ui_disp_set_calib
 14028 ;; This function uses a non-reentrant model
 14029 ;;
 14030                           
 14031                           
 14032                           ;psect for function ___awmod
 14033  37BA                     ___awmod:	
 14034                           
 14035                           ;incstack = 0
 14036                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14037  37BA  0020               	movlb	0	; select bank0
 14038  37BB  01A1               	clrf	___awmod@sign
 14039  37BC  1FF6               	btfss	___awmod@dividend+1,7
 14040  37BD  2FC5               	goto	l13165
 14041  37BE  09F5               	comf	___awmod@dividend,f
 14042  37BF  09F6               	comf	___awmod@dividend+1,f
 14043  37C0  0AF5               	incf	___awmod@dividend,f
 14044  37C1  1903               	skipnz
 14045  37C2  0AF6               	incf	___awmod@dividend+1,f
 14046  37C3  01A1               	clrf	___awmod@sign
 14047  37C4  0AA1               	incf	___awmod@sign,f
 14048  37C5                     l13165:	
 14049  37C5  1FF4               	btfss	___awmod@divisor+1,7
 14050  37C6  2FCC               	goto	l13169
 14051  37C7  09F3               	comf	___awmod@divisor,f
 14052  37C8  09F4               	comf	___awmod@divisor+1,f
 14053  37C9  0AF3               	incf	___awmod@divisor,f
 14054  37CA  1903               	skipnz
 14055  37CB  0AF4               	incf	___awmod@divisor+1,f
 14056  37CC                     l13169:	
 14057  37CC  0873               	movf	___awmod@divisor,w
 14058  37CD  0474               	iorwf	___awmod@divisor+1,w
 14059  37CE  1903               	btfsc	3,2
 14060  37CF  2FF3               	goto	l13187
 14061  37D0  01A0               	clrf	___awmod@counter
 14062  37D1  0AA0               	incf	___awmod@counter,f
 14063  37D2                     l13177:	
 14064  37D2  1BF4               	btfsc	___awmod@divisor+1,7
 14065  37D3  2FDE               	goto	l13179
 14066  37D4  3001               	movlw	1
 14067  37D5                     u11775:	
 14068  37D5  35F3               	lslf	___awmod@divisor,f
 14069  37D6  0DF4               	rlf	___awmod@divisor+1,f
 14070  37D7  0B89               	decfsz	9,f
 14071  37D8  2FD5               	goto	u11775
 14072  37D9  3001               	movlw	1
 14073  37DA  00F7               	movwf	??___awmod
 14074  37DB  0877               	movf	??___awmod,w
 14075  37DC  07A0               	addwf	___awmod@counter,f
 14076  37DD  2FD2               	goto	l13177
 14077  37DE                     l13179:	
 14078  37DE  0874               	movf	___awmod@divisor+1,w
 14079  37DF  0276               	subwf	___awmod@dividend+1,w
 14080  37E0  1D03               	skipz
 14081  37E1  2FE4               	goto	u11795
 14082  37E2  0873               	movf	___awmod@divisor,w
 14083  37E3  0275               	subwf	___awmod@dividend,w
 14084  37E4                     u11795:	
 14085  37E4  1C03               	skipc
 14086  37E5  2FEA               	goto	l13183
 14087  37E6  0873               	movf	___awmod@divisor,w
 14088  37E7  02F5               	subwf	___awmod@dividend,f
 14089  37E8  0874               	movf	___awmod@divisor+1,w
 14090  37E9  3BF6               	subwfb	___awmod@dividend+1,f
 14091  37EA                     l13183:	
 14092  37EA  3001               	movlw	1
 14093  37EB                     u11805:	
 14094  37EB  36F4               	lsrf	___awmod@divisor+1,f
 14095  37EC  0CF3               	rrf	___awmod@divisor,f
 14096  37ED  0B89               	decfsz	9,f
 14097  37EE  2FEB               	goto	u11805
 14098  37EF  3001               	movlw	1
 14099  37F0  02A0               	subwf	___awmod@counter,f
 14100  37F1  1D03               	btfss	3,2
 14101  37F2  2FDE               	goto	l13179
 14102  37F3                     l13187:	
 14103  37F3  0821               	movf	___awmod@sign,w
 14104  37F4  1903               	btfsc	3,2
 14105  37F5  2FFB               	goto	l13191
 14106  37F6  09F5               	comf	___awmod@dividend,f
 14107  37F7  09F6               	comf	___awmod@dividend+1,f
 14108  37F8  0AF5               	incf	___awmod@dividend,f
 14109  37F9  1903               	skipnz
 14110  37FA  0AF6               	incf	___awmod@dividend+1,f
 14111  37FB                     l13191:	
 14112  37FB  0876               	movf	___awmod@dividend+1,w
 14113  37FC  00F4               	movwf	?___awmod+1
 14114  37FD  0875               	movf	___awmod@dividend,w
 14115  37FE  00F3               	movwf	?___awmod
 14116  37FF  0008               	return
 14117  3800                     __end_of___awmod:	
 14118                           
 14119                           	psect	text19
 14120  3480                     __ptext19:	
 14121 ;; *************** function _ui_disp_set_balanceWarning *****************
 14122 ;; Defined at:
 14123 ;;		line 500 in file "src/api/ui.c"
 14124 ;; Parameters:    Size  Location     Type
 14125 ;;		None
 14126 ;; Auto vars:     Size  Location     Type
 14127 ;;		None
 14128 ;; Return value:  Size  Location     Type
 14129 ;;                  1    wreg      void 
 14130 ;; Registers used:
 14131 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14132 ;; Tracked objects:
 14133 ;;		On entry : 0/0
 14134 ;;		On exit  : 0/0
 14135 ;;		Unchanged: 0/0
 14136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14141 ;;Total ram usage:        0 bytes
 14142 ;; Hardware stack levels used:    1
 14143 ;; Hardware stack levels required when called:    6
 14144 ;; This function calls:
 14145 ;;		_ui_disp_str_num
 14146 ;; This function is called by:
 14147 ;;		_ui_disp_menu
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _ui_disp_set_balanceWarning
 14153  3480                     _ui_disp_set_balanceWarning:	
 14154                           
 14155                           ;ui.c: 501: __q15=*((int16_t*)(uiAdjbuf));
 14156                           
 14157                           ;incstack = 0
 14158                           ; Regs used in _ui_disp_set_balanceWarning: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14159  3480  3061               	movlw	low (_uiAdjbuf| (0+256))
 14160  3481  0086               	movwf	6
 14161  3482  3001               	movlw	1	; select bank2/3
 14162  3483  0087               	movwf	7
 14163  3484  3F40               	moviw [0]fsr1
 14164  3485  0021               	movlb	1	; select bank1
 14165  3486  00BA               	movwf	___q15^(0+128)
 14166  3487  3F41               	moviw [1]fsr1
 14167  3488  00BB               	movwf	(___q15+1)^(0+128)
 14168                           
 14169                           ;ui.c: 503: if(__q15>=0){
 14170  3489  1BBB               	btfsc	(___q15+1)^(0+128),7
 14171  348A  2C9B               	goto	l16855
 14172                           
 14173                           ;ui.c: 504: ui_disp_str_num((uint8_t*)"d1   ",__q15);
 14174  348B  302B               	movlw	low (STR_11| (0+32768))
 14175  348C  0020               	movlb	0	; select bank0
 14176  348D  00A7               	movwf	ui_disp_str_num@str
 14177  348E  30B9               	movlw	high (STR_11| (0+32768))
 14178  348F  00A8               	movwf	ui_disp_str_num@str+1
 14179  3490  0021               	movlb	1	; select bank1
 14180  3491  083B               	movf	(___q15+1)^(0+128),w
 14181  3492  0020               	movlb	0	; select bank0
 14182  3493  00AA               	movwf	ui_disp_str_num@num+1
 14183  3494  0021               	movlb	1	; select bank1
 14184  3495  083A               	movf	___q15^(0+128),w
 14185  3496  0020               	movlb	0	; select bank0
 14186  3497  00A9               	movwf	ui_disp_str_num@num
 14187  3498  31A5  2531         	fcall	_ui_disp_str_num
 14188                           
 14189                           ;ui.c: 505: }else{
 14190  349A  0008               	return
 14191  349B                     l16855:	
 14192                           
 14193                           ;ui.c: 506: __q15=0-__q15;
 14194  349B  0021               	movlb	1	; select bank1
 14195  349C  09BA               	comf	___q15^(0+128),f
 14196  349D  09BB               	comf	(___q15+1)^(0+128),f
 14197  349E  0ABA               	incf	___q15^(0+128),f
 14198  349F  1903               	skipnz
 14199  34A0  0ABB               	incf	(___q15+1)^(0+128),f
 14200                           
 14201                           ;ui.c: 507: ui_disp_str_num((uint8_t*)"d1  -",__q15);
 14202  34A1  3037               	movlw	low (STR_12| (0+32768))
 14203  34A2  0020               	movlb	0	; select bank0
 14204  34A3  00A7               	movwf	ui_disp_str_num@str
 14205  34A4  30B9               	movlw	high (STR_12| (0+32768))
 14206  34A5  00A8               	movwf	ui_disp_str_num@str+1
 14207  34A6  0021               	movlb	1	; select bank1
 14208  34A7  083B               	movf	(___q15+1)^(0+128),w
 14209  34A8  0020               	movlb	0	; select bank0
 14210  34A9  00AA               	movwf	ui_disp_str_num@num+1
 14211  34AA  0021               	movlb	1	; select bank1
 14212  34AB  083A               	movf	___q15^(0+128),w
 14213  34AC  0020               	movlb	0	; select bank0
 14214  34AD  00A9               	movwf	ui_disp_str_num@num
 14215  34AE  31A5  2531         	fcall	_ui_disp_str_num
 14216  34B0  0008               	return
 14217  34B1                     __end_of_ui_disp_set_balanceWarning:	
 14218                           
 14219                           	psect	text20
 14220  344F                     __ptext20:	
 14221 ;; *************** function _ui_disp_set_balanceOff *****************
 14222 ;; Defined at:
 14223 ;;		line 511 in file "src/api/ui.c"
 14224 ;; Parameters:    Size  Location     Type
 14225 ;;		None
 14226 ;; Auto vars:     Size  Location     Type
 14227 ;;		None
 14228 ;; Return value:  Size  Location     Type
 14229 ;;                  1    wreg      void 
 14230 ;; Registers used:
 14231 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14232 ;; Tracked objects:
 14233 ;;		On entry : 0/0
 14234 ;;		On exit  : 0/0
 14235 ;;		Unchanged: 0/0
 14236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14241 ;;Total ram usage:        0 bytes
 14242 ;; Hardware stack levels used:    1
 14243 ;; Hardware stack levels required when called:    6
 14244 ;; This function calls:
 14245 ;;		_ui_disp_str_num
 14246 ;; This function is called by:
 14247 ;;		_ui_disp_menu
 14248 ;; This function uses a non-reentrant model
 14249 ;;
 14250                           
 14251                           
 14252                           ;psect for function _ui_disp_set_balanceOff
 14253  344F                     _ui_disp_set_balanceOff:	
 14254                           
 14255                           ;ui.c: 512: __q15=*((int16_t*)(uiAdjbuf));
 14256                           
 14257                           ;incstack = 0
 14258                           ; Regs used in _ui_disp_set_balanceOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14259  344F  3061               	movlw	low (_uiAdjbuf| (0+256))
 14260  3450  0086               	movwf	6
 14261  3451  3001               	movlw	1	; select bank2/3
 14262  3452  0087               	movwf	7
 14263  3453  3F40               	moviw [0]fsr1
 14264  3454  0021               	movlb	1	; select bank1
 14265  3455  00BA               	movwf	___q15^(0+128)
 14266  3456  3F41               	moviw [1]fsr1
 14267  3457  00BB               	movwf	(___q15+1)^(0+128)
 14268                           
 14269                           ;ui.c: 514: if(__q15>=0){
 14270  3458  1BBB               	btfsc	(___q15+1)^(0+128),7
 14271  3459  2C6A               	goto	l16865
 14272                           
 14273                           ;ui.c: 515: ui_disp_str_num((uint8_t*)"d2   ",__q15);
 14274  345A  3031               	movlw	low (STR_13| (0+32768))
 14275  345B  0020               	movlb	0	; select bank0
 14276  345C  00A7               	movwf	ui_disp_str_num@str
 14277  345D  30B9               	movlw	high (STR_13| (0+32768))
 14278  345E  00A8               	movwf	ui_disp_str_num@str+1
 14279  345F  0021               	movlb	1	; select bank1
 14280  3460  083B               	movf	(___q15+1)^(0+128),w
 14281  3461  0020               	movlb	0	; select bank0
 14282  3462  00AA               	movwf	ui_disp_str_num@num+1
 14283  3463  0021               	movlb	1	; select bank1
 14284  3464  083A               	movf	___q15^(0+128),w
 14285  3465  0020               	movlb	0	; select bank0
 14286  3466  00A9               	movwf	ui_disp_str_num@num
 14287  3467  31A5  2531         	fcall	_ui_disp_str_num
 14288                           
 14289                           ;ui.c: 516: }else{
 14290  3469  0008               	return
 14291  346A                     l16865:	
 14292                           
 14293                           ;ui.c: 517: __q15=0-__q15;
 14294  346A  0021               	movlb	1	; select bank1
 14295  346B  09BA               	comf	___q15^(0+128),f
 14296  346C  09BB               	comf	(___q15+1)^(0+128),f
 14297  346D  0ABA               	incf	___q15^(0+128),f
 14298  346E  1903               	skipnz
 14299  346F  0ABB               	incf	(___q15+1)^(0+128),f
 14300                           
 14301                           ;ui.c: 518: ui_disp_str_num((uint8_t*)"d2  -",__q15);
 14302  3470  303D               	movlw	low (STR_14| (0+32768))
 14303  3471  0020               	movlb	0	; select bank0
 14304  3472  00A7               	movwf	ui_disp_str_num@str
 14305  3473  30B9               	movlw	high (STR_14| (0+32768))
 14306  3474  00A8               	movwf	ui_disp_str_num@str+1
 14307  3475  0021               	movlb	1	; select bank1
 14308  3476  083B               	movf	(___q15+1)^(0+128),w
 14309  3477  0020               	movlb	0	; select bank0
 14310  3478  00AA               	movwf	ui_disp_str_num@num+1
 14311  3479  0021               	movlb	1	; select bank1
 14312  347A  083A               	movf	___q15^(0+128),w
 14313  347B  0020               	movlb	0	; select bank0
 14314  347C  00A9               	movwf	ui_disp_str_num@num
 14315  347D  31A5  2531         	fcall	_ui_disp_str_num
 14316  347F  0008               	return
 14317  3480                     __end_of_ui_disp_set_balanceOff:	
 14318                           
 14319                           	psect	text21
 14320  3BEE                     __ptext21:	
 14321 ;; *************** function _ui_disp_modbus_id *****************
 14322 ;; Defined at:
 14323 ;;		line 447 in file "src/api/ui.c"
 14324 ;; Parameters:    Size  Location     Type
 14325 ;;		None
 14326 ;; Auto vars:     Size  Location     Type
 14327 ;;		None
 14328 ;; Return value:  Size  Location     Type
 14329 ;;                  1    wreg      void 
 14330 ;; Registers used:
 14331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14332 ;; Tracked objects:
 14333 ;;		On entry : 0/0
 14334 ;;		On exit  : 0/0
 14335 ;;		Unchanged: 0/0
 14336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14338 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14339 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14341 ;;Total ram usage:        2 bytes
 14342 ;; Hardware stack levels used:    1
 14343 ;; Hardware stack levels required when called:    6
 14344 ;; This function calls:
 14345 ;;		_ui_disp_str_num
 14346 ;; This function is called by:
 14347 ;;		_ui_disp_menu
 14348 ;; This function uses a non-reentrant model
 14349 ;;
 14350                           
 14351                           
 14352                           ;psect for function _ui_disp_modbus_id
 14353  3BEE                     _ui_disp_modbus_id:	
 14354                           
 14355                           ;ui.c: 449: ui_disp_str_num((uint8_t*)"id-", uiAdjbuf[0]);
 14356                           
 14357                           ;incstack = 0
 14358                           ; Regs used in _ui_disp_modbus_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14359  3BEE  3044               	movlw	low ((STR_10+1)| (0+32768))
 14360  3BEF  0020               	movlb	0	; select bank0
 14361  3BF0  00A7               	movwf	ui_disp_str_num@str
 14362  3BF1  30B9               	movlw	high ((STR_10+1)| (0+32768))
 14363  3BF2  00A8               	movwf	ui_disp_str_num@str+1
 14364  3BF3  0022               	movlb	2	; select bank2
 14365  3BF4  0861               	movf	_uiAdjbuf^(0+256),w
 14366  3BF5  0020               	movlb	0	; select bank0
 14367  3BF6  00AD               	movwf	??_ui_disp_modbus_id
 14368  3BF7  01AE               	clrf	??_ui_disp_modbus_id+1
 14369  3BF8  082D               	movf	??_ui_disp_modbus_id,w
 14370  3BF9  00A9               	movwf	ui_disp_str_num@num
 14371  3BFA  082E               	movf	??_ui_disp_modbus_id+1,w
 14372  3BFB  00AA               	movwf	ui_disp_str_num@num+1
 14373  3BFC  31A5  2531         	fcall	_ui_disp_str_num
 14374  3BFE  0008               	return
 14375  3BFF                     __end_of_ui_disp_modbus_id:	
 14376                           
 14377                           	psect	text22
 14378  2531                     __ptext22:	
 14379 ;; *************** function _ui_disp_str_num *****************
 14380 ;; Defined at:
 14381 ;;		line 64 in file "src/api/ui.c"
 14382 ;; Parameters:    Size  Location     Type
 14383 ;;  str             2    7[BANK0 ] PTR unsigned char 
 14384 ;;		 -> STR_14(6), STR_13(6), STR_12(6), STR_11(6), 
 14385 ;;		 -> STR_10(5), STR_9(4), STR_8(4), STR_6(7), 
 14386 ;;		 -> STR_5(3), STR_2(7), 
 14387 ;;  num             2    9[BANK0 ] unsigned int 
 14388 ;; Auto vars:     Size  Location     Type
 14389 ;;		None
 14390 ;; Return value:  Size  Location     Type
 14391 ;;                  1    wreg      void 
 14392 ;; Registers used:
 14393 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14394 ;; Tracked objects:
 14395 ;;		On entry : 0/0
 14396 ;;		On exit  : 0/0
 14397 ;;		Unchanged: 0/0
 14398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14401 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14402 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 14403 ;;Total ram usage:        6 bytes
 14404 ;; Hardware stack levels used:    1
 14405 ;; Hardware stack levels required when called:    5
 14406 ;; This function calls:
 14407 ;;		___lwdiv
 14408 ;;		___lwmod
 14409 ;;		_lcd_clear_buffer
 14410 ;;		_lcd_disp_str
 14411 ;;		_m_mem_set
 14412 ;;		_ui_mem_cpy
 14413 ;; This function is called by:
 14414 ;;		_ui_start_display
 14415 ;;		_ui_disp_small_flow_how_care
 14416 ;;		_ui_disp_modbus_id
 14417 ;;		_ui_disp_set_transferMoneyLimit
 14418 ;;		_ui_disp_set_device_id
 14419 ;;		_ui_disp_set_balanceWarning
 14420 ;;		_ui_disp_set_balanceOff
 14421 ;;		_ui_disp_set_line_reset
 14422 ;; This function uses a non-reentrant model
 14423 ;;
 14424                           
 14425                           
 14426                           ;psect for function _ui_disp_str_num
 14427  2531                     _ui_disp_str_num:	
 14428                           
 14429                           ;ui.c: 66: lcd_clear_buffer();
 14430                           
 14431                           ;incstack = 0
 14432                           ; Regs used in _ui_disp_str_num: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14433  2531  31BB  233F  31A5   	fcall	_lcd_clear_buffer
 14434                           
 14435                           ;ui.c: 67: m_mem_set(lcdBuf, ' ', 8);
 14436  2534  3058               	movlw	low _lcdBuf
 14437  2535  00F3               	movwf	m_mem_set@buf
 14438  2536  3001               	movlw	high _lcdBuf
 14439  2537  00F4               	movwf	m_mem_set@buf+1
 14440  2538  3020               	movlw	32
 14441  2539  0020               	movlb	0	; select bank0
 14442  253A  00AB               	movwf	??_ui_disp_str_num
 14443  253B  082B               	movf	??_ui_disp_str_num,w
 14444  253C  00F5               	movwf	m_mem_set@x
 14445  253D  3008               	movlw	8
 14446  253E  00AC               	movwf	??_ui_disp_str_num+1
 14447  253F  082C               	movf	??_ui_disp_str_num+1,w
 14448  2540  00F6               	movwf	m_mem_set@len
 14449  2541  31BB  23BC  31A5   	fcall	_m_mem_set
 14450                           
 14451                           ;ui.c: 68: lcdBuf[8] = '\0';
 14452  2544  0022               	movlb	2	; select bank2
 14453  2545  01E0               	clrf	(_lcdBuf^(0+256)+8)
 14454                           
 14455                           ;ui.c: 69: ui_mem_cpy(lcdBuf, str);
 14456  2546  0020               	movlb	0	; select bank0
 14457  2547  0828               	movf	ui_disp_str_num@str+1,w
 14458  2548  00F4               	movwf	ui_mem_cpy@s+1
 14459  2549  0827               	movf	ui_disp_str_num@str,w
 14460  254A  00F3               	movwf	ui_mem_cpy@s
 14461  254B  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 14462  254C  31BF  278C  31A5   	fcall	_ui_mem_cpy
 14463                           
 14464                           ;ui.c: 70: __t16 = num;
 14465  254F  0020               	movlb	0	; select bank0
 14466  2550  082A               	movf	ui_disp_str_num@num+1,w
 14467  2551  00F9               	movwf	___t16+1
 14468  2552  0829               	movf	ui_disp_str_num@num,w
 14469  2553  00F8               	movwf	___t16
 14470                           
 14471                           ;ui.c: 71: lcdBuf[7] = '0' + (__t16 % 10);
 14472  2554  300A               	movlw	10
 14473  2555  00F3               	movwf	___lwmod@divisor
 14474  2556  3000               	movlw	0
 14475  2557  00F4               	movwf	___lwmod@divisor+1
 14476  2558  0879               	movf	___t16+1,w
 14477  2559  00F6               	movwf	___lwmod@dividend+1
 14478  255A  0878               	movf	___t16,w
 14479  255B  00F5               	movwf	___lwmod@dividend
 14480  255C  31B1  2130  31A5   	fcall	___lwmod
 14481  255F  0873               	movf	?___lwmod,w
 14482  2560  3E30               	addlw	48
 14483  2561  0020               	movlb	0	; select bank0
 14484  2562  00AB               	movwf	??_ui_disp_str_num
 14485  2563  082B               	movf	??_ui_disp_str_num,w
 14486  2564  0022               	movlb	2	; select bank2
 14487  2565  00DF               	movwf	(_lcdBuf^(0+256)+7)
 14488                           
 14489                           ;ui.c: 72: __t16 /= 10;
 14490  2566  300A               	movlw	10
 14491  2567  00F3               	movwf	___lwdiv@divisor
 14492  2568  3000               	movlw	0
 14493  2569  00F4               	movwf	___lwdiv@divisor+1
 14494  256A  0879               	movf	___t16+1,w
 14495  256B  00F6               	movwf	___lwdiv@dividend+1
 14496  256C  0878               	movf	___t16,w
 14497  256D  00F5               	movwf	___lwdiv@dividend
 14498  256E  31B5  2518  31A5   	fcall	___lwdiv
 14499  2571  0874               	movf	?___lwdiv+1,w
 14500  2572  00F9               	movwf	___t16+1
 14501  2573  0873               	movf	?___lwdiv,w
 14502  2574  00F8               	movwf	___t16
 14503                           
 14504                           ;ui.c: 73: if (__t16 > 0) {
 14505  2575  0878               	movf	___t16,w
 14506  2576  0479               	iorwf	___t16+1,w
 14507  2577  1903               	btfsc	3,2
 14508  2578  2DD5               	goto	l16805
 14509                           
 14510                           ;ui.c: 74: lcdBuf[6] = '0' + (__t16 % 10);
 14511  2579  300A               	movlw	10
 14512  257A  00F3               	movwf	___lwmod@divisor
 14513  257B  3000               	movlw	0
 14514  257C  00F4               	movwf	___lwmod@divisor+1
 14515  257D  0879               	movf	___t16+1,w
 14516  257E  00F6               	movwf	___lwmod@dividend+1
 14517  257F  0878               	movf	___t16,w
 14518  2580  00F5               	movwf	___lwmod@dividend
 14519  2581  31B1  2130  31A5   	fcall	___lwmod
 14520  2584  0873               	movf	?___lwmod,w
 14521  2585  3E30               	addlw	48
 14522  2586  0020               	movlb	0	; select bank0
 14523  2587  00AB               	movwf	??_ui_disp_str_num
 14524  2588  082B               	movf	??_ui_disp_str_num,w
 14525  2589  0022               	movlb	2	; select bank2
 14526  258A  00DE               	movwf	(_lcdBuf^(0+256)+6)
 14527                           
 14528                           ;ui.c: 75: __t16 /= 10;
 14529  258B  300A               	movlw	10
 14530  258C  00F3               	movwf	___lwdiv@divisor
 14531  258D  3000               	movlw	0
 14532  258E  00F4               	movwf	___lwdiv@divisor+1
 14533  258F  0879               	movf	___t16+1,w
 14534  2590  00F6               	movwf	___lwdiv@dividend+1
 14535  2591  0878               	movf	___t16,w
 14536  2592  00F5               	movwf	___lwdiv@dividend
 14537  2593  31B5  2518  31A5   	fcall	___lwdiv
 14538  2596  0874               	movf	?___lwdiv+1,w
 14539  2597  00F9               	movwf	___t16+1
 14540  2598  0873               	movf	?___lwdiv,w
 14541  2599  00F8               	movwf	___t16
 14542                           
 14543                           ;ui.c: 76: if (__t16 > 0) {
 14544  259A  0878               	movf	___t16,w
 14545  259B  0479               	iorwf	___t16+1,w
 14546  259C  1903               	btfsc	3,2
 14547  259D  2DD5               	goto	l16805
 14548                           
 14549                           ;ui.c: 77: lcdBuf[5] = '0' + (__t16 % 10);
 14550  259E  300A               	movlw	10
 14551  259F  00F3               	movwf	___lwmod@divisor
 14552  25A0  3000               	movlw	0
 14553  25A1  00F4               	movwf	___lwmod@divisor+1
 14554  25A2  0879               	movf	___t16+1,w
 14555  25A3  00F6               	movwf	___lwmod@dividend+1
 14556  25A4  0878               	movf	___t16,w
 14557  25A5  00F5               	movwf	___lwmod@dividend
 14558  25A6  31B1  2130  31A5   	fcall	___lwmod
 14559  25A9  0873               	movf	?___lwmod,w
 14560  25AA  3E30               	addlw	48
 14561  25AB  0020               	movlb	0	; select bank0
 14562  25AC  00AB               	movwf	??_ui_disp_str_num
 14563  25AD  082B               	movf	??_ui_disp_str_num,w
 14564  25AE  0022               	movlb	2	; select bank2
 14565  25AF  00DD               	movwf	(_lcdBuf^(0+256)+5)
 14566                           
 14567                           ;ui.c: 78: __t16 /= 10;
 14568  25B0  300A               	movlw	10
 14569  25B1  00F3               	movwf	___lwdiv@divisor
 14570  25B2  3000               	movlw	0
 14571  25B3  00F4               	movwf	___lwdiv@divisor+1
 14572  25B4  0879               	movf	___t16+1,w
 14573  25B5  00F6               	movwf	___lwdiv@dividend+1
 14574  25B6  0878               	movf	___t16,w
 14575  25B7  00F5               	movwf	___lwdiv@dividend
 14576  25B8  31B5  2518  31A5   	fcall	___lwdiv
 14577  25BB  0874               	movf	?___lwdiv+1,w
 14578  25BC  00F9               	movwf	___t16+1
 14579  25BD  0873               	movf	?___lwdiv,w
 14580  25BE  00F8               	movwf	___t16
 14581                           
 14582                           ;ui.c: 79: if (__t16 > 0) {
 14583  25BF  0878               	movf	___t16,w
 14584  25C0  0479               	iorwf	___t16+1,w
 14585  25C1  1903               	btfsc	3,2
 14586  25C2  2DD5               	goto	l16805
 14587                           
 14588                           ;ui.c: 80: lcdBuf[4] = '0' + (__t16 % 10);
 14589  25C3  300A               	movlw	10
 14590  25C4  00F3               	movwf	___lwmod@divisor
 14591  25C5  3000               	movlw	0
 14592  25C6  00F4               	movwf	___lwmod@divisor+1
 14593  25C7  0879               	movf	___t16+1,w
 14594  25C8  00F6               	movwf	___lwmod@dividend+1
 14595  25C9  0878               	movf	___t16,w
 14596  25CA  00F5               	movwf	___lwmod@dividend
 14597  25CB  31B1  2130  31A5   	fcall	___lwmod
 14598  25CE  0873               	movf	?___lwmod,w
 14599  25CF  3E30               	addlw	48
 14600  25D0  0020               	movlb	0	; select bank0
 14601  25D1  00AB               	movwf	??_ui_disp_str_num
 14602  25D2  082B               	movf	??_ui_disp_str_num,w
 14603  25D3  0022               	movlb	2	; select bank2
 14604  25D4  00DC               	movwf	(_lcdBuf^(0+256)+4)
 14605  25D5                     l16805:	
 14606                           
 14607                           ;ui.c: 81: }
 14608                           ;ui.c: 82: }
 14609                           ;ui.c: 83: }
 14610                           ;ui.c: 84: lcd_disp_str(lcdBuf);
 14611  25D5  3058               	movlw	low _lcdBuf
 14612  25D6  0020               	movlb	0	; select bank0
 14613  25D7  00A2               	movwf	lcd_disp_str@str
 14614  25D8  3001               	movlw	high _lcdBuf
 14615  25D9  00A3               	movwf	lcd_disp_str@str+1
 14616  25DA  31A8  20C5         	fcall	_lcd_disp_str
 14617  25DC  0008               	return
 14618  25DD                     __end_of_ui_disp_str_num:	
 14619                           
 14620                           	psect	text23
 14621  3F8C                     __ptext23:	
 14622 ;; *************** function _ui_mem_cpy *****************
 14623 ;; Defined at:
 14624 ;;		line 56 in file "src/api/ui.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  d               1    wreg     PTR unsigned char 
 14627 ;;		 -> lcdBuf(9), 
 14628 ;;  s               2    3[COMMON] PTR unsigned char 
 14629 ;;		 -> STR_23(5), STR_14(6), STR_13(6), STR_12(6), 
 14630 ;;		 -> STR_11(6), STR_10(5), STR_9(4), STR_8(4), 
 14631 ;;		 -> STR_6(7), STR_5(3), STR_2(7), 
 14632 ;; Auto vars:     Size  Location     Type
 14633 ;;  d               1    7[COMMON] PTR unsigned char 
 14634 ;;		 -> lcdBuf(9), 
 14635 ;;  len             1    6[COMMON] unsigned char 
 14636 ;; Return value:  Size  Location     Type
 14637 ;;                  1    wreg      void 
 14638 ;; Registers used:
 14639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14640 ;; Tracked objects:
 14641 ;;		On entry : 0/0
 14642 ;;		On exit  : 0/0
 14643 ;;		Unchanged: 0/0
 14644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14645 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14648 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14649 ;;Total ram usage:        5 bytes
 14650 ;; Hardware stack levels used:    1
 14651 ;; Hardware stack levels required when called:    2
 14652 ;; This function calls:
 14653 ;;		Nothing
 14654 ;; This function is called by:
 14655 ;;		_ui_disp_str_num
 14656 ;;		_ui_disp_str_num_ex
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           
 14661                           ;psect for function _ui_mem_cpy
 14662  3F8C                     _ui_mem_cpy:	
 14663                           
 14664                           ;incstack = 0
 14665                           ; Regs used in _ui_mem_cpy: [wreg-fsr1h+status,2+status,0+pclath]
 14666                           ;ui_mem_cpy@d stored from wreg
 14667  3F8C  00F7               	movwf	ui_mem_cpy@d
 14668                           
 14669                           ;ui.c: 57: uint8_t len = 0;
 14670  3F8D  01F6               	clrf	ui_mem_cpy@len
 14671  3F8E                     l12819:	
 14672                           ;ui.c: 58: while (*s != '\0' && len < 8) {
 14673                           
 14674  3F8E  0873               	movf	ui_mem_cpy@s,w
 14675  3F8F  0084               	movwf	4
 14676  3F90  0874               	movf	ui_mem_cpy@s+1,w
 14677  3F91  0085               	movwf	5
 14678  3F92  0012               	moviw fsr0++
 14679  3F93  1903               	btfsc	3,2
 14680  3F94  0008               	return
 14681  3F95  3008               	movlw	8
 14682  3F96  0276               	subwf	ui_mem_cpy@len,w
 14683  3F97  1803               	btfsc	3,0
 14684  3F98  0008               	return
 14685                           
 14686                           ;ui.c: 59: *d++ = *s++;
 14687  3F99  0873               	movf	ui_mem_cpy@s,w
 14688  3F9A  0084               	movwf	4
 14689  3F9B  0874               	movf	ui_mem_cpy@s+1,w
 14690  3F9C  0085               	movwf	5
 14691  3F9D  0800               	movf	0,w	;code access
 14692  3F9E  00F5               	movwf	??_ui_mem_cpy
 14693  3F9F  0877               	movf	ui_mem_cpy@d,w
 14694  3FA0  0086               	movwf	6
 14695  3FA1  3001               	movlw	1	; select bank2/3
 14696  3FA2  0087               	movwf	7
 14697  3FA3  0875               	movf	??_ui_mem_cpy,w
 14698  3FA4  0081               	movwf	1
 14699  3FA5  3001               	movlw	1
 14700  3FA6  07F3               	addwf	ui_mem_cpy@s,f
 14701  3FA7  3000               	movlw	0
 14702  3FA8  3DF4               	addwfc	ui_mem_cpy@s+1,f
 14703  3FA9  3001               	movlw	1
 14704  3FAA  00F5               	movwf	??_ui_mem_cpy
 14705  3FAB  0875               	movf	??_ui_mem_cpy,w
 14706  3FAC  07F7               	addwf	ui_mem_cpy@d,f
 14707                           
 14708                           ;ui.c: 60: len++;
 14709  3FAD  3001               	movlw	1
 14710  3FAE  00F5               	movwf	??_ui_mem_cpy
 14711  3FAF  0875               	movf	??_ui_mem_cpy,w
 14712  3FB0  07F6               	addwf	ui_mem_cpy@len,f
 14713  3FB1  2F8E               	goto	l12819
 14714  3FB2                     __end_of_ui_mem_cpy:	
 14715                           
 14716                           	psect	text24
 14717  3130                     __ptext24:	
 14718 ;; *************** function ___lwmod *****************
 14719 ;; Defined at:
 14720 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 14721 ;; Parameters:    Size  Location     Type
 14722 ;;  divisor         2    3[COMMON] unsigned int 
 14723 ;;  dividend        2    5[COMMON] unsigned int 
 14724 ;; Auto vars:     Size  Location     Type
 14725 ;;  counter         1    0[BANK0 ] unsigned char 
 14726 ;; Return value:  Size  Location     Type
 14727 ;;                  2    3[COMMON] unsigned int 
 14728 ;; Registers used:
 14729 ;;		wreg, status,2, status,0
 14730 ;; Tracked objects:
 14731 ;;		On entry : 0/0
 14732 ;;		On exit  : 0/0
 14733 ;;		Unchanged: 0/0
 14734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14735 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14736 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14737 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14738 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14739 ;;Total ram usage:        6 bytes
 14740 ;; Hardware stack levels used:    1
 14741 ;; Hardware stack levels required when called:    2
 14742 ;; This function calls:
 14743 ;;		Nothing
 14744 ;; This function is called by:
 14745 ;;		_ui_disp_str_num
 14746 ;;		_ui_disp_str_num_ex
 14747 ;; This function uses a non-reentrant model
 14748 ;;
 14749                           
 14750                           
 14751                           ;psect for function ___lwmod
 14752  3130                     ___lwmod:	
 14753                           
 14754                           ;incstack = 0
 14755                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14756  3130  0873               	movf	___lwmod@divisor,w
 14757  3131  0474               	iorwf	___lwmod@divisor+1,w
 14758  3132  1903               	btfsc	3,2
 14759  3133  2958               	goto	l16777
 14760  3134  0020               	movlb	0	; select bank0
 14761  3135  01A0               	clrf	___lwmod@counter
 14762  3136  0AA0               	incf	___lwmod@counter,f
 14763  3137                     l16767:	
 14764  3137  1BF4               	btfsc	___lwmod@divisor+1,7
 14765  3138  2943               	goto	l16769
 14766  3139  3001               	movlw	1
 14767  313A                     u15745:	
 14768  313A  35F3               	lslf	___lwmod@divisor,f
 14769  313B  0DF4               	rlf	___lwmod@divisor+1,f
 14770  313C  0B89               	decfsz	9,f
 14771  313D  293A               	goto	u15745
 14772  313E  3001               	movlw	1
 14773  313F  00F7               	movwf	??___lwmod
 14774  3140  0877               	movf	??___lwmod,w
 14775  3141  07A0               	addwf	___lwmod@counter,f
 14776  3142  2937               	goto	l16767
 14777  3143                     l16769:	
 14778  3143  0874               	movf	___lwmod@divisor+1,w
 14779  3144  0276               	subwf	___lwmod@dividend+1,w
 14780  3145  1D03               	skipz
 14781  3146  2949               	goto	u15765
 14782  3147  0873               	movf	___lwmod@divisor,w
 14783  3148  0275               	subwf	___lwmod@dividend,w
 14784  3149                     u15765:	
 14785  3149  1C03               	skipc
 14786  314A  294F               	goto	l16773
 14787  314B  0873               	movf	___lwmod@divisor,w
 14788  314C  02F5               	subwf	___lwmod@dividend,f
 14789  314D  0874               	movf	___lwmod@divisor+1,w
 14790  314E  3BF6               	subwfb	___lwmod@dividend+1,f
 14791  314F                     l16773:	
 14792  314F  3001               	movlw	1
 14793  3150                     u15775:	
 14794  3150  36F4               	lsrf	___lwmod@divisor+1,f
 14795  3151  0CF3               	rrf	___lwmod@divisor,f
 14796  3152  0B89               	decfsz	9,f
 14797  3153  2950               	goto	u15775
 14798  3154  3001               	movlw	1
 14799  3155  02A0               	subwf	___lwmod@counter,f
 14800  3156  1D03               	btfss	3,2
 14801  3157  2943               	goto	l16769
 14802  3158                     l16777:	
 14803  3158  0876               	movf	___lwmod@dividend+1,w
 14804  3159  00F4               	movwf	?___lwmod+1
 14805  315A  0875               	movf	___lwmod@dividend,w
 14806  315B  00F3               	movwf	?___lwmod
 14807  315C  0008               	return
 14808  315D                     __end_of___lwmod:	
 14809                           
 14810                           	psect	text25
 14811  3518                     __ptext25:	
 14812 ;; *************** function ___lwdiv *****************
 14813 ;; Defined at:
 14814 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 14815 ;; Parameters:    Size  Location     Type
 14816 ;;  divisor         2    3[COMMON] unsigned int 
 14817 ;;  dividend        2    5[COMMON] unsigned int 
 14818 ;; Auto vars:     Size  Location     Type
 14819 ;;  quotient        2    0[BANK0 ] unsigned int 
 14820 ;;  counter         1    2[BANK0 ] unsigned char 
 14821 ;; Return value:  Size  Location     Type
 14822 ;;                  2    3[COMMON] unsigned int 
 14823 ;; Registers used:
 14824 ;;		wreg, status,2, status,0
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14830 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14831 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14832 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14833 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14834 ;;Total ram usage:        8 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:    2
 14837 ;; This function calls:
 14838 ;;		Nothing
 14839 ;; This function is called by:
 14840 ;;		_ui_disp_str_num
 14841 ;;		_ui_disp_str_num_ex
 14842 ;; This function uses a non-reentrant model
 14843 ;;
 14844                           
 14845                           
 14846                           ;psect for function ___lwdiv
 14847  3518                     ___lwdiv:	
 14848                           
 14849                           ;incstack = 0
 14850                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 14851  3518  0020               	movlb	0	; select bank0
 14852  3519  01A0               	clrf	___lwdiv@quotient
 14853  351A  01A1               	clrf	___lwdiv@quotient+1
 14854  351B  0873               	movf	___lwdiv@divisor,w
 14855  351C  0474               	iorwf	___lwdiv@divisor+1,w
 14856  351D  1903               	btfsc	3,2
 14857  351E  2D48               	goto	l16755
 14858  351F  01A2               	clrf	___lwdiv@counter
 14859  3520  0AA2               	incf	___lwdiv@counter,f
 14860  3521                     l16743:	
 14861  3521  1BF4               	btfsc	___lwdiv@divisor+1,7
 14862  3522  2D2D               	goto	l16745
 14863  3523  3001               	movlw	1
 14864  3524                     u15675:	
 14865  3524  35F3               	lslf	___lwdiv@divisor,f
 14866  3525  0DF4               	rlf	___lwdiv@divisor+1,f
 14867  3526  0B89               	decfsz	9,f
 14868  3527  2D24               	goto	u15675
 14869  3528  3001               	movlw	1
 14870  3529  00F7               	movwf	??___lwdiv
 14871  352A  0877               	movf	??___lwdiv,w
 14872  352B  07A2               	addwf	___lwdiv@counter,f
 14873  352C  2D21               	goto	l16743
 14874  352D                     l16745:	
 14875  352D  3001               	movlw	1
 14876  352E                     u15695:	
 14877  352E  35A0               	lslf	___lwdiv@quotient,f
 14878  352F  0DA1               	rlf	___lwdiv@quotient+1,f
 14879  3530  0B89               	decfsz	9,f
 14880  3531  2D2E               	goto	u15695
 14881  3532  0874               	movf	___lwdiv@divisor+1,w
 14882  3533  0276               	subwf	___lwdiv@dividend+1,w
 14883  3534  1D03               	skipz
 14884  3535  2D38               	goto	u15705
 14885  3536  0873               	movf	___lwdiv@divisor,w
 14886  3537  0275               	subwf	___lwdiv@dividend,w
 14887  3538                     u15705:	
 14888  3538  1C03               	skipc
 14889  3539  2D3F               	goto	l16751
 14890  353A  0873               	movf	___lwdiv@divisor,w
 14891  353B  02F5               	subwf	___lwdiv@dividend,f
 14892  353C  0874               	movf	___lwdiv@divisor+1,w
 14893  353D  3BF6               	subwfb	___lwdiv@dividend+1,f
 14894  353E  1420               	bsf	___lwdiv@quotient,0
 14895  353F                     l16751:	
 14896  353F  3001               	movlw	1
 14897  3540                     u15715:	
 14898  3540  36F4               	lsrf	___lwdiv@divisor+1,f
 14899  3541  0CF3               	rrf	___lwdiv@divisor,f
 14900  3542  0B89               	decfsz	9,f
 14901  3543  2D40               	goto	u15715
 14902  3544  3001               	movlw	1
 14903  3545  02A2               	subwf	___lwdiv@counter,f
 14904  3546  1D03               	btfss	3,2
 14905  3547  2D2D               	goto	l16745
 14906  3548                     l16755:	
 14907  3548  0821               	movf	___lwdiv@quotient+1,w
 14908  3549  00F4               	movwf	?___lwdiv+1
 14909  354A  0820               	movf	___lwdiv@quotient,w
 14910  354B  00F3               	movwf	?___lwdiv
 14911  354C  0008               	return
 14912  354D                     __end_of___lwdiv:	
 14913                           
 14914                           	psect	text26
 14915  22BE                     __ptext26:	
 14916 ;; *************** function _ui_disp_flow *****************
 14917 ;; Defined at:
 14918 ;;		line 141 in file "src/api/ui.c"
 14919 ;; Parameters:    Size  Location     Type
 14920 ;;		None
 14921 ;; Auto vars:     Size  Location     Type
 14922 ;;  flw             4   29[BANK0 ] unsigned long 
 14923 ;;  decnum          1   28[BANK0 ] unsigned char 
 14924 ;; Return value:  Size  Location     Type
 14925 ;;                  1    wreg      void 
 14926 ;; Registers used:
 14927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14928 ;; Tracked objects:
 14929 ;;		On entry : 0/0
 14930 ;;		On exit  : 0/0
 14931 ;;		Unchanged: 0/0
 14932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14934 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14935 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14936 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 14937 ;;Total ram usage:        7 bytes
 14938 ;; Hardware stack levels used:    1
 14939 ;; Hardware stack levels required when called:    6
 14940 ;; This function calls:
 14941 ;;		___lldiv
 14942 ;;		___lmul
 14943 ;;		_lcd_clear_buffer
 14944 ;;		_lcd_disp_dp
 14945 ;;		_lcd_disp_str
 14946 ;;		_m_mem_set
 14947 ;;		_ui_disp_flow_error
 14948 ;;		_ui_head_hide
 14949 ;;		_ui_uint32_2_str
 14950 ;; This function is called by:
 14951 ;;		_ui_disp_menu
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           
 14956                           ;psect for function _ui_disp_flow
 14957  22BE                     _ui_disp_flow:	
 14958                           
 14959                           ;ui.c: 142: uint32_t flw = flow;
 14960                           
 14961                           ;incstack = 0
 14962                           ; Regs used in _ui_disp_flow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14963  22BE  0021               	movlb	1	; select bank1
 14964  22BF  083C               	movf	_flow^(0+128),w	;volatile
 14965  22C0  0020               	movlb	0	; select bank0
 14966  22C1  00BD               	movwf	ui_disp_flow@flw
 14967  22C2  0021               	movlb	1	; select bank1
 14968  22C3  083D               	movf	(_flow+1)^(0+128),w	;volatile
 14969  22C4  0020               	movlb	0	; select bank0
 14970  22C5  00BE               	movwf	ui_disp_flow@flw+1
 14971  22C6  01BF               	clrf	ui_disp_flow@flw+2
 14972  22C7  01C0               	clrf	ui_disp_flow@flw+3
 14973                           
 14974                           ;ui.c: 143: uint8_t decnum;
 14975                           ;ui.c: 144: if(flowError){
 14976  22C8  0021               	movlb	1	; select bank1
 14977  22C9  0846               	movf	_flowError^(0+128),w
 14978  22CA  1903               	btfsc	3,2
 14979  22CB  2ACF               	goto	l13257
 14980                           
 14981                           ;ui.c: 145: ui_disp_flow_error();
 14982  22CC  31BB  2328         	fcall	_ui_disp_flow_error
 14983                           
 14984                           ;ui.c: 146: return;
 14985  22CE  0008               	return
 14986  22CF                     l13257:	
 14987                           
 14988                           ;ui.c: 147: }
 14989                           ;ui.c: 148: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 14990  22CF  3058               	movlw	low _lcdBuf
 14991  22D0  00F3               	movwf	m_mem_set@buf
 14992  22D1  3001               	movlw	high _lcdBuf
 14993  22D2  00F4               	movwf	m_mem_set@buf+1
 14994  22D3  3030               	movlw	48
 14995  22D4  0020               	movlb	0	; select bank0
 14996  22D5  00BA               	movwf	??_ui_disp_flow
 14997  22D6  083A               	movf	??_ui_disp_flow,w
 14998  22D7  00F5               	movwf	m_mem_set@x
 14999  22D8  3009               	movlw	9
 15000  22D9  00BB               	movwf	??_ui_disp_flow+1
 15001  22DA  083B               	movf	??_ui_disp_flow+1,w
 15002  22DB  00F6               	movwf	m_mem_set@len
 15003  22DC  31BB  23BC  31A2   	fcall	_m_mem_set
 15004                           
 15005                           ;ui.c: 149: lcdBuf[8] = '\0';
 15006  22DF  0022               	movlb	2	; select bank2
 15007  22E0  01E0               	clrf	(_lcdBuf^(0+256)+8)
 15008                           
 15009                           ;ui.c: 151: if(mainSystemData.imdFlowUnit==0){
 15010  22E1  0024               	movlb	4	; select bank4
 15011  22E2  085C               	movf	(_mainSystemData^(0+512)+60),w
 15012  22E3  1D03               	btfss	3,2
 15013  22E4  2AEB               	goto	l13265
 15014                           
 15015                           ;ui.c: 152: decnum=mainSystemData.imdFlowResolution;
 15016  22E5  085D               	movf	(_mainSystemData^(0+512)+61),w
 15017  22E6  0020               	movlb	0	; select bank0
 15018  22E7  00BA               	movwf	??_ui_disp_flow
 15019  22E8  083A               	movf	??_ui_disp_flow,w
 15020  22E9  00BC               	movwf	ui_disp_flow@decnum
 15021                           
 15022                           ;ui.c: 153: }else{
 15023  22EA  2B28               	goto	l13271
 15024  22EB                     l13265:	
 15025                           
 15026                           ;ui.c: 154: decnum=2;
 15027  22EB  3002               	movlw	2
 15028  22EC  0020               	movlb	0	; select bank0
 15029  22ED  00BA               	movwf	??_ui_disp_flow
 15030  22EE  083A               	movf	??_ui_disp_flow,w
 15031  22EF  00BC               	movwf	ui_disp_flow@decnum
 15032                           
 15033                           ;ui.c: 155: flw=flw*60;
 15034  22F0  0840               	movf	ui_disp_flow@flw+3,w
 15035  22F1  00A3               	movwf	___lmul@multiplier+3
 15036  22F2  083F               	movf	ui_disp_flow@flw+2,w
 15037  22F3  00A2               	movwf	___lmul@multiplier+2
 15038  22F4  083E               	movf	ui_disp_flow@flw+1,w
 15039  22F5  00A1               	movwf	___lmul@multiplier+1
 15040  22F6  083D               	movf	ui_disp_flow@flw,w
 15041  22F7  00A0               	movwf	___lmul@multiplier
 15042  22F8  3000               	movlw	0
 15043  22F9  00A7               	movwf	___lmul@multiplicand+3
 15044  22FA  3000               	movlw	0
 15045  22FB  00A6               	movwf	___lmul@multiplicand+2
 15046  22FC  3000               	movlw	0
 15047  22FD  00A5               	movwf	___lmul@multiplicand+1
 15048  22FE  303C               	movlw	60
 15049  22FF  00A4               	movwf	___lmul@multiplicand
 15050  2300  31B3  235B  31A2   	fcall	___lmul
 15051  2303  0020               	movlb	0	; select bank0
 15052  2304  0823               	movf	?___lmul+3,w
 15053  2305  00C0               	movwf	ui_disp_flow@flw+3
 15054  2306  0822               	movf	?___lmul+2,w
 15055  2307  00BF               	movwf	ui_disp_flow@flw+2
 15056  2308  0821               	movf	?___lmul+1,w
 15057  2309  00BE               	movwf	ui_disp_flow@flw+1
 15058  230A  0820               	movf	?___lmul,w
 15059  230B  00BD               	movwf	ui_disp_flow@flw
 15060                           
 15061                           ;ui.c: 156: flw=flw/100;
 15062  230C  3000               	movlw	0
 15063  230D  00AB               	movwf	___lldiv@divisor+3
 15064  230E  3000               	movlw	0
 15065  230F  00AA               	movwf	___lldiv@divisor+2
 15066  2310  3000               	movlw	0
 15067  2311  00A9               	movwf	___lldiv@divisor+1
 15068  2312  3064               	movlw	100
 15069  2313  00A8               	movwf	___lldiv@divisor
 15070  2314  0840               	movf	ui_disp_flow@flw+3,w
 15071  2315  00AF               	movwf	___lldiv@dividend+3
 15072  2316  083F               	movf	ui_disp_flow@flw+2,w
 15073  2317  00AE               	movwf	___lldiv@dividend+2
 15074  2318  083E               	movf	ui_disp_flow@flw+1,w
 15075  2319  00AD               	movwf	___lldiv@dividend+1
 15076  231A  083D               	movf	ui_disp_flow@flw,w
 15077  231B  00AC               	movwf	___lldiv@dividend
 15078  231C  31AA  2245  31A2   	fcall	___lldiv
 15079  231F  0020               	movlb	0	; select bank0
 15080  2320  082B               	movf	?___lldiv+3,w
 15081  2321  00C0               	movwf	ui_disp_flow@flw+3
 15082  2322  082A               	movf	?___lldiv+2,w
 15083  2323  00BF               	movwf	ui_disp_flow@flw+2
 15084  2324  0829               	movf	?___lldiv+1,w
 15085  2325  00BE               	movwf	ui_disp_flow@flw+1
 15086  2326  0828               	movf	?___lldiv,w
 15087  2327  00BD               	movwf	ui_disp_flow@flw
 15088  2328                     l13271:	
 15089                           
 15090                           ;ui.c: 157: }
 15091                           ;ui.c: 158: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), flw, 8);
 15092  2328  0840               	movf	ui_disp_flow@flw+3,w
 15093  2329  00B4               	movwf	ui_uint32_2_str@x+3
 15094  232A  083F               	movf	ui_disp_flow@flw+2,w
 15095  232B  00B3               	movwf	ui_uint32_2_str@x+2
 15096  232C  083E               	movf	ui_disp_flow@flw+1,w
 15097  232D  00B2               	movwf	ui_uint32_2_str@x+1
 15098  232E  083D               	movf	ui_disp_flow@flw,w
 15099  232F  00B1               	movwf	ui_uint32_2_str@x
 15100  2330  3008               	movlw	8
 15101  2331  00BA               	movwf	??_ui_disp_flow
 15102  2332  083A               	movf	??_ui_disp_flow,w
 15103  2333  00B5               	movwf	ui_uint32_2_str@len
 15104  2334  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 15105  2335  31A7  2747  31A2   	fcall	_ui_uint32_2_str
 15106                           
 15107                           ;ui.c: 159: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 15108  2338  0020               	movlb	0	; select bank0
 15109  2339  083C               	movf	ui_disp_flow@decnum,w
 15110  233A  3E01               	addlw	1
 15111  233B  3AFF               	xorlw	255
 15112  233C  3E01               	addlw	1
 15113  233D  3E08               	addlw	8
 15114  233E  00BA               	movwf	??_ui_disp_flow
 15115  233F  083A               	movf	??_ui_disp_flow,w
 15116  2340  00F3               	movwf	ui_head_hide@loc
 15117  2341  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 15118  2342  31B0  20AE  31A2   	fcall	_ui_head_hide
 15119                           
 15120                           ;ui.c: 160: lcd_clear_buffer();
 15121  2345  31BB  233F  31A2   	fcall	_lcd_clear_buffer
 15122                           
 15123                           ;ui.c: 161: lcd_disp_dp(decnum, 1);
 15124  2348  0020               	movlb	0	; select bank0
 15125  2349  01B2               	clrf	lcd_disp_dp@show
 15126  234A  0AB2               	incf	lcd_disp_dp@show,f
 15127  234B  083C               	movf	ui_disp_flow@decnum,w
 15128  234C  31AC  245F  31A2   	fcall	_lcd_disp_dp
 15129                           
 15130                           ;ui.c: 162: lcd_disp_str(lcdBuf);
 15131  234F  3058               	movlw	low _lcdBuf
 15132  2350  0020               	movlb	0	; select bank0
 15133  2351  00A2               	movwf	lcd_disp_str@str
 15134  2352  3001               	movlw	high _lcdBuf
 15135  2353  00A3               	movwf	lcd_disp_str@str+1
 15136  2354  31A8  20C5         	fcall	_lcd_disp_str
 15137  2356  0008               	return
 15138  2357                     __end_of_ui_disp_flow:	
 15139                           
 15140                           	psect	text27
 15141  3C46                     __ptext27:	
 15142 ;; *************** function _ui_disp_clear_totale *****************
 15143 ;; Defined at:
 15144 ;;		line 314 in file "src/api/ui.c"
 15145 ;; Parameters:    Size  Location     Type
 15146 ;;		None
 15147 ;; Auto vars:     Size  Location     Type
 15148 ;;		None
 15149 ;; Return value:  Size  Location     Type
 15150 ;;                  1    wreg      void 
 15151 ;; Registers used:
 15152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15153 ;; Tracked objects:
 15154 ;;		On entry : 0/0
 15155 ;;		On exit  : 0/0
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15161 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15162 ;;Total ram usage:        0 bytes
 15163 ;; Hardware stack levels used:    1
 15164 ;; Hardware stack levels required when called:    7
 15165 ;; This function calls:
 15166 ;;		_ui_disp_totale_v
 15167 ;; This function is called by:
 15168 ;;		_ui_disp_menu
 15169 ;; This function uses a non-reentrant model
 15170 ;;
 15171                           
 15172                           
 15173                           ;psect for function _ui_disp_clear_totale
 15174  3C46                     _ui_disp_clear_totale:	
 15175                           
 15176                           ;ui.c: 315: ui_disp_totale_v();
 15177                           
 15178                           ;incstack = 0
 15179                           ; Regs used in _ui_disp_clear_totale: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15180  3C46  31AD  25A3  31BC   	fcall	_ui_disp_totale_v
 15181                           
 15182                           ;ui.c: 316: do { LATAbits.LATA3 = ~LATAbits.LATA3; } while(0);;
 15183  3C49  1003               	clrc
 15184  3C4A  0022               	movlb	2	; select bank2
 15185  3C4B  1D8C               	btfss	12,3	;volatile
 15186  3C4C  1403               	setc
 15187  3C4D  1C03               	btfss	3,0
 15188  3C4E  2C52               	goto	u11960
 15189  3C4F  0022               	movlb	2	; select bank2
 15190  3C50  158C               	bsf	12,3	;volatile
 15191  3C51  2C54               	goto	l13307
 15192  3C52                     u11960:	
 15193  3C52  0022               	movlb	2	; select bank2
 15194  3C53  118C               	bcf	12,3	;volatile
 15195  3C54                     l13307:	
 15196                           ;ui.c: 317: do { LATFbits.LATF0 = 0; } while(0);;
 15197                           
 15198  3C54  0027               	movlb	7	; select bank7
 15199  3C55  100C               	bcf	12,0	;volatile
 15200                           
 15201                           ;ui.c: 318: do { LATFbits.LATF1 = 0; } while(0);;
 15202  3C56  108C               	bcf	12,1	;volatile
 15203  3C57  0008               	return
 15204  3C58                     __end_of_ui_disp_clear_totale:	
 15205                           
 15206                           	psect	text28
 15207  2DA3                     __ptext28:	
 15208 ;; *************** function _ui_disp_totale_v *****************
 15209 ;; Defined at:
 15210 ;;		line 165 in file "src/api/ui.c"
 15211 ;; Parameters:    Size  Location     Type
 15212 ;;		None
 15213 ;; Auto vars:     Size  Location     Type
 15214 ;;  decnum          1   28[BANK0 ] unsigned char 
 15215 ;; Return value:  Size  Location     Type
 15216 ;;                  1    wreg      void 
 15217 ;; Registers used:
 15218 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15219 ;; Tracked objects:
 15220 ;;		On entry : 0/0
 15221 ;;		On exit  : 0/0
 15222 ;;		Unchanged: 0/0
 15223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15225 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15226 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15227 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15228 ;;Total ram usage:        3 bytes
 15229 ;; Hardware stack levels used:    1
 15230 ;; Hardware stack levels required when called:    6
 15231 ;; This function calls:
 15232 ;;		_lcd_clear_buffer
 15233 ;;		_lcd_disp_dp
 15234 ;;		_lcd_disp_str
 15235 ;;		_m_mem_set
 15236 ;;		_ui_disp_flow_error
 15237 ;;		_ui_head_hide
 15238 ;;		_ui_uint32_2_str
 15239 ;; This function is called by:
 15240 ;;		_ui_disp_clear_totale
 15241 ;;		_ui_disp_menu
 15242 ;; This function uses a non-reentrant model
 15243 ;;
 15244                           
 15245                           
 15246                           ;psect for function _ui_disp_totale_v
 15247  2DA3                     _ui_disp_totale_v:	
 15248                           
 15249                           ;ui.c: 166: uint8_t decnum ;
 15250                           ;ui.c: 167: if(flowError){
 15251                           
 15252                           ;incstack = 0
 15253                           ; Regs used in _ui_disp_totale_v: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15254  2DA3  0021               	movlb	1	; select bank1
 15255  2DA4  0846               	movf	_flowError^(0+128),w
 15256  2DA5  1903               	btfsc	3,2
 15257  2DA6  2DAA               	goto	l12975
 15258                           
 15259                           ;ui.c: 168: ui_disp_flow_error();
 15260  2DA7  31BB  2328         	fcall	_ui_disp_flow_error
 15261                           
 15262                           ;ui.c: 169: return;
 15263  2DA9  0008               	return
 15264  2DAA                     l12975:	
 15265                           
 15266                           ;ui.c: 170: }
 15267                           ;ui.c: 171: decnum = mainSystemData.volumeResolution;
 15268  2DAA  0024               	movlb	4	; select bank4
 15269  2DAB  085B               	movf	(_mainSystemData^(0+512)+59),w
 15270  2DAC  0020               	movlb	0	; select bank0
 15271  2DAD  00BA               	movwf	??_ui_disp_totale_v
 15272  2DAE  083A               	movf	??_ui_disp_totale_v,w
 15273  2DAF  00BC               	movwf	ui_disp_totale_v@decnum
 15274                           
 15275                           ;ui.c: 172: __t32=mainSystemData.totalConsumeVolume;
 15276  2DB0  3030               	movlw	48
 15277  2DB1  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 15278  2DB2  0086               	movwf	6
 15279  2DB3  3002               	movlw	2	; select bank4/5
 15280  2DB4  0087               	movwf	7
 15281  2DB5  3F40               	moviw [0]fsr1
 15282  2DB6  0021               	movlb	1	; select bank1
 15283  2DB7  00B4               	movwf	___t32^(0+128)
 15284  2DB8  3F41               	moviw [1]fsr1
 15285  2DB9  00B5               	movwf	(___t32+1)^(0+128)
 15286  2DBA  3F42               	moviw [2]fsr1
 15287  2DBB  00B6               	movwf	(___t32+2)^(0+128)
 15288  2DBC  3F43               	moviw [3]fsr1
 15289  2DBD  00B7               	movwf	(___t32+3)^(0+128)
 15290                           
 15291                           ;ui.c: 173: if (decnum > 3)decnum = 3;
 15292  2DBE  3004               	movlw	4
 15293  2DBF  0020               	movlb	0	; select bank0
 15294  2DC0  023C               	subwf	ui_disp_totale_v@decnum,w
 15295  2DC1  1C03               	skipc
 15296  2DC2  2DC7               	goto	l411
 15297  2DC3  3003               	movlw	3
 15298  2DC4  00BA               	movwf	??_ui_disp_totale_v
 15299  2DC5  083A               	movf	??_ui_disp_totale_v,w
 15300  2DC6  00BC               	movwf	ui_disp_totale_v@decnum
 15301  2DC7                     l411:	
 15302                           
 15303                           ;ui.c: 174: __t32 += rtVolume_m3;
 15304  2DC7  0021               	movlb	1	; select bank1
 15305  2DC8  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 15306  2DC9  07B4               	addwf	___t32^(0+128),f
 15307  2DCA  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 15308  2DCB  3DB5               	addwfc	(___t32+1)^(0+128),f
 15309  2DCC  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 15310  2DCD  3DB6               	addwfc	(___t32+2)^(0+128),f
 15311  2DCE  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 15312  2DCF  3DB7               	addwfc	(___t32+3)^(0+128),f
 15313                           
 15314                           ;ui.c: 175: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 15315  2DD0  3058               	movlw	low _lcdBuf
 15316  2DD1  00F3               	movwf	m_mem_set@buf
 15317  2DD2  3001               	movlw	high _lcdBuf
 15318  2DD3  00F4               	movwf	m_mem_set@buf+1
 15319  2DD4  3030               	movlw	48
 15320  2DD5  0020               	movlb	0	; select bank0
 15321  2DD6  00BA               	movwf	??_ui_disp_totale_v
 15322  2DD7  083A               	movf	??_ui_disp_totale_v,w
 15323  2DD8  00F5               	movwf	m_mem_set@x
 15324  2DD9  3009               	movlw	9
 15325  2DDA  00BB               	movwf	??_ui_disp_totale_v+1
 15326  2DDB  083B               	movf	??_ui_disp_totale_v+1,w
 15327  2DDC  00F6               	movwf	m_mem_set@len
 15328  2DDD  31BB  23BC  31AD   	fcall	_m_mem_set
 15329                           
 15330                           ;ui.c: 176: lcdBuf[8] = '\0';
 15331  2DE0  0022               	movlb	2	; select bank2
 15332  2DE1  01E0               	clrf	(_lcdBuf^(0+256)+8)
 15333                           
 15334                           ;ui.c: 177: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __t32, 8);
 15335  2DE2  0021               	movlb	1	; select bank1
 15336  2DE3  0837               	movf	(___t32+3)^(0+128),w
 15337  2DE4  0020               	movlb	0	; select bank0
 15338  2DE5  00B4               	movwf	ui_uint32_2_str@x+3
 15339  2DE6  0021               	movlb	1	; select bank1
 15340  2DE7  0836               	movf	(___t32+2)^(0+128),w
 15341  2DE8  0020               	movlb	0	; select bank0
 15342  2DE9  00B3               	movwf	ui_uint32_2_str@x+2
 15343  2DEA  0021               	movlb	1	; select bank1
 15344  2DEB  0835               	movf	(___t32+1)^(0+128),w
 15345  2DEC  0020               	movlb	0	; select bank0
 15346  2DED  00B2               	movwf	ui_uint32_2_str@x+1
 15347  2DEE  0021               	movlb	1	; select bank1
 15348  2DEF  0834               	movf	___t32^(0+128),w
 15349  2DF0  0020               	movlb	0	; select bank0
 15350  2DF1  00B1               	movwf	ui_uint32_2_str@x
 15351  2DF2  3008               	movlw	8
 15352  2DF3  00BA               	movwf	??_ui_disp_totale_v
 15353  2DF4  083A               	movf	??_ui_disp_totale_v,w
 15354  2DF5  00B5               	movwf	ui_uint32_2_str@len
 15355  2DF6  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 15356  2DF7  31A7  2747  31AD   	fcall	_ui_uint32_2_str
 15357                           
 15358                           ;ui.c: 178: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 15359  2DFA  0020               	movlb	0	; select bank0
 15360  2DFB  083C               	movf	ui_disp_totale_v@decnum,w
 15361  2DFC  3E01               	addlw	1
 15362  2DFD  3AFF               	xorlw	255
 15363  2DFE  3E01               	addlw	1
 15364  2DFF  3E08               	addlw	8
 15365  2E00  00BA               	movwf	??_ui_disp_totale_v
 15366  2E01  083A               	movf	??_ui_disp_totale_v,w
 15367  2E02  00F3               	movwf	ui_head_hide@loc
 15368  2E03  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 15369  2E04  31B0  20AE  31AD   	fcall	_ui_head_hide
 15370                           
 15371                           ;ui.c: 179: lcd_clear_buffer();
 15372  2E07  31BB  233F  31AD   	fcall	_lcd_clear_buffer
 15373                           
 15374                           ;ui.c: 180: lcd_disp_dp(decnum, 1);
 15375  2E0A  0020               	movlb	0	; select bank0
 15376  2E0B  01B2               	clrf	lcd_disp_dp@show
 15377  2E0C  0AB2               	incf	lcd_disp_dp@show,f
 15378  2E0D  083C               	movf	ui_disp_totale_v@decnum,w
 15379  2E0E  31AC  245F  31AD   	fcall	_lcd_disp_dp
 15380                           
 15381                           ;ui.c: 181: lcd_disp_str(lcdBuf);
 15382  2E11  3058               	movlw	low _lcdBuf
 15383  2E12  0020               	movlb	0	; select bank0
 15384  2E13  00A2               	movwf	lcd_disp_str@str
 15385  2E14  3001               	movlw	high _lcdBuf
 15386  2E15  00A3               	movwf	lcd_disp_str@str+1
 15387  2E16  31A8  20C5         	fcall	_lcd_disp_str
 15388  2E18  0008               	return
 15389  2E19                     __end_of_ui_disp_totale_v:	
 15390                           
 15391                           	psect	text29
 15392  3C6B                     __ptext29:	
 15393 ;; *************** function _ui_disp_clear_balance *****************
 15394 ;; Defined at:
 15395 ;;		line 341 in file "src/api/ui.c"
 15396 ;; Parameters:    Size  Location     Type
 15397 ;;		None
 15398 ;; Auto vars:     Size  Location     Type
 15399 ;;		None
 15400 ;; Return value:  Size  Location     Type
 15401 ;;                  1    wreg      void 
 15402 ;; Registers used:
 15403 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15404 ;; Tracked objects:
 15405 ;;		On entry : 0/0
 15406 ;;		On exit  : 0/0
 15407 ;;		Unchanged: 0/0
 15408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15413 ;;Total ram usage:        0 bytes
 15414 ;; Hardware stack levels used:    1
 15415 ;; Hardware stack levels required when called:    7
 15416 ;; This function calls:
 15417 ;;		_ui_disp_balance_and_volume
 15418 ;; This function is called by:
 15419 ;;		_ui_disp_menu
 15420 ;; This function uses a non-reentrant model
 15421 ;;
 15422                           
 15423                           
 15424                           ;psect for function _ui_disp_clear_balance
 15425  3C6B                     _ui_disp_clear_balance:	
 15426                           
 15427                           ;ui.c: 343: ui_disp_balance_and_volume();
 15428                           
 15429                           ;incstack = 0
 15430                           ; Regs used in _ui_disp_clear_balance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15431  3C6B  3194  247D  31BC   	fcall	_ui_disp_balance_and_volume
 15432                           
 15433                           ;ui.c: 344: do { LATFbits.LATF0 = ~LATFbits.LATF0; } while(0);;
 15434  3C6E  1003               	clrc
 15435  3C6F  0027               	movlb	7	; select bank7
 15436  3C70  1C0C               	btfss	12,0	;volatile
 15437  3C71  1403               	setc
 15438  3C72  1C03               	btfss	3,0
 15439  3C73  2C77               	goto	u11980
 15440  3C74  0027               	movlb	7	; select bank7
 15441  3C75  140C               	bsf	12,0	;volatile
 15442  3C76  2C79               	goto	l13315
 15443  3C77                     u11980:	
 15444  3C77  0027               	movlb	7	; select bank7
 15445  3C78  100C               	bcf	12,0	;volatile
 15446  3C79                     l13315:	
 15447                           ;ui.c: 345: do { LATAbits.LATA3 = 0; } while(0);;
 15448                           
 15449  3C79  0022               	movlb	2	; select bank2
 15450  3C7A  118C               	bcf	12,3	;volatile
 15451                           
 15452                           ;ui.c: 346: do { LATFbits.LATF1 = 0; } while(0);;
 15453  3C7B  0027               	movlb	7	; select bank7
 15454  3C7C  108C               	bcf	12,1	;volatile
 15455  3C7D  0008               	return
 15456  3C7E                     __end_of_ui_disp_clear_balance:	
 15457                           
 15458                           	psect	text30
 15459  0822                     __ptext30:	
 15460 ;; *************** function _ui_key_process_enter *****************
 15461 ;; Defined at:
 15462 ;;		line 198 in file "src/api/ui_key.c"
 15463 ;; Parameters:    Size  Location     Type
 15464 ;;		None
 15465 ;; Auto vars:     Size  Location     Type
 15466 ;;		None
 15467 ;; Return value:  Size  Location     Type
 15468 ;;                  1    wreg      void 
 15469 ;; Registers used:
 15470 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15471 ;; Tracked objects:
 15472 ;;		On entry : 0/0
 15473 ;;		On exit  : 0/0
 15474 ;;		Unchanged: 0/0
 15475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15478 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 15479 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 15480 ;;Total ram usage:        6 bytes
 15481 ;; Hardware stack levels used:    1
 15482 ;; Hardware stack levels required when called:    5
 15483 ;; This function calls:
 15484 ;;		___aldiv
 15485 ;;		___awdiv
 15486 ;;		_m_mem_cpy_len
 15487 ;;		_ui_key_waite_up
 15488 ;; This function is called by:
 15489 ;;		_ui_key_process
 15490 ;; This function uses a non-reentrant model
 15491 ;;
 15492                           
 15493                           
 15494                           ;psect for function _ui_key_process_enter
 15495  0822                     _ui_key_process_enter:	
 15496                           
 15497                           ;ui_key.c: 199: if(menu!=0x10)return;
 15498                           
 15499                           ;incstack = 0
 15500                           ; Regs used in _ui_key_process_enter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15501  0822  3010               	movlw	16
 15502  0823  0021               	movlb	1	; select bank1
 15503  0824  0643               	xorwf	_menu^(0+128),w
 15504  0825  1D03               	btfss	3,2
 15505  0826  0008               	return
 15506  0827  2920               	goto	l14767
 15507  0828                     l14715:	
 15508                           ;ui_key.c: 201: case 107:
 15509                           
 15510                           ;ui_key.c: 200: switch(password){
 15511                           
 15512                           
 15513                           ;ui_key.c: 202: ui_key_waite_up();
 15514  0828  31B4  241E         	fcall	_ui_key_waite_up
 15515                           
 15516                           ;ui_key.c: 203: menu=0x20;
 15517  082A  3020               	movlw	32
 15518  082B  0020               	movlb	0	; select bank0
 15519  082C  00AE               	movwf	??_ui_key_process_enter
 15520  082D  082E               	movf	??_ui_key_process_enter,w
 15521  082E  0021               	movlb	1	; select bank1
 15522  082F  00C3               	movwf	_menu^(0+128)
 15523                           
 15524                           ;ui_key.c: 204: break;
 15525  0830  0008               	return
 15526  0831                     l14719:	
 15527                           ;ui_key.c: 205: case 103:
 15528                           
 15529                           
 15530                           ;ui_key.c: 206: ui_key_waite_up();
 15531  0831  31B4  241E         	fcall	_ui_key_waite_up
 15532                           
 15533                           ;ui_key.c: 207: menu=0x30;
 15534  0833  3030               	movlw	48
 15535  0834  0020               	movlb	0	; select bank0
 15536  0835  00AE               	movwf	??_ui_key_process_enter
 15537  0836  082E               	movf	??_ui_key_process_enter,w
 15538  0837  0021               	movlb	1	; select bank1
 15539  0838  00C3               	movwf	_menu^(0+128)
 15540                           
 15541                           ;ui_key.c: 208: break;
 15542  0839  0008               	return
 15543  083A                     l14723:	
 15544                           ;ui_key.c: 209: case 109:
 15545                           
 15546                           
 15547                           ;ui_key.c: 210: m_mem_cpy_len(uiAdjbuf,(uint8_t*)(&mainSystemData.flowRatio),2);
 15548  083A  3061               	movlw	low _uiAdjbuf
 15549  083B  00F3               	movwf	m_mem_cpy_len@d
 15550  083C  3001               	movlw	high _uiAdjbuf
 15551  083D  00F4               	movwf	m_mem_cpy_len@d+1
 15552  083E  303A               	movlw	low (_mainSystemData+26)
 15553  083F  00F5               	movwf	m_mem_cpy_len@s
 15554  0840  3002               	movlw	high (_mainSystemData+26)
 15555  0841  00F6               	movwf	m_mem_cpy_len@s+1
 15556  0842  3002               	movlw	2
 15557  0843  0020               	movlb	0	; select bank0
 15558  0844  00AE               	movwf	??_ui_key_process_enter
 15559  0845  082E               	movf	??_ui_key_process_enter,w
 15560  0846  00F7               	movwf	m_mem_cpy_len@len
 15561  0847  31BD  25A3         	fcall	_m_mem_cpy_len
 15562                           
 15563                           ;ui_key.c: 211: menu=0x40;
 15564  0849  3040               	movlw	64
 15565  084A  0020               	movlb	0	; select bank0
 15566  084B  00AE               	movwf	??_ui_key_process_enter
 15567  084C  082E               	movf	??_ui_key_process_enter,w
 15568  084D  0021               	movlb	1	; select bank1
 15569  084E  00C3               	movwf	_menu^(0+128)
 15570                           
 15571                           ;ui_key.c: 212: break;
 15572  084F  0008               	return
 15573  0850                     l14727:	
 15574                           ;ui_key.c: 213: case 168:
 15575                           
 15576                           
 15577                           ;ui_key.c: 214: calibLocation=0;
 15578  0850  0021               	movlb	1	; select bank1
 15579  0851  01C5               	clrf	_calibLocation^(0+128)
 15580                           
 15581                           ;ui_key.c: 215: *((uint16_t*)uiAdjbuf) = Main_flowCalibrationTable.flowCalibrationArr[ca
      +                          libLocation].rtflowValue;
 15582  0852  0845               	movf	_calibLocation^(0+128),w
 15583  0853  0020               	movlb	0	; select bank0
 15584  0854  00AE               	movwf	??_ui_key_process_enter
 15585  0855  01AF               	clrf	??_ui_key_process_enter+1
 15586  0856  35AE               	lslf	??_ui_key_process_enter,f
 15587  0857  0DAF               	rlf	??_ui_key_process_enter+1,f
 15588  0858  35AE               	lslf	??_ui_key_process_enter,f
 15589  0859  0DAF               	rlf	??_ui_key_process_enter+1,f
 15590  085A  082E               	movf	??_ui_key_process_enter,w
 15591  085B  3E02               	addlw	2
 15592  085C  00B0               	movwf	??_ui_key_process_enter+2
 15593  085D  3000               	movlw	0
 15594  085E  3D2F               	addwfc	??_ui_key_process_enter+1,w
 15595  085F  00B1               	movwf	??_ui_key_process_enter+3
 15596  0860  3074               	movlw	116
 15597  0861  00B2               	movwf	??_ui_key_process_enter+4
 15598  0862  3023               	movlw	35
 15599  0863  00B3               	movwf	??_ui_key_process_enter+5
 15600  0864  0830               	movf	??_ui_key_process_enter+2,w
 15601  0865  0732               	addwf	??_ui_key_process_enter+4,w
 15602  0866  0086               	movwf	6
 15603  0867  0831               	movf	??_ui_key_process_enter+3,w
 15604  0868  3D33               	addwfc	??_ui_key_process_enter+5,w
 15605  0869  0087               	movwf	7
 15606  086A  3061               	movlw	low (_uiAdjbuf| (0+256))
 15607  086B  0084               	movwf	4
 15608  086C  3001               	movlw	1	; select bank2/3
 15609  086D  0085               	movwf	5
 15610  086E  3F40               	moviw [0]fsr1
 15611  086F  3F80               	movwi [0]fsr0
 15612  0870  3F41               	moviw [1]fsr1
 15613  0871  3F81               	movwi [1]fsr0
 15614                           
 15615                           ;ui_key.c: 216: menu=0x50;break;
 15616  0872  3050               	movlw	80
 15617  0873  00AE               	movwf	??_ui_key_process_enter
 15618  0874  082E               	movf	??_ui_key_process_enter,w
 15619  0875  0021               	movlb	1	; select bank1
 15620  0876  00C3               	movwf	_menu^(0+128)
 15621  0877  0008               	return
 15622  0878                     l14733:	
 15623                           ;ui_key.c: 217: case 6:
 15624                           
 15625                           
 15626                           ;ui_key.c: 218: *(int16_t*)uiAdjbuf=(uint16_t)(mainSystemData.deviceID);
 15627  0878  3061               	movlw	low (_uiAdjbuf| (0+256))
 15628  0879  0086               	movwf	6
 15629  087A  3001               	movlw	1	; select bank2/3
 15630  087B  0087               	movwf	7
 15631  087C  0024               	movlb	4	; select bank4
 15632  087D  0820               	movf	_mainSystemData^(0+512),w
 15633  087E  3FC0               	movwi [0]fsr1
 15634  087F  0821               	movf	(_mainSystemData+1)^(0+512),w
 15635  0880  3FC1               	movwi [1]fsr1
 15636                           
 15637                           ;ui_key.c: 219: menu=0x60;
 15638  0881  3060               	movlw	96
 15639  0882  0020               	movlb	0	; select bank0
 15640  0883  00AE               	movwf	??_ui_key_process_enter
 15641  0884  082E               	movf	??_ui_key_process_enter,w
 15642  0885  0021               	movlb	1	; select bank1
 15643  0886  00C3               	movwf	_menu^(0+128)
 15644                           
 15645                           ;ui_key.c: 220: break;
 15646  0887  0008               	return
 15647  0888                     l14737:	
 15648                           ;ui_key.c: 221: case 133:
 15649                           
 15650                           
 15651                           ;ui_key.c: 222: uiAdjbuf[0]=mainSystemData.smallFlowNotCare;
 15652  0888  0024               	movlb	4	; select bank4
 15653  0889  0859               	movf	(_mainSystemData^(0+512)+57),w
 15654  088A  0020               	movlb	0	; select bank0
 15655  088B  00AE               	movwf	??_ui_key_process_enter
 15656  088C  082E               	movf	??_ui_key_process_enter,w
 15657  088D  0022               	movlb	2	; select bank2
 15658  088E  00E1               	movwf	_uiAdjbuf^(0+256)
 15659                           
 15660                           ;ui_key.c: 223: menu=0x70;
 15661  088F  3070               	movlw	112
 15662  0890  0020               	movlb	0	; select bank0
 15663  0891  00AE               	movwf	??_ui_key_process_enter
 15664  0892  082E               	movf	??_ui_key_process_enter,w
 15665  0893  0021               	movlb	1	; select bank1
 15666  0894  00C3               	movwf	_menu^(0+128)
 15667                           
 15668                           ;ui_key.c: 224: break;
 15669  0895  0008               	return
 15670  0896                     l14739:	
 15671                           ;ui_key.c: 225: case 9:
 15672                           
 15673                           
 15674                           ;ui_key.c: 226: *(uint16_t*)uiAdjbuf=mainSystemData.price;
 15675  0896  3061               	movlw	low (_uiAdjbuf| (0+256))
 15676  0897  0086               	movwf	6
 15677  0898  3001               	movlw	1	; select bank2/3
 15678  0899  0087               	movwf	7
 15679  089A  0024               	movlb	4	; select bank4
 15680  089B  0832               	movf	(_mainSystemData^(0+512)+18),w
 15681  089C  3FC0               	movwi [0]fsr1
 15682  089D  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 15683  089E  3FC1               	movwi [1]fsr1
 15684                           
 15685                           ;ui_key.c: 227: menu=0x80;
 15686  089F  3080               	movlw	128
 15687  08A0  0020               	movlb	0	; select bank0
 15688  08A1  00AE               	movwf	??_ui_key_process_enter
 15689  08A2  082E               	movf	??_ui_key_process_enter,w
 15690  08A3  0021               	movlb	1	; select bank1
 15691  08A4  00C3               	movwf	_menu^(0+128)
 15692                           
 15693                           ;ui_key.c: 228: break;
 15694  08A5  0008               	return
 15695  08A6                     l14743:	
 15696                           ;ui_key.c: 229: case 8:
 15697                           
 15698                           
 15699                           ;ui_key.c: 231: *(int16_t*)uiAdjbuf=(mainSystemData.transferMoneyLimit/100);
 15700  08A6  3000               	movlw	0
 15701  08A7  0020               	movlb	0	; select bank0
 15702  08A8  00A3               	movwf	___aldiv@divisor+3
 15703  08A9  3000               	movlw	0
 15704  08AA  00A2               	movwf	___aldiv@divisor+2
 15705  08AB  3000               	movlw	0
 15706  08AC  00A1               	movwf	___aldiv@divisor+1
 15707  08AD  3064               	movlw	100
 15708  08AE  00A0               	movwf	___aldiv@divisor
 15709  08AF  3024               	movlw	36
 15710  08B0  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 15711  08B1  0086               	movwf	6
 15712  08B2  3002               	movlw	2	; select bank4/5
 15713  08B3  0087               	movwf	7
 15714  08B4  3F40               	moviw [0]fsr1
 15715  08B5  00A4               	movwf	___aldiv@dividend
 15716  08B6  3F41               	moviw [1]fsr1
 15717  08B7  00A5               	movwf	___aldiv@dividend+1
 15718  08B8  3F42               	moviw [2]fsr1
 15719  08B9  00A6               	movwf	___aldiv@dividend+2
 15720  08BA  3F43               	moviw [3]fsr1
 15721  08BB  00A7               	movwf	___aldiv@dividend+3
 15722  08BC  31A0  2013         	fcall	___aldiv
 15723  08BE  3061               	movlw	low (_uiAdjbuf| (0+256))
 15724  08BF  0086               	movwf	6
 15725  08C0  3001               	movlw	1	; select bank2/3
 15726  08C1  0087               	movwf	7
 15727  08C2  0020               	movlb	0	; select bank0
 15728  08C3  0820               	movf	?___aldiv,w
 15729  08C4  3FC0               	movwi [0]fsr1
 15730  08C5  0821               	movf	?___aldiv+1,w
 15731  08C6  3FC1               	movwi [1]fsr1
 15732                           
 15733                           ;ui_key.c: 232: menu=0x90;
 15734  08C7  3090               	movlw	144
 15735  08C8  00AE               	movwf	??_ui_key_process_enter
 15736  08C9  082E               	movf	??_ui_key_process_enter,w
 15737  08CA  0021               	movlb	1	; select bank1
 15738  08CB  00C3               	movwf	_menu^(0+128)
 15739                           
 15740                           ;ui_key.c: 233: break;
 15741  08CC  0008               	return
 15742  08CD                     l14747:	
 15743                           ;ui_key.c: 234: case 178:
 15744                           
 15745                           
 15746                           ;ui_key.c: 235: uiAdjbuf[0]=mainSystemData.shortID;
 15747  08CD  0024               	movlb	4	; select bank4
 15748  08CE  0829               	movf	(_mainSystemData^(0+512)+9),w
 15749  08CF  0020               	movlb	0	; select bank0
 15750  08D0  00AE               	movwf	??_ui_key_process_enter
 15751  08D1  082E               	movf	??_ui_key_process_enter,w
 15752  08D2  0022               	movlb	2	; select bank2
 15753  08D3  00E1               	movwf	_uiAdjbuf^(0+256)
 15754                           
 15755                           ;ui_key.c: 236: menu=0xa0;
 15756  08D4  30A0               	movlw	160
 15757  08D5  0020               	movlb	0	; select bank0
 15758  08D6  00AE               	movwf	??_ui_key_process_enter
 15759  08D7  082E               	movf	??_ui_key_process_enter,w
 15760  08D8  0021               	movlb	1	; select bank1
 15761  08D9  00C3               	movwf	_menu^(0+128)
 15762                           
 15763                           ;ui_key.c: 237: break;
 15764  08DA  0008               	return
 15765  08DB                     l14749:	
 15766                           ;ui_key.c: 238: case 7:
 15767                           
 15768                           
 15769                           ;ui_key.c: 239: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 15770  08DB  3064               	movlw	100
 15771  08DC  00F3               	movwf	___awdiv@divisor
 15772  08DD  3000               	movlw	0
 15773  08DE  00F4               	movwf	___awdiv@divisor+1
 15774  08DF  0024               	movlb	4	; select bank4
 15775  08E0  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 15776  08E1  00F6               	movwf	___awdiv@dividend+1
 15777  08E2  0834               	movf	(_mainSystemData^(0+512)+20),w
 15778  08E3  00F5               	movwf	___awdiv@dividend
 15779  08E4  31A9  21F3         	fcall	___awdiv
 15780  08E6  3061               	movlw	low (_uiAdjbuf| (0+256))
 15781  08E7  0086               	movwf	6
 15782  08E8  3001               	movlw	1	; select bank2/3
 15783  08E9  0087               	movwf	7
 15784  08EA  0873               	movf	?___awdiv,w
 15785  08EB  3FC0               	movwi [0]fsr1
 15786  08EC  0874               	movf	?___awdiv+1,w
 15787  08ED  3FC1               	movwi [1]fsr1
 15788                           
 15789                           ;ui_key.c: 240: menu=0xb0;
 15790  08EE  30B0               	movlw	176
 15791  08EF  0020               	movlb	0	; select bank0
 15792  08F0  00AE               	movwf	??_ui_key_process_enter
 15793  08F1  082E               	movf	??_ui_key_process_enter,w
 15794  08F2  0021               	movlb	1	; select bank1
 15795  08F3  00C3               	movwf	_menu^(0+128)
 15796                           
 15797                           ;ui_key.c: 241: break;
 15798  08F4  0008               	return
 15799  08F5                     l14753:	
 15800                           ;ui_key.c: 244: case 100:
 15801                           
 15802                           
 15803                           ;ui_key.c: 245: menu=0xc0;break;
 15804  08F5  30C0               	movlw	192
 15805  08F6  0020               	movlb	0	; select bank0
 15806  08F7  00AE               	movwf	??_ui_key_process_enter
 15807  08F8  082E               	movf	??_ui_key_process_enter,w
 15808  08F9  0021               	movlb	1	; select bank1
 15809  08FA  00C3               	movwf	_menu^(0+128)
 15810  08FB  0008               	return
 15811  08FC                     l14755:	
 15812                           ;ui_key.c: 249: case 60:
 15813                           
 15814                           
 15815                           ;ui_key.c: 250: calibLocation=0;
 15816  08FC  0021               	movlb	1	; select bank1
 15817  08FD  01C5               	clrf	_calibLocation^(0+128)
 15818                           
 15819                           ;ui_key.c: 251: *((int16_t*)(uiAdjbuf))=flow;
 15820  08FE  3061               	movlw	low (_uiAdjbuf| (0+256))
 15821  08FF  0086               	movwf	6
 15822  0900  3001               	movlw	1	; select bank2/3
 15823  0901  0087               	movwf	7
 15824  0902  083C               	movf	_flow^(0+128),w	;volatile
 15825  0903  3FC0               	movwi [0]fsr1
 15826  0904  083D               	movf	(_flow+1)^(0+128),w	;volatile
 15827  0905  3FC1               	movwi [1]fsr1
 15828                           
 15829                           ;ui_key.c: 252: menu=0xe0;break;
 15830  0906  30E0               	movlw	224
 15831  0907  0020               	movlb	0	; select bank0
 15832  0908  00AE               	movwf	??_ui_key_process_enter
 15833  0909  082E               	movf	??_ui_key_process_enter,w
 15834  090A  0021               	movlb	1	; select bank1
 15835  090B  00C3               	movwf	_menu^(0+128)
 15836  090C  0008               	return
 15837  090D                     l14761:	
 15838                           ;ui_key.c: 255: case 136:
 15839                           
 15840                           
 15841                           ;ui_key.c: 256: *((int16_t*)(uiAdjbuf))=(uint16_t)(mainSystemData.imdFlowUnit);
 15842  090D  0024               	movlb	4	; select bank4
 15843  090E  085C               	movf	(_mainSystemData^(0+512)+60),w
 15844  090F  0020               	movlb	0	; select bank0
 15845  0910  00AE               	movwf	??_ui_key_process_enter
 15846  0911  01AF               	clrf	??_ui_key_process_enter+1
 15847  0912  3061               	movlw	low (_uiAdjbuf| (0+256))
 15848  0913  0086               	movwf	6
 15849  0914  3001               	movlw	1	; select bank2/3
 15850  0915  0087               	movwf	7
 15851  0916  082E               	movf	??_ui_key_process_enter,w
 15852  0917  3FC0               	movwi [0]fsr1
 15853  0918  082F               	movf	??_ui_key_process_enter+1,w
 15854  0919  3FC1               	movwi [1]fsr1
 15855                           
 15856                           ;ui_key.c: 257: menu=0xf1;
 15857  091A  30F1               	movlw	241
 15858  091B  00AE               	movwf	??_ui_key_process_enter
 15859  091C  082E               	movf	??_ui_key_process_enter,w
 15860  091D  0021               	movlb	1	; select bank1
 15861  091E  00C3               	movwf	_menu^(0+128)
 15862                           
 15863                           ;ui_key.c: 261: }
 15864                           
 15865                           ;ui_key.c: 260: default:break;
 15866                           
 15867                           ;ui_key.c: 258: break;
 15868  091F  0008               	return
 15869  0920                     l14767:	
 15870                           
 15871                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15872                           ; Switch size 1, requested type "space"
 15873                           ; Number of cases is 1, Range of values is 0 to 0
 15874                           ; switch strategies available:
 15875                           ; Name         Instructions Cycles
 15876                           ; simple_byte            4     3 (average)
 15877                           ; direct_byte            8     6 (fixed)
 15878                           ; jumptable            260     6 (fixed)
 15879                           ;	Chosen strategy is simple_byte
 15880  0920  0022               	movlb	2	; select bank2
 15881  0921  082B               	movf	(_password+1)^(0+256),w
 15882  0922  3A00               	xorlw	0	; case 0
 15883  0923  1903               	skipnz
 15884  0924  2926               	goto	l17353
 15885  0925  294F               	goto	l665
 15886  0926                     l17353:	
 15887                           
 15888                           ; Switch size 1, requested type "space"
 15889                           ; Number of cases is 13, Range of values is 6 to 178
 15890                           ; switch strategies available:
 15891                           ; Name         Instructions Cycles
 15892                           ; simple_byte           40    21 (average)
 15893                           ; jumptable            263     9 (fixed)
 15894                           ;	Chosen strategy is simple_byte
 15895  0926  082A               	movf	_password^(0+256),w
 15896  0927  3A06               	xorlw	6	; case 6
 15897  0928  1903               	skipnz
 15898  0929  2878               	goto	l14733
 15899  092A  3A01               	xorlw	1	; case 7
 15900  092B  1903               	skipnz
 15901  092C  28DB               	goto	l14749
 15902  092D  3A0F               	xorlw	15	; case 8
 15903  092E  1903               	skipnz
 15904  092F  28A6               	goto	l14743
 15905  0930  3A01               	xorlw	1	; case 9
 15906  0931  1903               	skipnz
 15907  0932  2896               	goto	l14739
 15908  0933  3A35               	xorlw	53	; case 60
 15909  0934  1903               	skipnz
 15910  0935  28FC               	goto	l14755
 15911  0936  3A58               	xorlw	88	; case 100
 15912  0937  1903               	skipnz
 15913  0938  28F5               	goto	l14753
 15914  0939  3A03               	xorlw	3	; case 103
 15915  093A  1903               	skipnz
 15916  093B  2831               	goto	l14719
 15917  093C  3A0C               	xorlw	12	; case 107
 15918  093D  1903               	skipnz
 15919  093E  2828               	goto	l14715
 15920  093F  3A06               	xorlw	6	; case 109
 15921  0940  1903               	skipnz
 15922  0941  283A               	goto	l14723
 15923  0942  3AE8               	xorlw	232	; case 133
 15924  0943  1903               	skipnz
 15925  0944  2888               	goto	l14737
 15926  0945  3A0D               	xorlw	13	; case 136
 15927  0946  1903               	skipnz
 15928  0947  290D               	goto	l14761
 15929  0948  3A20               	xorlw	32	; case 168
 15930  0949  1903               	skipnz
 15931  094A  2850               	goto	l14727
 15932  094B  3A1A               	xorlw	26	; case 178
 15933  094C  1903               	skipnz
 15934  094D  28CD               	goto	l14747
 15935  094E  294F               	goto	l665
 15936  094F                     l665:	
 15937  094F  0008               	return
 15938  0950                     __end_of_ui_key_process_enter:	
 15939                           
 15940                           	psect	text31
 15941  341E                     __ptext31:	
 15942 ;; *************** function _ui_key_waite_up *****************
 15943 ;; Defined at:
 15944 ;;		line 15 in file "src/api/ui_key.c"
 15945 ;; Parameters:    Size  Location     Type
 15946 ;;		None
 15947 ;; Auto vars:     Size  Location     Type
 15948 ;;  now             2    2[BANK0 ] unsigned int 
 15949 ;; Return value:  Size  Location     Type
 15950 ;;                  2    0[BANK0 ] unsigned int 
 15951 ;; Registers used:
 15952 ;;		wreg, status,2, status,0, pclath, cstack
 15953 ;; Tracked objects:
 15954 ;;		On entry : 0/0
 15955 ;;		On exit  : 0/0
 15956 ;;		Unchanged: 0/0
 15957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15959 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15961 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 15962 ;;Total ram usage:        4 bytes
 15963 ;; Hardware stack levels used:    1
 15964 ;; Hardware stack levels required when called:    4
 15965 ;; This function calls:
 15966 ;;		_get_globle_ticker
 15967 ;;		_key_scan_call
 15968 ;;		_set_globle_ticker
 15969 ;; This function is called by:
 15970 ;;		_ui_key_process_enter
 15971 ;;		_ui_key_process
 15972 ;; This function uses a non-reentrant model
 15973 ;;
 15974                           
 15975                           
 15976                           ;psect for function _ui_key_waite_up
 15977  341E                     _ui_key_waite_up:	
 15978                           
 15979                           ;ui_key.c: 17: uint16_t now=0;
 15980                           
 15981                           ;incstack = 0
 15982                           ; Regs used in _ui_key_waite_up: [wreg+status,2+status,0+pclath+cstack]
 15983  341E  0020               	movlb	0	; select bank0
 15984  341F  01A2               	clrf	ui_key_waite_up@now
 15985  3420  01A3               	clrf	ui_key_waite_up@now+1
 15986                           
 15987                           ;ui_key.c: 20: key_scan_call();
 15988  3421  31B0  200D  31B4   	fcall	_key_scan_call
 15989                           
 15990                           ;ui_key.c: 21: if (KeyValue == 0)return 0;
 15991  3424  0021               	movlb	1	; select bank1
 15992  3425  0841               	movf	_KeyValue^(0+128),w
 15993  3426  1D03               	btfss	3,2
 15994  3427  2C2C               	goto	l14131
 15995  3428  0020               	movlb	0	; select bank0
 15996  3429  01A0               	clrf	?_ui_key_waite_up
 15997  342A  01A1               	clrf	?_ui_key_waite_up+1
 15998  342B  0008               	return
 15999  342C                     l14131:	
 16000                           
 16001                           ;ui_key.c: 22: set_globle_ticker(0);
 16002  342C  3000               	movlw	0
 16003  342D  00F3               	movwf	set_globle_ticker@tk
 16004  342E  00F4               	movwf	set_globle_ticker@tk+1
 16005  342F  31BB  2313  31B4   	fcall	_set_globle_ticker
 16006  3432                     l598:	
 16007                           ;ui_key.c: 23: do {
 16008                           
 16009                           
 16010                           ;ui_key.c: 24: key_scan_call();
 16011  3432  31B0  200D  31B4   	fcall	_key_scan_call
 16012                           
 16013                           ;ui_key.c: 25: now = get_globle_ticker();
 16014  3435  31BB  2371  31B4   	fcall	_get_globle_ticker
 16015  3438  0874               	movf	?_get_globle_ticker+1,w
 16016  3439  0020               	movlb	0	; select bank0
 16017  343A  00A3               	movwf	ui_key_waite_up@now+1
 16018  343B  0873               	movf	?_get_globle_ticker,w
 16019  343C  00A2               	movwf	ui_key_waite_up@now
 16020                           
 16021                           ;ui_key.c: 26: if (KeyValue == 0)break;
 16022  343D  0021               	movlb	1	; select bank1
 16023  343E  0841               	movf	_KeyValue^(0+128),w
 16024  343F  1903               	btfsc	3,2
 16025  3440  2C49               	goto	l14143
 16026                           
 16027                           ;ui_key.c: 27: if (now > 2000)break;
 16028  3441  3007               	movlw	7
 16029  3442  0020               	movlb	0	; select bank0
 16030  3443  0223               	subwf	ui_key_waite_up@now+1,w
 16031  3444  30D1               	movlw	209
 16032  3445  1903               	skipnz
 16033  3446  0222               	subwf	ui_key_waite_up@now,w
 16034  3447  1C03               	skipc
 16035  3448  2C32               	goto	l598
 16036  3449                     l14143:	
 16037                           ;ui_key.c: 28: } while (1);
 16038                           
 16039                           
 16040                           ;ui_key.c: 29: return (uint16_t) (now );
 16041  3449  0020               	movlb	0	; select bank0
 16042  344A  0823               	movf	ui_key_waite_up@now+1,w
 16043  344B  00A1               	movwf	?_ui_key_waite_up+1
 16044  344C  0822               	movf	ui_key_waite_up@now,w
 16045  344D  00A0               	movwf	?_ui_key_waite_up
 16046  344E  0008               	return
 16047  344F                     __end_of_ui_key_waite_up:	
 16048                           
 16049                           	psect	text32
 16050  3B13                     __ptext32:	
 16051 ;; *************** function _set_globle_ticker *****************
 16052 ;; Defined at:
 16053 ;;		line 18 in file "src/driver/timer.c"
 16054 ;; Parameters:    Size  Location     Type
 16055 ;;  tk              2    3[COMMON] unsigned int 
 16056 ;; Auto vars:     Size  Location     Type
 16057 ;;		None
 16058 ;; Return value:  Size  Location     Type
 16059 ;;                  1    wreg      void 
 16060 ;; Registers used:
 16061 ;;		wreg
 16062 ;; Tracked objects:
 16063 ;;		On entry : 0/0
 16064 ;;		On exit  : 0/0
 16065 ;;		Unchanged: 0/0
 16066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16067 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16070 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16071 ;;Total ram usage:        2 bytes
 16072 ;; Hardware stack levels used:    1
 16073 ;; Hardware stack levels required when called:    2
 16074 ;; This function calls:
 16075 ;;		Nothing
 16076 ;; This function is called by:
 16077 ;;		_ui_key_waite_up
 16078 ;;		_ui_key_waite_up_ex
 16079 ;;		_key_process_up_down_variable_speed_ex
 16080 ;; This function uses a non-reentrant model
 16081 ;;
 16082                           
 16083                           
 16084                           ;psect for function _set_globle_ticker
 16085  3B13                     _set_globle_ticker:	
 16086                           
 16087                           ;incstack = 0
 16088                           ; Regs used in _set_globle_ticker: [wreg]
 16089                           ;timer.c: 20: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 16090  3B13  130B               	bcf	11,6	;volatile
 16091  3B14  138B               	bcf	11,7	;volatile
 16092                           
 16093                           ;timer.c: 21: globlTickerms=tk;
 16094  3B15  0874               	movf	set_globle_ticker@tk+1,w
 16095  3B16  0022               	movlb	2	; select bank2
 16096  3B17  00B1               	movwf	(_globlTickerms+1)^(0+256)
 16097  3B18  0873               	movf	set_globle_ticker@tk,w
 16098  3B19  00B0               	movwf	_globlTickerms^(0+256)
 16099                           
 16100                           ;timer.c: 22: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 16101  3B1A  178B               	bsf	11,7	;volatile
 16102  3B1B  170B               	bsf	11,6	;volatile
 16103  3B1C  0008               	return
 16104  3B1D                     __end_of_set_globle_ticker:	
 16105                           
 16106                           	psect	text33
 16107  3B71                     __ptext33:	
 16108 ;; *************** function _get_globle_ticker *****************
 16109 ;; Defined at:
 16110 ;;		line 24 in file "src/driver/timer.c"
 16111 ;; Parameters:    Size  Location     Type
 16112 ;;		None
 16113 ;; Auto vars:     Size  Location     Type
 16114 ;;  ret             2    5[COMMON] unsigned int 
 16115 ;; Return value:  Size  Location     Type
 16116 ;;                  2    3[COMMON] unsigned int 
 16117 ;; Registers used:
 16118 ;;		wreg
 16119 ;; Tracked objects:
 16120 ;;		On entry : 0/0
 16121 ;;		On exit  : 0/0
 16122 ;;		Unchanged: 0/0
 16123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16124 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16125 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16127 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16128 ;;Total ram usage:        4 bytes
 16129 ;; Hardware stack levels used:    1
 16130 ;; Hardware stack levels required when called:    2
 16131 ;; This function calls:
 16132 ;;		Nothing
 16133 ;; This function is called by:
 16134 ;;		_ui_key_waite_up
 16135 ;;		_ui_key_waite_up_ex
 16136 ;;		_key_process_up_down_variable_speed_ex
 16137 ;; This function uses a non-reentrant model
 16138 ;;
 16139                           
 16140                           
 16141                           ;psect for function _get_globle_ticker
 16142  3B71                     _get_globle_ticker:	
 16143                           
 16144                           ;incstack = 0
 16145                           ; Regs used in _get_globle_ticker: [wreg]
 16146                           ;timer.c: 26: uint16_t ret;
 16147                           ;timer.c: 27: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 16148  3B71  130B               	bcf	11,6	;volatile
 16149  3B72  138B               	bcf	11,7	;volatile
 16150                           
 16151                           ;timer.c: 28: ret=globlTickerms;
 16152  3B73  0022               	movlb	2	; select bank2
 16153  3B74  0831               	movf	(_globlTickerms+1)^(0+256),w
 16154  3B75  00F6               	movwf	get_globle_ticker@ret+1
 16155  3B76  0830               	movf	_globlTickerms^(0+256),w
 16156  3B77  00F5               	movwf	get_globle_ticker@ret
 16157                           
 16158                           ;timer.c: 29: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 16159  3B78  178B               	bsf	11,7	;volatile
 16160  3B79  170B               	bsf	11,6	;volatile
 16161                           
 16162                           ;timer.c: 30: return ret;
 16163  3B7A  0876               	movf	get_globle_ticker@ret+1,w
 16164  3B7B  00F4               	movwf	?_get_globle_ticker+1
 16165  3B7C  0875               	movf	get_globle_ticker@ret,w
 16166  3B7D  00F3               	movwf	?_get_globle_ticker
 16167  3B7E  0008               	return
 16168  3B7F                     __end_of_get_globle_ticker:	
 16169                           
 16170                           	psect	text34
 16171  23F1                     __ptext34:	
 16172 ;; *************** function _ui_key_process_down *****************
 16173 ;; Defined at:
 16174 ;;		line 98 in file "src/api/ui_key.c"
 16175 ;; Parameters:    Size  Location     Type
 16176 ;;		None
 16177 ;; Auto vars:     Size  Location     Type
 16178 ;;		None
 16179 ;; Return value:  Size  Location     Type
 16180 ;;                  1    wreg      unsigned char 
 16181 ;; Registers used:
 16182 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16183 ;; Tracked objects:
 16184 ;;		On entry : 0/0
 16185 ;;		On exit  : 0/0
 16186 ;;		Unchanged: 0/0
 16187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16190 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16191 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16192 ;;Total ram usage:        1 bytes
 16193 ;; Hardware stack levels used:    1
 16194 ;; Hardware stack levels required when called:    5
 16195 ;; This function calls:
 16196 ;;		_data_api_calibration_table_data_save
 16197 ;;		_data_api_rt_data_save
 16198 ;;		_m_mem_set
 16199 ;; This function is called by:
 16200 ;;		_ui_key_process
 16201 ;; This function uses a non-reentrant model
 16202 ;;
 16203                           
 16204                           
 16205                           ;psect for function _ui_key_process_down
 16206  23F1                     _ui_key_process_down:	
 16207                           
 16208                           ;ui_key.c: 99: switch(menu){
 16209                           
 16210                           ;incstack = 0
 16211                           ; Regs used in _ui_key_process_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16212  23F1  2C7F               	goto	l14673
 16213  23F2                     l14625:	
 16214                           ;ui_key.c: 100: case 0xe0:
 16215                           
 16216                           
 16217                           ;ui_key.c: 101: calibLocation=0;
 16218  23F2  0021               	movlb	1	; select bank1
 16219  23F3  01C5               	clrf	_calibLocation^(0+128)
 16220                           
 16221                           ;ui_key.c: 102: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 16222  23F4  0022               	movlb	2	; select bank2
 16223  23F5  01D7               	clrf	(_flashOpStr^(0+256)+20)
 16224  23F6  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 16225                           
 16226                           ;ui_key.c: 103: *((uint16_t*)(flashOpStr.buf))=0;
 16227  23F7  01C7               	clrf	(_flashOpStr^(0+256)+4)
 16228  23F8  01C8               	clrf	((_flashOpStr+1)^(0+256)+4)
 16229                           
 16230                           ;ui_key.c: 104: data_api_calibration_table_data_save(calibLocation,1);
 16231  23F9  0020               	movlb	0	; select bank0
 16232  23FA  01B3               	clrf	data_api_calibration_table_data_save@single
 16233  23FB  0AB3               	incf	data_api_calibration_table_data_save@single,f
 16234  23FC  0021               	movlb	1	; select bank1
 16235  23FD  0845               	movf	_calibLocation^(0+128),w
 16236  23FE  3192  22FB  31A3   	fcall	_data_api_calibration_table_data_save
 16237                           
 16238                           ;ui_key.c: 106: *((uint16_t*)uiAdjbuf)=0;
 16239  2401  3061               	movlw	low (_uiAdjbuf| (0+256))
 16240  2402  0086               	movwf	6
 16241  2403  3001               	movlw	1	; select bank2/3
 16242  2404  0087               	movwf	7
 16243  2405  3000               	movlw	0
 16244  2406  3FC0               	movwi [0]fsr1
 16245  2407  3FC1               	movwi [1]fsr1
 16246                           
 16247                           ;ui_key.c: 107: break;
 16248  2408  2C8E               	goto	l14675
 16249  2409                     l14633:	
 16250                           ;ui_key.c: 108: case 0x20:
 16251                           
 16252                           
 16253                           ;ui_key.c: 109: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->BalanceMoney))
      +                          ;
 16254  2409  302C               	movlw	44
 16255  240A  0022               	movlb	2	; select bank2
 16256  240B  00C3               	movwf	_flashOpStr^(0+256)
 16257  240C  3000               	movlw	0
 16258  240D  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16259                           
 16260                           ;ui_key.c: 111: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16261  240E  3002               	movlw	2
 16262  240F  0020               	movlb	0	; select bank0
 16263  2410  00C6               	movwf	??_ui_key_process_down
 16264  2411  0846               	movf	??_ui_key_process_down,w
 16265  2412  0022               	movlb	2	; select bank2
 16266  2413  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16267                           
 16268                           ;ui_key.c: 112: flashOpStr.len=4;
 16269  2414  3004               	movlw	4
 16270  2415  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16271  2416  3000               	movlw	0
 16272  2417  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16273                           
 16274                           ;ui_key.c: 113: m_mem_set(flashOpStr.buf,0,4);
 16275  2418  3047               	movlw	low (_flashOpStr+4)
 16276  2419  00F3               	movwf	m_mem_set@buf
 16277  241A  3001               	movlw	high (_flashOpStr+4)
 16278  241B  00F4               	movwf	m_mem_set@buf+1
 16279  241C  01F5               	clrf	m_mem_set@x
 16280  241D  3004               	movlw	4
 16281  241E  0020               	movlb	0	; select bank0
 16282  241F  00C6               	movwf	??_ui_key_process_down
 16283  2420  0846               	movf	??_ui_key_process_down,w
 16284  2421  00F6               	movwf	m_mem_set@len
 16285  2422  31BB  23BC  31A3   	fcall	_m_mem_set
 16286                           
 16287                           ;ui_key.c: 114: break;
 16288  2425  2C8E               	goto	l14675
 16289  2426                     l14641:	
 16290                           ;ui_key.c: 116: case 0x30:
 16291                           
 16292                           
 16293                           ;ui_key.c: 117: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->totalConsumeVo
      +                          lume));
 16294  2426  3030               	movlw	48
 16295  2427  0022               	movlb	2	; select bank2
 16296  2428  00C3               	movwf	_flashOpStr^(0+256)
 16297  2429  3000               	movlw	0
 16298  242A  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16299                           
 16300                           ;ui_key.c: 119: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16301  242B  3002               	movlw	2
 16302  242C  0020               	movlb	0	; select bank0
 16303  242D  00C6               	movwf	??_ui_key_process_down
 16304  242E  0846               	movf	??_ui_key_process_down,w
 16305  242F  0022               	movlb	2	; select bank2
 16306  2430  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16307                           
 16308                           ;ui_key.c: 120: flashOpStr.len=4;
 16309  2431  3004               	movlw	4
 16310  2432  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16311  2433  3000               	movlw	0
 16312  2434  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16313                           
 16314                           ;ui_key.c: 121: m_mem_set(flashOpStr.buf,0,4);
 16315  2435  3047               	movlw	low (_flashOpStr+4)
 16316  2436  00F3               	movwf	m_mem_set@buf
 16317  2437  3001               	movlw	high (_flashOpStr+4)
 16318  2438  00F4               	movwf	m_mem_set@buf+1
 16319  2439  01F5               	clrf	m_mem_set@x
 16320  243A  3004               	movlw	4
 16321  243B  0020               	movlb	0	; select bank0
 16322  243C  00C6               	movwf	??_ui_key_process_down
 16323  243D  0846               	movf	??_ui_key_process_down,w
 16324  243E  00F6               	movwf	m_mem_set@len
 16325  243F  31BB  23BC  31A3   	fcall	_m_mem_set
 16326                           
 16327                           ;ui_key.c: 123: break;
 16328  2442  2C8E               	goto	l14675
 16329  2443                     l14649:	
 16330                           ;ui_key.c: 135: case 0xc0:
 16331                           
 16332                           
 16333                           ;ui_key.c: 137: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->transferMoney)
      +                          );
 16334  2443  300C               	movlw	12
 16335  2444  0022               	movlb	2	; select bank2
 16336  2445  00C3               	movwf	_flashOpStr^(0+256)
 16337  2446  3000               	movlw	0
 16338  2447  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16339                           
 16340                           ;ui_key.c: 138: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16341  2448  3002               	movlw	2
 16342  2449  0020               	movlb	0	; select bank0
 16343  244A  00C6               	movwf	??_ui_key_process_down
 16344  244B  0846               	movf	??_ui_key_process_down,w
 16345  244C  0022               	movlb	2	; select bank2
 16346  244D  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16347                           
 16348                           ;ui_key.c: 139: flashOpStr.len=6;
 16349  244E  3006               	movlw	6
 16350  244F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16351  2450  3000               	movlw	0
 16352  2451  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16353                           
 16354                           ;ui_key.c: 140: m_mem_set(flashOpStr.buf,0,6);
 16355  2452  3047               	movlw	low (_flashOpStr+4)
 16356  2453  00F3               	movwf	m_mem_set@buf
 16357  2454  3001               	movlw	high (_flashOpStr+4)
 16358  2455  00F4               	movwf	m_mem_set@buf+1
 16359  2456  01F5               	clrf	m_mem_set@x
 16360  2457  3006               	movlw	6
 16361  2458  0020               	movlb	0	; select bank0
 16362  2459  00C6               	movwf	??_ui_key_process_down
 16363  245A  0846               	movf	??_ui_key_process_down,w
 16364  245B  00F6               	movwf	m_mem_set@len
 16365  245C  31BB  23BC  31A3   	fcall	_m_mem_set
 16366                           
 16367                           ;ui_key.c: 142: data_api_rt_data_save();
 16368  245F  3198  205D  31A3   	fcall	_data_api_rt_data_save
 16369                           
 16370                           ;ui_key.c: 143: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->cardID));
 16371  2462  3004               	movlw	4
 16372  2463  0022               	movlb	2	; select bank2
 16373  2464  00C3               	movwf	_flashOpStr^(0+256)
 16374  2465  3000               	movlw	0
 16375  2466  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16376                           
 16377                           ;ui_key.c: 144: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16378  2467  3002               	movlw	2
 16379  2468  0020               	movlb	0	; select bank0
 16380  2469  00C6               	movwf	??_ui_key_process_down
 16381  246A  0846               	movf	??_ui_key_process_down,w
 16382  246B  0022               	movlb	2	; select bank2
 16383  246C  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16384                           
 16385                           ;ui_key.c: 145: flashOpStr.len=4;
 16386  246D  3004               	movlw	4
 16387  246E  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16388  246F  3000               	movlw	0
 16389  2470  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16390                           
 16391                           ;ui_key.c: 146: *((uint32_t*)(flashOpStr.buf))=0;
 16392  2471  3000               	movlw	0
 16393  2472  00CA               	movwf	((_flashOpStr+3)^(0+256)+4)
 16394  2473  3000               	movlw	0
 16395  2474  00C9               	movwf	((_flashOpStr+2)^(0+256)+4)
 16396  2475  3000               	movlw	0
 16397  2476  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16398  2477  3000               	movlw	0
 16399  2478  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16400                           
 16401                           ;ui_key.c: 147: data_api_rt_data_save();
 16402  2479  3198  205D  31A3   	fcall	_data_api_rt_data_save
 16403                           
 16404                           ;ui_key.c: 148: break;
 16405  247C  2C8E               	goto	l14675
 16406  247D                     l14667:	
 16407                           ;ui_key.c: 149: default:
 16408                           
 16409                           
 16410                           ;ui_key.c: 150: return 0;
 16411  247D  3000               	movlw	0
 16412  247E  0008               	return
 16413  247F                     l14673:	
 16414                           ;ui_key.c: 151: }
 16415                           
 16416  247F  0021               	movlb	1	; select bank1
 16417  2480  0843               	movf	_menu^(0+128),w
 16418                           
 16419                           ; Switch size 1, requested type "space"
 16420                           ; Number of cases is 4, Range of values is 32 to 224
 16421                           ; switch strategies available:
 16422                           ; Name         Instructions Cycles
 16423                           ; simple_byte           13     7 (average)
 16424                           ; jumptable            263     9 (fixed)
 16425                           ;	Chosen strategy is simple_byte
 16426  2481  3A20               	xorlw	32	; case 32
 16427  2482  1903               	skipnz
 16428  2483  2C09               	goto	l14633
 16429  2484  3A10               	xorlw	16	; case 48
 16430  2485  1903               	skipnz
 16431  2486  2C26               	goto	l14641
 16432  2487  3AF0               	xorlw	240	; case 192
 16433  2488  1903               	skipnz
 16434  2489  2C43               	goto	l14649
 16435  248A  3A20               	xorlw	32	; case 224
 16436  248B  1903               	skipnz
 16437  248C  2BF2               	goto	l14625
 16438  248D  2C7D               	goto	l14667
 16439  248E                     l14675:	
 16440                           
 16441                           ;ui_key.c: 152: return 0;
 16442  248E  3000               	movlw	0
 16443  248F  0008               	return
 16444  2490                     __end_of_ui_key_process_down:	
 16445                           
 16446                           	psect	text35
 16447  11D0                     __ptext35:	
 16448 ;; *************** function _ui_key_process_cancel *****************
 16449 ;; Defined at:
 16450 ;;		line 264 in file "src/api/ui_key.c"
 16451 ;; Parameters:    Size  Location     Type
 16452 ;;		None
 16453 ;; Auto vars:     Size  Location     Type
 16454 ;;  ret             1   48[BANK0 ] unsigned char 
 16455 ;; Return value:  Size  Location     Type
 16456 ;;                  1    wreg      void 
 16457 ;; Registers used:
 16458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16459 ;; Tracked objects:
 16460 ;;		On entry : 0/0
 16461 ;;		On exit  : 0/0
 16462 ;;		Unchanged: 0/0
 16463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16465 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16466 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 16467 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 16468 ;;Total ram usage:       11 bytes
 16469 ;; Hardware stack levels used:    1
 16470 ;; Hardware stack levels required when called:    5
 16471 ;; This function calls:
 16472 ;;		___awdiv
 16473 ;;		___wmul
 16474 ;;		_data_api_calibration_table_data_save
 16475 ;; This function is called by:
 16476 ;;		_ui_key_process
 16477 ;; This function uses a non-reentrant model
 16478 ;;
 16479                           
 16480                           
 16481                           ;psect for function _ui_key_process_cancel
 16482  11D0                     _ui_key_process_cancel:	
 16483                           
 16484                           ;ui_key.c: 266: uint8_t ret=0;
 16485                           
 16486                           ;incstack = 0
 16487                           ; Regs used in _ui_key_process_cancel: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16488  11D0  0020               	movlb	0	; select bank0
 16489  11D1  01D0               	clrf	ui_key_process_cancel@ret
 16490                           
 16491                           ;ui_key.c: 267: if(menu<3){
 16492  11D2  3003               	movlw	3
 16493  11D3  0021               	movlb	1	; select bank1
 16494  11D4  0243               	subwf	_menu^(0+128),w
 16495  11D5  1803               	skipnc
 16496  11D6  2AEF               	goto	l14839
 16497                           
 16498                           ;ui_key.c: 268: uiAdjbuf[0]=0;
 16499  11D7  0022               	movlb	2	; select bank2
 16500  11D8  01E1               	clrf	_uiAdjbuf^(0+256)
 16501                           
 16502                           ;ui_key.c: 269: uiAdjbuf[1]=0;
 16503  11D9  01E2               	clrf	(_uiAdjbuf^(0+256)+1)
 16504                           
 16505                           ;ui_key.c: 270: bkupMenu=menu;
 16506  11DA  0021               	movlb	1	; select bank1
 16507  11DB  0843               	movf	_menu^(0+128),w
 16508  11DC  0020               	movlb	0	; select bank0
 16509  11DD  00C6               	movwf	??_ui_key_process_cancel
 16510  11DE  0846               	movf	??_ui_key_process_cancel,w
 16511  11DF  0021               	movlb	1	; select bank1
 16512  11E0  00C2               	movwf	_bkupMenu^(0+128)
 16513                           
 16514                           ;ui_key.c: 271: password=0x00;
 16515  11E1  0022               	movlb	2	; select bank2
 16516  11E2  01AA               	clrf	_password^(0+256)
 16517  11E3  01AB               	clrf	(_password+1)^(0+256)
 16518                           
 16519                           ;ui_key.c: 272: menu=0x10;
 16520  11E4  3010               	movlw	16
 16521  11E5  0020               	movlb	0	; select bank0
 16522  11E6  00C6               	movwf	??_ui_key_process_cancel
 16523  11E7  0846               	movf	??_ui_key_process_cancel,w
 16524  11E8  0021               	movlb	1	; select bank1
 16525  11E9  00C3               	movwf	_menu^(0+128)
 16526                           
 16527                           ;ui_key.c: 273: return;
 16528  11EA  0008               	return
 16529  11EB                     l14785:	
 16530                           ;ui_key.c: 276: case 0x50:
 16531                           
 16532                           ;ui_key.c: 274: }
 16533                           ;ui_key.c: 275: switch(menu){
 16534                           
 16535                           
 16536                           ;ui_key.c: 277: if(*((uint16_t*)uiAdjbuf) != Main_flowCalibrationTable.flowCalibrationAr
      +                          r[calibLocation].rtflowValue){
 16537  11EB  3061               	movlw	low (_uiAdjbuf| (0+256))
 16538  11EC  0086               	movwf	6
 16539  11ED  3001               	movlw	1	; select bank2/3
 16540  11EE  0087               	movwf	7
 16541  11EF  3F40               	moviw [0]fsr1
 16542  11F0  0020               	movlb	0	; select bank0
 16543  11F1  00C6               	movwf	??_ui_key_process_cancel
 16544  11F2  3F41               	moviw [1]fsr1
 16545  11F3  00C7               	movwf	??_ui_key_process_cancel+1
 16546  11F4  0021               	movlb	1	; select bank1
 16547  11F5  0845               	movf	_calibLocation^(0+128),w
 16548  11F6  0020               	movlb	0	; select bank0
 16549  11F7  00C8               	movwf	??_ui_key_process_cancel+2
 16550  11F8  01C9               	clrf	??_ui_key_process_cancel+3
 16551  11F9  35C8               	lslf	??_ui_key_process_cancel+2,f
 16552  11FA  0DC9               	rlf	??_ui_key_process_cancel+3,f
 16553  11FB  35C8               	lslf	??_ui_key_process_cancel+2,f
 16554  11FC  0DC9               	rlf	??_ui_key_process_cancel+3,f
 16555  11FD  0848               	movf	??_ui_key_process_cancel+2,w
 16556  11FE  3E02               	addlw	2
 16557  11FF  00CA               	movwf	??_ui_key_process_cancel+4
 16558  1200  3000               	movlw	0
 16559  1201  3D49               	addwfc	??_ui_key_process_cancel+3,w
 16560  1202  00CB               	movwf	??_ui_key_process_cancel+5
 16561  1203  3074               	movlw	116
 16562  1204  00CC               	movwf	??_ui_key_process_cancel+6
 16563  1205  3023               	movlw	35
 16564  1206  00CD               	movwf	??_ui_key_process_cancel+7
 16565  1207  084A               	movf	??_ui_key_process_cancel+4,w
 16566  1208  074C               	addwf	??_ui_key_process_cancel+6,w
 16567  1209  0086               	movwf	6
 16568  120A  084B               	movf	??_ui_key_process_cancel+5,w
 16569  120B  3D4D               	addwfc	??_ui_key_process_cancel+7,w
 16570  120C  0087               	movwf	7
 16571  120D  3F40               	moviw [0]fsr1
 16572  120E  00CE               	movwf	??_ui_key_process_cancel+8
 16573  120F  3F41               	moviw [1]fsr1
 16574  1210  00CF               	movwf	??_ui_key_process_cancel+9
 16575  1211  0847               	movf	??_ui_key_process_cancel+1,w
 16576  1212  064F               	xorwf	??_ui_key_process_cancel+9,w
 16577  1213  1D03               	skipz
 16578  1214  2A17               	goto	u13485
 16579  1215  0846               	movf	??_ui_key_process_cancel,w
 16580  1216  064E               	xorwf	??_ui_key_process_cancel+8,w
 16581  1217                     u13485:	
 16582  1217  1903               	skipnz
 16583  1218  2A33               	goto	l14797
 16584                           
 16585                           ;ui_key.c: 278: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 16586  1219  0022               	movlb	2	; select bank2
 16587  121A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 16588  121B  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 16589                           
 16590                           ;ui_key.c: 279: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 16591  121C  3061               	movlw	low (_uiAdjbuf| (0+256))
 16592  121D  0086               	movwf	6
 16593  121E  3001               	movlw	1	; select bank2/3
 16594  121F  0087               	movwf	7
 16595  1220  3F40               	moviw [0]fsr1
 16596  1221  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16597  1222  3F41               	moviw [1]fsr1
 16598  1223  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16599                           
 16600                           ;ui_key.c: 280: ret=data_api_calibration_table_data_save(calibLocation,1);
 16601  1224  0020               	movlb	0	; select bank0
 16602  1225  01B3               	clrf	data_api_calibration_table_data_save@single
 16603  1226  0AB3               	incf	data_api_calibration_table_data_save@single,f
 16604  1227  0021               	movlb	1	; select bank1
 16605  1228  0845               	movf	_calibLocation^(0+128),w
 16606  1229  3192  22FB  3191   	fcall	_data_api_calibration_table_data_save
 16607  122C  0020               	movlb	0	; select bank0
 16608  122D  00C6               	movwf	??_ui_key_process_cancel
 16609  122E  0846               	movf	??_ui_key_process_cancel,w
 16610  122F  00D0               	movwf	ui_key_process_cancel@ret
 16611                           
 16612                           ;ui_key.c: 282: if(!ret)break;
 16613  1230  0850               	movf	ui_key_process_cancel@ret,w
 16614  1231  1903               	btfsc	3,2
 16615  1232  0008               	return
 16616  1233                     l14797:	
 16617                           
 16618                           ;ui_key.c: 284: }
 16619                           ;ui_key.c: 285: calibLocation++;
 16620  1233  3001               	movlw	1
 16621  1234  00C6               	movwf	??_ui_key_process_cancel
 16622  1235  0846               	movf	??_ui_key_process_cancel,w
 16623  1236  0021               	movlb	1	; select bank1
 16624  1237  07C5               	addwf	_calibLocation^(0+128),f
 16625                           
 16626                           ;ui_key.c: 286: if(calibLocation>=30)calibLocation=0;
 16627  1238  301E               	movlw	30
 16628  1239  0245               	subwf	_calibLocation^(0+128),w
 16629  123A  1803               	btfsc	3,0
 16630  123B  01C5               	clrf	_calibLocation^(0+128)
 16631                           
 16632                           ;ui_key.c: 287: *(uint16_t*)uiAdjbuf = Main_flowCalibrationTable.flowCalibrationArr[cali
      +                          bLocation].rtflowValue;
 16633  123C  0845               	movf	_calibLocation^(0+128),w
 16634  123D  0020               	movlb	0	; select bank0
 16635  123E  00C6               	movwf	??_ui_key_process_cancel
 16636  123F  01C7               	clrf	??_ui_key_process_cancel+1
 16637  1240  35C6               	lslf	??_ui_key_process_cancel,f
 16638  1241  0DC7               	rlf	??_ui_key_process_cancel+1,f
 16639  1242  35C6               	lslf	??_ui_key_process_cancel,f
 16640  1243  0DC7               	rlf	??_ui_key_process_cancel+1,f
 16641  1244  0846               	movf	??_ui_key_process_cancel,w
 16642  1245  3E02               	addlw	2
 16643  1246  00C8               	movwf	??_ui_key_process_cancel+2
 16644  1247  3000               	movlw	0
 16645  1248  3D47               	addwfc	??_ui_key_process_cancel+1,w
 16646  1249  00C9               	movwf	??_ui_key_process_cancel+3
 16647  124A  3074               	movlw	116
 16648  124B  00CA               	movwf	??_ui_key_process_cancel+4
 16649  124C  3023               	movlw	35
 16650  124D  00CB               	movwf	??_ui_key_process_cancel+5
 16651  124E  0848               	movf	??_ui_key_process_cancel+2,w
 16652  124F  074A               	addwf	??_ui_key_process_cancel+4,w
 16653  1250  0086               	movwf	6
 16654  1251  0849               	movf	??_ui_key_process_cancel+3,w
 16655  1252  3D4B               	addwfc	??_ui_key_process_cancel+5,w
 16656  1253  0087               	movwf	7
 16657  1254  3061               	movlw	low (_uiAdjbuf| (0+256))
 16658  1255  0084               	movwf	4
 16659  1256  3001               	movlw	1	; select bank2/3
 16660  1257  0085               	movwf	5
 16661  1258  3F40               	moviw [0]fsr1
 16662  1259  3F80               	movwi [0]fsr0
 16663  125A  3F41               	moviw [1]fsr1
 16664  125B  3F81               	movwi [1]fsr0
 16665                           
 16666                           ;ui_key.c: 288: break;
 16667  125C  0008               	return
 16668  125D                     l14805:	
 16669                           ;ui_key.c: 289: case 0xb0:
 16670                           
 16671                           
 16672                           ;ui_key.c: 290: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceWarning
      +                          ));
 16673  125D  3014               	movlw	20
 16674  125E  0022               	movlb	2	; select bank2
 16675  125F  00C3               	movwf	_flashOpStr^(0+256)
 16676  1260  3000               	movlw	0
 16677  1261  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16678                           
 16679                           ;ui_key.c: 292: flashOpStr.len=2;
 16680  1262  3002               	movlw	2
 16681  1263  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16682  1264  3000               	movlw	0
 16683  1265  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16684                           
 16685                           ;ui_key.c: 293: __t16=*((uint16_t*)uiAdjbuf);
 16686  1266  3061               	movlw	low (_uiAdjbuf| (0+256))
 16687  1267  0086               	movwf	6
 16688  1268  3001               	movlw	1	; select bank2/3
 16689  1269  0087               	movwf	7
 16690  126A  3F40               	moviw [0]fsr1
 16691  126B  00F8               	movwf	___t16
 16692  126C  3F41               	moviw [1]fsr1
 16693  126D  00F9               	movwf	___t16+1
 16694                           
 16695                           ;ui_key.c: 294: __t16*=100;
 16696  126E  3064               	movlw	100
 16697  126F  00F3               	movwf	___wmul@multiplier
 16698  1270  3000               	movlw	0
 16699  1271  00F4               	movwf	___wmul@multiplier+1
 16700  1272  0879               	movf	___t16+1,w
 16701  1273  00F6               	movwf	___wmul@multiplicand+1
 16702  1274  0878               	movf	___t16,w
 16703  1275  00F5               	movwf	___wmul@multiplicand
 16704  1276  31BE  2682  3191   	fcall	___wmul
 16705  1279  0874               	movf	?___wmul+1,w
 16706  127A  00F9               	movwf	___t16+1
 16707  127B  0873               	movf	?___wmul,w
 16708  127C  00F8               	movwf	___t16
 16709                           
 16710                           ;ui_key.c: 295: *((uint16_t*)flashOpStr.buf)=__t16;
 16711  127D  0879               	movf	___t16+1,w
 16712  127E  0022               	movlb	2	; select bank2
 16713  127F  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16714  1280  0878               	movf	___t16,w
 16715  1281  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16716                           
 16717                           ;ui_key.c: 296: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16718  1282  3002               	movlw	2
 16719  1283  0020               	movlb	0	; select bank0
 16720  1284  00C6               	movwf	??_ui_key_process_cancel
 16721  1285  0846               	movf	??_ui_key_process_cancel,w
 16722  1286  0022               	movlb	2	; select bank2
 16723  1287  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16724                           
 16725                           ;ui_key.c: 297: flashOpStr.len=2;
 16726  1288  3002               	movlw	2
 16727  1289  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16728  128A  3000               	movlw	0
 16729  128B  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16730                           
 16731                           ;ui_key.c: 298: *(int16_t*)uiAdjbuf=(mainSystemData.balanceOff/100);
 16732  128C  3064               	movlw	100
 16733  128D  00F3               	movwf	___awdiv@divisor
 16734  128E  3000               	movlw	0
 16735  128F  00F4               	movwf	___awdiv@divisor+1
 16736  1290  0024               	movlb	4	; select bank4
 16737  1291  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 16738  1292  00F6               	movwf	___awdiv@dividend+1
 16739  1293  0836               	movf	(_mainSystemData^(0+512)+22),w
 16740  1294  00F5               	movwf	___awdiv@dividend
 16741  1295  31A9  21F3         	fcall	___awdiv
 16742  1297  3061               	movlw	low (_uiAdjbuf| (0+256))
 16743  1298  0086               	movwf	6
 16744  1299  3001               	movlw	1	; select bank2/3
 16745  129A  0087               	movwf	7
 16746  129B  0873               	movf	?___awdiv,w
 16747  129C  3FC0               	movwi [0]fsr1
 16748  129D  0874               	movf	?___awdiv+1,w
 16749  129E  3FC1               	movwi [1]fsr1
 16750                           
 16751                           ;ui_key.c: 299: menu=0xb1;
 16752  129F  30B1               	movlw	177
 16753  12A0  0020               	movlb	0	; select bank0
 16754  12A1  00C6               	movwf	??_ui_key_process_cancel
 16755  12A2  0846               	movf	??_ui_key_process_cancel,w
 16756  12A3  0021               	movlb	1	; select bank1
 16757  12A4  00C3               	movwf	_menu^(0+128)
 16758                           
 16759                           ;ui_key.c: 300: break;
 16760  12A5  0008               	return
 16761  12A6                     l14821:	
 16762                           ;ui_key.c: 301: case 0xb1:
 16763                           
 16764                           
 16765                           ;ui_key.c: 302: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceOff));
 16766  12A6  3016               	movlw	22
 16767  12A7  0022               	movlb	2	; select bank2
 16768  12A8  00C3               	movwf	_flashOpStr^(0+256)
 16769  12A9  3000               	movlw	0
 16770  12AA  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16771                           
 16772                           ;ui_key.c: 304: flashOpStr.len=2;
 16773  12AB  3002               	movlw	2
 16774  12AC  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16775  12AD  3000               	movlw	0
 16776  12AE  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16777                           
 16778                           ;ui_key.c: 305: __t16=*((uint16_t*)uiAdjbuf);
 16779  12AF  3061               	movlw	low (_uiAdjbuf| (0+256))
 16780  12B0  0086               	movwf	6
 16781  12B1  3001               	movlw	1	; select bank2/3
 16782  12B2  0087               	movwf	7
 16783  12B3  3F40               	moviw [0]fsr1
 16784  12B4  00F8               	movwf	___t16
 16785  12B5  3F41               	moviw [1]fsr1
 16786  12B6  00F9               	movwf	___t16+1
 16787                           
 16788                           ;ui_key.c: 306: __t16*=100;
 16789  12B7  3064               	movlw	100
 16790  12B8  00F3               	movwf	___wmul@multiplier
 16791  12B9  3000               	movlw	0
 16792  12BA  00F4               	movwf	___wmul@multiplier+1
 16793  12BB  0879               	movf	___t16+1,w
 16794  12BC  00F6               	movwf	___wmul@multiplicand+1
 16795  12BD  0878               	movf	___t16,w
 16796  12BE  00F5               	movwf	___wmul@multiplicand
 16797  12BF  31BE  2682  3191   	fcall	___wmul
 16798  12C2  0874               	movf	?___wmul+1,w
 16799  12C3  00F9               	movwf	___t16+1
 16800  12C4  0873               	movf	?___wmul,w
 16801  12C5  00F8               	movwf	___t16
 16802                           
 16803                           ;ui_key.c: 307: *((uint16_t*)flashOpStr.buf)=__t16;
 16804  12C6  0879               	movf	___t16+1,w
 16805  12C7  0022               	movlb	2	; select bank2
 16806  12C8  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16807  12C9  0878               	movf	___t16,w
 16808  12CA  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16809                           
 16810                           ;ui_key.c: 308: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16811  12CB  3002               	movlw	2
 16812  12CC  0020               	movlb	0	; select bank0
 16813  12CD  00C6               	movwf	??_ui_key_process_cancel
 16814  12CE  0846               	movf	??_ui_key_process_cancel,w
 16815  12CF  0022               	movlb	2	; select bank2
 16816  12D0  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16817                           
 16818                           ;ui_key.c: 309: flashOpStr.len=2;
 16819  12D1  3002               	movlw	2
 16820  12D2  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16821  12D3  3000               	movlw	0
 16822  12D4  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16823                           
 16824                           ;ui_key.c: 310: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 16825  12D5  3064               	movlw	100
 16826  12D6  00F3               	movwf	___awdiv@divisor
 16827  12D7  3000               	movlw	0
 16828  12D8  00F4               	movwf	___awdiv@divisor+1
 16829  12D9  0024               	movlb	4	; select bank4
 16830  12DA  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 16831  12DB  00F6               	movwf	___awdiv@dividend+1
 16832  12DC  0834               	movf	(_mainSystemData^(0+512)+20),w
 16833  12DD  00F5               	movwf	___awdiv@dividend
 16834  12DE  31A9  21F3         	fcall	___awdiv
 16835  12E0  3061               	movlw	low (_uiAdjbuf| (0+256))
 16836  12E1  0086               	movwf	6
 16837  12E2  3001               	movlw	1	; select bank2/3
 16838  12E3  0087               	movwf	7
 16839  12E4  0873               	movf	?___awdiv,w
 16840  12E5  3FC0               	movwi [0]fsr1
 16841  12E6  0874               	movf	?___awdiv+1,w
 16842  12E7  3FC1               	movwi [1]fsr1
 16843                           
 16844                           ;ui_key.c: 311: menu=0xb0;
 16845  12E8  30B0               	movlw	176
 16846  12E9  0020               	movlb	0	; select bank0
 16847  12EA  00C6               	movwf	??_ui_key_process_cancel
 16848  12EB  0846               	movf	??_ui_key_process_cancel,w
 16849  12EC  0021               	movlb	1	; select bank1
 16850  12ED  00C3               	movwf	_menu^(0+128)
 16851                           
 16852                           ;ui_key.c: 313: }
 16853                           
 16854                           ;ui_key.c: 312: break;
 16855  12EE  0008               	return
 16856  12EF                     l14839:	
 16857  12EF  0843               	movf	_menu^(0+128),w
 16858                           
 16859                           ; Switch size 1, requested type "space"
 16860                           ; Number of cases is 3, Range of values is 80 to 177
 16861                           ; switch strategies available:
 16862                           ; Name         Instructions Cycles
 16863                           ; simple_byte           10     6 (average)
 16864                           ; direct_byte          205     9 (fixed)
 16865                           ; jumptable            263     9 (fixed)
 16866                           ;	Chosen strategy is simple_byte
 16867  12F0  3A50               	xorlw	80	; case 80
 16868  12F1  1903               	skipnz
 16869  12F2  29EB               	goto	l14785
 16870  12F3  3AE0               	xorlw	224	; case 176
 16871  12F4  1903               	skipnz
 16872  12F5  2A5D               	goto	l14805
 16873  12F6  3A01               	xorlw	1	; case 177
 16874  12F7  1903               	skipnz
 16875  12F8  2AA6               	goto	l14821
 16876  12F9  2AFA               	goto	l685
 16877  12FA                     l685:	
 16878  12FA  0008               	return
 16879  12FB                     __end_of_ui_key_process_cancel:	
 16880                           
 16881                           	psect	text36
 16882  1803                     __ptext36:	
 16883 ;; *************** function _timer1_irq_callback *****************
 16884 ;; Defined at:
 16885 ;;		line 52 in file "src/driver/timer.c"
 16886 ;; Parameters:    Size  Location     Type
 16887 ;;		None
 16888 ;; Auto vars:     Size  Location     Type
 16889 ;;		None
 16890 ;; Return value:  Size  Location     Type
 16891 ;;                  1    wreg      void 
 16892 ;; Registers used:
 16893 ;;		wreg, status,2, status,0, pclath, cstack
 16894 ;; Tracked objects:
 16895 ;;		On entry : 0/0
 16896 ;;		On exit  : 0/0
 16897 ;;		Unchanged: 0/0
 16898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16902 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16903 ;;Total ram usage:        1 bytes
 16904 ;; Hardware stack levels used:    1
 16905 ;; Hardware stack levels required when called:    3
 16906 ;; This function calls:
 16907 ;;		_valve_stop
 16908 ;; This function is called by:
 16909 ;;		_main
 16910 ;; This function uses a non-reentrant model
 16911 ;;
 16912                           
 16913                           
 16914                           ;psect for function _timer1_irq_callback
 16915  1803                     _timer1_irq_callback:	
 16916                           
 16917                           ;timer.c: 54: if(noKeyEventTimeOut)noKeyEventTimeOut--;
 16918                           
 16919                           ;incstack = 0
 16920                           ; Regs used in _timer1_irq_callback: [wreg+status,2+status,0+pclath+cstack]
 16921  1803  0022               	movlb	2	; select bank2
 16922  1804  086C               	movf	_noKeyEventTimeOut^(0+256),w
 16923  1805  1903               	btfsc	3,2
 16924  1806  2809               	goto	l2020
 16925  1807  3001               	movlw	1
 16926  1808  02EC               	subwf	_noKeyEventTimeOut^(0+256),f
 16927  1809                     l2020:	
 16928                           
 16929                           ;timer.c: 55: Event &= ~ (0x01<<5);
 16930  1809  30DF               	movlw	223
 16931  180A  00F4               	movwf	??_timer1_irq_callback
 16932  180B  0874               	movf	??_timer1_irq_callback,w
 16933  180C  0021               	movlb	1	; select bank1
 16934  180D  05C8               	andwf	_Event^(0+128),f
 16935                           
 16936                           ;timer.c: 56: Event |= (0x01<<3);
 16937  180E  15C8               	bsf	_Event^(0+128),3
 16938                           
 16939                           ;timer.c: 60: if(valveStatus== VALVE_CLOSEING || valveStatus==VALVE_OPENING){
 16940                           
 16941                           ;timer.c: 59: do{
 16942  180F  3004               	movlw	4
 16943  1810  067A               	xorwf	_valveStatus,w
 16944  1811  1903               	btfsc	3,2
 16945  1812  2817               	goto	l16295
 16946  1813  3003               	movlw	3
 16947  1814  067A               	xorwf	_valveStatus,w
 16948  1815  1D03               	btfss	3,2
 16949  1816  2839               	goto	l16311
 16950  1817                     l16295:	
 16951                           
 16952                           ;timer.c: 61: valveTimer++;
 16953  1817  3001               	movlw	1
 16954  1818  00F4               	movwf	??_timer1_irq_callback
 16955  1819  0874               	movf	??_timer1_irq_callback,w
 16956  181A  0022               	movlb	2	; select bank2
 16957  181B  07B8               	addwf	_valveTimer^(0+256),f
 16958                           
 16959                           ;timer.c: 62: if(valveStatus== VALVE_CLOSEING && valveTimer>=20){
 16960  181C  3004               	movlw	4
 16961  181D  067A               	xorwf	_valveStatus,w
 16962  181E  1D03               	btfss	3,2
 16963  181F  2829               	goto	l16303
 16964  1820  3014               	movlw	20
 16965  1821  0238               	subwf	_valveTimer^(0+256),w
 16966  1822  1C03               	skipc
 16967  1823  2829               	goto	l16303
 16968                           
 16969                           ;timer.c: 63: valveStatus=VALVE_CLOSED;
 16970  1824  01FA               	clrf	_valveStatus
 16971  1825  0AFA               	incf	_valveStatus,f
 16972                           
 16973                           ;timer.c: 64: valve_stop();
 16974  1826  31BC  2458  3198   	fcall	_valve_stop
 16975  1829                     l16303:	
 16976                           
 16977                           ;timer.c: 65: }
 16978                           ;timer.c: 66: if(valveStatus== VALVE_OPENING && valveTimer>=20){
 16979  1829  3003               	movlw	3
 16980  182A  067A               	xorwf	_valveStatus,w
 16981  182B  1D03               	btfss	3,2
 16982  182C  2839               	goto	l16311
 16983  182D  3014               	movlw	20
 16984  182E  0022               	movlb	2	; select bank2
 16985  182F  0238               	subwf	_valveTimer^(0+256),w
 16986  1830  1C03               	skipc
 16987  1831  2839               	goto	l16311
 16988                           
 16989                           ;timer.c: 67: valveStatus=VALVE_OPENED;
 16990  1832  3002               	movlw	2
 16991  1833  00F4               	movwf	??_timer1_irq_callback
 16992  1834  0874               	movf	??_timer1_irq_callback,w
 16993  1835  00FA               	movwf	_valveStatus
 16994                           
 16995                           ;timer.c: 68: valve_stop();
 16996  1836  31BC  2458  3198   	fcall	_valve_stop
 16997  1839                     l16311:	
 16998                           ;timer.c: 71: else{
 16999                           
 17000                           ;timer.c: 69: }
 17001                           ;timer.c: 70: }
 17002                           
 17003                           
 17004                           ;timer.c: 73: }
 17005                           ;timer.c: 74: }while(0);
 17006                           ;timer.c: 75: sec+=systemTickerSec;
 17007  1839  0022               	movlb	2	; select bank2
 17008  183A  0842               	movf	_systemTickerSec^(0+256),w
 17009  183B  00F4               	movwf	??_timer1_irq_callback
 17010  183C  0874               	movf	??_timer1_irq_callback,w
 17011  183D  07BF               	addwf	_sec^(0+256),f
 17012                           
 17013                           ;timer.c: 76: systemTickerSec=0;
 17014  183E  01C2               	clrf	_systemTickerSec^(0+256)
 17015                           
 17016                           ;timer.c: 77: if(sec>=60){
 17017  183F  303C               	movlw	60
 17018  1840  023F               	subwf	_sec^(0+256),w
 17019  1841  1C03               	skipc
 17020  1842  2849               	goto	l16319
 17021                           
 17022                           ;timer.c: 78: sec-=60;
 17023  1843  303C               	movlw	60
 17024  1844  02BF               	subwf	_sec^(0+256),f
 17025                           
 17026                           ;timer.c: 79: min++;
 17027  1845  3001               	movlw	1
 17028  1846  00F4               	movwf	??_timer1_irq_callback
 17029  1847  0874               	movf	??_timer1_irq_callback,w
 17030  1848  07B7               	addwf	_min^(0+256),f
 17031  1849                     l16319:	
 17032                           
 17033                           ;timer.c: 80: }
 17034                           ;timer.c: 81: if(min>=60){
 17035  1849  303C               	movlw	60
 17036  184A  0237               	subwf	_min^(0+256),w
 17037  184B  1C03               	skipc
 17038  184C  2853               	goto	l2030
 17039                           
 17040                           ;timer.c: 82: min-=60;
 17041  184D  303C               	movlw	60
 17042  184E  02B7               	subwf	_min^(0+256),f
 17043                           
 17044                           ;timer.c: 83: hour++;
 17045  184F  3001               	movlw	1
 17046  1850  00F4               	movwf	??_timer1_irq_callback
 17047  1851  0874               	movf	??_timer1_irq_callback,w
 17048  1852  07B6               	addwf	_hour^(0+256),f
 17049  1853                     l2030:	
 17050                           
 17051                           ;timer.c: 84: }
 17052                           ;timer.c: 85: if(hour>=1){
 17053  1853  0836               	movf	_hour^(0+256),w
 17054  1854  1903               	btfsc	3,2
 17055  1855  0008               	return
 17056                           
 17057                           ;timer.c: 86: Event |=(0x01<<6);
 17058  1856  0021               	movlb	1	; select bank1
 17059  1857  1748               	bsf	_Event^(0+128),6
 17060                           
 17061                           ;timer.c: 87: sec=0;
 17062  1858  0022               	movlb	2	; select bank2
 17063  1859  01BF               	clrf	_sec^(0+256)
 17064                           
 17065                           ;timer.c: 88: min=0;
 17066  185A  01B7               	clrf	_min^(0+256)
 17067                           
 17068                           ;timer.c: 89: hour=0;
 17069  185B  01B6               	clrf	_hour^(0+256)
 17070  185C  0008               	return
 17071  185D                     __end_of_timer1_irq_callback:	
 17072                           
 17073                           	psect	text37
 17074  3C58                     __ptext37:	
 17075 ;; *************** function _valve_stop *****************
 17076 ;; Defined at:
 17077 ;;		line 39 in file "src/driver/other-gpio.c"
 17078 ;; Parameters:    Size  Location     Type
 17079 ;;		None
 17080 ;; Auto vars:     Size  Location     Type
 17081 ;;		None
 17082 ;; Return value:  Size  Location     Type
 17083 ;;                  1    wreg      void 
 17084 ;; Registers used:
 17085 ;;		wreg, status,2, status,0
 17086 ;; Tracked objects:
 17087 ;;		On entry : 0/0
 17088 ;;		On exit  : 0/0
 17089 ;;		Unchanged: 0/0
 17090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17093 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17094 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17095 ;;Total ram usage:        1 bytes
 17096 ;; Hardware stack levels used:    1
 17097 ;; Hardware stack levels required when called:    2
 17098 ;; This function calls:
 17099 ;;		Nothing
 17100 ;; This function is called by:
 17101 ;;		_timer1_irq_callback
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           
 17106                           ;psect for function _valve_stop
 17107  3C58                     _valve_stop:	
 17108  3C58                     l1954:	
 17109                           ;other-gpio.c: 42: while((Event & (0x01<<5))==0);
 17110                           
 17111                           ;incstack = 0
 17112                           ; Regs used in _valve_stop: [wreg+status,2+status,0]
 17113                           
 17114  3C58  0021               	movlb	1	; select bank1
 17115  3C59  1EC8               	btfss	_Event^(0+128),5
 17116  3C5A  2C58               	goto	l1954
 17117                           
 17118                           ;other-gpio.c: 43: Event &= ~(0x01<<5);
 17119  3C5B  30DF               	movlw	223
 17120  3C5C  00F3               	movwf	??_valve_stop
 17121  3C5D  0873               	movf	??_valve_stop,w
 17122  3C5E  05C8               	andwf	_Event^(0+128),f
 17123                           
 17124                           ;other-gpio.c: 45: do { LATDbits.LATD7 = 0; } while(0);
 17125  3C5F  0022               	movlb	2	; select bank2
 17126  3C60  138F               	bcf	15,7	;volatile
 17127  3C61                     l1959:	
 17128                           ;other-gpio.c: 47: while((Event & (0x01<<5))==0);
 17129                           
 17130  3C61  0021               	movlb	1	; select bank1
 17131  3C62  1EC8               	btfss	_Event^(0+128),5
 17132  3C63  2C61               	goto	l1959
 17133                           
 17134                           ;other-gpio.c: 48: Event &= ~(0x01<<5);
 17135  3C64  30DF               	movlw	223
 17136  3C65  00F3               	movwf	??_valve_stop
 17137  3C66  0873               	movf	??_valve_stop,w
 17138  3C67  05C8               	andwf	_Event^(0+128),f
 17139                           
 17140                           ;other-gpio.c: 51: do { LATBbits.LATB0 = 0; } while(0);
 17141  3C68  0022               	movlb	2	; select bank2
 17142  3C69  100D               	bcf	13,0	;volatile
 17143  3C6A  0008               	return
 17144  3C6B                     __end_of_valve_stop:	
 17145                           
 17146                           	psect	text38
 17147  32CD                     __ptext38:	
 17148 ;; *************** function _timer0_irq_callback *****************
 17149 ;; Defined at:
 17150 ;;		line 33 in file "src/driver/timer.c"
 17151 ;; Parameters:    Size  Location     Type
 17152 ;;		None
 17153 ;; Auto vars:     Size  Location     Type
 17154 ;;		None
 17155 ;; Return value:  Size  Location     Type
 17156 ;;                  1    wreg      void 
 17157 ;; Registers used:
 17158 ;;		wreg, status,2, status,0
 17159 ;; Tracked objects:
 17160 ;;		On entry : 0/0
 17161 ;;		On exit  : 0/0
 17162 ;;		Unchanged: 0/0
 17163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17164 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17167 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17168 ;;Total ram usage:        1 bytes
 17169 ;; Hardware stack levels used:    1
 17170 ;; Hardware stack levels required when called:    2
 17171 ;; This function calls:
 17172 ;;		Nothing
 17173 ;; This function is called by:
 17174 ;;		_main
 17175 ;; This function uses a non-reentrant model
 17176 ;;
 17177                           
 17178                           
 17179                           ;psect for function _timer0_irq_callback
 17180  32CD                     _timer0_irq_callback:	
 17181                           
 17182                           ;timer.c: 35: Event &= ~ (0x01<<4);
 17183                           
 17184                           ;incstack = 0
 17185                           ; Regs used in _timer0_irq_callback: [wreg+status,2+status,0]
 17186  32CD  30EF               	movlw	239
 17187  32CE  00F3               	movwf	??_timer0_irq_callback
 17188  32CF  0873               	movf	??_timer0_irq_callback,w
 17189  32D0  0021               	movlb	1	; select bank1
 17190  32D1  05C8               	andwf	_Event^(0+128),f
 17191                           
 17192                           ;timer.c: 36: tmTemp16=systemTikerms;
 17193  32D2  0022               	movlb	2	; select bank2
 17194  32D3  0833               	movf	(_systemTikerms+1)^(0+256),w
 17195  32D4  00A1               	movwf	(_tmTemp16+1)^(0+256)
 17196  32D5  0832               	movf	_systemTikerms^(0+256),w
 17197  32D6  00A0               	movwf	_tmTemp16^(0+256)
 17198                           
 17199                           ;timer.c: 37: systemTikerms=0;
 17200  32D7  01B2               	clrf	_systemTikerms^(0+256)
 17201  32D8  01B3               	clrf	(_systemTikerms+1)^(0+256)
 17202                           
 17203                           ;timer.c: 39: findCardTimer+=tmTemp16;
 17204  32D9  0820               	movf	_tmTemp16^(0+256),w
 17205  32DA  0023               	movlb	3	; select bank3
 17206  32DB  07A0               	addwf	_findCardTimer^(0+384),f
 17207  32DC  0022               	movlb	2	; select bank2
 17208  32DD  0821               	movf	(_tmTemp16+1)^(0+256),w
 17209  32DE  0023               	movlb	3	; select bank3
 17210  32DF  3DA1               	addwfc	(_findCardTimer+1)^(0+384),f
 17211                           
 17212                           ;timer.c: 41: if(findCardTimer>330){
 17213  32E0  3001               	movlw	1
 17214  32E1  0221               	subwf	(_findCardTimer+1)^(0+384),w
 17215  32E2  304B               	movlw	75
 17216  32E3  1903               	skipnz
 17217  32E4  0220               	subwf	_findCardTimer^(0+384),w
 17218  32E5  1C03               	skipc
 17219  32E6  2AEC               	goto	l16281
 17220                           
 17221                           ;timer.c: 42: Event |= (0x01<<0);
 17222  32E7  0021               	movlb	1	; select bank1
 17223  32E8  1448               	bsf	_Event^(0+128),0
 17224                           
 17225                           ;timer.c: 43: findCardTimer=0;
 17226  32E9  0023               	movlb	3	; select bank3
 17227  32EA  01A0               	clrf	_findCardTimer^(0+384)
 17228  32EB  01A1               	clrf	(_findCardTimer+1)^(0+384)
 17229  32EC                     l16281:	
 17230                           
 17231                           ;timer.c: 44: }
 17232                           ;timer.c: 46: adcSamplingTimerOneTime+=tmTemp16;
 17233  32EC  0022               	movlb	2	; select bank2
 17234  32ED  0820               	movf	_tmTemp16^(0+256),w
 17235  32EE  07A6               	addwf	_adcSamplingTimerOneTime^(0+256),f	;volatile
 17236  32EF  0821               	movf	(_tmTemp16+1)^(0+256),w
 17237  32F0  3DA7               	addwfc	(_adcSamplingTimerOneTime+1)^(0+256),f	;volatile
 17238                           
 17239                           ;timer.c: 47: if(adcSamplingTimerOneTime>=(20)){
 17240  32F1  3000               	movlw	0
 17241  32F2  0227               	subwf	(_adcSamplingTimerOneTime+1)^(0+256),w	;volatile
 17242  32F3  3014               	movlw	20
 17243  32F4  1903               	skipnz
 17244  32F5  0226               	subwf	_adcSamplingTimerOneTime^(0+256),w	;volatile
 17245  32F6  1C03               	skipc
 17246  32F7  0008               	return
 17247                           
 17248                           ;timer.c: 48: Event |= (0x01<<1);
 17249  32F8  0021               	movlb	1	; select bank1
 17250  32F9  14C8               	bsf	_Event^(0+128),1
 17251  32FA  0008               	return
 17252  32FB                     __end_of_timer0_irq_callback:	
 17253                           
 17254                           	psect	text39
 17255  1E1C                     __ptext39:	
 17256 ;; *************** function _rfid_comm_process *****************
 17257 ;; Defined at:
 17258 ;;		line 192 in file "src/app/rfid_demo.c"
 17259 ;; Parameters:    Size  Location     Type
 17260 ;;		None
 17261 ;; Auto vars:     Size  Location     Type
 17262 ;;  ret             1    0[BANK3 ] unsigned char 
 17263 ;;  result          1    0        enum E5491
 17264 ;; Return value:  Size  Location     Type
 17265 ;;                  1    wreg      unsigned char 
 17266 ;; Registers used:
 17267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17268 ;; Tracked objects:
 17269 ;;		On entry : 0/0
 17270 ;;		On exit  : 0/0
 17271 ;;		Unchanged: 0/0
 17272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17274 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 17275 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0
 17276 ;;      Totals:         0       0       1       0       1       0       0       0       0       0       0       0       
      +0
 17277 ;;Total ram usage:        2 bytes
 17278 ;; Hardware stack levels used:    1
 17279 ;; Hardware stack levels required when called:   10
 17280 ;; This function calls:
 17281 ;;		_delay
 17282 ;;		_in_app_vavle_off
 17283 ;;		_in_app_vavle_on
 17284 ;;		_key_scan_call
 17285 ;;		_lcd_disp_str
 17286 ;;		_mfapi_is_new_card_present
 17287 ;;		_picc_halt_a
 17288 ;;		_picc_select
 17289 ;;		_picc_stop_cryptol
 17290 ;;		_rfid_comm_process_read_dec
 17291 ;;		_rfid_comm_process_read_header
 17292 ;;		_rfid_comm_process_read_inc
 17293 ;;		_rfid_comm_process_recharge
 17294 ;;		_ui_disp_balance_and_volume
 17295 ;; This function is called by:
 17296 ;;		_main
 17297 ;; This function uses a non-reentrant model
 17298 ;;
 17299                           
 17300                           
 17301                           ;psect for function _rfid_comm_process
 17302  1E1C                     _rfid_comm_process:	
 17303                           
 17304                           ;rfid_demo.c: 194: uint8_t ret = 0;
 17305                           
 17306                           ;incstack = 0
 17307                           ; Regs used in _rfid_comm_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17308  1E1C  0023               	movlb	3	; select bank3
 17309  1E1D  01D2               	clrf	rfid_comm_process@ret^(0+384)
 17310                           
 17311                           ;rfid_demo.c: 196: em_PcdStatusCode result;
 17312                           ;rfid_demo.c: 197: if(deviceStatus.bits.acPowerDown)return 0;
 17313  1E1E  0021               	movlb	1	; select bank1
 17314  1E1F  19C0               	btfsc	_deviceStatus^(0+128),3
 17315  1E20  0008               	return
 17316                           
 17317                           ;rfid_demo.c: 200: CardError=NO_CARD;
 17318                           
 17319                           ;rfid_demo.c: 199: do {
 17320                           
 17321                           ;	Return value of _rfid_comm_process is never used
 17322  1E21  0022               	movlb	2	; select bank2
 17323  1E22  01B9               	clrf	_CardError^(0+256)
 17324                           
 17325                           ;rfid_demo.c: 201: if (!(mfapi_is_new_card_present()))break;
 17326  1E23  31B3  23ED  319E   	fcall	_mfapi_is_new_card_present
 17327  1E26  3A00               	xorlw	0
 17328  1E27  1903               	btfsc	3,2
 17329  1E28  2EF6               	goto	l16255
 17330                           
 17331                           ;rfid_demo.c: 202: CardError=SELECT_CARD_ERROR;
 17332  1E29  0022               	movlb	2	; select bank2
 17333  1E2A  01B9               	clrf	_CardError^(0+256)
 17334  1E2B  0AB9               	incf	_CardError^(0+256),f
 17335                           
 17336                           ;rfid_demo.c: 203: piccResult = picc_select(&PiccUid, 0);
 17337  1E2C  0020               	movlb	0	; select bank0
 17338  1E2D  01CA               	clrf	picc_select@validBits
 17339  1E2E  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 17340  1E2F  3180  20A0  319E   	fcall	_picc_select
 17341  1E32  0021               	movlb	1	; select bank1
 17342  1E33  00EF               	movwf	??_rfid_comm_process^(0+128)
 17343  1E34  086F               	movf	??_rfid_comm_process^(0+128),w
 17344  1E35  00BE               	movwf	_piccResult^(0+128)
 17345                           
 17346                           ;rfid_demo.c: 204: if (piccResult != STATUS_OK)break;
 17347  1E36  083E               	movf	_piccResult^(0+128),w
 17348  1E37  1D03               	btfss	3,2
 17349  1E38  2EF6               	goto	l16255
 17350                           
 17351                           ;rfid_demo.c: 205: if (PiccUid.sak != 0x08) break;
 17352  1E39  3008               	movlw	8
 17353  1E3A  0023               	movlb	3	; select bank3
 17354  1E3B  0647               	xorwf	(_PiccUid^(0+384)+11),w
 17355  1E3C  1D03               	btfss	3,2
 17356  1E3D  2EF6               	goto	l16255
 17357                           
 17358                           ;rfid_demo.c: 206: CardError=READ_HEADER_ERROR;;
 17359  1E3E  3002               	movlw	2
 17360  1E3F  0021               	movlb	1	; select bank1
 17361  1E40  00EF               	movwf	??_rfid_comm_process^(0+128)
 17362  1E41  086F               	movf	??_rfid_comm_process^(0+128),w
 17363  1E42  0022               	movlb	2	; select bank2
 17364  1E43  00B9               	movwf	_CardError^(0+256)
 17365                           
 17366                           ;rfid_demo.c: 207: ret=rfid_comm_process_read_header();
 17367  1E44  318D  25A3  319E   	fcall	_rfid_comm_process_read_header
 17368  1E47  0021               	movlb	1	; select bank1
 17369  1E48  00EF               	movwf	??_rfid_comm_process^(0+128)
 17370  1E49  086F               	movf	??_rfid_comm_process^(0+128),w
 17371  1E4A  0023               	movlb	3	; select bank3
 17372  1E4B  00D2               	movwf	rfid_comm_process@ret^(0+384)
 17373                           
 17374                           ;rfid_demo.c: 208: if(!ret)break;
 17375  1E4C  0852               	movf	rfid_comm_process@ret^(0+384),w
 17376  1E4D  1903               	btfsc	3,2
 17377  1E4E  2EF6               	goto	l16255
 17378                           
 17379                           ;rfid_demo.c: 211: key_scan_call();
 17380  1E4F  31B0  200D  319E   	fcall	_key_scan_call
 17381                           
 17382                           ;rfid_demo.c: 212: if(KeyValue==(1<<1)){
 17383  1E52  3002               	movlw	2
 17384  1E53  0021               	movlb	1	; select bank1
 17385  1E54  0641               	xorwf	_KeyValue^(0+128),w
 17386  1E55  1D03               	btfss	3,2
 17387  1E56  2EE3               	goto	l16245
 17388                           
 17389                           ;rfid_demo.c: 214: ret=rfid_comm_process_read_inc();
 17390  1E57  31B6  2674  319E   	fcall	_rfid_comm_process_read_inc
 17391  1E5A  0021               	movlb	1	; select bank1
 17392  1E5B  00EF               	movwf	??_rfid_comm_process^(0+128)
 17393  1E5C  086F               	movf	??_rfid_comm_process^(0+128),w
 17394  1E5D  0023               	movlb	3	; select bank3
 17395  1E5E  00D2               	movwf	rfid_comm_process@ret^(0+384)
 17396                           
 17397                           ;rfid_demo.c: 215: if(!ret)break;
 17398  1E5F  0852               	movf	rfid_comm_process@ret^(0+384),w
 17399  1E60  1903               	btfsc	3,2
 17400  1E61  2EF6               	goto	l16255
 17401                           
 17402                           ;rfid_demo.c: 216: ret=rfid_comm_process_read_dec();
 17403  1E62  31B6  2635  319E   	fcall	_rfid_comm_process_read_dec
 17404  1E65  0021               	movlb	1	; select bank1
 17405  1E66  00EF               	movwf	??_rfid_comm_process^(0+128)
 17406  1E67  086F               	movf	??_rfid_comm_process^(0+128),w
 17407  1E68  0023               	movlb	3	; select bank3
 17408  1E69  00D2               	movwf	rfid_comm_process@ret^(0+384)
 17409                           
 17410                           ;rfid_demo.c: 217: if(!ret)break;
 17411  1E6A  0852               	movf	rfid_comm_process@ret^(0+384),w
 17412  1E6B  1903               	btfsc	3,2
 17413  1E6C  2EF6               	goto	l16255
 17414                           
 17415                           ;rfid_demo.c: 218: ui_disp_balance_and_volume();
 17416  1E6D  3194  247D  319E   	fcall	_ui_disp_balance_and_volume
 17417                           
 17418                           ;rfid_demo.c: 219: do { LATAbits.LATA2 = 1; } while(0);;do { LATFbits.LATF0 = 1; } while
      +                          (0);;do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;
 17419  1E70  0022               	movlb	2	; select bank2
 17420  1E71  150C               	bsf	12,2	;volatile
 17421  1E72  0027               	movlb	7	; select bank7
 17422  1E73  140C               	bsf	12,0	;volatile
 17423  1E74  0022               	movlb	2	; select bank2
 17424  1E75  118C               	bcf	12,3	;volatile
 17425  1E76  0027               	movlb	7	; select bank7
 17426  1E77  108C               	bcf	12,1	;volatile
 17427                           
 17428                           ;rfid_demo.c: 220: for(ret=0;ret<15;ret++){
 17429  1E78  0023               	movlb	3	; select bank3
 17430  1E79  01D2               	clrf	rfid_comm_process@ret^(0+384)
 17431  1E7A  300F               	movlw	15
 17432  1E7B  0252               	subwf	rfid_comm_process@ret^(0+384),w
 17433  1E7C  1803               	btfsc	3,0
 17434  1E7D  2E8F               	goto	l16213
 17435  1E7E                     l16207:	
 17436                           
 17437                           ;rfid_demo.c: 221: delay(0x904c);
 17438  1E7E  304C               	movlw	76
 17439  1E7F  00F3               	movwf	delay@t
 17440  1E80  3090               	movlw	144
 17441  1E81  00F4               	movwf	delay@t+1
 17442  1E82  31BB  2363  319E   	fcall	_delay
 17443  1E85  3001               	movlw	1
 17444  1E86  0021               	movlb	1	; select bank1
 17445  1E87  00EF               	movwf	??_rfid_comm_process^(0+128)
 17446  1E88  086F               	movf	??_rfid_comm_process^(0+128),w
 17447  1E89  0023               	movlb	3	; select bank3
 17448  1E8A  07D2               	addwf	rfid_comm_process@ret^(0+384),f
 17449  1E8B  300F               	movlw	15
 17450  1E8C  0252               	subwf	rfid_comm_process@ret^(0+384),w
 17451  1E8D  1C03               	skipc
 17452  1E8E  2E7E               	goto	l16207
 17453  1E8F                     l16213:	
 17454                           
 17455                           ;rfid_demo.c: 222: }
 17456                           ;rfid_demo.c: 224: ret=rfid_comm_process_recharge();
 17457  1E8F  318B  2378  319E   	fcall	_rfid_comm_process_recharge
 17458  1E92  0021               	movlb	1	; select bank1
 17459  1E93  00EF               	movwf	??_rfid_comm_process^(0+128)
 17460  1E94  086F               	movf	??_rfid_comm_process^(0+128),w
 17461  1E95  0023               	movlb	3	; select bank3
 17462  1E96  00D2               	movwf	rfid_comm_process@ret^(0+384)
 17463                           
 17464                           ;rfid_demo.c: 225: if(!ret){
 17465  1E97  0852               	movf	rfid_comm_process@ret^(0+384),w
 17466  1E98  1D03               	btfss	3,2
 17467  1E99  2EA8               	goto	l16221
 17468                           
 17469                           ;rfid_demo.c: 226: if(CardError==RECHAERGE_OVERFLOW){
 17470  1E9A  3014               	movlw	20
 17471  1E9B  0022               	movlb	2	; select bank2
 17472  1E9C  0639               	xorwf	_CardError^(0+256),w
 17473  1E9D  1D03               	btfss	3,2
 17474  1E9E  2EAB               	goto	l16223
 17475                           
 17476                           ;rfid_demo.c: 227: lcd_disp_str((uint8_t*)("--full--"));
 17477  1E9F  309A               	movlw	low (STR_24| (0+32768))
 17478  1EA0  0020               	movlb	0	; select bank0
 17479  1EA1  00A2               	movwf	lcd_disp_str@str
 17480  1EA2  30B8               	movlw	high (STR_24| (0+32768))
 17481  1EA3  00A3               	movwf	lcd_disp_str@str+1
 17482  1EA4  31A8  20C5  319E   	fcall	_lcd_disp_str
 17483                           
 17484                           ;rfid_demo.c: 228: }
 17485                           ;rfid_demo.c: 229: }else{
 17486  1EA7  2EAB               	goto	l16223
 17487  1EA8                     l16221:	
 17488                           
 17489                           ;rfid_demo.c: 230: ui_disp_balance_and_volume();
 17490  1EA8  3194  247D  319E   	fcall	_ui_disp_balance_and_volume
 17491  1EAB                     l16223:	
 17492                           
 17493                           ;rfid_demo.c: 231: }
 17494                           ;rfid_demo.c: 232: for(ret=0;ret<6;ret++)
 17495  1EAB  0023               	movlb	3	; select bank3
 17496  1EAC  01D2               	clrf	rfid_comm_process@ret^(0+384)
 17497  1EAD  3006               	movlw	6
 17498  1EAE  0252               	subwf	rfid_comm_process@ret^(0+384),w
 17499  1EAF  1803               	btfsc	3,0
 17500  1EB0  2EDB               	goto	l16241
 17501                           
 17502                           ;rfid_demo.c: 233: {
 17503                           ;rfid_demo.c: 234: do { LATAbits.LATA2 = ~LATAbits.LATA2; } while(0);;
 17504  1EB1  1003               	clrc
 17505  1EB2                     L3:	
 17506  1EB2  0022               	movlb	2	; select bank2
 17507  1EB3  1D0C               	btfss	12,2	;volatile
 17508  1EB4  1403               	setc
 17509  1EB5  1C03               	btfss	3,0
 17510  1EB6  2EBA               	goto	u15220
 17511  1EB7  0022               	movlb	2	; select bank2
 17512  1EB8  150C               	bsf	12,2	;volatile
 17513  1EB9  2EBC               	goto	l16231
 17514  1EBA                     u15220:	
 17515  1EBA  0022               	movlb	2	; select bank2
 17516  1EBB  110C               	bcf	12,2	;volatile
 17517  1EBC                     l16231:	
 17518                           ;rfid_demo.c: 235: do{ delay(0x904c); delay(0x904c); delay(18470); }while(0);;
 17519                           
 17520  1EBC  304C               	movlw	76
 17521  1EBD  00F3               	movwf	delay@t
 17522  1EBE  3090               	movlw	144
 17523  1EBF  00F4               	movwf	delay@t+1
 17524  1EC0  31BB  2363  319E   	fcall	_delay
 17525  1EC3  304C               	movlw	76
 17526  1EC4  00F3               	movwf	delay@t
 17527  1EC5  3090               	movlw	144
 17528  1EC6  00F4               	movwf	delay@t+1
 17529  1EC7  31BB  2363  319E   	fcall	_delay
 17530  1ECA  3026               	movlw	38
 17531  1ECB  00F3               	movwf	delay@t
 17532  1ECC  3048               	movlw	72
 17533  1ECD  00F4               	movwf	delay@t+1
 17534  1ECE  31BB  2363  319E   	fcall	_delay
 17535  1ED1  3001               	movlw	1
 17536  1ED2  0021               	movlb	1	; select bank1
 17537  1ED3  00EF               	movwf	??_rfid_comm_process^(0+128)
 17538  1ED4  086F               	movf	??_rfid_comm_process^(0+128),w
 17539  1ED5  0023               	movlb	3	; select bank3
 17540  1ED6  07D2               	addwf	rfid_comm_process@ret^(0+384),f
 17541  1ED7  3006               	movlw	6
 17542  1ED8  0252               	subwf	rfid_comm_process@ret^(0+384),w
 17543  1ED9  1C03               	skipc
 17544  1EDA  2EB2               	goto	L3
 17545  1EDB                     l16241:	
 17546                           
 17547                           ;rfid_demo.c: 236: }
 17548                           ;rfid_demo.c: 237: CardError=NO_ERROR;
 17549  1EDB  3015               	movlw	21
 17550  1EDC  0021               	movlb	1	; select bank1
 17551  1EDD  00EF               	movwf	??_rfid_comm_process^(0+128)
 17552  1EDE  086F               	movf	??_rfid_comm_process^(0+128),w
 17553  1EDF  0022               	movlb	2	; select bank2
 17554  1EE0  00B9               	movwf	_CardError^(0+256)
 17555                           
 17556                           ;rfid_demo.c: 238: do { LATAbits.LATA2 = 0; } while(0);;
 17557  1EE1  110C               	bcf	12,2	;volatile
 17558                           
 17559                           ;rfid_demo.c: 240: }else{
 17560  1EE2  2EF6               	goto	l16255
 17561  1EE3                     l16245:	
 17562                           
 17563                           ;rfid_demo.c: 246: if(valveStatus==VALVE_OPENED){
 17564  1EE3  3002               	movlw	2
 17565  1EE4  067A               	xorwf	_valveStatus,w
 17566  1EE5  1D03               	btfss	3,2
 17567  1EE6  2EEC               	goto	l16249
 17568                           
 17569                           ;rfid_demo.c: 248: in_app_vavle_off(OFF_REASON_MAN);
 17570  1EE7  3002               	movlw	2
 17571  1EE8  31BF  27B2  319E   	fcall	_in_app_vavle_off
 17572                           
 17573                           ;rfid_demo.c: 249: break;
 17574  1EEB  2EF6               	goto	l16255
 17575  1EEC                     l16249:	
 17576                           
 17577                           ;rfid_demo.c: 250: }
 17578                           ;rfid_demo.c: 251: if(valveStatus==VALVE_CLOSED){
 17579  1EEC  037A               	decf	_valveStatus,w
 17580  1EED  1D03               	btfss	3,2
 17581  1EEE  2EF6               	goto	l16255
 17582                           
 17583                           ;rfid_demo.c: 253: if(deviceStatus.bits.noEnough==0){
 17584  1EEF  0021               	movlb	1	; select bank1
 17585  1EF0  18C0               	btfsc	_deviceStatus^(0+128),1
 17586  1EF1  2EF6               	goto	l16255
 17587                           
 17588                           ;rfid_demo.c: 254: in_app_vavle_on(ON_REASON_MAN);
 17589  1EF2  3004               	movlw	4
 17590  1EF3  31BE  26BF  319E   	fcall	_in_app_vavle_on
 17591  1EF6                     l16255:	
 17592                           ;rfid_demo.c: 257: }
 17593                           ;rfid_demo.c: 258: }
 17594                           ;rfid_demo.c: 259: } while (0);
 17595                           ;rfid_demo.c: 260: do{ picc_halt_a(); picc_stop_cryptol(); picc_halt_a(); }while(0);;
 17596                           
 17597                           ;rfid_demo.c: 255: }
 17598                           ;rfid_demo.c: 256: break;
 17599                           
 17600  1EF6  31B5  2585  319E   	fcall	_picc_halt_a
 17601  1EF9  31BB  230A  319E   	fcall	_picc_stop_cryptol
 17602  1EFC  31B5  2585         	fcall	_picc_halt_a
 17603                           
 17604                           ;rfid_demo.c: 267: findCardTimer=0;
 17605  1EFE  0023               	movlb	3	; select bank3
 17606  1EFF  01A0               	clrf	_findCardTimer^(0+384)
 17607  1F00  01A1               	clrf	(_findCardTimer+1)^(0+384)
 17608                           
 17609                           ;rfid_demo.c: 268: Event &= ~(0x01<<0);
 17610  1F01  30FE               	movlw	254
 17611  1F02  0021               	movlb	1	; select bank1
 17612  1F03  00EF               	movwf	??_rfid_comm_process^(0+128)
 17613  1F04  086F               	movf	??_rfid_comm_process^(0+128),w
 17614  1F05  05C8               	andwf	_Event^(0+128),f
 17615  1F06  0008               	return
 17616  1F07                     __end_of_rfid_comm_process:	
 17617                           ;rfid_demo.c: 270: return ret;
 17618                           ;	Return value of _rfid_comm_process is never used
 17619                           
 17620                           
 17621                           	psect	text40
 17622  147D                     __ptext40:	
 17623 ;; *************** function _ui_disp_balance_and_volume *****************
 17624 ;; Defined at:
 17625 ;;		line 267 in file "src/api/ui.c"
 17626 ;; Parameters:    Size  Location     Type
 17627 ;;		None
 17628 ;; Auto vars:     Size  Location     Type
 17629 ;;  ret             1   28[BANK0 ] unsigned char 
 17630 ;; Return value:  Size  Location     Type
 17631 ;;                  1    wreg      void 
 17632 ;; Registers used:
 17633 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17634 ;; Tracked objects:
 17635 ;;		On entry : 0/0
 17636 ;;		On exit  : 0/0
 17637 ;;		Unchanged: 0/0
 17638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17641 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 17642 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 17643 ;;Total ram usage:        3 bytes
 17644 ;; Hardware stack levels used:    1
 17645 ;; Hardware stack levels required when called:    6
 17646 ;; This function calls:
 17647 ;;		___aldiv
 17648 ;;		_lcd_clear_buffer
 17649 ;;		_lcd_disp_cln
 17650 ;;		_lcd_disp_dp
 17651 ;;		_lcd_disp_str
 17652 ;;		_m_mem_set
 17653 ;;		_ui_disp_flow_error
 17654 ;;		_ui_head_hide
 17655 ;;		_ui_uint32_2_str
 17656 ;; This function is called by:
 17657 ;;		_ui_disp_clear_balance
 17658 ;;		_ui_disp_menu
 17659 ;;		_rfid_comm_process
 17660 ;; This function uses a non-reentrant model
 17661 ;;
 17662                           
 17663                           
 17664                           ;psect for function _ui_disp_balance_and_volume
 17665  147D                     _ui_disp_balance_and_volume:	
 17666                           
 17667                           ;ui.c: 269: uint8_t ret=0x00;
 17668                           
 17669                           ;incstack = 0
 17670                           ; Regs used in _ui_disp_balance_and_volume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17671  147D  0020               	movlb	0	; select bank0
 17672  147E  01BC               	clrf	ui_disp_balance_and_volume@ret
 17673                           
 17674                           ;ui.c: 270: if(flowError){
 17675  147F  0021               	movlb	1	; select bank1
 17676  1480  0846               	movf	_flowError^(0+128),w
 17677  1481  1903               	btfsc	3,2
 17678  1482  2C86               	goto	l13005
 17679                           
 17680                           ;ui.c: 271: ui_disp_flow_error();
 17681  1483  31BB  2328         	fcall	_ui_disp_flow_error
 17682                           
 17683                           ;ui.c: 272: return;
 17684  1485  0008               	return
 17685  1486                     l13005:	
 17686                           
 17687                           ;ui.c: 273: }
 17688                           ;ui.c: 274: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 17689  1486  3058               	movlw	low _lcdBuf
 17690  1487  00F3               	movwf	m_mem_set@buf
 17691  1488  3001               	movlw	high _lcdBuf
 17692  1489  00F4               	movwf	m_mem_set@buf+1
 17693  148A  3030               	movlw	48
 17694  148B  0020               	movlb	0	; select bank0
 17695  148C  00BA               	movwf	??_ui_disp_balance_and_volume
 17696  148D  083A               	movf	??_ui_disp_balance_and_volume,w
 17697  148E  00F5               	movwf	m_mem_set@x
 17698  148F  3009               	movlw	9
 17699  1490  00BB               	movwf	??_ui_disp_balance_and_volume+1
 17700  1491  083B               	movf	??_ui_disp_balance_and_volume+1,w
 17701  1492  00F6               	movwf	m_mem_set@len
 17702  1493  31BB  23BC  3194   	fcall	_m_mem_set
 17703                           
 17704                           ;ui.c: 276: __q31=rtBalanceMoney;
 17705  1496  0021               	movlb	1	; select bank1
 17706  1497  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 17707  1498  00AF               	movwf	(___q31+3)^(0+128)
 17708  1499  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 17709  149A  00AE               	movwf	(___q31+2)^(0+128)
 17710  149B  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 17711  149C  00AD               	movwf	(___q31+1)^(0+128)
 17712  149D  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 17713  149E  00AC               	movwf	___q31^(0+128)
 17714                           
 17715                           ;ui.c: 277: __q31/=100;
 17716  149F  3000               	movlw	0
 17717  14A0  0020               	movlb	0	; select bank0
 17718  14A1  00A3               	movwf	___aldiv@divisor+3
 17719  14A2  3000               	movlw	0
 17720  14A3  00A2               	movwf	___aldiv@divisor+2
 17721  14A4  3000               	movlw	0
 17722  14A5  00A1               	movwf	___aldiv@divisor+1
 17723  14A6  3064               	movlw	100
 17724  14A7  00A0               	movwf	___aldiv@divisor
 17725  14A8  0021               	movlb	1	; select bank1
 17726  14A9  082F               	movf	(___q31+3)^(0+128),w
 17727  14AA  0020               	movlb	0	; select bank0
 17728  14AB  00A7               	movwf	___aldiv@dividend+3
 17729  14AC  0021               	movlb	1	; select bank1
 17730  14AD  082E               	movf	(___q31+2)^(0+128),w
 17731  14AE  0020               	movlb	0	; select bank0
 17732  14AF  00A6               	movwf	___aldiv@dividend+2
 17733  14B0  0021               	movlb	1	; select bank1
 17734  14B1  082D               	movf	(___q31+1)^(0+128),w
 17735  14B2  0020               	movlb	0	; select bank0
 17736  14B3  00A5               	movwf	___aldiv@dividend+1
 17737  14B4  0021               	movlb	1	; select bank1
 17738  14B5  082C               	movf	___q31^(0+128),w
 17739  14B6  0020               	movlb	0	; select bank0
 17740  14B7  00A4               	movwf	___aldiv@dividend
 17741  14B8  31A0  2013  3194   	fcall	___aldiv
 17742  14BB  0020               	movlb	0	; select bank0
 17743  14BC  0823               	movf	?___aldiv+3,w
 17744  14BD  0021               	movlb	1	; select bank1
 17745  14BE  00AF               	movwf	(___q31+3)^(0+128)
 17746  14BF  0020               	movlb	0	; select bank0
 17747  14C0  0822               	movf	?___aldiv+2,w
 17748  14C1  0021               	movlb	1	; select bank1
 17749  14C2  00AE               	movwf	(___q31+2)^(0+128)
 17750  14C3  0020               	movlb	0	; select bank0
 17751  14C4  0821               	movf	?___aldiv+1,w
 17752  14C5  0021               	movlb	1	; select bank1
 17753  14C6  00AD               	movwf	(___q31+1)^(0+128)
 17754  14C7  0020               	movlb	0	; select bank0
 17755  14C8  0820               	movf	?___aldiv,w
 17756  14C9  0021               	movlb	1	; select bank1
 17757  14CA  00AC               	movwf	___q31^(0+128)
 17758                           
 17759                           ;ui.c: 278: if(__q31>=0){
 17760  14CB  1BAF               	btfsc	(___q31+3)^(0+128),7
 17761  14CC  2D04               	goto	l421
 17762                           
 17763                           ;ui.c: 279: if(__q31>3000)__q31=3000;
 17764  14CD  1BAF               	btfsc	(___q31+3)^(0+128),7
 17765  14CE  2CE3               	goto	l13017
 17766  14CF  082F               	movf	(___q31+3)^(0+128),w
 17767  14D0  1D03               	btfss	3,2
 17768  14D1  2CDB               	goto	l13015
 17769  14D2  082E               	movf	(___q31+2)^(0+128),w
 17770  14D3  1D03               	btfss	3,2
 17771  14D4  2CDB               	goto	l13015
 17772  14D5  30B9               	movlw	185
 17773  14D6  022C               	subwf	___q31^(0+128),w
 17774  14D7  300B               	movlw	11
 17775  14D8  3B2D               	subwfb	(___q31+1)^(0+128),w
 17776  14D9  1C03               	btfss	3,0
 17777  14DA  2CE3               	goto	l13017
 17778  14DB                     l13015:	
 17779  14DB  3000               	movlw	0
 17780  14DC  00AF               	movwf	(___q31+3)^(0+128)
 17781  14DD  3000               	movlw	0
 17782  14DE  00AE               	movwf	(___q31+2)^(0+128)
 17783  14DF  300B               	movlw	11
 17784  14E0  00AD               	movwf	(___q31+1)^(0+128)
 17785  14E1  30B8               	movlw	184
 17786  14E2  00AC               	movwf	___q31^(0+128)
 17787  14E3                     l13017:	
 17788                           
 17789                           ;ui.c: 280: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 4);
 17790  14E3  082F               	movf	(___q31+3)^(0+128),w
 17791  14E4  0020               	movlb	0	; select bank0
 17792  14E5  00B4               	movwf	ui_uint32_2_str@x+3
 17793  14E6  0021               	movlb	1	; select bank1
 17794  14E7  082E               	movf	(___q31+2)^(0+128),w
 17795  14E8  0020               	movlb	0	; select bank0
 17796  14E9  00B3               	movwf	ui_uint32_2_str@x+2
 17797  14EA  0021               	movlb	1	; select bank1
 17798  14EB  082D               	movf	(___q31+1)^(0+128),w
 17799  14EC  0020               	movlb	0	; select bank0
 17800  14ED  00B2               	movwf	ui_uint32_2_str@x+1
 17801  14EE  0021               	movlb	1	; select bank1
 17802  14EF  082C               	movf	___q31^(0+128),w
 17803  14F0  0020               	movlb	0	; select bank0
 17804  14F1  00B1               	movwf	ui_uint32_2_str@x
 17805  14F2  3004               	movlw	4
 17806  14F3  00BA               	movwf	??_ui_disp_balance_and_volume
 17807  14F4  083A               	movf	??_ui_disp_balance_and_volume,w
 17808  14F5  00B5               	movwf	ui_uint32_2_str@len
 17809  14F6  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 17810  14F7  31A7  2747  3194   	fcall	_ui_uint32_2_str
 17811                           
 17812                           ;ui.c: 281: ui_head_hide(lcdBuf+4, 3);
 17813  14FA  3003               	movlw	3
 17814  14FB  0020               	movlb	0	; select bank0
 17815  14FC  00BA               	movwf	??_ui_disp_balance_and_volume
 17816  14FD  083A               	movf	??_ui_disp_balance_and_volume,w
 17817  14FE  00F3               	movwf	ui_head_hide@loc
 17818  14FF  305C               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 17819  1500  31B0  20AE  3194   	fcall	_ui_head_hide
 17820                           
 17821                           ;ui.c: 282: }else{
 17822  1503  2D56               	goto	l13033
 17823  1504                     l421:	
 17824                           
 17825                           ;ui.c: 283: __q31=0-__q31;
 17826  1504  09AC               	comf	___q31^(0+128),f
 17827  1505  09AD               	comf	(___q31+1)^(0+128),f
 17828  1506  09AE               	comf	(___q31+2)^(0+128),f
 17829  1507  09AF               	comf	(___q31+3)^(0+128),f
 17830  1508  0AAC               	incf	___q31^(0+128),f
 17831  1509  1903               	skipnz
 17832  150A  0AAD               	incf	(___q31+1)^(0+128),f
 17833  150B  1903               	skipnz
 17834  150C  0AAE               	incf	(___q31+2)^(0+128),f
 17835  150D  1903               	skipnz
 17836  150E  0AAF               	incf	(___q31+3)^(0+128),f
 17837                           
 17838                           ;ui.c: 284: if(__q31>999)__q31=999;
 17839  150F  1BAF               	btfsc	(___q31+3)^(0+128),7
 17840  1510  2D25               	goto	l13025
 17841  1511  082F               	movf	(___q31+3)^(0+128),w
 17842  1512  1D03               	btfss	3,2
 17843  1513  2D1D               	goto	l13023
 17844  1514  082E               	movf	(___q31+2)^(0+128),w
 17845  1515  1D03               	btfss	3,2
 17846  1516  2D1D               	goto	l13023
 17847  1517  30E8               	movlw	232
 17848  1518  022C               	subwf	___q31^(0+128),w
 17849  1519  3003               	movlw	3
 17850  151A  3B2D               	subwfb	(___q31+1)^(0+128),w
 17851  151B  1C03               	btfss	3,0
 17852  151C  2D25               	goto	l13025
 17853  151D                     l13023:	
 17854  151D  3000               	movlw	0
 17855  151E  00AF               	movwf	(___q31+3)^(0+128)
 17856  151F  3000               	movlw	0
 17857  1520  00AE               	movwf	(___q31+2)^(0+128)
 17858  1521  3003               	movlw	3
 17859  1522  00AD               	movwf	(___q31+1)^(0+128)
 17860  1523  30E7               	movlw	231
 17861  1524  00AC               	movwf	___q31^(0+128)
 17862  1525                     l13025:	
 17863                           
 17864                           ;ui.c: 285: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 4);
 17865  1525  082F               	movf	(___q31+3)^(0+128),w
 17866  1526  0020               	movlb	0	; select bank0
 17867  1527  00B4               	movwf	ui_uint32_2_str@x+3
 17868  1528  0021               	movlb	1	; select bank1
 17869  1529  082E               	movf	(___q31+2)^(0+128),w
 17870  152A  0020               	movlb	0	; select bank0
 17871  152B  00B3               	movwf	ui_uint32_2_str@x+2
 17872  152C  0021               	movlb	1	; select bank1
 17873  152D  082D               	movf	(___q31+1)^(0+128),w
 17874  152E  0020               	movlb	0	; select bank0
 17875  152F  00B2               	movwf	ui_uint32_2_str@x+1
 17876  1530  0021               	movlb	1	; select bank1
 17877  1531  082C               	movf	___q31^(0+128),w
 17878  1532  0020               	movlb	0	; select bank0
 17879  1533  00B1               	movwf	ui_uint32_2_str@x
 17880  1534  3004               	movlw	4
 17881  1535  00BA               	movwf	??_ui_disp_balance_and_volume
 17882  1536  083A               	movf	??_ui_disp_balance_and_volume,w
 17883  1537  00B5               	movwf	ui_uint32_2_str@len
 17884  1538  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 17885  1539  31A7  2747  3194   	fcall	_ui_uint32_2_str
 17886                           
 17887                           ;ui.c: 286: ret=ui_head_hide(lcdBuf+4, 3);
 17888  153C  3003               	movlw	3
 17889  153D  0020               	movlb	0	; select bank0
 17890  153E  00BA               	movwf	??_ui_disp_balance_and_volume
 17891  153F  083A               	movf	??_ui_disp_balance_and_volume,w
 17892  1540  00F3               	movwf	ui_head_hide@loc
 17893  1541  305C               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 17894  1542  31B0  20AE  3194   	fcall	_ui_head_hide
 17895  1545  0020               	movlb	0	; select bank0
 17896  1546  00BB               	movwf	??_ui_disp_balance_and_volume+1
 17897  1547  083B               	movf	??_ui_disp_balance_and_volume+1,w
 17898  1548  00BC               	movwf	ui_disp_balance_and_volume@ret
 17899                           
 17900                           ;ui.c: 287: if(ret)
 17901  1549  083C               	movf	ui_disp_balance_and_volume@ret,w
 17902  154A  1903               	btfsc	3,2
 17903  154B  2D56               	goto	l13033
 17904                           
 17905                           ;ui.c: 288: lcdBuf[4+ret-1]='-';
 17906  154C  302D               	movlw	45
 17907  154D  00BA               	movwf	??_ui_disp_balance_and_volume
 17908  154E  083C               	movf	ui_disp_balance_and_volume@ret,w
 17909  154F  3E03               	addlw	3
 17910  1550  3E58               	addlw	(low (_lcdBuf| (0+256)))& (0+255)
 17911  1551  0086               	movwf	6
 17912  1552  3001               	movlw	1	; select bank2/3
 17913  1553  0087               	movwf	7
 17914  1554  083A               	movf	??_ui_disp_balance_and_volume,w
 17915  1555  0081               	movwf	1
 17916  1556                     l13033:	
 17917                           
 17918                           ;ui.c: 290: }
 17919                           ;ui.c: 292: __q31=rtBalanceMoney;
 17920  1556  0021               	movlb	1	; select bank1
 17921  1557  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 17922  1558  00AF               	movwf	(___q31+3)^(0+128)
 17923  1559  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 17924  155A  00AE               	movwf	(___q31+2)^(0+128)
 17925  155B  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 17926  155C  00AD               	movwf	(___q31+1)^(0+128)
 17927  155D  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 17928  155E  00AC               	movwf	___q31^(0+128)
 17929                           
 17930                           ;ui.c: 293: __q31=__q31/mainSystemData.price;
 17931  155F  0024               	movlb	4	; select bank4
 17932  1560  0832               	movf	(_mainSystemData^(0+512)+18),w
 17933  1561  0020               	movlb	0	; select bank0
 17934  1562  00A0               	movwf	___aldiv@divisor
 17935  1563  0024               	movlb	4	; select bank4
 17936  1564  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 17937  1565  0020               	movlb	0	; select bank0
 17938  1566  00A1               	movwf	___aldiv@divisor+1
 17939  1567  0D89               	rlf	9,f
 17940  1568  3B89               	subwfb	9,f
 17941  1569  0989               	comf	9,f
 17942  156A  00A2               	movwf	___aldiv@divisor+2
 17943  156B  00A3               	movwf	___aldiv@divisor+3
 17944  156C  0021               	movlb	1	; select bank1
 17945  156D  082F               	movf	(___q31+3)^(0+128),w
 17946  156E  0020               	movlb	0	; select bank0
 17947  156F  00A7               	movwf	___aldiv@dividend+3
 17948  1570  0021               	movlb	1	; select bank1
 17949  1571  082E               	movf	(___q31+2)^(0+128),w
 17950  1572  0020               	movlb	0	; select bank0
 17951  1573  00A6               	movwf	___aldiv@dividend+2
 17952  1574  0021               	movlb	1	; select bank1
 17953  1575  082D               	movf	(___q31+1)^(0+128),w
 17954  1576  0020               	movlb	0	; select bank0
 17955  1577  00A5               	movwf	___aldiv@dividend+1
 17956  1578  0021               	movlb	1	; select bank1
 17957  1579  082C               	movf	___q31^(0+128),w
 17958  157A  0020               	movlb	0	; select bank0
 17959  157B  00A4               	movwf	___aldiv@dividend
 17960  157C  31A0  2013  3194   	fcall	___aldiv
 17961  157F  0020               	movlb	0	; select bank0
 17962  1580  0823               	movf	?___aldiv+3,w
 17963  1581  0021               	movlb	1	; select bank1
 17964  1582  00AF               	movwf	(___q31+3)^(0+128)
 17965  1583  0020               	movlb	0	; select bank0
 17966  1584  0822               	movf	?___aldiv+2,w
 17967  1585  0021               	movlb	1	; select bank1
 17968  1586  00AE               	movwf	(___q31+2)^(0+128)
 17969  1587  0020               	movlb	0	; select bank0
 17970  1588  0821               	movf	?___aldiv+1,w
 17971  1589  0021               	movlb	1	; select bank1
 17972  158A  00AD               	movwf	(___q31+1)^(0+128)
 17973  158B  0020               	movlb	0	; select bank0
 17974  158C  0820               	movf	?___aldiv,w
 17975  158D  0021               	movlb	1	; select bank1
 17976  158E  00AC               	movwf	___q31^(0+128)
 17977                           
 17978                           ;ui.c: 295: if(__q31>=0){
 17979  158F  1BAF               	btfsc	(___q31+3)^(0+128),7
 17980  1590  2DC8               	goto	l426
 17981                           
 17982                           ;ui.c: 296: if(__q31>9999)__q31=9999;
 17983  1591  1BAF               	btfsc	(___q31+3)^(0+128),7
 17984  1592  2DA7               	goto	l13043
 17985  1593  082F               	movf	(___q31+3)^(0+128),w
 17986  1594  1D03               	btfss	3,2
 17987  1595  2D9F               	goto	l13041
 17988  1596  082E               	movf	(___q31+2)^(0+128),w
 17989  1597  1D03               	btfss	3,2
 17990  1598  2D9F               	goto	l13041
 17991  1599  3010               	movlw	16
 17992  159A  022C               	subwf	___q31^(0+128),w
 17993  159B  3027               	movlw	39
 17994  159C  3B2D               	subwfb	(___q31+1)^(0+128),w
 17995  159D  1C03               	btfss	3,0
 17996  159E  2DA7               	goto	l13043
 17997  159F                     l13041:	
 17998  159F  3000               	movlw	0
 17999  15A0  00AF               	movwf	(___q31+3)^(0+128)
 18000  15A1  3000               	movlw	0
 18001  15A2  00AE               	movwf	(___q31+2)^(0+128)
 18002  15A3  3027               	movlw	39
 18003  15A4  00AD               	movwf	(___q31+1)^(0+128)
 18004  15A5  300F               	movlw	15
 18005  15A6  00AC               	movwf	___q31^(0+128)
 18006  15A7                     l13043:	
 18007                           
 18008                           ;ui.c: 297: ui_uint32_2_str(lcdBuf + 3, __q31, 4);
 18009  15A7  082F               	movf	(___q31+3)^(0+128),w
 18010  15A8  0020               	movlb	0	; select bank0
 18011  15A9  00B4               	movwf	ui_uint32_2_str@x+3
 18012  15AA  0021               	movlb	1	; select bank1
 18013  15AB  082E               	movf	(___q31+2)^(0+128),w
 18014  15AC  0020               	movlb	0	; select bank0
 18015  15AD  00B3               	movwf	ui_uint32_2_str@x+2
 18016  15AE  0021               	movlb	1	; select bank1
 18017  15AF  082D               	movf	(___q31+1)^(0+128),w
 18018  15B0  0020               	movlb	0	; select bank0
 18019  15B1  00B2               	movwf	ui_uint32_2_str@x+1
 18020  15B2  0021               	movlb	1	; select bank1
 18021  15B3  082C               	movf	___q31^(0+128),w
 18022  15B4  0020               	movlb	0	; select bank0
 18023  15B5  00B1               	movwf	ui_uint32_2_str@x
 18024  15B6  3004               	movlw	4
 18025  15B7  00BA               	movwf	??_ui_disp_balance_and_volume
 18026  15B8  083A               	movf	??_ui_disp_balance_and_volume,w
 18027  15B9  00B5               	movwf	ui_uint32_2_str@len
 18028  15BA  305B               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 18029  15BB  31A7  2747  3194   	fcall	_ui_uint32_2_str
 18030                           
 18031                           ;ui.c: 298: ui_head_hide(lcdBuf, 3);
 18032  15BE  3003               	movlw	3
 18033  15BF  0020               	movlb	0	; select bank0
 18034  15C0  00BA               	movwf	??_ui_disp_balance_and_volume
 18035  15C1  083A               	movf	??_ui_disp_balance_and_volume,w
 18036  15C2  00F3               	movwf	ui_head_hide@loc
 18037  15C3  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 18038  15C4  31B0  20AE  3194   	fcall	_ui_head_hide
 18039                           
 18040                           ;ui.c: 299: }else{
 18041  15C7  2E1A               	goto	l13059
 18042  15C8                     l426:	
 18043                           
 18044                           ;ui.c: 300: __q31=0-__q31;
 18045  15C8  09AC               	comf	___q31^(0+128),f
 18046  15C9  09AD               	comf	(___q31+1)^(0+128),f
 18047  15CA  09AE               	comf	(___q31+2)^(0+128),f
 18048  15CB  09AF               	comf	(___q31+3)^(0+128),f
 18049  15CC  0AAC               	incf	___q31^(0+128),f
 18050  15CD  1903               	skipnz
 18051  15CE  0AAD               	incf	(___q31+1)^(0+128),f
 18052  15CF  1903               	skipnz
 18053  15D0  0AAE               	incf	(___q31+2)^(0+128),f
 18054  15D1  1903               	skipnz
 18055  15D2  0AAF               	incf	(___q31+3)^(0+128),f
 18056                           
 18057                           ;ui.c: 301: if(__q31>999)__q31=999;
 18058  15D3  1BAF               	btfsc	(___q31+3)^(0+128),7
 18059  15D4  2DE9               	goto	l13051
 18060  15D5  082F               	movf	(___q31+3)^(0+128),w
 18061  15D6  1D03               	btfss	3,2
 18062  15D7  2DE1               	goto	l13049
 18063  15D8  082E               	movf	(___q31+2)^(0+128),w
 18064  15D9  1D03               	btfss	3,2
 18065  15DA  2DE1               	goto	l13049
 18066  15DB  30E8               	movlw	232
 18067  15DC  022C               	subwf	___q31^(0+128),w
 18068  15DD  3003               	movlw	3
 18069  15DE  3B2D               	subwfb	(___q31+1)^(0+128),w
 18070  15DF  1C03               	btfss	3,0
 18071  15E0  2DE9               	goto	l13051
 18072  15E1                     l13049:	
 18073  15E1  3000               	movlw	0
 18074  15E2  00AF               	movwf	(___q31+3)^(0+128)
 18075  15E3  3000               	movlw	0
 18076  15E4  00AE               	movwf	(___q31+2)^(0+128)
 18077  15E5  3003               	movlw	3
 18078  15E6  00AD               	movwf	(___q31+1)^(0+128)
 18079  15E7  30E7               	movlw	231
 18080  15E8  00AC               	movwf	___q31^(0+128)
 18081  15E9                     l13051:	
 18082                           
 18083                           ;ui.c: 302: ui_uint32_2_str(lcdBuf + 3, __q31, 3);
 18084  15E9  082F               	movf	(___q31+3)^(0+128),w
 18085  15EA  0020               	movlb	0	; select bank0
 18086  15EB  00B4               	movwf	ui_uint32_2_str@x+3
 18087  15EC  0021               	movlb	1	; select bank1
 18088  15ED  082E               	movf	(___q31+2)^(0+128),w
 18089  15EE  0020               	movlb	0	; select bank0
 18090  15EF  00B3               	movwf	ui_uint32_2_str@x+2
 18091  15F0  0021               	movlb	1	; select bank1
 18092  15F1  082D               	movf	(___q31+1)^(0+128),w
 18093  15F2  0020               	movlb	0	; select bank0
 18094  15F3  00B2               	movwf	ui_uint32_2_str@x+1
 18095  15F4  0021               	movlb	1	; select bank1
 18096  15F5  082C               	movf	___q31^(0+128),w
 18097  15F6  0020               	movlb	0	; select bank0
 18098  15F7  00B1               	movwf	ui_uint32_2_str@x
 18099  15F8  3003               	movlw	3
 18100  15F9  00BA               	movwf	??_ui_disp_balance_and_volume
 18101  15FA  083A               	movf	??_ui_disp_balance_and_volume,w
 18102  15FB  00B5               	movwf	ui_uint32_2_str@len
 18103  15FC  305B               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 18104  15FD  31A7  2747  3194   	fcall	_ui_uint32_2_str
 18105                           
 18106                           ;ui.c: 303: ret=ui_head_hide(lcdBuf, 3);
 18107  1600  3003               	movlw	3
 18108  1601  0020               	movlb	0	; select bank0
 18109  1602  00BA               	movwf	??_ui_disp_balance_and_volume
 18110  1603  083A               	movf	??_ui_disp_balance_and_volume,w
 18111  1604  00F3               	movwf	ui_head_hide@loc
 18112  1605  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 18113  1606  31B0  20AE  3194   	fcall	_ui_head_hide
 18114  1609  0020               	movlb	0	; select bank0
 18115  160A  00BB               	movwf	??_ui_disp_balance_and_volume+1
 18116  160B  083B               	movf	??_ui_disp_balance_and_volume+1,w
 18117  160C  00BC               	movwf	ui_disp_balance_and_volume@ret
 18118                           
 18119                           ;ui.c: 304: if(ret)
 18120  160D  083C               	movf	ui_disp_balance_and_volume@ret,w
 18121  160E  1903               	btfsc	3,2
 18122  160F  2E1A               	goto	l13059
 18123                           
 18124                           ;ui.c: 305: lcdBuf[0+ret-1]='-';
 18125  1610  302D               	movlw	45
 18126  1611  00BA               	movwf	??_ui_disp_balance_and_volume
 18127  1612  083C               	movf	ui_disp_balance_and_volume@ret,w
 18128  1613  3EFF               	addlw	255
 18129  1614  3E58               	addlw	(low (_lcdBuf| (0+256)))& (0+255)
 18130  1615  0086               	movwf	6
 18131  1616  3001               	movlw	1	; select bank2/3
 18132  1617  0087               	movwf	7
 18133  1618  083A               	movf	??_ui_disp_balance_and_volume,w
 18134  1619  0081               	movwf	1
 18135  161A                     l13059:	
 18136                           
 18137                           ;ui.c: 306: }
 18138                           ;ui.c: 307: lcd_clear_buffer();
 18139  161A  31BB  233F  3194   	fcall	_lcd_clear_buffer
 18140                           
 18141                           ;ui.c: 308: lcd_disp_cln(1);
 18142  161D  3001               	movlw	1
 18143  161E  31BD  25F4  3194   	fcall	_lcd_disp_cln
 18144                           
 18145                           ;ui.c: 309: lcd_disp_dp(4,1);
 18146  1621  0020               	movlb	0	; select bank0
 18147  1622  01B2               	clrf	lcd_disp_dp@show
 18148  1623  0AB2               	incf	lcd_disp_dp@show,f
 18149  1624  3004               	movlw	4
 18150  1625  31AC  245F  3194   	fcall	_lcd_disp_dp
 18151                           
 18152                           ;ui.c: 311: lcd_disp_str(lcdBuf);
 18153  1628  3058               	movlw	low _lcdBuf
 18154  1629  0020               	movlb	0	; select bank0
 18155  162A  00A2               	movwf	lcd_disp_str@str
 18156  162B  3001               	movlw	high _lcdBuf
 18157  162C  00A3               	movwf	lcd_disp_str@str+1
 18158  162D  31A8  20C5         	fcall	_lcd_disp_str
 18159  162F  0008               	return
 18160  1630                     __end_of_ui_disp_balance_and_volume:	
 18161                           
 18162                           	psect	text41
 18163  2747                     __ptext41:	
 18164 ;; *************** function _ui_uint32_2_str *****************
 18165 ;; Defined at:
 18166 ;;		line 25 in file "src/api/ui.c"
 18167 ;; Parameters:    Size  Location     Type
 18168 ;;  buf             1    wreg     PTR unsigned char 
 18169 ;;		 -> lcdBuf(9), 
 18170 ;;  x               4   17[BANK0 ] long 
 18171 ;;  len             1   21[BANK0 ] unsigned char 
 18172 ;; Auto vars:     Size  Location     Type
 18173 ;;  buf             1    7[COMMON] PTR unsigned char 
 18174 ;;		 -> lcdBuf(9), 
 18175 ;; Return value:  Size  Location     Type
 18176 ;;                  1    wreg      void 
 18177 ;; Registers used:
 18178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18179 ;; Tracked objects:
 18180 ;;		On entry : 0/0
 18181 ;;		On exit  : 0/0
 18182 ;;		Unchanged: 0/0
 18183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18184 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18185 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18186 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18187 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0
 18188 ;;Total ram usage:       10 bytes
 18189 ;; Hardware stack levels used:    1
 18190 ;; Hardware stack levels required when called:    4
 18191 ;; This function calls:
 18192 ;;		___aldiv
 18193 ;;		___almod
 18194 ;;		_m_math_pow
 18195 ;; This function is called by:
 18196 ;;		_ui_disp_flow
 18197 ;;		_ui_disp_totale_v
 18198 ;;		_ui_disp_transfer_money
 18199 ;;		_ui_disp_balance_and_volume
 18200 ;;		_ui_disp_set_line
 18201 ;;		_ui_disp_set_price
 18202 ;;		_ui_disp_set_calib
 18203 ;; This function uses a non-reentrant model
 18204 ;;
 18205                           
 18206                           
 18207                           ;psect for function _ui_uint32_2_str
 18208  2747                     _ui_uint32_2_str:	
 18209                           
 18210                           ;incstack = 0
 18211                           ; Regs used in _ui_uint32_2_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18212                           ;ui_uint32_2_str@buf stored from wreg
 18213  2747  00F7               	movwf	ui_uint32_2_str@buf
 18214                           
 18215                           ;ui.c: 27: if (!len)return;
 18216  2748  0020               	movlb	0	; select bank0
 18217  2749  0835               	movf	ui_uint32_2_str@len,w
 18218  274A  1903               	btfsc	3,2
 18219  274B  0008               	return
 18220                           
 18221                           ;ui.c: 28: __t32 = m_math_pow(10, len);
 18222  274C  3000               	movlw	0
 18223  274D  00AB               	movwf	m_math_pow@x+3
 18224  274E  3000               	movlw	0
 18225  274F  00AA               	movwf	m_math_pow@x+2
 18226  2750  3000               	movlw	0
 18227  2751  00A9               	movwf	m_math_pow@x+1
 18228  2752  300A               	movlw	10
 18229  2753  00A8               	movwf	m_math_pow@x
 18230  2754  0835               	movf	ui_uint32_2_str@len,w
 18231  2755  00B6               	movwf	??_ui_uint32_2_str
 18232  2756  0836               	movf	??_ui_uint32_2_str,w
 18233  2757  00AC               	movwf	m_math_pow@y
 18234  2758  31B6  26B3  31A7   	fcall	_m_math_pow
 18235  275B  0020               	movlb	0	; select bank0
 18236  275C  082B               	movf	?_m_math_pow+3,w
 18237  275D  0021               	movlb	1	; select bank1
 18238  275E  00B7               	movwf	(___t32+3)^(0+128)
 18239  275F  0020               	movlb	0	; select bank0
 18240  2760  082A               	movf	?_m_math_pow+2,w
 18241  2761  0021               	movlb	1	; select bank1
 18242  2762  00B6               	movwf	(___t32+2)^(0+128)
 18243  2763  0020               	movlb	0	; select bank0
 18244  2764  0829               	movf	?_m_math_pow+1,w
 18245  2765  0021               	movlb	1	; select bank1
 18246  2766  00B5               	movwf	(___t32+1)^(0+128)
 18247  2767  0020               	movlb	0	; select bank0
 18248  2768  0828               	movf	?_m_math_pow,w
 18249  2769  0021               	movlb	1	; select bank1
 18250  276A  00B4               	movwf	___t32^(0+128)
 18251                           
 18252                           ;ui.c: 29: if (x >= __t32 - 1)x = __t32 - 1;
 18253  276B  30FF               	movlw	255
 18254  276C  0020               	movlb	0	; select bank0
 18255  276D  00B6               	movwf	??_ui_uint32_2_str
 18256  276E  30FF               	movlw	255
 18257  276F  00B7               	movwf	??_ui_uint32_2_str+1
 18258  2770  30FF               	movlw	255
 18259  2771  00B8               	movwf	??_ui_uint32_2_str+2
 18260  2772  30FF               	movlw	255
 18261  2773  00B9               	movwf	??_ui_uint32_2_str+3
 18262  2774  0021               	movlb	1	; select bank1
 18263  2775  0834               	movf	___t32^(0+128),w
 18264  2776  0020               	movlb	0	; select bank0
 18265  2777  07B6               	addwf	??_ui_uint32_2_str,f
 18266  2778  0021               	movlb	1	; select bank1
 18267  2779  0835               	movf	(___t32+1)^(0+128),w
 18268  277A  0020               	movlb	0	; select bank0
 18269  277B  3DB7               	addwfc	??_ui_uint32_2_str+1,f
 18270  277C  0021               	movlb	1	; select bank1
 18271  277D  0836               	movf	(___t32+2)^(0+128),w
 18272  277E  0020               	movlb	0	; select bank0
 18273  277F  3DB8               	addwfc	??_ui_uint32_2_str+2,f
 18274  2780  0021               	movlb	1	; select bank1
 18275  2781  0837               	movf	(___t32+3)^(0+128),w
 18276  2782  0020               	movlb	0	; select bank0
 18277  2783  3DB9               	addwfc	??_ui_uint32_2_str+3,f
 18278  2784  0839               	movf	??_ui_uint32_2_str+3,w
 18279  2785  0234               	subwf	ui_uint32_2_str@x+3,w
 18280  2786  1D03               	skipz
 18281  2787  2F92               	goto	u11295
 18282  2788  0838               	movf	??_ui_uint32_2_str+2,w
 18283  2789  0233               	subwf	ui_uint32_2_str@x+2,w
 18284  278A  1D03               	skipz
 18285  278B  2F92               	goto	u11295
 18286  278C  0837               	movf	??_ui_uint32_2_str+1,w
 18287  278D  0232               	subwf	ui_uint32_2_str@x+1,w
 18288  278E  1D03               	skipz
 18289  278F  2F92               	goto	u11295
 18290  2790  0836               	movf	??_ui_uint32_2_str,w
 18291  2791  0231               	subwf	ui_uint32_2_str@x,w
 18292  2792                     u11295:	
 18293  2792  1C03               	skipc
 18294  2793  2FA8               	goto	l12789
 18295  2794  30FF               	movlw	255
 18296  2795  0021               	movlb	1	; select bank1
 18297  2796  0734               	addwf	___t32^(0+128),w
 18298  2797  0020               	movlb	0	; select bank0
 18299  2798  00B1               	movwf	ui_uint32_2_str@x
 18300  2799  30FF               	movlw	255
 18301  279A  0021               	movlb	1	; select bank1
 18302  279B  3D35               	addwfc	(___t32+1)^(0+128),w
 18303  279C  0020               	movlb	0	; select bank0
 18304  279D  00B2               	movwf	ui_uint32_2_str@x+1
 18305  279E  30FF               	movlw	255
 18306  279F  0021               	movlb	1	; select bank1
 18307  27A0  3D36               	addwfc	(___t32+2)^(0+128),w
 18308  27A1  0020               	movlb	0	; select bank0
 18309  27A2  00B3               	movwf	ui_uint32_2_str@x+2
 18310  27A3  30FF               	movlw	255
 18311  27A4  0021               	movlb	1	; select bank1
 18312  27A5  3D37               	addwfc	(___t32+3)^(0+128),w
 18313  27A6  0020               	movlb	0	; select bank0
 18314  27A7  00B4               	movwf	ui_uint32_2_str@x+3
 18315  27A8                     l12789:	
 18316                           ;ui.c: 30: while (len--) {
 18317                           
 18318  27A8  3001               	movlw	1
 18319  27A9  02B5               	subwf	ui_uint32_2_str@len,f
 18320  27AA  0A35               	incf	ui_uint32_2_str@len,w
 18321  27AB  1903               	btfsc	3,2
 18322  27AC  0008               	return
 18323                           
 18324                           ;ui.c: 31: __t32 = x % 10;
 18325  27AD  3000               	movlw	0
 18326  27AE  00A3               	movwf	___almod@divisor+3
 18327  27AF  3000               	movlw	0
 18328  27B0  00A2               	movwf	___almod@divisor+2
 18329  27B1  3000               	movlw	0
 18330  27B2  00A1               	movwf	___almod@divisor+1
 18331  27B3  300A               	movlw	10
 18332  27B4  00A0               	movwf	___almod@divisor
 18333  27B5  0834               	movf	ui_uint32_2_str@x+3,w
 18334  27B6  00A7               	movwf	___almod@dividend+3
 18335  27B7  0833               	movf	ui_uint32_2_str@x+2,w
 18336  27B8  00A6               	movwf	___almod@dividend+2
 18337  27B9  0832               	movf	ui_uint32_2_str@x+1,w
 18338  27BA  00A5               	movwf	___almod@dividend+1
 18339  27BB  0831               	movf	ui_uint32_2_str@x,w
 18340  27BC  00A4               	movwf	___almod@dividend
 18341  27BD  31AC  24C5  31A7   	fcall	___almod
 18342  27C0  0020               	movlb	0	; select bank0
 18343  27C1  0823               	movf	?___almod+3,w
 18344  27C2  0021               	movlb	1	; select bank1
 18345  27C3  00B7               	movwf	(___t32+3)^(0+128)
 18346  27C4  0020               	movlb	0	; select bank0
 18347  27C5  0822               	movf	?___almod+2,w
 18348  27C6  0021               	movlb	1	; select bank1
 18349  27C7  00B6               	movwf	(___t32+2)^(0+128)
 18350  27C8  0020               	movlb	0	; select bank0
 18351  27C9  0821               	movf	?___almod+1,w
 18352  27CA  0021               	movlb	1	; select bank1
 18353  27CB  00B5               	movwf	(___t32+1)^(0+128)
 18354  27CC  0020               	movlb	0	; select bank0
 18355  27CD  0820               	movf	?___almod,w
 18356  27CE  0021               	movlb	1	; select bank1
 18357  27CF  00B4               	movwf	___t32^(0+128)
 18358                           
 18359                           ;ui.c: 32: *buf-- = hexTable[__t32];
 18360  27D0  0835               	movf	(___t32+1)^(0+128),w
 18361  27D1  0085               	movwf	5
 18362  27D2  0834               	movf	___t32^(0+128),w
 18363  27D3  0084               	movwf	4
 18364  27D4  3069               	movlw	low (_hexTable| (0+32768))
 18365  27D5  0784               	addwf	4,f
 18366  27D6  30B8               	movlw	high (_hexTable| (0+32768))
 18367  27D7  3D85               	addwfc	5,f
 18368  27D8  0800               	movf	0,w	;code access
 18369  27D9  0020               	movlb	0	; select bank0
 18370  27DA  00B6               	movwf	??_ui_uint32_2_str
 18371  27DB  0877               	movf	ui_uint32_2_str@buf,w
 18372  27DC  0086               	movwf	6
 18373  27DD  3001               	movlw	1	; select bank2/3
 18374  27DE  0087               	movwf	7
 18375  27DF  0836               	movf	??_ui_uint32_2_str,w
 18376  27E0  0081               	movwf	1
 18377  27E1  3001               	movlw	1
 18378  27E2  02F7               	subwf	ui_uint32_2_str@buf,f
 18379                           
 18380                           ;ui.c: 33: x /= 10;
 18381  27E3  3000               	movlw	0
 18382  27E4  00A3               	movwf	___aldiv@divisor+3
 18383  27E5  3000               	movlw	0
 18384  27E6  00A2               	movwf	___aldiv@divisor+2
 18385  27E7  3000               	movlw	0
 18386  27E8  00A1               	movwf	___aldiv@divisor+1
 18387  27E9  300A               	movlw	10
 18388  27EA  00A0               	movwf	___aldiv@divisor
 18389  27EB  0834               	movf	ui_uint32_2_str@x+3,w
 18390  27EC  00A7               	movwf	___aldiv@dividend+3
 18391  27ED  0833               	movf	ui_uint32_2_str@x+2,w
 18392  27EE  00A6               	movwf	___aldiv@dividend+2
 18393  27EF  0832               	movf	ui_uint32_2_str@x+1,w
 18394  27F0  00A5               	movwf	___aldiv@dividend+1
 18395  27F1  0831               	movf	ui_uint32_2_str@x,w
 18396  27F2  00A4               	movwf	___aldiv@dividend
 18397  27F3  31A0  2013  31A7   	fcall	___aldiv
 18398  27F6  0020               	movlb	0	; select bank0
 18399  27F7  0823               	movf	?___aldiv+3,w
 18400  27F8  00B4               	movwf	ui_uint32_2_str@x+3
 18401  27F9  0822               	movf	?___aldiv+2,w
 18402  27FA  00B3               	movwf	ui_uint32_2_str@x+2
 18403  27FB  0821               	movf	?___aldiv+1,w
 18404  27FC  00B2               	movwf	ui_uint32_2_str@x+1
 18405  27FD  0820               	movf	?___aldiv,w
 18406  27FE  00B1               	movwf	ui_uint32_2_str@x
 18407  27FF  2FA8               	goto	l12789
 18408  2800                     __end_of_ui_uint32_2_str:	
 18409                           
 18410                           	psect	text42
 18411  36B3                     __ptext42:	
 18412 ;; *************** function _m_math_pow *****************
 18413 ;; Defined at:
 18414 ;;		line 116 in file "src/depend/m_string.c"
 18415 ;; Parameters:    Size  Location     Type
 18416 ;;  x               4    8[BANK0 ] long 
 18417 ;;  y               1   12[BANK0 ] unsigned char 
 18418 ;; Auto vars:     Size  Location     Type
 18419 ;;  ret             4   13[BANK0 ] long 
 18420 ;; Return value:  Size  Location     Type
 18421 ;;                  4    8[BANK0 ] long 
 18422 ;; Registers used:
 18423 ;;		wreg, status,2, status,0, pclath, cstack
 18424 ;; Tracked objects:
 18425 ;;		On entry : 0/0
 18426 ;;		On exit  : 0/0
 18427 ;;		Unchanged: 0/0
 18428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18429 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18430 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18432 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0
 18433 ;;Total ram usage:        9 bytes
 18434 ;; Hardware stack levels used:    1
 18435 ;; Hardware stack levels required when called:    3
 18436 ;; This function calls:
 18437 ;;		___lmul
 18438 ;; This function is called by:
 18439 ;;		_ui_uint32_2_str
 18440 ;; This function uses a non-reentrant model
 18441 ;;
 18442                           
 18443                           
 18444                           ;psect for function _m_math_pow
 18445  36B3                     _m_math_pow:	
 18446                           
 18447                           ;m_string.c: 118: int32_t ret=1;
 18448                           
 18449                           ;incstack = 0
 18450                           ; Regs used in _m_math_pow: [wreg+status,2+status,0+pclath+cstack]
 18451  36B3  3000               	movlw	0
 18452  36B4  0020               	movlb	0	; select bank0
 18453  36B5  00B0               	movwf	m_math_pow@ret+3
 18454  36B6  3000               	movlw	0
 18455  36B7  00AF               	movwf	m_math_pow@ret+2
 18456  36B8  3000               	movlw	0
 18457  36B9  00AE               	movwf	m_math_pow@ret+1
 18458  36BA  3001               	movlw	1
 18459  36BB  00AD               	movwf	m_math_pow@ret
 18460                           
 18461                           ;m_string.c: 119: if(y==0)return 1;
 18462  36BC  082C               	movf	m_math_pow@y,w
 18463  36BD  1D03               	btfss	3,2
 18464  36BE  2EE4               	goto	l12627
 18465  36BF  3000               	movlw	0
 18466  36C0  00AB               	movwf	?_m_math_pow+3
 18467  36C1  3000               	movlw	0
 18468  36C2  00AA               	movwf	?_m_math_pow+2
 18469  36C3  3000               	movlw	0
 18470  36C4  00A9               	movwf	?_m_math_pow+1
 18471  36C5  3001               	movlw	1
 18472  36C6  00A8               	movwf	?_m_math_pow
 18473  36C7  0008               	return
 18474  36C8                     l12625:	
 18475                           ;m_string.c: 120: while(y--)
 18476                           
 18477                           
 18478                           ;m_string.c: 121: {
 18479                           ;m_string.c: 122: ret*=x;
 18480  36C8  082B               	movf	m_math_pow@x+3,w
 18481  36C9  00A3               	movwf	___lmul@multiplier+3
 18482  36CA  082A               	movf	m_math_pow@x+2,w
 18483  36CB  00A2               	movwf	___lmul@multiplier+2
 18484  36CC  0829               	movf	m_math_pow@x+1,w
 18485  36CD  00A1               	movwf	___lmul@multiplier+1
 18486  36CE  0828               	movf	m_math_pow@x,w
 18487  36CF  00A0               	movwf	___lmul@multiplier
 18488  36D0  0830               	movf	m_math_pow@ret+3,w
 18489  36D1  00A7               	movwf	___lmul@multiplicand+3
 18490  36D2  082F               	movf	m_math_pow@ret+2,w
 18491  36D3  00A6               	movwf	___lmul@multiplicand+2
 18492  36D4  082E               	movf	m_math_pow@ret+1,w
 18493  36D5  00A5               	movwf	___lmul@multiplicand+1
 18494  36D6  082D               	movf	m_math_pow@ret,w
 18495  36D7  00A4               	movwf	___lmul@multiplicand
 18496  36D8  31B3  235B  31B6   	fcall	___lmul
 18497  36DB  0020               	movlb	0	; select bank0
 18498  36DC  0823               	movf	?___lmul+3,w
 18499  36DD  00B0               	movwf	m_math_pow@ret+3
 18500  36DE  0822               	movf	?___lmul+2,w
 18501  36DF  00AF               	movwf	m_math_pow@ret+2
 18502  36E0  0821               	movf	?___lmul+1,w
 18503  36E1  00AE               	movwf	m_math_pow@ret+1
 18504  36E2  0820               	movf	?___lmul,w
 18505  36E3  00AD               	movwf	m_math_pow@ret
 18506  36E4                     l12627:	
 18507  36E4  3001               	movlw	1
 18508  36E5  02AC               	subwf	m_math_pow@y,f
 18509  36E6  0A2C               	incf	m_math_pow@y,w
 18510  36E7  1D03               	btfss	3,2
 18511  36E8  2EC8               	goto	l12625
 18512                           
 18513                           ;m_string.c: 123: }
 18514                           ;m_string.c: 124: return ret;
 18515  36E9  0830               	movf	m_math_pow@ret+3,w
 18516  36EA  00AB               	movwf	?_m_math_pow+3
 18517  36EB  082F               	movf	m_math_pow@ret+2,w
 18518  36EC  00AA               	movwf	?_m_math_pow+2
 18519  36ED  082E               	movf	m_math_pow@ret+1,w
 18520  36EE  00A9               	movwf	?_m_math_pow+1
 18521  36EF  082D               	movf	m_math_pow@ret,w
 18522  36F0  00A8               	movwf	?_m_math_pow
 18523  36F1  0008               	return
 18524  36F2                     __end_of_m_math_pow:	
 18525                           
 18526                           	psect	text43
 18527  2CC5                     __ptext43:	
 18528 ;; *************** function ___almod *****************
 18529 ;; Defined at:
 18530 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 18531 ;; Parameters:    Size  Location     Type
 18532 ;;  divisor         4    0[BANK0 ] long 
 18533 ;;  dividend        4    4[BANK0 ] long 
 18534 ;; Auto vars:     Size  Location     Type
 18535 ;;  sign            1    5[COMMON] unsigned char 
 18536 ;;  counter         1    4[COMMON] unsigned char 
 18537 ;; Return value:  Size  Location     Type
 18538 ;;                  4    0[BANK0 ] long 
 18539 ;; Registers used:
 18540 ;;		wreg, status,2, status,0
 18541 ;; Tracked objects:
 18542 ;;		On entry : 0/0
 18543 ;;		On exit  : 0/0
 18544 ;;		Unchanged: 0/0
 18545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18546 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 18547 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18548 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18549 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0
 18550 ;;Total ram usage:       11 bytes
 18551 ;; Hardware stack levels used:    1
 18552 ;; Hardware stack levels required when called:    2
 18553 ;; This function calls:
 18554 ;;		Nothing
 18555 ;; This function is called by:
 18556 ;;		_ui_uint32_2_str
 18557 ;; This function uses a non-reentrant model
 18558 ;;
 18559                           
 18560                           
 18561                           ;psect for function ___almod
 18562  2CC5                     ___almod:	
 18563                           
 18564                           ;incstack = 0
 18565                           ; Regs used in ___almod: [wreg+status,2+status,0]
 18566  2CC5  01F5               	clrf	___almod@sign
 18567  2CC6  0020               	movlb	0	; select bank0
 18568  2CC7  1FA7               	btfss	___almod@dividend+3,7
 18569  2CC8  2CD6               	goto	l2765
 18570  2CC9  09A4               	comf	___almod@dividend,f
 18571  2CCA  09A5               	comf	___almod@dividend+1,f
 18572  2CCB  09A6               	comf	___almod@dividend+2,f
 18573  2CCC  09A7               	comf	___almod@dividend+3,f
 18574  2CCD  0AA4               	incf	___almod@dividend,f
 18575  2CCE  1903               	skipnz
 18576  2CCF  0AA5               	incf	___almod@dividend+1,f
 18577  2CD0  1903               	skipnz
 18578  2CD1  0AA6               	incf	___almod@dividend+2,f
 18579  2CD2  1903               	skipnz
 18580  2CD3  0AA7               	incf	___almod@dividend+3,f
 18581  2CD4  01F5               	clrf	___almod@sign
 18582  2CD5  0AF5               	incf	___almod@sign,f
 18583  2CD6                     l2765:	
 18584  2CD6  1FA3               	btfss	___almod@divisor+3,7
 18585  2CD7  2CE3               	goto	l12747
 18586  2CD8  09A0               	comf	___almod@divisor,f
 18587  2CD9  09A1               	comf	___almod@divisor+1,f
 18588  2CDA  09A2               	comf	___almod@divisor+2,f
 18589  2CDB  09A3               	comf	___almod@divisor+3,f
 18590  2CDC  0AA0               	incf	___almod@divisor,f
 18591  2CDD  1903               	skipnz
 18592  2CDE  0AA1               	incf	___almod@divisor+1,f
 18593  2CDF  1903               	skipnz
 18594  2CE0  0AA2               	incf	___almod@divisor+2,f
 18595  2CE1  1903               	skipnz
 18596  2CE2  0AA3               	incf	___almod@divisor+3,f
 18597  2CE3                     l12747:	
 18598  2CE3  0823               	movf	___almod@divisor+3,w
 18599  2CE4  0422               	iorwf	___almod@divisor+2,w
 18600  2CE5  0421               	iorwf	___almod@divisor+1,w
 18601  2CE6  0420               	iorwf	___almod@divisor,w
 18602  2CE7  1903               	skipnz
 18603  2CE8  2D1C               	goto	l12763
 18604  2CE9  01F4               	clrf	___almod@counter
 18605  2CEA  0AF4               	incf	___almod@counter,f
 18606  2CEB                     l12753:	
 18607  2CEB  1BA3               	btfsc	___almod@divisor+3,7
 18608  2CEC  2CF9               	goto	l12755
 18609  2CED  3001               	movlw	1
 18610  2CEE                     u11225:	
 18611  2CEE  35A0               	lslf	___almod@divisor,f
 18612  2CEF  0DA1               	rlf	___almod@divisor+1,f
 18613  2CF0  0DA2               	rlf	___almod@divisor+2,f
 18614  2CF1  0DA3               	rlf	___almod@divisor+3,f
 18615  2CF2  0B89               	decfsz	9,f
 18616  2CF3  2CEE               	goto	u11225
 18617  2CF4  3001               	movlw	1
 18618  2CF5  00F3               	movwf	??___almod
 18619  2CF6  0873               	movf	??___almod,w
 18620  2CF7  07F4               	addwf	___almod@counter,f
 18621  2CF8  2CEB               	goto	l12753
 18622  2CF9                     l12755:	
 18623  2CF9  0823               	movf	___almod@divisor+3,w
 18624  2CFA  0227               	subwf	___almod@dividend+3,w
 18625  2CFB  1D03               	skipz
 18626  2CFC  2D07               	goto	u11245
 18627  2CFD  0822               	movf	___almod@divisor+2,w
 18628  2CFE  0226               	subwf	___almod@dividend+2,w
 18629  2CFF  1D03               	skipz
 18630  2D00  2D07               	goto	u11245
 18631  2D01  0821               	movf	___almod@divisor+1,w
 18632  2D02  0225               	subwf	___almod@dividend+1,w
 18633  2D03  1D03               	skipz
 18634  2D04  2D07               	goto	u11245
 18635  2D05  0820               	movf	___almod@divisor,w
 18636  2D06  0224               	subwf	___almod@dividend,w
 18637  2D07                     u11245:	
 18638  2D07  1C03               	skipc
 18639  2D08  2D11               	goto	l12759
 18640  2D09  0820               	movf	___almod@divisor,w
 18641  2D0A  02A4               	subwf	___almod@dividend,f
 18642  2D0B  0821               	movf	___almod@divisor+1,w
 18643  2D0C  3BA5               	subwfb	___almod@dividend+1,f
 18644  2D0D  0822               	movf	___almod@divisor+2,w
 18645  2D0E  3BA6               	subwfb	___almod@dividend+2,f
 18646  2D0F  0823               	movf	___almod@divisor+3,w
 18647  2D10  3BA7               	subwfb	___almod@dividend+3,f
 18648  2D11                     l12759:	
 18649  2D11  3001               	movlw	1
 18650  2D12                     u11255:	
 18651  2D12  36A3               	lsrf	___almod@divisor+3,f
 18652  2D13  0CA2               	rrf	___almod@divisor+2,f
 18653  2D14  0CA1               	rrf	___almod@divisor+1,f
 18654  2D15  0CA0               	rrf	___almod@divisor,f
 18655  2D16  0B89               	decfsz	9,f
 18656  2D17  2D12               	goto	u11255
 18657  2D18  3001               	movlw	1
 18658  2D19  02F4               	subwf	___almod@counter,f
 18659  2D1A  1D03               	btfss	3,2
 18660  2D1B  2CF9               	goto	l12755
 18661  2D1C                     l12763:	
 18662  2D1C  0875               	movf	___almod@sign,w
 18663  2D1D  1903               	btfsc	3,2
 18664  2D1E  2D2A               	goto	l12767
 18665  2D1F  09A4               	comf	___almod@dividend,f
 18666  2D20  09A5               	comf	___almod@dividend+1,f
 18667  2D21  09A6               	comf	___almod@dividend+2,f
 18668  2D22  09A7               	comf	___almod@dividend+3,f
 18669  2D23  0AA4               	incf	___almod@dividend,f
 18670  2D24  1903               	skipnz
 18671  2D25  0AA5               	incf	___almod@dividend+1,f
 18672  2D26  1903               	skipnz
 18673  2D27  0AA6               	incf	___almod@dividend+2,f
 18674  2D28  1903               	skipnz
 18675  2D29  0AA7               	incf	___almod@dividend+3,f
 18676  2D2A                     l12767:	
 18677  2D2A  0827               	movf	___almod@dividend+3,w
 18678  2D2B  00A3               	movwf	?___almod+3
 18679  2D2C  0826               	movf	___almod@dividend+2,w
 18680  2D2D  00A2               	movwf	?___almod+2
 18681  2D2E  0825               	movf	___almod@dividend+1,w
 18682  2D2F  00A1               	movwf	?___almod+1
 18683  2D30  0824               	movf	___almod@dividend,w
 18684  2D31  00A0               	movwf	?___almod
 18685  2D32  0008               	return
 18686  2D33                     __end_of___almod:	
 18687                           
 18688                           	psect	text44
 18689  30AE                     __ptext44:	
 18690 ;; *************** function _ui_head_hide *****************
 18691 ;; Defined at:
 18692 ;;		line 36 in file "src/api/ui.c"
 18693 ;; Parameters:    Size  Location     Type
 18694 ;;  str             1    wreg     PTR unsigned char 
 18695 ;;		 -> lcdBuf(9), 
 18696 ;;  loc             1    3[COMMON] unsigned char 
 18697 ;; Auto vars:     Size  Location     Type
 18698 ;;  str             1    6[COMMON] PTR unsigned char 
 18699 ;;		 -> lcdBuf(9), 
 18700 ;;  ret             1    5[COMMON] unsigned char 
 18701 ;; Return value:  Size  Location     Type
 18702 ;;                  1    wreg      unsigned char 
 18703 ;; Registers used:
 18704 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18705 ;; Tracked objects:
 18706 ;;		On entry : 0/0
 18707 ;;		On exit  : 0/0
 18708 ;;		Unchanged: 0/0
 18709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18710 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18713 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18714 ;;Total ram usage:        4 bytes
 18715 ;; Hardware stack levels used:    1
 18716 ;; Hardware stack levels required when called:    2
 18717 ;; This function calls:
 18718 ;;		Nothing
 18719 ;; This function is called by:
 18720 ;;		_ui_disp_flow
 18721 ;;		_ui_disp_totale_v
 18722 ;;		_ui_disp_transfer_money
 18723 ;;		_ui_disp_balance_and_volume
 18724 ;;		_ui_disp_set_price
 18725 ;;		_ui_disp_set_calib
 18726 ;; This function uses a non-reentrant model
 18727 ;;
 18728                           
 18729                           
 18730                           ;psect for function _ui_head_hide
 18731  30AE                     _ui_head_hide:	
 18732                           
 18733                           ;incstack = 0
 18734                           ; Regs used in _ui_head_hide: [wreg+fsr1l+fsr1h+status,2+status,0]
 18735                           ;ui_head_hide@str stored from wreg
 18736  30AE  00F6               	movwf	ui_head_hide@str
 18737                           
 18738                           ;ui.c: 37: uint8_t ret=0;
 18739  30AF  01F5               	clrf	ui_head_hide@ret
 18740  30B0                     l12803:	
 18741                           ;ui.c: 38: while (loc--) {
 18742                           
 18743  30B0  3001               	movlw	1
 18744  30B1  02F3               	subwf	ui_head_hide@loc,f
 18745  30B2  0A73               	incf	ui_head_hide@loc,w
 18746  30B3  1903               	btfsc	3,2
 18747  30B4  28D6               	goto	l12805
 18748                           
 18749                           ;ui.c: 39: if (*str == '0' || *str == ' ') {
 18750  30B5  0876               	movf	ui_head_hide@str,w
 18751  30B6  0086               	movwf	6
 18752  30B7  3001               	movlw	1	; select bank2/3
 18753  30B8  0087               	movwf	7
 18754  30B9  3030               	movlw	48
 18755  30BA  0601               	xorwf	1,w
 18756  30BB  1903               	btfsc	3,2
 18757  30BC  28C5               	goto	l12797
 18758  30BD  0876               	movf	ui_head_hide@str,w
 18759  30BE  0086               	movwf	6
 18760  30BF  3001               	movlw	1	; select bank2/3
 18761  30C0  0087               	movwf	7
 18762  30C1  3020               	movlw	32
 18763  30C2  0601               	xorwf	1,w
 18764  30C3  1D03               	btfss	3,2
 18765  30C4  28D6               	goto	l12805
 18766  30C5                     l12797:	
 18767                           
 18768                           ;ui.c: 40: *str++ = ' ';
 18769  30C5  3020               	movlw	32
 18770  30C6  00F4               	movwf	??_ui_head_hide
 18771  30C7  0876               	movf	ui_head_hide@str,w
 18772  30C8  0086               	movwf	6
 18773  30C9  3001               	movlw	1	; select bank2/3
 18774  30CA  0087               	movwf	7
 18775  30CB  0874               	movf	??_ui_head_hide,w
 18776  30CC  0081               	movwf	1
 18777  30CD  3001               	movlw	1
 18778  30CE  00F4               	movwf	??_ui_head_hide
 18779  30CF  0874               	movf	??_ui_head_hide,w
 18780  30D0  07F6               	addwf	ui_head_hide@str,f
 18781                           
 18782                           ;ui.c: 41: ret++;
 18783  30D1  3001               	movlw	1
 18784  30D2  00F4               	movwf	??_ui_head_hide
 18785  30D3  0874               	movf	??_ui_head_hide,w
 18786  30D4  07F5               	addwf	ui_head_hide@ret,f
 18787                           
 18788                           ;ui.c: 42: } else {
 18789  30D5  28B0               	goto	l12803
 18790  30D6                     l12805:	
 18791                           ;ui.c: 43: break;
 18792                           
 18793                           
 18794                           ;ui.c: 44: }
 18795                           ;ui.c: 45: }
 18796                           ;ui.c: 46: return ret;
 18797  30D6  0875               	movf	ui_head_hide@ret,w
 18798  30D7  0008               	return
 18799  30D8                     __end_of_ui_head_hide:	
 18800                           
 18801                           	psect	text45
 18802  3B28                     __ptext45:	
 18803 ;; *************** function _ui_disp_flow_error *****************
 18804 ;; Defined at:
 18805 ;;		line 136 in file "src/api/ui.c"
 18806 ;; Parameters:    Size  Location     Type
 18807 ;;		None
 18808 ;; Auto vars:     Size  Location     Type
 18809 ;;		None
 18810 ;; Return value:  Size  Location     Type
 18811 ;;                  1    wreg      void 
 18812 ;; Registers used:
 18813 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18814 ;; Tracked objects:
 18815 ;;		On entry : 0/0
 18816 ;;		On exit  : 0/0
 18817 ;;		Unchanged: 0/0
 18818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18822 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18823 ;;Total ram usage:        0 bytes
 18824 ;; Hardware stack levels used:    1
 18825 ;; Hardware stack levels required when called:    5
 18826 ;; This function calls:
 18827 ;;		_lcd_clear_buffer
 18828 ;;		_lcd_disp_str
 18829 ;; This function is called by:
 18830 ;;		_ui_disp_flow
 18831 ;;		_ui_disp_totale_v
 18832 ;;		_ui_disp_balance_and_volume
 18833 ;; This function uses a non-reentrant model
 18834 ;;
 18835                           
 18836                           
 18837                           ;psect for function _ui_disp_flow_error
 18838  3B28                     _ui_disp_flow_error:	
 18839                           
 18840                           ;ui.c: 138: lcd_clear_buffer();
 18841                           
 18842                           ;incstack = 0
 18843                           ; Regs used in _ui_disp_flow_error: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18844  3B28  31BB  233F  31BB   	fcall	_lcd_clear_buffer
 18845                           
 18846                           ;ui.c: 139: lcd_disp_str((uint8_t*)"  error ");
 18847  3B2B  30D0               	movlw	low (STR_3| (0+32768))
 18848  3B2C  0020               	movlb	0	; select bank0
 18849  3B2D  00A2               	movwf	lcd_disp_str@str
 18850  3B2E  30B8               	movlw	high (STR_3| (0+32768))
 18851  3B2F  00A3               	movwf	lcd_disp_str@str+1
 18852  3B30  31A8  20C5         	fcall	_lcd_disp_str
 18853  3B32  0008               	return
 18854  3B33                     __end_of_ui_disp_flow_error:	
 18855                           
 18856                           	psect	text46
 18857  28C5                     __ptext46:	
 18858 ;; *************** function _lcd_disp_str *****************
 18859 ;; Defined at:
 18860 ;;		line 180 in file "src/driver/lcd.c"
 18861 ;; Parameters:    Size  Location     Type
 18862 ;;  str             2    2[BANK0 ] PTR unsigned char 
 18863 ;;		 -> STR_24(9), STR_22(9), STR_21(9), STR_20(9), 
 18864 ;;		 -> STR_19(9), STR_18(9), STR_17(9), STR_16(9), 
 18865 ;;		 -> STR_15(9), STR_7(9), STR_4(9), STR_3(9), 
 18866 ;;		 -> STR_1(9), lcdBuf(9), 
 18867 ;; Auto vars:     Size  Location     Type
 18868 ;;  index           1    6[BANK0 ] unsigned char 
 18869 ;;  loc             1    5[BANK0 ] unsigned char 
 18870 ;; Return value:  Size  Location     Type
 18871 ;;                  1    wreg      void 
 18872 ;; Registers used:
 18873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18874 ;; Tracked objects:
 18875 ;;		On entry : 0/0
 18876 ;;		On exit  : 0/0
 18877 ;;		Unchanged: 0/0
 18878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18879 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18881 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18882 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18883 ;;Total ram usage:        5 bytes
 18884 ;; Hardware stack levels used:    1
 18885 ;; Hardware stack levels required when called:    4
 18886 ;; This function calls:
 18887 ;;		_lcd_disp_code
 18888 ;;		_lcd_disp_refresh
 18889 ;; This function is called by:
 18890 ;;		_ui_disp_str_num
 18891 ;;		_ui_disp_str_num_ex
 18892 ;;		_ui_start_display
 18893 ;;		_ui_disp_flow_error
 18894 ;;		_ui_disp_flow
 18895 ;;		_ui_disp_totale_v
 18896 ;;		_ui_disp_transfer_money
 18897 ;;		_ui_disp_balance_and_volume
 18898 ;;		_ui_disp_set_line
 18899 ;;		_ui_disp_set_price
 18900 ;;		_ui_disp_set_calib
 18901 ;;		_ui_disp_set_imd_flow_uint
 18902 ;;		_ui_disp_menu
 18903 ;;		_rfid_comm_process
 18904 ;;		_ui_disp_recharge
 18905 ;;		_ui_disp_clear_card_id
 18906 ;; This function uses a non-reentrant model
 18907 ;;
 18908                           
 18909                           
 18910                           ;psect for function _lcd_disp_str
 18911  28C5                     _lcd_disp_str:	
 18912                           
 18913                           ;lcd.c: 182: uint8_t loc=0;
 18914                           
 18915                           ;incstack = 0
 18916                           ; Regs used in _lcd_disp_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18917  28C5  0020               	movlb	0	; select bank0
 18918  28C6  01A5               	clrf	lcd_disp_str@loc
 18919                           
 18920                           ;lcd.c: 183: uint8_t index=0;
 18921  28C7  01A6               	clrf	lcd_disp_str@index
 18922  28C8                     l12659:	
 18923                           ;lcd.c: 184: while(*str!='\0'){
 18924                           
 18925  28C8  0822               	movf	lcd_disp_str@str,w
 18926  28C9  0084               	movwf	4
 18927  28CA  0823               	movf	lcd_disp_str@str+1,w
 18928  28CB  0085               	movwf	5
 18929  28CC  0012               	moviw fsr0++
 18930  28CD  1903               	btfsc	3,2
 18931  28CE  290A               	goto	l12661
 18932                           
 18933                           ;lcd.c: 185: for(index=0;index<40;index++){
 18934  28CF  01A6               	clrf	lcd_disp_str@index
 18935  28D0  3028               	movlw	40
 18936  28D1  0226               	subwf	lcd_disp_str@index,w
 18937  28D2  1803               	btfsc	3,0
 18938  28D3  28ED               	goto	l12651
 18939  28D4                     l12643:	
 18940                           
 18941                           ;lcd.c: 186: if(*str==LCDDigitalIndexTable[index])break;
 18942  28D4  0826               	movf	lcd_disp_str@index,w
 18943  28D5  3E00               	addlw	low (_LCDDigitalIndexTable| (0+32768))
 18944  28D6  0084               	movwf	4
 18945  28D7  30B8               	movlw	high (_LCDDigitalIndexTable| (0+32768))
 18946  28D8  1803               	skipnc
 18947  28D9  3E01               	addlw	1
 18948  28DA  0085               	movwf	5
 18949  28DB  0800               	movf	0,w	;code access
 18950  28DC  00A4               	movwf	??_lcd_disp_str
 18951  28DD  0822               	movf	lcd_disp_str@str,w
 18952  28DE  0084               	movwf	4
 18953  28DF  0823               	movf	lcd_disp_str@str+1,w
 18954  28E0  0085               	movwf	5
 18955  28E1  0800               	movf	0,w	;code access
 18956  28E2  0624               	xorwf	??_lcd_disp_str,w
 18957  28E3  1903               	btfsc	3,2
 18958  28E4  28ED               	goto	l12651
 18959  28E5  3001               	movlw	1
 18960  28E6  00A4               	movwf	??_lcd_disp_str
 18961  28E7  0824               	movf	??_lcd_disp_str,w
 18962  28E8  07A6               	addwf	lcd_disp_str@index,f
 18963  28E9  3028               	movlw	40
 18964  28EA  0226               	subwf	lcd_disp_str@index,w
 18965  28EB  1C03               	skipc
 18966  28EC  28D4               	goto	l12643
 18967  28ED                     l12651:	
 18968                           
 18969                           ;lcd.c: 187: }
 18970                           ;lcd.c: 188: if(index<40)lcd_disp_code(LCDDigitalTable[index],loc);
 18971  28ED  3028               	movlw	40
 18972  28EE  0226               	subwf	lcd_disp_str@index,w
 18973  28EF  1803               	skipnc
 18974  28F0  2900               	goto	l12655
 18975  28F1  0825               	movf	lcd_disp_str@loc,w
 18976  28F2  00A4               	movwf	??_lcd_disp_str
 18977  28F3  0824               	movf	??_lcd_disp_str,w
 18978  28F4  00F5               	movwf	lcd_disp_code@loc
 18979  28F5  0826               	movf	lcd_disp_str@index,w
 18980  28F6  3E29               	addlw	low (_LCDDigitalTable| (0+32768))
 18981  28F7  0084               	movwf	4
 18982  28F8  30B8               	movlw	high (_LCDDigitalTable| (0+32768))
 18983  28F9  1803               	skipnc
 18984  28FA  3E01               	addlw	1
 18985  28FB  0085               	movwf	5
 18986  28FC  0800               	movf	0,w	;code access
 18987  28FD  31B1  2103  31A8   	fcall	_lcd_disp_code
 18988  2900                     l12655:	
 18989                           
 18990                           ;lcd.c: 189: str++;
 18991  2900  3001               	movlw	1
 18992  2901  0020               	movlb	0	; select bank0
 18993  2902  07A2               	addwf	lcd_disp_str@str,f
 18994  2903  3000               	movlw	0
 18995  2904  3DA3               	addwfc	lcd_disp_str@str+1,f
 18996                           
 18997                           ;lcd.c: 190: loc++;
 18998  2905  3001               	movlw	1
 18999  2906  00A4               	movwf	??_lcd_disp_str
 19000  2907  0824               	movf	??_lcd_disp_str,w
 19001  2908  07A5               	addwf	lcd_disp_str@loc,f
 19002  2909  28C8               	goto	l12659
 19003  290A                     l12661:	
 19004                           
 19005                           ;lcd.c: 191: }
 19006                           ;lcd.c: 192: lcd_disp_refresh();
 19007  290A  31BB  23DD         	fcall	_lcd_disp_refresh
 19008  290C  0008               	return
 19009  290D                     __end_of_lcd_disp_str:	
 19010                           
 19011                           	psect	text47
 19012  3BDD                     __ptext47:	
 19013 ;; *************** function _lcd_disp_refresh *****************
 19014 ;; Defined at:
 19015 ;;		line 202 in file "src/driver/lcd.c"
 19016 ;; Parameters:    Size  Location     Type
 19017 ;;		None
 19018 ;; Auto vars:     Size  Location     Type
 19019 ;;		None
 19020 ;; Return value:  Size  Location     Type
 19021 ;;                  1    wreg      void 
 19022 ;; Registers used:
 19023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19024 ;; Tracked objects:
 19025 ;;		On entry : 0/0
 19026 ;;		On exit  : 0/0
 19027 ;;		Unchanged: 0/0
 19028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19033 ;;Total ram usage:        1 bytes
 19034 ;; Hardware stack levels used:    1
 19035 ;; Hardware stack levels required when called:    3
 19036 ;; This function calls:
 19037 ;;		_m_mem_cpy_len
 19038 ;; This function is called by:
 19039 ;;		_ui_disp_menu
 19040 ;;		_lcd_disp_str
 19041 ;; This function uses a non-reentrant model
 19042 ;;
 19043                           
 19044                           
 19045                           ;psect for function _lcd_disp_refresh
 19046  3BDD                     _lcd_disp_refresh:	
 19047                           
 19048                           ;lcd.c: 204: m_mem_cpy_len(pLcdReg,pLCD,24);
 19049                           
 19050                           ;incstack = 0
 19051                           ; Regs used in _lcd_disp_refresh: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19052  3BDD  0022               	movlb	2	; select bank2
 19053  3BDE  086A               	movf	(_pLcdReg+1)^(0+256),w
 19054  3BDF  00F4               	movwf	m_mem_cpy_len@d+1
 19055  3BE0  0869               	movf	_pLcdReg^(0+256),w
 19056  3BE1  00F3               	movwf	m_mem_cpy_len@d
 19057  3BE2  30A4               	movlw	low _pLCD
 19058  3BE3  00F5               	movwf	m_mem_cpy_len@s
 19059  3BE4  3001               	movlw	high _pLCD
 19060  3BE5  00F6               	movwf	m_mem_cpy_len@s+1
 19061  3BE6  3018               	movlw	24
 19062  3BE7  0020               	movlb	0	; select bank0
 19063  3BE8  00A1               	movwf	??_lcd_disp_refresh
 19064  3BE9  0821               	movf	??_lcd_disp_refresh,w
 19065  3BEA  00F7               	movwf	m_mem_cpy_len@len
 19066  3BEB  31BD  25A3         	fcall	_m_mem_cpy_len
 19067  3BED  0008               	return
 19068  3BEE                     __end_of_lcd_disp_refresh:	
 19069                           
 19070                           	psect	text48
 19071  3103                     __ptext48:	
 19072 ;; *************** function _lcd_disp_code *****************
 19073 ;; Defined at:
 19074 ;;		line 157 in file "src/driver/lcd.c"
 19075 ;; Parameters:    Size  Location     Type
 19076 ;;  code            1    wreg     unsigned char 
 19077 ;;  loc             1    5[COMMON] unsigned char 
 19078 ;; Auto vars:     Size  Location     Type
 19079 ;;  code            1    6[COMMON] unsigned char 
 19080 ;; Return value:  Size  Location     Type
 19081 ;;                  1    wreg      void 
 19082 ;; Registers used:
 19083 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19084 ;; Tracked objects:
 19085 ;;		On entry : 0/0
 19086 ;;		On exit  : 0/0
 19087 ;;		Unchanged: 0/0
 19088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19089 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19092 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19093 ;;Total ram usage:        2 bytes
 19094 ;; Hardware stack levels used:    1
 19095 ;; Hardware stack levels required when called:    3
 19096 ;; This function calls:
 19097 ;;		_lcd_disp_code_0
 19098 ;;		_lcd_disp_code_1
 19099 ;;		_lcd_disp_code_2
 19100 ;;		_lcd_disp_code_3
 19101 ;;		_lcd_disp_code_4
 19102 ;;		_lcd_disp_code_5
 19103 ;;		_lcd_disp_code_6
 19104 ;;		_lcd_disp_code_7
 19105 ;; This function is called by:
 19106 ;;		_lcd_disp_str
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           
 19111                           ;psect for function _lcd_disp_code
 19112  3103                     _lcd_disp_code:	
 19113                           
 19114                           ;incstack = 0
 19115                           ; Regs used in _lcd_disp_code: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19116                           ;lcd_disp_code@code stored from wreg
 19117  3103  00F6               	movwf	lcd_disp_code@code
 19118                           
 19119                           ;lcd.c: 159: switch(loc){
 19120  3104  2925               	goto	l12503
 19121  3105                     l12485:	
 19122                           ;lcd.c: 160: case 0:lcd_disp_code_0(code);break;
 19123                           
 19124  3105  0876               	movf	lcd_disp_code@code,w
 19125  3106  31B1  215D         	fcall	_lcd_disp_code_0
 19126  3108  0008               	return
 19127  3109                     l12487:	
 19128                           ;lcd.c: 161: case 1:lcd_disp_code_1(code);break;
 19129                           
 19130  3109  0876               	movf	lcd_disp_code@code,w
 19131  310A  31B1  218B         	fcall	_lcd_disp_code_1
 19132  310C  0008               	return
 19133  310D                     l12489:	
 19134                           ;lcd.c: 162: case 2:lcd_disp_code_2(code);break;
 19135                           
 19136  310D  0876               	movf	lcd_disp_code@code,w
 19137  310E  31B1  21B9         	fcall	_lcd_disp_code_2
 19138  3110  0008               	return
 19139  3111                     l12491:	
 19140                           ;lcd.c: 163: case 3:lcd_disp_code_3(code);break;
 19141                           
 19142  3111  0876               	movf	lcd_disp_code@code,w
 19143  3112  31B1  21E7         	fcall	_lcd_disp_code_3
 19144  3114  0008               	return
 19145  3115                     l12493:	
 19146                           ;lcd.c: 164: case 4:lcd_disp_code_4(code);break;
 19147                           
 19148  3115  0876               	movf	lcd_disp_code@code,w
 19149  3116  31B2  2215         	fcall	_lcd_disp_code_4
 19150  3118  0008               	return
 19151  3119                     l12495:	
 19152                           ;lcd.c: 165: case 5:lcd_disp_code_5(code);break;
 19153                           
 19154  3119  0876               	movf	lcd_disp_code@code,w
 19155  311A  31B2  2243         	fcall	_lcd_disp_code_5
 19156  311C  0008               	return
 19157  311D                     l12497:	
 19158                           ;lcd.c: 166: case 6:lcd_disp_code_6(code);break;
 19159                           
 19160  311D  0876               	movf	lcd_disp_code@code,w
 19161  311E  31B2  2271         	fcall	_lcd_disp_code_6
 19162  3120  0008               	return
 19163  3121                     l12499:	
 19164                           ;lcd.c: 167: case 7:lcd_disp_code_7(code);break;
 19165                           
 19166  3121  0876               	movf	lcd_disp_code@code,w
 19167  3122  31B2  229F         	fcall	_lcd_disp_code_7
 19168                           
 19169                           ;lcd.c: 169: }
 19170                           
 19171                           ;lcd.c: 168: default:break;
 19172  3124  0008               	return
 19173  3125                     l12503:	
 19174  3125  0875               	movf	lcd_disp_code@loc,w
 19175                           
 19176                           ; Switch size 1, requested type "space"
 19177                           ; Number of cases is 8, Range of values is 0 to 7
 19178                           ; switch strategies available:
 19179                           ; Name         Instructions Cycles
 19180                           ; direct_byte           22     6 (fixed)
 19181                           ; simple_byte           25    13 (average)
 19182                           ; jumptable            260     6 (fixed)
 19183                           ;	Chosen strategy is direct_byte
 19184  3126  0084               	movwf	4
 19185  3127  3008               	movlw	8
 19186  3128  0204               	subwf	4,w
 19187  3129  1803               	skipnc
 19188  312A  0008               	return
 19189  312B  31B8               	movlp	high S17355
 19190  312C  3504               	lslf	4,w
 19191  312D  3E7A               	addlw	low S17355
 19192  312E  0082               	movwf	2
 19193  312F  0008               	return
 19194  3130                     __end_of_lcd_disp_code:	
 19195                           
 19196                           	psect	swtext1
 19197  387A                     __pswtext1:	
 19198  387A                     S17355:	
 19199  387A  31B1  2905         	ljmp	l12485
 19200  387C  31B1  2909         	ljmp	l12487
 19201  387E  31B1  290D         	ljmp	l12489
 19202  3880  31B1  2911         	ljmp	l12491
 19203  3882  31B1  2915         	ljmp	l12493
 19204  3884  31B1  2919         	ljmp	l12495
 19205  3886  31B1  291D         	ljmp	l12497
 19206  3888  31B1  2921         	ljmp	l12499
 19207                           
 19208                           	psect	text49
 19209  329F                     __ptext49:	
 19210 ;; *************** function _lcd_disp_code_7 *****************
 19211 ;; Defined at:
 19212 ;;		line 145 in file "src/driver/lcd.c"
 19213 ;; Parameters:    Size  Location     Type
 19214 ;;  code            1    wreg     unsigned char 
 19215 ;; Auto vars:     Size  Location     Type
 19216 ;;  code            1    4[COMMON] unsigned char 
 19217 ;; Return value:  Size  Location     Type
 19218 ;;                  1    wreg      void 
 19219 ;; Registers used:
 19220 ;;		wreg, status,2, status,0
 19221 ;; Tracked objects:
 19222 ;;		On entry : 0/0
 19223 ;;		On exit  : 0/0
 19224 ;;		Unchanged: 0/0
 19225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19228 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19229 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19230 ;;Total ram usage:        2 bytes
 19231 ;; Hardware stack levels used:    1
 19232 ;; Hardware stack levels required when called:    2
 19233 ;; This function calls:
 19234 ;;		Nothing
 19235 ;; This function is called by:
 19236 ;;		_lcd_disp_code
 19237 ;; This function uses a non-reentrant model
 19238 ;;
 19239                           
 19240                           
 19241                           ;psect for function _lcd_disp_code_7
 19242  329F                     _lcd_disp_code_7:	
 19243                           
 19244                           ;incstack = 0
 19245                           ; Regs used in _lcd_disp_code_7: [wreg+status,2+status,0]
 19246                           ;lcd_disp_code_7@code stored from wreg
 19247  329F  00F4               	movwf	lcd_disp_code_7@code
 19248                           
 19249                           ;lcd.c: 147: do{ pLCD[2] &= ~(1<<7); if(code&0x20){ pLCD[2] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19250  32A0  307F               	movlw	127
 19251  32A1  00F3               	movwf	??_lcd_disp_code_7
 19252  32A2  0873               	movf	??_lcd_disp_code_7,w
 19253  32A3  0023               	movlb	3	; select bank3
 19254  32A4  05A6               	andwf	(_pLCD^(0+384)+2),f
 19255  32A5  1AF4               	btfsc	lcd_disp_code_7@code,5
 19256  32A6  17A6               	bsf	(_pLCD^(0+384)+2),7
 19257                           
 19258                           ;lcd.c: 148: do{ pLCD[5] &= ~(1<<7); if(code&0x40){ pLCD[5] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19259  32A7  307F               	movlw	127
 19260  32A8  00F3               	movwf	??_lcd_disp_code_7
 19261  32A9  0873               	movf	??_lcd_disp_code_7,w
 19262  32AA  05A9               	andwf	(_pLCD^(0+384)+5),f
 19263  32AB  1B74               	btfsc	lcd_disp_code_7@code,6
 19264  32AC  17A9               	bsf	(_pLCD^(0+384)+5),7
 19265                           
 19266                           ;lcd.c: 149: do{ pLCD[8] &= ~(1<<7); if(code&0x10){ pLCD[8] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19267  32AD  307F               	movlw	127
 19268  32AE  00F3               	movwf	??_lcd_disp_code_7
 19269  32AF  0873               	movf	??_lcd_disp_code_7,w
 19270  32B0  05AC               	andwf	(_pLCD^(0+384)+8),f
 19271  32B1  1A74               	btfsc	lcd_disp_code_7@code,4
 19272  32B2  17AC               	bsf	(_pLCD^(0+384)+8),7
 19273                           
 19274                           ;lcd.c: 150: do{ pLCD[11] &= ~(1<<7); if(code&0x08){ pLCD[11] |= (1<<7); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19275  32B3  307F               	movlw	127
 19276  32B4  00F3               	movwf	??_lcd_disp_code_7
 19277  32B5  0873               	movf	??_lcd_disp_code_7,w
 19278  32B6  05AF               	andwf	(_pLCD^(0+384)+11),f
 19279  32B7  19F4               	btfsc	lcd_disp_code_7@code,3
 19280  32B8  17AF               	bsf	(_pLCD^(0+384)+11),7
 19281                           
 19282                           ;lcd.c: 152: do{ pLCD[2] &= ~(1<<6); if(code&0x01){ pLCD[2] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19283  32B9  30BF               	movlw	191
 19284  32BA  00F3               	movwf	??_lcd_disp_code_7
 19285  32BB  0873               	movf	??_lcd_disp_code_7,w
 19286  32BC  05A6               	andwf	(_pLCD^(0+384)+2),f
 19287  32BD  1874               	btfsc	lcd_disp_code_7@code,0
 19288  32BE  1726               	bsf	(_pLCD^(0+384)+2),6
 19289                           
 19290                           ;lcd.c: 153: do{ pLCD[5] &= ~(1<<6); if(code&0x02){ pLCD[5] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19291  32BF  30BF               	movlw	191
 19292  32C0  00F3               	movwf	??_lcd_disp_code_7
 19293  32C1  0873               	movf	??_lcd_disp_code_7,w
 19294  32C2  05A9               	andwf	(_pLCD^(0+384)+5),f
 19295  32C3  18F4               	btfsc	lcd_disp_code_7@code,1
 19296  32C4  1729               	bsf	(_pLCD^(0+384)+5),6
 19297                           
 19298                           ;lcd.c: 154: do{ pLCD[8] &= ~(1<<6); if(code&0x04){ pLCD[8] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19299  32C5  30BF               	movlw	191
 19300  32C6  00F3               	movwf	??_lcd_disp_code_7
 19301  32C7  0873               	movf	??_lcd_disp_code_7,w
 19302  32C8  05AC               	andwf	(_pLCD^(0+384)+8),f
 19303  32C9  1D74               	btfss	lcd_disp_code_7@code,2
 19304  32CA  0008               	return
 19305  32CB  172C               	bsf	(_pLCD^(0+384)+8),6
 19306  32CC  0008               	return
 19307  32CD                     __end_of_lcd_disp_code_7:	
 19308                           
 19309                           	psect	text50
 19310  3271                     __ptext50:	
 19311 ;; *************** function _lcd_disp_code_6 *****************
 19312 ;; Defined at:
 19313 ;;		line 133 in file "src/driver/lcd.c"
 19314 ;; Parameters:    Size  Location     Type
 19315 ;;  code            1    wreg     unsigned char 
 19316 ;; Auto vars:     Size  Location     Type
 19317 ;;  code            1    4[COMMON] unsigned char 
 19318 ;; Return value:  Size  Location     Type
 19319 ;;                  1    wreg      void 
 19320 ;; Registers used:
 19321 ;;		wreg, status,2, status,0
 19322 ;; Tracked objects:
 19323 ;;		On entry : 0/0
 19324 ;;		On exit  : 0/0
 19325 ;;		Unchanged: 0/0
 19326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19328 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19329 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19330 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19331 ;;Total ram usage:        2 bytes
 19332 ;; Hardware stack levels used:    1
 19333 ;; Hardware stack levels required when called:    2
 19334 ;; This function calls:
 19335 ;;		Nothing
 19336 ;; This function is called by:
 19337 ;;		_lcd_disp_code
 19338 ;; This function uses a non-reentrant model
 19339 ;;
 19340                           
 19341                           
 19342                           ;psect for function _lcd_disp_code_6
 19343  3271                     _lcd_disp_code_6:	
 19344                           
 19345                           ;incstack = 0
 19346                           ; Regs used in _lcd_disp_code_6: [wreg+status,2+status,0]
 19347                           ;lcd_disp_code_6@code stored from wreg
 19348  3271  00F4               	movwf	lcd_disp_code_6@code
 19349                           
 19350                           ;lcd.c: 135: do{ pLCD[12] &= ~(1<<1); if(code&0x20){ pLCD[12] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19351  3272  30FD               	movlw	253
 19352  3273  00F3               	movwf	??_lcd_disp_code_6
 19353  3274  0873               	movf	??_lcd_disp_code_6,w
 19354  3275  0023               	movlb	3	; select bank3
 19355  3276  05B0               	andwf	(_pLCD^(0+384)+12),f
 19356  3277  1AF4               	btfsc	lcd_disp_code_6@code,5
 19357  3278  14B0               	bsf	(_pLCD^(0+384)+12),1
 19358                           
 19359                           ;lcd.c: 136: do{ pLCD[15] &= ~(1<<1); if(code&0x40){ pLCD[15] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19360  3279  30FD               	movlw	253
 19361  327A  00F3               	movwf	??_lcd_disp_code_6
 19362  327B  0873               	movf	??_lcd_disp_code_6,w
 19363  327C  05B3               	andwf	(_pLCD^(0+384)+15),f
 19364  327D  1B74               	btfsc	lcd_disp_code_6@code,6
 19365  327E  14B3               	bsf	(_pLCD^(0+384)+15),1
 19366                           
 19367                           ;lcd.c: 137: do{ pLCD[18] &= ~(1<<1); if(code&0x10){ pLCD[18] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19368  327F  30FD               	movlw	253
 19369  3280  00F3               	movwf	??_lcd_disp_code_6
 19370  3281  0873               	movf	??_lcd_disp_code_6,w
 19371  3282  05B6               	andwf	(_pLCD^(0+384)+18),f
 19372  3283  1A74               	btfsc	lcd_disp_code_6@code,4
 19373  3284  14B6               	bsf	(_pLCD^(0+384)+18),1
 19374                           
 19375                           ;lcd.c: 138: do{ pLCD[21] &= ~(1<<1); if(code&0x08){ pLCD[21] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19376  3285  30FD               	movlw	253
 19377  3286  00F3               	movwf	??_lcd_disp_code_6
 19378  3287  0873               	movf	??_lcd_disp_code_6,w
 19379  3288  05B9               	andwf	(_pLCD^(0+384)+21),f
 19380  3289  19F4               	btfsc	lcd_disp_code_6@code,3
 19381  328A  14B9               	bsf	(_pLCD^(0+384)+21),1
 19382                           
 19383                           ;lcd.c: 140: do{ pLCD[12] &= ~(1<<0); if(code&0x01){ pLCD[12] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19384  328B  30FE               	movlw	254
 19385  328C  00F3               	movwf	??_lcd_disp_code_6
 19386  328D  0873               	movf	??_lcd_disp_code_6,w
 19387  328E  05B0               	andwf	(_pLCD^(0+384)+12),f
 19388  328F  1874               	btfsc	lcd_disp_code_6@code,0
 19389  3290  1430               	bsf	(_pLCD^(0+384)+12),0
 19390                           
 19391                           ;lcd.c: 141: do{ pLCD[15] &= ~(1<<0); if(code&0x02){ pLCD[15] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19392  3291  30FE               	movlw	254
 19393  3292  00F3               	movwf	??_lcd_disp_code_6
 19394  3293  0873               	movf	??_lcd_disp_code_6,w
 19395  3294  05B3               	andwf	(_pLCD^(0+384)+15),f
 19396  3295  18F4               	btfsc	lcd_disp_code_6@code,1
 19397  3296  1433               	bsf	(_pLCD^(0+384)+15),0
 19398                           
 19399                           ;lcd.c: 142: do{ pLCD[18] &= ~(1<<0); if(code&0x04){ pLCD[18] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19400  3297  30FE               	movlw	254
 19401  3298  00F3               	movwf	??_lcd_disp_code_6
 19402  3299  0873               	movf	??_lcd_disp_code_6,w
 19403  329A  05B6               	andwf	(_pLCD^(0+384)+18),f
 19404  329B  1D74               	btfss	lcd_disp_code_6@code,2
 19405  329C  0008               	return
 19406  329D  1436               	bsf	(_pLCD^(0+384)+18),0
 19407  329E  0008               	return
 19408  329F                     __end_of_lcd_disp_code_6:	
 19409                           
 19410                           	psect	text51
 19411  3243                     __ptext51:	
 19412 ;; *************** function _lcd_disp_code_5 *****************
 19413 ;; Defined at:
 19414 ;;		line 121 in file "src/driver/lcd.c"
 19415 ;; Parameters:    Size  Location     Type
 19416 ;;  code            1    wreg     unsigned char 
 19417 ;; Auto vars:     Size  Location     Type
 19418 ;;  code            1    4[COMMON] unsigned char 
 19419 ;; Return value:  Size  Location     Type
 19420 ;;                  1    wreg      void 
 19421 ;; Registers used:
 19422 ;;		wreg, status,2, status,0
 19423 ;; Tracked objects:
 19424 ;;		On entry : 0/0
 19425 ;;		On exit  : 0/0
 19426 ;;		Unchanged: 0/0
 19427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19429 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19430 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19431 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19432 ;;Total ram usage:        2 bytes
 19433 ;; Hardware stack levels used:    1
 19434 ;; Hardware stack levels required when called:    2
 19435 ;; This function calls:
 19436 ;;		Nothing
 19437 ;; This function is called by:
 19438 ;;		_lcd_disp_code
 19439 ;; This function uses a non-reentrant model
 19440 ;;
 19441                           
 19442                           
 19443                           ;psect for function _lcd_disp_code_5
 19444  3243                     _lcd_disp_code_5:	
 19445                           
 19446                           ;incstack = 0
 19447                           ; Regs used in _lcd_disp_code_5: [wreg+status,2+status,0]
 19448                           ;lcd_disp_code_5@code stored from wreg
 19449  3243  00F4               	movwf	lcd_disp_code_5@code
 19450                           
 19451                           ;lcd.c: 123: do{ pLCD[14] &= ~(1<<5); if(code&0x20){ pLCD[14] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19452  3244  30DF               	movlw	223
 19453  3245  00F3               	movwf	??_lcd_disp_code_5
 19454  3246  0873               	movf	??_lcd_disp_code_5,w
 19455  3247  0023               	movlb	3	; select bank3
 19456  3248  05B2               	andwf	(_pLCD^(0+384)+14),f
 19457  3249  1AF4               	btfsc	lcd_disp_code_5@code,5
 19458  324A  16B2               	bsf	(_pLCD^(0+384)+14),5
 19459                           
 19460                           ;lcd.c: 124: do{ pLCD[17] &= ~(1<<5); if(code&0x40){ pLCD[17] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19461  324B  30DF               	movlw	223
 19462  324C  00F3               	movwf	??_lcd_disp_code_5
 19463  324D  0873               	movf	??_lcd_disp_code_5,w
 19464  324E  05B5               	andwf	(_pLCD^(0+384)+17),f
 19465  324F  1B74               	btfsc	lcd_disp_code_5@code,6
 19466  3250  16B5               	bsf	(_pLCD^(0+384)+17),5
 19467                           
 19468                           ;lcd.c: 125: do{ pLCD[20] &= ~(1<<5); if(code&0x10){ pLCD[20] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19469  3251  30DF               	movlw	223
 19470  3252  00F3               	movwf	??_lcd_disp_code_5
 19471  3253  0873               	movf	??_lcd_disp_code_5,w
 19472  3254  05B8               	andwf	(_pLCD^(0+384)+20),f
 19473  3255  1A74               	btfsc	lcd_disp_code_5@code,4
 19474  3256  16B8               	bsf	(_pLCD^(0+384)+20),5
 19475                           
 19476                           ;lcd.c: 126: do{ pLCD[23] &= ~(1<<5); if(code&0x08){ pLCD[23] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19477  3257  30DF               	movlw	223
 19478  3258  00F3               	movwf	??_lcd_disp_code_5
 19479  3259  0873               	movf	??_lcd_disp_code_5,w
 19480  325A  05BB               	andwf	(_pLCD^(0+384)+23),f
 19481  325B  19F4               	btfsc	lcd_disp_code_5@code,3
 19482  325C  16BB               	bsf	(_pLCD^(0+384)+23),5
 19483                           
 19484                           ;lcd.c: 128: do{ pLCD[12] &= ~(1<<2); if(code&0x01){ pLCD[12] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19485  325D  30FB               	movlw	251
 19486  325E  00F3               	movwf	??_lcd_disp_code_5
 19487  325F  0873               	movf	??_lcd_disp_code_5,w
 19488  3260  05B0               	andwf	(_pLCD^(0+384)+12),f
 19489  3261  1874               	btfsc	lcd_disp_code_5@code,0
 19490  3262  1530               	bsf	(_pLCD^(0+384)+12),2
 19491                           
 19492                           ;lcd.c: 129: do{ pLCD[15] &= ~(1<<2); if(code&0x02){ pLCD[15] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19493  3263  30FB               	movlw	251
 19494  3264  00F3               	movwf	??_lcd_disp_code_5
 19495  3265  0873               	movf	??_lcd_disp_code_5,w
 19496  3266  05B3               	andwf	(_pLCD^(0+384)+15),f
 19497  3267  18F4               	btfsc	lcd_disp_code_5@code,1
 19498  3268  1533               	bsf	(_pLCD^(0+384)+15),2
 19499                           
 19500                           ;lcd.c: 130: do{ pLCD[18] &= ~(1<<2); if(code&0x04){ pLCD[18] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19501  3269  30FB               	movlw	251
 19502  326A  00F3               	movwf	??_lcd_disp_code_5
 19503  326B  0873               	movf	??_lcd_disp_code_5,w
 19504  326C  05B6               	andwf	(_pLCD^(0+384)+18),f
 19505  326D  1D74               	btfss	lcd_disp_code_5@code,2
 19506  326E  0008               	return
 19507  326F  1536               	bsf	(_pLCD^(0+384)+18),2
 19508  3270  0008               	return
 19509  3271                     __end_of_lcd_disp_code_5:	
 19510                           
 19511                           	psect	text52
 19512  3215                     __ptext52:	
 19513 ;; *************** function _lcd_disp_code_4 *****************
 19514 ;; Defined at:
 19515 ;;		line 109 in file "src/driver/lcd.c"
 19516 ;; Parameters:    Size  Location     Type
 19517 ;;  code            1    wreg     unsigned char 
 19518 ;; Auto vars:     Size  Location     Type
 19519 ;;  code            1    4[COMMON] unsigned char 
 19520 ;; Return value:  Size  Location     Type
 19521 ;;                  1    wreg      void 
 19522 ;; Registers used:
 19523 ;;		wreg, status,2, status,0
 19524 ;; Tracked objects:
 19525 ;;		On entry : 0/0
 19526 ;;		On exit  : 0/0
 19527 ;;		Unchanged: 0/0
 19528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19530 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19532 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19533 ;;Total ram usage:        2 bytes
 19534 ;; Hardware stack levels used:    1
 19535 ;; Hardware stack levels required when called:    2
 19536 ;; This function calls:
 19537 ;;		Nothing
 19538 ;; This function is called by:
 19539 ;;		_lcd_disp_code
 19540 ;; This function uses a non-reentrant model
 19541 ;;
 19542                           
 19543                           
 19544                           ;psect for function _lcd_disp_code_4
 19545  3215                     _lcd_disp_code_4:	
 19546                           
 19547                           ;incstack = 0
 19548                           ; Regs used in _lcd_disp_code_4: [wreg+status,2+status,0]
 19549                           ;lcd_disp_code_4@code stored from wreg
 19550  3215  00F4               	movwf	lcd_disp_code_4@code
 19551                           
 19552                           ;lcd.c: 111: do{ pLCD[14] &= ~(1<<3); if(code&0x20){ pLCD[14] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19553  3216  30F7               	movlw	247
 19554  3217  00F3               	movwf	??_lcd_disp_code_4
 19555  3218  0873               	movf	??_lcd_disp_code_4,w
 19556  3219  0023               	movlb	3	; select bank3
 19557  321A  05B2               	andwf	(_pLCD^(0+384)+14),f
 19558  321B  1AF4               	btfsc	lcd_disp_code_4@code,5
 19559  321C  15B2               	bsf	(_pLCD^(0+384)+14),3
 19560                           
 19561                           ;lcd.c: 112: do{ pLCD[17] &= ~(1<<3); if(code&0x40){ pLCD[17] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19562  321D  30F7               	movlw	247
 19563  321E  00F3               	movwf	??_lcd_disp_code_4
 19564  321F  0873               	movf	??_lcd_disp_code_4,w
 19565  3220  05B5               	andwf	(_pLCD^(0+384)+17),f
 19566  3221  1B74               	btfsc	lcd_disp_code_4@code,6
 19567  3222  15B5               	bsf	(_pLCD^(0+384)+17),3
 19568                           
 19569                           ;lcd.c: 113: do{ pLCD[20] &= ~(1<<3); if(code&0x10){ pLCD[20] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19570  3223  30F7               	movlw	247
 19571  3224  00F3               	movwf	??_lcd_disp_code_4
 19572  3225  0873               	movf	??_lcd_disp_code_4,w
 19573  3226  05B8               	andwf	(_pLCD^(0+384)+20),f
 19574  3227  1A74               	btfsc	lcd_disp_code_4@code,4
 19575  3228  15B8               	bsf	(_pLCD^(0+384)+20),3
 19576                           
 19577                           ;lcd.c: 114: do{ pLCD[23] &= ~(1<<3); if(code&0x08){ pLCD[23] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19578  3229  30F7               	movlw	247
 19579  322A  00F3               	movwf	??_lcd_disp_code_4
 19580  322B  0873               	movf	??_lcd_disp_code_4,w
 19581  322C  05BB               	andwf	(_pLCD^(0+384)+23),f
 19582  322D  19F4               	btfsc	lcd_disp_code_4@code,3
 19583  322E  15BB               	bsf	(_pLCD^(0+384)+23),3
 19584                           
 19585                           ;lcd.c: 116: do{ pLCD[14] &= ~(1<<4); if(code&0x01){ pLCD[14] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19586  322F  30EF               	movlw	239
 19587  3230  00F3               	movwf	??_lcd_disp_code_4
 19588  3231  0873               	movf	??_lcd_disp_code_4,w
 19589  3232  05B2               	andwf	(_pLCD^(0+384)+14),f
 19590  3233  1874               	btfsc	lcd_disp_code_4@code,0
 19591  3234  1632               	bsf	(_pLCD^(0+384)+14),4
 19592                           
 19593                           ;lcd.c: 117: do{ pLCD[17] &= ~(1<<4); if(code&0x02){ pLCD[17] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19594  3235  30EF               	movlw	239
 19595  3236  00F3               	movwf	??_lcd_disp_code_4
 19596  3237  0873               	movf	??_lcd_disp_code_4,w
 19597  3238  05B5               	andwf	(_pLCD^(0+384)+17),f
 19598  3239  18F4               	btfsc	lcd_disp_code_4@code,1
 19599  323A  1635               	bsf	(_pLCD^(0+384)+17),4
 19600                           
 19601                           ;lcd.c: 118: do{ pLCD[20] &= ~(1<<4); if(code&0x04){ pLCD[20] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19602  323B  30EF               	movlw	239
 19603  323C  00F3               	movwf	??_lcd_disp_code_4
 19604  323D  0873               	movf	??_lcd_disp_code_4,w
 19605  323E  05B8               	andwf	(_pLCD^(0+384)+20),f
 19606  323F  1D74               	btfss	lcd_disp_code_4@code,2
 19607  3240  0008               	return
 19608  3241  1638               	bsf	(_pLCD^(0+384)+20),4
 19609  3242  0008               	return
 19610  3243                     __end_of_lcd_disp_code_4:	
 19611                           
 19612                           	psect	text53
 19613  31E7                     __ptext53:	
 19614 ;; *************** function _lcd_disp_code_3 *****************
 19615 ;; Defined at:
 19616 ;;		line 97 in file "src/driver/lcd.c"
 19617 ;; Parameters:    Size  Location     Type
 19618 ;;  code            1    wreg     unsigned char 
 19619 ;; Auto vars:     Size  Location     Type
 19620 ;;  code            1    4[COMMON] unsigned char 
 19621 ;; Return value:  Size  Location     Type
 19622 ;;                  1    wreg      void 
 19623 ;; Registers used:
 19624 ;;		wreg, status,2, status,0
 19625 ;; Tracked objects:
 19626 ;;		On entry : 0/0
 19627 ;;		On exit  : 0/0
 19628 ;;		Unchanged: 0/0
 19629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19631 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19632 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19633 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19634 ;;Total ram usage:        2 bytes
 19635 ;; Hardware stack levels used:    1
 19636 ;; Hardware stack levels required when called:    2
 19637 ;; This function calls:
 19638 ;;		Nothing
 19639 ;; This function is called by:
 19640 ;;		_lcd_disp_code
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           
 19645                           ;psect for function _lcd_disp_code_3
 19646  31E7                     _lcd_disp_code_3:	
 19647                           
 19648                           ;incstack = 0
 19649                           ; Regs used in _lcd_disp_code_3: [wreg+status,2+status,0]
 19650                           ;lcd_disp_code_3@code stored from wreg
 19651  31E7  00F4               	movwf	lcd_disp_code_3@code
 19652                           
 19653                           ;lcd.c: 99: do{ pLCD[2] &= ~(1<<4); if(code&0x20){ pLCD[2] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19654  31E8  30EF               	movlw	239
 19655  31E9  00F3               	movwf	??_lcd_disp_code_3
 19656  31EA  0873               	movf	??_lcd_disp_code_3,w
 19657  31EB  0023               	movlb	3	; select bank3
 19658  31EC  05A6               	andwf	(_pLCD^(0+384)+2),f
 19659  31ED  1AF4               	btfsc	lcd_disp_code_3@code,5
 19660  31EE  1626               	bsf	(_pLCD^(0+384)+2),4
 19661                           
 19662                           ;lcd.c: 100: do{ pLCD[5] &= ~(1<<4); if(code&0x40){ pLCD[5] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19663  31EF  30EF               	movlw	239
 19664  31F0  00F3               	movwf	??_lcd_disp_code_3
 19665  31F1  0873               	movf	??_lcd_disp_code_3,w
 19666  31F2  05A9               	andwf	(_pLCD^(0+384)+5),f
 19667  31F3  1B74               	btfsc	lcd_disp_code_3@code,6
 19668  31F4  1629               	bsf	(_pLCD^(0+384)+5),4
 19669                           
 19670                           ;lcd.c: 101: do{ pLCD[8] &= ~(1<<4); if(code&0x10){ pLCD[8] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19671  31F5  30EF               	movlw	239
 19672  31F6  00F3               	movwf	??_lcd_disp_code_3
 19673  31F7  0873               	movf	??_lcd_disp_code_3,w
 19674  31F8  05AC               	andwf	(_pLCD^(0+384)+8),f
 19675  31F9  1A74               	btfsc	lcd_disp_code_3@code,4
 19676  31FA  162C               	bsf	(_pLCD^(0+384)+8),4
 19677                           
 19678                           ;lcd.c: 102: do{ pLCD[11] &= ~(1<<4); if(code&0x08){ pLCD[11] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19679  31FB  30EF               	movlw	239
 19680  31FC  00F3               	movwf	??_lcd_disp_code_3
 19681  31FD  0873               	movf	??_lcd_disp_code_3,w
 19682  31FE  05AF               	andwf	(_pLCD^(0+384)+11),f
 19683  31FF  19F4               	btfsc	lcd_disp_code_3@code,3
 19684  3200  162F               	bsf	(_pLCD^(0+384)+11),4
 19685                           
 19686                           ;lcd.c: 104: do{ pLCD[2] &= ~(1<<5); if(code&0x01){ pLCD[2] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19687  3201  30DF               	movlw	223
 19688  3202  00F3               	movwf	??_lcd_disp_code_3
 19689  3203  0873               	movf	??_lcd_disp_code_3,w
 19690  3204  05A6               	andwf	(_pLCD^(0+384)+2),f
 19691  3205  1874               	btfsc	lcd_disp_code_3@code,0
 19692  3206  16A6               	bsf	(_pLCD^(0+384)+2),5
 19693                           
 19694                           ;lcd.c: 105: do{ pLCD[5] &= ~(1<<5); if(code&0x02){ pLCD[5] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19695  3207  30DF               	movlw	223
 19696  3208  00F3               	movwf	??_lcd_disp_code_3
 19697  3209  0873               	movf	??_lcd_disp_code_3,w
 19698  320A  05A9               	andwf	(_pLCD^(0+384)+5),f
 19699  320B  18F4               	btfsc	lcd_disp_code_3@code,1
 19700  320C  16A9               	bsf	(_pLCD^(0+384)+5),5
 19701                           
 19702                           ;lcd.c: 106: do{ pLCD[8] &= ~(1<<5); if(code&0x04){ pLCD[8] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19703  320D  30DF               	movlw	223
 19704  320E  00F3               	movwf	??_lcd_disp_code_3
 19705  320F  0873               	movf	??_lcd_disp_code_3,w
 19706  3210  05AC               	andwf	(_pLCD^(0+384)+8),f
 19707  3211  1D74               	btfss	lcd_disp_code_3@code,2
 19708  3212  0008               	return
 19709  3213  16AC               	bsf	(_pLCD^(0+384)+8),5
 19710  3214  0008               	return
 19711  3215                     __end_of_lcd_disp_code_3:	
 19712                           
 19713                           	psect	text54
 19714  31B9                     __ptext54:	
 19715 ;; *************** function _lcd_disp_code_2 *****************
 19716 ;; Defined at:
 19717 ;;		line 85 in file "src/driver/lcd.c"
 19718 ;; Parameters:    Size  Location     Type
 19719 ;;  code            1    wreg     unsigned char 
 19720 ;; Auto vars:     Size  Location     Type
 19721 ;;  code            1    4[COMMON] unsigned char 
 19722 ;; Return value:  Size  Location     Type
 19723 ;;                  1    wreg      void 
 19724 ;; Registers used:
 19725 ;;		wreg, status,2, status,0
 19726 ;; Tracked objects:
 19727 ;;		On entry : 0/0
 19728 ;;		On exit  : 0/0
 19729 ;;		Unchanged: 0/0
 19730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19735 ;;Total ram usage:        2 bytes
 19736 ;; Hardware stack levels used:    1
 19737 ;; Hardware stack levels required when called:    2
 19738 ;; This function calls:
 19739 ;;		Nothing
 19740 ;; This function is called by:
 19741 ;;		_lcd_disp_code
 19742 ;; This function uses a non-reentrant model
 19743 ;;
 19744                           
 19745                           
 19746                           ;psect for function _lcd_disp_code_2
 19747  31B9                     _lcd_disp_code_2:	
 19748                           
 19749                           ;incstack = 0
 19750                           ; Regs used in _lcd_disp_code_2: [wreg+status,2+status,0]
 19751                           ;lcd_disp_code_2@code stored from wreg
 19752  31B9  00F4               	movwf	lcd_disp_code_2@code
 19753                           
 19754                           ;lcd.c: 87: do{ pLCD[0] &= ~(1<<3); if(code&0x20){ pLCD[0] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19755  31BA  30F7               	movlw	247
 19756  31BB  00F3               	movwf	??_lcd_disp_code_2
 19757  31BC  0873               	movf	??_lcd_disp_code_2,w
 19758  31BD  0023               	movlb	3	; select bank3
 19759  31BE  05A4               	andwf	_pLCD^(0+384),f
 19760  31BF  1AF4               	btfsc	lcd_disp_code_2@code,5
 19761  31C0  15A4               	bsf	_pLCD^(0+384),3
 19762                           
 19763                           ;lcd.c: 88: do{ pLCD[3] &= ~(1<<3); if(code&0x40){ pLCD[3] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19764  31C1  30F7               	movlw	247
 19765  31C2  00F3               	movwf	??_lcd_disp_code_2
 19766  31C3  0873               	movf	??_lcd_disp_code_2,w
 19767  31C4  05A7               	andwf	(_pLCD^(0+384)+3),f
 19768  31C5  1B74               	btfsc	lcd_disp_code_2@code,6
 19769  31C6  15A7               	bsf	(_pLCD^(0+384)+3),3
 19770                           
 19771                           ;lcd.c: 89: do{ pLCD[6] &= ~(1<<3); if(code&0x10){ pLCD[6] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19772  31C7  30F7               	movlw	247
 19773  31C8  00F3               	movwf	??_lcd_disp_code_2
 19774  31C9  0873               	movf	??_lcd_disp_code_2,w
 19775  31CA  05AA               	andwf	(_pLCD^(0+384)+6),f
 19776  31CB  1A74               	btfsc	lcd_disp_code_2@code,4
 19777  31CC  15AA               	bsf	(_pLCD^(0+384)+6),3
 19778                           
 19779                           ;lcd.c: 90: do{ pLCD[9] &= ~(1<<3); if(code&0x08){ pLCD[9] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19780  31CD  30F7               	movlw	247
 19781  31CE  00F3               	movwf	??_lcd_disp_code_2
 19782  31CF  0873               	movf	??_lcd_disp_code_2,w
 19783  31D0  05AD               	andwf	(_pLCD^(0+384)+9),f
 19784  31D1  19F4               	btfsc	lcd_disp_code_2@code,3
 19785  31D2  15AD               	bsf	(_pLCD^(0+384)+9),3
 19786                           
 19787                           ;lcd.c: 92: do{ pLCD[0] &= ~(1<<4); if(code&0x01){ pLCD[0] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19788  31D3  30EF               	movlw	239
 19789  31D4  00F3               	movwf	??_lcd_disp_code_2
 19790  31D5  0873               	movf	??_lcd_disp_code_2,w
 19791  31D6  05A4               	andwf	_pLCD^(0+384),f
 19792  31D7  1874               	btfsc	lcd_disp_code_2@code,0
 19793  31D8  1624               	bsf	_pLCD^(0+384),4
 19794                           
 19795                           ;lcd.c: 93: do{ pLCD[3] &= ~(1<<4); if(code&0x02){ pLCD[3] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19796  31D9  30EF               	movlw	239
 19797  31DA  00F3               	movwf	??_lcd_disp_code_2
 19798  31DB  0873               	movf	??_lcd_disp_code_2,w
 19799  31DC  05A7               	andwf	(_pLCD^(0+384)+3),f
 19800  31DD  18F4               	btfsc	lcd_disp_code_2@code,1
 19801  31DE  1627               	bsf	(_pLCD^(0+384)+3),4
 19802                           
 19803                           ;lcd.c: 94: do{ pLCD[6] &= ~(1<<4); if(code&0x04){ pLCD[6] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19804  31DF  30EF               	movlw	239
 19805  31E0  00F3               	movwf	??_lcd_disp_code_2
 19806  31E1  0873               	movf	??_lcd_disp_code_2,w
 19807  31E2  05AA               	andwf	(_pLCD^(0+384)+6),f
 19808  31E3  1D74               	btfss	lcd_disp_code_2@code,2
 19809  31E4  0008               	return
 19810  31E5  162A               	bsf	(_pLCD^(0+384)+6),4
 19811  31E6  0008               	return
 19812  31E7                     __end_of_lcd_disp_code_2:	
 19813                           
 19814                           	psect	text55
 19815  318B                     __ptext55:	
 19816 ;; *************** function _lcd_disp_code_1 *****************
 19817 ;; Defined at:
 19818 ;;		line 73 in file "src/driver/lcd.c"
 19819 ;; Parameters:    Size  Location     Type
 19820 ;;  code            1    wreg     unsigned char 
 19821 ;; Auto vars:     Size  Location     Type
 19822 ;;  code            1    4[COMMON] unsigned char 
 19823 ;; Return value:  Size  Location     Type
 19824 ;;                  1    wreg      void 
 19825 ;; Registers used:
 19826 ;;		wreg, status,2, status,0
 19827 ;; Tracked objects:
 19828 ;;		On entry : 0/0
 19829 ;;		On exit  : 0/0
 19830 ;;		Unchanged: 0/0
 19831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19833 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19834 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19835 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19836 ;;Total ram usage:        2 bytes
 19837 ;; Hardware stack levels used:    1
 19838 ;; Hardware stack levels required when called:    2
 19839 ;; This function calls:
 19840 ;;		Nothing
 19841 ;; This function is called by:
 19842 ;;		_lcd_disp_code
 19843 ;; This function uses a non-reentrant model
 19844 ;;
 19845                           
 19846                           
 19847                           ;psect for function _lcd_disp_code_1
 19848  318B                     _lcd_disp_code_1:	
 19849                           
 19850                           ;incstack = 0
 19851                           ; Regs used in _lcd_disp_code_1: [wreg+status,2+status,0]
 19852                           ;lcd_disp_code_1@code stored from wreg
 19853  318B  00F4               	movwf	lcd_disp_code_1@code
 19854                           
 19855                           ;lcd.c: 75: do{ pLCD[0] &= ~(1<<1); if(code&0x20){ pLCD[0] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19856  318C  30FD               	movlw	253
 19857  318D  00F3               	movwf	??_lcd_disp_code_1
 19858  318E  0873               	movf	??_lcd_disp_code_1,w
 19859  318F  0023               	movlb	3	; select bank3
 19860  3190  05A4               	andwf	_pLCD^(0+384),f
 19861  3191  1AF4               	btfsc	lcd_disp_code_1@code,5
 19862  3192  14A4               	bsf	_pLCD^(0+384),1
 19863                           
 19864                           ;lcd.c: 76: do{ pLCD[3] &= ~(1<<1); if(code&0x40){ pLCD[3] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19865  3193  30FD               	movlw	253
 19866  3194  00F3               	movwf	??_lcd_disp_code_1
 19867  3195  0873               	movf	??_lcd_disp_code_1,w
 19868  3196  05A7               	andwf	(_pLCD^(0+384)+3),f
 19869  3197  1B74               	btfsc	lcd_disp_code_1@code,6
 19870  3198  14A7               	bsf	(_pLCD^(0+384)+3),1
 19871                           
 19872                           ;lcd.c: 77: do{ pLCD[6] &= ~(1<<1); if(code&0x10){ pLCD[6] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19873  3199  30FD               	movlw	253
 19874  319A  00F3               	movwf	??_lcd_disp_code_1
 19875  319B  0873               	movf	??_lcd_disp_code_1,w
 19876  319C  05AA               	andwf	(_pLCD^(0+384)+6),f
 19877  319D  1A74               	btfsc	lcd_disp_code_1@code,4
 19878  319E  14AA               	bsf	(_pLCD^(0+384)+6),1
 19879                           
 19880                           ;lcd.c: 78: do{ pLCD[9] &= ~(1<<1); if(code&0x08){ pLCD[9] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19881  319F  30FD               	movlw	253
 19882  31A0  00F3               	movwf	??_lcd_disp_code_1
 19883  31A1  0873               	movf	??_lcd_disp_code_1,w
 19884  31A2  05AD               	andwf	(_pLCD^(0+384)+9),f
 19885  31A3  19F4               	btfsc	lcd_disp_code_1@code,3
 19886  31A4  14AD               	bsf	(_pLCD^(0+384)+9),1
 19887                           
 19888                           ;lcd.c: 80: do{ pLCD[0] &= ~(1<<2); if(code&0x01){ pLCD[0] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19889  31A5  30FB               	movlw	251
 19890  31A6  00F3               	movwf	??_lcd_disp_code_1
 19891  31A7  0873               	movf	??_lcd_disp_code_1,w
 19892  31A8  05A4               	andwf	_pLCD^(0+384),f
 19893  31A9  1874               	btfsc	lcd_disp_code_1@code,0
 19894  31AA  1524               	bsf	_pLCD^(0+384),2
 19895                           
 19896                           ;lcd.c: 81: do{ pLCD[3] &= ~(1<<2); if(code&0x02){ pLCD[3] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19897  31AB  30FB               	movlw	251
 19898  31AC  00F3               	movwf	??_lcd_disp_code_1
 19899  31AD  0873               	movf	??_lcd_disp_code_1,w
 19900  31AE  05A7               	andwf	(_pLCD^(0+384)+3),f
 19901  31AF  18F4               	btfsc	lcd_disp_code_1@code,1
 19902  31B0  1527               	bsf	(_pLCD^(0+384)+3),2
 19903                           
 19904                           ;lcd.c: 82: do{ pLCD[6] &= ~(1<<2); if(code&0x04){ pLCD[6] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19905  31B1  30FB               	movlw	251
 19906  31B2  00F3               	movwf	??_lcd_disp_code_1
 19907  31B3  0873               	movf	??_lcd_disp_code_1,w
 19908  31B4  05AA               	andwf	(_pLCD^(0+384)+6),f
 19909  31B5  1D74               	btfss	lcd_disp_code_1@code,2
 19910  31B6  0008               	return
 19911  31B7  152A               	bsf	(_pLCD^(0+384)+6),2
 19912  31B8  0008               	return
 19913  31B9                     __end_of_lcd_disp_code_1:	
 19914                           
 19915                           	psect	text56
 19916  315D                     __ptext56:	
 19917 ;; *************** function _lcd_disp_code_0 *****************
 19918 ;; Defined at:
 19919 ;;		line 61 in file "src/driver/lcd.c"
 19920 ;; Parameters:    Size  Location     Type
 19921 ;;  code            1    wreg     unsigned char 
 19922 ;; Auto vars:     Size  Location     Type
 19923 ;;  code            1    4[COMMON] unsigned char 
 19924 ;; Return value:  Size  Location     Type
 19925 ;;                  1    wreg      void 
 19926 ;; Registers used:
 19927 ;;		wreg, status,2, status,0
 19928 ;; Tracked objects:
 19929 ;;		On entry : 0/0
 19930 ;;		On exit  : 0/0
 19931 ;;		Unchanged: 0/0
 19932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19936 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19937 ;;Total ram usage:        2 bytes
 19938 ;; Hardware stack levels used:    1
 19939 ;; Hardware stack levels required when called:    2
 19940 ;; This function calls:
 19941 ;;		Nothing
 19942 ;; This function is called by:
 19943 ;;		_lcd_disp_code
 19944 ;; This function uses a non-reentrant model
 19945 ;;
 19946                           
 19947                           
 19948                           ;psect for function _lcd_disp_code_0
 19949  315D                     _lcd_disp_code_0:	
 19950                           
 19951                           ;incstack = 0
 19952                           ; Regs used in _lcd_disp_code_0: [wreg+status,2+status,0]
 19953                           ;lcd_disp_code_0@code stored from wreg
 19954  315D  00F4               	movwf	lcd_disp_code_0@code
 19955                           
 19956                           ;lcd.c: 63: do{ pLCD[12] &= ~(1<<7); if(code&0x20){ pLCD[12] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19957  315E  307F               	movlw	127
 19958  315F  00F3               	movwf	??_lcd_disp_code_0
 19959  3160  0873               	movf	??_lcd_disp_code_0,w
 19960  3161  0023               	movlb	3	; select bank3
 19961  3162  05B0               	andwf	(_pLCD^(0+384)+12),f
 19962  3163  1AF4               	btfsc	lcd_disp_code_0@code,5
 19963  3164  17B0               	bsf	(_pLCD^(0+384)+12),7
 19964                           
 19965                           ;lcd.c: 64: do{ pLCD[15] &= ~(1<<7); if(code&0x40){ pLCD[15] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19966  3165  307F               	movlw	127
 19967  3166  00F3               	movwf	??_lcd_disp_code_0
 19968  3167  0873               	movf	??_lcd_disp_code_0,w
 19969  3168  05B3               	andwf	(_pLCD^(0+384)+15),f
 19970  3169  1B74               	btfsc	lcd_disp_code_0@code,6
 19971  316A  17B3               	bsf	(_pLCD^(0+384)+15),7
 19972                           
 19973                           ;lcd.c: 65: do{ pLCD[18] &= ~(1<<7); if(code&0x10){ pLCD[18] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19974  316B  307F               	movlw	127
 19975  316C  00F3               	movwf	??_lcd_disp_code_0
 19976  316D  0873               	movf	??_lcd_disp_code_0,w
 19977  316E  05B6               	andwf	(_pLCD^(0+384)+18),f
 19978  316F  1A74               	btfsc	lcd_disp_code_0@code,4
 19979  3170  17B6               	bsf	(_pLCD^(0+384)+18),7
 19980                           
 19981                           ;lcd.c: 66: do{ pLCD[21] &= ~(1<<7); if(code&0x08){ pLCD[21] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19982  3171  307F               	movlw	127
 19983  3172  00F3               	movwf	??_lcd_disp_code_0
 19984  3173  0873               	movf	??_lcd_disp_code_0,w
 19985  3174  05B9               	andwf	(_pLCD^(0+384)+21),f
 19986  3175  19F4               	btfsc	lcd_disp_code_0@code,3
 19987  3176  17B9               	bsf	(_pLCD^(0+384)+21),7
 19988                           
 19989                           ;lcd.c: 68: do{ pLCD[0] &= ~(1<<0); if(code&0x01){ pLCD[0] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19990  3177  30FE               	movlw	254
 19991  3178  00F3               	movwf	??_lcd_disp_code_0
 19992  3179  0873               	movf	??_lcd_disp_code_0,w
 19993  317A  05A4               	andwf	_pLCD^(0+384),f
 19994  317B  1874               	btfsc	lcd_disp_code_0@code,0
 19995  317C  1424               	bsf	_pLCD^(0+384),0
 19996                           
 19997                           ;lcd.c: 69: do{ pLCD[3] &= ~(1<<0); if(code&0x02){ pLCD[3] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19998  317D  30FE               	movlw	254
 19999  317E  00F3               	movwf	??_lcd_disp_code_0
 20000  317F  0873               	movf	??_lcd_disp_code_0,w
 20001  3180  05A7               	andwf	(_pLCD^(0+384)+3),f
 20002  3181  18F4               	btfsc	lcd_disp_code_0@code,1
 20003  3182  1427               	bsf	(_pLCD^(0+384)+3),0
 20004                           
 20005                           ;lcd.c: 70: do{ pLCD[6] &= ~(1<<0); if(code&0x04){ pLCD[6] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 20006  3183  30FE               	movlw	254
 20007  3184  00F3               	movwf	??_lcd_disp_code_0
 20008  3185  0873               	movf	??_lcd_disp_code_0,w
 20009  3186  05AA               	andwf	(_pLCD^(0+384)+6),f
 20010  3187  1D74               	btfss	lcd_disp_code_0@code,2
 20011  3188  0008               	return
 20012  3189  142A               	bsf	(_pLCD^(0+384)+6),0
 20013  318A  0008               	return
 20014  318B                     __end_of_lcd_disp_code_0:	
 20015                           
 20016                           	psect	text57
 20017  3B3F                     __ptext57:	
 20018 ;; *************** function _lcd_clear_buffer *****************
 20019 ;; Defined at:
 20020 ;;		line 207 in file "src/driver/lcd.c"
 20021 ;; Parameters:    Size  Location     Type
 20022 ;;		None
 20023 ;; Auto vars:     Size  Location     Type
 20024 ;;		None
 20025 ;; Return value:  Size  Location     Type
 20026 ;;                  1    wreg      void 
 20027 ;; Registers used:
 20028 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20029 ;; Tracked objects:
 20030 ;;		On entry : 0/0
 20031 ;;		On exit  : 0/0
 20032 ;;		Unchanged: 0/0
 20033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20036 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20038 ;;Total ram usage:        1 bytes
 20039 ;; Hardware stack levels used:    1
 20040 ;; Hardware stack levels required when called:    3
 20041 ;; This function calls:
 20042 ;;		_m_mem_set
 20043 ;; This function is called by:
 20044 ;;		_ui_disp_str_num
 20045 ;;		_ui_disp_str_num_ex
 20046 ;;		_ui_disp_flow_error
 20047 ;;		_ui_disp_flow
 20048 ;;		_ui_disp_totale_v
 20049 ;;		_ui_disp_transfer_money
 20050 ;;		_ui_disp_balance_and_volume
 20051 ;;		_ui_disp_set_line
 20052 ;;		_ui_disp_set_price
 20053 ;;		_ui_disp_set_calib
 20054 ;;		_ui_disp_set_imd_flow_uint
 20055 ;;		_ui_disp_menu
 20056 ;; This function uses a non-reentrant model
 20057 ;;
 20058                           
 20059                           
 20060                           ;psect for function _lcd_clear_buffer
 20061  3B3F                     _lcd_clear_buffer:	
 20062                           
 20063                           ;lcd.c: 209: m_mem_set(pLCD,0,24);
 20064                           
 20065                           ;incstack = 0
 20066                           ; Regs used in _lcd_clear_buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20067  3B3F  30A4               	movlw	low _pLCD
 20068  3B40  00F3               	movwf	m_mem_set@buf
 20069  3B41  3001               	movlw	high _pLCD
 20070  3B42  00F4               	movwf	m_mem_set@buf+1
 20071  3B43  01F5               	clrf	m_mem_set@x
 20072  3B44  3018               	movlw	24
 20073  3B45  00F7               	movwf	??_lcd_clear_buffer
 20074  3B46  0877               	movf	??_lcd_clear_buffer,w
 20075  3B47  00F6               	movwf	m_mem_set@len
 20076  3B48  31BB  23BC         	fcall	_m_mem_set
 20077  3B4A  0008               	return
 20078  3B4B                     __end_of_lcd_clear_buffer:	
 20079                           
 20080                           	psect	text58
 20081  2C5F                     __ptext58:	
 20082 ;; *************** function _lcd_disp_dp *****************
 20083 ;; Defined at:
 20084 ;;		line 41 in file "src/driver/lcd.c"
 20085 ;; Parameters:    Size  Location     Type
 20086 ;;  dec             1    wreg     unsigned char 
 20087 ;;  show            1   18[BANK0 ] unsigned char 
 20088 ;; Auto vars:     Size  Location     Type
 20089 ;;  dec             1   21[BANK0 ] unsigned char 
 20090 ;; Return value:  Size  Location     Type
 20091 ;;                  1    wreg      void 
 20092 ;; Registers used:
 20093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20094 ;; Tracked objects:
 20095 ;;		On entry : 0/0
 20096 ;;		On exit  : 0/0
 20097 ;;		Unchanged: 0/0
 20098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20099 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20100 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20102 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20103 ;;Total ram usage:        4 bytes
 20104 ;; Hardware stack levels used:    1
 20105 ;; Hardware stack levels required when called:    4
 20106 ;; This function calls:
 20107 ;;		_lcd_set_com_seg
 20108 ;; This function is called by:
 20109 ;;		_ui_disp_flow
 20110 ;;		_ui_disp_totale_v
 20111 ;;		_ui_disp_balance_and_volume
 20112 ;;		_ui_disp_set_line
 20113 ;;		_ui_disp_set_price
 20114 ;;		_ui_disp_set_calib
 20115 ;; This function uses a non-reentrant model
 20116 ;;
 20117                           
 20118                           
 20119                           ;psect for function _lcd_disp_dp
 20120  2C5F                     _lcd_disp_dp:	
 20121                           
 20122                           ;incstack = 0
 20123                           ; Regs used in _lcd_disp_dp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20124                           ;lcd_disp_dp@dec stored from wreg
 20125  2C5F  0020               	movlb	0	; select bank0
 20126  2C60  00B5               	movwf	lcd_disp_dp@dec
 20127                           
 20128                           ;lcd.c: 43: switch(dec){
 20129  2C61  2CB9               	goto	l12845
 20130  2C62                     l12829:	
 20131                           ;lcd.c: 44: case 1:lcd_set_com_seg(3,24,show);break;
 20132                           
 20133  2C62  3018               	movlw	24
 20134  2C63  00B3               	movwf	??_lcd_disp_dp
 20135  2C64  0833               	movf	??_lcd_disp_dp,w
 20136  2C65  00A8               	movwf	lcd_set_com_seg@seg
 20137  2C66  0832               	movf	lcd_disp_dp@show,w
 20138  2C67  00B4               	movwf	??_lcd_disp_dp+1
 20139  2C68  0834               	movf	??_lcd_disp_dp+1,w
 20140  2C69  00A9               	movwf	lcd_set_com_seg@show
 20141  2C6A  3003               	movlw	3
 20142  2C6B  31AF  2783         	fcall	_lcd_set_com_seg
 20143  2C6D  0008               	return
 20144  2C6E                     l12831:	
 20145                           ;lcd.c: 45: case 2:lcd_set_com_seg(3,26,show);break;
 20146                           
 20147  2C6E  301A               	movlw	26
 20148  2C6F  0020               	movlb	0	; select bank0
 20149  2C70  00B3               	movwf	??_lcd_disp_dp
 20150  2C71  0833               	movf	??_lcd_disp_dp,w
 20151  2C72  00A8               	movwf	lcd_set_com_seg@seg
 20152  2C73  0832               	movf	lcd_disp_dp@show,w
 20153  2C74  00B4               	movwf	??_lcd_disp_dp+1
 20154  2C75  0834               	movf	??_lcd_disp_dp+1,w
 20155  2C76  00A9               	movwf	lcd_set_com_seg@show
 20156  2C77  3003               	movlw	3
 20157  2C78  31AF  2783         	fcall	_lcd_set_com_seg
 20158  2C7A  0008               	return
 20159  2C7B                     l12833:	
 20160                           ;lcd.c: 46: case 3:lcd_set_com_seg(3,44,show);break;
 20161                           
 20162  2C7B  302C               	movlw	44
 20163  2C7C  0020               	movlb	0	; select bank0
 20164  2C7D  00B3               	movwf	??_lcd_disp_dp
 20165  2C7E  0833               	movf	??_lcd_disp_dp,w
 20166  2C7F  00A8               	movwf	lcd_set_com_seg@seg
 20167  2C80  0832               	movf	lcd_disp_dp@show,w
 20168  2C81  00B4               	movwf	??_lcd_disp_dp+1
 20169  2C82  0834               	movf	??_lcd_disp_dp+1,w
 20170  2C83  00A9               	movwf	lcd_set_com_seg@show
 20171  2C84  3003               	movlw	3
 20172  2C85  31AF  2783         	fcall	_lcd_set_com_seg
 20173  2C87  0008               	return
 20174  2C88                     l12835:	
 20175                           ;lcd.c: 47: case 4:lcd_set_com_seg(3,21,show);break;
 20176                           
 20177  2C88  3015               	movlw	21
 20178  2C89  0020               	movlb	0	; select bank0
 20179  2C8A  00B3               	movwf	??_lcd_disp_dp
 20180  2C8B  0833               	movf	??_lcd_disp_dp,w
 20181  2C8C  00A8               	movwf	lcd_set_com_seg@seg
 20182  2C8D  0832               	movf	lcd_disp_dp@show,w
 20183  2C8E  00B4               	movwf	??_lcd_disp_dp+1
 20184  2C8F  0834               	movf	??_lcd_disp_dp+1,w
 20185  2C90  00A9               	movwf	lcd_set_com_seg@show
 20186  2C91  3003               	movlw	3
 20187  2C92  31AF  2783         	fcall	_lcd_set_com_seg
 20188  2C94  0008               	return
 20189  2C95                     l12837:	
 20190                           ;lcd.c: 48: case 5:lcd_set_com_seg(3, 4,show);break;
 20191                           
 20192  2C95  3004               	movlw	4
 20193  2C96  0020               	movlb	0	; select bank0
 20194  2C97  00B3               	movwf	??_lcd_disp_dp
 20195  2C98  0833               	movf	??_lcd_disp_dp,w
 20196  2C99  00A8               	movwf	lcd_set_com_seg@seg
 20197  2C9A  0832               	movf	lcd_disp_dp@show,w
 20198  2C9B  00B4               	movwf	??_lcd_disp_dp+1
 20199  2C9C  0834               	movf	??_lcd_disp_dp+1,w
 20200  2C9D  00A9               	movwf	lcd_set_com_seg@show
 20201  2C9E  3003               	movlw	3
 20202  2C9F  31AF  2783         	fcall	_lcd_set_com_seg
 20203  2CA1  0008               	return
 20204  2CA2                     l12839:	
 20205                           ;lcd.c: 49: case 6:lcd_set_com_seg(3, 2,show);break;
 20206                           
 20207  2CA2  3002               	movlw	2
 20208  2CA3  0020               	movlb	0	; select bank0
 20209  2CA4  00B3               	movwf	??_lcd_disp_dp
 20210  2CA5  0833               	movf	??_lcd_disp_dp,w
 20211  2CA6  00A8               	movwf	lcd_set_com_seg@seg
 20212  2CA7  0832               	movf	lcd_disp_dp@show,w
 20213  2CA8  00B4               	movwf	??_lcd_disp_dp+1
 20214  2CA9  0834               	movf	??_lcd_disp_dp+1,w
 20215  2CAA  00A9               	movwf	lcd_set_com_seg@show
 20216  2CAB  3003               	movlw	3
 20217  2CAC  31AF  2783         	fcall	_lcd_set_com_seg
 20218  2CAE  0008               	return
 20219  2CAF                     l12841:	
 20220                           ;lcd.c: 50: case 7:lcd_set_com_seg(3, 0,show);break;
 20221                           
 20222  2CAF  0020               	movlb	0	; select bank0
 20223  2CB0  01A8               	clrf	lcd_set_com_seg@seg
 20224  2CB1  0832               	movf	lcd_disp_dp@show,w
 20225  2CB2  00B3               	movwf	??_lcd_disp_dp
 20226  2CB3  0833               	movf	??_lcd_disp_dp,w
 20227  2CB4  00A9               	movwf	lcd_set_com_seg@show
 20228  2CB5  3003               	movlw	3
 20229  2CB6  31AF  2783         	fcall	_lcd_set_com_seg
 20230                           
 20231                           ;lcd.c: 53: }
 20232                           
 20233                           ;lcd.c: 52: default:break;
 20234                           
 20235                           ;lcd.c: 51: case 0:
 20236  2CB8  0008               	return
 20237  2CB9                     l12845:	
 20238  2CB9  0020               	movlb	0	; select bank0
 20239  2CBA  0835               	movf	lcd_disp_dp@dec,w
 20240                           
 20241                           ; Switch size 1, requested type "space"
 20242                           ; Number of cases is 8, Range of values is 0 to 7
 20243                           ; switch strategies available:
 20244                           ; Name         Instructions Cycles
 20245                           ; direct_byte           22     6 (fixed)
 20246                           ; simple_byte           25    13 (average)
 20247                           ; jumptable            260     6 (fixed)
 20248                           ;	Chosen strategy is direct_byte
 20249  2CBB  0084               	movwf	4
 20250  2CBC  3008               	movlw	8
 20251  2CBD  0204               	subwf	4,w
 20252  2CBE  1803               	skipnc
 20253  2CBF  0008               	return
 20254  2CC0  31B8               	movlp	high S17357
 20255  2CC1  3504               	lslf	4,w
 20256  2CC2  3E8A               	addlw	low S17357
 20257  2CC3  0082               	movwf	2
 20258  2CC4                     l1346:	
 20259  2CC4  0008               	return
 20260  2CC5                     __end_of_lcd_disp_dp:	
 20261                           
 20262                           	psect	swtext2
 20263  388A                     __pswtext2:	
 20264  388A                     S17357:	
 20265  388A  31AC  2CC4         	ljmp	l1346
 20266  388C  31AC  2C62         	ljmp	l12829
 20267  388E  31AC  2C6E         	ljmp	l12831
 20268  3890  31AC  2C7B         	ljmp	l12833
 20269  3892  31AC  2C88         	ljmp	l12835
 20270  3894  31AC  2C95         	ljmp	l12837
 20271  3896  31AC  2CA2         	ljmp	l12839
 20272  3898  31AC  2CAF         	ljmp	l12841
 20273                           
 20274                           	psect	text59
 20275  3DF4                     __ptext59:	
 20276 ;; *************** function _lcd_disp_cln *****************
 20277 ;; Defined at:
 20278 ;;		line 55 in file "src/driver/lcd.c"
 20279 ;; Parameters:    Size  Location     Type
 20280 ;;  show            1    wreg     unsigned char 
 20281 ;; Auto vars:     Size  Location     Type
 20282 ;;  show            1   20[BANK0 ] unsigned char 
 20283 ;; Return value:  Size  Location     Type
 20284 ;;                  1    wreg      void 
 20285 ;; Registers used:
 20286 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20287 ;; Tracked objects:
 20288 ;;		On entry : 0/0
 20289 ;;		On exit  : 0/0
 20290 ;;		Unchanged: 0/0
 20291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20293 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20294 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20295 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20296 ;;Total ram usage:        3 bytes
 20297 ;; Hardware stack levels used:    1
 20298 ;; Hardware stack levels required when called:    4
 20299 ;; This function calls:
 20300 ;;		_lcd_set_com_seg
 20301 ;; This function is called by:
 20302 ;;		_ui_disp_balance_and_volume
 20303 ;; This function uses a non-reentrant model
 20304 ;;
 20305                           
 20306                           
 20307                           ;psect for function _lcd_disp_cln
 20308  3DF4                     _lcd_disp_cln:	
 20309                           
 20310                           ;incstack = 0
 20311                           ; Regs used in _lcd_disp_cln: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20312                           ;lcd_disp_cln@show stored from wreg
 20313  3DF4  0020               	movlb	0	; select bank0
 20314  3DF5  00B4               	movwf	lcd_disp_cln@show
 20315                           
 20316                           ;lcd.c: 58: lcd_set_com_seg(0, 42,show);
 20317  3DF6  302A               	movlw	42
 20318  3DF7  00B2               	movwf	??_lcd_disp_cln
 20319  3DF8  0832               	movf	??_lcd_disp_cln,w
 20320  3DF9  00A8               	movwf	lcd_set_com_seg@seg
 20321  3DFA  0834               	movf	lcd_disp_cln@show,w
 20322  3DFB  00B3               	movwf	??_lcd_disp_cln+1
 20323  3DFC  0833               	movf	??_lcd_disp_cln+1,w
 20324  3DFD  00A9               	movwf	lcd_set_com_seg@show
 20325  3DFE  3000               	movlw	0
 20326  3DFF  31AF  2783  31BD   	fcall	_lcd_set_com_seg
 20327                           
 20328                           ;lcd.c: 59: lcd_set_com_seg(1, 42,show);
 20329  3E02  302A               	movlw	42
 20330  3E03  0020               	movlb	0	; select bank0
 20331  3E04  00B2               	movwf	??_lcd_disp_cln
 20332  3E05  0832               	movf	??_lcd_disp_cln,w
 20333  3E06  00A8               	movwf	lcd_set_com_seg@seg
 20334  3E07  0834               	movf	lcd_disp_cln@show,w
 20335  3E08  00B3               	movwf	??_lcd_disp_cln+1
 20336  3E09  0833               	movf	??_lcd_disp_cln+1,w
 20337  3E0A  00A9               	movwf	lcd_set_com_seg@show
 20338  3E0B  3001               	movlw	1
 20339  3E0C  31AF  2783         	fcall	_lcd_set_com_seg
 20340  3E0E  0008               	return
 20341  3E0F                     __end_of_lcd_disp_cln:	
 20342                           
 20343                           	psect	text60
 20344  2F83                     __ptext60:	
 20345 ;; *************** function _lcd_set_com_seg *****************
 20346 ;; Defined at:
 20347 ;;		line 25 in file "src/driver/lcd.c"
 20348 ;; Parameters:    Size  Location     Type
 20349 ;;  com             1    wreg     unsigned char 
 20350 ;;  seg             1    8[BANK0 ] unsigned char 
 20351 ;;  show            1    9[BANK0 ] unsigned char 
 20352 ;; Auto vars:     Size  Location     Type
 20353 ;;  com             1   15[BANK0 ] unsigned char 
 20354 ;;  bloc            1   17[BANK0 ] unsigned char 
 20355 ;;  p               1   16[BANK0 ] PTR unsigned char 
 20356 ;;		 -> pLCD(24), 
 20357 ;;  addr            1   14[BANK0 ] unsigned char 
 20358 ;; Return value:  Size  Location     Type
 20359 ;;                  2    8[BANK0 ] int 
 20360 ;; Registers used:
 20361 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20362 ;; Tracked objects:
 20363 ;;		On entry : 0/0
 20364 ;;		On exit  : 0/0
 20365 ;;		Unchanged: 0/0
 20366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20367 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20368 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20369 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20370 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 20371 ;;Total ram usage:       10 bytes
 20372 ;; Hardware stack levels used:    1
 20373 ;; Hardware stack levels required when called:    3
 20374 ;; This function calls:
 20375 ;;		___awdiv
 20376 ;;		___bmul
 20377 ;;		___lbmod
 20378 ;; This function is called by:
 20379 ;;		_lcd_disp_dp
 20380 ;;		_lcd_disp_cln
 20381 ;; This function uses a non-reentrant model
 20382 ;;
 20383                           
 20384                           
 20385                           ;psect for function _lcd_set_com_seg
 20386  2F83                     _lcd_set_com_seg:	
 20387                           
 20388                           ;incstack = 0
 20389                           ; Regs used in _lcd_set_com_seg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20390                           ;lcd_set_com_seg@com stored from wreg
 20391  2F83  0020               	movlb	0	; select bank0
 20392  2F84  00AF               	movwf	lcd_set_com_seg@com
 20393                           
 20394                           ;lcd.c: 27: uint8_t *p;
 20395                           ;lcd.c: 28: uint8_t addr,bloc;
 20396                           ;lcd.c: 29: if(seg>45 || com>3)return;
 20397  2F85  302E               	movlw	46
 20398  2F86  0228               	subwf	lcd_set_com_seg@seg,w
 20399  2F87  1803               	skipnc
 20400  2F88  0008               	return
 20401  2F89  3004               	movlw	4
 20402  2F8A  022F               	subwf	lcd_set_com_seg@com,w
 20403  2F8B  1803               	btfsc	3,0
 20404  2F8C  0008               	return
 20405                           
 20406                           ;lcd.c: 30: addr=(seg/24)*12;
 20407  2F8D  300C               	movlw	12
 20408  2F8E  00AA               	movwf	??_lcd_set_com_seg
 20409  2F8F  082A               	movf	??_lcd_set_com_seg,w
 20410  2F90  00A4               	movwf	___bmul@multiplicand
 20411  2F91  0828               	movf	lcd_set_com_seg@seg,w
 20412  2F92  00AB               	movwf	??_lcd_set_com_seg+1
 20413  2F93  01AC               	clrf	??_lcd_set_com_seg+2
 20414  2F94  082B               	movf	??_lcd_set_com_seg+1,w
 20415  2F95  00F5               	movwf	___awdiv@dividend
 20416  2F96  082C               	movf	??_lcd_set_com_seg+2,w
 20417  2F97  00F6               	movwf	___awdiv@dividend+1
 20418  2F98  3018               	movlw	24
 20419  2F99  00F3               	movwf	___awdiv@divisor
 20420  2F9A  3000               	movlw	0
 20421  2F9B  00F4               	movwf	___awdiv@divisor+1
 20422  2F9C  31A9  21F3  31AF   	fcall	___awdiv
 20423  2F9F  0873               	movf	?___awdiv,w
 20424  2FA0  31BC  2434  31AF   	fcall	___bmul
 20425  2FA3  0020               	movlb	0	; select bank0
 20426  2FA4  00AD               	movwf	??_lcd_set_com_seg+3
 20427  2FA5  082D               	movf	??_lcd_set_com_seg+3,w
 20428  2FA6  00AE               	movwf	lcd_set_com_seg@addr
 20429                           
 20430                           ;lcd.c: 31: addr+=(com*3);
 20431  2FA7  3003               	movlw	3
 20432  2FA8  00AA               	movwf	??_lcd_set_com_seg
 20433  2FA9  082A               	movf	??_lcd_set_com_seg,w
 20434  2FAA  00A4               	movwf	___bmul@multiplicand
 20435  2FAB  082F               	movf	lcd_set_com_seg@com,w
 20436  2FAC  31BC  2434  31AF   	fcall	___bmul
 20437  2FAF  0020               	movlb	0	; select bank0
 20438  2FB0  00AB               	movwf	??_lcd_set_com_seg+1
 20439  2FB1  082B               	movf	??_lcd_set_com_seg+1,w
 20440  2FB2  07AE               	addwf	lcd_set_com_seg@addr,f
 20441                           
 20442                           ;lcd.c: 32: seg%=24;
 20443  2FB3  3018               	movlw	24
 20444  2FB4  00AA               	movwf	??_lcd_set_com_seg
 20445  2FB5  082A               	movf	??_lcd_set_com_seg,w
 20446  2FB6  00F3               	movwf	___lbmod@divisor
 20447  2FB7  0828               	movf	lcd_set_com_seg@seg,w
 20448  2FB8  31BE  26DF  31AF   	fcall	___lbmod
 20449  2FBB  0020               	movlb	0	; select bank0
 20450  2FBC  00AB               	movwf	??_lcd_set_com_seg+1
 20451  2FBD  082B               	movf	??_lcd_set_com_seg+1,w
 20452  2FBE  00A8               	movwf	lcd_set_com_seg@seg
 20453                           
 20454                           ;lcd.c: 33: addr+=(seg/8);
 20455  2FBF  3008               	movlw	8
 20456  2FC0  00F3               	movwf	___awdiv@divisor
 20457  2FC1  3000               	movlw	0
 20458  2FC2  00F4               	movwf	___awdiv@divisor+1
 20459  2FC3  0828               	movf	lcd_set_com_seg@seg,w
 20460  2FC4  00AA               	movwf	??_lcd_set_com_seg
 20461  2FC5  01AB               	clrf	??_lcd_set_com_seg+1
 20462  2FC6  082A               	movf	??_lcd_set_com_seg,w
 20463  2FC7  00F5               	movwf	___awdiv@dividend
 20464  2FC8  082B               	movf	??_lcd_set_com_seg+1,w
 20465  2FC9  00F6               	movwf	___awdiv@dividend+1
 20466  2FCA  31A9  21F3  31AF   	fcall	___awdiv
 20467  2FCD  0873               	movf	?___awdiv,w
 20468  2FCE  0020               	movlb	0	; select bank0
 20469  2FCF  00AC               	movwf	??_lcd_set_com_seg+2
 20470  2FD0  082C               	movf	??_lcd_set_com_seg+2,w
 20471  2FD1  07AE               	addwf	lcd_set_com_seg@addr,f
 20472                           
 20473                           ;lcd.c: 34: bloc=seg%8;
 20474  2FD2  0828               	movf	lcd_set_com_seg@seg,w
 20475  2FD3  3907               	andlw	7
 20476  2FD4  00AA               	movwf	??_lcd_set_com_seg
 20477  2FD5  082A               	movf	??_lcd_set_com_seg,w
 20478  2FD6  00B1               	movwf	lcd_set_com_seg@bloc
 20479                           
 20480                           ;lcd.c: 35: p=pLCD+addr;
 20481  2FD7  082E               	movf	lcd_set_com_seg@addr,w
 20482  2FD8  3EA4               	addlw	(low (_pLCD| (0+256)))& (0+255)
 20483  2FD9  00AA               	movwf	??_lcd_set_com_seg
 20484  2FDA  082A               	movf	??_lcd_set_com_seg,w
 20485  2FDB  00B0               	movwf	lcd_set_com_seg@p
 20486                           
 20487                           ;lcd.c: 36: if(show)
 20488  2FDC  0829               	movf	lcd_set_com_seg@show,w
 20489  2FDD  1903               	btfsc	3,2
 20490  2FDE  2FEF               	goto	l12677
 20491                           
 20492                           ;lcd.c: 37: *p |= (1<<bloc);
 20493  2FDF  3001               	movlw	1
 20494  2FE0  00AA               	movwf	??_lcd_set_com_seg
 20495  2FE1  0A31               	incf	lcd_set_com_seg@bloc,w
 20496  2FE2  2FE4               	goto	u11074
 20497  2FE3                     u11075:	
 20498  2FE3  35AA               	lslf	??_lcd_set_com_seg,f
 20499  2FE4                     u11074:	
 20500  2FE4  0B89               	decfsz	9,f
 20501  2FE5  2FE3               	goto	u11075
 20502  2FE6  082A               	movf	??_lcd_set_com_seg,w
 20503  2FE7  00AB               	movwf	??_lcd_set_com_seg+1
 20504  2FE8  0830               	movf	lcd_set_com_seg@p,w
 20505  2FE9  0086               	movwf	6
 20506  2FEA  3001               	movlw	1	; select bank2/3
 20507  2FEB  0087               	movwf	7
 20508  2FEC  082B               	movf	??_lcd_set_com_seg+1,w
 20509  2FED  0481               	iorwf	1,f
 20510  2FEE  0008               	return
 20511  2FEF                     l12677:	
 20512                           
 20513                           ;lcd.c: 38: else
 20514                           ;lcd.c: 39: *p &= ~(1<<bloc);
 20515  2FEF  3001               	movlw	1
 20516  2FF0  00AA               	movwf	??_lcd_set_com_seg
 20517  2FF1  0A31               	incf	lcd_set_com_seg@bloc,w
 20518  2FF2  2FF4               	goto	u11084
 20519  2FF3                     u11085:	
 20520  2FF3  35AA               	lslf	??_lcd_set_com_seg,f
 20521  2FF4                     u11084:	
 20522  2FF4  0B89               	decfsz	9,f
 20523  2FF5  2FF3               	goto	u11085
 20524  2FF6  082A               	movf	??_lcd_set_com_seg,w
 20525  2FF7  3AFF               	xorlw	255
 20526  2FF8  00AB               	movwf	??_lcd_set_com_seg+1
 20527  2FF9  0830               	movf	lcd_set_com_seg@p,w
 20528  2FFA  0086               	movwf	6
 20529  2FFB  3001               	movlw	1	; select bank2/3
 20530  2FFC  0087               	movwf	7
 20531  2FFD  082B               	movf	??_lcd_set_com_seg+1,w
 20532  2FFE  0581               	andwf	1,f
 20533  2FFF  0008               	return
 20534  3000                     __end_of_lcd_set_com_seg:	
 20535                           
 20536                           	psect	text61
 20537  3EDF                     __ptext61:	
 20538 ;; *************** function ___lbmod *****************
 20539 ;; Defined at:
 20540 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbmod.c"
 20541 ;; Parameters:    Size  Location     Type
 20542 ;;  dividend        1    wreg     unsigned char 
 20543 ;;  divisor         1    3[COMMON] unsigned char 
 20544 ;; Auto vars:     Size  Location     Type
 20545 ;;  dividend        1    0[BANK0 ] unsigned char 
 20546 ;;  rem             1    2[BANK0 ] unsigned char 
 20547 ;;  counter         1    1[BANK0 ] unsigned char 
 20548 ;; Return value:  Size  Location     Type
 20549 ;;                  1    wreg      unsigned char 
 20550 ;; Registers used:
 20551 ;;		wreg, status,2, status,0
 20552 ;; Tracked objects:
 20553 ;;		On entry : 0/0
 20554 ;;		On exit  : 0/0
 20555 ;;		Unchanged: 0/0
 20556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20557 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20558 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20559 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20560 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20561 ;;Total ram usage:        6 bytes
 20562 ;; Hardware stack levels used:    1
 20563 ;; Hardware stack levels required when called:    2
 20564 ;; This function calls:
 20565 ;;		Nothing
 20566 ;; This function is called by:
 20567 ;;		_ui_disp_set_calib
 20568 ;;		_lcd_set_com_seg
 20569 ;; This function uses a non-reentrant model
 20570 ;;
 20571                           
 20572                           
 20573                           ;psect for function ___lbmod
 20574  3EDF                     ___lbmod:	
 20575                           
 20576                           ;incstack = 0
 20577                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 20578                           ;___lbmod@dividend stored from wreg
 20579  3EDF  0020               	movlb	0	; select bank0
 20580  3EE0  00A0               	movwf	___lbmod@dividend
 20581  3EE1  3008               	movlw	8
 20582  3EE2  00F4               	movwf	??___lbmod
 20583  3EE3  0874               	movf	??___lbmod,w
 20584  3EE4  00A1               	movwf	___lbmod@counter
 20585  3EE5  01A2               	clrf	___lbmod@rem
 20586  3EE6                     l12605:	
 20587  3EE6  0820               	movf	___lbmod@dividend,w
 20588  3EE7  00F4               	movwf	??___lbmod
 20589  3EE8  3007               	movlw	7
 20590  3EE9                     u10945:	
 20591  3EE9  36F4               	lsrf	??___lbmod,f
 20592  3EEA  0B89               	decfsz	9,f
 20593  3EEB  2EE9               	goto	u10945
 20594  3EEC  3522               	lslf	___lbmod@rem,w
 20595  3EED  0474               	iorwf	??___lbmod,w
 20596  3EEE  00F5               	movwf	??___lbmod+1
 20597  3EEF  0875               	movf	??___lbmod+1,w
 20598  3EF0  00A2               	movwf	___lbmod@rem
 20599  3EF1  1003               	clrc
 20600  3EF2  0DA0               	rlf	___lbmod@dividend,f
 20601  3EF3  0873               	movf	___lbmod@divisor,w
 20602  3EF4  0222               	subwf	___lbmod@rem,w
 20603  3EF5  1C03               	skipc
 20604  3EF6  2EF9               	goto	l2966
 20605  3EF7  0873               	movf	___lbmod@divisor,w
 20606  3EF8  02A2               	subwf	___lbmod@rem,f
 20607  3EF9                     l2966:	
 20608  3EF9  3001               	movlw	1
 20609  3EFA  02A1               	subwf	___lbmod@counter,f
 20610  3EFB  1D03               	btfss	3,2
 20611  3EFC  2EE6               	goto	l12605
 20612  3EFD  0822               	movf	___lbmod@rem,w
 20613  3EFE  0008               	return
 20614  3EFF                     __end_of___lbmod:	
 20615                           
 20616                           	psect	text62
 20617  0B78                     __ptext62:	
 20618 ;; *************** function _rfid_comm_process_recharge *****************
 20619 ;; Defined at:
 20620 ;;		line 126 in file "src/app/rfid_demo.c"
 20621 ;; Parameters:    Size  Location     Type
 20622 ;;		None
 20623 ;; Auto vars:     Size  Location     Type
 20624 ;;  stpDec          1   79[BANK0 ] PTR struct .
 20625 ;;		 -> cardDecBuf(18), 
 20626 ;;  stpInc          1   78[BANK0 ] PTR struct .
 20627 ;;		 -> cardIncBuf(18), 
 20628 ;;  ret             1   77[BANK0 ] unsigned char 
 20629 ;; Return value:  Size  Location     Type
 20630 ;;                  1    wreg      unsigned char 
 20631 ;; Registers used:
 20632 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20633 ;; Tracked objects:
 20634 ;;		On entry : 0/0
 20635 ;;		On exit  : 0/0
 20636 ;;		Unchanged: 0/0
 20637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20639 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20640 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0
 20641 ;;      Totals:         0       3       8       0       0       0       0       0       0       0       0       0       
      +0
 20642 ;;Total ram usage:       11 bytes
 20643 ;; Hardware stack levels used:    1
 20644 ;; Hardware stack levels required when called:    9
 20645 ;; This function calls:
 20646 ;;		_crc_append
 20647 ;;		_data_api_flash_process
 20648 ;;		_m_mem_cpy_len
 20649 ;;		_mifare_write
 20650 ;;		_picc_authenticate
 20651 ;; This function is called by:
 20652 ;;		_rfid_comm_process
 20653 ;; This function uses a non-reentrant model
 20654 ;;
 20655                           
 20656                           
 20657                           ;psect for function _rfid_comm_process_recharge
 20658  0B78                     _rfid_comm_process_recharge:	
 20659                           
 20660                           ;rfid_demo.c: 128: st_cardValueStrucrtDef* stpInc,*stpDec;
 20661                           ;rfid_demo.c: 130: uint8_t ret;
 20662                           ;rfid_demo.c: 131: stpInc=(st_cardValueStrucrtDef*)cardIncBuf;
 20663                           
 20664                           ;incstack = 0
 20665                           ; Regs used in _rfid_comm_process_recharge: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20666  0B78  3044               	movlw	68
 20667  0B79  0021               	movlb	1	; select bank1
 20668  0B7A  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20669  0B7B  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20670  0B7C  0020               	movlb	0	; select bank0
 20671  0B7D  00EE               	movwf	rfid_comm_process_recharge@stpInc
 20672                           
 20673                           ;rfid_demo.c: 132: stpDec=(st_cardValueStrucrtDef*)cardDecBuf;
 20674  0B7E  3056               	movlw	86
 20675  0B7F  0021               	movlb	1	; select bank1
 20676  0B80  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20677  0B81  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20678  0B82  0020               	movlb	0	; select bank0
 20679  0B83  00EF               	movwf	rfid_comm_process_recharge@stpDec
 20680                           
 20681                           ;rfid_demo.c: 133: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 20682  0B84  300F               	movlw	15
 20683  0B85  0021               	movlb	1	; select bank1
 20684  0B86  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20685  0B87  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20686  0B88  0020               	movlb	0	; select bank0
 20687  0B89  00CA               	movwf	picc_authenticate@blockAddr
 20688  0B8A  30C8               	movlw	low _userKeyB
 20689  0B8B  00CB               	movwf	picc_authenticate@key
 20690  0B8C  3001               	movlw	high _userKeyB
 20691  0B8D  00CC               	movwf	picc_authenticate@key+1
 20692  0B8E  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 20693  0B8F  0021               	movlb	1	; select bank1
 20694  0B90  00D0               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 20695  0B91  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20696  0B92  0020               	movlb	0	; select bank0
 20697  0B93  00CD               	movwf	picc_authenticate@uid
 20698  0B94  3061               	movlw	97
 20699  0B95  31AB  23FA  318B   	fcall	_picc_authenticate
 20700  0B98  0021               	movlb	1	; select bank1
 20701  0B99  00D1               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20702  0B9A  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20703  0B9B  00BE               	movwf	_piccResult^(0+128)
 20704                           
 20705                           ;rfid_demo.c: 134: if(piccResult!=STATUS_OK)return 0;
 20706  0B9C  083E               	movf	_piccResult^(0+128),w
 20707  0B9D  1903               	btfsc	3,2
 20708  0B9E  2BA1               	goto	l15579
 20709  0B9F  3000               	movlw	0
 20710  0BA0  0008               	return
 20711  0BA1                     l15579:	
 20712                           
 20713                           ;rfid_demo.c: 135: if(mainSystemData.payTimes!=stpDec->Times){
 20714  0BA1  0020               	movlb	0	; select bank0
 20715  0BA2  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20716  0BA3  3E04               	addlw	4
 20717  0BA4  0086               	movwf	6
 20718  0BA5  3004               	movlw	4	; select bank8/9
 20719  0BA6  0087               	movwf	7
 20720  0BA7  3F40               	moviw [0]fsr1
 20721  0BA8  0021               	movlb	1	; select bank1
 20722  0BA9  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20723  0BAA  3F41               	moviw [1]fsr1
 20724  0BAB  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20725  0BAC  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20726  0BAD  0024               	movlb	4	; select bank4
 20727  0BAE  0641               	xorwf	((_mainSystemData+1)^(0+512)+32),w
 20728  0BAF  1D03               	skipz
 20729  0BB0  2BB5               	goto	u14285
 20730  0BB1  0021               	movlb	1	; select bank1
 20731  0BB2  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20732  0BB3  0024               	movlb	4	; select bank4
 20733  0BB4  0640               	xorwf	(_mainSystemData^(0+512)+32),w
 20734  0BB5                     u14285:	
 20735  0BB5  1903               	skipnz
 20736  0BB6  2C3A               	goto	l15603
 20737                           
 20738                           ;rfid_demo.c: 136: if(mainSystemData.payTimes==stpDec->Times+1){
 20739  0BB7  0020               	movlb	0	; select bank0
 20740  0BB8  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20741  0BB9  3E04               	addlw	4
 20742  0BBA  0086               	movwf	6
 20743  0BBB  3004               	movlw	4	; select bank8/9
 20744  0BBC  0087               	movwf	7
 20745  0BBD  3F40               	moviw [0]fsr1
 20746  0BBE  0021               	movlb	1	; select bank1
 20747  0BBF  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20748  0BC0  3F41               	moviw [1]fsr1
 20749  0BC1  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20750  0BC2  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20751  0BC3  3E01               	addlw	1
 20752  0BC4  00D1               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20753  0BC5  3000               	movlw	0
 20754  0BC6  3D50               	addwfc	(??_rfid_comm_process_recharge+1)^(0+128),w
 20755  0BC7  00D2               	movwf	(??_rfid_comm_process_recharge+3)^(0+128)
 20756  0BC8  0024               	movlb	4	; select bank4
 20757  0BC9  0841               	movf	((_mainSystemData+1)^(0+512)+32),w
 20758  0BCA  0021               	movlb	1	; select bank1
 20759  0BCB  0652               	xorwf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20760  0BCC  1D03               	skipz
 20761  0BCD  2BD2               	goto	u14295
 20762  0BCE  0024               	movlb	4	; select bank4
 20763  0BCF  0840               	movf	(_mainSystemData^(0+512)+32),w
 20764  0BD0  0021               	movlb	1	; select bank1
 20765  0BD1  0651               	xorwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20766  0BD2                     u14295:	
 20767  0BD2  1D03               	skipz
 20768  0BD3  2C12               	goto	l15597
 20769                           
 20770                           ;rfid_demo.c: 137: stpDec->Value=mainSystemData.transferMoney;
 20771  0BD4  0020               	movlb	0	; select bank0
 20772  0BD5  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20773  0BD6  0086               	movwf	6
 20774  0BD7  3004               	movlw	4	; select bank8/9
 20775  0BD8  0087               	movwf	7
 20776  0BD9  0024               	movlb	4	; select bank4
 20777  0BDA  082C               	movf	(_mainSystemData^(0+512)+12),w
 20778  0BDB  3FC0               	movwi [0]fsr1
 20779  0BDC  082D               	movf	((_mainSystemData+1)^(0+512)+12),w
 20780  0BDD  3FC1               	movwi [1]fsr1
 20781  0BDE  082E               	movf	((_mainSystemData+2)^(0+512)+12),w
 20782  0BDF  3FC2               	movwi [2]fsr1
 20783  0BE0  082F               	movf	((_mainSystemData+3)^(0+512)+12),w
 20784  0BE1  3FC3               	movwi [3]fsr1
 20785                           
 20786                           ;rfid_demo.c: 138: stpDec->Times=mainSystemData.payTimes;
 20787  0BE2  0020               	movlb	0	; select bank0
 20788  0BE3  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20789  0BE4  3E04               	addlw	4
 20790  0BE5  0086               	movwf	6
 20791  0BE6  3004               	movlw	4	; select bank8/9
 20792  0BE7  0087               	movwf	7
 20793  0BE8  0024               	movlb	4	; select bank4
 20794  0BE9  0840               	movf	(_mainSystemData^(0+512)+32),w
 20795  0BEA  3FC0               	movwi [0]fsr1
 20796  0BEB  0841               	movf	((_mainSystemData+1)^(0+512)+32),w
 20797  0BEC  3FC1               	movwi [1]fsr1
 20798                           
 20799                           ;rfid_demo.c: 139: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 20800  0BED  3056               	movlw	86
 20801  0BEE  0020               	movlb	0	; select bank0
 20802  0BEF  00A8               	movwf	crc_append@message
 20803  0BF0  3004               	movlw	4
 20804  0BF1  00A9               	movwf	crc_append@message+1
 20805  0BF2  3006               	movlw	6
 20806  0BF3  00AA               	movwf	crc_append@n
 20807  0BF4  3000               	movlw	0
 20808  0BF5  00AB               	movwf	crc_append@n+1
 20809  0BF6  31B3  238B  318B   	fcall	_crc_append
 20810                           
 20811                           ;rfid_demo.c: 140: piccResult = mifare_write(12, cardDecBuf,16);
 20812  0BF9  3056               	movlw	86
 20813  0BFA  0021               	movlb	1	; select bank1
 20814  0BFB  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20815  0BFC  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20816  0BFD  0020               	movlb	0	; select bank0
 20817  0BFE  00E9               	movwf	mifare_write@buffer
 20818  0BFF  3010               	movlw	16
 20819  0C00  0021               	movlb	1	; select bank1
 20820  0C01  00D0               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 20821  0C02  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20822  0C03  0020               	movlb	0	; select bank0
 20823  0C04  00EA               	movwf	mifare_write@bufferSize
 20824  0C05  300C               	movlw	12
 20825  0C06  31A8  2037  318B   	fcall	_mifare_write
 20826  0C09  0021               	movlb	1	; select bank1
 20827  0C0A  00D1               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20828  0C0B  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20829  0C0C  00BE               	movwf	_piccResult^(0+128)
 20830                           
 20831                           ;rfid_demo.c: 141: if(piccResult!=STATUS_OK){
 20832  0C0D  083E               	movf	_piccResult^(0+128),w
 20833  0C0E  1903               	btfsc	3,2
 20834  0C0F  2C3A               	goto	l15603
 20835                           
 20836                           ;rfid_demo.c: 142: return 0;
 20837  0C10  3000               	movlw	0
 20838  0C11  0008               	return
 20839  0C12                     l15597:	
 20840                           ;rfid_demo.c: 143: }
 20841                           ;rfid_demo.c: 144: }
 20842                           
 20843                           
 20844                           ;rfid_demo.c: 145: else{
 20845                           ;rfid_demo.c: 146: if(stpDec->Value != mainSystemData.transferMoney ){
 20846  0C12  0020               	movlb	0	; select bank0
 20847  0C13  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20848  0C14  0086               	movwf	6
 20849  0C15  3004               	movlw	4	; select bank8/9
 20850  0C16  0087               	movwf	7
 20851  0C17  3F40               	moviw [0]fsr1
 20852  0C18  0021               	movlb	1	; select bank1
 20853  0C19  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20854  0C1A  3F41               	moviw [1]fsr1
 20855  0C1B  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20856  0C1C  3F42               	moviw [2]fsr1
 20857  0C1D  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 20858  0C1E  3F43               	moviw [3]fsr1
 20859  0C1F  00D2               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 20860  0C20  0024               	movlb	4	; select bank4
 20861  0C21  082F               	movf	((_mainSystemData+3)^(0+512)+12),w
 20862  0C22  0021               	movlb	1	; select bank1
 20863  0C23  0652               	xorwf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20864  0C24  1D03               	skipz
 20865  0C25  2C36               	goto	u14315
 20866  0C26  0024               	movlb	4	; select bank4
 20867  0C27  082E               	movf	((_mainSystemData+2)^(0+512)+12),w
 20868  0C28  0021               	movlb	1	; select bank1
 20869  0C29  0651               	xorwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20870  0C2A  1D03               	skipz
 20871  0C2B  2C36               	goto	u14315
 20872  0C2C  0024               	movlb	4	; select bank4
 20873  0C2D  082D               	movf	((_mainSystemData+1)^(0+512)+12),w
 20874  0C2E  0021               	movlb	1	; select bank1
 20875  0C2F  0650               	xorwf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20876  0C30  1D03               	skipz
 20877  0C31  2C36               	goto	u14315
 20878  0C32  0024               	movlb	4	; select bank4
 20879  0C33  082C               	movf	(_mainSystemData^(0+512)+12),w
 20880  0C34  0021               	movlb	1	; select bank1
 20881  0C35  064F               	xorwf	??_rfid_comm_process_recharge^(0+128),w
 20882  0C36                     u14315:	
 20883  0C36  1903               	skipnz
 20884  0C37  2C3A               	goto	l15603
 20885                           
 20886                           ;rfid_demo.c: 147: return 0;
 20887  0C38  3000               	movlw	0
 20888  0C39  0008               	return
 20889  0C3A                     l15603:	
 20890                           
 20891                           ;rfid_demo.c: 148: }
 20892                           ;rfid_demo.c: 149: }
 20893                           ;rfid_demo.c: 150: }
 20894                           ;rfid_demo.c: 152: __q31=stpInc->Value;
 20895  0C3A  0020               	movlb	0	; select bank0
 20896  0C3B  086E               	movf	rfid_comm_process_recharge@stpInc,w
 20897  0C3C  0086               	movwf	6
 20898  0C3D  3004               	movlw	4	; select bank8/9
 20899  0C3E  0087               	movwf	7
 20900  0C3F  3F40               	moviw [0]fsr1
 20901  0C40  0021               	movlb	1	; select bank1
 20902  0C41  00AC               	movwf	___q31^(0+128)
 20903  0C42  3F41               	moviw [1]fsr1
 20904  0C43  00AD               	movwf	(___q31+1)^(0+128)
 20905  0C44  3F42               	moviw [2]fsr1
 20906  0C45  00AE               	movwf	(___q31+2)^(0+128)
 20907  0C46  3F43               	moviw [3]fsr1
 20908  0C47  00AF               	movwf	(___q31+3)^(0+128)
 20909                           
 20910                           ;rfid_demo.c: 153: __q31=__q31-stpDec->Value;
 20911  0C48  082C               	movf	___q31^(0+128),w
 20912  0C49  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20913  0C4A  082D               	movf	(___q31+1)^(0+128),w
 20914  0C4B  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20915  0C4C  082E               	movf	(___q31+2)^(0+128),w
 20916  0C4D  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 20917  0C4E  082F               	movf	(___q31+3)^(0+128),w
 20918  0C4F  00D2               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 20919  0C50  0020               	movlb	0	; select bank0
 20920  0C51  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20921  0C52  0086               	movwf	6
 20922  0C53  3004               	movlw	4	; select bank8/9
 20923  0C54  0087               	movwf	7
 20924  0C55  3F40               	moviw [0]fsr1
 20925  0C56  0021               	movlb	1	; select bank1
 20926  0C57  00D3               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 20927  0C58  3F41               	moviw [1]fsr1
 20928  0C59  00D4               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 20929  0C5A  3F42               	moviw [2]fsr1
 20930  0C5B  00D5               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 20931  0C5C  3F43               	moviw [3]fsr1
 20932  0C5D  00D6               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 20933  0C5E  09D3               	comf	(??_rfid_comm_process_recharge+4)^(0+128),f
 20934  0C5F  09D4               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 20935  0C60  09D5               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 20936  0C61  09D6               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 20937  0C62  0AD3               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 20938  0C63  1903               	skipnz
 20939  0C64  0AD4               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 20940  0C65  1903               	skipnz
 20941  0C66  0AD5               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 20942  0C67  1903               	skipnz
 20943  0C68  0AD6               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 20944  0C69  0853               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 20945  0C6A  07CF               	addwf	??_rfid_comm_process_recharge^(0+128),f
 20946  0C6B  0854               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 20947  0C6C  3DD0               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 20948  0C6D  0855               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 20949  0C6E  3DD1               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 20950  0C6F  0856               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 20951  0C70  3DD2               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 20952  0C71  0852               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20953  0C72  00AF               	movwf	(___q31+3)^(0+128)
 20954  0C73  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20955  0C74  00AE               	movwf	(___q31+2)^(0+128)
 20956  0C75  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20957  0C76  00AD               	movwf	(___q31+1)^(0+128)
 20958  0C77  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20959  0C78  00AC               	movwf	___q31^(0+128)
 20960                           
 20961                           ;rfid_demo.c: 154: if(__q31<=0){
 20962  0C79  1BAF               	btfsc	(___q31+3)^(0+128),7
 20963  0C7A  2C88               	goto	l15609
 20964  0C7B  082F               	movf	(___q31+3)^(0+128),w
 20965  0C7C  1D03               	btfss	3,2
 20966  0C7D  2C8F               	goto	l15613
 20967  0C7E  082E               	movf	(___q31+2)^(0+128),w
 20968  0C7F  1D03               	btfss	3,2
 20969  0C80  2C8F               	goto	l15613
 20970  0C81  082D               	movf	(___q31+1)^(0+128),w
 20971  0C82  1D03               	btfss	3,2
 20972  0C83  2C8F               	goto	l15613
 20973  0C84  3001               	movlw	1
 20974  0C85  022C               	subwf	___q31^(0+128),w
 20975  0C86  1803               	btfsc	3,0
 20976  0C87  2C8F               	goto	l15613
 20977  0C88                     l15609:	
 20978                           
 20979                           ;rfid_demo.c: 155: CardError=CARD_NO_BALANCE;
 20980  0C88  300E               	movlw	14
 20981  0C89  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20982  0C8A  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 20983  0C8B  0022               	movlb	2	; select bank2
 20984  0C8C  00B9               	movwf	_CardError^(0+256)
 20985                           
 20986                           ;rfid_demo.c: 156: return 0;
 20987  0C8D  3000               	movlw	0
 20988  0C8E  0008               	return
 20989  0C8F                     l15613:	
 20990                           
 20991                           ;rfid_demo.c: 157: }
 20992                           ;rfid_demo.c: 158: if(__q31>mainSystemData.transferMoneyLimit){
 20993  0C8F  0024               	movlb	4	; select bank4
 20994  0C90  0847               	movf	((_mainSystemData+3)^(0+512)+36),w
 20995  0C91  3A80               	xorlw	128
 20996  0C92  0021               	movlb	1	; select bank1
 20997  0C93  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 20998  0C94  082F               	movf	(___q31+3)^(0+128),w
 20999  0C95  3A80               	xorlw	128
 21000  0C96  024F               	subwf	??_rfid_comm_process_recharge^(0+128),w
 21001  0C97  0024               	movlb	4	; select bank4
 21002  0C98  1D03               	skipz
 21003  0C99  2CAA               	goto	u14333
 21004  0C9A  0021               	movlb	1	; select bank1
 21005  0C9B  082E               	movf	(___q31+2)^(0+128),w
 21006  0C9C  0024               	movlb	4	; select bank4
 21007  0C9D  0246               	subwf	((_mainSystemData+2)^(0+512)+36),w
 21008  0C9E  1D03               	skipz
 21009  0C9F  2CAA               	goto	u14333
 21010  0CA0  0021               	movlb	1	; select bank1
 21011  0CA1  082D               	movf	(___q31+1)^(0+128),w
 21012  0CA2  0024               	movlb	4	; select bank4
 21013  0CA3  0245               	subwf	((_mainSystemData+1)^(0+512)+36),w
 21014  0CA4  1D03               	skipz
 21015  0CA5  2CAA               	goto	u14333
 21016  0CA6  0021               	movlb	1	; select bank1
 21017  0CA7  082C               	movf	___q31^(0+128),w
 21018  0CA8  0024               	movlb	4	; select bank4
 21019  0CA9  0244               	subwf	(_mainSystemData^(0+512)+36),w
 21020  0CAA                     u14333:	
 21021  0CAA  1803               	skipnc
 21022  0CAB  2CBA               	goto	l15617
 21023                           
 21024                           ;rfid_demo.c: 159: __q31=mainSystemData.transferMoneyLimit;
 21025  0CAC  3024               	movlw	36
 21026  0CAD  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 21027  0CAE  0086               	movwf	6
 21028  0CAF  3002               	movlw	2	; select bank4/5
 21029  0CB0  0087               	movwf	7
 21030  0CB1  3F40               	moviw [0]fsr1
 21031  0CB2  0021               	movlb	1	; select bank1
 21032  0CB3  00AC               	movwf	___q31^(0+128)
 21033  0CB4  3F41               	moviw [1]fsr1
 21034  0CB5  00AD               	movwf	(___q31+1)^(0+128)
 21035  0CB6  3F42               	moviw [2]fsr1
 21036  0CB7  00AE               	movwf	(___q31+2)^(0+128)
 21037  0CB8  3F43               	moviw [3]fsr1
 21038  0CB9  00AF               	movwf	(___q31+3)^(0+128)
 21039  0CBA                     l15617:	
 21040                           
 21041                           ;rfid_demo.c: 160: }
 21042                           ;rfid_demo.c: 161: stpDec->Value += __q31;
 21043  0CBA  0020               	movlb	0	; select bank0
 21044  0CBB  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21045  0CBC  0086               	movwf	6
 21046  0CBD  3004               	movlw	4	; select bank8/9
 21047  0CBE  0087               	movwf	7
 21048  0CBF  0021               	movlb	1	; select bank1
 21049  0CC0  082C               	movf	___q31^(0+128),w
 21050  0CC1  0781               	addwf	1,f
 21051  0CC2  3141               	addfsr 1,1
 21052  0CC3  082D               	movf	(___q31+1)^(0+128),w
 21053  0CC4  3D81               	addwfc	1,f
 21054  0CC5  3141               	addfsr 1,1
 21055  0CC6  082E               	movf	(___q31+2)^(0+128),w
 21056  0CC7  3D81               	addwfc	1,f
 21057  0CC8  3141               	addfsr 1,1
 21058  0CC9  082F               	movf	(___q31+3)^(0+128),w
 21059  0CCA  3D81               	addwfc	1,f
 21060                           
 21061                           ;rfid_demo.c: 162: stpDec->Times+=1;
 21062  0CCB  0020               	movlb	0	; select bank0
 21063  0CCC  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21064  0CCD  3E04               	addlw	4
 21065  0CCE  0086               	movwf	6
 21066  0CCF  3004               	movlw	4	; select bank8/9
 21067  0CD0  0087               	movwf	7
 21068  0CD1  3001               	movlw	1
 21069  0CD2  0781               	addwf	1,f
 21070  0CD3  3141               	addfsr 1,1
 21071  0CD4  1803               	skipnc
 21072  0CD5  0A81               	incf	1,f
 21073                           
 21074                           ;rfid_demo.c: 163: __t16=stpDec->Times,
 21075                           ;rfid_demo.c: 164: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 21076  0CD6  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21077  0CD7  3E04               	addlw	4
 21078  0CD8  0086               	movwf	6
 21079  0CD9  3004               	movlw	4	; select bank8/9
 21080  0CDA  0087               	movwf	7
 21081  0CDB  3F40               	moviw [0]fsr1
 21082  0CDC  00F8               	movwf	___t16
 21083  0CDD  3F41               	moviw [1]fsr1
 21084  0CDE  00F9               	movwf	___t16+1
 21085  0CDF  3056               	movlw	86
 21086  0CE0  00A8               	movwf	crc_append@message
 21087  0CE1  3004               	movlw	4
 21088  0CE2  00A9               	movwf	crc_append@message+1
 21089  0CE3  3006               	movlw	6
 21090  0CE4  00AA               	movwf	crc_append@n
 21091  0CE5  3000               	movlw	0
 21092  0CE6  00AB               	movwf	crc_append@n+1
 21093  0CE7  31B3  238B  318B   	fcall	_crc_append
 21094                           
 21095                           ;rfid_demo.c: 167: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->transferMone
      +                          y));
 21096  0CEA  300C               	movlw	12
 21097  0CEB  0022               	movlb	2	; select bank2
 21098  0CEC  00C3               	movwf	_flashOpStr^(0+256)
 21099  0CED  3000               	movlw	0
 21100  0CEE  00C4               	movwf	(_flashOpStr+1)^(0+256)
 21101                           
 21102                           ;rfid_demo.c: 168: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21103  0CEF  3002               	movlw	2
 21104  0CF0  0021               	movlb	1	; select bank1
 21105  0CF1  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21106  0CF2  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21107  0CF3  0022               	movlb	2	; select bank2
 21108  0CF4  00D7               	movwf	(_flashOpStr^(0+256)+20)
 21109                           
 21110                           ;rfid_demo.c: 169: flashOpStr.len=6;
 21111  0CF5  3006               	movlw	6
 21112  0CF6  00C5               	movwf	(_flashOpStr^(0+256)+2)
 21113  0CF7  3000               	movlw	0
 21114  0CF8  00C6               	movwf	(_flashOpStr^(0+256)+3)
 21115                           
 21116                           ;rfid_demo.c: 170: rtBalanceMoney=rtBalanceMoney+__q31;
 21117  0CF9  0021               	movlb	1	; select bank1
 21118  0CFA  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 21119  0CFB  072C               	addwf	___q31^(0+128),w
 21120  0CFC  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21121  0CFD  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21122  0CFE  3D2D               	addwfc	(___q31+1)^(0+128),w
 21123  0CFF  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21124  0D00  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21125  0D01  3D2E               	addwfc	(___q31+2)^(0+128),w
 21126  0D02  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21127  0D03  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21128  0D04  3D2F               	addwfc	(___q31+3)^(0+128),w
 21129  0D05  00D2               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21130  0D06  0852               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21131  0D07  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 21132  0D08  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21133  0D09  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 21134  0D0A  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21135  0D0B  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 21136  0D0C  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21137  0D0D  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 21138                           
 21139                           ;rfid_demo.c: 171: if(rtBalanceMoney>=mainSystemData.maxBalanceLimit){
 21140  0D0E  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21141  0D0F  3A80               	xorlw	128
 21142  0D10  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21143  0D11  0024               	movlb	4	; select bank4
 21144  0D12  084B               	movf	((_mainSystemData+3)^(0+512)+40),w
 21145  0D13  3A80               	xorlw	128
 21146  0D14  0021               	movlb	1	; select bank1
 21147  0D15  024F               	subwf	??_rfid_comm_process_recharge^(0+128),w
 21148  0D16  1D03               	skipz
 21149  0D17  2D28               	goto	u14343
 21150  0D18  0024               	movlb	4	; select bank4
 21151  0D19  084A               	movf	((_mainSystemData+2)^(0+512)+40),w
 21152  0D1A  0021               	movlb	1	; select bank1
 21153  0D1B  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21154  0D1C  1D03               	skipz
 21155  0D1D  2D28               	goto	u14343
 21156  0D1E  0024               	movlb	4	; select bank4
 21157  0D1F  0849               	movf	((_mainSystemData+1)^(0+512)+40),w
 21158  0D20  0021               	movlb	1	; select bank1
 21159  0D21  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21160  0D22  1D03               	skipz
 21161  0D23  2D28               	goto	u14343
 21162  0D24  0024               	movlb	4	; select bank4
 21163  0D25  0848               	movf	(_mainSystemData^(0+512)+40),w
 21164  0D26  0021               	movlb	1	; select bank1
 21165  0D27  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 21166  0D28                     u14343:	
 21167  0D28  1C03               	skipc
 21168  0D29  2D59               	goto	l15645
 21169                           
 21170                           ;rfid_demo.c: 172: rtBalanceMoney=rtBalanceMoney-__q31;
 21171  0D2A  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 21172  0D2B  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21173  0D2C  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21174  0D2D  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21175  0D2E  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21176  0D2F  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21177  0D30  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21178  0D31  00D2               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21179  0D32  092C               	comf	___q31^(0+128),w
 21180  0D33  00D3               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 21181  0D34  092D               	comf	(___q31+1)^(0+128),w
 21182  0D35  00D4               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 21183  0D36  092E               	comf	(___q31+2)^(0+128),w
 21184  0D37  00D5               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 21185  0D38  092F               	comf	(___q31+3)^(0+128),w
 21186  0D39  00D6               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 21187  0D3A  0AD3               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 21188  0D3B  1903               	skipnz
 21189  0D3C  0AD4               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 21190  0D3D  1903               	skipnz
 21191  0D3E  0AD5               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 21192  0D3F  1903               	skipnz
 21193  0D40  0AD6               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 21194  0D41  0853               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 21195  0D42  07CF               	addwf	??_rfid_comm_process_recharge^(0+128),f
 21196  0D43  0854               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 21197  0D44  3DD0               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 21198  0D45  0855               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 21199  0D46  3DD1               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 21200  0D47  0856               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 21201  0D48  3DD2               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 21202  0D49  0852               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21203  0D4A  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 21204  0D4B  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21205  0D4C  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 21206  0D4D  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21207  0D4E  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 21208  0D4F  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21209  0D50  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 21210                           
 21211                           ;rfid_demo.c: 174: CardError=RECHAERGE_OVERFLOW;
 21212  0D51  3014               	movlw	20
 21213  0D52  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21214  0D53  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21215  0D54  0022               	movlb	2	; select bank2
 21216  0D55  00B9               	movwf	_CardError^(0+256)
 21217                           
 21218                           ;rfid_demo.c: 175: flashOpStr.op=enFLASH_NOTHING;
 21219  0D56  01D7               	clrf	(_flashOpStr^(0+256)+20)
 21220                           
 21221                           ;rfid_demo.c: 176: return 0;
 21222  0D57  3000               	movlw	0
 21223  0D58  0008               	return
 21224  0D59                     l15645:	
 21225                           
 21226                           ;rfid_demo.c: 177: };
 21227                           ;rfid_demo.c: 181: m_mem_cpy_len((uint8_t*)(&flashOpStr.buf[0]),(uint8_t*)(cardDecBuf),6
      +                          );
 21228  0D59  3047               	movlw	low (_flashOpStr+4)
 21229  0D5A  00F3               	movwf	m_mem_cpy_len@d
 21230  0D5B  3001               	movlw	high (_flashOpStr+4)
 21231  0D5C  00F4               	movwf	m_mem_cpy_len@d+1
 21232  0D5D  3056               	movlw	86
 21233  0D5E  00F5               	movwf	m_mem_cpy_len@s
 21234  0D5F  3004               	movlw	4
 21235  0D60  00F6               	movwf	m_mem_cpy_len@s+1
 21236  0D61  3006               	movlw	6
 21237  0D62  0021               	movlb	1	; select bank1
 21238  0D63  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21239  0D64  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21240  0D65  00F7               	movwf	m_mem_cpy_len@len
 21241  0D66  31BD  25A3  318B   	fcall	_m_mem_cpy_len
 21242                           
 21243                           ;rfid_demo.c: 183: ret=data_api_flash_process();
 21244  0D69  31BD  25D9  318B   	fcall	_data_api_flash_process
 21245  0D6C  0021               	movlb	1	; select bank1
 21246  0D6D  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21247  0D6E  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21248  0D6F  0020               	movlb	0	; select bank0
 21249  0D70  00ED               	movwf	rfid_comm_process_recharge@ret
 21250                           
 21251                           ;rfid_demo.c: 184: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 21252  0D71  300F               	movlw	15
 21253  0D72  0021               	movlb	1	; select bank1
 21254  0D73  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21255  0D74  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21256  0D75  0020               	movlb	0	; select bank0
 21257  0D76  00CA               	movwf	picc_authenticate@blockAddr
 21258  0D77  30C8               	movlw	low _userKeyB
 21259  0D78  00CB               	movwf	picc_authenticate@key
 21260  0D79  3001               	movlw	high _userKeyB
 21261  0D7A  00CC               	movwf	picc_authenticate@key+1
 21262  0D7B  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21263  0D7C  0021               	movlb	1	; select bank1
 21264  0D7D  00D0               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21265  0D7E  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21266  0D7F  0020               	movlb	0	; select bank0
 21267  0D80  00CD               	movwf	picc_authenticate@uid
 21268  0D81  3061               	movlw	97
 21269  0D82  31AB  23FA  318B   	fcall	_picc_authenticate
 21270  0D85  0021               	movlb	1	; select bank1
 21271  0D86  00D1               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21272  0D87  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21273  0D88  00BE               	movwf	_piccResult^(0+128)
 21274                           
 21275                           ;rfid_demo.c: 185: piccResult = mifare_write(12, cardDecBuf, 16);
 21276  0D89  3056               	movlw	86
 21277  0D8A  00CF               	movwf	??_rfid_comm_process_recharge^(0+128)
 21278  0D8B  084F               	movf	??_rfid_comm_process_recharge^(0+128),w
 21279  0D8C  0020               	movlb	0	; select bank0
 21280  0D8D  00E9               	movwf	mifare_write@buffer
 21281  0D8E  3010               	movlw	16
 21282  0D8F  0021               	movlb	1	; select bank1
 21283  0D90  00D0               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21284  0D91  0850               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21285  0D92  0020               	movlb	0	; select bank0
 21286  0D93  00EA               	movwf	mifare_write@bufferSize
 21287  0D94  300C               	movlw	12
 21288  0D95  31A8  2037  318B   	fcall	_mifare_write
 21289  0D98  0021               	movlb	1	; select bank1
 21290  0D99  00D1               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21291  0D9A  0851               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21292  0D9B  00BE               	movwf	_piccResult^(0+128)
 21293                           
 21294                           ;rfid_demo.c: 186: if(piccResult!=STATUS_OK){
 21295  0D9C  083E               	movf	_piccResult^(0+128),w
 21296  0D9D  1903               	btfsc	3,2
 21297  0D9E  2DA1               	goto	l15659
 21298                           
 21299                           ;rfid_demo.c: 187: return 0;
 21300  0D9F  3000               	movlw	0
 21301  0DA0  0008               	return
 21302  0DA1                     l15659:	
 21303                           
 21304                           ;rfid_demo.c: 188: }
 21305                           ;rfid_demo.c: 189: return 1;
 21306  0DA1  3001               	movlw	1
 21307  0DA2  0008               	return
 21308  0DA3                     __end_of_rfid_comm_process_recharge:	
 21309                           
 21310                           	psect	text63
 21311  3674                     __ptext63:	
 21312 ;; *************** function _rfid_comm_process_read_inc *****************
 21313 ;; Defined at:
 21314 ;;		line 106 in file "src/app/rfid_demo.c"
 21315 ;; Parameters:    Size  Location     Type
 21316 ;;		None
 21317 ;; Auto vars:     Size  Location     Type
 21318 ;;  ret             1   67[BANK0 ] unsigned char 
 21319 ;; Return value:  Size  Location     Type
 21320 ;;                  1    wreg      unsigned char 
 21321 ;; Registers used:
 21322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21323 ;; Tracked objects:
 21324 ;;		On entry : 0/0
 21325 ;;		On exit  : 0/0
 21326 ;;		Unchanged: 0/0
 21327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21330 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 21331 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 21332 ;;Total ram usage:        4 bytes
 21333 ;; Hardware stack levels used:    1
 21334 ;; Hardware stack levels required when called:    8
 21335 ;; This function calls:
 21336 ;;		_crc_verify
 21337 ;;		_mifare_read
 21338 ;;		_picc_authenticate
 21339 ;; This function is called by:
 21340 ;;		_rfid_comm_process
 21341 ;; This function uses a non-reentrant model
 21342 ;;
 21343                           
 21344                           
 21345                           ;psect for function _rfid_comm_process_read_inc
 21346  3674                     _rfid_comm_process_read_inc:	
 21347                           
 21348                           ;rfid_demo.c: 108: uint8_t ret;
 21349                           ;rfid_demo.c: 110: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 11, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 21350                           
 21351                           ;incstack = 0
 21352                           ; Regs used in _rfid_comm_process_read_inc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21353  3674  300B               	movlw	11
 21354  3675  0020               	movlb	0	; select bank0
 21355  3676  00E0               	movwf	??_rfid_comm_process_read_inc
 21356  3677  0860               	movf	??_rfid_comm_process_read_inc,w
 21357  3678  00CA               	movwf	picc_authenticate@blockAddr
 21358  3679  30C8               	movlw	low _userKeyB
 21359  367A  00CB               	movwf	picc_authenticate@key
 21360  367B  3001               	movlw	high _userKeyB
 21361  367C  00CC               	movwf	picc_authenticate@key+1
 21362  367D  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21363  367E  00E1               	movwf	??_rfid_comm_process_read_inc+1
 21364  367F  0861               	movf	??_rfid_comm_process_read_inc+1,w
 21365  3680  00CD               	movwf	picc_authenticate@uid
 21366  3681  3061               	movlw	97
 21367  3682  31AB  23FA  31B6   	fcall	_picc_authenticate
 21368  3685  0020               	movlb	0	; select bank0
 21369  3686  00E2               	movwf	??_rfid_comm_process_read_inc+2
 21370  3687  0862               	movf	??_rfid_comm_process_read_inc+2,w
 21371  3688  0021               	movlb	1	; select bank1
 21372  3689  00BE               	movwf	_piccResult^(0+128)
 21373                           
 21374                           ;rfid_demo.c: 111: __t8=18;
 21375  368A  3012               	movlw	18
 21376  368B  0020               	movlb	0	; select bank0
 21377  368C  00E0               	movwf	??_rfid_comm_process_read_inc
 21378  368D  0860               	movf	??_rfid_comm_process_read_inc,w
 21379  368E  0021               	movlb	1	; select bank1
 21380  368F  00CA               	movwf	___t8^(0+128)
 21381                           
 21382                           ;rfid_demo.c: 112: piccResult = mifare_read(8, cardIncBuf, &__t8);
 21383  3690  3044               	movlw	68
 21384  3691  0020               	movlb	0	; select bank0
 21385  3692  00E0               	movwf	??_rfid_comm_process_read_inc
 21386  3693  0860               	movf	??_rfid_comm_process_read_inc,w
 21387  3694  00CA               	movwf	mifare_read@buffer
 21388  3695  30CA               	movlw	(low (___t8| 0))& (0+255)
 21389  3696  00E1               	movwf	??_rfid_comm_process_read_inc+1
 21390  3697  0861               	movf	??_rfid_comm_process_read_inc+1,w
 21391  3698  00CB               	movwf	mifare_read@bufferSize
 21392  3699  3008               	movlw	8
 21393  369A  31AA  2298  31B6   	fcall	_mifare_read
 21394  369D  0020               	movlb	0	; select bank0
 21395  369E  00E2               	movwf	??_rfid_comm_process_read_inc+2
 21396  369F  0862               	movf	??_rfid_comm_process_read_inc+2,w
 21397  36A0  0021               	movlb	1	; select bank1
 21398  36A1  00BE               	movwf	_piccResult^(0+128)
 21399                           
 21400                           ;rfid_demo.c: 113: ret=crc_verify(cardIncBuf,sizeof(st_cardValueStrucrtDef));
 21401  36A2  3044               	movlw	68
 21402  36A3  0020               	movlb	0	; select bank0
 21403  36A4  00A8               	movwf	crc_verify@message
 21404  36A5  3004               	movlw	4
 21405  36A6  00A9               	movwf	crc_verify@message+1
 21406  36A7  3008               	movlw	8
 21407  36A8  00AA               	movwf	crc_verify@n
 21408  36A9  3000               	movlw	0
 21409  36AA  00AB               	movwf	crc_verify@n+1
 21410  36AB  31A8  2000         	fcall	_crc_verify
 21411  36AD  0020               	movlb	0	; select bank0
 21412  36AE  00E0               	movwf	??_rfid_comm_process_read_inc
 21413  36AF  0860               	movf	??_rfid_comm_process_read_inc,w
 21414  36B0  00E3               	movwf	rfid_comm_process_read_inc@ret
 21415                           
 21416                           ;rfid_demo.c: 114: return ret;
 21417  36B1  0863               	movf	rfid_comm_process_read_inc@ret,w
 21418  36B2  0008               	return
 21419  36B3                     __end_of_rfid_comm_process_read_inc:	
 21420                           
 21421                           	psect	text64
 21422  0DA3                     __ptext64:	
 21423 ;; *************** function _rfid_comm_process_read_header *****************
 21424 ;; Defined at:
 21425 ;;		line 41 in file "src/app/rfid_demo.c"
 21426 ;; Parameters:    Size  Location     Type
 21427 ;;		None
 21428 ;; Auto vars:     Size  Location     Type
 21429 ;;  stp             2   78[BANK0 ] PTR struct .
 21430 ;;		 -> comBuffer(128), 
 21431 ;;  ret             1   77[BANK0 ] unsigned char 
 21432 ;; Return value:  Size  Location     Type
 21433 ;;                  1    wreg      unsigned char 
 21434 ;; Registers used:
 21435 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21436 ;; Tracked objects:
 21437 ;;		On entry : 0/0
 21438 ;;		On exit  : 0/0
 21439 ;;		Unchanged: 0/0
 21440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21442 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 21443 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0
 21444 ;;      Totals:         0       3       7       0       0       0       0       0       0       0       0       0       
      +0
 21445 ;;Total ram usage:       10 bytes
 21446 ;; Hardware stack levels used:    1
 21447 ;; Hardware stack levels required when called:    9
 21448 ;; This function calls:
 21449 ;;		_crc_append
 21450 ;;		_crc_verify
 21451 ;;		_create_card_key_b
 21452 ;;		_data_api_flash_process
 21453 ;;		_m_mem_cpy_len
 21454 ;;		_m_mem_set
 21455 ;;		_mifare_read
 21456 ;;		_mifare_write
 21457 ;;		_picc_authenticate
 21458 ;; This function is called by:
 21459 ;;		_rfid_comm_process
 21460 ;; This function uses a non-reentrant model
 21461 ;;
 21462                           
 21463                           
 21464                           ;psect for function _rfid_comm_process_read_header
 21465  0DA3                     _rfid_comm_process_read_header:	
 21466                           
 21467                           ;rfid_demo.c: 43: uint8_t ret;
 21468                           ;rfid_demo.c: 44: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 3, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 21469                           
 21470                           ;incstack = 0
 21471                           ; Regs used in _rfid_comm_process_read_header: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 21472  0DA3  3003               	movlw	3
 21473  0DA4  0021               	movlb	1	; select bank1
 21474  0DA5  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21475  0DA6  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21476  0DA7  0020               	movlb	0	; select bank0
 21477  0DA8  00CA               	movwf	picc_authenticate@blockAddr
 21478  0DA9  3025               	movlw	low (_defaultKeyA| (0+32768))
 21479  0DAA  00CB               	movwf	picc_authenticate@key
 21480  0DAB  30B9               	movlw	high (_defaultKeyA| (0+32768))
 21481  0DAC  00CC               	movwf	picc_authenticate@key+1
 21482  0DAD  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21483  0DAE  0021               	movlb	1	; select bank1
 21484  0DAF  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21485  0DB0  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21486  0DB1  0020               	movlb	0	; select bank0
 21487  0DB2  00CD               	movwf	picc_authenticate@uid
 21488  0DB3  3060               	movlw	96
 21489  0DB4  31AB  23FA  318D   	fcall	_picc_authenticate
 21490  0DB7  0021               	movlb	1	; select bank1
 21491  0DB8  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21492  0DB9  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21493  0DBA  00BE               	movwf	_piccResult^(0+128)
 21494                           
 21495                           ;rfid_demo.c: 45: if (piccResult != STATUS_OK)return 0;
 21496  0DBB  083E               	movf	_piccResult^(0+128),w
 21497  0DBC  1903               	btfsc	3,2
 21498  0DBD  2DC0               	goto	l15423
 21499  0DBE  3000               	movlw	0
 21500  0DBF  0008               	return
 21501  0DC0                     l15423:	
 21502                           
 21503                           ;rfid_demo.c: 46: rdLen=18;
 21504  0DC0  3012               	movlw	18
 21505  0DC1  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21506  0DC2  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21507  0DC3  00C9               	movwf	_rdLen^(0+128)
 21508                           
 21509                           ;rfid_demo.c: 47: piccResult = mifare_read(0, cardUidBlockBuf, &rdLen);
 21510  0DC4  3020               	movlw	32
 21511  0DC5  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21512  0DC6  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21513  0DC7  0020               	movlb	0	; select bank0
 21514  0DC8  00CA               	movwf	mifare_read@buffer
 21515  0DC9  30C9               	movlw	(low (_rdLen| 0))& (0+255)
 21516  0DCA  0021               	movlb	1	; select bank1
 21517  0DCB  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21518  0DCC  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21519  0DCD  0020               	movlb	0	; select bank0
 21520  0DCE  00CB               	movwf	mifare_read@bufferSize
 21521  0DCF  3000               	movlw	0
 21522  0DD0  31AA  2298  318D   	fcall	_mifare_read
 21523  0DD3  0021               	movlb	1	; select bank1
 21524  0DD4  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21525  0DD5  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21526  0DD6  00BE               	movwf	_piccResult^(0+128)
 21527                           
 21528                           ;rfid_demo.c: 48: if (piccResult != STATUS_OK) return 0;
 21529  0DD7  083E               	movf	_piccResult^(0+128),w
 21530  0DD8  1903               	btfsc	3,2
 21531  0DD9  2DDC               	goto	l15433
 21532  0DDA  3000               	movlw	0
 21533  0DDB  0008               	return
 21534  0DDC                     l15433:	
 21535                           
 21536                           ;rfid_demo.c: 50: m_mem_cpy_len(comBuffer,cardUidBlockBuf,18);
 21537  0DDC  3000               	movlw	0
 21538  0DDD  00F3               	movwf	m_mem_cpy_len@d
 21539  0DDE  3022               	movlw	34
 21540  0DDF  00F4               	movwf	m_mem_cpy_len@d+1
 21541  0DE0  3020               	movlw	32
 21542  0DE1  00F5               	movwf	m_mem_cpy_len@s
 21543  0DE2  3004               	movlw	4
 21544  0DE3  00F6               	movwf	m_mem_cpy_len@s+1
 21545  0DE4  3012               	movlw	18
 21546  0DE5  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21547  0DE6  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21548  0DE7  00F7               	movwf	m_mem_cpy_len@len
 21549  0DE8  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21550                           
 21551                           ;rfid_demo.c: 52: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 21552  0DEB  3007               	movlw	7
 21553  0DEC  0021               	movlb	1	; select bank1
 21554  0DED  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21555  0DEE  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21556  0DEF  0020               	movlb	0	; select bank0
 21557  0DF0  00CA               	movwf	picc_authenticate@blockAddr
 21558  0DF1  3025               	movlw	low (_defaultKeyA| (0+32768))
 21559  0DF2  00CB               	movwf	picc_authenticate@key
 21560  0DF3  30B9               	movlw	high (_defaultKeyA| (0+32768))
 21561  0DF4  00CC               	movwf	picc_authenticate@key+1
 21562  0DF5  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21563  0DF6  0021               	movlb	1	; select bank1
 21564  0DF7  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21565  0DF8  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21566  0DF9  0020               	movlb	0	; select bank0
 21567  0DFA  00CD               	movwf	picc_authenticate@uid
 21568  0DFB  3060               	movlw	96
 21569  0DFC  31AB  23FA  318D   	fcall	_picc_authenticate
 21570  0DFF  0021               	movlb	1	; select bank1
 21571  0E00  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21572  0E01  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21573  0E02  00BE               	movwf	_piccResult^(0+128)
 21574                           
 21575                           ;rfid_demo.c: 53: if(piccResult!=STATUS_OK)return 0;
 21576  0E03  083E               	movf	_piccResult^(0+128),w
 21577  0E04  1903               	btfsc	3,2
 21578  0E05  2E08               	goto	l15443
 21579  0E06  3000               	movlw	0
 21580  0E07  0008               	return
 21581  0E08                     l15443:	
 21582                           
 21583                           ;rfid_demo.c: 54: for(__t8=4;__t8<7;__t8++){
 21584  0E08  3004               	movlw	4
 21585  0E09  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21586  0E0A  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21587  0E0B  00CA               	movwf	___t8^(0+128)
 21588  0E0C  3007               	movlw	7
 21589  0E0D  024A               	subwf	___t8^(0+128),w
 21590  0E0E  1803               	btfsc	3,0
 21591  0E0F  2E62               	goto	l15461
 21592  0E10                     l15447:	
 21593                           
 21594                           ;rfid_demo.c: 55: rdLen=18;
 21595  0E10  3012               	movlw	18
 21596  0E11  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21597  0E12  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21598  0E13  00C9               	movwf	_rdLen^(0+128)
 21599                           
 21600                           ;rfid_demo.c: 56: piccResult = mifare_read(__t8, cardWriteBuf, &rdLen);
 21601  0E14  3032               	movlw	50
 21602  0E15  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21603  0E16  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21604  0E17  0020               	movlb	0	; select bank0
 21605  0E18  00CA               	movwf	mifare_read@buffer
 21606  0E19  30C9               	movlw	(low (_rdLen| 0))& (0+255)
 21607  0E1A  0021               	movlb	1	; select bank1
 21608  0E1B  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21609  0E1C  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21610  0E1D  0020               	movlb	0	; select bank0
 21611  0E1E  00CB               	movwf	mifare_read@bufferSize
 21612  0E1F  0021               	movlb	1	; select bank1
 21613  0E20  084A               	movf	___t8^(0+128),w
 21614  0E21  31AA  2298  318D   	fcall	_mifare_read
 21615  0E24  0021               	movlb	1	; select bank1
 21616  0E25  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21617  0E26  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21618  0E27  00BE               	movwf	_piccResult^(0+128)
 21619                           
 21620                           ;rfid_demo.c: 57: m_mem_cpy_len(comBuffer+(__t8-4)*16,cardWriteBuf,16);
 21621  0E28  084A               	movf	___t8^(0+128),w
 21622  0E29  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21623  0E2A  01D0               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 21624  0E2B  0ECF               	swapf	??_rfid_comm_process_read_header^(0+128),f
 21625  0E2C  0ED0               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21626  0E2D  30F0               	movlw	240
 21627  0E2E  05D0               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21628  0E2F  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21629  0E30  390F               	andlw	15
 21630  0E31  04D0               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21631  0E32  30F0               	movlw	240
 21632  0E33  05CF               	andwf	??_rfid_comm_process_read_header^(0+128),f
 21633  0E34  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21634  0E35  3EC0               	addlw	192
 21635  0E36  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21636  0E37  30FF               	movlw	255
 21637  0E38  3D50               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 21638  0E39  00D2               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 21639  0E3A  3000               	movlw	0
 21640  0E3B  00D3               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 21641  0E3C  3022               	movlw	34
 21642  0E3D  00D4               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 21643  0E3E  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21644  0E3F  0753               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 21645  0E40  00F3               	movwf	m_mem_cpy_len@d
 21646  0E41  0852               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21647  0E42  3D54               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 21648  0E43  00F4               	movwf	m_mem_cpy_len@d+1
 21649  0E44  3032               	movlw	50
 21650  0E45  00F5               	movwf	m_mem_cpy_len@s
 21651  0E46  3004               	movlw	4
 21652  0E47  00F6               	movwf	m_mem_cpy_len@s+1
 21653  0E48  3010               	movlw	16
 21654  0E49  00D5               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 21655  0E4A  0855               	movf	(??_rfid_comm_process_read_header+6)^(0+128),w
 21656  0E4B  00F7               	movwf	m_mem_cpy_len@len
 21657  0E4C  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21658                           
 21659                           ;rfid_demo.c: 58: if(piccResult!=STATUS_OK){ CardError=READ_HEADER_ERROR; break;}
 21660  0E4F  0021               	movlb	1	; select bank1
 21661  0E50  083E               	movf	_piccResult^(0+128),w
 21662  0E51  1903               	btfsc	3,2
 21663  0E52  2E59               	goto	l15457
 21664  0E53  3002               	movlw	2
 21665  0E54  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21666  0E55  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21667  0E56  0022               	movlb	2	; select bank2
 21668  0E57  00B9               	movwf	_CardError^(0+256)
 21669  0E58  2E62               	goto	l15461
 21670  0E59                     l15457:	
 21671  0E59  3001               	movlw	1
 21672  0E5A  0021               	movlb	1	; select bank1
 21673  0E5B  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21674  0E5C  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21675  0E5D  07CA               	addwf	___t8^(0+128),f
 21676  0E5E  3007               	movlw	7
 21677  0E5F  024A               	subwf	___t8^(0+128),w
 21678  0E60  1C03               	skipc
 21679  0E61  2E10               	goto	l15447
 21680  0E62                     l15461:	
 21681                           
 21682                           ;rfid_demo.c: 59: }
 21683                           ;rfid_demo.c: 60: ret=crc_verify(comBuffer,sizeof(st_cardHeaderDef));
 21684  0E62  3000               	movlw	0
 21685  0E63  0020               	movlb	0	; select bank0
 21686  0E64  00A8               	movwf	crc_verify@message
 21687  0E65  3022               	movlw	34
 21688  0E66  00A9               	movwf	crc_verify@message+1
 21689  0E67  3030               	movlw	48
 21690  0E68  00AA               	movwf	crc_verify@n
 21691  0E69  3000               	movlw	0
 21692  0E6A  00AB               	movwf	crc_verify@n+1
 21693  0E6B  31A8  2000  318D   	fcall	_crc_verify
 21694  0E6E  0021               	movlb	1	; select bank1
 21695  0E6F  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21696  0E70  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21697  0E71  0020               	movlb	0	; select bank0
 21698  0E72  00ED               	movwf	rfid_comm_process_read_header@ret
 21699                           
 21700                           ;rfid_demo.c: 61: if(!ret)return 0;
 21701  0E73  086D               	movf	rfid_comm_process_read_header@ret,w
 21702  0E74  1D03               	btfss	3,2
 21703  0E75  2E78               	goto	l15469
 21704  0E76  3000               	movlw	0
 21705  0E77  0008               	return
 21706  0E78                     l15469:	
 21707                           
 21708                           ;rfid_demo.c: 63: st_cardHeaderDef* stp=(st_cardHeaderDef*)comBuffer;
 21709  0E78  3000               	movlw	0
 21710  0E79  00EE               	movwf	rfid_comm_process_read_header@stp
 21711  0E7A  3022               	movlw	34
 21712  0E7B  00EF               	movwf	rfid_comm_process_read_header@stp+1
 21713                           
 21714                           ;rfid_demo.c: 64: if(stp->keyUpdate ==0xff ){
 21715  0E7C  086E               	movf	rfid_comm_process_read_header@stp,w
 21716  0E7D  0086               	movwf	6
 21717  0E7E  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21718  0E7F  0087               	movwf	7
 21719  0E80  314C               	addfsr 1,12
 21720  0E81  0A01               	incf	1,w
 21721  0E82  1D03               	btfss	3,2
 21722  0E83  2F42               	goto	l15513
 21723                           
 21724                           ;rfid_demo.c: 65: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21725  0E84  3002               	movlw	2
 21726  0E85  0021               	movlb	1	; select bank1
 21727  0E86  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21728  0E87  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21729  0E88  0022               	movlb	2	; select bank2
 21730  0E89  00D7               	movwf	(_flashOpStr^(0+256)+20)
 21731                           
 21732                           ;rfid_demo.c: 66: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardKeyCreate
      +                          Key[0]));
 21733  0E8A  3040               	movlw	64
 21734  0E8B  00C3               	movwf	_flashOpStr^(0+256)
 21735  0E8C  3000               	movlw	0
 21736  0E8D  00C4               	movwf	(_flashOpStr+1)^(0+256)
 21737                           
 21738                           ;rfid_demo.c: 67: flashOpStr.len=6;
 21739  0E8E  3006               	movlw	6
 21740  0E8F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 21741  0E90  3000               	movlw	0
 21742  0E91  00C6               	movwf	(_flashOpStr^(0+256)+3)
 21743                           
 21744                           ;rfid_demo.c: 68: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)(stp->cardkeyBcreatKey),6);
 21745  0E92  3047               	movlw	low (_flashOpStr+4)
 21746  0E93  00F3               	movwf	m_mem_cpy_len@d
 21747  0E94  3001               	movlw	high (_flashOpStr+4)
 21748  0E95  00F4               	movwf	m_mem_cpy_len@d+1
 21749  0E96  0020               	movlb	0	; select bank0
 21750  0E97  086E               	movf	rfid_comm_process_read_header@stp,w
 21751  0E98  3E20               	addlw	32
 21752  0E99  00F5               	movwf	m_mem_cpy_len@s
 21753  0E9A  3000               	movlw	0
 21754  0E9B  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 21755  0E9C  00F6               	movwf	m_mem_cpy_len@s+1
 21756  0E9D  3006               	movlw	6
 21757  0E9E  0021               	movlb	1	; select bank1
 21758  0E9F  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21759  0EA0  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21760  0EA1  00F7               	movwf	m_mem_cpy_len@len
 21761  0EA2  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21762                           
 21763                           ;rfid_demo.c: 69: m_mem_cpy_len(comBuffer+80,comBuffer,48);
 21764  0EA5  3050               	movlw	80
 21765  0EA6  00F3               	movwf	m_mem_cpy_len@d
 21766  0EA7  3022               	movlw	34
 21767  0EA8  00F4               	movwf	m_mem_cpy_len@d+1
 21768  0EA9  3000               	movlw	0
 21769  0EAA  00F5               	movwf	m_mem_cpy_len@s
 21770  0EAB  3022               	movlw	34
 21771  0EAC  00F6               	movwf	m_mem_cpy_len@s+1
 21772  0EAD  3030               	movlw	48
 21773  0EAE  0021               	movlb	1	; select bank1
 21774  0EAF  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21775  0EB0  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21776  0EB1  00F7               	movwf	m_mem_cpy_len@len
 21777  0EB2  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21778                           
 21779                           ;rfid_demo.c: 70: ret=data_api_flash_process();
 21780  0EB5  31BD  25D9  318D   	fcall	_data_api_flash_process
 21781  0EB8  0021               	movlb	1	; select bank1
 21782  0EB9  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21783  0EBA  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21784  0EBB  0020               	movlb	0	; select bank0
 21785  0EBC  00ED               	movwf	rfid_comm_process_read_header@ret
 21786                           
 21787                           ;rfid_demo.c: 71: m_mem_cpy_len(comBuffer,comBuffer+80,48);
 21788  0EBD  3000               	movlw	0
 21789  0EBE  00F3               	movwf	m_mem_cpy_len@d
 21790  0EBF  3022               	movlw	34
 21791  0EC0  00F4               	movwf	m_mem_cpy_len@d+1
 21792  0EC1  3050               	movlw	80
 21793  0EC2  00F5               	movwf	m_mem_cpy_len@s
 21794  0EC3  3022               	movlw	34
 21795  0EC4  00F6               	movwf	m_mem_cpy_len@s+1
 21796  0EC5  3030               	movlw	48
 21797  0EC6  0021               	movlb	1	; select bank1
 21798  0EC7  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21799  0EC8  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21800  0EC9  00F7               	movwf	m_mem_cpy_len@len
 21801  0ECA  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21802                           
 21803                           ;rfid_demo.c: 72: if(ret){
 21804  0ECD  0020               	movlb	0	; select bank0
 21805  0ECE  086D               	movf	rfid_comm_process_read_header@ret,w
 21806  0ECF  1903               	btfsc	3,2
 21807  0ED0  2F42               	goto	l15513
 21808                           
 21809                           ;rfid_demo.c: 73: stp->keyUpdate=0;
 21810  0ED1  086E               	movf	rfid_comm_process_read_header@stp,w
 21811  0ED2  0086               	movwf	6
 21812  0ED3  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21813  0ED4  0087               	movwf	7
 21814  0ED5  314C               	addfsr 1,12
 21815  0ED6  0181               	clrf	1
 21816                           
 21817                           ;rfid_demo.c: 74: m_mem_set(stp->cardkeyBcreatKey,0,6);
 21818  0ED7  086E               	movf	rfid_comm_process_read_header@stp,w
 21819  0ED8  3E20               	addlw	32
 21820  0ED9  00F3               	movwf	m_mem_set@buf
 21821  0EDA  3000               	movlw	0
 21822  0EDB  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 21823  0EDC  00F4               	movwf	m_mem_set@buf+1
 21824  0EDD  01F5               	clrf	m_mem_set@x
 21825  0EDE  3006               	movlw	6
 21826  0EDF  0021               	movlb	1	; select bank1
 21827  0EE0  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21828  0EE1  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21829  0EE2  00F6               	movwf	m_mem_set@len
 21830  0EE3  31BB  23BC  318D   	fcall	_m_mem_set
 21831                           
 21832                           ;rfid_demo.c: 75: crc_append(comBuffer,sizeof(st_cardHeaderDef)-2);
 21833  0EE6  3000               	movlw	0
 21834  0EE7  0020               	movlb	0	; select bank0
 21835  0EE8  00A8               	movwf	crc_append@message
 21836  0EE9  3022               	movlw	34
 21837  0EEA  00A9               	movwf	crc_append@message+1
 21838  0EEB  302E               	movlw	46
 21839  0EEC  00AA               	movwf	crc_append@n
 21840  0EED  3000               	movlw	0
 21841  0EEE  00AB               	movwf	crc_append@n+1
 21842  0EEF  31B3  238B  318D   	fcall	_crc_append
 21843                           
 21844                           ;rfid_demo.c: 77: for(__t8=4;__t8<7;__t8++){
 21845  0EF2  3004               	movlw	4
 21846  0EF3  0021               	movlb	1	; select bank1
 21847  0EF4  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21848  0EF5  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21849  0EF6  00CA               	movwf	___t8^(0+128)
 21850  0EF7  3007               	movlw	7
 21851  0EF8  024A               	subwf	___t8^(0+128),w
 21852  0EF9  1803               	btfsc	3,0
 21853  0EFA  2F42               	goto	l15513
 21854  0EFB                     l15501:	
 21855                           
 21856                           ;rfid_demo.c: 78: m_mem_cpy_len(cardWriteBuf,comBuffer+(__t8-4)*16,16);
 21857  0EFB  3032               	movlw	50
 21858  0EFC  00F3               	movwf	m_mem_cpy_len@d
 21859  0EFD  3004               	movlw	4
 21860  0EFE  00F4               	movwf	m_mem_cpy_len@d+1
 21861  0EFF  084A               	movf	___t8^(0+128),w
 21862  0F00  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21863  0F01  01D0               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 21864  0F02  0ECF               	swapf	??_rfid_comm_process_read_header^(0+128),f
 21865  0F03  0ED0               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21866  0F04  30F0               	movlw	240
 21867  0F05  05D0               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21868  0F06  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21869  0F07  390F               	andlw	15
 21870  0F08  04D0               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21871  0F09  30F0               	movlw	240
 21872  0F0A  05CF               	andwf	??_rfid_comm_process_read_header^(0+128),f
 21873  0F0B  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21874  0F0C  3EC0               	addlw	192
 21875  0F0D  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21876  0F0E  30FF               	movlw	255
 21877  0F0F  3D50               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 21878  0F10  00D2               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 21879  0F11  3000               	movlw	0
 21880  0F12  00D3               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 21881  0F13  3022               	movlw	34
 21882  0F14  00D4               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 21883  0F15  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21884  0F16  0753               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 21885  0F17  00F5               	movwf	m_mem_cpy_len@s
 21886  0F18  0852               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21887  0F19  3D54               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 21888  0F1A  00F6               	movwf	m_mem_cpy_len@s+1
 21889  0F1B  3010               	movlw	16
 21890  0F1C  00D5               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 21891  0F1D  0855               	movf	(??_rfid_comm_process_read_header+6)^(0+128),w
 21892  0F1E  00F7               	movwf	m_mem_cpy_len@len
 21893  0F1F  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 21894                           
 21895                           ;rfid_demo.c: 79: piccResult = mifare_write(__t8, cardWriteBuf, 16);
 21896  0F22  3032               	movlw	50
 21897  0F23  0021               	movlb	1	; select bank1
 21898  0F24  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21899  0F25  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21900  0F26  0020               	movlb	0	; select bank0
 21901  0F27  00E9               	movwf	mifare_write@buffer
 21902  0F28  3010               	movlw	16
 21903  0F29  0021               	movlb	1	; select bank1
 21904  0F2A  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21905  0F2B  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21906  0F2C  0020               	movlb	0	; select bank0
 21907  0F2D  00EA               	movwf	mifare_write@bufferSize
 21908  0F2E  0021               	movlb	1	; select bank1
 21909  0F2F  084A               	movf	___t8^(0+128),w
 21910  0F30  31A8  2037  318D   	fcall	_mifare_write
 21911  0F33  0021               	movlb	1	; select bank1
 21912  0F34  00D1               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21913  0F35  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21914  0F36  00BE               	movwf	_piccResult^(0+128)
 21915                           
 21916                           ;rfid_demo.c: 80: if(piccResult!=STATUS_OK)break;
 21917  0F37  083E               	movf	_piccResult^(0+128),w
 21918  0F38  1D03               	btfss	3,2
 21919  0F39  2F42               	goto	l15513
 21920  0F3A  3001               	movlw	1
 21921  0F3B  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21922  0F3C  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21923  0F3D  07CA               	addwf	___t8^(0+128),f
 21924  0F3E  3007               	movlw	7
 21925  0F3F  024A               	subwf	___t8^(0+128),w
 21926  0F40  1C03               	skipc
 21927  0F41  2EFB               	goto	l15501
 21928  0F42                     l15513:	
 21929                           
 21930                           ;rfid_demo.c: 81: }
 21931                           ;rfid_demo.c: 82: }
 21932                           ;rfid_demo.c: 83: }
 21933                           ;rfid_demo.c: 84: if( mainSystemData.cardID==0)
 21934  0F42  0024               	movlb	4	; select bank4
 21935  0F43  0827               	movf	((_mainSystemData+3)^(0+512)+4),w
 21936  0F44  0426               	iorwf	((_mainSystemData+2)^(0+512)+4),w
 21937  0F45  0425               	iorwf	((_mainSystemData+1)^(0+512)+4),w
 21938  0F46  0424               	iorwf	(_mainSystemData^(0+512)+4),w
 21939  0F47  1D03               	skipz
 21940  0F48  2F9F               	goto	l15531
 21941                           
 21942                           ;rfid_demo.c: 85: {
 21943                           ;rfid_demo.c: 87: if(!(stp->deviceID==mainSystemData.deviceID)){
 21944  0F49  0020               	movlb	0	; select bank0
 21945  0F4A  086E               	movf	rfid_comm_process_read_header@stp,w
 21946  0F4B  0086               	movwf	6
 21947  0F4C  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21948  0F4D  0087               	movwf	7
 21949  0F4E  3148               	addfsr 1,8
 21950  0F4F  3F40               	moviw [0]fsr1
 21951  0F50  0021               	movlb	1	; select bank1
 21952  0F51  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21953  0F52  3F41               	moviw [1]fsr1
 21954  0F53  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 21955  0F54  3F42               	moviw [2]fsr1
 21956  0F55  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 21957  0F56  3F43               	moviw [3]fsr1
 21958  0F57  00D2               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 21959  0F58  0024               	movlb	4	; select bank4
 21960  0F59  0823               	movf	(_mainSystemData+3)^(0+512),w
 21961  0F5A  0021               	movlb	1	; select bank1
 21962  0F5B  0652               	xorwf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21963  0F5C  1D03               	skipz
 21964  0F5D  2F6E               	goto	u14245
 21965  0F5E  0024               	movlb	4	; select bank4
 21966  0F5F  0822               	movf	(_mainSystemData+2)^(0+512),w
 21967  0F60  0021               	movlb	1	; select bank1
 21968  0F61  0651               	xorwf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21969  0F62  1D03               	skipz
 21970  0F63  2F6E               	goto	u14245
 21971  0F64  0024               	movlb	4	; select bank4
 21972  0F65  0821               	movf	(_mainSystemData+1)^(0+512),w
 21973  0F66  0021               	movlb	1	; select bank1
 21974  0F67  0650               	xorwf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21975  0F68  1D03               	skipz
 21976  0F69  2F6E               	goto	u14245
 21977  0F6A  0024               	movlb	4	; select bank4
 21978  0F6B  0820               	movf	_mainSystemData^(0+512),w
 21979  0F6C  0021               	movlb	1	; select bank1
 21980  0F6D  064F               	xorwf	??_rfid_comm_process_read_header^(0+128),w
 21981  0F6E                     u14245:	
 21982  0F6E  1903               	skipnz
 21983  0F6F  2F77               	goto	l15521
 21984                           
 21985                           ;rfid_demo.c: 88: CardError=CARD_NOT_IS_MINE;
 21986  0F70  3003               	movlw	3
 21987  0F71  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 21988  0F72  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 21989  0F73  0022               	movlb	2	; select bank2
 21990  0F74  00B9               	movwf	_CardError^(0+256)
 21991                           
 21992                           ;rfid_demo.c: 89: return 0;
 21993  0F75  3000               	movlw	0
 21994  0F76  0008               	return
 21995  0F77                     l15521:	
 21996                           
 21997                           ;rfid_demo.c: 90: }
 21998                           ;rfid_demo.c: 91: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardID));
 21999  0F77  3004               	movlw	4
 22000  0F78  0022               	movlb	2	; select bank2
 22001  0F79  00C3               	movwf	_flashOpStr^(0+256)
 22002  0F7A  3000               	movlw	0
 22003  0F7B  00C4               	movwf	(_flashOpStr+1)^(0+256)
 22004                           
 22005                           ;rfid_demo.c: 92: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 22006  0F7C  3002               	movlw	2
 22007  0F7D  0021               	movlb	1	; select bank1
 22008  0F7E  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22009  0F7F  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22010  0F80  0022               	movlb	2	; select bank2
 22011  0F81  00D7               	movwf	(_flashOpStr^(0+256)+20)
 22012                           
 22013                           ;rfid_demo.c: 93: flashOpStr.len=4;
 22014  0F82  3004               	movlw	4
 22015  0F83  00C5               	movwf	(_flashOpStr^(0+256)+2)
 22016  0F84  3000               	movlw	0
 22017  0F85  00C6               	movwf	(_flashOpStr^(0+256)+3)
 22018                           
 22019                           ;rfid_demo.c: 94: m_mem_cpy_len(flashOpStr.buf,cardUidBlockBuf,4);
 22020  0F86  3047               	movlw	low (_flashOpStr+4)
 22021  0F87  00F3               	movwf	m_mem_cpy_len@d
 22022  0F88  3001               	movlw	high (_flashOpStr+4)
 22023  0F89  00F4               	movwf	m_mem_cpy_len@d+1
 22024  0F8A  3020               	movlw	32
 22025  0F8B  00F5               	movwf	m_mem_cpy_len@s
 22026  0F8C  3004               	movlw	4
 22027  0F8D  00F6               	movwf	m_mem_cpy_len@s+1
 22028  0F8E  3004               	movlw	4
 22029  0F8F  0021               	movlb	1	; select bank1
 22030  0F90  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22031  0F91  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22032  0F92  00F7               	movwf	m_mem_cpy_len@len
 22033  0F93  31BD  25A3  318D   	fcall	_m_mem_cpy_len
 22034                           
 22035                           ;rfid_demo.c: 95: ret=data_api_flash_process();
 22036  0F96  31BD  25D9  318D   	fcall	_data_api_flash_process
 22037  0F99  0021               	movlb	1	; select bank1
 22038  0F9A  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22039  0F9B  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22040  0F9C  0020               	movlb	0	; select bank0
 22041  0F9D  00ED               	movwf	rfid_comm_process_read_header@ret
 22042                           
 22043                           ;rfid_demo.c: 97: }else if(mainSystemData.cardID!=*((uint32_t*)cardUidBlockBuf) || mainS
      +                          ystemData.deviceID != stp->deviceID){
 22044  0F9E  2FF2               	goto	l15539
 22045  0F9F                     l15531:	
 22046  0F9F  3020               	movlw	32
 22047  0FA0  0086               	movwf	6
 22048  0FA1  3004               	movlw	4	; select bank8/9
 22049  0FA2  0087               	movwf	7
 22050  0FA3  3F40               	moviw [0]fsr1
 22051  0FA4  0021               	movlb	1	; select bank1
 22052  0FA5  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22053  0FA6  3F41               	moviw [1]fsr1
 22054  0FA7  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 22055  0FA8  3F42               	moviw [2]fsr1
 22056  0FA9  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 22057  0FAA  3F43               	moviw [3]fsr1
 22058  0FAB  00D2               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 22059  0FAC  0852               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 22060  0FAD  0024               	movlb	4	; select bank4
 22061  0FAE  0627               	xorwf	((_mainSystemData+3)^(0+512)+4),w
 22062  0FAF  1D03               	skipz
 22063  0FB0  2FC1               	goto	u14255
 22064  0FB1  0021               	movlb	1	; select bank1
 22065  0FB2  0851               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 22066  0FB3  0024               	movlb	4	; select bank4
 22067  0FB4  0626               	xorwf	((_mainSystemData+2)^(0+512)+4),w
 22068  0FB5  1D03               	skipz
 22069  0FB6  2FC1               	goto	u14255
 22070  0FB7  0021               	movlb	1	; select bank1
 22071  0FB8  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22072  0FB9  0024               	movlb	4	; select bank4
 22073  0FBA  0625               	xorwf	((_mainSystemData+1)^(0+512)+4),w
 22074  0FBB  1D03               	skipz
 22075  0FBC  2FC1               	goto	u14255
 22076  0FBD  0021               	movlb	1	; select bank1
 22077  0FBE  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22078  0FBF  0024               	movlb	4	; select bank4
 22079  0FC0  0624               	xorwf	(_mainSystemData^(0+512)+4),w
 22080  0FC1                     u14255:	
 22081  0FC1  1D03               	skipz
 22082  0FC2  2FEA               	goto	l15535
 22083  0FC3  0020               	movlb	0	; select bank0
 22084  0FC4  086E               	movf	rfid_comm_process_read_header@stp,w
 22085  0FC5  0086               	movwf	6
 22086  0FC6  086F               	movf	rfid_comm_process_read_header@stp+1,w
 22087  0FC7  0087               	movwf	7
 22088  0FC8  3148               	addfsr 1,8
 22089  0FC9  3F40               	moviw [0]fsr1
 22090  0FCA  0021               	movlb	1	; select bank1
 22091  0FCB  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22092  0FCC  3F41               	moviw [1]fsr1
 22093  0FCD  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 22094  0FCE  3F42               	moviw [2]fsr1
 22095  0FCF  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 22096  0FD0  3F43               	moviw [3]fsr1
 22097  0FD1  00D2               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 22098  0FD2  0024               	movlb	4	; select bank4
 22099  0FD3  0823               	movf	(_mainSystemData+3)^(0+512),w
 22100  0FD4  0021               	movlb	1	; select bank1
 22101  0FD5  0652               	xorwf	(??_rfid_comm_process_read_header+3)^(0+128),w
 22102  0FD6  1D03               	skipz
 22103  0FD7  2FE8               	goto	u14265
 22104  0FD8  0024               	movlb	4	; select bank4
 22105  0FD9  0822               	movf	(_mainSystemData+2)^(0+512),w
 22106  0FDA  0021               	movlb	1	; select bank1
 22107  0FDB  0651               	xorwf	(??_rfid_comm_process_read_header+2)^(0+128),w
 22108  0FDC  1D03               	skipz
 22109  0FDD  2FE8               	goto	u14265
 22110  0FDE  0024               	movlb	4	; select bank4
 22111  0FDF  0821               	movf	(_mainSystemData+1)^(0+512),w
 22112  0FE0  0021               	movlb	1	; select bank1
 22113  0FE1  0650               	xorwf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22114  0FE2  1D03               	skipz
 22115  0FE3  2FE8               	goto	u14265
 22116  0FE4  0024               	movlb	4	; select bank4
 22117  0FE5  0820               	movf	_mainSystemData^(0+512),w
 22118  0FE6  0021               	movlb	1	; select bank1
 22119  0FE7  064F               	xorwf	??_rfid_comm_process_read_header^(0+128),w
 22120  0FE8                     u14265:	
 22121  0FE8  1903               	skipnz
 22122  0FE9  2FF2               	goto	l15539
 22123  0FEA                     l15535:	
 22124                           
 22125                           ;rfid_demo.c: 99: CardError=CARD_NOT_IS_MINE;
 22126  0FEA  3003               	movlw	3
 22127  0FEB  0021               	movlb	1	; select bank1
 22128  0FEC  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22129  0FED  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22130  0FEE  0022               	movlb	2	; select bank2
 22131  0FEF  00B9               	movwf	_CardError^(0+256)
 22132                           
 22133                           ;rfid_demo.c: 100: return 0;
 22134  0FF0  3000               	movlw	0
 22135  0FF1  0008               	return
 22136  0FF2                     l15539:	
 22137                           
 22138                           ;rfid_demo.c: 101: }
 22139                           ;rfid_demo.c: 102: create_card_key_b(userKeyB,cardUidBlockBuf,(uint8_t*)mainSystemData.c
      +                          ardKeyCreateKey);
 22140  0FF2  3020               	movlw	32
 22141  0FF3  0021               	movlb	1	; select bank1
 22142  0FF4  00CF               	movwf	??_rfid_comm_process_read_header^(0+128)
 22143  0FF5  084F               	movf	??_rfid_comm_process_read_header^(0+128),w
 22144  0FF6  00F3               	movwf	create_card_key_b@uid
 22145  0FF7  3060               	movlw	(low ((_mainSystemData| (0+512)+64)))& (0+255)
 22146  0FF8  00D0               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 22147  0FF9  0850               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22148  0FFA  00F4               	movwf	create_card_key_b@cckey
 22149  0FFB  30C8               	movlw	(low (_userKeyB| (0+256)))& (0+255)
 22150  0FFC  31B0  2034         	fcall	_create_card_key_b
 22151                           
 22152                           ;rfid_demo.c: 103: return 1;
 22153  0FFE  3001               	movlw	1
 22154  0FFF  0008               	return
 22155  1000                     __end_of_rfid_comm_process_read_header:	
 22156                           
 22157                           	psect	text65
 22158  2837                     __ptext65:	
 22159 ;; *************** function _mifare_write *****************
 22160 ;; Defined at:
 22161 ;;		line 57 in file "src/nfc/pal/mfrc522_mifare.c"
 22162 ;; Parameters:    Size  Location     Type
 22163 ;;  blockAddr       1    wreg     unsigned char 
 22164 ;;  buffer          1   73[BANK0 ] PTR unsigned char 
 22165 ;;		 -> cardDecBuf(18), cardWriteBuf(18), 
 22166 ;;  bufferSize      1   74[BANK0 ] unsigned char 
 22167 ;; Auto vars:     Size  Location     Type
 22168 ;;  blockAddr       1    0[BANK1 ] unsigned char 
 22169 ;;  cmdBuffer       2    1[BANK1 ] unsigned char [2]
 22170 ;;  result          1    3[BANK1 ] enum E5266
 22171 ;; Return value:  Size  Location     Type
 22172 ;;                  1    wreg      enum E5491
 22173 ;; Registers used:
 22174 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22175 ;; Tracked objects:
 22176 ;;		On entry : 0/0
 22177 ;;		On exit  : 0/0
 22178 ;;		Unchanged: 0/0
 22179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22180 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22181 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0
 22182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22183 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0
 22184 ;;Total ram usage:        8 bytes
 22185 ;; Hardware stack levels used:    1
 22186 ;; Hardware stack levels required when called:    8
 22187 ;; This function calls:
 22188 ;;		_pcd_mifare_transceive
 22189 ;; This function is called by:
 22190 ;;		_rfid_comm_process_read_header
 22191 ;;		_rfid_comm_process_recharge
 22192 ;; This function uses a non-reentrant model
 22193 ;;
 22194                           
 22195                           
 22196                           ;psect for function _mifare_write
 22197  2837                     _mifare_write:	
 22198                           
 22199                           ;incstack = 0
 22200                           ; Regs used in _mifare_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22201                           ;mifare_write@blockAddr stored from wreg
 22202  2837  0021               	movlb	1	; select bank1
 22203  2838  00CB               	movwf	mifare_write@blockAddr^(0+128)
 22204                           
 22205                           ;mfrc522_mifare.c: 64: em_PcdStatusCode result;
 22206                           ;mfrc522_mifare.c: 65: if (buffer == (0) || bufferSize < 16)
 22207  2839  0020               	movlb	0	; select bank0
 22208  283A  0869               	movf	mifare_write@buffer,w
 22209  283B  1903               	btfsc	3,2
 22210  283C  2841               	goto	l14429
 22211  283D  3010               	movlw	16
 22212  283E  026A               	subwf	mifare_write@bufferSize,w
 22213  283F  1803               	skipnc
 22214  2840  2843               	goto	l14433
 22215  2841                     l14429:	
 22216                           
 22217                           ;mfrc522_mifare.c: 66: {
 22218                           ;mfrc522_mifare.c: 67: return STATUS_INVALID;
 22219  2841  3006               	movlw	6
 22220  2842  0008               	return
 22221  2843                     l14433:	
 22222                           
 22223                           ;mfrc522_mifare.c: 68: }
 22224                           ;mfrc522_mifare.c: 69: uint8_t cmdBuffer[2];
 22225                           ;mfrc522_mifare.c: 70: cmdBuffer[0] = PICC_CMD_MF_WRITE;
 22226  2843  30A0               	movlw	160
 22227  2844  00EB               	movwf	??_mifare_write
 22228  2845  086B               	movf	??_mifare_write,w
 22229  2846  0021               	movlb	1	; select bank1
 22230  2847  00CC               	movwf	mifare_write@cmdBuffer^(0+128)
 22231                           
 22232                           ;mfrc522_mifare.c: 71: cmdBuffer[1] = blockAddr;
 22233  2848  084B               	movf	mifare_write@blockAddr^(0+128),w
 22234  2849  0020               	movlb	0	; select bank0
 22235  284A  00EB               	movwf	??_mifare_write
 22236  284B  086B               	movf	??_mifare_write,w
 22237  284C  0021               	movlb	1	; select bank1
 22238  284D  00CD               	movwf	(mifare_write@cmdBuffer^(0+128)+1)
 22239                           
 22240                           ;mfrc522_mifare.c: 72: result = pcd_mifare_transceive(cmdBuffer, 2,0);
 22241  284E  30CC               	movlw	low mifare_write@cmdBuffer
 22242  284F  0020               	movlb	0	; select bank0
 22243  2850  00CA               	movwf	pcd_mifare_transceive@sendData
 22244  2851  3000               	movlw	high mifare_write@cmdBuffer
 22245  2852  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22246  2853  3002               	movlw	2
 22247  2854  00EB               	movwf	??_mifare_write
 22248  2855  086B               	movf	??_mifare_write,w
 22249  2856  00CC               	movwf	pcd_mifare_transceive@sendLen
 22250  2857  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22251  2858  31A0  2095  31A8   	fcall	_pcd_mifare_transceive
 22252  285B  0020               	movlb	0	; select bank0
 22253  285C  00EC               	movwf	??_mifare_write+1
 22254  285D  086C               	movf	??_mifare_write+1,w
 22255  285E  0021               	movlb	1	; select bank1
 22256  285F  00CE               	movwf	mifare_write@result^(0+128)
 22257                           
 22258                           ;mfrc522_mifare.c: 73: if (result != STATUS_OK)
 22259  2860  084E               	movf	mifare_write@result^(0+128),w
 22260  2861  1903               	btfsc	3,2
 22261  2862  2865               	goto	l14443
 22262                           
 22263                           ;mfrc522_mifare.c: 74: {
 22264                           ;mfrc522_mifare.c: 75: return result;
 22265  2863  084E               	movf	mifare_write@result^(0+128),w
 22266  2864  0008               	return
 22267  2865                     l14443:	
 22268                           
 22269                           ;mfrc522_mifare.c: 76: }
 22270                           ;mfrc522_mifare.c: 77: result = pcd_mifare_transceive(buffer, bufferSize,0);
 22271  2865  0020               	movlb	0	; select bank0
 22272  2866  0869               	movf	mifare_write@buffer,w
 22273  2867  00CA               	movwf	pcd_mifare_transceive@sendData
 22274  2868  3004               	movlw	4
 22275  2869  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22276  286A  086A               	movf	mifare_write@bufferSize,w
 22277  286B  00EB               	movwf	??_mifare_write
 22278  286C  086B               	movf	??_mifare_write,w
 22279  286D  00CC               	movwf	pcd_mifare_transceive@sendLen
 22280  286E  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22281  286F  31A0  2095  31A8   	fcall	_pcd_mifare_transceive
 22282  2872  0020               	movlb	0	; select bank0
 22283  2873  00EC               	movwf	??_mifare_write+1
 22284  2874  086C               	movf	??_mifare_write+1,w
 22285  2875  0021               	movlb	1	; select bank1
 22286  2876  00CE               	movwf	mifare_write@result^(0+128)
 22287                           
 22288                           ;mfrc522_mifare.c: 78: if (result != STATUS_OK)
 22289  2877  084E               	movf	mifare_write@result^(0+128),w
 22290  2878  1903               	btfsc	3,2
 22291  2879  287C               	goto	l14451
 22292                           
 22293                           ;mfrc522_mifare.c: 79: {
 22294                           ;mfrc522_mifare.c: 80: return result;
 22295  287A  084E               	movf	mifare_write@result^(0+128),w
 22296  287B  0008               	return
 22297  287C                     l14451:	
 22298                           
 22299                           ;mfrc522_mifare.c: 81: }
 22300                           ;mfrc522_mifare.c: 82: return STATUS_OK;
 22301  287C  3000               	movlw	0
 22302  287D  0008               	return
 22303  287E                     __end_of_mifare_write:	
 22304                           
 22305                           	psect	text66
 22306  2095                     __ptext66:	
 22307 ;; *************** function _pcd_mifare_transceive *****************
 22308 ;; Defined at:
 22309 ;;		line 127 in file "src/nfc/pal/mfrc522_mifare.c"
 22310 ;; Parameters:    Size  Location     Type
 22311 ;;  sendData        2   42[BANK0 ] PTR unsigned char 
 22312 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), cardDecBuf(18), 
 22313 ;;		 -> cardWriteBuf(18), 
 22314 ;;  sendLen         1   44[BANK0 ] unsigned char 
 22315 ;;  acceptTimeou    1   45[BANK0 ] unsigned char 
 22316 ;; Auto vars:     Size  Location     Type
 22317 ;;  cmdBuffer      18   51[BANK0 ] unsigned char [18]
 22318 ;;  result          1   72[BANK0 ] enum E5266
 22319 ;;  cmdBufferSiz    1   71[BANK0 ] unsigned char 
 22320 ;;  validBits       1   70[BANK0 ] unsigned char 
 22321 ;;  waitIRq         1   69[BANK0 ] unsigned char 
 22322 ;; Return value:  Size  Location     Type
 22323 ;;                  1    wreg      enum E5266
 22324 ;; Registers used:
 22325 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22326 ;; Tracked objects:
 22327 ;;		On entry : 0/0
 22328 ;;		On exit  : 0/0
 22329 ;;		Unchanged: 0/0
 22330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 22332 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 22333 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22334 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0
 22335 ;;Total ram usage:       31 bytes
 22336 ;; Hardware stack levels used:    1
 22337 ;; Hardware stack levels required when called:    7
 22338 ;; This function calls:
 22339 ;;		_m_mem_cpy_len
 22340 ;;		_mfrc522_hal_calculate_crc
 22341 ;;		_pcd_comm_with_picc
 22342 ;; This function is called by:
 22343 ;;		_mifare_write
 22344 ;;		_mifare_two_Step_helper
 22345 ;; This function uses a non-reentrant model
 22346 ;;
 22347                           
 22348                           
 22349                           ;psect for function _pcd_mifare_transceive
 22350  2095                     _pcd_mifare_transceive:	
 22351                           
 22352                           ;mfrc522_mifare.c: 134: em_PcdStatusCode result;
 22353                           ;mfrc522_mifare.c: 135: uint8_t cmdBuffer[18];
 22354                           ;mfrc522_mifare.c: 138: if (sendData == (0) || sendLen > 16)
 22355                           
 22356                           ;incstack = 0
 22357                           ; Regs used in _pcd_mifare_transceive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22358  2095  0020               	movlb	0	; select bank0
 22359  2096  084A               	movf	pcd_mifare_transceive@sendData,w
 22360  2097  044B               	iorwf	pcd_mifare_transceive@sendData+1,w
 22361  2098  1903               	btfsc	3,2
 22362  2099  289E               	goto	l14003
 22363  209A  3011               	movlw	17
 22364  209B  024C               	subwf	pcd_mifare_transceive@sendLen,w
 22365  209C  1C03               	skipc
 22366  209D  28A0               	goto	l14007
 22367  209E                     l14003:	
 22368                           
 22369                           ;mfrc522_mifare.c: 139: {
 22370                           ;mfrc522_mifare.c: 140: return STATUS_INVALID;
 22371  209E  3006               	movlw	6
 22372  209F  0008               	return
 22373  20A0                     l14007:	
 22374                           
 22375                           ;mfrc522_mifare.c: 141: }
 22376                           ;mfrc522_mifare.c: 144: m_mem_cpy_len(cmdBuffer, sendData, sendLen);
 22377  20A0  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22378  20A1  00F3               	movwf	m_mem_cpy_len@d
 22379  20A2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22380  20A3  00F4               	movwf	m_mem_cpy_len@d+1
 22381  20A4  084B               	movf	pcd_mifare_transceive@sendData+1,w
 22382  20A5  00F6               	movwf	m_mem_cpy_len@s+1
 22383  20A6  084A               	movf	pcd_mifare_transceive@sendData,w
 22384  20A7  00F5               	movwf	m_mem_cpy_len@s
 22385  20A8  084C               	movf	pcd_mifare_transceive@sendLen,w
 22386  20A9  00CE               	movwf	??_pcd_mifare_transceive
 22387  20AA  084E               	movf	??_pcd_mifare_transceive,w
 22388  20AB  00F7               	movwf	m_mem_cpy_len@len
 22389  20AC  31BD  25A3  31A0   	fcall	_m_mem_cpy_len
 22390                           
 22391                           ;mfrc522_mifare.c: 145: result = mfrc522_hal_calculate_crc(cmdBuffer, sendLen, &cmdBuffe
      +                          r[sendLen]);
 22392  20AF  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22393  20B0  0020               	movlb	0	; select bank0
 22394  20B1  00A6               	movwf	mfrc522_hal_calculate_crc@data
 22395  20B2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22396  20B3  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 22397  20B4  084C               	movf	pcd_mifare_transceive@sendLen,w
 22398  20B5  00CE               	movwf	??_pcd_mifare_transceive
 22399  20B6  084E               	movf	??_pcd_mifare_transceive,w
 22400  20B7  00A8               	movwf	mfrc522_hal_calculate_crc@length
 22401  20B8  084C               	movf	pcd_mifare_transceive@sendLen,w
 22402  20B9  3E53               	addlw	(low (pcd_mifare_transceive@cmdBuffer| 0))& (0+255)
 22403  20BA  00A9               	movwf	mfrc522_hal_calculate_crc@result
 22404  20BB  3000               	movlw	0
 22405  20BC  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 22406  20BD  31AD  2533  31A0   	fcall	_mfrc522_hal_calculate_crc
 22407  20C0  0020               	movlb	0	; select bank0
 22408  20C1  00CF               	movwf	??_pcd_mifare_transceive+1
 22409  20C2  084F               	movf	??_pcd_mifare_transceive+1,w
 22410  20C3  00E8               	movwf	pcd_mifare_transceive@result
 22411                           
 22412                           ;mfrc522_mifare.c: 146: if (result != STATUS_OK)
 22413  20C4  0868               	movf	pcd_mifare_transceive@result,w
 22414  20C5  1903               	btfsc	3,2
 22415  20C6  28C9               	goto	l14015
 22416                           
 22417                           ;mfrc522_mifare.c: 147: {
 22418                           ;mfrc522_mifare.c: 148: return result;
 22419  20C7  0868               	movf	pcd_mifare_transceive@result,w
 22420  20C8  0008               	return
 22421  20C9                     l14015:	
 22422                           
 22423                           ;mfrc522_mifare.c: 149: }
 22424                           ;mfrc522_mifare.c: 150: sendLen += 2;
 22425  20C9  3002               	movlw	2
 22426  20CA  00CE               	movwf	??_pcd_mifare_transceive
 22427  20CB  084E               	movf	??_pcd_mifare_transceive,w
 22428  20CC  07CC               	addwf	pcd_mifare_transceive@sendLen,f
 22429                           
 22430                           ;mfrc522_mifare.c: 153: uint8_t waitIRq = 0x30;
 22431  20CD  3030               	movlw	48
 22432  20CE  00CE               	movwf	??_pcd_mifare_transceive
 22433  20CF  084E               	movf	??_pcd_mifare_transceive,w
 22434  20D0  00E5               	movwf	pcd_mifare_transceive@waitIRq
 22435                           
 22436                           ;mfrc522_mifare.c: 154: uint8_t cmdBufferSize = sizeof(cmdBuffer);
 22437  20D1  3012               	movlw	18
 22438  20D2  00CE               	movwf	??_pcd_mifare_transceive
 22439  20D3  084E               	movf	??_pcd_mifare_transceive,w
 22440  20D4  00E7               	movwf	pcd_mifare_transceive@cmdBufferSize
 22441                           
 22442                           ;mfrc522_mifare.c: 155: uint8_t validBits = 0;
 22443  20D5  01E6               	clrf	pcd_mifare_transceive@validBits
 22444                           
 22445                           ;mfrc522_mifare.c: 156: result = pcd_comm_with_picc(PCD_Transceive, waitIRq, cmdBuffer, 
      +                          sendLen, cmdBuffer, &cmdBufferSize, &validBits,0,0);
 22446  20D6  0865               	movf	pcd_mifare_transceive@waitIRq,w
 22447  20D7  00CE               	movwf	??_pcd_mifare_transceive
 22448  20D8  084E               	movf	??_pcd_mifare_transceive,w
 22449  20D9  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 22450  20DA  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22451  20DB  00B2               	movwf	pcd_comm_with_picc@sbuf
 22452  20DC  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22453  20DD  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 22454  20DE  084C               	movf	pcd_mifare_transceive@sendLen,w
 22455  20DF  00CF               	movwf	??_pcd_mifare_transceive+1
 22456  20E0  084F               	movf	??_pcd_mifare_transceive+1,w
 22457  20E1  00B4               	movwf	pcd_comm_with_picc@slen
 22458  20E2  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22459  20E3  00B5               	movwf	pcd_comm_with_picc@rbuf
 22460  20E4  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22461  20E5  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 22462  20E6  3067               	movlw	(low (pcd_mifare_transceive@cmdBufferSize| 0))& (0+255)
 22463  20E7  00D0               	movwf	??_pcd_mifare_transceive+2
 22464  20E8  0850               	movf	??_pcd_mifare_transceive+2,w
 22465  20E9  00B7               	movwf	pcd_comm_with_picc@rlen
 22466  20EA  3066               	movlw	(low (pcd_mifare_transceive@validBits| 0))& (0+255)
 22467  20EB  00D1               	movwf	??_pcd_mifare_transceive+3
 22468  20EC  0851               	movf	??_pcd_mifare_transceive+3,w
 22469  20ED  00B8               	movwf	pcd_comm_with_picc@validBits
 22470  20EE  01B9               	clrf	pcd_comm_with_picc@rxAlign
 22471  20EF  01BA               	clrf	pcd_comm_with_picc@checkCRC
 22472  20F0  300C               	movlw	12
 22473  20F1  3186  26A4  31A0   	fcall	_pcd_comm_with_picc
 22474  20F4  0020               	movlb	0	; select bank0
 22475  20F5  00D2               	movwf	??_pcd_mifare_transceive+4
 22476  20F6  0852               	movf	??_pcd_mifare_transceive+4,w
 22477  20F7  00E8               	movwf	pcd_mifare_transceive@result
 22478                           
 22479                           ;mfrc522_mifare.c: 157: if (acceptTimeout && result == STATUS_TIMEOUT)
 22480  20F8  084D               	movf	pcd_mifare_transceive@acceptTimeout,w
 22481  20F9  1903               	btfsc	3,2
 22482  20FA  2901               	goto	l14033
 22483  20FB  3003               	movlw	3
 22484  20FC  0668               	xorwf	pcd_mifare_transceive@result,w
 22485  20FD  1D03               	btfss	3,2
 22486  20FE  2901               	goto	l14033
 22487                           
 22488                           ;mfrc522_mifare.c: 158: {
 22489                           ;mfrc522_mifare.c: 159: return STATUS_OK;
 22490  20FF  3000               	movlw	0
 22491  2100  0008               	return
 22492  2101                     l14033:	
 22493                           
 22494                           ;mfrc522_mifare.c: 160: }
 22495                           ;mfrc522_mifare.c: 161: if (result != STATUS_OK)
 22496  2101  0868               	movf	pcd_mifare_transceive@result,w
 22497  2102  1903               	btfsc	3,2
 22498  2103  2906               	goto	l14039
 22499                           
 22500                           ;mfrc522_mifare.c: 162: {
 22501                           ;mfrc522_mifare.c: 163: return result;
 22502  2104  0868               	movf	pcd_mifare_transceive@result,w
 22503  2105  0008               	return
 22504  2106                     l14039:	
 22505                           
 22506                           ;mfrc522_mifare.c: 164: }
 22507                           ;mfrc522_mifare.c: 166: if (cmdBufferSize != 1 || validBits != 4)
 22508  2106  0367               	decf	pcd_mifare_transceive@cmdBufferSize,w
 22509  2107  1D03               	btfss	3,2
 22510  2108  290D               	goto	l14043
 22511  2109  3004               	movlw	4
 22512  210A  0666               	xorwf	pcd_mifare_transceive@validBits,w
 22513  210B  1903               	btfsc	3,2
 22514  210C  290F               	goto	l14047
 22515  210D                     l14043:	
 22516                           
 22517                           ;mfrc522_mifare.c: 167: {
 22518                           ;mfrc522_mifare.c: 168: return STATUS_ERROR;
 22519  210D  3001               	movlw	1
 22520  210E  0008               	return
 22521  210F                     l14047:	
 22522                           
 22523                           ;mfrc522_mifare.c: 169: }
 22524                           ;mfrc522_mifare.c: 170: if (cmdBuffer[0] != MF_ACK)
 22525  210F  300A               	movlw	10
 22526  2110  0653               	xorwf	pcd_mifare_transceive@cmdBuffer,w
 22527  2111  1903               	btfsc	3,2
 22528  2112  2915               	goto	l14053
 22529                           
 22530                           ;mfrc522_mifare.c: 171: {
 22531                           ;mfrc522_mifare.c: 172: return STATUS_MIFARE_NACK;
 22532  2113  30FF               	movlw	255
 22533  2114  0008               	return
 22534  2115                     l14053:	
 22535                           
 22536                           ;mfrc522_mifare.c: 173: }
 22537                           ;mfrc522_mifare.c: 174: return STATUS_OK;
 22538  2115  3000               	movlw	0
 22539  2116  0008               	return
 22540  2117                     __end_of_pcd_mifare_transceive:	
 22541                           
 22542                           	psect	text67
 22543  3DD9                     __ptext67:	
 22544 ;; *************** function _data_api_flash_process *****************
 22545 ;; Defined at:
 22546 ;;		line 244 in file "src/app/appdata.c"
 22547 ;; Parameters:    Size  Location     Type
 22548 ;;		None
 22549 ;; Auto vars:     Size  Location     Type
 22550 ;;		None
 22551 ;; Return value:  Size  Location     Type
 22552 ;;                  1    wreg      unsigned char 
 22553 ;; Registers used:
 22554 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22555 ;; Tracked objects:
 22556 ;;		On entry : 0/0
 22557 ;;		On exit  : 0/0
 22558 ;;		Unchanged: 0/0
 22559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 22563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 22564 ;;Total ram usage:        1 bytes
 22565 ;; Hardware stack levels used:    1
 22566 ;; Hardware stack levels required when called:    5
 22567 ;; This function calls:
 22568 ;;		_data_api_calibration_table_data_save
 22569 ;;		_data_api_rt_data_save
 22570 ;; This function is called by:
 22571 ;;		_rfid_comm_process_read_header
 22572 ;;		_rfid_comm_process_recharge
 22573 ;;		_main
 22574 ;; This function uses a non-reentrant model
 22575 ;;
 22576                           
 22577                           
 22578                           ;psect for function _data_api_flash_process
 22579  3DD9                     _data_api_flash_process:	
 22580                           
 22581                           ;appdata.c: 246: if (flashOpStr.op == emFLASH_WRITE_main_CALIB_DATA) {
 22582                           
 22583                           ;incstack = 0
 22584                           ; Regs used in _data_api_flash_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22585  3DD9  0022               	movlb	2	; select bank2
 22586  3DDA  0357               	decf	(_flashOpStr^(0+256)+20),w
 22587  3DDB  1D03               	btfss	3,2
 22588  3DDC  2DE9               	goto	l14319
 22589                           
 22590                           ;appdata.c: 247: data_api_calibration_table_data_save(flowCalibrationLocation,flowCalibr
      +                          ationPointSingle);
 22591  3DDD  086B               	movf	_flowCalibrationPointSingle^(0+256),w
 22592  3DDE  0020               	movlb	0	; select bank0
 22593  3DDF  00C6               	movwf	??_data_api_flash_process
 22594  3DE0  0846               	movf	??_data_api_flash_process,w
 22595  3DE1  00B3               	movwf	data_api_calibration_table_data_save@single
 22596  3DE2  0022               	movlb	2	; select bank2
 22597  3DE3  083D               	movf	_flowCalibrationLocation^(0+256),w
 22598  3DE4  3192  22FB  31BD   	fcall	_data_api_calibration_table_data_save
 22599                           
 22600                           ;appdata.c: 248: flashOpStr.op=enFLASH_NOTHING;
 22601  3DE7  0022               	movlb	2	; select bank2
 22602  3DE8  01D7               	clrf	(_flashOpStr^(0+256)+20)
 22603  3DE9                     l14319:	
 22604                           
 22605                           ;appdata.c: 249: }
 22606                           ;appdata.c: 250: if (flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA) {
 22607  3DE9  3002               	movlw	2
 22608  3DEA  0657               	xorwf	(_flashOpStr^(0+256)+20),w
 22609  3DEB  1D03               	btfss	3,2
 22610  3DEC  2DF2               	goto	l14325
 22611                           
 22612                           ;appdata.c: 252: data_api_rt_data_save();
 22613  3DED  3198  205D         	fcall	_data_api_rt_data_save
 22614                           
 22615                           ;appdata.c: 253: flashOpStr.len=0;
 22616  3DEF  0022               	movlb	2	; select bank2
 22617  3DF0  01C5               	clrf	(_flashOpStr^(0+256)+2)
 22618  3DF1  01C6               	clrf	((_flashOpStr+1)^(0+256)+2)
 22619  3DF2                     l14325:	
 22620                           
 22621                           ;appdata.c: 254: }
 22622                           ;appdata.c: 255: return 1;
 22623  3DF2  3001               	movlw	1
 22624  3DF3  0008               	return
 22625  3DF4                     __end_of_data_api_flash_process:	
 22626                           
 22627                           	psect	text68
 22628  185D                     __ptext68:	
 22629 ;; *************** function _data_api_rt_data_save *****************
 22630 ;; Defined at:
 22631 ;;		line 159 in file "src/app/appdata.c"
 22632 ;; Parameters:    Size  Location     Type
 22633 ;;		None
 22634 ;; Auto vars:     Size  Location     Type
 22635 ;;  stp             2   22[BANK0 ] PTR struct .
 22636 ;;		 -> comBuffer(128), 
 22637 ;; Return value:  Size  Location     Type
 22638 ;;                  1    wreg      unsigned char 
 22639 ;; Registers used:
 22640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22641 ;; Tracked objects:
 22642 ;;		On entry : 0/0
 22643 ;;		On exit  : 0/0
 22644 ;;		Unchanged: 0/0
 22645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22647 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22648 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 22649 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22650 ;;Total ram usage:        5 bytes
 22651 ;; Hardware stack levels used:    1
 22652 ;; Hardware stack levels required when called:    4
 22653 ;; This function calls:
 22654 ;;		_crc_append
 22655 ;;		_data_api_system_data_get
 22656 ;;		_data_api_write_eeprom
 22657 ;;		_m_mem_cpy_len
 22658 ;; This function is called by:
 22659 ;;		_ui_key_process_down
 22660 ;;		_data_api_flash_process
 22661 ;; This function uses a non-reentrant model
 22662 ;;
 22663                           
 22664                           
 22665                           ;psect for function _data_api_rt_data_save
 22666  185D                     _data_api_rt_data_save:	
 22667                           
 22668                           ;appdata.c: 160: st_SystemData* stp=(st_SystemData*)comBuffer;
 22669                           
 22670                           ;incstack = 0
 22671                           ; Regs used in _data_api_rt_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 22672  185D  3000               	movlw	0
 22673  185E  0020               	movlb	0	; select bank0
 22674  185F  00B6               	movwf	data_api_rt_data_save@stp
 22675  1860  3022               	movlw	34
 22676  1861  00B7               	movwf	data_api_rt_data_save@stp+1
 22677                           
 22678                           ;appdata.c: 161: m_mem_cpy_len(comBuffer,(uint8_t*)(&mainSystemData),sizeof(st_SystemDat
      +                          a));
 22679  1862  3000               	movlw	0
 22680  1863  00F3               	movwf	m_mem_cpy_len@d
 22681  1864  3022               	movlw	34
 22682  1865  00F4               	movwf	m_mem_cpy_len@d+1
 22683  1866  3020               	movlw	low _mainSystemData
 22684  1867  00F5               	movwf	m_mem_cpy_len@s
 22685  1868  3002               	movlw	high _mainSystemData
 22686  1869  00F6               	movwf	m_mem_cpy_len@s+1
 22687  186A  3048               	movlw	72
 22688  186B  00B3               	movwf	??_data_api_rt_data_save
 22689  186C  0833               	movf	??_data_api_rt_data_save,w
 22690  186D  00F7               	movwf	m_mem_cpy_len@len
 22691  186E  31BD  25A3  3198   	fcall	_m_mem_cpy_len
 22692                           
 22693                           ;appdata.c: 166: stp->totalConsumeVolume+=rtVolume_m3;
 22694  1871  0020               	movlb	0	; select bank0
 22695  1872  0836               	movf	data_api_rt_data_save@stp,w
 22696  1873  3E30               	addlw	48
 22697  1874  0086               	movwf	6
 22698  1875  3000               	movlw	0
 22699  1876  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22700  1877  0087               	movwf	7
 22701  1878  0021               	movlb	1	; select bank1
 22702  1879  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 22703  187A  0781               	addwf	1,f
 22704  187B  3141               	addfsr 1,1
 22705  187C  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 22706  187D  3D81               	addwfc	1,f
 22707  187E  3141               	addfsr 1,1
 22708  187F  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 22709  1880  3D81               	addwfc	1,f
 22710  1881  3141               	addfsr 1,1
 22711  1882  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 22712  1883  3D81               	addwfc	1,f
 22713                           
 22714                           ;appdata.c: 167: stp->BalanceMoney=rtBalanceMoney;
 22715  1884  0020               	movlb	0	; select bank0
 22716  1885  0836               	movf	data_api_rt_data_save@stp,w
 22717  1886  3E2C               	addlw	44
 22718  1887  0086               	movwf	6
 22719  1888  3000               	movlw	0
 22720  1889  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22721  188A  0087               	movwf	7
 22722  188B  0021               	movlb	1	; select bank1
 22723  188C  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 22724  188D  3FC0               	movwi [0]fsr1
 22725  188E  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 22726  188F  3FC1               	movwi [1]fsr1
 22727  1890  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 22728  1891  3FC2               	movwi [2]fsr1
 22729  1892  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 22730  1893  3FC3               	movwi [3]fsr1
 22731                           
 22732                           ;appdata.c: 168: stp->status.byte=deviceStatus.byte;
 22733  1894  0020               	movlb	0	; select bank0
 22734  1895  0836               	movf	data_api_rt_data_save@stp,w
 22735  1896  3E3E               	addlw	62
 22736  1897  00B3               	movwf	??_data_api_rt_data_save
 22737  1898  3000               	movlw	0
 22738  1899  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22739  189A  00B4               	movwf	??_data_api_rt_data_save+1
 22740  189B  0833               	movf	??_data_api_rt_data_save,w
 22741  189C  0086               	movwf	6
 22742  189D  0834               	movf	??_data_api_rt_data_save+1,w
 22743  189E  0087               	movwf	7
 22744  189F  0021               	movlb	1	; select bank1
 22745  18A0  0840               	movf	_deviceStatus^(0+128),w
 22746  18A1  0081               	movwf	1
 22747                           
 22748                           ;appdata.c: 169: if(menu<=2){
 22749  18A2  3003               	movlw	3
 22750  18A3  0243               	subwf	_menu^(0+128),w
 22751  18A4  1803               	skipnc
 22752  18A5  28B4               	goto	l13843
 22753                           
 22754                           ;appdata.c: 170: stp->menuBackUp=menu;
 22755  18A6  0020               	movlb	0	; select bank0
 22756  18A7  0836               	movf	data_api_rt_data_save@stp,w
 22757  18A8  3E22               	addlw	34
 22758  18A9  00B3               	movwf	??_data_api_rt_data_save
 22759  18AA  3000               	movlw	0
 22760  18AB  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22761  18AC  00B4               	movwf	??_data_api_rt_data_save+1
 22762  18AD  0833               	movf	??_data_api_rt_data_save,w
 22763  18AE  0086               	movwf	6
 22764  18AF  0834               	movf	??_data_api_rt_data_save+1,w
 22765  18B0  0087               	movwf	7
 22766  18B1  0021               	movlb	1	; select bank1
 22767  18B2  0843               	movf	_menu^(0+128),w
 22768  18B3  28C1               	goto	L4
 22769  18B4                     l13843:	
 22770                           ;appdata.c: 171: }else{
 22771                           
 22772                           
 22773                           ;appdata.c: 172: stp->menuBackUp=bkupMenu;
 22774  18B4  0020               	movlb	0	; select bank0
 22775  18B5  0836               	movf	data_api_rt_data_save@stp,w
 22776  18B6  3E22               	addlw	34
 22777  18B7  00B3               	movwf	??_data_api_rt_data_save
 22778  18B8  3000               	movlw	0
 22779  18B9  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22780  18BA  00B4               	movwf	??_data_api_rt_data_save+1
 22781  18BB  0833               	movf	??_data_api_rt_data_save,w
 22782  18BC  0086               	movwf	6
 22783  18BD  0834               	movf	??_data_api_rt_data_save+1,w
 22784  18BE  0087               	movwf	7
 22785  18BF  0021               	movlb	1	; select bank1
 22786  18C0  0842               	movf	_bkupMenu^(0+128),w
 22787  18C1                     L4:	
 22788  18C1  0081               	movwf	1
 22789                           
 22790                           ;appdata.c: 173: }
 22791                           ;appdata.c: 174: if(flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA){
 22792  18C2  3002               	movlw	2
 22793  18C3  0022               	movlb	2	; select bank2
 22794  18C4  0657               	xorwf	(_flashOpStr^(0+256)+20),w
 22795  18C5  1D03               	btfss	3,2
 22796  18C6  28E4               	goto	l13853
 22797                           
 22798                           ;appdata.c: 175: flashOpStr.op=enFLASH_NOTHING;
 22799  18C7  01D7               	clrf	(_flashOpStr^(0+256)+20)
 22800                           
 22801                           ;appdata.c: 176: __t16=flashOpStr.flashAddr;
 22802  18C8  0844               	movf	(_flashOpStr+1)^(0+256),w
 22803  18C9  00F9               	movwf	___t16+1
 22804  18CA  0843               	movf	_flashOpStr^(0+256),w
 22805  18CB  00F8               	movwf	___t16
 22806                           
 22807                           ;appdata.c: 177: m_mem_cpy_len(comBuffer+__t16,flashOpStr.buf,flashOpStr.len);
 22808  18CC  3000               	movlw	0
 22809  18CD  0020               	movlb	0	; select bank0
 22810  18CE  00B3               	movwf	??_data_api_rt_data_save
 22811  18CF  3022               	movlw	34
 22812  18D0  00B4               	movwf	??_data_api_rt_data_save+1
 22813  18D1  0878               	movf	___t16,w
 22814  18D2  0733               	addwf	??_data_api_rt_data_save,w
 22815  18D3  00F3               	movwf	m_mem_cpy_len@d
 22816  18D4  0879               	movf	___t16+1,w
 22817  18D5  3D34               	addwfc	??_data_api_rt_data_save+1,w
 22818  18D6  00F4               	movwf	m_mem_cpy_len@d+1
 22819  18D7  3047               	movlw	low (_flashOpStr+4)
 22820  18D8  00F5               	movwf	m_mem_cpy_len@s
 22821  18D9  3001               	movlw	high (_flashOpStr+4)
 22822  18DA  00F6               	movwf	m_mem_cpy_len@s+1
 22823  18DB  0022               	movlb	2	; select bank2
 22824  18DC  0845               	movf	(_flashOpStr^(0+256)+2),w
 22825  18DD  0020               	movlb	0	; select bank0
 22826  18DE  00B5               	movwf	??_data_api_rt_data_save+2
 22827  18DF  0835               	movf	??_data_api_rt_data_save+2,w
 22828  18E0  00F7               	movwf	m_mem_cpy_len@len
 22829  18E1  31BD  25A3  3198   	fcall	_m_mem_cpy_len
 22830  18E4                     l13853:	
 22831                           
 22832                           ;appdata.c: 179: }
 22833                           ;appdata.c: 181: crc_append(comBuffer,sizeof(st_SystemData)-2);
 22834  18E4  3000               	movlw	0
 22835  18E5  0020               	movlb	0	; select bank0
 22836  18E6  00A8               	movwf	crc_append@message
 22837  18E7  3022               	movlw	34
 22838  18E8  00A9               	movwf	crc_append@message+1
 22839  18E9  3046               	movlw	70
 22840  18EA  00AA               	movwf	crc_append@n
 22841  18EB  3000               	movlw	0
 22842  18EC  00AB               	movwf	crc_append@n+1
 22843  18ED  31B3  238B  3198   	fcall	_crc_append
 22844                           
 22845                           ;appdata.c: 182: m_mem_cpy_len((uint8_t*)(&mainSystemData),comBuffer,sizeof(st_SystemDat
      +                          a));
 22846  18F0  3020               	movlw	low _mainSystemData
 22847  18F1  00F3               	movwf	m_mem_cpy_len@d
 22848  18F2  3002               	movlw	high _mainSystemData
 22849  18F3  00F4               	movwf	m_mem_cpy_len@d+1
 22850  18F4  3000               	movlw	0
 22851  18F5  00F5               	movwf	m_mem_cpy_len@s
 22852  18F6  3022               	movlw	34
 22853  18F7  00F6               	movwf	m_mem_cpy_len@s+1
 22854  18F8  3048               	movlw	72
 22855  18F9  0020               	movlb	0	; select bank0
 22856  18FA  00B3               	movwf	??_data_api_rt_data_save
 22857  18FB  0833               	movf	??_data_api_rt_data_save,w
 22858  18FC  00F7               	movwf	m_mem_cpy_len@len
 22859  18FD  31BD  25A3  3198   	fcall	_m_mem_cpy_len
 22860                           
 22861                           ;appdata.c: 187: data_api_write_eeprom(comBuffer,0x00,sizeof(st_SystemData));
 22862  1900  3000               	movlw	0
 22863  1901  0020               	movlb	0	; select bank0
 22864  1902  00A0               	movwf	data_api_write_eeprom@buf
 22865  1903  3022               	movlw	34
 22866  1904  00A1               	movwf	data_api_write_eeprom@buf+1
 22867  1905  01A2               	clrf	data_api_write_eeprom@addr
 22868  1906  3048               	movlw	72
 22869  1907  00B3               	movwf	??_data_api_rt_data_save
 22870  1908  0833               	movf	??_data_api_rt_data_save,w
 22871  1909  00A3               	movwf	data_api_write_eeprom@len
 22872  190A  31BE  26FF  3198   	fcall	_data_api_write_eeprom
 22873                           
 22874                           ;appdata.c: 190: data_api_system_data_get();
 22875  190D  31BC  247E         	fcall	_data_api_system_data_get
 22876                           
 22877                           ;appdata.c: 191: rtVolume_m3=0;
 22878  190F  3000               	movlw	0
 22879  1910  0021               	movlb	1	; select bank1
 22880  1911  00B3               	movwf	(_rtVolume_m3+3)^(0+128)	;volatile
 22881  1912  3000               	movlw	0
 22882  1913  00B2               	movwf	(_rtVolume_m3+2)^(0+128)	;volatile
 22883  1914  3000               	movlw	0
 22884  1915  00B1               	movwf	(_rtVolume_m3+1)^(0+128)	;volatile
 22885  1916  3000               	movlw	0
 22886  1917  00B0               	movwf	_rtVolume_m3^(0+128)	;volatile
 22887                           
 22888                           ;appdata.c: 194: return 0;
 22889                           ;	Return value of _data_api_rt_data_save is never used
 22890  1918  0008               	return
 22891  1919                     __end_of_data_api_rt_data_save:	
 22892                           ;appdata.c: 195: }
 22893                           ;appdata.c: 196: return 1;
 22894                           ;	Return value of _data_api_rt_data_save is never used
 22895                           
 22896                           
 22897                           	psect	text69
 22898  3034                     __ptext69:	
 22899 ;; *************** function _create_card_key_b *****************
 22900 ;; Defined at:
 22901 ;;		line 32 in file "src/app/rfid_demo.c"
 22902 ;; Parameters:    Size  Location     Type
 22903 ;;  keyb            1    wreg     PTR unsigned char 
 22904 ;;		 -> userKeyB(6), 
 22905 ;;  uid             1    3[COMMON] PTR unsigned char 
 22906 ;;		 -> cardUidBlockBuf(18), 
 22907 ;;  cckey           1    4[COMMON] PTR unsigned char 
 22908 ;;		 -> mainSystemData(72), 
 22909 ;; Auto vars:     Size  Location     Type
 22910 ;;  keyb            1    6[COMMON] PTR unsigned char 
 22911 ;;		 -> userKeyB(6), 
 22912 ;;  i               1    7[COMMON] unsigned char 
 22913 ;; Return value:  Size  Location     Type
 22914 ;;                  1    wreg      void 
 22915 ;; Registers used:
 22916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 22917 ;; Tracked objects:
 22918 ;;		On entry : 0/0
 22919 ;;		On exit  : 0/0
 22920 ;;		Unchanged: 0/0
 22921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22922 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22923 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22924 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22925 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22926 ;;Total ram usage:        5 bytes
 22927 ;; Hardware stack levels used:    1
 22928 ;; Hardware stack levels required when called:    2
 22929 ;; This function calls:
 22930 ;;		Nothing
 22931 ;; This function is called by:
 22932 ;;		_rfid_comm_process_read_header
 22933 ;; This function uses a non-reentrant model
 22934 ;;
 22935                           
 22936                           
 22937                           ;psect for function _create_card_key_b
 22938  3034                     _create_card_key_b:	
 22939                           
 22940                           ;incstack = 0
 22941                           ; Regs used in _create_card_key_b: [wreg-fsr1h+status,2+status,0]
 22942                           ;create_card_key_b@keyb stored from wreg
 22943  3034  00F6               	movwf	create_card_key_b@keyb
 22944                           
 22945                           ;rfid_demo.c: 33: uint8_t i;
 22946                           ;rfid_demo.c: 34: for(i=0;i<6;i++){
 22947  3035  01F7               	clrf	create_card_key_b@i
 22948  3036                     L5:	
 22949  3036  3006               	movlw	6
 22950  3037  0277               	subwf	create_card_key_b@i,w
 22951  3038  1803               	btfsc	3,0
 22952  3039  0008               	return
 22953                           
 22954                           ;rfid_demo.c: 35: *keyb=*uid ^ *cckey;
 22955  303A  0874               	movf	create_card_key_b@cckey,w
 22956  303B  0086               	movwf	6
 22957  303C  3002               	movlw	2	; select bank4/5
 22958  303D  0087               	movwf	7
 22959  303E  0873               	movf	create_card_key_b@uid,w
 22960  303F  0084               	movwf	4
 22961  3040  3004               	movlw	4	; select bank8/9
 22962  3041  0085               	movwf	5
 22963  3042  0800               	movf	0,w
 22964  3043  0601               	xorwf	1,w
 22965  3044  00F5               	movwf	??_create_card_key_b
 22966  3045  0876               	movf	create_card_key_b@keyb,w
 22967  3046  0086               	movwf	6
 22968  3047  3001               	movlw	1	; select bank2/3
 22969  3048  0087               	movwf	7
 22970  3049  0875               	movf	??_create_card_key_b,w
 22971  304A  0081               	movwf	1
 22972                           
 22973                           ;rfid_demo.c: 36: keyb++;
 22974  304B  3001               	movlw	1
 22975  304C  00F5               	movwf	??_create_card_key_b
 22976  304D  0875               	movf	??_create_card_key_b,w
 22977  304E  07F6               	addwf	create_card_key_b@keyb,f
 22978                           
 22979                           ;rfid_demo.c: 37: uid++;
 22980  304F  3001               	movlw	1
 22981  3050  00F5               	movwf	??_create_card_key_b
 22982  3051  0875               	movf	??_create_card_key_b,w
 22983  3052  07F3               	addwf	create_card_key_b@uid,f
 22984                           
 22985                           ;rfid_demo.c: 38: cckey++;
 22986  3053  3001               	movlw	1
 22987  3054  00F5               	movwf	??_create_card_key_b
 22988  3055  0875               	movf	??_create_card_key_b,w
 22989  3056  07F4               	addwf	create_card_key_b@cckey,f
 22990  3057  3001               	movlw	1
 22991  3058  00F5               	movwf	??_create_card_key_b
 22992  3059  0875               	movf	??_create_card_key_b,w
 22993  305A  07F7               	addwf	create_card_key_b@i,f
 22994  305B  2836               	goto	L5
 22995  305C                     __end_of_create_card_key_b:	
 22996                           
 22997                           	psect	text70
 22998  3635                     __ptext70:	
 22999 ;; *************** function _rfid_comm_process_read_dec *****************
 23000 ;; Defined at:
 23001 ;;		line 116 in file "src/app/rfid_demo.c"
 23002 ;; Parameters:    Size  Location     Type
 23003 ;;		None
 23004 ;; Auto vars:     Size  Location     Type
 23005 ;;  ret             1   67[BANK0 ] unsigned char 
 23006 ;; Return value:  Size  Location     Type
 23007 ;;                  1    wreg      unsigned char 
 23008 ;; Registers used:
 23009 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23010 ;; Tracked objects:
 23011 ;;		On entry : 0/0
 23012 ;;		On exit  : 0/0
 23013 ;;		Unchanged: 0/0
 23014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23017 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23018 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23019 ;;Total ram usage:        4 bytes
 23020 ;; Hardware stack levels used:    1
 23021 ;; Hardware stack levels required when called:    8
 23022 ;; This function calls:
 23023 ;;		_crc_verify
 23024 ;;		_mifare_read
 23025 ;;		_picc_authenticate
 23026 ;; This function is called by:
 23027 ;;		_rfid_comm_process
 23028 ;; This function uses a non-reentrant model
 23029 ;;
 23030                           
 23031                           
 23032                           ;psect for function _rfid_comm_process_read_dec
 23033  3635                     _rfid_comm_process_read_dec:	
 23034                           
 23035                           ;rfid_demo.c: 118: uint8_t ret;
 23036                           ;rfid_demo.c: 120: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 23037                           
 23038                           ;incstack = 0
 23039                           ; Regs used in _rfid_comm_process_read_dec: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23040  3635  300F               	movlw	15
 23041  3636  0020               	movlb	0	; select bank0
 23042  3637  00E0               	movwf	??_rfid_comm_process_read_dec
 23043  3638  0860               	movf	??_rfid_comm_process_read_dec,w
 23044  3639  00CA               	movwf	picc_authenticate@blockAddr
 23045  363A  30C8               	movlw	low _userKeyB
 23046  363B  00CB               	movwf	picc_authenticate@key
 23047  363C  3001               	movlw	high _userKeyB
 23048  363D  00CC               	movwf	picc_authenticate@key+1
 23049  363E  30BC               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 23050  363F  00E1               	movwf	??_rfid_comm_process_read_dec+1
 23051  3640  0861               	movf	??_rfid_comm_process_read_dec+1,w
 23052  3641  00CD               	movwf	picc_authenticate@uid
 23053  3642  3061               	movlw	97
 23054  3643  31AB  23FA  31B6   	fcall	_picc_authenticate
 23055  3646  0020               	movlb	0	; select bank0
 23056  3647  00E2               	movwf	??_rfid_comm_process_read_dec+2
 23057  3648  0862               	movf	??_rfid_comm_process_read_dec+2,w
 23058  3649  0021               	movlb	1	; select bank1
 23059  364A  00BE               	movwf	_piccResult^(0+128)
 23060                           
 23061                           ;rfid_demo.c: 121: rdLen=18;
 23062  364B  3012               	movlw	18
 23063  364C  0020               	movlb	0	; select bank0
 23064  364D  00E0               	movwf	??_rfid_comm_process_read_dec
 23065  364E  0860               	movf	??_rfid_comm_process_read_dec,w
 23066  364F  0021               	movlb	1	; select bank1
 23067  3650  00C9               	movwf	_rdLen^(0+128)
 23068                           
 23069                           ;rfid_demo.c: 122: piccResult = mifare_read(12, cardDecBuf, &rdLen);
 23070  3651  3056               	movlw	86
 23071  3652  0020               	movlb	0	; select bank0
 23072  3653  00E0               	movwf	??_rfid_comm_process_read_dec
 23073  3654  0860               	movf	??_rfid_comm_process_read_dec,w
 23074  3655  00CA               	movwf	mifare_read@buffer
 23075  3656  30C9               	movlw	(low (_rdLen| 0))& (0+255)
 23076  3657  00E1               	movwf	??_rfid_comm_process_read_dec+1
 23077  3658  0861               	movf	??_rfid_comm_process_read_dec+1,w
 23078  3659  00CB               	movwf	mifare_read@bufferSize
 23079  365A  300C               	movlw	12
 23080  365B  31AA  2298  31B6   	fcall	_mifare_read
 23081  365E  0020               	movlb	0	; select bank0
 23082  365F  00E2               	movwf	??_rfid_comm_process_read_dec+2
 23083  3660  0862               	movf	??_rfid_comm_process_read_dec+2,w
 23084  3661  0021               	movlb	1	; select bank1
 23085  3662  00BE               	movwf	_piccResult^(0+128)
 23086                           
 23087                           ;rfid_demo.c: 123: ret=crc_verify(cardDecBuf,sizeof(st_cardValueStrucrtDef));
 23088  3663  3056               	movlw	86
 23089  3664  0020               	movlb	0	; select bank0
 23090  3665  00A8               	movwf	crc_verify@message
 23091  3666  3004               	movlw	4
 23092  3667  00A9               	movwf	crc_verify@message+1
 23093  3668  3008               	movlw	8
 23094  3669  00AA               	movwf	crc_verify@n
 23095  366A  3000               	movlw	0
 23096  366B  00AB               	movwf	crc_verify@n+1
 23097  366C  31A8  2000         	fcall	_crc_verify
 23098  366E  0020               	movlb	0	; select bank0
 23099  366F  00E0               	movwf	??_rfid_comm_process_read_dec
 23100  3670  0860               	movf	??_rfid_comm_process_read_dec,w
 23101  3671  00E3               	movwf	rfid_comm_process_read_dec@ret
 23102                           
 23103                           ;rfid_demo.c: 124: return ret;
 23104  3672  0863               	movf	rfid_comm_process_read_dec@ret,w
 23105  3673  0008               	return
 23106  3674                     __end_of_rfid_comm_process_read_dec:	
 23107                           
 23108                           	psect	text71
 23109  2BFA                     __ptext71:	
 23110 ;; *************** function _picc_authenticate *****************
 23111 ;; Defined at:
 23112 ;;		line 288 in file "src/nfc/pal/mfrc522_picc.c"
 23113 ;; Parameters:    Size  Location     Type
 23114 ;;  command         1    wreg     unsigned char 
 23115 ;;  blockAddr       1   42[BANK0 ] unsigned char 
 23116 ;;  key             2   43[BANK0 ] PTR struct .
 23117 ;;		 -> userKeyB(6), defaultKeyA(6), 
 23118 ;;  uid             1   45[BANK0 ] PTR struct __PICC_UID
 23119 ;;		 -> PiccUid(12), 
 23120 ;; Auto vars:     Size  Location     Type
 23121 ;;  command         1   61[BANK0 ] unsigned char 
 23122 ;;  sendData       12   49[BANK0 ] unsigned char [12]
 23123 ;;  i               1   63[BANK0 ] unsigned char 
 23124 ;;  waitIRQ         1   62[BANK0 ] unsigned char 
 23125 ;; Return value:  Size  Location     Type
 23126 ;;                  1    wreg      enum E5491
 23127 ;; Registers used:
 23128 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23129 ;; Tracked objects:
 23130 ;;		On entry : 0/0
 23131 ;;		On exit  : 0/0
 23132 ;;		Unchanged: 0/0
 23133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23134 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23135 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0
 23136 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23137 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 23138 ;;Total ram usage:       22 bytes
 23139 ;; Hardware stack levels used:    1
 23140 ;; Hardware stack levels required when called:    7
 23141 ;; This function calls:
 23142 ;;		_pcd_comm_with_picc
 23143 ;; This function is called by:
 23144 ;;		_rfid_comm_process_read_header
 23145 ;;		_rfid_comm_process_read_inc
 23146 ;;		_rfid_comm_process_read_dec
 23147 ;;		_rfid_comm_process_recharge
 23148 ;; This function uses a non-reentrant model
 23149 ;;
 23150                           
 23151                           
 23152                           ;psect for function _picc_authenticate
 23153  2BFA                     _picc_authenticate:	
 23154                           
 23155                           ;incstack = 0
 23156                           ; Regs used in _picc_authenticate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23157                           ;picc_authenticate@command stored from wreg
 23158  2BFA  0020               	movlb	0	; select bank0
 23159  2BFB  00DD               	movwf	picc_authenticate@command
 23160                           
 23161                           ;mfrc522_picc.c: 289: uint8_t waitIRQ = 0x10;
 23162  2BFC  3010               	movlw	16
 23163  2BFD  00CE               	movwf	??_picc_authenticate
 23164  2BFE  084E               	movf	??_picc_authenticate,w
 23165  2BFF  00DE               	movwf	picc_authenticate@waitIRQ
 23166                           
 23167                           ;mfrc522_picc.c: 290: uint8_t i;
 23168                           ;mfrc522_picc.c: 291: uint8_t sendData[12];
 23169                           ;mfrc522_picc.c: 292: sendData[0] = command;
 23170  2C00  085D               	movf	picc_authenticate@command,w
 23171  2C01  00CE               	movwf	??_picc_authenticate
 23172  2C02  084E               	movf	??_picc_authenticate,w
 23173  2C03  00D1               	movwf	picc_authenticate@sendData
 23174                           
 23175                           ;mfrc522_picc.c: 293: sendData[1] = blockAddr;
 23176  2C04  084A               	movf	picc_authenticate@blockAddr,w
 23177  2C05  00CE               	movwf	??_picc_authenticate
 23178  2C06  084E               	movf	??_picc_authenticate,w
 23179  2C07  00D2               	movwf	picc_authenticate@sendData+1
 23180                           
 23181                           ;mfrc522_picc.c: 294: for (i = 0; i < MF_KEY_SIZE; i++) {
 23182  2C08  01DF               	clrf	picc_authenticate@i
 23183  2C09  3006               	movlw	6
 23184  2C0A  025F               	subwf	picc_authenticate@i,w
 23185  2C0B  1803               	btfsc	3,0
 23186  2C0C  2C29               	goto	l14387
 23187  2C0D                     l14381:	
 23188                           
 23189                           ;mfrc522_picc.c: 295: sendData[2 + i] = key->keyByte[i];
 23190  2C0D  084C               	movf	picc_authenticate@key+1,w
 23191  2C0E  00CF               	movwf	??_picc_authenticate+1
 23192  2C0F  084B               	movf	picc_authenticate@key,w
 23193  2C10  00CE               	movwf	??_picc_authenticate
 23194  2C11  085F               	movf	picc_authenticate@i,w
 23195  2C12  074E               	addwf	??_picc_authenticate,w
 23196  2C13  0084               	movwf	4
 23197  2C14  084F               	movf	??_picc_authenticate+1,w
 23198  2C15  1803               	skipnc
 23199  2C16  0A4F               	incf	??_picc_authenticate+1,w
 23200  2C17  0085               	movwf	5
 23201  2C18  0800               	movf	0,w	;code access
 23202  2C19  00D0               	movwf	??_picc_authenticate+2
 23203  2C1A  085F               	movf	picc_authenticate@i,w
 23204  2C1B  3E02               	addlw	2
 23205  2C1C  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 23206  2C1D  0086               	movwf	6
 23207  2C1E  0187               	clrf	7
 23208  2C1F  0850               	movf	??_picc_authenticate+2,w
 23209  2C20  0081               	movwf	1
 23210  2C21  3001               	movlw	1
 23211  2C22  00CE               	movwf	??_picc_authenticate
 23212  2C23  084E               	movf	??_picc_authenticate,w
 23213  2C24  07DF               	addwf	picc_authenticate@i,f
 23214  2C25  3006               	movlw	6
 23215  2C26  025F               	subwf	picc_authenticate@i,w
 23216  2C27  1C03               	skipc
 23217  2C28  2C0D               	goto	l14381
 23218  2C29                     l14387:	
 23219                           
 23220                           ;mfrc522_picc.c: 296: }
 23221                           ;mfrc522_picc.c: 297: for (i = 0; i < 4; i++) {
 23222  2C29  01DF               	clrf	picc_authenticate@i
 23223  2C2A  3004               	movlw	4
 23224  2C2B  025F               	subwf	picc_authenticate@i,w
 23225  2C2C  1803               	btfsc	3,0
 23226  2C2D  2C47               	goto	l14399
 23227  2C2E                     l14393:	
 23228                           
 23229                           ;mfrc522_picc.c: 298: sendData[8 + i] = uid->uidByte[i];
 23230  2C2E  085F               	movf	picc_authenticate@i,w
 23231  2C2F  3E01               	addlw	1
 23232  2C30  074D               	addwf	picc_authenticate@uid,w
 23233  2C31  00CE               	movwf	??_picc_authenticate
 23234  2C32  084E               	movf	??_picc_authenticate,w
 23235  2C33  0086               	movwf	6
 23236  2C34  3001               	movlw	1	; select bank2/3
 23237  2C35  0087               	movwf	7
 23238  2C36  0801               	movf	1,w
 23239  2C37  00CF               	movwf	??_picc_authenticate+1
 23240  2C38  085F               	movf	picc_authenticate@i,w
 23241  2C39  3E08               	addlw	8
 23242  2C3A  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 23243  2C3B  0086               	movwf	6
 23244  2C3C  0187               	clrf	7
 23245  2C3D  084F               	movf	??_picc_authenticate+1,w
 23246  2C3E  0081               	movwf	1
 23247  2C3F  3001               	movlw	1
 23248  2C40  00CE               	movwf	??_picc_authenticate
 23249  2C41  084E               	movf	??_picc_authenticate,w
 23250  2C42  07DF               	addwf	picc_authenticate@i,f
 23251  2C43  3004               	movlw	4
 23252  2C44  025F               	subwf	picc_authenticate@i,w
 23253  2C45  1C03               	skipc
 23254  2C46  2C2E               	goto	l14393
 23255  2C47                     l14399:	
 23256                           
 23257                           ;mfrc522_picc.c: 299: }
 23258                           ;mfrc522_picc.c: 300: return pcd_comm_with_picc(PCD_MFAuthent, waitIRQ, &sendData[0], si
      +                          zeof (sendData), (0), (0), (0), 0, 0);
 23259  2C47  085E               	movf	picc_authenticate@waitIRQ,w
 23260  2C48  00CE               	movwf	??_picc_authenticate
 23261  2C49  084E               	movf	??_picc_authenticate,w
 23262  2C4A  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 23263  2C4B  3051               	movlw	low picc_authenticate@sendData
 23264  2C4C  00B2               	movwf	pcd_comm_with_picc@sbuf
 23265  2C4D  3000               	movlw	high picc_authenticate@sendData
 23266  2C4E  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 23267  2C4F  300C               	movlw	12
 23268  2C50  00CF               	movwf	??_picc_authenticate+1
 23269  2C51  084F               	movf	??_picc_authenticate+1,w
 23270  2C52  00B4               	movwf	pcd_comm_with_picc@slen
 23271  2C53  3000               	movlw	0
 23272  2C54  00B5               	movwf	pcd_comm_with_picc@rbuf
 23273  2C55  3000               	movlw	0
 23274  2C56  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 23275  2C57  01B7               	clrf	pcd_comm_with_picc@rlen
 23276  2C58  01B8               	clrf	pcd_comm_with_picc@validBits
 23277  2C59  01B9               	clrf	pcd_comm_with_picc@rxAlign
 23278  2C5A  01BA               	clrf	pcd_comm_with_picc@checkCRC
 23279  2C5B  300E               	movlw	14
 23280  2C5C  3186  26A4         	fcall	_pcd_comm_with_picc
 23281  2C5E  0008               	return
 23282  2C5F                     __end_of_picc_authenticate:	
 23283                           
 23284                           	psect	text72
 23285  2A98                     __ptext72:	
 23286 ;; *************** function _mifare_read *****************
 23287 ;; Defined at:
 23288 ;;		line 35 in file "src/nfc/pal/mfrc522_mifare.c"
 23289 ;; Parameters:    Size  Location     Type
 23290 ;;  blockAddr       1    wreg     unsigned char 
 23291 ;;  buffer          1   42[BANK0 ] PTR unsigned char 
 23292 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 23293 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 23294 ;;		 -> rdLen(1), __t8(1), 
 23295 ;; Auto vars:     Size  Location     Type
 23296 ;;  blockAddr       1   47[BANK0 ] unsigned char 
 23297 ;;  result          1   48[BANK0 ] enum E5266
 23298 ;; Return value:  Size  Location     Type
 23299 ;;                  1    wreg      enum E5491
 23300 ;; Registers used:
 23301 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23302 ;; Tracked objects:
 23303 ;;		On entry : 0/0
 23304 ;;		On exit  : 0/0
 23305 ;;		Unchanged: 0/0
 23306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23307 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23308 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23309 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23310 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 23311 ;;Total ram usage:        7 bytes
 23312 ;; Hardware stack levels used:    1
 23313 ;; Hardware stack levels required when called:    7
 23314 ;; This function calls:
 23315 ;;		_mfrc522_hal_calculate_crc
 23316 ;;		_pcd_comm_with_picc
 23317 ;; This function is called by:
 23318 ;;		_rfid_comm_process_read_header
 23319 ;;		_rfid_comm_process_read_inc
 23320 ;;		_rfid_comm_process_read_dec
 23321 ;; This function uses a non-reentrant model
 23322 ;;
 23323                           
 23324                           
 23325                           ;psect for function _mifare_read
 23326  2A98                     _mifare_read:	
 23327                           
 23328                           ;incstack = 0
 23329                           ; Regs used in _mifare_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23330                           ;mifare_read@blockAddr stored from wreg
 23331  2A98  0020               	movlb	0	; select bank0
 23332  2A99  00CF               	movwf	mifare_read@blockAddr
 23333                           
 23334                           ;mfrc522_mifare.c: 42: em_PcdStatusCode result;
 23335                           ;mfrc522_mifare.c: 43: if (buffer == (0) || *bufferSize < 18)
 23336  2A9A  084A               	movf	mifare_read@buffer,w
 23337  2A9B  1903               	btfsc	3,2
 23338  2A9C  2AA4               	goto	l14407
 23339  2A9D  084B               	movf	mifare_read@bufferSize,w
 23340  2A9E  0086               	movwf	6
 23341  2A9F  0187               	clrf	7
 23342  2AA0  3012               	movlw	18
 23343  2AA1  0201               	subwf	1,w
 23344  2AA2  1803               	skipnc
 23345  2AA3  2AA6               	goto	l14411
 23346  2AA4                     l14407:	
 23347                           
 23348                           ;mfrc522_mifare.c: 44: {
 23349                           ;mfrc522_mifare.c: 45: return STATUS_NO_ROOM;
 23350  2AA4  3004               	movlw	4
 23351  2AA5  0008               	return
 23352  2AA6                     l14411:	
 23353                           
 23354                           ;mfrc522_mifare.c: 46: }
 23355                           ;mfrc522_mifare.c: 47: buffer[0] = PICC_CMD_MF_READ;
 23356  2AA6  3030               	movlw	48
 23357  2AA7  00CC               	movwf	??_mifare_read
 23358  2AA8  084A               	movf	mifare_read@buffer,w
 23359  2AA9  0086               	movwf	6
 23360  2AAA  3004               	movlw	4	; select bank8/9
 23361  2AAB  0087               	movwf	7
 23362  2AAC  084C               	movf	??_mifare_read,w
 23363  2AAD  0081               	movwf	1
 23364                           
 23365                           ;mfrc522_mifare.c: 48: buffer[1] = blockAddr;
 23366  2AAE  084F               	movf	mifare_read@blockAddr,w
 23367  2AAF  00CC               	movwf	??_mifare_read
 23368  2AB0  0A4A               	incf	mifare_read@buffer,w
 23369  2AB1  0086               	movwf	6
 23370  2AB2  3004               	movlw	4	; select bank8/9
 23371  2AB3  0087               	movwf	7
 23372  2AB4  084C               	movf	??_mifare_read,w
 23373  2AB5  0081               	movwf	1
 23374                           
 23375                           ;mfrc522_mifare.c: 49: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 23376  2AB6  084A               	movf	mifare_read@buffer,w
 23377  2AB7  00A6               	movwf	mfrc522_hal_calculate_crc@data
 23378  2AB8  3004               	movlw	4
 23379  2AB9  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 23380  2ABA  3002               	movlw	2
 23381  2ABB  00CC               	movwf	??_mifare_read
 23382  2ABC  084C               	movf	??_mifare_read,w
 23383  2ABD  00A8               	movwf	mfrc522_hal_calculate_crc@length
 23384  2ABE  084A               	movf	mifare_read@buffer,w
 23385  2ABF  3E02               	addlw	2
 23386  2AC0  00A9               	movwf	mfrc522_hal_calculate_crc@result
 23387  2AC1  3004               	movlw	4
 23388  2AC2  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 23389  2AC3  31AD  2533  31AA   	fcall	_mfrc522_hal_calculate_crc
 23390  2AC6  0020               	movlb	0	; select bank0
 23391  2AC7  00CD               	movwf	??_mifare_read+1
 23392  2AC8  084D               	movf	??_mifare_read+1,w
 23393  2AC9  00D0               	movwf	mifare_read@result
 23394                           
 23395                           ;mfrc522_mifare.c: 50: if (result != STATUS_OK) {
 23396  2ACA  0850               	movf	mifare_read@result,w
 23397  2ACB  1903               	btfsc	3,2
 23398  2ACC  2ACF               	goto	l14421
 23399                           
 23400                           ;mfrc522_mifare.c: 51: return result;
 23401  2ACD  0850               	movf	mifare_read@result,w
 23402  2ACE  0008               	return
 23403  2ACF                     l14421:	
 23404                           
 23405                           ;mfrc522_mifare.c: 52: }
 23406                           ;mfrc522_mifare.c: 54: return pcd_comm_with_picc(PCD_Transceive,0x30,buffer, 4, buffer, 
      +                          bufferSize, (0), 0, 1);
 23407  2ACF  3030               	movlw	48
 23408  2AD0  00CC               	movwf	??_mifare_read
 23409  2AD1  084C               	movf	??_mifare_read,w
 23410  2AD2  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 23411  2AD3  084A               	movf	mifare_read@buffer,w
 23412  2AD4  00B2               	movwf	pcd_comm_with_picc@sbuf
 23413  2AD5  3004               	movlw	4
 23414  2AD6  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 23415  2AD7  3004               	movlw	4
 23416  2AD8  00CD               	movwf	??_mifare_read+1
 23417  2AD9  084D               	movf	??_mifare_read+1,w
 23418  2ADA  00B4               	movwf	pcd_comm_with_picc@slen
 23419  2ADB  084A               	movf	mifare_read@buffer,w
 23420  2ADC  00B5               	movwf	pcd_comm_with_picc@rbuf
 23421  2ADD  3004               	movlw	4
 23422  2ADE  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 23423  2ADF  084B               	movf	mifare_read@bufferSize,w
 23424  2AE0  00CE               	movwf	??_mifare_read+2
 23425  2AE1  084E               	movf	??_mifare_read+2,w
 23426  2AE2  00B7               	movwf	pcd_comm_with_picc@rlen
 23427  2AE3  01B8               	clrf	pcd_comm_with_picc@validBits
 23428  2AE4  01B9               	clrf	pcd_comm_with_picc@rxAlign
 23429  2AE5  01BA               	clrf	pcd_comm_with_picc@checkCRC
 23430  2AE6  0ABA               	incf	pcd_comm_with_picc@checkCRC,f
 23431  2AE7  300C               	movlw	12
 23432  2AE8  3186  26A4         	fcall	_pcd_comm_with_picc
 23433  2AEA  0008               	return
 23434  2AEB                     __end_of_mifare_read:	
 23435                           
 23436                           	psect	text73
 23437  3B0A                     __ptext73:	
 23438 ;; *************** function _picc_stop_cryptol *****************
 23439 ;; Defined at:
 23440 ;;		line 308 in file "src/nfc/pal/mfrc522_picc.c"
 23441 ;; Parameters:    Size  Location     Type
 23442 ;;		None
 23443 ;; Auto vars:     Size  Location     Type
 23444 ;;		None
 23445 ;; Return value:  Size  Location     Type
 23446 ;;                  1    wreg      void 
 23447 ;; Registers used:
 23448 ;;		wreg, status,2, status,0, pclath, cstack
 23449 ;; Tracked objects:
 23450 ;;		On entry : 0/0
 23451 ;;		On exit  : 0/0
 23452 ;;		Unchanged: 0/0
 23453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23456 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23457 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23458 ;;Total ram usage:        1 bytes
 23459 ;; Hardware stack levels used:    1
 23460 ;; Hardware stack levels required when called:    5
 23461 ;; This function calls:
 23462 ;;		_mfrc522_bal_clr_bit_reg
 23463 ;; This function is called by:
 23464 ;;		_rfid_comm_process
 23465 ;; This function uses a non-reentrant model
 23466 ;;
 23467                           
 23468                           
 23469                           ;psect for function _picc_stop_cryptol
 23470  3B0A                     _picc_stop_cryptol:	
 23471                           
 23472                           ;mfrc522_picc.c: 309: mfrc522_bal_clr_bit_reg(Status2Reg, 0x08);
 23473                           
 23474                           ;incstack = 0
 23475                           ; Regs used in _picc_stop_cryptol: [wreg+status,2+status,0+pclath+cstack]
 23476  3B0A  3008               	movlw	8
 23477  3B0B  0020               	movlb	0	; select bank0
 23478  3B0C  00A6               	movwf	??_picc_stop_cryptol
 23479  3B0D  0826               	movf	??_picc_stop_cryptol,w
 23480  3B0E  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 23481  3B0F  3008               	movlw	8
 23482  3B10  31BC  24FC         	fcall	_mfrc522_bal_clr_bit_reg
 23483  3B12  0008               	return
 23484  3B13                     __end_of_picc_stop_cryptol:	
 23485                           
 23486                           	psect	text74
 23487  00A0                     __ptext74:	
 23488 ;; *************** function _picc_select *****************
 23489 ;; Defined at:
 23490 ;;		line 126 in file "src/nfc/pal/mfrc522_picc.c"
 23491 ;; Parameters:    Size  Location     Type
 23492 ;;  uid             1    wreg     PTR struct __PICC_UID
 23493 ;;		 -> PiccUid(12), 
 23494 ;;  validBits       1   42[BANK0 ] unsigned char 
 23495 ;; Auto vars:     Size  Location     Type
 23496 ;;  uid             1   30[BANK1 ] PTR struct __PICC_UID
 23497 ;;		 -> PiccUid(12), 
 23498 ;;  collisionPos    1   23[BANK1 ] unsigned char 
 23499 ;;  valueOfCollR    1   13[BANK1 ] unsigned char 
 23500 ;;  maxBytes        1   12[BANK1 ] unsigned char 
 23501 ;;  bytesToCopy     1   27[BANK1 ] unsigned char 
 23502 ;;  buffer          9   14[BANK1 ] unsigned char [9]
 23503 ;;  currentLevel    1   35[BANK1 ] unsigned char 
 23504 ;;  index           1   34[BANK1 ] unsigned char 
 23505 ;;  count           1   33[BANK1 ] unsigned char 
 23506 ;;  result          1   32[BANK1 ] enum E5266
 23507 ;;  txLastBits      1   31[BANK1 ] unsigned char 
 23508 ;;  responseBuff    1   29[BANK1 ] PTR unsigned char 
 23509 ;;		 -> picc_select@buffer(9), 
 23510 ;;  responseLeng    1   28[BANK1 ] unsigned char 
 23511 ;;  uidIndex        1   26[BANK1 ] unsigned char 
 23512 ;;  cascadeLevel    1   25[BANK1 ] unsigned char 
 23513 ;;  useCascadeTa    1   24[BANK1 ] unsigned char 
 23514 ;;  rxAlign         1   11[BANK1 ] unsigned char 
 23515 ;;  bufferUsed      1    8[BANK1 ] unsigned char 
 23516 ;;  selectDone      1    7[BANK1 ] unsigned char 
 23517 ;;  uidComplete     1    6[BANK1 ] unsigned char 
 23518 ;; Return value:  Size  Location     Type
 23519 ;;                  1    wreg      enum E5491
 23520 ;; Registers used:
 23521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23522 ;; Tracked objects:
 23523 ;;		On entry : 0/0
 23524 ;;		On exit  : 0/0
 23525 ;;		Unchanged: 0/0
 23526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23527 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23528 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0
 23529 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 23530 ;;      Totals:         0       7      36       0       0       0       0       0       0       0       0       0       
      +0
 23531 ;;Total ram usage:       43 bytes
 23532 ;; Hardware stack levels used:    1
 23533 ;; Hardware stack levels required when called:    7
 23534 ;; This function calls:
 23535 ;;		___awdiv
 23536 ;;		___bmul
 23537 ;;		_mfrc522_bal_clr_bit_reg
 23538 ;;		_mfrc522_bal_read_reg
 23539 ;;		_mfrc522_bal_write_reg
 23540 ;;		_mfrc522_hal_calculate_crc
 23541 ;;		_pcd_comm_with_picc
 23542 ;; This function is called by:
 23543 ;;		_rfid_comm_process
 23544 ;; This function uses a non-reentrant model
 23545 ;;
 23546                           
 23547                           
 23548                           ;psect for function _picc_select
 23549  00A0                     _picc_select:	
 23550                           
 23551                           ;incstack = 0
 23552                           ; Regs used in _picc_select: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23553                           ;picc_select@uid stored from wreg
 23554  00A0  0021               	movlb	1	; select bank1
 23555  00A1  00E9               	movwf	picc_select@uid^(0+128)
 23556                           
 23557                           ;mfrc522_picc.c: 127: bool uidComplete;
 23558                           ;mfrc522_picc.c: 128: bool selectDone;
 23559                           ;mfrc522_picc.c: 129: bool useCascadeTag;
 23560                           ;mfrc522_picc.c: 130: uint8_t cascadeLevel = 1;
 23561  00A2  01E4               	clrf	picc_select@cascadeLevel^(0+128)
 23562  00A3  0AE4               	incf	picc_select@cascadeLevel^(0+128),f
 23563                           
 23564                           ;mfrc522_picc.c: 131: em_PcdStatusCode result;
 23565                           ;mfrc522_picc.c: 132: uint8_t count;
 23566                           ;mfrc522_picc.c: 133: uint8_t index;
 23567                           ;mfrc522_picc.c: 134: uint8_t uidIndex;
 23568                           ;mfrc522_picc.c: 135: uint8_t currentLevelKnownBits;
 23569                           ;mfrc522_picc.c: 136: uint8_t buffer[9];
 23570                           ;mfrc522_picc.c: 137: uint8_t bufferUsed;
 23571                           ;mfrc522_picc.c: 138: uint8_t rxAlign;
 23572                           ;mfrc522_picc.c: 139: uint8_t txLastBits;
 23573                           ;mfrc522_picc.c: 140: uint8_t *responseBuffer;
 23574                           ;mfrc522_picc.c: 141: uint8_t responseLength;
 23575                           ;mfrc522_picc.c: 144: if (validBits > 80) return STATUS_INVALID;
 23576  00A4  3051               	movlw	81
 23577  00A5  0020               	movlb	0	; select bank0
 23578  00A6  024A               	subwf	picc_select@validBits,w
 23579  00A7  1C03               	skipc
 23580  00A8  28AB               	goto	l15691
 23581  00A9  3006               	movlw	6
 23582  00AA  0008               	return
 23583  00AB                     l15691:	
 23584                           
 23585                           ;mfrc522_picc.c: 145: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 23586  00AB  3080               	movlw	128
 23587  00AC  00CB               	movwf	??_picc_select
 23588  00AD  084B               	movf	??_picc_select,w
 23589  00AE  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 23590  00AF  300E               	movlw	14
 23591  00B0  31BC  24FC  3180   	fcall	_mfrc522_bal_clr_bit_reg
 23592                           
 23593                           ;mfrc522_picc.c: 146: uidComplete = 0;
 23594  00B3  0021               	movlb	1	; select bank1
 23595  00B4  01D1               	clrf	picc_select@uidComplete^(0+128)
 23596  00B5                     l15915:	
 23597                           ;mfrc522_picc.c: 147: while (!uidComplete) {
 23598                           
 23599  00B5  0021               	movlb	1	; select bank1
 23600  00B6  0851               	movf	picc_select@uidComplete^(0+128),w
 23601  00B7  1D03               	btfss	3,2
 23602  00B8  2BA7               	goto	l15917
 23603                           
 23604                           ;mfrc522_picc.c: 148: if (cascadeLevel == 1) {
 23605  00B9  0364               	decf	picc_select@cascadeLevel^(0+128),w
 23606  00BA  1D03               	btfss	3,2
 23607  00BB  28D6               	goto	l15711
 23608                           
 23609                           ;mfrc522_picc.c: 149: buffer[0] = PICC_CMD_SEL_CL1;
 23610  00BC  3093               	movlw	147
 23611  00BD  0020               	movlb	0	; select bank0
 23612  00BE  00CB               	movwf	??_picc_select
 23613  00BF  084B               	movf	??_picc_select,w
 23614  00C0  0021               	movlb	1	; select bank1
 23615  00C1  00D9               	movwf	picc_select@buffer^(0+128)
 23616                           
 23617                           ;mfrc522_picc.c: 150: uidIndex = 0;
 23618  00C2  01E5               	clrf	picc_select@uidIndex^(0+128)
 23619                           
 23620                           ;mfrc522_picc.c: 151: useCascadeTag = validBits && uid->size > 4;
 23621  00C3  01D4               	clrf	_picc_select$3244^(0+128)
 23622  00C4  0020               	movlb	0	; select bank0
 23623  00C5  084A               	movf	picc_select@validBits,w
 23624  00C6  1903               	btfsc	3,2
 23625  00C7  28D3               	goto	l15709
 23626  00C8  0021               	movlb	1	; select bank1
 23627  00C9  0869               	movf	picc_select@uid^(0+128),w
 23628  00CA  0086               	movwf	6
 23629  00CB  3001               	movlw	1	; select bank2/3
 23630  00CC  0087               	movwf	7
 23631  00CD  3005               	movlw	5
 23632  00CE  0201               	subwf	1,w
 23633  00CF  1C03               	skipc
 23634  00D0  28D3               	goto	l15709
 23635  00D1  01D4               	clrf	_picc_select$3244^(0+128)
 23636  00D2  0AD4               	incf	_picc_select$3244^(0+128),f
 23637  00D3                     l15709:	
 23638  00D3  0021               	movlb	1	; select bank1
 23639  00D4  0854               	movf	_picc_select$3244^(0+128),w
 23640  00D5  28F8               	goto	L6
 23641  00D6                     l15711:	
 23642                           ;mfrc522_picc.c: 152: } else if (cascadeLevel == 2) {
 23643                           
 23644  00D6  3002               	movlw	2
 23645  00D7  0664               	xorwf	picc_select@cascadeLevel^(0+128),w
 23646  00D8  1D03               	btfss	3,2
 23647  00D9  28FE               	goto	l15725
 23648                           
 23649                           ;mfrc522_picc.c: 153: buffer[0] = PICC_CMD_SEL_CL2;
 23650  00DA  3095               	movlw	149
 23651  00DB  0020               	movlb	0	; select bank0
 23652  00DC  00CB               	movwf	??_picc_select
 23653  00DD  084B               	movf	??_picc_select,w
 23654  00DE  0021               	movlb	1	; select bank1
 23655  00DF  00D9               	movwf	picc_select@buffer^(0+128)
 23656                           
 23657                           ;mfrc522_picc.c: 154: uidIndex = 3;
 23658  00E0  3003               	movlw	3
 23659  00E1  0020               	movlb	0	; select bank0
 23660  00E2  00CB               	movwf	??_picc_select
 23661  00E3  084B               	movf	??_picc_select,w
 23662  00E4  0021               	movlb	1	; select bank1
 23663  00E5  00E5               	movwf	picc_select@uidIndex^(0+128)
 23664                           
 23665                           ;mfrc522_picc.c: 155: useCascadeTag = validBits && uid->size > 7;
 23666  00E6  01D5               	clrf	_picc_select$3245^(0+128)
 23667  00E7  0020               	movlb	0	; select bank0
 23668  00E8  084A               	movf	picc_select@validBits,w
 23669  00E9  1903               	btfsc	3,2
 23670  00EA  28F6               	goto	l15723
 23671  00EB  0021               	movlb	1	; select bank1
 23672  00EC  0869               	movf	picc_select@uid^(0+128),w
 23673  00ED  0086               	movwf	6
 23674  00EE  3001               	movlw	1	; select bank2/3
 23675  00EF  0087               	movwf	7
 23676  00F0  3008               	movlw	8
 23677  00F1  0201               	subwf	1,w
 23678  00F2  1C03               	skipc
 23679  00F3  28F6               	goto	l15723
 23680  00F4  01D5               	clrf	_picc_select$3245^(0+128)
 23681  00F5  0AD5               	incf	_picc_select$3245^(0+128),f
 23682  00F6                     l15723:	
 23683  00F6  0021               	movlb	1	; select bank1
 23684  00F7  0855               	movf	_picc_select$3245^(0+128),w
 23685  00F8                     L6:	
 23686  00F8  0020               	movlb	0	; select bank0
 23687  00F9  00CB               	movwf	??_picc_select
 23688  00FA  084B               	movf	??_picc_select,w
 23689  00FB  0021               	movlb	1	; select bank1
 23690  00FC  00E3               	movwf	picc_select@useCascadeTag^(0+128)
 23691                           
 23692                           ;mfrc522_picc.c: 156: } else if (cascadeLevel == 3) {
 23693  00FD  2912               	goto	l15735
 23694  00FE                     l15725:	
 23695  00FE  3003               	movlw	3
 23696  00FF  0664               	xorwf	picc_select@cascadeLevel^(0+128),w
 23697  0100  1D03               	btfss	3,2
 23698  0101  2910               	goto	l15731
 23699                           
 23700                           ;mfrc522_picc.c: 157: buffer[0] = PICC_CMD_SEL_CL3;
 23701  0102  3097               	movlw	151
 23702  0103  0020               	movlb	0	; select bank0
 23703  0104  00CB               	movwf	??_picc_select
 23704  0105  084B               	movf	??_picc_select,w
 23705  0106  0021               	movlb	1	; select bank1
 23706  0107  00D9               	movwf	picc_select@buffer^(0+128)
 23707                           
 23708                           ;mfrc522_picc.c: 158: uidIndex = 6;
 23709  0108  3006               	movlw	6
 23710  0109  0020               	movlb	0	; select bank0
 23711  010A  00CB               	movwf	??_picc_select
 23712  010B  084B               	movf	??_picc_select,w
 23713  010C  0021               	movlb	1	; select bank1
 23714  010D  00E5               	movwf	picc_select@uidIndex^(0+128)
 23715                           
 23716                           ;mfrc522_picc.c: 159: useCascadeTag = 0;
 23717  010E  01E3               	clrf	picc_select@useCascadeTag^(0+128)
 23718                           
 23719                           ;mfrc522_picc.c: 160: } else {
 23720  010F  2912               	goto	l15735
 23721  0110                     l15731:	
 23722                           
 23723                           ;mfrc522_picc.c: 161: return STATUS_INTERNAL_ERROR;
 23724  0110  3005               	movlw	5
 23725  0111  0008               	return
 23726  0112                     l15735:	
 23727                           
 23728                           ;mfrc522_picc.c: 162: }
 23729                           ;mfrc522_picc.c: 164: if (validBits < (8 * uidIndex)) {
 23730  0112  0865               	movf	picc_select@uidIndex^(0+128),w
 23731  0113  0020               	movlb	0	; select bank0
 23732  0114  00CB               	movwf	??_picc_select
 23733  0115  01CC               	clrf	??_picc_select+1
 23734  0116  35CB               	lslf	??_picc_select,f
 23735  0117  0DCC               	rlf	??_picc_select+1,f
 23736  0118  35CB               	lslf	??_picc_select,f
 23737  0119  0DCC               	rlf	??_picc_select+1,f
 23738  011A  35CB               	lslf	??_picc_select,f
 23739  011B  0DCC               	rlf	??_picc_select+1,f
 23740  011C  084C               	movf	??_picc_select+1,w
 23741  011D  3A80               	xorlw	128
 23742  011E  3C80               	sublw	128
 23743  011F  1D03               	skipz
 23744  0120  2923               	goto	u14465
 23745  0121  084B               	movf	??_picc_select,w
 23746  0122  024A               	subwf	picc_select@validBits,w
 23747  0123                     u14465:	
 23748  0123  1803               	skipnc
 23749  0124  2928               	goto	l15739
 23750                           
 23751                           ;mfrc522_picc.c: 165: currentLevelKnownBits = 0;
 23752  0125  0021               	movlb	1	; select bank1
 23753  0126  01EE               	clrf	picc_select@currentLevelKnownBits^(0+128)
 23754                           
 23755                           ;mfrc522_picc.c: 166: } else {
 23756  0127  2939               	goto	l15741
 23757  0128                     l15739:	
 23758                           
 23759                           ;mfrc522_picc.c: 167: currentLevelKnownBits = validBits - (8 * uidIndex);
 23760  0128  0021               	movlb	1	; select bank1
 23761  0129  0865               	movf	picc_select@uidIndex^(0+128),w
 23762  012A  0020               	movlb	0	; select bank0
 23763  012B  00CB               	movwf	??_picc_select
 23764  012C  3002               	movlw	2
 23765  012D                     u14475:	
 23766  012D  35CB               	lslf	??_picc_select,f
 23767  012E  3EFF               	addlw	-1
 23768  012F  1D03               	skipz
 23769  0130  292D               	goto	u14475
 23770  0131  354B               	lslf	??_picc_select,w
 23771  0132  3AFF               	xorlw	255
 23772  0133  3E01               	addlw	1
 23773  0134  074A               	addwf	picc_select@validBits,w
 23774  0135  00CC               	movwf	??_picc_select+1
 23775  0136  084C               	movf	??_picc_select+1,w
 23776  0137  0021               	movlb	1	; select bank1
 23777  0138  00EE               	movwf	picc_select@currentLevelKnownBits^(0+128)
 23778  0139                     l15741:	
 23779                           
 23780                           ;mfrc522_picc.c: 168: }
 23781                           ;mfrc522_picc.c: 169: index = 2;
 23782  0139  3002               	movlw	2
 23783  013A  0020               	movlb	0	; select bank0
 23784  013B  00CB               	movwf	??_picc_select
 23785  013C  084B               	movf	??_picc_select,w
 23786  013D  0021               	movlb	1	; select bank1
 23787  013E  00ED               	movwf	picc_select@index^(0+128)
 23788                           
 23789                           ;mfrc522_picc.c: 170: if (useCascadeTag) {
 23790  013F  0863               	movf	picc_select@useCascadeTag^(0+128),w
 23791  0140  1903               	btfsc	3,2
 23792  0141  2952               	goto	l15749
 23793                           
 23794                           ;mfrc522_picc.c: 171: buffer[index++] = PICC_CMD_CT;
 23795  0142  3088               	movlw	136
 23796  0143  0020               	movlb	0	; select bank0
 23797  0144  00CB               	movwf	??_picc_select
 23798  0145  0021               	movlb	1	; select bank1
 23799  0146  086D               	movf	picc_select@index^(0+128),w
 23800  0147  3ED9               	addlw	(low (picc_select@buffer| 0))& (0+255)
 23801  0148  0086               	movwf	6
 23802  0149  0187               	clrf	7
 23803  014A  0020               	movlb	0	; select bank0
 23804  014B  084B               	movf	??_picc_select,w
 23805  014C  0081               	movwf	1
 23806  014D  3001               	movlw	1
 23807  014E  00CB               	movwf	??_picc_select
 23808  014F  084B               	movf	??_picc_select,w
 23809  0150  0021               	movlb	1	; select bank1
 23810  0151  07ED               	addwf	picc_select@index^(0+128),f
 23811  0152                     l15749:	
 23812                           
 23813                           ;mfrc522_picc.c: 172: }
 23814                           ;mfrc522_picc.c: 173: uint8_t bytesToCopy;
 23815                           ;mfrc522_picc.c: 174: bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits %
      +                           8 ? 1 : 0);
 23816  0152  3008               	movlw	8
 23817  0153  00F3               	movwf	___awdiv@divisor
 23818  0154  3000               	movlw	0
 23819  0155  00F4               	movwf	___awdiv@divisor+1
 23820  0156  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 23821  0157  0020               	movlb	0	; select bank0
 23822  0158  00CB               	movwf	??_picc_select
 23823  0159  01CC               	clrf	??_picc_select+1
 23824  015A  084B               	movf	??_picc_select,w
 23825  015B  00F5               	movwf	___awdiv@dividend
 23826  015C  084C               	movf	??_picc_select+1,w
 23827  015D  00F6               	movwf	___awdiv@dividend+1
 23828  015E  31A9  21F3  3180   	fcall	___awdiv
 23829  0161  0873               	movf	?___awdiv,w
 23830  0162  0020               	movlb	0	; select bank0
 23831  0163  00CD               	movwf	??_picc_select+2
 23832  0164  0874               	movf	?___awdiv+1,w
 23833  0165  00CE               	movwf	??_picc_select+3
 23834  0166  0021               	movlb	1	; select bank1
 23835  0167  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 23836  0168  3907               	andlw	7
 23837  0169  1903               	btfsc	3,2
 23838  016A  296D               	goto	u14490
 23839  016B  3001               	movlw	1
 23840  016C  296E               	goto	u14500
 23841  016D                     u14490:	
 23842  016D  3000               	movlw	0
 23843  016E                     u14500:	
 23844  016E  0020               	movlb	0	; select bank0
 23845  016F  074D               	addwf	??_picc_select+2,w
 23846  0170  00CF               	movwf	??_picc_select+4
 23847  0171  084F               	movf	??_picc_select+4,w
 23848  0172  0021               	movlb	1	; select bank1
 23849  0173  00E6               	movwf	picc_select@bytesToCopy^(0+128)
 23850                           
 23851                           ;mfrc522_picc.c: 175: if (bytesToCopy) {
 23852  0174  0866               	movf	picc_select@bytesToCopy^(0+128),w
 23853  0175  1903               	btfsc	3,2
 23854  0176  29B5               	goto	l15771
 23855                           
 23856                           ;mfrc522_picc.c: 176: uint8_t maxBytes = useCascadeTag ? 3 : 4;
 23857  0177  0863               	movf	picc_select@useCascadeTag^(0+128),w
 23858  0178  1D03               	btfss	3,2
 23859  0179  297C               	goto	l15757
 23860  017A  3004               	movlw	4
 23861  017B  297D               	goto	L7
 23862  017C                     l15757:	
 23863  017C  3003               	movlw	3
 23864  017D                     L7:	
 23865  017D  00CB               	movwf	_picc_select$3248^(0+128)
 23866  017E  3000               	movlw	0
 23867  017F  00CC               	movwf	(_picc_select$3248^(0+128)+1)
 23868  0180  084B               	movf	_picc_select$3248^(0+128),w
 23869  0181  0020               	movlb	0	; select bank0
 23870  0182  00CB               	movwf	??_picc_select
 23871  0183  084B               	movf	??_picc_select,w
 23872  0184  0021               	movlb	1	; select bank1
 23873  0185  00D7               	movwf	picc_select@maxBytes^(0+128)
 23874                           
 23875                           ;mfrc522_picc.c: 177: if (bytesToCopy > maxBytes) {
 23876  0186  0866               	movf	picc_select@bytesToCopy^(0+128),w
 23877  0187  0257               	subwf	picc_select@maxBytes^(0+128),w
 23878  0188  1803               	skipnc
 23879  0189  2990               	goto	l15761
 23880                           
 23881                           ;mfrc522_picc.c: 178: bytesToCopy = maxBytes;
 23882  018A  0857               	movf	picc_select@maxBytes^(0+128),w
 23883  018B  0020               	movlb	0	; select bank0
 23884  018C  00CB               	movwf	??_picc_select
 23885  018D  084B               	movf	??_picc_select,w
 23886  018E  0021               	movlb	1	; select bank1
 23887  018F  00E6               	movwf	picc_select@bytesToCopy^(0+128)
 23888  0190                     l15761:	
 23889                           
 23890                           ;mfrc522_picc.c: 179: }
 23891                           ;mfrc522_picc.c: 180: for (count = 0; count < bytesToCopy; count++) {
 23892  0190  01EC               	clrf	picc_select@count^(0+128)
 23893  0191                     l15769:	
 23894  0191  0866               	movf	picc_select@bytesToCopy^(0+128),w
 23895  0192  026C               	subwf	picc_select@count^(0+128),w
 23896  0193  1803               	btfsc	3,0
 23897  0194  29B5               	goto	l15771
 23898                           
 23899                           ;mfrc522_picc.c: 181: buffer[index++] = uid->uidByte[uidIndex + count];
 23900  0195  0865               	movf	picc_select@uidIndex^(0+128),w
 23901  0196  076C               	addwf	picc_select@count^(0+128),w
 23902  0197  3E01               	addlw	1
 23903  0198  0769               	addwf	picc_select@uid^(0+128),w
 23904  0199  0020               	movlb	0	; select bank0
 23905  019A  00CB               	movwf	??_picc_select
 23906  019B  084B               	movf	??_picc_select,w
 23907  019C  0086               	movwf	6
 23908  019D  3001               	movlw	1	; select bank2/3
 23909  019E  0087               	movwf	7
 23910  019F  0801               	movf	1,w
 23911  01A0  00CC               	movwf	??_picc_select+1
 23912  01A1  0021               	movlb	1	; select bank1
 23913  01A2  086D               	movf	picc_select@index^(0+128),w
 23914  01A3  3ED9               	addlw	(low (picc_select@buffer| 0))& (0+255)
 23915  01A4  0086               	movwf	6
 23916  01A5  0187               	clrf	7
 23917  01A6  0020               	movlb	0	; select bank0
 23918  01A7  084C               	movf	??_picc_select+1,w
 23919  01A8  0081               	movwf	1
 23920  01A9  3001               	movlw	1
 23921  01AA  00CB               	movwf	??_picc_select
 23922  01AB  084B               	movf	??_picc_select,w
 23923  01AC  0021               	movlb	1	; select bank1
 23924  01AD  07ED               	addwf	picc_select@index^(0+128),f
 23925  01AE  3001               	movlw	1
 23926  01AF  0020               	movlb	0	; select bank0
 23927  01B0  00CB               	movwf	??_picc_select
 23928  01B1  084B               	movf	??_picc_select,w
 23929  01B2  0021               	movlb	1	; select bank1
 23930  01B3  07EC               	addwf	picc_select@count^(0+128),f
 23931  01B4  2991               	goto	l15769
 23932  01B5                     l15771:	
 23933                           
 23934                           ;mfrc522_picc.c: 182: }
 23935                           ;mfrc522_picc.c: 183: }
 23936                           ;mfrc522_picc.c: 184: if (useCascadeTag) {
 23937  01B5  0863               	movf	picc_select@useCascadeTag^(0+128),w
 23938  01B6  1903               	btfsc	3,2
 23939  01B7  29BE               	goto	l15775
 23940                           
 23941                           ;mfrc522_picc.c: 185: currentLevelKnownBits += 8;
 23942  01B8  3008               	movlw	8
 23943  01B9  0020               	movlb	0	; select bank0
 23944  01BA  00CB               	movwf	??_picc_select
 23945  01BB  084B               	movf	??_picc_select,w
 23946  01BC  0021               	movlb	1	; select bank1
 23947  01BD  07EE               	addwf	picc_select@currentLevelKnownBits^(0+128),f
 23948  01BE                     l15775:	
 23949                           
 23950                           ;mfrc522_picc.c: 186: }
 23951                           ;mfrc522_picc.c: 188: selectDone = 0;
 23952  01BE  01D2               	clrf	picc_select@selectDone^(0+128)
 23953  01BF                     l15861:	
 23954                           ;mfrc522_picc.c: 189: while (!selectDone) {
 23955                           
 23956  01BF  0021               	movlb	1	; select bank1
 23957  01C0  0852               	movf	picc_select@selectDone^(0+128),w
 23958  01C1  1D03               	btfss	3,2
 23959  01C2  2B13               	goto	l15863
 23960                           
 23961                           ;mfrc522_picc.c: 190: if (currentLevelKnownBits >= 32) {
 23962  01C3  3020               	movlw	32
 23963  01C4  026E               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 23964  01C5  1C03               	skipc
 23965  01C6  29FF               	goto	l15799
 23966                           
 23967                           ;mfrc522_picc.c: 192: buffer[1] = 0x70;
 23968  01C7  3070               	movlw	112
 23969  01C8  0020               	movlb	0	; select bank0
 23970  01C9  00CB               	movwf	??_picc_select
 23971  01CA  084B               	movf	??_picc_select,w
 23972  01CB  0021               	movlb	1	; select bank1
 23973  01CC  00DA               	movwf	(picc_select@buffer^(0+128)+1)
 23974                           
 23975                           ;mfrc522_picc.c: 193: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 23976  01CD  085B               	movf	(picc_select@buffer^(0+128)+2),w
 23977  01CE  065C               	xorwf	(picc_select@buffer^(0+128)+3),w
 23978  01CF  065D               	xorwf	(picc_select@buffer^(0+128)+4),w
 23979  01D0  065E               	xorwf	(picc_select@buffer^(0+128)+5),w
 23980  01D1  0020               	movlb	0	; select bank0
 23981  01D2  00CB               	movwf	??_picc_select
 23982  01D3  084B               	movf	??_picc_select,w
 23983  01D4  0021               	movlb	1	; select bank1
 23984  01D5  00DF               	movwf	(picc_select@buffer^(0+128)+6)
 23985                           
 23986                           ;mfrc522_picc.c: 194: result = mfrc522_hal_calculate_crc(buffer, 7, &buffer[7]);
 23987  01D6  30D9               	movlw	low picc_select@buffer
 23988  01D7  0020               	movlb	0	; select bank0
 23989  01D8  00A6               	movwf	mfrc522_hal_calculate_crc@data
 23990  01D9  3000               	movlw	high picc_select@buffer
 23991  01DA  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 23992  01DB  3007               	movlw	7
 23993  01DC  00CB               	movwf	??_picc_select
 23994  01DD  084B               	movf	??_picc_select,w
 23995  01DE  00A8               	movwf	mfrc522_hal_calculate_crc@length
 23996  01DF  30E0               	movlw	low (picc_select@buffer+7)
 23997  01E0  00A9               	movwf	mfrc522_hal_calculate_crc@result
 23998  01E1  3000               	movlw	high (picc_select@buffer+7)
 23999  01E2  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 24000  01E3  31AD  2533  3180   	fcall	_mfrc522_hal_calculate_crc
 24001  01E6  0020               	movlb	0	; select bank0
 24002  01E7  00CC               	movwf	??_picc_select+1
 24003  01E8  084C               	movf	??_picc_select+1,w
 24004  01E9  0021               	movlb	1	; select bank1
 24005  01EA  00EB               	movwf	picc_select@result^(0+128)
 24006                           
 24007                           ;mfrc522_picc.c: 195: if (result != STATUS_OK) {
 24008  01EB  086B               	movf	picc_select@result^(0+128),w
 24009  01EC  1903               	btfsc	3,2
 24010  01ED  29F0               	goto	l15791
 24011                           
 24012                           ;mfrc522_picc.c: 196: return result;
 24013  01EE  086B               	movf	picc_select@result^(0+128),w
 24014  01EF  0008               	return
 24015  01F0                     l15791:	
 24016                           
 24017                           ;mfrc522_picc.c: 197: }
 24018                           ;mfrc522_picc.c: 198: txLastBits = 0;
 24019  01F0  01EA               	clrf	picc_select@txLastBits^(0+128)
 24020                           
 24021                           ;mfrc522_picc.c: 199: bufferUsed = 9;
 24022  01F1  3009               	movlw	9
 24023  01F2  0020               	movlb	0	; select bank0
 24024  01F3  00CB               	movwf	??_picc_select
 24025  01F4  084B               	movf	??_picc_select,w
 24026  01F5  0021               	movlb	1	; select bank1
 24027  01F6  00D3               	movwf	picc_select@bufferUsed^(0+128)
 24028                           
 24029                           ;mfrc522_picc.c: 201: responseBuffer = &buffer[6];
 24030  01F7  30DF               	movlw	(low ((picc_select@buffer| 0+6)))& (0+255)
 24031  01F8  0020               	movlb	0	; select bank0
 24032  01F9  00CB               	movwf	??_picc_select
 24033  01FA  084B               	movf	??_picc_select,w
 24034  01FB  0021               	movlb	1	; select bank1
 24035  01FC  00E8               	movwf	picc_select@responseBuffer^(0+128)
 24036                           
 24037                           ;mfrc522_picc.c: 202: responseLength = 3;
 24038  01FD  3003               	movlw	3
 24039  01FE  2A48               	goto	L8
 24040  01FF                     l15799:	
 24041                           ;mfrc522_picc.c: 203: } else {
 24042                           
 24043                           
 24044                           ;mfrc522_picc.c: 204: txLastBits = currentLevelKnownBits % 8;
 24045  01FF  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24046  0200  3907               	andlw	7
 24047  0201  0020               	movlb	0	; select bank0
 24048  0202  00CB               	movwf	??_picc_select
 24049  0203  084B               	movf	??_picc_select,w
 24050  0204  0021               	movlb	1	; select bank1
 24051  0205  00EA               	movwf	picc_select@txLastBits^(0+128)
 24052                           
 24053                           ;mfrc522_picc.c: 205: count = currentLevelKnownBits / 8;
 24054  0206  3008               	movlw	8
 24055  0207  00F3               	movwf	___awdiv@divisor
 24056  0208  3000               	movlw	0
 24057  0209  00F4               	movwf	___awdiv@divisor+1
 24058  020A  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24059  020B  0020               	movlb	0	; select bank0
 24060  020C  00CB               	movwf	??_picc_select
 24061  020D  01CC               	clrf	??_picc_select+1
 24062  020E  084B               	movf	??_picc_select,w
 24063  020F  00F5               	movwf	___awdiv@dividend
 24064  0210  084C               	movf	??_picc_select+1,w
 24065  0211  00F6               	movwf	___awdiv@dividend+1
 24066  0212  31A9  21F3  3180   	fcall	___awdiv
 24067  0215  0873               	movf	?___awdiv,w
 24068  0216  0020               	movlb	0	; select bank0
 24069  0217  00CD               	movwf	??_picc_select+2
 24070  0218  084D               	movf	??_picc_select+2,w
 24071  0219  0021               	movlb	1	; select bank1
 24072  021A  00EC               	movwf	picc_select@count^(0+128)
 24073                           
 24074                           ;mfrc522_picc.c: 206: index = 2 + count;
 24075  021B  086C               	movf	picc_select@count^(0+128),w
 24076  021C  3E02               	addlw	2
 24077  021D  0020               	movlb	0	; select bank0
 24078  021E  00CB               	movwf	??_picc_select
 24079  021F  084B               	movf	??_picc_select,w
 24080  0220  0021               	movlb	1	; select bank1
 24081  0221  00ED               	movwf	picc_select@index^(0+128)
 24082                           
 24083                           ;mfrc522_picc.c: 207: buffer[1] = (index << 4) + txLastBits;
 24084  0222  086D               	movf	picc_select@index^(0+128),w
 24085  0223  0020               	movlb	0	; select bank0
 24086  0224  00CB               	movwf	??_picc_select
 24087  0225  3003               	movlw	3
 24088  0226                     u14585:	
 24089  0226  35CB               	lslf	??_picc_select,f
 24090  0227  3EFF               	addlw	-1
 24091  0228  1D03               	skipz
 24092  0229  2A26               	goto	u14585
 24093  022A  354B               	lslf	??_picc_select,w
 24094  022B  0021               	movlb	1	; select bank1
 24095  022C  076A               	addwf	picc_select@txLastBits^(0+128),w
 24096  022D  0020               	movlb	0	; select bank0
 24097  022E  00CC               	movwf	??_picc_select+1
 24098  022F  084C               	movf	??_picc_select+1,w
 24099  0230  0021               	movlb	1	; select bank1
 24100  0231  00DA               	movwf	(picc_select@buffer^(0+128)+1)
 24101                           
 24102                           ;mfrc522_picc.c: 208: bufferUsed = index + (txLastBits ? 1 : 0);
 24103  0232  086A               	movf	picc_select@txLastBits^(0+128),w
 24104  0233  1903               	btfsc	3,2
 24105  0234  2A37               	goto	u14590
 24106  0235  3001               	movlw	1
 24107  0236  2A38               	goto	u14600
 24108  0237                     u14590:	
 24109  0237  3000               	movlw	0
 24110  0238                     u14600:	
 24111  0238  076D               	addwf	picc_select@index^(0+128),w
 24112  0239  0020               	movlb	0	; select bank0
 24113  023A  00CB               	movwf	??_picc_select
 24114  023B  084B               	movf	??_picc_select,w
 24115  023C  0021               	movlb	1	; select bank1
 24116  023D  00D3               	movwf	picc_select@bufferUsed^(0+128)
 24117                           
 24118                           ;mfrc522_picc.c: 209: responseBuffer = &buffer[index];
 24119  023E  086D               	movf	picc_select@index^(0+128),w
 24120  023F  3ED9               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24121  0240  0020               	movlb	0	; select bank0
 24122  0241  00CB               	movwf	??_picc_select
 24123  0242  084B               	movf	??_picc_select,w
 24124  0243  0021               	movlb	1	; select bank1
 24125  0244  00E8               	movwf	picc_select@responseBuffer^(0+128)
 24126                           
 24127                           ;mfrc522_picc.c: 210: responseLength = sizeof (buffer) - index;
 24128  0245  036D               	decf	picc_select@index^(0+128),w
 24129  0246  3AFF               	xorlw	255
 24130  0247  3E09               	addlw	9
 24131  0248                     L8:	
 24132  0248  0020               	movlb	0	; select bank0
 24133  0249  00CB               	movwf	??_picc_select
 24134  024A  084B               	movf	??_picc_select,w
 24135  024B  0021               	movlb	1	; select bank1
 24136  024C  00E7               	movwf	picc_select@responseLength^(0+128)
 24137                           
 24138                           ;mfrc522_picc.c: 211: }
 24139                           ;mfrc522_picc.c: 213: rxAlign = txLastBits;
 24140  024D  086A               	movf	picc_select@txLastBits^(0+128),w
 24141  024E  0020               	movlb	0	; select bank0
 24142  024F  00CB               	movwf	??_picc_select
 24143  0250  084B               	movf	??_picc_select,w
 24144  0251  0021               	movlb	1	; select bank1
 24145  0252  00D6               	movwf	picc_select@rxAlign^(0+128)
 24146                           
 24147                           ;mfrc522_picc.c: 214: mfrc522_bal_write_reg(BitFramingReg, (rxAlign << 4) + txLastBits);
 24148  0253  0856               	movf	picc_select@rxAlign^(0+128),w
 24149  0254  0020               	movlb	0	; select bank0
 24150  0255  00CB               	movwf	??_picc_select
 24151  0256  3003               	movlw	3
 24152  0257                     u14615:	
 24153  0257  35CB               	lslf	??_picc_select,f
 24154  0258  3EFF               	addlw	-1
 24155  0259  1D03               	skipz
 24156  025A  2A57               	goto	u14615
 24157  025B  354B               	lslf	??_picc_select,w
 24158  025C  0021               	movlb	1	; select bank1
 24159  025D  076A               	addwf	picc_select@txLastBits^(0+128),w
 24160  025E  0020               	movlb	0	; select bank0
 24161  025F  00CC               	movwf	??_picc_select+1
 24162  0260  084C               	movf	??_picc_select+1,w
 24163  0261  00F7               	movwf	mfrc522_bal_write_reg@x
 24164  0262  300D               	movlw	13
 24165  0263  31BB  23CC  3180   	fcall	_mfrc522_bal_write_reg
 24166                           
 24167                           ;mfrc522_picc.c: 217: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, bufferUsed
      +                          , responseBuffer, &responseLength, &txLastBits, rxAlign, 0);
 24168  0266  3030               	movlw	48
 24169  0267  0020               	movlb	0	; select bank0
 24170  0268  00CB               	movwf	??_picc_select
 24171  0269  084B               	movf	??_picc_select,w
 24172  026A  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 24173  026B  30D9               	movlw	low picc_select@buffer
 24174  026C  00B2               	movwf	pcd_comm_with_picc@sbuf
 24175  026D  3000               	movlw	high picc_select@buffer
 24176  026E  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 24177  026F  0021               	movlb	1	; select bank1
 24178  0270  0853               	movf	picc_select@bufferUsed^(0+128),w
 24179  0271  0020               	movlb	0	; select bank0
 24180  0272  00CC               	movwf	??_picc_select+1
 24181  0273  084C               	movf	??_picc_select+1,w
 24182  0274  00B4               	movwf	pcd_comm_with_picc@slen
 24183  0275  0021               	movlb	1	; select bank1
 24184  0276  0868               	movf	picc_select@responseBuffer^(0+128),w
 24185  0277  0020               	movlb	0	; select bank0
 24186  0278  00B5               	movwf	pcd_comm_with_picc@rbuf
 24187  0279  3000               	movlw	0
 24188  027A  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 24189  027B  30E7               	movlw	(low (picc_select@responseLength| 0))& (0+255)
 24190  027C  00CD               	movwf	??_picc_select+2
 24191  027D  084D               	movf	??_picc_select+2,w
 24192  027E  00B7               	movwf	pcd_comm_with_picc@rlen
 24193  027F  30EA               	movlw	(low (picc_select@txLastBits| 0))& (0+255)
 24194  0280  00CE               	movwf	??_picc_select+3
 24195  0281  084E               	movf	??_picc_select+3,w
 24196  0282  00B8               	movwf	pcd_comm_with_picc@validBits
 24197  0283  0021               	movlb	1	; select bank1
 24198  0284  0856               	movf	picc_select@rxAlign^(0+128),w
 24199  0285  0020               	movlb	0	; select bank0
 24200  0286  00CF               	movwf	??_picc_select+4
 24201  0287  084F               	movf	??_picc_select+4,w
 24202  0288  00B9               	movwf	pcd_comm_with_picc@rxAlign
 24203  0289  01BA               	clrf	pcd_comm_with_picc@checkCRC
 24204  028A  300C               	movlw	12
 24205  028B  3186  26A4  3180   	fcall	_pcd_comm_with_picc
 24206  028E  0020               	movlb	0	; select bank0
 24207  028F  00D0               	movwf	??_picc_select+5
 24208  0290  0850               	movf	??_picc_select+5,w
 24209  0291  0021               	movlb	1	; select bank1
 24210  0292  00EB               	movwf	picc_select@result^(0+128)
 24211                           
 24212                           ;mfrc522_picc.c: 218: if (result == STATUS_COLLISION) {
 24213  0293  3002               	movlw	2
 24214  0294  066B               	xorwf	picc_select@result^(0+128),w
 24215  0295  1D03               	btfss	3,2
 24216  0296  2AFF               	goto	l15847
 24217                           
 24218                           ;mfrc522_picc.c: 219: uint8_t valueOfCollReg = mfrc522_bal_read_reg(CollReg);
 24219  0297  300E               	movlw	14
 24220  0298  31BD  258A  3180   	fcall	_mfrc522_bal_read_reg
 24221  029B  0020               	movlb	0	; select bank0
 24222  029C  00CB               	movwf	??_picc_select
 24223  029D  084B               	movf	??_picc_select,w
 24224  029E  0021               	movlb	1	; select bank1
 24225  029F  00D8               	movwf	picc_select@valueOfCollReg^(0+128)
 24226                           
 24227                           ;mfrc522_picc.c: 220: if (valueOfCollReg & 0x20) {
 24228  02A0  1ED8               	btfss	picc_select@valueOfCollReg^(0+128),5
 24229  02A1  2AA4               	goto	l15829
 24230                           
 24231                           ;mfrc522_picc.c: 221: return STATUS_COLLISION;
 24232  02A2  3002               	movlw	2
 24233  02A3  0008               	return
 24234  02A4                     l15829:	
 24235                           
 24236                           ;mfrc522_picc.c: 222: }
 24237                           ;mfrc522_picc.c: 223: uint8_t collisionPos = valueOfCollReg & 0x1F;
 24238  02A4  0858               	movf	picc_select@valueOfCollReg^(0+128),w
 24239  02A5  391F               	andlw	31
 24240  02A6  0020               	movlb	0	; select bank0
 24241  02A7  00CB               	movwf	??_picc_select
 24242  02A8  084B               	movf	??_picc_select,w
 24243  02A9  0021               	movlb	1	; select bank1
 24244  02AA  00E2               	movwf	picc_select@collisionPos^(0+128)
 24245                           
 24246                           ;mfrc522_picc.c: 224: if (collisionPos == 0) {
 24247  02AB  0862               	movf	picc_select@collisionPos^(0+128),w
 24248  02AC  1D03               	btfss	3,2
 24249  02AD  2AB4               	goto	l2326
 24250                           
 24251                           ;mfrc522_picc.c: 225: collisionPos = 32;
 24252  02AE  3020               	movlw	32
 24253  02AF  0020               	movlb	0	; select bank0
 24254  02B0  00CB               	movwf	??_picc_select
 24255  02B1  084B               	movf	??_picc_select,w
 24256  02B2  0021               	movlb	1	; select bank1
 24257  02B3  00E2               	movwf	picc_select@collisionPos^(0+128)
 24258  02B4                     l2326:	
 24259                           
 24260                           ;mfrc522_picc.c: 226: }
 24261                           ;mfrc522_picc.c: 227: if (collisionPos <= currentLevelKnownBits) {
 24262  02B4  0862               	movf	picc_select@collisionPos^(0+128),w
 24263  02B5  026E               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 24264  02B6  1C03               	skipc
 24265  02B7  2ABA               	goto	l15839
 24266                           
 24267                           ;mfrc522_picc.c: 228: return STATUS_INTERNAL_ERROR;
 24268  02B8  3005               	movlw	5
 24269  02B9  0008               	return
 24270  02BA                     l15839:	
 24271                           
 24272                           ;mfrc522_picc.c: 229: }
 24273                           ;mfrc522_picc.c: 230: currentLevelKnownBits = collisionPos;
 24274  02BA  0862               	movf	picc_select@collisionPos^(0+128),w
 24275  02BB  0020               	movlb	0	; select bank0
 24276  02BC  00CB               	movwf	??_picc_select
 24277  02BD  084B               	movf	??_picc_select,w
 24278  02BE  0021               	movlb	1	; select bank1
 24279  02BF  00EE               	movwf	picc_select@currentLevelKnownBits^(0+128)
 24280                           
 24281                           ;mfrc522_picc.c: 231: count = (currentLevelKnownBits - 1) % 8;
 24282  02C0  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24283  02C1  3EFF               	addlw	255
 24284  02C2  3907               	andlw	7
 24285  02C3  0020               	movlb	0	; select bank0
 24286  02C4  00CB               	movwf	??_picc_select
 24287  02C5  084B               	movf	??_picc_select,w
 24288  02C6  0021               	movlb	1	; select bank1
 24289  02C7  00EC               	movwf	picc_select@count^(0+128)
 24290                           
 24291                           ;mfrc522_picc.c: 232: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
 24292  02C8  3008               	movlw	8
 24293  02C9  00F3               	movwf	___awdiv@divisor
 24294  02CA  3000               	movlw	0
 24295  02CB  00F4               	movwf	___awdiv@divisor+1
 24296  02CC  086E               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24297  02CD  0020               	movlb	0	; select bank0
 24298  02CE  00CB               	movwf	??_picc_select
 24299  02CF  01CC               	clrf	??_picc_select+1
 24300  02D0  084B               	movf	??_picc_select,w
 24301  02D1  00F5               	movwf	___awdiv@dividend
 24302  02D2  084C               	movf	??_picc_select+1,w
 24303  02D3  00F6               	movwf	___awdiv@dividend+1
 24304  02D4  31A9  21F3  3180   	fcall	___awdiv
 24305  02D7  0873               	movf	?___awdiv,w
 24306  02D8  0020               	movlb	0	; select bank0
 24307  02D9  00CD               	movwf	??_picc_select+2
 24308  02DA  0874               	movf	?___awdiv+1,w
 24309  02DB  00CE               	movwf	??_picc_select+3
 24310  02DC  0021               	movlb	1	; select bank1
 24311  02DD  086C               	movf	picc_select@count^(0+128),w
 24312  02DE  1903               	btfsc	3,2
 24313  02DF  2AE2               	goto	u14660
 24314  02E0  3001               	movlw	1
 24315  02E1  2AE3               	goto	u14670
 24316  02E2                     u14660:	
 24317  02E2  3000               	movlw	0
 24318  02E3                     u14670:	
 24319  02E3  0020               	movlb	0	; select bank0
 24320  02E4  074D               	addwf	??_picc_select+2,w
 24321  02E5  3E01               	addlw	1
 24322  02E6  00CF               	movwf	??_picc_select+4
 24323  02E7  084F               	movf	??_picc_select+4,w
 24324  02E8  0021               	movlb	1	; select bank1
 24325  02E9  00ED               	movwf	picc_select@index^(0+128)
 24326                           
 24327                           ;mfrc522_picc.c: 233: buffer[index] |= (1 << count);
 24328  02EA  3001               	movlw	1
 24329  02EB  0020               	movlb	0	; select bank0
 24330  02EC  00CB               	movwf	??_picc_select
 24331  02ED  0021               	movlb	1	; select bank1
 24332  02EE  0A6C               	incf	picc_select@count^(0+128),w
 24333  02EF  0020               	movlb	0	; select bank0
 24334  02F0  2AF2               	goto	u14684
 24335  02F1                     u14685:	
 24336  02F1  35CB               	lslf	??_picc_select,f
 24337  02F2                     u14684:	
 24338  02F2  0B89               	decfsz	9,f
 24339  02F3  2AF1               	goto	u14685
 24340  02F4  084B               	movf	??_picc_select,w
 24341  02F5  00CC               	movwf	??_picc_select+1
 24342  02F6  0021               	movlb	1	; select bank1
 24343  02F7  086D               	movf	picc_select@index^(0+128),w
 24344  02F8  3ED9               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24345  02F9  0086               	movwf	6
 24346  02FA  0187               	clrf	7
 24347  02FB  0020               	movlb	0	; select bank0
 24348  02FC  084C               	movf	??_picc_select+1,w
 24349  02FD  0481               	iorwf	1,f
 24350                           
 24351                           ;mfrc522_picc.c: 234: } else if (result != STATUS_OK) {
 24352  02FE  29BF               	goto	l15861
 24353  02FF                     l15847:	
 24354  02FF  0021               	movlb	1	; select bank1
 24355  0300  086B               	movf	picc_select@result^(0+128),w
 24356  0301  1903               	btfsc	3,2
 24357  0302  2B05               	goto	l15855
 24358                           
 24359                           ;mfrc522_picc.c: 235: return result;
 24360  0303  086B               	movf	picc_select@result^(0+128),w
 24361  0304  0008               	return
 24362  0305                     l15855:	
 24363                           ;mfrc522_picc.c: 236: } else {
 24364                           
 24365                           
 24366                           ;mfrc522_picc.c: 237: if (currentLevelKnownBits >= 32) {
 24367  0305  3020               	movlw	32
 24368  0306  026E               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 24369  0307  1C03               	skipc
 24370  0308  2B0C               	goto	l15859
 24371                           
 24372                           ;mfrc522_picc.c: 238: selectDone = 1;
 24373  0309  01D2               	clrf	picc_select@selectDone^(0+128)
 24374  030A  0AD2               	incf	picc_select@selectDone^(0+128),f
 24375                           
 24376                           ;mfrc522_picc.c: 239: } else {
 24377  030B  29BF               	goto	l15861
 24378  030C                     l15859:	
 24379                           
 24380                           ;mfrc522_picc.c: 240: currentLevelKnownBits = 32;
 24381  030C  3020               	movlw	32
 24382  030D  0020               	movlb	0	; select bank0
 24383  030E  00CB               	movwf	??_picc_select
 24384  030F  084B               	movf	??_picc_select,w
 24385  0310  0021               	movlb	1	; select bank1
 24386  0311  00EE               	movwf	picc_select@currentLevelKnownBits^(0+128)
 24387  0312  29BF               	goto	l15861
 24388  0313                     l15863:	
 24389                           
 24390                           ;mfrc522_picc.c: 241: }
 24391                           ;mfrc522_picc.c: 242: }
 24392                           ;mfrc522_picc.c: 243: }
 24393                           ;mfrc522_picc.c: 244: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
 24394  0313  3088               	movlw	136
 24395  0314  065B               	xorwf	(picc_select@buffer^(0+128)+2),w
 24396  0315  1903               	btfsc	3,2
 24397  0316  2B19               	goto	l15867
 24398  0317  3002               	movlw	2
 24399  0318  2B1A               	goto	L9
 24400  0319                     l15867:	
 24401  0319  3003               	movlw	3
 24402  031A                     L9:	
 24403  031A  00CD               	movwf	_picc_select$3251^(0+128)
 24404  031B  3000               	movlw	0
 24405  031C  00CE               	movwf	(_picc_select$3251^(0+128)+1)
 24406  031D  084D               	movf	_picc_select$3251^(0+128),w
 24407  031E  0020               	movlb	0	; select bank0
 24408  031F  00CB               	movwf	??_picc_select
 24409  0320  084B               	movf	??_picc_select,w
 24410  0321  0021               	movlb	1	; select bank1
 24411  0322  00ED               	movwf	picc_select@index^(0+128)
 24412                           
 24413                           ;mfrc522_picc.c: 245: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 24414  0323  3088               	movlw	136
 24415  0324  065B               	xorwf	(picc_select@buffer^(0+128)+2),w
 24416  0325  1903               	btfsc	3,2
 24417  0326  2B29               	goto	l15873
 24418  0327  3004               	movlw	4
 24419  0328  2B2A               	goto	L10
 24420  0329                     l15873:	
 24421  0329  3003               	movlw	3
 24422  032A                     L10:	
 24423  032A  00CF               	movwf	_picc_select$3252^(0+128)
 24424  032B  3000               	movlw	0
 24425  032C  00D0               	movwf	(_picc_select$3252^(0+128)+1)
 24426  032D  084F               	movf	_picc_select$3252^(0+128),w
 24427  032E  0020               	movlb	0	; select bank0
 24428  032F  00CB               	movwf	??_picc_select
 24429  0330  084B               	movf	??_picc_select,w
 24430  0331  0021               	movlb	1	; select bank1
 24431  0332  00E6               	movwf	picc_select@bytesToCopy^(0+128)
 24432                           
 24433                           ;mfrc522_picc.c: 246: for (count = 0; count < bytesToCopy; count++) {
 24434  0333  01EC               	clrf	picc_select@count^(0+128)
 24435  0334                     l15883:	
 24436  0334  0866               	movf	picc_select@bytesToCopy^(0+128),w
 24437  0335  026C               	subwf	picc_select@count^(0+128),w
 24438  0336  1803               	btfsc	3,0
 24439  0337  2B58               	goto	l15885
 24440                           
 24441                           ;mfrc522_picc.c: 247: uid->uidByte[uidIndex + count] = buffer[index++];
 24442  0338  086D               	movf	picc_select@index^(0+128),w
 24443  0339  3ED9               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24444  033A  0086               	movwf	6
 24445  033B  0187               	clrf	7
 24446  033C  0801               	movf	1,w
 24447  033D  0020               	movlb	0	; select bank0
 24448  033E  00CB               	movwf	??_picc_select
 24449  033F  0021               	movlb	1	; select bank1
 24450  0340  0865               	movf	picc_select@uidIndex^(0+128),w
 24451  0341  076C               	addwf	picc_select@count^(0+128),w
 24452  0342  3E01               	addlw	1
 24453  0343  0769               	addwf	picc_select@uid^(0+128),w
 24454  0344  0020               	movlb	0	; select bank0
 24455  0345  00CC               	movwf	??_picc_select+1
 24456  0346  084C               	movf	??_picc_select+1,w
 24457  0347  0086               	movwf	6
 24458  0348  3001               	movlw	1	; select bank2/3
 24459  0349  0087               	movwf	7
 24460  034A  084B               	movf	??_picc_select,w
 24461  034B  0081               	movwf	1
 24462  034C  3001               	movlw	1
 24463  034D  00CB               	movwf	??_picc_select
 24464  034E  084B               	movf	??_picc_select,w
 24465  034F  0021               	movlb	1	; select bank1
 24466  0350  07ED               	addwf	picc_select@index^(0+128),f
 24467  0351  3001               	movlw	1
 24468  0352  0020               	movlb	0	; select bank0
 24469  0353  00CB               	movwf	??_picc_select
 24470  0354  084B               	movf	??_picc_select,w
 24471  0355  0021               	movlb	1	; select bank1
 24472  0356  07EC               	addwf	picc_select@count^(0+128),f
 24473  0357  2B34               	goto	l15883
 24474  0358                     l15885:	
 24475                           
 24476                           ;mfrc522_picc.c: 248: }
 24477                           ;mfrc522_picc.c: 249: if (responseLength != 3 || txLastBits != 0) {
 24478  0358  3003               	movlw	3
 24479  0359  0667               	xorwf	picc_select@responseLength^(0+128),w
 24480  035A  1903               	btfsc	3,2
 24481  035B  086A               	movf	picc_select@txLastBits^(0+128),w
 24482  035C  1903               	btfsc	3,2
 24483  035D  2B60               	goto	l15893
 24484                           
 24485                           ;mfrc522_picc.c: 250: return STATUS_ERROR;
 24486  035E  3001               	movlw	1
 24487  035F  0008               	return
 24488  0360                     l15893:	
 24489                           
 24490                           ;mfrc522_picc.c: 251: }
 24491                           ;mfrc522_picc.c: 252: result = mfrc522_hal_calculate_crc(responseBuffer, 1, &buffer[2]);
 24492  0360  0868               	movf	picc_select@responseBuffer^(0+128),w
 24493  0361  0020               	movlb	0	; select bank0
 24494  0362  00A6               	movwf	mfrc522_hal_calculate_crc@data
 24495  0363  3000               	movlw	0
 24496  0364  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 24497  0365  01A8               	clrf	mfrc522_hal_calculate_crc@length
 24498  0366  0AA8               	incf	mfrc522_hal_calculate_crc@length,f
 24499  0367  30DB               	movlw	low (picc_select@buffer+2)
 24500  0368  00A9               	movwf	mfrc522_hal_calculate_crc@result
 24501  0369  3000               	movlw	high (picc_select@buffer+2)
 24502  036A  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 24503  036B  31AD  2533  3180   	fcall	_mfrc522_hal_calculate_crc
 24504  036E  0020               	movlb	0	; select bank0
 24505  036F  00CB               	movwf	??_picc_select
 24506  0370  084B               	movf	??_picc_select,w
 24507  0371  0021               	movlb	1	; select bank1
 24508  0372  00EB               	movwf	picc_select@result^(0+128)
 24509                           
 24510                           ;mfrc522_picc.c: 253: if (result != STATUS_OK) {
 24511  0373  086B               	movf	picc_select@result^(0+128),w
 24512  0374  1903               	btfsc	3,2
 24513  0375  2B78               	goto	l15901
 24514                           
 24515                           ;mfrc522_picc.c: 254: return result;
 24516  0376  086B               	movf	picc_select@result^(0+128),w
 24517  0377  0008               	return
 24518  0378                     l15901:	
 24519                           
 24520                           ;mfrc522_picc.c: 255: }
 24521                           ;mfrc522_picc.c: 256: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuff
      +                          er[2])) {
 24522  0378  0A68               	incf	picc_select@responseBuffer^(0+128),w
 24523  0379  0086               	movwf	6
 24524  037A  0187               	clrf	7
 24525  037B  085B               	movf	(picc_select@buffer^(0+128)+2),w
 24526  037C  0601               	xorwf	1,w
 24527  037D  1D03               	skipz
 24528  037E  2B87               	goto	l15905
 24529  037F  0868               	movf	picc_select@responseBuffer^(0+128),w
 24530  0380  3E02               	addlw	2
 24531  0381  0086               	movwf	6
 24532  0382  0187               	clrf	7
 24533  0383  085C               	movf	(picc_select@buffer^(0+128)+3),w
 24534  0384  0601               	xorwf	1,w
 24535  0385  1903               	skipnz
 24536  0386  2B89               	goto	l15909
 24537  0387                     l15905:	
 24538                           
 24539                           ;mfrc522_picc.c: 257: return STATUS_CRC_WRONG;
 24540  0387  3007               	movlw	7
 24541  0388  0008               	return
 24542  0389                     l15909:	
 24543                           
 24544                           ;mfrc522_picc.c: 258: }
 24545                           ;mfrc522_picc.c: 259: if (responseBuffer[0] & 0x04) {
 24546  0389  0868               	movf	picc_select@responseBuffer^(0+128),w
 24547  038A  0086               	movwf	6
 24548  038B  0187               	clrf	7
 24549  038C  1D01               	btfss	1,2
 24550  038D  2B95               	goto	l2352
 24551                           
 24552                           ;mfrc522_picc.c: 260: cascadeLevel++;
 24553  038E  3001               	movlw	1
 24554  038F  0020               	movlb	0	; select bank0
 24555  0390  00CB               	movwf	??_picc_select
 24556  0391  084B               	movf	??_picc_select,w
 24557  0392  0021               	movlb	1	; select bank1
 24558  0393  07E4               	addwf	picc_select@cascadeLevel^(0+128),f
 24559                           
 24560                           ;mfrc522_picc.c: 261: } else {
 24561  0394  28B5               	goto	l15915
 24562  0395                     l2352:	
 24563                           
 24564                           ;mfrc522_picc.c: 262: uidComplete = 1;
 24565  0395  01D1               	clrf	picc_select@uidComplete^(0+128)
 24566  0396  0AD1               	incf	picc_select@uidComplete^(0+128),f
 24567                           
 24568                           ;mfrc522_picc.c: 264: uid->sak = responseBuffer[0];
 24569  0397  0868               	movf	picc_select@responseBuffer^(0+128),w
 24570  0398  0086               	movwf	6
 24571  0399  0187               	clrf	7
 24572  039A  0801               	movf	1,w
 24573  039B  0020               	movlb	0	; select bank0
 24574  039C  00CB               	movwf	??_picc_select
 24575  039D  0021               	movlb	1	; select bank1
 24576  039E  0869               	movf	picc_select@uid^(0+128),w
 24577  039F  3E0B               	addlw	11
 24578  03A0  0086               	movwf	6
 24579  03A1  3001               	movlw	1	; select bank2/3
 24580  03A2  0087               	movwf	7
 24581  03A3  0020               	movlb	0	; select bank0
 24582  03A4  084B               	movf	??_picc_select,w
 24583  03A5  0081               	movwf	1
 24584  03A6  28B5               	goto	l15915
 24585  03A7                     l15917:	
 24586                           
 24587                           ;mfrc522_picc.c: 266: }
 24588                           ;mfrc522_picc.c: 267: }
 24589                           ;mfrc522_picc.c: 268: uid->size = 3 * cascadeLevel + 1;
 24590  03A7  3003               	movlw	3
 24591  03A8  0020               	movlb	0	; select bank0
 24592  03A9  00CB               	movwf	??_picc_select
 24593  03AA  084B               	movf	??_picc_select,w
 24594  03AB  00A4               	movwf	___bmul@multiplicand
 24595  03AC  0021               	movlb	1	; select bank1
 24596  03AD  0864               	movf	picc_select@cascadeLevel^(0+128),w
 24597  03AE  31BC  2434         	fcall	___bmul
 24598  03B0  3E01               	addlw	1
 24599  03B1  0020               	movlb	0	; select bank0
 24600  03B2  00CC               	movwf	??_picc_select+1
 24601  03B3  0021               	movlb	1	; select bank1
 24602  03B4  0869               	movf	picc_select@uid^(0+128),w
 24603  03B5  0086               	movwf	6
 24604  03B6  3001               	movlw	1	; select bank2/3
 24605  03B7  0087               	movwf	7
 24606  03B8  0020               	movlb	0	; select bank0
 24607  03B9  084C               	movf	??_picc_select+1,w
 24608  03BA  0081               	movwf	1
 24609                           
 24610                           ;mfrc522_picc.c: 269: return STATUS_OK;
 24611  03BB  3000               	movlw	0
 24612  03BC  0008               	return
 24613  03BD                     __end_of_picc_select:	
 24614                           
 24615                           	psect	text75
 24616  3C34                     __ptext75:	
 24617 ;; *************** function ___bmul *****************
 24618 ;; Defined at:
 24619 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
 24620 ;; Parameters:    Size  Location     Type
 24621 ;;  multiplier      1    wreg     unsigned char 
 24622 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 24623 ;; Auto vars:     Size  Location     Type
 24624 ;;  multiplier      1    7[BANK0 ] unsigned char 
 24625 ;;  product         1    6[BANK0 ] unsigned char 
 24626 ;; Return value:  Size  Location     Type
 24627 ;;                  1    wreg      unsigned char 
 24628 ;; Registers used:
 24629 ;;		wreg, status,2, status,0
 24630 ;; Tracked objects:
 24631 ;;		On entry : 0/0
 24632 ;;		On exit  : 0/0
 24633 ;;		Unchanged: 0/0
 24634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24636 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24638 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24639 ;;Total ram usage:        4 bytes
 24640 ;; Hardware stack levels used:    1
 24641 ;; Hardware stack levels required when called:    2
 24642 ;; This function calls:
 24643 ;;		Nothing
 24644 ;; This function is called by:
 24645 ;;		_lcd_set_com_seg
 24646 ;;		_picc_select
 24647 ;; This function uses a non-reentrant model
 24648 ;;
 24649                           
 24650                           
 24651                           ;psect for function ___bmul
 24652  3C34                     ___bmul:	
 24653                           
 24654                           ;incstack = 0
 24655                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 24656                           ;___bmul@multiplier stored from wreg
 24657  3C34  0020               	movlb	0	; select bank0
 24658  3C35  00A7               	movwf	___bmul@multiplier
 24659  3C36  01A6               	clrf	___bmul@product
 24660  3C37                     l12545:	
 24661  3C37  1C27               	btfss	___bmul@multiplier,0
 24662  3C38  2C3D               	goto	l12549
 24663  3C39  0824               	movf	___bmul@multiplicand,w
 24664  3C3A  00A5               	movwf	??___bmul
 24665  3C3B  0825               	movf	??___bmul,w
 24666  3C3C  07A6               	addwf	___bmul@product,f
 24667  3C3D                     l12549:	
 24668  3C3D  1003               	clrc
 24669  3C3E  0DA4               	rlf	___bmul@multiplicand,f
 24670  3C3F  1003               	clrc
 24671  3C40  0CA7               	rrf	___bmul@multiplier,f
 24672  3C41  0827               	movf	___bmul@multiplier,w
 24673  3C42  1D03               	btfss	3,2
 24674  3C43  2C37               	goto	l12545
 24675  3C44  0826               	movf	___bmul@product,w
 24676  3C45  0008               	return
 24677  3C46                     __end_of___bmul:	
 24678                           
 24679                           	psect	text76
 24680  29F3                     __ptext76:	
 24681 ;; *************** function ___awdiv *****************
 24682 ;; Defined at:
 24683 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
 24684 ;; Parameters:    Size  Location     Type
 24685 ;;  divisor         2    3[COMMON] int 
 24686 ;;  dividend        2    5[COMMON] int 
 24687 ;; Auto vars:     Size  Location     Type
 24688 ;;  quotient        2    2[BANK0 ] int 
 24689 ;;  sign            1    1[BANK0 ] unsigned char 
 24690 ;;  counter         1    0[BANK0 ] unsigned char 
 24691 ;; Return value:  Size  Location     Type
 24692 ;;                  2    3[COMMON] int 
 24693 ;; Registers used:
 24694 ;;		wreg, status,2, status,0
 24695 ;; Tracked objects:
 24696 ;;		On entry : 0/0
 24697 ;;		On exit  : 0/0
 24698 ;;		Unchanged: 0/0
 24699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24700 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24701 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24703 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24704 ;;Total ram usage:        9 bytes
 24705 ;; Hardware stack levels used:    1
 24706 ;; Hardware stack levels required when called:    2
 24707 ;; This function calls:
 24708 ;;		Nothing
 24709 ;; This function is called by:
 24710 ;;		_ui_disp_set_calib
 24711 ;;		_ui_key_process_enter
 24712 ;;		_ui_key_process_cancel
 24713 ;;		_ui_key_set_process
 24714 ;;		_lcd_set_com_seg
 24715 ;;		_picc_select
 24716 ;; This function uses a non-reentrant model
 24717 ;;
 24718                           
 24719                           
 24720                           ;psect for function ___awdiv
 24721  29F3                     ___awdiv:	
 24722                           
 24723                           ;incstack = 0
 24724                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 24725  29F3  0020               	movlb	0	; select bank0
 24726  29F4  01A1               	clrf	___awdiv@sign
 24727  29F5  1FF4               	btfss	___awdiv@divisor+1,7
 24728  29F6  29FE               	goto	l12565
 24729  29F7  09F3               	comf	___awdiv@divisor,f
 24730  29F8  09F4               	comf	___awdiv@divisor+1,f
 24731  29F9  0AF3               	incf	___awdiv@divisor,f
 24732  29FA  1903               	skipnz
 24733  29FB  0AF4               	incf	___awdiv@divisor+1,f
 24734  29FC  01A1               	clrf	___awdiv@sign
 24735  29FD  0AA1               	incf	___awdiv@sign,f
 24736  29FE                     l12565:	
 24737  29FE  1FF6               	btfss	___awdiv@dividend+1,7
 24738  29FF  2A09               	goto	l12571
 24739  2A00  09F5               	comf	___awdiv@dividend,f
 24740  2A01  09F6               	comf	___awdiv@dividend+1,f
 24741  2A02  0AF5               	incf	___awdiv@dividend,f
 24742  2A03  1903               	skipnz
 24743  2A04  0AF6               	incf	___awdiv@dividend+1,f
 24744  2A05  3001               	movlw	1
 24745  2A06  00F7               	movwf	??___awdiv
 24746  2A07  0877               	movf	??___awdiv,w
 24747  2A08  06A1               	xorwf	___awdiv@sign,f
 24748  2A09                     l12571:	
 24749  2A09  01A2               	clrf	___awdiv@quotient
 24750  2A0A  01A3               	clrf	___awdiv@quotient+1
 24751  2A0B  0873               	movf	___awdiv@divisor,w
 24752  2A0C  0474               	iorwf	___awdiv@divisor+1,w
 24753  2A0D  1903               	btfsc	3,2
 24754  2A0E  2A38               	goto	l12593
 24755  2A0F  01A0               	clrf	___awdiv@counter
 24756  2A10  0AA0               	incf	___awdiv@counter,f
 24757  2A11                     l12581:	
 24758  2A11  1BF4               	btfsc	___awdiv@divisor+1,7
 24759  2A12  2A1D               	goto	l12583
 24760  2A13  3001               	movlw	1
 24761  2A14                     u10875:	
 24762  2A14  35F3               	lslf	___awdiv@divisor,f
 24763  2A15  0DF4               	rlf	___awdiv@divisor+1,f
 24764  2A16  0B89               	decfsz	9,f
 24765  2A17  2A14               	goto	u10875
 24766  2A18  3001               	movlw	1
 24767  2A19  00F7               	movwf	??___awdiv
 24768  2A1A  0877               	movf	??___awdiv,w
 24769  2A1B  07A0               	addwf	___awdiv@counter,f
 24770  2A1C  2A11               	goto	l12581
 24771  2A1D                     l12583:	
 24772  2A1D  3001               	movlw	1
 24773  2A1E                     u10895:	
 24774  2A1E  35A2               	lslf	___awdiv@quotient,f
 24775  2A1F  0DA3               	rlf	___awdiv@quotient+1,f
 24776  2A20  0B89               	decfsz	9,f
 24777  2A21  2A1E               	goto	u10895
 24778  2A22  0874               	movf	___awdiv@divisor+1,w
 24779  2A23  0276               	subwf	___awdiv@dividend+1,w
 24780  2A24  1D03               	skipz
 24781  2A25  2A28               	goto	u10905
 24782  2A26  0873               	movf	___awdiv@divisor,w
 24783  2A27  0275               	subwf	___awdiv@dividend,w
 24784  2A28                     u10905:	
 24785  2A28  1C03               	skipc
 24786  2A29  2A2F               	goto	l12589
 24787  2A2A  0873               	movf	___awdiv@divisor,w
 24788  2A2B  02F5               	subwf	___awdiv@dividend,f
 24789  2A2C  0874               	movf	___awdiv@divisor+1,w
 24790  2A2D  3BF6               	subwfb	___awdiv@dividend+1,f
 24791  2A2E  1422               	bsf	___awdiv@quotient,0
 24792  2A2F                     l12589:	
 24793  2A2F  3001               	movlw	1
 24794  2A30                     u10915:	
 24795  2A30  36F4               	lsrf	___awdiv@divisor+1,f
 24796  2A31  0CF3               	rrf	___awdiv@divisor,f
 24797  2A32  0B89               	decfsz	9,f
 24798  2A33  2A30               	goto	u10915
 24799  2A34  3001               	movlw	1
 24800  2A35  02A0               	subwf	___awdiv@counter,f
 24801  2A36  1D03               	btfss	3,2
 24802  2A37  2A1D               	goto	l12583
 24803  2A38                     l12593:	
 24804  2A38  0821               	movf	___awdiv@sign,w
 24805  2A39  1903               	btfsc	3,2
 24806  2A3A  2A40               	goto	l12597
 24807  2A3B  09A2               	comf	___awdiv@quotient,f
 24808  2A3C  09A3               	comf	___awdiv@quotient+1,f
 24809  2A3D  0AA2               	incf	___awdiv@quotient,f
 24810  2A3E  1903               	skipnz
 24811  2A3F  0AA3               	incf	___awdiv@quotient+1,f
 24812  2A40                     l12597:	
 24813  2A40  0823               	movf	___awdiv@quotient+1,w
 24814  2A41  00F4               	movwf	?___awdiv+1
 24815  2A42  0822               	movf	___awdiv@quotient,w
 24816  2A43  00F3               	movwf	?___awdiv
 24817  2A44  0008               	return
 24818  2A45                     __end_of___awdiv:	
 24819                           
 24820                           	psect	text77
 24821  3585                     __ptext77:	
 24822 ;; *************** function _picc_halt_a *****************
 24823 ;; Defined at:
 24824 ;;		line 272 in file "src/nfc/pal/mfrc522_picc.c"
 24825 ;; Parameters:    Size  Location     Type
 24826 ;;		None
 24827 ;; Auto vars:     Size  Location     Type
 24828 ;;  buffer          4   45[BANK0 ] unsigned char [4]
 24829 ;;  result          1   49[BANK0 ] enum E5266
 24830 ;; Return value:  Size  Location     Type
 24831 ;;                  1    wreg      enum E5491
 24832 ;; Registers used:
 24833 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24834 ;; Tracked objects:
 24835 ;;		On entry : 0/0
 24836 ;;		On exit  : 0/0
 24837 ;;		Unchanged: 0/0
 24838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24840 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24841 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24842 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 24843 ;;Total ram usage:        8 bytes
 24844 ;; Hardware stack levels used:    1
 24845 ;; Hardware stack levels required when called:    7
 24846 ;; This function calls:
 24847 ;;		_mfrc522_hal_calculate_crc
 24848 ;;		_pcd_comm_with_picc
 24849 ;; This function is called by:
 24850 ;;		_rfid_comm_process
 24851 ;; This function uses a non-reentrant model
 24852 ;;
 24853                           
 24854                           
 24855                           ;psect for function _picc_halt_a
 24856  3585                     _picc_halt_a:	
 24857                           
 24858                           ;mfrc522_picc.c: 273: em_PcdStatusCode result;
 24859                           ;mfrc522_picc.c: 274: uint8_t buffer[4];
 24860                           ;mfrc522_picc.c: 276: buffer[0] = PICC_CMD_HLTA;
 24861                           
 24862                           ;incstack = 0
 24863                           ; Regs used in _picc_halt_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24864  3585  3050               	movlw	80
 24865  3586  0020               	movlb	0	; select bank0
 24866  3587  00CA               	movwf	??_picc_halt_a
 24867  3588  084A               	movf	??_picc_halt_a,w
 24868  3589  00CD               	movwf	picc_halt_a@buffer
 24869                           
 24870                           ;mfrc522_picc.c: 277: buffer[1] = 0;
 24871  358A  01CE               	clrf	picc_halt_a@buffer+1
 24872                           
 24873                           ;mfrc522_picc.c: 278: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 24874  358B  304D               	movlw	low picc_halt_a@buffer
 24875  358C  00A6               	movwf	mfrc522_hal_calculate_crc@data
 24876  358D  3000               	movlw	high picc_halt_a@buffer
 24877  358E  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 24878  358F  3002               	movlw	2
 24879  3590  00CA               	movwf	??_picc_halt_a
 24880  3591  084A               	movf	??_picc_halt_a,w
 24881  3592  00A8               	movwf	mfrc522_hal_calculate_crc@length
 24882  3593  304F               	movlw	low (picc_halt_a@buffer+2)
 24883  3594  00A9               	movwf	mfrc522_hal_calculate_crc@result
 24884  3595  3000               	movlw	high (picc_halt_a@buffer+2)
 24885  3596  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 24886  3597  31AD  2533  31B5   	fcall	_mfrc522_hal_calculate_crc
 24887  359A  0020               	movlb	0	; select bank0
 24888  359B  00CB               	movwf	??_picc_halt_a+1
 24889  359C  084B               	movf	??_picc_halt_a+1,w
 24890  359D  00D1               	movwf	picc_halt_a@result
 24891                           
 24892                           ;mfrc522_picc.c: 279: if (result != STATUS_OK)return result;
 24893  359E  0851               	movf	picc_halt_a@result,w
 24894  359F  1D03               	btfss	3,2
 24895  35A0  0008               	return
 24896                           
 24897                           ;mfrc522_picc.c: 282: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, sizeof (bu
      +                          ffer), (0), (0), (0), 0, 0);
 24898                           
 24899                           ;	Return value of _picc_halt_a is never used
 24900  35A1  3030               	movlw	48
 24901  35A2  00CA               	movwf	??_picc_halt_a
 24902  35A3  084A               	movf	??_picc_halt_a,w
 24903  35A4  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 24904  35A5  304D               	movlw	low picc_halt_a@buffer
 24905  35A6  00B2               	movwf	pcd_comm_with_picc@sbuf
 24906  35A7  3000               	movlw	high picc_halt_a@buffer
 24907  35A8  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 24908  35A9  3004               	movlw	4
 24909  35AA  00CB               	movwf	??_picc_halt_a+1
 24910  35AB  084B               	movf	??_picc_halt_a+1,w
 24911  35AC  00B4               	movwf	pcd_comm_with_picc@slen
 24912  35AD  3000               	movlw	0
 24913  35AE  00B5               	movwf	pcd_comm_with_picc@rbuf
 24914  35AF  3000               	movlw	0
 24915  35B0  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 24916  35B1  01B7               	clrf	pcd_comm_with_picc@rlen
 24917  35B2  01B8               	clrf	pcd_comm_with_picc@validBits
 24918  35B3  01B9               	clrf	pcd_comm_with_picc@rxAlign
 24919  35B4  01BA               	clrf	pcd_comm_with_picc@checkCRC
 24920  35B5  300C               	movlw	12
 24921  35B6  3186  26A4         	fcall	_pcd_comm_with_picc
 24922  35B8  0020               	movlb	0	; select bank0
 24923  35B9  00CC               	movwf	??_picc_halt_a+2
 24924  35BA  084C               	movf	??_picc_halt_a+2,w
 24925  35BB  00D1               	movwf	picc_halt_a@result
 24926                           
 24927                           ;	Return value of _picc_halt_a is never used
 24928                           
 24929                           ;	Return value of _picc_halt_a is never used
 24930  35BC  0008               	return
 24931  35BD                     __end_of_picc_halt_a:	
 24932                           ;mfrc522_picc.c: 285: return result;
 24933                           ;	Return value of _picc_halt_a is never used
 24934                           
 24935                           
 24936                           	psect	text78
 24937  33ED                     __ptext78:	
 24938 ;; *************** function _mfapi_is_new_card_present *****************
 24939 ;; Defined at:
 24940 ;;		line 76 in file "src/nfc/apl/mfrc522_apl.c"
 24941 ;; Parameters:    Size  Location     Type
 24942 ;;		None
 24943 ;; Auto vars:     Size  Location     Type
 24944 ;;  bufferATQA      2   56[BANK0 ] unsigned char [2]
 24945 ;;  bufferSize      1   59[BANK0 ] unsigned char 
 24946 ;;  result          1   58[BANK0 ] enum E5266
 24947 ;;  cmd             1   55[BANK0 ] unsigned char 
 24948 ;; Return value:  Size  Location     Type
 24949 ;;                  1    wreg      unsigned char 
 24950 ;; Registers used:
 24951 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24952 ;; Tracked objects:
 24953 ;;		On entry : 0/0
 24954 ;;		On exit  : 0/0
 24955 ;;		Unchanged: 0/0
 24956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24958 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24959 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24960 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 24961 ;;Total ram usage:        8 bytes
 24962 ;; Hardware stack levels used:    1
 24963 ;; Hardware stack levels required when called:    8
 24964 ;; This function calls:
 24965 ;;		_m_mem_set
 24966 ;;		_picc_req_a_or_wakeup_a
 24967 ;; This function is called by:
 24968 ;;		_rfid_comm_process
 24969 ;; This function uses a non-reentrant model
 24970 ;;
 24971                           
 24972                           
 24973                           ;psect for function _mfapi_is_new_card_present
 24974  33ED                     _mfapi_is_new_card_present:	
 24975                           
 24976                           ;mfrc522_apl.c: 77: uint8_t cmd;
 24977                           ;mfrc522_apl.c: 78: uint8_t bufferATQA[2];
 24978                           ;mfrc522_apl.c: 79: uint8_t bufferSize = sizeof (bufferATQA);
 24979                           
 24980                           ;incstack = 0
 24981                           ; Regs used in _mfapi_is_new_card_present: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24982  33ED  3002               	movlw	2
 24983  33EE  0020               	movlb	0	; select bank0
 24984  33EF  00D4               	movwf	??_mfapi_is_new_card_present
 24985  33F0  0854               	movf	??_mfapi_is_new_card_present,w
 24986  33F1  00DB               	movwf	mfapi_is_new_card_present@bufferSize
 24987                           
 24988                           ;mfrc522_apl.c: 80: em_PcdStatusCode result;
 24989                           ;mfrc522_apl.c: 81: m_mem_set((uint8_t*) (&PiccUid), 0, sizeof (PiccUid));
 24990  33F2  30BC               	movlw	low _PiccUid
 24991  33F3  00F3               	movwf	m_mem_set@buf
 24992  33F4  3001               	movlw	high _PiccUid
 24993  33F5  00F4               	movwf	m_mem_set@buf+1
 24994  33F6  01F5               	clrf	m_mem_set@x
 24995  33F7  300C               	movlw	12
 24996  33F8  00D4               	movwf	??_mfapi_is_new_card_present
 24997  33F9  0854               	movf	??_mfapi_is_new_card_present,w
 24998  33FA  00F6               	movwf	m_mem_set@len
 24999  33FB  31BB  23BC  31B3   	fcall	_m_mem_set
 25000                           
 25001                           ;mfrc522_apl.c: 82: ;
 25002                           ;mfrc522_apl.c: 83: cmd = PICC_CMD_REQA;
 25003  33FE  3026               	movlw	38
 25004  33FF  0020               	movlb	0	; select bank0
 25005  3400  00D4               	movwf	??_mfapi_is_new_card_present
 25006  3401  0854               	movf	??_mfapi_is_new_card_present,w
 25007  3402  00D7               	movwf	mfapi_is_new_card_present@cmd
 25008                           
 25009                           ;mfrc522_apl.c: 84: result = picc_req_a_or_wakeup_a(cmd, bufferATQA, &bufferSize);
 25010  3403  3058               	movlw	(low (mfapi_is_new_card_present@bufferATQA| 0))& (0+255)
 25011  3404  00D4               	movwf	??_mfapi_is_new_card_present
 25012  3405  0854               	movf	??_mfapi_is_new_card_present,w
 25013  3406  00CA               	movwf	picc_req_a_or_wakeup_a@bufferATQA
 25014  3407  305B               	movlw	(low (mfapi_is_new_card_present@bufferSize| 0))& (0+255)
 25015  3408  00D5               	movwf	??_mfapi_is_new_card_present+1
 25016  3409  0855               	movf	??_mfapi_is_new_card_present+1,w
 25017  340A  00CB               	movwf	picc_req_a_or_wakeup_a@bufferSize
 25018  340B  0857               	movf	mfapi_is_new_card_present@cmd,w
 25019  340C  31A9  21A2  31B3   	fcall	_picc_req_a_or_wakeup_a
 25020  340F  0020               	movlb	0	; select bank0
 25021  3410  00D6               	movwf	??_mfapi_is_new_card_present+2
 25022  3411  0856               	movf	??_mfapi_is_new_card_present+2,w
 25023  3412  00DA               	movwf	mfapi_is_new_card_present@result
 25024                           
 25025                           ;mfrc522_apl.c: 85: if (result == STATUS_OK || result == STATUS_COLLISION) {
 25026  3413  085A               	movf	mfapi_is_new_card_present@result,w
 25027  3414  1903               	btfsc	3,2
 25028  3415  2C1A               	goto	l15675
 25029  3416  3002               	movlw	2
 25030  3417  065A               	xorwf	mfapi_is_new_card_present@result,w
 25031  3418  1D03               	btfss	3,2
 25032  3419  2C1C               	goto	l15679
 25033  341A                     l15675:	
 25034                           
 25035                           ;mfrc522_apl.c: 86: return 1;
 25036  341A  3001               	movlw	1
 25037  341B  0008               	return
 25038  341C                     l15679:	
 25039                           
 25040                           ;mfrc522_apl.c: 87: }
 25041                           ;mfrc522_apl.c: 88: return 0;
 25042  341C  3000               	movlw	0
 25043  341D  0008               	return
 25044  341E                     __end_of_mfapi_is_new_card_present:	
 25045                           
 25046                           	psect	text79
 25047  29A2                     __ptext79:	
 25048 ;; *************** function _picc_req_a_or_wakeup_a *****************
 25049 ;; Defined at:
 25050 ;;		line 108 in file "src/nfc/pal/mfrc522_picc.c"
 25051 ;; Parameters:    Size  Location     Type
 25052 ;;  cmd             1    wreg     unsigned char 
 25053 ;;  bufferATQA      1   42[BANK0 ] PTR unsigned char 
 25054 ;;		 -> mfapi_is_new_card_present@bufferATQA(2), 
 25055 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 25056 ;;		 -> mfapi_is_new_card_present@bufferSize(1), 
 25057 ;; Auto vars:     Size  Location     Type
 25058 ;;  cmd             1   48[BANK0 ] unsigned char 
 25059 ;;  validBits       1   51[BANK0 ] unsigned char 
 25060 ;;  status          1   50[BANK0 ] enum E5266
 25061 ;;  __cmd           1   49[BANK0 ] unsigned char 
 25062 ;; Return value:  Size  Location     Type
 25063 ;;                  1    wreg      enum E5266
 25064 ;; Registers used:
 25065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25066 ;; Tracked objects:
 25067 ;;		On entry : 0/0
 25068 ;;		On exit  : 0/0
 25069 ;;		Unchanged: 0/0
 25070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25071 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25072 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25073 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25074 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 25075 ;;Total ram usage:       10 bytes
 25076 ;; Hardware stack levels used:    1
 25077 ;; Hardware stack levels required when called:    7
 25078 ;; This function calls:
 25079 ;;		_mfrc522_bal_clr_bit_reg
 25080 ;;		_pcd_comm_with_picc
 25081 ;; This function is called by:
 25082 ;;		_mfapi_is_new_card_present
 25083 ;; This function uses a non-reentrant model
 25084 ;;
 25085                           
 25086                           
 25087                           ;psect for function _picc_req_a_or_wakeup_a
 25088  29A2                     _picc_req_a_or_wakeup_a:	
 25089                           
 25090                           ;incstack = 0
 25091                           ; Regs used in _picc_req_a_or_wakeup_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25092                           ;picc_req_a_or_wakeup_a@cmd stored from wreg
 25093  29A2  0020               	movlb	0	; select bank0
 25094  29A3  00D0               	movwf	picc_req_a_or_wakeup_a@cmd
 25095                           
 25096                           ;mfrc522_picc.c: 109: uint8_t validBits;
 25097                           ;mfrc522_picc.c: 110: em_PcdStatusCode status;
 25098                           ;mfrc522_picc.c: 111: uint8_t __cmd=cmd;
 25099  29A4  0850               	movf	picc_req_a_or_wakeup_a@cmd,w
 25100  29A5  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25101  29A6  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25102  29A7  00D1               	movwf	picc_req_a_or_wakeup_a@__cmd
 25103                           
 25104                           ;mfrc522_picc.c: 113: if (bufferATQA == (0) || *bufferSize < 2) {
 25105  29A8  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 25106  29A9  1903               	btfsc	3,2
 25107  29AA  29B2               	goto	l14521
 25108  29AB  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25109  29AC  0086               	movwf	6
 25110  29AD  0187               	clrf	7
 25111  29AE  3002               	movlw	2
 25112  29AF  0201               	subwf	1,w
 25113  29B0  1803               	skipnc
 25114  29B1  29B4               	goto	l14525
 25115  29B2                     l14521:	
 25116                           
 25117                           ;mfrc522_picc.c: 114: return STATUS_NO_ROOM;
 25118  29B2  3004               	movlw	4
 25119  29B3  0008               	return
 25120  29B4                     l14525:	
 25121                           
 25122                           ;mfrc522_picc.c: 115: }
 25123                           ;mfrc522_picc.c: 116: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 25124  29B4  3080               	movlw	128
 25125  29B5  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25126  29B6  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25127  29B7  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 25128  29B8  300E               	movlw	14
 25129  29B9  31BC  24FC  31A9   	fcall	_mfrc522_bal_clr_bit_reg
 25130                           
 25131                           ;mfrc522_picc.c: 117: validBits = 7;
 25132  29BC  3007               	movlw	7
 25133  29BD  0020               	movlb	0	; select bank0
 25134  29BE  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25135  29BF  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25136  29C0  00D3               	movwf	picc_req_a_or_wakeup_a@validBits
 25137                           
 25138                           ;mfrc522_picc.c: 120: status=pcd_comm_with_picc(PCD_Transceive,0x30,&__cmd, 1, bufferATQ
      +                          A, bufferSize, &validBits, 0, 0);
 25139  29C1  3030               	movlw	48
 25140  29C2  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25141  29C3  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25142  29C4  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 25143  29C5  3051               	movlw	low picc_req_a_or_wakeup_a@__cmd
 25144  29C6  00B2               	movwf	pcd_comm_with_picc@sbuf
 25145  29C7  3000               	movlw	high picc_req_a_or_wakeup_a@__cmd
 25146  29C8  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 25147  29C9  01B4               	clrf	pcd_comm_with_picc@slen
 25148  29CA  0AB4               	incf	pcd_comm_with_picc@slen,f
 25149  29CB  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 25150  29CC  00B5               	movwf	pcd_comm_with_picc@rbuf
 25151  29CD  3000               	movlw	0
 25152  29CE  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 25153  29CF  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25154  29D0  00CD               	movwf	??_picc_req_a_or_wakeup_a+1
 25155  29D1  084D               	movf	??_picc_req_a_or_wakeup_a+1,w
 25156  29D2  00B7               	movwf	pcd_comm_with_picc@rlen
 25157  29D3  3053               	movlw	(low (picc_req_a_or_wakeup_a@validBits| 0))& (0+255)
 25158  29D4  00CE               	movwf	??_picc_req_a_or_wakeup_a+2
 25159  29D5  084E               	movf	??_picc_req_a_or_wakeup_a+2,w
 25160  29D6  00B8               	movwf	pcd_comm_with_picc@validBits
 25161  29D7  01B9               	clrf	pcd_comm_with_picc@rxAlign
 25162  29D8  01BA               	clrf	pcd_comm_with_picc@checkCRC
 25163  29D9  300C               	movlw	12
 25164  29DA  3186  26A4  31A9   	fcall	_pcd_comm_with_picc
 25165  29DD  0020               	movlb	0	; select bank0
 25166  29DE  00CF               	movwf	??_picc_req_a_or_wakeup_a+3
 25167  29DF  084F               	movf	??_picc_req_a_or_wakeup_a+3,w
 25168  29E0  00D2               	movwf	picc_req_a_or_wakeup_a@status
 25169                           
 25170                           ;mfrc522_picc.c: 121: if (status != STATUS_OK) return status;
 25171  29E1  0852               	movf	picc_req_a_or_wakeup_a@status,w
 25172  29E2  1903               	btfsc	3,2
 25173  29E3  29E6               	goto	l14537
 25174  29E4  0852               	movf	picc_req_a_or_wakeup_a@status,w
 25175  29E5  0008               	return
 25176  29E6                     l14537:	
 25177                           
 25178                           ;mfrc522_picc.c: 122: if (*bufferSize != 2 || validBits != 0) return STATUS_ERROR;
 25179  29E6  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25180  29E7  0086               	movwf	6
 25181  29E8  0187               	clrf	7
 25182  29E9  3002               	movlw	2
 25183  29EA  0601               	xorwf	1,w
 25184  29EB  1903               	btfsc	3,2
 25185  29EC  0853               	movf	picc_req_a_or_wakeup_a@validBits,w
 25186  29ED  1903               	btfsc	3,2
 25187  29EE  29F1               	goto	l14545
 25188  29EF  3001               	movlw	1
 25189  29F0  0008               	return
 25190  29F1                     l14545:	
 25191                           
 25192                           ;mfrc522_picc.c: 123: return STATUS_OK;
 25193  29F1  3000               	movlw	0
 25194  29F2  0008               	return
 25195  29F3                     __end_of_picc_req_a_or_wakeup_a:	
 25196                           
 25197                           	psect	text80
 25198  06A4                     __ptext80:	
 25199 ;; *************** function _pcd_comm_with_picc *****************
 25200 ;; Defined at:
 25201 ;;		line 35 in file "src/nfc/pal/mfrc522_picc.c"
 25202 ;; Parameters:    Size  Location     Type
 25203 ;;  cmd             1    wreg     unsigned char 
 25204 ;;  waitIRQ         1   17[BANK0 ] unsigned char 
 25205 ;;  sbuf            2   18[BANK0 ] PTR unsigned char 
 25206 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 25207 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), 
 25208 ;;		 -> cardUidBlockBuf(18), 
 25209 ;;  slen            1   20[BANK0 ] unsigned char 
 25210 ;;  rbuf            2   21[BANK0 ] PTR unsigned char 
 25211 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 25212 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25213 ;;  rlen            1   23[BANK0 ] PTR unsigned char 
 25214 ;;		 -> pcd_mifare_transceive@cmdBufferSize(1), picc_select@responseLength(1), mfapi_is_new_card_present@bufferSize(1), 
      +rdLen(1), 
 25215 ;;		 -> __t8(1), NULL(0), 
 25216 ;;  validBits       1   24[BANK0 ] PTR unsigned char 
 25217 ;;		 -> pcd_mifare_transceive@validBits(1), picc_select@txLastBits(1), picc_req_a_or_wakeup_a@validBits(1), NULL(0), 
 25218 ;;  rxAlign         1   25[BANK0 ] unsigned char 
 25219 ;;  checkCRC        1   26[BANK0 ] unsigned char 
 25220 ;; Auto vars:     Size  Location     Type
 25221 ;;  cmd             1   33[BANK0 ] unsigned char 
 25222 ;;  controlBuffe    2   34[BANK0 ] unsigned char [2]
 25223 ;;  status          1   37[BANK0 ] enum E5266
 25224 ;;  i               2   38[BANK0 ] unsigned int 
 25225 ;;  tmp8            1   41[BANK0 ] unsigned char 
 25226 ;;  _validBits      1   40[BANK0 ] unsigned char 
 25227 ;;  errorRegValu    1   36[BANK0 ] unsigned char 
 25228 ;;  bitFraming      1   30[BANK0 ] unsigned char 
 25229 ;;  txLastBits      1   29[BANK0 ] unsigned char 
 25230 ;; Return value:  Size  Location     Type
 25231 ;;                  1    wreg      enum E5266
 25232 ;; Registers used:
 25233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25234 ;; Tracked objects:
 25235 ;;		On entry : 0/0
 25236 ;;		On exit  : 0/0
 25237 ;;		Unchanged: 0/0
 25238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25239 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 25240 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 25241 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25242 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0
 25243 ;;Total ram usage:       25 bytes
 25244 ;; Hardware stack levels used:    1
 25245 ;; Hardware stack levels required when called:    6
 25246 ;; This function calls:
 25247 ;;		_mfrc522_bal_read_fifo_len_ex
 25248 ;;		_mfrc522_bal_read_reg
 25249 ;;		_mfrc522_bal_set_bit_reg
 25250 ;;		_mfrc522_bal_write_reg
 25251 ;;		_mfrc522_bal_write_reg_len
 25252 ;;		_mfrc522_hal_calculate_crc
 25253 ;; This function is called by:
 25254 ;;		_picc_req_a_or_wakeup_a
 25255 ;;		_picc_select
 25256 ;;		_picc_halt_a
 25257 ;;		_picc_authenticate
 25258 ;;		_mifare_read
 25259 ;;		_pcd_mifare_transceive
 25260 ;; This function uses a non-reentrant model
 25261 ;;
 25262                           
 25263                           
 25264                           ;psect for function _pcd_comm_with_picc
 25265  06A4                     _pcd_comm_with_picc:	
 25266                           
 25267                           ;incstack = 0
 25268                           ; Regs used in _pcd_comm_with_picc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25269                           ;pcd_comm_with_picc@cmd stored from wreg
 25270  06A4  0020               	movlb	0	; select bank0
 25271  06A5  00C1               	movwf	pcd_comm_with_picc@cmd
 25272                           
 25273                           ;mfrc522_picc.c: 47: uint8_t tmp8, _validBits;
 25274                           ;mfrc522_picc.c: 48: uint16_t i;
 25275                           ;mfrc522_picc.c: 50: uint8_t txLastBits = validBits ? (*validBits) : 0;
 25276  06A6  0838               	movf	pcd_comm_with_picc@validBits,w
 25277  06A7  1D03               	btfss	3,2
 25278  06A8  2EAC               	goto	l13459
 25279  06A9  01BF               	clrf	_pcd_comm_with_picc$3208
 25280  06AA  01C0               	clrf	_pcd_comm_with_picc$3208+1
 25281  06AB  2EB6               	goto	l13461
 25282  06AC                     l13459:	
 25283  06AC  0838               	movf	pcd_comm_with_picc@validBits,w
 25284  06AD  0086               	movwf	6
 25285  06AE  0187               	clrf	7
 25286  06AF  0801               	movf	1,w
 25287  06B0  00BB               	movwf	??_pcd_comm_with_picc
 25288  06B1  01BC               	clrf	??_pcd_comm_with_picc+1
 25289  06B2  083B               	movf	??_pcd_comm_with_picc,w
 25290  06B3  00BF               	movwf	_pcd_comm_with_picc$3208
 25291  06B4  083C               	movf	??_pcd_comm_with_picc+1,w
 25292  06B5  00C0               	movwf	_pcd_comm_with_picc$3208+1
 25293  06B6                     l13461:	
 25294  06B6  083F               	movf	_pcd_comm_with_picc$3208,w
 25295  06B7  00BB               	movwf	??_pcd_comm_with_picc
 25296  06B8  083B               	movf	??_pcd_comm_with_picc,w
 25297  06B9  00BD               	movwf	pcd_comm_with_picc@txLastBits
 25298                           
 25299                           ;mfrc522_picc.c: 51: uint8_t bitFraming = (rxAlign << 4) + txLastBits;
 25300  06BA  0839               	movf	pcd_comm_with_picc@rxAlign,w
 25301  06BB  00BB               	movwf	??_pcd_comm_with_picc
 25302  06BC  3003               	movlw	3
 25303  06BD                     u12065:	
 25304  06BD  35BB               	lslf	??_pcd_comm_with_picc,f
 25305  06BE  3EFF               	addlw	-1
 25306  06BF  1D03               	skipz
 25307  06C0  2EBD               	goto	u12065
 25308  06C1  353B               	lslf	??_pcd_comm_with_picc,w
 25309  06C2  073D               	addwf	pcd_comm_with_picc@txLastBits,w
 25310  06C3  00BC               	movwf	??_pcd_comm_with_picc+1
 25311  06C4  083C               	movf	??_pcd_comm_with_picc+1,w
 25312  06C5  00BE               	movwf	pcd_comm_with_picc@bitFraming
 25313                           
 25314                           ;mfrc522_picc.c: 53: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25315  06C6  01F7               	clrf	mfrc522_bal_write_reg@x
 25316  06C7  3001               	movlw	1
 25317  06C8  31BB  23CC  3186   	fcall	_mfrc522_bal_write_reg
 25318                           
 25319                           ;mfrc522_picc.c: 54: mfrc522_bal_write_reg(ComIrqReg, 0x7F);
 25320  06CB  307F               	movlw	127
 25321  06CC  0020               	movlb	0	; select bank0
 25322  06CD  00BB               	movwf	??_pcd_comm_with_picc
 25323  06CE  083B               	movf	??_pcd_comm_with_picc,w
 25324  06CF  00F7               	movwf	mfrc522_bal_write_reg@x
 25325  06D0  3004               	movlw	4
 25326  06D1  31BB  23CC  3186   	fcall	_mfrc522_bal_write_reg
 25327                           
 25328                           ;mfrc522_picc.c: 55: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 25329  06D4  3080               	movlw	128
 25330  06D5  0020               	movlb	0	; select bank0
 25331  06D6  00BB               	movwf	??_pcd_comm_with_picc
 25332  06D7  083B               	movf	??_pcd_comm_with_picc,w
 25333  06D8  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25334  06D9  300A               	movlw	10
 25335  06DA  31BD  2513  3186   	fcall	_mfrc522_bal_set_bit_reg
 25336                           
 25337                           ;mfrc522_picc.c: 56: mfrc522_bal_write_reg_len(FIFODataReg, sbuf, slen);
 25338  06DD  0020               	movlb	0	; select bank0
 25339  06DE  0833               	movf	pcd_comm_with_picc@sbuf+1,w
 25340  06DF  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 25341  06E0  0832               	movf	pcd_comm_with_picc@sbuf,w
 25342  06E1  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 25343  06E2  0834               	movf	pcd_comm_with_picc@slen,w
 25344  06E3  00BB               	movwf	??_pcd_comm_with_picc
 25345  06E4  083B               	movf	??_pcd_comm_with_picc,w
 25346  06E5  00A2               	movwf	mfrc522_bal_write_reg_len@len
 25347  06E6  3009               	movlw	9
 25348  06E7  31BF  2766  3186   	fcall	_mfrc522_bal_write_reg_len
 25349                           
 25350                           ;mfrc522_picc.c: 57: mfrc522_bal_write_reg(BitFramingReg, bitFraming);
 25351  06EA  0020               	movlb	0	; select bank0
 25352  06EB  083E               	movf	pcd_comm_with_picc@bitFraming,w
 25353  06EC  00BB               	movwf	??_pcd_comm_with_picc
 25354  06ED  083B               	movf	??_pcd_comm_with_picc,w
 25355  06EE  00F7               	movwf	mfrc522_bal_write_reg@x
 25356  06EF  300D               	movlw	13
 25357  06F0  31BB  23CC  3186   	fcall	_mfrc522_bal_write_reg
 25358                           
 25359                           ;mfrc522_picc.c: 58: mfrc522_bal_write_reg(CommandReg, cmd);
 25360  06F3  0020               	movlb	0	; select bank0
 25361  06F4  0841               	movf	pcd_comm_with_picc@cmd,w
 25362  06F5  00BB               	movwf	??_pcd_comm_with_picc
 25363  06F6  083B               	movf	??_pcd_comm_with_picc,w
 25364  06F7  00F7               	movwf	mfrc522_bal_write_reg@x
 25365  06F8  3001               	movlw	1
 25366  06F9  31BB  23CC  3186   	fcall	_mfrc522_bal_write_reg
 25367                           
 25368                           ;mfrc522_picc.c: 59: if (cmd == PCD_Transceive) {
 25369  06FC  300C               	movlw	12
 25370  06FD  0020               	movlb	0	; select bank0
 25371  06FE  0641               	xorwf	pcd_comm_with_picc@cmd,w
 25372  06FF  1D03               	btfss	3,2
 25373  0700  2F09               	goto	l13479
 25374                           
 25375                           ;mfrc522_picc.c: 60: mfrc522_bal_set_bit_reg(BitFramingReg, 0x80);
 25376  0701  3080               	movlw	128
 25377  0702  00BB               	movwf	??_pcd_comm_with_picc
 25378  0703  083B               	movf	??_pcd_comm_with_picc,w
 25379  0704  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25380  0705  300D               	movlw	13
 25381  0706  31BD  2513  3186   	fcall	_mfrc522_bal_set_bit_reg
 25382  0709                     l13479:	
 25383                           
 25384                           ;mfrc522_picc.c: 61: }
 25385                           ;mfrc522_picc.c: 63: i = 2000;
 25386  0709  30D0               	movlw	208
 25387  070A  0020               	movlb	0	; select bank0
 25388  070B  00C6               	movwf	pcd_comm_with_picc@i
 25389  070C  3007               	movlw	7
 25390  070D  00C7               	movwf	pcd_comm_with_picc@i+1
 25391  070E                     l13499:	
 25392                           ;mfrc522_picc.c: 64: while (i) {
 25393                           
 25394  070E  0846               	movf	pcd_comm_with_picc@i,w
 25395  070F  0447               	iorwf	pcd_comm_with_picc@i+1,w
 25396  0710  1903               	btfsc	3,2
 25397  0711  2F2C               	goto	l13501
 25398                           
 25399                           ;mfrc522_picc.c: 65: tmp8 = mfrc522_bal_read_reg(ComIrqReg);
 25400  0712  3004               	movlw	4
 25401  0713  31BD  258A  3186   	fcall	_mfrc522_bal_read_reg
 25402  0716  0020               	movlb	0	; select bank0
 25403  0717  00BB               	movwf	??_pcd_comm_with_picc
 25404  0718  083B               	movf	??_pcd_comm_with_picc,w
 25405  0719  00C9               	movwf	pcd_comm_with_picc@tmp8
 25406                           
 25407                           ;mfrc522_picc.c: 66: if (tmp8 & waitIRQ) break;
 25408  071A  0849               	movf	pcd_comm_with_picc@tmp8,w
 25409  071B  0531               	andwf	pcd_comm_with_picc@waitIRQ,w
 25410  071C  1D03               	btfss	3,2
 25411  071D  2F2C               	goto	l13501
 25412                           
 25413                           ;mfrc522_picc.c: 67: if (tmp8 & 0x01) return STATUS_TIMEOUT;
 25414  071E  1C49               	btfss	pcd_comm_with_picc@tmp8,0
 25415  071F  2F22               	goto	l13491
 25416  0720  3003               	movlw	3
 25417  0721  0008               	return
 25418  0722                     l13491:	
 25419                           
 25420                           ;mfrc522_picc.c: 68: i--;
 25421  0722  3001               	movlw	1
 25422  0723  02C6               	subwf	pcd_comm_with_picc@i,f
 25423  0724  3000               	movlw	0
 25424  0725  3BC7               	subwfb	pcd_comm_with_picc@i+1,f
 25425                           
 25426                           ;mfrc522_picc.c: 69: if(i==0)return STATUS_TIMEOUT;
 25427  0726  0846               	movf	pcd_comm_with_picc@i,w
 25428  0727  0447               	iorwf	pcd_comm_with_picc@i+1,w
 25429  0728  1D03               	btfss	3,2
 25430  0729  2F0E               	goto	l13499
 25431  072A  3003               	movlw	3
 25432  072B  0008               	return
 25433  072C                     l13501:	
 25434                           
 25435                           ;mfrc522_picc.c: 70: }
 25436                           ;mfrc522_picc.c: 71: uint8_t errorRegValue = mfrc522_bal_read_reg(ErrorReg);
 25437  072C  3006               	movlw	6
 25438  072D  31BD  258A  3186   	fcall	_mfrc522_bal_read_reg
 25439  0730  0020               	movlb	0	; select bank0
 25440  0731  00BB               	movwf	??_pcd_comm_with_picc
 25441  0732  083B               	movf	??_pcd_comm_with_picc,w
 25442  0733  00C4               	movwf	pcd_comm_with_picc@errorRegValue
 25443                           
 25444                           ;mfrc522_picc.c: 72: if (errorRegValue & 0x13)return STATUS_ERROR;
 25445  0734  0844               	movf	pcd_comm_with_picc@errorRegValue,w
 25446  0735  3913               	andlw	19
 25447  0736  1903               	btfsc	3,2
 25448  0737  2F3A               	goto	l13509
 25449  0738  3001               	movlw	1
 25450  0739  0008               	return
 25451  073A                     l13509:	
 25452                           
 25453                           ;mfrc522_picc.c: 73: if ((rbuf != (0))&& (rlen != (0))) {
 25454  073A  0835               	movf	pcd_comm_with_picc@rbuf,w
 25455  073B  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 25456  073C  1903               	btfsc	3,2
 25457  073D  2F7C               	goto	l13531
 25458  073E  0837               	movf	pcd_comm_with_picc@rlen,w
 25459  073F  1903               	btfsc	3,2
 25460  0740  2F7C               	goto	l13531
 25461                           
 25462                           ;mfrc522_picc.c: 74: tmp8 = mfrc522_bal_read_reg(FIFOLevelReg);
 25463  0741  300A               	movlw	10
 25464  0742  31BD  258A  3186   	fcall	_mfrc522_bal_read_reg
 25465  0745  0020               	movlb	0	; select bank0
 25466  0746  00BB               	movwf	??_pcd_comm_with_picc
 25467  0747  083B               	movf	??_pcd_comm_with_picc,w
 25468  0748  00C9               	movwf	pcd_comm_with_picc@tmp8
 25469                           
 25470                           ;mfrc522_picc.c: 75: if (tmp8 > *rlen) return STATUS_NO_ROOM;
 25471  0749  0837               	movf	pcd_comm_with_picc@rlen,w
 25472  074A  0086               	movwf	6
 25473  074B  0187               	clrf	7
 25474  074C  0849               	movf	pcd_comm_with_picc@tmp8,w
 25475  074D  0201               	subwf	1,w
 25476  074E  1803               	skipnc
 25477  074F  2F52               	goto	l13521
 25478  0750  3004               	movlw	4
 25479  0751  0008               	return
 25480  0752                     l13521:	
 25481                           
 25482                           ;mfrc522_picc.c: 76: *rlen = tmp8;
 25483  0752  0849               	movf	pcd_comm_with_picc@tmp8,w
 25484  0753  00BB               	movwf	??_pcd_comm_with_picc
 25485  0754  0837               	movf	pcd_comm_with_picc@rlen,w
 25486  0755  0086               	movwf	6
 25487  0756  0187               	clrf	7
 25488  0757  083B               	movf	??_pcd_comm_with_picc,w
 25489  0758  0081               	movwf	1
 25490                           
 25491                           ;mfrc522_picc.c: 77: mfrc522_bal_read_fifo_len_ex(FIFODataReg, rbuf, tmp8, rxAlign);
 25492  0759  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 25493  075A  00A1               	movwf	mfrc522_bal_read_fifo_len_ex@buf+1
 25494  075B  0835               	movf	pcd_comm_with_picc@rbuf,w
 25495  075C  00A0               	movwf	mfrc522_bal_read_fifo_len_ex@buf
 25496  075D  0849               	movf	pcd_comm_with_picc@tmp8,w
 25497  075E  00BB               	movwf	??_pcd_comm_with_picc
 25498  075F  083B               	movf	??_pcd_comm_with_picc,w
 25499  0760  00A2               	movwf	mfrc522_bal_read_fifo_len_ex@len
 25500  0761  0839               	movf	pcd_comm_with_picc@rxAlign,w
 25501  0762  00BC               	movwf	??_pcd_comm_with_picc+1
 25502  0763  083C               	movf	??_pcd_comm_with_picc+1,w
 25503  0764  00A3               	movwf	mfrc522_bal_read_fifo_len_ex@rx_align
 25504  0765  3009               	movlw	9
 25505  0766  31B6  26F2  3186   	fcall	_mfrc522_bal_read_fifo_len_ex
 25506                           
 25507                           ;mfrc522_picc.c: 78: _validBits = mfrc522_bal_read_reg(ControlReg) & 0x07;
 25508  0769  300C               	movlw	12
 25509  076A  31BD  258A  3186   	fcall	_mfrc522_bal_read_reg
 25510  076D  3907               	andlw	7
 25511  076E  0020               	movlb	0	; select bank0
 25512  076F  00BB               	movwf	??_pcd_comm_with_picc
 25513  0770  083B               	movf	??_pcd_comm_with_picc,w
 25514  0771  00C8               	movwf	pcd_comm_with_picc@_validBits
 25515                           
 25516                           ;mfrc522_picc.c: 80: if (validBits != (0)) {
 25517  0772  0838               	movf	pcd_comm_with_picc@validBits,w
 25518  0773  1903               	btfsc	3,2
 25519  0774  2F7C               	goto	l13531
 25520                           
 25521                           ;mfrc522_picc.c: 81: *validBits = _validBits;
 25522  0775  0848               	movf	pcd_comm_with_picc@_validBits,w
 25523  0776  00BB               	movwf	??_pcd_comm_with_picc
 25524  0777  0838               	movf	pcd_comm_with_picc@validBits,w
 25525  0778  0086               	movwf	6
 25526  0779  0187               	clrf	7
 25527  077A  083B               	movf	??_pcd_comm_with_picc,w
 25528  077B  0081               	movwf	1
 25529  077C                     l13531:	
 25530                           
 25531                           ;mfrc522_picc.c: 82: }
 25532                           ;mfrc522_picc.c: 83: }
 25533                           ;mfrc522_picc.c: 84: if (errorRegValue & 0x08) return STATUS_COLLISION;
 25534  077C  1DC4               	btfss	pcd_comm_with_picc@errorRegValue,3
 25535  077D  2F80               	goto	l13537
 25536  077E  3002               	movlw	2
 25537  077F  0008               	return
 25538  0780                     l13537:	
 25539                           
 25540                           ;mfrc522_picc.c: 85: if ((rbuf != (0)) && (rlen != (0)) && checkCRC) {
 25541  0780  0835               	movf	pcd_comm_with_picc@rbuf,w
 25542  0781  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 25543  0782  1903               	btfsc	3,2
 25544  0783  2FE8               	goto	l13575
 25545  0784  0837               	movf	pcd_comm_with_picc@rlen,w
 25546  0785  1903               	btfsc	3,2
 25547  0786  2FE8               	goto	l13575
 25548  0787  083A               	movf	pcd_comm_with_picc@checkCRC,w
 25549  0788  1903               	btfsc	3,2
 25550  0789  2FE8               	goto	l13575
 25551                           
 25552                           ;mfrc522_picc.c: 86: if (*rlen == 1 && _validBits == 4) return STATUS_MIFARE_NACK;
 25553  078A  0837               	movf	pcd_comm_with_picc@rlen,w
 25554  078B  0086               	movwf	6
 25555  078C  0187               	clrf	7
 25556  078D  0301               	decf	1,w
 25557  078E  1D03               	btfss	3,2
 25558  078F  2F96               	goto	l13551
 25559  0790  3004               	movlw	4
 25560  0791  0648               	xorwf	pcd_comm_with_picc@_validBits,w
 25561  0792  1D03               	btfss	3,2
 25562  0793  2F96               	goto	l13551
 25563  0794  30FF               	movlw	255
 25564  0795  0008               	return
 25565  0796                     l13551:	
 25566                           
 25567                           ;mfrc522_picc.c: 87: if (*rlen < 2 || _validBits != 0) return STATUS_CRC_WRONG;
 25568  0796  0837               	movf	pcd_comm_with_picc@rlen,w
 25569  0797  0086               	movwf	6
 25570  0798  0187               	clrf	7
 25571  0799  3002               	movlw	2
 25572  079A  0201               	subwf	1,w
 25573  079B  1C03               	skipc
 25574  079C  2FA0               	goto	l13555
 25575  079D  0848               	movf	pcd_comm_with_picc@_validBits,w
 25576  079E  1903               	btfsc	3,2
 25577  079F  2FA2               	goto	l13559
 25578  07A0                     l13555:	
 25579  07A0  3007               	movlw	7
 25580  07A1  0008               	return
 25581  07A2                     l13559:	
 25582                           
 25583                           ;mfrc522_picc.c: 88: uint8_t controlBuffer[2];
 25584                           ;mfrc522_picc.c: 89: em_PcdStatusCode status = mfrc522_hal_calculate_crc(rbuf, *rlen - 2
      +                          , controlBuffer);
 25585  07A2  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 25586  07A3  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 25587  07A4  0835               	movf	pcd_comm_with_picc@rbuf,w
 25588  07A5  00A6               	movwf	mfrc522_hal_calculate_crc@data
 25589  07A6  0837               	movf	pcd_comm_with_picc@rlen,w
 25590  07A7  0086               	movwf	6
 25591  07A8  0187               	clrf	7
 25592  07A9  0801               	movf	1,w
 25593  07AA  3EFE               	addlw	254
 25594  07AB  00BB               	movwf	??_pcd_comm_with_picc
 25595  07AC  083B               	movf	??_pcd_comm_with_picc,w
 25596  07AD  00A8               	movwf	mfrc522_hal_calculate_crc@length
 25597  07AE  3042               	movlw	low pcd_comm_with_picc@controlBuffer
 25598  07AF  00A9               	movwf	mfrc522_hal_calculate_crc@result
 25599  07B0  3000               	movlw	high pcd_comm_with_picc@controlBuffer
 25600  07B1  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 25601  07B2  31AD  2533  3186   	fcall	_mfrc522_hal_calculate_crc
 25602  07B5  0020               	movlb	0	; select bank0
 25603  07B6  00BC               	movwf	??_pcd_comm_with_picc+1
 25604  07B7  083C               	movf	??_pcd_comm_with_picc+1,w
 25605  07B8  00C5               	movwf	pcd_comm_with_picc@status
 25606                           
 25607                           ;mfrc522_picc.c: 90: if (status != STATUS_OK) return status;
 25608  07B9  0845               	movf	pcd_comm_with_picc@status,w
 25609  07BA  1903               	btfsc	3,2
 25610  07BB  2FBE               	goto	l13567
 25611  07BC  0845               	movf	pcd_comm_with_picc@status,w
 25612  07BD  0008               	return
 25613  07BE                     l13567:	
 25614                           
 25615                           ;mfrc522_picc.c: 92: if ((rbuf[*rlen - 2] != controlBuffer[0]) || (rbuf[*rlen - 1] != co
      +                          ntrolBuffer[1])) {
 25616  07BE  0837               	movf	pcd_comm_with_picc@rlen,w
 25617  07BF  0086               	movwf	6
 25618  07C0  0187               	clrf	7
 25619  07C1  0801               	movf	1,w
 25620  07C2  3EFE               	addlw	254
 25621  07C3  00BB               	movwf	??_pcd_comm_with_picc
 25622  07C4  30FF               	movlw	255
 25623  07C5  1803               	skipnc
 25624  07C6  3000               	movlw	0
 25625  07C7  00BC               	movwf	??_pcd_comm_with_picc+1
 25626  07C8  083B               	movf	??_pcd_comm_with_picc,w
 25627  07C9  0735               	addwf	pcd_comm_with_picc@rbuf,w
 25628  07CA  0086               	movwf	6
 25629  07CB  083C               	movf	??_pcd_comm_with_picc+1,w
 25630  07CC  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 25631  07CD  0087               	movwf	7
 25632  07CE  0801               	movf	1,w
 25633  07CF  0642               	xorwf	pcd_comm_with_picc@controlBuffer,w
 25634  07D0  1D03               	skipz
 25635  07D1  2FE6               	goto	l13571
 25636  07D2  0837               	movf	pcd_comm_with_picc@rlen,w
 25637  07D3  0086               	movwf	6
 25638  07D4  0187               	clrf	7
 25639  07D5  0801               	movf	1,w
 25640  07D6  3EFF               	addlw	255
 25641  07D7  00BB               	movwf	??_pcd_comm_with_picc
 25642  07D8  30FF               	movlw	255
 25643  07D9  1803               	skipnc
 25644  07DA  3000               	movlw	0
 25645  07DB  00BC               	movwf	??_pcd_comm_with_picc+1
 25646  07DC  083B               	movf	??_pcd_comm_with_picc,w
 25647  07DD  0735               	addwf	pcd_comm_with_picc@rbuf,w
 25648  07DE  0086               	movwf	6
 25649  07DF  083C               	movf	??_pcd_comm_with_picc+1,w
 25650  07E0  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 25651  07E1  0087               	movwf	7
 25652  07E2  0801               	movf	1,w
 25653  07E3  0643               	xorwf	pcd_comm_with_picc@controlBuffer+1,w
 25654  07E4  1903               	skipnz
 25655  07E5  2FE8               	goto	l13575
 25656  07E6                     l13571:	
 25657                           
 25658                           ;mfrc522_picc.c: 93: return STATUS_CRC_WRONG;
 25659  07E6  3007               	movlw	7
 25660  07E7  0008               	return
 25661  07E8                     l13575:	
 25662                           
 25663                           ;mfrc522_picc.c: 94: }
 25664                           ;mfrc522_picc.c: 95: }
 25665                           ;mfrc522_picc.c: 96: return STATUS_OK;
 25666  07E8  3000               	movlw	0
 25667  07E9  0008               	return
 25668  07EA                     __end_of_pcd_comm_with_picc:	
 25669                           
 25670                           	psect	text81
 25671  2D33                     __ptext81:	
 25672 ;; *************** function _mfrc522_hal_calculate_crc *****************
 25673 ;; Defined at:
 25674 ;;		line 68 in file "src/nfc/hal/mfrc522_hal.c"
 25675 ;; Parameters:    Size  Location     Type
 25676 ;;  data            2    6[BANK0 ] PTR unsigned char 
 25677 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), mfapi_is_new_card_present@buf
      +ferATQA(2), 
 25678 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 25679 ;;		 -> NULL(0), 
 25680 ;;  length          1    8[BANK0 ] unsigned char 
 25681 ;;  result          2    9[BANK0 ] PTR unsigned char 
 25682 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), pcd_comm_with_picc@controlBuf
      +fer(2), 
 25683 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 25684 ;; Auto vars:     Size  Location     Type
 25685 ;;  i               2   15[BANK0 ] unsigned int 
 25686 ;;  t8              1   14[BANK0 ] unsigned char 
 25687 ;; Return value:  Size  Location     Type
 25688 ;;                  1    wreg      enum E5266
 25689 ;; Registers used:
 25690 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25691 ;; Tracked objects:
 25692 ;;		On entry : 0/0
 25693 ;;		On exit  : 0/0
 25694 ;;		Unchanged: 0/0
 25695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25696 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25697 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25698 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25699 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 25700 ;;Total ram usage:       11 bytes
 25701 ;; Hardware stack levels used:    1
 25702 ;; Hardware stack levels required when called:    5
 25703 ;; This function calls:
 25704 ;;		_mfrc522_bal_read_reg
 25705 ;;		_mfrc522_bal_set_bit_reg
 25706 ;;		_mfrc522_bal_write_reg
 25707 ;;		_mfrc522_bal_write_reg_len
 25708 ;; This function is called by:
 25709 ;;		_pcd_comm_with_picc
 25710 ;;		_picc_select
 25711 ;;		_picc_halt_a
 25712 ;;		_mifare_read
 25713 ;;		_pcd_mifare_transceive
 25714 ;; This function uses a non-reentrant model
 25715 ;;
 25716                           
 25717                           
 25718                           ;psect for function _mfrc522_hal_calculate_crc
 25719  2D33                     _mfrc522_hal_calculate_crc:	
 25720                           
 25721                           ;mfrc522_hal.c: 70: uint16_t i = 1847;
 25722                           
 25723                           ;incstack = 0
 25724                           ; Regs used in _mfrc522_hal_calculate_crc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 25725  2D33  3037               	movlw	55
 25726  2D34  0020               	movlb	0	; select bank0
 25727  2D35  00AF               	movwf	mfrc522_hal_calculate_crc@i
 25728  2D36  3007               	movlw	7
 25729  2D37  00B0               	movwf	mfrc522_hal_calculate_crc@i+1
 25730                           
 25731                           ;mfrc522_hal.c: 71: uint8_t t8;
 25732                           ;mfrc522_hal.c: 72: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25733  2D38  01F7               	clrf	mfrc522_bal_write_reg@x
 25734  2D39  3001               	movlw	1
 25735  2D3A  31BB  23CC  31AD   	fcall	_mfrc522_bal_write_reg
 25736                           
 25737                           ;mfrc522_hal.c: 73: mfrc522_bal_write_reg(DivIrqReg, 0x04);
 25738  2D3D  3004               	movlw	4
 25739  2D3E  0020               	movlb	0	; select bank0
 25740  2D3F  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25741  2D40  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25742  2D41  00F7               	movwf	mfrc522_bal_write_reg@x
 25743  2D42  3005               	movlw	5
 25744  2D43  31BB  23CC  31AD   	fcall	_mfrc522_bal_write_reg
 25745                           
 25746                           ;mfrc522_hal.c: 74: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 25747  2D46  3080               	movlw	128
 25748  2D47  0020               	movlb	0	; select bank0
 25749  2D48  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25750  2D49  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25751  2D4A  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25752  2D4B  300A               	movlw	10
 25753  2D4C  31BD  2513  31AD   	fcall	_mfrc522_bal_set_bit_reg
 25754                           
 25755                           ;mfrc522_hal.c: 75: mfrc522_bal_write_reg_len(FIFODataReg,data,length);
 25756  2D4F  0020               	movlb	0	; select bank0
 25757  2D50  0827               	movf	mfrc522_hal_calculate_crc@data+1,w
 25758  2D51  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 25759  2D52  0826               	movf	mfrc522_hal_calculate_crc@data,w
 25760  2D53  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 25761  2D54  0828               	movf	mfrc522_hal_calculate_crc@length,w
 25762  2D55  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25763  2D56  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25764  2D57  00A2               	movwf	mfrc522_bal_write_reg_len@len
 25765  2D58  3009               	movlw	9
 25766  2D59  31BF  2766  31AD   	fcall	_mfrc522_bal_write_reg_len
 25767                           
 25768                           ;mfrc522_hal.c: 76: mfrc522_bal_write_reg(CommandReg, PCD_CalcCRC);
 25769  2D5C  3003               	movlw	3
 25770  2D5D  0020               	movlb	0	; select bank0
 25771  2D5E  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25772  2D5F  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25773  2D60  00F7               	movwf	mfrc522_bal_write_reg@x
 25774  2D61  3001               	movlw	1
 25775  2D62  31BB  23CC  31AD   	fcall	_mfrc522_bal_write_reg
 25776  2D65                     l13109:	
 25777                           ;mfrc522_hal.c: 77: while(i)
 25778                           
 25779  2D65  0020               	movlb	0	; select bank0
 25780  2D66  082F               	movf	mfrc522_hal_calculate_crc@i,w
 25781  2D67  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 25782  2D68  1903               	btfsc	3,2
 25783  2D69  2D79               	goto	l13111
 25784                           
 25785                           ;mfrc522_hal.c: 78: {
 25786                           ;mfrc522_hal.c: 79: i--;
 25787  2D6A  3001               	movlw	1
 25788  2D6B  0020               	movlb	0	; select bank0
 25789  2D6C  02AF               	subwf	mfrc522_hal_calculate_crc@i,f
 25790  2D6D  3000               	movlw	0
 25791  2D6E  3BB0               	subwfb	mfrc522_hal_calculate_crc@i+1,f
 25792                           
 25793                           ;mfrc522_hal.c: 80: t8 = mfrc522_bal_read_reg(DivIrqReg);
 25794  2D6F  3005               	movlw	5
 25795  2D70  31BD  258A  31AD   	fcall	_mfrc522_bal_read_reg
 25796  2D73  0020               	movlb	0	; select bank0
 25797  2D74  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25798  2D75  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25799  2D76  00AE               	movwf	mfrc522_hal_calculate_crc@t8
 25800                           
 25801                           ;mfrc522_hal.c: 81: if (t8 & 0x04)break;
 25802  2D77  1D2E               	btfss	mfrc522_hal_calculate_crc@t8,2
 25803  2D78  2D65               	goto	l13109
 25804  2D79                     l13111:	
 25805                           
 25806                           ;mfrc522_hal.c: 82: }
 25807                           ;mfrc522_hal.c: 83: if(i==0)return STATUS_TIMEOUT;
 25808  2D79  082F               	movf	mfrc522_hal_calculate_crc@i,w
 25809  2D7A  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 25810  2D7B  1D03               	btfss	3,2
 25811  2D7C  2D7F               	goto	l13117
 25812  2D7D  3003               	movlw	3
 25813  2D7E  0008               	return
 25814  2D7F                     l13117:	
 25815                           
 25816                           ;mfrc522_hal.c: 84: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25817  2D7F  01F7               	clrf	mfrc522_bal_write_reg@x
 25818  2D80  3001               	movlw	1
 25819  2D81  31BB  23CC  31AD   	fcall	_mfrc522_bal_write_reg
 25820                           
 25821                           ;mfrc522_hal.c: 85: result[0] = mfrc522_bal_read_reg(CRCResultRegL);
 25822  2D84  3022               	movlw	34
 25823  2D85  31BD  258A  31AD   	fcall	_mfrc522_bal_read_reg
 25824  2D88  0020               	movlb	0	; select bank0
 25825  2D89  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25826  2D8A  0829               	movf	mfrc522_hal_calculate_crc@result,w
 25827  2D8B  0086               	movwf	6
 25828  2D8C  082A               	movf	mfrc522_hal_calculate_crc@result+1,w
 25829  2D8D  0087               	movwf	7
 25830  2D8E  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25831  2D8F  0081               	movwf	1
 25832                           
 25833                           ;mfrc522_hal.c: 86: result[1] = mfrc522_bal_read_reg(CRCResultRegH);
 25834  2D90  3021               	movlw	33
 25835  2D91  31BD  258A         	fcall	_mfrc522_bal_read_reg
 25836  2D93  0020               	movlb	0	; select bank0
 25837  2D94  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25838  2D95  0829               	movf	mfrc522_hal_calculate_crc@result,w
 25839  2D96  3E01               	addlw	1
 25840  2D97  00AC               	movwf	??_mfrc522_hal_calculate_crc+1
 25841  2D98  3000               	movlw	0
 25842  2D99  3D2A               	addwfc	mfrc522_hal_calculate_crc@result+1,w
 25843  2D9A  00AD               	movwf	??_mfrc522_hal_calculate_crc+2
 25844  2D9B  082C               	movf	??_mfrc522_hal_calculate_crc+1,w
 25845  2D9C  0086               	movwf	6
 25846  2D9D  082D               	movf	??_mfrc522_hal_calculate_crc+2,w
 25847  2D9E  0087               	movwf	7
 25848  2D9F  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25849  2DA0  0081               	movwf	1
 25850                           
 25851                           ;mfrc522_hal.c: 87: return STATUS_OK;
 25852  2DA1  3000               	movlw	0
 25853  2DA2  0008               	return
 25854  2DA3                     __end_of_mfrc522_hal_calculate_crc:	
 25855                           
 25856                           	psect	text82
 25857  3F66                     __ptext82:	
 25858 ;; *************** function _mfrc522_bal_write_reg_len *****************
 25859 ;; Defined at:
 25860 ;;		line 59 in file "src/nfc/bal/mfrc522_bal.c"
 25861 ;; Parameters:    Size  Location     Type
 25862 ;;  reg             1    wreg     unsigned char 
 25863 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25864 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 25865 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(18), cardIncBuf(18), 
 25866 ;;		 -> cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25867 ;;  len             1    2[BANK0 ] unsigned char 
 25868 ;; Auto vars:     Size  Location     Type
 25869 ;;  reg             1    3[BANK0 ] unsigned char 
 25870 ;;  i               1    4[BANK0 ] unsigned char 
 25871 ;; Return value:  Size  Location     Type
 25872 ;;                  1    wreg      void 
 25873 ;; Registers used:
 25874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25875 ;; Tracked objects:
 25876 ;;		On entry : 0/0
 25877 ;;		On exit  : 0/0
 25878 ;;		Unchanged: 0/0
 25879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25880 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25881 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25883 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25884 ;;Total ram usage:        6 bytes
 25885 ;; Hardware stack levels used:    1
 25886 ;; Hardware stack levels required when called:    3
 25887 ;; This function calls:
 25888 ;;		_mfrc522_bal_write_read_via_spi
 25889 ;; This function is called by:
 25890 ;;		_mfrc522_hal_calculate_crc
 25891 ;;		_pcd_comm_with_picc
 25892 ;; This function uses a non-reentrant model
 25893 ;;
 25894                           
 25895                           
 25896                           ;psect for function _mfrc522_bal_write_reg_len
 25897  3F66                     _mfrc522_bal_write_reg_len:	
 25898                           
 25899                           ;incstack = 0
 25900                           ; Regs used in _mfrc522_bal_write_reg_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 25901                           ;mfrc522_bal_write_reg_len@reg stored from wreg
 25902  3F66  0020               	movlb	0	; select bank0
 25903  3F67  00A3               	movwf	mfrc522_bal_write_reg_len@reg
 25904                           
 25905                           ;mfrc522_bal.c: 61: uint8_t i;
 25906                           ;mfrc522_bal.c: 62: do { LATCbits.LATC2 = 0; } while(0);;
 25907  3F68  0022               	movlb	2	; select bank2
 25908  3F69  110E               	bcf	14,2	;volatile
 25909                           
 25910                           ;mfrc522_bal.c: 63: do { LATCbits.LATC3 = 0; } while(0);;
 25911  3F6A  118E               	bcf	14,3	;volatile
 25912                           
 25913                           ;mfrc522_bal.c: 64: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 25914  3F6B  0020               	movlb	0	; select bank0
 25915  3F6C  3523               	lslf	mfrc522_bal_write_reg_len@reg,w
 25916  3F6D  397E               	andlw	126
 25917  3F6E  3188  2000  31BF   	fcall	_mfrc522_bal_write_read_via_spi
 25918                           
 25919                           ;mfrc522_bal.c: 65: for(i=0;i<len;i++)
 25920  3F71  0020               	movlb	0	; select bank0
 25921  3F72  01A4               	clrf	mfrc522_bal_write_reg_len@i
 25922  3F73                     l12865:	
 25923  3F73  0822               	movf	mfrc522_bal_write_reg_len@len,w
 25924  3F74  0224               	subwf	mfrc522_bal_write_reg_len@i,w
 25925  3F75  1803               	btfsc	3,0
 25926  3F76  2F89               	goto	l2126
 25927                           
 25928                           ;mfrc522_bal.c: 66: {
 25929                           ;mfrc522_bal.c: 67: mfrc522_bal_write_read_via_spi(*buf++);
 25930  3F77  0820               	movf	mfrc522_bal_write_reg_len@buf,w
 25931  3F78  0086               	movwf	6
 25932  3F79  0821               	movf	mfrc522_bal_write_reg_len@buf+1,w
 25933  3F7A  0087               	movwf	7
 25934  3F7B  0801               	movf	1,w
 25935  3F7C  3188  2000  31BF   	fcall	_mfrc522_bal_write_read_via_spi
 25936  3F7F  3001               	movlw	1
 25937  3F80  0020               	movlb	0	; select bank0
 25938  3F81  07A0               	addwf	mfrc522_bal_write_reg_len@buf,f
 25939  3F82  3000               	movlw	0
 25940  3F83  3DA1               	addwfc	mfrc522_bal_write_reg_len@buf+1,f
 25941  3F84  3001               	movlw	1
 25942  3F85  00F7               	movwf	??_mfrc522_bal_write_reg_len
 25943  3F86  0877               	movf	??_mfrc522_bal_write_reg_len,w
 25944  3F87  07A4               	addwf	mfrc522_bal_write_reg_len@i,f
 25945  3F88  2F73               	goto	l12865
 25946  3F89                     l2126:	
 25947                           ;mfrc522_bal.c: 68: }
 25948                           ;mfrc522_bal.c: 69: do { LATCbits.LATC2 = 1; } while(0);;
 25949                           
 25950  3F89  0022               	movlb	2	; select bank2
 25951  3F8A  150E               	bsf	14,2	;volatile
 25952  3F8B  0008               	return
 25953  3F8C                     __end_of_mfrc522_bal_write_reg_len:	
 25954                           
 25955                           	psect	text83
 25956  36F2                     __ptext83:	
 25957 ;; *************** function _mfrc522_bal_read_fifo_len_ex *****************
 25958 ;; Defined at:
 25959 ;;		line 117 in file "src/nfc/bal/mfrc522_bal.c"
 25960 ;; Parameters:    Size  Location     Type
 25961 ;;  reg             1    wreg     unsigned char 
 25962 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25963 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 25964 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25965 ;;  len             1    2[BANK0 ] unsigned char 
 25966 ;;  rx_align        1    3[BANK0 ] unsigned char 
 25967 ;; Auto vars:     Size  Location     Type
 25968 ;;  reg             1    4[BANK0 ] unsigned char 
 25969 ;;  i               1    6[BANK0 ] unsigned char 
 25970 ;;  adr             1    5[BANK0 ] unsigned char 
 25971 ;; Return value:  Size  Location     Type
 25972 ;;                  1    wreg      void 
 25973 ;; Registers used:
 25974 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25975 ;; Tracked objects:
 25976 ;;		On entry : 0/0
 25977 ;;		On exit  : 0/0
 25978 ;;		Unchanged: 0/0
 25979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25980 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25981 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25982 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25983 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0
 25984 ;;Total ram usage:        8 bytes
 25985 ;; Hardware stack levels used:    1
 25986 ;; Hardware stack levels required when called:    3
 25987 ;; This function calls:
 25988 ;;		_mfrc522_bal_write_read_via_spi
 25989 ;; This function is called by:
 25990 ;;		_pcd_comm_with_picc
 25991 ;; This function uses a non-reentrant model
 25992 ;;
 25993                           
 25994                           
 25995                           ;psect for function _mfrc522_bal_read_fifo_len_ex
 25996  36F2                     _mfrc522_bal_read_fifo_len_ex:	
 25997                           
 25998                           ;incstack = 0
 25999                           ; Regs used in _mfrc522_bal_read_fifo_len_ex: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 26000                           ;mfrc522_bal_read_fifo_len_ex@reg stored from wreg
 26001  36F2  0020               	movlb	0	; select bank0
 26002  36F3  00A4               	movwf	mfrc522_bal_read_fifo_len_ex@reg
 26003                           
 26004                           ;mfrc522_bal.c: 119: uint8_t adr;
 26005                           ;mfrc522_bal.c: 120: uint8_t i;
 26006                           ;mfrc522_bal.c: 121: do { LATCbits.LATC2 = 0; } while(0);;
 26007  36F4  0022               	movlb	2	; select bank2
 26008  36F5  110E               	bcf	14,2	;volatile
 26009                           
 26010                           ;mfrc522_bal.c: 122: do { LATCbits.LATC3 = 0; } while(0);;
 26011  36F6  118E               	bcf	14,3	;volatile
 26012                           
 26013                           ;mfrc522_bal.c: 123: adr=((reg<<1) & 0x7e) | 0x80;
 26014  36F7  0020               	movlb	0	; select bank0
 26015  36F8  3524               	lslf	mfrc522_bal_read_fifo_len_ex@reg,w
 26016  36F9  397E               	andlw	126
 26017  36FA  3880               	iorlw	128
 26018  36FB  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26019  36FC  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26020  36FD  00A5               	movwf	mfrc522_bal_read_fifo_len_ex@adr
 26021                           
 26022                           ;mfrc522_bal.c: 124: mfrc522_bal_write_read_via_spi(adr);
 26023  36FE  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 26024  36FF  3188  2000  31B6   	fcall	_mfrc522_bal_write_read_via_spi
 26025                           
 26026                           ;mfrc522_bal.c: 125: for(i=0;i<len;i++)
 26027  3702  0020               	movlb	0	; select bank0
 26028  3703  01A6               	clrf	mfrc522_bal_read_fifo_len_ex@i
 26029  3704                     l13083:	
 26030  3704  0822               	movf	mfrc522_bal_read_fifo_len_ex@len,w
 26031  3705  0226               	subwf	mfrc522_bal_read_fifo_len_ex@i,w
 26032  3706  1803               	btfsc	3,0
 26033  3707  2F1D               	goto	l2149
 26034                           
 26035                           ;mfrc522_bal.c: 126: {
 26036                           ;mfrc522_bal.c: 127: *buf++=mfrc522_bal_write_read_via_spi(adr);
 26037  3708  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 26038  3709  3188  2000  31B6   	fcall	_mfrc522_bal_write_read_via_spi
 26039  370C  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26040  370D  0020               	movlb	0	; select bank0
 26041  370E  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 26042  370F  0086               	movwf	6
 26043  3710  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 26044  3711  0087               	movwf	7
 26045  3712  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26046  3713  0081               	movwf	1
 26047  3714  3001               	movlw	1
 26048  3715  07A0               	addwf	mfrc522_bal_read_fifo_len_ex@buf,f
 26049  3716  3000               	movlw	0
 26050  3717  3DA1               	addwfc	mfrc522_bal_read_fifo_len_ex@buf+1,f
 26051  3718  3001               	movlw	1
 26052  3719  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26053  371A  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26054  371B  07A6               	addwf	mfrc522_bal_read_fifo_len_ex@i,f
 26055  371C  2F04               	goto	l13083
 26056  371D                     l2149:	
 26057                           ;mfrc522_bal.c: 128: }
 26058                           ;mfrc522_bal.c: 129: do { LATCbits.LATC2 = 1; } while(0);;
 26059                           
 26060  371D  0022               	movlb	2	; select bank2
 26061  371E  150E               	bsf	14,2	;volatile
 26062                           
 26063                           ;mfrc522_bal.c: 130: i=TablerxAlign[rx_align];
 26064  371F  0020               	movlb	0	; select bank0
 26065  3720  0823               	movf	mfrc522_bal_read_fifo_len_ex@rx_align,w
 26066  3721  3E0F               	addlw	low (_TablerxAlign| (0+32768))
 26067  3722  0084               	movwf	4
 26068  3723  30B9               	movlw	high (_TablerxAlign| (0+32768))
 26069  3724  1803               	skipnc
 26070  3725  3E01               	addlw	1
 26071  3726  0085               	movwf	5
 26072  3727  0800               	movf	0,w	;code access
 26073  3728  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26074  3729  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26075  372A  00A6               	movwf	mfrc522_bal_read_fifo_len_ex@i
 26076                           
 26077                           ;mfrc522_bal.c: 131: buf[0] &= i;
 26078  372B  0826               	movf	mfrc522_bal_read_fifo_len_ex@i,w
 26079  372C  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26080  372D  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 26081  372E  0086               	movwf	6
 26082  372F  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 26083  3730  0087               	movwf	7
 26084  3731  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26085  3732  0581               	andwf	1,f
 26086  3733  0008               	return
 26087  3734                     __end_of_mfrc522_bal_read_fifo_len_ex:	
 26088                           
 26089                           	psect	text84
 26090  3BBC                     __ptext84:	
 26091 ;; *************** function _m_mem_set *****************
 26092 ;; Defined at:
 26093 ;;		line 32 in file "src/depend/m_string.c"
 26094 ;; Parameters:    Size  Location     Type
 26095 ;;  buf             2    3[COMMON] PTR unsigned char 
 26096 ;;		 -> pLCD(24), PiccUid(12), comBuffer(128), flashOpStr(21), 
 26097 ;;		 -> lcdBuf(9), 
 26098 ;;  x               1    5[COMMON] unsigned char 
 26099 ;;  len             1    6[COMMON] unsigned char 
 26100 ;; Auto vars:     Size  Location     Type
 26101 ;;		None
 26102 ;; Return value:  Size  Location     Type
 26103 ;;                  1    wreg      void 
 26104 ;; Registers used:
 26105 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26106 ;; Tracked objects:
 26107 ;;		On entry : 0/0
 26108 ;;		On exit  : 0/0
 26109 ;;		Unchanged: 0/0
 26110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26111 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26114 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26115 ;;Total ram usage:        4 bytes
 26116 ;; Hardware stack levels used:    1
 26117 ;; Hardware stack levels required when called:    2
 26118 ;; This function calls:
 26119 ;;		Nothing
 26120 ;; This function is called by:
 26121 ;;		_ui_disp_str_num
 26122 ;;		_ui_disp_str_num_ex
 26123 ;;		_ui_disp_flow
 26124 ;;		_ui_disp_totale_v
 26125 ;;		_ui_disp_transfer_money
 26126 ;;		_ui_disp_balance_and_volume
 26127 ;;		_ui_disp_set_line
 26128 ;;		_ui_disp_set_price
 26129 ;;		_ui_disp_set_calib
 26130 ;;		_ui_key_process_down
 26131 ;;		_rfid_comm_process_read_header
 26132 ;;		_lcd_clear_buffer
 26133 ;;		_mfapi_is_new_card_present
 26134 ;; This function uses a non-reentrant model
 26135 ;;
 26136                           
 26137                           
 26138                           ;psect for function _m_mem_set
 26139  3BBC                     _m_mem_set:	
 26140  3BBC                     l12479:	
 26141                           ;m_string.c: 34: while(len--)
 26142                           
 26143                           ;incstack = 0
 26144                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
 26145                           
 26146  3BBC  3001               	movlw	1
 26147  3BBD  02F6               	subwf	m_mem_set@len,f
 26148  3BBE  0A76               	incf	m_mem_set@len,w
 26149  3BBF  1903               	btfsc	3,2
 26150  3BC0  0008               	return
 26151                           
 26152                           ;m_string.c: 35: {
 26153                           ;m_string.c: 36: *buf++=x;
 26154  3BC1  0873               	movf	m_mem_set@buf,w
 26155  3BC2  0086               	movwf	6
 26156  3BC3  0874               	movf	m_mem_set@buf+1,w
 26157  3BC4  0087               	movwf	7
 26158  3BC5  0875               	movf	m_mem_set@x,w
 26159  3BC6  0081               	movwf	1
 26160  3BC7  3001               	movlw	1
 26161  3BC8  07F3               	addwf	m_mem_set@buf,f
 26162  3BC9  3000               	movlw	0
 26163  3BCA  3DF4               	addwfc	m_mem_set@buf+1,f
 26164  3BCB  2BBC               	goto	l12479
 26165  3BCC                     __end_of_m_mem_set:	
 26166                           
 26167                           	psect	text85
 26168  300D                     __ptext85:	
 26169 ;; *************** function _key_scan_call *****************
 26170 ;; Defined at:
 26171 ;;		line 7 in file "src/driver/key.c"
 26172 ;; Parameters:    Size  Location     Type
 26173 ;;		None
 26174 ;; Auto vars:     Size  Location     Type
 26175 ;;		None
 26176 ;; Return value:  Size  Location     Type
 26177 ;;                  1    wreg      void 
 26178 ;; Registers used:
 26179 ;;		wreg, status,2, status,0, pclath, cstack
 26180 ;; Tracked objects:
 26181 ;;		On entry : 0/0
 26182 ;;		On exit  : 0/0
 26183 ;;		Unchanged: 0/0
 26184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26187 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26188 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26189 ;;Total ram usage:        1 bytes
 26190 ;; Hardware stack levels used:    1
 26191 ;; Hardware stack levels required when called:    3
 26192 ;; This function calls:
 26193 ;;		_delay
 26194 ;; This function is called by:
 26195 ;;		_ui_key_waite_up
 26196 ;;		_ui_key_waite_up_ex
 26197 ;;		_key_process_up_down_variable_speed_ex
 26198 ;;		_ui_key_process
 26199 ;;		_rfid_comm_process
 26200 ;; This function uses a non-reentrant model
 26201 ;;
 26202                           
 26203                           
 26204                           ;psect for function _key_scan_call
 26205  300D                     _key_scan_call:	
 26206                           
 26207                           ;key.c: 9: KeyValue=0;
 26208                           
 26209                           ;incstack = 0
 26210                           ; Regs used in _key_scan_call: [wreg+status,2+status,0+pclath+cstack]
 26211  300D  0021               	movlb	1	; select bank1
 26212  300E  01C1               	clrf	_KeyValue^(0+128)
 26213                           
 26214                           ;key.c: 12: if((PORTB & 0x0e) != 0x0e){
 26215  300F  300E               	movlw	14
 26216  3010  0020               	movlb	0	; select bank0
 26217  3011  050D               	andwf	13,w	;volatile
 26218  3012  00F5               	movwf	??_key_scan_call
 26219  3013  300E               	movlw	14
 26220  3014  0675               	xorwf	??_key_scan_call,w
 26221  3015  1903               	btfsc	3,2
 26222  3016  0008               	return
 26223                           
 26224                           ;key.c: 15: delay(1847);;
 26225  3017  3037               	movlw	55
 26226  3018  00F3               	movwf	delay@t
 26227  3019  3007               	movlw	7
 26228  301A  00F4               	movwf	delay@t+1
 26229  301B  31BB  2363  31B0   	fcall	_delay
 26230                           
 26231                           ;key.c: 16: if((PORTB & 0x0e)!=0x0e)
 26232  301E  300E               	movlw	14
 26233  301F  0020               	movlb	0	; select bank0
 26234  3020  050D               	andwf	13,w	;volatile
 26235  3021  00F5               	movwf	??_key_scan_call
 26236  3022  300E               	movlw	14
 26237  3023  0675               	xorwf	??_key_scan_call,w
 26238  3024  1903               	btfsc	3,2
 26239  3025  0008               	return
 26240                           
 26241                           ;key.c: 17: {
 26242                           ;key.c: 18: KeyValue=(PORTB & 0x0e);
 26243  3026  080D               	movf	13,w	;volatile
 26244  3027  390E               	andlw	14
 26245  3028  00F5               	movwf	??_key_scan_call
 26246  3029  0875               	movf	??_key_scan_call,w
 26247  302A  0021               	movlb	1	; select bank1
 26248  302B  00C1               	movwf	_KeyValue^(0+128)
 26249                           
 26250                           ;key.c: 19: KeyValue>>=1;
 26251  302C  1003               	clrc
 26252  302D  0CC1               	rrf	_KeyValue^(0+128),f
 26253                           
 26254                           ;key.c: 20: KeyValue = ~KeyValue;
 26255  302E  09C1               	comf	_KeyValue^(0+128),f
 26256                           
 26257                           ;key.c: 21: KeyValue &=0x07;
 26258  302F  3007               	movlw	7
 26259  3030  00F5               	movwf	??_key_scan_call
 26260  3031  0875               	movf	??_key_scan_call,w
 26261  3032  05C1               	andwf	_KeyValue^(0+128),f
 26262  3033  0008               	return
 26263  3034                     __end_of_key_scan_call:	
 26264                           
 26265                           	psect	text86
 26266  3EBF                     __ptext86:	
 26267 ;; *************** function _in_app_vavle_on *****************
 26268 ;; Defined at:
 26269 ;;		line 42 in file "src/app/flow.c"
 26270 ;; Parameters:    Size  Location     Type
 26271 ;;  op              1    wreg     enum E5862
 26272 ;; Auto vars:     Size  Location     Type
 26273 ;;  op              1    5[COMMON] enum E5862
 26274 ;; Return value:  Size  Location     Type
 26275 ;;                  1    wreg      void 
 26276 ;; Registers used:
 26277 ;;		wreg, status,2, status,0, pclath, cstack
 26278 ;; Tracked objects:
 26279 ;;		On entry : 0/0
 26280 ;;		On exit  : 0/0
 26281 ;;		Unchanged: 0/0
 26282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26284 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26286 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26287 ;;Total ram usage:        2 bytes
 26288 ;; Hardware stack levels used:    1
 26289 ;; Hardware stack levels required when called:    3
 26290 ;; This function calls:
 26291 ;;		_valve_on
 26292 ;; This function is called by:
 26293 ;;		_rfid_comm_process
 26294 ;;		_main
 26295 ;; This function uses a non-reentrant model
 26296 ;;
 26297                           
 26298                           
 26299                           ;psect for function _in_app_vavle_on
 26300  3EBF                     _in_app_vavle_on:	
 26301                           
 26302                           ;incstack = 0
 26303                           ; Regs used in _in_app_vavle_on: [wreg+status,2+status,0+pclath+cstack]
 26304                           ;in_app_vavle_on@op stored from wreg
 26305  3EBF  00F5               	movwf	in_app_vavle_on@op
 26306                           
 26307                           ;flow.c: 44: if(op==ON_REASON_HA && opReason==OFF_REASON_MAN)return;
 26308  3EC0  3003               	movlw	3
 26309  3EC1  0675               	xorwf	in_app_vavle_on@op,w
 26310  3EC2  1D03               	btfss	3,2
 26311  3EC3  2EC9               	goto	l15173
 26312  3EC4  3002               	movlw	2
 26313  3EC5  0021               	movlb	1	; select bank1
 26314  3EC6  0644               	xorwf	_opReason^(0+128),w	;volatile
 26315  3EC7  1903               	btfsc	3,2
 26316  3EC8  0008               	return
 26317  3EC9                     l15173:	
 26318                           
 26319                           ;flow.c: 45: if(valveStatus==VALVE_OPENED || valveStatus==VALVE_OPENING || valveStatus==
      +                          VALVE_CLOSEING)return;
 26320  3EC9  3002               	movlw	2
 26321  3ECA  067A               	xorwf	_valveStatus,w
 26322  3ECB  1903               	btfsc	3,2
 26323  3ECC  0008               	return
 26324  3ECD  3003               	movlw	3
 26325  3ECE  067A               	xorwf	_valveStatus,w
 26326  3ECF  1903               	btfsc	3,2
 26327  3ED0  0008               	return
 26328  3ED1  3004               	movlw	4
 26329  3ED2  067A               	xorwf	_valveStatus,w
 26330  3ED3  1903               	btfsc	3,2
 26331  3ED4  0008               	return
 26332                           
 26333                           ;flow.c: 46: if(deviceStatus.bits.acPowerDown)return;
 26334  3ED5  0021               	movlb	1	; select bank1
 26335  3ED6  19C0               	btfsc	_deviceStatus^(0+128),3
 26336  3ED7  0008               	return
 26337                           
 26338                           ;flow.c: 48: opReason=op;
 26339  3ED8  0875               	movf	in_app_vavle_on@op,w
 26340  3ED9  00F4               	movwf	??_in_app_vavle_on
 26341  3EDA  0874               	movf	??_in_app_vavle_on,w
 26342  3EDB  00C4               	movwf	_opReason^(0+128)	;volatile
 26343                           
 26344                           ;flow.c: 49: valve_on();
 26345  3EDC  3190  2000         	fcall	_valve_on
 26346  3EDE  0008               	return
 26347  3EDF                     __end_of_in_app_vavle_on:	
 26348                           
 26349                           	psect	text87
 26350  1000                     __ptext87:	
 26351 ;; *************** function _valve_on *****************
 26352 ;; Defined at:
 26353 ;;		line 12 in file "src/driver/other-gpio.c"
 26354 ;; Parameters:    Size  Location     Type
 26355 ;;		None
 26356 ;; Auto vars:     Size  Location     Type
 26357 ;;		None
 26358 ;; Return value:  Size  Location     Type
 26359 ;;                  1    wreg      void 
 26360 ;; Registers used:
 26361 ;;		wreg, status,2
 26362 ;; Tracked objects:
 26363 ;;		On entry : 0/0
 26364 ;;		On exit  : 0/0
 26365 ;;		Unchanged: 0/0
 26366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26368 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26371 ;;Total ram usage:        1 bytes
 26372 ;; Hardware stack levels used:    1
 26373 ;; Hardware stack levels required when called:    2
 26374 ;; This function calls:
 26375 ;;		Nothing
 26376 ;; This function is called by:
 26377 ;;		_in_app_vavle_on
 26378 ;; This function uses a non-reentrant model
 26379 ;;
 26380                           
 26381                           
 26382                           ;psect for function _valve_on
 26383  1000                     _valve_on:	
 26384                           
 26385                           ;incstack = 0
 26386                           ; Regs used in _valve_on: [wreg+status,2]
 26387                           ;other-gpio.c: 17: do { LATDbits.LATD7 = 1; } while(0);
 26388  1000  0022               	movlb	2	; select bank2
 26389  1001  178F               	bsf	15,7	;volatile
 26390                           
 26391                           ;other-gpio.c: 18: valveStatus=VALVE_OPENING;
 26392  1002  3003               	movlw	3
 26393  1003  00F3               	movwf	??_valve_on
 26394  1004  0873               	movf	??_valve_on,w
 26395  1005  00FA               	movwf	_valveStatus
 26396                           
 26397                           ;other-gpio.c: 19: valveTimer=0;
 26398  1006  01B8               	clrf	_valveTimer^(0+256)
 26399  1007  0008               	return
 26400  1008                     __end_of_valve_on:	
 26401                           
 26402                           	psect	text88
 26403  3B01                     __ptext88:	
 26404 ;; *************** function _my_uart1_received_ready *****************
 26405 ;; Defined at:
 26406 ;;		line 96 in file "mcc_generated_files/eusart1.c"
 26407 ;; Parameters:    Size  Location     Type
 26408 ;;		None
 26409 ;; Auto vars:     Size  Location     Type
 26410 ;;		None
 26411 ;; Return value:  Size  Location     Type
 26412 ;;                  1    wreg      void 
 26413 ;; Registers used:
 26414 ;;		status,2
 26415 ;; Tracked objects:
 26416 ;;		On entry : 0/0
 26417 ;;		On exit  : 0/0
 26418 ;;		Unchanged: 0/0
 26419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26424 ;;Total ram usage:        0 bytes
 26425 ;; Hardware stack levels used:    1
 26426 ;; Hardware stack levels required when called:    2
 26427 ;; This function calls:
 26428 ;;		Nothing
 26429 ;; This function is called by:
 26430 ;;		_main
 26431 ;; This function uses a non-reentrant model
 26432 ;;
 26433                           
 26434                           
 26435                           ;psect for function _my_uart1_received_ready
 26436  3B01                     _my_uart1_received_ready:	
 26437                           
 26438                           ;eusart1.c: 99: PIE1bits.RC1IE = 0;
 26439                           
 26440                           ;incstack = 0
 26441                           ; Regs used in _my_uart1_received_ready: [status,2]
 26442  3B01  0021               	movlb	1	; select bank1
 26443  3B02  1291               	bcf	17,5	;volatile
 26444                           
 26445                           ;eusart1.c: 104: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 26446  3B03  0022               	movlb	2	; select bank2
 26447  3B04  120C               	bcf	12,4	;volatile
 26448                           
 26449                           ;eusart1.c: 106: uart1ReceivedCount=0;
 26450  3B05  01AC               	clrf	_uart1ReceivedCount^(0+256)
 26451  3B06  01AD               	clrf	(_uart1ReceivedCount+1)^(0+256)
 26452                           
 26453                           ;eusart1.c: 108: PIE1bits.RC1IE = 1;
 26454  3B07  0021               	movlb	1	; select bank1
 26455  3B08  1691               	bsf	17,5	;volatile
 26456  3B09  0008               	return
 26457  3B0A                     __end_of_my_uart1_received_ready:	
 26458                           
 26459                           	psect	text89
 26460  2B41                     __ptext89:	
 26461 ;; *************** function _modbus_response_process *****************
 26462 ;; Defined at:
 26463 ;;		line 237 in file "src/api/modbus.c"
 26464 ;; Parameters:    Size  Location     Type
 26465 ;;  rbuf            1    wreg     PTR unsigned char 
 26466 ;;		 -> uart1Buffer(80), 
 26467 ;;  rlen            2   46[BANK0 ] unsigned int 
 26468 ;; Auto vars:     Size  Location     Type
 26469 ;;  rbuf            1   51[BANK0 ] PTR unsigned char 
 26470 ;;		 -> uart1Buffer(80), 
 26471 ;;  pmdbs           1   50[BANK0 ] PTR struct .
 26472 ;;		 -> uart1Buffer(80), 
 26473 ;;  resp            1   49[BANK0 ] unsigned char 
 26474 ;; Return value:  Size  Location     Type
 26475 ;;                  1    wreg      void 
 26476 ;; Registers used:
 26477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26478 ;; Tracked objects:
 26479 ;;		On entry : 0/0
 26480 ;;		On exit  : 0/0
 26481 ;;		Unchanged: 0/0
 26482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26483 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 26484 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 26485 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 26486 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 26487 ;;Total ram usage:        6 bytes
 26488 ;; Hardware stack levels used:    1
 26489 ;; Hardware stack levels required when called:    6
 26490 ;; This function calls:
 26491 ;;		_crc_verify
 26492 ;;		_modbus_response_command
 26493 ;;		_modbus_response_illgeal_function
 26494 ;;		_modbus_response_read_clib_data
 26495 ;;		_modbus_response_write_clib_data
 26496 ;;		_modbus_response_write_single_register
 26497 ;; This function is called by:
 26498 ;;		_main
 26499 ;; This function uses a non-reentrant model
 26500 ;;
 26501                           
 26502                           
 26503                           ;psect for function _modbus_response_process
 26504  2B41                     _modbus_response_process:	
 26505                           
 26506                           ;incstack = 0
 26507                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26508                           ;modbus_response_process@rbuf stored from wreg
 26509  2B41  0020               	movlb	0	; select bank0
 26510  2B42  00D3               	movwf	modbus_response_process@rbuf
 26511                           
 26512                           ;modbus.c: 238: uint8_t resp=0;
 26513  2B43  01D1               	clrf	modbus_response_process@resp
 26514                           
 26515                           ;modbus.c: 239: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 26516  2B44  0853               	movf	modbus_response_process@rbuf,w
 26517  2B45  00D0               	movwf	??_modbus_response_process
 26518  2B46  0850               	movf	??_modbus_response_process,w
 26519  2B47  00D2               	movwf	modbus_response_process@pmdbs
 26520                           
 26521                           ;modbus.c: 241: if(!( pmdbs->addr==mainSystemData.shortID || pmdbs->addr!=0x00))return;
 26522  2B48  0852               	movf	modbus_response_process@pmdbs,w
 26523  2B49  0086               	movwf	6
 26524  2B4A  3004               	movlw	4	; select bank8/9
 26525  2B4B  0087               	movwf	7
 26526  2B4C  0801               	movf	1,w
 26527  2B4D  0024               	movlb	4	; select bank4
 26528  2B4E  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 26529  2B4F  1903               	skipnz
 26530  2B50  2B59               	goto	l16041
 26531  2B51  0020               	movlb	0	; select bank0
 26532  2B52  0852               	movf	modbus_response_process@pmdbs,w
 26533  2B53  0086               	movwf	6
 26534  2B54  3004               	movlw	4	; select bank8/9
 26535  2B55  0087               	movwf	7
 26536  2B56  0801               	movf	1,w
 26537  2B57  1903               	btfsc	3,2
 26538  2B58  0008               	return
 26539  2B59                     l16041:	
 26540                           
 26541                           ;modbus.c: 242: if(!(crc_verify(rbuf,rlen)))return ;
 26542  2B59  0020               	movlb	0	; select bank0
 26543  2B5A  0853               	movf	modbus_response_process@rbuf,w
 26544  2B5B  00A8               	movwf	crc_verify@message
 26545  2B5C  3004               	movlw	4
 26546  2B5D  00A9               	movwf	crc_verify@message+1
 26547  2B5E  084F               	movf	modbus_response_process@rlen+1,w
 26548  2B5F  00AB               	movwf	crc_verify@n+1
 26549  2B60  084E               	movf	modbus_response_process@rlen,w
 26550  2B61  00AA               	movwf	crc_verify@n
 26551  2B62  31A8  2000  31AB   	fcall	_crc_verify
 26552  2B65  3A00               	xorlw	0
 26553  2B66  1903               	btfsc	3,2
 26554  2B67  0008               	return
 26555  2B68  2B84               	goto	l16057
 26556  2B69                     l16045:	
 26557                           ;modbus.c: 245: case 0x03:
 26558                           
 26559                           ;modbus.c: 244: switch(pmdbs->func){
 26560                           
 26561                           
 26562                           ;modbus.c: 246: modbus_response_command(rbuf);
 26563  2B69  0020               	movlb	0	; select bank0
 26564  2B6A  0853               	movf	modbus_response_process@rbuf,w
 26565  2B6B  31A5  25DD         	fcall	_modbus_response_command
 26566                           
 26567                           ;modbus.c: 247: break;
 26568  2B6D  0008               	return
 26569  2B6E                     l16047:	
 26570                           ;modbus.c: 248: case 0x06:
 26571                           
 26572                           
 26573                           ;modbus.c: 249: modbus_response_write_single_register(rbuf);
 26574  2B6E  0020               	movlb	0	; select bank0
 26575  2B6F  0853               	movf	modbus_response_process@rbuf,w
 26576  2B70  3190  2008         	fcall	_modbus_response_write_single_register
 26577                           
 26578                           ;modbus.c: 250: break;
 26579  2B72  0008               	return
 26580  2B73                     l16049:	
 26581                           ;modbus.c: 251: case 103:
 26582                           
 26583                           
 26584                           ;modbus.c: 252: modbus_response_read_clib_data(rbuf);
 26585  2B73  0020               	movlb	0	; select bank0
 26586  2B74  0853               	movf	modbus_response_process@rbuf,w
 26587  2B75  3199  21E9         	fcall	_modbus_response_read_clib_data
 26588                           
 26589                           ;modbus.c: 253: break;
 26590  2B77  0008               	return
 26591  2B78                     l16051:	
 26592                           ;modbus.c: 254: case 101:
 26593                           
 26594                           
 26595                           ;modbus.c: 255: case 110:
 26596                           ;modbus.c: 256: modbus_response_write_clib_data(rbuf);
 26597  2B78  0020               	movlb	0	; select bank0
 26598  2B79  0853               	movf	modbus_response_process@rbuf,w
 26599  2B7A  31A4  2490         	fcall	_modbus_response_write_clib_data
 26600                           
 26601                           ;modbus.c: 257: break;
 26602  2B7C  0008               	return
 26603  2B7D                     l16053:	
 26604                           ;modbus.c: 276: default:
 26605                           
 26606                           
 26607                           ;modbus.c: 277: modbus_response_illgeal_function(rbuf,0x01);break;
 26608  2B7D  0020               	movlb	0	; select bank0
 26609  2B7E  01B3               	clrf	modbus_response_illgeal_function@errcode
 26610  2B7F  0AB3               	incf	modbus_response_illgeal_function@errcode,f
 26611  2B80  0853               	movf	modbus_response_process@rbuf,w
 26612  2B81  31B5  25F6         	fcall	_modbus_response_illgeal_function
 26613                           
 26614                           ;modbus.c: 278: }
 26615  2B83  0008               	return
 26616  2B84                     l16057:	
 26617  2B84  0020               	movlb	0	; select bank0
 26618  2B85  0A52               	incf	modbus_response_process@pmdbs,w
 26619  2B86  0086               	movwf	6
 26620  2B87  3004               	movlw	4	; select bank8/9
 26621  2B88  0087               	movwf	7
 26622  2B89  0801               	movf	1,w
 26623                           
 26624                           ; Switch size 1, requested type "space"
 26625                           ; Number of cases is 5, Range of values is 3 to 110
 26626                           ; switch strategies available:
 26627                           ; Name         Instructions Cycles
 26628                           ; simple_byte           16     9 (average)
 26629                           ; direct_byte          225     9 (fixed)
 26630                           ; jumptable            263     9 (fixed)
 26631                           ;	Chosen strategy is simple_byte
 26632  2B8A  3A03               	xorlw	3	; case 3
 26633  2B8B  1903               	skipnz
 26634  2B8C  2B69               	goto	l16045
 26635  2B8D  3A05               	xorlw	5	; case 6
 26636  2B8E  1903               	skipnz
 26637  2B8F  2B6E               	goto	l16047
 26638  2B90  3A63               	xorlw	99	; case 101
 26639  2B91  1903               	skipnz
 26640  2B92  2B78               	goto	l16051
 26641  2B93  3A02               	xorlw	2	; case 103
 26642  2B94  1903               	skipnz
 26643  2B95  2B73               	goto	l16049
 26644  2B96  3A09               	xorlw	9	; case 110
 26645  2B97  1903               	skipnz
 26646  2B98  2B78               	goto	l16051
 26647  2B99  2B7D               	goto	l16053
 26648  2B9A  0008               	return
 26649  2B9B                     __end_of_modbus_response_process:	
 26650                           
 26651                           	psect	text90
 26652  1008                     __ptext90:	
 26653 ;; *************** function _modbus_response_write_single_register *****************
 26654 ;; Defined at:
 26655 ;;		line 111 in file "src/api/modbus.c"
 26656 ;; Parameters:    Size  Location     Type
 26657 ;;  rbuf            1    wreg     PTR unsigned char 
 26658 ;;		 -> uart1Buffer(80), 
 26659 ;; Auto vars:     Size  Location     Type
 26660 ;;  rbuf            1   28[BANK0 ] PTR unsigned char 
 26661 ;;		 -> uart1Buffer(80), 
 26662 ;;  startAddr       2   25[BANK0 ] unsigned int 
 26663 ;;  pmdbs           1   27[BANK0 ] PTR struct .
 26664 ;;		 -> uart1Buffer(80), 
 26665 ;;  len             1   24[BANK0 ] unsigned char 
 26666 ;; Return value:  Size  Location     Type
 26667 ;;                  1    wreg      void 
 26668 ;; Registers used:
 26669 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26670 ;; Tracked objects:
 26671 ;;		On entry : 0/0
 26672 ;;		On exit  : 0/0
 26673 ;;		Unchanged: 0/0
 26674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26676 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 26677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 26678 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 26679 ;;Total ram usage:        7 bytes
 26680 ;; Hardware stack levels used:    1
 26681 ;; Hardware stack levels required when called:    5
 26682 ;; This function calls:
 26683 ;;		_crc_append
 26684 ;;		_modbus_response_illgeal_function
 26685 ;;		_my_uart1_send_poll
 26686 ;; This function is called by:
 26687 ;;		_modbus_response_process
 26688 ;; This function uses a non-reentrant model
 26689 ;;
 26690                           
 26691                           
 26692                           ;psect for function _modbus_response_write_single_register
 26693  1008                     _modbus_response_write_single_register:	
 26694                           
 26695                           ;incstack = 0
 26696                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 26697                           ;modbus_response_write_single_register@rbuf stored from wreg
 26698  1008  0020               	movlb	0	; select bank0
 26699  1009  00BC               	movwf	modbus_response_write_single_register@rbuf
 26700                           
 26701                           ;modbus.c: 113: uint16_t startAddr=0;
 26702  100A  01B9               	clrf	modbus_response_write_single_register@startAddr
 26703  100B  01BA               	clrf	modbus_response_write_single_register@startAddr+1
 26704                           
 26705                           ;modbus.c: 114: uint8_t len=0;
 26706  100C  01B8               	clrf	modbus_response_write_single_register@len
 26707                           
 26708                           ;modbus.c: 115: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 26709  100D  083C               	movf	modbus_response_write_single_register@rbuf,w
 26710  100E  00B6               	movwf	??_modbus_response_write_single_register
 26711  100F  0836               	movf	??_modbus_response_write_single_register,w
 26712  1010  00BB               	movwf	modbus_response_write_single_register@pmdbs
 26713                           
 26714                           ;modbus.c: 116: if(pmdbs->addr!=mainSystemData.shortID)return;
 26715  1011  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26716  1012  0086               	movwf	6
 26717  1013  3004               	movlw	4	; select bank8/9
 26718  1014  0087               	movwf	7
 26719  1015  0801               	movf	1,w
 26720  1016  0024               	movlb	4	; select bank4
 26721  1017  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 26722  1018  1D03               	btfss	3,2
 26723  1019  0008               	return
 26724                           
 26725                           ;modbus.c: 117: startAddr=pmdbs->addr_hi;
 26726  101A  0020               	movlb	0	; select bank0
 26727  101B  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26728  101C  3E02               	addlw	2
 26729  101D  0086               	movwf	6
 26730  101E  3004               	movlw	4	; select bank8/9
 26731  101F  0087               	movwf	7
 26732  1020  0801               	movf	1,w
 26733  1021  00B6               	movwf	??_modbus_response_write_single_register
 26734  1022  01B7               	clrf	??_modbus_response_write_single_register+1
 26735  1023  0836               	movf	??_modbus_response_write_single_register,w
 26736  1024  00B9               	movwf	modbus_response_write_single_register@startAddr
 26737  1025  0837               	movf	??_modbus_response_write_single_register+1,w
 26738  1026  00BA               	movwf	modbus_response_write_single_register@startAddr+1
 26739                           
 26740                           ;modbus.c: 118: startAddr<<=8;
 26741  1027  3008               	movlw	8
 26742  1028                     u13535:	
 26743  1028  35B9               	lslf	modbus_response_write_single_register@startAddr,f
 26744  1029  0DBA               	rlf	modbus_response_write_single_register@startAddr+1,f
 26745  102A  0B89               	decfsz	9,f
 26746  102B  2828               	goto	u13535
 26747                           
 26748                           ;modbus.c: 119: startAddr |= pmdbs->addr_lo;
 26749  102C  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26750  102D  3E03               	addlw	3
 26751  102E  0086               	movwf	6
 26752  102F  3004               	movlw	4	; select bank8/9
 26753  1030  0087               	movwf	7
 26754  1031  0801               	movf	1,w
 26755  1032  00B6               	movwf	??_modbus_response_write_single_register
 26756  1033  01B7               	clrf	??_modbus_response_write_single_register+1
 26757  1034  0836               	movf	??_modbus_response_write_single_register,w
 26758  1035  04B9               	iorwf	modbus_response_write_single_register@startAddr,f
 26759  1036  0837               	movf	??_modbus_response_write_single_register+1,w
 26760  1037  04BA               	iorwf	modbus_response_write_single_register@startAddr+1,f
 26761                           
 26762                           ;modbus.c: 123: switch( startAddr & 0xff){
 26763  1038  2890               	goto	l15019
 26764  1039                     l14989:	
 26765                           ;modbus.c: 124: case 0x02:
 26766                           
 26767                           
 26768                           ;modbus.c: 125: if((rbuf[5]&0x04)==0){
 26769  1039  083C               	movf	modbus_response_write_single_register@rbuf,w
 26770  103A  3E05               	addlw	5
 26771  103B  0086               	movwf	6
 26772  103C  3004               	movlw	4	; select bank8/9
 26773  103D  0087               	movwf	7
 26774  103E  1901               	btfsc	1,2
 26775  103F  28A4               	goto	l15021
 26776                           
 26777                           ;modbus.c: 126: deviceStatus.bits.doorOpen=0;
 26778  1040  0021               	movlb	1	; select bank1
 26779  1041  1140               	bcf	_deviceStatus^(0+128),2
 26780                           
 26781                           ;modbus.c: 127: }
 26782                           ;modbus.c: 128: break;
 26783  1042  28A4               	goto	l15021
 26784  1043                     l14993:	
 26785                           ;modbus.c: 129: case 0x09:
 26786                           
 26787                           
 26788                           ;modbus.c: 130: if(flashOpStr.op==enFLASH_NOTHING){
 26789  1043  0022               	movlb	2	; select bank2
 26790  1044  0857               	movf	(_flashOpStr^(0+256)+20),w
 26791  1045  1D03               	btfss	3,2
 26792  1046  287E               	goto	l15009
 26793                           
 26794                           ;modbus.c: 131: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->price));
 26795  1047  3012               	movlw	18
 26796  1048  00C3               	movwf	_flashOpStr^(0+256)
 26797  1049  3000               	movlw	0
 26798  104A  00C4               	movwf	(_flashOpStr+1)^(0+256)
 26799                           
 26800                           ;modbus.c: 132: flashOpStr.len=2;
 26801  104B  3002               	movlw	2
 26802  104C  00C5               	movwf	(_flashOpStr^(0+256)+2)
 26803  104D  3000               	movlw	0
 26804  104E  00C6               	movwf	(_flashOpStr^(0+256)+3)
 26805                           
 26806                           ;modbus.c: 133: flashOpStr.buf[0]=rbuf[5];
 26807  104F  0020               	movlb	0	; select bank0
 26808  1050  083C               	movf	modbus_response_write_single_register@rbuf,w
 26809  1051  0086               	movwf	6
 26810  1052  3004               	movlw	4	; select bank8/9
 26811  1053  0087               	movwf	7
 26812  1054  3004               	movlw	4	; select bank8/9
 26813  1055  3F45               	moviw [5]fsr1
 26814  1056  0022               	movlb	2	; select bank2
 26815  1057  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26816                           
 26817                           ;modbus.c: 134: flashOpStr.buf[1]=rbuf[4];
 26818  1058  0020               	movlb	0	; select bank0
 26819  1059  083C               	movf	modbus_response_write_single_register@rbuf,w
 26820  105A  0086               	movwf	6
 26821  105B  3004               	movlw	4	; select bank8/9
 26822  105C  0087               	movwf	7
 26823  105D  3004               	movlw	4	; select bank8/9
 26824  105E  3F44               	moviw [4]fsr1
 26825  105F  0022               	movlb	2	; select bank2
 26826  1060  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26827                           
 26828                           ;modbus.c: 135: if(*((uint16_t*)(flashOpStr.buf))>1000){*((uint16_t*)(flashOpStr.buf))=1
      +                          000;}
 26829  1061  3003               	movlw	3
 26830  1062  0248               	subwf	((_flashOpStr+1)^(0+256)+4),w
 26831  1063  30E9               	movlw	233
 26832  1064  1903               	skipnz
 26833  1065  0247               	subwf	(_flashOpStr^(0+256)+4),w
 26834  1066  1C03               	skipc
 26835  1067  286C               	goto	l789
 26836  1068  30E8               	movlw	232
 26837  1069  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26838  106A  3003               	movlw	3
 26839  106B  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26840  106C                     l789:	
 26841                           
 26842                           ;modbus.c: 136: if(*((uint16_t*)(flashOpStr.buf))<10){*((uint16_t*)(flashOpStr.buf))=10;
      +                          }
 26843  106C  3000               	movlw	0
 26844  106D  0248               	subwf	((_flashOpStr+1)^(0+256)+4),w
 26845  106E  300A               	movlw	10
 26846  106F  1903               	skipnz
 26847  1070  0247               	subwf	(_flashOpStr^(0+256)+4),w
 26848  1071  1803               	skipnc
 26849  1072  2877               	goto	l790
 26850  1073  300A               	movlw	10
 26851  1074  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26852  1075  3000               	movlw	0
 26853  1076  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26854  1077                     l790:	
 26855                           
 26856                           ;modbus.c: 138: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 26857  1077  3002               	movlw	2
 26858  1078  0020               	movlb	0	; select bank0
 26859  1079  00B6               	movwf	??_modbus_response_write_single_register
 26860  107A  0836               	movf	??_modbus_response_write_single_register,w
 26861  107B  0022               	movlb	2	; select bank2
 26862  107C  00D7               	movwf	(_flashOpStr^(0+256)+20)
 26863                           
 26864                           ;modbus.c: 139: }else{
 26865  107D  28A4               	goto	l15021
 26866  107E                     l15009:	
 26867                           
 26868                           ;modbus.c: 140: modbus_response_illgeal_function(rbuf,4);
 26869  107E  3004               	movlw	4
 26870  107F  0020               	movlb	0	; select bank0
 26871  1080  00B6               	movwf	??_modbus_response_write_single_register
 26872  1081  0836               	movf	??_modbus_response_write_single_register,w
 26873  1082  00B3               	movwf	modbus_response_illgeal_function@errcode
 26874  1083  083C               	movf	modbus_response_write_single_register@rbuf,w
 26875  1084  31B5  25F6         	fcall	_modbus_response_illgeal_function
 26876                           
 26877                           ;modbus.c: 141: return;
 26878  1086  0008               	return
 26879  1087                     l15013:	
 26880                           ;modbus.c: 144: default:
 26881                           
 26882                           ;modbus.c: 142: }
 26883                           ;modbus.c: 143: break;
 26884                           
 26885                           
 26886                           ;modbus.c: 145: modbus_response_illgeal_function(rbuf,0x02);
 26887  1087  3002               	movlw	2
 26888  1088  0020               	movlb	0	; select bank0
 26889  1089  00B6               	movwf	??_modbus_response_write_single_register
 26890  108A  0836               	movf	??_modbus_response_write_single_register,w
 26891  108B  00B3               	movwf	modbus_response_illgeal_function@errcode
 26892  108C  083C               	movf	modbus_response_write_single_register@rbuf,w
 26893  108D  31B5  25F6         	fcall	_modbus_response_illgeal_function
 26894                           
 26895                           ;modbus.c: 146: return;
 26896  108F  0008               	return
 26897  1090                     l15019:	
 26898                           ;modbus.c: 147: }
 26899                           
 26900  1090  30FF               	movlw	255
 26901  1091  0020               	movlb	0	; select bank0
 26902  1092  0539               	andwf	modbus_response_write_single_register@startAddr,w
 26903  1093  00B6               	movwf	??_modbus_response_write_single_register
 26904  1094  3000               	movlw	0
 26905  1095  053A               	andwf	modbus_response_write_single_register@startAddr+1,w
 26906  1096  00B7               	movwf	??_modbus_response_write_single_register+1
 26907                           
 26908                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 26909                           ; Switch size 1, requested type "space"
 26910                           ; Number of cases is 1, Range of values is 0 to 0
 26911                           ; switch strategies available:
 26912                           ; Name         Instructions Cycles
 26913                           ; simple_byte            4     3 (average)
 26914                           ; direct_byte            8     6 (fixed)
 26915                           ; jumptable            260     6 (fixed)
 26916                           ;	Chosen strategy is simple_byte
 26917  1097  0837               	movf	??_modbus_response_write_single_register+1,w
 26918  1098  3A00               	xorlw	0	; case 0
 26919  1099  1903               	skipnz
 26920  109A  289C               	goto	l17359
 26921  109B  2887               	goto	l15013
 26922  109C                     l17359:	
 26923                           
 26924                           ; Switch size 1, requested type "space"
 26925                           ; Number of cases is 2, Range of values is 2 to 9
 26926                           ; switch strategies available:
 26927                           ; Name         Instructions Cycles
 26928                           ; simple_byte            7     4 (average)
 26929                           ; direct_byte           25     9 (fixed)
 26930                           ; jumptable            263     9 (fixed)
 26931                           ;	Chosen strategy is simple_byte
 26932  109C  0836               	movf	??_modbus_response_write_single_register,w
 26933  109D  3A02               	xorlw	2	; case 2
 26934  109E  1903               	skipnz
 26935  109F  2839               	goto	l14989
 26936  10A0  3A0B               	xorlw	11	; case 9
 26937  10A1  1903               	skipnz
 26938  10A2  2843               	goto	l14993
 26939  10A3  2887               	goto	l15013
 26940  10A4                     l15021:	
 26941                           
 26942                           ;modbus.c: 148: if(pmdbs->addr==0)return;
 26943  10A4  0020               	movlb	0	; select bank0
 26944  10A5  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26945  10A6  0086               	movwf	6
 26946  10A7  3004               	movlw	4	; select bank8/9
 26947  10A8  0087               	movwf	7
 26948  10A9  0801               	movf	1,w
 26949  10AA  1903               	btfsc	3,2
 26950  10AB  0008               	return
 26951                           
 26952                           ;modbus.c: 149: rbuf[0]=mainSystemData.shortID;
 26953  10AC  0024               	movlb	4	; select bank4
 26954  10AD  0829               	movf	(_mainSystemData^(0+512)+9),w
 26955  10AE  0020               	movlb	0	; select bank0
 26956  10AF  00B6               	movwf	??_modbus_response_write_single_register
 26957  10B0  083C               	movf	modbus_response_write_single_register@rbuf,w
 26958  10B1  0086               	movwf	6
 26959  10B2  3004               	movlw	4	; select bank8/9
 26960  10B3  0087               	movwf	7
 26961  10B4  0836               	movf	??_modbus_response_write_single_register,w
 26962  10B5  0081               	movwf	1
 26963                           
 26964                           ;modbus.c: 150: crc_append(rbuf,6);
 26965  10B6  083C               	movf	modbus_response_write_single_register@rbuf,w
 26966  10B7  00A8               	movwf	crc_append@message
 26967  10B8  3004               	movlw	4
 26968  10B9  00A9               	movwf	crc_append@message+1
 26969  10BA  3006               	movlw	6
 26970  10BB  00AA               	movwf	crc_append@n
 26971  10BC  3000               	movlw	0
 26972  10BD  00AB               	movwf	crc_append@n+1
 26973  10BE  31B3  238B  3190   	fcall	_crc_append
 26974                           
 26975                           ;modbus.c: 151: my_uart1_send_poll(rbuf,8);
 26976  10C1  3008               	movlw	8
 26977  10C2  0020               	movlb	0	; select bank0
 26978  10C3  00B6               	movwf	??_modbus_response_write_single_register
 26979  10C4  0836               	movf	??_modbus_response_write_single_register,w
 26980  10C5  00F3               	movwf	my_uart1_send_poll@len
 26981  10C6  083C               	movf	modbus_response_write_single_register@rbuf,w
 26982  10C7  31B3  23BC         	fcall	_my_uart1_send_poll
 26983  10C9  0008               	return
 26984  10CA                     __end_of_modbus_response_write_single_register:	
 26985                           
 26986                           	psect	text91
 26987  2490                     __ptext91:	
 26988 ;; *************** function _modbus_response_write_clib_data *****************
 26989 ;; Defined at:
 26990 ;;		line 182 in file "src/api/modbus.c"
 26991 ;; Parameters:    Size  Location     Type
 26992 ;;  buf             1    wreg     PTR unsigned char 
 26993 ;;		 -> uart1Buffer(80), 
 26994 ;; Auto vars:     Size  Location     Type
 26995 ;;  buf             1   44[BANK0 ] PTR unsigned char 
 26996 ;;		 -> uart1Buffer(80), 
 26997 ;;  startAddr       2   42[BANK0 ] unsigned int 
 26998 ;;  t16             2   40[BANK0 ] unsigned int 
 26999 ;;  pmdbs           1   45[BANK0 ] PTR struct .
 27000 ;;		 -> uart1Buffer(80), 
 27001 ;; Return value:  Size  Location     Type
 27002 ;;                  1    wreg      void 
 27003 ;; Registers used:
 27004 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27005 ;; Tracked objects:
 27006 ;;		On entry : 0/0
 27007 ;;		On exit  : 0/0
 27008 ;;		Unchanged: 0/0
 27009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27013 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 27014 ;;Total ram usage:        8 bytes
 27015 ;; Hardware stack levels used:    1
 27016 ;; Hardware stack levels required when called:    5
 27017 ;; This function calls:
 27018 ;;		_crc_append
 27019 ;;		_data_api_calibration_table_data_save
 27020 ;;		_modbus_response_illgeal_function
 27021 ;;		_my_uart1_send_poll
 27022 ;; This function is called by:
 27023 ;;		_modbus_response_process
 27024 ;; This function uses a non-reentrant model
 27025 ;;
 27026                           
 27027                           
 27028                           ;psect for function _modbus_response_write_clib_data
 27029  2490                     _modbus_response_write_clib_data:	
 27030                           
 27031                           ;incstack = 0
 27032                           ; Regs used in _modbus_response_write_clib_data: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 27033                           ;modbus_response_write_clib_data@buf stored from wreg
 27034  2490  0020               	movlb	0	; select bank0
 27035  2491  00CC               	movwf	modbus_response_write_clib_data@buf
 27036                           
 27037                           ;modbus.c: 183: uint16_t startAddr=0;
 27038  2492  01CA               	clrf	modbus_response_write_clib_data@startAddr
 27039  2493  01CB               	clrf	modbus_response_write_clib_data@startAddr+1
 27040                           
 27041                           ;modbus.c: 184: uint16_t t16;
 27042                           ;modbus.c: 185: st_modbusWriteSingleClib* pmdbs=(st_modbusWriteSingleClib*)buf;
 27043  2494  084C               	movf	modbus_response_write_clib_data@buf,w
 27044  2495  00C6               	movwf	??_modbus_response_write_clib_data
 27045  2496  0846               	movf	??_modbus_response_write_clib_data,w
 27046  2497  00CD               	movwf	modbus_response_write_clib_data@pmdbs
 27047                           
 27048                           ;modbus.c: 186: if(pmdbs->addr!=mainSystemData.shortID)return;
 27049  2498  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27050  2499  0086               	movwf	6
 27051  249A  3004               	movlw	4	; select bank8/9
 27052  249B  0087               	movwf	7
 27053  249C  0801               	movf	1,w
 27054  249D  0024               	movlb	4	; select bank4
 27055  249E  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 27056  249F  1D03               	btfss	3,2
 27057  24A0  0008               	return
 27058                           
 27059                           ;modbus.c: 187: startAddr=pmdbs->addr_hi;
 27060  24A1  0020               	movlb	0	; select bank0
 27061  24A2  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27062  24A3  3E02               	addlw	2
 27063  24A4  0086               	movwf	6
 27064  24A5  3004               	movlw	4	; select bank8/9
 27065  24A6  0087               	movwf	7
 27066  24A7  0801               	movf	1,w
 27067  24A8  00C6               	movwf	??_modbus_response_write_clib_data
 27068  24A9  01C7               	clrf	??_modbus_response_write_clib_data+1
 27069  24AA  0846               	movf	??_modbus_response_write_clib_data,w
 27070  24AB  00CA               	movwf	modbus_response_write_clib_data@startAddr
 27071  24AC  0847               	movf	??_modbus_response_write_clib_data+1,w
 27072  24AD  00CB               	movwf	modbus_response_write_clib_data@startAddr+1
 27073                           
 27074                           ;modbus.c: 188: startAddr<<=8;
 27075  24AE  3008               	movlw	8
 27076  24AF                     u13645:	
 27077  24AF  35CA               	lslf	modbus_response_write_clib_data@startAddr,f
 27078  24B0  0DCB               	rlf	modbus_response_write_clib_data@startAddr+1,f
 27079  24B1  0B89               	decfsz	9,f
 27080  24B2  2CAF               	goto	u13645
 27081                           
 27082                           ;modbus.c: 189: startAddr |= pmdbs->addr_lo;
 27083  24B3  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27084  24B4  3E03               	addlw	3
 27085  24B5  0086               	movwf	6
 27086  24B6  3004               	movlw	4	; select bank8/9
 27087  24B7  0087               	movwf	7
 27088  24B8  0801               	movf	1,w
 27089  24B9  00C6               	movwf	??_modbus_response_write_clib_data
 27090  24BA  01C7               	clrf	??_modbus_response_write_clib_data+1
 27091  24BB  0846               	movf	??_modbus_response_write_clib_data,w
 27092  24BC  04CA               	iorwf	modbus_response_write_clib_data@startAddr,f
 27093  24BD  0847               	movf	??_modbus_response_write_clib_data+1,w
 27094  24BE  04CB               	iorwf	modbus_response_write_clib_data@startAddr+1,f
 27095                           
 27096                           ;modbus.c: 191: if(startAddr>30){
 27097  24BF  3000               	movlw	0
 27098  24C0  024B               	subwf	modbus_response_write_clib_data@startAddr+1,w
 27099  24C1  301F               	movlw	31
 27100  24C2  1903               	skipnz
 27101  24C3  024A               	subwf	modbus_response_write_clib_data@startAddr,w
 27102  24C4  1C03               	skipc
 27103  24C5  2CCE               	goto	l15101
 27104                           
 27105                           ;modbus.c: 192: modbus_response_illgeal_function(buf,0x02);
 27106  24C6  3002               	movlw	2
 27107  24C7  00C6               	movwf	??_modbus_response_write_clib_data
 27108  24C8  0846               	movf	??_modbus_response_write_clib_data,w
 27109  24C9  00B3               	movwf	modbus_response_illgeal_function@errcode
 27110  24CA  084C               	movf	modbus_response_write_clib_data@buf,w
 27111  24CB  31B5  25F6         	fcall	_modbus_response_illgeal_function
 27112                           
 27113                           ;modbus.c: 193: return;
 27114  24CD  0008               	return
 27115  24CE                     l15101:	
 27116                           
 27117                           ;modbus.c: 194: }
 27118                           ;modbus.c: 195: t16=pmdbs->data_hi;
 27119  24CE  0020               	movlb	0	; select bank0
 27120  24CF  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27121  24D0  3E04               	addlw	4
 27122  24D1  0086               	movwf	6
 27123  24D2  3004               	movlw	4	; select bank8/9
 27124  24D3  0087               	movwf	7
 27125  24D4  0801               	movf	1,w
 27126  24D5  00C6               	movwf	??_modbus_response_write_clib_data
 27127  24D6  01C7               	clrf	??_modbus_response_write_clib_data+1
 27128  24D7  0846               	movf	??_modbus_response_write_clib_data,w
 27129  24D8  00C8               	movwf	modbus_response_write_clib_data@t16
 27130  24D9  0847               	movf	??_modbus_response_write_clib_data+1,w
 27131  24DA  00C9               	movwf	modbus_response_write_clib_data@t16+1
 27132                           
 27133                           ;modbus.c: 196: t16<<=8;
 27134  24DB  3008               	movlw	8
 27135  24DC                     u13665:	
 27136  24DC  35C8               	lslf	modbus_response_write_clib_data@t16,f
 27137  24DD  0DC9               	rlf	modbus_response_write_clib_data@t16+1,f
 27138  24DE  0B89               	decfsz	9,f
 27139  24DF  2CDC               	goto	u13665
 27140                           
 27141                           ;modbus.c: 197: t16|=pmdbs->data_lo;
 27142  24E0  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27143  24E1  3E05               	addlw	5
 27144  24E2  0086               	movwf	6
 27145  24E3  3004               	movlw	4	; select bank8/9
 27146  24E4  0087               	movwf	7
 27147  24E5  0801               	movf	1,w
 27148  24E6  00C6               	movwf	??_modbus_response_write_clib_data
 27149  24E7  01C7               	clrf	??_modbus_response_write_clib_data+1
 27150  24E8  0846               	movf	??_modbus_response_write_clib_data,w
 27151  24E9  04C8               	iorwf	modbus_response_write_clib_data@t16,f
 27152  24EA  0847               	movf	??_modbus_response_write_clib_data+1,w
 27153  24EB  04C9               	iorwf	modbus_response_write_clib_data@t16+1,f
 27154                           
 27155                           ;modbus.c: 198: *((uint16_t*)(flashOpStr.buf))=t16;
 27156  24EC  0849               	movf	modbus_response_write_clib_data@t16+1,w
 27157  24ED  0022               	movlb	2	; select bank2
 27158  24EE  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 27159  24EF  0020               	movlb	0	; select bank0
 27160  24F0  0848               	movf	modbus_response_write_clib_data@t16,w
 27161  24F1  0022               	movlb	2	; select bank2
 27162  24F2  00C7               	movwf	(_flashOpStr^(0+256)+4)
 27163                           
 27164                           ;modbus.c: 199: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 27165  24F3  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27166  24F4  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 27167                           
 27168                           ;modbus.c: 200: if(buf[1]==110 && startAddr>=1){
 27169  24F5  0020               	movlb	0	; select bank0
 27170  24F6  0A4C               	incf	modbus_response_write_clib_data@buf,w
 27171  24F7  0086               	movwf	6
 27172  24F8  3004               	movlw	4	; select bank8/9
 27173  24F9  0087               	movwf	7
 27174  24FA  306E               	movlw	110
 27175  24FB  0601               	xorwf	1,w
 27176  24FC  1D03               	btfss	3,2
 27177  24FD  2D04               	goto	l15115
 27178  24FE  084A               	movf	modbus_response_write_clib_data@startAddr,w
 27179  24FF  044B               	iorwf	modbus_response_write_clib_data@startAddr+1,w
 27180  2500  1903               	btfsc	3,2
 27181  2501  2D04               	goto	l15115
 27182                           
 27183                           ;modbus.c: 201: data_api_calibration_table_data_save((uint8_t)startAddr,0);
 27184  2502  01B3               	clrf	data_api_calibration_table_data_save@single
 27185  2503  2D07               	goto	L11
 27186  2504                     l15115:	
 27187                           ;modbus.c: 202: }else{
 27188                           
 27189                           
 27190                           ;modbus.c: 203: data_api_calibration_table_data_save((uint8_t)startAddr,1);
 27191  2504  0020               	movlb	0	; select bank0
 27192  2505  01B3               	clrf	data_api_calibration_table_data_save@single
 27193  2506  0AB3               	incf	data_api_calibration_table_data_save@single,f
 27194  2507                     L11:	
 27195  2507  084A               	movf	modbus_response_write_clib_data@startAddr,w
 27196  2508  3192  22FB  31A4   	fcall	_data_api_calibration_table_data_save
 27197                           
 27198                           ;modbus.c: 204: }
 27199                           ;modbus.c: 206: if(pmdbs->addr==0)return;
 27200  250B  0020               	movlb	0	; select bank0
 27201  250C  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27202  250D  0086               	movwf	6
 27203  250E  3004               	movlw	4	; select bank8/9
 27204  250F  0087               	movwf	7
 27205  2510  0801               	movf	1,w
 27206  2511  1903               	btfsc	3,2
 27207  2512  0008               	return
 27208                           
 27209                           ;modbus.c: 207: buf[0]=mainSystemData.shortID;
 27210  2513  0024               	movlb	4	; select bank4
 27211  2514  0829               	movf	(_mainSystemData^(0+512)+9),w
 27212  2515  0020               	movlb	0	; select bank0
 27213  2516  00C6               	movwf	??_modbus_response_write_clib_data
 27214  2517  084C               	movf	modbus_response_write_clib_data@buf,w
 27215  2518  0086               	movwf	6
 27216  2519  3004               	movlw	4	; select bank8/9
 27217  251A  0087               	movwf	7
 27218  251B  0846               	movf	??_modbus_response_write_clib_data,w
 27219  251C  0081               	movwf	1
 27220                           
 27221                           ;modbus.c: 208: crc_append(buf,6);
 27222  251D  084C               	movf	modbus_response_write_clib_data@buf,w
 27223  251E  00A8               	movwf	crc_append@message
 27224  251F  3004               	movlw	4
 27225  2520  00A9               	movwf	crc_append@message+1
 27226  2521  3006               	movlw	6
 27227  2522  00AA               	movwf	crc_append@n
 27228  2523  3000               	movlw	0
 27229  2524  00AB               	movwf	crc_append@n+1
 27230  2525  31B3  238B  31A4   	fcall	_crc_append
 27231                           
 27232                           ;modbus.c: 209: my_uart1_send_poll(buf,8);
 27233  2528  3008               	movlw	8
 27234  2529  0020               	movlb	0	; select bank0
 27235  252A  00C6               	movwf	??_modbus_response_write_clib_data
 27236  252B  0846               	movf	??_modbus_response_write_clib_data,w
 27237  252C  00F3               	movwf	my_uart1_send_poll@len
 27238  252D  084C               	movf	modbus_response_write_clib_data@buf,w
 27239  252E  31B3  23BC         	fcall	_my_uart1_send_poll
 27240  2530  0008               	return
 27241  2531                     __end_of_modbus_response_write_clib_data:	
 27242                           
 27243                           	psect	text92
 27244  12FB                     __ptext92:	
 27245 ;; *************** function _data_api_calibration_table_data_save *****************
 27246 ;; Defined at:
 27247 ;;		line 198 in file "src/app/appdata.c"
 27248 ;; Parameters:    Size  Location     Type
 27249 ;;  loc             1    wreg     unsigned char 
 27250 ;;  single          1   19[BANK0 ] unsigned char 
 27251 ;; Auto vars:     Size  Location     Type
 27252 ;;  loc             1   36[BANK0 ] unsigned char 
 27253 ;;  stp             2   34[BANK0 ] PTR struct .
 27254 ;;		 -> comBuffer(128), 
 27255 ;;  i               1   37[BANK0 ] unsigned char 
 27256 ;; Return value:  Size  Location     Type
 27257 ;;                  1    wreg      unsigned char 
 27258 ;; Registers used:
 27259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27260 ;; Tracked objects:
 27261 ;;		On entry : 0/0
 27262 ;;		On exit  : 0/0
 27263 ;;		Unchanged: 0/0
 27264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27265 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 27266 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27267 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0
 27268 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0
 27269 ;;Total ram usage:       19 bytes
 27270 ;; Hardware stack levels used:    1
 27271 ;; Hardware stack levels required when called:    4
 27272 ;; This function calls:
 27273 ;;		_crc_append
 27274 ;;		_crc_verify
 27275 ;;		_data_api_write_eeprom
 27276 ;;		_m_mem_cpy_len
 27277 ;; This function is called by:
 27278 ;;		_ui_key_process_down
 27279 ;;		_ui_key_process_cancel
 27280 ;;		_ui_key_set_process
 27281 ;;		_modbus_response_write_clib_data
 27282 ;;		_data_api_flash_process
 27283 ;; This function uses a non-reentrant model
 27284 ;;
 27285                           
 27286                           
 27287                           ;psect for function _data_api_calibration_table_data_save
 27288  12FB                     _data_api_calibration_table_data_save:	
 27289                           
 27290                           ;incstack = 0
 27291                           ; Regs used in _data_api_calibration_table_data_save: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 27292                           ;data_api_calibration_table_data_save@loc stored from wreg
 27293  12FB  0020               	movlb	0	; select bank0
 27294  12FC  00C4               	movwf	data_api_calibration_table_data_save@loc
 27295                           
 27296                           ;appdata.c: 199: uint8_t i;
 27297                           ;appdata.c: 200: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 27298  12FD  3000               	movlw	0
 27299  12FE  00C2               	movwf	data_api_calibration_table_data_save@stp
 27300  12FF  3022               	movlw	34
 27301  1300  00C3               	movwf	data_api_calibration_table_data_save@stp+1
 27302                           
 27303                           ;appdata.c: 201: m_mem_cpy_len(comBuffer,(uint8_t*)(&Main_flowCalibrationTable),sizeof (
      +                          st_flowCalibrationTable));
 27304  1301  3000               	movlw	0
 27305  1302  00F3               	movwf	m_mem_cpy_len@d
 27306  1303  3022               	movlw	34
 27307  1304  00F4               	movwf	m_mem_cpy_len@d+1
 27308  1305  3074               	movlw	116
 27309  1306  00F5               	movwf	m_mem_cpy_len@s
 27310  1307  3023               	movlw	35
 27311  1308  00F6               	movwf	m_mem_cpy_len@s+1
 27312  1309  307C               	movlw	124
 27313  130A  00B4               	movwf	??_data_api_calibration_table_data_save
 27314  130B  0834               	movf	??_data_api_calibration_table_data_save,w
 27315  130C  00F7               	movwf	m_mem_cpy_len@len
 27316  130D  31BD  25A3  3192   	fcall	_m_mem_cpy_len
 27317                           
 27318                           ;appdata.c: 202: stp->flowCalibrationArr[loc].adcValue=adcAverageValue;
 27319  1310  0020               	movlb	0	; select bank0
 27320  1311  0844               	movf	data_api_calibration_table_data_save@loc,w
 27321  1312  00B4               	movwf	??_data_api_calibration_table_data_save
 27322  1313  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27323  1314  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27324  1315  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27325  1316  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27326  1317  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27327  1318  0834               	movf	??_data_api_calibration_table_data_save,w
 27328  1319  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27329  131A  0086               	movwf	6
 27330  131B  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27331  131C  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27332  131D  0087               	movwf	7
 27333  131E  0021               	movlb	1	; select bank1
 27334  131F  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 27335  1320  3FC0               	movwi [0]fsr1
 27336  1321  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 27337  1322  3FC1               	movwi [1]fsr1
 27338                           
 27339                           ;appdata.c: 203: stp->flowCalibrationArr[loc].rtflowValue=*((uint16_t*)(flashOpStr.buf))
      +                          ;
 27340  1323  0020               	movlb	0	; select bank0
 27341  1324  0844               	movf	data_api_calibration_table_data_save@loc,w
 27342  1325  00B4               	movwf	??_data_api_calibration_table_data_save
 27343  1326  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27344  1327  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27345  1328  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27346  1329  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27347  132A  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27348  132B  0834               	movf	??_data_api_calibration_table_data_save,w
 27349  132C  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27350  132D  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27351  132E  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27352  132F  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27353  1330  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27354  1331  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27355  1332  0086               	movwf	6
 27356  1333  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27357  1334  0087               	movwf	7
 27358  1335  3142               	addfsr 1,2
 27359  1336  0022               	movlb	2	; select bank2
 27360  1337  0847               	movf	(_flashOpStr^(0+256)+4),w
 27361  1338  3FC0               	movwi [0]fsr1
 27362  1339  0848               	movf	((_flashOpStr+1)^(0+256)+4),w
 27363  133A  3FC1               	movwi [1]fsr1
 27364                           
 27365                           ;appdata.c: 204: m_mem_cpy_len(flashOpStr.buf,comBuffer+loc*sizeof(st_CalibrationPoint),
      +                          4);
 27366  133B  3047               	movlw	low (_flashOpStr+4)
 27367  133C  00F3               	movwf	m_mem_cpy_len@d
 27368  133D  3001               	movlw	high (_flashOpStr+4)
 27369  133E  00F4               	movwf	m_mem_cpy_len@d+1
 27370  133F  0020               	movlb	0	; select bank0
 27371  1340  0844               	movf	data_api_calibration_table_data_save@loc,w
 27372  1341  00B4               	movwf	??_data_api_calibration_table_data_save
 27373  1342  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27374  1343  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27375  1344  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27376  1345  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27377  1346  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27378  1347  3000               	movlw	0
 27379  1348  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27380  1349  3022               	movlw	34
 27381  134A  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27382  134B  0834               	movf	??_data_api_calibration_table_data_save,w
 27383  134C  0736               	addwf	??_data_api_calibration_table_data_save+2,w
 27384  134D  00F5               	movwf	m_mem_cpy_len@s
 27385  134E  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27386  134F  3D37               	addwfc	??_data_api_calibration_table_data_save+3,w
 27387  1350  00F6               	movwf	m_mem_cpy_len@s+1
 27388  1351  3004               	movlw	4
 27389  1352  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27390  1353  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27391  1354  00F7               	movwf	m_mem_cpy_len@len
 27392  1355  31BD  25A3  3192   	fcall	_m_mem_cpy_len
 27393                           
 27394                           ;appdata.c: 206: if(loc>1){
 27395  1358  3002               	movlw	2
 27396  1359  0020               	movlb	0	; select bank0
 27397  135A  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27398  135B  1C03               	skipc
 27399  135C  2BA7               	goto	l13791
 27400                           
 27401                           ;appdata.c: 207: for(i=1;i<=loc;i++){
 27402  135D  01C5               	clrf	data_api_calibration_table_data_save@i
 27403  135E  0AC5               	incf	data_api_calibration_table_data_save@i,f
 27404  135F                     l13789:	
 27405  135F  0845               	movf	data_api_calibration_table_data_save@i,w
 27406  1360  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27407  1361  1C03               	btfss	3,0
 27408  1362  2BA7               	goto	l13791
 27409                           
 27410                           ;appdata.c: 210: if(stp->flowCalibrationArr[i].rtflowValue < stp->flowCalibrationArr[i-1
      +                          ].rtflowValue){
 27411  1363  0845               	movf	data_api_calibration_table_data_save@i,w
 27412  1364  00B4               	movwf	??_data_api_calibration_table_data_save
 27413  1365  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27414  1366  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27415  1367  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27416  1368  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27417  1369  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27418  136A  0834               	movf	??_data_api_calibration_table_data_save,w
 27419  136B  3EFC               	addlw	252
 27420  136C  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27421  136D  30FF               	movlw	255
 27422  136E  3D35               	addwfc	??_data_api_calibration_table_data_save+1,w
 27423  136F  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27424  1370  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27425  1371  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27426  1372  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27427  1373  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27428  1374  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27429  1375  00B9               	movwf	??_data_api_calibration_table_data_save+5
 27430  1376  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27431  1377  0086               	movwf	6
 27432  1378  0839               	movf	??_data_api_calibration_table_data_save+5,w
 27433  1379  0087               	movwf	7
 27434  137A  3142               	addfsr 1,2
 27435  137B  3F40               	moviw [0]fsr1
 27436  137C  00BA               	movwf	??_data_api_calibration_table_data_save+6
 27437  137D  3F41               	moviw [1]fsr1
 27438  137E  00BB               	movwf	??_data_api_calibration_table_data_save+7
 27439  137F  0845               	movf	data_api_calibration_table_data_save@i,w
 27440  1380  00BC               	movwf	??_data_api_calibration_table_data_save+8
 27441  1381  01BD               	clrf	??_data_api_calibration_table_data_save+9
 27442  1382  35BC               	lslf	??_data_api_calibration_table_data_save+8,f
 27443  1383  0DBD               	rlf	??_data_api_calibration_table_data_save+9,f
 27444  1384  35BC               	lslf	??_data_api_calibration_table_data_save+8,f
 27445  1385  0DBD               	rlf	??_data_api_calibration_table_data_save+9,f
 27446  1386  083C               	movf	??_data_api_calibration_table_data_save+8,w
 27447  1387  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27448  1388  00BE               	movwf	??_data_api_calibration_table_data_save+10
 27449  1389  083D               	movf	??_data_api_calibration_table_data_save+9,w
 27450  138A  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27451  138B  00BF               	movwf	??_data_api_calibration_table_data_save+11
 27452  138C  083E               	movf	??_data_api_calibration_table_data_save+10,w
 27453  138D  0086               	movwf	6
 27454  138E  083F               	movf	??_data_api_calibration_table_data_save+11,w
 27455  138F  0087               	movwf	7
 27456  1390  3142               	addfsr 1,2
 27457  1391  3F40               	moviw [0]fsr1
 27458  1392  00C0               	movwf	??_data_api_calibration_table_data_save+12
 27459  1393  3F41               	moviw [1]fsr1
 27460  1394  00C1               	movwf	??_data_api_calibration_table_data_save+13
 27461  1395  083B               	movf	??_data_api_calibration_table_data_save+7,w
 27462  1396  0241               	subwf	??_data_api_calibration_table_data_save+13,w
 27463  1397  1D03               	skipz
 27464  1398  2B9B               	goto	u12495
 27465  1399  083A               	movf	??_data_api_calibration_table_data_save+6,w
 27466  139A  0240               	subwf	??_data_api_calibration_table_data_save+12,w
 27467  139B                     u12495:	
 27468  139B  1803               	skipnc
 27469  139C  2BA1               	goto	l13787
 27470                           
 27471                           ;appdata.c: 211: flashOpStr.op = enFLASH_NOTHING;
 27472  139D  0022               	movlb	2	; select bank2
 27473  139E  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27474                           
 27475                           ;appdata.c: 212: return 0;
 27476  139F  3000               	movlw	0
 27477  13A0  0008               	return
 27478  13A1                     l13787:	
 27479  13A1  3001               	movlw	1
 27480  13A2  0020               	movlb	0	; select bank0
 27481  13A3  00B4               	movwf	??_data_api_calibration_table_data_save
 27482  13A4  0834               	movf	??_data_api_calibration_table_data_save,w
 27483  13A5  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27484  13A6  2B5F               	goto	l13789
 27485  13A7                     l13791:	
 27486                           
 27487                           ;appdata.c: 213: }
 27488                           ;appdata.c: 214: }
 27489                           ;appdata.c: 215: }
 27490                           ;appdata.c: 216: if(loc>1){
 27491  13A7  3002               	movlw	2
 27492  13A8  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27493  13A9  1C03               	skipc
 27494  13AA  2BEF               	goto	l13803
 27495                           
 27496                           ;appdata.c: 217: for(i=0;i<loc;i++){
 27497  13AB  01C5               	clrf	data_api_calibration_table_data_save@i
 27498  13AC                     l13801:	
 27499  13AC  0844               	movf	data_api_calibration_table_data_save@loc,w
 27500  13AD  0245               	subwf	data_api_calibration_table_data_save@i,w
 27501  13AE  1803               	btfsc	3,0
 27502  13AF  2BEF               	goto	l13803
 27503                           
 27504                           ;appdata.c: 222: if(( stp->flowCalibrationArr[i].rtflowValue > stp->flowCalibrationArr[i
      +                          +1].rtflowValue)){
 27505  13B0  0845               	movf	data_api_calibration_table_data_save@i,w
 27506  13B1  00B4               	movwf	??_data_api_calibration_table_data_save
 27507  13B2  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27508  13B3  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27509  13B4  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27510  13B5  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27511  13B6  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27512  13B7  0834               	movf	??_data_api_calibration_table_data_save,w
 27513  13B8  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27514  13B9  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27515  13BA  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27516  13BB  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27517  13BC  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27518  13BD  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27519  13BE  0086               	movwf	6
 27520  13BF  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27521  13C0  0087               	movwf	7
 27522  13C1  3142               	addfsr 1,2
 27523  13C2  3F40               	moviw [0]fsr1
 27524  13C3  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27525  13C4  3F41               	moviw [1]fsr1
 27526  13C5  00B9               	movwf	??_data_api_calibration_table_data_save+5
 27527  13C6  0845               	movf	data_api_calibration_table_data_save@i,w
 27528  13C7  00BA               	movwf	??_data_api_calibration_table_data_save+6
 27529  13C8  01BB               	clrf	??_data_api_calibration_table_data_save+7
 27530  13C9  35BA               	lslf	??_data_api_calibration_table_data_save+6,f
 27531  13CA  0DBB               	rlf	??_data_api_calibration_table_data_save+7,f
 27532  13CB  35BA               	lslf	??_data_api_calibration_table_data_save+6,f
 27533  13CC  0DBB               	rlf	??_data_api_calibration_table_data_save+7,f
 27534  13CD  083A               	movf	??_data_api_calibration_table_data_save+6,w
 27535  13CE  3E04               	addlw	4
 27536  13CF  00BC               	movwf	??_data_api_calibration_table_data_save+8
 27537  13D0  3000               	movlw	0
 27538  13D1  3D3B               	addwfc	??_data_api_calibration_table_data_save+7,w
 27539  13D2  00BD               	movwf	??_data_api_calibration_table_data_save+9
 27540  13D3  083C               	movf	??_data_api_calibration_table_data_save+8,w
 27541  13D4  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27542  13D5  00BE               	movwf	??_data_api_calibration_table_data_save+10
 27543  13D6  083D               	movf	??_data_api_calibration_table_data_save+9,w
 27544  13D7  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27545  13D8  00BF               	movwf	??_data_api_calibration_table_data_save+11
 27546  13D9  083E               	movf	??_data_api_calibration_table_data_save+10,w
 27547  13DA  0086               	movwf	6
 27548  13DB  083F               	movf	??_data_api_calibration_table_data_save+11,w
 27549  13DC  0087               	movwf	7
 27550  13DD  3142               	addfsr 1,2
 27551  13DE  3F40               	moviw [0]fsr1
 27552  13DF  00C0               	movwf	??_data_api_calibration_table_data_save+12
 27553  13E0  3F41               	moviw [1]fsr1
 27554  13E1  00C1               	movwf	??_data_api_calibration_table_data_save+13
 27555  13E2  0839               	movf	??_data_api_calibration_table_data_save+5,w
 27556  13E3  0241               	subwf	??_data_api_calibration_table_data_save+13,w
 27557  13E4  1D03               	skipz
 27558  13E5  2BE8               	goto	u12525
 27559  13E6  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27560  13E7  0240               	subwf	??_data_api_calibration_table_data_save+12,w
 27561  13E8                     u12525:	
 27562  13E8  1C03               	btfss	3,0
 27563                           
 27564                           ;appdata.c: 223: single=0;
 27565  13E9  01B3               	clrf	data_api_calibration_table_data_save@single
 27566  13EA  3001               	movlw	1
 27567  13EB  00B4               	movwf	??_data_api_calibration_table_data_save
 27568  13EC  0834               	movf	??_data_api_calibration_table_data_save,w
 27569  13ED  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27570  13EE  2BAC               	goto	l13801
 27571  13EF                     l13803:	
 27572                           
 27573                           ;appdata.c: 224: }
 27574                           ;appdata.c: 225: }
 27575                           ;appdata.c: 226: }
 27576                           ;appdata.c: 228: if(!single && loc>0){
 27577  13EF  0833               	movf	data_api_calibration_table_data_save@single,w
 27578  13F0  1D03               	btfss	3,2
 27579  13F1  2C3F               	goto	l13821
 27580  13F2  0844               	movf	data_api_calibration_table_data_save@loc,w
 27581  13F3  1903               	btfsc	3,2
 27582  13F4  2C3F               	goto	l13821
 27583                           
 27584                           ;appdata.c: 229: stp->maxFlow=stp->flowCalibrationArr[loc].rtflowValue;
 27585  13F5  0844               	movf	data_api_calibration_table_data_save@loc,w
 27586  13F6  00B4               	movwf	??_data_api_calibration_table_data_save
 27587  13F7  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27588  13F8  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27589  13F9  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27590  13FA  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27591  13FB  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27592  13FC  0834               	movf	??_data_api_calibration_table_data_save,w
 27593  13FD  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27594  13FE  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27595  13FF  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27596  1400  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27597  1401  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27598  1402  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27599  1403  0086               	movwf	6
 27600  1404  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27601  1405  0087               	movwf	7
 27602  1406  3142               	addfsr 1,2
 27603  1407  0842               	movf	data_api_calibration_table_data_save@stp,w
 27604  1408  3E78               	addlw	120
 27605  1409  0084               	movwf	4
 27606  140A  3000               	movlw	0
 27607  140B  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27608  140C  0085               	movwf	5
 27609  140D  3F40               	moviw [0]fsr1
 27610  140E  3F80               	movwi [0]fsr0
 27611  140F  3F41               	moviw [1]fsr1
 27612  1410  3F81               	movwi [1]fsr0
 27613                           
 27614                           ;appdata.c: 230: for(i=loc+1;i<30;i++){
 27615  1411  0844               	movf	data_api_calibration_table_data_save@loc,w
 27616  1412  3E01               	addlw	1
 27617  1413  00B4               	movwf	??_data_api_calibration_table_data_save
 27618  1414  0834               	movf	??_data_api_calibration_table_data_save,w
 27619  1415  00C5               	movwf	data_api_calibration_table_data_save@i
 27620  1416  301E               	movlw	30
 27621  1417  0245               	subwf	data_api_calibration_table_data_save@i,w
 27622  1418  1803               	btfsc	3,0
 27623  1419  2C3F               	goto	l13821
 27624  141A                     l13815:	
 27625                           
 27626                           ;appdata.c: 231: m_mem_cpy_len(comBuffer+i*sizeof(st_CalibrationPoint),flashOpStr.buf,4)
      +                          ;
 27627  141A  0845               	movf	data_api_calibration_table_data_save@i,w
 27628  141B  00B4               	movwf	??_data_api_calibration_table_data_save
 27629  141C  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27630  141D  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27631  141E  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27632  141F  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27633  1420  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27634  1421  3000               	movlw	0
 27635  1422  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27636  1423  3022               	movlw	34
 27637  1424  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27638  1425  0834               	movf	??_data_api_calibration_table_data_save,w
 27639  1426  0736               	addwf	??_data_api_calibration_table_data_save+2,w
 27640  1427  00F3               	movwf	m_mem_cpy_len@d
 27641  1428  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27642  1429  3D37               	addwfc	??_data_api_calibration_table_data_save+3,w
 27643  142A  00F4               	movwf	m_mem_cpy_len@d+1
 27644  142B  3047               	movlw	low (_flashOpStr+4)
 27645  142C  00F5               	movwf	m_mem_cpy_len@s
 27646  142D  3001               	movlw	high (_flashOpStr+4)
 27647  142E  00F6               	movwf	m_mem_cpy_len@s+1
 27648  142F  3004               	movlw	4
 27649  1430  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27650  1431  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27651  1432  00F7               	movwf	m_mem_cpy_len@len
 27652  1433  31BD  25A3  3192   	fcall	_m_mem_cpy_len
 27653  1436  3001               	movlw	1
 27654  1437  0020               	movlb	0	; select bank0
 27655  1438  00B4               	movwf	??_data_api_calibration_table_data_save
 27656  1439  0834               	movf	??_data_api_calibration_table_data_save,w
 27657  143A  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27658  143B  301E               	movlw	30
 27659  143C  0245               	subwf	data_api_calibration_table_data_save@i,w
 27660  143D  1C03               	skipc
 27661  143E  2C1A               	goto	l13815
 27662  143F                     l13821:	
 27663                           
 27664                           ;appdata.c: 232: }
 27665                           ;appdata.c: 233: }
 27666                           ;appdata.c: 234: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 27667  143F  3000               	movlw	0
 27668  1440  00A8               	movwf	crc_append@message
 27669  1441  3022               	movlw	34
 27670  1442  00A9               	movwf	crc_append@message+1
 27671  1443  307A               	movlw	122
 27672  1444  00AA               	movwf	crc_append@n
 27673  1445  3000               	movlw	0
 27674  1446  00AB               	movwf	crc_append@n+1
 27675  1447  31B3  238B  3192   	fcall	_crc_append
 27676                           
 27677                           ;appdata.c: 236: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 27678  144A  3000               	movlw	0
 27679  144B  0020               	movlb	0	; select bank0
 27680  144C  00A0               	movwf	data_api_write_eeprom@buf
 27681  144D  3022               	movlw	34
 27682  144E  00A1               	movwf	data_api_write_eeprom@buf+1
 27683  144F  3080               	movlw	128
 27684  1450  00B4               	movwf	??_data_api_calibration_table_data_save
 27685  1451  0834               	movf	??_data_api_calibration_table_data_save,w
 27686  1452  00A2               	movwf	data_api_write_eeprom@addr
 27687  1453  307C               	movlw	124
 27688  1454  00B5               	movwf	??_data_api_calibration_table_data_save+1
 27689  1455  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27690  1456  00A3               	movwf	data_api_write_eeprom@len
 27691  1457  31BE  26FF  3192   	fcall	_data_api_write_eeprom
 27692                           
 27693                           ;appdata.c: 237: m_mem_cpy_len((uint8_t*)(&Main_flowCalibrationTable),comBuffer,sizeof (
      +                          st_flowCalibrationTable));
 27694  145A  3074               	movlw	116
 27695  145B  00F3               	movwf	m_mem_cpy_len@d
 27696  145C  3023               	movlw	35
 27697  145D  00F4               	movwf	m_mem_cpy_len@d+1
 27698  145E  3000               	movlw	0
 27699  145F  00F5               	movwf	m_mem_cpy_len@s
 27700  1460  3022               	movlw	34
 27701  1461  00F6               	movwf	m_mem_cpy_len@s+1
 27702  1462  307C               	movlw	124
 27703  1463  0020               	movlb	0	; select bank0
 27704  1464  00B4               	movwf	??_data_api_calibration_table_data_save
 27705  1465  0834               	movf	??_data_api_calibration_table_data_save,w
 27706  1466  00F7               	movwf	m_mem_cpy_len@len
 27707  1467  31BD  25A3  3192   	fcall	_m_mem_cpy_len
 27708                           
 27709                           ;appdata.c: 239: i=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowCal
      +                          ibrationTable) );
 27710  146A  3074               	movlw	116
 27711  146B  0020               	movlb	0	; select bank0
 27712  146C  00A8               	movwf	crc_verify@message
 27713  146D  3023               	movlw	35
 27714  146E  00A9               	movwf	crc_verify@message+1
 27715  146F  307C               	movlw	124
 27716  1470  00AA               	movwf	crc_verify@n
 27717  1471  3000               	movlw	0
 27718  1472  00AB               	movwf	crc_verify@n+1
 27719  1473  31A8  2000         	fcall	_crc_verify
 27720  1475  0020               	movlb	0	; select bank0
 27721  1476  00B4               	movwf	??_data_api_calibration_table_data_save
 27722  1477  0834               	movf	??_data_api_calibration_table_data_save,w
 27723  1478  00C5               	movwf	data_api_calibration_table_data_save@i
 27724                           
 27725                           ;appdata.c: 240: flashOpStr.op = enFLASH_NOTHING;
 27726  1479  0022               	movlb	2	; select bank2
 27727  147A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27728                           
 27729                           ;appdata.c: 241: return 1;
 27730  147B  3001               	movlw	1
 27731  147C  0008               	return
 27732  147D                     __end_of_data_api_calibration_table_data_save:	
 27733                           
 27734                           	psect	text93
 27735  19E9                     __ptext93:	
 27736 ;; *************** function _modbus_response_read_clib_data *****************
 27737 ;; Defined at:
 27738 ;;		line 211 in file "src/api/modbus.c"
 27739 ;; Parameters:    Size  Location     Type
 27740 ;;  buf             1    wreg     PTR unsigned char 
 27741 ;;		 -> uart1Buffer(80), 
 27742 ;; Auto vars:     Size  Location     Type
 27743 ;;  buf             1   31[BANK0 ] PTR unsigned char 
 27744 ;;		 -> uart1Buffer(80), 
 27745 ;;  len             2   29[BANK0 ] unsigned int 
 27746 ;;  startAddr       2   26[BANK0 ] unsigned int 
 27747 ;;  i               2    0        unsigned int 
 27748 ;;  pmdbs           1   28[BANK0 ] PTR struct .
 27749 ;;		 -> uart1Buffer(80), 
 27750 ;; Return value:  Size  Location     Type
 27751 ;;                  1    wreg      void 
 27752 ;; Registers used:
 27753 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27754 ;; Tracked objects:
 27755 ;;		On entry : 0/0
 27756 ;;		On exit  : 0/0
 27757 ;;		Unchanged: 0/0
 27758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27760 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27761 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27762 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 27763 ;;Total ram usage:       10 bytes
 27764 ;; Hardware stack levels used:    1
 27765 ;; Hardware stack levels required when called:    5
 27766 ;; This function calls:
 27767 ;;		_crc_append
 27768 ;;		_data_api_read_eeprom
 27769 ;;		_modbus_response_illgeal_function
 27770 ;;		_my_uart1_send_poll
 27771 ;; This function is called by:
 27772 ;;		_modbus_response_process
 27773 ;; This function uses a non-reentrant model
 27774 ;;
 27775                           
 27776                           
 27777                           ;psect for function _modbus_response_read_clib_data
 27778  19E9                     _modbus_response_read_clib_data:	
 27779                           
 27780                           ;incstack = 0
 27781                           ; Regs used in _modbus_response_read_clib_data: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 27782                           ;modbus_response_read_clib_data@buf stored from wreg
 27783  19E9  0020               	movlb	0	; select bank0
 27784  19EA  00BF               	movwf	modbus_response_read_clib_data@buf
 27785                           
 27786                           ;modbus.c: 213: uint16_t i;
 27787                           ;modbus.c: 214: uint16_t startAddr=0;
 27788  19EB  01BA               	clrf	modbus_response_read_clib_data@startAddr
 27789  19EC  01BB               	clrf	modbus_response_read_clib_data@startAddr+1
 27790                           
 27791                           ;modbus.c: 215: uint16_t len=0;
 27792  19ED  01BD               	clrf	modbus_response_read_clib_data@len
 27793  19EE  01BE               	clrf	modbus_response_read_clib_data@len+1
 27794                           
 27795                           ;modbus.c: 216: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 27796  19EF  083F               	movf	modbus_response_read_clib_data@buf,w
 27797  19F0  00B6               	movwf	??_modbus_response_read_clib_data
 27798  19F1  0836               	movf	??_modbus_response_read_clib_data,w
 27799  19F2  00BC               	movwf	modbus_response_read_clib_data@pmdbs
 27800                           
 27801                           ;modbus.c: 217: if(pmdbs->addr!=mainSystemData.shortID)return;
 27802  19F3  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27803  19F4  0086               	movwf	6
 27804  19F5  3004               	movlw	4	; select bank8/9
 27805  19F6  0087               	movwf	7
 27806  19F7  0801               	movf	1,w
 27807  19F8  0024               	movlb	4	; select bank4
 27808  19F9  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 27809  19FA  1D03               	btfss	3,2
 27810  19FB  0008               	return
 27811                           
 27812                           ;modbus.c: 218: startAddr=pmdbs->addr_hi;
 27813  19FC  0020               	movlb	0	; select bank0
 27814  19FD  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27815  19FE  3E02               	addlw	2
 27816  19FF  0086               	movwf	6
 27817  1A00  3004               	movlw	4	; select bank8/9
 27818  1A01  0087               	movwf	7
 27819  1A02  0801               	movf	1,w
 27820  1A03  00B6               	movwf	??_modbus_response_read_clib_data
 27821  1A04  01B7               	clrf	??_modbus_response_read_clib_data+1
 27822  1A05  0836               	movf	??_modbus_response_read_clib_data,w
 27823  1A06  00BA               	movwf	modbus_response_read_clib_data@startAddr
 27824  1A07  0837               	movf	??_modbus_response_read_clib_data+1,w
 27825  1A08  00BB               	movwf	modbus_response_read_clib_data@startAddr+1
 27826                           
 27827                           ;modbus.c: 219: startAddr<<=8;
 27828  1A09  3008               	movlw	8
 27829  1A0A                     u13715:	
 27830  1A0A  35BA               	lslf	modbus_response_read_clib_data@startAddr,f
 27831  1A0B  0DBB               	rlf	modbus_response_read_clib_data@startAddr+1,f
 27832  1A0C  0B89               	decfsz	9,f
 27833  1A0D  2A0A               	goto	u13715
 27834                           
 27835                           ;modbus.c: 220: startAddr |= pmdbs->addr_lo;
 27836  1A0E  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27837  1A0F  3E03               	addlw	3
 27838  1A10  0086               	movwf	6
 27839  1A11  3004               	movlw	4	; select bank8/9
 27840  1A12  0087               	movwf	7
 27841  1A13  0801               	movf	1,w
 27842  1A14  00B6               	movwf	??_modbus_response_read_clib_data
 27843  1A15  01B7               	clrf	??_modbus_response_read_clib_data+1
 27844  1A16  0836               	movf	??_modbus_response_read_clib_data,w
 27845  1A17  04BA               	iorwf	modbus_response_read_clib_data@startAddr,f
 27846  1A18  0837               	movf	??_modbus_response_read_clib_data+1,w
 27847  1A19  04BB               	iorwf	modbus_response_read_clib_data@startAddr+1,f
 27848                           
 27849                           ;modbus.c: 221: len=pmdbs->len_hi;
 27850  1A1A  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27851  1A1B  3E04               	addlw	4
 27852  1A1C  0086               	movwf	6
 27853  1A1D  3004               	movlw	4	; select bank8/9
 27854  1A1E  0087               	movwf	7
 27855  1A1F  0801               	movf	1,w
 27856  1A20  00B6               	movwf	??_modbus_response_read_clib_data
 27857  1A21  01B7               	clrf	??_modbus_response_read_clib_data+1
 27858  1A22  0836               	movf	??_modbus_response_read_clib_data,w
 27859  1A23  00BD               	movwf	modbus_response_read_clib_data@len
 27860  1A24  0837               	movf	??_modbus_response_read_clib_data+1,w
 27861  1A25  00BE               	movwf	modbus_response_read_clib_data@len+1
 27862                           
 27863                           ;modbus.c: 222: len<<=8;
 27864  1A26  3008               	movlw	8
 27865  1A27                     u13725:	
 27866  1A27  35BD               	lslf	modbus_response_read_clib_data@len,f
 27867  1A28  0DBE               	rlf	modbus_response_read_clib_data@len+1,f
 27868  1A29  0B89               	decfsz	9,f
 27869  1A2A  2A27               	goto	u13725
 27870                           
 27871                           ;modbus.c: 223: len = pmdbs->len_lo;
 27872  1A2B  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27873  1A2C  3E05               	addlw	5
 27874  1A2D  0086               	movwf	6
 27875  1A2E  3004               	movlw	4	; select bank8/9
 27876  1A2F  0087               	movwf	7
 27877  1A30  0801               	movf	1,w
 27878  1A31  00B6               	movwf	??_modbus_response_read_clib_data
 27879  1A32  01B7               	clrf	??_modbus_response_read_clib_data+1
 27880  1A33  0836               	movf	??_modbus_response_read_clib_data,w
 27881  1A34  00BD               	movwf	modbus_response_read_clib_data@len
 27882  1A35  0837               	movf	??_modbus_response_read_clib_data+1,w
 27883  1A36  00BE               	movwf	modbus_response_read_clib_data@len+1
 27884                           
 27885                           ;modbus.c: 224: if((len+startAddr)>30+1 || (len>16)){
 27886  1A37  083A               	movf	modbus_response_read_clib_data@startAddr,w
 27887  1A38  073D               	addwf	modbus_response_read_clib_data@len,w
 27888  1A39  00B6               	movwf	??_modbus_response_read_clib_data
 27889  1A3A  083B               	movf	modbus_response_read_clib_data@startAddr+1,w
 27890  1A3B  3D3E               	addwfc	modbus_response_read_clib_data@len+1,w
 27891  1A3C  00B7               	movwf	??_modbus_response_read_clib_data+1
 27892  1A3D  3000               	movlw	0
 27893  1A3E  0237               	subwf	??_modbus_response_read_clib_data+1,w
 27894  1A3F  3020               	movlw	32
 27895  1A40  1903               	skipnz
 27896  1A41  0236               	subwf	??_modbus_response_read_clib_data,w
 27897  1A42  1803               	skipnc
 27898  1A43  2A4B               	goto	l15149
 27899  1A44  3000               	movlw	0
 27900  1A45  023E               	subwf	modbus_response_read_clib_data@len+1,w
 27901  1A46  3011               	movlw	17
 27902  1A47  1903               	skipnz
 27903  1A48  023D               	subwf	modbus_response_read_clib_data@len,w
 27904  1A49  1C03               	skipc
 27905  1A4A  2A53               	goto	l15153
 27906  1A4B                     l15149:	
 27907                           
 27908                           ;modbus.c: 225: modbus_response_illgeal_function(buf,0x02);
 27909  1A4B  3002               	movlw	2
 27910  1A4C  00B6               	movwf	??_modbus_response_read_clib_data
 27911  1A4D  0836               	movf	??_modbus_response_read_clib_data,w
 27912  1A4E  00B3               	movwf	modbus_response_illgeal_function@errcode
 27913  1A4F  083F               	movf	modbus_response_read_clib_data@buf,w
 27914  1A50  31B5  25F6         	fcall	_modbus_response_illgeal_function
 27915                           
 27916                           ;modbus.c: 226: return;
 27917  1A52  0008               	return
 27918  1A53                     l15153:	
 27919                           
 27920                           ;modbus.c: 227: }
 27921                           ;modbus.c: 228: data_api_read_eeprom(buf+3,0x80+startAddr*4,len*4);
 27922  1A53  0020               	movlb	0	; select bank0
 27923  1A54  083F               	movf	modbus_response_read_clib_data@buf,w
 27924  1A55  3E03               	addlw	3
 27925  1A56  00F4               	movwf	data_api_read_eeprom@buf
 27926  1A57  3004               	movlw	4
 27927  1A58  00F5               	movwf	data_api_read_eeprom@buf+1
 27928  1A59  083A               	movf	modbus_response_read_clib_data@startAddr,w
 27929  1A5A  00B6               	movwf	??_modbus_response_read_clib_data
 27930  1A5B  3001               	movlw	1
 27931  1A5C                     u13755:	
 27932  1A5C  35B6               	lslf	??_modbus_response_read_clib_data,f
 27933  1A5D  3EFF               	addlw	-1
 27934  1A5E  1D03               	skipz
 27935  1A5F  2A5C               	goto	u13755
 27936  1A60  3536               	lslf	??_modbus_response_read_clib_data,w
 27937  1A61  3E80               	addlw	128
 27938  1A62  00B7               	movwf	??_modbus_response_read_clib_data+1
 27939  1A63  0837               	movf	??_modbus_response_read_clib_data+1,w
 27940  1A64  00F6               	movwf	data_api_read_eeprom@addr
 27941  1A65  083D               	movf	modbus_response_read_clib_data@len,w
 27942  1A66  00B8               	movwf	??_modbus_response_read_clib_data+2
 27943  1A67  3001               	movlw	1
 27944  1A68                     u13765:	
 27945  1A68  35B8               	lslf	??_modbus_response_read_clib_data+2,f
 27946  1A69  3EFF               	addlw	-1
 27947  1A6A  1D03               	skipz
 27948  1A6B  2A68               	goto	u13765
 27949  1A6C  3538               	lslf	??_modbus_response_read_clib_data+2,w
 27950  1A6D  00B9               	movwf	??_modbus_response_read_clib_data+3
 27951  1A6E  0839               	movf	??_modbus_response_read_clib_data+3,w
 27952  1A6F  00F7               	movwf	data_api_read_eeprom@len
 27953  1A70  31BE  26A0  3199   	fcall	_data_api_read_eeprom
 27954                           
 27955                           ;modbus.c: 229: buf[0] = mainSystemData.shortID;
 27956  1A73  0024               	movlb	4	; select bank4
 27957  1A74  0829               	movf	(_mainSystemData^(0+512)+9),w
 27958  1A75  0020               	movlb	0	; select bank0
 27959  1A76  00B6               	movwf	??_modbus_response_read_clib_data
 27960  1A77  083F               	movf	modbus_response_read_clib_data@buf,w
 27961  1A78  0086               	movwf	6
 27962  1A79  3004               	movlw	4	; select bank8/9
 27963  1A7A  0087               	movwf	7
 27964  1A7B  0836               	movf	??_modbus_response_read_clib_data,w
 27965  1A7C  0081               	movwf	1
 27966                           
 27967                           ;modbus.c: 230: buf[1] = 3;
 27968  1A7D  3003               	movlw	3
 27969  1A7E  00B6               	movwf	??_modbus_response_read_clib_data
 27970  1A7F  0A3F               	incf	modbus_response_read_clib_data@buf,w
 27971  1A80  0086               	movwf	6
 27972  1A81  3004               	movlw	4	; select bank8/9
 27973  1A82  0087               	movwf	7
 27974  1A83  0836               	movf	??_modbus_response_read_clib_data,w
 27975  1A84  0081               	movwf	1
 27976                           
 27977                           ;modbus.c: 231: buf[2] = (uint8_t)(len*4);
 27978  1A85  083D               	movf	modbus_response_read_clib_data@len,w
 27979  1A86  00B6               	movwf	??_modbus_response_read_clib_data
 27980  1A87  3001               	movlw	1
 27981  1A88                     u13775:	
 27982  1A88  35B6               	lslf	??_modbus_response_read_clib_data,f
 27983  1A89  3EFF               	addlw	-1
 27984  1A8A  1D03               	skipz
 27985  1A8B  2A88               	goto	u13775
 27986  1A8C  3536               	lslf	??_modbus_response_read_clib_data,w
 27987  1A8D  00B7               	movwf	??_modbus_response_read_clib_data+1
 27988  1A8E  083F               	movf	modbus_response_read_clib_data@buf,w
 27989  1A8F  3E02               	addlw	2
 27990  1A90  0086               	movwf	6
 27991  1A91  3004               	movlw	4	; select bank8/9
 27992  1A92  0087               	movwf	7
 27993  1A93  0837               	movf	??_modbus_response_read_clib_data+1,w
 27994  1A94  0081               	movwf	1
 27995                           
 27996                           ;modbus.c: 232: len=buf[2]+3;
 27997  1A95  083F               	movf	modbus_response_read_clib_data@buf,w
 27998  1A96  3E02               	addlw	2
 27999  1A97  0086               	movwf	6
 28000  1A98  3004               	movlw	4	; select bank8/9
 28001  1A99  0087               	movwf	7
 28002  1A9A  0801               	movf	1,w
 28003  1A9B  3E03               	addlw	3
 28004  1A9C  00BD               	movwf	modbus_response_read_clib_data@len
 28005  1A9D  3000               	movlw	0
 28006  1A9E  1803               	skipnc
 28007  1A9F  3001               	movlw	1
 28008  1AA0  00BE               	movwf	modbus_response_read_clib_data@len+1
 28009                           
 28010                           ;modbus.c: 233: crc_append(buf,len);
 28011  1AA1  083F               	movf	modbus_response_read_clib_data@buf,w
 28012  1AA2  00A8               	movwf	crc_append@message
 28013  1AA3  3004               	movlw	4
 28014  1AA4  00A9               	movwf	crc_append@message+1
 28015  1AA5  083E               	movf	modbus_response_read_clib_data@len+1,w
 28016  1AA6  00AB               	movwf	crc_append@n+1
 28017  1AA7  083D               	movf	modbus_response_read_clib_data@len,w
 28018  1AA8  00AA               	movwf	crc_append@n
 28019  1AA9  31B3  238B  3199   	fcall	_crc_append
 28020                           
 28021                           ;modbus.c: 234: len += 2;
 28022  1AAC  3002               	movlw	2
 28023  1AAD  0020               	movlb	0	; select bank0
 28024  1AAE  07BD               	addwf	modbus_response_read_clib_data@len,f
 28025  1AAF  3000               	movlw	0
 28026  1AB0  3DBE               	addwfc	modbus_response_read_clib_data@len+1,f
 28027                           
 28028                           ;modbus.c: 235: my_uart1_send_poll(buf,len);
 28029  1AB1  083D               	movf	modbus_response_read_clib_data@len,w
 28030  1AB2  00B6               	movwf	??_modbus_response_read_clib_data
 28031  1AB3  0836               	movf	??_modbus_response_read_clib_data,w
 28032  1AB4  00F3               	movwf	my_uart1_send_poll@len
 28033  1AB5  083F               	movf	modbus_response_read_clib_data@buf,w
 28034  1AB6  31B3  23BC         	fcall	_my_uart1_send_poll
 28035  1AB8  0008               	return
 28036  1AB9                     __end_of_modbus_response_read_clib_data:	
 28037                           
 28038                           	psect	text94
 28039  35F6                     __ptext94:	
 28040 ;; *************** function _modbus_response_illgeal_function *****************
 28041 ;; Defined at:
 28042 ;;		line 6 in file "src/api/modbus.c"
 28043 ;; Parameters:    Size  Location     Type
 28044 ;;  buf             1    wreg     PTR unsigned char 
 28045 ;;		 -> uart1Buffer(80), 
 28046 ;;  errcode         1   19[BANK0 ] unsigned char 
 28047 ;; Auto vars:     Size  Location     Type
 28048 ;;  buf             1   21[BANK0 ] PTR unsigned char 
 28049 ;;		 -> uart1Buffer(80), 
 28050 ;;  pmdbs           1   20[BANK0 ] PTR struct .
 28051 ;;		 -> uart1Buffer(80), 
 28052 ;; Return value:  Size  Location     Type
 28053 ;;                  1    wreg      void 
 28054 ;; Registers used:
 28055 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28056 ;; Tracked objects:
 28057 ;;		On entry : 0/0
 28058 ;;		On exit  : 0/0
 28059 ;;		Unchanged: 0/0
 28060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28061 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 28062 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 28063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28064 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28065 ;;Total ram usage:        4 bytes
 28066 ;; Hardware stack levels used:    1
 28067 ;; Hardware stack levels required when called:    4
 28068 ;; This function calls:
 28069 ;;		_crc_append
 28070 ;;		_my_uart1_send_poll
 28071 ;; This function is called by:
 28072 ;;		_modbus_response_write_single_register
 28073 ;;		_modbus_response_write_clib_data
 28074 ;;		_modbus_response_read_clib_data
 28075 ;;		_modbus_response_process
 28076 ;; This function uses a non-reentrant model
 28077 ;;
 28078                           
 28079                           
 28080                           ;psect for function _modbus_response_illgeal_function
 28081  35F6                     _modbus_response_illgeal_function:	
 28082                           
 28083                           ;incstack = 0
 28084                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
 28085                           ;modbus_response_illgeal_function@buf stored from wreg
 28086  35F6  0020               	movlb	0	; select bank0
 28087  35F7  00B5               	movwf	modbus_response_illgeal_function@buf
 28088                           
 28089                           ;modbus.c: 8: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 28090  35F8  0835               	movf	modbus_response_illgeal_function@buf,w
 28091  35F9  00F7               	movwf	??_modbus_response_illgeal_function
 28092  35FA  0877               	movf	??_modbus_response_illgeal_function,w
 28093  35FB  00B4               	movwf	modbus_response_illgeal_function@pmdbs
 28094                           
 28095                           ;modbus.c: 9: if(pmdbs->addr==0x00)return;
 28096  35FC  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28097  35FD  0086               	movwf	6
 28098  35FE  3004               	movlw	4	; select bank8/9
 28099  35FF  0087               	movwf	7
 28100  3600  0801               	movf	1,w
 28101  3601  1903               	btfsc	3,2
 28102  3602  0008               	return
 28103                           
 28104                           ;modbus.c: 10: pmdbs->addr=mainSystemData.shortID;
 28105  3603  0024               	movlb	4	; select bank4
 28106  3604  0829               	movf	(_mainSystemData^(0+512)+9),w
 28107  3605  00F7               	movwf	??_modbus_response_illgeal_function
 28108  3606  0020               	movlb	0	; select bank0
 28109  3607  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28110  3608  0086               	movwf	6
 28111  3609  3004               	movlw	4	; select bank8/9
 28112  360A  0087               	movwf	7
 28113  360B  0877               	movf	??_modbus_response_illgeal_function,w
 28114  360C  0081               	movwf	1
 28115                           
 28116                           ;modbus.c: 11: if(errcode){
 28117  360D  0833               	movf	modbus_response_illgeal_function@errcode,w
 28118  360E  1903               	btfsc	3,2
 28119  360F  2E18               	goto	l760
 28120                           
 28121                           ;modbus.c: 12: pmdbs->func+=0x80;
 28122  3610  3080               	movlw	128
 28123  3611  00F7               	movwf	??_modbus_response_illgeal_function
 28124  3612  0A34               	incf	modbus_response_illgeal_function@pmdbs,w
 28125  3613  0086               	movwf	6
 28126  3614  3004               	movlw	4	; select bank8/9
 28127  3615  0087               	movwf	7
 28128  3616  0877               	movf	??_modbus_response_illgeal_function,w
 28129  3617  0781               	addwf	1,f
 28130  3618                     l760:	
 28131                           
 28132                           ;modbus.c: 13: }
 28133                           ;modbus.c: 14: pmdbs->errcord=errcode;
 28134  3618  0833               	movf	modbus_response_illgeal_function@errcode,w
 28135  3619  00F7               	movwf	??_modbus_response_illgeal_function
 28136  361A  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28137  361B  3E02               	addlw	2
 28138  361C  0086               	movwf	6
 28139  361D  3004               	movlw	4	; select bank8/9
 28140  361E  0087               	movwf	7
 28141  361F  0877               	movf	??_modbus_response_illgeal_function,w
 28142  3620  0081               	movwf	1
 28143                           
 28144                           ;modbus.c: 15: crc_append(buf,3);
 28145  3621  0835               	movf	modbus_response_illgeal_function@buf,w
 28146  3622  00A8               	movwf	crc_append@message
 28147  3623  3004               	movlw	4
 28148  3624  00A9               	movwf	crc_append@message+1
 28149  3625  3003               	movlw	3
 28150  3626  00AA               	movwf	crc_append@n
 28151  3627  3000               	movlw	0
 28152  3628  00AB               	movwf	crc_append@n+1
 28153  3629  31B3  238B  31B5   	fcall	_crc_append
 28154                           
 28155                           ;modbus.c: 16: my_uart1_send_poll(buf,5);
 28156  362C  3005               	movlw	5
 28157  362D  00F7               	movwf	??_modbus_response_illgeal_function
 28158  362E  0877               	movf	??_modbus_response_illgeal_function,w
 28159  362F  00F3               	movwf	my_uart1_send_poll@len
 28160  3630  0020               	movlb	0	; select bank0
 28161  3631  0835               	movf	modbus_response_illgeal_function@buf,w
 28162  3632  31B3  23BC         	fcall	_my_uart1_send_poll
 28163  3634  0008               	return
 28164  3635                     __end_of_modbus_response_illgeal_function:	
 28165                           
 28166                           	psect	text95
 28167  25DD                     __ptext95:	
 28168 ;; *************** function _modbus_response_command *****************
 28169 ;; Defined at:
 28170 ;;		line 153 in file "src/api/modbus.c"
 28171 ;; Parameters:    Size  Location     Type
 28172 ;;  rbuf            1    wreg     PTR unsigned char 
 28173 ;;		 -> uart1Buffer(80), 
 28174 ;; Auto vars:     Size  Location     Type
 28175 ;;  rbuf            1   41[BANK0 ] PTR unsigned char 
 28176 ;;		 -> uart1Buffer(80), 
 28177 ;;  tempData        2   42[BANK0 ] unsigned int 
 28178 ;;  startAddr       2   36[BANK0 ] unsigned int 
 28179 ;;  tmpAddr         2   34[BANK0 ] unsigned int 
 28180 ;;  len             1   40[BANK0 ] unsigned char 
 28181 ;;  i               1   39[BANK0 ] unsigned char 
 28182 ;;  pmdbs           1   38[BANK0 ] PTR struct .
 28183 ;;		 -> uart1Buffer(80), 
 28184 ;; Return value:  Size  Location     Type
 28185 ;;                  1    wreg      void 
 28186 ;; Registers used:
 28187 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28188 ;; Tracked objects:
 28189 ;;		On entry : 0/0
 28190 ;;		On exit  : 0/0
 28191 ;;		Unchanged: 0/0
 28192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28194 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 28195 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 28196 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0
 28197 ;;Total ram usage:       12 bytes
 28198 ;; Hardware stack levels used:    1
 28199 ;; Hardware stack levels required when called:    4
 28200 ;; This function calls:
 28201 ;;		_crc_append
 28202 ;;		_getRegisterVal
 28203 ;;		_my_uart1_send_poll
 28204 ;; This function is called by:
 28205 ;;		_modbus_response_process
 28206 ;; This function uses a non-reentrant model
 28207 ;;
 28208                           
 28209                           
 28210                           ;psect for function _modbus_response_command
 28211  25DD                     _modbus_response_command:	
 28212                           
 28213                           ;incstack = 0
 28214                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 28215                           ;modbus_response_command@rbuf stored from wreg
 28216  25DD  0020               	movlb	0	; select bank0
 28217  25DE  00C9               	movwf	modbus_response_command@rbuf
 28218                           
 28219                           ;modbus.c: 154: uint8_t i;
 28220                           ;modbus.c: 155: uint16_t startAddr=0;
 28221  25DF  01C4               	clrf	modbus_response_command@startAddr
 28222  25E0  01C5               	clrf	modbus_response_command@startAddr+1
 28223                           
 28224                           ;modbus.c: 156: uint16_t tempData,tmpAddr;
 28225                           ;modbus.c: 157: uint8_t len=0;
 28226  25E1  01C8               	clrf	modbus_response_command@len
 28227                           
 28228                           ;modbus.c: 158: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 28229  25E2  0849               	movf	modbus_response_command@rbuf,w
 28230  25E3  00C0               	movwf	??_modbus_response_command
 28231  25E4  0840               	movf	??_modbus_response_command,w
 28232  25E5  00C6               	movwf	modbus_response_command@pmdbs
 28233                           
 28234                           ;modbus.c: 159: if(pmdbs->addr!=mainSystemData.shortID)return;
 28235  25E6  0846               	movf	modbus_response_command@pmdbs,w
 28236  25E7  0086               	movwf	6
 28237  25E8  3004               	movlw	4	; select bank8/9
 28238  25E9  0087               	movwf	7
 28239  25EA  0801               	movf	1,w
 28240  25EB  0024               	movlb	4	; select bank4
 28241  25EC  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 28242  25ED  1D03               	btfss	3,2
 28243  25EE  0008               	return
 28244                           
 28245                           ;modbus.c: 160: startAddr=pmdbs->addr_hi;
 28246  25EF  0020               	movlb	0	; select bank0
 28247  25F0  0846               	movf	modbus_response_command@pmdbs,w
 28248  25F1  3E02               	addlw	2
 28249  25F2  0086               	movwf	6
 28250  25F3  3004               	movlw	4	; select bank8/9
 28251  25F4  0087               	movwf	7
 28252  25F5  0801               	movf	1,w
 28253  25F6  00C0               	movwf	??_modbus_response_command
 28254  25F7  01C1               	clrf	??_modbus_response_command+1
 28255  25F8  0840               	movf	??_modbus_response_command,w
 28256  25F9  00C4               	movwf	modbus_response_command@startAddr
 28257  25FA  0841               	movf	??_modbus_response_command+1,w
 28258  25FB  00C5               	movwf	modbus_response_command@startAddr+1
 28259                           
 28260                           ;modbus.c: 161: startAddr<<=8;
 28261  25FC  3008               	movlw	8
 28262  25FD                     u13605:	
 28263  25FD  35C4               	lslf	modbus_response_command@startAddr,f
 28264  25FE  0DC5               	rlf	modbus_response_command@startAddr+1,f
 28265  25FF  0B89               	decfsz	9,f
 28266  2600  2DFD               	goto	u13605
 28267                           
 28268                           ;modbus.c: 162: startAddr |= pmdbs->addr_lo;
 28269  2601  0846               	movf	modbus_response_command@pmdbs,w
 28270  2602  3E03               	addlw	3
 28271  2603  0086               	movwf	6
 28272  2604  3004               	movlw	4	; select bank8/9
 28273  2605  0087               	movwf	7
 28274  2606  0801               	movf	1,w
 28275  2607  00C0               	movwf	??_modbus_response_command
 28276  2608  01C1               	clrf	??_modbus_response_command+1
 28277  2609  0840               	movf	??_modbus_response_command,w
 28278  260A  04C4               	iorwf	modbus_response_command@startAddr,f
 28279  260B  0841               	movf	??_modbus_response_command+1,w
 28280  260C  04C5               	iorwf	modbus_response_command@startAddr+1,f
 28281                           
 28282                           ;modbus.c: 163: tmpAddr=startAddr;
 28283  260D  0845               	movf	modbus_response_command@startAddr+1,w
 28284  260E  00C3               	movwf	modbus_response_command@tmpAddr+1
 28285  260F  0844               	movf	modbus_response_command@startAddr,w
 28286  2610  00C2               	movwf	modbus_response_command@tmpAddr
 28287                           
 28288                           ;modbus.c: 164: len = pmdbs->len_lo;
 28289  2611  0846               	movf	modbus_response_command@pmdbs,w
 28290  2612  0086               	movwf	6
 28291  2613  3004               	movlw	4	; select bank8/9
 28292  2614  0087               	movwf	7
 28293  2615  3004               	movlw	4	; select bank8/9
 28294  2616  3F45               	moviw [5]fsr1
 28295  2617  00C8               	movwf	modbus_response_command@len
 28296                           
 28297                           ;modbus.c: 165: len<<=1;
 28298  2618  1003               	clrc
 28299  2619  0DC8               	rlf	modbus_response_command@len,f
 28300                           
 28301                           ;modbus.c: 166: if(len>32)len=32;
 28302  261A  3021               	movlw	33
 28303  261B  0248               	subwf	modbus_response_command@len,w
 28304  261C  1C03               	skipc
 28305  261D  2E22               	goto	l15057
 28306  261E  3020               	movlw	32
 28307  261F  00C0               	movwf	??_modbus_response_command
 28308  2620  0840               	movf	??_modbus_response_command,w
 28309  2621  00C8               	movwf	modbus_response_command@len
 28310  2622                     l15057:	
 28311                           
 28312                           ;modbus.c: 167: for(i=0;i<len;i=i+2,tmpAddr++){
 28313  2622  01C7               	clrf	modbus_response_command@i
 28314  2623                     l15069:	
 28315  2623  0848               	movf	modbus_response_command@len,w
 28316  2624  0247               	subwf	modbus_response_command@i,w
 28317  2625  1803               	btfsc	3,0
 28318  2626  2E55               	goto	l15071
 28319                           
 28320                           ;modbus.c: 168: getRegisterVal(tmpAddr,&tempData);
 28321  2627  0843               	movf	modbus_response_command@tmpAddr+1,w
 28322  2628  00B6               	movwf	getRegisterVal@addr+1
 28323  2629  0842               	movf	modbus_response_command@tmpAddr,w
 28324  262A  00B5               	movwf	getRegisterVal@addr
 28325  262B  304A               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
 28326  262C  00C0               	movwf	??_modbus_response_command
 28327  262D  0840               	movf	??_modbus_response_command,w
 28328  262E  00B7               	movwf	getRegisterVal@tempData
 28329  262F  3189  2150  31A5   	fcall	_getRegisterVal
 28330                           
 28331                           ;modbus.c: 169: rbuf[i+3] = tempData >> 8;
 28332  2632  0020               	movlb	0	; select bank0
 28333  2633  084B               	movf	modbus_response_command@tempData+1,w
 28334  2634  00C0               	movwf	??_modbus_response_command
 28335  2635  0847               	movf	modbus_response_command@i,w
 28336  2636  3E03               	addlw	3
 28337  2637  0749               	addwf	modbus_response_command@rbuf,w
 28338  2638  00C1               	movwf	??_modbus_response_command+1
 28339  2639  0841               	movf	??_modbus_response_command+1,w
 28340  263A  0086               	movwf	6
 28341  263B  3004               	movlw	4	; select bank8/9
 28342  263C  0087               	movwf	7
 28343  263D  0840               	movf	??_modbus_response_command,w
 28344  263E  0081               	movwf	1
 28345                           
 28346                           ;modbus.c: 170: rbuf[i+4] = tempData & 0xff;
 28347  263F  084A               	movf	modbus_response_command@tempData,w
 28348  2640  00C0               	movwf	??_modbus_response_command
 28349  2641  0847               	movf	modbus_response_command@i,w
 28350  2642  3E04               	addlw	4
 28351  2643  0749               	addwf	modbus_response_command@rbuf,w
 28352  2644  00C1               	movwf	??_modbus_response_command+1
 28353  2645  0841               	movf	??_modbus_response_command+1,w
 28354  2646  0086               	movwf	6
 28355  2647  3004               	movlw	4	; select bank8/9
 28356  2648  0087               	movwf	7
 28357  2649  0840               	movf	??_modbus_response_command,w
 28358  264A  0081               	movwf	1
 28359  264B  0847               	movf	modbus_response_command@i,w
 28360  264C  3E02               	addlw	2
 28361  264D  00C0               	movwf	??_modbus_response_command
 28362  264E  0840               	movf	??_modbus_response_command,w
 28363  264F  00C7               	movwf	modbus_response_command@i
 28364  2650  3001               	movlw	1
 28365  2651  07C2               	addwf	modbus_response_command@tmpAddr,f
 28366  2652  3000               	movlw	0
 28367  2653  3DC3               	addwfc	modbus_response_command@tmpAddr+1,f
 28368  2654  2E23               	goto	l15069
 28369  2655                     l15071:	
 28370                           
 28371                           ;modbus.c: 172: }
 28372                           ;modbus.c: 173: rbuf[0] = mainSystemData.shortID;
 28373  2655  0024               	movlb	4	; select bank4
 28374  2656  0829               	movf	(_mainSystemData^(0+512)+9),w
 28375  2657  0020               	movlb	0	; select bank0
 28376  2658  00C0               	movwf	??_modbus_response_command
 28377  2659  0849               	movf	modbus_response_command@rbuf,w
 28378  265A  0086               	movwf	6
 28379  265B  3004               	movlw	4	; select bank8/9
 28380  265C  0087               	movwf	7
 28381  265D  0840               	movf	??_modbus_response_command,w
 28382  265E  0081               	movwf	1
 28383                           
 28384                           ;modbus.c: 174: rbuf[1] = 3;
 28385  265F  3003               	movlw	3
 28386  2660  00C0               	movwf	??_modbus_response_command
 28387  2661  0A49               	incf	modbus_response_command@rbuf,w
 28388  2662  0086               	movwf	6
 28389  2663  3004               	movlw	4	; select bank8/9
 28390  2664  0087               	movwf	7
 28391  2665  0840               	movf	??_modbus_response_command,w
 28392  2666  0081               	movwf	1
 28393                           
 28394                           ;modbus.c: 175: rbuf[2] = len;
 28395  2667  0848               	movf	modbus_response_command@len,w
 28396  2668  00C0               	movwf	??_modbus_response_command
 28397  2669  0849               	movf	modbus_response_command@rbuf,w
 28398  266A  3E02               	addlw	2
 28399  266B  0086               	movwf	6
 28400  266C  3004               	movlw	4	; select bank8/9
 28401  266D  0087               	movwf	7
 28402  266E  0840               	movf	??_modbus_response_command,w
 28403  266F  0081               	movwf	1
 28404                           
 28405                           ;modbus.c: 176: len += 3;
 28406  2670  3003               	movlw	3
 28407  2671  00C0               	movwf	??_modbus_response_command
 28408  2672  0840               	movf	??_modbus_response_command,w
 28409  2673  07C8               	addwf	modbus_response_command@len,f
 28410                           
 28411                           ;modbus.c: 177: crc_append(rbuf,len);
 28412  2674  0849               	movf	modbus_response_command@rbuf,w
 28413  2675  00A8               	movwf	crc_append@message
 28414  2676  3004               	movlw	4
 28415  2677  00A9               	movwf	crc_append@message+1
 28416  2678  0848               	movf	modbus_response_command@len,w
 28417  2679  00C0               	movwf	??_modbus_response_command
 28418  267A  01C1               	clrf	??_modbus_response_command+1
 28419  267B  0840               	movf	??_modbus_response_command,w
 28420  267C  00AA               	movwf	crc_append@n
 28421  267D  0841               	movf	??_modbus_response_command+1,w
 28422  267E  00AB               	movwf	crc_append@n+1
 28423  267F  31B3  238B  31A5   	fcall	_crc_append
 28424                           
 28425                           ;modbus.c: 178: len += 2;
 28426  2682  3002               	movlw	2
 28427  2683  0020               	movlb	0	; select bank0
 28428  2684  00C0               	movwf	??_modbus_response_command
 28429  2685  0840               	movf	??_modbus_response_command,w
 28430  2686  07C8               	addwf	modbus_response_command@len,f
 28431                           
 28432                           ;modbus.c: 179: my_uart1_send_poll(rbuf,len);
 28433  2687  0848               	movf	modbus_response_command@len,w
 28434  2688  00C0               	movwf	??_modbus_response_command
 28435  2689  0840               	movf	??_modbus_response_command,w
 28436  268A  00F3               	movwf	my_uart1_send_poll@len
 28437  268B  0849               	movf	modbus_response_command@rbuf,w
 28438  268C  31B3  23BC         	fcall	_my_uart1_send_poll
 28439  268E  0008               	return
 28440  268F                     __end_of_modbus_response_command:	
 28441                           
 28442                           	psect	text96
 28443  33BC                     __ptext96:	
 28444 ;; *************** function _my_uart1_send_poll *****************
 28445 ;; Defined at:
 28446 ;;		line 56 in file "mcc_generated_files/eusart1.c"
 28447 ;; Parameters:    Size  Location     Type
 28448 ;;  buf             1    wreg     PTR unsigned char 
 28449 ;;		 -> uart1Buffer(80), 
 28450 ;;  len             1    3[COMMON] unsigned char 
 28451 ;; Auto vars:     Size  Location     Type
 28452 ;;  buf             1    5[COMMON] PTR unsigned char 
 28453 ;;		 -> uart1Buffer(80), 
 28454 ;; Return value:  Size  Location     Type
 28455 ;;                  1    wreg      void 
 28456 ;; Registers used:
 28457 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28458 ;; Tracked objects:
 28459 ;;		On entry : 0/0
 28460 ;;		On exit  : 0/0
 28461 ;;		Unchanged: 0/0
 28462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28463 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28464 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28466 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28467 ;;Total ram usage:        3 bytes
 28468 ;; Hardware stack levels used:    1
 28469 ;; Hardware stack levels required when called:    2
 28470 ;; This function calls:
 28471 ;;		Nothing
 28472 ;; This function is called by:
 28473 ;;		_modbus_response_illgeal_function
 28474 ;;		_modbus_response_write_single_register
 28475 ;;		_modbus_response_command
 28476 ;;		_modbus_response_write_clib_data
 28477 ;;		_modbus_response_read_clib_data
 28478 ;; This function uses a non-reentrant model
 28479 ;;
 28480                           
 28481                           
 28482                           ;psect for function _my_uart1_send_poll
 28483  33BC                     _my_uart1_send_poll:	
 28484                           
 28485                           ;incstack = 0
 28486                           ; Regs used in _my_uart1_send_poll: [wreg+fsr1l+fsr1h+status,2+status,0]
 28487                           ;my_uart1_send_poll@buf stored from wreg
 28488  33BC  00F5               	movwf	my_uart1_send_poll@buf
 28489                           
 28490                           ;eusart1.c: 61: do{do { LATAbits.LATA4 = 1; } while(0);}while(0);;
 28491  33BD  0022               	movlb	2	; select bank2
 28492  33BE  160C               	bsf	12,4	;volatile
 28493                           
 28494                           ;eusart1.c: 63: for(sendCount=0;sendCount<len;sendCount++){
 28495  33BF  0021               	movlb	1	; select bank1
 28496  33C0  01C7               	clrf	_sendCount^(0+128)
 28497  33C1                     l13613:	
 28498  33C1  0873               	movf	my_uart1_send_poll@len,w
 28499  33C2  0247               	subwf	_sendCount^(0+128),w
 28500  33C3  1803               	btfsc	3,0
 28501  33C4  2BDF               	goto	l261
 28502  33C5                     l257:	
 28503                           ;eusart1.c: 64: do{
 28504                           
 28505                           
 28506                           ;eusart1.c: 65: if(PIR1bits.TXIF)break;
 28507  33C5  0020               	movlb	0	; select bank0
 28508  33C6  1E11               	btfss	17,4	;volatile
 28509  33C7  2BC5               	goto	l257
 28510                           
 28511                           ;eusart1.c: 67: __nop();
 28512                           
 28513                           ;eusart1.c: 66: }while(1);
 28514  33C8  0000               	nop
 28515                           
 28516                           ;eusart1.c: 68: __nop();
 28517  33C9  0000               	nop
 28518                           
 28519                           ;eusart1.c: 69: __nop();
 28520  33CA  0000               	nop
 28521                           
 28522                           ;eusart1.c: 72: TX1REG=(uint8_t)(buf[sendCount]);
 28523  33CB  0021               	movlb	1	; select bank1
 28524  33CC  0847               	movf	_sendCount^(0+128),w
 28525  33CD  0775               	addwf	my_uart1_send_poll@buf,w
 28526  33CE  00F4               	movwf	??_my_uart1_send_poll
 28527  33CF  0874               	movf	??_my_uart1_send_poll,w
 28528  33D0  0086               	movwf	6
 28529  33D1  3004               	movlw	4	; select bank8/9
 28530  33D2  0087               	movwf	7
 28531  33D3  0801               	movf	1,w
 28532  33D4  0023               	movlb	3	; select bank3
 28533  33D5  009A               	movwf	26	;volatile
 28534                           
 28535                           ;eusart1.c: 73: __nop();
 28536  33D6  0000               	nop
 28537                           
 28538                           ;eusart1.c: 74: __nop();
 28539  33D7  0000               	nop
 28540                           
 28541                           ;eusart1.c: 75: __nop();
 28542  33D8  0000               	nop
 28543  33D9  3001               	movlw	1
 28544  33DA  00F4               	movwf	??_my_uart1_send_poll
 28545  33DB  0874               	movf	??_my_uart1_send_poll,w
 28546  33DC  0021               	movlb	1	; select bank1
 28547  33DD  07C7               	addwf	_sendCount^(0+128),f
 28548  33DE  2BC1               	goto	l13613
 28549  33DF                     l261:	
 28550                           ;eusart1.c: 76: }
 28551                           ;eusart1.c: 77: do{
 28552                           
 28553                           
 28554                           ;eusart1.c: 78: if(PIR1bits.TXIF)break;
 28555  33DF  0020               	movlb	0	; select bank0
 28556  33E0  1E11               	btfss	17,4	;volatile
 28557  33E1  2BDF               	goto	l261
 28558                           
 28559                           ;eusart1.c: 80: TX1REG=0x00;
 28560                           
 28561                           ;eusart1.c: 79: }while(1);
 28562  33E2  0023               	movlb	3	; select bank3
 28563  33E3  019A               	clrf	26	;volatile
 28564                           
 28565                           ;eusart1.c: 81: __nop();
 28566  33E4  0000               	nop
 28567                           
 28568                           ;eusart1.c: 82: __nop();
 28569  33E5  0000               	nop
 28570                           
 28571                           ;eusart1.c: 83: __nop();
 28572  33E6  0000               	nop
 28573  33E7                     l13625:	
 28574                           ;eusart1.c: 84: do{
 28575                           
 28576                           
 28577                           ;eusart1.c: 85: if(PIR1bits.TXIF)break;
 28578  33E7  0020               	movlb	0	; select bank0
 28579  33E8  1E11               	btfss	17,4	;volatile
 28580  33E9  2BE7               	goto	l13625
 28581                           
 28582                           ;eusart1.c: 93: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 28583                           
 28584                           ;eusart1.c: 86: }while(1);
 28585  33EA  0022               	movlb	2	; select bank2
 28586  33EB  120C               	bcf	12,4	;volatile
 28587  33EC  0008               	return
 28588  33ED                     __end_of_my_uart1_send_poll:	
 28589                           
 28590                           	psect	text97
 28591  0950                     __ptext97:	
 28592 ;; *************** function _getRegisterVal *****************
 28593 ;; Defined at:
 28594 ;;		line 18 in file "src/api/modbus.c"
 28595 ;; Parameters:    Size  Location     Type
 28596 ;;  addr            2   21[BANK0 ] unsigned int 
 28597 ;;  tempData        1   23[BANK0 ] PTR unsigned int 
 28598 ;;		 -> modbus_response_command@tempData(2), 
 28599 ;; Auto vars:     Size  Location     Type
 28600 ;;  tempAddr        2   30[BANK0 ] unsigned int 
 28601 ;;  result          2   28[BANK0 ] unsigned int 
 28602 ;; Return value:  Size  Location     Type
 28603 ;;                  2   21[BANK0 ] unsigned int 
 28604 ;; Registers used:
 28605 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28606 ;; Tracked objects:
 28607 ;;		On entry : 0/0
 28608 ;;		On exit  : 0/0
 28609 ;;		Unchanged: 0/0
 28610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28611 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28612 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 28613 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 28614 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 28615 ;;Total ram usage:       11 bytes
 28616 ;; Hardware stack levels used:    1
 28617 ;; Hardware stack levels required when called:    3
 28618 ;; This function calls:
 28619 ;;		___aldiv
 28620 ;;		___lldiv
 28621 ;;		___lmul
 28622 ;; This function is called by:
 28623 ;;		_modbus_response_command
 28624 ;; This function uses a non-reentrant model
 28625 ;;
 28626                           
 28627                           
 28628                           ;psect for function _getRegisterVal
 28629  0950                     _getRegisterVal:	
 28630                           
 28631                           ;modbus.c: 20: uint16_t result = 0;
 28632                           
 28633                           ;incstack = 0
 28634                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 28635  0950  0020               	movlb	0	; select bank0
 28636  0951  01BC               	clrf	getRegisterVal@result
 28637  0952  01BD               	clrf	getRegisterVal@result+1
 28638                           
 28639                           ;modbus.c: 21: uint16_t tempAddr;
 28640                           ;modbus.c: 24: tempAddr = addr & 0xff;
 28641  0953  30FF               	movlw	255
 28642  0954  0535               	andwf	getRegisterVal@addr,w
 28643  0955  00BE               	movwf	getRegisterVal@tempAddr
 28644  0956  3000               	movlw	0
 28645  0957  0536               	andwf	getRegisterVal@addr+1,w
 28646  0958  00BF               	movwf	getRegisterVal@tempAddr+1
 28647                           
 28648                           ;modbus.c: 25: switch(tempAddr & 0xf)
 28649  0959  2B5E               	goto	l14291
 28650  095A                     l14239:	
 28651                           ;modbus.c: 26: {
 28652                           ;modbus.c: 28: case 1:
 28653                           
 28654                           
 28655                           ;modbus.c: 29: *tempData = 0x5555;
 28656  095A  0837               	movf	getRegisterVal@tempData,w
 28657  095B  0086               	movwf	6
 28658  095C  0187               	clrf	7
 28659  095D  3055               	movlw	85
 28660  095E  3FC0               	movwi [0]fsr1
 28661  095F  3055               	movlw	85
 28662  0960  3FC1               	movwi [1]fsr1
 28663                           
 28664                           ;modbus.c: 30: break;
 28665  0961  0008               	return
 28666  0962                     l14241:	
 28667                           ;modbus.c: 31: case 2:
 28668                           
 28669                           
 28670                           ;modbus.c: 35: *tempData=(deviceStatus.byte & 0x0c);
 28671  0962  0021               	movlb	1	; select bank1
 28672  0963  0840               	movf	_deviceStatus^(0+128),w
 28673  0964  390C               	andlw	12
 28674  0965  0020               	movlb	0	; select bank0
 28675  0966  00B8               	movwf	??_getRegisterVal
 28676  0967  01B9               	clrf	??_getRegisterVal+1
 28677  0968  0837               	movf	getRegisterVal@tempData,w
 28678  0969  0086               	movwf	6
 28679  096A  0187               	clrf	7
 28680  096B  0838               	movf	??_getRegisterVal,w
 28681  096C  3FC0               	movwi [0]fsr1
 28682  096D  0839               	movf	??_getRegisterVal+1,w
 28683  096E  3FC1               	movwi [1]fsr1
 28684                           
 28685                           ;modbus.c: 37: break;
 28686  096F  0008               	return
 28687  0970                     l14243:	
 28688                           ;modbus.c: 39: case 3:
 28689                           
 28690                           
 28691                           ;modbus.c: 45: *tempData=0;
 28692  0970  0837               	movf	getRegisterVal@tempData,w
 28693  0971  0086               	movwf	6
 28694  0972  0187               	clrf	7
 28695  0973  3000               	movlw	0
 28696  0974  3FC0               	movwi [0]fsr1
 28697  0975  3FC1               	movwi [1]fsr1
 28698                           
 28699                           ;modbus.c: 46: break;
 28700  0976  0008               	return
 28701  0977                     l14245:	
 28702                           ;modbus.c: 47: case 4:
 28703                           
 28704                           
 28705                           ;modbus.c: 52: __t32=flow;
 28706  0977  0021               	movlb	1	; select bank1
 28707  0978  083C               	movf	_flow^(0+128),w	;volatile
 28708  0979  00B4               	movwf	___t32^(0+128)
 28709  097A  083D               	movf	(_flow+1)^(0+128),w	;volatile
 28710  097B  00B5               	movwf	(___t32^(0+128)+1)
 28711  097C  01B6               	clrf	(___t32^(0+128)+2)
 28712  097D  01B7               	clrf	(___t32^(0+128)+3)
 28713                           
 28714                           ;modbus.c: 53: __t32=__t32*6;
 28715  097E  0837               	movf	(___t32+3)^(0+128),w
 28716  097F  0020               	movlb	0	; select bank0
 28717  0980  00A3               	movwf	___lmul@multiplier+3
 28718  0981  0021               	movlb	1	; select bank1
 28719  0982  0836               	movf	(___t32+2)^(0+128),w
 28720  0983  0020               	movlb	0	; select bank0
 28721  0984  00A2               	movwf	___lmul@multiplier+2
 28722  0985  0021               	movlb	1	; select bank1
 28723  0986  0835               	movf	(___t32+1)^(0+128),w
 28724  0987  0020               	movlb	0	; select bank0
 28725  0988  00A1               	movwf	___lmul@multiplier+1
 28726  0989  0021               	movlb	1	; select bank1
 28727  098A  0834               	movf	___t32^(0+128),w
 28728  098B  0020               	movlb	0	; select bank0
 28729  098C  00A0               	movwf	___lmul@multiplier
 28730  098D  3000               	movlw	0
 28731  098E  00A7               	movwf	___lmul@multiplicand+3
 28732  098F  3000               	movlw	0
 28733  0990  00A6               	movwf	___lmul@multiplicand+2
 28734  0991  3000               	movlw	0
 28735  0992  00A5               	movwf	___lmul@multiplicand+1
 28736  0993  3006               	movlw	6
 28737  0994  00A4               	movwf	___lmul@multiplicand
 28738  0995  31B3  235B  3189   	fcall	___lmul
 28739  0998  0020               	movlb	0	; select bank0
 28740  0999  0823               	movf	?___lmul+3,w
 28741  099A  0021               	movlb	1	; select bank1
 28742  099B  00B7               	movwf	(___t32+3)^(0+128)
 28743  099C  0020               	movlb	0	; select bank0
 28744  099D  0822               	movf	?___lmul+2,w
 28745  099E  0021               	movlb	1	; select bank1
 28746  099F  00B6               	movwf	(___t32+2)^(0+128)
 28747  09A0  0020               	movlb	0	; select bank0
 28748  09A1  0821               	movf	?___lmul+1,w
 28749  09A2  0021               	movlb	1	; select bank1
 28750  09A3  00B5               	movwf	(___t32+1)^(0+128)
 28751  09A4  0020               	movlb	0	; select bank0
 28752  09A5  0820               	movf	?___lmul,w
 28753  09A6  0021               	movlb	1	; select bank1
 28754  09A7  00B4               	movwf	___t32^(0+128)
 28755                           
 28756                           ;modbus.c: 54: __t32=__t32/10;
 28757  09A8  3000               	movlw	0
 28758  09A9  0020               	movlb	0	; select bank0
 28759  09AA  00AB               	movwf	___lldiv@divisor+3
 28760  09AB  3000               	movlw	0
 28761  09AC  00AA               	movwf	___lldiv@divisor+2
 28762  09AD  3000               	movlw	0
 28763  09AE  00A9               	movwf	___lldiv@divisor+1
 28764  09AF  300A               	movlw	10
 28765  09B0  00A8               	movwf	___lldiv@divisor
 28766  09B1  0021               	movlb	1	; select bank1
 28767  09B2  0837               	movf	(___t32+3)^(0+128),w
 28768  09B3  0020               	movlb	0	; select bank0
 28769  09B4  00AF               	movwf	___lldiv@dividend+3
 28770  09B5  0021               	movlb	1	; select bank1
 28771  09B6  0836               	movf	(___t32+2)^(0+128),w
 28772  09B7  0020               	movlb	0	; select bank0
 28773  09B8  00AE               	movwf	___lldiv@dividend+2
 28774  09B9  0021               	movlb	1	; select bank1
 28775  09BA  0835               	movf	(___t32+1)^(0+128),w
 28776  09BB  0020               	movlb	0	; select bank0
 28777  09BC  00AD               	movwf	___lldiv@dividend+1
 28778  09BD  0021               	movlb	1	; select bank1
 28779  09BE  0834               	movf	___t32^(0+128),w
 28780  09BF  0020               	movlb	0	; select bank0
 28781  09C0  00AC               	movwf	___lldiv@dividend
 28782  09C1  31AA  2245         	fcall	___lldiv
 28783  09C3  0020               	movlb	0	; select bank0
 28784  09C4  082B               	movf	?___lldiv+3,w
 28785  09C5  0021               	movlb	1	; select bank1
 28786  09C6  00B7               	movwf	(___t32+3)^(0+128)
 28787  09C7  0020               	movlb	0	; select bank0
 28788  09C8  082A               	movf	?___lldiv+2,w
 28789  09C9  0021               	movlb	1	; select bank1
 28790  09CA  00B6               	movwf	(___t32+2)^(0+128)
 28791  09CB  0020               	movlb	0	; select bank0
 28792  09CC  0829               	movf	?___lldiv+1,w
 28793  09CD  0021               	movlb	1	; select bank1
 28794  09CE  00B5               	movwf	(___t32+1)^(0+128)
 28795  09CF  0020               	movlb	0	; select bank0
 28796  09D0  0828               	movf	?___lldiv,w
 28797  09D1  0021               	movlb	1	; select bank1
 28798  09D2  00B4               	movwf	___t32^(0+128)
 28799                           
 28800                           ;modbus.c: 55: *tempData=(uint16_t)( __t32 & 0x0000ffff);
 28801  09D3  0020               	movlb	0	; select bank0
 28802  09D4  0837               	movf	getRegisterVal@tempData,w
 28803  09D5  0086               	movwf	6
 28804  09D6  0187               	clrf	7
 28805  09D7  0021               	movlb	1	; select bank1
 28806  09D8  0834               	movf	___t32^(0+128),w
 28807  09D9  3FC0               	movwi [0]fsr1
 28808  09DA  0835               	movf	(___t32+1)^(0+128),w
 28809  09DB  3FC1               	movwi [1]fsr1
 28810                           
 28811                           ;modbus.c: 56: break;
 28812  09DC  0008               	return
 28813  09DD                     l14253:	
 28814                           ;modbus.c: 58: case 5:
 28815                           
 28816                           
 28817                           ;modbus.c: 61: __t32=rtBalanceMoney/100;
 28818  09DD  3000               	movlw	0
 28819  09DE  0020               	movlb	0	; select bank0
 28820  09DF  00A3               	movwf	___aldiv@divisor+3
 28821  09E0  3000               	movlw	0
 28822  09E1  00A2               	movwf	___aldiv@divisor+2
 28823  09E2  3000               	movlw	0
 28824  09E3  00A1               	movwf	___aldiv@divisor+1
 28825  09E4  3064               	movlw	100
 28826  09E5  00A0               	movwf	___aldiv@divisor
 28827  09E6  0021               	movlb	1	; select bank1
 28828  09E7  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 28829  09E8  0020               	movlb	0	; select bank0
 28830  09E9  00A7               	movwf	___aldiv@dividend+3
 28831  09EA  0021               	movlb	1	; select bank1
 28832  09EB  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 28833  09EC  0020               	movlb	0	; select bank0
 28834  09ED  00A6               	movwf	___aldiv@dividend+2
 28835  09EE  0021               	movlb	1	; select bank1
 28836  09EF  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 28837  09F0  0020               	movlb	0	; select bank0
 28838  09F1  00A5               	movwf	___aldiv@dividend+1
 28839  09F2  0021               	movlb	1	; select bank1
 28840  09F3  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 28841  09F4  0020               	movlb	0	; select bank0
 28842  09F5  00A4               	movwf	___aldiv@dividend
 28843  09F6  31A0  2013  3189   	fcall	___aldiv
 28844  09F9  0020               	movlb	0	; select bank0
 28845  09FA  0823               	movf	?___aldiv+3,w
 28846  09FB  0021               	movlb	1	; select bank1
 28847  09FC  00B7               	movwf	(___t32+3)^(0+128)
 28848  09FD  0020               	movlb	0	; select bank0
 28849  09FE  0822               	movf	?___aldiv+2,w
 28850  09FF  0021               	movlb	1	; select bank1
 28851  0A00  00B6               	movwf	(___t32+2)^(0+128)
 28852  0A01  0020               	movlb	0	; select bank0
 28853  0A02  0821               	movf	?___aldiv+1,w
 28854  0A03  0021               	movlb	1	; select bank1
 28855  0A04  00B5               	movwf	(___t32+1)^(0+128)
 28856  0A05  0020               	movlb	0	; select bank0
 28857  0A06  0820               	movf	?___aldiv,w
 28858  0A07  0021               	movlb	1	; select bank1
 28859  0A08  00B4               	movwf	___t32^(0+128)
 28860                           
 28861                           ;modbus.c: 62: *tempData = (uint16_t)((__t32>>16) & 0x0000ffff);
 28862  0A09  0834               	movf	___t32^(0+128),w
 28863  0A0A  0020               	movlb	0	; select bank0
 28864  0A0B  00B8               	movwf	??_getRegisterVal
 28865  0A0C  0021               	movlb	1	; select bank1
 28866  0A0D  0835               	movf	(___t32+1)^(0+128),w
 28867  0A0E  0020               	movlb	0	; select bank0
 28868  0A0F  00B9               	movwf	??_getRegisterVal+1
 28869  0A10  0021               	movlb	1	; select bank1
 28870  0A11  0836               	movf	(___t32+2)^(0+128),w
 28871  0A12  0020               	movlb	0	; select bank0
 28872  0A13  00BA               	movwf	??_getRegisterVal+2
 28873  0A14  0021               	movlb	1	; select bank1
 28874  0A15  0837               	movf	(___t32+3)^(0+128),w
 28875  0A16  0020               	movlb	0	; select bank0
 28876  0A17  00BB               	movwf	??_getRegisterVal+3
 28877  0A18  3010               	movlw	16
 28878  0A19                     u12965:	
 28879  0A19  36BB               	lsrf	??_getRegisterVal+3,f
 28880  0A1A  0CBA               	rrf	??_getRegisterVal+2,f
 28881  0A1B  0CB9               	rrf	??_getRegisterVal+1,f
 28882  0A1C  0CB8               	rrf	??_getRegisterVal,f
 28883  0A1D  0B89               	decfsz	9,f
 28884  0A1E  2A19               	goto	u12965
 28885  0A1F  0837               	movf	getRegisterVal@tempData,w
 28886  0A20  0086               	movwf	6
 28887  0A21  0187               	clrf	7
 28888  0A22  0838               	movf	??_getRegisterVal,w
 28889  0A23  3FC0               	movwi [0]fsr1
 28890  0A24  0839               	movf	??_getRegisterVal+1,w
 28891  0A25  3FC1               	movwi [1]fsr1
 28892                           
 28893                           ;modbus.c: 64: break;
 28894  0A26  0008               	return
 28895  0A27                     l14257:	
 28896                           ;modbus.c: 65: case 6:
 28897                           
 28898                           
 28899                           ;modbus.c: 67: __t32=rtBalanceMoney/100;
 28900  0A27  3000               	movlw	0
 28901  0A28  00A3               	movwf	___aldiv@divisor+3
 28902  0A29  3000               	movlw	0
 28903  0A2A  00A2               	movwf	___aldiv@divisor+2
 28904  0A2B  3000               	movlw	0
 28905  0A2C  00A1               	movwf	___aldiv@divisor+1
 28906  0A2D  3064               	movlw	100
 28907  0A2E  00A0               	movwf	___aldiv@divisor
 28908  0A2F  0021               	movlb	1	; select bank1
 28909  0A30  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 28910  0A31  0020               	movlb	0	; select bank0
 28911  0A32  00A7               	movwf	___aldiv@dividend+3
 28912  0A33  0021               	movlb	1	; select bank1
 28913  0A34  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 28914  0A35  0020               	movlb	0	; select bank0
 28915  0A36  00A6               	movwf	___aldiv@dividend+2
 28916  0A37  0021               	movlb	1	; select bank1
 28917  0A38  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 28918  0A39  0020               	movlb	0	; select bank0
 28919  0A3A  00A5               	movwf	___aldiv@dividend+1
 28920  0A3B  0021               	movlb	1	; select bank1
 28921  0A3C  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 28922  0A3D  0020               	movlb	0	; select bank0
 28923  0A3E  00A4               	movwf	___aldiv@dividend
 28924  0A3F  31A0  2013         	fcall	___aldiv
 28925  0A41  0020               	movlb	0	; select bank0
 28926  0A42  0823               	movf	?___aldiv+3,w
 28927  0A43  0021               	movlb	1	; select bank1
 28928  0A44  00B7               	movwf	(___t32+3)^(0+128)
 28929  0A45  0020               	movlb	0	; select bank0
 28930  0A46  0822               	movf	?___aldiv+2,w
 28931  0A47  0021               	movlb	1	; select bank1
 28932  0A48  00B6               	movwf	(___t32+2)^(0+128)
 28933  0A49  0020               	movlb	0	; select bank0
 28934  0A4A  0821               	movf	?___aldiv+1,w
 28935  0A4B  0021               	movlb	1	; select bank1
 28936  0A4C  00B5               	movwf	(___t32+1)^(0+128)
 28937  0A4D  0020               	movlb	0	; select bank0
 28938  0A4E  0820               	movf	?___aldiv,w
 28939  0A4F  0021               	movlb	1	; select bank1
 28940  0A50  00B4               	movwf	___t32^(0+128)
 28941                           
 28942                           ;modbus.c: 68: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 28943  0A51  0020               	movlb	0	; select bank0
 28944  0A52  0837               	movf	getRegisterVal@tempData,w
 28945  0A53  0086               	movwf	6
 28946  0A54  0187               	clrf	7
 28947  0A55  0021               	movlb	1	; select bank1
 28948  0A56  0834               	movf	___t32^(0+128),w
 28949  0A57  3FC0               	movwi [0]fsr1
 28950  0A58  0835               	movf	(___t32+1)^(0+128),w
 28951  0A59  3FC1               	movwi [1]fsr1
 28952                           
 28953                           ;modbus.c: 70: break;
 28954  0A5A  0008               	return
 28955  0A5B                     l14261:	
 28956                           ;modbus.c: 72: case 7:
 28957                           
 28958                           
 28959                           ;modbus.c: 75: __t32=mainSystemData.totalConsumeVolume;
 28960  0A5B  3030               	movlw	48
 28961  0A5C  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 28962  0A5D  0086               	movwf	6
 28963  0A5E  3002               	movlw	2	; select bank4/5
 28964  0A5F  0087               	movwf	7
 28965  0A60  3F40               	moviw [0]fsr1
 28966  0A61  0021               	movlb	1	; select bank1
 28967  0A62  00B4               	movwf	___t32^(0+128)
 28968  0A63  3F41               	moviw [1]fsr1
 28969  0A64  00B5               	movwf	(___t32+1)^(0+128)
 28970  0A65  3F42               	moviw [2]fsr1
 28971  0A66  00B6               	movwf	(___t32+2)^(0+128)
 28972  0A67  3F43               	moviw [3]fsr1
 28973  0A68  00B7               	movwf	(___t32+3)^(0+128)
 28974                           
 28975                           ;modbus.c: 76: __t32 += rtVolume_m3;
 28976  0A69  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 28977  0A6A  07B4               	addwf	___t32^(0+128),f
 28978  0A6B  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 28979  0A6C  3DB5               	addwfc	(___t32+1)^(0+128),f
 28980  0A6D  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 28981  0A6E  3DB6               	addwfc	(___t32+2)^(0+128),f
 28982  0A6F  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 28983  0A70  3DB7               	addwfc	(___t32+3)^(0+128),f
 28984                           
 28985                           ;modbus.c: 78: *tempData =(uint16_t)( (__t32>>16) & 0x0000ffff);
 28986  0A71  0834               	movf	___t32^(0+128),w
 28987  0A72  0020               	movlb	0	; select bank0
 28988  0A73  00B8               	movwf	??_getRegisterVal
 28989  0A74  0021               	movlb	1	; select bank1
 28990  0A75  0835               	movf	(___t32+1)^(0+128),w
 28991  0A76  0020               	movlb	0	; select bank0
 28992  0A77  00B9               	movwf	??_getRegisterVal+1
 28993  0A78  0021               	movlb	1	; select bank1
 28994  0A79  0836               	movf	(___t32+2)^(0+128),w
 28995  0A7A  0020               	movlb	0	; select bank0
 28996  0A7B  00BA               	movwf	??_getRegisterVal+2
 28997  0A7C  0021               	movlb	1	; select bank1
 28998  0A7D  0837               	movf	(___t32+3)^(0+128),w
 28999  0A7E  0020               	movlb	0	; select bank0
 29000  0A7F  00BB               	movwf	??_getRegisterVal+3
 29001  0A80  3010               	movlw	16
 29002  0A81                     u12975:	
 29003  0A81  36BB               	lsrf	??_getRegisterVal+3,f
 29004  0A82  0CBA               	rrf	??_getRegisterVal+2,f
 29005  0A83  0CB9               	rrf	??_getRegisterVal+1,f
 29006  0A84  0CB8               	rrf	??_getRegisterVal,f
 29007  0A85  0B89               	decfsz	9,f
 29008  0A86  2A81               	goto	u12975
 29009  0A87  0837               	movf	getRegisterVal@tempData,w
 29010  0A88  0086               	movwf	6
 29011  0A89  0187               	clrf	7
 29012  0A8A  0838               	movf	??_getRegisterVal,w
 29013  0A8B  3FC0               	movwi [0]fsr1
 29014  0A8C  0839               	movf	??_getRegisterVal+1,w
 29015  0A8D  3FC1               	movwi [1]fsr1
 29016                           
 29017                           ;modbus.c: 79: break;
 29018  0A8E  0008               	return
 29019  0A8F                     l14267:	
 29020                           ;modbus.c: 80: case 8:
 29021                           
 29022                           
 29023                           ;modbus.c: 83: __t32=mainSystemData.totalConsumeVolume;
 29024  0A8F  3030               	movlw	48
 29025  0A90  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29026  0A91  0086               	movwf	6
 29027  0A92  3002               	movlw	2	; select bank4/5
 29028  0A93  0087               	movwf	7
 29029  0A94  3F40               	moviw [0]fsr1
 29030  0A95  0021               	movlb	1	; select bank1
 29031  0A96  00B4               	movwf	___t32^(0+128)
 29032  0A97  3F41               	moviw [1]fsr1
 29033  0A98  00B5               	movwf	(___t32+1)^(0+128)
 29034  0A99  3F42               	moviw [2]fsr1
 29035  0A9A  00B6               	movwf	(___t32+2)^(0+128)
 29036  0A9B  3F43               	moviw [3]fsr1
 29037  0A9C  00B7               	movwf	(___t32+3)^(0+128)
 29038                           
 29039                           ;modbus.c: 84: __t32 += rtVolume_m3;
 29040  0A9D  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 29041  0A9E  07B4               	addwf	___t32^(0+128),f
 29042  0A9F  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 29043  0AA0  3DB5               	addwfc	(___t32+1)^(0+128),f
 29044  0AA1  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 29045  0AA2  3DB6               	addwfc	(___t32+2)^(0+128),f
 29046  0AA3  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 29047  0AA4  3DB7               	addwfc	(___t32+3)^(0+128),f
 29048                           
 29049                           ;modbus.c: 85: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 29050  0AA5  0020               	movlb	0	; select bank0
 29051  0AA6  0837               	movf	getRegisterVal@tempData,w
 29052  0AA7  0086               	movwf	6
 29053  0AA8  0187               	clrf	7
 29054  0AA9  0021               	movlb	1	; select bank1
 29055  0AAA  0834               	movf	___t32^(0+128),w
 29056  0AAB  3FC0               	movwi [0]fsr1
 29057  0AAC  0835               	movf	(___t32+1)^(0+128),w
 29058  0AAD  3FC1               	movwi [1]fsr1
 29059                           
 29060                           ;modbus.c: 86: break;
 29061  0AAE  0008               	return
 29062  0AAF                     l14273:	
 29063                           ;modbus.c: 87: case 9:
 29064                           
 29065                           
 29066                           ;modbus.c: 90: *tempData =(uint16_t)(mainSystemData.price);
 29067  0AAF  0020               	movlb	0	; select bank0
 29068  0AB0  0837               	movf	getRegisterVal@tempData,w
 29069  0AB1  0086               	movwf	6
 29070  0AB2  0187               	clrf	7
 29071  0AB3  0024               	movlb	4	; select bank4
 29072  0AB4  0832               	movf	(_mainSystemData^(0+512)+18),w
 29073  0AB5  3FC0               	movwi [0]fsr1
 29074  0AB6  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 29075  0AB7  3FC1               	movwi [1]fsr1
 29076                           
 29077                           ;modbus.c: 91: break;
 29078  0AB8  0008               	return
 29079  0AB9                     l14275:	
 29080                           ;modbus.c: 92: case 0x0a:
 29081                           
 29082                           
 29083                           ;modbus.c: 93: __t32=mainSystemData.transferMoney;
 29084  0AB9  300C               	movlw	12
 29085  0ABA  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29086  0ABB  0086               	movwf	6
 29087  0ABC  3002               	movlw	2	; select bank4/5
 29088  0ABD  0087               	movwf	7
 29089  0ABE  3F40               	moviw [0]fsr1
 29090  0ABF  0021               	movlb	1	; select bank1
 29091  0AC0  00B4               	movwf	___t32^(0+128)
 29092  0AC1  3F41               	moviw [1]fsr1
 29093  0AC2  00B5               	movwf	(___t32+1)^(0+128)
 29094  0AC3  3F42               	moviw [2]fsr1
 29095  0AC4  00B6               	movwf	(___t32+2)^(0+128)
 29096  0AC5  3F43               	moviw [3]fsr1
 29097  0AC6  00B7               	movwf	(___t32+3)^(0+128)
 29098                           
 29099                           ;modbus.c: 94: __t32=__t32/100;
 29100  0AC7  3000               	movlw	0
 29101  0AC8  0020               	movlb	0	; select bank0
 29102  0AC9  00AB               	movwf	___lldiv@divisor+3
 29103  0ACA  3000               	movlw	0
 29104  0ACB  00AA               	movwf	___lldiv@divisor+2
 29105  0ACC  3000               	movlw	0
 29106  0ACD  00A9               	movwf	___lldiv@divisor+1
 29107  0ACE  3064               	movlw	100
 29108  0ACF  00A8               	movwf	___lldiv@divisor
 29109  0AD0  0021               	movlb	1	; select bank1
 29110  0AD1  0837               	movf	(___t32+3)^(0+128),w
 29111  0AD2  0020               	movlb	0	; select bank0
 29112  0AD3  00AF               	movwf	___lldiv@dividend+3
 29113  0AD4  0021               	movlb	1	; select bank1
 29114  0AD5  0836               	movf	(___t32+2)^(0+128),w
 29115  0AD6  0020               	movlb	0	; select bank0
 29116  0AD7  00AE               	movwf	___lldiv@dividend+2
 29117  0AD8  0021               	movlb	1	; select bank1
 29118  0AD9  0835               	movf	(___t32+1)^(0+128),w
 29119  0ADA  0020               	movlb	0	; select bank0
 29120  0ADB  00AD               	movwf	___lldiv@dividend+1
 29121  0ADC  0021               	movlb	1	; select bank1
 29122  0ADD  0834               	movf	___t32^(0+128),w
 29123  0ADE  0020               	movlb	0	; select bank0
 29124  0ADF  00AC               	movwf	___lldiv@dividend
 29125  0AE0  31AA  2245  3189   	fcall	___lldiv
 29126  0AE3  0020               	movlb	0	; select bank0
 29127  0AE4  082B               	movf	?___lldiv+3,w
 29128  0AE5  0021               	movlb	1	; select bank1
 29129  0AE6  00B7               	movwf	(___t32+3)^(0+128)
 29130  0AE7  0020               	movlb	0	; select bank0
 29131  0AE8  082A               	movf	?___lldiv+2,w
 29132  0AE9  0021               	movlb	1	; select bank1
 29133  0AEA  00B6               	movwf	(___t32+2)^(0+128)
 29134  0AEB  0020               	movlb	0	; select bank0
 29135  0AEC  0829               	movf	?___lldiv+1,w
 29136  0AED  0021               	movlb	1	; select bank1
 29137  0AEE  00B5               	movwf	(___t32+1)^(0+128)
 29138  0AEF  0020               	movlb	0	; select bank0
 29139  0AF0  0828               	movf	?___lldiv,w
 29140  0AF1  0021               	movlb	1	; select bank1
 29141  0AF2  00B4               	movwf	___t32^(0+128)
 29142                           
 29143                           ;modbus.c: 95: *tempData =(uint16_t)( (__t32>>16) & 0x0000ffff);
 29144  0AF3  0834               	movf	___t32^(0+128),w
 29145  0AF4  0020               	movlb	0	; select bank0
 29146  0AF5  00B8               	movwf	??_getRegisterVal
 29147  0AF6  0021               	movlb	1	; select bank1
 29148  0AF7  0835               	movf	(___t32+1)^(0+128),w
 29149  0AF8  0020               	movlb	0	; select bank0
 29150  0AF9  00B9               	movwf	??_getRegisterVal+1
 29151  0AFA  0021               	movlb	1	; select bank1
 29152  0AFB  0836               	movf	(___t32+2)^(0+128),w
 29153  0AFC  0020               	movlb	0	; select bank0
 29154  0AFD  00BA               	movwf	??_getRegisterVal+2
 29155  0AFE  0021               	movlb	1	; select bank1
 29156  0AFF  0837               	movf	(___t32+3)^(0+128),w
 29157  0B00  0020               	movlb	0	; select bank0
 29158  0B01  00BB               	movwf	??_getRegisterVal+3
 29159  0B02  3010               	movlw	16
 29160  0B03                     u12985:	
 29161  0B03  36BB               	lsrf	??_getRegisterVal+3,f
 29162  0B04  0CBA               	rrf	??_getRegisterVal+2,f
 29163  0B05  0CB9               	rrf	??_getRegisterVal+1,f
 29164  0B06  0CB8               	rrf	??_getRegisterVal,f
 29165  0B07  0B89               	decfsz	9,f
 29166  0B08  2B03               	goto	u12985
 29167  0B09  0837               	movf	getRegisterVal@tempData,w
 29168  0B0A  0086               	movwf	6
 29169  0B0B  0187               	clrf	7
 29170  0B0C  0838               	movf	??_getRegisterVal,w
 29171  0B0D  3FC0               	movwi [0]fsr1
 29172  0B0E  0839               	movf	??_getRegisterVal+1,w
 29173  0B0F  3FC1               	movwi [1]fsr1
 29174                           
 29175                           ;modbus.c: 96: break;
 29176  0B10  0008               	return
 29177  0B11                     l14281:	
 29178                           ;modbus.c: 97: case 0x0b:
 29179                           
 29180                           
 29181                           ;modbus.c: 98: __t32=mainSystemData.transferMoney;
 29182  0B11  300C               	movlw	12
 29183  0B12  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29184  0B13  0086               	movwf	6
 29185  0B14  3002               	movlw	2	; select bank4/5
 29186  0B15  0087               	movwf	7
 29187  0B16  3F40               	moviw [0]fsr1
 29188  0B17  0021               	movlb	1	; select bank1
 29189  0B18  00B4               	movwf	___t32^(0+128)
 29190  0B19  3F41               	moviw [1]fsr1
 29191  0B1A  00B5               	movwf	(___t32+1)^(0+128)
 29192  0B1B  3F42               	moviw [2]fsr1
 29193  0B1C  00B6               	movwf	(___t32+2)^(0+128)
 29194  0B1D  3F43               	moviw [3]fsr1
 29195  0B1E  00B7               	movwf	(___t32+3)^(0+128)
 29196                           
 29197                           ;modbus.c: 99: __t32=__t32/100;
 29198  0B1F  3000               	movlw	0
 29199  0B20  0020               	movlb	0	; select bank0
 29200  0B21  00AB               	movwf	___lldiv@divisor+3
 29201  0B22  3000               	movlw	0
 29202  0B23  00AA               	movwf	___lldiv@divisor+2
 29203  0B24  3000               	movlw	0
 29204  0B25  00A9               	movwf	___lldiv@divisor+1
 29205  0B26  3064               	movlw	100
 29206  0B27  00A8               	movwf	___lldiv@divisor
 29207  0B28  0021               	movlb	1	; select bank1
 29208  0B29  0837               	movf	(___t32+3)^(0+128),w
 29209  0B2A  0020               	movlb	0	; select bank0
 29210  0B2B  00AF               	movwf	___lldiv@dividend+3
 29211  0B2C  0021               	movlb	1	; select bank1
 29212  0B2D  0836               	movf	(___t32+2)^(0+128),w
 29213  0B2E  0020               	movlb	0	; select bank0
 29214  0B2F  00AE               	movwf	___lldiv@dividend+2
 29215  0B30  0021               	movlb	1	; select bank1
 29216  0B31  0835               	movf	(___t32+1)^(0+128),w
 29217  0B32  0020               	movlb	0	; select bank0
 29218  0B33  00AD               	movwf	___lldiv@dividend+1
 29219  0B34  0021               	movlb	1	; select bank1
 29220  0B35  0834               	movf	___t32^(0+128),w
 29221  0B36  0020               	movlb	0	; select bank0
 29222  0B37  00AC               	movwf	___lldiv@dividend
 29223  0B38  31AA  2245         	fcall	___lldiv
 29224  0B3A  0020               	movlb	0	; select bank0
 29225  0B3B  082B               	movf	?___lldiv+3,w
 29226  0B3C  0021               	movlb	1	; select bank1
 29227  0B3D  00B7               	movwf	(___t32+3)^(0+128)
 29228  0B3E  0020               	movlb	0	; select bank0
 29229  0B3F  082A               	movf	?___lldiv+2,w
 29230  0B40  0021               	movlb	1	; select bank1
 29231  0B41  00B6               	movwf	(___t32+2)^(0+128)
 29232  0B42  0020               	movlb	0	; select bank0
 29233  0B43  0829               	movf	?___lldiv+1,w
 29234  0B44  0021               	movlb	1	; select bank1
 29235  0B45  00B5               	movwf	(___t32+1)^(0+128)
 29236  0B46  0020               	movlb	0	; select bank0
 29237  0B47  0828               	movf	?___lldiv,w
 29238  0B48  0021               	movlb	1	; select bank1
 29239  0B49  00B4               	movwf	___t32^(0+128)
 29240                           
 29241                           ;modbus.c: 100: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 29242  0B4A  0020               	movlb	0	; select bank0
 29243  0B4B  0837               	movf	getRegisterVal@tempData,w
 29244  0B4C  0086               	movwf	6
 29245  0B4D  0187               	clrf	7
 29246  0B4E  0021               	movlb	1	; select bank1
 29247  0B4F  0834               	movf	___t32^(0+128),w
 29248  0B50  3FC0               	movwi [0]fsr1
 29249  0B51  0835               	movf	(___t32+1)^(0+128),w
 29250  0B52  3FC1               	movwi [1]fsr1
 29251                           
 29252                           ;modbus.c: 101: break;
 29253  0B53  0008               	return
 29254  0B54                     l14287:	
 29255                           ;modbus.c: 102: case 0x0c:
 29256                           
 29257                           
 29258                           ;modbus.c: 103: *tempData =(uint16_t)(mainSystemData.transferTime);
 29259  0B54  0020               	movlb	0	; select bank0
 29260  0B55  0837               	movf	getRegisterVal@tempData,w
 29261  0B56  0086               	movwf	6
 29262  0B57  0187               	clrf	7
 29263  0B58  0024               	movlb	4	; select bank4
 29264  0B59  0830               	movf	(_mainSystemData^(0+512)+16),w
 29265  0B5A  3FC0               	movwi [0]fsr1
 29266  0B5B  0831               	movf	((_mainSystemData+1)^(0+512)+16),w
 29267  0B5C  3FC1               	movwi [1]fsr1
 29268                           
 29269                           ;modbus.c: 108: }
 29270                           
 29271                           ;modbus.c: 106: break;
 29272                           
 29273                           ;modbus.c: 105: default:
 29274                           
 29275                           ;modbus.c: 104: break;
 29276  0B5D  0008               	return
 29277  0B5E                     l14291:	
 29278  0B5E  300F               	movlw	15
 29279  0B5F  0020               	movlb	0	; select bank0
 29280  0B60  053E               	andwf	getRegisterVal@tempAddr,w
 29281  0B61  00B8               	movwf	??_getRegisterVal
 29282  0B62  3000               	movlw	0
 29283  0B63  053F               	andwf	getRegisterVal@tempAddr+1,w
 29284  0B64  00B9               	movwf	??_getRegisterVal+1
 29285                           
 29286                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 29287                           ; Switch size 1, requested type "space"
 29288                           ; Number of cases is 1, Range of values is 0 to 0
 29289                           ; switch strategies available:
 29290                           ; Name         Instructions Cycles
 29291                           ; simple_byte            4     3 (average)
 29292                           ; direct_byte            8     6 (fixed)
 29293                           ; jumptable            260     6 (fixed)
 29294                           ;	Chosen strategy is simple_byte
 29295  0B65  0839               	movf	??_getRegisterVal+1,w
 29296  0B66  3A00               	xorlw	0	; case 0
 29297  0B67  1903               	skipnz
 29298  0B68  2B6A               	goto	l17361
 29299  0B69  2B77               	goto	l778
 29300  0B6A                     l17361:	
 29301                           
 29302                           ; Switch size 1, requested type "space"
 29303                           ; Number of cases is 12, Range of values is 1 to 12
 29304                           ; switch strategies available:
 29305                           ; Name         Instructions Cycles
 29306                           ; direct_byte           33     9 (fixed)
 29307                           ; simple_byte           37    19 (average)
 29308                           ; jumptable            263     9 (fixed)
 29309                           ;	Chosen strategy is direct_byte
 29310  0B6A  0838               	movf	??_getRegisterVal,w
 29311  0B6B  3EFF               	addlw	-1
 29312  0B6C  1C03               	skipc
 29313  0B6D  0008               	return
 29314  0B6E  0084               	movwf	4
 29315  0B6F  300C               	movlw	12
 29316  0B70  0204               	subwf	4,w
 29317  0B71  1803               	skipnc
 29318  0B72  0008               	return
 29319  0B73  31B8               	movlp	high S17363
 29320  0B74  3504               	lslf	4,w
 29321  0B75  3E51               	addlw	low S17363
 29322  0B76  0082               	movwf	2
 29323  0B77                     l778:	
 29324                           ;modbus.c: 109: return result;
 29325                           ;	Return value of _getRegisterVal is never used
 29326                           
 29327  0B77  0008               	return
 29328  0B78                     __end_of_getRegisterVal:	
 29329                           
 29330                           	psect	swtext3
 29331  3851                     __pswtext3:	
 29332  3851                     S17363:	
 29333  3851  3189  295A         	ljmp	l14239
 29334  3853  3189  2962         	ljmp	l14241
 29335  3855  3189  2970         	ljmp	l14243
 29336  3857  3189  2977         	ljmp	l14245
 29337  3859  3189  29DD         	ljmp	l14253
 29338  385B  318A  2A27         	ljmp	l14257
 29339  385D  318A  2A5B         	ljmp	l14261
 29340  385F  318A  2A8F         	ljmp	l14267
 29341  3861  318A  2AAF         	ljmp	l14273
 29342  3863  318A  2AB9         	ljmp	l14275
 29343  3865  318B  2B11         	ljmp	l14281
 29344  3867  318B  2B54         	ljmp	l14287
 29345                           
 29346                           	psect	text98
 29347  2013                     __ptext98:	
 29348 ;; *************** function ___aldiv *****************
 29349 ;; Defined at:
 29350 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
 29351 ;; Parameters:    Size  Location     Type
 29352 ;;  divisor         4    0[BANK0 ] long 
 29353 ;;  dividend        4    4[BANK0 ] long 
 29354 ;; Auto vars:     Size  Location     Type
 29355 ;;  quotient        4   10[BANK0 ] long 
 29356 ;;  sign            1    9[BANK0 ] unsigned char 
 29357 ;;  counter         1    8[BANK0 ] unsigned char 
 29358 ;; Return value:  Size  Location     Type
 29359 ;;                  4    0[BANK0 ] long 
 29360 ;; Registers used:
 29361 ;;		wreg, status,2, status,0
 29362 ;; Tracked objects:
 29363 ;;		On entry : 0/0
 29364 ;;		On exit  : 0/0
 29365 ;;		Unchanged: 0/0
 29366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29367 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 29368 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 29369 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29370 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0
 29371 ;;Total ram usage:       15 bytes
 29372 ;; Hardware stack levels used:    1
 29373 ;; Hardware stack levels required when called:    2
 29374 ;; This function calls:
 29375 ;;		Nothing
 29376 ;; This function is called by:
 29377 ;;		_ui_uint32_2_str
 29378 ;;		_ui_key_process_enter
 29379 ;;		_ui_disp_balance_and_volume
 29380 ;;		_getRegisterVal
 29381 ;; This function uses a non-reentrant model
 29382 ;;
 29383                           
 29384                           
 29385                           ;psect for function ___aldiv
 29386  2013                     ___aldiv:	
 29387                           
 29388                           ;incstack = 0
 29389                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 29390  2013  0020               	movlb	0	; select bank0
 29391  2014  01A9               	clrf	___aldiv@sign
 29392  2015  1FA3               	btfss	___aldiv@divisor+3,7
 29393  2016  2824               	goto	l2752
 29394  2017  09A0               	comf	___aldiv@divisor,f
 29395  2018  09A1               	comf	___aldiv@divisor+1,f
 29396  2019  09A2               	comf	___aldiv@divisor+2,f
 29397  201A  09A3               	comf	___aldiv@divisor+3,f
 29398  201B  0AA0               	incf	___aldiv@divisor,f
 29399  201C  1903               	skipnz
 29400  201D  0AA1               	incf	___aldiv@divisor+1,f
 29401  201E  1903               	skipnz
 29402  201F  0AA2               	incf	___aldiv@divisor+2,f
 29403  2020  1903               	skipnz
 29404  2021  0AA3               	incf	___aldiv@divisor+3,f
 29405  2022  01A9               	clrf	___aldiv@sign
 29406  2023  0AA9               	incf	___aldiv@sign,f
 29407  2024                     l2752:	
 29408  2024  1FA7               	btfss	___aldiv@dividend+3,7
 29409  2025  2835               	goto	l12709
 29410  2026  09A4               	comf	___aldiv@dividend,f
 29411  2027  09A5               	comf	___aldiv@dividend+1,f
 29412  2028  09A6               	comf	___aldiv@dividend+2,f
 29413  2029  09A7               	comf	___aldiv@dividend+3,f
 29414  202A  0AA4               	incf	___aldiv@dividend,f
 29415  202B  1903               	skipnz
 29416  202C  0AA5               	incf	___aldiv@dividend+1,f
 29417  202D  1903               	skipnz
 29418  202E  0AA6               	incf	___aldiv@dividend+2,f
 29419  202F  1903               	skipnz
 29420  2030  0AA7               	incf	___aldiv@dividend+3,f
 29421  2031  3001               	movlw	1
 29422  2032  00F3               	movwf	??___aldiv
 29423  2033  0873               	movf	??___aldiv,w
 29424  2034  06A9               	xorwf	___aldiv@sign,f
 29425  2035                     l12709:	
 29426  2035  3000               	movlw	0
 29427  2036  00AD               	movwf	___aldiv@quotient+3
 29428  2037  3000               	movlw	0
 29429  2038  00AC               	movwf	___aldiv@quotient+2
 29430  2039  3000               	movlw	0
 29431  203A  00AB               	movwf	___aldiv@quotient+1
 29432  203B  3000               	movlw	0
 29433  203C  00AA               	movwf	___aldiv@quotient
 29434  203D  0823               	movf	___aldiv@divisor+3,w
 29435  203E  0422               	iorwf	___aldiv@divisor+2,w
 29436  203F  0421               	iorwf	___aldiv@divisor+1,w
 29437  2040  0420               	iorwf	___aldiv@divisor,w
 29438  2041  1903               	skipnz
 29439  2042  287E               	goto	l12731
 29440  2043  01A8               	clrf	___aldiv@counter
 29441  2044  0AA8               	incf	___aldiv@counter,f
 29442  2045                     l12717:	
 29443  2045  1BA3               	btfsc	___aldiv@divisor+3,7
 29444  2046  2853               	goto	l12719
 29445  2047  3001               	movlw	1
 29446  2048                     u11125:	
 29447  2048  35A0               	lslf	___aldiv@divisor,f
 29448  2049  0DA1               	rlf	___aldiv@divisor+1,f
 29449  204A  0DA2               	rlf	___aldiv@divisor+2,f
 29450  204B  0DA3               	rlf	___aldiv@divisor+3,f
 29451  204C  0B89               	decfsz	9,f
 29452  204D  2848               	goto	u11125
 29453  204E  3001               	movlw	1
 29454  204F  00F3               	movwf	??___aldiv
 29455  2050  0873               	movf	??___aldiv,w
 29456  2051  07A8               	addwf	___aldiv@counter,f
 29457  2052  2845               	goto	l12717
 29458  2053                     l12719:	
 29459  2053  3001               	movlw	1
 29460  2054                     u11145:	
 29461  2054  35AA               	lslf	___aldiv@quotient,f
 29462  2055  0DAB               	rlf	___aldiv@quotient+1,f
 29463  2056  0DAC               	rlf	___aldiv@quotient+2,f
 29464  2057  0DAD               	rlf	___aldiv@quotient+3,f
 29465  2058  0B89               	decfsz	9,f
 29466  2059  2854               	goto	u11145
 29467  205A  0823               	movf	___aldiv@divisor+3,w
 29468  205B  0227               	subwf	___aldiv@dividend+3,w
 29469  205C  1D03               	skipz
 29470  205D  2868               	goto	u11155
 29471  205E  0822               	movf	___aldiv@divisor+2,w
 29472  205F  0226               	subwf	___aldiv@dividend+2,w
 29473  2060  1D03               	skipz
 29474  2061  2868               	goto	u11155
 29475  2062  0821               	movf	___aldiv@divisor+1,w
 29476  2063  0225               	subwf	___aldiv@dividend+1,w
 29477  2064  1D03               	skipz
 29478  2065  2868               	goto	u11155
 29479  2066  0820               	movf	___aldiv@divisor,w
 29480  2067  0224               	subwf	___aldiv@dividend,w
 29481  2068                     u11155:	
 29482  2068  1C03               	skipc
 29483  2069  2873               	goto	l12727
 29484  206A  0820               	movf	___aldiv@divisor,w
 29485  206B  02A4               	subwf	___aldiv@dividend,f
 29486  206C  0821               	movf	___aldiv@divisor+1,w
 29487  206D  3BA5               	subwfb	___aldiv@dividend+1,f
 29488  206E  0822               	movf	___aldiv@divisor+2,w
 29489  206F  3BA6               	subwfb	___aldiv@dividend+2,f
 29490  2070  0823               	movf	___aldiv@divisor+3,w
 29491  2071  3BA7               	subwfb	___aldiv@dividend+3,f
 29492  2072  142A               	bsf	___aldiv@quotient,0
 29493  2073                     l12727:	
 29494  2073  3001               	movlw	1
 29495  2074                     u11165:	
 29496  2074  36A3               	lsrf	___aldiv@divisor+3,f
 29497  2075  0CA2               	rrf	___aldiv@divisor+2,f
 29498  2076  0CA1               	rrf	___aldiv@divisor+1,f
 29499  2077  0CA0               	rrf	___aldiv@divisor,f
 29500  2078  0B89               	decfsz	9,f
 29501  2079  2874               	goto	u11165
 29502  207A  3001               	movlw	1
 29503  207B  02A8               	subwf	___aldiv@counter,f
 29504  207C  1D03               	btfss	3,2
 29505  207D  2853               	goto	l12719
 29506  207E                     l12731:	
 29507  207E  0829               	movf	___aldiv@sign,w
 29508  207F  1903               	btfsc	3,2
 29509  2080  288C               	goto	l12735
 29510  2081  09AA               	comf	___aldiv@quotient,f
 29511  2082  09AB               	comf	___aldiv@quotient+1,f
 29512  2083  09AC               	comf	___aldiv@quotient+2,f
 29513  2084  09AD               	comf	___aldiv@quotient+3,f
 29514  2085  0AAA               	incf	___aldiv@quotient,f
 29515  2086  1903               	skipnz
 29516  2087  0AAB               	incf	___aldiv@quotient+1,f
 29517  2088  1903               	skipnz
 29518  2089  0AAC               	incf	___aldiv@quotient+2,f
 29519  208A  1903               	skipnz
 29520  208B  0AAD               	incf	___aldiv@quotient+3,f
 29521  208C                     l12735:	
 29522  208C  082D               	movf	___aldiv@quotient+3,w
 29523  208D  00A3               	movwf	?___aldiv+3
 29524  208E  082C               	movf	___aldiv@quotient+2,w
 29525  208F  00A2               	movwf	?___aldiv+2
 29526  2090  082B               	movf	___aldiv@quotient+1,w
 29527  2091  00A1               	movwf	?___aldiv+1
 29528  2092  082A               	movf	___aldiv@quotient,w
 29529  2093  00A0               	movwf	?___aldiv
 29530  2094  0008               	return
 29531  2095                     __end_of___aldiv:	
 29532                           
 29533                           	psect	text99
 29534  3B1D                     __ptext99:	
 29535 ;; *************** function _mfapi_pcd_init *****************
 29536 ;; Defined at:
 29537 ;;		line 63 in file "src/nfc/apl/mfrc522_apl.c"
 29538 ;; Parameters:    Size  Location     Type
 29539 ;;		None
 29540 ;; Auto vars:     Size  Location     Type
 29541 ;;  v               1   10[BANK0 ] unsigned char 
 29542 ;; Return value:  Size  Location     Type
 29543 ;;                  1    wreg      unsigned char 
 29544 ;; Registers used:
 29545 ;;		wreg, status,2, status,0, pclath, cstack
 29546 ;; Tracked objects:
 29547 ;;		On entry : 0/0
 29548 ;;		On exit  : 0/0
 29549 ;;		Unchanged: 0/0
 29550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29555 ;;Total ram usage:        2 bytes
 29556 ;; Hardware stack levels used:    1
 29557 ;; Hardware stack levels required when called:    7
 29558 ;; This function calls:
 29559 ;;		_mfrc522_bal_read_reg
 29560 ;;		_mfrc522_hal_init
 29561 ;; This function is called by:
 29562 ;;		_main
 29563 ;; This function uses a non-reentrant model
 29564 ;;
 29565                           
 29566                           
 29567                           ;psect for function _mfapi_pcd_init
 29568  3B1D                     _mfapi_pcd_init:	
 29569                           
 29570                           ;mfrc522_apl.c: 64: uint8_t v;
 29571                           ;mfrc522_apl.c: 65: mfrc522_hal_init();
 29572                           
 29573                           ;incstack = 0
 29574                           ; Regs used in _mfapi_pcd_init: [wreg+status,2+status,0+pclath+cstack]
 29575  3B1D  31AE  2690  31BB   	fcall	_mfrc522_hal_init
 29576                           
 29577                           ;mfrc522_apl.c: 69: v = mfrc522_bal_read_reg(VersionReg);
 29578  3B20  3037               	movlw	55
 29579  3B21  31BD  258A         	fcall	_mfrc522_bal_read_reg
 29580  3B23  0020               	movlb	0	; select bank0
 29581  3B24  00A9               	movwf	??_mfapi_pcd_init
 29582  3B25  0829               	movf	??_mfapi_pcd_init,w
 29583  3B26  00AA               	movwf	mfapi_pcd_init@v
 29584                           
 29585                           ;mfrc522_apl.c: 71: return 0;
 29586                           ;	Return value of _mfapi_pcd_init is never used
 29587  3B27  0008               	return
 29588  3B28                     __end_of_mfapi_pcd_init:	
 29589                           ;mfrc522_apl.c: 72: }
 29590                           ;mfrc522_apl.c: 73: return 1;
 29591                           ;	Return value of _mfapi_pcd_init is never used
 29592                           
 29593                           
 29594                           	psect	text100
 29595  2E90                     __ptext100:	
 29596 ;; *************** function _mfrc522_hal_init *****************
 29597 ;; Defined at:
 29598 ;;		line 99 in file "src/nfc/hal/mfrc522_hal.c"
 29599 ;; Parameters:    Size  Location     Type
 29600 ;;		None
 29601 ;; Auto vars:     Size  Location     Type
 29602 ;;		None
 29603 ;; Return value:  Size  Location     Type
 29604 ;;                  1    wreg      void 
 29605 ;; Registers used:
 29606 ;;		wreg, status,2, status,0, pclath, cstack
 29607 ;; Tracked objects:
 29608 ;;		On entry : 0/0
 29609 ;;		On exit  : 0/0
 29610 ;;		Unchanged: 0/0
 29611 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29614 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29615 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29616 ;;Total ram usage:        1 bytes
 29617 ;; Hardware stack levels used:    1
 29618 ;; Hardware stack levels required when called:    6
 29619 ;; This function calls:
 29620 ;;		_delay
 29621 ;;		_mfrc522_bal_write_reg
 29622 ;;		_mfrc522_hal_antenna_on
 29623 ;;		_mfrc522_hal_reset_sf
 29624 ;;		_mfrc522_hal_set_antenna_gain
 29625 ;; This function is called by:
 29626 ;;		_mfapi_pcd_init
 29627 ;; This function uses a non-reentrant model
 29628 ;;
 29629                           
 29630                           
 29631                           ;psect for function _mfrc522_hal_init
 29632  2E90                     _mfrc522_hal_init:	
 29633                           
 29634                           ;incstack = 0
 29635                           ; Regs used in _mfrc522_hal_init: [wreg+status,2+status,0+pclath+cstack]
 29636                           ;mfrc522_hal.c: 102: do{ do { TRISBbits.TRISB5 = 0; } while(0); do { TRISCbits.TRISC2 = 
      +                          0; } while(0); do { TRISCbits.TRISC3 = 0; } while(0); do { TRISCbits.TRISC4 = 0; } while
      +                          (0); do { TRISCbits.TRISC5 = 1; } while(0); do { LATBbits.LATB5 = 1; } while(0); do { LA
      +                          TCbits.
 29637  2E90  0021               	movlb	1	; select bank1
 29638  2E91  128D               	bcf	13,5	;volatile
 29639  2E92  110E               	bcf	14,2	;volatile
 29640  2E93  118E               	bcf	14,3	;volatile
 29641  2E94  120E               	bcf	14,4	;volatile
 29642  2E95  168E               	bsf	14,5	;volatile
 29643  2E96  0022               	movlb	2	; select bank2
 29644  2E97  168D               	bsf	13,5	;volatile
 29645  2E98  150E               	bsf	14,2	;volatile
 29646  2E99  158E               	bsf	14,3	;volatile
 29647  2E9A  168E               	bsf	14,5	;volatile
 29648                           
 29649                           ;mfrc522_hal.c: 104: ;;
 29650                           ;mfrc522_hal.c: 105: delay(1847);
 29651  2E9B  3037               	movlw	55
 29652  2E9C  00F3               	movwf	delay@t
 29653  2E9D  3007               	movlw	7
 29654  2E9E  00F4               	movwf	delay@t+1
 29655  2E9F  31BB  2363  31AE   	fcall	_delay
 29656                           
 29657                           ;mfrc522_hal.c: 107: do { LATBbits.LATB5 = 0; } while(0);;;;
 29658  2EA2  0022               	movlb	2	; select bank2
 29659  2EA3  128D               	bcf	13,5	;volatile
 29660                           
 29661                           ;mfrc522_hal.c: 108: delay(1847);
 29662  2EA4  3037               	movlw	55
 29663  2EA5  00F3               	movwf	delay@t
 29664  2EA6  3007               	movlw	7
 29665  2EA7  00F4               	movwf	delay@t+1
 29666  2EA8  31BB  2363  31AE   	fcall	_delay
 29667                           
 29668                           ;mfrc522_hal.c: 109: do { LATBbits.LATB5 = 1; } while(0);;;;
 29669  2EAB  0022               	movlb	2	; select bank2
 29670  2EAC  168D               	bsf	13,5	;volatile
 29671                           
 29672                           ;mfrc522_hal.c: 111: delay(1847);
 29673  2EAD  3037               	movlw	55
 29674  2EAE  00F3               	movwf	delay@t
 29675  2EAF  3007               	movlw	7
 29676  2EB0  00F4               	movwf	delay@t+1
 29677  2EB1  31BB  2363  31AE   	fcall	_delay
 29678                           
 29679                           ;mfrc522_hal.c: 112: mfrc522_hal_reset_sf();
 29680  2EB4  31BA  22F8  31AE   	fcall	_mfrc522_hal_reset_sf
 29681                           
 29682                           ;mfrc522_hal.c: 113: delay(1847);
 29683  2EB7  3037               	movlw	55
 29684  2EB8  00F3               	movwf	delay@t
 29685  2EB9  3007               	movlw	7
 29686  2EBA  00F4               	movwf	delay@t+1
 29687  2EBB  31BB  2363  31AE   	fcall	_delay
 29688                           
 29689                           ;mfrc522_hal.c: 116: mfrc522_bal_write_reg(TModeReg, 0x80);
 29690  2EBE  3080               	movlw	128
 29691  2EBF  0020               	movlb	0	; select bank0
 29692  2EC0  00A8               	movwf	??_mfrc522_hal_init
 29693  2EC1  0828               	movf	??_mfrc522_hal_init,w
 29694  2EC2  00F7               	movwf	mfrc522_bal_write_reg@x
 29695  2EC3  302A               	movlw	42
 29696  2EC4  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29697                           
 29698                           ;mfrc522_hal.c: 117: mfrc522_bal_write_reg(TPrescalerReg, 0xA9);
 29699  2EC7  30A9               	movlw	169
 29700  2EC8  0020               	movlb	0	; select bank0
 29701  2EC9  00A8               	movwf	??_mfrc522_hal_init
 29702  2ECA  0828               	movf	??_mfrc522_hal_init,w
 29703  2ECB  00F7               	movwf	mfrc522_bal_write_reg@x
 29704  2ECC  302B               	movlw	43
 29705  2ECD  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29706                           
 29707                           ;mfrc522_hal.c: 118: mfrc522_bal_write_reg(TReloadRegH, 0x04);
 29708  2ED0  3004               	movlw	4
 29709  2ED1  0020               	movlb	0	; select bank0
 29710  2ED2  00A8               	movwf	??_mfrc522_hal_init
 29711  2ED3  0828               	movf	??_mfrc522_hal_init,w
 29712  2ED4  00F7               	movwf	mfrc522_bal_write_reg@x
 29713  2ED5  302C               	movlw	44
 29714  2ED6  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29715                           
 29716                           ;mfrc522_hal.c: 119: mfrc522_bal_write_reg(TReloadRegL, 0xE8);
 29717  2ED9  30E8               	movlw	232
 29718  2EDA  0020               	movlb	0	; select bank0
 29719  2EDB  00A8               	movwf	??_mfrc522_hal_init
 29720  2EDC  0828               	movf	??_mfrc522_hal_init,w
 29721  2EDD  00F7               	movwf	mfrc522_bal_write_reg@x
 29722  2EDE  302D               	movlw	45
 29723  2EDF  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29724                           
 29725                           ;mfrc522_hal.c: 120: mfrc522_bal_write_reg(TxASKReg, 0x40);
 29726  2EE2  3040               	movlw	64
 29727  2EE3  0020               	movlb	0	; select bank0
 29728  2EE4  00A8               	movwf	??_mfrc522_hal_init
 29729  2EE5  0828               	movf	??_mfrc522_hal_init,w
 29730  2EE6  00F7               	movwf	mfrc522_bal_write_reg@x
 29731  2EE7  3015               	movlw	21
 29732  2EE8  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29733                           
 29734                           ;mfrc522_hal.c: 121: mfrc522_bal_write_reg(ModeReg, 0x3D);
 29735  2EEB  303D               	movlw	61
 29736  2EEC  0020               	movlb	0	; select bank0
 29737  2EED  00A8               	movwf	??_mfrc522_hal_init
 29738  2EEE  0828               	movf	??_mfrc522_hal_init,w
 29739  2EEF  00F7               	movwf	mfrc522_bal_write_reg@x
 29740  2EF0  3011               	movlw	17
 29741  2EF1  31BB  23CC  31AE   	fcall	_mfrc522_bal_write_reg
 29742                           
 29743                           ;mfrc522_hal.c: 122: delay(1847);
 29744  2EF4  3037               	movlw	55
 29745  2EF5  00F3               	movwf	delay@t
 29746  2EF6  3007               	movlw	7
 29747  2EF7  00F4               	movwf	delay@t+1
 29748  2EF8  31BB  2363  31AE   	fcall	_delay
 29749                           
 29750                           ;mfrc522_hal.c: 124: mfrc522_hal_set_antenna_gain(RxGain_avg);
 29751  2EFB  3040               	movlw	64
 29752  2EFC  31BD  25BE  31AE   	fcall	_mfrc522_hal_set_antenna_gain
 29753                           
 29754                           ;mfrc522_hal.c: 125: mfrc522_hal_antenna_on();
 29755  2EFF  31BD  2559  31AE   	fcall	_mfrc522_hal_antenna_on
 29756                           
 29757                           ;mfrc522_hal.c: 126: delay(1847);
 29758  2F02  3037               	movlw	55
 29759  2F03  00F3               	movwf	delay@t
 29760  2F04  3007               	movlw	7
 29761  2F05  00F4               	movwf	delay@t+1
 29762  2F06  31BB  2363         	fcall	_delay
 29763  2F08  0008               	return
 29764  2F09                     __end_of_mfrc522_hal_init:	
 29765                           
 29766                           	psect	text101
 29767  3DBE                     __ptext101:	
 29768 ;; *************** function _mfrc522_hal_set_antenna_gain *****************
 29769 ;; Defined at:
 29770 ;;		line 160 in file "src/nfc/hal/mfrc522_hal.c"
 29771 ;; Parameters:    Size  Location     Type
 29772 ;;  gain            1    wreg     unsigned char 
 29773 ;; Auto vars:     Size  Location     Type
 29774 ;;  gain            1    7[BANK0 ] unsigned char 
 29775 ;; Return value:  Size  Location     Type
 29776 ;;                  1    wreg      void 
 29777 ;; Registers used:
 29778 ;;		wreg, status,2, status,0, pclath, cstack
 29779 ;; Tracked objects:
 29780 ;;		On entry : 0/0
 29781 ;;		On exit  : 0/0
 29782 ;;		Unchanged: 0/0
 29783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29786 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29787 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29788 ;;Total ram usage:        2 bytes
 29789 ;; Hardware stack levels used:    1
 29790 ;; Hardware stack levels required when called:    5
 29791 ;; This function calls:
 29792 ;;		_mfrc522_bal_clr_bit_reg
 29793 ;;		_mfrc522_bal_set_bit_reg
 29794 ;;		_mfrc522_hal_get_antenna_gain
 29795 ;; This function is called by:
 29796 ;;		_mfrc522_hal_init
 29797 ;; This function uses a non-reentrant model
 29798 ;;
 29799                           
 29800                           
 29801                           ;psect for function _mfrc522_hal_set_antenna_gain
 29802  3DBE                     _mfrc522_hal_set_antenna_gain:	
 29803                           
 29804                           ;incstack = 0
 29805                           ; Regs used in _mfrc522_hal_set_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 29806                           ;mfrc522_hal_set_antenna_gain@gain stored from wreg
 29807  3DBE  0020               	movlb	0	; select bank0
 29808  3DBF  00A7               	movwf	mfrc522_hal_set_antenna_gain@gain
 29809                           
 29810                           ;mfrc522_hal.c: 162: if (mfrc522_hal_get_antenna_gain() != gain)
 29811  3DC0  31BB  239D  31BD   	fcall	_mfrc522_hal_get_antenna_gain
 29812  3DC3  0020               	movlb	0	; select bank0
 29813  3DC4  0627               	xorwf	mfrc522_hal_set_antenna_gain@gain,w
 29814  3DC5  1903               	skipnz
 29815  3DC6  0008               	return
 29816                           
 29817                           ;mfrc522_hal.c: 163: {
 29818                           ;mfrc522_hal.c: 164: mfrc522_bal_clr_bit_reg(RFCfgReg, (0x07<<4));
 29819  3DC7  3070               	movlw	112
 29820  3DC8  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 29821  3DC9  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 29822  3DCA  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 29823  3DCB  3026               	movlw	38
 29824  3DCC  31BC  24FC  31BD   	fcall	_mfrc522_bal_clr_bit_reg
 29825                           
 29826                           ;mfrc522_hal.c: 165: mfrc522_bal_set_bit_reg(RFCfgReg, gain & (0x07<<4));
 29827  3DCF  0020               	movlb	0	; select bank0
 29828  3DD0  0827               	movf	mfrc522_hal_set_antenna_gain@gain,w
 29829  3DD1  3970               	andlw	112
 29830  3DD2  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 29831  3DD3  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 29832  3DD4  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 29833  3DD5  3026               	movlw	38
 29834  3DD6  31BD  2513         	fcall	_mfrc522_bal_set_bit_reg
 29835  3DD8  0008               	return
 29836  3DD9                     __end_of_mfrc522_hal_set_antenna_gain:	
 29837                           
 29838                           	psect	text102
 29839  3B9D                     __ptext102:	
 29840 ;; *************** function _mfrc522_hal_get_antenna_gain *****************
 29841 ;; Defined at:
 29842 ;;		line 152 in file "src/nfc/hal/mfrc522_hal.c"
 29843 ;; Parameters:    Size  Location     Type
 29844 ;;		None
 29845 ;; Auto vars:     Size  Location     Type
 29846 ;;  ret             1    3[BANK0 ] unsigned char 
 29847 ;; Return value:  Size  Location     Type
 29848 ;;                  1    wreg      unsigned char 
 29849 ;; Registers used:
 29850 ;;		wreg, status,2, status,0, pclath, cstack
 29851 ;; Tracked objects:
 29852 ;;		On entry : 0/0
 29853 ;;		On exit  : 0/0
 29854 ;;		Unchanged: 0/0
 29855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29857 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29858 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29859 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29860 ;;Total ram usage:        2 bytes
 29861 ;; Hardware stack levels used:    1
 29862 ;; Hardware stack levels required when called:    4
 29863 ;; This function calls:
 29864 ;;		_mfrc522_bal_read_reg
 29865 ;; This function is called by:
 29866 ;;		_mfrc522_hal_set_antenna_gain
 29867 ;; This function uses a non-reentrant model
 29868 ;;
 29869                           
 29870                           
 29871                           ;psect for function _mfrc522_hal_get_antenna_gain
 29872  3B9D                     _mfrc522_hal_get_antenna_gain:	
 29873                           
 29874                           ;mfrc522_hal.c: 154: uint8_t ret=0;
 29875                           
 29876                           ;incstack = 0
 29877                           ; Regs used in _mfrc522_hal_get_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 29878  3B9D  0020               	movlb	0	; select bank0
 29879  3B9E  01A3               	clrf	mfrc522_hal_get_antenna_gain@ret
 29880                           
 29881                           ;mfrc522_hal.c: 155: ret=mfrc522_bal_read_reg(RFCfgReg);
 29882  3B9F  3026               	movlw	38
 29883  3BA0  31BD  258A         	fcall	_mfrc522_bal_read_reg
 29884  3BA2  0020               	movlb	0	; select bank0
 29885  3BA3  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 29886  3BA4  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 29887  3BA5  00A3               	movwf	mfrc522_hal_get_antenna_gain@ret
 29888                           
 29889                           ;mfrc522_hal.c: 156: ret &= (0x07<<4);
 29890  3BA6  3070               	movlw	112
 29891  3BA7  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 29892  3BA8  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 29893  3BA9  05A3               	andwf	mfrc522_hal_get_antenna_gain@ret,f
 29894                           
 29895                           ;mfrc522_hal.c: 157: return ret;
 29896  3BAA  0823               	movf	mfrc522_hal_get_antenna_gain@ret,w
 29897  3BAB  0008               	return
 29898  3BAC                     __end_of_mfrc522_hal_get_antenna_gain:	
 29899                           
 29900                           	psect	text103
 29901  3D13                     __ptext103:	
 29902 ;; *************** function _mfrc522_bal_set_bit_reg *****************
 29903 ;; Defined at:
 29904 ;;		line 136 in file "src/nfc/bal/mfrc522_bal.c"
 29905 ;; Parameters:    Size  Location     Type
 29906 ;;  reg             1    wreg     unsigned char 
 29907 ;;  bits            1    2[BANK0 ] unsigned char 
 29908 ;; Auto vars:     Size  Location     Type
 29909 ;;  reg             1    5[BANK0 ] unsigned char 
 29910 ;;  tmp             1    4[BANK0 ] unsigned char 
 29911 ;; Return value:  Size  Location     Type
 29912 ;;                  1    wreg      void 
 29913 ;; Registers used:
 29914 ;;		wreg, status,2, status,0, pclath, cstack
 29915 ;; Tracked objects:
 29916 ;;		On entry : 0/0
 29917 ;;		On exit  : 0/0
 29918 ;;		Unchanged: 0/0
 29919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29923 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 29924 ;;Total ram usage:        4 bytes
 29925 ;; Hardware stack levels used:    1
 29926 ;; Hardware stack levels required when called:    4
 29927 ;; This function calls:
 29928 ;;		_mfrc522_bal_read_reg
 29929 ;;		_mfrc522_bal_write_reg
 29930 ;; This function is called by:
 29931 ;;		_mfrc522_hal_calculate_crc
 29932 ;;		_mfrc522_hal_set_antenna_gain
 29933 ;;		_pcd_comm_with_picc
 29934 ;; This function uses a non-reentrant model
 29935 ;;
 29936                           
 29937                           
 29938                           ;psect for function _mfrc522_bal_set_bit_reg
 29939  3D13                     _mfrc522_bal_set_bit_reg:	
 29940                           
 29941                           ;incstack = 0
 29942                           ; Regs used in _mfrc522_bal_set_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 29943                           ;mfrc522_bal_set_bit_reg@reg stored from wreg
 29944  3D13  0020               	movlb	0	; select bank0
 29945  3D14  00A5               	movwf	mfrc522_bal_set_bit_reg@reg
 29946                           
 29947                           ;mfrc522_bal.c: 138: uint8_t tmp = 0x0;
 29948  3D15  01A4               	clrf	mfrc522_bal_set_bit_reg@tmp
 29949                           
 29950                           ;mfrc522_bal.c: 139: tmp = mfrc522_bal_read_reg(reg);
 29951  3D16  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 29952  3D17  31BD  258A  31BD   	fcall	_mfrc522_bal_read_reg
 29953  3D1A  0020               	movlb	0	; select bank0
 29954  3D1B  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29955  3D1C  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29956  3D1D  00A4               	movwf	mfrc522_bal_set_bit_reg@tmp
 29957                           
 29958                           ;mfrc522_bal.c: 140: tmp|=bits;
 29959  3D1E  0822               	movf	mfrc522_bal_set_bit_reg@bits,w
 29960  3D1F  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29961  3D20  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29962  3D21  04A4               	iorwf	mfrc522_bal_set_bit_reg@tmp,f
 29963                           
 29964                           ;mfrc522_bal.c: 141: mfrc522_bal_write_reg(reg,tmp);
 29965  3D22  0824               	movf	mfrc522_bal_set_bit_reg@tmp,w
 29966  3D23  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29967  3D24  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29968  3D25  00F7               	movwf	mfrc522_bal_write_reg@x
 29969  3D26  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 29970  3D27  31BB  23CC         	fcall	_mfrc522_bal_write_reg
 29971  3D29  0008               	return
 29972  3D2A                     __end_of_mfrc522_bal_set_bit_reg:	
 29973                           
 29974                           	psect	text104
 29975  3CFC                     __ptext104:	
 29976 ;; *************** function _mfrc522_bal_clr_bit_reg *****************
 29977 ;; Defined at:
 29978 ;;		line 146 in file "src/nfc/bal/mfrc522_bal.c"
 29979 ;; Parameters:    Size  Location     Type
 29980 ;;  reg             1    wreg     unsigned char 
 29981 ;;  bits            1    2[BANK0 ] unsigned char 
 29982 ;; Auto vars:     Size  Location     Type
 29983 ;;  reg             1    5[BANK0 ] unsigned char 
 29984 ;;  tmp             1    4[BANK0 ] unsigned char 
 29985 ;; Return value:  Size  Location     Type
 29986 ;;                  1    wreg      void 
 29987 ;; Registers used:
 29988 ;;		wreg, status,2, status,0, pclath, cstack
 29989 ;; Tracked objects:
 29990 ;;		On entry : 0/0
 29991 ;;		On exit  : 0/0
 29992 ;;		Unchanged: 0/0
 29993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29994 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29996 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 29998 ;;Total ram usage:        4 bytes
 29999 ;; Hardware stack levels used:    1
 30000 ;; Hardware stack levels required when called:    4
 30001 ;; This function calls:
 30002 ;;		_mfrc522_bal_read_reg
 30003 ;;		_mfrc522_bal_write_reg
 30004 ;; This function is called by:
 30005 ;;		_mfrc522_hal_set_antenna_gain
 30006 ;;		_picc_req_a_or_wakeup_a
 30007 ;;		_picc_select
 30008 ;;		_picc_stop_cryptol
 30009 ;;		_mfrc522_hal_antenna_off
 30010 ;; This function uses a non-reentrant model
 30011 ;;
 30012                           
 30013                           
 30014                           ;psect for function _mfrc522_bal_clr_bit_reg
 30015  3CFC                     _mfrc522_bal_clr_bit_reg:	
 30016                           
 30017                           ;incstack = 0
 30018                           ; Regs used in _mfrc522_bal_clr_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 30019                           ;mfrc522_bal_clr_bit_reg@reg stored from wreg
 30020  3CFC  0020               	movlb	0	; select bank0
 30021  3CFD  00A5               	movwf	mfrc522_bal_clr_bit_reg@reg
 30022                           
 30023                           ;mfrc522_bal.c: 148: uint8_t tmp = 0x0;
 30024  3CFE  01A4               	clrf	mfrc522_bal_clr_bit_reg@tmp
 30025                           
 30026                           ;mfrc522_bal.c: 149: tmp = mfrc522_bal_read_reg(reg);
 30027  3CFF  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 30028  3D00  31BD  258A  31BC   	fcall	_mfrc522_bal_read_reg
 30029  3D03  0020               	movlb	0	; select bank0
 30030  3D04  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30031  3D05  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30032  3D06  00A4               	movwf	mfrc522_bal_clr_bit_reg@tmp
 30033                           
 30034                           ;mfrc522_bal.c: 150: tmp &= ~bits;
 30035  3D07  0922               	comf	mfrc522_bal_clr_bit_reg@bits,w
 30036  3D08  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30037  3D09  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30038  3D0A  05A4               	andwf	mfrc522_bal_clr_bit_reg@tmp,f
 30039                           
 30040                           ;mfrc522_bal.c: 151: mfrc522_bal_write_reg(reg,tmp);
 30041  3D0B  0824               	movf	mfrc522_bal_clr_bit_reg@tmp,w
 30042  3D0C  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30043  3D0D  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30044  3D0E  00F7               	movwf	mfrc522_bal_write_reg@x
 30045  3D0F  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 30046  3D10  31BB  23CC         	fcall	_mfrc522_bal_write_reg
 30047  3D12  0008               	return
 30048  3D13                     __end_of_mfrc522_bal_clr_bit_reg:	
 30049                           
 30050                           	psect	text105
 30051  3AF8                     __ptext105:	
 30052 ;; *************** function _mfrc522_hal_reset_sf *****************
 30053 ;; Defined at:
 30054 ;;		line 129 in file "src/nfc/hal/mfrc522_hal.c"
 30055 ;; Parameters:    Size  Location     Type
 30056 ;;		None
 30057 ;; Auto vars:     Size  Location     Type
 30058 ;;		None
 30059 ;; Return value:  Size  Location     Type
 30060 ;;                  1    wreg      void 
 30061 ;; Registers used:
 30062 ;;		wreg, status,2, status,0, pclath, cstack
 30063 ;; Tracked objects:
 30064 ;;		On entry : 0/0
 30065 ;;		On exit  : 0/0
 30066 ;;		Unchanged: 0/0
 30067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30070 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30072 ;;Total ram usage:        1 bytes
 30073 ;; Hardware stack levels used:    1
 30074 ;; Hardware stack levels required when called:    4
 30075 ;; This function calls:
 30076 ;;		_mfrc522_bal_write_reg
 30077 ;; This function is called by:
 30078 ;;		_mfrc522_hal_init
 30079 ;; This function uses a non-reentrant model
 30080 ;;
 30081                           
 30082                           
 30083                           ;psect for function _mfrc522_hal_reset_sf
 30084  3AF8                     _mfrc522_hal_reset_sf:	
 30085                           
 30086                           ;mfrc522_hal.c: 131: mfrc522_bal_write_reg(CommandReg, PCD_SoftReset);
 30087                           
 30088                           ;incstack = 0
 30089                           ; Regs used in _mfrc522_hal_reset_sf: [wreg+status,2+status,0+pclath+cstack]
 30090  3AF8  300F               	movlw	15
 30091  3AF9  0020               	movlb	0	; select bank0
 30092  3AFA  00A1               	movwf	??_mfrc522_hal_reset_sf
 30093  3AFB  0821               	movf	??_mfrc522_hal_reset_sf,w
 30094  3AFC  00F7               	movwf	mfrc522_bal_write_reg@x
 30095  3AFD  3001               	movlw	1
 30096  3AFE  31BB  23CC         	fcall	_mfrc522_bal_write_reg
 30097  3B00  0008               	return
 30098  3B01                     __end_of_mfrc522_hal_reset_sf:	
 30099                           
 30100                           	psect	text106
 30101  3D59                     __ptext106:	
 30102 ;; *************** function _mfrc522_hal_antenna_on *****************
 30103 ;; Defined at:
 30104 ;;		line 138 in file "src/nfc/hal/mfrc522_hal.c"
 30105 ;; Parameters:    Size  Location     Type
 30106 ;;		None
 30107 ;; Auto vars:     Size  Location     Type
 30108 ;;  t8              1    3[BANK0 ] unsigned char 
 30109 ;; Return value:  Size  Location     Type
 30110 ;;                  1    wreg      void 
 30111 ;; Registers used:
 30112 ;;		wreg, status,2, status,0, pclath, cstack
 30113 ;; Tracked objects:
 30114 ;;		On entry : 0/0
 30115 ;;		On exit  : 0/0
 30116 ;;		Unchanged: 0/0
 30117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30120 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30121 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30122 ;;Total ram usage:        2 bytes
 30123 ;; Hardware stack levels used:    1
 30124 ;; Hardware stack levels required when called:    4
 30125 ;; This function calls:
 30126 ;;		_mfrc522_bal_read_reg
 30127 ;;		_mfrc522_bal_write_reg
 30128 ;; This function is called by:
 30129 ;;		_mfrc522_hal_init
 30130 ;; This function uses a non-reentrant model
 30131 ;;
 30132                           
 30133                           
 30134                           ;psect for function _mfrc522_hal_antenna_on
 30135  3D59                     _mfrc522_hal_antenna_on:	
 30136                           
 30137                           ;mfrc522_hal.c: 140: uint8_t t8;
 30138                           ;mfrc522_hal.c: 141: t8= mfrc522_bal_read_reg(TxControlReg);
 30139                           
 30140                           ;incstack = 0
 30141                           ; Regs used in _mfrc522_hal_antenna_on: [wreg+status,2+status,0+pclath+cstack]
 30142  3D59  3014               	movlw	20
 30143  3D5A  31BD  258A  31BD   	fcall	_mfrc522_bal_read_reg
 30144  3D5D  0020               	movlb	0	; select bank0
 30145  3D5E  00A2               	movwf	??_mfrc522_hal_antenna_on
 30146  3D5F  0822               	movf	??_mfrc522_hal_antenna_on,w
 30147  3D60  00A3               	movwf	mfrc522_hal_antenna_on@t8
 30148                           
 30149                           ;mfrc522_hal.c: 142: if((t8&0x03)!=0x03)
 30150  3D61  3003               	movlw	3
 30151  3D62  0523               	andwf	mfrc522_hal_antenna_on@t8,w
 30152  3D63  00A2               	movwf	??_mfrc522_hal_antenna_on
 30153  3D64  3003               	movlw	3
 30154  3D65  0622               	xorwf	??_mfrc522_hal_antenna_on,w
 30155  3D66  1903               	btfsc	3,2
 30156  3D67  0008               	return
 30157                           
 30158                           ;mfrc522_hal.c: 143: {
 30159                           ;mfrc522_hal.c: 144: mfrc522_bal_write_reg(TxControlReg, t8 | 0x03);
 30160  3D68  0823               	movf	mfrc522_hal_antenna_on@t8,w
 30161  3D69  3803               	iorlw	3
 30162  3D6A  00A2               	movwf	??_mfrc522_hal_antenna_on
 30163  3D6B  0822               	movf	??_mfrc522_hal_antenna_on,w
 30164  3D6C  00F7               	movwf	mfrc522_bal_write_reg@x
 30165  3D6D  3014               	movlw	20
 30166  3D6E  31BB  23CC         	fcall	_mfrc522_bal_write_reg
 30167  3D70  0008               	return
 30168  3D71                     __end_of_mfrc522_hal_antenna_on:	
 30169                           
 30170                           	psect	text107
 30171  3BCC                     __ptext107:	
 30172 ;; *************** function _mfrc522_bal_write_reg *****************
 30173 ;; Defined at:
 30174 ;;		line 47 in file "src/nfc/bal/mfrc522_bal.c"
 30175 ;; Parameters:    Size  Location     Type
 30176 ;;  reg             1    wreg     unsigned char 
 30177 ;;  x               1    7[COMMON] unsigned char 
 30178 ;; Auto vars:     Size  Location     Type
 30179 ;;  reg             1    0[BANK0 ] unsigned char 
 30180 ;; Return value:  Size  Location     Type
 30181 ;;                  1    wreg      void 
 30182 ;; Registers used:
 30183 ;;		wreg, status,2, status,0, pclath, cstack
 30184 ;; Tracked objects:
 30185 ;;		On entry : 0/0
 30186 ;;		On exit  : 0/0
 30187 ;;		Unchanged: 0/0
 30188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30189 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30190 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30192 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30193 ;;Total ram usage:        2 bytes
 30194 ;; Hardware stack levels used:    1
 30195 ;; Hardware stack levels required when called:    3
 30196 ;; This function calls:
 30197 ;;		_mfrc522_bal_write_read_via_spi
 30198 ;; This function is called by:
 30199 ;;		_mfrc522_bal_set_bit_reg
 30200 ;;		_mfrc522_bal_clr_bit_reg
 30201 ;;		_mfrc522_hal_calculate_crc
 30202 ;;		_mfrc522_hal_init
 30203 ;;		_mfrc522_hal_reset_sf
 30204 ;;		_mfrc522_hal_antenna_on
 30205 ;;		_pcd_comm_with_picc
 30206 ;;		_picc_select
 30207 ;; This function uses a non-reentrant model
 30208 ;;
 30209                           
 30210                           
 30211                           ;psect for function _mfrc522_bal_write_reg
 30212  3BCC                     _mfrc522_bal_write_reg:	
 30213                           
 30214                           ;incstack = 0
 30215                           ; Regs used in _mfrc522_bal_write_reg: [wreg+status,2+status,0+pclath+cstack]
 30216                           ;mfrc522_bal_write_reg@reg stored from wreg
 30217  3BCC  0020               	movlb	0	; select bank0
 30218  3BCD  00A0               	movwf	mfrc522_bal_write_reg@reg
 30219                           
 30220                           ;mfrc522_bal.c: 49: do { LATCbits.LATC2 = 0; } while(0);;
 30221  3BCE  0022               	movlb	2	; select bank2
 30222  3BCF  110E               	bcf	14,2	;volatile
 30223                           
 30224                           ;mfrc522_bal.c: 51: do { LATCbits.LATC3 = 0; } while(0);;
 30225  3BD0  118E               	bcf	14,3	;volatile
 30226                           
 30227                           ;mfrc522_bal.c: 52: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 30228  3BD1  0020               	movlb	0	; select bank0
 30229  3BD2  3520               	lslf	mfrc522_bal_write_reg@reg,w
 30230  3BD3  397E               	andlw	126
 30231  3BD4  3188  2000  31BB   	fcall	_mfrc522_bal_write_read_via_spi
 30232                           
 30233                           ;mfrc522_bal.c: 53: mfrc522_bal_write_read_via_spi(x);
 30234  3BD7  0877               	movf	mfrc522_bal_write_reg@x,w
 30235  3BD8  3188  2000         	fcall	_mfrc522_bal_write_read_via_spi
 30236                           
 30237                           ;mfrc522_bal.c: 54: do { LATCbits.LATC2 = 1; } while(0);;
 30238  3BDA  0022               	movlb	2	; select bank2
 30239  3BDB  150E               	bsf	14,2	;volatile
 30240  3BDC  0008               	return
 30241  3BDD                     __end_of_mfrc522_bal_write_reg:	
 30242                           
 30243                           	psect	text108
 30244  3D8A                     __ptext108:	
 30245 ;; *************** function _mfrc522_bal_read_reg *****************
 30246 ;; Defined at:
 30247 ;;		line 75 in file "src/nfc/bal/mfrc522_bal.c"
 30248 ;; Parameters:    Size  Location     Type
 30249 ;;  reg             1    wreg     unsigned char 
 30250 ;; Auto vars:     Size  Location     Type
 30251 ;;  reg             1    0[BANK0 ] unsigned char 
 30252 ;;  x               1    1[BANK0 ] unsigned char 
 30253 ;; Return value:  Size  Location     Type
 30254 ;;                  1    wreg      unsigned char 
 30255 ;; Registers used:
 30256 ;;		wreg, status,2, status,0, pclath, cstack
 30257 ;; Tracked objects:
 30258 ;;		On entry : 0/0
 30259 ;;		On exit  : 0/0
 30260 ;;		Unchanged: 0/0
 30261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30263 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30264 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30265 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30266 ;;Total ram usage:        3 bytes
 30267 ;; Hardware stack levels used:    1
 30268 ;; Hardware stack levels required when called:    3
 30269 ;; This function calls:
 30270 ;;		_mfrc522_bal_write_read_via_spi
 30271 ;; This function is called by:
 30272 ;;		_mfapi_pcd_init
 30273 ;;		_mfrc522_bal_set_bit_reg
 30274 ;;		_mfrc522_bal_clr_bit_reg
 30275 ;;		_mfrc522_hal_calculate_crc
 30276 ;;		_mfrc522_hal_antenna_on
 30277 ;;		_mfrc522_hal_get_antenna_gain
 30278 ;;		_pcd_comm_with_picc
 30279 ;;		_picc_select
 30280 ;; This function uses a non-reentrant model
 30281 ;;
 30282                           
 30283                           
 30284                           ;psect for function _mfrc522_bal_read_reg
 30285  3D8A                     _mfrc522_bal_read_reg:	
 30286                           
 30287                           ;incstack = 0
 30288                           ; Regs used in _mfrc522_bal_read_reg: [wreg+status,2+status,0+pclath+cstack]
 30289                           ;mfrc522_bal_read_reg@reg stored from wreg
 30290  3D8A  0020               	movlb	0	; select bank0
 30291  3D8B  00A0               	movwf	mfrc522_bal_read_reg@reg
 30292                           
 30293                           ;mfrc522_bal.c: 77: uint8_t x=0;
 30294  3D8C  01A1               	clrf	mfrc522_bal_read_reg@x
 30295                           
 30296                           ;mfrc522_bal.c: 78: do { LATCbits.LATC2 = 0; } while(0);;
 30297  3D8D  0022               	movlb	2	; select bank2
 30298  3D8E  110E               	bcf	14,2	;volatile
 30299                           
 30300                           ;mfrc522_bal.c: 79: do { LATCbits.LATC3 = 0; } while(0);;
 30301  3D8F  118E               	bcf	14,3	;volatile
 30302                           
 30303                           ;mfrc522_bal.c: 80: mfrc522_bal_write_read_via_spi(((reg<<1) & 0x7e) | 0x80);
 30304  3D90  0020               	movlb	0	; select bank0
 30305  3D91  3520               	lslf	mfrc522_bal_read_reg@reg,w
 30306  3D92  397E               	andlw	126
 30307  3D93  3880               	iorlw	128
 30308  3D94  3188  2000  31BD   	fcall	_mfrc522_bal_write_read_via_spi
 30309                           
 30310                           ;mfrc522_bal.c: 81: x=mfrc522_bal_write_read_via_spi(0x00);
 30311  3D97  3000               	movlw	0
 30312  3D98  3188  2000         	fcall	_mfrc522_bal_write_read_via_spi
 30313  3D9A  00F7               	movwf	??_mfrc522_bal_read_reg
 30314  3D9B  0877               	movf	??_mfrc522_bal_read_reg,w
 30315  3D9C  0020               	movlb	0	; select bank0
 30316  3D9D  00A1               	movwf	mfrc522_bal_read_reg@x
 30317                           
 30318                           ;mfrc522_bal.c: 82: do { LATCbits.LATC2 = 1; } while(0);;
 30319  3D9E  0022               	movlb	2	; select bank2
 30320  3D9F  150E               	bsf	14,2	;volatile
 30321                           
 30322                           ;mfrc522_bal.c: 83: return x;
 30323  3DA0  0020               	movlb	0	; select bank0
 30324  3DA1  0821               	movf	mfrc522_bal_read_reg@x,w
 30325  3DA2  0008               	return
 30326  3DA3                     __end_of_mfrc522_bal_read_reg:	
 30327                           
 30328                           	psect	text109
 30329  0800                     __ptext109:	
 30330 ;; *************** function _mfrc522_bal_write_read_via_spi *****************
 30331 ;; Defined at:
 30332 ;;		line 19 in file "src/nfc/bal/mfrc522_bal.c"
 30333 ;; Parameters:    Size  Location     Type
 30334 ;;  x               1    wreg     unsigned char 
 30335 ;; Auto vars:     Size  Location     Type
 30336 ;;  x               1    4[COMMON] unsigned char 
 30337 ;;  i               1    6[COMMON] unsigned char 
 30338 ;;  rb              1    5[COMMON] unsigned char 
 30339 ;; Return value:  Size  Location     Type
 30340 ;;                  1    wreg      unsigned char 
 30341 ;; Registers used:
 30342 ;;		wreg, status,2, status,0
 30343 ;; Tracked objects:
 30344 ;;		On entry : 0/0
 30345 ;;		On exit  : 0/0
 30346 ;;		Unchanged: 0/0
 30347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30348 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30349 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30350 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30352 ;;Total ram usage:        4 bytes
 30353 ;; Hardware stack levels used:    1
 30354 ;; Hardware stack levels required when called:    2
 30355 ;; This function calls:
 30356 ;;		Nothing
 30357 ;; This function is called by:
 30358 ;;		_mfrc522_bal_write_reg
 30359 ;;		_mfrc522_bal_write_reg_len
 30360 ;;		_mfrc522_bal_read_reg
 30361 ;;		_mfrc522_bal_read_fifo_len_ex
 30362 ;; This function uses a non-reentrant model
 30363 ;;
 30364                           
 30365                           
 30366                           ;psect for function _mfrc522_bal_write_read_via_spi
 30367  0800                     _mfrc522_bal_write_read_via_spi:	
 30368                           
 30369                           ;incstack = 0
 30370                           ; Regs used in _mfrc522_bal_write_read_via_spi: [wreg+status,2+status,0]
 30371                           ;mfrc522_bal_write_read_via_spi@x stored from wreg
 30372  0800  00F4               	movwf	mfrc522_bal_write_read_via_spi@x
 30373                           
 30374                           ;mfrc522_bal.c: 21: uint8_t i;
 30375                           ;mfrc522_bal.c: 22: uint8_t rb=0;
 30376  0801  01F5               	clrf	mfrc522_bal_write_read_via_spi@rb
 30377                           
 30378                           ;mfrc522_bal.c: 23: for(i=0;i<8;i++)
 30379  0802  01F6               	clrf	mfrc522_bal_write_read_via_spi@i
 30380  0803  3008               	movlw	8
 30381  0804  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 30382  0805  1803               	btfsc	3,0
 30383  0806  281E               	goto	l2105
 30384  0807                     l2094:	
 30385                           ;mfrc522_bal.c: 24: {
 30386                           ;mfrc522_bal.c: 25: do { LATCbits.LATC3 = 0; } while(0);;
 30387                           
 30388  0807  0022               	movlb	2	; select bank2
 30389  0808  118E               	bcf	14,3	;volatile
 30390                           
 30391                           ;mfrc522_bal.c: 27: if(x&0x80){
 30392  0809  1FF4               	btfss	mfrc522_bal_write_read_via_spi@x,7
 30393  080A  280D               	goto	l2100
 30394                           
 30395                           ;mfrc522_bal.c: 28: do { LATCbits.LATC4 = 1; } while(0);;
 30396  080B  160E               	bsf	14,4	;volatile
 30397                           
 30398                           ;mfrc522_bal.c: 29: }
 30399  080C  280E               	goto	l2102
 30400  080D                     l2100:	
 30401                           ;mfrc522_bal.c: 30: else{
 30402                           ;mfrc522_bal.c: 31: do { LATCbits.LATC4 = 0; } while(0);;
 30403                           
 30404  080D  120E               	bcf	14,4	;volatile
 30405  080E                     l2102:	
 30406                           ;mfrc522_bal.c: 32: }
 30407                           ;mfrc522_bal.c: 33: do { LATCbits.LATC3 = 1; } while(0);;
 30408                           
 30409  080E  158E               	bsf	14,3	;volatile
 30410                           
 30411                           ;mfrc522_bal.c: 34: x<<=1;
 30412  080F  1003               	clrc
 30413  0810  0DF4               	rlf	mfrc522_bal_write_read_via_spi@x,f
 30414                           
 30415                           ;mfrc522_bal.c: 36: rb<<=1;
 30416  0811  1003               	clrc
 30417  0812  0DF5               	rlf	mfrc522_bal_write_read_via_spi@rb,f
 30418                           
 30419                           ;mfrc522_bal.c: 37: if(PORTCbits.RC5)
 30420  0813  0020               	movlb	0	; select bank0
 30421  0814  1A8E               	btfsc	14,5	;volatile
 30422                           
 30423                           ;mfrc522_bal.c: 38: rb|=1;
 30424  0815  1475               	bsf	mfrc522_bal_write_read_via_spi@rb,0
 30425  0816  3001               	movlw	1
 30426  0817  00F3               	movwf	??_mfrc522_bal_write_read_via_spi
 30427  0818  0873               	movf	??_mfrc522_bal_write_read_via_spi,w
 30428  0819  07F6               	addwf	mfrc522_bal_write_read_via_spi@i,f
 30429  081A  3008               	movlw	8
 30430  081B  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 30431  081C  1C03               	skipc
 30432  081D  2807               	goto	l2094
 30433  081E                     l2105:	
 30434                           ;mfrc522_bal.c: 39: }
 30435                           ;mfrc522_bal.c: 40: do { LATCbits.LATC3 = 0; } while(0);;
 30436                           
 30437  081E  0022               	movlb	2	; select bank2
 30438  081F  118E               	bcf	14,3	;volatile
 30439                           
 30440                           ;mfrc522_bal.c: 41: return rb;
 30441  0820  0875               	movf	mfrc522_bal_write_read_via_spi@rb,w
 30442  0821  0008               	return
 30443  0822                     __end_of_mfrc522_bal_write_read_via_spi:	
 30444                           
 30445                           	psect	text110
 30446  3CBA                     __ptext110:	
 30447 ;; *************** function _m_system_init *****************
 30448 ;; Defined at:
 30449 ;;		line 4 in file "main.c"
 30450 ;; Parameters:    Size  Location     Type
 30451 ;;		None
 30452 ;; Auto vars:     Size  Location     Type
 30453 ;;		None
 30454 ;; Return value:  Size  Location     Type
 30455 ;;                  1    wreg      void 
 30456 ;; Registers used:
 30457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30458 ;; Tracked objects:
 30459 ;;		On entry : 0/0
 30460 ;;		On exit  : 0/0
 30461 ;;		Unchanged: 0/0
 30462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30467 ;;Total ram usage:        0 bytes
 30468 ;; Hardware stack levels used:    1
 30469 ;; Hardware stack levels required when called:    5
 30470 ;; This function calls:
 30471 ;;		_SYSTEM_Initialize
 30472 ;;		_lcd_init
 30473 ;;		_led_port_init
 30474 ;;		_other_gpio_port_init
 30475 ;; This function is called by:
 30476 ;;		_main
 30477 ;; This function uses a non-reentrant model
 30478 ;;
 30479                           
 30480                           
 30481                           ;psect for function _m_system_init
 30482  3CBA                     _m_system_init:	
 30483                           
 30484                           ;main.c: 6: SYSTEM_Initialize();
 30485                           
 30486                           ;incstack = 0
 30487                           ; Regs used in _m_system_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30488  3CBA  31BC  2422  31BC   	fcall	_SYSTEM_Initialize
 30489                           
 30490                           ;main.c: 7: do{ do { TRISBbits.TRISB1 = 1; } while(0); do { TRISBbits.TRISB2 = 1; } whil
      +                          e(0); do { TRISBbits.TRISB3 = 1; } while(0); }while(0);;
 30491  3CBD  0021               	movlb	1	; select bank1
 30492  3CBE  148D               	bsf	13,1	;volatile
 30493  3CBF  150D               	bsf	13,2	;volatile
 30494  3CC0  158D               	bsf	13,3	;volatile
 30495                           
 30496                           ;main.c: 8: led_port_init();
 30497  3CC1  31BD  2571  31BC   	fcall	_led_port_init
 30498                           
 30499                           ;main.c: 9: other_gpio_port_init();
 30500  3CC4  31B0  2000  31BC   	fcall	_other_gpio_port_init
 30501                           
 30502                           ;main.c: 10: lcd_init();
 30503  3CC7  31BA  22DB         	fcall	_lcd_init
 30504                           
 30505                           ;main.c: 11: do{LCDCON=0x83;}while(0);;
 30506  3CC9  3083               	movlw	131
 30507  3CCA  002F               	movlb	15	; select bank15
 30508  3CCB  0091               	movwf	17	;volatile
 30509                           
 30510                           ;main.c: 12: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 30511  3CCC  178B               	bsf	11,7	;volatile
 30512  3CCD  170B               	bsf	11,6	;volatile
 30513  3CCE  0008               	return
 30514  3CCF                     __end_of_m_system_init:	
 30515                           
 30516                           	psect	text111
 30517  3000                     __ptext111:	
 30518 ;; *************** function _other_gpio_port_init *****************
 30519 ;; Defined at:
 30520 ;;		line 8 in file "src/driver/other-gpio.c"
 30521 ;; Parameters:    Size  Location     Type
 30522 ;;		None
 30523 ;; Auto vars:     Size  Location     Type
 30524 ;;		None
 30525 ;; Return value:  Size  Location     Type
 30526 ;;                  1    wreg      void 
 30527 ;; Registers used:
 30528 ;;		None
 30529 ;; Tracked objects:
 30530 ;;		On entry : 0/0
 30531 ;;		On exit  : 0/0
 30532 ;;		Unchanged: 0/0
 30533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30537 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30538 ;;Total ram usage:        0 bytes
 30539 ;; Hardware stack levels used:    1
 30540 ;; Hardware stack levels required when called:    2
 30541 ;; This function calls:
 30542 ;;		Nothing
 30543 ;; This function is called by:
 30544 ;;		_m_system_init
 30545 ;; This function uses a non-reentrant model
 30546 ;;
 30547                           
 30548                           
 30549                           ;psect for function _other_gpio_port_init
 30550  3000                     _other_gpio_port_init:	
 30551                           
 30552                           ;incstack = 0
 30553                           ; Regs used in _other_gpio_port_init: []
 30554                           ;other-gpio.c: 10: do{ do{do { TRISAbits.TRISA4 = 0; } while(0);}while(0);; do{ do { ANS
      +                          ELAbits.ANSA5 = 0; } while(0); do { TRISAbits.TRISA5 = 1; } while(0);}while(0);; do{ do 
      +                          { TRISBbits.TRISB4 = 1; } while(0);}while(0);; do{ do { TRISBbits.TRISB0 = 0; } while(0)
      +                          ; }wh
 30555  3000  0021               	movlb	1	; select bank1
 30556  3001  120C               	bcf	12,4	;volatile
 30557  3002  0023               	movlb	3	; select bank3
 30558  3003  128C               	bcf	12,5	;volatile
 30559  3004  0021               	movlb	1	; select bank1
 30560  3005  168C               	bsf	12,5	;volatile
 30561  3006  160D               	bsf	13,4	;volatile
 30562  3007  100D               	bcf	13,0	;volatile
 30563  3008  0022               	movlb	2	; select bank2
 30564  3009  138F               	bcf	15,7	;volatile
 30565  300A  0021               	movlb	1	; select bank1
 30566  300B  138F               	bcf	15,7	;volatile
 30567  300C  0008               	return
 30568  300D                     __end_of_other_gpio_port_init:	
 30569                           
 30570                           	psect	text112
 30571  3D71                     __ptext112:	
 30572 ;; *************** function _led_port_init *****************
 30573 ;; Defined at:
 30574 ;;		line 4 in file "src/driver/led.c"
 30575 ;; Parameters:    Size  Location     Type
 30576 ;;		None
 30577 ;; Auto vars:     Size  Location     Type
 30578 ;;		None
 30579 ;; Return value:  Size  Location     Type
 30580 ;;                  1    wreg      void 
 30581 ;; Registers used:
 30582 ;;		None
 30583 ;; Tracked objects:
 30584 ;;		On entry : 0/0
 30585 ;;		On exit  : 0/0
 30586 ;;		Unchanged: 0/0
 30587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30592 ;;Total ram usage:        0 bytes
 30593 ;; Hardware stack levels used:    1
 30594 ;; Hardware stack levels required when called:    2
 30595 ;; This function calls:
 30596 ;;		Nothing
 30597 ;; This function is called by:
 30598 ;;		_m_system_init
 30599 ;; This function uses a non-reentrant model
 30600 ;;
 30601                           
 30602                           
 30603                           ;psect for function _led_port_init
 30604  3D71                     _led_port_init:	
 30605                           
 30606                           ;incstack = 0
 30607                           ; Regs used in _led_port_init: []
 30608                           ;led.c: 6: do{ do { ANSELAbits.ANSA3 = 0; } while(0); do { TRISAbits.TRISA3 = 0; } while
      +                          (0); }while(0);;
 30609  3D71  0023               	movlb	3	; select bank3
 30610  3D72  118C               	bcf	12,3	;volatile
 30611  3D73  0021               	movlb	1	; select bank1
 30612  3D74  118C               	bcf	12,3	;volatile
 30613                           
 30614                           ;led.c: 7: do{ do { ANSELFbits.ANSF0 = 0; } while(0); do { TRISFbits.TRISF0 = 0; } while
      +                          (0); }while(0);;
 30615  3D75  0028               	movlb	8	; select bank8
 30616  3D76  100C               	bcf	12,0	;volatile
 30617  3D77  0026               	movlb	6	; select bank6
 30618  3D78  100C               	bcf	12,0	;volatile
 30619                           
 30620                           ;led.c: 8: do{ do { ANSELFbits.ANSF1 = 0; } while(0); do { TRISFbits.TRISF1 = 0; } while
      +                          (0); }while(0);;
 30621  3D79  0028               	movlb	8	; select bank8
 30622  3D7A  108C               	bcf	12,1	;volatile
 30623  3D7B  0026               	movlb	6	; select bank6
 30624  3D7C  108C               	bcf	12,1	;volatile
 30625                           
 30626                           ;led.c: 9: do{ do { ANSELAbits.ANSA0 = 0; } while(0); do { TRISAbits.TRISA0 = 0; } while
      +                          (0); }while(0);;
 30627  3D7D  0023               	movlb	3	; select bank3
 30628  3D7E  100C               	bcf	12,0	;volatile
 30629  3D7F  0021               	movlb	1	; select bank1
 30630  3D80  100C               	bcf	12,0	;volatile
 30631                           
 30632                           ;led.c: 10: do{ do { ANSELAbits.ANSA2 = 0; } while(0); do { TRISAbits.TRISA2 = 0; } whil
      +                          e(0); }while(0);;
 30633  3D81  0023               	movlb	3	; select bank3
 30634  3D82  110C               	bcf	12,2	;volatile
 30635  3D83  0021               	movlb	1	; select bank1
 30636  3D84  110C               	bcf	12,2	;volatile
 30637                           
 30638                           ;led.c: 11: do{ do { ANSELAbits.ANSA1 = 0; } while(0); do { TRISAbits.TRISA1 = 0; } whil
      +                          e(0); }while(0);;
 30639  3D85  0023               	movlb	3	; select bank3
 30640  3D86  108C               	bcf	12,1	;volatile
 30641  3D87  0021               	movlb	1	; select bank1
 30642  3D88  108C               	bcf	12,1	;volatile
 30643  3D89  0008               	return
 30644  3D8A                     __end_of_led_port_init:	
 30645                           
 30646                           	psect	text113
 30647  3ADB                     __ptext113:	
 30648 ;; *************** function _lcd_init *****************
 30649 ;; Defined at:
 30650 ;;		line 251 in file "src/driver/lcd.c"
 30651 ;; Parameters:    Size  Location     Type
 30652 ;;		None
 30653 ;; Auto vars:     Size  Location     Type
 30654 ;;		None
 30655 ;; Return value:  Size  Location     Type
 30656 ;;                  1    wreg      void 
 30657 ;; Registers used:
 30658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30659 ;; Tracked objects:
 30660 ;;		On entry : 0/0
 30661 ;;		On exit  : 0/0
 30662 ;;		Unchanged: 0/0
 30663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30668 ;;Total ram usage:        0 bytes
 30669 ;; Hardware stack levels used:    1
 30670 ;; Hardware stack levels required when called:    4
 30671 ;; This function calls:
 30672 ;;		_lcd_config
 30673 ;; This function is called by:
 30674 ;;		_m_system_init
 30675 ;; This function uses a non-reentrant model
 30676 ;;
 30677                           
 30678                           
 30679                           ;psect for function _lcd_init
 30680  3ADB                     _lcd_init:	
 30681                           
 30682                           ;lcd.c: 254: lcd_config();
 30683                           
 30684                           ;incstack = 0
 30685                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30686  3ADB  31BF  2720         	fcall	_lcd_config
 30687                           
 30688                           ;lcd.c: 255: do { LATAbits.LATA1 = 1; } while(0);;
 30689  3ADD  0022               	movlb	2	; select bank2
 30690  3ADE  148C               	bsf	12,1	;volatile
 30691  3ADF  0008               	return
 30692  3AE0                     __end_of_lcd_init:	
 30693                           
 30694                           	psect	text114
 30695  3F20                     __ptext114:	
 30696 ;; *************** function _lcd_config *****************
 30697 ;; Defined at:
 30698 ;;		line 211 in file "src/driver/lcd.c"
 30699 ;; Parameters:    Size  Location     Type
 30700 ;;		None
 30701 ;; Auto vars:     Size  Location     Type
 30702 ;;		None
 30703 ;; Return value:  Size  Location     Type
 30704 ;;                  1    wreg      void 
 30705 ;; Registers used:
 30706 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30707 ;; Tracked objects:
 30708 ;;		On entry : 0/0
 30709 ;;		On exit  : 0/0
 30710 ;;		Unchanged: 0/0
 30711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30715 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30716 ;;Total ram usage:        0 bytes
 30717 ;; Hardware stack levels used:    1
 30718 ;; Hardware stack levels required when called:    3
 30719 ;; This function calls:
 30720 ;;		_lcd_disp_all
 30721 ;; This function is called by:
 30722 ;;		_lcd_init
 30723 ;; This function uses a non-reentrant model
 30724 ;;
 30725                           
 30726                           
 30727                           ;psect for function _lcd_config
 30728  3F20                     _lcd_config:	
 30729                           
 30730                           ;lcd.c: 215: LCDPSbits.WFT = 0;
 30731                           
 30732                           ;incstack = 0
 30733                           ; Regs used in _lcd_config: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30734  3F20  002F               	movlb	15	; select bank15
 30735  3F21  1392               	bcf	18,7	;volatile
 30736                           
 30737                           ;lcd.c: 216: LCDPSbits.BIASMD = 0;
 30738  3F22  1312               	bcf	18,6	;volatile
 30739                           
 30740                           ;lcd.c: 217: LCDPSbits.LP=0x07;
 30741  3F23  0812               	movf	18,w	;volatile
 30742  3F24  39F0               	andlw	-16
 30743  3F25  3807               	iorlw	7
 30744  3F26  0092               	movwf	18	;volatile
 30745                           
 30746                           ;lcd.c: 225: LCDSE0 = 0x1f;
 30747  3F27  301F               	movlw	31
 30748  3F28  0098               	movwf	24	;volatile
 30749                           
 30750                           ;lcd.c: 226: LCDSE1 = 0x00;
 30751  3F29  0199               	clrf	25	;volatile
 30752                           
 30753                           ;lcd.c: 227: LCDSE2 = 0xf0;
 30754  3F2A  30F0               	movlw	240
 30755  3F2B  009A               	movwf	26	;volatile
 30756                           
 30757                           ;lcd.c: 228: LCDSE3 = 0x87;
 30758  3F2C  3087               	movlw	135
 30759  3F2D  009B               	movwf	27	;volatile
 30760                           
 30761                           ;lcd.c: 229: LCDSE4 = 0x00;
 30762  3F2E  019C               	clrf	28	;volatile
 30763                           
 30764                           ;lcd.c: 230: LCDSE5 = 0b00111100;
 30765  3F2F  303C               	movlw	60
 30766  3F30  009D               	movwf	29	;volatile
 30767                           
 30768                           ;lcd.c: 234: lcd_disp_all(0x00);;
 30769  3F31  3000               	movlw	0
 30770  3F32  31BE  2665  31BF   	fcall	_lcd_disp_all
 30771                           
 30772                           ;lcd.c: 239: LCDCST=0x00;
 30773  3F35  002F               	movlb	15	; select bank15
 30774  3F36  0194               	clrf	20	;volatile
 30775                           
 30776                           ;lcd.c: 241: LCDRL=0xff;
 30777  3F37  30FF               	movlw	255
 30778  3F38  0095               	movwf	21	;volatile
 30779                           
 30780                           ;lcd.c: 242: LCDREF= 0x80 ;
 30781  3F39  3080               	movlw	128
 30782  3F3A  0093               	movwf	19	;volatile
 30783                           
 30784                           ;lcd.c: 248: lcd_disp_all(0x00);;
 30785  3F3B  3000               	movlw	0
 30786  3F3C  31BE  2665         	fcall	_lcd_disp_all
 30787                           
 30788                           ;lcd.c: 249: do{LCDCON=0x83;}while(0);;
 30789  3F3E  3083               	movlw	131
 30790  3F3F  002F               	movlb	15	; select bank15
 30791  3F40  0091               	movwf	17	;volatile
 30792  3F41  0008               	return
 30793  3F42                     __end_of_lcd_config:	
 30794                           
 30795                           	psect	text115
 30796  3E65                     __ptext115:	
 30797 ;; *************** function _lcd_disp_all *****************
 30798 ;; Defined at:
 30799 ;;		line 194 in file "src/driver/lcd.c"
 30800 ;; Parameters:    Size  Location     Type
 30801 ;;  x               1    wreg     unsigned char 
 30802 ;; Auto vars:     Size  Location     Type
 30803 ;;  x               1    0[BANK0 ] unsigned char 
 30804 ;;  i               1    1[BANK0 ] unsigned char 
 30805 ;; Return value:  Size  Location     Type
 30806 ;;                  1    wreg      void 
 30807 ;; Registers used:
 30808 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 30809 ;; Tracked objects:
 30810 ;;		On entry : 0/0
 30811 ;;		On exit  : 0/0
 30812 ;;		Unchanged: 0/0
 30813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30815 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30816 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30817 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30818 ;;Total ram usage:        6 bytes
 30819 ;; Hardware stack levels used:    1
 30820 ;; Hardware stack levels required when called:    2
 30821 ;; This function calls:
 30822 ;;		Nothing
 30823 ;; This function is called by:
 30824 ;;		_ui_start_display
 30825 ;;		_lcd_config
 30826 ;;		_m_system_start_self_test
 30827 ;; This function uses a non-reentrant model
 30828 ;;
 30829                           
 30830                           
 30831                           ;psect for function _lcd_disp_all
 30832  3E65                     _lcd_disp_all:	
 30833                           
 30834                           ;incstack = 0
 30835                           ; Regs used in _lcd_disp_all: [wreg+fsr1l+fsr1h+status,2+status,0]
 30836                           ;lcd_disp_all@x stored from wreg
 30837  3E65  0020               	movlb	0	; select bank0
 30838  3E66  00A0               	movwf	lcd_disp_all@x
 30839                           
 30840                           ;lcd.c: 196: uint8_t i;
 30841                           ;lcd.c: 197: for(i=0;i<24;i++)
 30842  3E67  01A1               	clrf	lcd_disp_all@i
 30843  3E68                     L12:	
 30844  3E68  3018               	movlw	24
 30845  3E69  0221               	subwf	lcd_disp_all@i,w
 30846  3E6A  1803               	btfsc	3,0
 30847  3E6B  0008               	return
 30848                           
 30849                           ;lcd.c: 198: {
 30850                           ;lcd.c: 199: pLcdReg[i]=x;
 30851  3E6C  0821               	movf	lcd_disp_all@i,w
 30852  3E6D  00F3               	movwf	??_lcd_disp_all
 30853  3E6E  01F4               	clrf	??_lcd_disp_all+1
 30854  3E6F  0873               	movf	??_lcd_disp_all,w
 30855  3E70  0022               	movlb	2	; select bank2
 30856  3E71  0769               	addwf	_pLcdReg^(0+256),w
 30857  3E72  00F5               	movwf	??_lcd_disp_all+2
 30858  3E73  0874               	movf	??_lcd_disp_all+1,w
 30859  3E74  3D6A               	addwfc	(_pLcdReg+1)^(0+256),w
 30860  3E75  00F6               	movwf	??_lcd_disp_all+3
 30861  3E76  0875               	movf	??_lcd_disp_all+2,w
 30862  3E77  0086               	movwf	6
 30863  3E78  0876               	movf	??_lcd_disp_all+3,w
 30864  3E79  0087               	movwf	7
 30865  3E7A  0020               	movlb	0	; select bank0
 30866  3E7B  0820               	movf	lcd_disp_all@x,w
 30867  3E7C  0081               	movwf	1
 30868  3E7D  3001               	movlw	1
 30869  3E7E  00F3               	movwf	??_lcd_disp_all
 30870  3E7F  0873               	movf	??_lcd_disp_all,w
 30871  3E80  07A1               	addwf	lcd_disp_all@i,f
 30872  3E81  2E68               	goto	L12
 30873  3E82                     __end_of_lcd_disp_all:	
 30874                           
 30875                           	psect	text116
 30876  3C22                     __ptext116:	
 30877 ;; *************** function _SYSTEM_Initialize *****************
 30878 ;; Defined at:
 30879 ;;		line 70 in file "mcc_generated_files/mcc.c"
 30880 ;; Parameters:    Size  Location     Type
 30881 ;;		None
 30882 ;; Auto vars:     Size  Location     Type
 30883 ;;		None
 30884 ;; Return value:  Size  Location     Type
 30885 ;;                  1    wreg      void 
 30886 ;; Registers used:
 30887 ;;		wreg, status,2, status,0, pclath, cstack
 30888 ;; Tracked objects:
 30889 ;;		On entry : 0/0
 30890 ;;		On exit  : 0/0
 30891 ;;		Unchanged: 0/0
 30892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30896 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30897 ;;Total ram usage:        0 bytes
 30898 ;; Hardware stack levels used:    1
 30899 ;; Hardware stack levels required when called:    4
 30900 ;; This function calls:
 30901 ;;		_EUSART1_Initialize
 30902 ;;		_OSCILLATOR_Initialize
 30903 ;;		_PIN_MANAGER_Initialize
 30904 ;;		_TMR0_Initialize
 30905 ;;		_TMR1_Initialize
 30906 ;;		_WDT_Initialize
 30907 ;; This function is called by:
 30908 ;;		_m_system_init
 30909 ;; This function uses a non-reentrant model
 30910 ;;
 30911                           
 30912                           
 30913                           ;psect for function _SYSTEM_Initialize
 30914  3C22                     _SYSTEM_Initialize:	
 30915                           
 30916                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 30917                           
 30918                           ;incstack = 0
 30919                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 30920  3C22  31B4  24E3  31BC   	fcall	_PIN_MANAGER_Initialize
 30921                           
 30922                           ;mcc.c: 74: OSCILLATOR_Initialize();
 30923  3C25  31BA  22D6  31BC   	fcall	_OSCILLATOR_Initialize
 30924                           
 30925                           ;mcc.c: 75: WDT_Initialize();
 30926  3C28  31BA  22CE  31BC   	fcall	_WDT_Initialize
 30927                           
 30928                           ;mcc.c: 76: TMR1_Initialize();
 30929  3C2B  31BE  2648  31BC   	fcall	_TMR1_Initialize
 30930                           
 30931                           ;mcc.c: 77: TMR0_Initialize();
 30932  3C2E  3187  27EA  31BC   	fcall	_TMR0_Initialize
 30933                           
 30934                           ;mcc.c: 78: EUSART1_Initialize();
 30935  3C31  31BB  238E         	fcall	_EUSART1_Initialize
 30936  3C33  0008               	return
 30937  3C34                     __end_of_SYSTEM_Initialize:	
 30938                           
 30939                           	psect	text117
 30940  3ACE                     __ptext117:	
 30941 ;; *************** function _WDT_Initialize *****************
 30942 ;; Defined at:
 30943 ;;		line 91 in file "mcc_generated_files/mcc.c"
 30944 ;; Parameters:    Size  Location     Type
 30945 ;;		None
 30946 ;; Auto vars:     Size  Location     Type
 30947 ;;		None
 30948 ;; Return value:  Size  Location     Type
 30949 ;;                  1    wreg      void 
 30950 ;; Registers used:
 30951 ;;		wreg
 30952 ;; Tracked objects:
 30953 ;;		On entry : 0/0
 30954 ;;		On exit  : 0/0
 30955 ;;		Unchanged: 0/0
 30956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30961 ;;Total ram usage:        0 bytes
 30962 ;; Hardware stack levels used:    1
 30963 ;; Hardware stack levels required when called:    2
 30964 ;; This function calls:
 30965 ;;		Nothing
 30966 ;; This function is called by:
 30967 ;;		_SYSTEM_Initialize
 30968 ;; This function uses a non-reentrant model
 30969 ;;
 30970                           
 30971                           
 30972                           ;psect for function _WDT_Initialize
 30973  3ACE                     _WDT_Initialize:	
 30974                           
 30975                           ;mcc.c: 94: WDTCON = 0x16;
 30976                           
 30977                           ;incstack = 0
 30978                           ; Regs used in _WDT_Initialize: [wreg]
 30979  3ACE  3016               	movlw	22
 30980  3ACF  0021               	movlb	1	; select bank1
 30981  3AD0  0097               	movwf	23	;volatile
 30982  3AD1  0008               	return
 30983  3AD2                     __end_of_WDT_Initialize:	
 30984                           
 30985                           	psect	text118
 30986  3E48                     __ptext118:	
 30987 ;; *************** function _TMR1_Initialize *****************
 30988 ;; Defined at:
 30989 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 30990 ;; Parameters:    Size  Location     Type
 30991 ;;		None
 30992 ;; Auto vars:     Size  Location     Type
 30993 ;;		None
 30994 ;; Return value:  Size  Location     Type
 30995 ;;                  1    wreg      void 
 30996 ;; Registers used:
 30997 ;;		wreg, status,2, status,0, pclath, cstack
 30998 ;; Tracked objects:
 30999 ;;		On entry : 0/0
 31000 ;;		On exit  : 0/0
 31001 ;;		Unchanged: 0/0
 31002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31004 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31006 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31007 ;;Total ram usage:        0 bytes
 31008 ;; Hardware stack levels used:    1
 31009 ;; Hardware stack levels required when called:    3
 31010 ;; This function calls:
 31011 ;;		_TMR1_SetInterruptHandler
 31012 ;;		_TMR1_StartTimer
 31013 ;; This function is called by:
 31014 ;;		_SYSTEM_Initialize
 31015 ;; This function uses a non-reentrant model
 31016 ;;
 31017                           
 31018                           
 31019                           ;psect for function _TMR1_Initialize
 31020  3E48                     _TMR1_Initialize:	
 31021                           
 31022                           ;tmr1.c: 69: T1CON = 0x8C;
 31023                           
 31024                           ;incstack = 0
 31025                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31026  3E48  308C               	movlw	140
 31027  3E49  0020               	movlb	0	; select bank0
 31028  3E4A  0098               	movwf	24	;volatile
 31029                           
 31030                           ;tmr1.c: 72: T1GCON = 0x01;
 31031  3E4B  3001               	movlw	1
 31032  3E4C  0099               	movwf	25	;volatile
 31033                           
 31034                           ;tmr1.c: 75: TMR1H = 0x80;
 31035  3E4D  3080               	movlw	128
 31036  3E4E  0097               	movwf	23	;volatile
 31037                           
 31038                           ;tmr1.c: 78: TMR1L = 0x00;
 31039  3E4F  0196               	clrf	22	;volatile
 31040                           
 31041                           ;tmr1.c: 81: timer1ReloadVal=(TMR1H << 8) | TMR1L;
 31042  3E50  0817               	movf	23,w	;volatile
 31043  3E51  0022               	movlb	2	; select bank2
 31044  3E52  00EE               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
 31045  3E53  0020               	movlb	0	; select bank0
 31046  3E54  0816               	movf	22,w	;volatile
 31047  3E55  0022               	movlb	2	; select bank2
 31048  3E56  00ED               	movwf	_timer1ReloadVal^(0+256)	;volatile
 31049                           
 31050                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
 31051  3E57  0020               	movlb	0	; select bank0
 31052  3E58  1011               	bcf	17,0	;volatile
 31053                           
 31054                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
 31055  3E59  0021               	movlb	1	; select bank1
 31056  3E5A  1411               	bsf	17,0	;volatile
 31057                           
 31058                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 31059  3E5B  3000               	movlw	0
 31060  3E5C  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 31061  3E5D  3000               	movlw	0
 31062  3E5E  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 31063  3E5F  31BA  22EC  31BE   	fcall	_TMR1_SetInterruptHandler
 31064                           
 31065                           ;tmr1.c: 93: TMR1_StartTimer();
 31066  3E62  3198  2000         	fcall	_TMR1_StartTimer
 31067  3E64  0008               	return
 31068  3E65                     __end_of_TMR1_Initialize:	
 31069                           
 31070                           	psect	text119
 31071  1800                     __ptext119:	
 31072 ;; *************** function _TMR1_StartTimer *****************
 31073 ;; Defined at:
 31074 ;;		line 96 in file "mcc_generated_files/tmr1.c"
 31075 ;; Parameters:    Size  Location     Type
 31076 ;;		None
 31077 ;; Auto vars:     Size  Location     Type
 31078 ;;		None
 31079 ;; Return value:  Size  Location     Type
 31080 ;;                  1    wreg      void 
 31081 ;; Registers used:
 31082 ;;		None
 31083 ;; Tracked objects:
 31084 ;;		On entry : 0/0
 31085 ;;		On exit  : 0/0
 31086 ;;		Unchanged: 0/0
 31087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31088 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31089 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31091 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31092 ;;Total ram usage:        0 bytes
 31093 ;; Hardware stack levels used:    1
 31094 ;; Hardware stack levels required when called:    2
 31095 ;; This function calls:
 31096 ;;		Nothing
 31097 ;; This function is called by:
 31098 ;;		_TMR1_Initialize
 31099 ;; This function uses a non-reentrant model
 31100 ;;
 31101                           
 31102                           
 31103                           ;psect for function _TMR1_StartTimer
 31104  1800                     _TMR1_StartTimer:	
 31105                           
 31106                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
 31107                           
 31108                           ;incstack = 0
 31109                           ; Regs used in _TMR1_StartTimer: []
 31110  1800  0020               	movlb	0	; select bank0
 31111  1801  1418               	bsf	24,0	;volatile
 31112  1802  0008               	return
 31113  1803                     __end_of_TMR1_StartTimer:	
 31114                           
 31115                           	psect	text120
 31116  3AEC                     __ptext120:	
 31117 ;; *************** function _TMR1_SetInterruptHandler *****************
 31118 ;; Defined at:
 31119 ;;		line 179 in file "mcc_generated_files/tmr1.c"
 31120 ;; Parameters:    Size  Location     Type
 31121 ;;  InterruptHan    2    3[COMMON] PTR void 
 31122 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 31123 ;; Auto vars:     Size  Location     Type
 31124 ;;		None
 31125 ;; Return value:  Size  Location     Type
 31126 ;;                  1    wreg      void 
 31127 ;; Registers used:
 31128 ;;		wreg
 31129 ;; Tracked objects:
 31130 ;;		On entry : 0/0
 31131 ;;		On exit  : 0/0
 31132 ;;		Unchanged: 0/0
 31133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31134 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31137 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31138 ;;Total ram usage:        2 bytes
 31139 ;; Hardware stack levels used:    1
 31140 ;; Hardware stack levels required when called:    2
 31141 ;; This function calls:
 31142 ;;		Nothing
 31143 ;; This function is called by:
 31144 ;;		_TMR1_Initialize
 31145 ;; This function uses a non-reentrant model
 31146 ;;
 31147                           
 31148                           
 31149                           ;psect for function _TMR1_SetInterruptHandler
 31150  3AEC                     _TMR1_SetInterruptHandler:	
 31151                           
 31152                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
 31153                           
 31154                           ;incstack = 0
 31155                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 31156  3AEC  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 31157  3AED  0023               	movlb	3	; select bank3
 31158  3AEE  00D1               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
 31159  3AEF  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 31160  3AF0  00D0               	movwf	_TMR1_InterruptHandler^(0+384)
 31161  3AF1  0008               	return
 31162  3AF2                     __end_of_TMR1_SetInterruptHandler:	
 31163                           
 31164                           	psect	text121
 31165  07EA                     __ptext121:	
 31166 ;; *************** function _TMR0_Initialize *****************
 31167 ;; Defined at:
 31168 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 31169 ;; Parameters:    Size  Location     Type
 31170 ;;		None
 31171 ;; Auto vars:     Size  Location     Type
 31172 ;;		None
 31173 ;; Return value:  Size  Location     Type
 31174 ;;                  1    wreg      void 
 31175 ;; Registers used:
 31176 ;;		wreg, status,2, status,0, pclath, cstack
 31177 ;; Tracked objects:
 31178 ;;		On entry : 0/0
 31179 ;;		On exit  : 0/0
 31180 ;;		Unchanged: 0/0
 31181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31184 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31185 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31186 ;;Total ram usage:        1 bytes
 31187 ;; Hardware stack levels used:    1
 31188 ;; Hardware stack levels required when called:    3
 31189 ;; This function calls:
 31190 ;;		_TMR0_SetInterruptHandler
 31191 ;; This function is called by:
 31192 ;;		_SYSTEM_Initialize
 31193 ;; This function uses a non-reentrant model
 31194 ;;
 31195                           
 31196                           
 31197                           ;psect for function _TMR0_Initialize
 31198  07EA                     _TMR0_Initialize:	
 31199                           
 31200                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xC7 & 0x3F;
 31201                           
 31202                           ;incstack = 0
 31203                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31204  07EA  0021               	movlb	1	; select bank1
 31205  07EB  0815               	movf	21,w	;volatile
 31206  07EC  39C0               	andlw	192
 31207  07ED  3807               	iorlw	7
 31208  07EE  0095               	movwf	21	;volatile
 31209                           
 31210                           ;tmr0.c: 73: TMR0 = 0x94;
 31211  07EF  3094               	movlw	148
 31212  07F0  0020               	movlb	0	; select bank0
 31213  07F1  0095               	movwf	21	;volatile
 31214                           
 31215                           ;tmr0.c: 76: timer0ReloadVal= 148;
 31216  07F2  3094               	movlw	148
 31217  07F3  00F5               	movwf	??_TMR0_Initialize
 31218  07F4  0875               	movf	??_TMR0_Initialize,w
 31219  07F5  0022               	movlb	2	; select bank2
 31220  07F6  00EF               	movwf	_timer0ReloadVal^(0+256)	;volatile
 31221                           
 31222                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
 31223  07F7  110B               	bcf	11,2	;volatile
 31224                           
 31225                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
 31226  07F8  168B               	bsf	11,5	;volatile
 31227                           
 31228                           ;tmr0.c: 85: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 31229  07F9  3000               	movlw	0
 31230  07FA  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 31231  07FB  3000               	movlw	0
 31232  07FC  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 31233  07FD  31BA  22E6         	fcall	_TMR0_SetInterruptHandler
 31234  07FF  0008               	return
 31235  0800                     __end_of_TMR0_Initialize:	
 31236                           
 31237                           	psect	text122
 31238  3AE6                     __ptext122:	
 31239 ;; *************** function _TMR0_SetInterruptHandler *****************
 31240 ;; Defined at:
 31241 ;;		line 155 in file "mcc_generated_files/tmr0.c"
 31242 ;; Parameters:    Size  Location     Type
 31243 ;;  InterruptHan    2    3[COMMON] PTR void 
 31244 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 31245 ;; Auto vars:     Size  Location     Type
 31246 ;;		None
 31247 ;; Return value:  Size  Location     Type
 31248 ;;                  1    wreg      void 
 31249 ;; Registers used:
 31250 ;;		wreg
 31251 ;; Tracked objects:
 31252 ;;		On entry : 0/0
 31253 ;;		On exit  : 0/0
 31254 ;;		Unchanged: 0/0
 31255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31256 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31259 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31260 ;;Total ram usage:        2 bytes
 31261 ;; Hardware stack levels used:    1
 31262 ;; Hardware stack levels required when called:    2
 31263 ;; This function calls:
 31264 ;;		Nothing
 31265 ;; This function is called by:
 31266 ;;		_TMR0_Initialize
 31267 ;; This function uses a non-reentrant model
 31268 ;;
 31269                           
 31270                           
 31271                           ;psect for function _TMR0_SetInterruptHandler
 31272  3AE6                     _TMR0_SetInterruptHandler:	
 31273                           
 31274                           ;tmr0.c: 156: TMR0_InterruptHandler = InterruptHandler;
 31275                           
 31276                           ;incstack = 0
 31277                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 31278  3AE6  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 31279  3AE7  0023               	movlb	3	; select bank3
 31280  3AE8  00CF               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 31281  3AE9  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 31282  3AEA  00CE               	movwf	_TMR0_InterruptHandler^(0+384)
 31283  3AEB  0008               	return
 31284  3AEC                     __end_of_TMR0_SetInterruptHandler:	
 31285                           
 31286                           	psect	text123
 31287  34E3                     __ptext123:	
 31288 ;; *************** function _PIN_MANAGER_Initialize *****************
 31289 ;; Defined at:
 31290 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 31291 ;; Parameters:    Size  Location     Type
 31292 ;;		None
 31293 ;; Auto vars:     Size  Location     Type
 31294 ;;		None
 31295 ;; Return value:  Size  Location     Type
 31296 ;;                  1    wreg      void 
 31297 ;; Registers used:
 31298 ;;		wreg, status,2
 31299 ;; Tracked objects:
 31300 ;;		On entry : 0/0
 31301 ;;		On exit  : 0/0
 31302 ;;		Unchanged: 0/0
 31303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31308 ;;Total ram usage:        0 bytes
 31309 ;; Hardware stack levels used:    1
 31310 ;; Hardware stack levels required when called:    2
 31311 ;; This function calls:
 31312 ;;		Nothing
 31313 ;; This function is called by:
 31314 ;;		_SYSTEM_Initialize
 31315 ;; This function uses a non-reentrant model
 31316 ;;
 31317                           
 31318                           
 31319                           ;psect for function _PIN_MANAGER_Initialize
 31320  34E3                     _PIN_MANAGER_Initialize:	
 31321                           
 31322                           ;pin_manager.c: 56: LATE = 0x00;
 31323                           
 31324                           ;incstack = 0
 31325                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 31326  34E3  0022               	movlb	2	; select bank2
 31327  34E4  0190               	clrf	16	;volatile
 31328                           
 31329                           ;pin_manager.c: 57: LATD = 0x02;
 31330  34E5  3002               	movlw	2
 31331  34E6  008F               	movwf	15	;volatile
 31332                           
 31333                           ;pin_manager.c: 58: LATA = 0x00;
 31334  34E7  018C               	clrf	12	;volatile
 31335                           
 31336                           ;pin_manager.c: 59: LATF = 0x00;
 31337  34E8  0027               	movlb	7	; select bank7
 31338  34E9  018C               	clrf	12	;volatile
 31339                           
 31340                           ;pin_manager.c: 60: LATB = 0x00;
 31341  34EA  0022               	movlb	2	; select bank2
 31342  34EB  018D               	clrf	13	;volatile
 31343                           
 31344                           ;pin_manager.c: 61: LATG = 0x00;
 31345  34EC  0027               	movlb	7	; select bank7
 31346  34ED  018D               	clrf	13	;volatile
 31347                           
 31348                           ;pin_manager.c: 62: LATC = 0x00;
 31349  34EE  0022               	movlb	2	; select bank2
 31350  34EF  018E               	clrf	14	;volatile
 31351                           
 31352                           ;pin_manager.c: 67: TRISE = 0xDF;
 31353  34F0  30DF               	movlw	223
 31354  34F1  0021               	movlb	1	; select bank1
 31355  34F2  0090               	movwf	16	;volatile
 31356                           
 31357                           ;pin_manager.c: 68: TRISF = 0xFF;
 31358  34F3  30FF               	movlw	255
 31359  34F4  0026               	movlb	6	; select bank6
 31360  34F5  008C               	movwf	12	;volatile
 31361                           
 31362                           ;pin_manager.c: 69: TRISA = 0xFF;
 31363  34F6  30FF               	movlw	255
 31364  34F7  0021               	movlb	1	; select bank1
 31365  34F8  008C               	movwf	12	;volatile
 31366                           
 31367                           ;pin_manager.c: 70: TRISG = 0x3F;
 31368  34F9  303F               	movlw	63
 31369  34FA  0026               	movlb	6	; select bank6
 31370  34FB  008D               	movwf	13	;volatile
 31371                           
 31372                           ;pin_manager.c: 71: TRISB = 0xFF;
 31373  34FC  30FF               	movlw	255
 31374  34FD  0021               	movlb	1	; select bank1
 31375  34FE  008D               	movwf	13	;volatile
 31376                           
 31377                           ;pin_manager.c: 72: TRISC = 0xFF;
 31378  34FF  30FF               	movlw	255
 31379  3500  008E               	movwf	14	;volatile
 31380                           
 31381                           ;pin_manager.c: 73: TRISD = 0xFD;
 31382  3501  30FD               	movlw	253
 31383  3502  008F               	movwf	15	;volatile
 31384                           
 31385                           ;pin_manager.c: 78: ANSELE = 0x00;
 31386  3503  0023               	movlb	3	; select bank3
 31387  3504  0190               	clrf	16	;volatile
 31388                           
 31389                           ;pin_manager.c: 79: ANSELG = 0x1C;
 31390  3505  301C               	movlw	28
 31391  3506  0028               	movlb	8	; select bank8
 31392  3507  008D               	movwf	13	;volatile
 31393                           
 31394                           ;pin_manager.c: 80: ANSELF = 0xFF;
 31395  3508  30FF               	movlw	255
 31396  3509  008C               	movwf	12	;volatile
 31397                           
 31398                           ;pin_manager.c: 81: ANSELA = 0x2F;
 31399  350A  302F               	movlw	47
 31400  350B  0023               	movlb	3	; select bank3
 31401  350C  008C               	movwf	12	;volatile
 31402                           
 31403                           ;pin_manager.c: 86: WPUB = 0xFF;
 31404  350D  30FF               	movlw	255
 31405  350E  0024               	movlb	4	; select bank4
 31406  350F  008D               	movwf	13	;volatile
 31407                           
 31408                           ;pin_manager.c: 87: WPUG = 0x20;
 31409  3510  3020               	movlw	32
 31410  3511  0029               	movlb	9	; select bank9
 31411  3512  008D               	movwf	13	;volatile
 31412                           
 31413                           ;pin_manager.c: 88: OPTION_REGbits.nWPUEN = 0;
 31414  3513  0021               	movlb	1	; select bank1
 31415  3514  1395               	bcf	21,7	;volatile
 31416                           
 31417                           ;pin_manager.c: 94: APFCON = 0x00;
 31418  3515  0022               	movlb	2	; select bank2
 31419  3516  019D               	clrf	29	;volatile
 31420  3517  0008               	return
 31421  3518                     __end_of_PIN_MANAGER_Initialize:	
 31422                           
 31423                           	psect	text124
 31424  3AD6                     __ptext124:	
 31425 ;; *************** function _OSCILLATOR_Initialize *****************
 31426 ;; Defined at:
 31427 ;;		line 81 in file "mcc_generated_files/mcc.c"
 31428 ;; Parameters:    Size  Location     Type
 31429 ;;		None
 31430 ;; Auto vars:     Size  Location     Type
 31431 ;;		None
 31432 ;; Return value:  Size  Location     Type
 31433 ;;                  1    wreg      void 
 31434 ;; Registers used:
 31435 ;;		wreg, status,2
 31436 ;; Tracked objects:
 31437 ;;		On entry : 0/0
 31438 ;;		On exit  : 0/0
 31439 ;;		Unchanged: 0/0
 31440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31445 ;;Total ram usage:        0 bytes
 31446 ;; Hardware stack levels used:    1
 31447 ;; Hardware stack levels required when called:    2
 31448 ;; This function calls:
 31449 ;;		Nothing
 31450 ;; This function is called by:
 31451 ;;		_SYSTEM_Initialize
 31452 ;; This function uses a non-reentrant model
 31453 ;;
 31454                           
 31455                           
 31456                           ;psect for function _OSCILLATOR_Initialize
 31457  3AD6                     _OSCILLATOR_Initialize:	
 31458                           
 31459                           ;mcc.c: 84: OSCCON = 0x78;
 31460                           
 31461                           ;incstack = 0
 31462                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 31463  3AD6  3078               	movlw	120
 31464  3AD7  0021               	movlb	1	; select bank1
 31465  3AD8  0099               	movwf	25	;volatile
 31466                           
 31467                           ;mcc.c: 86: OSCTUNE = 0x00;
 31468  3AD9  0198               	clrf	24	;volatile
 31469  3ADA  0008               	return
 31470  3ADB                     __end_of_OSCILLATOR_Initialize:	
 31471                           
 31472                           	psect	text125
 31473  3B8E                     __ptext125:	
 31474 ;; *************** function _EUSART1_Initialize *****************
 31475 ;; Defined at:
 31476 ;;		line 14 in file "mcc_generated_files/eusart1.c"
 31477 ;; Parameters:    Size  Location     Type
 31478 ;;		None
 31479 ;; Auto vars:     Size  Location     Type
 31480 ;;		None
 31481 ;; Return value:  Size  Location     Type
 31482 ;;                  1    wreg      void 
 31483 ;; Registers used:
 31484 ;;		wreg
 31485 ;; Tracked objects:
 31486 ;;		On entry : 0/0
 31487 ;;		On exit  : 0/0
 31488 ;;		Unchanged: 0/0
 31489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31494 ;;Total ram usage:        0 bytes
 31495 ;; Hardware stack levels used:    1
 31496 ;; Hardware stack levels required when called:    2
 31497 ;; This function calls:
 31498 ;;		Nothing
 31499 ;; This function is called by:
 31500 ;;		_SYSTEM_Initialize
 31501 ;; This function uses a non-reentrant model
 31502 ;;
 31503                           
 31504                           
 31505                           ;psect for function _EUSART1_Initialize
 31506  3B8E                     _EUSART1_Initialize:	
 31507                           
 31508                           ;eusart1.c: 17: PIE1bits.RC1IE = 0;
 31509                           
 31510                           ;incstack = 0
 31511                           ; Regs used in _EUSART1_Initialize: [wreg]
 31512  3B8E  0021               	movlb	1	; select bank1
 31513  3B8F  1291               	bcf	17,5	;volatile
 31514                           
 31515                           ;eusart1.c: 18: PIE1bits.TX1IE = 0;
 31516  3B90  1211               	bcf	17,4	;volatile
 31517                           
 31518                           ;eusart1.c: 21: BAUD1CON = 0x08;
 31519  3B91  3008               	movlw	8
 31520  3B92  0023               	movlb	3	; select bank3
 31521  3B93  009F               	movwf	31	;volatile
 31522                           
 31523                           ;eusart1.c: 23: RC1STA = 0x90;
 31524  3B94  3090               	movlw	144
 31525  3B95  009D               	movwf	29	;volatile
 31526                           
 31527                           ;eusart1.c: 25: TX1STA = 0x24;
 31528  3B96  3024               	movlw	36
 31529  3B97  009E               	movwf	30	;volatile
 31530                           
 31531                           ;eusart1.c: 27: SP1BRGL = 0x1F;
 31532  3B98  301F               	movlw	31
 31533  3B99  009B               	movwf	27	;volatile
 31534                           
 31535                           ;eusart1.c: 29: SP1BRGH = 0x01;
 31536  3B9A  3001               	movlw	1
 31537  3B9B  009C               	movwf	28	;volatile
 31538  3B9C  0008               	return
 31539  3B9D                     __end_of_EUSART1_Initialize:	
 31540                           
 31541                           	psect	text126
 31542  2F09                     __ptext126:	
 31543 ;; *************** function _flow_sampling_process *****************
 31544 ;; Defined at:
 31545 ;;		line 257 in file "src/app/flow.c"
 31546 ;; Parameters:    Size  Location     Type
 31547 ;;		None
 31548 ;; Auto vars:     Size  Location     Type
 31549 ;;  i               1   44[BANK0 ] unsigned char 
 31550 ;; Return value:  Size  Location     Type
 31551 ;;                  1    wreg      void 
 31552 ;; Registers used:
 31553 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31554 ;; Tracked objects:
 31555 ;;		On entry : 0/0
 31556 ;;		On exit  : 0/0
 31557 ;;		Unchanged: 0/0
 31558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31560 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 31561 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 31562 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 31563 ;;Total ram usage:        2 bytes
 31564 ;; Hardware stack levels used:    1
 31565 ;; Hardware stack levels required when called:    7
 31566 ;; This function calls:
 31567 ;;		_adc_mcp3241_read_convert_16
 31568 ;;		_adc_mcp3241_start_convert_16
 31569 ;;		_app_flow_adc_2_flow
 31570 ;;		_app_flow_get_adcAverageValue
 31571 ;;		_app_flow_lookup
 31572 ;;		_app_flow_money_off
 31573 ;;		_app_flow_money_warning
 31574 ;;		_app_flow_rt_balance_money_cal
 31575 ;;		_app_flow_rt_volume_cal_ex
 31576 ;; This function is called by:
 31577 ;;		_main
 31578 ;; This function uses a non-reentrant model
 31579 ;;
 31580                           
 31581                           
 31582                           ;psect for function _flow_sampling_process
 31583  2F09                     _flow_sampling_process:	
 31584                           
 31585                           ;flow.c: 259: uint8_t i;
 31586                           ;flow.c: 260: Event &= ~(0x01<<1);
 31587                           
 31588                           ;incstack = 0
 31589                           ; Regs used in _flow_sampling_process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31590  2F09  30FD               	movlw	253
 31591  2F0A  0020               	movlb	0	; select bank0
 31592  2F0B  00CB               	movwf	??_flow_sampling_process
 31593  2F0C  084B               	movf	??_flow_sampling_process,w
 31594  2F0D  0021               	movlb	1	; select bank1
 31595  2F0E  05C8               	andwf	_Event^(0+128),f
 31596                           
 31597                           ;flow.c: 262: adcvalue = adc_mcp3241_read_convert_16(&i);
 31598  2F0F  304C               	movlw	(low (flow_sampling_process@i| 0))& (0+255)
 31599  2F10  31B5  25BD  31AF   	fcall	_adc_mcp3241_read_convert_16
 31600  2F13  0020               	movlb	0	; select bank0
 31601  2F14  0823               	movf	?_adc_mcp3241_read_convert_16+1,w
 31602  2F15  0022               	movlb	2	; select bank2
 31603  2F16  00A3               	movwf	(_adcvalue+1)^(0+256)	;volatile
 31604  2F17  0020               	movlb	0	; select bank0
 31605  2F18  0822               	movf	?_adc_mcp3241_read_convert_16,w
 31606  2F19  0022               	movlb	2	; select bank2
 31607  2F1A  00A2               	movwf	_adcvalue^(0+256)	;volatile
 31608                           
 31609                           ;flow.c: 263: __nop();
 31610  2F1B  0000               	nop
 31611                           
 31612                           ;flow.c: 264: if ((i & 0x80) == 0) {
 31613  2F1C  0020               	movlb	0	; select bank0
 31614  2F1D  1BCC               	btfsc	flow_sampling_process@i,7
 31615  2F1E  2F41               	goto	l16121
 31616                           
 31617                           ;flow.c: 265: if(adcSamplingTimes<=20){
 31618  2F1F  3015               	movlw	21
 31619  2F20  0021               	movlb	1	; select bank1
 31620  2F21  023F               	subwf	_adcSamplingTimes^(0+128),w
 31621  2F22  1803               	skipnc
 31622  2F23  2F41               	goto	l16121
 31623                           
 31624                           ;flow.c: 266: adcvalue=adcvalue & 0x1fff;
 31625  2F24  30FF               	movlw	255
 31626  2F25  0022               	movlb	2	; select bank2
 31627  2F26  0522               	andwf	_adcvalue^(0+256),w	;volatile
 31628  2F27  00A2               	movwf	_adcvalue^(0+256)	;volatile
 31629  2F28  301F               	movlw	31
 31630  2F29  0523               	andwf	(_adcvalue+1)^(0+256),w	;volatile
 31631  2F2A  00A3               	movwf	(_adcvalue+1)^(0+256)	;volatile
 31632                           
 31633                           ;flow.c: 267: adcvalue<<=4;
 31634  2F2B  3004               	movlw	4
 31635  2F2C                     u15065:	
 31636  2F2C  35A2               	lslf	_adcvalue^(0+256),f	;volatile
 31637  2F2D  0DA3               	rlf	(_adcvalue+1)^(0+256),f	;volatile
 31638  2F2E  0B89               	decfsz	9,f
 31639  2F2F  2F2C               	goto	u15065
 31640                           
 31641                           ;flow.c: 268: adcSamplingBuffer[adcSamplingTimes]=adcvalue;
 31642  2F30  0021               	movlb	1	; select bank1
 31643  2F31  353F               	lslf	_adcSamplingTimes^(0+128),w
 31644  2F32  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 31645  2F33  0086               	movwf	6
 31646  2F34  3002               	movlw	2	; select bank5/6
 31647  2F35  0087               	movwf	7
 31648  2F36  0022               	movlb	2	; select bank2
 31649  2F37  0822               	movf	_adcvalue^(0+256),w	;volatile
 31650  2F38  3FC0               	movwi [0]fsr1
 31651  2F39  0823               	movf	(_adcvalue+1)^(0+256),w	;volatile
 31652  2F3A  3FC1               	movwi [1]fsr1
 31653                           
 31654                           ;flow.c: 269: adcSamplingTimes++;
 31655  2F3B  3001               	movlw	1
 31656  2F3C  0020               	movlb	0	; select bank0
 31657  2F3D  00CB               	movwf	??_flow_sampling_process
 31658  2F3E  084B               	movf	??_flow_sampling_process,w
 31659  2F3F  0021               	movlb	1	; select bank1
 31660  2F40  07BF               	addwf	_adcSamplingTimes^(0+128),f
 31661  2F41                     l16121:	
 31662                           
 31663                           ;flow.c: 270: }
 31664                           ;flow.c: 271: }
 31665                           ;flow.c: 272: if(adcSamplingTimes>=20){
 31666  2F41  3014               	movlw	20
 31667  2F42  0021               	movlb	1	; select bank1
 31668  2F43  023F               	subwf	_adcSamplingTimes^(0+128),w
 31669  2F44  1C03               	skipc
 31670  2F45  2F7D               	goto	l16143
 31671                           
 31672                           ;flow.c: 273: adcAverageValue=app_flow_get_adcAverageValue();
 31673  2F46  3190  20CA  31AF   	fcall	_app_flow_get_adcAverageValue
 31674  2F49  0020               	movlb	0	; select bank0
 31675  2F4A  0836               	movf	?_app_flow_get_adcAverageValue+1,w
 31676  2F4B  0021               	movlb	1	; select bank1
 31677  2F4C  00B9               	movwf	(_adcAverageValue+1)^(0+128)	;volatile
 31678  2F4D  0020               	movlb	0	; select bank0
 31679  2F4E  0835               	movf	?_app_flow_get_adcAverageValue,w
 31680  2F4F  0021               	movlb	1	; select bank1
 31681  2F50  00B8               	movwf	_adcAverageValue^(0+128)	;volatile
 31682                           
 31683                           ;flow.c: 274: adcSamplingTimes=0;
 31684  2F51  01BF               	clrf	_adcSamplingTimes^(0+128)
 31685                           
 31686                           ;flow.c: 275: i = app_flow_lookup(adcAverageValue);
 31687  2F52  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 31688  2F53  00F4               	movwf	app_flow_lookup@adcValue+1
 31689  2F54  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 31690  2F55  00F3               	movwf	app_flow_lookup@adcValue
 31691  2F56  31A3  2357  31AF   	fcall	_app_flow_lookup
 31692  2F59  0020               	movlb	0	; select bank0
 31693  2F5A  00CB               	movwf	??_flow_sampling_process
 31694  2F5B  084B               	movf	??_flow_sampling_process,w
 31695  2F5C  00CC               	movwf	flow_sampling_process@i
 31696                           
 31697                           ;flow.c: 276: flow = app_flow_adc_2_flow(i);
 31698  2F5D  084C               	movf	flow_sampling_process@i,w
 31699  2F5E  3183  23BD  31AF   	fcall	_app_flow_adc_2_flow
 31700  2F61  0020               	movlb	0	; select bank0
 31701  2F62  0836               	movf	?_app_flow_adc_2_flow+1,w
 31702  2F63  0021               	movlb	1	; select bank1
 31703  2F64  00BD               	movwf	(_flow+1)^(0+128)	;volatile
 31704  2F65  0020               	movlb	0	; select bank0
 31705  2F66  0835               	movf	?_app_flow_adc_2_flow,w
 31706  2F67  0021               	movlb	1	; select bank1
 31707  2F68  00BC               	movwf	_flow^(0+128)	;volatile
 31708                           
 31709                           ;flow.c: 278: if( Event & (uint8_t)(0x01<<7)){
 31710  2F69  1FC8               	btfss	_Event^(0+128),7
 31711  2F6A  2F77               	goto	l16139
 31712                           
 31713                           ;flow.c: 279: Event &= ~(uint8_t)(0x01<<7);
 31714  2F6B  307F               	movlw	127
 31715  2F6C  0020               	movlb	0	; select bank0
 31716  2F6D  00CB               	movwf	??_flow_sampling_process
 31717  2F6E  084B               	movf	??_flow_sampling_process,w
 31718  2F6F  0021               	movlb	1	; select bank1
 31719  2F70  05C8               	andwf	_Event^(0+128),f
 31720                           
 31721                           ;flow.c: 281: app_flow_rt_volume_cal_ex();
 31722  2F71  3199  2119  31AF   	fcall	_app_flow_rt_volume_cal_ex
 31723                           
 31724                           ;flow.c: 282: app_flow_rt_balance_money_cal();
 31725  2F74  31A2  222A  31AF   	fcall	_app_flow_rt_balance_money_cal
 31726  2F77                     l16139:	
 31727                           
 31728                           ;flow.c: 283: }
 31729                           ;flow.c: 285: app_flow_money_warning();
 31730  2F77  31BF  27D9  31AF   	fcall	_app_flow_money_warning
 31731                           
 31732                           ;flow.c: 286: app_flow_money_off();
 31733  2F7A  31B0  20D8  31AF   	fcall	_app_flow_money_off
 31734  2F7D                     l16143:	
 31735                           
 31736                           ;flow.c: 287: }
 31737                           ;flow.c: 289: adc_mcp3241_start_convert_16(0, 0);
 31738  2F7D  0020               	movlb	0	; select bank0
 31739  2F7E  01A2               	clrf	adc_mcp3241_start_convert_16@g
 31740  2F7F  3000               	movlw	0
 31741  2F80  31B3  232B         	fcall	_adc_mcp3241_start_convert_16
 31742  2F82  0008               	return
 31743  2F83                     __end_of_flow_sampling_process:	
 31744                           
 31745                           	psect	text127
 31746  1919                     __ptext127:	
 31747 ;; *************** function _app_flow_rt_volume_cal_ex *****************
 31748 ;; Defined at:
 31749 ;;		line 165 in file "src/app/flow.c"
 31750 ;; Parameters:    Size  Location     Type
 31751 ;;		None
 31752 ;; Auto vars:     Size  Location     Type
 31753 ;;		None
 31754 ;; Return value:  Size  Location     Type
 31755 ;;                  1    wreg      void 
 31756 ;; Registers used:
 31757 ;;		wreg, status,2, status,0, pclath, cstack
 31758 ;; Tracked objects:
 31759 ;;		On entry : 0/0
 31760 ;;		On exit  : 0/0
 31761 ;;		Unchanged: 0/0
 31762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31764 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31765 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 31766 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 31767 ;;Total ram usage:        4 bytes
 31768 ;; Hardware stack levels used:    1
 31769 ;; Hardware stack levels required when called:    3
 31770 ;; This function calls:
 31771 ;;		___lldiv
 31772 ;;		___llmod
 31773 ;;		___lmul
 31774 ;; This function is called by:
 31775 ;;		_flow_sampling_process
 31776 ;; This function uses a non-reentrant model
 31777 ;;
 31778                           
 31779                           
 31780                           ;psect for function _app_flow_rt_volume_cal_ex
 31781  1919                     _app_flow_rt_volume_cal_ex:	
 31782                           
 31783                           ;flow.c: 167: fl_t32=flow;
 31784                           
 31785                           ;incstack = 0
 31786                           ; Regs used in _app_flow_rt_volume_cal_ex: [wreg+status,2+status,0+pclath+cstack]
 31787  1919  0021               	movlb	1	; select bank1
 31788  191A  083C               	movf	_flow^(0+128),w	;volatile
 31789  191B  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31790  191C  083D               	movf	(_flow+1)^(0+128),w	;volatile
 31791  191D  00A5               	movwf	(_fl_t32^(0+128)+1)	;volatile
 31792  191E  01A6               	clrf	(_fl_t32^(0+128)+2)	;volatile
 31793  191F  01A7               	clrf	(_fl_t32^(0+128)+3)	;volatile
 31794                           
 31795                           ;flow.c: 169: fl_t32 = fl_t32 * (uint32_t)calVolumeTimeSec;
 31796  1920  0022               	movlb	2	; select bank2
 31797  1921  0841               	movf	_calVolumeTimeSec^(0+256),w
 31798  1922  0020               	movlb	0	; select bank0
 31799  1923  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31800  1924  01B6               	clrf	??_app_flow_rt_volume_cal_ex+1
 31801  1925  01B7               	clrf	??_app_flow_rt_volume_cal_ex+2
 31802  1926  01B8               	clrf	??_app_flow_rt_volume_cal_ex+3
 31803  1927  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31804  1928  00A3               	movwf	___lmul@multiplier+3
 31805  1929  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31806  192A  00A2               	movwf	___lmul@multiplier+2
 31807  192B  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31808  192C  00A1               	movwf	___lmul@multiplier+1
 31809  192D  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31810  192E  00A0               	movwf	___lmul@multiplier
 31811  192F  0021               	movlb	1	; select bank1
 31812  1930  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 31813  1931  0020               	movlb	0	; select bank0
 31814  1932  00A7               	movwf	___lmul@multiplicand+3
 31815  1933  0021               	movlb	1	; select bank1
 31816  1934  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 31817  1935  0020               	movlb	0	; select bank0
 31818  1936  00A6               	movwf	___lmul@multiplicand+2
 31819  1937  0021               	movlb	1	; select bank1
 31820  1938  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 31821  1939  0020               	movlb	0	; select bank0
 31822  193A  00A5               	movwf	___lmul@multiplicand+1
 31823  193B  0021               	movlb	1	; select bank1
 31824  193C  0824               	movf	_fl_t32^(0+128),w	;volatile
 31825  193D  0020               	movlb	0	; select bank0
 31826  193E  00A4               	movwf	___lmul@multiplicand
 31827  193F  31B3  235B  3199   	fcall	___lmul
 31828  1942  0020               	movlb	0	; select bank0
 31829  1943  0823               	movf	?___lmul+3,w
 31830  1944  0021               	movlb	1	; select bank1
 31831  1945  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 31832  1946  0020               	movlb	0	; select bank0
 31833  1947  0822               	movf	?___lmul+2,w
 31834  1948  0021               	movlb	1	; select bank1
 31835  1949  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 31836  194A  0020               	movlb	0	; select bank0
 31837  194B  0821               	movf	?___lmul+1,w
 31838  194C  0021               	movlb	1	; select bank1
 31839  194D  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 31840  194E  0020               	movlb	0	; select bank0
 31841  194F  0820               	movf	?___lmul,w
 31842  1950  0021               	movlb	1	; select bank1
 31843  1951  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31844                           
 31845                           ;flow.c: 170: fl_t32>>=1;
 31846  1952  3001               	movlw	1
 31847  1953                     u14005:	
 31848  1953  36A7               	lsrf	(_fl_t32+3)^(0+128),f	;volatile
 31849  1954  0CA6               	rrf	(_fl_t32+2)^(0+128),f	;volatile
 31850  1955  0CA5               	rrf	(_fl_t32+1)^(0+128),f	;volatile
 31851  1956  0CA4               	rrf	_fl_t32^(0+128),f	;volatile
 31852  1957  0B89               	decfsz	9,f
 31853  1958  2953               	goto	u14005
 31854                           
 31855                           ;flow.c: 173: rtVolume_L=rtVolume_L+fl_t32;
 31856  1959  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31857  195A  0724               	addwf	_fl_t32^(0+128),w	;volatile
 31858  195B  0020               	movlb	0	; select bank0
 31859  195C  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31860  195D  0021               	movlb	1	; select bank1
 31861  195E  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31862  195F  3D25               	addwfc	(_fl_t32+1)^(0+128),w	;volatile
 31863  1960  0020               	movlb	0	; select bank0
 31864  1961  00B6               	movwf	??_app_flow_rt_volume_cal_ex+1
 31865  1962  0021               	movlb	1	; select bank1
 31866  1963  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31867  1964  3D26               	addwfc	(_fl_t32+2)^(0+128),w	;volatile
 31868  1965  0020               	movlb	0	; select bank0
 31869  1966  00B7               	movwf	??_app_flow_rt_volume_cal_ex+2
 31870  1967  0021               	movlb	1	; select bank1
 31871  1968  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31872  1969  3D27               	addwfc	(_fl_t32+3)^(0+128),w	;volatile
 31873  196A  0020               	movlb	0	; select bank0
 31874  196B  00B8               	movwf	??_app_flow_rt_volume_cal_ex+3
 31875  196C  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31876  196D  0021               	movlb	1	; select bank1
 31877  196E  00A3               	movwf	(_rtVolume_L+3)^(0+128)	;volatile
 31878  196F  0020               	movlb	0	; select bank0
 31879  1970  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31880  1971  0021               	movlb	1	; select bank1
 31881  1972  00A2               	movwf	(_rtVolume_L+2)^(0+128)	;volatile
 31882  1973  0020               	movlb	0	; select bank0
 31883  1974  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31884  1975  0021               	movlb	1	; select bank1
 31885  1976  00A1               	movwf	(_rtVolume_L+1)^(0+128)	;volatile
 31886  1977  0020               	movlb	0	; select bank0
 31887  1978  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31888  1979  0021               	movlb	1	; select bank1
 31889  197A  00A0               	movwf	_rtVolume_L^(0+128)	;volatile
 31890                           
 31891                           ;flow.c: 174: rtVolume_m3=rtVolume_m3+(rtVolume_L / 60000ul);
 31892  197B  3000               	movlw	0
 31893  197C  0020               	movlb	0	; select bank0
 31894  197D  00AB               	movwf	___lldiv@divisor+3
 31895  197E  3000               	movlw	0
 31896  197F  00AA               	movwf	___lldiv@divisor+2
 31897  1980  30EA               	movlw	234
 31898  1981  00A9               	movwf	___lldiv@divisor+1
 31899  1982  3060               	movlw	96
 31900  1983  00A8               	movwf	___lldiv@divisor
 31901  1984  0021               	movlb	1	; select bank1
 31902  1985  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31903  1986  0020               	movlb	0	; select bank0
 31904  1987  00AF               	movwf	___lldiv@dividend+3
 31905  1988  0021               	movlb	1	; select bank1
 31906  1989  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31907  198A  0020               	movlb	0	; select bank0
 31908  198B  00AE               	movwf	___lldiv@dividend+2
 31909  198C  0021               	movlb	1	; select bank1
 31910  198D  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31911  198E  0020               	movlb	0	; select bank0
 31912  198F  00AD               	movwf	___lldiv@dividend+1
 31913  1990  0021               	movlb	1	; select bank1
 31914  1991  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31915  1992  0020               	movlb	0	; select bank0
 31916  1993  00AC               	movwf	___lldiv@dividend
 31917  1994  31AA  2245  3199   	fcall	___lldiv
 31918  1997  0020               	movlb	0	; select bank0
 31919  1998  0828               	movf	?___lldiv,w
 31920  1999  0021               	movlb	1	; select bank1
 31921  199A  0730               	addwf	_rtVolume_m3^(0+128),w	;volatile
 31922  199B  0020               	movlb	0	; select bank0
 31923  199C  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31924  199D  0829               	movf	?___lldiv+1,w
 31925  199E  0021               	movlb	1	; select bank1
 31926  199F  3D31               	addwfc	(_rtVolume_m3+1)^(0+128),w	;volatile
 31927  19A0  0020               	movlb	0	; select bank0
 31928  19A1  00B6               	movwf	??_app_flow_rt_volume_cal_ex+1
 31929  19A2  082A               	movf	?___lldiv+2,w
 31930  19A3  0021               	movlb	1	; select bank1
 31931  19A4  3D32               	addwfc	(_rtVolume_m3+2)^(0+128),w	;volatile
 31932  19A5  0020               	movlb	0	; select bank0
 31933  19A6  00B7               	movwf	??_app_flow_rt_volume_cal_ex+2
 31934  19A7  082B               	movf	?___lldiv+3,w
 31935  19A8  0021               	movlb	1	; select bank1
 31936  19A9  3D33               	addwfc	(_rtVolume_m3+3)^(0+128),w	;volatile
 31937  19AA  0020               	movlb	0	; select bank0
 31938  19AB  00B8               	movwf	??_app_flow_rt_volume_cal_ex+3
 31939  19AC  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31940  19AD  0021               	movlb	1	; select bank1
 31941  19AE  00B3               	movwf	(_rtVolume_m3+3)^(0+128)	;volatile
 31942  19AF  0020               	movlb	0	; select bank0
 31943  19B0  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31944  19B1  0021               	movlb	1	; select bank1
 31945  19B2  00B2               	movwf	(_rtVolume_m3+2)^(0+128)	;volatile
 31946  19B3  0020               	movlb	0	; select bank0
 31947  19B4  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31948  19B5  0021               	movlb	1	; select bank1
 31949  19B6  00B1               	movwf	(_rtVolume_m3+1)^(0+128)	;volatile
 31950  19B7  0020               	movlb	0	; select bank0
 31951  19B8  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31952  19B9  0021               	movlb	1	; select bank1
 31953  19BA  00B0               	movwf	_rtVolume_m3^(0+128)	;volatile
 31954                           
 31955                           ;flow.c: 176: rtVolume_L = rtVolume_L % 60000ul;
 31956  19BB  3000               	movlw	0
 31957  19BC  0020               	movlb	0	; select bank0
 31958  19BD  00A3               	movwf	___llmod@divisor+3
 31959  19BE  3000               	movlw	0
 31960  19BF  00A2               	movwf	___llmod@divisor+2
 31961  19C0  30EA               	movlw	234
 31962  19C1  00A1               	movwf	___llmod@divisor+1
 31963  19C2  3060               	movlw	96
 31964  19C3  00A0               	movwf	___llmod@divisor
 31965  19C4  0021               	movlb	1	; select bank1
 31966  19C5  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31967  19C6  0020               	movlb	0	; select bank0
 31968  19C7  00A7               	movwf	___llmod@dividend+3
 31969  19C8  0021               	movlb	1	; select bank1
 31970  19C9  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31971  19CA  0020               	movlb	0	; select bank0
 31972  19CB  00A6               	movwf	___llmod@dividend+2
 31973  19CC  0021               	movlb	1	; select bank1
 31974  19CD  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31975  19CE  0020               	movlb	0	; select bank0
 31976  19CF  00A5               	movwf	___llmod@dividend+1
 31977  19D0  0021               	movlb	1	; select bank1
 31978  19D1  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31979  19D2  0020               	movlb	0	; select bank0
 31980  19D3  00A4               	movwf	___llmod@dividend
 31981  19D4  31B7  2734         	fcall	___llmod
 31982  19D6  0020               	movlb	0	; select bank0
 31983  19D7  0823               	movf	?___llmod+3,w
 31984  19D8  0021               	movlb	1	; select bank1
 31985  19D9  00A3               	movwf	(_rtVolume_L+3)^(0+128)	;volatile
 31986  19DA  0020               	movlb	0	; select bank0
 31987  19DB  0822               	movf	?___llmod+2,w
 31988  19DC  0021               	movlb	1	; select bank1
 31989  19DD  00A2               	movwf	(_rtVolume_L+2)^(0+128)	;volatile
 31990  19DE  0020               	movlb	0	; select bank0
 31991  19DF  0821               	movf	?___llmod+1,w
 31992  19E0  0021               	movlb	1	; select bank1
 31993  19E1  00A1               	movwf	(_rtVolume_L+1)^(0+128)	;volatile
 31994  19E2  0020               	movlb	0	; select bank0
 31995  19E3  0820               	movf	?___llmod,w
 31996  19E4  0021               	movlb	1	; select bank1
 31997  19E5  00A0               	movwf	_rtVolume_L^(0+128)	;volatile
 31998                           
 31999                           ;flow.c: 178: calVolumeTimeSec=0;
 32000  19E6  0022               	movlb	2	; select bank2
 32001  19E7  01C1               	clrf	_calVolumeTimeSec^(0+256)
 32002  19E8  0008               	return
 32003  19E9                     __end_of_app_flow_rt_volume_cal_ex:	
 32004                           
 32005                           	psect	text128
 32006  3734                     __ptext128:	
 32007 ;; *************** function ___llmod *****************
 32008 ;; Defined at:
 32009 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
 32010 ;; Parameters:    Size  Location     Type
 32011 ;;  divisor         4    0[BANK0 ] unsigned long 
 32012 ;;  dividend        4    4[BANK0 ] unsigned long 
 32013 ;; Auto vars:     Size  Location     Type
 32014 ;;  counter         1    4[COMMON] unsigned char 
 32015 ;; Return value:  Size  Location     Type
 32016 ;;                  4    0[BANK0 ] unsigned long 
 32017 ;; Registers used:
 32018 ;;		wreg, status,2, status,0
 32019 ;; Tracked objects:
 32020 ;;		On entry : 0/0
 32021 ;;		On exit  : 0/0
 32022 ;;		Unchanged: 0/0
 32023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32024 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32025 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32027 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32028 ;;Total ram usage:       10 bytes
 32029 ;; Hardware stack levels used:    1
 32030 ;; Hardware stack levels required when called:    2
 32031 ;; This function calls:
 32032 ;;		Nothing
 32033 ;; This function is called by:
 32034 ;;		_app_flow_rt_volume_cal_ex
 32035 ;;		_app_flow_rt_volume_cal
 32036 ;; This function uses a non-reentrant model
 32037 ;;
 32038                           
 32039                           
 32040                           ;psect for function ___llmod
 32041  3734                     ___llmod:	
 32042                           
 32043                           ;incstack = 0
 32044                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 32045  3734  0020               	movlb	0	; select bank0
 32046  3735  0823               	movf	___llmod@divisor+3,w
 32047  3736  0422               	iorwf	___llmod@divisor+2,w
 32048  3737  0421               	iorwf	___llmod@divisor+1,w
 32049  3738  0420               	iorwf	___llmod@divisor,w
 32050  3739  1903               	skipnz
 32051  373A  2F6E               	goto	l14591
 32052  373B  01F4               	clrf	___llmod@counter
 32053  373C  0AF4               	incf	___llmod@counter,f
 32054  373D                     l14581:	
 32055  373D  1BA3               	btfsc	___llmod@divisor+3,7
 32056  373E  2F4B               	goto	l14583
 32057  373F  3001               	movlw	1
 32058  3740                     u13375:	
 32059  3740  35A0               	lslf	___llmod@divisor,f
 32060  3741  0DA1               	rlf	___llmod@divisor+1,f
 32061  3742  0DA2               	rlf	___llmod@divisor+2,f
 32062  3743  0DA3               	rlf	___llmod@divisor+3,f
 32063  3744  0B89               	decfsz	9,f
 32064  3745  2F40               	goto	u13375
 32065  3746  3001               	movlw	1
 32066  3747  00F3               	movwf	??___llmod
 32067  3748  0873               	movf	??___llmod,w
 32068  3749  07F4               	addwf	___llmod@counter,f
 32069  374A  2F3D               	goto	l14581
 32070  374B                     l14583:	
 32071  374B  0823               	movf	___llmod@divisor+3,w
 32072  374C  0227               	subwf	___llmod@dividend+3,w
 32073  374D  1D03               	skipz
 32074  374E  2F59               	goto	u13395
 32075  374F  0822               	movf	___llmod@divisor+2,w
 32076  3750  0226               	subwf	___llmod@dividend+2,w
 32077  3751  1D03               	skipz
 32078  3752  2F59               	goto	u13395
 32079  3753  0821               	movf	___llmod@divisor+1,w
 32080  3754  0225               	subwf	___llmod@dividend+1,w
 32081  3755  1D03               	skipz
 32082  3756  2F59               	goto	u13395
 32083  3757  0820               	movf	___llmod@divisor,w
 32084  3758  0224               	subwf	___llmod@dividend,w
 32085  3759                     u13395:	
 32086  3759  1C03               	skipc
 32087  375A  2F63               	goto	l14587
 32088  375B  0820               	movf	___llmod@divisor,w
 32089  375C  02A4               	subwf	___llmod@dividend,f
 32090  375D  0821               	movf	___llmod@divisor+1,w
 32091  375E  3BA5               	subwfb	___llmod@dividend+1,f
 32092  375F  0822               	movf	___llmod@divisor+2,w
 32093  3760  3BA6               	subwfb	___llmod@dividend+2,f
 32094  3761  0823               	movf	___llmod@divisor+3,w
 32095  3762  3BA7               	subwfb	___llmod@dividend+3,f
 32096  3763                     l14587:	
 32097  3763  3001               	movlw	1
 32098  3764                     u13405:	
 32099  3764  36A3               	lsrf	___llmod@divisor+3,f
 32100  3765  0CA2               	rrf	___llmod@divisor+2,f
 32101  3766  0CA1               	rrf	___llmod@divisor+1,f
 32102  3767  0CA0               	rrf	___llmod@divisor,f
 32103  3768  0B89               	decfsz	9,f
 32104  3769  2F64               	goto	u13405
 32105  376A  3001               	movlw	1
 32106  376B  02F4               	subwf	___llmod@counter,f
 32107  376C  1D03               	btfss	3,2
 32108  376D  2F4B               	goto	l14583
 32109  376E                     l14591:	
 32110  376E  0827               	movf	___llmod@dividend+3,w
 32111  376F  00A3               	movwf	?___llmod+3
 32112  3770  0826               	movf	___llmod@dividend+2,w
 32113  3771  00A2               	movwf	?___llmod+2
 32114  3772  0825               	movf	___llmod@dividend+1,w
 32115  3773  00A1               	movwf	?___llmod+1
 32116  3774  0824               	movf	___llmod@dividend,w
 32117  3775  00A0               	movwf	?___llmod
 32118  3776  0008               	return
 32119  3777                     __end_of___llmod:	
 32120                           
 32121                           	psect	text129
 32122  222A                     __ptext129:	
 32123 ;; *************** function _app_flow_rt_balance_money_cal *****************
 32124 ;; Defined at:
 32125 ;;		line 181 in file "src/app/flow.c"
 32126 ;; Parameters:    Size  Location     Type
 32127 ;;		None
 32128 ;; Auto vars:     Size  Location     Type
 32129 ;;		None
 32130 ;; Return value:  Size  Location     Type
 32131 ;;                  1    wreg      void 
 32132 ;; Registers used:
 32133 ;;		wreg, status,2, status,0, pclath, cstack
 32134 ;; Tracked objects:
 32135 ;;		On entry : 0/0
 32136 ;;		On exit  : 0/0
 32137 ;;		Unchanged: 0/0
 32138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32141 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32142 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32143 ;;Total ram usage:        8 bytes
 32144 ;; Hardware stack levels used:    1
 32145 ;; Hardware stack levels required when called:    3
 32146 ;; This function calls:
 32147 ;;		___lldiv
 32148 ;;		___lmul
 32149 ;; This function is called by:
 32150 ;;		_flow_sampling_process
 32151 ;; This function uses a non-reentrant model
 32152 ;;
 32153                           
 32154                           
 32155                           ;psect for function _app_flow_rt_balance_money_cal
 32156  222A                     _app_flow_rt_balance_money_cal:	
 32157                           
 32158                           ;flow.c: 183: __q31 = mainSystemData.price;
 32159                           
 32160                           ;incstack = 0
 32161                           ; Regs used in _app_flow_rt_balance_money_cal: [wreg+status,2+status,0+pclath+cstack]
 32162  222A  0024               	movlb	4	; select bank4
 32163  222B  0832               	movf	(_mainSystemData^(0+512)+18),w
 32164  222C  0021               	movlb	1	; select bank1
 32165  222D  00AC               	movwf	___q31^(0+128)
 32166  222E  0024               	movlb	4	; select bank4
 32167  222F  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 32168  2230  0021               	movlb	1	; select bank1
 32169  2231  00AD               	movwf	(___q31+1)^(0+128)
 32170  2232  0D89               	rlf	9,f
 32171  2233  3B89               	subwfb	9,f
 32172  2234  0989               	comf	9,f
 32173  2235  00AE               	movwf	(___q31+2)^(0+128)
 32174  2236  00AF               	movwf	(___q31+3)^(0+128)
 32175                           
 32176                           ;flow.c: 185: __q31 = (__q31 * rtVolume_m3 / 10);
 32177  2237  3000               	movlw	0
 32178  2238  0020               	movlb	0	; select bank0
 32179  2239  00AB               	movwf	___lldiv@divisor+3
 32180  223A  3000               	movlw	0
 32181  223B  00AA               	movwf	___lldiv@divisor+2
 32182  223C  3000               	movlw	0
 32183  223D  00A9               	movwf	___lldiv@divisor+1
 32184  223E  300A               	movlw	10
 32185  223F  00A8               	movwf	___lldiv@divisor
 32186  2240  0021               	movlb	1	; select bank1
 32187  2241  082F               	movf	(___q31+3)^(0+128),w
 32188  2242  0020               	movlb	0	; select bank0
 32189  2243  00A3               	movwf	___lmul@multiplier+3
 32190  2244  0021               	movlb	1	; select bank1
 32191  2245  082E               	movf	(___q31+2)^(0+128),w
 32192  2246  0020               	movlb	0	; select bank0
 32193  2247  00A2               	movwf	___lmul@multiplier+2
 32194  2248  0021               	movlb	1	; select bank1
 32195  2249  082D               	movf	(___q31+1)^(0+128),w
 32196  224A  0020               	movlb	0	; select bank0
 32197  224B  00A1               	movwf	___lmul@multiplier+1
 32198  224C  0021               	movlb	1	; select bank1
 32199  224D  082C               	movf	___q31^(0+128),w
 32200  224E  0020               	movlb	0	; select bank0
 32201  224F  00A0               	movwf	___lmul@multiplier
 32202  2250  0021               	movlb	1	; select bank1
 32203  2251  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 32204  2252  0020               	movlb	0	; select bank0
 32205  2253  00A7               	movwf	___lmul@multiplicand+3
 32206  2254  0021               	movlb	1	; select bank1
 32207  2255  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 32208  2256  0020               	movlb	0	; select bank0
 32209  2257  00A6               	movwf	___lmul@multiplicand+2
 32210  2258  0021               	movlb	1	; select bank1
 32211  2259  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 32212  225A  0020               	movlb	0	; select bank0
 32213  225B  00A5               	movwf	___lmul@multiplicand+1
 32214  225C  0021               	movlb	1	; select bank1
 32215  225D  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 32216  225E  0020               	movlb	0	; select bank0
 32217  225F  00A4               	movwf	___lmul@multiplicand
 32218  2260  31B3  235B  31A2   	fcall	___lmul
 32219  2263  0020               	movlb	0	; select bank0
 32220  2264  0823               	movf	?___lmul+3,w
 32221  2265  00AF               	movwf	___lldiv@dividend+3
 32222  2266  0822               	movf	?___lmul+2,w
 32223  2267  00AE               	movwf	___lldiv@dividend+2
 32224  2268  0821               	movf	?___lmul+1,w
 32225  2269  00AD               	movwf	___lldiv@dividend+1
 32226  226A  0820               	movf	?___lmul,w
 32227  226B  00AC               	movwf	___lldiv@dividend
 32228  226C  31AA  2245  31A2   	fcall	___lldiv
 32229  226F  0020               	movlb	0	; select bank0
 32230  2270  082B               	movf	?___lldiv+3,w
 32231  2271  0021               	movlb	1	; select bank1
 32232  2272  00AF               	movwf	(___q31+3)^(0+128)
 32233  2273  0020               	movlb	0	; select bank0
 32234  2274  082A               	movf	?___lldiv+2,w
 32235  2275  0021               	movlb	1	; select bank1
 32236  2276  00AE               	movwf	(___q31+2)^(0+128)
 32237  2277  0020               	movlb	0	; select bank0
 32238  2278  0829               	movf	?___lldiv+1,w
 32239  2279  0021               	movlb	1	; select bank1
 32240  227A  00AD               	movwf	(___q31+1)^(0+128)
 32241  227B  0020               	movlb	0	; select bank0
 32242  227C  0828               	movf	?___lldiv,w
 32243  227D  0021               	movlb	1	; select bank1
 32244  227E  00AC               	movwf	___q31^(0+128)
 32245                           
 32246                           ;flow.c: 186: rtBalanceMoney = mainSystemData.BalanceMoney - __q31;
 32247  227F  0024               	movlb	4	; select bank4
 32248  2280  084C               	movf	(_mainSystemData^(0+512)+44),w
 32249  2281  0020               	movlb	0	; select bank0
 32250  2282  00B5               	movwf	??_app_flow_rt_balance_money_cal
 32251  2283  0024               	movlb	4	; select bank4
 32252  2284  084D               	movf	((_mainSystemData+1)^(0+512)+44),w
 32253  2285  0020               	movlb	0	; select bank0
 32254  2286  00B6               	movwf	??_app_flow_rt_balance_money_cal+1
 32255  2287  0024               	movlb	4	; select bank4
 32256  2288  084E               	movf	((_mainSystemData+2)^(0+512)+44),w
 32257  2289  0020               	movlb	0	; select bank0
 32258  228A  00B7               	movwf	??_app_flow_rt_balance_money_cal+2
 32259  228B  0024               	movlb	4	; select bank4
 32260  228C  084F               	movf	((_mainSystemData+3)^(0+512)+44),w
 32261  228D  0020               	movlb	0	; select bank0
 32262  228E  00B8               	movwf	??_app_flow_rt_balance_money_cal+3
 32263  228F  0021               	movlb	1	; select bank1
 32264  2290  092C               	comf	___q31^(0+128),w
 32265  2291  0020               	movlb	0	; select bank0
 32266  2292  00B9               	movwf	??_app_flow_rt_balance_money_cal+4
 32267  2293  0021               	movlb	1	; select bank1
 32268  2294  092D               	comf	(___q31+1)^(0+128),w
 32269  2295  0020               	movlb	0	; select bank0
 32270  2296  00BA               	movwf	??_app_flow_rt_balance_money_cal+5
 32271  2297  0021               	movlb	1	; select bank1
 32272  2298  092E               	comf	(___q31+2)^(0+128),w
 32273  2299  0020               	movlb	0	; select bank0
 32274  229A  00BB               	movwf	??_app_flow_rt_balance_money_cal+6
 32275  229B  0021               	movlb	1	; select bank1
 32276  229C  092F               	comf	(___q31+3)^(0+128),w
 32277  229D  0020               	movlb	0	; select bank0
 32278  229E  00BC               	movwf	??_app_flow_rt_balance_money_cal+7
 32279  229F  0AB9               	incf	??_app_flow_rt_balance_money_cal+4,f
 32280  22A0  1903               	skipnz
 32281  22A1  0ABA               	incf	??_app_flow_rt_balance_money_cal+5,f
 32282  22A2  1903               	skipnz
 32283  22A3  0ABB               	incf	??_app_flow_rt_balance_money_cal+6,f
 32284  22A4  1903               	skipnz
 32285  22A5  0ABC               	incf	??_app_flow_rt_balance_money_cal+7,f
 32286  22A6  0839               	movf	??_app_flow_rt_balance_money_cal+4,w
 32287  22A7  07B5               	addwf	??_app_flow_rt_balance_money_cal,f
 32288  22A8  083A               	movf	??_app_flow_rt_balance_money_cal+5,w
 32289  22A9  3DB6               	addwfc	??_app_flow_rt_balance_money_cal+1,f
 32290  22AA  083B               	movf	??_app_flow_rt_balance_money_cal+6,w
 32291  22AB  3DB7               	addwfc	??_app_flow_rt_balance_money_cal+2,f
 32292  22AC  083C               	movf	??_app_flow_rt_balance_money_cal+7,w
 32293  22AD  3DB8               	addwfc	??_app_flow_rt_balance_money_cal+3,f
 32294  22AE  0838               	movf	??_app_flow_rt_balance_money_cal+3,w
 32295  22AF  0021               	movlb	1	; select bank1
 32296  22B0  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 32297  22B1  0020               	movlb	0	; select bank0
 32298  22B2  0837               	movf	??_app_flow_rt_balance_money_cal+2,w
 32299  22B3  0021               	movlb	1	; select bank1
 32300  22B4  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 32301  22B5  0020               	movlb	0	; select bank0
 32302  22B6  0836               	movf	??_app_flow_rt_balance_money_cal+1,w
 32303  22B7  0021               	movlb	1	; select bank1
 32304  22B8  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 32305  22B9  0020               	movlb	0	; select bank0
 32306  22BA  0835               	movf	??_app_flow_rt_balance_money_cal,w
 32307  22BB  0021               	movlb	1	; select bank1
 32308  22BC  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 32309  22BD  0008               	return
 32310  22BE                     __end_of_app_flow_rt_balance_money_cal:	
 32311                           
 32312                           	psect	text130
 32313  3FD9                     __ptext130:	
 32314 ;; *************** function _app_flow_money_warning *****************
 32315 ;; Defined at:
 32316 ;;		line 189 in file "src/app/flow.c"
 32317 ;; Parameters:    Size  Location     Type
 32318 ;;		None
 32319 ;; Auto vars:     Size  Location     Type
 32320 ;;		None
 32321 ;; Return value:  Size  Location     Type
 32322 ;;                  1    wreg      void 
 32323 ;; Registers used:
 32324 ;;		wreg
 32325 ;; Tracked objects:
 32326 ;;		On entry : 0/0
 32327 ;;		On exit  : 0/0
 32328 ;;		Unchanged: 0/0
 32329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32333 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32334 ;;Total ram usage:        1 bytes
 32335 ;; Hardware stack levels used:    1
 32336 ;; Hardware stack levels required when called:    2
 32337 ;; This function calls:
 32338 ;;		Nothing
 32339 ;; This function is called by:
 32340 ;;		_flow_sampling_process
 32341 ;; This function uses a non-reentrant model
 32342 ;;
 32343                           
 32344                           
 32345                           ;psect for function _app_flow_money_warning
 32346  3FD9                     _app_flow_money_warning:	
 32347                           
 32348                           ;flow.c: 190: __q31=(int32_t)(mainSystemData.balanceWarning);
 32349                           
 32350                           ;incstack = 0
 32351                           ; Regs used in _app_flow_money_warning: [wreg]
 32352  3FD9  0024               	movlb	4	; select bank4
 32353  3FDA  0834               	movf	(_mainSystemData^(0+512)+20),w
 32354  3FDB  0021               	movlb	1	; select bank1
 32355  3FDC  00AC               	movwf	___q31^(0+128)
 32356  3FDD  0024               	movlb	4	; select bank4
 32357  3FDE  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 32358  3FDF  0021               	movlb	1	; select bank1
 32359  3FE0  00AD               	movwf	(___q31+1)^(0+128)
 32360  3FE1  0D89               	rlf	9,f
 32361  3FE2  3B89               	subwfb	9,f
 32362  3FE3  0989               	comf	9,f
 32363  3FE4  00AE               	movwf	(___q31+2)^(0+128)
 32364  3FE5  00AF               	movwf	(___q31+3)^(0+128)
 32365                           
 32366                           ;flow.c: 191: if (rtBalanceMoney < __q31) {
 32367  3FE6  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32368  3FE7  3A80               	xorlw	128
 32369  3FE8  00F3               	movwf	??_app_flow_money_warning
 32370  3FE9  082F               	movf	(___q31+3)^(0+128),w
 32371  3FEA  3A80               	xorlw	128
 32372  3FEB  0273               	subwf	??_app_flow_money_warning,w
 32373  3FEC  1D03               	skipz
 32374  3FED  2FF8               	goto	u14013
 32375  3FEE  082E               	movf	(___q31+2)^(0+128),w
 32376  3FEF  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32377  3FF0  1D03               	skipz
 32378  3FF1  2FF8               	goto	u14013
 32379  3FF2  082D               	movf	(___q31+1)^(0+128),w
 32380  3FF3  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32381  3FF4  1D03               	skipz
 32382  3FF5  2FF8               	goto	u14013
 32383  3FF6  082C               	movf	___q31^(0+128),w
 32384  3FF7  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32385  3FF8                     u14013:	
 32386  3FF8  1803               	skipnc
 32387  3FF9  2FFD               	goto	l1061
 32388                           
 32389                           ;flow.c: 192: warningStatus.bits.moneyLowWarning = 1;
 32390  3FFA  0022               	movlb	2	; select bank2
 32391  3FFB  163A               	bsf	_warningStatus^(0+256),4
 32392                           
 32393                           ;flow.c: 193: } else {
 32394  3FFC  0008               	return
 32395  3FFD                     l1061:	
 32396                           
 32397                           ;flow.c: 194: warningStatus.bits.moneyLowWarning = 0;
 32398  3FFD  0022               	movlb	2	; select bank2
 32399  3FFE  123A               	bcf	_warningStatus^(0+256),4
 32400  3FFF  0008               	return
 32401  4000                     __end_of_app_flow_money_warning:	
 32402                           
 32403                           	psect	text131
 32404  30D8                     __ptext131:	
 32405 ;; *************** function _app_flow_money_off *****************
 32406 ;; Defined at:
 32407 ;;		line 198 in file "src/app/flow.c"
 32408 ;; Parameters:    Size  Location     Type
 32409 ;;		None
 32410 ;; Auto vars:     Size  Location     Type
 32411 ;;		None
 32412 ;; Return value:  Size  Location     Type
 32413 ;;                  1    wreg      void 
 32414 ;; Registers used:
 32415 ;;		wreg, status,2, status,0, pclath, cstack
 32416 ;; Tracked objects:
 32417 ;;		On entry : 0/0
 32418 ;;		On exit  : 0/0
 32419 ;;		Unchanged: 0/0
 32420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32425 ;;Total ram usage:        1 bytes
 32426 ;; Hardware stack levels used:    1
 32427 ;; Hardware stack levels required when called:    4
 32428 ;; This function calls:
 32429 ;;		_in_app_vavle_off
 32430 ;; This function is called by:
 32431 ;;		_flow_sampling_process
 32432 ;; This function uses a non-reentrant model
 32433 ;;
 32434                           
 32435                           
 32436                           ;psect for function _app_flow_money_off
 32437  30D8                     _app_flow_money_off:	
 32438                           
 32439                           ;flow.c: 199: __q31=(int32_t)(mainSystemData.balanceOff);
 32440                           
 32441                           ;incstack = 0
 32442                           ; Regs used in _app_flow_money_off: [wreg+status,2+status,0+pclath+cstack]
 32443  30D8  0024               	movlb	4	; select bank4
 32444  30D9  0836               	movf	(_mainSystemData^(0+512)+22),w
 32445  30DA  0021               	movlb	1	; select bank1
 32446  30DB  00AC               	movwf	___q31^(0+128)
 32447  30DC  0024               	movlb	4	; select bank4
 32448  30DD  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 32449  30DE  0021               	movlb	1	; select bank1
 32450  30DF  00AD               	movwf	(___q31+1)^(0+128)
 32451  30E0  0D89               	rlf	9,f
 32452  30E1  3B89               	subwfb	9,f
 32453  30E2  0989               	comf	9,f
 32454  30E3  00AE               	movwf	(___q31+2)^(0+128)
 32455  30E4  00AF               	movwf	(___q31+3)^(0+128)
 32456                           
 32457                           ;flow.c: 200: if (rtBalanceMoney < __q31) {
 32458  30E5  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32459  30E6  3A80               	xorlw	128
 32460  30E7  00F6               	movwf	??_app_flow_money_off
 32461  30E8  082F               	movf	(___q31+3)^(0+128),w
 32462  30E9  3A80               	xorlw	128
 32463  30EA  0276               	subwf	??_app_flow_money_off,w
 32464  30EB  1D03               	skipz
 32465  30EC  28F7               	goto	u14023
 32466  30ED  082E               	movf	(___q31+2)^(0+128),w
 32467  30EE  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32468  30EF  1D03               	skipz
 32469  30F0  28F7               	goto	u14023
 32470  30F1  082D               	movf	(___q31+1)^(0+128),w
 32471  30F2  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32472  30F3  1D03               	skipz
 32473  30F4  28F7               	goto	u14023
 32474  30F5  082C               	movf	___q31^(0+128),w
 32475  30F6  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32476  30F7                     u14023:	
 32477  30F7  1803               	skipnc
 32478  30F8  2901               	goto	l1066
 32479                           
 32480                           ;flow.c: 201: warningStatus.bits.moneyLowWarning = 1;
 32481  30F9  0022               	movlb	2	; select bank2
 32482  30FA  163A               	bsf	_warningStatus^(0+256),4
 32483                           
 32484                           ;flow.c: 203: deviceStatus.bits.noEnough=1;
 32485  30FB  0021               	movlb	1	; select bank1
 32486  30FC  14C0               	bsf	_deviceStatus^(0+128),1
 32487                           
 32488                           ;flow.c: 204: in_app_vavle_off(OFF_REASON_LA);
 32489  30FD  3001               	movlw	1
 32490  30FE  31BF  27B2         	fcall	_in_app_vavle_off
 32491                           
 32492                           ;flow.c: 205: } else {
 32493  3100  0008               	return
 32494  3101                     l1066:	
 32495                           
 32496                           ;flow.c: 206: deviceStatus.bits.noEnough=0;
 32497  3101  10C0               	bcf	_deviceStatus^(0+128),1
 32498  3102  0008               	return
 32499  3103                     __end_of_app_flow_money_off:	
 32500                           
 32501                           	psect	text132
 32502  3FB2                     __ptext132:	
 32503 ;; *************** function _in_app_vavle_off *****************
 32504 ;; Defined at:
 32505 ;;		line 25 in file "src/app/flow.c"
 32506 ;; Parameters:    Size  Location     Type
 32507 ;;  op              1    wreg     enum E5862
 32508 ;; Auto vars:     Size  Location     Type
 32509 ;;  op              1    5[COMMON] enum E5862
 32510 ;; Return value:  Size  Location     Type
 32511 ;;                  1    wreg      void 
 32512 ;; Registers used:
 32513 ;;		wreg, status,2, status,0, pclath, cstack
 32514 ;; Tracked objects:
 32515 ;;		On entry : 0/0
 32516 ;;		On exit  : 0/0
 32517 ;;		Unchanged: 0/0
 32518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32523 ;;Total ram usage:        2 bytes
 32524 ;; Hardware stack levels used:    1
 32525 ;; Hardware stack levels required when called:    3
 32526 ;; This function calls:
 32527 ;;		_valve_off
 32528 ;; This function is called by:
 32529 ;;		_app_flow_money_off
 32530 ;;		_rfid_comm_process
 32531 ;; This function uses a non-reentrant model
 32532 ;;
 32533                           
 32534                           
 32535                           ;psect for function _in_app_vavle_off
 32536  3FB2                     _in_app_vavle_off:	
 32537                           
 32538                           ;incstack = 0
 32539                           ; Regs used in _in_app_vavle_off: [wreg+status,2+status,0+pclath+cstack]
 32540                           ;in_app_vavle_off@op stored from wreg
 32541  3FB2  00F5               	movwf	in_app_vavle_off@op
 32542                           
 32543                           ;flow.c: 28: if(valveStatus==VALVE_CLOSED || valveStatus==VALVE_OPENING || valveStatus==
      +                          VALVE_CLOSEING)return;
 32544  3FB3  037A               	decf	_valveStatus,w
 32545  3FB4  1903               	btfsc	3,2
 32546  3FB5  0008               	return
 32547  3FB6  3003               	movlw	3
 32548  3FB7  067A               	xorwf	_valveStatus,w
 32549  3FB8  1903               	btfsc	3,2
 32550  3FB9  0008               	return
 32551  3FBA  3004               	movlw	4
 32552  3FBB  067A               	xorwf	_valveStatus,w
 32553  3FBC  1903               	btfsc	3,2
 32554  3FBD  0008               	return
 32555                           
 32556                           ;flow.c: 31: if(deviceStatus.bits.acPowerDown)return;
 32557  3FBE  0021               	movlb	1	; select bank1
 32558  3FBF  19C0               	btfsc	_deviceStatus^(0+128),3
 32559  3FC0  0008               	return
 32560                           
 32561                           ;flow.c: 33: opReason=op;
 32562  3FC1  0875               	movf	in_app_vavle_off@op,w
 32563  3FC2  00F4               	movwf	??_in_app_vavle_off
 32564  3FC3  0874               	movf	??_in_app_vavle_off,w
 32565  3FC4  00C4               	movwf	_opReason^(0+128)	;volatile
 32566                           
 32567                           ;flow.c: 34: valve_off();
 32568  3FC5  31BD  2541  31BF   	fcall	_valve_off
 32569                           
 32570                           ;flow.c: 36: if(valveStatus==VALVE_CLOSED || valveStatus==VALVE_CLOSEING)return;
 32571  3FC8  037A               	decf	_valveStatus,w
 32572  3FC9  1903               	btfsc	3,2
 32573  3FCA  0008               	return
 32574  3FCB  3004               	movlw	4
 32575  3FCC  067A               	xorwf	_valveStatus,w
 32576  3FCD  1903               	btfsc	3,2
 32577  3FCE  0008               	return
 32578                           
 32579                           ;flow.c: 37: if(deviceStatus.bits.acPowerDown)return;
 32580  3FCF  0021               	movlb	1	; select bank1
 32581  3FD0  19C0               	btfsc	_deviceStatus^(0+128),3
 32582  3FD1  0008               	return
 32583                           
 32584                           ;flow.c: 38: opReason=op;
 32585  3FD2  0875               	movf	in_app_vavle_off@op,w
 32586  3FD3  00F4               	movwf	??_in_app_vavle_off
 32587  3FD4  0874               	movf	??_in_app_vavle_off,w
 32588  3FD5  00C4               	movwf	_opReason^(0+128)	;volatile
 32589                           
 32590                           ;flow.c: 39: valve_off();
 32591  3FD6  31BD  2541         	fcall	_valve_off
 32592  3FD8  0008               	return
 32593  3FD9                     __end_of_in_app_vavle_off:	
 32594                           
 32595                           	psect	text133
 32596  3D41                     __ptext133:	
 32597 ;; *************** function _valve_off *****************
 32598 ;; Defined at:
 32599 ;;		line 21 in file "src/driver/other-gpio.c"
 32600 ;; Parameters:    Size  Location     Type
 32601 ;;		None
 32602 ;; Auto vars:     Size  Location     Type
 32603 ;;		None
 32604 ;; Return value:  Size  Location     Type
 32605 ;;                  1    wreg      void 
 32606 ;; Registers used:
 32607 ;;		wreg, status,2, status,0
 32608 ;; Tracked objects:
 32609 ;;		On entry : 0/0
 32610 ;;		On exit  : 0/0
 32611 ;;		Unchanged: 0/0
 32612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32617 ;;Total ram usage:        1 bytes
 32618 ;; Hardware stack levels used:    1
 32619 ;; Hardware stack levels required when called:    2
 32620 ;; This function calls:
 32621 ;;		Nothing
 32622 ;; This function is called by:
 32623 ;;		_in_app_vavle_off
 32624 ;; This function uses a non-reentrant model
 32625 ;;
 32626                           
 32627                           
 32628                           ;psect for function _valve_off
 32629  3D41                     _valve_off:	
 32630  3D41                     l1941:	
 32631                           ;other-gpio.c: 27: while((Event & (0x01<<5))==0);
 32632                           
 32633                           ;incstack = 0
 32634                           ; Regs used in _valve_off: [wreg+status,2+status,0]
 32635                           
 32636  3D41  0021               	movlb	1	; select bank1
 32637  3D42  1EC8               	btfss	_Event^(0+128),5
 32638  3D43  2D41               	goto	l1941
 32639                           
 32640                           ;other-gpio.c: 28: Event &= ~(0x01<<5);
 32641  3D44  30DF               	movlw	223
 32642  3D45  00F3               	movwf	??_valve_off
 32643  3D46  0873               	movf	??_valve_off,w
 32644  3D47  05C8               	andwf	_Event^(0+128),f
 32645                           
 32646                           ;other-gpio.c: 29: do { LATBbits.LATB0 = 1; } while(0);
 32647  3D48  0022               	movlb	2	; select bank2
 32648  3D49  140D               	bsf	13,0	;volatile
 32649  3D4A                     l1946:	
 32650                           ;other-gpio.c: 31: while((Event & (0x01<<5))==0);
 32651                           
 32652  3D4A  0021               	movlb	1	; select bank1
 32653  3D4B  1EC8               	btfss	_Event^(0+128),5
 32654  3D4C  2D4A               	goto	l1946
 32655                           
 32656                           ;other-gpio.c: 32: Event &= ~(0x01<<5);
 32657  3D4D  30DF               	movlw	223
 32658  3D4E  00F3               	movwf	??_valve_off
 32659  3D4F  0873               	movf	??_valve_off,w
 32660  3D50  05C8               	andwf	_Event^(0+128),f
 32661                           
 32662                           ;other-gpio.c: 35: do { LATDbits.LATD7 = 1; } while(0);
 32663  3D51  0022               	movlb	2	; select bank2
 32664  3D52  178F               	bsf	15,7	;volatile
 32665                           
 32666                           ;other-gpio.c: 36: valveStatus=VALVE_CLOSEING;
 32667  3D53  3004               	movlw	4
 32668  3D54  00F3               	movwf	??_valve_off
 32669  3D55  0873               	movf	??_valve_off,w
 32670  3D56  00FA               	movwf	_valveStatus
 32671                           
 32672                           ;other-gpio.c: 37: valveTimer=0;
 32673  3D57  01B8               	clrf	_valveTimer^(0+256)
 32674  3D58  0008               	return
 32675  3D59                     __end_of_valve_off:	
 32676                           
 32677                           	psect	text134
 32678  2357                     __ptext134:	
 32679 ;; *************** function _app_flow_lookup *****************
 32680 ;; Defined at:
 32681 ;;		line 69 in file "src/app/flow.c"
 32682 ;; Parameters:    Size  Location     Type
 32683 ;;  adcValue        2    3[COMMON] unsigned int 
 32684 ;; Auto vars:     Size  Location     Type
 32685 ;;  i               1    5[COMMON] unsigned char 
 32686 ;; Return value:  Size  Location     Type
 32687 ;;                  1    wreg      unsigned char 
 32688 ;; Registers used:
 32689 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 32690 ;; Tracked objects:
 32691 ;;		On entry : 0/0
 32692 ;;		On exit  : 0/0
 32693 ;;		Unchanged: 0/0
 32694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32695 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32696 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32697 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0
 32698 ;;      Totals:         3      14       0       0       0       0       0       0       0       0       0       0       
      +0
 32699 ;;Total ram usage:       17 bytes
 32700 ;; Hardware stack levels used:    1
 32701 ;; Hardware stack levels required when called:    2
 32702 ;; This function calls:
 32703 ;;		Nothing
 32704 ;; This function is called by:
 32705 ;;		_flow_sampling_process
 32706 ;; This function uses a non-reentrant model
 32707 ;;
 32708                           
 32709                           
 32710                           ;psect for function _app_flow_lookup
 32711  2357                     _app_flow_lookup:	
 32712                           
 32713                           ;flow.c: 70: uint8_t i;
 32714                           ;flow.c: 71: if (adcValue < Main_flowCalibrationTable.flowCalibrationArr[0].adcValue)ret
      +                          urn 0;
 32715                           
 32716                           ;incstack = 0
 32717                           ; Regs used in _app_flow_lookup: [wreg+fsr1l+fsr1h+status,2+status,0]
 32718  2357  3074               	movlw	116
 32719  2358  0086               	movwf	6
 32720  2359  3023               	movlw	35
 32721  235A  0087               	movwf	7
 32722  235B  3F40               	moviw [0]fsr1
 32723  235C  0020               	movlb	0	; select bank0
 32724  235D  00A0               	movwf	??_app_flow_lookup
 32725  235E  3F41               	moviw [1]fsr1
 32726  235F  00A1               	movwf	??_app_flow_lookup+1
 32727  2360  0821               	movf	??_app_flow_lookup+1,w
 32728  2361  0274               	subwf	app_flow_lookup@adcValue+1,w
 32729  2362  1D03               	skipz
 32730  2363  2B66               	goto	u13845
 32731  2364  0820               	movf	??_app_flow_lookup,w
 32732  2365  0273               	subwf	app_flow_lookup@adcValue,w
 32733  2366                     u13845:	
 32734  2366  1803               	skipnc
 32735  2367  2B6A               	goto	l15191
 32736  2368  3000               	movlw	0
 32737  2369  0008               	return
 32738  236A                     l15191:	
 32739                           
 32740                           ;flow.c: 72: for (i = 0; i < 30-1; i++) {
 32741  236A  01F5               	clrf	app_flow_lookup@i
 32742  236B  301D               	movlw	29
 32743  236C  0275               	subwf	app_flow_lookup@i,w
 32744  236D  1803               	btfsc	3,0
 32745  236E  2BEF               	goto	l15211
 32746  236F                     l15197:	
 32747                           
 32748                           ;flow.c: 73: if (adcValue >= Main_flowCalibrationTable.flowCalibrationArr[i].adcValue &&
 32749                           ;flow.c: 74: adcValue < Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue)bre
      +                          ak;
 32750  236F  0875               	movf	app_flow_lookup@i,w
 32751  2370  00A0               	movwf	??_app_flow_lookup
 32752  2371  01A1               	clrf	??_app_flow_lookup+1
 32753  2372  35A0               	lslf	??_app_flow_lookup,f
 32754  2373  0DA1               	rlf	??_app_flow_lookup+1,f
 32755  2374  35A0               	lslf	??_app_flow_lookup,f
 32756  2375  0DA1               	rlf	??_app_flow_lookup+1,f
 32757  2376  3074               	movlw	116
 32758  2377  00A2               	movwf	??_app_flow_lookup+2
 32759  2378  3023               	movlw	35
 32760  2379  00A3               	movwf	??_app_flow_lookup+3
 32761  237A  0820               	movf	??_app_flow_lookup,w
 32762  237B  0722               	addwf	??_app_flow_lookup+2,w
 32763  237C  0086               	movwf	6
 32764  237D  0821               	movf	??_app_flow_lookup+1,w
 32765  237E  3D23               	addwfc	??_app_flow_lookup+3,w
 32766  237F  0087               	movwf	7
 32767  2380  3F40               	moviw [0]fsr1
 32768  2381  00A4               	movwf	??_app_flow_lookup+4
 32769  2382  3F41               	moviw [1]fsr1
 32770  2383  00A5               	movwf	??_app_flow_lookup+5
 32771  2384  0825               	movf	??_app_flow_lookup+5,w
 32772  2385  0274               	subwf	app_flow_lookup@adcValue+1,w
 32773  2386  1D03               	skipz
 32774  2387  2B8A               	goto	u13865
 32775  2388  0824               	movf	??_app_flow_lookup+4,w
 32776  2389  0273               	subwf	app_flow_lookup@adcValue,w
 32777  238A                     u13865:	
 32778  238A  1C03               	skipc
 32779  238B  2BAF               	goto	l15203
 32780  238C  0875               	movf	app_flow_lookup@i,w
 32781  238D  00A0               	movwf	??_app_flow_lookup
 32782  238E  01A1               	clrf	??_app_flow_lookup+1
 32783  238F  35A0               	lslf	??_app_flow_lookup,f
 32784  2390  0DA1               	rlf	??_app_flow_lookup+1,f
 32785  2391  35A0               	lslf	??_app_flow_lookup,f
 32786  2392  0DA1               	rlf	??_app_flow_lookup+1,f
 32787  2393  0820               	movf	??_app_flow_lookup,w
 32788  2394  3E04               	addlw	4
 32789  2395  00A2               	movwf	??_app_flow_lookup+2
 32790  2396  3000               	movlw	0
 32791  2397  3D21               	addwfc	??_app_flow_lookup+1,w
 32792  2398  00A3               	movwf	??_app_flow_lookup+3
 32793  2399  3074               	movlw	116
 32794  239A  00A4               	movwf	??_app_flow_lookup+4
 32795  239B  3023               	movlw	35
 32796  239C  00A5               	movwf	??_app_flow_lookup+5
 32797  239D  0822               	movf	??_app_flow_lookup+2,w
 32798  239E  0724               	addwf	??_app_flow_lookup+4,w
 32799  239F  0086               	movwf	6
 32800  23A0  0823               	movf	??_app_flow_lookup+3,w
 32801  23A1  3D25               	addwfc	??_app_flow_lookup+5,w
 32802  23A2  0087               	movwf	7
 32803  23A3  3F40               	moviw [0]fsr1
 32804  23A4  00A6               	movwf	??_app_flow_lookup+6
 32805  23A5  3F41               	moviw [1]fsr1
 32806  23A6  00A7               	movwf	??_app_flow_lookup+7
 32807  23A7  0827               	movf	??_app_flow_lookup+7,w
 32808  23A8  0274               	subwf	app_flow_lookup@adcValue+1,w
 32809  23A9  1D03               	skipz
 32810  23AA  2BAD               	goto	u13875
 32811  23AB  0826               	movf	??_app_flow_lookup+6,w
 32812  23AC  0273               	subwf	app_flow_lookup@adcValue,w
 32813  23AD                     u13875:	
 32814  23AD  1C03               	btfss	3,0
 32815  23AE  2BEF               	goto	l15211
 32816  23AF                     l15203:	
 32817                           
 32818                           ;flow.c: 75: if(Main_flowCalibrationTable.flowCalibrationArr[i].adcValue >=
 32819                           ;flow.c: 76: Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue){
 32820  23AF  0875               	movf	app_flow_lookup@i,w
 32821  23B0  00A0               	movwf	??_app_flow_lookup
 32822  23B1  01A1               	clrf	??_app_flow_lookup+1
 32823  23B2  35A0               	lslf	??_app_flow_lookup,f
 32824  23B3  0DA1               	rlf	??_app_flow_lookup+1,f
 32825  23B4  35A0               	lslf	??_app_flow_lookup,f
 32826  23B5  0DA1               	rlf	??_app_flow_lookup+1,f
 32827  23B6  0820               	movf	??_app_flow_lookup,w
 32828  23B7  3E04               	addlw	4
 32829  23B8  00A2               	movwf	??_app_flow_lookup+2
 32830  23B9  3000               	movlw	0
 32831  23BA  3D21               	addwfc	??_app_flow_lookup+1,w
 32832  23BB  00A3               	movwf	??_app_flow_lookup+3
 32833  23BC  3074               	movlw	116
 32834  23BD  00A4               	movwf	??_app_flow_lookup+4
 32835  23BE  3023               	movlw	35
 32836  23BF  00A5               	movwf	??_app_flow_lookup+5
 32837  23C0  0822               	movf	??_app_flow_lookup+2,w
 32838  23C1  0724               	addwf	??_app_flow_lookup+4,w
 32839  23C2  0086               	movwf	6
 32840  23C3  0823               	movf	??_app_flow_lookup+3,w
 32841  23C4  3D25               	addwfc	??_app_flow_lookup+5,w
 32842  23C5  0087               	movwf	7
 32843  23C6  3F40               	moviw [0]fsr1
 32844  23C7  00A6               	movwf	??_app_flow_lookup+6
 32845  23C8  3F41               	moviw [1]fsr1
 32846  23C9  00A7               	movwf	??_app_flow_lookup+7
 32847  23CA  0875               	movf	app_flow_lookup@i,w
 32848  23CB  00A8               	movwf	??_app_flow_lookup+8
 32849  23CC  01A9               	clrf	??_app_flow_lookup+9
 32850  23CD  35A8               	lslf	??_app_flow_lookup+8,f
 32851  23CE  0DA9               	rlf	??_app_flow_lookup+9,f
 32852  23CF  35A8               	lslf	??_app_flow_lookup+8,f
 32853  23D0  0DA9               	rlf	??_app_flow_lookup+9,f
 32854  23D1  3074               	movlw	116
 32855  23D2  00AA               	movwf	??_app_flow_lookup+10
 32856  23D3  3023               	movlw	35
 32857  23D4  00AB               	movwf	??_app_flow_lookup+11
 32858  23D5  0828               	movf	??_app_flow_lookup+8,w
 32859  23D6  072A               	addwf	??_app_flow_lookup+10,w
 32860  23D7  0086               	movwf	6
 32861  23D8  0829               	movf	??_app_flow_lookup+9,w
 32862  23D9  3D2B               	addwfc	??_app_flow_lookup+11,w
 32863  23DA  0087               	movwf	7
 32864  23DB  3F40               	moviw [0]fsr1
 32865  23DC  00AC               	movwf	??_app_flow_lookup+12
 32866  23DD  3F41               	moviw [1]fsr1
 32867  23DE  00AD               	movwf	??_app_flow_lookup+13
 32868  23DF  0827               	movf	??_app_flow_lookup+7,w
 32869  23E0  022D               	subwf	??_app_flow_lookup+13,w
 32870  23E1  1D03               	skipz
 32871  23E2  2BE5               	goto	u13885
 32872  23E3  0826               	movf	??_app_flow_lookup+6,w
 32873  23E4  022C               	subwf	??_app_flow_lookup+12,w
 32874  23E5                     u13885:	
 32875  23E5  1803               	btfsc	3,0
 32876  23E6  2BEF               	goto	l15211
 32877                           
 32878                           ;flow.c: 78: break;
 32879  23E7  3001               	movlw	1
 32880  23E8  00A0               	movwf	??_app_flow_lookup
 32881  23E9  0820               	movf	??_app_flow_lookup,w
 32882  23EA  07F5               	addwf	app_flow_lookup@i,f
 32883  23EB  301D               	movlw	29
 32884  23EC  0275               	subwf	app_flow_lookup@i,w
 32885  23ED  1C03               	skipc
 32886  23EE  2B6F               	goto	l15197
 32887  23EF                     l15211:	
 32888                           
 32889                           ;flow.c: 79: }
 32890                           ;flow.c: 80: }
 32891                           ;flow.c: 81: return i;
 32892  23EF  0875               	movf	app_flow_lookup@i,w
 32893  23F0  0008               	return
 32894  23F1                     __end_of_app_flow_lookup:	
 32895                           
 32896                           	psect	text135
 32897  10CA                     __ptext135:	
 32898 ;; *************** function _app_flow_get_adcAverageValue *****************
 32899 ;; Defined at:
 32900 ;;		line 210 in file "src/app/flow.c"
 32901 ;; Parameters:    Size  Location     Type
 32902 ;;		None
 32903 ;; Auto vars:     Size  Location     Type
 32904 ;;  ret             4   38[BANK0 ] unsigned long 
 32905 ;;  max             2   36[BANK0 ] unsigned int 
 32906 ;;  min             2   33[BANK0 ] unsigned int 
 32907 ;;  i               1   42[BANK0 ] unsigned char 
 32908 ;;  j               1   35[BANK0 ] unsigned char 
 32909 ;;  minIndex        1   32[BANK0 ] unsigned char 
 32910 ;;  maxIndex        1   31[BANK0 ] unsigned char 
 32911 ;; Return value:  Size  Location     Type
 32912 ;;                  2   21[BANK0 ] unsigned int 
 32913 ;; Registers used:
 32914 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32915 ;; Tracked objects:
 32916 ;;		On entry : 0/0
 32917 ;;		On exit  : 0/0
 32918 ;;		Unchanged: 0/0
 32919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 32921 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0
 32922 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32923 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 32924 ;;Total ram usage:       22 bytes
 32925 ;; Hardware stack levels used:    1
 32926 ;; Hardware stack levels required when called:    3
 32927 ;; This function calls:
 32928 ;;		___lldiv
 32929 ;; This function is called by:
 32930 ;;		_flow_sampling_process
 32931 ;; This function uses a non-reentrant model
 32932 ;;
 32933                           
 32934                           
 32935                           ;psect for function _app_flow_get_adcAverageValue
 32936  10CA                     _app_flow_get_adcAverageValue:	
 32937                           
 32938                           ;flow.c: 227: uint8_t maxIndex,minIndex;
 32939                           ;flow.c: 228: uint8_t i,j;
 32940                           ;flow.c: 229: uint32_t ret=0;
 32941                           
 32942                           ;incstack = 0
 32943                           ; Regs used in _app_flow_get_adcAverageValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 32944  10CA  3000               	movlw	0
 32945  10CB  0020               	movlb	0	; select bank0
 32946  10CC  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 32947  10CD  3000               	movlw	0
 32948  10CE  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 32949  10CF  3000               	movlw	0
 32950  10D0  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 32951  10D1  3000               	movlw	0
 32952  10D2  00C6               	movwf	app_flow_get_adcAverageValue@ret
 32953                           
 32954                           ;flow.c: 230: uint16_t max=0,min;
 32955  10D3  01C4               	clrf	app_flow_get_adcAverageValue@max
 32956  10D4  01C5               	clrf	app_flow_get_adcAverageValue@max+1
 32957                           
 32958                           ;flow.c: 231: for(j=0;j<8;j++){
 32959  10D5  01C3               	clrf	app_flow_get_adcAverageValue@j
 32960  10D6  3008               	movlw	8
 32961  10D7  0243               	subwf	app_flow_get_adcAverageValue@j,w
 32962  10D8  1803               	btfsc	3,0
 32963  10D9  29CB               	goto	l15365
 32964  10DA                     l15325:	
 32965                           
 32966                           ;flow.c: 232: ret=0;
 32967  10DA  3000               	movlw	0
 32968  10DB  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 32969  10DC  3000               	movlw	0
 32970  10DD  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 32971  10DE  3000               	movlw	0
 32972  10DF  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 32973  10E0  3000               	movlw	0
 32974  10E1  00C6               	movwf	app_flow_get_adcAverageValue@ret
 32975                           
 32976                           ;flow.c: 233: max=0;
 32977  10E2  01C4               	clrf	app_flow_get_adcAverageValue@max
 32978  10E3  01C5               	clrf	app_flow_get_adcAverageValue@max+1
 32979                           
 32980                           ;flow.c: 234: min=0x8000;
 32981  10E4  3000               	movlw	0
 32982  10E5  00C1               	movwf	app_flow_get_adcAverageValue@min
 32983  10E6  3080               	movlw	128
 32984  10E7  00C2               	movwf	app_flow_get_adcAverageValue@min+1
 32985                           
 32986                           ;flow.c: 235: maxIndex=0;
 32987  10E8  01BF               	clrf	app_flow_get_adcAverageValue@maxIndex
 32988                           
 32989                           ;flow.c: 236: minIndex=0;
 32990  10E9  01C0               	clrf	app_flow_get_adcAverageValue@minIndex
 32991                           
 32992                           ;flow.c: 237: for(i=0;i<20;i++){
 32993  10EA  01CA               	clrf	app_flow_get_adcAverageValue@i
 32994  10EB  3014               	movlw	20
 32995  10EC  024A               	subwf	app_flow_get_adcAverageValue@i,w
 32996  10ED  1803               	btfsc	3,0
 32997  10EE  2943               	goto	l15353
 32998  10EF                     l15335:	
 32999                           
 33000                           ;flow.c: 238: if(max<adcSamplingBuffer[i]){
 33001  10EF  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33002  10F0  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33003  10F1  0086               	movwf	6
 33004  10F2  3002               	movlw	2	; select bank5/6
 33005  10F3  0087               	movwf	7
 33006  10F4  3F40               	moviw [0]fsr1
 33007  10F5  00B7               	movwf	??_app_flow_get_adcAverageValue
 33008  10F6  3F41               	moviw [1]fsr1
 33009  10F7  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33010  10F8  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33011  10F9  0245               	subwf	app_flow_get_adcAverageValue@max+1,w
 33012  10FA  1D03               	skipz
 33013  10FB  28FE               	goto	u14055
 33014  10FC  0837               	movf	??_app_flow_get_adcAverageValue,w
 33015  10FD  0244               	subwf	app_flow_get_adcAverageValue@max,w
 33016  10FE                     u14055:	
 33017  10FE  1803               	skipnc
 33018  10FF  290D               	goto	l15341
 33019                           
 33020                           ;flow.c: 239: max=adcSamplingBuffer[i];
 33021  1100  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33022  1101  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33023  1102  0086               	movwf	6
 33024  1103  3002               	movlw	2	; select bank5/6
 33025  1104  0087               	movwf	7
 33026  1105  3F40               	moviw [0]fsr1
 33027  1106  00C4               	movwf	app_flow_get_adcAverageValue@max
 33028  1107  3F41               	moviw [1]fsr1
 33029  1108  00C5               	movwf	app_flow_get_adcAverageValue@max+1
 33030                           
 33031                           ;flow.c: 240: maxIndex=i;
 33032  1109  084A               	movf	app_flow_get_adcAverageValue@i,w
 33033  110A  00B7               	movwf	??_app_flow_get_adcAverageValue
 33034  110B  0837               	movf	??_app_flow_get_adcAverageValue,w
 33035  110C  00BF               	movwf	app_flow_get_adcAverageValue@maxIndex
 33036  110D                     l15341:	
 33037                           
 33038                           ;flow.c: 241: }
 33039                           ;flow.c: 242: if(min>adcSamplingBuffer[i]){
 33040  110D  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33041  110E  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33042  110F  0086               	movwf	6
 33043  1110  3002               	movlw	2	; select bank5/6
 33044  1111  0087               	movwf	7
 33045  1112  3F40               	moviw [0]fsr1
 33046  1113  00B7               	movwf	??_app_flow_get_adcAverageValue
 33047  1114  3F41               	moviw [1]fsr1
 33048  1115  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33049  1116  0842               	movf	app_flow_get_adcAverageValue@min+1,w
 33050  1117  0238               	subwf	??_app_flow_get_adcAverageValue+1,w
 33051  1118  1D03               	skipz
 33052  1119  291C               	goto	u14065
 33053  111A  0841               	movf	app_flow_get_adcAverageValue@min,w
 33054  111B  0237               	subwf	??_app_flow_get_adcAverageValue,w
 33055  111C                     u14065:	
 33056  111C  1803               	skipnc
 33057  111D  292B               	goto	l15347
 33058                           
 33059                           ;flow.c: 243: min=adcSamplingBuffer[i];
 33060  111E  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33061  111F  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33062  1120  0086               	movwf	6
 33063  1121  3002               	movlw	2	; select bank5/6
 33064  1122  0087               	movwf	7
 33065  1123  3F40               	moviw [0]fsr1
 33066  1124  00C1               	movwf	app_flow_get_adcAverageValue@min
 33067  1125  3F41               	moviw [1]fsr1
 33068  1126  00C2               	movwf	app_flow_get_adcAverageValue@min+1
 33069                           
 33070                           ;flow.c: 244: minIndex=i;
 33071  1127  084A               	movf	app_flow_get_adcAverageValue@i,w
 33072  1128  00B7               	movwf	??_app_flow_get_adcAverageValue
 33073  1129  0837               	movf	??_app_flow_get_adcAverageValue,w
 33074  112A  00C0               	movwf	app_flow_get_adcAverageValue@minIndex
 33075  112B                     l15347:	
 33076                           
 33077                           ;flow.c: 245: }
 33078                           ;flow.c: 246: ret+=adcSamplingBuffer[i];
 33079  112B  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33080  112C  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33081  112D  0086               	movwf	6
 33082  112E  3002               	movlw	2	; select bank5/6
 33083  112F  0087               	movwf	7
 33084  1130  3F40               	moviw [0]fsr1
 33085  1131  00B7               	movwf	??_app_flow_get_adcAverageValue
 33086  1132  3F41               	moviw [1]fsr1
 33087  1133  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33088  1134  0837               	movf	??_app_flow_get_adcAverageValue,w
 33089  1135  07C6               	addwf	app_flow_get_adcAverageValue@ret,f
 33090  1136  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33091  1137  3DC7               	addwfc	app_flow_get_adcAverageValue@ret+1,f
 33092  1138  3000               	movlw	0
 33093  1139  3DC8               	addwfc	app_flow_get_adcAverageValue@ret+2,f
 33094  113A  3DC9               	addwfc	app_flow_get_adcAverageValue@ret+3,f
 33095  113B  3001               	movlw	1
 33096  113C  00B7               	movwf	??_app_flow_get_adcAverageValue
 33097  113D  0837               	movf	??_app_flow_get_adcAverageValue,w
 33098  113E  07CA               	addwf	app_flow_get_adcAverageValue@i,f
 33099  113F  3014               	movlw	20
 33100  1140  024A               	subwf	app_flow_get_adcAverageValue@i,w
 33101  1141  1C03               	skipc
 33102  1142  28EF               	goto	l15335
 33103  1143                     l15353:	
 33104                           
 33105                           ;flow.c: 247: }
 33106                           ;flow.c: 248: ret=ret-max;
 33107  1143  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33108  1144  00B7               	movwf	??_app_flow_get_adcAverageValue
 33109  1145  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33110  1146  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33111  1147  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33112  1148  00B9               	movwf	??_app_flow_get_adcAverageValue+2
 33113  1149  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33114  114A  00BA               	movwf	??_app_flow_get_adcAverageValue+3
 33115  114B  0844               	movf	app_flow_get_adcAverageValue@max,w
 33116  114C  00BB               	movwf	??_app_flow_get_adcAverageValue+4
 33117  114D  0845               	movf	app_flow_get_adcAverageValue@max+1,w
 33118  114E  00BC               	movwf	??_app_flow_get_adcAverageValue+5
 33119  114F  01BD               	clrf	??_app_flow_get_adcAverageValue+6
 33120  1150  01BE               	clrf	??_app_flow_get_adcAverageValue+7
 33121  1151  09BB               	comf	??_app_flow_get_adcAverageValue+4,f
 33122  1152  09BC               	comf	??_app_flow_get_adcAverageValue+5,f
 33123  1153  09BD               	comf	??_app_flow_get_adcAverageValue+6,f
 33124  1154  09BE               	comf	??_app_flow_get_adcAverageValue+7,f
 33125  1155  0ABB               	incf	??_app_flow_get_adcAverageValue+4,f
 33126  1156  1903               	skipnz
 33127  1157  0ABC               	incf	??_app_flow_get_adcAverageValue+5,f
 33128  1158  1903               	skipnz
 33129  1159  0ABD               	incf	??_app_flow_get_adcAverageValue+6,f
 33130  115A  1903               	skipnz
 33131  115B  0ABE               	incf	??_app_flow_get_adcAverageValue+7,f
 33132  115C  083B               	movf	??_app_flow_get_adcAverageValue+4,w
 33133  115D  07B7               	addwf	??_app_flow_get_adcAverageValue,f
 33134  115E  083C               	movf	??_app_flow_get_adcAverageValue+5,w
 33135  115F  3DB8               	addwfc	??_app_flow_get_adcAverageValue+1,f
 33136  1160  083D               	movf	??_app_flow_get_adcAverageValue+6,w
 33137  1161  3DB9               	addwfc	??_app_flow_get_adcAverageValue+2,f
 33138  1162  083E               	movf	??_app_flow_get_adcAverageValue+7,w
 33139  1163  3DBA               	addwfc	??_app_flow_get_adcAverageValue+3,f
 33140  1164  083A               	movf	??_app_flow_get_adcAverageValue+3,w
 33141  1165  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33142  1166  0839               	movf	??_app_flow_get_adcAverageValue+2,w
 33143  1167  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33144  1168  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33145  1169  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33146  116A  0837               	movf	??_app_flow_get_adcAverageValue,w
 33147  116B  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33148                           
 33149                           ;flow.c: 249: ret=ret-min;
 33150  116C  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33151  116D  00B7               	movwf	??_app_flow_get_adcAverageValue
 33152  116E  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33153  116F  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33154  1170  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33155  1171  00B9               	movwf	??_app_flow_get_adcAverageValue+2
 33156  1172  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33157  1173  00BA               	movwf	??_app_flow_get_adcAverageValue+3
 33158  1174  0841               	movf	app_flow_get_adcAverageValue@min,w
 33159  1175  00BB               	movwf	??_app_flow_get_adcAverageValue+4
 33160  1176  0842               	movf	app_flow_get_adcAverageValue@min+1,w
 33161  1177  00BC               	movwf	??_app_flow_get_adcAverageValue+5
 33162  1178  01BD               	clrf	??_app_flow_get_adcAverageValue+6
 33163  1179  01BE               	clrf	??_app_flow_get_adcAverageValue+7
 33164  117A  09BB               	comf	??_app_flow_get_adcAverageValue+4,f
 33165  117B  09BC               	comf	??_app_flow_get_adcAverageValue+5,f
 33166  117C  09BD               	comf	??_app_flow_get_adcAverageValue+6,f
 33167  117D  09BE               	comf	??_app_flow_get_adcAverageValue+7,f
 33168  117E  0ABB               	incf	??_app_flow_get_adcAverageValue+4,f
 33169  117F  1903               	skipnz
 33170  1180  0ABC               	incf	??_app_flow_get_adcAverageValue+5,f
 33171  1181  1903               	skipnz
 33172  1182  0ABD               	incf	??_app_flow_get_adcAverageValue+6,f
 33173  1183  1903               	skipnz
 33174  1184  0ABE               	incf	??_app_flow_get_adcAverageValue+7,f
 33175  1185  083B               	movf	??_app_flow_get_adcAverageValue+4,w
 33176  1186  07B7               	addwf	??_app_flow_get_adcAverageValue,f
 33177  1187  083C               	movf	??_app_flow_get_adcAverageValue+5,w
 33178  1188  3DB8               	addwfc	??_app_flow_get_adcAverageValue+1,f
 33179  1189  083D               	movf	??_app_flow_get_adcAverageValue+6,w
 33180  118A  3DB9               	addwfc	??_app_flow_get_adcAverageValue+2,f
 33181  118B  083E               	movf	??_app_flow_get_adcAverageValue+7,w
 33182  118C  3DBA               	addwfc	??_app_flow_get_adcAverageValue+3,f
 33183  118D  083A               	movf	??_app_flow_get_adcAverageValue+3,w
 33184  118E  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33185  118F  0839               	movf	??_app_flow_get_adcAverageValue+2,w
 33186  1190  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33187  1191  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33188  1192  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33189  1193  0837               	movf	??_app_flow_get_adcAverageValue,w
 33190  1194  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33191                           
 33192                           ;flow.c: 250: ret=ret/(20-2);
 33193  1195  3000               	movlw	0
 33194  1196  00AB               	movwf	___lldiv@divisor+3
 33195  1197  3000               	movlw	0
 33196  1198  00AA               	movwf	___lldiv@divisor+2
 33197  1199  3000               	movlw	0
 33198  119A  00A9               	movwf	___lldiv@divisor+1
 33199  119B  3012               	movlw	18
 33200  119C  00A8               	movwf	___lldiv@divisor
 33201  119D  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33202  119E  00AF               	movwf	___lldiv@dividend+3
 33203  119F  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33204  11A0  00AE               	movwf	___lldiv@dividend+2
 33205  11A1  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33206  11A2  00AD               	movwf	___lldiv@dividend+1
 33207  11A3  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33208  11A4  00AC               	movwf	___lldiv@dividend
 33209  11A5  31AA  2245  3190   	fcall	___lldiv
 33210  11A8  0020               	movlb	0	; select bank0
 33211  11A9  082B               	movf	?___lldiv+3,w
 33212  11AA  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33213  11AB  082A               	movf	?___lldiv+2,w
 33214  11AC  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33215  11AD  0829               	movf	?___lldiv+1,w
 33216  11AE  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33217  11AF  0828               	movf	?___lldiv,w
 33218  11B0  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33219                           
 33220                           ;flow.c: 251: adcSamplingBuffer[maxIndex]=(uint16_t)ret;
 33221  11B1  353F               	lslf	app_flow_get_adcAverageValue@maxIndex,w
 33222  11B2  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33223  11B3  0086               	movwf	6
 33224  11B4  3002               	movlw	2	; select bank5/6
 33225  11B5  0087               	movwf	7
 33226  11B6  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33227  11B7  3FC0               	movwi [0]fsr1
 33228  11B8  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33229  11B9  3FC1               	movwi [1]fsr1
 33230                           
 33231                           ;flow.c: 252: adcSamplingBuffer[minIndex]=(uint16_t)ret;
 33232  11BA  3540               	lslf	app_flow_get_adcAverageValue@minIndex,w
 33233  11BB  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33234  11BC  0086               	movwf	6
 33235  11BD  3002               	movlw	2	; select bank5/6
 33236  11BE  0087               	movwf	7
 33237  11BF  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33238  11C0  3FC0               	movwi [0]fsr1
 33239  11C1  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33240  11C2  3FC1               	movwi [1]fsr1
 33241  11C3  3001               	movlw	1
 33242  11C4  00B7               	movwf	??_app_flow_get_adcAverageValue
 33243  11C5  0837               	movf	??_app_flow_get_adcAverageValue,w
 33244  11C6  07C3               	addwf	app_flow_get_adcAverageValue@j,f
 33245  11C7  3008               	movlw	8
 33246  11C8  0243               	subwf	app_flow_get_adcAverageValue@j,w
 33247  11C9  1C03               	skipc
 33248  11CA  28DA               	goto	l15325
 33249  11CB                     l15365:	
 33250                           
 33251                           ;flow.c: 253: }
 33252                           ;flow.c: 254: return (uint16_t)ret;
 33253  11CB  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33254  11CC  00B6               	movwf	?_app_flow_get_adcAverageValue+1
 33255  11CD  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33256  11CE  00B5               	movwf	?_app_flow_get_adcAverageValue
 33257  11CF  0008               	return
 33258  11D0                     __end_of_app_flow_get_adcAverageValue:	
 33259                           
 33260                           	psect	text136
 33261  03BD                     __ptext136:	
 33262 ;; *************** function _app_flow_adc_2_flow *****************
 33263 ;; Defined at:
 33264 ;;		line 85 in file "src/app/flow.c"
 33265 ;; Parameters:    Size  Location     Type
 33266 ;;  index           1    wreg     unsigned char 
 33267 ;; Auto vars:     Size  Location     Type
 33268 ;;  index           1   41[BANK0 ] unsigned char 
 33269 ;;  ad1             2   39[BANK0 ] unsigned int 
 33270 ;;  flw1            2   37[BANK0 ] unsigned int 
 33271 ;;  ad2             2   35[BANK0 ] unsigned int 
 33272 ;;  flw2            2   33[BANK0 ] unsigned int 
 33273 ;; Return value:  Size  Location     Type
 33274 ;;                  2   21[BANK0 ] unsigned int 
 33275 ;; Registers used:
 33276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 33277 ;; Tracked objects:
 33278 ;;		On entry : 0/0
 33279 ;;		On exit  : 0/0
 33280 ;;		Unchanged: 0/0
 33281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33282 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 33283 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 33284 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 33285 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0
 33286 ;;Total ram usage:       21 bytes
 33287 ;; Hardware stack levels used:    1
 33288 ;; Hardware stack levels required when called:    3
 33289 ;; This function calls:
 33290 ;;		___lldiv
 33291 ;;		___lmul
 33292 ;; This function is called by:
 33293 ;;		_flow_sampling_process
 33294 ;; This function uses a non-reentrant model
 33295 ;;
 33296                           
 33297                           
 33298                           ;psect for function _app_flow_adc_2_flow
 33299  03BD                     _app_flow_adc_2_flow:	
 33300                           
 33301                           ;incstack = 0
 33302                           ; Regs used in _app_flow_adc_2_flow: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 33303                           ;app_flow_adc_2_flow@index stored from wreg
 33304  03BD  0020               	movlb	0	; select bank0
 33305  03BE  00C9               	movwf	app_flow_adc_2_flow@index
 33306                           
 33307                           ;flow.c: 87: uint16_t flw1 = 0, flw2 = 0;
 33308  03BF  01C5               	clrf	app_flow_adc_2_flow@flw1
 33309  03C0  01C6               	clrf	app_flow_adc_2_flow@flw1+1
 33310  03C1  01C1               	clrf	app_flow_adc_2_flow@flw2
 33311  03C2  01C2               	clrf	app_flow_adc_2_flow@flw2+1
 33312                           
 33313                           ;flow.c: 88: uint16_t ad1 = 0, ad2 = 0;
 33314  03C3  01C7               	clrf	app_flow_adc_2_flow@ad1
 33315  03C4  01C8               	clrf	app_flow_adc_2_flow@ad1+1
 33316  03C5  01C3               	clrf	app_flow_adc_2_flow@ad2
 33317  03C6  01C4               	clrf	app_flow_adc_2_flow@ad2+1
 33318                           
 33319                           ;flow.c: 91: if(valveStatus==VALVE_CLOSED){
 33320  03C7  037A               	decf	_valveStatus,w
 33321  03C8  1D03               	btfss	3,2
 33322  03C9  2BD0               	goto	l15223
 33323                           
 33324                           ;flow.c: 92: flowError=0;
 33325  03CA  0021               	movlb	1	; select bank1
 33326  03CB  01C6               	clrf	_flowError^(0+128)
 33327                           
 33328                           ;flow.c: 93: return 0;
 33329  03CC  0020               	movlb	0	; select bank0
 33330  03CD  01B5               	clrf	?_app_flow_adc_2_flow
 33331  03CE  01B6               	clrf	?_app_flow_adc_2_flow+1
 33332  03CF  0008               	return
 33333  03D0                     l15223:	
 33334                           
 33335                           ;flow.c: 94: }
 33336                           ;flow.c: 96: fl_t32=1;
 33337  03D0  3000               	movlw	0
 33338  03D1  0021               	movlb	1	; select bank1
 33339  03D2  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33340  03D3  3000               	movlw	0
 33341  03D4  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33342  03D5  3000               	movlw	0
 33343  03D6  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33344  03D7  3001               	movlw	1
 33345  03D8  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33346                           
 33347                           ;flow.c: 97: if (index < 30 - 1) {
 33348  03D9  301D               	movlw	29
 33349  03DA  0020               	movlb	0	; select bank0
 33350  03DB  0249               	subwf	app_flow_adc_2_flow@index,w
 33351  03DC  1803               	skipnc
 33352  03DD  2D7E               	goto	l15257
 33353                           
 33354                           ;flow.c: 98: ad1 = Main_flowCalibrationTable.flowCalibrationArr[index].adcValue;
 33355  03DE  0849               	movf	app_flow_adc_2_flow@index,w
 33356  03DF  00B7               	movwf	??_app_flow_adc_2_flow
 33357  03E0  01B8               	clrf	??_app_flow_adc_2_flow+1
 33358  03E1  35B7               	lslf	??_app_flow_adc_2_flow,f
 33359  03E2  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33360  03E3  35B7               	lslf	??_app_flow_adc_2_flow,f
 33361  03E4  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33362  03E5  3074               	movlw	116
 33363  03E6  00B9               	movwf	??_app_flow_adc_2_flow+2
 33364  03E7  3023               	movlw	35
 33365  03E8  00BA               	movwf	??_app_flow_adc_2_flow+3
 33366  03E9  0837               	movf	??_app_flow_adc_2_flow,w
 33367  03EA  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33368  03EB  0086               	movwf	6
 33369  03EC  0838               	movf	??_app_flow_adc_2_flow+1,w
 33370  03ED  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33371  03EE  0087               	movwf	7
 33372  03EF  3F40               	moviw [0]fsr1
 33373  03F0  00C7               	movwf	app_flow_adc_2_flow@ad1
 33374  03F1  3F41               	moviw [1]fsr1
 33375  03F2  00C8               	movwf	app_flow_adc_2_flow@ad1+1
 33376                           
 33377                           ;flow.c: 99: ad2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].adcValue;
 33378  03F3  0849               	movf	app_flow_adc_2_flow@index,w
 33379  03F4  00B7               	movwf	??_app_flow_adc_2_flow
 33380  03F5  01B8               	clrf	??_app_flow_adc_2_flow+1
 33381  03F6  35B7               	lslf	??_app_flow_adc_2_flow,f
 33382  03F7  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33383  03F8  35B7               	lslf	??_app_flow_adc_2_flow,f
 33384  03F9  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33385  03FA  0837               	movf	??_app_flow_adc_2_flow,w
 33386  03FB  3E04               	addlw	4
 33387  03FC  00B9               	movwf	??_app_flow_adc_2_flow+2
 33388  03FD  3000               	movlw	0
 33389  03FE  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33390  03FF  00BA               	movwf	??_app_flow_adc_2_flow+3
 33391  0400  3074               	movlw	116
 33392  0401  00BB               	movwf	??_app_flow_adc_2_flow+4
 33393  0402  3023               	movlw	35
 33394  0403  00BC               	movwf	??_app_flow_adc_2_flow+5
 33395  0404  0839               	movf	??_app_flow_adc_2_flow+2,w
 33396  0405  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33397  0406  0086               	movwf	6
 33398  0407  083A               	movf	??_app_flow_adc_2_flow+3,w
 33399  0408  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33400  0409  0087               	movwf	7
 33401  040A  3F40               	moviw [0]fsr1
 33402  040B  00C3               	movwf	app_flow_adc_2_flow@ad2
 33403  040C  3F41               	moviw [1]fsr1
 33404  040D  00C4               	movwf	app_flow_adc_2_flow@ad2+1
 33405                           
 33406                           ;flow.c: 100: flw1 = Main_flowCalibrationTable.flowCalibrationArr[index].rtflowValue;
 33407  040E  0849               	movf	app_flow_adc_2_flow@index,w
 33408  040F  00B7               	movwf	??_app_flow_adc_2_flow
 33409  0410  01B8               	clrf	??_app_flow_adc_2_flow+1
 33410  0411  35B7               	lslf	??_app_flow_adc_2_flow,f
 33411  0412  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33412  0413  35B7               	lslf	??_app_flow_adc_2_flow,f
 33413  0414  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33414  0415  0837               	movf	??_app_flow_adc_2_flow,w
 33415  0416  3E02               	addlw	2
 33416  0417  00B9               	movwf	??_app_flow_adc_2_flow+2
 33417  0418  3000               	movlw	0
 33418  0419  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33419  041A  00BA               	movwf	??_app_flow_adc_2_flow+3
 33420  041B  3074               	movlw	116
 33421  041C  00BB               	movwf	??_app_flow_adc_2_flow+4
 33422  041D  3023               	movlw	35
 33423  041E  00BC               	movwf	??_app_flow_adc_2_flow+5
 33424  041F  0839               	movf	??_app_flow_adc_2_flow+2,w
 33425  0420  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33426  0421  0086               	movwf	6
 33427  0422  083A               	movf	??_app_flow_adc_2_flow+3,w
 33428  0423  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33429  0424  0087               	movwf	7
 33430  0425  3F40               	moviw [0]fsr1
 33431  0426  00C5               	movwf	app_flow_adc_2_flow@flw1
 33432  0427  3F41               	moviw [1]fsr1
 33433  0428  00C6               	movwf	app_flow_adc_2_flow@flw1+1
 33434                           
 33435                           ;flow.c: 101: flw2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].rtflowValue
      +                          ;
 33436  0429  0849               	movf	app_flow_adc_2_flow@index,w
 33437  042A  00B7               	movwf	??_app_flow_adc_2_flow
 33438  042B  01B8               	clrf	??_app_flow_adc_2_flow+1
 33439  042C  35B7               	lslf	??_app_flow_adc_2_flow,f
 33440  042D  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33441  042E  35B7               	lslf	??_app_flow_adc_2_flow,f
 33442  042F  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33443  0430  0837               	movf	??_app_flow_adc_2_flow,w
 33444  0431  3E06               	addlw	6
 33445  0432  00B9               	movwf	??_app_flow_adc_2_flow+2
 33446  0433  3000               	movlw	0
 33447  0434  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33448  0435  00BA               	movwf	??_app_flow_adc_2_flow+3
 33449  0436  3074               	movlw	116
 33450  0437  00BB               	movwf	??_app_flow_adc_2_flow+4
 33451  0438  3023               	movlw	35
 33452  0439  00BC               	movwf	??_app_flow_adc_2_flow+5
 33453  043A  0839               	movf	??_app_flow_adc_2_flow+2,w
 33454  043B  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33455  043C  0086               	movwf	6
 33456  043D  083A               	movf	??_app_flow_adc_2_flow+3,w
 33457  043E  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33458  043F  0087               	movwf	7
 33459  0440  3F40               	moviw [0]fsr1
 33460  0441  00C1               	movwf	app_flow_adc_2_flow@flw2
 33461  0442  3F41               	moviw [1]fsr1
 33462  0443  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33463                           
 33464                           ;flow.c: 102: if(ad2 == ad1){
 33465  0444  0848               	movf	app_flow_adc_2_flow@ad1+1,w
 33466  0445  0644               	xorwf	app_flow_adc_2_flow@ad2+1,w
 33467  0446  1D03               	skipz
 33468  0447  2C4A               	goto	u13925
 33469  0448  0847               	movf	app_flow_adc_2_flow@ad1,w
 33470  0449  0643               	xorwf	app_flow_adc_2_flow@ad2,w
 33471  044A                     u13925:	
 33472  044A  1D03               	skipz
 33473  044B  2CB8               	goto	l15237
 33474                           
 33475                           ;flow.c: 105: if(index==0)return 0;
 33476  044C  0849               	movf	app_flow_adc_2_flow@index,w
 33477  044D  1D03               	btfss	3,2
 33478  044E  2C52               	goto	l15235
 33479  044F  01B5               	clrf	?_app_flow_adc_2_flow
 33480  0450  01B6               	clrf	?_app_flow_adc_2_flow+1
 33481  0451  0008               	return
 33482  0452                     l15235:	
 33483                           
 33484                           ;flow.c: 106: ad1 = Main_flowCalibrationTable.flowCalibrationArr[index-1].adcValue;
 33485  0452  0849               	movf	app_flow_adc_2_flow@index,w
 33486  0453  00B7               	movwf	??_app_flow_adc_2_flow
 33487  0454  01B8               	clrf	??_app_flow_adc_2_flow+1
 33488  0455  35B7               	lslf	??_app_flow_adc_2_flow,f
 33489  0456  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33490  0457  35B7               	lslf	??_app_flow_adc_2_flow,f
 33491  0458  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33492  0459  0837               	movf	??_app_flow_adc_2_flow,w
 33493  045A  3EFC               	addlw	252
 33494  045B  00B9               	movwf	??_app_flow_adc_2_flow+2
 33495  045C  30FF               	movlw	255
 33496  045D  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33497  045E  00BA               	movwf	??_app_flow_adc_2_flow+3
 33498  045F  3074               	movlw	116
 33499  0460  00BB               	movwf	??_app_flow_adc_2_flow+4
 33500  0461  3023               	movlw	35
 33501  0462  00BC               	movwf	??_app_flow_adc_2_flow+5
 33502  0463  0839               	movf	??_app_flow_adc_2_flow+2,w
 33503  0464  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33504  0465  0086               	movwf	6
 33505  0466  083A               	movf	??_app_flow_adc_2_flow+3,w
 33506  0467  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33507  0468  0087               	movwf	7
 33508  0469  3F40               	moviw [0]fsr1
 33509  046A  00C7               	movwf	app_flow_adc_2_flow@ad1
 33510  046B  3F41               	moviw [1]fsr1
 33511  046C  00C8               	movwf	app_flow_adc_2_flow@ad1+1
 33512                           
 33513                           ;flow.c: 107: ad2 = Main_flowCalibrationTable.flowCalibrationArr[index].adcValue;
 33514  046D  0849               	movf	app_flow_adc_2_flow@index,w
 33515  046E  00B7               	movwf	??_app_flow_adc_2_flow
 33516  046F  01B8               	clrf	??_app_flow_adc_2_flow+1
 33517  0470  35B7               	lslf	??_app_flow_adc_2_flow,f
 33518  0471  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33519  0472  35B7               	lslf	??_app_flow_adc_2_flow,f
 33520  0473  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33521  0474  3074               	movlw	116
 33522  0475  00B9               	movwf	??_app_flow_adc_2_flow+2
 33523  0476  3023               	movlw	35
 33524  0477  00BA               	movwf	??_app_flow_adc_2_flow+3
 33525  0478  0837               	movf	??_app_flow_adc_2_flow,w
 33526  0479  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33527  047A  0086               	movwf	6
 33528  047B  0838               	movf	??_app_flow_adc_2_flow+1,w
 33529  047C  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33530  047D  0087               	movwf	7
 33531  047E  3F40               	moviw [0]fsr1
 33532  047F  00C3               	movwf	app_flow_adc_2_flow@ad2
 33533  0480  3F41               	moviw [1]fsr1
 33534  0481  00C4               	movwf	app_flow_adc_2_flow@ad2+1
 33535                           
 33536                           ;flow.c: 108: flw1 = Main_flowCalibrationTable.flowCalibrationArr[index-1].rtflowValue;
 33537  0482  0849               	movf	app_flow_adc_2_flow@index,w
 33538  0483  00B7               	movwf	??_app_flow_adc_2_flow
 33539  0484  01B8               	clrf	??_app_flow_adc_2_flow+1
 33540  0485  35B7               	lslf	??_app_flow_adc_2_flow,f
 33541  0486  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33542  0487  35B7               	lslf	??_app_flow_adc_2_flow,f
 33543  0488  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33544  0489  0837               	movf	??_app_flow_adc_2_flow,w
 33545  048A  3EFE               	addlw	254
 33546  048B  00B9               	movwf	??_app_flow_adc_2_flow+2
 33547  048C  30FF               	movlw	255
 33548  048D  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33549  048E  00BA               	movwf	??_app_flow_adc_2_flow+3
 33550  048F  3074               	movlw	116
 33551  0490  00BB               	movwf	??_app_flow_adc_2_flow+4
 33552  0491  3023               	movlw	35
 33553  0492  00BC               	movwf	??_app_flow_adc_2_flow+5
 33554  0493  0839               	movf	??_app_flow_adc_2_flow+2,w
 33555  0494  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33556  0495  0086               	movwf	6
 33557  0496  083A               	movf	??_app_flow_adc_2_flow+3,w
 33558  0497  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33559  0498  0087               	movwf	7
 33560  0499  3F40               	moviw [0]fsr1
 33561  049A  00C5               	movwf	app_flow_adc_2_flow@flw1
 33562  049B  3F41               	moviw [1]fsr1
 33563  049C  00C6               	movwf	app_flow_adc_2_flow@flw1+1
 33564                           
 33565                           ;flow.c: 109: flw2 = Main_flowCalibrationTable.flowCalibrationArr[index].rtflowValue;
 33566  049D  0849               	movf	app_flow_adc_2_flow@index,w
 33567  049E  00B7               	movwf	??_app_flow_adc_2_flow
 33568  049F  01B8               	clrf	??_app_flow_adc_2_flow+1
 33569  04A0  35B7               	lslf	??_app_flow_adc_2_flow,f
 33570  04A1  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33571  04A2  35B7               	lslf	??_app_flow_adc_2_flow,f
 33572  04A3  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33573  04A4  0837               	movf	??_app_flow_adc_2_flow,w
 33574  04A5  3E02               	addlw	2
 33575  04A6  00B9               	movwf	??_app_flow_adc_2_flow+2
 33576  04A7  3000               	movlw	0
 33577  04A8  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33578  04A9  00BA               	movwf	??_app_flow_adc_2_flow+3
 33579  04AA  3074               	movlw	116
 33580  04AB  00BB               	movwf	??_app_flow_adc_2_flow+4
 33581  04AC  3023               	movlw	35
 33582  04AD  00BC               	movwf	??_app_flow_adc_2_flow+5
 33583  04AE  0839               	movf	??_app_flow_adc_2_flow+2,w
 33584  04AF  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33585  04B0  0086               	movwf	6
 33586  04B1  083A               	movf	??_app_flow_adc_2_flow+3,w
 33587  04B2  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33588  04B3  0087               	movwf	7
 33589  04B4  3F40               	moviw [0]fsr1
 33590  04B5  00C1               	movwf	app_flow_adc_2_flow@flw2
 33591  04B6  3F41               	moviw [1]fsr1
 33592  04B7  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33593  04B8                     l15237:	
 33594                           
 33595                           ;flow.c: 110: }
 33596                           ;flow.c: 111: if(adcAverageValue < ad1)return 0;
 33597  04B8  0848               	movf	app_flow_adc_2_flow@ad1+1,w
 33598  04B9  0021               	movlb	1	; select bank1
 33599  04BA  0239               	subwf	(_adcAverageValue+1)^(0+128),w	;volatile
 33600  04BB  1D03               	skipz
 33601  04BC  2CC1               	goto	u13945
 33602  04BD  0020               	movlb	0	; select bank0
 33603  04BE  0847               	movf	app_flow_adc_2_flow@ad1,w
 33604  04BF  0021               	movlb	1	; select bank1
 33605  04C0  0238               	subwf	_adcAverageValue^(0+128),w	;volatile
 33606  04C1                     u13945:	
 33607  04C1  1803               	skipnc
 33608  04C2  2CC7               	goto	l15243
 33609  04C3  0020               	movlb	0	; select bank0
 33610  04C4  01B5               	clrf	?_app_flow_adc_2_flow
 33611  04C5  01B6               	clrf	?_app_flow_adc_2_flow+1
 33612  04C6  0008               	return
 33613  04C7                     l15243:	
 33614                           
 33615                           ;flow.c: 114: if(flw2<flw1)flw2=flw1;
 33616  04C7  0020               	movlb	0	; select bank0
 33617  04C8  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33618  04C9  0242               	subwf	app_flow_adc_2_flow@flw2+1,w
 33619  04CA  1D03               	skipz
 33620  04CB  2CCE               	goto	u13955
 33621  04CC  0845               	movf	app_flow_adc_2_flow@flw1,w
 33622  04CD  0241               	subwf	app_flow_adc_2_flow@flw2,w
 33623  04CE                     u13955:	
 33624  04CE  1803               	skipnc
 33625  04CF  2CD4               	goto	l15247
 33626  04D0  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33627  04D1  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33628  04D2  0845               	movf	app_flow_adc_2_flow@flw1,w
 33629  04D3  00C1               	movwf	app_flow_adc_2_flow@flw2
 33630  04D4                     l15247:	
 33631                           
 33632                           ;flow.c: 115: fl_t32 = fl_t32*(flw2 - flw1)*(adcAverageValue - ad1);
 33633  04D4  0945               	comf	app_flow_adc_2_flow@flw1,w
 33634  04D5  00B7               	movwf	??_app_flow_adc_2_flow
 33635  04D6  0946               	comf	app_flow_adc_2_flow@flw1+1,w
 33636  04D7  00B8               	movwf	??_app_flow_adc_2_flow+1
 33637  04D8  0AB7               	incf	??_app_flow_adc_2_flow,f
 33638  04D9  1903               	skipnz
 33639  04DA  0AB8               	incf	??_app_flow_adc_2_flow+1,f
 33640  04DB  0841               	movf	app_flow_adc_2_flow@flw2,w
 33641  04DC  0737               	addwf	??_app_flow_adc_2_flow,w
 33642  04DD  00A0               	movwf	___lmul@multiplier
 33643  04DE  0842               	movf	app_flow_adc_2_flow@flw2+1,w
 33644  04DF  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33645  04E0  00A1               	movwf	___lmul@multiplier+1
 33646  04E1  01A2               	clrf	___lmul@multiplier+2
 33647  04E2  01A3               	clrf	___lmul@multiplier+3
 33648  04E3  0947               	comf	app_flow_adc_2_flow@ad1,w
 33649  04E4  00B9               	movwf	??_app_flow_adc_2_flow+2
 33650  04E5  0948               	comf	app_flow_adc_2_flow@ad1+1,w
 33651  04E6  00BA               	movwf	??_app_flow_adc_2_flow+3
 33652  04E7  0AB9               	incf	??_app_flow_adc_2_flow+2,f
 33653  04E8  1903               	skipnz
 33654  04E9  0ABA               	incf	??_app_flow_adc_2_flow+3,f
 33655  04EA  0021               	movlb	1	; select bank1
 33656  04EB  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 33657  04EC  0020               	movlb	0	; select bank0
 33658  04ED  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33659  04EE  00A4               	movwf	___lmul@multiplicand
 33660  04EF  0021               	movlb	1	; select bank1
 33661  04F0  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 33662  04F1  0020               	movlb	0	; select bank0
 33663  04F2  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33664  04F3  00A5               	movwf	___lmul@multiplicand+1
 33665  04F4  01A6               	clrf	___lmul@multiplicand+2
 33666  04F5  01A7               	clrf	___lmul@multiplicand+3
 33667  04F6  31B3  235B  3183   	fcall	___lmul
 33668  04F9  0020               	movlb	0	; select bank0
 33669  04FA  0823               	movf	?___lmul+3,w
 33670  04FB  00C0               	movwf	_app_flow_adc_2_flow$4474+3
 33671  04FC  0822               	movf	?___lmul+2,w
 33672  04FD  00BF               	movwf	_app_flow_adc_2_flow$4474+2
 33673  04FE  0821               	movf	?___lmul+1,w
 33674  04FF  00BE               	movwf	_app_flow_adc_2_flow$4474+1
 33675  0500  0820               	movf	?___lmul,w
 33676  0501  00BD               	movwf	_app_flow_adc_2_flow$4474
 33677                           
 33678                           ;flow.c: 115: fl_t32 = fl_t32*(flw2 - flw1)*(adcAverageValue - ad1);
 33679  0502  0840               	movf	_app_flow_adc_2_flow$4474+3,w
 33680  0503  00A3               	movwf	___lmul@multiplier+3
 33681  0504  083F               	movf	_app_flow_adc_2_flow$4474+2,w
 33682  0505  00A2               	movwf	___lmul@multiplier+2
 33683  0506  083E               	movf	_app_flow_adc_2_flow$4474+1,w
 33684  0507  00A1               	movwf	___lmul@multiplier+1
 33685  0508  083D               	movf	_app_flow_adc_2_flow$4474,w
 33686  0509  00A0               	movwf	___lmul@multiplier
 33687  050A  0021               	movlb	1	; select bank1
 33688  050B  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33689  050C  0020               	movlb	0	; select bank0
 33690  050D  00A7               	movwf	___lmul@multiplicand+3
 33691  050E  0021               	movlb	1	; select bank1
 33692  050F  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33693  0510  0020               	movlb	0	; select bank0
 33694  0511  00A6               	movwf	___lmul@multiplicand+2
 33695  0512  0021               	movlb	1	; select bank1
 33696  0513  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33697  0514  0020               	movlb	0	; select bank0
 33698  0515  00A5               	movwf	___lmul@multiplicand+1
 33699  0516  0021               	movlb	1	; select bank1
 33700  0517  0824               	movf	_fl_t32^(0+128),w	;volatile
 33701  0518  0020               	movlb	0	; select bank0
 33702  0519  00A4               	movwf	___lmul@multiplicand
 33703  051A  31B3  235B  3183   	fcall	___lmul
 33704  051D  0020               	movlb	0	; select bank0
 33705  051E  0823               	movf	?___lmul+3,w
 33706  051F  0021               	movlb	1	; select bank1
 33707  0520  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33708  0521  0020               	movlb	0	; select bank0
 33709  0522  0822               	movf	?___lmul+2,w
 33710  0523  0021               	movlb	1	; select bank1
 33711  0524  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33712  0525  0020               	movlb	0	; select bank0
 33713  0526  0821               	movf	?___lmul+1,w
 33714  0527  0021               	movlb	1	; select bank1
 33715  0528  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33716  0529  0020               	movlb	0	; select bank0
 33717  052A  0820               	movf	?___lmul,w
 33718  052B  0021               	movlb	1	; select bank1
 33719  052C  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33720                           
 33721                           ;flow.c: 116: if(ad2 > ad1){
 33722  052D  0020               	movlb	0	; select bank0
 33723  052E  0844               	movf	app_flow_adc_2_flow@ad2+1,w
 33724  052F  0248               	subwf	app_flow_adc_2_flow@ad1+1,w
 33725  0530  1D03               	skipz
 33726  0531  2D34               	goto	u13965
 33727  0532  0843               	movf	app_flow_adc_2_flow@ad2,w
 33728  0533  0247               	subwf	app_flow_adc_2_flow@ad1,w
 33729  0534                     u13965:	
 33730  0534  1803               	skipnc
 33731  0535  2D74               	goto	l15255
 33732                           
 33733                           ;flow.c: 117: fl_t32 = fl_t32 /(ad2 - ad1);
 33734  0536  0947               	comf	app_flow_adc_2_flow@ad1,w
 33735  0537  00B7               	movwf	??_app_flow_adc_2_flow
 33736  0538  0948               	comf	app_flow_adc_2_flow@ad1+1,w
 33737  0539  00B8               	movwf	??_app_flow_adc_2_flow+1
 33738  053A  0AB7               	incf	??_app_flow_adc_2_flow,f
 33739  053B  1903               	skipnz
 33740  053C  0AB8               	incf	??_app_flow_adc_2_flow+1,f
 33741  053D  0843               	movf	app_flow_adc_2_flow@ad2,w
 33742  053E  0737               	addwf	??_app_flow_adc_2_flow,w
 33743  053F  00A8               	movwf	___lldiv@divisor
 33744  0540  0844               	movf	app_flow_adc_2_flow@ad2+1,w
 33745  0541  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33746  0542  00A9               	movwf	___lldiv@divisor+1
 33747  0543  01AA               	clrf	___lldiv@divisor+2
 33748  0544  01AB               	clrf	___lldiv@divisor+3
 33749  0545  0021               	movlb	1	; select bank1
 33750  0546  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33751  0547  0020               	movlb	0	; select bank0
 33752  0548  00AF               	movwf	___lldiv@dividend+3
 33753  0549  0021               	movlb	1	; select bank1
 33754  054A  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33755  054B  0020               	movlb	0	; select bank0
 33756  054C  00AE               	movwf	___lldiv@dividend+2
 33757  054D  0021               	movlb	1	; select bank1
 33758  054E  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33759  054F  0020               	movlb	0	; select bank0
 33760  0550  00AD               	movwf	___lldiv@dividend+1
 33761  0551  0021               	movlb	1	; select bank1
 33762  0552  0824               	movf	_fl_t32^(0+128),w	;volatile
 33763  0553  0020               	movlb	0	; select bank0
 33764  0554  00AC               	movwf	___lldiv@dividend
 33765  0555  31AA  2245  3183   	fcall	___lldiv
 33766  0558  0020               	movlb	0	; select bank0
 33767  0559  082B               	movf	?___lldiv+3,w
 33768  055A  0021               	movlb	1	; select bank1
 33769  055B  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33770  055C  0020               	movlb	0	; select bank0
 33771  055D  082A               	movf	?___lldiv+2,w
 33772  055E  0021               	movlb	1	; select bank1
 33773  055F  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33774  0560  0020               	movlb	0	; select bank0
 33775  0561  0829               	movf	?___lldiv+1,w
 33776  0562  0021               	movlb	1	; select bank1
 33777  0563  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33778  0564  0020               	movlb	0	; select bank0
 33779  0565  0828               	movf	?___lldiv,w
 33780  0566  0021               	movlb	1	; select bank1
 33781  0567  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33782                           
 33783                           ;flow.c: 118: fl_t32 += flw1;
 33784  0568  0020               	movlb	0	; select bank0
 33785  0569  0845               	movf	app_flow_adc_2_flow@flw1,w
 33786  056A  0021               	movlb	1	; select bank1
 33787  056B  07A4               	addwf	_fl_t32^(0+128),f	;volatile
 33788  056C  0020               	movlb	0	; select bank0
 33789  056D  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33790  056E  0021               	movlb	1	; select bank1
 33791  056F  3DA5               	addwfc	(_fl_t32+1)^(0+128),f	;volatile
 33792  0570  3000               	movlw	0
 33793  0571  3DA6               	addwfc	(_fl_t32+2)^(0+128),f	;volatile
 33794  0572  3DA7               	addwfc	(_fl_t32+3)^(0+128),f	;volatile
 33795                           
 33796                           ;flow.c: 119: }else{
 33797  0573  2D7E               	goto	l15257
 33798  0574                     l15255:	
 33799                           
 33800                           ;flow.c: 120: fl_t32= flw1;
 33801  0574  0020               	movlb	0	; select bank0
 33802  0575  0845               	movf	app_flow_adc_2_flow@flw1,w
 33803  0576  0021               	movlb	1	; select bank1
 33804  0577  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33805  0578  0020               	movlb	0	; select bank0
 33806  0579  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33807  057A  0021               	movlb	1	; select bank1
 33808  057B  00A5               	movwf	(_fl_t32^(0+128)+1)	;volatile
 33809  057C  01A6               	clrf	(_fl_t32^(0+128)+2)	;volatile
 33810  057D  01A7               	clrf	(_fl_t32^(0+128)+3)	;volatile
 33811  057E                     l15257:	
 33812                           
 33813                           ;flow.c: 121: }
 33814                           ;flow.c: 122: }
 33815                           ;flow.c: 123: fl_t32 = fl_t32 * mainSystemData.flowRatio;
 33816  057E  0024               	movlb	4	; select bank4
 33817  057F  083A               	movf	(_mainSystemData^(0+512)+26),w
 33818  0580  0020               	movlb	0	; select bank0
 33819  0581  00A0               	movwf	___lmul@multiplier
 33820  0582  0024               	movlb	4	; select bank4
 33821  0583  083B               	movf	((_mainSystemData+1)^(0+512)+26),w
 33822  0584  0020               	movlb	0	; select bank0
 33823  0585  00A1               	movwf	___lmul@multiplier+1
 33824  0586  0D89               	rlf	9,f
 33825  0587  3B89               	subwfb	9,f
 33826  0588  0989               	comf	9,f
 33827  0589  00A2               	movwf	___lmul@multiplier+2
 33828  058A  00A3               	movwf	___lmul@multiplier+3
 33829  058B  0021               	movlb	1	; select bank1
 33830  058C  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33831  058D  0020               	movlb	0	; select bank0
 33832  058E  00A7               	movwf	___lmul@multiplicand+3
 33833  058F  0021               	movlb	1	; select bank1
 33834  0590  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33835  0591  0020               	movlb	0	; select bank0
 33836  0592  00A6               	movwf	___lmul@multiplicand+2
 33837  0593  0021               	movlb	1	; select bank1
 33838  0594  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33839  0595  0020               	movlb	0	; select bank0
 33840  0596  00A5               	movwf	___lmul@multiplicand+1
 33841  0597  0021               	movlb	1	; select bank1
 33842  0598  0824               	movf	_fl_t32^(0+128),w	;volatile
 33843  0599  0020               	movlb	0	; select bank0
 33844  059A  00A4               	movwf	___lmul@multiplicand
 33845  059B  31B3  235B  3183   	fcall	___lmul
 33846  059E  0020               	movlb	0	; select bank0
 33847  059F  0823               	movf	?___lmul+3,w
 33848  05A0  0021               	movlb	1	; select bank1
 33849  05A1  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33850  05A2  0020               	movlb	0	; select bank0
 33851  05A3  0822               	movf	?___lmul+2,w
 33852  05A4  0021               	movlb	1	; select bank1
 33853  05A5  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33854  05A6  0020               	movlb	0	; select bank0
 33855  05A7  0821               	movf	?___lmul+1,w
 33856  05A8  0021               	movlb	1	; select bank1
 33857  05A9  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33858  05AA  0020               	movlb	0	; select bank0
 33859  05AB  0820               	movf	?___lmul,w
 33860  05AC  0021               	movlb	1	; select bank1
 33861  05AD  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33862                           
 33863                           ;flow.c: 124: fl_t32 /= 1000;
 33864  05AE  3000               	movlw	0
 33865  05AF  0020               	movlb	0	; select bank0
 33866  05B0  00AB               	movwf	___lldiv@divisor+3
 33867  05B1  3000               	movlw	0
 33868  05B2  00AA               	movwf	___lldiv@divisor+2
 33869  05B3  3003               	movlw	3
 33870  05B4  00A9               	movwf	___lldiv@divisor+1
 33871  05B5  30E8               	movlw	232
 33872  05B6  00A8               	movwf	___lldiv@divisor
 33873  05B7  0021               	movlb	1	; select bank1
 33874  05B8  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33875  05B9  0020               	movlb	0	; select bank0
 33876  05BA  00AF               	movwf	___lldiv@dividend+3
 33877  05BB  0021               	movlb	1	; select bank1
 33878  05BC  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33879  05BD  0020               	movlb	0	; select bank0
 33880  05BE  00AE               	movwf	___lldiv@dividend+2
 33881  05BF  0021               	movlb	1	; select bank1
 33882  05C0  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33883  05C1  0020               	movlb	0	; select bank0
 33884  05C2  00AD               	movwf	___lldiv@dividend+1
 33885  05C3  0021               	movlb	1	; select bank1
 33886  05C4  0824               	movf	_fl_t32^(0+128),w	;volatile
 33887  05C5  0020               	movlb	0	; select bank0
 33888  05C6  00AC               	movwf	___lldiv@dividend
 33889  05C7  31AA  2245  3183   	fcall	___lldiv
 33890  05CA  0020               	movlb	0	; select bank0
 33891  05CB  082B               	movf	?___lldiv+3,w
 33892  05CC  0021               	movlb	1	; select bank1
 33893  05CD  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33894  05CE  0020               	movlb	0	; select bank0
 33895  05CF  082A               	movf	?___lldiv+2,w
 33896  05D0  0021               	movlb	1	; select bank1
 33897  05D1  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33898  05D2  0020               	movlb	0	; select bank0
 33899  05D3  0829               	movf	?___lldiv+1,w
 33900  05D4  0021               	movlb	1	; select bank1
 33901  05D5  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33902  05D6  0020               	movlb	0	; select bank0
 33903  05D7  0828               	movf	?___lldiv,w
 33904  05D8  0021               	movlb	1	; select bank1
 33905  05D9  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33906                           
 33907                           ;flow.c: 125: __t32=Main_flowCalibrationTable.maxFlow;
 33908  05DA  30EC               	movlw	236
 33909  05DB  0086               	movwf	6
 33910  05DC  3023               	movlw	35
 33911  05DD  0087               	movwf	7
 33912  05DE  3F40               	moviw [0]fsr1
 33913  05DF  0020               	movlb	0	; select bank0
 33914  05E0  00B7               	movwf	??_app_flow_adc_2_flow
 33915  05E1  3F41               	moviw [1]fsr1
 33916  05E2  00B8               	movwf	??_app_flow_adc_2_flow+1
 33917  05E3  0837               	movf	??_app_flow_adc_2_flow,w
 33918  05E4  0021               	movlb	1	; select bank1
 33919  05E5  00B4               	movwf	___t32^(0+128)
 33920  05E6  0020               	movlb	0	; select bank0
 33921  05E7  0838               	movf	??_app_flow_adc_2_flow+1,w
 33922  05E8  0021               	movlb	1	; select bank1
 33923  05E9  00B5               	movwf	(___t32^(0+128)+1)
 33924  05EA  01B6               	clrf	(___t32^(0+128)+2)
 33925  05EB  01B7               	clrf	(___t32^(0+128)+3)
 33926                           
 33927                           ;flow.c: 126: __t32 =__t32 * mainSystemData.smallFlowNotCare ;
 33928  05EC  0024               	movlb	4	; select bank4
 33929  05ED  0859               	movf	(_mainSystemData^(0+512)+57),w
 33930  05EE  0020               	movlb	0	; select bank0
 33931  05EF  00B7               	movwf	??_app_flow_adc_2_flow
 33932  05F0  01B8               	clrf	??_app_flow_adc_2_flow+1
 33933  05F1  01B9               	clrf	??_app_flow_adc_2_flow+2
 33934  05F2  01BA               	clrf	??_app_flow_adc_2_flow+3
 33935  05F3  083A               	movf	??_app_flow_adc_2_flow+3,w
 33936  05F4  00A3               	movwf	___lmul@multiplier+3
 33937  05F5  0839               	movf	??_app_flow_adc_2_flow+2,w
 33938  05F6  00A2               	movwf	___lmul@multiplier+2
 33939  05F7  0838               	movf	??_app_flow_adc_2_flow+1,w
 33940  05F8  00A1               	movwf	___lmul@multiplier+1
 33941  05F9  0837               	movf	??_app_flow_adc_2_flow,w
 33942  05FA  00A0               	movwf	___lmul@multiplier
 33943  05FB  0021               	movlb	1	; select bank1
 33944  05FC  0837               	movf	(___t32+3)^(0+128),w
 33945  05FD  0020               	movlb	0	; select bank0
 33946  05FE  00A7               	movwf	___lmul@multiplicand+3
 33947  05FF  0021               	movlb	1	; select bank1
 33948  0600  0836               	movf	(___t32+2)^(0+128),w
 33949  0601  0020               	movlb	0	; select bank0
 33950  0602  00A6               	movwf	___lmul@multiplicand+2
 33951  0603  0021               	movlb	1	; select bank1
 33952  0604  0835               	movf	(___t32+1)^(0+128),w
 33953  0605  0020               	movlb	0	; select bank0
 33954  0606  00A5               	movwf	___lmul@multiplicand+1
 33955  0607  0021               	movlb	1	; select bank1
 33956  0608  0834               	movf	___t32^(0+128),w
 33957  0609  0020               	movlb	0	; select bank0
 33958  060A  00A4               	movwf	___lmul@multiplicand
 33959  060B  31B3  235B  3183   	fcall	___lmul
 33960  060E  0020               	movlb	0	; select bank0
 33961  060F  0823               	movf	?___lmul+3,w
 33962  0610  0021               	movlb	1	; select bank1
 33963  0611  00B7               	movwf	(___t32+3)^(0+128)
 33964  0612  0020               	movlb	0	; select bank0
 33965  0613  0822               	movf	?___lmul+2,w
 33966  0614  0021               	movlb	1	; select bank1
 33967  0615  00B6               	movwf	(___t32+2)^(0+128)
 33968  0616  0020               	movlb	0	; select bank0
 33969  0617  0821               	movf	?___lmul+1,w
 33970  0618  0021               	movlb	1	; select bank1
 33971  0619  00B5               	movwf	(___t32+1)^(0+128)
 33972  061A  0020               	movlb	0	; select bank0
 33973  061B  0820               	movf	?___lmul,w
 33974  061C  0021               	movlb	1	; select bank1
 33975  061D  00B4               	movwf	___t32^(0+128)
 33976                           
 33977                           ;flow.c: 127: __t32 = __t32 /100;
 33978  061E  3000               	movlw	0
 33979  061F  0020               	movlb	0	; select bank0
 33980  0620  00AB               	movwf	___lldiv@divisor+3
 33981  0621  3000               	movlw	0
 33982  0622  00AA               	movwf	___lldiv@divisor+2
 33983  0623  3000               	movlw	0
 33984  0624  00A9               	movwf	___lldiv@divisor+1
 33985  0625  3064               	movlw	100
 33986  0626  00A8               	movwf	___lldiv@divisor
 33987  0627  0021               	movlb	1	; select bank1
 33988  0628  0837               	movf	(___t32+3)^(0+128),w
 33989  0629  0020               	movlb	0	; select bank0
 33990  062A  00AF               	movwf	___lldiv@dividend+3
 33991  062B  0021               	movlb	1	; select bank1
 33992  062C  0836               	movf	(___t32+2)^(0+128),w
 33993  062D  0020               	movlb	0	; select bank0
 33994  062E  00AE               	movwf	___lldiv@dividend+2
 33995  062F  0021               	movlb	1	; select bank1
 33996  0630  0835               	movf	(___t32+1)^(0+128),w
 33997  0631  0020               	movlb	0	; select bank0
 33998  0632  00AD               	movwf	___lldiv@dividend+1
 33999  0633  0021               	movlb	1	; select bank1
 34000  0634  0834               	movf	___t32^(0+128),w
 34001  0635  0020               	movlb	0	; select bank0
 34002  0636  00AC               	movwf	___lldiv@dividend
 34003  0637  31AA  2245  3183   	fcall	___lldiv
 34004  063A  0020               	movlb	0	; select bank0
 34005  063B  082B               	movf	?___lldiv+3,w
 34006  063C  0021               	movlb	1	; select bank1
 34007  063D  00B7               	movwf	(___t32+3)^(0+128)
 34008  063E  0020               	movlb	0	; select bank0
 34009  063F  082A               	movf	?___lldiv+2,w
 34010  0640  0021               	movlb	1	; select bank1
 34011  0641  00B6               	movwf	(___t32+2)^(0+128)
 34012  0642  0020               	movlb	0	; select bank0
 34013  0643  0829               	movf	?___lldiv+1,w
 34014  0644  0021               	movlb	1	; select bank1
 34015  0645  00B5               	movwf	(___t32+1)^(0+128)
 34016  0646  0020               	movlb	0	; select bank0
 34017  0647  0828               	movf	?___lldiv,w
 34018  0648  0021               	movlb	1	; select bank1
 34019  0649  00B4               	movwf	___t32^(0+128)
 34020                           
 34021                           ;flow.c: 128: if(fl_t32<__t32)return 0;
 34022  064A  0837               	movf	(___t32+3)^(0+128),w
 34023  064B  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34024  064C  1D03               	skipz
 34025  064D  2E58               	goto	u13975
 34026  064E  0836               	movf	(___t32+2)^(0+128),w
 34027  064F  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34028  0650  1D03               	skipz
 34029  0651  2E58               	goto	u13975
 34030  0652  0835               	movf	(___t32+1)^(0+128),w
 34031  0653  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34032  0654  1D03               	skipz
 34033  0655  2E58               	goto	u13975
 34034  0656  0834               	movf	___t32^(0+128),w
 34035  0657  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34036  0658                     u13975:	
 34037  0658  1803               	skipnc
 34038  0659  2E5E               	goto	l15273
 34039  065A  0020               	movlb	0	; select bank0
 34040  065B  01B5               	clrf	?_app_flow_adc_2_flow
 34041  065C  01B6               	clrf	?_app_flow_adc_2_flow+1
 34042  065D  0008               	return
 34043  065E                     l15273:	
 34044                           
 34045                           ;flow.c: 130: __t32=Main_flowCalibrationTable.maxFlow;
 34046  065E  30EC               	movlw	236
 34047  065F  0086               	movwf	6
 34048  0660  3023               	movlw	35
 34049  0661  0087               	movwf	7
 34050  0662  3F40               	moviw [0]fsr1
 34051  0663  0020               	movlb	0	; select bank0
 34052  0664  00B7               	movwf	??_app_flow_adc_2_flow
 34053  0665  3F41               	moviw [1]fsr1
 34054  0666  00B8               	movwf	??_app_flow_adc_2_flow+1
 34055  0667  0837               	movf	??_app_flow_adc_2_flow,w
 34056  0668  0021               	movlb	1	; select bank1
 34057  0669  00B4               	movwf	___t32^(0+128)
 34058  066A  0020               	movlb	0	; select bank0
 34059  066B  0838               	movf	??_app_flow_adc_2_flow+1,w
 34060  066C  0021               	movlb	1	; select bank1
 34061  066D  00B5               	movwf	(___t32^(0+128)+1)
 34062  066E  01B6               	clrf	(___t32^(0+128)+2)
 34063  066F  01B7               	clrf	(___t32^(0+128)+3)
 34064                           
 34065                           ;flow.c: 135: if(fl_t32>=__t32)fl_t32=__t32;
 34066  0670  0837               	movf	(___t32+3)^(0+128),w
 34067  0671  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34068  0672  1D03               	skipz
 34069  0673  2E7E               	goto	u13985
 34070  0674  0836               	movf	(___t32+2)^(0+128),w
 34071  0675  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34072  0676  1D03               	skipz
 34073  0677  2E7E               	goto	u13985
 34074  0678  0835               	movf	(___t32+1)^(0+128),w
 34075  0679  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34076  067A  1D03               	skipz
 34077  067B  2E7E               	goto	u13985
 34078  067C  0834               	movf	___t32^(0+128),w
 34079  067D  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34080  067E                     u13985:	
 34081  067E  1C03               	skipc
 34082  067F  2E88               	goto	l1043
 34083  0680  0837               	movf	(___t32+3)^(0+128),w
 34084  0681  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 34085  0682  0836               	movf	(___t32+2)^(0+128),w
 34086  0683  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 34087  0684  0835               	movf	(___t32+1)^(0+128),w
 34088  0685  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 34089  0686  0834               	movf	___t32^(0+128),w
 34090  0687  00A4               	movwf	_fl_t32^(0+128)	;volatile
 34091  0688                     l1043:	
 34092                           
 34093                           ;flow.c: 137: if(fl_t32>=__t32){
 34094  0688  0837               	movf	(___t32+3)^(0+128),w
 34095  0689  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34096  068A  1D03               	skipz
 34097  068B  2E96               	goto	u13995
 34098  068C  0836               	movf	(___t32+2)^(0+128),w
 34099  068D  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34100  068E  1D03               	skipz
 34101  068F  2E96               	goto	u13995
 34102  0690  0835               	movf	(___t32+1)^(0+128),w
 34103  0691  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34104  0692  1D03               	skipz
 34105  0693  2E96               	goto	u13995
 34106  0694  0834               	movf	___t32^(0+128),w
 34107  0695  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34108  0696                     u13995:	
 34109  0696  1C03               	skipc
 34110  0697  2E9B               	goto	l15281
 34111                           
 34112                           ;flow.c: 138: flowError=1;
 34113  0698  01C6               	clrf	_flowError^(0+128)
 34114  0699  0AC6               	incf	_flowError^(0+128),f
 34115                           
 34116                           ;flow.c: 139: }else{
 34117  069A  2E9C               	goto	l15283
 34118  069B                     l15281:	
 34119                           
 34120                           ;flow.c: 140: flowError=0;
 34121  069B  01C6               	clrf	_flowError^(0+128)
 34122  069C                     l15283:	
 34123                           
 34124                           ;flow.c: 141: }
 34125                           ;flow.c: 142: return (uint16_t)fl_t32;
 34126  069C  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 34127  069D  0020               	movlb	0	; select bank0
 34128  069E  00B6               	movwf	?_app_flow_adc_2_flow+1
 34129  069F  0021               	movlb	1	; select bank1
 34130  06A0  0824               	movf	_fl_t32^(0+128),w	;volatile
 34131  06A1  0020               	movlb	0	; select bank0
 34132  06A2  00B5               	movwf	?_app_flow_adc_2_flow
 34133  06A3  0008               	return
 34134  06A4                     __end_of_app_flow_adc_2_flow:	
 34135                           
 34136                           	psect	text137
 34137  335B                     __ptext137:	
 34138 ;; *************** function ___lmul *****************
 34139 ;; Defined at:
 34140 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
 34141 ;; Parameters:    Size  Location     Type
 34142 ;;  multiplier      4    0[BANK0 ] unsigned long 
 34143 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 34144 ;; Auto vars:     Size  Location     Type
 34145 ;;  product         4    3[COMMON] unsigned long 
 34146 ;; Return value:  Size  Location     Type
 34147 ;;                  4    0[BANK0 ] unsigned long 
 34148 ;; Registers used:
 34149 ;;		wreg, status,2, status,0
 34150 ;; Tracked objects:
 34151 ;;		On entry : 0/0
 34152 ;;		On exit  : 0/0
 34153 ;;		Unchanged: 0/0
 34154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34155 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34156 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34158 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34159 ;;Total ram usage:       12 bytes
 34160 ;; Hardware stack levels used:    1
 34161 ;; Hardware stack levels required when called:    2
 34162 ;; This function calls:
 34163 ;;		Nothing
 34164 ;; This function is called by:
 34165 ;;		_ui_disp_flow
 34166 ;;		_app_flow_adc_2_flow
 34167 ;;		_m_math_pow
 34168 ;;		_app_flow_rt_volume_cal
 34169 ;;		_app_flow_rt_volume_cal_ex
 34170 ;;		_app_flow_rt_balance_money_cal
 34171 ;;		_getRegisterVal
 34172 ;; This function uses a non-reentrant model
 34173 ;;
 34174                           
 34175                           
 34176                           ;psect for function ___lmul
 34177  335B                     ___lmul:	
 34178                           
 34179                           ;incstack = 0
 34180                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 34181  335B  3000               	movlw	0
 34182  335C  00F6               	movwf	___lmul@product+3
 34183  335D  3000               	movlw	0
 34184  335E  00F5               	movwf	___lmul@product+2
 34185  335F  3000               	movlw	0
 34186  3360  00F4               	movwf	___lmul@product+1
 34187  3361  3000               	movlw	0
 34188  3362  00F3               	movwf	___lmul@product
 34189  3363                     l12531:	
 34190  3363  0020               	movlb	0	; select bank0
 34191  3364  1C20               	btfss	___lmul@multiplier,0
 34192  3365  2B6E               	goto	l12535
 34193  3366  0824               	movf	___lmul@multiplicand,w
 34194  3367  07F3               	addwf	___lmul@product,f
 34195  3368  0825               	movf	___lmul@multiplicand+1,w
 34196  3369  3DF4               	addwfc	___lmul@product+1,f
 34197  336A  0826               	movf	___lmul@multiplicand+2,w
 34198  336B  3DF5               	addwfc	___lmul@product+2,f
 34199  336C  0827               	movf	___lmul@multiplicand+3,w
 34200  336D  3DF6               	addwfc	___lmul@product+3,f
 34201  336E                     l12535:	
 34202  336E  3001               	movlw	1
 34203  336F                     u10795:	
 34204  336F  35A4               	lslf	___lmul@multiplicand,f
 34205  3370  0DA5               	rlf	___lmul@multiplicand+1,f
 34206  3371  0DA6               	rlf	___lmul@multiplicand+2,f
 34207  3372  0DA7               	rlf	___lmul@multiplicand+3,f
 34208  3373  0B89               	decfsz	9,f
 34209  3374  2B6F               	goto	u10795
 34210  3375  3001               	movlw	1
 34211  3376                     u10805:	
 34212  3376  36A3               	lsrf	___lmul@multiplier+3,f
 34213  3377  0CA2               	rrf	___lmul@multiplier+2,f
 34214  3378  0CA1               	rrf	___lmul@multiplier+1,f
 34215  3379  0CA0               	rrf	___lmul@multiplier,f
 34216  337A  0B89               	decfsz	9,f
 34217  337B  2B76               	goto	u10805
 34218  337C  0823               	movf	___lmul@multiplier+3,w
 34219  337D  0422               	iorwf	___lmul@multiplier+2,w
 34220  337E  0421               	iorwf	___lmul@multiplier+1,w
 34221  337F  0420               	iorwf	___lmul@multiplier,w
 34222  3380  1D03               	skipz
 34223  3381  2B63               	goto	l12531
 34224  3382  0876               	movf	___lmul@product+3,w
 34225  3383  00A3               	movwf	?___lmul+3
 34226  3384  0875               	movf	___lmul@product+2,w
 34227  3385  00A2               	movwf	?___lmul+2
 34228  3386  0874               	movf	___lmul@product+1,w
 34229  3387  00A1               	movwf	?___lmul+1
 34230  3388  0873               	movf	___lmul@product,w
 34231  3389  00A0               	movwf	?___lmul
 34232  338A  0008               	return
 34233  338B                     __end_of___lmul:	
 34234                           
 34235                           	psect	text138
 34236  2A45                     __ptext138:	
 34237 ;; *************** function ___lldiv *****************
 34238 ;; Defined at:
 34239 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 34240 ;; Parameters:    Size  Location     Type
 34241 ;;  divisor         4    8[BANK0 ] unsigned long 
 34242 ;;  dividend        4   12[BANK0 ] unsigned long 
 34243 ;; Auto vars:     Size  Location     Type
 34244 ;;  quotient        4   16[BANK0 ] unsigned long 
 34245 ;;  counter         1   20[BANK0 ] unsigned char 
 34246 ;; Return value:  Size  Location     Type
 34247 ;;                  4    8[BANK0 ] unsigned long 
 34248 ;; Registers used:
 34249 ;;		wreg, status,2, status,0
 34250 ;; Tracked objects:
 34251 ;;		On entry : 0/0
 34252 ;;		On exit  : 0/0
 34253 ;;		Unchanged: 0/0
 34254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34255 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34256 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 34257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34258 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0
 34259 ;;Total ram usage:       14 bytes
 34260 ;; Hardware stack levels used:    1
 34261 ;; Hardware stack levels required when called:    2
 34262 ;; This function calls:
 34263 ;;		Nothing
 34264 ;; This function is called by:
 34265 ;;		_ui_disp_flow
 34266 ;;		_app_flow_adc_2_flow
 34267 ;;		_app_flow_rt_volume_cal_ex
 34268 ;;		_app_flow_rt_balance_money_cal
 34269 ;;		_app_flow_get_adcAverageValue
 34270 ;;		_app_flow_rt_volume_cal
 34271 ;;		_ui_disp_transfer_money
 34272 ;;		_getRegisterVal
 34273 ;; This function uses a non-reentrant model
 34274 ;;
 34275                           
 34276                           
 34277                           ;psect for function ___lldiv
 34278  2A45                     ___lldiv:	
 34279                           
 34280                           ;incstack = 0
 34281                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 34282  2A45  3000               	movlw	0
 34283  2A46  0020               	movlb	0	; select bank0
 34284  2A47  00B3               	movwf	___lldiv@quotient+3
 34285  2A48  3000               	movlw	0
 34286  2A49  00B2               	movwf	___lldiv@quotient+2
 34287  2A4A  3000               	movlw	0
 34288  2A4B  00B1               	movwf	___lldiv@quotient+1
 34289  2A4C  3000               	movlw	0
 34290  2A4D  00B0               	movwf	___lldiv@quotient
 34291  2A4E  082B               	movf	___lldiv@divisor+3,w
 34292  2A4F  042A               	iorwf	___lldiv@divisor+2,w
 34293  2A50  0429               	iorwf	___lldiv@divisor+1,w
 34294  2A51  0428               	iorwf	___lldiv@divisor,w
 34295  2A52  1903               	skipnz
 34296  2A53  2A8F               	goto	l13215
 34297  2A54  01B4               	clrf	___lldiv@counter
 34298  2A55  0AB4               	incf	___lldiv@counter,f
 34299  2A56                     l13201:	
 34300  2A56  1BAB               	btfsc	___lldiv@divisor+3,7
 34301  2A57  2A64               	goto	l13203
 34302  2A58  3001               	movlw	1
 34303  2A59                     u11845:	
 34304  2A59  35A8               	lslf	___lldiv@divisor,f
 34305  2A5A  0DA9               	rlf	___lldiv@divisor+1,f
 34306  2A5B  0DAA               	rlf	___lldiv@divisor+2,f
 34307  2A5C  0DAB               	rlf	___lldiv@divisor+3,f
 34308  2A5D  0B89               	decfsz	9,f
 34309  2A5E  2A59               	goto	u11845
 34310  2A5F  3001               	movlw	1
 34311  2A60  00F7               	movwf	??___lldiv
 34312  2A61  0877               	movf	??___lldiv,w
 34313  2A62  07B4               	addwf	___lldiv@counter,f
 34314  2A63  2A56               	goto	l13201
 34315  2A64                     l13203:	
 34316  2A64  3001               	movlw	1
 34317  2A65                     u11865:	
 34318  2A65  35B0               	lslf	___lldiv@quotient,f
 34319  2A66  0DB1               	rlf	___lldiv@quotient+1,f
 34320  2A67  0DB2               	rlf	___lldiv@quotient+2,f
 34321  2A68  0DB3               	rlf	___lldiv@quotient+3,f
 34322  2A69  0B89               	decfsz	9,f
 34323  2A6A  2A65               	goto	u11865
 34324  2A6B  082B               	movf	___lldiv@divisor+3,w
 34325  2A6C  022F               	subwf	___lldiv@dividend+3,w
 34326  2A6D  1D03               	skipz
 34327  2A6E  2A79               	goto	u11875
 34328  2A6F  082A               	movf	___lldiv@divisor+2,w
 34329  2A70  022E               	subwf	___lldiv@dividend+2,w
 34330  2A71  1D03               	skipz
 34331  2A72  2A79               	goto	u11875
 34332  2A73  0829               	movf	___lldiv@divisor+1,w
 34333  2A74  022D               	subwf	___lldiv@dividend+1,w
 34334  2A75  1D03               	skipz
 34335  2A76  2A79               	goto	u11875
 34336  2A77  0828               	movf	___lldiv@divisor,w
 34337  2A78  022C               	subwf	___lldiv@dividend,w
 34338  2A79                     u11875:	
 34339  2A79  1C03               	skipc
 34340  2A7A  2A84               	goto	l13211
 34341  2A7B  0828               	movf	___lldiv@divisor,w
 34342  2A7C  02AC               	subwf	___lldiv@dividend,f
 34343  2A7D  0829               	movf	___lldiv@divisor+1,w
 34344  2A7E  3BAD               	subwfb	___lldiv@dividend+1,f
 34345  2A7F  082A               	movf	___lldiv@divisor+2,w
 34346  2A80  3BAE               	subwfb	___lldiv@dividend+2,f
 34347  2A81  082B               	movf	___lldiv@divisor+3,w
 34348  2A82  3BAF               	subwfb	___lldiv@dividend+3,f
 34349  2A83  1430               	bsf	___lldiv@quotient,0
 34350  2A84                     l13211:	
 34351  2A84  3001               	movlw	1
 34352  2A85                     u11885:	
 34353  2A85  36AB               	lsrf	___lldiv@divisor+3,f
 34354  2A86  0CAA               	rrf	___lldiv@divisor+2,f
 34355  2A87  0CA9               	rrf	___lldiv@divisor+1,f
 34356  2A88  0CA8               	rrf	___lldiv@divisor,f
 34357  2A89  0B89               	decfsz	9,f
 34358  2A8A  2A85               	goto	u11885
 34359  2A8B  3001               	movlw	1
 34360  2A8C  02B4               	subwf	___lldiv@counter,f
 34361  2A8D  1D03               	btfss	3,2
 34362  2A8E  2A64               	goto	l13203
 34363  2A8F                     l13215:	
 34364  2A8F  0833               	movf	___lldiv@quotient+3,w
 34365  2A90  00AB               	movwf	?___lldiv+3
 34366  2A91  0832               	movf	___lldiv@quotient+2,w
 34367  2A92  00AA               	movwf	?___lldiv+2
 34368  2A93  0831               	movf	___lldiv@quotient+1,w
 34369  2A94  00A9               	movwf	?___lldiv+1
 34370  2A95  0830               	movf	___lldiv@quotient,w
 34371  2A96  00A8               	movwf	?___lldiv
 34372  2A97  0008               	return
 34373  2A98                     __end_of___lldiv:	
 34374                           
 34375                           	psect	text139
 34376  332B                     __ptext139:	
 34377 ;; *************** function _adc_mcp3241_start_convert_16 *****************
 34378 ;; Defined at:
 34379 ;;		line 11 in file "src/driver/adc-mcp3421.c"
 34380 ;; Parameters:    Size  Location     Type
 34381 ;;  b               1    wreg     unsigned char 
 34382 ;;  g               1    2[BANK0 ] unsigned char 
 34383 ;; Auto vars:     Size  Location     Type
 34384 ;;  b               1    4[BANK0 ] unsigned char 
 34385 ;;  t8              1    5[BANK0 ] unsigned char 
 34386 ;; Return value:  Size  Location     Type
 34387 ;;                  1    wreg      void 
 34388 ;; Registers used:
 34389 ;;		wreg, status,2, status,0, pclath, cstack
 34390 ;; Tracked objects:
 34391 ;;		On entry : 0/0
 34392 ;;		On exit  : 0/0
 34393 ;;		Unchanged: 0/0
 34394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34395 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 34396 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 34398 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 34399 ;;Total ram usage:        4 bytes
 34400 ;; Hardware stack levels used:    1
 34401 ;; Hardware stack levels required when called:    6
 34402 ;; This function calls:
 34403 ;;		_iic_send_byte
 34404 ;;		_iic_start
 34405 ;;		_iic_stop
 34406 ;; This function is called by:
 34407 ;;		_flow_sampling_process
 34408 ;; This function uses a non-reentrant model
 34409 ;;
 34410                           
 34411                           
 34412                           ;psect for function _adc_mcp3241_start_convert_16
 34413  332B                     _adc_mcp3241_start_convert_16:	
 34414                           
 34415                           ;incstack = 0
 34416                           ; Regs used in _adc_mcp3241_start_convert_16: [wreg+status,2+status,0+pclath+cstack]
 34417                           ;adc_mcp3241_start_convert_16@b stored from wreg
 34418  332B  0020               	movlb	0	; select bank0
 34419  332C  00A4               	movwf	adc_mcp3241_start_convert_16@b
 34420                           
 34421                           ;adc-mcp3421.c: 13: uint8_t t8=b;
 34422  332D  0824               	movf	adc_mcp3241_start_convert_16@b,w
 34423  332E  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34424  332F  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34425  3330  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 34426                           
 34427                           ;adc-mcp3421.c: 14: do{do { TRISDbits.TRISD6 = 0; } while(0);}while(0);;
 34428  3331  0021               	movlb	1	; select bank1
 34429  3332  130F               	bcf	15,6	;volatile
 34430                           
 34431                           ;adc-mcp3421.c: 15: iic_start();
 34432  3333  31BC  24E5  31B3   	fcall	_iic_start
 34433                           
 34434                           ;adc-mcp3421.c: 17: iic_send_byte((0xd0));
 34435  3336  30D0               	movlw	208
 34436  3337  31B2  22FB  31B3   	fcall	_iic_send_byte
 34437                           
 34438                           ;adc-mcp3421.c: 18: if(t8>=2)t8=2;
 34439  333A  3002               	movlw	2
 34440  333B  0020               	movlb	0	; select bank0
 34441  333C  0225               	subwf	adc_mcp3241_start_convert_16@t8,w
 34442  333D  1C03               	skipc
 34443  333E  2B44               	goto	L13
 34444  333F  3002               	movlw	2
 34445  3340  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34446  3341  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34447  3342  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 34448                           
 34449                           ;adc-mcp3421.c: 19: t8<<=2;
 34450  3343  1003               	clrc
 34451  3344                     L13:	
 34452  3344  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 34453  3345  1003               	clrc
 34454  3346  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 34455                           
 34456                           ;adc-mcp3421.c: 20: t8 |= (g & 0x03);
 34457  3347  0822               	movf	adc_mcp3241_start_convert_16@g,w
 34458  3348  3903               	andlw	3
 34459  3349  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34460  334A  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34461  334B  04A5               	iorwf	adc_mcp3241_start_convert_16@t8,f
 34462                           
 34463                           ;adc-mcp3421.c: 21: iic_send_byte(0x80 | t8);
 34464  334C  0825               	movf	adc_mcp3241_start_convert_16@t8,w
 34465  334D  3880               	iorlw	128
 34466  334E  31B2  22FB  31B3   	fcall	_iic_send_byte
 34467                           
 34468                           ;adc-mcp3421.c: 22: iic_stop();
 34469  3351  31BC  24CF         	fcall	_iic_stop
 34470                           
 34471                           ;adc-mcp3421.c: 23: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 34472  3353  130B               	bcf	11,6	;volatile
 34473  3354  138B               	bcf	11,7	;volatile
 34474                           
 34475                           ;adc-mcp3421.c: 25: adcSamplingTimerOneTime=0;
 34476  3355  0022               	movlb	2	; select bank2
 34477  3356  01A6               	clrf	_adcSamplingTimerOneTime^(0+256)	;volatile
 34478  3357  01A7               	clrf	(_adcSamplingTimerOneTime+1)^(0+256)	;volatile
 34479                           
 34480                           ;adc-mcp3421.c: 26: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 34481  3358  178B               	bsf	11,7	;volatile
 34482  3359  170B               	bsf	11,6	;volatile
 34483  335A  0008               	return
 34484  335B                     __end_of_adc_mcp3241_start_convert_16:	
 34485                           
 34486                           	psect	text140
 34487  35BD                     __ptext140:	
 34488 ;; *************** function _adc_mcp3241_read_convert_16 *****************
 34489 ;; Defined at:
 34490 ;;		line 28 in file "src/driver/adc-mcp3421.c"
 34491 ;; Parameters:    Size  Location     Type
 34492 ;;  sta             1    wreg     PTR unsigned char 
 34493 ;;		 -> flow_sampling_process@i(1), 
 34494 ;; Auto vars:     Size  Location     Type
 34495 ;;  sta             1    6[BANK0 ] PTR unsigned char 
 34496 ;;		 -> flow_sampling_process@i(1), 
 34497 ;;  t16             2    7[BANK0 ] volatile unsigned int 
 34498 ;; Return value:  Size  Location     Type
 34499 ;;                  2    2[BANK0 ] unsigned int 
 34500 ;; Registers used:
 34501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 34502 ;; Tracked objects:
 34503 ;;		On entry : 0/0
 34504 ;;		On exit  : 0/0
 34505 ;;		Unchanged: 0/0
 34506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34507 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34508 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 34509 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34510 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 34511 ;;Total ram usage:        7 bytes
 34512 ;; Hardware stack levels used:    1
 34513 ;; Hardware stack levels required when called:    6
 34514 ;; This function calls:
 34515 ;;		_iic_received_byte_if_ack
 34516 ;;		_iic_send_byte
 34517 ;;		_iic_start
 34518 ;;		_iic_stop
 34519 ;; This function is called by:
 34520 ;;		_flow_sampling_process
 34521 ;; This function uses a non-reentrant model
 34522 ;;
 34523                           
 34524                           
 34525                           ;psect for function _adc_mcp3241_read_convert_16
 34526  35BD                     _adc_mcp3241_read_convert_16:	
 34527                           
 34528                           ;incstack = 0
 34529                           ; Regs used in _adc_mcp3241_read_convert_16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 34530                           ;adc_mcp3241_read_convert_16@sta stored from wreg
 34531  35BD  0020               	movlb	0	; select bank0
 34532  35BE  00A6               	movwf	adc_mcp3241_read_convert_16@sta
 34533                           
 34534                           ;adc-mcp3421.c: 30: volatile uint16_t t16=0;
 34535  35BF  01A7               	clrf	adc_mcp3241_read_convert_16@t16	;volatile
 34536  35C0  01A8               	clrf	adc_mcp3241_read_convert_16@t16+1	;volatile
 34537                           
 34538                           ;adc-mcp3421.c: 31: iic_start();
 34539  35C1  31BC  24E5  31B5   	fcall	_iic_start
 34540                           
 34541                           ;adc-mcp3421.c: 32: iic_send_byte((0xd0) | 0x01);
 34542  35C4  30D1               	movlw	209
 34543  35C5  31B2  22FB  31B5   	fcall	_iic_send_byte
 34544                           
 34545                           ;adc-mcp3421.c: 33: t16 |= iic_received_byte_if_ack(IIC_ACK);
 34546  35C8  3000               	movlw	0
 34547  35C9  31BB  23AC  31B5   	fcall	_iic_received_byte_if_ack
 34548  35CC  0020               	movlb	0	; select bank0
 34549  35CD  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34550  35CE  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 34551  35CF  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34552  35D0  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34553  35D1  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 34554  35D2  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34555                           
 34556                           ;adc-mcp3421.c: 34: t16 <<=8;
 34557  35D3  3008               	movlw	8
 34558  35D4                     u14095:	
 34559  35D4  35A7               	lslf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34560  35D5  0DA8               	rlf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34561  35D6  0B89               	decfsz	9,f
 34562  35D7  2DD4               	goto	u14095
 34563                           
 34564                           ;adc-mcp3421.c: 35: t16 |= iic_received_byte_if_ack(IIC_ACK);
 34565  35D8  3000               	movlw	0
 34566  35D9  31BB  23AC  31B5   	fcall	_iic_received_byte_if_ack
 34567  35DC  0020               	movlb	0	; select bank0
 34568  35DD  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34569  35DE  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 34570  35DF  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34571  35E0  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34572  35E1  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 34573  35E2  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34574                           
 34575                           ;adc-mcp3421.c: 36: *sta=iic_received_byte_if_ack(IIC_NACK);
 34576  35E3  3001               	movlw	1
 34577  35E4  31BB  23AC  31B5   	fcall	_iic_received_byte_if_ack
 34578  35E7  0020               	movlb	0	; select bank0
 34579  35E8  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34580  35E9  0826               	movf	adc_mcp3241_read_convert_16@sta,w
 34581  35EA  0086               	movwf	6
 34582  35EB  0187               	clrf	7
 34583  35EC  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34584  35ED  0081               	movwf	1
 34585                           
 34586                           ;adc-mcp3421.c: 37: iic_stop();
 34587  35EE  31BC  24CF         	fcall	_iic_stop
 34588                           
 34589                           ;adc-mcp3421.c: 39: return t16;
 34590  35F0  0020               	movlb	0	; select bank0
 34591  35F1  0828               	movf	adc_mcp3241_read_convert_16@t16+1,w	;volatile
 34592  35F2  00A3               	movwf	?_adc_mcp3241_read_convert_16+1
 34593  35F3  0827               	movf	adc_mcp3241_read_convert_16@t16,w	;volatile
 34594  35F4  00A2               	movwf	?_adc_mcp3241_read_convert_16
 34595  35F5  0008               	return
 34596  35F6                     __end_of_adc_mcp3241_read_convert_16:	
 34597                           
 34598                           	psect	text141
 34599  3CE5                     __ptext141:	
 34600 ;; *************** function _iic_start *****************
 34601 ;; Defined at:
 34602 ;;		line 29 in file "src/driver/i2c.c"
 34603 ;; Parameters:    Size  Location     Type
 34604 ;;		None
 34605 ;; Auto vars:     Size  Location     Type
 34606 ;;		None
 34607 ;; Return value:  Size  Location     Type
 34608 ;;                  1    wreg      void 
 34609 ;; Registers used:
 34610 ;;		wreg, status,2, status,0, pclath, cstack
 34611 ;; Tracked objects:
 34612 ;;		On entry : 0/0
 34613 ;;		On exit  : 0/0
 34614 ;;		Unchanged: 0/0
 34615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34617 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34619 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34620 ;;Total ram usage:        0 bytes
 34621 ;; Hardware stack levels used:    1
 34622 ;; Hardware stack levels required when called:    3
 34623 ;; This function calls:
 34624 ;;		_delay
 34625 ;; This function is called by:
 34626 ;;		_adc_mcp3241_start_convert_16
 34627 ;;		_adc_mcp3241_read_convert_16
 34628 ;;		_iic_read_byte
 34629 ;;		_iic_write_byte
 34630 ;;		_iic_write_n_byte
 34631 ;; This function uses a non-reentrant model
 34632 ;;
 34633                           
 34634                           
 34635                           ;psect for function _iic_start
 34636  3CE5                     _iic_start:	
 34637                           
 34638                           ;incstack = 0
 34639                           ; Regs used in _iic_start: [wreg+status,2+status,0+pclath+cstack]
 34640                           ;i2c.c: 31: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34641  3CE5  0021               	movlb	1	; select bank1
 34642  3CE6  128F               	bcf	15,5	;volatile
 34643                           
 34644                           ;i2c.c: 32: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34645  3CE7  0022               	movlb	2	; select bank2
 34646  3CE8  168F               	bsf	15,5	;volatile
 34647                           
 34648                           ;i2c.c: 33: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34649  3CE9  170F               	bsf	15,6	;volatile
 34650                           
 34651                           ;i2c.c: 34: delay(2);
 34652  3CEA  3002               	movlw	2
 34653  3CEB  00F3               	movwf	delay@t
 34654  3CEC  3000               	movlw	0
 34655  3CED  00F4               	movwf	delay@t+1
 34656  3CEE  31BB  2363  31BC   	fcall	_delay
 34657                           
 34658                           ;i2c.c: 35: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34659  3CF1  0022               	movlb	2	; select bank2
 34660  3CF2  128F               	bcf	15,5	;volatile
 34661                           
 34662                           ;i2c.c: 36: delay(2);
 34663  3CF3  3002               	movlw	2
 34664  3CF4  00F3               	movwf	delay@t
 34665  3CF5  3000               	movlw	0
 34666  3CF6  00F4               	movwf	delay@t+1
 34667  3CF7  31BB  2363         	fcall	_delay
 34668                           
 34669                           ;i2c.c: 37: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34670  3CF9  0022               	movlb	2	; select bank2
 34671  3CFA  130F               	bcf	15,6	;volatile
 34672  3CFB  0008               	return
 34673  3CFC                     __end_of_iic_start:	
 34674                           
 34675                           	psect	text142
 34676  32FB                     __ptext142:	
 34677 ;; *************** function _iic_send_byte *****************
 34678 ;; Defined at:
 34679 ;;		line 91 in file "src/driver/i2c.c"
 34680 ;; Parameters:    Size  Location     Type
 34681 ;;  x               1    wreg     unsigned char 
 34682 ;; Auto vars:     Size  Location     Type
 34683 ;;  x               1    0[BANK0 ] unsigned char 
 34684 ;;  i               1    1[BANK0 ] unsigned char 
 34685 ;; Return value:  Size  Location     Type
 34686 ;;                  1    wreg      unsigned char 
 34687 ;; Registers used:
 34688 ;;		wreg, status,2, status,0, pclath, cstack
 34689 ;; Tracked objects:
 34690 ;;		On entry : 0/0
 34691 ;;		On exit  : 0/0
 34692 ;;		Unchanged: 0/0
 34693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34695 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34696 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34697 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34698 ;;Total ram usage:        3 bytes
 34699 ;; Hardware stack levels used:    1
 34700 ;; Hardware stack levels required when called:    5
 34701 ;; This function calls:
 34702 ;;		_iic_waite_ack
 34703 ;; This function is called by:
 34704 ;;		_adc_mcp3241_start_convert_16
 34705 ;;		_adc_mcp3241_read_convert_16
 34706 ;;		_iic_read_byte
 34707 ;;		_iic_write_byte
 34708 ;;		_iic_write_n_byte
 34709 ;; This function uses a non-reentrant model
 34710 ;;
 34711                           
 34712                           
 34713                           ;psect for function _iic_send_byte
 34714  32FB                     _iic_send_byte:	
 34715                           
 34716                           ;incstack = 0
 34717                           ; Regs used in _iic_send_byte: [wreg+status,2+status,0+pclath+cstack]
 34718                           ;iic_send_byte@x stored from wreg
 34719  32FB  0020               	movlb	0	; select bank0
 34720  32FC  00A0               	movwf	iic_send_byte@x
 34721                           
 34722                           ;i2c.c: 93: uint8_t i;
 34723                           ;i2c.c: 95: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34724  32FD  0021               	movlb	1	; select bank1
 34725  32FE  128F               	bcf	15,5	;volatile
 34726                           
 34727                           ;i2c.c: 96: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34728  32FF  0022               	movlb	2	; select bank2
 34729  3300  130F               	bcf	15,6	;volatile
 34730                           
 34731                           ;i2c.c: 97: for(i=0;i<8;i++)
 34732  3301  0020               	movlb	0	; select bank0
 34733  3302  01A1               	clrf	iic_send_byte@i
 34734  3303  3008               	movlw	8
 34735  3304  0221               	subwf	iic_send_byte@i,w
 34736  3305  1803               	btfsc	3,0
 34737  3306  2B28               	goto	l14501
 34738  3307                     l1821:	
 34739                           
 34740                           ;i2c.c: 98: {
 34741                           ;i2c.c: 99: if(x&0x80){
 34742  3307  1FA0               	btfss	iic_send_byte@x,7
 34743  3308  2B0C               	goto	l1830
 34744                           
 34745                           ;i2c.c: 100: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34746  3309  0022               	movlb	2	; select bank2
 34747  330A  168F               	bsf	15,5	;volatile
 34748                           
 34749                           ;i2c.c: 101: }
 34750  330B  2B0E               	goto	l1834
 34751  330C                     l1830:	
 34752                           ;i2c.c: 102: else{
 34753                           ;i2c.c: 103: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34754                           
 34755  330C  0022               	movlb	2	; select bank2
 34756  330D  128F               	bcf	15,5	;volatile
 34757  330E                     l1834:	
 34758                           ;i2c.c: 104: }
 34759                           ;i2c.c: 105: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34760                           
 34761  330E  170F               	bsf	15,6	;volatile
 34762                           
 34763                           ;i2c.c: 106: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34764  330F  0000               	nop
 34765  3310  0000               	nop
 34766  3311  0000               	nop
 34767  3312  0000               	nop
 34768  3313  0000               	nop
 34769  3314  0000               	nop
 34770                           
 34771                           ;i2c.c: 107: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34772  3315  0022               	movlb	2	; select bank2
 34773  3316  130F               	bcf	15,6	;volatile
 34774                           
 34775                           ;i2c.c: 108: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34776  3317  0000               	nop
 34777  3318  0000               	nop
 34778  3319  0000               	nop
 34779  331A  0000               	nop
 34780  331B  0000               	nop
 34781  331C  0000               	nop
 34782                           
 34783                           ;i2c.c: 109: x<<=1;
 34784  331D  1003               	clrc
 34785  331E  0020               	movlb	0	; select bank0
 34786  331F  0DA0               	rlf	iic_send_byte@x,f
 34787  3320  3001               	movlw	1
 34788  3321  00F7               	movwf	??_iic_send_byte
 34789  3322  0877               	movf	??_iic_send_byte,w
 34790  3323  07A1               	addwf	iic_send_byte@i,f
 34791  3324  3008               	movlw	8
 34792  3325  0221               	subwf	iic_send_byte@i,w
 34793  3326  1C03               	skipc
 34794  3327  2B07               	goto	l1821
 34795  3328                     l14501:	
 34796                           
 34797                           ;i2c.c: 110: }
 34798                           ;i2c.c: 111: return iic_waite_ack();
 34799                           ;	Return value of _iic_send_byte is never used
 34800  3328  31B0  2085         	fcall	_iic_waite_ack
 34801  332A  0008               	return
 34802  332B                     __end_of_iic_send_byte:	
 34803                           
 34804                           	psect	text143
 34805  3085                     __ptext143:	
 34806 ;; *************** function _iic_waite_ack *****************
 34807 ;; Defined at:
 34808 ;;		line 70 in file "src/driver/i2c.c"
 34809 ;; Parameters:    Size  Location     Type
 34810 ;;		None
 34811 ;; Auto vars:     Size  Location     Type
 34812 ;;  timeout         1    6[COMMON] unsigned char 
 34813 ;; Return value:  Size  Location     Type
 34814 ;;                  1    wreg      unsigned char 
 34815 ;; Registers used:
 34816 ;;		wreg, status,2, status,0, pclath, cstack
 34817 ;; Tracked objects:
 34818 ;;		On entry : 0/0
 34819 ;;		On exit  : 0/0
 34820 ;;		Unchanged: 0/0
 34821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34826 ;;Total ram usage:        2 bytes
 34827 ;; Hardware stack levels used:    1
 34828 ;; Hardware stack levels required when called:    4
 34829 ;; This function calls:
 34830 ;;		_iic_stop
 34831 ;; This function is called by:
 34832 ;;		_iic_send_byte
 34833 ;; This function uses a non-reentrant model
 34834 ;;
 34835                           
 34836                           
 34837                           ;psect for function _iic_waite_ack
 34838  3085                     _iic_waite_ack:	
 34839                           
 34840                           ;i2c.c: 72: uint8_t timeout=200;
 34841                           
 34842                           ;incstack = 0
 34843                           ; Regs used in _iic_waite_ack: [wreg+status,2+status,0+pclath+cstack]
 34844  3085  30C8               	movlw	200
 34845  3086  00F5               	movwf	??_iic_waite_ack
 34846  3087  0875               	movf	??_iic_waite_ack,w
 34847  3088  00F6               	movwf	iic_waite_ack@timeout
 34848                           
 34849                           ;i2c.c: 73: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 34850  3089  0021               	movlb	1	; select bank1
 34851  308A  168F               	bsf	15,5	;volatile
 34852                           
 34853                           ;i2c.c: 74: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34854  308B  0022               	movlb	2	; select bank2
 34855  308C  130F               	bcf	15,6	;volatile
 34856                           
 34857                           ;i2c.c: 75: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34858  308D  0000               	nop
 34859  308E  0000               	nop
 34860  308F  0000               	nop
 34861  3090  0000               	nop
 34862  3091  0000               	nop
 34863  3092  0000               	nop
 34864                           
 34865                           ;i2c.c: 76: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34866  3093  0022               	movlb	2	; select bank2
 34867  3094  170F               	bsf	15,6	;volatile
 34868                           
 34869                           ;i2c.c: 77: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34870  3095  0000               	nop
 34871  3096  0000               	nop
 34872  3097  0000               	nop
 34873  3098  0000               	nop
 34874  3099  0000               	nop
 34875  309A  0000               	nop
 34876  309B                     l13917:	
 34877                           ;i2c.c: 78: while(timeout--)
 34878                           
 34879  309B  3001               	movlw	1
 34880  309C  02F6               	subwf	iic_waite_ack@timeout,f
 34881  309D  0A76               	incf	iic_waite_ack@timeout,w
 34882  309E  1903               	btfsc	3,2
 34883  309F  28A3               	goto	l13919
 34884                           
 34885                           ;i2c.c: 79: {
 34886                           ;i2c.c: 80: if(!PORTDbits.RD5)break;
 34887  30A0  0020               	movlb	0	; select bank0
 34888  30A1  1A8F               	btfsc	15,5	;volatile
 34889  30A2  289B               	goto	l13917
 34890  30A3                     l13919:	
 34891                           
 34892                           ;i2c.c: 81: }
 34893                           ;i2c.c: 82: if(!timeout)
 34894  30A3  0876               	movf	iic_waite_ack@timeout,w
 34895  30A4  1D03               	btfss	3,2
 34896  30A5  28AA               	goto	l1808
 34897                           
 34898                           ;i2c.c: 83: {
 34899                           ;i2c.c: 84: iic_stop();
 34900  30A6  31BC  24CF         	fcall	_iic_stop
 34901                           
 34902                           ;i2c.c: 85: return 0;
 34903  30A8  3000               	movlw	0
 34904  30A9  0008               	return
 34905  30AA                     l1808:	
 34906                           ;i2c.c: 86: }
 34907                           ;i2c.c: 87: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34908                           
 34909  30AA  0022               	movlb	2	; select bank2
 34910  30AB  130F               	bcf	15,6	;volatile
 34911                           
 34912                           ;i2c.c: 88: return 1;
 34913  30AC  3001               	movlw	1
 34914  30AD  0008               	return
 34915  30AE                     __end_of_iic_waite_ack:	
 34916                           
 34917                           	psect	text144
 34918  3CCF                     __ptext144:	
 34919 ;; *************** function _iic_stop *****************
 34920 ;; Defined at:
 34921 ;;		line 41 in file "src/driver/i2c.c"
 34922 ;; Parameters:    Size  Location     Type
 34923 ;;		None
 34924 ;; Auto vars:     Size  Location     Type
 34925 ;;		None
 34926 ;; Return value:  Size  Location     Type
 34927 ;;                  1    wreg      void 
 34928 ;; Registers used:
 34929 ;;		wreg, status,2, status,0, pclath, cstack
 34930 ;; Tracked objects:
 34931 ;;		On entry : 0/0
 34932 ;;		On exit  : 0/0
 34933 ;;		Unchanged: 0/0
 34934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34939 ;;Total ram usage:        0 bytes
 34940 ;; Hardware stack levels used:    1
 34941 ;; Hardware stack levels required when called:    3
 34942 ;; This function calls:
 34943 ;;		_delay
 34944 ;; This function is called by:
 34945 ;;		_iic_waite_ack
 34946 ;;		_adc_mcp3241_start_convert_16
 34947 ;;		_adc_mcp3241_read_convert_16
 34948 ;;		_iic_read_byte
 34949 ;;		_iic_write_byte
 34950 ;;		_iic_write_n_byte
 34951 ;; This function uses a non-reentrant model
 34952 ;;
 34953                           
 34954                           
 34955                           ;psect for function _iic_stop
 34956  3CCF                     _iic_stop:	
 34957                           
 34958                           ;incstack = 0
 34959                           ; Regs used in _iic_stop: [wreg+status,2+status,0+pclath+cstack]
 34960                           ;i2c.c: 43: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34961  3CCF  0021               	movlb	1	; select bank1
 34962  3CD0  128F               	bcf	15,5	;volatile
 34963                           
 34964                           ;i2c.c: 44: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34965  3CD1  0022               	movlb	2	; select bank2
 34966  3CD2  128F               	bcf	15,5	;volatile
 34967                           
 34968                           ;i2c.c: 45: delay(2);
 34969  3CD3  3002               	movlw	2
 34970  3CD4  00F3               	movwf	delay@t
 34971  3CD5  3000               	movlw	0
 34972  3CD6  00F4               	movwf	delay@t+1
 34973  3CD7  31BB  2363  31BC   	fcall	_delay
 34974                           
 34975                           ;i2c.c: 46: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34976  3CDA  0022               	movlb	2	; select bank2
 34977  3CDB  170F               	bsf	15,6	;volatile
 34978                           
 34979                           ;i2c.c: 47: delay(2);
 34980  3CDC  3002               	movlw	2
 34981  3CDD  00F3               	movwf	delay@t
 34982  3CDE  3000               	movlw	0
 34983  3CDF  00F4               	movwf	delay@t+1
 34984  3CE0  31BB  2363         	fcall	_delay
 34985                           
 34986                           ;i2c.c: 48: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34987  3CE2  0022               	movlb	2	; select bank2
 34988  3CE3  168F               	bsf	15,5	;volatile
 34989  3CE4  0008               	return
 34990  3CE5                     __end_of_iic_stop:	
 34991                           
 34992                           	psect	text145
 34993  3B63                     __ptext145:	
 34994 ;; *************** function _delay *****************
 34995 ;; Defined at:
 34996 ;;		line 5 in file "src/depend/delay.c"
 34997 ;; Parameters:    Size  Location     Type
 34998 ;;  t               2    3[COMMON] unsigned int 
 34999 ;; Auto vars:     Size  Location     Type
 35000 ;;		None
 35001 ;; Return value:  Size  Location     Type
 35002 ;;                  1    wreg      void 
 35003 ;; Registers used:
 35004 ;;		wreg, status,2, status,0
 35005 ;; Tracked objects:
 35006 ;;		On entry : 0/0
 35007 ;;		On exit  : 0/0
 35008 ;;		Unchanged: 0/0
 35009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35010 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35013 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35014 ;;Total ram usage:        2 bytes
 35015 ;; Hardware stack levels used:    1
 35016 ;; Hardware stack levels required when called:    2
 35017 ;; This function calls:
 35018 ;;		Nothing
 35019 ;; This function is called by:
 35020 ;;		_rfid_comm_process
 35021 ;;		_key_scan_call
 35022 ;;		_iic_start
 35023 ;;		_iic_stop
 35024 ;;		_mfrc522_hal_init
 35025 ;;		_main
 35026 ;;		_led_all_test
 35027 ;;		_m_system_start_self_test
 35028 ;; This function uses a non-reentrant model
 35029 ;;
 35030                           
 35031                           
 35032                           ;psect for function _delay
 35033  3B63                     _delay:	
 35034  3B63                     l13069:	
 35035                           ;delay.c: 7: while(t--)
 35036                           
 35037                           ;incstack = 0
 35038                           ; Regs used in _delay: [wreg+status,2+status,0]
 35039                           
 35040  3B63  3001               	movlw	1
 35041  3B64  02F3               	subwf	delay@t,f
 35042  3B65  3000               	movlw	0
 35043  3B66  3BF4               	subwfb	delay@t+1,f
 35044  3B67  0A73               	incf	delay@t,w
 35045  3B68  1903               	btfsc	3,2
 35046  3B69  0A74               	incf	delay@t+1,w
 35047  3B6A  1903               	btfsc	3,2
 35048  3B6B  0008               	return
 35049                           
 35050                           ;delay.c: 8: {
 35051                           ;delay.c: 9: __nop();
 35052  3B6C  0000               	nop
 35053                           
 35054                           ;delay.c: 10: __nop();
 35055  3B6D  0000               	nop
 35056                           
 35057                           ;delay.c: 11: __nop();
 35058  3B6E  0000               	nop
 35059                           
 35060                           ;delay.c: 12: __nop();
 35061  3B6F  0000               	nop
 35062  3B70  2B63               	goto	l13069
 35063  3B71                     __end_of_delay:	
 35064                           
 35065                           	psect	text146
 35066  3BAC                     __ptext146:	
 35067 ;; *************** function _iic_received_byte_if_ack *****************
 35068 ;; Defined at:
 35069 ;;		line 133 in file "src/driver/i2c.c"
 35070 ;; Parameters:    Size  Location     Type
 35071 ;;  ack             1    wreg     unsigned char 
 35072 ;; Auto vars:     Size  Location     Type
 35073 ;;  ack             1    0[BANK0 ] unsigned char 
 35074 ;;  ret             1    1[BANK0 ] unsigned char 
 35075 ;; Return value:  Size  Location     Type
 35076 ;;                  1    wreg      unsigned char 
 35077 ;; Registers used:
 35078 ;;		wreg, status,2, status,0, pclath, cstack
 35079 ;; Tracked objects:
 35080 ;;		On entry : 0/0
 35081 ;;		On exit  : 0/0
 35082 ;;		Unchanged: 0/0
 35083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35085 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35086 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35087 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35088 ;;Total ram usage:        3 bytes
 35089 ;; Hardware stack levels used:    1
 35090 ;; Hardware stack levels required when called:    3
 35091 ;; This function calls:
 35092 ;;		_iic_received_byte
 35093 ;;		_iic_send_ack
 35094 ;; This function is called by:
 35095 ;;		_adc_mcp3241_read_convert_16
 35096 ;;		_iic_read_byte
 35097 ;; This function uses a non-reentrant model
 35098 ;;
 35099                           
 35100                           
 35101                           ;psect for function _iic_received_byte_if_ack
 35102  3BAC                     _iic_received_byte_if_ack:	
 35103                           
 35104                           ;incstack = 0
 35105                           ; Regs used in _iic_received_byte_if_ack: [wreg+status,2+status,0+pclath+cstack]
 35106                           ;iic_received_byte_if_ack@ack stored from wreg
 35107  3BAC  0020               	movlb	0	; select bank0
 35108  3BAD  00A0               	movwf	iic_received_byte_if_ack@ack
 35109                           
 35110                           ;i2c.c: 135: uint8_t ret=0;
 35111  3BAE  01A1               	clrf	iic_received_byte_if_ack@ret
 35112                           
 35113                           ;i2c.c: 136: ret=iic_received_byte();
 35114  3BAF  31B0  205C  31BB   	fcall	_iic_received_byte
 35115  3BB2  00F6               	movwf	??_iic_received_byte_if_ack
 35116  3BB3  0876               	movf	??_iic_received_byte_if_ack,w
 35117  3BB4  0020               	movlb	0	; select bank0
 35118  3BB5  00A1               	movwf	iic_received_byte_if_ack@ret
 35119                           
 35120                           ;i2c.c: 137: iic_send_ack(ack);
 35121  3BB6  0820               	movf	iic_received_byte_if_ack@ack,w
 35122  3BB7  31BE  260F         	fcall	_iic_send_ack
 35123                           
 35124                           ;i2c.c: 138: return ret;
 35125  3BB9  0020               	movlb	0	; select bank0
 35126  3BBA  0821               	movf	iic_received_byte_if_ack@ret,w
 35127  3BBB  0008               	return
 35128  3BBC                     __end_of_iic_received_byte_if_ack:	
 35129                           
 35130                           	psect	text147
 35131  3E0F                     __ptext147:	
 35132 ;; *************** function _iic_send_ack *****************
 35133 ;; Defined at:
 35134 ;;		line 52 in file "src/driver/i2c.c"
 35135 ;; Parameters:    Size  Location     Type
 35136 ;;  ack             1    wreg     char 
 35137 ;; Auto vars:     Size  Location     Type
 35138 ;;  ack             1    3[COMMON] char 
 35139 ;; Return value:  Size  Location     Type
 35140 ;;                  1    wreg      void 
 35141 ;; Registers used:
 35142 ;;		wreg, status,2, status,0
 35143 ;; Tracked objects:
 35144 ;;		On entry : 0/0
 35145 ;;		On exit  : 0/0
 35146 ;;		Unchanged: 0/0
 35147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35149 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35151 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35152 ;;Total ram usage:        1 bytes
 35153 ;; Hardware stack levels used:    1
 35154 ;; Hardware stack levels required when called:    2
 35155 ;; This function calls:
 35156 ;;		Nothing
 35157 ;; This function is called by:
 35158 ;;		_iic_received_byte_if_ack
 35159 ;; This function uses a non-reentrant model
 35160 ;;
 35161                           
 35162                           
 35163                           ;psect for function _iic_send_ack
 35164  3E0F                     _iic_send_ack:	
 35165                           
 35166                           ;incstack = 0
 35167                           ; Regs used in _iic_send_ack: [wreg+status,2+status,0]
 35168                           ;iic_send_ack@ack stored from wreg
 35169  3E0F  00F3               	movwf	iic_send_ack@ack
 35170                           
 35171                           ;i2c.c: 54: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 35172  3E10  0021               	movlb	1	; select bank1
 35173  3E11  128F               	bcf	15,5	;volatile
 35174                           
 35175                           ;i2c.c: 55: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35176  3E12  0022               	movlb	2	; select bank2
 35177  3E13  130F               	bcf	15,6	;volatile
 35178                           
 35179                           ;i2c.c: 56: if(ack)
 35180  3E14  0873               	movf	iic_send_ack@ack,w
 35181  3E15  1903               	btfsc	3,2
 35182  3E16  2E19               	goto	l1767
 35183                           
 35184                           ;i2c.c: 57: {
 35185                           ;i2c.c: 58: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 35186  3E17  168F               	bsf	15,5	;volatile
 35187                           
 35188                           ;i2c.c: 59: }
 35189  3E18  2E1A               	goto	l1770
 35190  3E19                     l1767:	
 35191                           ;i2c.c: 60: else
 35192                           ;i2c.c: 61: {
 35193                           ;i2c.c: 62: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 35194                           
 35195  3E19  128F               	bcf	15,5	;volatile
 35196  3E1A                     l1770:	
 35197                           ;i2c.c: 63: }
 35198                           ;i2c.c: 64: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35199                           
 35200  3E1A  0000               	nop
 35201  3E1B  0000               	nop
 35202  3E1C  0000               	nop
 35203  3E1D  0000               	nop
 35204  3E1E  0000               	nop
 35205  3E1F  0000               	nop
 35206                           
 35207                           ;i2c.c: 65: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 35208  3E20  0022               	movlb	2	; select bank2
 35209  3E21  170F               	bsf	15,6	;volatile
 35210                           
 35211                           ;i2c.c: 66: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35212  3E22  0000               	nop
 35213  3E23  0000               	nop
 35214  3E24  0000               	nop
 35215  3E25  0000               	nop
 35216  3E26  0000               	nop
 35217  3E27  0000               	nop
 35218                           
 35219                           ;i2c.c: 67: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35220  3E28  0022               	movlb	2	; select bank2
 35221  3E29  130F               	bcf	15,6	;volatile
 35222  3E2A  0008               	return
 35223  3E2B                     __end_of_iic_send_ack:	
 35224                           
 35225                           	psect	text148
 35226  305C                     __ptext148:	
 35227 ;; *************** function _iic_received_byte *****************
 35228 ;; Defined at:
 35229 ;;		line 114 in file "src/driver/i2c.c"
 35230 ;; Parameters:    Size  Location     Type
 35231 ;;		None
 35232 ;; Auto vars:     Size  Location     Type
 35233 ;;  i               1    5[COMMON] unsigned char 
 35234 ;;  ret             1    4[COMMON] unsigned char 
 35235 ;; Return value:  Size  Location     Type
 35236 ;;                  1    wreg      unsigned char 
 35237 ;; Registers used:
 35238 ;;		wreg, status,2, status,0
 35239 ;; Tracked objects:
 35240 ;;		On entry : 0/0
 35241 ;;		On exit  : 0/0
 35242 ;;		Unchanged: 0/0
 35243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35247 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35248 ;;Total ram usage:        3 bytes
 35249 ;; Hardware stack levels used:    1
 35250 ;; Hardware stack levels required when called:    2
 35251 ;; This function calls:
 35252 ;;		Nothing
 35253 ;; This function is called by:
 35254 ;;		_iic_received_byte_if_ack
 35255 ;; This function uses a non-reentrant model
 35256 ;;
 35257                           
 35258                           
 35259                           ;psect for function _iic_received_byte
 35260  305C                     _iic_received_byte:	
 35261                           
 35262                           ;i2c.c: 116: uint8_t i;
 35263                           ;i2c.c: 117: uint8_t ret=0;
 35264                           
 35265                           ;incstack = 0
 35266                           ; Regs used in _iic_received_byte: [wreg+status,2+status,0]
 35267  305C  01F4               	clrf	iic_received_byte@ret
 35268                           
 35269                           ;i2c.c: 118: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 35270  305D  0021               	movlb	1	; select bank1
 35271  305E  168F               	bsf	15,5	;volatile
 35272                           
 35273                           ;i2c.c: 119: for(i=0;i<8;i++)
 35274  305F  01F5               	clrf	iic_received_byte@i
 35275  3060  3008               	movlw	8
 35276  3061  0275               	subwf	iic_received_byte@i,w
 35277  3062  1803               	btfsc	3,0
 35278  3063  2881               	goto	l1868
 35279                           
 35280                           ;i2c.c: 120: {
 35281                           ;i2c.c: 121: ret<<=1;
 35282  3064  1003               	clrc
 35283  3065                     L14:	
 35284  3065  0DF4               	rlf	iic_received_byte@ret,f
 35285                           
 35286                           ;i2c.c: 122: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35287  3066  0022               	movlb	2	; select bank2
 35288  3067  130F               	bcf	15,6	;volatile
 35289                           
 35290                           ;i2c.c: 123: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35291  3068  0000               	nop
 35292  3069  0000               	nop
 35293  306A  0000               	nop
 35294  306B  0000               	nop
 35295  306C  0000               	nop
 35296  306D  0000               	nop
 35297                           
 35298                           ;i2c.c: 124: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 35299  306E  0022               	movlb	2	; select bank2
 35300  306F  170F               	bsf	15,6	;volatile
 35301                           
 35302                           ;i2c.c: 125: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35303  3070  0000               	nop
 35304  3071  0000               	nop
 35305  3072  0000               	nop
 35306  3073  0000               	nop
 35307  3074  0000               	nop
 35308  3075  0000               	nop
 35309                           
 35310                           ;i2c.c: 126: if(PORTDbits.RD5){
 35311  3076  0020               	movlb	0	; select bank0
 35312  3077  1A8F               	btfsc	15,5	;volatile
 35313                           
 35314                           ;i2c.c: 127: ret|=1;
 35315  3078  1474               	bsf	iic_received_byte@ret,0
 35316  3079  3001               	movlw	1
 35317  307A  00F3               	movwf	??_iic_received_byte
 35318  307B  0873               	movf	??_iic_received_byte,w
 35319  307C  07F5               	addwf	iic_received_byte@i,f
 35320  307D  3008               	movlw	8
 35321  307E  0275               	subwf	iic_received_byte@i,w
 35322  307F  1C03               	skipc
 35323  3080  2865               	goto	L14
 35324  3081                     l1868:	
 35325                           ;i2c.c: 128: }
 35326                           ;i2c.c: 129: }
 35327                           ;i2c.c: 130: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35328                           
 35329  3081  0022               	movlb	2	; select bank2
 35330  3082  130F               	bcf	15,6	;volatile
 35331                           
 35332                           ;i2c.c: 131: return ret;
 35333  3083  0874               	movf	iic_received_byte@ret,w
 35334  3084  0008               	return
 35335  3085                     __end_of_iic_received_byte:	
 35336                           
 35337                           	psect	text149
 35338  3B7F                     __ptext149:	
 35339 ;; *************** function _event_power_monitor *****************
 35340 ;; Defined at:
 35341 ;;		line 34 in file "main.c"
 35342 ;; Parameters:    Size  Location     Type
 35343 ;;		None
 35344 ;; Auto vars:     Size  Location     Type
 35345 ;;		None
 35346 ;; Return value:  Size  Location     Type
 35347 ;;                  1    wreg      void 
 35348 ;; Registers used:
 35349 ;;		status,2
 35350 ;; Tracked objects:
 35351 ;;		On entry : 0/0
 35352 ;;		On exit  : 0/0
 35353 ;;		Unchanged: 0/0
 35354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35355 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35357 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35358 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35359 ;;Total ram usage:        0 bytes
 35360 ;; Hardware stack levels used:    1
 35361 ;; Hardware stack levels required when called:    2
 35362 ;; This function calls:
 35363 ;;		Nothing
 35364 ;; This function is called by:
 35365 ;;		_main
 35366 ;; This function uses a non-reentrant model
 35367 ;;
 35368                           
 35369                           
 35370                           ;psect for function _event_power_monitor
 35371  3B7F                     _event_power_monitor:	
 35372                           
 35373                           ;main.c: 35: if(PORTAbits.RA5){
 35374                           
 35375                           ;incstack = 0
 35376                           ; Regs used in _event_power_monitor: [status,2]
 35377  3B7F  0020               	movlb	0	; select bank0
 35378  3B80  1E8C               	btfss	12,5	;volatile
 35379  3B81  2B87               	goto	l16361
 35380                           
 35381                           ;main.c: 36: deviceStatus.bits.acPowerDown=1;
 35382  3B82  0021               	movlb	1	; select bank1
 35383  3B83  15C0               	bsf	_deviceStatus^(0+128),3
 35384                           
 35385                           ;main.c: 43: do { LATAbits.LATA1 = 0; } while(0);;
 35386  3B84  0022               	movlb	2	; select bank2
 35387  3B85  108C               	bcf	12,1	;volatile
 35388                           
 35389                           ;main.c: 44: }else{
 35390  3B86  0008               	return
 35391  3B87                     l16361:	
 35392                           
 35393                           ;main.c: 45: firstPowerDown=0;
 35394  3B87  0022               	movlb	2	; select bank2
 35395  3B88  01B4               	clrf	_firstPowerDown^(0+256)
 35396                           
 35397                           ;main.c: 46: deviceStatus.bits.acPowerDown=0;
 35398  3B89  0021               	movlb	1	; select bank1
 35399  3B8A  11C0               	bcf	_deviceStatus^(0+128),3
 35400                           
 35401                           ;main.c: 47: do { LATAbits.LATA1 = 1; } while(0);;
 35402  3B8B  0022               	movlb	2	; select bank2
 35403  3B8C  148C               	bsf	12,1	;volatile
 35404  3B8D  0008               	return
 35405  3B8E                     __end_of_event_power_monitor:	
 35406                           
 35407                           	psect	text150
 35408  3AE0                     __ptext150:	
 35409 ;; *************** function _event_door_monitor *****************
 35410 ;; Defined at:
 35411 ;;		line 50 in file "main.c"
 35412 ;; Parameters:    Size  Location     Type
 35413 ;;		None
 35414 ;; Auto vars:     Size  Location     Type
 35415 ;;		None
 35416 ;; Return value:  Size  Location     Type
 35417 ;;                  1    wreg      void 
 35418 ;; Registers used:
 35419 ;;		None
 35420 ;; Tracked objects:
 35421 ;;		On entry : 0/0
 35422 ;;		On exit  : 0/0
 35423 ;;		Unchanged: 0/0
 35424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35429 ;;Total ram usage:        0 bytes
 35430 ;; Hardware stack levels used:    1
 35431 ;; Hardware stack levels required when called:    2
 35432 ;; This function calls:
 35433 ;;		Nothing
 35434 ;; This function is called by:
 35435 ;;		_main
 35436 ;; This function uses a non-reentrant model
 35437 ;;
 35438                           
 35439                           
 35440                           ;psect for function _event_door_monitor
 35441  3AE0                     _event_door_monitor:	
 35442                           
 35443                           ;main.c: 51: if(PORTBbits.RB4){
 35444                           
 35445                           ;incstack = 0
 35446                           ; Regs used in _event_door_monitor: []
 35447  3AE0  0020               	movlb	0	; select bank0
 35448  3AE1  1E0D               	btfss	13,4	;volatile
 35449  3AE2  0008               	return
 35450                           
 35451                           ;main.c: 52: deviceStatus.bits.doorOpen=1;
 35452  3AE3  0021               	movlb	1	; select bank1
 35453  3AE4  1540               	bsf	_deviceStatus^(0+128),2
 35454  3AE5  0008               	return
 35455  3AE6                     __end_of_event_door_monitor:	
 35456                           
 35457                           	psect	text151
 35458  2955                     __ptext151:	
 35459 ;; *************** function _data_api_system_data_init *****************
 35460 ;; Defined at:
 35461 ;;		line 128 in file "src/app/appdata.c"
 35462 ;; Parameters:    Size  Location     Type
 35463 ;;		None
 35464 ;; Auto vars:     Size  Location     Type
 35465 ;;  sta             1   20[BANK0 ] unsigned char 
 35466 ;; Return value:  Size  Location     Type
 35467 ;;                  1    wreg      unsigned char 
 35468 ;; Registers used:
 35469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35470 ;; Tracked objects:
 35471 ;;		On entry : 0/0
 35472 ;;		On exit  : 0/0
 35473 ;;		Unchanged: 0/0
 35474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35476 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 35477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 35478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35479 ;;Total ram usage:        2 bytes
 35480 ;; Hardware stack levels used:    1
 35481 ;; Hardware stack levels required when called:    4
 35482 ;; This function calls:
 35483 ;;		_crc_append
 35484 ;;		_crc_verify
 35485 ;;		_data_api_read_eeprom
 35486 ;;		_data_api_system_data_get
 35487 ;;		_data_api_write_eeprom
 35488 ;;		_m_mem_cpy_len
 35489 ;; This function is called by:
 35490 ;;		_main
 35491 ;; This function uses a non-reentrant model
 35492 ;;
 35493                           
 35494                           
 35495                           ;psect for function _data_api_system_data_init
 35496  2955                     _data_api_system_data_init:	
 35497                           
 35498                           ;appdata.c: 129: uint8_t sta = 0;
 35499                           
 35500                           ;incstack = 0
 35501                           ; Regs used in _data_api_system_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 35502  2955  0020               	movlb	0	; select bank0
 35503  2956  01B4               	clrf	data_api_system_data_init@sta
 35504                           
 35505                           ;appdata.c: 130: data_api_read_eeprom(comBuffer,0x00,sizeof (st_SystemData));
 35506  2957  3000               	movlw	0
 35507  2958  00F4               	movwf	data_api_read_eeprom@buf
 35508  2959  3022               	movlw	34
 35509  295A  00F5               	movwf	data_api_read_eeprom@buf+1
 35510  295B  01F6               	clrf	data_api_read_eeprom@addr
 35511  295C  3048               	movlw	72
 35512  295D  00B3               	movwf	??_data_api_system_data_init
 35513  295E  0833               	movf	??_data_api_system_data_init,w
 35514  295F  00F7               	movwf	data_api_read_eeprom@len
 35515  2960  31BE  26A0  31A9   	fcall	_data_api_read_eeprom
 35516                           
 35517                           ;appdata.c: 131: sta=crc_verify(comBuffer,sizeof (st_SystemData));
 35518  2963  3000               	movlw	0
 35519  2964  0020               	movlb	0	; select bank0
 35520  2965  00A8               	movwf	crc_verify@message
 35521  2966  3022               	movlw	34
 35522  2967  00A9               	movwf	crc_verify@message+1
 35523  2968  3048               	movlw	72
 35524  2969  00AA               	movwf	crc_verify@n
 35525  296A  3000               	movlw	0
 35526  296B  00AB               	movwf	crc_verify@n+1
 35527  296C  31A8  2000  31A9   	fcall	_crc_verify
 35528  296F  0020               	movlb	0	; select bank0
 35529  2970  00B3               	movwf	??_data_api_system_data_init
 35530  2971  0833               	movf	??_data_api_system_data_init,w
 35531  2972  00B4               	movwf	data_api_system_data_init@sta
 35532                           
 35533                           ;appdata.c: 132: if(!sta){
 35534  2973  0834               	movf	data_api_system_data_init@sta,w
 35535  2974  1D03               	btfss	3,2
 35536  2975  298F               	goto	l16101
 35537                           
 35538                           ;appdata.c: 133: crc_append((uint8_t*)(&mainSystemData),sizeof (st_SystemData)-2);
 35539  2976  3020               	movlw	low _mainSystemData
 35540  2977  00A8               	movwf	crc_append@message
 35541  2978  3002               	movlw	high _mainSystemData
 35542  2979  00A9               	movwf	crc_append@message+1
 35543  297A  3046               	movlw	70
 35544  297B  00AA               	movwf	crc_append@n
 35545  297C  3000               	movlw	0
 35546  297D  00AB               	movwf	crc_append@n+1
 35547  297E  31B3  238B  31A9   	fcall	_crc_append
 35548                           
 35549                           ;appdata.c: 134: data_api_write_eeprom((uint8_t*)(&mainSystemData),0x00,sizeof(st_System
      +                          Data));
 35550  2981  3020               	movlw	low _mainSystemData
 35551  2982  0020               	movlb	0	; select bank0
 35552  2983  00A0               	movwf	data_api_write_eeprom@buf
 35553  2984  3002               	movlw	high _mainSystemData
 35554  2985  00A1               	movwf	data_api_write_eeprom@buf+1
 35555  2986  01A2               	clrf	data_api_write_eeprom@addr
 35556  2987  3048               	movlw	72
 35557  2988  00B3               	movwf	??_data_api_system_data_init
 35558  2989  0833               	movf	??_data_api_system_data_init,w
 35559  298A  00A3               	movwf	data_api_write_eeprom@len
 35560  298B  31BE  26FF  31A9   	fcall	_data_api_write_eeprom
 35561                           
 35562                           ;appdata.c: 136: }else{
 35563  298E  299F               	goto	l911
 35564  298F                     l16101:	
 35565                           
 35566                           ;appdata.c: 137: m_mem_cpy_len((uint8_t*)(&mainSystemData),comBuffer,sizeof (st_SystemDa
      +                          ta));
 35567  298F  3020               	movlw	low _mainSystemData
 35568  2990  00F3               	movwf	m_mem_cpy_len@d
 35569  2991  3002               	movlw	high _mainSystemData
 35570  2992  00F4               	movwf	m_mem_cpy_len@d+1
 35571  2993  3000               	movlw	0
 35572  2994  00F5               	movwf	m_mem_cpy_len@s
 35573  2995  3022               	movlw	34
 35574  2996  00F6               	movwf	m_mem_cpy_len@s+1
 35575  2997  3048               	movlw	72
 35576  2998  0020               	movlb	0	; select bank0
 35577  2999  00B3               	movwf	??_data_api_system_data_init
 35578  299A  0833               	movf	??_data_api_system_data_init,w
 35579  299B  00F7               	movwf	m_mem_cpy_len@len
 35580  299C  31BD  25A3  31A9   	fcall	_m_mem_cpy_len
 35581  299F                     l911:	
 35582                           
 35583                           ;appdata.c: 138: }
 35584                           ;appdata.c: 139: data_api_system_data_get();
 35585  299F  31BC  247E         	fcall	_data_api_system_data_get
 35586  29A1  0008               	return
 35587  29A2                     __end_of_data_api_system_data_init:	
 35588                           ;appdata.c: 140: return sta;
 35589                           ;	Return value of _data_api_system_data_init is never used
 35590                           
 35591                           
 35592                           	psect	text152
 35593  3C7E                     __ptext152:	
 35594 ;; *************** function _data_api_system_data_get *****************
 35595 ;; Defined at:
 35596 ;;		line 58 in file "src/app/appdata.c"
 35597 ;; Parameters:    Size  Location     Type
 35598 ;;		None
 35599 ;; Auto vars:     Size  Location     Type
 35600 ;;		None
 35601 ;; Return value:  Size  Location     Type
 35602 ;;                  1    wreg      void 
 35603 ;; Registers used:
 35604 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 35605 ;; Tracked objects:
 35606 ;;		On entry : 0/0
 35607 ;;		On exit  : 0/0
 35608 ;;		Unchanged: 0/0
 35609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35614 ;;Total ram usage:        1 bytes
 35615 ;; Hardware stack levels used:    1
 35616 ;; Hardware stack levels required when called:    2
 35617 ;; This function calls:
 35618 ;;		Nothing
 35619 ;; This function is called by:
 35620 ;;		_data_api_system_data_init
 35621 ;;		_data_api_rt_data_save
 35622 ;; This function uses a non-reentrant model
 35623 ;;
 35624                           
 35625                           
 35626                           ;psect for function _data_api_system_data_get
 35627  3C7E                     _data_api_system_data_get:	
 35628                           
 35629                           ;appdata.c: 59: deviceStatus.byte=mainSystemData.status.byte;
 35630                           
 35631                           ;incstack = 0
 35632                           ; Regs used in _data_api_system_data_get: [wreg+fsr1l+fsr1h+status,2+status,0]
 35633  3C7E  0024               	movlb	4	; select bank4
 35634  3C7F  085E               	movf	(_mainSystemData^(0+512)+62),w
 35635  3C80  00F3               	movwf	??_data_api_system_data_get
 35636  3C81  0873               	movf	??_data_api_system_data_get,w
 35637  3C82  0021               	movlb	1	; select bank1
 35638  3C83  00C0               	movwf	_deviceStatus^(0+128)
 35639                           
 35640                           ;appdata.c: 60: rtBalanceMoney=mainSystemData.BalanceMoney;
 35641  3C84  302C               	movlw	44
 35642  3C85  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 35643  3C86  0086               	movwf	6
 35644  3C87  3002               	movlw	2	; select bank4/5
 35645  3C88  0087               	movwf	7
 35646  3C89  3F40               	moviw [0]fsr1
 35647  3C8A  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 35648  3C8B  3F41               	moviw [1]fsr1
 35649  3C8C  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 35650  3C8D  3F42               	moviw [2]fsr1
 35651  3C8E  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 35652  3C8F  3F43               	moviw [3]fsr1
 35653  3C90  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 35654  3C91  0008               	return
 35655  3C92                     __end_of_data_api_system_data_get:	
 35656                           
 35657                           	psect	text153
 35658  1C60                     __ptext153:	
 35659 ;; *************** function _data_api_calibration_table_data_init *****************
 35660 ;; Defined at:
 35661 ;;		line 89 in file "src/app/appdata.c"
 35662 ;; Parameters:    Size  Location     Type
 35663 ;;		None
 35664 ;; Auto vars:     Size  Location     Type
 35665 ;;  stp             2   26[BANK0 ] PTR struct .
 35666 ;;		 -> comBuffer(128), 
 35667 ;;  i               1   28[BANK0 ] unsigned char 
 35668 ;;  sta             1   25[BANK0 ] unsigned char 
 35669 ;; Return value:  Size  Location     Type
 35670 ;;                  1    wreg      unsigned char 
 35671 ;; Registers used:
 35672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35673 ;; Tracked objects:
 35674 ;;		On entry : 0/0
 35675 ;;		On exit  : 0/0
 35676 ;;		Unchanged: 0/0
 35677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35679 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35680 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 35681 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 35682 ;;Total ram usage:       10 bytes
 35683 ;; Hardware stack levels used:    1
 35684 ;; Hardware stack levels required when called:    4
 35685 ;; This function calls:
 35686 ;;		___wmul
 35687 ;;		_crc_append
 35688 ;;		_crc_verify
 35689 ;;		_data_api_read_eeprom
 35690 ;;		_data_api_write_eeprom
 35691 ;;		_m_mem_cpy_len
 35692 ;; This function is called by:
 35693 ;;		_main
 35694 ;; This function uses a non-reentrant model
 35695 ;;
 35696                           
 35697                           
 35698                           ;psect for function _data_api_calibration_table_data_init
 35699  1C60                     _data_api_calibration_table_data_init:	
 35700                           
 35701                           ;appdata.c: 90: uint8_t i,sta;
 35702                           ;appdata.c: 91: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 35703                           
 35704                           ;incstack = 0
 35705                           ; Regs used in _data_api_calibration_table_data_init: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 35706  1C60  3000               	movlw	0
 35707  1C61  0020               	movlb	0	; select bank0
 35708  1C62  00BA               	movwf	data_api_calibration_table_data_init@stp
 35709  1C63  3022               	movlw	34
 35710  1C64  00BB               	movwf	data_api_calibration_table_data_init@stp+1
 35711                           
 35712                           ;appdata.c: 92: data_api_read_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 35713  1C65  3000               	movlw	0
 35714  1C66  00F4               	movwf	data_api_read_eeprom@buf
 35715  1C67  3022               	movlw	34
 35716  1C68  00F5               	movwf	data_api_read_eeprom@buf+1
 35717  1C69  3080               	movlw	128
 35718  1C6A  00B3               	movwf	??_data_api_calibration_table_data_init
 35719  1C6B  0833               	movf	??_data_api_calibration_table_data_init,w
 35720  1C6C  00F6               	movwf	data_api_read_eeprom@addr
 35721  1C6D  307C               	movlw	124
 35722  1C6E  00B4               	movwf	??_data_api_calibration_table_data_init+1
 35723  1C6F  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35724  1C70  00F7               	movwf	data_api_read_eeprom@len
 35725  1C71  31BE  26A0  319C   	fcall	_data_api_read_eeprom
 35726                           
 35727                           ;appdata.c: 93: sta=crc_verify(comBuffer,sizeof (st_flowCalibrationTable));
 35728  1C74  3000               	movlw	0
 35729  1C75  0020               	movlb	0	; select bank0
 35730  1C76  00A8               	movwf	crc_verify@message
 35731  1C77  3022               	movlw	34
 35732  1C78  00A9               	movwf	crc_verify@message+1
 35733  1C79  307C               	movlw	124
 35734  1C7A  00AA               	movwf	crc_verify@n
 35735  1C7B  3000               	movlw	0
 35736  1C7C  00AB               	movwf	crc_verify@n+1
 35737  1C7D  31A8  2000  319C   	fcall	_crc_verify
 35738  1C80  0020               	movlb	0	; select bank0
 35739  1C81  00B3               	movwf	??_data_api_calibration_table_data_init
 35740  1C82  0833               	movf	??_data_api_calibration_table_data_init,w
 35741  1C83  00B9               	movwf	data_api_calibration_table_data_init@sta
 35742                           
 35743                           ;appdata.c: 94: if(!sta){
 35744  1C84  0839               	movf	data_api_calibration_table_data_init@sta,w
 35745  1C85  1D03               	btfss	3,2
 35746  1C86  2D16               	goto	l16085
 35747                           
 35748                           ;appdata.c: 95: for(i=0;i<30;i++){
 35749  1C87  01BC               	clrf	data_api_calibration_table_data_init@i
 35750  1C88  301E               	movlw	30
 35751  1C89  023C               	subwf	data_api_calibration_table_data_init@i,w
 35752  1C8A  1803               	btfsc	3,0
 35753  1C8B  2CD9               	goto	l16079
 35754  1C8C                     l16073:	
 35755                           
 35756                           ;appdata.c: 96: stp->flowCalibrationArr[i].adcValue=2000*(i+1);
 35757  1C8C  083C               	movf	data_api_calibration_table_data_init@i,w
 35758  1C8D  3E01               	addlw	1
 35759  1C8E  00F3               	movwf	___wmul@multiplier
 35760  1C8F  3000               	movlw	0
 35761  1C90  1803               	skipnc
 35762  1C91  3001               	movlw	1
 35763  1C92  00F4               	movwf	___wmul@multiplier+1
 35764  1C93  30D0               	movlw	208
 35765  1C94  00F5               	movwf	___wmul@multiplicand
 35766  1C95  3007               	movlw	7
 35767  1C96  00F6               	movwf	___wmul@multiplicand+1
 35768  1C97  31BE  2682  319C   	fcall	___wmul
 35769  1C9A  0020               	movlb	0	; select bank0
 35770  1C9B  083C               	movf	data_api_calibration_table_data_init@i,w
 35771  1C9C  00B3               	movwf	??_data_api_calibration_table_data_init
 35772  1C9D  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35773  1C9E  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35774  1C9F  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35775  1CA0  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35776  1CA1  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35777  1CA2  0833               	movf	??_data_api_calibration_table_data_init,w
 35778  1CA3  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35779  1CA4  0086               	movwf	6
 35780  1CA5  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35781  1CA6  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35782  1CA7  0087               	movwf	7
 35783  1CA8  0873               	movf	?___wmul,w
 35784  1CA9  3FC0               	movwi [0]fsr1
 35785  1CAA  0874               	movf	?___wmul+1,w
 35786  1CAB  3FC1               	movwi [1]fsr1
 35787                           
 35788                           ;appdata.c: 97: stp->flowCalibrationArr[i].rtflowValue=100*i;
 35789  1CAC  083C               	movf	data_api_calibration_table_data_init@i,w
 35790  1CAD  00B3               	movwf	??_data_api_calibration_table_data_init
 35791  1CAE  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35792  1CAF  0833               	movf	??_data_api_calibration_table_data_init,w
 35793  1CB0  00F3               	movwf	___wmul@multiplier
 35794  1CB1  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35795  1CB2  00F4               	movwf	___wmul@multiplier+1
 35796  1CB3  3064               	movlw	100
 35797  1CB4  00F5               	movwf	___wmul@multiplicand
 35798  1CB5  3000               	movlw	0
 35799  1CB6  00F6               	movwf	___wmul@multiplicand+1
 35800  1CB7  31BE  2682  319C   	fcall	___wmul
 35801  1CBA  0020               	movlb	0	; select bank0
 35802  1CBB  083C               	movf	data_api_calibration_table_data_init@i,w
 35803  1CBC  00B5               	movwf	??_data_api_calibration_table_data_init+2
 35804  1CBD  01B6               	clrf	??_data_api_calibration_table_data_init+3
 35805  1CBE  35B5               	lslf	??_data_api_calibration_table_data_init+2,f
 35806  1CBF  0DB6               	rlf	??_data_api_calibration_table_data_init+3,f
 35807  1CC0  35B5               	lslf	??_data_api_calibration_table_data_init+2,f
 35808  1CC1  0DB6               	rlf	??_data_api_calibration_table_data_init+3,f
 35809  1CC2  0835               	movf	??_data_api_calibration_table_data_init+2,w
 35810  1CC3  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35811  1CC4  00B7               	movwf	??_data_api_calibration_table_data_init+4
 35812  1CC5  0836               	movf	??_data_api_calibration_table_data_init+3,w
 35813  1CC6  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35814  1CC7  00B8               	movwf	??_data_api_calibration_table_data_init+5
 35815  1CC8  0837               	movf	??_data_api_calibration_table_data_init+4,w
 35816  1CC9  0086               	movwf	6
 35817  1CCA  0838               	movf	??_data_api_calibration_table_data_init+5,w
 35818  1CCB  0087               	movwf	7
 35819  1CCC  3142               	addfsr 1,2
 35820  1CCD  0873               	movf	?___wmul,w
 35821  1CCE  3FC0               	movwi [0]fsr1
 35822  1CCF  0874               	movf	?___wmul+1,w
 35823  1CD0  3FC1               	movwi [1]fsr1
 35824  1CD1  3001               	movlw	1
 35825  1CD2  00B3               	movwf	??_data_api_calibration_table_data_init
 35826  1CD3  0833               	movf	??_data_api_calibration_table_data_init,w
 35827  1CD4  07BC               	addwf	data_api_calibration_table_data_init@i,f
 35828  1CD5  301E               	movlw	30
 35829  1CD6  023C               	subwf	data_api_calibration_table_data_init@i,w
 35830  1CD7  1C03               	skipc
 35831  1CD8  2C8C               	goto	l16073
 35832  1CD9                     l16079:	
 35833                           
 35834                           ;appdata.c: 98: }
 35835                           ;appdata.c: 99: stp->maxFlow=stp->flowCalibrationArr[i-1].rtflowValue;
 35836  1CD9  083C               	movf	data_api_calibration_table_data_init@i,w
 35837  1CDA  00B3               	movwf	??_data_api_calibration_table_data_init
 35838  1CDB  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35839  1CDC  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35840  1CDD  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35841  1CDE  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35842  1CDF  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35843  1CE0  0833               	movf	??_data_api_calibration_table_data_init,w
 35844  1CE1  3EFC               	addlw	252
 35845  1CE2  00B5               	movwf	??_data_api_calibration_table_data_init+2
 35846  1CE3  30FF               	movlw	255
 35847  1CE4  3D34               	addwfc	??_data_api_calibration_table_data_init+1,w
 35848  1CE5  00B6               	movwf	??_data_api_calibration_table_data_init+3
 35849  1CE6  0835               	movf	??_data_api_calibration_table_data_init+2,w
 35850  1CE7  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35851  1CE8  00B7               	movwf	??_data_api_calibration_table_data_init+4
 35852  1CE9  0836               	movf	??_data_api_calibration_table_data_init+3,w
 35853  1CEA  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35854  1CEB  00B8               	movwf	??_data_api_calibration_table_data_init+5
 35855  1CEC  0837               	movf	??_data_api_calibration_table_data_init+4,w
 35856  1CED  0086               	movwf	6
 35857  1CEE  0838               	movf	??_data_api_calibration_table_data_init+5,w
 35858  1CEF  0087               	movwf	7
 35859  1CF0  3142               	addfsr 1,2
 35860  1CF1  083A               	movf	data_api_calibration_table_data_init@stp,w
 35861  1CF2  3E78               	addlw	120
 35862  1CF3  0084               	movwf	4
 35863  1CF4  3000               	movlw	0
 35864  1CF5  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35865  1CF6  0085               	movwf	5
 35866  1CF7  3F40               	moviw [0]fsr1
 35867  1CF8  3F80               	movwi [0]fsr0
 35868  1CF9  3F41               	moviw [1]fsr1
 35869  1CFA  3F81               	movwi [1]fsr0
 35870                           
 35871                           ;appdata.c: 100: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 35872  1CFB  3000               	movlw	0
 35873  1CFC  00A8               	movwf	crc_append@message
 35874  1CFD  3022               	movlw	34
 35875  1CFE  00A9               	movwf	crc_append@message+1
 35876  1CFF  307A               	movlw	122
 35877  1D00  00AA               	movwf	crc_append@n
 35878  1D01  3000               	movlw	0
 35879  1D02  00AB               	movwf	crc_append@n+1
 35880  1D03  31B3  238B  319C   	fcall	_crc_append
 35881                           
 35882                           ;appdata.c: 101: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 35883  1D06  3000               	movlw	0
 35884  1D07  0020               	movlb	0	; select bank0
 35885  1D08  00A0               	movwf	data_api_write_eeprom@buf
 35886  1D09  3022               	movlw	34
 35887  1D0A  00A1               	movwf	data_api_write_eeprom@buf+1
 35888  1D0B  3080               	movlw	128
 35889  1D0C  00B3               	movwf	??_data_api_calibration_table_data_init
 35890  1D0D  0833               	movf	??_data_api_calibration_table_data_init,w
 35891  1D0E  00A2               	movwf	data_api_write_eeprom@addr
 35892  1D0F  307C               	movlw	124
 35893  1D10  00B4               	movwf	??_data_api_calibration_table_data_init+1
 35894  1D11  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35895  1D12  00A3               	movwf	data_api_write_eeprom@len
 35896  1D13  31BE  26FF  319C   	fcall	_data_api_write_eeprom
 35897  1D16                     l16085:	
 35898                           
 35899                           ;appdata.c: 102: }
 35900                           ;appdata.c: 103: m_mem_cpy_len((uint8_t*)(&Main_flowCalibrationTable),comBuffer,sizeof (
      +                          st_flowCalibrationTable));
 35901  1D16  3074               	movlw	116
 35902  1D17  00F3               	movwf	m_mem_cpy_len@d
 35903  1D18  3023               	movlw	35
 35904  1D19  00F4               	movwf	m_mem_cpy_len@d+1
 35905  1D1A  3000               	movlw	0
 35906  1D1B  00F5               	movwf	m_mem_cpy_len@s
 35907  1D1C  3022               	movlw	34
 35908  1D1D  00F6               	movwf	m_mem_cpy_len@s+1
 35909  1D1E  307C               	movlw	124
 35910  1D1F  0020               	movlb	0	; select bank0
 35911  1D20  00B3               	movwf	??_data_api_calibration_table_data_init
 35912  1D21  0833               	movf	??_data_api_calibration_table_data_init,w
 35913  1D22  00F7               	movwf	m_mem_cpy_len@len
 35914  1D23  31BD  25A3  319C   	fcall	_m_mem_cpy_len
 35915                           
 35916                           ;appdata.c: 104: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowC
      +                          alibrationTable) );
 35917  1D26  3074               	movlw	116
 35918  1D27  0020               	movlb	0	; select bank0
 35919  1D28  00A8               	movwf	crc_verify@message
 35920  1D29  3023               	movlw	35
 35921  1D2A  00A9               	movwf	crc_verify@message+1
 35922  1D2B  307C               	movlw	124
 35923  1D2C  00AA               	movwf	crc_verify@n
 35924  1D2D  3000               	movlw	0
 35925  1D2E  00AB               	movwf	crc_verify@n+1
 35926  1D2F  31A8  2000         	fcall	_crc_verify
 35927  1D31  0020               	movlb	0	; select bank0
 35928  1D32  00B3               	movwf	??_data_api_calibration_table_data_init
 35929  1D33  0833               	movf	??_data_api_calibration_table_data_init,w
 35930  1D34  00B9               	movwf	data_api_calibration_table_data_init@sta
 35931  1D35  0008               	return
 35932  1D36                     __end_of_data_api_calibration_table_data_init:	
 35933                           ;appdata.c: 105: return sta;
 35934                           ;	Return value of _data_api_calibration_table_data_init is never used
 35935                           
 35936                           
 35937                           	psect	text154
 35938  3EFF                     __ptext154:	
 35939 ;; *************** function _data_api_write_eeprom *****************
 35940 ;; Defined at:
 35941 ;;		line 65 in file "src/app/appdata.c"
 35942 ;; Parameters:    Size  Location     Type
 35943 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 35944 ;;		 -> comBuffer(128), mainSystemData(72), 
 35945 ;;  addr            1    2[BANK0 ] unsigned char 
 35946 ;;  len             1    3[BANK0 ] unsigned char 
 35947 ;; Auto vars:     Size  Location     Type
 35948 ;;  i               1    7[COMMON] unsigned char 
 35949 ;; Return value:  Size  Location     Type
 35950 ;;                  1    wreg      void 
 35951 ;; Registers used:
 35952 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35953 ;; Tracked objects:
 35954 ;;		On entry : 0/0
 35955 ;;		On exit  : 0/0
 35956 ;;		Unchanged: 0/0
 35957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35961 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35962 ;;Total ram usage:        6 bytes
 35963 ;; Hardware stack levels used:    1
 35964 ;; Hardware stack levels required when called:    3
 35965 ;; This function calls:
 35966 ;;		_DATAEE_WriteByte
 35967 ;; This function is called by:
 35968 ;;		_data_api_calibration_table_data_init
 35969 ;;		_data_api_system_data_init
 35970 ;;		_data_api_rt_data_save
 35971 ;;		_data_api_calibration_table_data_save
 35972 ;; This function uses a non-reentrant model
 35973 ;;
 35974                           
 35975                           
 35976                           ;psect for function _data_api_write_eeprom
 35977  3EFF                     _data_api_write_eeprom:	
 35978                           
 35979                           ;appdata.c: 66: uint8_t i;
 35980                           ;appdata.c: 67: for(i=0;i<len;i++){
 35981                           
 35982                           ;incstack = 0
 35983                           ; Regs used in _data_api_write_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 35984  3EFF  01F7               	clrf	data_api_write_eeprom@i
 35985  3F00                     l13447:	
 35986  3F00  0020               	movlb	0	; select bank0
 35987  3F01  0823               	movf	data_api_write_eeprom@len,w
 35988  3F02  0277               	subwf	data_api_write_eeprom@i,w
 35989  3F03  1803               	btfsc	3,0
 35990  3F04  0008               	return
 35991                           
 35992                           ;appdata.c: 68: DATAEE_WriteByte(addr,*buf);
 35993  3F05  0020               	movlb	0	; select bank0
 35994  3F06  0820               	movf	data_api_write_eeprom@buf,w
 35995  3F07  0086               	movwf	6
 35996  3F08  0821               	movf	data_api_write_eeprom@buf+1,w
 35997  3F09  0087               	movwf	7
 35998  3F0A  0801               	movf	1,w
 35999  3F0B  00F6               	movwf	??_data_api_write_eeprom
 36000  3F0C  0876               	movf	??_data_api_write_eeprom,w
 36001  3F0D  00F3               	movwf	DATAEE_WriteByte@bData
 36002  3F0E  0822               	movf	data_api_write_eeprom@addr,w
 36003  3F0F  31BE  262B  31BE   	fcall	_DATAEE_WriteByte
 36004                           
 36005                           ;appdata.c: 69: buf++;
 36006  3F12  3001               	movlw	1
 36007  3F13  0020               	movlb	0	; select bank0
 36008  3F14  07A0               	addwf	data_api_write_eeprom@buf,f
 36009  3F15  3000               	movlw	0
 36010  3F16  3DA1               	addwfc	data_api_write_eeprom@buf+1,f
 36011                           
 36012                           ;appdata.c: 70: addr++;
 36013  3F17  3001               	movlw	1
 36014  3F18  00F6               	movwf	??_data_api_write_eeprom
 36015  3F19  0876               	movf	??_data_api_write_eeprom,w
 36016  3F1A  07A2               	addwf	data_api_write_eeprom@addr,f
 36017  3F1B  3001               	movlw	1
 36018  3F1C  00F6               	movwf	??_data_api_write_eeprom
 36019  3F1D  0876               	movf	??_data_api_write_eeprom,w
 36020  3F1E  07F7               	addwf	data_api_write_eeprom@i,f
 36021  3F1F  2F00               	goto	l13447
 36022  3F20                     __end_of_data_api_write_eeprom:	
 36023                           
 36024                           	psect	text155
 36025  3E2B                     __ptext155:	
 36026 ;; *************** function _DATAEE_WriteByte *****************
 36027 ;; Defined at:
 36028 ;;		line 180 in file "mcc_generated_files/memory.c"
 36029 ;; Parameters:    Size  Location     Type
 36030 ;;  bAdd            1    wreg     unsigned char 
 36031 ;;  bData           1    3[COMMON] unsigned char 
 36032 ;; Auto vars:     Size  Location     Type
 36033 ;;  bAdd            1    4[COMMON] unsigned char 
 36034 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 36035 ;; Return value:  Size  Location     Type
 36036 ;;                  1    wreg      void 
 36037 ;; Registers used:
 36038 ;;		wreg, status,2, status,0
 36039 ;; Tracked objects:
 36040 ;;		On entry : 0/0
 36041 ;;		On exit  : 0/0
 36042 ;;		Unchanged: 0/0
 36043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36044 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36045 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36047 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36048 ;;Total ram usage:        3 bytes
 36049 ;; Hardware stack levels used:    1
 36050 ;; Hardware stack levels required when called:    2
 36051 ;; This function calls:
 36052 ;;		Nothing
 36053 ;; This function is called by:
 36054 ;;		_data_api_write_eeprom
 36055 ;;		_data_api_write_eeprom_clr
 36056 ;; This function uses a non-reentrant model
 36057 ;;
 36058                           
 36059                           
 36060                           ;psect for function _DATAEE_WriteByte
 36061  3E2B                     _DATAEE_WriteByte:	
 36062                           
 36063                           ;incstack = 0
 36064                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 36065                           ;DATAEE_WriteByte@bAdd stored from wreg
 36066  3E2B  00F4               	movwf	DATAEE_WriteByte@bAdd
 36067                           
 36068                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 36069  3E2C  01F5               	clrf	DATAEE_WriteByte@GIEBitValue
 36070                           
 36071                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 36072  3E2D  0874               	movf	DATAEE_WriteByte@bAdd,w
 36073  3E2E  0023               	movlb	3	; select bank3
 36074  3E2F  0091               	movwf	17	;volatile
 36075                           
 36076                           ;memory.c: 185: EEDATL = bData;
 36077  3E30  0873               	movf	DATAEE_WriteByte@bData,w
 36078  3E31  0093               	movwf	19	;volatile
 36079                           
 36080                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 36081  3E32  1395               	bcf	21,7	;volsfr
 36082                           
 36083                           ;memory.c: 187: EECON1bits.CFGS = 0;
 36084  3E33  1315               	bcf	21,6	;volsfr
 36085                           
 36086                           ;memory.c: 188: EECON1bits.WREN = 1;
 36087  3E34  1515               	bsf	21,2	;volsfr
 36088                           
 36089                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 36090  3E35  3000               	movlw	0
 36091  3E36  1B8B               	btfsc	11,7	;volatile
 36092  3E37  3001               	movlw	1
 36093  3E38  00F5               	movwf	DATAEE_WriteByte@GIEBitValue
 36094                           
 36095                           ;memory.c: 191: INTCONbits.GIE = 0;
 36096  3E39  138B               	bcf	11,7	;volatile
 36097                           
 36098                           ;memory.c: 192: EECON2 = 0x55;
 36099  3E3A  3055               	movlw	85
 36100  3E3B  0096               	movwf	22	;volsfr
 36101                           
 36102                           ;memory.c: 193: EECON2 = 0xAA;
 36103  3E3C  30AA               	movlw	170
 36104  3E3D  0096               	movwf	22	;volsfr
 36105                           
 36106                           ;memory.c: 194: EECON1bits.WR = 1;
 36107  3E3E  1495               	bsf	21,1	;volsfr
 36108  3E3F                     l202:	
 36109                           ;memory.c: 197: {
 36110                           
 36111                           ;memory.c: 196: while (EECON1bits.WR)
 36112                           
 36113  3E3F  1895               	btfsc	21,1	;volsfr
 36114  3E40  2E3F               	goto	l202
 36115                           
 36116                           ;memory.c: 198: }
 36117                           ;memory.c: 200: EECON1bits.WREN = 0;
 36118  3E41  1115               	bcf	21,2	;volsfr
 36119                           
 36120                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 36121  3E42  0C75               	rrf	DATAEE_WriteByte@GIEBitValue,w
 36122  3E43  1C03               	skipc
 36123  3E44  138B               	bcf	11,7	;volatile
 36124  3E45  1803               	skipnc
 36125  3E46  178B               	bsf	11,7	;volatile
 36126  3E47  0008               	return
 36127  3E48                     __end_of_DATAEE_WriteByte:	
 36128                           
 36129                           	psect	text156
 36130  3EA0                     __ptext156:	
 36131 ;; *************** function _data_api_read_eeprom *****************
 36132 ;; Defined at:
 36133 ;;		line 81 in file "src/app/appdata.c"
 36134 ;; Parameters:    Size  Location     Type
 36135 ;;  buf             2    4[COMMON] PTR unsigned char 
 36136 ;;		 -> comBuffer(128), uart1Buffer(80), 
 36137 ;;  addr            1    6[COMMON] unsigned char 
 36138 ;;  len             1    7[COMMON] unsigned char 
 36139 ;; Auto vars:     Size  Location     Type
 36140 ;;  i               1    1[BANK0 ] unsigned char 
 36141 ;; Return value:  Size  Location     Type
 36142 ;;                  1    wreg      void 
 36143 ;; Registers used:
 36144 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36145 ;; Tracked objects:
 36146 ;;		On entry : 0/0
 36147 ;;		On exit  : 0/0
 36148 ;;		Unchanged: 0/0
 36149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36150 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36153 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36154 ;;Total ram usage:        6 bytes
 36155 ;; Hardware stack levels used:    1
 36156 ;; Hardware stack levels required when called:    3
 36157 ;; This function calls:
 36158 ;;		_DATAEE_ReadByte
 36159 ;; This function is called by:
 36160 ;;		_modbus_response_read_clib_data
 36161 ;;		_data_api_calibration_table_data_init
 36162 ;;		_data_api_system_data_init
 36163 ;; This function uses a non-reentrant model
 36164 ;;
 36165                           
 36166                           
 36167                           ;psect for function _data_api_read_eeprom
 36168  3EA0                     _data_api_read_eeprom:	
 36169                           
 36170                           ;appdata.c: 82: uint8_t i;
 36171                           ;appdata.c: 83: for(i=0;i<len;i++){
 36172                           
 36173                           ;incstack = 0
 36174                           ; Regs used in _data_api_read_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36175  3EA0  0020               	movlb	0	; select bank0
 36176  3EA1  01A1               	clrf	data_api_read_eeprom@i
 36177  3EA2                     l14311:	
 36178  3EA2  0877               	movf	data_api_read_eeprom@len,w
 36179  3EA3  0221               	subwf	data_api_read_eeprom@i,w
 36180  3EA4  1803               	btfsc	3,0
 36181  3EA5  0008               	return
 36182                           
 36183                           ;appdata.c: 84: *buf=DATAEE_ReadByte(addr);
 36184  3EA6  0876               	movf	data_api_read_eeprom@addr,w
 36185  3EA7  31BB  2333  31BE   	fcall	_DATAEE_ReadByte
 36186  3EAA  0020               	movlb	0	; select bank0
 36187  3EAB  00A0               	movwf	??_data_api_read_eeprom
 36188  3EAC  0874               	movf	data_api_read_eeprom@buf,w
 36189  3EAD  0086               	movwf	6
 36190  3EAE  0875               	movf	data_api_read_eeprom@buf+1,w
 36191  3EAF  0087               	movwf	7
 36192  3EB0  0820               	movf	??_data_api_read_eeprom,w
 36193  3EB1  0081               	movwf	1
 36194                           
 36195                           ;appdata.c: 85: buf++;
 36196  3EB2  3001               	movlw	1
 36197  3EB3  07F4               	addwf	data_api_read_eeprom@buf,f
 36198  3EB4  3000               	movlw	0
 36199  3EB5  3DF5               	addwfc	data_api_read_eeprom@buf+1,f
 36200                           
 36201                           ;appdata.c: 86: addr++;
 36202  3EB6  3001               	movlw	1
 36203  3EB7  00A0               	movwf	??_data_api_read_eeprom
 36204  3EB8  0820               	movf	??_data_api_read_eeprom,w
 36205  3EB9  07F6               	addwf	data_api_read_eeprom@addr,f
 36206  3EBA  3001               	movlw	1
 36207  3EBB  00A0               	movwf	??_data_api_read_eeprom
 36208  3EBC  0820               	movf	??_data_api_read_eeprom,w
 36209  3EBD  07A1               	addwf	data_api_read_eeprom@i,f
 36210  3EBE  2EA2               	goto	l14311
 36211  3EBF                     __end_of_data_api_read_eeprom:	
 36212                           
 36213                           	psect	text157
 36214  3B33                     __ptext157:	
 36215 ;; *************** function _DATAEE_ReadByte *****************
 36216 ;; Defined at:
 36217 ;;		line 204 in file "mcc_generated_files/memory.c"
 36218 ;; Parameters:    Size  Location     Type
 36219 ;;  bAdd            1    wreg     unsigned char 
 36220 ;; Auto vars:     Size  Location     Type
 36221 ;;  bAdd            1    3[COMMON] unsigned char 
 36222 ;; Return value:  Size  Location     Type
 36223 ;;                  1    wreg      unsigned char 
 36224 ;; Registers used:
 36225 ;;		wreg
 36226 ;; Tracked objects:
 36227 ;;		On entry : 0/0
 36228 ;;		On exit  : 0/0
 36229 ;;		Unchanged: 0/0
 36230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36234 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36235 ;;Total ram usage:        1 bytes
 36236 ;; Hardware stack levels used:    1
 36237 ;; Hardware stack levels required when called:    2
 36238 ;; This function calls:
 36239 ;;		Nothing
 36240 ;; This function is called by:
 36241 ;;		_data_api_read_eeprom
 36242 ;; This function uses a non-reentrant model
 36243 ;;
 36244                           
 36245                           
 36246                           ;psect for function _DATAEE_ReadByte
 36247  3B33                     _DATAEE_ReadByte:	
 36248                           
 36249                           ;incstack = 0
 36250                           ; Regs used in _DATAEE_ReadByte: [wreg]
 36251                           ;DATAEE_ReadByte@bAdd stored from wreg
 36252  3B33  00F3               	movwf	DATAEE_ReadByte@bAdd
 36253                           
 36254                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 36255  3B34  0873               	movf	DATAEE_ReadByte@bAdd,w
 36256  3B35  0023               	movlb	3	; select bank3
 36257  3B36  0091               	movwf	17	;volatile
 36258                           
 36259                           ;memory.c: 207: EECON1bits.CFGS = 0;
 36260  3B37  1315               	bcf	21,6	;volsfr
 36261                           
 36262                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 36263  3B38  1395               	bcf	21,7	;volsfr
 36264                           
 36265                           ;memory.c: 209: EECON1bits.RD = 1;
 36266  3B39  1415               	bsf	21,0	;volsfr
 36267                           
 36268                           ;memory.c: 210: __nop();
 36269  3B3A  0000               	nop
 36270                           
 36271                           ;memory.c: 211: __nop();
 36272  3B3B  0000               	nop
 36273                           
 36274                           ;memory.c: 213: return (EEDATL);
 36275  3B3C  0023               	movlb	3	; select bank3
 36276  3B3D  0813               	movf	19,w	;volatile
 36277  3B3E  0008               	return
 36278  3B3F                     __end_of_DATAEE_ReadByte:	
 36279                           
 36280                           	psect	text158
 36281  2800                     __ptext158:	
 36282 ;; *************** function _crc_verify *****************
 36283 ;; Defined at:
 36284 ;;		line 99 in file "src/protocol/crc16_sf.c"
 36285 ;; Parameters:    Size  Location     Type
 36286 ;;  message         2    8[BANK0 ] PTR unsigned char 
 36287 ;;		 -> cardDecBuf(18), cardIncBuf(18), comBuffer(128), Main_flowCalibrationTable(124), 
 36288 ;;		 -> uart1Buffer(80), 
 36289 ;;  n               2   10[BANK0 ] unsigned int 
 36290 ;; Auto vars:     Size  Location     Type
 36291 ;;  expected        2   17[BANK0 ] unsigned int 
 36292 ;;  crccal          2   15[BANK0 ] unsigned int 
 36293 ;; Return value:  Size  Location     Type
 36294 ;;                  1    wreg      unsigned char 
 36295 ;; Registers used:
 36296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36297 ;; Tracked objects:
 36298 ;;		On entry : 0/0
 36299 ;;		On exit  : 0/0
 36300 ;;		Unchanged: 0/0
 36301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36302 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36303 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36304 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 36305 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 36306 ;;Total ram usage:       11 bytes
 36307 ;; Hardware stack levels used:    1
 36308 ;; Hardware stack levels required when called:    3
 36309 ;; This function calls:
 36310 ;;		_crc_sum
 36311 ;;		_m_mem_cpy_len
 36312 ;; This function is called by:
 36313 ;;		_modbus_response_process
 36314 ;;		_data_api_calibration_table_data_init
 36315 ;;		_data_api_system_data_init
 36316 ;;		_data_api_calibration_table_data_save
 36317 ;;		_rfid_comm_process_read_header
 36318 ;;		_rfid_comm_process_read_inc
 36319 ;;		_rfid_comm_process_read_dec
 36320 ;; This function uses a non-reentrant model
 36321 ;;
 36322                           
 36323                           
 36324                           ;psect for function _crc_verify
 36325  2800                     _crc_verify:	
 36326                           
 36327                           ;crc16_sf.c: 101: uint16_t expected,crccal;
 36328                           ;crc16_sf.c: 104: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 36329                           
 36330                           ;incstack = 0
 36331                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36332  2800  3031               	movlw	low crc_verify@expected
 36333  2801  00F3               	movwf	m_mem_cpy_len@d
 36334  2802  3000               	movlw	high crc_verify@expected
 36335  2803  00F4               	movwf	m_mem_cpy_len@d+1
 36336  2804  0020               	movlb	0	; select bank0
 36337  2805  082A               	movf	crc_verify@n,w
 36338  2806  0728               	addwf	crc_verify@message,w
 36339  2807  00AC               	movwf	??_crc_verify
 36340  2808  082B               	movf	crc_verify@n+1,w
 36341  2809  3D29               	addwfc	crc_verify@message+1,w
 36342  280A  00AD               	movwf	??_crc_verify+1
 36343  280B  082C               	movf	??_crc_verify,w
 36344  280C  3EFE               	addlw	254
 36345  280D  00F5               	movwf	m_mem_cpy_len@s
 36346  280E  30FF               	movlw	255
 36347  280F  3D2D               	addwfc	??_crc_verify+1,w
 36348  2810  00F6               	movwf	m_mem_cpy_len@s+1
 36349  2811  3002               	movlw	2
 36350  2812  00AE               	movwf	??_crc_verify+2
 36351  2813  082E               	movf	??_crc_verify+2,w
 36352  2814  00F7               	movwf	m_mem_cpy_len@len
 36353  2815  31BD  25A3  31A8   	fcall	_m_mem_cpy_len
 36354                           
 36355                           ;crc16_sf.c: 105: crccal=crc_sum(message,n - 2);
 36356  2818  0020               	movlb	0	; select bank0
 36357  2819  0829               	movf	crc_verify@message+1,w
 36358  281A  00F4               	movwf	crc_sum@buf+1
 36359  281B  0828               	movf	crc_verify@message,w
 36360  281C  00F3               	movwf	crc_sum@buf
 36361  281D  082A               	movf	crc_verify@n,w
 36362  281E  3EFE               	addlw	254
 36363  281F  00F5               	movwf	crc_sum@len
 36364  2820  30FF               	movlw	255
 36365  2821  3D2B               	addwfc	crc_verify@n+1,w
 36366  2822  00F6               	movwf	crc_sum@len+1
 36367  2823  31AA  22EB  31A8   	fcall	_crc_sum
 36368  2826  0874               	movf	?_crc_sum+1,w
 36369  2827  0020               	movlb	0	; select bank0
 36370  2828  00B0               	movwf	crc_verify@crccal+1
 36371  2829  0873               	movf	?_crc_sum,w
 36372  282A  00AF               	movwf	crc_verify@crccal
 36373                           
 36374                           ;crc16_sf.c: 106: if(expected!=crccal)return 0;
 36375  282B  0830               	movf	crc_verify@crccal+1,w
 36376  282C  0632               	xorwf	crc_verify@expected+1,w
 36377  282D  1D03               	skipz
 36378  282E  2831               	goto	u12035
 36379  282F  082F               	movf	crc_verify@crccal,w
 36380  2830  0631               	xorwf	crc_verify@expected,w
 36381  2831                     u12035:	
 36382  2831  1903               	skipnz
 36383  2832  2835               	goto	l13429
 36384  2833  3000               	movlw	0
 36385  2834  0008               	return
 36386  2835                     l13429:	
 36387                           
 36388                           ;crc16_sf.c: 107: return 1;
 36389  2835  3001               	movlw	1
 36390  2836  0008               	return
 36391  2837                     __end_of_crc_verify:	
 36392                           
 36393                           	psect	text159
 36394  3DA3                     __ptext159:	
 36395 ;; *************** function _m_mem_cpy_len *****************
 36396 ;; Defined at:
 36397 ;;		line 41 in file "src/depend/m_string.c"
 36398 ;; Parameters:    Size  Location     Type
 36399 ;;  d               2    3[COMMON] PTR unsigned char 
 36400 ;;		 -> crc_verify@expected(2), pcd_mifare_transceive@cmdBuffer(18), LCDDATA0(1), cardWriteBuf(18), 
 36401 ;;		 -> comBuffer(128), Main_flowCalibrationTable(124), flashOpStr(21), uiAdjbuf(8), 
 36402 ;;		 -> mainSystemData(72), 
 36403 ;;  s               2    5[COMMON] PTR unsigned char 
 36404 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), pLCD(24), 
 36405 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 36406 ;;		 -> comBuffer(128), Main_flowCalibrationTable(124), flashOpStr(21), uiAdjbuf(8), 
 36407 ;;		 -> mainSystemData(72), uart1Buffer(80), 
 36408 ;;  len             1    7[COMMON] unsigned char 
 36409 ;; Auto vars:     Size  Location     Type
 36410 ;;		None
 36411 ;; Return value:  Size  Location     Type
 36412 ;;                  1    wreg      void 
 36413 ;; Registers used:
 36414 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 36415 ;; Tracked objects:
 36416 ;;		On entry : 0/0
 36417 ;;		On exit  : 0/0
 36418 ;;		Unchanged: 0/0
 36419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36420 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36422 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36423 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36424 ;;Total ram usage:        6 bytes
 36425 ;; Hardware stack levels used:    1
 36426 ;; Hardware stack levels required when called:    2
 36427 ;; This function calls:
 36428 ;;		Nothing
 36429 ;; This function is called by:
 36430 ;;		_ui_key_process_enter
 36431 ;;		_ui_key_set_process
 36432 ;;		_data_api_calibration_table_data_init
 36433 ;;		_data_api_system_data_init
 36434 ;;		_data_api_rt_data_save
 36435 ;;		_data_api_calibration_table_data_save
 36436 ;;		_rfid_comm_process_read_header
 36437 ;;		_rfid_comm_process_recharge
 36438 ;;		_lcd_disp_refresh
 36439 ;;		_pcd_mifare_transceive
 36440 ;;		_crc_verify
 36441 ;; This function uses a non-reentrant model
 36442 ;;
 36443                           
 36444                           
 36445                           ;psect for function _m_mem_cpy_len
 36446  3DA3                     _m_mem_cpy_len:	
 36447  3DA3                     l12135:	
 36448                           ;m_string.c: 44: while(len)
 36449                           
 36450                           ;incstack = 0
 36451                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 36452                           
 36453  3DA3  0877               	movf	m_mem_cpy_len@len,w
 36454  3DA4  1903               	btfsc	3,2
 36455  3DA5  0008               	return
 36456                           
 36457                           ;m_string.c: 45: {
 36458                           ;m_string.c: 46: *d++=*s++;
 36459  3DA6  0875               	movf	m_mem_cpy_len@s,w
 36460  3DA7  0086               	movwf	6
 36461  3DA8  0876               	movf	m_mem_cpy_len@s+1,w
 36462  3DA9  0087               	movwf	7
 36463  3DAA  0801               	movf	1,w
 36464  3DAB  0020               	movlb	0	; select bank0
 36465  3DAC  00A0               	movwf	??_m_mem_cpy_len
 36466  3DAD  0873               	movf	m_mem_cpy_len@d,w
 36467  3DAE  0086               	movwf	6
 36468  3DAF  0874               	movf	m_mem_cpy_len@d+1,w
 36469  3DB0  0087               	movwf	7
 36470  3DB1  0820               	movf	??_m_mem_cpy_len,w
 36471  3DB2  0081               	movwf	1
 36472  3DB3  3001               	movlw	1
 36473  3DB4  07F5               	addwf	m_mem_cpy_len@s,f
 36474  3DB5  3000               	movlw	0
 36475  3DB6  3DF6               	addwfc	m_mem_cpy_len@s+1,f
 36476  3DB7  3001               	movlw	1
 36477  3DB8  07F3               	addwf	m_mem_cpy_len@d,f
 36478  3DB9  3000               	movlw	0
 36479  3DBA  3DF4               	addwfc	m_mem_cpy_len@d+1,f
 36480                           
 36481                           ;m_string.c: 47: len--;
 36482  3DBB  3001               	movlw	1
 36483  3DBC  02F7               	subwf	m_mem_cpy_len@len,f
 36484  3DBD  2DA3               	goto	l12135
 36485  3DBE                     __end_of_m_mem_cpy_len:	
 36486                           
 36487                           	psect	text160
 36488  338B                     __ptext160:	
 36489 ;; *************** function _crc_append *****************
 36490 ;; Defined at:
 36491 ;;		line 109 in file "src/protocol/crc16_sf.c"
 36492 ;; Parameters:    Size  Location     Type
 36493 ;;  message         2    8[BANK0 ] PTR unsigned char 
 36494 ;;		 -> cardDecBuf(18), comBuffer(128), mainSystemData(72), uart1Buffer(80), 
 36495 ;;  n               2   10[BANK0 ] unsigned int 
 36496 ;; Auto vars:     Size  Location     Type
 36497 ;;  crc             2   17[BANK0 ] unsigned int 
 36498 ;; Return value:  Size  Location     Type
 36499 ;;                  1    wreg      void 
 36500 ;; Registers used:
 36501 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36502 ;; Tracked objects:
 36503 ;;		On entry : 0/0
 36504 ;;		On exit  : 0/0
 36505 ;;		Unchanged: 0/0
 36506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36507 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36508 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36509 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 36510 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 36511 ;;Total ram usage:       11 bytes
 36512 ;; Hardware stack levels used:    1
 36513 ;; Hardware stack levels required when called:    3
 36514 ;; This function calls:
 36515 ;;		_crc_sum
 36516 ;; This function is called by:
 36517 ;;		_modbus_response_illgeal_function
 36518 ;;		_modbus_response_write_single_register
 36519 ;;		_modbus_response_command
 36520 ;;		_modbus_response_write_clib_data
 36521 ;;		_modbus_response_read_clib_data
 36522 ;;		_data_api_calibration_table_data_init
 36523 ;;		_data_api_system_data_init
 36524 ;;		_data_api_rt_data_save
 36525 ;;		_data_api_calibration_table_data_save
 36526 ;;		_rfid_comm_process_read_header
 36527 ;;		_rfid_comm_process_recharge
 36528 ;; This function uses a non-reentrant model
 36529 ;;
 36530                           
 36531                           
 36532                           ;psect for function _crc_append
 36533  338B                     _crc_append:	
 36534                           
 36535                           ;crc16_sf.c: 111: uint16_t crc;
 36536                           ;crc16_sf.c: 112: crc = crc_sum(message, n);
 36537                           
 36538                           ;incstack = 0
 36539                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36540  338B  0020               	movlb	0	; select bank0
 36541  338C  0829               	movf	crc_append@message+1,w
 36542  338D  00F4               	movwf	crc_sum@buf+1
 36543  338E  0828               	movf	crc_append@message,w
 36544  338F  00F3               	movwf	crc_sum@buf
 36545  3390  082B               	movf	crc_append@n+1,w
 36546  3391  00F6               	movwf	crc_sum@len+1
 36547  3392  082A               	movf	crc_append@n,w
 36548  3393  00F5               	movwf	crc_sum@len
 36549  3394  31AA  22EB         	fcall	_crc_sum
 36550  3396  0874               	movf	?_crc_sum+1,w
 36551  3397  0020               	movlb	0	; select bank0
 36552  3398  00B2               	movwf	crc_append@crc+1
 36553  3399  0873               	movf	?_crc_sum,w
 36554  339A  00B1               	movwf	crc_append@crc
 36555                           
 36556                           ;crc16_sf.c: 113: message[n] = (uint8_t)(crc & 0xff);
 36557  339B  082A               	movf	crc_append@n,w
 36558  339C  0728               	addwf	crc_append@message,w
 36559  339D  00AC               	movwf	??_crc_append
 36560  339E  082B               	movf	crc_append@n+1,w
 36561  339F  3D29               	addwfc	crc_append@message+1,w
 36562  33A0  00AD               	movwf	??_crc_append+1
 36563  33A1  082C               	movf	??_crc_append,w
 36564  33A2  0086               	movwf	6
 36565  33A3  082D               	movf	??_crc_append+1,w
 36566  33A4  0087               	movwf	7
 36567  33A5  0831               	movf	crc_append@crc,w
 36568  33A6  0081               	movwf	1
 36569                           
 36570                           ;crc16_sf.c: 114: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 36571  33A7  0832               	movf	crc_append@crc+1,w
 36572  33A8  00AC               	movwf	??_crc_append
 36573  33A9  082A               	movf	crc_append@n,w
 36574  33AA  3E01               	addlw	1
 36575  33AB  00AD               	movwf	??_crc_append+1
 36576  33AC  3000               	movlw	0
 36577  33AD  3D2B               	addwfc	crc_append@n+1,w
 36578  33AE  00AE               	movwf	??_crc_append+2
 36579  33AF  082D               	movf	??_crc_append+1,w
 36580  33B0  0728               	addwf	crc_append@message,w
 36581  33B1  00AF               	movwf	??_crc_append+3
 36582  33B2  082E               	movf	??_crc_append+2,w
 36583  33B3  3D29               	addwfc	crc_append@message+1,w
 36584  33B4  00B0               	movwf	??_crc_append+4
 36585  33B5  082F               	movf	??_crc_append+3,w
 36586  33B6  0086               	movwf	6
 36587  33B7  0830               	movf	??_crc_append+4,w
 36588  33B8  0087               	movwf	7
 36589  33B9  082C               	movf	??_crc_append,w
 36590  33BA  0081               	movwf	1
 36591  33BB  0008               	return
 36592  33BC                     __end_of_crc_append:	
 36593                           
 36594                           	psect	text161
 36595  2AEB                     __ptext161:	
 36596 ;; *************** function _crc_sum *****************
 36597 ;; Defined at:
 36598 ;;		line 80 in file "src/protocol/crc16_sf.c"
 36599 ;; Parameters:    Size  Location     Type
 36600 ;;  buf             2    3[COMMON] PTR unsigned char 
 36601 ;;		 -> cardDecBuf(18), cardIncBuf(18), comBuffer(128), Main_flowCalibrationTable(124), 
 36602 ;;		 -> mainSystemData(72), uart1Buffer(80), 
 36603 ;;  len             2    5[COMMON] unsigned int 
 36604 ;; Auto vars:     Size  Location     Type
 36605 ;;  crc             2    6[BANK0 ] unsigned int 
 36606 ;;  i               2    4[BANK0 ] unsigned int 
 36607 ;;  j               2    2[BANK0 ] unsigned int 
 36608 ;; Return value:  Size  Location     Type
 36609 ;;                  2    3[COMMON] unsigned int 
 36610 ;; Registers used:
 36611 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 36612 ;; Tracked objects:
 36613 ;;		On entry : 0/0
 36614 ;;		On exit  : 0/0
 36615 ;;		Unchanged: 0/0
 36616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36618 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 36619 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36620 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0
 36621 ;;Total ram usage:       12 bytes
 36622 ;; Hardware stack levels used:    1
 36623 ;; Hardware stack levels required when called:    2
 36624 ;; This function calls:
 36625 ;;		Nothing
 36626 ;; This function is called by:
 36627 ;;		_crc_verify
 36628 ;;		_crc_append
 36629 ;; This function uses a non-reentrant model
 36630 ;;
 36631                           
 36632                           
 36633                           ;psect for function _crc_sum
 36634  2AEB                     _crc_sum:	
 36635                           
 36636                           ;crc16_sf.c: 82: uint16_t crc=0xFFFF;
 36637                           
 36638                           ;incstack = 0
 36639                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
 36640  2AEB  30FF               	movlw	255
 36641  2AEC  0020               	movlb	0	; select bank0
 36642  2AED  00A6               	movwf	crc_sum@crc
 36643  2AEE  30FF               	movlw	255
 36644  2AEF  00A7               	movwf	crc_sum@crc+1
 36645                           
 36646                           ;crc16_sf.c: 83: uint16_t i, j;
 36647                           ;crc16_sf.c: 84: for ( j=0; j<len;j++){
 36648  2AF0  01A2               	clrf	crc_sum@j
 36649  2AF1  01A3               	clrf	crc_sum@j+1
 36650  2AF2                     l2418:	
 36651  2AF2  0876               	movf	crc_sum@len+1,w
 36652  2AF3  0223               	subwf	crc_sum@j+1,w
 36653  2AF4  1D03               	skipz
 36654  2AF5  2AF8               	goto	u11735
 36655  2AF6  0875               	movf	crc_sum@len,w
 36656  2AF7  0222               	subwf	crc_sum@j,w
 36657  2AF8                     u11735:	
 36658  2AF8  1803               	btfsc	3,0
 36659  2AF9  2B3C               	goto	l13153
 36660                           
 36661                           ;crc16_sf.c: 85: crc=crc ^*buf++;
 36662  2AFA  0873               	movf	crc_sum@buf,w
 36663  2AFB  0086               	movwf	6
 36664  2AFC  0874               	movf	crc_sum@buf+1,w
 36665  2AFD  0087               	movwf	7
 36666  2AFE  0826               	movf	crc_sum@crc,w
 36667  2AFF  0601               	xorwf	1,w
 36668  2B00  00A6               	movwf	crc_sum@crc
 36669  2B01  0827               	movf	crc_sum@crc+1,w
 36670  2B02  00A7               	movwf	crc_sum@crc+1
 36671  2B03  3001               	movlw	1
 36672  2B04  07F3               	addwf	crc_sum@buf,f
 36673  2B05  3000               	movlw	0
 36674  2B06  3DF4               	addwfc	crc_sum@buf+1,f
 36675                           
 36676                           ;crc16_sf.c: 86: for ( i=0; i<8; i++){
 36677  2B07  01A4               	clrf	crc_sum@i
 36678  2B08  01A5               	clrf	crc_sum@i+1
 36679  2B09  3000               	movlw	0
 36680  2B0A  0225               	subwf	crc_sum@i+1,w
 36681  2B0B  3008               	movlw	8
 36682  2B0C  1903               	skipnz
 36683  2B0D  0224               	subwf	crc_sum@i,w
 36684  2B0E  1803               	btfsc	3,0
 36685  2B0F  2B37               	goto	l13151
 36686  2B10                     l2420:	
 36687                           
 36688                           ;crc16_sf.c: 88: if(crc&0x0001){
 36689  2B10  1C26               	btfss	crc_sum@crc,0
 36690  2B11  2B22               	goto	l13145
 36691                           
 36692                           ;crc16_sf.c: 89: crc=crc>>1;
 36693  2B12  0827               	movf	crc_sum@crc+1,w
 36694  2B13  00A1               	movwf	??_crc_sum+1
 36695  2B14  0826               	movf	crc_sum@crc,w
 36696  2B15  00A0               	movwf	??_crc_sum
 36697  2B16  36A1               	lsrf	??_crc_sum+1,f
 36698  2B17  0CA0               	rrf	??_crc_sum,f
 36699  2B18  0820               	movf	??_crc_sum,w
 36700  2B19  00A6               	movwf	crc_sum@crc
 36701  2B1A  0821               	movf	??_crc_sum+1,w
 36702  2B1B  00A7               	movwf	crc_sum@crc+1
 36703                           
 36704                           ;crc16_sf.c: 90: crc=crc^ 0xa001;
 36705  2B1C  3001               	movlw	1
 36706  2B1D  0626               	xorwf	crc_sum@crc,w
 36707  2B1E  00A6               	movwf	crc_sum@crc
 36708  2B1F  30A0               	movlw	160
 36709  2B20  0627               	xorwf	crc_sum@crc+1,w
 36710  2B21  2B2B               	goto	L15
 36711  2B22                     l13145:	
 36712                           ;crc16_sf.c: 91: }else{
 36713                           
 36714                           
 36715                           ;crc16_sf.c: 92: crc=crc>>1;
 36716  2B22  0827               	movf	crc_sum@crc+1,w
 36717  2B23  00A1               	movwf	??_crc_sum+1
 36718  2B24  0826               	movf	crc_sum@crc,w
 36719  2B25  00A0               	movwf	??_crc_sum
 36720  2B26  36A1               	lsrf	??_crc_sum+1,f
 36721  2B27  0CA0               	rrf	??_crc_sum,f
 36722  2B28  0820               	movf	??_crc_sum,w
 36723  2B29  00A6               	movwf	crc_sum@crc
 36724  2B2A  0821               	movf	??_crc_sum+1,w
 36725  2B2B                     L15:	
 36726  2B2B  00A7               	movwf	crc_sum@crc+1
 36727  2B2C  3001               	movlw	1
 36728  2B2D  07A4               	addwf	crc_sum@i,f
 36729  2B2E  3000               	movlw	0
 36730  2B2F  3DA5               	addwfc	crc_sum@i+1,f
 36731  2B30  3000               	movlw	0
 36732  2B31  0225               	subwf	crc_sum@i+1,w
 36733  2B32  3008               	movlw	8
 36734  2B33  1903               	skipnz
 36735  2B34  0224               	subwf	crc_sum@i,w
 36736  2B35  1C03               	skipc
 36737  2B36  2B10               	goto	l2420
 36738  2B37                     l13151:	
 36739  2B37  3001               	movlw	1
 36740  2B38  07A2               	addwf	crc_sum@j,f
 36741  2B39  3000               	movlw	0
 36742  2B3A  3DA3               	addwfc	crc_sum@j+1,f
 36743  2B3B  2AF2               	goto	l2418
 36744  2B3C                     l13153:	
 36745                           
 36746                           ;crc16_sf.c: 93: }
 36747                           ;crc16_sf.c: 94: }
 36748                           ;crc16_sf.c: 96: }
 36749                           ;crc16_sf.c: 97: return ( crc);
 36750  2B3C  0827               	movf	crc_sum@crc+1,w
 36751  2B3D  00F4               	movwf	?_crc_sum+1
 36752  2B3E  0826               	movf	crc_sum@crc,w
 36753  2B3F  00F3               	movwf	?_crc_sum
 36754  2B40  0008               	return
 36755  2B41                     __end_of_crc_sum:	
 36756                           
 36757                           	psect	text162
 36758  3E82                     __ptext162:	
 36759 ;; *************** function ___wmul *****************
 36760 ;; Defined at:
 36761 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 36762 ;; Parameters:    Size  Location     Type
 36763 ;;  multiplier      2    3[COMMON] unsigned int 
 36764 ;;  multiplicand    2    5[COMMON] unsigned int 
 36765 ;; Auto vars:     Size  Location     Type
 36766 ;;  product         2    0[BANK0 ] unsigned int 
 36767 ;; Return value:  Size  Location     Type
 36768 ;;                  2    3[COMMON] unsigned int 
 36769 ;; Registers used:
 36770 ;;		wreg, status,2, status,0
 36771 ;; Tracked objects:
 36772 ;;		On entry : 0/0
 36773 ;;		On exit  : 0/0
 36774 ;;		Unchanged: 0/0
 36775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36776 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36777 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36779 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36780 ;;Total ram usage:        6 bytes
 36781 ;; Hardware stack levels used:    1
 36782 ;; Hardware stack levels required when called:    2
 36783 ;; This function calls:
 36784 ;;		Nothing
 36785 ;; This function is called by:
 36786 ;;		_data_api_calibration_table_data_init
 36787 ;;		_ui_key_process_cancel
 36788 ;;		_ui_key_set_process
 36789 ;; This function uses a non-reentrant model
 36790 ;;
 36791                           
 36792                           
 36793                           ;psect for function ___wmul
 36794  3E82                     ___wmul:	
 36795                           
 36796                           ;incstack = 0
 36797                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 36798  3E82  0020               	movlb	0	; select bank0
 36799  3E83  01A0               	clrf	___wmul@product
 36800  3E84  01A1               	clrf	___wmul@product+1
 36801  3E85                     l14563:	
 36802  3E85  1C73               	btfss	___wmul@multiplier,0
 36803  3E86  2E8C               	goto	l2697
 36804  3E87  0875               	movf	___wmul@multiplicand,w
 36805  3E88  0020               	movlb	0	; select bank0
 36806  3E89  07A0               	addwf	___wmul@product,f
 36807  3E8A  0876               	movf	___wmul@multiplicand+1,w
 36808  3E8B  3DA1               	addwfc	___wmul@product+1,f
 36809  3E8C                     l2697:	
 36810  3E8C  3001               	movlw	1
 36811  3E8D                     u13335:	
 36812  3E8D  35F5               	lslf	___wmul@multiplicand,f
 36813  3E8E  0DF6               	rlf	___wmul@multiplicand+1,f
 36814  3E8F  0B89               	decfsz	9,f
 36815  3E90  2E8D               	goto	u13335
 36816  3E91  3001               	movlw	1
 36817  3E92                     u13345:	
 36818  3E92  36F4               	lsrf	___wmul@multiplier+1,f
 36819  3E93  0CF3               	rrf	___wmul@multiplier,f
 36820  3E94  0B89               	decfsz	9,f
 36821  3E95  2E92               	goto	u13345
 36822  3E96  0873               	movf	___wmul@multiplier,w
 36823  3E97  0474               	iorwf	___wmul@multiplier+1,w
 36824  3E98  1D03               	btfss	3,2
 36825  3E99  2E85               	goto	l14563
 36826  3E9A  0020               	movlb	0	; select bank0
 36827  3E9B  0821               	movf	___wmul@product+1,w
 36828  3E9C  00F4               	movwf	?___wmul+1
 36829  3E9D  0820               	movf	___wmul@product,w
 36830  3E9E  00F3               	movwf	?___wmul
 36831  3E9F  0008               	return
 36832  3EA0                     __end_of___wmul:	
 36833                           
 36834                           	psect	intentry
 36835  0004                     __pintentry:	
 36836 ;; *************** function _INTERRUPT_InterruptManager *****************
 36837 ;; Defined at:
 36838 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 36839 ;; Parameters:    Size  Location     Type
 36840 ;;		None
 36841 ;; Auto vars:     Size  Location     Type
 36842 ;;		None
 36843 ;; Return value:  Size  Location     Type
 36844 ;;                  1    wreg      void 
 36845 ;; Registers used:
 36846 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36847 ;; Tracked objects:
 36848 ;;		On entry : 0/0
 36849 ;;		On exit  : 0/0
 36850 ;;		Unchanged: 0/0
 36851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36854 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36855 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36856 ;;Total ram usage:        1 bytes
 36857 ;; Hardware stack levels used:    1
 36858 ;; Hardware stack levels required when called:    1
 36859 ;; This function calls:
 36860 ;;		_EUSART1_Receive_ISR
 36861 ;;		_EUSART1_Transmit_ISR
 36862 ;;		_TMR0_ISR
 36863 ;;		_TMR1_ISR
 36864 ;; This function is called by:
 36865 ;;		Interrupt level 1
 36866 ;; This function uses a non-reentrant model
 36867 ;;
 36868                           
 36869  0004                     _INTERRUPT_InterruptManager:	
 36870                           
 36871                           ;incstack = 0
 36872  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 36873                           
 36874                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 36875  0005  3180               	pagesel	$
 36876  0006  0020               	movlb	0	; select bank0
 36877  0007  087F               	movf	127,w
 36878  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 36879                           
 36880                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 36881  0009  1A8B               	btfsc	11,5	;volatile
 36882  000A  1D0B               	btfss	11,2	;volatile
 36883  000B  2810               	goto	i1l136
 36884                           
 36885                           ;interrupt_manager.c: 56: {
 36886                           ;interrupt_manager.c: 57: TMR0_ISR();
 36887  000C  31B5  254D  3180   	fcall	_TMR0_ISR
 36888                           
 36889                           ;interrupt_manager.c: 58: }
 36890  000F  2832               	goto	i1l144
 36891  0010                     i1l136:	
 36892                           
 36893                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 36894  0010  1F0B               	btfss	11,6	;volatile
 36895  0011  281C               	goto	i1l138
 36896  0012  0021               	movlb	1	; select bank1
 36897  0013  1E11               	btfss	17,4	;volatile
 36898  0014  281C               	goto	i1l138
 36899  0015  0020               	movlb	0	; select bank0
 36900  0016  1E11               	btfss	17,4	;volatile
 36901  0017  281C               	goto	i1l138
 36902                           
 36903                           ;interrupt_manager.c: 60: {
 36904                           ;interrupt_manager.c: 61: EUSART1_Transmit_ISR();
 36905  0018  3180  2003  3180   	fcall	_EUSART1_Transmit_ISR
 36906                           
 36907                           ;interrupt_manager.c: 62: }
 36908  001B  2832               	goto	i1l144
 36909  001C                     i1l138:	
 36910                           
 36911                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 36912  001C  1F0B               	btfss	11,6	;volatile
 36913  001D  2828               	goto	i1l140
 36914  001E  0021               	movlb	1	; select bank1
 36915  001F  1E91               	btfss	17,5	;volatile
 36916  0020  2828               	goto	i1l140
 36917  0021  0020               	movlb	0	; select bank0
 36918  0022  1E91               	btfss	17,5	;volatile
 36919  0023  2828               	goto	i1l140
 36920                           
 36921                           ;interrupt_manager.c: 64: {
 36922                           ;interrupt_manager.c: 65: EUSART1_Receive_ISR();
 36923  0024  31BF  2742  3180   	fcall	_EUSART1_Receive_ISR
 36924                           
 36925                           ;interrupt_manager.c: 66: }
 36926  0027  2832               	goto	i1l144
 36927  0028                     i1l140:	
 36928                           
 36929                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 36930  0028  1F0B               	btfss	11,6	;volatile
 36931  0029  2832               	goto	i1l144
 36932  002A  0021               	movlb	1	; select bank1
 36933  002B  1C11               	btfss	17,0	;volatile
 36934  002C  2832               	goto	i1l144
 36935  002D  0020               	movlb	0	; select bank0
 36936  002E  1C11               	btfss	17,0	;volatile
 36937  002F  2832               	goto	i1l144
 36938                           
 36939                           ;interrupt_manager.c: 68: {
 36940                           ;interrupt_manager.c: 69: TMR1_ISR();
 36941  0030  31BC  2410         	fcall	_TMR1_ISR
 36942  0032                     i1l144:	
 36943                           ;interrupt_manager.c: 71: else
 36944                           ;interrupt_manager.c: 72: {
 36945                           
 36946                           ;interrupt_manager.c: 70: }
 36947                           
 36948  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 36949  0033  0020               	movlb	0	; select bank0
 36950  0034  00FF               	movwf	127
 36951  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 36952  0036  0009               	retfie
 36953  0037                     __end_of_INTERRUPT_InterruptManager:	
 36954                           
 36955                           	psect	text164
 36956  3C10                     __ptext164:	
 36957 ;; *************** function _TMR1_ISR *****************
 36958 ;; Defined at:
 36959 ;;		line 156 in file "mcc_generated_files/tmr1.c"
 36960 ;; Parameters:    Size  Location     Type
 36961 ;;		None
 36962 ;; Auto vars:     Size  Location     Type
 36963 ;;		None
 36964 ;; Return value:  Size  Location     Type
 36965 ;;                  1    wreg      void 
 36966 ;; Registers used:
 36967 ;;		wreg, status,2, status,0
 36968 ;; Tracked objects:
 36969 ;;		On entry : 0/0
 36970 ;;		On exit  : 0/0
 36971 ;;		Unchanged: 0/0
 36972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36975 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36976 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36977 ;;Total ram usage:        1 bytes
 36978 ;; Hardware stack levels used:    1
 36979 ;; This function calls:
 36980 ;;		Nothing
 36981 ;; This function is called by:
 36982 ;;		_INTERRUPT_InterruptManager
 36983 ;; This function uses a non-reentrant model
 36984 ;;
 36985                           
 36986                           
 36987                           ;psect for function _TMR1_ISR
 36988  3C10                     _TMR1_ISR:	
 36989                           
 36990                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
 36991                           
 36992                           ;incstack = 0
 36993                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0]
 36994  3C10  0020               	movlb	0	; select bank0
 36995  3C11  1011               	bcf	17,0	;volatile
 36996                           
 36997                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 36998  3C12  0022               	movlb	2	; select bank2
 36999  3C13  086E               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 37000  3C14  0020               	movlb	0	; select bank0
 37001  3C15  0097               	movwf	23	;volatile
 37002                           
 37003                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
 37004  3C16  0022               	movlb	2	; select bank2
 37005  3C17  086D               	movf	_timer1ReloadVal^(0+256),w	;volatile
 37006  3C18  0020               	movlb	0	; select bank0
 37007  3C19  0096               	movwf	22	;volatile
 37008                           
 37009                           ;tmr1.c: 173: systemTickerSec++;
 37010  3C1A  3001               	movlw	1
 37011  3C1B  00F0               	movwf	??_TMR1_ISR
 37012  3C1C  0870               	movf	??_TMR1_ISR,w
 37013  3C1D  0022               	movlb	2	; select bank2
 37014  3C1E  07C2               	addwf	_systemTickerSec^(0+256),f
 37015                           
 37016                           ;tmr1.c: 174: Event |= (0x01<<5);
 37017  3C1F  0021               	movlb	1	; select bank1
 37018  3C20  16C8               	bsf	_Event^(0+128),5
 37019  3C21  0008               	return
 37020  3C22                     __end_of_TMR1_ISR:	
 37021                           
 37022                           	psect	text165
 37023  354D                     __ptext165:	
 37024 ;; *************** function _TMR0_ISR *****************
 37025 ;; Defined at:
 37026 ;;		line 111 in file "mcc_generated_files/tmr0.c"
 37027 ;; Parameters:    Size  Location     Type
 37028 ;;		None
 37029 ;; Auto vars:     Size  Location     Type
 37030 ;;		None
 37031 ;; Return value:  Size  Location     Type
 37032 ;;                  1    wreg      void 
 37033 ;; Registers used:
 37034 ;;		wreg, status,2, status,0
 37035 ;; Tracked objects:
 37036 ;;		On entry : 0/0
 37037 ;;		On exit  : 0/0
 37038 ;;		Unchanged: 0/0
 37039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37040 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37041 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37042 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37043 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37044 ;;Total ram usage:        1 bytes
 37045 ;; Hardware stack levels used:    1
 37046 ;; This function calls:
 37047 ;;		Nothing
 37048 ;; This function is called by:
 37049 ;;		_INTERRUPT_InterruptManager
 37050 ;; This function uses a non-reentrant model
 37051 ;;
 37052                           
 37053                           
 37054                           ;psect for function _TMR0_ISR
 37055  354D                     _TMR0_ISR:	
 37056                           
 37057                           ;tmr0.c: 115: INTCONbits.TMR0IF = 0;
 37058                           
 37059                           ;incstack = 0
 37060                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0]
 37061  354D  110B               	bcf	11,2	;volatile
 37062                           
 37063                           ;tmr0.c: 117: TMR0 = timer0ReloadVal;
 37064  354E  0022               	movlb	2	; select bank2
 37065  354F  086F               	movf	_timer0ReloadVal^(0+256),w	;volatile
 37066  3550  0020               	movlb	0	; select bank0
 37067  3551  0095               	movwf	21	;volatile
 37068                           
 37069                           ;tmr0.c: 122: systemTikerms+=10;
 37070  3552  300A               	movlw	10
 37071  3553  0022               	movlb	2	; select bank2
 37072  3554  07B2               	addwf	_systemTikerms^(0+256),f
 37073  3555  3000               	movlw	0
 37074  3556  3DB3               	addwfc	(_systemTikerms+1)^(0+256),f
 37075                           
 37076                           ;tmr0.c: 123: globlTickerms+=10;
 37077  3557  300A               	movlw	10
 37078  3558  07B0               	addwf	_globlTickerms^(0+256),f
 37079  3559  3000               	movlw	0
 37080  355A  3DB1               	addwfc	(_globlTickerms+1)^(0+256),f
 37081                           
 37082                           ;tmr0.c: 124: calVolumeTs+=10;
 37083  355B  300A               	movlw	10
 37084  355C  0023               	movlb	3	; select bank3
 37085  355D  07A2               	addwf	_calVolumeTs^(0+384),f
 37086  355E  3000               	movlw	0
 37087  355F  3DA3               	addwfc	(_calVolumeTs+1)^(0+384),f
 37088                           
 37089                           ;tmr0.c: 125: if(calVolumeTs>=500){
 37090  3560  3001               	movlw	1
 37091  3561  0223               	subwf	(_calVolumeTs+1)^(0+384),w
 37092  3562  30F4               	movlw	244
 37093  3563  1903               	skipnz
 37094  3564  0222               	subwf	_calVolumeTs^(0+384),w
 37095  3565  1C03               	skipc
 37096  3566  2D70               	goto	i1l11289
 37097                           
 37098                           ;tmr0.c: 126: calVolumeTs=0;
 37099  3567  01A2               	clrf	_calVolumeTs^(0+384)
 37100  3568  01A3               	clrf	(_calVolumeTs+1)^(0+384)
 37101                           
 37102                           ;tmr0.c: 127: Event |= (uint8_t)(0x01<<7);
 37103  3569  0021               	movlb	1	; select bank1
 37104  356A  17C8               	bsf	_Event^(0+128),7
 37105                           
 37106                           ;tmr0.c: 128: calVolumeTimeSec++;
 37107  356B  3001               	movlw	1
 37108  356C  00F0               	movwf	??_TMR0_ISR
 37109  356D  0870               	movf	??_TMR0_ISR,w
 37110  356E  0022               	movlb	2	; select bank2
 37111  356F  07C1               	addwf	_calVolumeTimeSec^(0+256),f
 37112  3570                     i1l11289:	
 37113                           
 37114                           ;tmr0.c: 130: }
 37115                           ;tmr0.c: 131: Event |= (0x01<<4);
 37116  3570  0021               	movlb	1	; select bank1
 37117  3571  1648               	bsf	_Event^(0+128),4
 37118                           
 37119                           ;tmr0.c: 134: if(uart1ReceivedTimer){
 37120  3572  0022               	movlb	2	; select bank2
 37121  3573  0840               	movf	_uart1ReceivedTimer^(0+256),w
 37122  3574  1903               	btfsc	3,2
 37123  3575  0008               	return
 37124                           
 37125                           ;tmr0.c: 135: uart1ReceivedTimeout+=10;
 37126  3576  300A               	movlw	10
 37127  3577  07AE               	addwf	_uart1ReceivedTimeout^(0+256),f
 37128  3578  3000               	movlw	0
 37129  3579  3DAF               	addwfc	(_uart1ReceivedTimeout+1)^(0+256),f
 37130                           
 37131                           ;tmr0.c: 136: if(uart1ReceivedTimeout>=100)
 37132  357A  3000               	movlw	0
 37133  357B  022F               	subwf	(_uart1ReceivedTimeout+1)^(0+256),w
 37134  357C  3064               	movlw	100
 37135  357D  1903               	skipnz
 37136  357E  022E               	subwf	_uart1ReceivedTimeout^(0+256),w
 37137  357F  1C03               	skipc
 37138  3580  0008               	return
 37139                           
 37140                           ;tmr0.c: 137: {
 37141                           ;tmr0.c: 138: uart1ReceivedTimer=0;
 37142  3581  01C0               	clrf	_uart1ReceivedTimer^(0+256)
 37143                           
 37144                           ;tmr0.c: 139: Event |= (0x01<<2);
 37145  3582  0021               	movlb	1	; select bank1
 37146  3583  1548               	bsf	_Event^(0+128),2
 37147  3584  0008               	return
 37148  3585                     __end_of_TMR0_ISR:	
 37149                           
 37150                           	psect	text166
 37151  0003                     __ptext166:	
 37152 ;; *************** function _EUSART1_Transmit_ISR *****************
 37153 ;; Defined at:
 37154 ;;		line 32 in file "mcc_generated_files/eusart1.c"
 37155 ;; Parameters:    Size  Location     Type
 37156 ;;		None
 37157 ;; Auto vars:     Size  Location     Type
 37158 ;;		None
 37159 ;; Return value:  Size  Location     Type
 37160 ;;                  1    wreg      void 
 37161 ;; Registers used:
 37162 ;;		None
 37163 ;; Tracked objects:
 37164 ;;		On entry : 0/0
 37165 ;;		On exit  : 0/0
 37166 ;;		Unchanged: 0/0
 37167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37171 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37172 ;;Total ram usage:        0 bytes
 37173 ;; Hardware stack levels used:    1
 37174 ;; This function calls:
 37175 ;;		Nothing
 37176 ;; This function is called by:
 37177 ;;		_INTERRUPT_InterruptManager
 37178 ;; This function uses a non-reentrant model
 37179 ;;
 37180                           
 37181                           
 37182                           ;psect for function _EUSART1_Transmit_ISR
 37183  0003                     _EUSART1_Transmit_ISR:	
 37184                           
 37185                           ;incstack = 0
 37186                           ; Regs used in _EUSART1_Transmit_ISR: []
 37187  0003  0008               	return
 37188  0004                     __end_of_EUSART1_Transmit_ISR:	
 37189                           
 37190                           	psect	text167
 37191  3F42                     __ptext167:	
 37192 ;; *************** function _EUSART1_Receive_ISR *****************
 37193 ;; Defined at:
 37194 ;;		line 111 in file "mcc_generated_files/eusart1.c"
 37195 ;; Parameters:    Size  Location     Type
 37196 ;;		None
 37197 ;; Auto vars:     Size  Location     Type
 37198 ;;  t8              1    1[COMMON] unsigned char 
 37199 ;; Return value:  Size  Location     Type
 37200 ;;                  1    wreg      void 
 37201 ;; Registers used:
 37202 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 37203 ;; Tracked objects:
 37204 ;;		On entry : 0/0
 37205 ;;		On exit  : 0/0
 37206 ;;		Unchanged: 0/0
 37207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37209 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37210 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37211 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37212 ;;Total ram usage:        2 bytes
 37213 ;; Hardware stack levels used:    1
 37214 ;; This function calls:
 37215 ;;		Nothing
 37216 ;; This function is called by:
 37217 ;;		_INTERRUPT_InterruptManager
 37218 ;; This function uses a non-reentrant model
 37219 ;;
 37220                           
 37221                           
 37222                           ;psect for function _EUSART1_Receive_ISR
 37223  3F42                     _EUSART1_Receive_ISR:	
 37224                           
 37225                           ;eusart1.c: 113: uint8_t t8;
 37226                           ;eusart1.c: 114: if(1 == RC1STAbits.OERR)
 37227                           
 37228                           ;incstack = 0
 37229                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 37230  3F42  0023               	movlb	3	; select bank3
 37231  3F43  1C9D               	btfss	29,1	;volatile
 37232  3F44  2F48               	goto	i1l11303
 37233                           
 37234                           ;eusart1.c: 115: {
 37235                           ;eusart1.c: 118: RC1STAbits.CREN = 0;
 37236  3F45  121D               	bcf	29,4	;volatile
 37237                           
 37238                           ;eusart1.c: 119: RC1STAbits.CREN = 1;
 37239  3F46  161D               	bsf	29,4	;volatile
 37240                           
 37241                           ;eusart1.c: 121: }
 37242  3F47  0008               	return
 37243  3F48                     i1l11303:	
 37244                           
 37245                           ;eusart1.c: 122: else{
 37246                           ;eusart1.c: 123: t8=RC1REG;
 37247  3F48  0819               	movf	25,w	;volatile
 37248  3F49  00F0               	movwf	??_EUSART1_Receive_ISR
 37249  3F4A  0870               	movf	??_EUSART1_Receive_ISR,w
 37250  3F4B  00F1               	movwf	EUSART1_Receive_ISR@t8
 37251                           
 37252                           ;eusart1.c: 124: if(uart1ReceivedCount<80)
 37253  3F4C  3000               	movlw	0
 37254  3F4D  0022               	movlb	2	; select bank2
 37255  3F4E  022D               	subwf	(_uart1ReceivedCount+1)^(0+256),w
 37256  3F4F  3050               	movlw	80
 37257  3F50  1903               	skipnz
 37258  3F51  022C               	subwf	_uart1ReceivedCount^(0+256),w
 37259  3F52  1803               	skipnc
 37260  3F53  2F61               	goto	i1l11309
 37261                           
 37262                           ;eusart1.c: 125: {
 37263                           ;eusart1.c: 126: uart1Buffer[uart1ReceivedCount]=t8;
 37264  3F54  0871               	movf	EUSART1_Receive_ISR@t8,w
 37265  3F55  00F0               	movwf	??_EUSART1_Receive_ISR
 37266  3F56  082C               	movf	_uart1ReceivedCount^(0+256),w
 37267  3F57  3EA0               	addlw	160
 37268  3F58  0086               	movwf	6
 37269  3F59  3004               	movlw	4	; select bank9/10
 37270  3F5A  0087               	movwf	7
 37271  3F5B  0870               	movf	??_EUSART1_Receive_ISR,w
 37272  3F5C  0081               	movwf	1
 37273                           
 37274                           ;eusart1.c: 127: uart1ReceivedCount++;
 37275  3F5D  3001               	movlw	1
 37276  3F5E  07AC               	addwf	_uart1ReceivedCount^(0+256),f
 37277  3F5F  3000               	movlw	0
 37278  3F60  3DAD               	addwfc	(_uart1ReceivedCount+1)^(0+256),f
 37279  3F61                     i1l11309:	
 37280                           
 37281                           ;eusart1.c: 128: }
 37282                           ;eusart1.c: 129: uart1ReceivedTimer=1;
 37283  3F61  01C0               	clrf	_uart1ReceivedTimer^(0+256)
 37284  3F62  0AC0               	incf	_uart1ReceivedTimer^(0+256),f
 37285                           
 37286                           ;eusart1.c: 130: uart1ReceivedTimeout=0;
 37287  3F63  01AE               	clrf	_uart1ReceivedTimeout^(0+256)
 37288  3F64  01AF               	clrf	(_uart1ReceivedTimeout+1)^(0+256)
 37289  3F65  0008               	return
 37290  3F66                     __end_of_EUSART1_Receive_ISR:	
 37291  007E                     btemp	set	126	;btemp
 37292  007E                     int$flags	set	126
 37293  007E                     wtemp0	set	126


Data Sizes:
    Strings     172
    Constant    112
    Data        82
    BSS         199
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80     37      80
    BANK2            80      0      80
    BANK3            80      3      53
    BANK4            80      0      72
    BANK5            80      0      40
    BANK6            32      0       0
    BANK7             0      0       0
    BANK8             8      0       0
    BANK10           80      0       0
    BANK11            4      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), comBuffer(BIGRAM[128]), mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), 
		 -> uart1Buffer(ABS[80]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), 
		 -> mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    pcd_mifare_transceive@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), cardDecBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), 

    mifare_write@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 

    mifare_read@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> rdLen(BANK1[1]), __t8(BANK1[1]), 

    mifare_read@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    picc_authenticate@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_authenticate@key	PTR struct . size(2) Largest target is 6
		 -> userKeyB(BANK3[6]), defaultKeyA(CODE[6]), 

    picc_select@responseBuffer	PTR unsigned char  size(1) Largest target is 9
		 -> picc_select@buffer(BANK1[9]), 

    picc_select@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_req_a_or_wakeup_a@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> mfapi_is_new_card_present@bufferSize(BANK0[1]), 

    picc_req_a_or_wakeup_a@bufferATQA	PTR unsigned char  size(1) Largest target is 2
		 -> mfapi_is_new_card_present@bufferATQA(BANK0[2]), 

    pcd_comm_with_picc@rlen	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@cmdBufferSize(BANK0[1]), picc_select@responseLength(BANK1[1]), mfapi_is_new_card_present@bufferSize(BANK0[1]), rdLen(BANK1[1]), 
		 -> __t8(BANK1[1]), NULL(NULL[0]), 

    pcd_comm_with_picc@rbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    pcd_comm_with_picc@sbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 
		 -> cardUidBlockBuf(BANK8[18]), 

    pcd_comm_with_picc@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@validBits(BANK0[1]), picc_select@txLastBits(BANK1[1]), picc_req_a_or_wakeup_a@validBits(BANK0[1]), NULL(NULL[0]), 

    mfrc522_hal_calculate_crc@result	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), pcd_comm_with_picc@controlBuffer(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    mfrc522_hal_calculate_crc@data	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> NULL(NULL[0]), 

    mfrc522_bal_read_fifo_len_ex@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    mfrc522_bal_write_reg_len@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    adc_mcp3241_read_convert_16@sta	PTR unsigned char  size(1) Largest target is 1
		 -> flow_sampling_process@i(BANK0[1]), 

    lcd_disp_str@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_24(CODE[9]), STR_22(CODE[9]), STR_21(CODE[9]), STR_20(CODE[9]), 
		 -> STR_19(CODE[9]), STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), 
		 -> STR_15(CODE[9]), STR_7(CODE[9]), STR_4(CODE[9]), STR_3(CODE[9]), 
		 -> STR_1(CODE[9]), lcdBuf(BANK2[9]), 

    lcd_set_com_seg@p	PTR unsigned char  size(1) Largest target is 24
		 -> pLCD(BANK3[24]), 

    pLcdReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR15[1]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 128
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), pLCD(BANK3[24]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 128
		 -> crc_verify@expected(BANK0[2]), pcd_mifare_transceive@cmdBuffer(BANK0[18]), LCDDATA0(SFR15[1]), cardWriteBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> mainSystemData(BANK4[72]), 

    m_mem_set@buf	PTR unsigned char  size(2) Largest target is 128
		 -> pLCD(BANK3[24]), PiccUid(BANK3[12]), comBuffer(BIGRAM[128]), flashOpStr(BANK2[21]), 
		 -> lcdBuf(BANK2[9]), 

    rfid_comm_process_recharge@stpDec	PTR struct . size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), 

    rfid_comm_process_recharge@stpInc	PTR struct . size(1) Largest target is 18
		 -> cardIncBuf(BANK8[18]), 

    rfid_comm_process_read_header@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    create_card_key_b@cckey	PTR unsigned char  size(1) Largest target is 72
		 -> mainSystemData(BANK4[72]), 

    create_card_key_b@uid	PTR unsigned char  size(1) Largest target is 18
		 -> cardUidBlockBuf(BANK8[18]), 

    create_card_key_b@keyb	PTR unsigned char  size(1) Largest target is 6
		 -> userKeyB(BANK3[6]), 

    data_api_calibration_table_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_rt_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_calibration_table_data_init@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_read_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), uart1Buffer(ABS[80]), 

    data_api_write_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), mainSystemData(BANK4[72]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_clib_data@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_clib_data@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_clib_data@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_clib_data@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    key_process_up_down_variable_speed_ex@val	PTR int  size(1) Largest target is 8
		 -> uiAdjbuf(BANK2[8]), 

    ui_disp_str_num_ex@str	PTR unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    ui_disp_str_num@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[4]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@s	PTR unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[5]), STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 
		 -> STR_11(CODE[6]), STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@d	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_head_hide@str	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_uint32_2_str@buf	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    my_uart1_send_poll@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _ui_key_waite_up_ex->_get_globle_ticker
    _ui_key_set_process->___awdiv
    _ui_key_set_process->_m_mem_cpy_len
    _ui_disp_menu->_lcd_clear_buffer
    _ui_disp_transfer_money->___lldiv
    _ui_disp_transfer_money->_lcd_clear_buffer
    _ui_disp_transfer_money->_ui_uint32_2_str
    _ui_disp_str_num_ex->___lwdiv
    _ui_disp_str_num_ex->___lwmod
    _ui_disp_str_num_ex->_lcd_clear_buffer
    _ui_disp_str_num_ex->_ui_mem_cpy
    _ui_disp_set_price->_lcd_clear_buffer
    _ui_disp_set_price->_ui_uint32_2_str
    _ui_disp_set_line->_lcd_clear_buffer
    _ui_disp_set_line->_ui_uint32_2_str
    _ui_disp_set_imd_flow_uint->_lcd_clear_buffer
    _ui_disp_set_calib->___awdiv
    _ui_disp_set_calib->___awmod
    _ui_disp_set_calib->_lcd_clear_buffer
    _ui_disp_set_calib->_ui_uint32_2_str
    _ui_disp_str_num->___lwdiv
    _ui_disp_str_num->___lwmod
    _ui_disp_str_num->_lcd_clear_buffer
    _ui_disp_str_num->_ui_mem_cpy
    _ui_disp_flow->___lldiv
    _ui_disp_flow->_lcd_clear_buffer
    _ui_disp_flow->_ui_uint32_2_str
    _ui_disp_totale_v->_lcd_clear_buffer
    _ui_disp_totale_v->_ui_uint32_2_str
    _ui_key_process_enter->___awdiv
    _ui_key_process_enter->_m_mem_cpy_len
    _ui_key_waite_up->_get_globle_ticker
    _ui_key_process_cancel->___awdiv
    _timer1_irq_callback->_valve_stop
    _ui_disp_balance_and_volume->_lcd_clear_buffer
    _ui_disp_balance_and_volume->_ui_uint32_2_str
    _m_math_pow->___lmul
    _ui_disp_flow_error->_lcd_clear_buffer
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_code->_lcd_disp_code_0
    _lcd_disp_code->_lcd_disp_code_1
    _lcd_disp_code->_lcd_disp_code_2
    _lcd_disp_code->_lcd_disp_code_3
    _lcd_disp_code->_lcd_disp_code_4
    _lcd_disp_code->_lcd_disp_code_5
    _lcd_disp_code->_lcd_disp_code_6
    _lcd_disp_code->_lcd_disp_code_7
    _lcd_clear_buffer->_m_mem_set
    _lcd_set_com_seg->___awdiv
    _rfid_comm_process_recharge->_m_mem_cpy_len
    _rfid_comm_process_read_header->_create_card_key_b
    _rfid_comm_process_read_header->_m_mem_cpy_len
    _pcd_mifare_transceive->_m_mem_cpy_len
    _data_api_rt_data_save->_data_api_write_eeprom
    _data_api_rt_data_save->_m_mem_cpy_len
    _picc_select->___awdiv
    _picc_select->_mfrc522_bal_read_reg
    _picc_select->_mfrc522_bal_write_reg
    ___bmul->___awdiv
    _pcd_comm_with_picc->_mfrc522_bal_read_fifo_len_ex
    _pcd_comm_with_picc->_mfrc522_bal_read_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg_len
    _mfrc522_hal_calculate_crc->_mfrc522_bal_read_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg_len
    _mfrc522_bal_write_reg_len->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_fifo_len_ex->_mfrc522_bal_write_read_via_spi
    _key_scan_call->_delay
    _in_app_vavle_on->_valve_on
    _modbus_response_process->_modbus_response_illgeal_function
    _modbus_response_write_single_register->_modbus_response_illgeal_function
    _modbus_response_write_clib_data->_modbus_response_illgeal_function
    _data_api_calibration_table_data_save->_data_api_write_eeprom
    _data_api_calibration_table_data_save->_m_mem_cpy_len
    _modbus_response_read_clib_data->_data_api_read_eeprom
    _modbus_response_read_clib_data->_modbus_response_illgeal_function
    _getRegisterVal->___lldiv
    _mfapi_pcd_init->_mfrc522_bal_read_reg
    _mfrc522_hal_init->_mfrc522_bal_write_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_write_reg
    _mfrc522_bal_write_reg->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_reg->_mfrc522_bal_write_read_via_spi
    _lcd_config->_lcd_disp_all
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _app_flow_rt_volume_cal_ex->___lldiv
    _app_flow_rt_balance_money_cal->___lldiv
    _app_flow_money_off->_in_app_vavle_off
    _in_app_vavle_off->_valve_off
    _app_flow_get_adcAverageValue->___lldiv
    _app_flow_adc_2_flow->___lldiv
    ___lldiv->___lmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _iic_start->_delay
    _iic_send_byte->_iic_waite_ack
    _iic_stop->_delay
    _iic_received_byte_if_ack->_iic_received_byte
    _data_api_system_data_init->_data_api_read_eeprom
    _data_api_system_data_init->_data_api_write_eeprom
    _data_api_system_data_init->_m_mem_cpy_len
    _data_api_calibration_table_data_init->_data_api_read_eeprom
    _data_api_calibration_table_data_init->_data_api_write_eeprom
    _data_api_calibration_table_data_init->_m_mem_cpy_len
    _data_api_write_eeprom->_DATAEE_WriteByte
    _data_api_read_eeprom->_DATAEE_ReadByte
    _crc_verify->_m_mem_cpy_len
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR

Critical Paths under _main in BANK0

    _ui_start_display->_ui_disp_str_num
    _ui_key_process->_ui_key_process_up_down
    _ui_key_set_process->_data_api_calibration_table_data_save
    _ui_key_process_up_down->_key_process_up_down_variable_speed_ex
    _key_process_up_down_variable_speed_ex->_ui_disp_menu
    _ui_disp_menu->_ui_disp_flow
    _ui_disp_transfer_money->_ui_uint32_2_str
    _ui_disp_str_num_ex->_lcd_disp_str
    _ui_disp_small_flow_how_care->_ui_disp_str_num
    _ui_disp_set_transferMoneyLimit->_ui_disp_str_num
    _ui_disp_set_price->_ui_uint32_2_str
    _ui_disp_set_line->_ui_uint32_2_str
    _ui_disp_set_imd_flow_uint->_lcd_disp_str
    _ui_disp_set_device_id->_ui_disp_str_num
    _ui_disp_set_calib->_ui_uint32_2_str
    _ui_disp_set_balanceWarning->_ui_disp_str_num
    _ui_disp_set_balanceOff->_ui_disp_str_num
    _ui_disp_modbus_id->_ui_disp_str_num
    _ui_disp_str_num->_lcd_disp_str
    _ui_disp_flow->_ui_uint32_2_str
    _ui_disp_clear_totale->_ui_disp_totale_v
    _ui_disp_totale_v->_ui_uint32_2_str
    _ui_disp_clear_balance->_ui_disp_balance_and_volume
    _ui_key_process_enter->___aldiv
    _ui_key_process_down->_data_api_calibration_table_data_save
    _ui_key_process_cancel->_data_api_calibration_table_data_save
    _rfid_comm_process->_rfid_comm_process_read_header
    _rfid_comm_process->_rfid_comm_process_recharge
    _ui_disp_balance_and_volume->_ui_uint32_2_str
    _ui_uint32_2_str->_m_math_pow
    _m_math_pow->___lmul
    _ui_disp_flow_error->_lcd_disp_str
    _lcd_disp_str->_lcd_disp_refresh
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_dp->_lcd_set_com_seg
    _lcd_disp_cln->_lcd_set_com_seg
    _lcd_set_com_seg->___bmul
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_inc->_picc_authenticate
    _rfid_comm_process_read_header->_mifare_write
    _mifare_write->_pcd_mifare_transceive
    _pcd_mifare_transceive->_pcd_comm_with_picc
    _data_api_flash_process->_data_api_calibration_table_data_save
    _data_api_rt_data_save->_crc_append
    _rfid_comm_process_read_dec->_picc_authenticate
    _picc_authenticate->_pcd_comm_with_picc
    _mifare_read->_pcd_comm_with_picc
    _picc_stop_cryptol->_mfrc522_bal_clr_bit_reg
    _picc_select->_pcd_comm_with_picc
    ___bmul->___awdiv
    _picc_halt_a->_pcd_comm_with_picc
    _mfapi_is_new_card_present->_picc_req_a_or_wakeup_a
    _picc_req_a_or_wakeup_a->_pcd_comm_with_picc
    _pcd_comm_with_picc->_mfrc522_hal_calculate_crc
    _mfrc522_hal_calculate_crc->_mfrc522_bal_set_bit_reg
    _modbus_response_process->_modbus_response_write_clib_data
    _modbus_response_write_single_register->_modbus_response_illgeal_function
    _modbus_response_write_clib_data->_data_api_calibration_table_data_save
    _data_api_calibration_table_data_save->_crc_append
    _data_api_calibration_table_data_save->_crc_verify
    _modbus_response_read_clib_data->_modbus_response_illgeal_function
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_getRegisterVal
    _getRegisterVal->___lldiv
    _mfapi_pcd_init->_mfrc522_hal_init
    _mfrc522_hal_init->_mfrc522_hal_set_antenna_gain
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_clr_bit_reg
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_set_bit_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _lcd_config->_lcd_disp_all
    _flow_sampling_process->_app_flow_get_adcAverageValue
    _app_flow_rt_volume_cal_ex->___lldiv
    _app_flow_rt_balance_money_cal->___lldiv
    _app_flow_get_adcAverageValue->___lldiv
    _app_flow_adc_2_flow->___lldiv
    ___lldiv->___lmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_received_byte_if_ack
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _data_api_system_data_init->_crc_append
    _data_api_system_data_init->_crc_verify
    _data_api_calibration_table_data_init->_crc_append
    _data_api_calibration_table_data_init->_crc_verify
    _crc_verify->_crc_sum
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rfid_comm_process
    _rfid_comm_process->_picc_select
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_header->_mifare_write

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_rfid_comm_process

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2510365
                                              1 BANK3      2     2      0
_data_api_calibration_table_data_ini
             _data_api_flash_process
          _data_api_system_data_init
                              _delay
                 _event_door_monitor
                _event_power_monitor
              _flow_sampling_process
                    _in_app_vavle_on
                      _m_system_init
                     _mfapi_pcd_init
            _modbus_response_process
            _my_uart1_received_ready
                  _rfid_comm_process
                _timer0_irq_callback
                _timer1_irq_callback
                       _ui_disp_menu
                     _ui_key_process
                   _ui_start_display
 ---------------------------------------------------------------------------------
 (1) _ui_start_display                                     3     3      0   32369
                                             13 BANK0      3     3      0
                       _lcd_disp_all
                       _lcd_disp_str
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (1) _ui_key_process                                       3     3      0 1222782
                                             53 BANK0      3     3      0
                      _key_scan_call
                       _ui_disp_menu
              _ui_key_process_cancel
                _ui_key_process_down
               _ui_key_process_enter
             _ui_key_process_up_down
                 _ui_key_set_process
                    _ui_key_waite_up
                 _ui_key_waite_up_ex
 ---------------------------------------------------------------------------------
 (2) _ui_key_waite_up_ex                                   4     2      2    2985
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (2) _ui_key_set_process                                   2     2      0   29413
                                             38 BANK0      2     2      0
                            ___awdiv
                             ___wmul
_data_api_calibration_table_data_sav
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_up_down                               2     2      0  561266
                                             51 BANK0      2     2      0
_key_process_up_down_variable_speed_
        _ui_key_process_up_down_main
 ---------------------------------------------------------------------------------
 (3) _ui_key_process_up_down_main                          2     2      0      31
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _key_process_up_down_variable_speed_ex               16    11      5  560731
                                             35 BANK0     16    11      5
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
                       _ui_disp_menu
 ---------------------------------------------------------------------------------
 (4) _ui_disp_menu                                         2     2      0  552850
                                             33 BANK0      2     2      0
                   _lcd_clear_buffer
                   _lcd_disp_refresh
                       _lcd_disp_str
         _ui_disp_balance_and_volume
              _ui_disp_clear_balance
               _ui_disp_clear_totale
                       _ui_disp_flow
                  _ui_disp_modbus_id
             _ui_disp_set_balanceOff
         _ui_disp_set_balanceWarning
                  _ui_disp_set_calib
              _ui_disp_set_device_id
          _ui_disp_set_imd_flow_uint
                   _ui_disp_set_line
                  _ui_disp_set_price
     _ui_disp_set_transferMoneyLimit
        _ui_disp_small_flow_how_care
                 _ui_disp_str_num_ex
                   _ui_disp_totale_v
             _ui_disp_transfer_money
 ---------------------------------------------------------------------------------
 (5) _ui_disp_transfer_money                               2     2      0   27227
                                             26 BANK0      2     2      0
                            ___lldiv
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_str_num_ex                                   6     2      4   19752
                                              7 BANK0      6     2      4
                            ___lwdiv
                            ___lwmod
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                         _ui_mem_cpy
 ---------------------------------------------------------------------------------
 (5) _ui_disp_small_flow_how_care                          2     2      0   21660
                                             13 BANK0      2     2      0
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_transferMoneyLimit                       0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_price                                    3     3      0   31218
                                             26 BANK0      3     3      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_line                                     4     4      0   29954
                                             26 BANK0      4     4      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_imd_flow_uint                            0     0      0   14629
                   _lcd_clear_buffer
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_device_id                                0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_calib                                    4     4      0   34587
                                             26 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lbmod
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceWarning                           0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceOff                               0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_modbus_id                                    2     2      0   21660
                                             13 BANK0      2     2      0
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (2) _ui_disp_str_num                                      6     2      4   21660
                                              7 BANK0      6     2      4
                            ___lwdiv
                            ___lwmod
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                         _ui_mem_cpy
 ---------------------------------------------------------------------------------
 (3) _ui_mem_cpy                                           5     3      2     388
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     161
                                              3 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     132
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _ui_disp_flow                                         7     7      0   48994
                                             26 BANK0      7     7      0
                            ___lldiv
                             ___lmul
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_totale                                 0     0      0   45946
                   _ui_disp_totale_v
 ---------------------------------------------------------------------------------
 (5) _ui_disp_totale_v                                     3     3      0   45946
                                             26 BANK0      3     3      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_balance                                0     0      0   51983
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_enter                                 6     6      0   11988
                                             14 BANK0      6     6      0
                            ___aldiv
                            ___awdiv
                      _m_mem_cpy_len
                    _ui_key_waite_up
 ---------------------------------------------------------------------------------
 (2) _ui_key_waite_up                                      4     2      2    2864
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (3) _set_globle_ticker                                    2     0      2     301
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_globle_ticker                                    4     2      2      34
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_down                                  1     1      0   35536
                                             38 BANK0      1     1      0
_data_api_calibration_table_data_sav
              _data_api_rt_data_save
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_cancel                               11    11      0   23371
                                             38 BANK0     11    11      0
                            ___awdiv
                             ___wmul
_data_api_calibration_table_data_sav
 ---------------------------------------------------------------------------------
 (1) _timer1_irq_callback                                  1     1      0       0
                                              4 COMMON     1     1      0
                         _valve_stop
 ---------------------------------------------------------------------------------
 (2) _valve_stop                                           1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _timer0_irq_callback                                  1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rfid_comm_process                                    3     3      0  511221
                                             36 BANK1      1     1      0
                                              0 BANK3      1     1      0
                              _delay
                   _in_app_vavle_off
                    _in_app_vavle_on
                      _key_scan_call
                       _lcd_disp_str
          _mfapi_is_new_card_present
                        _picc_halt_a
                        _picc_select
                  _picc_stop_cryptol
         _rfid_comm_process_read_dec
      _rfid_comm_process_read_header
         _rfid_comm_process_read_inc
         _rfid_comm_process_recharge
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (6) _ui_disp_balance_and_volume                           3     3      0   51983
                                             26 BANK0      3     3      0
                            ___aldiv
                   _lcd_clear_buffer
                       _lcd_disp_cln
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) _ui_uint32_2_str                                     10     5      5    5253
                                              7 COMMON     1     1      0
                                             17 BANK0      9     4      5
                            ___aldiv
                            ___almod
                         _m_math_pow
 ---------------------------------------------------------------------------------
 (7) _m_math_pow                                           9     4      5    1417
                                              8 BANK0      9     4      5
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___almod                                             11     3      8     613
                                              3 COMMON     3     3      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) _ui_head_hide                                         4     3      1    1298
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (6) _ui_disp_flow_error                                   0     0      0   14629
                   _lcd_clear_buffer
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_str                                         5     3      2   10483
                                              2 BANK0      5     3      2
                      _lcd_disp_code
                   _lcd_disp_refresh
 ---------------------------------------------------------------------------------
 (4) _lcd_disp_refresh                                     1     1      0    6042
                                              1 BANK0      1     1      0
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _lcd_disp_code                                        2     1      1    2105
                                              5 COMMON     2     1      1
                    _lcd_disp_code_0
                    _lcd_disp_code_1
                    _lcd_disp_code_2
                    _lcd_disp_code_3
                    _lcd_disp_code_4
                    _lcd_disp_code_5
                    _lcd_disp_code_6
                    _lcd_disp_code_7
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_7                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_6                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_5                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_4                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_3                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_2                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_1                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_0                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_clear_buffer                                     1     1      0    4146
                                              7 COMMON     1     1      0
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_dp                                          4     3      1    5892
                                             18 BANK0      4     3      1
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_disp_cln                                         3     3      0    5166
                                             18 BANK0      3     3      0
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_set_com_seg                                     10     8      2    5104
                                              8 BANK0     10     8      2
                            ___awdiv
                             ___bmul
                            ___lbmod
 ---------------------------------------------------------------------------------
 (8) ___lbmod                                              6     5      1     412
                                              3 COMMON     3     2      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_recharge                          11    11      0   97414
                                             77 BANK0      3     3      0
                                              4 BANK1      8     8      0
                         _crc_append
             _data_api_flash_process
                      _m_mem_cpy_len
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_inc                           4     4      0   57234
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_header                       10    10      0  137772
                                             77 BANK0      3     3      0
                                              4 BANK1      7     7      0
                         _crc_append
                         _crc_verify
                  _create_card_key_b
             _data_api_flash_process
                      _m_mem_cpy_len
                          _m_mem_set
                        _mifare_read
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _mifare_write                                         8     6      2   35206
                                             73 BANK0      4     2      2
                                              0 BANK1      4     4      0
              _pcd_mifare_transceive
 ---------------------------------------------------------------------------------
 (4) _pcd_mifare_transceive                               31    27      4   34307
                                             42 BANK0     31    27      4
                      _m_mem_cpy_len
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _data_api_flash_process                               1     1      0   31390
                                             38 BANK0      1     1      0
_data_api_calibration_table_data_sav
              _data_api_rt_data_save
 ---------------------------------------------------------------------------------
 (3) _data_api_rt_data_save                                5     5      0   10837
                                             19 BANK0      5     5      0
                         _crc_append
           _data_api_system_data_get
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _create_card_key_b                                    5     3      2     386
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_dec                           4     4      0   57234
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _picc_authenticate                                   22    18      4   21315
                                             42 BANK0     22    18      4
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _mifare_read                                          7     5      2   27446
                                             42 BANK0      7     5      2
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _picc_stop_cryptol                                    1     1      0    2707
                                              6 BANK0      1     1      0
            _mfrc522_bal_clr_bit_reg
 ---------------------------------------------------------------------------------
 (2) _picc_select                                         43    42      1   37715
                                             42 BANK0      7     6      1
                                              0 BANK1     36    36      0
                            ___awdiv
                             ___bmul
            _mfrc522_bal_clr_bit_reg
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               4     3      1     406
                                              4 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2245
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _picc_halt_a                                          8     8      0   26612
                                             42 BANK0      8     8      0
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mfapi_is_new_card_present                            8     8      0   26739
                                             52 BANK0      8     8      0
                          _m_mem_set
             _picc_req_a_or_wakeup_a
 ---------------------------------------------------------------------------------
 (3) _picc_req_a_or_wakeup_a                              10     8      2   22378
                                             42 BANK0     10     8      2
            _mfrc522_bal_clr_bit_reg
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (4) _pcd_comm_with_picc                                  25    15     10   19129
                                             17 BANK0     25    15     10
       _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
          _mfrc522_hal_calculate_crc
 ---------------------------------------------------------------------------------
 (5) _mfrc522_hal_calculate_crc                           11     6      5    7222
                                              6 BANK0     11     6      5
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg_len                            6     3      3     635
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_read_fifo_len_ex                         8     4      4     706
                                              7 COMMON     1     1      0
                                              0 BANK0      7     3      4
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (3) _m_mem_set                                            4     0      4    4146
                                              3 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (3) _key_scan_call                                        1     1      0    2461
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _in_app_vavle_on                                      2     2      0      62
                                              4 COMMON     2     2      0
                           _valve_on
 ---------------------------------------------------------------------------------
 (3) _valve_on                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _my_uart1_received_ready                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   71988
                                             46 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
     _modbus_response_read_clib_data
    _modbus_response_write_clib_data
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register                7     7      0    9068
                                             22 BANK0      7     7      0
                         _crc_append
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_clib_data                      8     8      0   29720
                                             38 BANK0      8     8      0
                         _crc_append
_data_api_calibration_table_data_sav
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _data_api_calibration_table_data_save                19    18      1   20553
                                             19 BANK0     19    18      1
                         _crc_append
                         _crc_verify
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_read_clib_data                      12    12      0   10308
                                             22 BANK0     10    10      0
                         _crc_append
               _data_api_read_eeprom
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _modbus_response_illgeal_function                     4     3      1    4746
                                              7 COMMON     1     1      0
                                             19 BANK0      3     2      1
                         _crc_append
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    9234
                                             32 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _my_uart1_send_poll                                   3     2      1     692
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      11     8      3    4441
                                             21 BANK0     11     8      3
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             15     7      8     837
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _mfapi_pcd_init                                       2     2      0   14420
                                              9 BANK0      2     2      0
               _mfrc522_bal_read_reg
                   _mfrc522_hal_init
 ---------------------------------------------------------------------------------
 (2) _mfrc522_hal_init                                     1     1      0   14114
                                              8 BANK0      1     1      0
                              _delay
              _mfrc522_bal_write_reg
             _mfrc522_hal_antenna_on
               _mfrc522_hal_reset_sf
       _mfrc522_hal_set_antenna_gain
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_set_antenna_gain                         2     2      0    5636
                                              6 BANK0      2     2      0
            _mfrc522_bal_clr_bit_reg
            _mfrc522_bal_set_bit_reg
       _mfrc522_hal_get_antenna_gain
 ---------------------------------------------------------------------------------
 (4) _mfrc522_hal_get_antenna_gain                         2     2      0     250
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_set_bit_reg                              4     3      1    2617
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_bal_clr_bit_reg                              4     3      1    2707
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_reset_sf                                 1     1      0    1914
                                              1 BANK0      1     1      0
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_antenna_on                               2     2      0    2189
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg                                2     1      1    1914
                                              7 COMMON     1     0      1
                                              0 BANK0      1     1      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_read_reg                                 3     3      0     210
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_write_read_via_spi                       4     4      0     142
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _m_system_init                                        0     0      0     372
                  _SYSTEM_Initialize
                           _lcd_init
                      _led_port_init
               _other_gpio_port_init
 ---------------------------------------------------------------------------------
 (2) _other_gpio_port_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _led_port_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0     130
                         _lcd_config
 ---------------------------------------------------------------------------------
 (3) _lcd_config                                           0     0      0     130
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (2) _lcd_disp_all                                         6     6      0     130
                                              3 COMMON     4     4      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR1_SetInterruptHandler                             2     0      2     121
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     121
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2     121
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flow_sampling_process                                2     2      0   29226
                                             43 BANK0      2     2      0
        _adc_mcp3241_read_convert_16
       _adc_mcp3241_start_convert_16
                _app_flow_adc_2_flow
       _app_flow_get_adcAverageValue
                    _app_flow_lookup
                 _app_flow_money_off
             _app_flow_money_warning
      _app_flow_rt_balance_money_cal
          _app_flow_rt_volume_cal_ex
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_volume_cal_ex                            4     4      0    3569
                                             21 BANK0      4     4      0
                            ___lldiv
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     592
                                              3 COMMON     2     2      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_balance_money_cal                        8     8      0    2977
                                             21 BANK0      8     8      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_warning                               1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_off                                   1     1      0      62
                                              6 COMMON     1     1      0
                   _in_app_vavle_off
 ---------------------------------------------------------------------------------
 (2) _in_app_vavle_off                                     2     2      0      62
                                              4 COMMON     2     2      0
                          _valve_off
 ---------------------------------------------------------------------------------
 (3) _valve_off                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_lookup                                     17    15      2     406
                                              3 COMMON     3     1      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_get_adcAverageValue                        22    20      2    2671
                                             21 BANK0     22    20      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _app_flow_adc_2_flow                                 21    19      2    3796
                                             21 BANK0     21    19      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8    1076
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1901
                                              7 COMMON     1     1      0
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_start_convert_16                         4     3      1    7776
                                              2 BANK0      4     3      1
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_read_convert_16                          7     5      2    7867
                                              2 BANK0      7     5      2
           _iic_received_byte_if_ack
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_start                                            0     0      0    2461
                              _delay
 ---------------------------------------------------------------------------------
 (3) _iic_send_byte                                        3     3      0    2628
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
                      _iic_waite_ack
 ---------------------------------------------------------------------------------
 (4) _iic_waite_ack                                        2     2      0    2526
                                              5 COMMON     2     2      0
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_stop                                             0     0      0    2461
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     0      2    2461
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _iic_received_byte_if_ack                             3     3      0     207
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                  _iic_received_byte
                       _iic_send_ack
 ---------------------------------------------------------------------------------
 (4) _iic_send_ack                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _iic_received_byte                                    3     3      0     108
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _event_power_monitor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _event_door_monitor                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _data_api_system_data_init                            2     2      0   20139
                                             19 BANK0      2     2      0
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
           _data_api_system_data_get
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _data_api_system_data_get                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _data_api_calibration_table_data_init                10    10      0   21025
                                             19 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _data_api_write_eeprom                                6     2      4    1495
                                              6 COMMON     2     2      0
                                              0 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     279
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _data_api_read_eeprom                                 6     2      4     977
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_ReadByte                                      1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_verify                                          11     7      4    8439
                                              8 BANK0     11     7      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (5) _m_mem_cpy_len                                        6     1      5    6042
                                              3 COMMON     5     0      5
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_append                                          11     7      4    3142
                                              8 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (5) _crc_sum                                             12     8      4     731
                                              3 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0      23
                                              2 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _data_api_calibration_table_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_mem_cpy_len
   _data_api_flash_process
     _data_api_calibration_table_data_save
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_mem_cpy_len
     _data_api_rt_data_save
       _crc_append
         _crc_sum
       _data_api_system_data_get
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_mem_cpy_len
   _data_api_system_data_init
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_system_data_get
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_mem_cpy_len
   _delay
   _event_door_monitor
   _event_power_monitor
   _flow_sampling_process
     _adc_mcp3241_read_convert_16
       _iic_received_byte_if_ack
         _iic_received_byte
         _iic_send_ack
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _adc_mcp3241_start_convert_16
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _app_flow_adc_2_flow
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _app_flow_get_adcAverageValue
       ___lldiv
         ___lmul (ARG)
     _app_flow_lookup
     _app_flow_money_off
       _in_app_vavle_off
         _valve_off
     _app_flow_money_warning
     _app_flow_rt_balance_money_cal
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _app_flow_rt_volume_cal_ex
       ___lldiv
         ___lmul (ARG)
       ___llmod
       ___lmul
   _in_app_vavle_on
     _valve_on
   _m_system_init
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
         _TMR1_StartTimer
       _WDT_Initialize
     _lcd_init
       _lcd_config
         _lcd_disp_all
     _led_port_init
     _other_gpio_port_init
   _mfapi_pcd_init
     _mfrc522_bal_read_reg
       _mfrc522_bal_write_read_via_spi
     _mfrc522_hal_init
       _delay
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_antenna_on
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_reset_sf
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_set_antenna_gain
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_get_antenna_gain
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
         ___aldiv
         ___lldiv
           ___lmul (ARG)
         ___lmul
       _my_uart1_send_poll
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _my_uart1_send_poll
     _modbus_response_read_clib_data
       _crc_append
         _crc_sum
       _data_api_read_eeprom
         _DATAEE_ReadByte
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_write_clib_data
       _crc_append
         _crc_sum
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
   _my_uart1_received_ready
   _rfid_comm_process
     _delay
     _in_app_vavle_off
       _valve_off
     _in_app_vavle_on
       _valve_on
     _key_scan_call
       _delay
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _mfapi_is_new_card_present
       _m_mem_set
       _picc_req_a_or_wakeup_a
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _picc_halt_a
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_select
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_read_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_stop_cryptol
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_dec
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_header
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _create_card_key_b
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
       _m_mem_cpy_len
       _m_mem_set
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_inc
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_recharge
       _crc_append
         _crc_sum
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
       _m_mem_cpy_len
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _ui_disp_balance_and_volume
       ___aldiv
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
   _timer0_irq_callback
   _timer1_irq_callback
     _valve_stop
   _ui_disp_menu
     _lcd_clear_buffer
       _m_mem_set
     _lcd_disp_refresh
       _m_mem_cpy_len
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _ui_disp_balance_and_volume
       ___aldiv
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_clear_balance
       _ui_disp_balance_and_volume
         ___aldiv
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_clear_totale
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_flow
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_modbus_id
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_balanceOff
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_balanceWarning
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_calib
       ___awdiv
       ___awmod
       ___lbmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_device_id
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_imd_flow_uint
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
     _ui_disp_set_line
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_price
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_transferMoneyLimit
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_small_flow_how_care
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_str_num_ex
       ___lwdiv
       ___lwmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_mem_cpy
     _ui_disp_totale_v
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_transfer_money
       ___lldiv
         ___lmul (ARG)
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
   _ui_key_process
     _key_scan_call
       _delay
     _ui_disp_menu
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_refresh
         _m_mem_cpy_len
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _ui_disp_balance_and_volume
         ___aldiv
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_clear_balance
         _ui_disp_balance_and_volume
           ___aldiv
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_cln
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_disp_flow_error
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_clear_totale
         _ui_disp_totale_v
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_disp_flow_error
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_flow
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_modbus_id
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_balanceOff
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_balanceWarning
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_calib
         ___awdiv
         ___awmod
         ___lbmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_device_id
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_imd_flow_uint
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_disp_set_line
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_price
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_transferMoneyLimit
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_small_flow_how_care
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_str_num_ex
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_transfer_money
         ___lldiv
           ___lmul (ARG)
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_key_process_cancel
       ___awdiv
       ___wmul
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
     _ui_key_process_down
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _data_api_rt_data_save
         _crc_append
           _crc_sum
         _data_api_system_data_get
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _m_mem_set
     _ui_key_process_enter
       ___aldiv
       ___awdiv
       _m_mem_cpy_len
       _ui_key_waite_up
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
     _ui_key_process_up_down
       _key_process_up_down_variable_speed_ex
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
         _ui_disp_menu
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _ui_disp_balance_and_volume
             ___aldiv
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_cln
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_clear_balance
             _ui_disp_balance_and_volume
               ___aldiv
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_cln
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_disp_flow_error
                 _lcd_clear_buffer
                   _m_mem_set
                 _lcd_disp_str
                   _lcd_disp_code
                     _lcd_disp_code_0
                     _lcd_disp_code_1
                     _lcd_disp_code_2
                     _lcd_disp_code_3
                     _lcd_disp_code_4
                     _lcd_disp_code_5
                     _lcd_disp_code_6
                     _lcd_disp_code_7
                   _lcd_disp_refresh
                     _m_mem_cpy_len
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_clear_totale
             _ui_disp_totale_v
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_disp_flow_error
                 _lcd_clear_buffer
                   _m_mem_set
                 _lcd_disp_str
                   _lcd_disp_code
                     _lcd_disp_code_0
                     _lcd_disp_code_1
                     _lcd_disp_code_2
                     _lcd_disp_code_3
                     _lcd_disp_code_4
                     _lcd_disp_code_5
                     _lcd_disp_code_6
                     _lcd_disp_code_7
                   _lcd_disp_refresh
                     _m_mem_cpy_len
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_flow
             ___lldiv
               ___lmul (ARG)
             ___lmul
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_modbus_id
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_balanceOff
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_balanceWarning
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_calib
             ___awdiv
             ___awmod
             ___lbmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_device_id
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_imd_flow_uint
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_disp_set_line
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_price
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_transferMoneyLimit
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_small_flow_how_care
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_str_num_ex
             ___lwdiv
             ___lwmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_mem_cpy
           _ui_disp_totale_v
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_transfer_money
             ___lldiv
               ___lmul (ARG)
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
       _ui_key_process_up_down_main
     _ui_key_set_process
       ___awdiv
       ___wmul
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _m_mem_cpy_len
     _ui_key_waite_up
       _get_globle_ticker
       _key_scan_call
         _delay
       _set_globle_ticker
     _ui_key_waite_up_ex
       _get_globle_ticker
       _key_scan_call
         _delay
       _set_globle_ticker
   _ui_start_display
     _lcd_disp_all
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _ui_disp_str_num
       ___lwdiv
       ___lwmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_mem_cpy

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      3      35      11       66.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      28      15       50.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               20      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A0      20        0.0%
BITBANK8             8      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8                8      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK10           50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK10              50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK11           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK11               4      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
DATA                 0      0     1A0      27        0.0%
BITBANK12           30      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12               0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Nov 25 00:29:22 2018

                   mfrc522_bal_set_bit_reg@bits 0022                         ?_picc_req_a_or_wakeup_a 004A  
                                ?_iic_waite_ack 0070             __end_of_ui_key_process_up_down_main 2013  
                   _ui_key_process_up_down_main 2000                                               pc 0002  
      key_process_up_down_variable_speed_ex@t32 0050                                ui_uint32_2_str@x 0031  
                                ___bmul@product 0026        key_process_up_down_variable_speed_ex@max 0045  
      key_process_up_down_variable_speed_ex@key 004C        key_process_up_down_variable_speed_ex@min 0043  
                                   __CFG_CP$OFF 0000        key_process_up_down_variable_speed_ex@val 0052  
                                  ___awdiv@sign 0021                             ___wmul@multiplicand 0075  
                       _mfrc522_bal_set_bit_reg 3D13                                _picc_select$3251 00CD  
                              _picc_select$3244 00D4                                _picc_select$3252 00CF  
                              _picc_select$3245 00D5                                _picc_select$3248 00CB  
               __end_of_mfrc522_bal_clr_bit_reg 3D13                                 _timer0ReloadVal 016F  
                __end_of_ui_key_process_up_down 1E1C                            _data_api_read_eeprom 3EA0  
                                           l202 3E3F                                             l411 2DC7  
                                           l261 33DF                                             l421 1504  
                                           l257 33C5                                             l426 15C8  
                                           l509 1FFF                                             l606 34C5  
                                           l391 379A                                             l393 37AD  
                                           l385 3780                                             l388 3791  
                                           l911 299F                                             l760 3618  
                                           l648 1E1B                                             l665 094F  
                                           l685 12FA                                             l790 1077  
                                           l598 3432                                             l778 0B77  
                                           l699 1659                                             l789 106C  
                    _flowCalibrationPointSingle 016B                                    __CFG_CPD$OFF 0000  
          __size_of_ui_disp_small_flow_how_care 0011                          ?_ui_disp_clear_balance 0070  
                               _timer1ReloadVal 016D                                 _ui_key_waite_up 341E  
                                           _min 0137                                             _sec 013F  
                                  ___awmod@sign 0021                      __size_of_picc_authenticate 0065  
                                  __CFG_BORV$LO 0000                                             wreg 0009  
                                  __CFG_IESO$ON 0000                       _app_flow_rt_volume_cal_ex 1919  
                                  __CFG_FOSC$HS 0000                              ui_uint32_2_str@buf 0077  
                            ui_uint32_2_str@len 0035                               ??_app_flow_lookup 0020  
                           lcd_disp_code_0@code 0074                             lcd_disp_code_1@code 0074  
                           lcd_disp_code_2@code 0074                             lcd_disp_code_3@code 0074  
                           lcd_disp_code_4@code 0074                             lcd_disp_code_5@code 0074  
                           lcd_disp_code_6@code 0074                                   _led_port_init 3D71  
                   mfrc522_hal_calculate_crc@t8 002E                             lcd_disp_code_7@code 0074  
                                  __CFG_LVP$OFF 0000      key_process_up_down_variable_speed_ex@speed 004E  
                                          l1043 0688                                            l2100 080D  
                                          l2020 1809                                            l1061 3FFD  
                                          l2102 080E                                            l2030 1853  
                                          l2105 081E                                            l1066 3101  
                                          l2126 3F89                                            l1346 2CC4  
                                          l2420 2B10                                            l2149 371D  
                                          l2094 0807                                            l2326 02B4  
                                          l2352 0395                                            l2418 2AF2  
                                          l1821 3307                                            l1830 330C  
                                          l1808 30AA                                            l1770 3E1A  
                                          l1834 330E                                            l1941 3D41  
                                          l1767 3E19                                            l2752 2024  
                                          l1946 3D4A                                            l1954 3C58  
                                          l1868 3081                                            l2596 1B18  
                                          l2765 2CD6                                            l1959 3C61  
                                          l2697 3E8C                                            l2966 3EF9  
                                          STR_1 38D9                                            STR_2 391E  
                                          STR_3 38D0                                            STR_4 38A3  
                                          STR_5 3951                                            STR_6 3917  
                                          STR_7 38F4                                            STR_8 3944  
                                          STR_9 394D                                            _LATA 010C  
                                          _LATB 010D                                            _LATC 010E  
                                          _LATD 010F                                            _LATE 0110  
                                          _LATF 038C                                            _LATG 038D  
                                 _m_mem_cpy_len 3DA3                                            _TMR0 0015  
                                ??_lcd_disp_all 0073                                  ??_lcd_disp_cln 0032  
                                          _WPUB 020D                                            _WPUG 048D  
                                ??_lcd_disp_str 0024                                    __CFG_WRT$OFF 0000  
                                 __CFG_FCMEN$ON 0000                                            _pLCD 01A4  
                                          ___q7 013E                                            ___t8 00CA  
                  __end_of_LCDDigitalIndexTable 3829                       __size_of_lcd_disp_refresh 0011  
                                          _main 1AB9                                            _flow 00BC  
modbus_response_write_single_register@startAddr 0039                                            _menu 00C3  
                            ui_key_waite_up@now 0022                                            _hour 0136  
                                          fsr0h 0005                                            fsr1h 0007  
                                          indf0 0000                                            fsr0l 0004  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                   __CFG_BOREN$ON 0000  
                        ??_mfrc522_bal_read_reg 0077                  ??_adc_mcp3241_start_convert_16 0023  
                             _rfid_comm_process 1E1C                  __size_of_pcd_mifare_transceive 0082  
                                 _globlTickerms 0130                                  picc_select@uid 00E9  
                                          start 0037                                  ??_iic_send_ack 0073  
                        create_card_key_b@cckey 0074                   __end_of_pcd_mifare_transceive 2117  
                   __size_of_ui_disp_flow_error 000B                __size_of_my_uart1_received_ready 0009  
                     ??_modbus_response_command 0040                       data_api_write_eeprom@addr 0022  
              __end_of_iic_received_byte_if_ack 3BBC                      ??_TMR1_SetInterruptHandler 0075  
                __end_of_picc_req_a_or_wakeup_a 29F3                               ___bmul@multiplier 0027  
                            ?_rfid_comm_process 0070                                   __CFG_MCLRE$ON 0000  
                      __end_of_ui_start_display 37BA                                ?_lcd_set_com_seg 0028  
                                         S17363 3851                                           S17355 387A  
                                         S17357 388A     key_process_up_down_variable_speed_ex@change 004D  
           modbus_response_read_clib_data@pmdbs 003C                 pcd_comm_with_picc@errorRegValue 0044  
                       app_flow_lookup@adcValue 0073                 ??_rfid_comm_process_read_header 00CF  
                     __size_of_DATAEE_WriteByte 001D                     ??_ui_disp_set_imd_flow_uint 0078  
                                 lcd_disp_all@i 0021                            getRegisterVal@result 003C  
                                 lcd_disp_all@x 0020                         __end_of_TMR0_Initialize 0800  
                     ??_modbus_response_process 0050                                    ?_mifare_read 004A  
                          _mfrc522_hal_reset_sf 3AF8             mfapi_is_new_card_present@bufferATQA 0058  
                __size_of_OSCILLATOR_Initialize 0005                             ??_rfid_comm_process 00EF  
                 __end_of_OSCILLATOR_Initialize 3ADB                                           l13005 1486  
                                         l12135 3DA3                                           l13111 2D79  
                                         l13023 151D                                           l13015 14DB  
                                         l13201 2A56                                           l13041 159F  
                                         l13025 1525                                           l13033 1556  
                                         l13017 14E3                                           l13211 2A84  
                                         l13203 2A64                                           l14003 209E  
                                         l13051 15E9                                           l13043 15A7  
                                         l13117 2D7F                                           l13109 2D65  
                                         l13151 2B37                                           l13215 2A8F  
                                         l14015 20C9                                           l14007 20A0  
                                         l12503 3125                                           l13153 2B3C  
                                         l13145 2B22                                           l14033 2101  
                                         l13049 15E1                                           l12531 3363  
                                         l13083 3704                                           l14043 210D  
                                         l13059 161A                                           l14131 342C  
                                         l13315 3C79                                           l13307 3C54  
                                         l13069 3B63                                           l15101 24CE  
                                         l15013 1087                                           l15021 10A4  
                                         l13501 072C                                           l14053 2115  
                                         l12605 3EE6                                           l13165 37C5  
                                         l13413 3D39                                           l14311 3EA2  
                                         l12535 336E                                           l14047 210F  
                                         l14039 2106                                           l14143 3449  
                                         l13271 2328                                           l13191 37FB  
                                         l13183 37EA                                           l14241 0962  
                                         l15009 107E                                           l13521 0752  
                                         l12545 3C37                                           l12625 36C8  
                                         l13265 22EB                                           l13257 22CF  
                                         l13177 37D2                                           l13169 37CC  
                                         l14217 200D                                           l15203 23AF  
                                         l15211 23EF                                           l12731 207E  
                                         l14243 0970                                           l15115 2504  
                                         l15019 1090                                           l13531 077C  
                                         l12571 2A09                                           l14411 2AA6  
                                         l12491 3111                                           l12651 28ED  
                                         l12643 28D4                                           l12803 30B0  
                                         l12627 36E4                                           l13179 37DE  
                                         l13187 37F3                                           l13429 2835  
                                         l16101 298F                                           l14501 3328  
                                         l12717 2045                                           l12709 2035  
                                         l14261 0A5B                                           l14253 09DD  
                                         l14245 0977                                           l13613 33C1  
                                         l13509 073A                                           l13461 06B6  
                                         l12581 2A11                                           l12565 29FE  
                                         l12549 3C3D                                           l14421 2ACF  
                                         l14325 3DF2                                           l12493 3115  
                                         l12485 3105                                           l12661 290A  
                                         l12805 30D6                                           l13447 3F00  
                                         l15223 03D0                                           l12735 208C  
                                         l12727 2073                                           l12719 2053  
                                         l14239 095A                                           l15071 2655  
                                         l12479 3BBC                                           l13551 0796  
                                         l12583 2A1D                                           l14407 2AA4  
                                         l14319 3DE9                                           l12831 2C6E  
                                         l12495 3119                                           l12487 3109  
                                         l12655 2900                                           l13287 21AB  
                                         l16121 2F41                                           l14281 0B11  
                                         l14273 0AAF                                           l14257 0A27  
                                         l13625 33E7                                           l15057 2622  
                                         l15153 1A53                                           l13801 13AC  
                                         l16041 2B59                                           l13537 0780  
                                         l14521 29B2                                           l12593 2A38  
                                         l14433 2843                                           l12841 2CAF  
                                         l12833 2C7B                                           l12497 311D  
                                         l12489 310D                                           l12753 2CEB  
                         ?_data_api_read_eeprom 0074                                           l15243 04C7  
                                         l15235 0452                                           l14275 0AB9  
                                         l14267 0A8F                                           l14291 0B5E  
                                         l13803 13EF                                           l16051 2B78  
                                         l13571 07E6                                           l13555 07A0  
                                         l13491 0722                                           l13459 06AC  
                                         l14451 287C                                           l14443 2865  
                                         l12835 2C88                                           l12499 3121  
                                         l12659 28C8                                           l12755 2CF9  
                                         l12763 2D1C                                           l12747 2CE3  
                                         l12819 3F8E                          ?_ui_disp_set_device_id 0070  
                                         l15237 04B8                                           l15341 110D  
                                         l15325 10DA                                           l15069 2623  
                                         l15149 1A4B                                           l13821 143F  
                                         l16053 2B7D                                           l16045 2B69  
                                         l15173 3EC9                                           l14525 29B4  
                                         l12597 2A40                                           l12589 2A2F  
                                         l14381 2C0D                                           l14429 2841  
                                         l15501 0EFB                                           l12677 2FEF  
                                         l12837 2C95                                           l12829 2C62  
                                         l12845 2CB9                                           l16221 1EA8  
                                         l16213 1E8F                                           l17021 1C45  
                                         l17013 1C2D                                           l17101 2E68  
                                         l15255 0574                                           l15247 04D4  
                                         l15335 10EF                                           l15191 236A  
                                         l16143 2F7D                                           l14287 0B54  
                                         l13815 141A                                           l16047 2B6E  
                                         l13567 07BE                                           l13559 07A2  
                                         l13575 07E8                                           l13479 0709  
                                         l15423 0DC0                                           l12839 2CA2  
                                         l12767 2D2A                                           l12759 2D11  
                                         l16231 1EBC                                           l16223 1EAB  
                                         l16207 1E7E                                           l16303 1829  
                                         l16311 1839                                           l14607 34BF  
                                         l17111 2E7A                                           l16073 1C8C  
                                         l15281 069B                                           l15273 065E  
                                         l15257 057E                                           l15353 1143  
                                         l16049 2B73                                           l16057 2B84  
                                         l12865 3F73                                           l14545 29F1  
                                         l14537 29E6                                           l14393 2C2E  
                                         l15521 0F77                                           l15513 0F42  
                                         l15433 0DDC                                           l16241 1EDB  
                                         l14641 2426                                           l14633 2409  
                                         l14625 23F2                                           l17041 1D83  
                                         l17033 1D42                                           l17105 2E70  
                                         l17113 2E86                                           l14563 3E85  
                                         l15283 069C                                           l15347 112B  
                                         l16139 2F77                                           l13499 070E  
                                         l14387 2C29                                           l13843 18B4  
                                         l15531 0F9F                                           l15443 0E08  
                                         l15603 0C3A                                           l14723 083A  
                                         l14715 0828                                           l17051 1DD6  
                                         l17043 1D94                                           l17035 1D52  
                                         l14619 34DD                                           l17107 2E73  
                                         l16085 1D16                                           l13917 309B  
                                         l15365 11CB                                           l15197 236F  
                                         l14581 373D                                           l13853 18E4  
                                         l15461 0E62                                           l15613 0C8F  
                                         l12797 30C5                                           l12789 27A8  
                                         l16245 1EE3                                           l14821 12A6  
                                         l14805 125D                                           l14733 0878  
                                         l17053 1DE7                                           l17045 1DA4  
                                         l17037 1D63                                           l17213 1B74  
                                         l16079 1CD9                                           l13919 30A3  
                                         l14583 374B                                           l14591 376E  
                                         l13791 13A7                                           l15711 00D6  
                                         l14399 2C47                                           l15535 0FEA  
                                         l15447 0E10                                           l16255 1EF6  
                                         l16319 1849                                           l14743 08A6  
                                         l14727 0850                                           l14719 0831  
                                         l12975 2DAA                                           l17047 1DB5  
                                         l17039 1D73                                           l14903 16DE  
                                         l17207 1B6B                                           l16361 3B87  
                                         l15457 0E59                                           l15617 0CBA  
                                         l15609 0C88                                           l16249 1EEC  
                                         l16281 32EC                                           l14649 2443  
                                         l14673 247F                                           l14761 090D  
                                         l14753 08F5                                           l14737 0888  
                                         l17049 1DC5                                           l17057 1DF7  
                                         l17081 2E2C                                           l17217 1B7B  
                                         l17161 1AFC                                           l17153 1AF0  
                                         l17145 1AE4                                           l14587 3763  
                                         l13787 13A1                                           l15731 0110  
                                         l15723 00F6                                           l15539 0FF2  
                                         l14667 247D                                           l14675 248E  
                                         l14755 08FC                                           l14747 08CD  
                                         l14739 0896                                           l14843 1633  
                                         l13789 135F                                           l15901 0378  
                                         l15741 0139                                           l15725 00FE  
                                         l15709 00D3                                           l15469 0E78  
                                         l15645 0D59                                           l14749 08DB  
                                         l14917 171D                                           l17093 2E50  
                                         l17173 1B19                                           l17157 1AF6  
                                         l15735 0112                                           l16295 1817  
                                         l14839 12EF                                           l14767 0920  
                                         l14943 1784                                           l14927 173A  
                                         l17079 2E27                                           l17183 1B2F  
                                         l17175 1B1C                                           l17361 0B6A  
                                         l15905 0387                                           l15761 0190  
                                         l14785 11EB                                           l17353 0926  
                                         l14881 169E                                           l14865 167B  
                                         l17089 2E45                                           l15675 341A  
                                         l15771 01B5                                           l15739 0128  
                                         l15915 00B5                                           l15691 00AB  
                                         l15659 0DA1                                           l15579 0BA1  
                                         l14891 16BB                                           l17187 1B35  
                                         l15917 03A7                                           l15909 0389  
                                         l15829 02A4                                           l15861 01BF  
                                         l15757 017C                                           l15749 0152  
                                         l15597 0C12                                           l14797 1233  
                                         l16805 25D5                                           l14973 17DE  
                                         l17197 1B56                                           l17359 109C  
                                         l15679 341C                                           l15863 0313  
                                         l15855 0305                                           l15839 02BA  
                                         l15847 02FF                                           l15791 01F0  
                                         l15775 01BE                                           l16751 353F  
                                         l16743 3521                                           l16911 1F63  
                                         l16903 1F5A                                           l14959 17BA  
                                         l17199 1B59                                           l14993 1043  
                                         l15873 0329                                           l15769 0191  
                                         l16745 352D                                           l14969 17D7  
                                         l15883 0334                                           l15867 0319  
                                         l15859 030C                                           l16755 3548  
                                         l16835 273F                                           l16931 1F90  
                                         l14989 1039                                           l15893 0360  
                                         l15885 0358                                           l16773 314F  
                                         l16941 1FA8                                           l16933 1F93  
                                         l15799 01FF                                           l16767 3137  
                                         l16855 349B                                           l16951 1FB7  
                                         l16943 1FAB                                           l16935 1F96  
                                         l16927 1F74                                           l16919 1F6B  
                                         l16769 3143                                           l16777 3158  
                                         l16865 346A                                           l16953 1FBA  
                                         l16945 1FAE                                           l16937 1F99  
                                         l16955 1FBD                                           l16947 1FB1  
                                         l16891 1F3D                                           l16883 1F24  
                                         l16963 1FC6                                           l16875 1F17  
                                         l16957 1FC0                                           l16949 1FB4  
                                         l16959 1FC3                                           l16895 1F4A  
                                         l16887 1F30                                           l16993 1BF6  
                                         l16977 1BA9                                           l16899 1F57  
                                         l16995 1C01                                           l16989 1BD8  
                                         l16997 1C04                                 __end_of___aldiv 2095  
                __size_of_flow_sampling_process 007A                                 __end_of___almod 2D33  
          mfrc522_bal_read_fifo_len_ex@rx_align 0023                                           ?_main 0070  
           mfapi_is_new_card_present@bufferSize 005B                                 __end_of___awdiv 2A45  
                                         STR_10 3943                                           STR_11 392B  
                                         STR_12 3937                                           STR_20 38BE  
                                         STR_13 3931                                           STR_21 38B5  
                                         STR_14 393D                                           STR_22 38AC  
                                         STR_23 3948                                           STR_15 38E2  
                                         STR_16 38EB                                           STR_24 389A  
                                         STR_17 3906                                   __CFG_WDTE$OFF 0000  
                                         STR_18 38FD                                           STR_19 38C7  
                               __end_of___awmod 3800                   __end_of_flow_sampling_process 2F83  
                               __end_of___lbmod 3EFF                                 _TMR1_StartTimer 1800  
                               __end_of___lldiv 2A98                                           u11125 2048  
                                         u11145 2054                                           u11225 2CEE  
                                         u11074 2FE4                                           u12035 2831  
                                         u11155 2068                                           u11075 2FE3  
                                         u11084 2FF4                                 ___awdiv@divisor 0073  
                                         u11165 2074                                           u11085 2FF3  
                                         u11245 2D07                                           u11255 2D12  
                                         _T1CON 0018                                 __end_of___llmod 3777  
                                         u12065 06BD                                           u10805 3376  
                                         u14013 3FF8                                           u14005 1953  
                                         u14023 30F7                                           u11295 2792  
                                         u10905 2A28                                           u10915 2A30  
                                         u13405 3764                                           u12525 13E8  
                                         u11805 37EB                                           u13335 3E8D  
                                         u11735 2AF8                                           u14055 10FE  
                                         u13345 3E92                                           u14065 111C  
                                         u10945 3EE9                                           u10795 336F  
                                         u10875 2A14                                           u14315 0C36  
                                         u14500 016E                                           u15220 1EBA  
                                         u11845 2A59                                           u13605 25FD  
                                         u14245 0F6E                                           u14333 0CAA  
                                         u13445 34DB                                           u14095 35D4  
                                         u13375 3740                                           u12495 139B  
                                         u13535 1028                                           u10895 2A1E  
                                         u14255 0FC1                                           u14343 0D28  
                                         u11775 37D5                                           u14600 0238  
                                         u11960 3C52                                           _LCDRL 0795  
                                         u11865 2A65                                           u15065 2F2C  
                                         u14265 0FE8                                           u16025 1BCC  
                                         u11875 2A79                                           u13395 3759  
                                         u13715 1A0A                                           u11795 37E4  
                                         u16035 1BEA                                           u11980 3C77  
                                         u16300 1B17                                           u11885 2A85  
                                         u13725 1A27                                           u13645 24AF  
                                         u14285 0BB5                                           u13485 1217  
                                         u14615 0257                                           u14295 0BD2  
                                         u13665 24DC                                           u14465 0123  
                                         u14490 016D                                           u13755 1A5C  
                                         u14475 012D                                           u14660 02E2  
                                         u13925 044A                                           u13845 2366  
                                         u12965 0A19                                           u13765 1A68  
                                         u14670 02E3                                           u14590 0237  
                                         u12975 0A81                                           u13775 1A88  
                                         u13945 04C1                                           u13865 238A  
                                         u12985 0B03                                           u14585 0226  
                                         u15705 3538                                           u13955 04CE  
                                         u13875 23AD                                           u15715 3540  
                    pcd_comm_with_picc@checkCRC 003A                                           u14684 02F2  
                                         u13965 0534                                           u13885 23E5  
                                         u14685 02F1                                           u13975 0658  
                                         u13985 067E                                           u15745 313A  
                                         u13995 0696                                           u15675 3524  
                                         u15765 3149                                           u15695 352E  
                                         u15775 3150                                           u15970 1FA5  
                               __end_of___lwdiv 354D                                           u15995 1BA1  
                                         i1l140 0028                                           i1l144 0032  
                                         i1l136 0010                                           i1l138 001C  
                               __end_of___lwmod 315D                ??_modbus_response_read_clib_data 0036  
               ?_modbus_response_read_clib_data 0070                                 ___awdiv@counter 0020  
                                         _TMR1H 0017                                           _TMR1L 0016  
                                         _PORTB 000D                                 ??_lcd_disp_code 0076  
                                         _TRISA 008C                                           _TRISB 008D  
                                         _TRISC 008E                                           _TRISD 008F  
                                         _TRISE 0090                                           _TRISF 030C  
                                         _TRISG 030D                         _pcd_comm_with_picc$3208 003F  
                             _adcSamplingBuffer 02A0                                     m_math_pow@x 0028  
                                   m_math_pow@y 002C               __size_of_TMR0_SetInterruptHandler 0006  
              modbus_response_command@startAddr 0044                             ___lmul@multiplicand 0024  
                     ?_TMR0_SetInterruptHandler 0073                                           _Event 00C8  
                          _EUSART1_Transmit_ISR 0003                                           ___q15 00BA  
                                         ___q31 00AC                                           ___t32 00B4  
                                         ___t16 0078                                 __end_of_crc_sum 2B41  
                              __end_of_TMR0_ISR 3585                                __end_of_TMR1_ISR 3C22  
                                ?_led_port_init 0070                                ?_ui_disp_str_num 0027  
                               _DATAEE_ReadByte 3B33                                           _delay 3B63  
                                         _fl_t8 013C                                    ?_picc_halt_a 0070  
                                         _rdLen 00C9                                  _WDT_Initialize 3ACE  
                   __size_of_pcd_comm_with_picc 0146                                _lcd_clear_buffer 3B3F  
               mfrc522_hal_get_antenna_gain@ret 0023                                  ?_m_mem_cpy_len 0073  
                       ?_ui_disp_set_balanceOff 0070                      __size_of_create_card_key_b 0028  
                                  ?_picc_select 004A                    ?_adc_mcp3241_read_convert_16 0022  
                       __end_of_TMR1_Initialize 3E65                          ??_ui_key_process_enter 002E  
                     __end_of_rfid_comm_process 1F07                         __size_of_mfapi_pcd_init 000B  
                            _event_door_monitor 3AE0                              crc_verify@expected 0031  
                                         status 0003                 __size_of_mfrc522_hal_antenna_on 0018  
              rfid_comm_process_read_header@ret 006D                rfid_comm_process_read_header@stp 006E  
                                         wtemp0 007E                                 ??_iic_send_byte 0077  
            __size_of_mfrc522_hal_calculate_crc 0070                    pcd_comm_with_picc@txLastBits 003D  
          __end_of_mfrc522_hal_get_antenna_gain 3BAC           __size_of_mfrc522_hal_get_antenna_gain 000F  
                  _mfrc522_hal_get_antenna_gain 3B9D                             _event_power_monitor 3B7F  
                         ui_disp_str_num_ex@num 0029                           ui_disp_str_num_ex@str 0027  
                   ??_mfapi_is_new_card_present 0054                                 _systemTickerSec 0142  
                               ??_iic_waite_ack 0075                               ?_mfrc522_hal_init 0070  
                               __initialization 0039                               in_app_vavle_on@op 0075  
                    __end_of_my_uart1_send_poll 33ED                             ?_event_door_monitor 0070  
                     ??_mfrc522_bal_set_bit_reg 0023                      __end_of_EUSART1_Initialize 3B9D  
                                  __end_of_main 1B8B                              ??_mfrc522_hal_init 0028  
                       __end_of_ui_key_waite_up 344F                   pcd_mifare_transceive@sendData 004A  
                         ?_mfrc522_hal_reset_sf 0070                            iic_received_byte@ret 0074  
                   ?_INTERRUPT_InterruptManager 0070             modbus_response_illgeal_function@buf 0035  
                      picc_select@useCascadeTag 00E3                                          ??_main 01D3  
                                lcd_disp_dp@dec 0035              __size_of_data_api_system_data_init 004D  
                          ?_event_power_monitor 0070                     modbus_response_process@rbuf 0053  
                   modbus_response_process@rlen 004E                     modbus_response_process@resp 0051  
                                __CFG_PLLEN$OFF 0000                                  _mainSystemData 0220  
                         ?_EUSART1_Transmit_ISR 0070                 __end_of_modbus_response_command 268F  
                        __end_of_WDT_Initialize 3AD2                                   ?_mifare_write 0069  
           __end_of_adc_mcp3241_read_convert_16 35F6                     _adc_mcp3241_read_convert_16 35BD  
                          ??_event_door_monitor 0073                  __end_of_ui_disp_set_balanceOff 3480  
                                        ?_delay 0073                        _data_api_system_data_get 3C7E  
                              ___llmod@dividend 0024                                          _EEADRL 0191  
                     _ui_disp_set_imd_flow_uint 3D2A                                          _EEDATL 0193  
                                        _EECON2 0196                             pcd_comm_with_picc@i 0046  
                              ___awdiv@dividend 0075                                          _APFCON 011D  
                                        _ANSELA 018C                                          _ANSELE 0190  
                                        _ANSELF 040C                                          _ANSELG 040D  
                                        _T1GCON 0019                                          _LCDCON 0791  
                                        _LCDSE0 0798                                          _LCDCST 0794  
                                        _LCDSE1 0799                                          _LCDSE2 079A  
                                        _LCDSE3 079B                                          _LCDSE4 079C  
                                        _LCDSE5 079D                                          _LCDREF 0793  
               __end_of_modbus_response_process 2B9B                                          _RC1REG 0199  
                                        _RC1STA 019D                         ??_mfrc522_bal_write_reg 0078  
              ??_mfrc522_bal_write_read_via_spi 0073                 ?_mfrc522_bal_write_read_via_spi 0070  
                                        _OSCCON 0099                    __size_of_timer0_irq_callback 002E  
                                        _TX1REG 019A                   ??_adc_mcp3241_read_convert_16 0024  
                                        _WDTCON 0097                                          _TX1STA 019E  
                                  m_mem_set@buf 0073                                    m_mem_set@len 0076  
                      ??_app_flow_money_warning 0073                               ?_ui_disp_set_line 0070  
                        __size_of_key_scan_call 0027                                  __CFG_PWRTE$OFF 0000  
                            _ui_key_set_process 1630                     __size_of_ui_disp_str_num_ex 00B8  
             __end_of_mfrc522_hal_calculate_crc 2DA3                   ?_mfrc522_hal_get_antenna_gain 0070  
                            ??_ui_disp_set_line 003A    __end_of_data_api_calibration_table_data_init 1D36  
 __size_of_data_api_calibration_table_data_init 00D6          ??_data_api_calibration_table_data_init 0033  
         ?_data_api_calibration_table_data_init 0070            _data_api_calibration_table_data_init 1C60  
                  _TMR1_DefaultInterruptHandler 0000    __end_of_data_api_calibration_table_data_save 147D  
 __size_of_data_api_calibration_table_data_save 0182          ??_data_api_calibration_table_data_save 0034  
         ?_data_api_calibration_table_data_save 0033            _data_api_calibration_table_data_save 12FB  
                              __end_of_hexTable 387A                            __size_of_lcd_disp_dp 0066  
          modbus_response_write_clib_data@pmdbs 004D                                __end_of_lcd_init 3AE0  
                          mifare_read@blockAddr 004F                                __end_of_iic_stop 3CE5  
    modbus_response_write_single_register@pmdbs 003B                                          ___bmul 3C34  
                             ?_ui_disp_totale_v 0070                                          ___lmul 335B  
                       __end_of_TMR1_StartTimer 1803                                       ??___aldiv 0073  
                                     ??___almod 0073                                          ___wmul 3E82  
                                     ??___awdiv 0077                                  __CFG_STVREN$ON 0000  
                                     ??___awmod 0077                              _ui_key_waite_up_ex 34B1  
                                     ??___lbmod 0074                                          _fl_t16 0124  
                                        _fl_t32 00A4                                       ??___lldiv 0077  
                  __end_of_other_gpio_port_init 300D                                          _lcdBuf 0158  
                                     ??___llmod 0073                                       ??___lwdiv 0077  
                   ?_ui_disp_balance_and_volume 0070                                       ??___lwmod 0077  
                           ?_ui_key_set_process 0070                             _app_flow_adc_2_flow 03BD  
                         EUSART1_Receive_ISR@t8 0071                              ??_ui_disp_totale_v 003A  
                               _ui_uint32_2_str 2747                          ??_data_api_read_eeprom 0020  
                            _app_flow_money_off 30D8                                ?_TMR0_Initialize 0070  
                                        delay@t 0073                                ___awdiv@quotient 0022  
                               ___awmod@divisor 0073                            __end_of_lcd_disp_all 3E82  
                          __end_of_lcd_disp_cln 3E0F                          _mfrc522_hal_antenna_on 3D59  
                               ___awmod@counter 0020                            __end_of_lcd_disp_str 290D  
                                     ??_crc_sum 0020                           ??_event_power_monitor 0073  
                                        main@tm 01D4                mfrc522_hal_set_antenna_gain@gain 0027  
                       __end_of_DATAEE_ReadByte 3B3F                  pcd_mifare_transceive@cmdBuffer 0053  
               app_flow_get_adcAverageValue@max 0044                            _LCDDigitalIndexTable 3800  
               app_flow_get_adcAverageValue@min 0041                         ??_ui_key_process_cancel 0046  
               app_flow_get_adcAverageValue@ret 0046                           data_api_read_eeprom@i 0021  
             modbus_response_read_clib_data@buf 003F                        __size_of_lcd_disp_code_0 002E  
                      __size_of_lcd_disp_code_1 002E                        __size_of_lcd_disp_code_2 002E  
                      __size_of_lcd_disp_code_3 002E                        __size_of_lcd_disp_code_4 002E  
                      __size_of_lcd_disp_code_5 002E                        __size_of_lcd_disp_code_6 002E  
                      __size_of_lcd_disp_code_7 002E               modbus_response_read_clib_data@len 003D  
                           ?_ui_key_waite_up_ex 0020           __end_of_rfid_comm_process_read_header 1000  
        __size_of_rfid_comm_process_read_header 025D                   _rfid_comm_process_read_header 0DA3  
                __size_of_data_api_write_eeprom 0021                            ui_key_waite_up_ex@tm 0020  
                               _in_app_vavle_on 3EBF                   mfrc522_bal_read_fifo_len_ex@i 0026  
                               ??_led_port_init 0073                                  ??_mifare_write 006B  
                 __end_of_data_api_write_eeprom 3F20                    __size_of_ui_key_process_down 009F  
        __end_of_ui_disp_set_transferMoneyLimit 3CBA         __size_of_ui_disp_set_transferMoneyLimit 0014  
                _ui_disp_set_transferMoneyLimit 3CA6               __end_of_data_api_system_data_init 29A2  
                     _mfapi_is_new_card_present 33ED                             ?_app_flow_money_off 0070  
                          __end_of_iic_send_ack 3E2B                                __end_of_valve_on 1008  
                                  _cardWriteBuf 0432                                 ?_WDT_Initialize 0070  
                              picc_select@count 00EC                                picc_select@index 00ED  
             __size_of_iic_received_byte_if_ack 0010                       ?_iic_received_byte_if_ack 0070  
                               ??_m_mem_cpy_len 0020                 __end_of_mfrc522_bal_set_bit_reg 3D2A  
                      data_api_write_eeprom@buf 0020                        data_api_write_eeprom@len 0023  
      TMR0_SetInterruptHandler@InterruptHandler 0073        TMR1_SetInterruptHandler@InterruptHandler 0073  
               modbus_response_command@tempData 004A                            ??_ui_key_set_process 0046  
                          ?_app_flow_adc_2_flow 0035                     ??_mfrc522_bal_write_reg_len 0077  
      __end_of_modbus_response_illgeal_function 3635       __size_of_modbus_response_illgeal_function 003F  
             ?_modbus_response_illgeal_function 0033              ??_modbus_response_illgeal_function 0077  
              _modbus_response_illgeal_function 35F6                                  _firstPowerDown 0134  
                              ?_TMR1_Initialize 0070                               _SYSTEM_Initialize 3C22  
                               ___lbmod@divisor 0073                      __size_of_rfid_comm_process 00EB  
                              _lcd_disp_refresh 3BDD                         __end_of__initialization 009C  
                               ___lbmod@counter 0021                           ui_key_set_process@ret 0047  
            __size_of_app_flow_rt_volume_cal_ex 00D0                       __size_of_in_app_vavle_off 0027  
                       _my_uart1_received_ready 3B01                            ??_ui_key_waite_up_ex 0077  
                            ?_SYSTEM_Initialize 0070                     pcd_comm_with_picc@validBits 0038  
                             lcd_disp_code@code 0076                            ??_app_flow_money_off 0076  
                            ui_disp_str_num@num 0029                    ??_ui_disp_set_balanceWarning 0078  
                            ui_disp_str_num@str 0027                             ___bmul@multiplicand 0024  
                          create_card_key_b@uid 0073                                app_flow_lookup@i 0075  
                            getRegisterVal@addr 0035                                  iic_send_byte@i 0021  
                            in_app_vavle_off@op 0075                                  iic_send_byte@x 0020  
                                __pcstackCOMMON 0070                                    __pidataBANK2 3AD2  
                                  __pidataBANK3 3AF2                                    __pidataBANK4 290D  
                        ??_mfrc522_hal_reset_sf 0021                             ??_SYSTEM_Initialize 0076  
                    mfrc522_bal_write_reg_len@i 0024                             ui_disp_set_line@t16 003C  
                                     ?_TMR0_ISR 0070                                       ?_TMR1_ISR 0070  
                                 __end_of_delay 3B71                                _DATAEE_WriteByte 3E2B  
                               _app_flow_lookup 2357                                ?_ui_key_waite_up 0020  
                       ??_ui_disp_clear_balance 0078                          __size_of_m_system_init 0015  
                          __size_of_mifare_read 0053                          ??_EUSART1_Transmit_ISR 0070  
                                 _key_scan_call 300D                                      _cardDecBuf 0456  
                         _data_api_rt_data_save 185D                    __end_of_ui_disp_clear_totale 3C58  
                                _OPTION_REGbits 0095                                      _cardIncBuf 0444  
                pcd_mifare_transceive@validBits 0066                     __end_of_EUSART1_Receive_ISR 3F66  
      modbus_response_write_single_register@len 0038                              __size_of_iic_start 0017  
                                       ??_delay 0075                               crc_append@message 0028  
                        getRegisterVal@tempAddr 003E                          getRegisterVal@tempData 0037  
                      ?_mfrc522_bal_clr_bit_reg 0022                           ??_app_flow_adc_2_flow 0037  
                     __end_of_SYSTEM_Initialize 3C34                              __size_of_m_mem_set 0010  
           __size_of_ui_disp_set_balanceWarning 0031                         app_flow_adc_2_flow@flw1 0045  
                       app_flow_adc_2_flow@flw2 0041                                 lcd_disp_dp@show 0032  
                                    __pbssBANK1 00A0                                      __pbssBANK2 0120  
                                    __pbssBANK3 01A0                                      __pbssBANK5 02A0  
                          __size_of_picc_halt_a 0038                 mfrc522_bal_write_read_via_spi@i 0076  
               mfrc522_bal_write_read_via_spi@x 0074                                  _mfapi_pcd_init 3B1D  
                            create_card_key_b@i 0077                         __size_of_ui_key_process 0077  
                  __size_of_timer1_irq_callback 005A             __end_of_ui_disp_small_flow_how_care 3C10  
                   _ui_disp_small_flow_how_care 3BFF                                 __CFG_VCAPEN$OFF 0000  
                          __size_of_picc_select 031D               __end_of_app_flow_rt_volume_cal_ex 19E9  
               __size_of_app_flow_money_warning 0027                  modbus_response_command@tmpAddr 0042  
                       __end_of_ui_uint32_2_str 2800                                      __pmaintext 1AB9  
                 mfrc522_hal_calculate_crc@data 0026                      modbus_response_command@len 0048  
                               lcd_disp_str@loc 0025                                         ?___bmul 0024  
                             ?_ui_start_display 0070                                 lcd_disp_str@str 0022  
              __end_of_TMR0_SetInterruptHandler 3AEC                                         ?___lmul 0020  
                                       ?___wmul 0073                 picc_req_a_or_wakeup_a@validBits 0053  
                              ?_TMR1_StartTimer 0070                                      ??_TMR0_ISR 0070  
                       ??_ui_disp_set_device_id 0078                        __end_of_lcd_clear_buffer 3B4B  
                                    ??_TMR1_ISR 0070                       _mfrc522_bal_write_reg_len 3F66  
               mfrc522_hal_calculate_crc@length 0028                                 mfapi_pcd_init@v 002A  
                                    __pintentry 0004                         __end_of_in_app_vavle_on 3EDF  
                            ??_ui_start_display 002D                  ??_mfrc522_hal_get_antenna_gain 0022  
                             lcd_disp_str@index 0026                 mfrc522_hal_calculate_crc@result 0029  
                                ___lmul@product 0073                                      _crc_append 338B  
                                ?_key_scan_call 0070                                ?_DATAEE_ReadByte 0070  
                                    _crc_verify 2800                              __size_of_valve_off 0018  
                             _ui_disp_modbus_id 3BEE                                         i1l11303 3F48  
                                       i1l11309 3F61                                         i1l11289 3570  
                                    _flashOpStr 0143                                      _lcd_config 3F20  
                                       _SP1BRGH 019C                                         _SP1BRGL 019B  
                            ?_ui_disp_modbus_id 0070                                   ?_ui_head_hide 0073  
                                       _OSCTUNE 0098                                   _calibLocation 00C5  
         modbus_response_illgeal_function@pmdbs 0034                               _ui_disp_set_calib 2117  
                ?_rfid_comm_process_read_header 0070                               ??_lcd_disp_code_0 0073  
                             ??_lcd_disp_code_1 0073                               ??_lcd_disp_code_2 0073  
                             ??_lcd_disp_code_3 0073                               ??_lcd_disp_code_4 0073  
                             ??_lcd_disp_code_5 0073                               ??_lcd_disp_code_6 0073  
                             ??_lcd_disp_code_7 0073                          __end_of_mfapi_pcd_init 3B28  
                                     ?_lcd_init 0070                                       ?_iic_stop 0070  
                             _ui_disp_set_price 2B9B                       ??_my_uart1_received_ready 0073  
                            ?_ui_disp_set_calib 0070                            _other_gpio_port_init 3000  
                                 m_math_pow@ret 002D                             ??_ui_disp_modbus_id 002D  
                                    _m_math_pow 36B3                                   _m_system_init 3CBA  
                          DATAEE_WriteByte@bAdd 0074                              ?_ui_disp_set_price 0070  
                  ??_rfid_comm_process_read_dec 0060                      __end_of_ui_disp_flow_error 3B33  
                  ??_rfid_comm_process_read_inc 0060                         __size_of_getRegisterVal 0228  
                                 ?_ui_disp_flow 0070                                   ?_ui_disp_menu 0070  
                  ??_rfid_comm_process_recharge 00CF                                    _deviceStatus 00C0  
         data_api_calibration_table_data_init@i 003C           data_api_calibration_table_data_save@i 0045  
                                       _PiccUid 01BC                         __end_of_app_flow_lookup 23F1  
                           ??_ui_disp_set_calib 003A              __size_of_ui_disp_set_imd_flow_uint 0017  
                       picc_select@cascadeLevel 00E4                          pcd_comm_with_picc@rbuf 0035  
                        pcd_comm_with_picc@tmp8 0049                          pcd_comm_with_picc@sbuf 0032  
                          __end_of_mifare_write 287E                          pcd_comm_with_picc@rlen 0037  
                        pcd_comm_with_picc@slen 0034                   __size_of_mfrc522_bal_read_reg 0019  
         __end_of_app_flow_rt_balance_money_cal 22BE          __size_of_app_flow_rt_balance_money_cal 0094  
                 _app_flow_rt_balance_money_cal 222A                             ??_ui_disp_set_price 003A  
                         _pcd_mifare_transceive 2095                                       ?_valve_on 0070  
                         __size_of_lcd_disp_all 001D                           __size_of_lcd_disp_cln 001B  
                             _picc_stop_cryptol 3B0A                           __size_of_lcd_disp_str 0048  
                                       ___aldiv 2013                               __end_of_iic_start 3CFC  
                               __size_of___bmul 0012                                         ___almod 2CC5  
                                       ___awdiv 29F3                           picc_select@bufferUsed 00D3  
                               __size_of___lmul 0030                                         ___awmod 37BA  
                                       ___lbmod 3EDF                                         ___lldiv 2A45  
                               __size_of___wmul 001E                                         ___llmod 3734  
                                       ___lwdiv 3518                         mfrc522_bal_read_reg@reg 0020  
                                       ___lwmod 3130                                         _pLcdReg 0169  
                            ?_picc_stop_cryptol 0070                               __end_of_m_mem_set 3BCC  
                          __end_of_TablerxAlign 3917                        ??_ui_disp_transfer_money 003A  
                                    _piccResult 00BE                           __size_of_iic_send_ack 001C  
                     __end_of_ui_disp_modbus_id 3BFF                             _timer0_irq_callback 32CD  
                    ??_data_api_system_data_get 0073                               _noKeyEventTimeOut 016C  
                                       __ptext1 3777                                         __ptext2 2E19  
                                       __ptext3 34B1                                         __ptext4 1630  
                                       __ptext5 1D36                                         __ptext6 2000  
                                       __ptext7 1B8B                                         __ptext8 1F07  
                                       __ptext9 2199                          ?_data_api_rt_data_save 0070  
                                       _crc_sum 2AEB                        __size_of_lcd_set_com_seg 007D  
       __end_of_modbus_response_write_clib_data 2531        __size_of_modbus_response_write_clib_data 00A1  
             ??_modbus_response_write_clib_data 0046                ?_modbus_response_write_clib_data 0070  
               _modbus_response_write_clib_data 2490                                       _T1CONbits 0018  
                        _app_flow_money_warning 3FD9                             lcd_set_com_seg@addr 002E  
                         _OSCILLATOR_Initialize 3AD6                             lcd_set_com_seg@bloc 0031  
          __end_of_adc_mcp3241_start_convert_16 335B           __size_of_adc_mcp3241_start_convert_16 0030  
                  _adc_mcp3241_start_convert_16 332B                              _my_uart1_send_poll 33BC  
                           ??_picc_stop_cryptol 0026                                lcd_set_com_seg@p 0030  
                           lcd_set_com_seg@show 0029                                ___awmod@dividend 0075  
                     __end_of_ui_disp_set_calib 2199               __size_of_TMR1_SetInterruptHandler 0006  
                         _flow_sampling_process 2F09                      __end_of_pcd_comm_with_picc 07EA  
                     __size_of_mfrc522_hal_init 0079                                ___aldiv@dividend 0024  
                            _EUSART1_Initialize 3B8E                                       _LCDPSbits 0792  
                      ??_PIN_MANAGER_Initialize 0073                       ?_TMR1_SetInterruptHandler 0073  
                                ??_ui_head_hide 0074             __size_of_rfid_comm_process_read_dec 003F  
           __size_of_rfid_comm_process_read_inc 003F                           __end_of_lcd_disp_code 3130  
                     __end_of_ui_disp_set_price 2BFA             __size_of_rfid_comm_process_recharge 022B  
                         mifare_read@bufferSize 004B                        ??_data_api_flash_process 0046  
                                   ui_mem_cpy@d 0077                                     ui_mem_cpy@s 0073  
                    __size_of_SYSTEM_Initialize 0012                                         clrloop0 3B4C  
                                    ??_lcd_init 0077                                 ?_mfapi_pcd_init 0070  
                                    ??_iic_stop 0075                             ?_my_uart1_send_poll 0073  
                         ?_other_gpio_port_init 0070                            end_of_initialization 009C  
                           set_globle_ticker@tk 0073                                  ?_m_system_init 0070  
                           ?_EUSART1_Initialize 0070                                  ??_ui_disp_flow 003A  
                                ??_ui_disp_menu 0041                            ?_timer0_irq_callback 0070  
            __size_of_mfapi_is_new_card_present 0031                                         init_ram 3B57  
                                  _lcd_disp_all 3E65                                    _lcd_disp_cln 3DF4  
                      ?_modbus_response_command 0070                  __size_of_mfrc522_bal_write_reg 0011  
                              _in_app_vavle_off 3FB2                           ui_key_waite_up_ex@now 0022  
                                       initloop 3B58                                    _lcd_disp_str 28C5  
                 __end_of_mfrc522_bal_write_reg 3BDD                   __size_of_ui_key_process_enter 012E  
                      __size_of_ui_disp_str_num 00AC              __end_of_ui_disp_set_balanceWarning 34B1  
                    _ui_disp_set_balanceWarning 3480                               __end_of_valve_off 3D59  
                           _ui_key_process_down 23F1                                 ___lldiv@divisor 0028  
                         __end_of_iic_send_byte 332B                       __end_of_picc_stop_cryptol 3B13  
                          _ui_disp_clear_totale 3C46                               picc_select@buffer 00D9  
                               ___lldiv@counter 0034                                ?_ui_uint32_2_str 0031  
                               ui_head_hide@loc 0073                                    _iic_send_ack 3E0F  
                               ui_head_hide@ret 0075                                 ui_head_hide@str 0076  
                                    _ui_mem_cpy 3F8C                        ?_modbus_response_process 004E  
                        mfrc522_bal_write_reg@x 0077                        ??_ui_key_process_up_down 0053  
                                    ??_valve_on 0073               __end_of_ui_disp_set_imd_flow_uint 3D41  
                             picc_select@result 00EB                                ___aldiv@quotient 002A  
       modbus_response_read_clib_data@startAddr 003A                           __end_of_iic_waite_ack 30AE  
                       ?_mfrc522_hal_antenna_on 0070                                      _valveTimer 0138  
                          ??_my_uart1_send_poll 0074                 __end_of_my_uart1_received_ready 3B0A  
                                    _rtVolume_L 00A0                            ??_EUSART1_Initialize 0073  
                              ?_in_app_vavle_on 0070                                 ??_key_scan_call 0075  
                                    _valve_stop 3C58                        picc_authenticate@command 005D  
                                   ?_crc_append 0028                              _uart1ReceivedCount 012C  
                            _uart1ReceivedTimer 0140                                ??_WDT_Initialize 0073  
                      __end_of_lcd_disp_refresh 3BEE                        _TMR0_SetInterruptHandler 3AE6  
                                     _PORTAbits 000C                                       _PORTBbits 000D  
                                     _PORTCbits 000E                                       _PORTDbits 000F  
                     __size_of_ui_disp_set_line 0047                                     ?_crc_verify 0028  
                      picc_authenticate@waitIRQ 005E                           picc_select@selectDone 00D2  
                          ?_ui_key_process_down 0070                         _adcSamplingTimerOneTime 0126  
                __size_of_ui_key_process_cancel 012B                                      crc_sum@crc 0026  
                                    crc_sum@buf 0073                                      crc_sum@len 0075  
                                   ?_lcd_config 0070                                ___lbmod@dividend 0020  
                 __end_of_ui_key_process_cancel 12FB                            rfid_comm_process@ret 01D2  
                                     _TRISAbits 008C                rfid_comm_process_recharge@stpDec 006F  
                                     _TRISBbits 008D                                       _TRISCbits 008E  
                                     _TRISDbits 008F                rfid_comm_process_recharge@stpInc 006E  
                          ui_disp_set_calib@loc 003D                                       _TRISFbits 030C  
                     __size_of_ui_disp_totale_v 0076                     __size_of_event_door_monitor 0006  
                    mfrc522_bal_set_bit_reg@reg 0025                      mfrc522_bal_set_bit_reg@tmp 0024  
                   iic_received_byte_if_ack@ack 0020                     iic_received_byte_if_ack@ret 0021  
                      __end_of_DATAEE_WriteByte 3E48                           ??_timer0_irq_callback 0073  
                                _ui_key_process 2E19                                       _CardError 0139  
                                   ?_m_math_pow 0028                                     ___lbmod@rem 0022  
                      ??_picc_req_a_or_wakeup_a 004C                           picc_select@txLastBits 00EA  
                               iic_send_ack@ack 0073                             __end_of_defaultKeyA 392B  
                    __end_of_ui_disp_str_num_ex 2747                      mfrc522_hal_calculate_crc@i 002F  
      modbus_response_write_clib_data@startAddr 004A                                   ??_lcd_disp_dp 0033  
             __end_of_mfapi_is_new_card_present 341E                        ?_mfrc522_bal_set_bit_reg 0022  
                         ?_ui_disp_clear_totale 0070                               mifare_read@buffer 004A  
                              ?_app_flow_lookup 0073                          ?_pcd_mifare_transceive 004A  
                         create_card_key_b@keyb 0076                  __end_of_mfrc522_hal_antenna_on 3D71  
                             mifare_read@result 0050                                   _systemTikerms 0132  
                            iic_received_byte@i 0075                      ?_mfrc522_hal_calculate_crc 0026  
                   __end_of_event_power_monitor 3B8E            __end_of_app_flow_get_adcAverageValue 11D0  
         __size_of_app_flow_get_adcAverageValue 0106                    _app_flow_get_adcAverageValue 10CA  
                                __end_of___bmul 3C46                        ui_key_process_cancel@ret 0050  
                  ?_ui_key_process_up_down_main 0070                                  __end_of___lmul 338B  
                             ui_key_process@t16 0056                                  __end_of___wmul 3EA0  
                   picc_req_a_or_wakeup_a@__cmd 0051                                      m_mem_set@x 0075  
                ?_app_flow_rt_balance_money_cal 0070            __end_of_mfrc522_bal_read_fifo_len_ex 3734  
         __size_of_mfrc522_bal_read_fifo_len_ex 0042                    _mfrc522_bal_read_fifo_len_ex 36F2  
                    __size_of_ui_disp_modbus_id 0011                               __size_of_TMR0_ISR 0038  
                             __size_of_TMR1_ISR 0012                 __size_of_ui_disp_transfer_money 0091  
                              _adcSamplingTimer 0128                                _adcSamplingTimes 00BF  
                           _timer1_irq_callback 1803                          ?_OSCILLATOR_Initialize 0070  
                __size_of_ui_disp_clear_balance 0013                   __size_of_data_api_read_eeprom 001F  
                 __end_of_ui_disp_clear_balance 3C7E                           ??_ui_key_process_down 0046  
                        ?_flow_sampling_process 0070                   adc_mcp3241_start_convert_16@b 0024  
                 adc_mcp3241_start_convert_16@g 0022                          data_api_write_eeprom@i 0077  
                             crc_verify@message 0028              __size_of_mfrc522_bal_write_reg_len 0026  
                    __size_of_ui_disp_set_calib 0082                             start_initialization 0039  
                     picc_authenticate@sendData 0051                        __size_of_TMR0_Initialize 0016  
               __size_of_PIN_MANAGER_Initialize 0035                           __end_of_led_port_init 3D8A  
                    ?_data_api_system_data_init 0070                      __size_of_ui_disp_set_price 005F  
                         _data_api_write_eeprom 3EFF                                 _LCDDigitalTable 3829  
                        ??_other_gpio_port_init 0073                                 ??_m_system_init 0077  
                  pcd_mifare_transceive@sendLen 004C                 __size_of_data_api_flash_process 001B  
                        __end_of_ui_key_process 2E90                               ??_lcd_set_com_seg 002A  
                  pcd_mifare_transceive@waitIRq 0065                           __end_of_m_mem_cpy_len 3DBE  
                   __size_of_ui_key_set_process 01D0              __end_of_rfid_comm_process_read_dec 3674  
                    _rfid_comm_process_read_dec 3635                    data_api_system_data_init@sta 0034  
            __end_of_rfid_comm_process_read_inc 36B3                      _rfid_comm_process_read_inc 3674  
                                _getRegisterVal 0950              __end_of_rfid_comm_process_recharge 0DA3  
                    _rfid_comm_process_recharge 0B78                picc_req_a_or_wakeup_a@bufferATQA 004A  
                         __size_of_mifare_write 0047                            ?_timer1_irq_callback 0070  
                                   _calVolumeTs 01A2                             __size_of_crc_append 0031  
                               ___llmod@divisor 0020                picc_req_a_or_wakeup_a@bufferSize 004B  
                               ___llmod@counter 0074                     __size_of_ui_key_waite_up_ex 0032  
                           DATAEE_ReadByte@bAdd 0073                        pcd_comm_with_picc@status 0045  
                           __size_of_crc_verify 0037                      __size_of_picc_stop_cryptol 0009  
                   __size_of_app_flow_money_off 002B              pcd_mifare_transceive@acceptTimeout 004D  
              __size_of_mfrc522_bal_clr_bit_reg 0017                        __size_of_TMR1_Initialize 001D  
                                   ?_ui_mem_cpy 0073                             __size_of_lcd_config 0022  
                          __end_of_ui_head_hide 30D8       modbus_response_write_single_register@rbuf 003C  
                         mfrc522_bal_read_reg@x 0021                                        ??___bmul 0025  
                                      ??___lmul 0073                 __size_of_ui_key_process_up_down 00E6  
                                      ??___wmul 0077                               ??_ui_disp_str_num 002B  
                           __end_of_lcd_disp_dp 2CC5                             ui_start_display@dly 002F  
                             ?_lcd_clear_buffer 0070                                     __pdataBANK2 0169  
                                   __pdataBANK3 01C8                                     __pdataBANK4 0220  
                                 ??_mifare_read 004C                                     ?_valve_stop 0070  
                 app_flow_get_adcAverageValue@i 004A                   app_flow_get_adcAverageValue@j 0043  
                __size_of_ui_disp_set_device_id 0014                   __size_of_mfrc522_hal_reset_sf 0009  
              __end_of_data_api_system_data_get 3C92                   __end_of_ui_disp_set_device_id 3CA6  
                            mifare_write@buffer 0069                   ?_app_flow_get_adcAverageValue 0035  
                               _lcd_disp_code_0 315D                                 _lcd_disp_code_1 318B  
                               _lcd_disp_code_2 31B9                                 _lcd_disp_code_3 31E7  
                 ??_ui_key_process_up_down_main 0073                                 _lcd_disp_code_4 3215  
                               _lcd_disp_code_5 3243                                 _lcd_disp_code_6 3271  
                               _lcd_disp_code_7 329F                              ??_lcd_clear_buffer 0077  
                          __end_of_ui_disp_flow 2357                            __end_of_ui_disp_menu 2000  
                           __size_of_m_math_pow 003F                        ??_ui_disp_set_balanceOff 0078  
                 ?_mfrc522_bal_read_fifo_len_ex 0020                        _iic_received_byte_if_ack 3BAC  
                            mifare_write@result 00CE                        app_flow_adc_2_flow@index 0049  
          __end_of_mfrc522_hal_set_antenna_gain 3DD9           __size_of_mfrc522_hal_set_antenna_gain 001B  
                  _mfrc522_hal_set_antenna_gain 3DBE                     __end_of_app_flow_adc_2_flow 06A4  
                                   __pbssBIGRAM 2200                                 _cardUidBlockBuf 0420  
                                   __pbssCOMMON 0078                                _mfrc522_hal_init 2E90  
                              lcd_disp_cln@show 0034                mfrc522_bal_write_read_via_spi@rb 0075  
                              lcd_disp_code@loc 0075                                       ___latbits 0003  
                      __size_of_ui_key_waite_up 0031                   __size_of_EUSART1_Transmit_ISR 0001  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00CB  
                                 __pcstackBANK3 01D2                                    _mifare_write 2837  
                     __size_of_ui_start_display 0043               __end_of_mfrc522_bal_write_reg_len 3F8C  
                                   _defaultKeyA 3925                                   ??_picc_halt_a 004A  
                               ?_ui_key_process 0070                          __end_of_getRegisterVal 0B78  
                                 ??_picc_select 004B                               _get_globle_ticker 3B71  
                             _set_globle_ticker 3B13                          _ui_disp_transfer_money 2199  
                                  _TablerxAlign 390F                           ??_timer1_irq_callback 0074  
                  __size_of_EUSART1_Receive_ISR 0024                               __size_of_lcd_init 0005  
                             __size_of_iic_stop 0016                               picc_halt_a@buffer 004D  
                            ?_get_globle_ticker 0073                 __size_of_picc_req_a_or_wakeup_a 0051  
                            ?_set_globle_ticker 0073                          app_flow_adc_2_flow@ad1 0047  
                        app_flow_adc_2_flow@ad2 0043                          ??_ui_disp_clear_totale 0078  
       modbus_response_illgeal_function@errcode 0033                         picc_select@collisionPos 00E2  
                         _TMR0_InterruptHandler 01CE                                       __pnvBANK2 016D  
                                     __pnvBANK3 01CE                               picc_halt_a@result 0051  
                                _rtBalanceMoney 00A8                                ___lwdiv@dividend 0075  
                        _PIN_MANAGER_Initialize 34E3                      ?_app_flow_rt_volume_cal_ex 0070  
                                     _comBuffer 2200                             ??_get_globle_ticker 0075  
                           ??_set_globle_ticker 0075                          _data_api_flash_process 3DD9  
              __end_of_TMR1_SetInterruptHandler 3AF2                     modbus_response_command@rbuf 0049  
                    picc_authenticate@blockAddr 004A                                        ?___aldiv 0020  
                                      ?___almod 0020                                        ?___awdiv 0073  
                                     __ptext100 2E90                                       __ptext101 3DBE  
                                     __ptext110 3CBA                                       __ptext102 3B9D  
                                     __ptext111 3000                                       __ptext103 3D13  
                                     __ptext120 3AEC                                       __ptext112 3D71  
                                     __ptext104 3CFC                                       __ptext121 07EA  
                                     __ptext113 3ADB                                       __ptext105 3AF8  
                                     __ptext130 3FD9                                       __ptext122 3AE6  
                                     __ptext114 3F20                                       __ptext106 3D59  
                                     __ptext131 30D8                                       __ptext123 34E3  
                                     __ptext115 3E65                                       __ptext107 3BCC  
                                     __ptext140 35BD                                       __ptext132 3FB2  
                                     __ptext124 3AD6                                       __ptext116 3C22  
                                     __ptext108 3D8A                                       __ptext141 3CE5  
                                     __ptext133 3D41                                       __ptext125 3B8E  
                                     __ptext117 3ACE                                       __ptext109 0800  
                                     __ptext150 3AE0                                       __ptext142 32FB  
                                     __ptext134 2357                                       __ptext126 2F09  
                                     __ptext118 3E48                                       __ptext151 2955  
                                     __ptext143 3085                                       __ptext135 10CA  
                                     __ptext127 1919                                       __ptext119 1800  
                                     __ptext160 338B                                       __ptext152 3C7E  
                                     __ptext144 3CCF                                       __ptext136 03BD  
                                     __ptext128 3734                                       __ptext161 2AEB  
                                     __ptext153 1C60                                       __ptext145 3B63  
                                     __ptext137 335B                                       __ptext129 222A  
                                     __ptext162 3E82                                       __ptext154 3EFF  
                                     __ptext146 3BAC                                       __ptext138 2A45  
                                     __ptext155 3E2B                                       __ptext147 3E0F  
                                     __ptext139 332B                                       __ptext164 3C10  
                                     __ptext156 3EA0                                       __ptext148 305C  
                                     __ptext165 354D                                       __ptext157 3B33  
                                     __ptext149 3B7F                                       __ptext166 0003  
                                     __ptext158 2800                                       __ptext167 3F42  
                                     __ptext159 3DA3                                        ?___awmod 0073  
                                      ?___lbmod 0073                         ??_data_api_rt_data_save 0033  
                                      ?___lldiv 0028                                        ?___llmod 0020  
                 ui_key_process_up_down_main@up 0074                                        ?___lwdiv 0073  
                                      ?___lwmod 0073                              _ui_disp_flow_error 3B28  
                             __size_of_valve_on 0008                         ?_app_flow_money_warning 0070  
          app_flow_get_adcAverageValue@maxIndex 003F                    mfrc522_bal_write_reg_len@buf 0020  
                  mfrc522_bal_write_reg_len@len 0022                    mfrc522_bal_write_reg_len@reg 0023  
                 ui_disp_balance_and_volume@ret 003C                    ??_INTERRUPT_InterruptManager 0072  
          app_flow_get_adcAverageValue@minIndex 0040                                ___almod@dividend 0024  
                                     _iic_start 3CE5                                       __pswtext1 387A  
                                     __pswtext2 388A                                       __pswtext3 3851  
                                      ?_crc_sum 0073                                _ui_disp_set_line 287E  
                      __end_of_in_app_vavle_off 3FD9                         __end_of_LCDDigitalTable 3851  
                                      _BAUD1CON 019F                                       _m_mem_set 3BBC  
                                     _flowError 00C6                             ?_ui_disp_flow_error 0070  
                      __size_of_TMR1_StartTimer 0003                                ??_mfapi_pcd_init 0029  
                  __end_of_mfrc522_bal_read_reg 3DA3                             __end_of_mifare_read 2AEB  
                        ?_data_api_write_eeprom 0020                           pcd_comm_with_picc@cmd 0041  
                 ?_mfrc522_hal_set_antenna_gain 0070                                _ui_disp_totale_v 2DA3  
                  picc_req_a_or_wakeup_a@status 0052                picc_select@currentLevelKnownBits 00EE  
                        _ui_key_process_up_down 1D36                       __end_of_get_globle_ticker 3B7F  
                     __end_of_set_globle_ticker 3B1D                                ___lwdiv@quotient 0020  
                                __size_of_delay 000E                             __size_of_ui_mem_cpy 0026  
                                      _LCDDATA0 07A0                  adc_mcp3241_start_convert_16@t8 0025  
                               ?_getRegisterVal 0035                        __size_of_DATAEE_ReadByte 000C  
       key_process_up_down_variable_speed_ex@up 0047            __size_of_ui_key_process_up_down_main 0013  
                            lcd_set_com_seg@com 002F                              lcd_set_com_seg@seg 0028  
                              _calVolumeTimeSec 0141                                 ___aldiv@divisor 0020  
                           __size_of_valve_stop 0013                               ??_TMR0_Initialize 0075  
               mfapi_is_new_card_present@result 005A                                 ___aldiv@counter 0028  
                                ___wmul@product 0020                                        _LATAbits 010C  
                                      _LATBbits 010D                                        _LATCbits 010E  
                                     _sendCount 00C7                             __end_of_picc_halt_a 35BD  
                                      _LATDbits 010F                                        _LATFbits 038C  
                            _pcd_comm_with_picc 06A4                               _iic_received_byte 305C  
                                     clear_ram0 3B4B                                  m_mem_cpy_len@d 0073  
                                m_mem_cpy_len@s 0075                            ??_ui_disp_flow_error 0078  
                                      _PIE1bits 0091                                     _lcd_disp_dp 2C5F  
                   ?_ui_disp_set_balanceWarning 0070                             __end_of_picc_select 03BD  
                      _app_flow_adc_2_flow$4474 003D             __size_of_INTERRUPT_InterruptManager 0033  
                    ??_TMR0_SetInterruptHandler 0075                              ?_iic_received_byte 0070  
                                      _PIR1bits 0011                         __end_of_lcd_disp_code_0 318B  
                       __end_of_lcd_disp_code_1 31B9                         __end_of_lcd_disp_code_2 31E7  
                       __end_of_lcd_disp_code_3 3215                         __end_of_lcd_disp_code_4 3243  
                       __end_of_lcd_disp_code_5 3271                         __end_of_lcd_disp_code_6 329F  
                       __end_of_lcd_disp_code_7 32CD                             ?_pcd_comm_with_picc 0031  
                                     _valve_off 3D41                  __end_of_app_flow_money_warning 4000  
                      ui_key_process_up_down@up 0054                                        _TMR0_ISR 354D  
                                      _TMR1_ISR 3C10         data_api_calibration_table_data_init@sta 0039  
       data_api_calibration_table_data_init@stp 003A                                 ui_disp_flow@flw 003D  
                                  ??_crc_append 002C                    ??_ui_disp_balance_and_volume 003A  
              __size_of_modbus_response_command 00B2                                   _findCardTimer 01A0  
                           ??_iic_received_byte 0073                            picc_select@validBits 004A  
                        _picc_req_a_or_wakeup_a 29A2         data_api_calibration_table_data_save@loc 0044  
                                 ui_mem_cpy@len 0076                    __end_of_ui_key_process_enter 0950  
                             ??_TMR1_Initialize 0075         data_api_calibration_table_data_save@stp 0042  
                                    ?_iic_start 0070                               ___wmul@multiplier 0073  
                             ?_lcd_disp_refresh 0070                                    ??_crc_verify 002C  
               __size_of_ui_disp_set_balanceOff 0031                                      ?_m_mem_set 0073  
                     picc_select@valueOfCollReg 00D8                                    ??_lcd_config 0077  
              __size_of_modbus_response_process 005A                              ??_lcd_disp_refresh 0021  
                ??_app_flow_get_adcAverageValue 0037                        ?_my_uart1_received_ready 0070  
                         DATAEE_WriteByte@bData 0073                       pcd_comm_with_picc@rxAlign 0039  
                     pcd_comm_with_picc@waitIRQ 0031                  ??_mfrc522_bal_read_fifo_len_ex 0077  
                          ??_pcd_comm_with_picc 003B                               ___lmul@multiplier 0020  
                              crc_verify@crccal 002F                        data_api_read_eeprom@addr 0076  
                             ?_DATAEE_WriteByte 0073                                    ??_m_math_pow 0077  
                                      _KeyValue 00C1               __size_of_data_api_system_data_get 0014  
                             ??_ui_key_waite_up 0077                       __end_of_iic_received_byte 3085  
                     ?_data_api_system_data_get 0070                         ??_pcd_mifare_transceive 004E  
                      data_api_rt_data_save@stp 0036                           __size_of_ui_head_hide 002A  
                            ??_DATAEE_WriteByte 0074                              __end_of_crc_append 33BC  
                                    _EECON1bits 0195             __size_of_ui_disp_balance_and_volume 01B3  
                       _mfrc522_bal_clr_bit_reg 3CFC          __end_of_modbus_response_read_clib_data 1AB9  
       __size_of_modbus_response_read_clib_data 00D0                  _modbus_response_read_clib_data 19E9  
                         _mfrc522_bal_write_reg 3BCC                              __end_of_crc_verify 2837  
            pcd_mifare_transceive@cmdBufferSize 0067                              __end_of_lcd_config 3F42  
                   ??_mfrc522_hal_calculate_crc 002B                           __size_of_ui_disp_flow 0099  
                                    ?_valve_off 0070                           __size_of_ui_disp_menu 00F9  
                        __size_of_lcd_disp_code 002D                      ?_ui_disp_set_imd_flow_uint 0070  
                       ??_OSCILLATOR_Initialize 0073                                __size_of___aldiv 0082  
                   __size_of_my_uart1_send_poll 0031                                __size_of___almod 006E  
                              __size_of___awdiv 0052                              _ui_disp_str_num_ex 268F  
                              __size_of___awmod 0046                                __size_of___lbmod 0020  
                              __size_of___lldiv 0053                         ??_flow_sampling_process 004B  
                              __size_of___llmod 0043                     __size_of_EUSART1_Initialize 000F  
                                   _mifare_read 2A98                                __size_of___lwdiv 0035  
                              __size_of___lwmod 002D                                 _lcd_set_com_seg 2F83  
                      __size_of_ui_uint32_2_str 00B9                        _TMR1_SetInterruptHandler 3AEC  
                         __end_of_key_scan_call 3034                __size_of_mfrc522_bal_set_bit_reg 0017  
                                    _ANSELAbits 018C                                      _ANSELFbits 040C  
                            __end_of_m_math_pow 36F2                                        _adcvalue 0122  
                         _TMR1_InterruptHandler 01D0                                __size_of_crc_sum 0056  
                    __end_of_event_door_monitor 3AE6                             ?_ui_disp_str_num_ex 0027  
                                 crc_append@crc 0031                          ui_disp_totale_v@decnum 003C  
                   __end_of_timer0_irq_callback 32FB                        __size_of_in_app_vavle_on 0020  
                              _ui_start_display 3777                          __size_of_iic_send_byte 0030  
                               ___lwdiv@divisor 0073                                 ___lwdiv@counter 0022  
                   ??_data_api_system_data_init 0033                      __size_of_get_globle_ticker 000E  
                                  _ui_head_hide 30AE                      __size_of_set_globle_ticker 000A  
                                      __ptext10 268F                                        __ptext11 3BFF  
                                      __ptext20 344F                                        __ptext12 3CA6  
                                      __ptext21 3BEE                                        __ptext13 2B9B  
                                      __ptext30 0822                                        __ptext22 2531  
                                      __ptext14 287E                                        __ptext31 341E  
                                      __ptext23 3F8C                                        __ptext15 3D2A  
                                      __ptext40 147D                                        __ptext32 3B13  
                                      __ptext24 3130                                        __ptext16 3C92  
                                      __ptext41 2747                                        __ptext33 3B71  
                                      __ptext25 3518                                        __ptext17 2117  
                                      __ptext50 3271                                        __ptext42 36B3  
                                      __ptext34 23F1                                        __ptext26 22BE  
                                      __ptext18 37BA                                        __ptext51 3243  
                                      __ptext43 2CC5                                        __ptext35 11D0  
                                      __ptext27 3C46                                        __ptext19 3480  
                                      __ptext60 2F83                                        __ptext52 3215  
                                      __ptext44 30AE                                        __ptext36 1803  
                                      __ptext28 2DA3                                        __ptext61 3EDF  
                                      __ptext53 31E7                                        __ptext45 3B28  
                                      __ptext37 3C58                                        __ptext29 3C6B  
                                      __ptext70 3635                                        __ptext62 0B78  
                                      __ptext54 31B9                                        __ptext46 28C5  
                                      __ptext38 32CD                                        __ptext71 2BFA  
                                      __ptext63 3674                                        __ptext55 318B  
                                      __ptext47 3BDD                                        __ptext39 1E1C  
                                      __ptext80 06A4                                        __ptext72 2A98  
                                      __ptext64 0DA3                                        __ptext56 315D  
                                      __ptext48 3103                                        __ptext81 2D33  
                                      __ptext73 3B0A                                        __ptext65 2837  
                                      __ptext57 3B3F                                        __ptext49 329F  
                                      __ptext90 1008                                        __ptext82 3F66  
                                      __ptext74 00A0                                        __ptext66 2095  
                                      __ptext58 2C5F                                        __ptext91 2490  
                                      __ptext83 36F2                                        __ptext75 3C34  
                                      __ptext67 3DD9                                        __ptext59 3DF4  
                                      __ptext92 12FB                                        __ptext84 3BBC  
                                      __ptext76 29F3                                        __ptext68 185D  
                                      __ptext93 19E9                                        __ptext85 300D  
                                      __ptext77 3585                                        __ptext69 3034  
                                      __ptext94 35F6                                        __ptext86 3EBF  
                                      __ptext78 33ED                                        __ptext95 25DD  
                                      __ptext87 1000                                        __ptext79 29A2  
                                      __ptext96 33BC                                        __ptext88 3B01  
                             _picc_authenticate 2BFA                                        __ptext97 0950  
                                      __ptext89 2B41                                        __ptext98 2013  
                                      __ptext99 3B1D                                        _bkupMenu 00C2  
                                   _picc_halt_a 3585                           _ui_key_process_cancel 11D0  
                                      _hexTable 3869                                        _lcd_init 3ADB  
                     picc_req_a_or_wakeup_a@cmd 0050                 ??_app_flow_rt_balance_money_cal 0035  
                                      _iic_stop 3CCF                                 ___almod@divisor 0020  
                             ??_TMR1_StartTimer 0073                          __size_of_iic_waite_ack 0029  
                                   _picc_select 00A0                  ??_mfrc522_hal_set_antenna_gain 0026  
                            ?_picc_authenticate 004A                                 ___almod@counter 0074  
                   DATAEE_WriteByte@GIEBitValue 0075                                        _pcdPwrOn 0135  
                        mifare_write@bufferSize 006A                     ?_rfid_comm_process_read_dec 0070  
                   ?_rfid_comm_process_read_inc 0070                                        _uiAdjbuf 0161  
                  __end_of_data_api_read_eeprom 3EBF                     ?_rfid_comm_process_recharge 0070  
                               _ui_disp_str_num 2531                                        _opReason 00C4  
                                 __size_of_main 00D2                                    _ui_disp_flow 22BE  
                              _smallFlowNotCare 013B                                    _ui_disp_menu 1F07  
                        _ui_disp_set_balanceOff 344F                    ?_ui_disp_small_flow_how_care 0070  
                           picc_select@maxBytes 00D7                    _TMR0_DefaultInterruptHandler 0000  
                      mfrc522_hal_antenna_on@t8 0023                               ??_DATAEE_ReadByte 0073  
                          ??_ui_disp_str_num_ex 002B                                        _tmTemp16 0120  
                           ??_picc_authenticate 004E                      ?_mfapi_is_new_card_present 0070  
                                      _password 012A                        __end_of_mfrc522_hal_init 2F09  
                          _mfrc522_bal_read_reg 3D8A                                      _RC1STAbits 019D  
                                  ??_ui_mem_cpy 0075                 pcd_comm_with_picc@controlBuffer 0042  
                    ??_iic_received_byte_if_ack 0076                                ?_lcd_disp_code_0 0070  
                              ?_lcd_disp_code_1 0070                                        _valve_on 1000  
                              ?_lcd_disp_code_2 0070                                ?_lcd_disp_code_3 0070  
                              ?_lcd_disp_code_4 0070                                ?_lcd_disp_code_5 0070  
                              ?_lcd_disp_code_6 0070                                ?_lcd_disp_code_7 0070  
          __size_of_adc_mcp3241_read_convert_16 0039                             picc_select@uidIndex 00E5  
                      mfrc522_bal_write_reg@reg 0020                                        int$flags 007E  
                                      crc_sum@i 0024                                        crc_sum@j 0022  
                   __end_of_ui_key_process_down 2490   __end_of_modbus_response_write_single_register 10CA  
__size_of_modbus_response_write_single_register 00C2         ??_modbus_response_write_single_register 0036  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 1008  
                                  ??_valve_stop 0073                                        _userKeyB 01C8  
            __end_of_INTERRUPT_InterruptManager 0037                      _INTERRUPT_InterruptManager 0004  
                      __size_of_app_flow_lookup 009A                   rfid_comm_process_read_dec@ret 0063  
                          get_globle_ticker@ret 0075                             _EUSART1_Receive_ISR 3F42  
                                   ??_iic_start 0075          __end_of_mfrc522_bal_write_read_via_spi 0822  
       __size_of_mfrc522_bal_write_read_via_spi 0022                  _mfrc522_bal_write_read_via_spi 0800  
                  mfapi_is_new_card_present@cmd 0057                         data_api_read_eeprom@buf 0074  
                                   ??_m_mem_set 0077                         data_api_read_eeprom@len 0077  
                                   _uart1Buffer 04A0                    __size_of_event_power_monitor 000F  
                      modbus_response_command@i 0047                                ??_ui_key_process 0055  
                 rfid_comm_process_read_inc@ret 0063                         _flowCalibrationLocation 013D  
                         mifare_write@cmdBuffer 00CC                                      _INTCONbits 000B  
                     __end_of_picc_authenticate 2C5F                           _ui_disp_clear_balance 3C6B  
                     picc_select@responseBuffer 00E8                                m_mem_cpy_len@len 0077  
                     picc_select@responseLength 00E7              modbus_response_write_clib_data@t16 0048  
                          iic_waite_ack@timeout 0076                      __end_of_ui_key_set_process 1800  
                                __pstringtext10 38BE                                  __pstringtext11 38C7  
                                __pstringtext20 391E                                  __pstringtext12 38D0  
                                __pstringtext21 392B                                  __pstringtext13 38D9  
                                __pstringtext22 3931                                  __pstringtext14 38E2  
                                __pstringtext23 3937                                  __pstringtext15 38EB  
                     _mfrc522_hal_calculate_crc 2D33                                  __pstringtext24 393D  
                                __pstringtext16 38F4                                  __pstringtext25 3943  
                                __pstringtext17 38FD                                  __pstringtext26 3948  
                                __pstringtext18 3906                                  __pstringtext27 394D  
                                __pstringtext19 3917                                  __pstringtext28 3951  
                                __pstringtext29 0000              modbus_response_write_clib_data@buf 004C  
                       ?_ui_disp_transfer_money 0070                                   _lcd_disp_code 3103  
                        picc_select@bytesToCopy 00E6                       __size_of_lcd_clear_buffer 000C  
               mfrc522_bal_read_fifo_len_ex@adr 0025                 mfrc522_bal_read_fifo_len_ex@buf 0020  
                  modbus_response_process@pmdbs 0052                 mfrc522_bal_read_fifo_len_ex@len 0022  
               mfrc522_bal_read_fifo_len_ex@reg 0024                         __size_of_WDT_Initialize 0004  
                         mifare_write@blockAddr 00CB                              __end_of_ui_mem_cpy 3FB2  
                  __end_of_mfrc522_hal_reset_sf 3B01                   ?_adc_mcp3241_start_convert_16 0022  
                         __end_of_m_system_init 3CCF                                        intlevel1 0000  
                 __size_of_other_gpio_port_init 000D                      __end_of_ui_key_waite_up_ex 34E3  
                    __size_of_iic_received_byte 0029                            ?_EUSART1_Receive_ISR 0070  
                     ??_mfrc522_bal_clr_bit_reg 0023                                ___lwmod@dividend 0075  
                             _create_card_key_b 3034                                ___lldiv@dividend 002C  
                       ?_PIN_MANAGER_Initialize 0070                              __end_of_valve_stop 3C6B  
                    __end_of_app_flow_money_off 3103                        __end_of_ui_disp_set_line 28C5  
                          _ui_key_process_enter 0822                               __CFG_CLKOUTEN$OFF 0000  
                        ?_mfrc522_bal_write_reg 0077                         ?_data_api_flash_process 0070  
                            ?_create_card_key_b 0073                    __end_of_EUSART1_Transmit_ISR 0004  
                         ?_mfrc522_bal_read_reg 0070                                 _adcAverageValue 00B8  
                adc_mcp3241_read_convert_16@t16 0027                   ??_ui_disp_small_flow_how_care 002D  
                                 _iic_send_byte 32FB                  adc_mcp3241_read_convert_16@sta 0026  
              ??_ui_disp_set_transferMoneyLimit 0078                 ?_ui_disp_set_transferMoneyLimit 0070  
                     _data_api_system_data_init 2955                    modbus_response_command@pmdbs 0046  
                   ??_app_flow_rt_volume_cal_ex 0035                        __end_of_ui_disp_totale_v 2E19  
                       __end_of_lcd_set_com_seg 3000                              picc_select@rxAlign 00D6  
                          _uart1ReceivedTimeout 012E                   rfid_comm_process_recharge@ret 006D  
                                   ??_valve_off 0073                          __size_of_led_port_init 0019  
            __end_of_ui_disp_balance_and_volume 1630                      _ui_disp_balance_and_volume 147D  
                       _modbus_response_command 25DD                             ??_create_card_key_b 0075  
                                 _iic_waite_ack 3085                          __size_of_m_mem_cpy_len 001B  
                __size_of_data_api_rt_data_save 00BC                   __end_of_data_api_rt_data_save 1919  
                                   _valveStatus 007A                                   __pstringtext1 3800  
                                 __pstringtext2 3829                                   __pstringtext3 3869  
                                 __pstringtext4 390F                                   __pstringtext5 3925  
                                 __pstringtext6 389A                                   __pstringtext7 38A3  
                                 __pstringtext8 38AC                                   __pstringtext9 38B5  
                       ??_data_api_write_eeprom 0076                                   _warningStatus 013A  
                                    _OPTION_REG 0095                           _ui_disp_set_device_id 3C92  
                       _modbus_response_process 2B41                                     _rtVolume_m3 00B0  
                             ?_in_app_vavle_off 0070                         ?_ui_key_process_up_down 0070  
                                   crc_append@n 002A                              ui_disp_flow@decnum 003C  
    data_api_calibration_table_data_save@single 0033                                ___lldiv@quotient 0030  
                              ??_getRegisterVal 0038                       _Main_flowCalibrationTable 2374  
                               ___lwmod@divisor 0073                                 _TMR0_Initialize 07EA  
                   mfrc522_bal_clr_bit_reg@bits 0022                                 ___lwmod@counter 0020  
                __end_of_ui_disp_transfer_money 222A                    pcd_comm_with_picc@bitFraming 003E  
                            ??_in_app_vavle_off 0074                                    ___aldiv@sign 0029  
                        picc_select@uidComplete 00D1                          ?_ui_key_process_cancel 0070  
                   __end_of_timer1_irq_callback 185D                                  ?_lcd_disp_code 0075  
                          picc_authenticate@key 004B                               ??_ui_uint32_2_str 0036  
                          picc_authenticate@uid 004D                         __end_of_ui_disp_str_num 25DD  
                         my_uart1_send_poll@buf 0075                           my_uart1_send_poll@len 0073  
                    ?_mfrc522_bal_write_reg_len 0020                       __end_of_create_card_key_b 305C  
                  __size_of_app_flow_adc_2_flow 02E7                           ??_EUSART1_Receive_ISR 0070  
                __end_of_PIN_MANAGER_Initialize 3518                      mfrc522_bal_clr_bit_reg@reg 0025  
                                  ___almod@sign 0075                      mfrc522_bal_clr_bit_reg@tmp 0024  
                             ??_in_app_vavle_on 0074                        ??_mfrc522_hal_antenna_on 0022  
                                 ?_lcd_disp_all 0070                                   ?_lcd_disp_cln 0070  
                  pcd_comm_with_picc@_validBits 0048                                   ?_lcd_disp_str 0022  
                __end_of_data_api_flash_process 3DF4                           ?_ui_key_process_enter 0070  
                            picc_authenticate@i 005F                                    ?_lcd_disp_dp 0032  
 __end_of_key_process_up_down_variable_speed_ex 1C60  __size_of_key_process_up_down_variable_speed_ex 00D5  
       ??_key_process_up_down_variable_speed_ex 0048          ?_key_process_up_down_variable_speed_ex 0043  
         _key_process_up_down_variable_speed_ex 1B8B                                     crc_verify@n 002A  
                   pcd_mifare_transceive@result 0068                                  ?_iic_send_byte 0070  
                               _TMR1_Initialize 3E48                   __size_of_ui_disp_clear_totale 0012  
                                 ?_iic_send_ack 0070                          flow_sampling_process@i 004C  
