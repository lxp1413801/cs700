

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Nov 25 20:41:54 2018

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	stringtext6,global,class=STRCODE,delta=2
    15                           	psect	stringtext7,global,class=STRCODE,delta=2
    16                           	psect	stringtext8,global,class=STRCODE,delta=2
    17                           	psect	stringtext9,global,class=STRCODE,delta=2
    18                           	psect	stringtext10,global,class=STRCODE,delta=2
    19                           	psect	stringtext11,global,class=STRCODE,delta=2
    20                           	psect	stringtext12,global,class=STRCODE,delta=2
    21                           	psect	stringtext13,global,class=STRCODE,delta=2
    22                           	psect	stringtext14,global,class=STRCODE,delta=2
    23                           	psect	stringtext15,global,class=STRCODE,delta=2
    24                           	psect	stringtext16,global,class=STRCODE,delta=2
    25                           	psect	stringtext17,global,class=STRCODE,delta=2
    26                           	psect	stringtext18,global,class=STRCODE,delta=2
    27                           	psect	stringtext19,global,class=STRCODE,delta=2
    28                           	psect	stringtext20,global,class=STRCODE,delta=2
    29                           	psect	stringtext21,global,class=STRCODE,delta=2
    30                           	psect	stringtext22,global,class=STRCODE,delta=2
    31                           	psect	stringtext23,global,class=STRCODE,delta=2
    32                           	psect	stringtext24,global,class=STRCODE,delta=2
    33                           	psect	stringtext25,global,class=STRCODE,delta=2
    34                           	psect	stringtext26,global,class=STRCODE,delta=2
    35                           	psect	stringtext27,global,class=STRCODE,delta=2
    36                           	psect	stringtext28,global,class=STRCODE,delta=2
    37                           	psect	stringtext29,global,class=STRCODE,delta=2
    38                           	psect	cinit,global,class=CODE,merge=1,delta=2
    39                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    40                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    41                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    42                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    43                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    44                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    45                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    46                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    47                           	psect	inittext,global,class=CODE,delta=2
    48                           	psect	clrtext,global,class=CODE,delta=2
    49                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    50                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    51                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    52                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    53                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    54                           	psect	text1,local,class=CODE,merge=1,delta=2
    55                           	psect	text2,local,class=CODE,merge=1,delta=2
    56                           	psect	text3,local,class=CODE,merge=1,delta=2
    57                           	psect	text4,local,class=CODE,merge=1,delta=2
    58                           	psect	text5,local,class=CODE,merge=1,delta=2
    59                           	psect	text6,local,class=CODE,merge=1,delta=2
    60                           	psect	text7,local,class=CODE,merge=1,delta=2
    61                           	psect	text8,local,class=CODE,merge=1,delta=2
    62                           	psect	text9,local,class=CODE,merge=1,delta=2
    63                           	psect	text10,local,class=CODE,merge=1,delta=2
    64                           	psect	text11,local,class=CODE,merge=1,delta=2
    65                           	psect	text12,local,class=CODE,merge=1,delta=2
    66                           	psect	text13,local,class=CODE,merge=1,delta=2
    67                           	psect	text14,local,class=CODE,merge=1,delta=2
    68                           	psect	text15,local,class=CODE,merge=1,delta=2
    69                           	psect	text16,local,class=CODE,merge=1,delta=2
    70                           	psect	text17,local,class=CODE,merge=1,delta=2
    71                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    72                           	psect	text19,local,class=CODE,merge=1,delta=2
    73                           	psect	text20,local,class=CODE,merge=1,delta=2
    74                           	psect	text21,local,class=CODE,merge=1,delta=2
    75                           	psect	text22,local,class=CODE,merge=1,delta=2
    76                           	psect	text23,local,class=CODE,merge=1,delta=2
    77                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    78                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    79                           	psect	text26,local,class=CODE,merge=1,delta=2
    80                           	psect	text27,local,class=CODE,merge=1,delta=2
    81                           	psect	text28,local,class=CODE,merge=1,delta=2
    82                           	psect	text29,local,class=CODE,merge=1,delta=2
    83                           	psect	text30,local,class=CODE,merge=1,delta=2
    84                           	psect	text31,local,class=CODE,merge=1,delta=2
    85                           	psect	text32,local,class=CODE,merge=1,delta=2
    86                           	psect	text33,local,class=CODE,merge=1,delta=2
    87                           	psect	text34,local,class=CODE,merge=1,delta=2
    88                           	psect	text35,local,class=CODE,merge=1,delta=2
    89                           	psect	text36,local,class=CODE,merge=1,delta=2
    90                           	psect	text37,local,class=CODE,merge=1,delta=2
    91                           	psect	text38,local,class=CODE,merge=1,delta=2
    92                           	psect	text39,local,class=CODE,merge=1,delta=2
    93                           	psect	text40,local,class=CODE,merge=1,delta=2
    94                           	psect	text41,local,class=CODE,merge=1,delta=2
    95                           	psect	text42,local,class=CODE,merge=1,delta=2
    96                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    97                           	psect	text44,local,class=CODE,merge=1,delta=2
    98                           	psect	text45,local,class=CODE,merge=1,delta=2
    99                           	psect	text46,local,class=CODE,merge=1,delta=2
   100                           	psect	text47,local,class=CODE,merge=1,delta=2
   101                           	psect	text48,local,class=CODE,merge=1,delta=2
   102                           	psect	swtext1,local,class=CONST,delta=2
   103                           	psect	text49,local,class=CODE,merge=1,delta=2
   104                           	psect	text50,local,class=CODE,merge=1,delta=2
   105                           	psect	text51,local,class=CODE,merge=1,delta=2
   106                           	psect	text52,local,class=CODE,merge=1,delta=2
   107                           	psect	text53,local,class=CODE,merge=1,delta=2
   108                           	psect	text54,local,class=CODE,merge=1,delta=2
   109                           	psect	text55,local,class=CODE,merge=1,delta=2
   110                           	psect	text56,local,class=CODE,merge=1,delta=2
   111                           	psect	text57,local,class=CODE,merge=1,delta=2
   112                           	psect	text58,local,class=CODE,merge=1,delta=2
   113                           	psect	swtext2,local,class=CONST,delta=2
   114                           	psect	text59,local,class=CODE,merge=1,delta=2
   115                           	psect	text60,local,class=CODE,merge=1,delta=2
   116                           	psect	text61,local,class=CODE,merge=1,delta=2,group=2
   117                           	psect	text62,local,class=CODE,merge=1,delta=2
   118                           	psect	text63,local,class=CODE,merge=1,delta=2
   119                           	psect	text64,local,class=CODE,merge=1,delta=2
   120                           	psect	text65,local,class=CODE,merge=1,delta=2
   121                           	psect	text66,local,class=CODE,merge=1,delta=2
   122                           	psect	text67,local,class=CODE,merge=1,delta=2
   123                           	psect	text68,local,class=CODE,merge=1,delta=2
   124                           	psect	text69,local,class=CODE,merge=1,delta=2
   125                           	psect	text70,local,class=CODE,merge=1,delta=2
   126                           	psect	text71,local,class=CODE,merge=1,delta=2
   127                           	psect	text72,local,class=CODE,merge=1,delta=2
   128                           	psect	text73,local,class=CODE,merge=1,delta=2
   129                           	psect	text74,local,class=CODE,merge=1,delta=2
   130                           	psect	text75,local,class=CODE,merge=1,delta=2,group=2
   131                           	psect	text76,local,class=CODE,merge=1,delta=2,group=2
   132                           	psect	text77,local,class=CODE,merge=1,delta=2
   133                           	psect	text78,local,class=CODE,merge=1,delta=2
   134                           	psect	text79,local,class=CODE,merge=1,delta=2
   135                           	psect	text80,local,class=CODE,merge=1,delta=2
   136                           	psect	text81,local,class=CODE,merge=1,delta=2
   137                           	psect	text82,local,class=CODE,merge=1,delta=2
   138                           	psect	text83,local,class=CODE,merge=1,delta=2
   139                           	psect	text84,local,class=CODE,merge=1,delta=2
   140                           	psect	text85,local,class=CODE,merge=1,delta=2
   141                           	psect	text86,local,class=CODE,merge=1,delta=2
   142                           	psect	text87,local,class=CODE,merge=1,delta=2
   143                           	psect	text88,local,class=CODE,merge=1,delta=2
   144                           	psect	text89,local,class=CODE,merge=1,delta=2
   145                           	psect	text90,local,class=CODE,merge=1,delta=2
   146                           	psect	text91,local,class=CODE,merge=1,delta=2
   147                           	psect	text92,local,class=CODE,merge=1,delta=2
   148                           	psect	text93,local,class=CODE,merge=1,delta=2
   149                           	psect	text94,local,class=CODE,merge=1,delta=2
   150                           	psect	text95,local,class=CODE,merge=1,delta=2
   151                           	psect	text96,local,class=CODE,merge=1,delta=2
   152                           	psect	text97,local,class=CODE,merge=1,delta=2
   153                           	psect	swtext3,local,class=CONST,delta=2
   154                           	psect	text98,local,class=CODE,merge=1,delta=2,group=2
   155                           	psect	text99,local,class=CODE,merge=1,delta=2
   156                           	psect	text100,local,class=CODE,merge=1,delta=2
   157                           	psect	text101,local,class=CODE,merge=1,delta=2
   158                           	psect	text102,local,class=CODE,merge=1,delta=2
   159                           	psect	text103,local,class=CODE,merge=1,delta=2
   160                           	psect	text104,local,class=CODE,merge=1,delta=2
   161                           	psect	text105,local,class=CODE,merge=1,delta=2
   162                           	psect	text106,local,class=CODE,merge=1,delta=2
   163                           	psect	text107,local,class=CODE,merge=1,delta=2
   164                           	psect	text108,local,class=CODE,merge=1,delta=2
   165                           	psect	text109,local,class=CODE,merge=1,delta=2
   166                           	psect	text110,local,class=CODE,merge=1,delta=2
   167                           	psect	text111,local,class=CODE,merge=1,delta=2
   168                           	psect	text112,local,class=CODE,merge=1,delta=2
   169                           	psect	text113,local,class=CODE,merge=1,delta=2
   170                           	psect	text114,local,class=CODE,merge=1,delta=2
   171                           	psect	text115,local,class=CODE,merge=1,delta=2
   172                           	psect	text116,local,class=CODE,merge=1,delta=2
   173                           	psect	text117,local,class=CODE,merge=1,delta=2
   174                           	psect	text118,local,class=CODE,merge=1,delta=2
   175                           	psect	text119,local,class=CODE,merge=1,delta=2
   176                           	psect	text120,local,class=CODE,merge=1,delta=2
   177                           	psect	text121,local,class=CODE,merge=1,delta=2
   178                           	psect	text122,local,class=CODE,merge=1,delta=2
   179                           	psect	text123,local,class=CODE,merge=1,delta=2
   180                           	psect	text124,local,class=CODE,merge=1,delta=2
   181                           	psect	text125,local,class=CODE,merge=1,delta=2
   182                           	psect	text126,local,class=CODE,merge=1,delta=2
   183                           	psect	text127,local,class=CODE,merge=1,delta=2
   184                           	psect	text128,local,class=CODE,merge=1,delta=2,group=2
   185                           	psect	text129,local,class=CODE,merge=1,delta=2
   186                           	psect	text130,local,class=CODE,merge=1,delta=2
   187                           	psect	text131,local,class=CODE,merge=1,delta=2
   188                           	psect	text132,local,class=CODE,merge=1,delta=2
   189                           	psect	text133,local,class=CODE,merge=1,delta=2
   190                           	psect	text134,local,class=CODE,merge=1,delta=2
   191                           	psect	text135,local,class=CODE,merge=1,delta=2
   192                           	psect	text136,local,class=CODE,merge=1,delta=2
   193                           	psect	text137,local,class=CODE,merge=1,delta=2,group=2
   194                           	psect	text138,local,class=CODE,merge=1,delta=2,group=2
   195                           	psect	text139,local,class=CODE,merge=1,delta=2
   196                           	psect	text140,local,class=CODE,merge=1,delta=2
   197                           	psect	text141,local,class=CODE,merge=1,delta=2
   198                           	psect	text142,local,class=CODE,merge=1,delta=2
   199                           	psect	text143,local,class=CODE,merge=1,delta=2
   200                           	psect	text144,local,class=CODE,merge=1,delta=2
   201                           	psect	text145,local,class=CODE,merge=1,delta=2
   202                           	psect	text146,local,class=CODE,merge=1,delta=2
   203                           	psect	text147,local,class=CODE,merge=1,delta=2
   204                           	psect	text148,local,class=CODE,merge=1,delta=2
   205                           	psect	text149,local,class=CODE,merge=1,delta=2
   206                           	psect	text150,local,class=CODE,merge=1,delta=2
   207                           	psect	text151,local,class=CODE,merge=1,delta=2
   208                           	psect	text152,local,class=CODE,merge=1,delta=2
   209                           	psect	text153,local,class=CODE,merge=1,delta=2
   210                           	psect	text154,local,class=CODE,merge=1,delta=2
   211                           	psect	text155,local,class=CODE,merge=1,delta=2
   212                           	psect	text156,local,class=CODE,merge=1,delta=2
   213                           	psect	text157,local,class=CODE,merge=1,delta=2
   214                           	psect	text158,local,class=CODE,merge=1,delta=2
   215                           	psect	text159,local,class=CODE,merge=1,delta=2
   216                           	psect	text160,local,class=CODE,merge=1,delta=2
   217                           	psect	text161,local,class=CODE,merge=1,delta=2
   218                           	psect	text162,local,class=CODE,merge=1,delta=2,group=2
   219                           	psect	intentry,global,class=CODE,delta=2
   220                           	psect	text164,local,class=CODE,merge=1,delta=2
   221                           	psect	text165,local,class=CODE,merge=1,delta=2
   222                           	psect	text166,local,class=CODE,merge=1,delta=2
   223                           	psect	text167,local,class=CODE,merge=1,delta=2
   224                           	dabs	1,0x620,48
   225                           	dabs	1,0x5A4,76
   226                           	dabs	1,0x3A0,80
   227                           	dabs	1,0x340,48
   228                           	dabs	1,0x4A0,80,_uart1Buffer
   229                           	dabs	1,0x456,18,_cardDecBuf
   230                           	dabs	1,0x444,18,_cardIncBuf
   231                           	dabs	1,0x432,18,_cardWriteBuf
   232                           	dabs	1,0x420,18,_cardUidBlockBuf
   233                           	dabs	1,0x2200,0,_comBuffer
   234                           	dabs	1,0x2374,0,_Main_flowCalibrationTable
   235                           	dabs	1,0x7E,2
   236  0000                     
   237                           ; Version 1.42
   238                           ; Generated 13/04/2017 GMT
   239                           ; 
   240                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   241                           ; All rights reserved.
   242                           ; 
   243                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   244                           ; 
   245                           ; Redistribution and use in source and binary forms, with or without modification, are
   246                           ; permitted provided that the following conditions are met:
   247                           ; 
   248                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   249                           ;        conditions and the following disclaimer.
   250                           ; 
   251                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   252                           ;        of conditions and the following disclaimer in the documentation and/or other
   253                           ;        materials provided with the distribution.
   254                           ; 
   255                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   256                           ;        software without specific prior written permission.
   257                           ; 
   258                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   259                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   260                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   261                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   262                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   263                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   264                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   265                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   266                           ; 
   267                           ; 
   268                           ; Code-generator required, PIC16F1947 Definitions
   269                           ; 
   270                           ; SFR Addresses
   271  0000                     	;# 
   272  0001                     	;# 
   273  0002                     	;# 
   274  0003                     	;# 
   275  0004                     	;# 
   276  0005                     	;# 
   277  0006                     	;# 
   278  0007                     	;# 
   279  0008                     	;# 
   280  0009                     	;# 
   281  000A                     	;# 
   282  000B                     	;# 
   283  000C                     	;# 
   284  000D                     	;# 
   285  000E                     	;# 
   286  000F                     	;# 
   287  0010                     	;# 
   288  0011                     	;# 
   289  0012                     	;# 
   290  0013                     	;# 
   291  0014                     	;# 
   292  0015                     	;# 
   293  0016                     	;# 
   294  0016                     	;# 
   295  0017                     	;# 
   296  0018                     	;# 
   297  0019                     	;# 
   298  001A                     	;# 
   299  001B                     	;# 
   300  001C                     	;# 
   301  001E                     	;# 
   302  001F                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  008F                     	;# 
   307  0090                     	;# 
   308  0091                     	;# 
   309  0092                     	;# 
   310  0093                     	;# 
   311  0094                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0098                     	;# 
   316  0099                     	;# 
   317  009A                     	;# 
   318  009B                     	;# 
   319  009B                     	;# 
   320  009C                     	;# 
   321  009D                     	;# 
   322  009E                     	;# 
   323  010C                     	;# 
   324  010D                     	;# 
   325  010E                     	;# 
   326  010F                     	;# 
   327  0110                     	;# 
   328  0111                     	;# 
   329  0112                     	;# 
   330  0113                     	;# 
   331  0114                     	;# 
   332  0115                     	;# 
   333  0116                     	;# 
   334  0117                     	;# 
   335  0118                     	;# 
   336  0119                     	;# 
   337  011A                     	;# 
   338  011B                     	;# 
   339  011D                     	;# 
   340  011E                     	;# 
   341  011F                     	;# 
   342  018C                     	;# 
   343  0190                     	;# 
   344  0191                     	;# 
   345  0191                     	;# 
   346  0192                     	;# 
   347  0193                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0199                     	;# 
   354  0199                     	;# 
   355  019A                     	;# 
   356  019A                     	;# 
   357  019B                     	;# 
   358  019B                     	;# 
   359  019B                     	;# 
   360  019B                     	;# 
   361  019C                     	;# 
   362  019C                     	;# 
   363  019D                     	;# 
   364  019D                     	;# 
   365  019E                     	;# 
   366  019E                     	;# 
   367  019F                     	;# 
   368  019F                     	;# 
   369  020D                     	;# 
   370  0211                     	;# 
   371  0211                     	;# 
   372  0212                     	;# 
   373  0212                     	;# 
   374  0213                     	;# 
   375  0213                     	;# 
   376  0214                     	;# 
   377  0214                     	;# 
   378  0215                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0216                     	;# 
   382  0216                     	;# 
   383  0217                     	;# 
   384  0217                     	;# 
   385  0219                     	;# 
   386  021A                     	;# 
   387  021B                     	;# 
   388  021C                     	;# 
   389  021D                     	;# 
   390  021E                     	;# 
   391  021F                     	;# 
   392  028C                     	;# 
   393  028D                     	;# 
   394  0291                     	;# 
   395  0291                     	;# 
   396  0292                     	;# 
   397  0293                     	;# 
   398  0294                     	;# 
   399  0295                     	;# 
   400  0295                     	;# 
   401  0296                     	;# 
   402  0298                     	;# 
   403  0298                     	;# 
   404  0299                     	;# 
   405  029A                     	;# 
   406  029B                     	;# 
   407  029C                     	;# 
   408  029C                     	;# 
   409  029D                     	;# 
   410  029E                     	;# 
   411  029F                     	;# 
   412  030C                     	;# 
   413  030D                     	;# 
   414  0311                     	;# 
   415  0311                     	;# 
   416  0312                     	;# 
   417  0313                     	;# 
   418  0314                     	;# 
   419  0315                     	;# 
   420  0315                     	;# 
   421  0316                     	;# 
   422  0318                     	;# 
   423  0318                     	;# 
   424  0319                     	;# 
   425  031A                     	;# 
   426  031C                     	;# 
   427  031C                     	;# 
   428  031D                     	;# 
   429  031E                     	;# 
   430  038C                     	;# 
   431  038D                     	;# 
   432  0394                     	;# 
   433  0395                     	;# 
   434  0396                     	;# 
   435  040C                     	;# 
   436  040D                     	;# 
   437  0415                     	;# 
   438  0416                     	;# 
   439  0417                     	;# 
   440  041C                     	;# 
   441  041D                     	;# 
   442  041E                     	;# 
   443  048D                     	;# 
   444  0491                     	;# 
   445  0492                     	;# 
   446  0493                     	;# 
   447  0493                     	;# 
   448  0494                     	;# 
   449  0495                     	;# 
   450  0496                     	;# 
   451  0497                     	;# 
   452  0791                     	;# 
   453  0792                     	;# 
   454  0793                     	;# 
   455  0794                     	;# 
   456  0795                     	;# 
   457  0798                     	;# 
   458  0799                     	;# 
   459  079A                     	;# 
   460  079B                     	;# 
   461  079C                     	;# 
   462  079D                     	;# 
   463  07A0                     	;# 
   464  07A1                     	;# 
   465  07A2                     	;# 
   466  07A3                     	;# 
   467  07A4                     	;# 
   468  07A5                     	;# 
   469  07A6                     	;# 
   470  07A7                     	;# 
   471  07A8                     	;# 
   472  07A9                     	;# 
   473  07AA                     	;# 
   474  07AB                     	;# 
   475  07AC                     	;# 
   476  07AD                     	;# 
   477  07AE                     	;# 
   478  07AF                     	;# 
   479  07B0                     	;# 
   480  07B1                     	;# 
   481  07B2                     	;# 
   482  07B3                     	;# 
   483  07B4                     	;# 
   484  07B5                     	;# 
   485  07B6                     	;# 
   486  07B7                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  000F                     	;# 
   514  0010                     	;# 
   515  0011                     	;# 
   516  0012                     	;# 
   517  0013                     	;# 
   518  0014                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  001E                     	;# 
   529  001F                     	;# 
   530  008C                     	;# 
   531  008D                     	;# 
   532  008E                     	;# 
   533  008F                     	;# 
   534  0090                     	;# 
   535  0091                     	;# 
   536  0092                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009B                     	;# 
   547  009C                     	;# 
   548  009D                     	;# 
   549  009E                     	;# 
   550  010C                     	;# 
   551  010D                     	;# 
   552  010E                     	;# 
   553  010F                     	;# 
   554  0110                     	;# 
   555  0111                     	;# 
   556  0112                     	;# 
   557  0113                     	;# 
   558  0114                     	;# 
   559  0115                     	;# 
   560  0116                     	;# 
   561  0117                     	;# 
   562  0118                     	;# 
   563  0119                     	;# 
   564  011A                     	;# 
   565  011B                     	;# 
   566  011D                     	;# 
   567  011E                     	;# 
   568  011F                     	;# 
   569  018C                     	;# 
   570  0190                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0193                     	;# 
   577  0194                     	;# 
   578  0195                     	;# 
   579  0196                     	;# 
   580  0199                     	;# 
   581  0199                     	;# 
   582  019A                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019C                     	;# 
   590  019D                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019E                     	;# 
   594  019F                     	;# 
   595  019F                     	;# 
   596  020D                     	;# 
   597  0211                     	;# 
   598  0211                     	;# 
   599  0212                     	;# 
   600  0212                     	;# 
   601  0213                     	;# 
   602  0213                     	;# 
   603  0214                     	;# 
   604  0214                     	;# 
   605  0215                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0216                     	;# 
   609  0216                     	;# 
   610  0217                     	;# 
   611  0217                     	;# 
   612  0219                     	;# 
   613  021A                     	;# 
   614  021B                     	;# 
   615  021C                     	;# 
   616  021D                     	;# 
   617  021E                     	;# 
   618  021F                     	;# 
   619  028C                     	;# 
   620  028D                     	;# 
   621  0291                     	;# 
   622  0291                     	;# 
   623  0292                     	;# 
   624  0293                     	;# 
   625  0294                     	;# 
   626  0295                     	;# 
   627  0295                     	;# 
   628  0296                     	;# 
   629  0298                     	;# 
   630  0298                     	;# 
   631  0299                     	;# 
   632  029A                     	;# 
   633  029B                     	;# 
   634  029C                     	;# 
   635  029C                     	;# 
   636  029D                     	;# 
   637  029E                     	;# 
   638  029F                     	;# 
   639  030C                     	;# 
   640  030D                     	;# 
   641  0311                     	;# 
   642  0311                     	;# 
   643  0312                     	;# 
   644  0313                     	;# 
   645  0314                     	;# 
   646  0315                     	;# 
   647  0315                     	;# 
   648  0316                     	;# 
   649  0318                     	;# 
   650  0318                     	;# 
   651  0319                     	;# 
   652  031A                     	;# 
   653  031C                     	;# 
   654  031C                     	;# 
   655  031D                     	;# 
   656  031E                     	;# 
   657  038C                     	;# 
   658  038D                     	;# 
   659  0394                     	;# 
   660  0395                     	;# 
   661  0396                     	;# 
   662  040C                     	;# 
   663  040D                     	;# 
   664  0415                     	;# 
   665  0416                     	;# 
   666  0417                     	;# 
   667  041C                     	;# 
   668  041D                     	;# 
   669  041E                     	;# 
   670  048D                     	;# 
   671  0491                     	;# 
   672  0492                     	;# 
   673  0493                     	;# 
   674  0493                     	;# 
   675  0494                     	;# 
   676  0495                     	;# 
   677  0496                     	;# 
   678  0497                     	;# 
   679  0791                     	;# 
   680  0792                     	;# 
   681  0793                     	;# 
   682  0794                     	;# 
   683  0795                     	;# 
   684  0798                     	;# 
   685  0799                     	;# 
   686  079A                     	;# 
   687  079B                     	;# 
   688  079C                     	;# 
   689  079D                     	;# 
   690  07A0                     	;# 
   691  07A1                     	;# 
   692  07A2                     	;# 
   693  07A3                     	;# 
   694  07A4                     	;# 
   695  07A5                     	;# 
   696  07A6                     	;# 
   697  07A7                     	;# 
   698  07A8                     	;# 
   699  07A9                     	;# 
   700  07AA                     	;# 
   701  07AB                     	;# 
   702  07AC                     	;# 
   703  07AD                     	;# 
   704  07AE                     	;# 
   705  07AF                     	;# 
   706  07B0                     	;# 
   707  07B1                     	;# 
   708  07B2                     	;# 
   709  07B3                     	;# 
   710  07B4                     	;# 
   711  07B5                     	;# 
   712  07B6                     	;# 
   713  07B7                     	;# 
   714  0FE4                     	;# 
   715  0FE5                     	;# 
   716  0FE6                     	;# 
   717  0FE7                     	;# 
   718  0FE8                     	;# 
   719  0FE9                     	;# 
   720  0FEA                     	;# 
   721  0FEB                     	;# 
   722  0FED                     	;# 
   723  0FEE                     	;# 
   724  0FEF                     	;# 
   725  0000                     	;# 
   726  0001                     	;# 
   727  0002                     	;# 
   728  0003                     	;# 
   729  0004                     	;# 
   730  0005                     	;# 
   731  0006                     	;# 
   732  0007                     	;# 
   733  0008                     	;# 
   734  0009                     	;# 
   735  000A                     	;# 
   736  000B                     	;# 
   737  000C                     	;# 
   738  000D                     	;# 
   739  000E                     	;# 
   740  000F                     	;# 
   741  0010                     	;# 
   742  0011                     	;# 
   743  0012                     	;# 
   744  0013                     	;# 
   745  0014                     	;# 
   746  0015                     	;# 
   747  0016                     	;# 
   748  0016                     	;# 
   749  0017                     	;# 
   750  0018                     	;# 
   751  0019                     	;# 
   752  001A                     	;# 
   753  001B                     	;# 
   754  001C                     	;# 
   755  001E                     	;# 
   756  001F                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  008F                     	;# 
   761  0090                     	;# 
   762  0091                     	;# 
   763  0092                     	;# 
   764  0093                     	;# 
   765  0094                     	;# 
   766  0095                     	;# 
   767  0096                     	;# 
   768  0097                     	;# 
   769  0098                     	;# 
   770  0099                     	;# 
   771  009A                     	;# 
   772  009B                     	;# 
   773  009B                     	;# 
   774  009C                     	;# 
   775  009D                     	;# 
   776  009E                     	;# 
   777  010C                     	;# 
   778  010D                     	;# 
   779  010E                     	;# 
   780  010F                     	;# 
   781  0110                     	;# 
   782  0111                     	;# 
   783  0112                     	;# 
   784  0113                     	;# 
   785  0114                     	;# 
   786  0115                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  0118                     	;# 
   790  0119                     	;# 
   791  011A                     	;# 
   792  011B                     	;# 
   793  011D                     	;# 
   794  011E                     	;# 
   795  011F                     	;# 
   796  018C                     	;# 
   797  0190                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0193                     	;# 
   804  0194                     	;# 
   805  0195                     	;# 
   806  0196                     	;# 
   807  0199                     	;# 
   808  0199                     	;# 
   809  019A                     	;# 
   810  019A                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019B                     	;# 
   814  019B                     	;# 
   815  019C                     	;# 
   816  019C                     	;# 
   817  019D                     	;# 
   818  019D                     	;# 
   819  019E                     	;# 
   820  019E                     	;# 
   821  019F                     	;# 
   822  019F                     	;# 
   823  020D                     	;# 
   824  0211                     	;# 
   825  0211                     	;# 
   826  0212                     	;# 
   827  0212                     	;# 
   828  0213                     	;# 
   829  0213                     	;# 
   830  0214                     	;# 
   831  0214                     	;# 
   832  0215                     	;# 
   833  0215                     	;# 
   834  0215                     	;# 
   835  0216                     	;# 
   836  0216                     	;# 
   837  0217                     	;# 
   838  0217                     	;# 
   839  0219                     	;# 
   840  021A                     	;# 
   841  021B                     	;# 
   842  021C                     	;# 
   843  021D                     	;# 
   844  021E                     	;# 
   845  021F                     	;# 
   846  028C                     	;# 
   847  028D                     	;# 
   848  0291                     	;# 
   849  0291                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0294                     	;# 
   853  0295                     	;# 
   854  0295                     	;# 
   855  0296                     	;# 
   856  0298                     	;# 
   857  0298                     	;# 
   858  0299                     	;# 
   859  029A                     	;# 
   860  029B                     	;# 
   861  029C                     	;# 
   862  029C                     	;# 
   863  029D                     	;# 
   864  029E                     	;# 
   865  029F                     	;# 
   866  030C                     	;# 
   867  030D                     	;# 
   868  0311                     	;# 
   869  0311                     	;# 
   870  0312                     	;# 
   871  0313                     	;# 
   872  0314                     	;# 
   873  0315                     	;# 
   874  0315                     	;# 
   875  0316                     	;# 
   876  0318                     	;# 
   877  0318                     	;# 
   878  0319                     	;# 
   879  031A                     	;# 
   880  031C                     	;# 
   881  031C                     	;# 
   882  031D                     	;# 
   883  031E                     	;# 
   884  038C                     	;# 
   885  038D                     	;# 
   886  0394                     	;# 
   887  0395                     	;# 
   888  0396                     	;# 
   889  040C                     	;# 
   890  040D                     	;# 
   891  0415                     	;# 
   892  0416                     	;# 
   893  0417                     	;# 
   894  041C                     	;# 
   895  041D                     	;# 
   896  041E                     	;# 
   897  048D                     	;# 
   898  0491                     	;# 
   899  0492                     	;# 
   900  0493                     	;# 
   901  0493                     	;# 
   902  0494                     	;# 
   903  0495                     	;# 
   904  0496                     	;# 
   905  0497                     	;# 
   906  0791                     	;# 
   907  0792                     	;# 
   908  0793                     	;# 
   909  0794                     	;# 
   910  0795                     	;# 
   911  0798                     	;# 
   912  0799                     	;# 
   913  079A                     	;# 
   914  079B                     	;# 
   915  079C                     	;# 
   916  079D                     	;# 
   917  07A0                     	;# 
   918  07A1                     	;# 
   919  07A2                     	;# 
   920  07A3                     	;# 
   921  07A4                     	;# 
   922  07A5                     	;# 
   923  07A6                     	;# 
   924  07A7                     	;# 
   925  07A8                     	;# 
   926  07A9                     	;# 
   927  07AA                     	;# 
   928  07AB                     	;# 
   929  07AC                     	;# 
   930  07AD                     	;# 
   931  07AE                     	;# 
   932  07AF                     	;# 
   933  07B0                     	;# 
   934  07B1                     	;# 
   935  07B2                     	;# 
   936  07B3                     	;# 
   937  07B4                     	;# 
   938  07B5                     	;# 
   939  07B6                     	;# 
   940  07B7                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  000F                     	;# 
   968  0010                     	;# 
   969  0011                     	;# 
   970  0012                     	;# 
   971  0013                     	;# 
   972  0014                     	;# 
   973  0015                     	;# 
   974  0016                     	;# 
   975  0016                     	;# 
   976  0017                     	;# 
   977  0018                     	;# 
   978  0019                     	;# 
   979  001A                     	;# 
   980  001B                     	;# 
   981  001C                     	;# 
   982  001E                     	;# 
   983  001F                     	;# 
   984  008C                     	;# 
   985  008D                     	;# 
   986  008E                     	;# 
   987  008F                     	;# 
   988  0090                     	;# 
   989  0091                     	;# 
   990  0092                     	;# 
   991  0093                     	;# 
   992  0094                     	;# 
   993  0095                     	;# 
   994  0096                     	;# 
   995  0097                     	;# 
   996  0098                     	;# 
   997  0099                     	;# 
   998  009A                     	;# 
   999  009B                     	;# 
  1000  009B                     	;# 
  1001  009C                     	;# 
  1002  009D                     	;# 
  1003  009E                     	;# 
  1004  010C                     	;# 
  1005  010D                     	;# 
  1006  010E                     	;# 
  1007  010F                     	;# 
  1008  0110                     	;# 
  1009  0111                     	;# 
  1010  0112                     	;# 
  1011  0113                     	;# 
  1012  0114                     	;# 
  1013  0115                     	;# 
  1014  0116                     	;# 
  1015  0117                     	;# 
  1016  0118                     	;# 
  1017  0119                     	;# 
  1018  011A                     	;# 
  1019  011B                     	;# 
  1020  011D                     	;# 
  1021  011E                     	;# 
  1022  011F                     	;# 
  1023  018C                     	;# 
  1024  0190                     	;# 
  1025  0191                     	;# 
  1026  0191                     	;# 
  1027  0192                     	;# 
  1028  0193                     	;# 
  1029  0193                     	;# 
  1030  0193                     	;# 
  1031  0194                     	;# 
  1032  0195                     	;# 
  1033  0196                     	;# 
  1034  0199                     	;# 
  1035  0199                     	;# 
  1036  019A                     	;# 
  1037  019A                     	;# 
  1038  019B                     	;# 
  1039  019B                     	;# 
  1040  019B                     	;# 
  1041  019B                     	;# 
  1042  019C                     	;# 
  1043  019C                     	;# 
  1044  019D                     	;# 
  1045  019D                     	;# 
  1046  019E                     	;# 
  1047  019E                     	;# 
  1048  019F                     	;# 
  1049  019F                     	;# 
  1050  020D                     	;# 
  1051  0211                     	;# 
  1052  0211                     	;# 
  1053  0212                     	;# 
  1054  0212                     	;# 
  1055  0213                     	;# 
  1056  0213                     	;# 
  1057  0214                     	;# 
  1058  0214                     	;# 
  1059  0215                     	;# 
  1060  0215                     	;# 
  1061  0215                     	;# 
  1062  0216                     	;# 
  1063  0216                     	;# 
  1064  0217                     	;# 
  1065  0217                     	;# 
  1066  0219                     	;# 
  1067  021A                     	;# 
  1068  021B                     	;# 
  1069  021C                     	;# 
  1070  021D                     	;# 
  1071  021E                     	;# 
  1072  021F                     	;# 
  1073  028C                     	;# 
  1074  028D                     	;# 
  1075  0291                     	;# 
  1076  0291                     	;# 
  1077  0292                     	;# 
  1078  0293                     	;# 
  1079  0294                     	;# 
  1080  0295                     	;# 
  1081  0295                     	;# 
  1082  0296                     	;# 
  1083  0298                     	;# 
  1084  0298                     	;# 
  1085  0299                     	;# 
  1086  029A                     	;# 
  1087  029B                     	;# 
  1088  029C                     	;# 
  1089  029C                     	;# 
  1090  029D                     	;# 
  1091  029E                     	;# 
  1092  029F                     	;# 
  1093  030C                     	;# 
  1094  030D                     	;# 
  1095  0311                     	;# 
  1096  0311                     	;# 
  1097  0312                     	;# 
  1098  0313                     	;# 
  1099  0314                     	;# 
  1100  0315                     	;# 
  1101  0315                     	;# 
  1102  0316                     	;# 
  1103  0318                     	;# 
  1104  0318                     	;# 
  1105  0319                     	;# 
  1106  031A                     	;# 
  1107  031C                     	;# 
  1108  031C                     	;# 
  1109  031D                     	;# 
  1110  031E                     	;# 
  1111  038C                     	;# 
  1112  038D                     	;# 
  1113  0394                     	;# 
  1114  0395                     	;# 
  1115  0396                     	;# 
  1116  040C                     	;# 
  1117  040D                     	;# 
  1118  0415                     	;# 
  1119  0416                     	;# 
  1120  0417                     	;# 
  1121  041C                     	;# 
  1122  041D                     	;# 
  1123  041E                     	;# 
  1124  048D                     	;# 
  1125  0491                     	;# 
  1126  0492                     	;# 
  1127  0493                     	;# 
  1128  0493                     	;# 
  1129  0494                     	;# 
  1130  0495                     	;# 
  1131  0496                     	;# 
  1132  0497                     	;# 
  1133  0791                     	;# 
  1134  0792                     	;# 
  1135  0793                     	;# 
  1136  0794                     	;# 
  1137  0795                     	;# 
  1138  0798                     	;# 
  1139  0799                     	;# 
  1140  079A                     	;# 
  1141  079B                     	;# 
  1142  079C                     	;# 
  1143  079D                     	;# 
  1144  07A0                     	;# 
  1145  07A1                     	;# 
  1146  07A2                     	;# 
  1147  07A3                     	;# 
  1148  07A4                     	;# 
  1149  07A5                     	;# 
  1150  07A6                     	;# 
  1151  07A7                     	;# 
  1152  07A8                     	;# 
  1153  07A9                     	;# 
  1154  07AA                     	;# 
  1155  07AB                     	;# 
  1156  07AC                     	;# 
  1157  07AD                     	;# 
  1158  07AE                     	;# 
  1159  07AF                     	;# 
  1160  07B0                     	;# 
  1161  07B1                     	;# 
  1162  07B2                     	;# 
  1163  07B3                     	;# 
  1164  07B4                     	;# 
  1165  07B5                     	;# 
  1166  07B6                     	;# 
  1167  07B7                     	;# 
  1168  0FE4                     	;# 
  1169  0FE5                     	;# 
  1170  0FE6                     	;# 
  1171  0FE7                     	;# 
  1172  0FE8                     	;# 
  1173  0FE9                     	;# 
  1174  0FEA                     	;# 
  1175  0FEB                     	;# 
  1176  0FED                     	;# 
  1177  0FEE                     	;# 
  1178  0FEF                     	;# 
  1179  0000                     	;# 
  1180  0001                     	;# 
  1181  0002                     	;# 
  1182  0003                     	;# 
  1183  0004                     	;# 
  1184  0005                     	;# 
  1185  0006                     	;# 
  1186  0007                     	;# 
  1187  0008                     	;# 
  1188  0009                     	;# 
  1189  000A                     	;# 
  1190  000B                     	;# 
  1191  000C                     	;# 
  1192  000D                     	;# 
  1193  000E                     	;# 
  1194  000F                     	;# 
  1195  0010                     	;# 
  1196  0011                     	;# 
  1197  0012                     	;# 
  1198  0013                     	;# 
  1199  0014                     	;# 
  1200  0015                     	;# 
  1201  0016                     	;# 
  1202  0016                     	;# 
  1203  0017                     	;# 
  1204  0018                     	;# 
  1205  0019                     	;# 
  1206  001A                     	;# 
  1207  001B                     	;# 
  1208  001C                     	;# 
  1209  001E                     	;# 
  1210  001F                     	;# 
  1211  008C                     	;# 
  1212  008D                     	;# 
  1213  008E                     	;# 
  1214  008F                     	;# 
  1215  0090                     	;# 
  1216  0091                     	;# 
  1217  0092                     	;# 
  1218  0093                     	;# 
  1219  0094                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0098                     	;# 
  1224  0099                     	;# 
  1225  009A                     	;# 
  1226  009B                     	;# 
  1227  009B                     	;# 
  1228  009C                     	;# 
  1229  009D                     	;# 
  1230  009E                     	;# 
  1231  010C                     	;# 
  1232  010D                     	;# 
  1233  010E                     	;# 
  1234  010F                     	;# 
  1235  0110                     	;# 
  1236  0111                     	;# 
  1237  0112                     	;# 
  1238  0113                     	;# 
  1239  0114                     	;# 
  1240  0115                     	;# 
  1241  0116                     	;# 
  1242  0117                     	;# 
  1243  0118                     	;# 
  1244  0119                     	;# 
  1245  011A                     	;# 
  1246  011B                     	;# 
  1247  011D                     	;# 
  1248  011E                     	;# 
  1249  011F                     	;# 
  1250  018C                     	;# 
  1251  0190                     	;# 
  1252  0191                     	;# 
  1253  0191                     	;# 
  1254  0192                     	;# 
  1255  0193                     	;# 
  1256  0193                     	;# 
  1257  0193                     	;# 
  1258  0194                     	;# 
  1259  0195                     	;# 
  1260  0196                     	;# 
  1261  0199                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019A                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019C                     	;# 
  1270  019C                     	;# 
  1271  019D                     	;# 
  1272  019D                     	;# 
  1273  019E                     	;# 
  1274  019E                     	;# 
  1275  019F                     	;# 
  1276  019F                     	;# 
  1277  020D                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  0212                     	;# 
  1281  0212                     	;# 
  1282  0213                     	;# 
  1283  0213                     	;# 
  1284  0214                     	;# 
  1285  0214                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0215                     	;# 
  1289  0216                     	;# 
  1290  0216                     	;# 
  1291  0217                     	;# 
  1292  0217                     	;# 
  1293  0219                     	;# 
  1294  021A                     	;# 
  1295  021B                     	;# 
  1296  021C                     	;# 
  1297  021D                     	;# 
  1298  021E                     	;# 
  1299  021F                     	;# 
  1300  028C                     	;# 
  1301  028D                     	;# 
  1302  0291                     	;# 
  1303  0291                     	;# 
  1304  0292                     	;# 
  1305  0293                     	;# 
  1306  0294                     	;# 
  1307  0295                     	;# 
  1308  0295                     	;# 
  1309  0296                     	;# 
  1310  0298                     	;# 
  1311  0298                     	;# 
  1312  0299                     	;# 
  1313  029A                     	;# 
  1314  029B                     	;# 
  1315  029C                     	;# 
  1316  029C                     	;# 
  1317  029D                     	;# 
  1318  029E                     	;# 
  1319  029F                     	;# 
  1320  030C                     	;# 
  1321  030D                     	;# 
  1322  0311                     	;# 
  1323  0311                     	;# 
  1324  0312                     	;# 
  1325  0313                     	;# 
  1326  0314                     	;# 
  1327  0315                     	;# 
  1328  0315                     	;# 
  1329  0316                     	;# 
  1330  0318                     	;# 
  1331  0318                     	;# 
  1332  0319                     	;# 
  1333  031A                     	;# 
  1334  031C                     	;# 
  1335  031C                     	;# 
  1336  031D                     	;# 
  1337  031E                     	;# 
  1338  038C                     	;# 
  1339  038D                     	;# 
  1340  0394                     	;# 
  1341  0395                     	;# 
  1342  0396                     	;# 
  1343  040C                     	;# 
  1344  040D                     	;# 
  1345  0415                     	;# 
  1346  0416                     	;# 
  1347  0417                     	;# 
  1348  041C                     	;# 
  1349  041D                     	;# 
  1350  041E                     	;# 
  1351  048D                     	;# 
  1352  0491                     	;# 
  1353  0492                     	;# 
  1354  0493                     	;# 
  1355  0493                     	;# 
  1356  0494                     	;# 
  1357  0495                     	;# 
  1358  0496                     	;# 
  1359  0497                     	;# 
  1360  0791                     	;# 
  1361  0792                     	;# 
  1362  0793                     	;# 
  1363  0794                     	;# 
  1364  0795                     	;# 
  1365  0798                     	;# 
  1366  0799                     	;# 
  1367  079A                     	;# 
  1368  079B                     	;# 
  1369  079C                     	;# 
  1370  079D                     	;# 
  1371  07A0                     	;# 
  1372  07A1                     	;# 
  1373  07A2                     	;# 
  1374  07A3                     	;# 
  1375  07A4                     	;# 
  1376  07A5                     	;# 
  1377  07A6                     	;# 
  1378  07A7                     	;# 
  1379  07A8                     	;# 
  1380  07A9                     	;# 
  1381  07AA                     	;# 
  1382  07AB                     	;# 
  1383  07AC                     	;# 
  1384  07AD                     	;# 
  1385  07AE                     	;# 
  1386  07AF                     	;# 
  1387  07B0                     	;# 
  1388  07B1                     	;# 
  1389  07B2                     	;# 
  1390  07B3                     	;# 
  1391  07B4                     	;# 
  1392  07B5                     	;# 
  1393  07B6                     	;# 
  1394  07B7                     	;# 
  1395  0FE4                     	;# 
  1396  0FE5                     	;# 
  1397  0FE6                     	;# 
  1398  0FE7                     	;# 
  1399  0FE8                     	;# 
  1400  0FE9                     	;# 
  1401  0FEA                     	;# 
  1402  0FEB                     	;# 
  1403  0FED                     	;# 
  1404  0FEE                     	;# 
  1405  0FEF                     	;# 
  1406  0000                     	;# 
  1407  0001                     	;# 
  1408  0002                     	;# 
  1409  0003                     	;# 
  1410  0004                     	;# 
  1411  0005                     	;# 
  1412  0006                     	;# 
  1413  0007                     	;# 
  1414  0008                     	;# 
  1415  0009                     	;# 
  1416  000A                     	;# 
  1417  000B                     	;# 
  1418  000C                     	;# 
  1419  000D                     	;# 
  1420  000E                     	;# 
  1421  000F                     	;# 
  1422  0010                     	;# 
  1423  0011                     	;# 
  1424  0012                     	;# 
  1425  0013                     	;# 
  1426  0014                     	;# 
  1427  0015                     	;# 
  1428  0016                     	;# 
  1429  0016                     	;# 
  1430  0017                     	;# 
  1431  0018                     	;# 
  1432  0019                     	;# 
  1433  001A                     	;# 
  1434  001B                     	;# 
  1435  001C                     	;# 
  1436  001E                     	;# 
  1437  001F                     	;# 
  1438  008C                     	;# 
  1439  008D                     	;# 
  1440  008E                     	;# 
  1441  008F                     	;# 
  1442  0090                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0093                     	;# 
  1446  0094                     	;# 
  1447  0095                     	;# 
  1448  0096                     	;# 
  1449  0097                     	;# 
  1450  0098                     	;# 
  1451  0099                     	;# 
  1452  009A                     	;# 
  1453  009B                     	;# 
  1454  009B                     	;# 
  1455  009C                     	;# 
  1456  009D                     	;# 
  1457  009E                     	;# 
  1458  010C                     	;# 
  1459  010D                     	;# 
  1460  010E                     	;# 
  1461  010F                     	;# 
  1462  0110                     	;# 
  1463  0111                     	;# 
  1464  0112                     	;# 
  1465  0113                     	;# 
  1466  0114                     	;# 
  1467  0115                     	;# 
  1468  0116                     	;# 
  1469  0117                     	;# 
  1470  0118                     	;# 
  1471  0119                     	;# 
  1472  011A                     	;# 
  1473  011B                     	;# 
  1474  011D                     	;# 
  1475  011E                     	;# 
  1476  011F                     	;# 
  1477  018C                     	;# 
  1478  0190                     	;# 
  1479  0191                     	;# 
  1480  0191                     	;# 
  1481  0192                     	;# 
  1482  0193                     	;# 
  1483  0193                     	;# 
  1484  0193                     	;# 
  1485  0194                     	;# 
  1486  0195                     	;# 
  1487  0196                     	;# 
  1488  0199                     	;# 
  1489  0199                     	;# 
  1490  019A                     	;# 
  1491  019A                     	;# 
  1492  019B                     	;# 
  1493  019B                     	;# 
  1494  019B                     	;# 
  1495  019B                     	;# 
  1496  019C                     	;# 
  1497  019C                     	;# 
  1498  019D                     	;# 
  1499  019D                     	;# 
  1500  019E                     	;# 
  1501  019E                     	;# 
  1502  019F                     	;# 
  1503  019F                     	;# 
  1504  020D                     	;# 
  1505  0211                     	;# 
  1506  0211                     	;# 
  1507  0212                     	;# 
  1508  0212                     	;# 
  1509  0213                     	;# 
  1510  0213                     	;# 
  1511  0214                     	;# 
  1512  0214                     	;# 
  1513  0215                     	;# 
  1514  0215                     	;# 
  1515  0215                     	;# 
  1516  0216                     	;# 
  1517  0216                     	;# 
  1518  0217                     	;# 
  1519  0217                     	;# 
  1520  0219                     	;# 
  1521  021A                     	;# 
  1522  021B                     	;# 
  1523  021C                     	;# 
  1524  021D                     	;# 
  1525  021E                     	;# 
  1526  021F                     	;# 
  1527  028C                     	;# 
  1528  028D                     	;# 
  1529  0291                     	;# 
  1530  0291                     	;# 
  1531  0292                     	;# 
  1532  0293                     	;# 
  1533  0294                     	;# 
  1534  0295                     	;# 
  1535  0295                     	;# 
  1536  0296                     	;# 
  1537  0298                     	;# 
  1538  0298                     	;# 
  1539  0299                     	;# 
  1540  029A                     	;# 
  1541  029B                     	;# 
  1542  029C                     	;# 
  1543  029C                     	;# 
  1544  029D                     	;# 
  1545  029E                     	;# 
  1546  029F                     	;# 
  1547  030C                     	;# 
  1548  030D                     	;# 
  1549  0311                     	;# 
  1550  0311                     	;# 
  1551  0312                     	;# 
  1552  0313                     	;# 
  1553  0314                     	;# 
  1554  0315                     	;# 
  1555  0315                     	;# 
  1556  0316                     	;# 
  1557  0318                     	;# 
  1558  0318                     	;# 
  1559  0319                     	;# 
  1560  031A                     	;# 
  1561  031C                     	;# 
  1562  031C                     	;# 
  1563  031D                     	;# 
  1564  031E                     	;# 
  1565  038C                     	;# 
  1566  038D                     	;# 
  1567  0394                     	;# 
  1568  0395                     	;# 
  1569  0396                     	;# 
  1570  040C                     	;# 
  1571  040D                     	;# 
  1572  0415                     	;# 
  1573  0416                     	;# 
  1574  0417                     	;# 
  1575  041C                     	;# 
  1576  041D                     	;# 
  1577  041E                     	;# 
  1578  048D                     	;# 
  1579  0491                     	;# 
  1580  0492                     	;# 
  1581  0493                     	;# 
  1582  0493                     	;# 
  1583  0494                     	;# 
  1584  0495                     	;# 
  1585  0496                     	;# 
  1586  0497                     	;# 
  1587  0791                     	;# 
  1588  0792                     	;# 
  1589  0793                     	;# 
  1590  0794                     	;# 
  1591  0795                     	;# 
  1592  0798                     	;# 
  1593  0799                     	;# 
  1594  079A                     	;# 
  1595  079B                     	;# 
  1596  079C                     	;# 
  1597  079D                     	;# 
  1598  07A0                     	;# 
  1599  07A1                     	;# 
  1600  07A2                     	;# 
  1601  07A3                     	;# 
  1602  07A4                     	;# 
  1603  07A5                     	;# 
  1604  07A6                     	;# 
  1605  07A7                     	;# 
  1606  07A8                     	;# 
  1607  07A9                     	;# 
  1608  07AA                     	;# 
  1609  07AB                     	;# 
  1610  07AC                     	;# 
  1611  07AD                     	;# 
  1612  07AE                     	;# 
  1613  07AF                     	;# 
  1614  07B0                     	;# 
  1615  07B1                     	;# 
  1616  07B2                     	;# 
  1617  07B3                     	;# 
  1618  07B4                     	;# 
  1619  07B5                     	;# 
  1620  07B6                     	;# 
  1621  07B7                     	;# 
  1622  0FE4                     	;# 
  1623  0FE5                     	;# 
  1624  0FE6                     	;# 
  1625  0FE7                     	;# 
  1626  0FE8                     	;# 
  1627  0FE9                     	;# 
  1628  0FEA                     	;# 
  1629  0FEB                     	;# 
  1630  0FED                     	;# 
  1631  0FEE                     	;# 
  1632  0FEF                     	;# 
  1633  0000                     	;# 
  1634  0001                     	;# 
  1635  0002                     	;# 
  1636  0003                     	;# 
  1637  0004                     	;# 
  1638  0005                     	;# 
  1639  0006                     	;# 
  1640  0007                     	;# 
  1641  0008                     	;# 
  1642  0009                     	;# 
  1643  000A                     	;# 
  1644  000B                     	;# 
  1645  000C                     	;# 
  1646  000D                     	;# 
  1647  000E                     	;# 
  1648  000F                     	;# 
  1649  0010                     	;# 
  1650  0011                     	;# 
  1651  0012                     	;# 
  1652  0013                     	;# 
  1653  0014                     	;# 
  1654  0015                     	;# 
  1655  0016                     	;# 
  1656  0016                     	;# 
  1657  0017                     	;# 
  1658  0018                     	;# 
  1659  0019                     	;# 
  1660  001A                     	;# 
  1661  001B                     	;# 
  1662  001C                     	;# 
  1663  001E                     	;# 
  1664  001F                     	;# 
  1665  008C                     	;# 
  1666  008D                     	;# 
  1667  008E                     	;# 
  1668  008F                     	;# 
  1669  0090                     	;# 
  1670  0091                     	;# 
  1671  0092                     	;# 
  1672  0093                     	;# 
  1673  0094                     	;# 
  1674  0095                     	;# 
  1675  0096                     	;# 
  1676  0097                     	;# 
  1677  0098                     	;# 
  1678  0099                     	;# 
  1679  009A                     	;# 
  1680  009B                     	;# 
  1681  009B                     	;# 
  1682  009C                     	;# 
  1683  009D                     	;# 
  1684  009E                     	;# 
  1685  010C                     	;# 
  1686  010D                     	;# 
  1687  010E                     	;# 
  1688  010F                     	;# 
  1689  0110                     	;# 
  1690  0111                     	;# 
  1691  0112                     	;# 
  1692  0113                     	;# 
  1693  0114                     	;# 
  1694  0115                     	;# 
  1695  0116                     	;# 
  1696  0117                     	;# 
  1697  0118                     	;# 
  1698  0119                     	;# 
  1699  011A                     	;# 
  1700  011B                     	;# 
  1701  011D                     	;# 
  1702  011E                     	;# 
  1703  011F                     	;# 
  1704  018C                     	;# 
  1705  0190                     	;# 
  1706  0191                     	;# 
  1707  0191                     	;# 
  1708  0192                     	;# 
  1709  0193                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0199                     	;# 
  1716  0199                     	;# 
  1717  019A                     	;# 
  1718  019A                     	;# 
  1719  019B                     	;# 
  1720  019B                     	;# 
  1721  019B                     	;# 
  1722  019B                     	;# 
  1723  019C                     	;# 
  1724  019C                     	;# 
  1725  019D                     	;# 
  1726  019D                     	;# 
  1727  019E                     	;# 
  1728  019E                     	;# 
  1729  019F                     	;# 
  1730  019F                     	;# 
  1731  020D                     	;# 
  1732  0211                     	;# 
  1733  0211                     	;# 
  1734  0212                     	;# 
  1735  0212                     	;# 
  1736  0213                     	;# 
  1737  0213                     	;# 
  1738  0214                     	;# 
  1739  0214                     	;# 
  1740  0215                     	;# 
  1741  0215                     	;# 
  1742  0215                     	;# 
  1743  0216                     	;# 
  1744  0216                     	;# 
  1745  0217                     	;# 
  1746  0217                     	;# 
  1747  0219                     	;# 
  1748  021A                     	;# 
  1749  021B                     	;# 
  1750  021C                     	;# 
  1751  021D                     	;# 
  1752  021E                     	;# 
  1753  021F                     	;# 
  1754  028C                     	;# 
  1755  028D                     	;# 
  1756  0291                     	;# 
  1757  0291                     	;# 
  1758  0292                     	;# 
  1759  0293                     	;# 
  1760  0294                     	;# 
  1761  0295                     	;# 
  1762  0295                     	;# 
  1763  0296                     	;# 
  1764  0298                     	;# 
  1765  0298                     	;# 
  1766  0299                     	;# 
  1767  029A                     	;# 
  1768  029B                     	;# 
  1769  029C                     	;# 
  1770  029C                     	;# 
  1771  029D                     	;# 
  1772  029E                     	;# 
  1773  029F                     	;# 
  1774  030C                     	;# 
  1775  030D                     	;# 
  1776  0311                     	;# 
  1777  0311                     	;# 
  1778  0312                     	;# 
  1779  0313                     	;# 
  1780  0314                     	;# 
  1781  0315                     	;# 
  1782  0315                     	;# 
  1783  0316                     	;# 
  1784  0318                     	;# 
  1785  0318                     	;# 
  1786  0319                     	;# 
  1787  031A                     	;# 
  1788  031C                     	;# 
  1789  031C                     	;# 
  1790  031D                     	;# 
  1791  031E                     	;# 
  1792  038C                     	;# 
  1793  038D                     	;# 
  1794  0394                     	;# 
  1795  0395                     	;# 
  1796  0396                     	;# 
  1797  040C                     	;# 
  1798  040D                     	;# 
  1799  0415                     	;# 
  1800  0416                     	;# 
  1801  0417                     	;# 
  1802  041C                     	;# 
  1803  041D                     	;# 
  1804  041E                     	;# 
  1805  048D                     	;# 
  1806  0491                     	;# 
  1807  0492                     	;# 
  1808  0493                     	;# 
  1809  0493                     	;# 
  1810  0494                     	;# 
  1811  0495                     	;# 
  1812  0496                     	;# 
  1813  0497                     	;# 
  1814  0791                     	;# 
  1815  0792                     	;# 
  1816  0793                     	;# 
  1817  0794                     	;# 
  1818  0795                     	;# 
  1819  0798                     	;# 
  1820  0799                     	;# 
  1821  079A                     	;# 
  1822  079B                     	;# 
  1823  079C                     	;# 
  1824  079D                     	;# 
  1825  07A0                     	;# 
  1826  07A1                     	;# 
  1827  07A2                     	;# 
  1828  07A3                     	;# 
  1829  07A4                     	;# 
  1830  07A5                     	;# 
  1831  07A6                     	;# 
  1832  07A7                     	;# 
  1833  07A8                     	;# 
  1834  07A9                     	;# 
  1835  07AA                     	;# 
  1836  07AB                     	;# 
  1837  07AC                     	;# 
  1838  07AD                     	;# 
  1839  07AE                     	;# 
  1840  07AF                     	;# 
  1841  07B0                     	;# 
  1842  07B1                     	;# 
  1843  07B2                     	;# 
  1844  07B3                     	;# 
  1845  07B4                     	;# 
  1846  07B5                     	;# 
  1847  07B6                     	;# 
  1848  07B7                     	;# 
  1849  0FE4                     	;# 
  1850  0FE5                     	;# 
  1851  0FE6                     	;# 
  1852  0FE7                     	;# 
  1853  0FE8                     	;# 
  1854  0FE9                     	;# 
  1855  0FEA                     	;# 
  1856  0FEB                     	;# 
  1857  0FED                     	;# 
  1858  0FEE                     	;# 
  1859  0FEF                     	;# 
  1860  0000                     	;# 
  1861  0001                     	;# 
  1862  0002                     	;# 
  1863  0003                     	;# 
  1864  0004                     	;# 
  1865  0005                     	;# 
  1866  0006                     	;# 
  1867  0007                     	;# 
  1868  0008                     	;# 
  1869  0009                     	;# 
  1870  000A                     	;# 
  1871  000B                     	;# 
  1872  000C                     	;# 
  1873  000D                     	;# 
  1874  000E                     	;# 
  1875  000F                     	;# 
  1876  0010                     	;# 
  1877  0011                     	;# 
  1878  0012                     	;# 
  1879  0013                     	;# 
  1880  0014                     	;# 
  1881  0015                     	;# 
  1882  0016                     	;# 
  1883  0016                     	;# 
  1884  0017                     	;# 
  1885  0018                     	;# 
  1886  0019                     	;# 
  1887  001A                     	;# 
  1888  001B                     	;# 
  1889  001C                     	;# 
  1890  001E                     	;# 
  1891  001F                     	;# 
  1892  008C                     	;# 
  1893  008D                     	;# 
  1894  008E                     	;# 
  1895  008F                     	;# 
  1896  0090                     	;# 
  1897  0091                     	;# 
  1898  0092                     	;# 
  1899  0093                     	;# 
  1900  0094                     	;# 
  1901  0095                     	;# 
  1902  0096                     	;# 
  1903  0097                     	;# 
  1904  0098                     	;# 
  1905  0099                     	;# 
  1906  009A                     	;# 
  1907  009B                     	;# 
  1908  009B                     	;# 
  1909  009C                     	;# 
  1910  009D                     	;# 
  1911  009E                     	;# 
  1912  010C                     	;# 
  1913  010D                     	;# 
  1914  010E                     	;# 
  1915  010F                     	;# 
  1916  0110                     	;# 
  1917  0111                     	;# 
  1918  0112                     	;# 
  1919  0113                     	;# 
  1920  0114                     	;# 
  1921  0115                     	;# 
  1922  0116                     	;# 
  1923  0117                     	;# 
  1924  0118                     	;# 
  1925  0119                     	;# 
  1926  011A                     	;# 
  1927  011B                     	;# 
  1928  011D                     	;# 
  1929  011E                     	;# 
  1930  011F                     	;# 
  1931  018C                     	;# 
  1932  0190                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0193                     	;# 
  1939  0194                     	;# 
  1940  0195                     	;# 
  1941  0196                     	;# 
  1942  0199                     	;# 
  1943  0199                     	;# 
  1944  019A                     	;# 
  1945  019A                     	;# 
  1946  019B                     	;# 
  1947  019B                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019C                     	;# 
  1951  019C                     	;# 
  1952  019D                     	;# 
  1953  019D                     	;# 
  1954  019E                     	;# 
  1955  019E                     	;# 
  1956  019F                     	;# 
  1957  019F                     	;# 
  1958  020D                     	;# 
  1959  0211                     	;# 
  1960  0211                     	;# 
  1961  0212                     	;# 
  1962  0212                     	;# 
  1963  0213                     	;# 
  1964  0213                     	;# 
  1965  0214                     	;# 
  1966  0214                     	;# 
  1967  0215                     	;# 
  1968  0215                     	;# 
  1969  0215                     	;# 
  1970  0216                     	;# 
  1971  0216                     	;# 
  1972  0217                     	;# 
  1973  0217                     	;# 
  1974  0219                     	;# 
  1975  021A                     	;# 
  1976  021B                     	;# 
  1977  021C                     	;# 
  1978  021D                     	;# 
  1979  021E                     	;# 
  1980  021F                     	;# 
  1981  028C                     	;# 
  1982  028D                     	;# 
  1983  0291                     	;# 
  1984  0291                     	;# 
  1985  0292                     	;# 
  1986  0293                     	;# 
  1987  0294                     	;# 
  1988  0295                     	;# 
  1989  0295                     	;# 
  1990  0296                     	;# 
  1991  0298                     	;# 
  1992  0298                     	;# 
  1993  0299                     	;# 
  1994  029A                     	;# 
  1995  029B                     	;# 
  1996  029C                     	;# 
  1997  029C                     	;# 
  1998  029D                     	;# 
  1999  029E                     	;# 
  2000  029F                     	;# 
  2001  030C                     	;# 
  2002  030D                     	;# 
  2003  0311                     	;# 
  2004  0311                     	;# 
  2005  0312                     	;# 
  2006  0313                     	;# 
  2007  0314                     	;# 
  2008  0315                     	;# 
  2009  0315                     	;# 
  2010  0316                     	;# 
  2011  0318                     	;# 
  2012  0318                     	;# 
  2013  0319                     	;# 
  2014  031A                     	;# 
  2015  031C                     	;# 
  2016  031C                     	;# 
  2017  031D                     	;# 
  2018  031E                     	;# 
  2019  038C                     	;# 
  2020  038D                     	;# 
  2021  0394                     	;# 
  2022  0395                     	;# 
  2023  0396                     	;# 
  2024  040C                     	;# 
  2025  040D                     	;# 
  2026  0415                     	;# 
  2027  0416                     	;# 
  2028  0417                     	;# 
  2029  041C                     	;# 
  2030  041D                     	;# 
  2031  041E                     	;# 
  2032  048D                     	;# 
  2033  0491                     	;# 
  2034  0492                     	;# 
  2035  0493                     	;# 
  2036  0493                     	;# 
  2037  0494                     	;# 
  2038  0495                     	;# 
  2039  0496                     	;# 
  2040  0497                     	;# 
  2041  0791                     	;# 
  2042  0792                     	;# 
  2043  0793                     	;# 
  2044  0794                     	;# 
  2045  0795                     	;# 
  2046  0798                     	;# 
  2047  0799                     	;# 
  2048  079A                     	;# 
  2049  079B                     	;# 
  2050  079C                     	;# 
  2051  079D                     	;# 
  2052  07A0                     	;# 
  2053  07A1                     	;# 
  2054  07A2                     	;# 
  2055  07A3                     	;# 
  2056  07A4                     	;# 
  2057  07A5                     	;# 
  2058  07A6                     	;# 
  2059  07A7                     	;# 
  2060  07A8                     	;# 
  2061  07A9                     	;# 
  2062  07AA                     	;# 
  2063  07AB                     	;# 
  2064  07AC                     	;# 
  2065  07AD                     	;# 
  2066  07AE                     	;# 
  2067  07AF                     	;# 
  2068  07B0                     	;# 
  2069  07B1                     	;# 
  2070  07B2                     	;# 
  2071  07B3                     	;# 
  2072  07B4                     	;# 
  2073  07B5                     	;# 
  2074  07B6                     	;# 
  2075  07B7                     	;# 
  2076  0FE4                     	;# 
  2077  0FE5                     	;# 
  2078  0FE6                     	;# 
  2079  0FE7                     	;# 
  2080  0FE8                     	;# 
  2081  0FE9                     	;# 
  2082  0FEA                     	;# 
  2083  0FEB                     	;# 
  2084  0FED                     	;# 
  2085  0FEE                     	;# 
  2086  0FEF                     	;# 
  2087  0000                     	;# 
  2088  0001                     	;# 
  2089  0002                     	;# 
  2090  0003                     	;# 
  2091  0004                     	;# 
  2092  0005                     	;# 
  2093  0006                     	;# 
  2094  0007                     	;# 
  2095  0008                     	;# 
  2096  0009                     	;# 
  2097  000A                     	;# 
  2098  000B                     	;# 
  2099  000C                     	;# 
  2100  000D                     	;# 
  2101  000E                     	;# 
  2102  000F                     	;# 
  2103  0010                     	;# 
  2104  0011                     	;# 
  2105  0012                     	;# 
  2106  0013                     	;# 
  2107  0014                     	;# 
  2108  0015                     	;# 
  2109  0016                     	;# 
  2110  0016                     	;# 
  2111  0017                     	;# 
  2112  0018                     	;# 
  2113  0019                     	;# 
  2114  001A                     	;# 
  2115  001B                     	;# 
  2116  001C                     	;# 
  2117  001E                     	;# 
  2118  001F                     	;# 
  2119  008C                     	;# 
  2120  008D                     	;# 
  2121  008E                     	;# 
  2122  008F                     	;# 
  2123  0090                     	;# 
  2124  0091                     	;# 
  2125  0092                     	;# 
  2126  0093                     	;# 
  2127  0094                     	;# 
  2128  0095                     	;# 
  2129  0096                     	;# 
  2130  0097                     	;# 
  2131  0098                     	;# 
  2132  0099                     	;# 
  2133  009A                     	;# 
  2134  009B                     	;# 
  2135  009B                     	;# 
  2136  009C                     	;# 
  2137  009D                     	;# 
  2138  009E                     	;# 
  2139  010C                     	;# 
  2140  010D                     	;# 
  2141  010E                     	;# 
  2142  010F                     	;# 
  2143  0110                     	;# 
  2144  0111                     	;# 
  2145  0112                     	;# 
  2146  0113                     	;# 
  2147  0114                     	;# 
  2148  0115                     	;# 
  2149  0116                     	;# 
  2150  0117                     	;# 
  2151  0118                     	;# 
  2152  0119                     	;# 
  2153  011A                     	;# 
  2154  011B                     	;# 
  2155  011D                     	;# 
  2156  011E                     	;# 
  2157  011F                     	;# 
  2158  018C                     	;# 
  2159  0190                     	;# 
  2160  0191                     	;# 
  2161  0191                     	;# 
  2162  0192                     	;# 
  2163  0193                     	;# 
  2164  0193                     	;# 
  2165  0193                     	;# 
  2166  0194                     	;# 
  2167  0195                     	;# 
  2168  0196                     	;# 
  2169  0199                     	;# 
  2170  0199                     	;# 
  2171  019A                     	;# 
  2172  019A                     	;# 
  2173  019B                     	;# 
  2174  019B                     	;# 
  2175  019B                     	;# 
  2176  019B                     	;# 
  2177  019C                     	;# 
  2178  019C                     	;# 
  2179  019D                     	;# 
  2180  019D                     	;# 
  2181  019E                     	;# 
  2182  019E                     	;# 
  2183  019F                     	;# 
  2184  019F                     	;# 
  2185  020D                     	;# 
  2186  0211                     	;# 
  2187  0211                     	;# 
  2188  0212                     	;# 
  2189  0212                     	;# 
  2190  0213                     	;# 
  2191  0213                     	;# 
  2192  0214                     	;# 
  2193  0214                     	;# 
  2194  0215                     	;# 
  2195  0215                     	;# 
  2196  0215                     	;# 
  2197  0216                     	;# 
  2198  0216                     	;# 
  2199  0217                     	;# 
  2200  0217                     	;# 
  2201  0219                     	;# 
  2202  021A                     	;# 
  2203  021B                     	;# 
  2204  021C                     	;# 
  2205  021D                     	;# 
  2206  021E                     	;# 
  2207  021F                     	;# 
  2208  028C                     	;# 
  2209  028D                     	;# 
  2210  0291                     	;# 
  2211  0291                     	;# 
  2212  0292                     	;# 
  2213  0293                     	;# 
  2214  0294                     	;# 
  2215  0295                     	;# 
  2216  0295                     	;# 
  2217  0296                     	;# 
  2218  0298                     	;# 
  2219  0298                     	;# 
  2220  0299                     	;# 
  2221  029A                     	;# 
  2222  029B                     	;# 
  2223  029C                     	;# 
  2224  029C                     	;# 
  2225  029D                     	;# 
  2226  029E                     	;# 
  2227  029F                     	;# 
  2228  030C                     	;# 
  2229  030D                     	;# 
  2230  0311                     	;# 
  2231  0311                     	;# 
  2232  0312                     	;# 
  2233  0313                     	;# 
  2234  0314                     	;# 
  2235  0315                     	;# 
  2236  0315                     	;# 
  2237  0316                     	;# 
  2238  0318                     	;# 
  2239  0318                     	;# 
  2240  0319                     	;# 
  2241  031A                     	;# 
  2242  031C                     	;# 
  2243  031C                     	;# 
  2244  031D                     	;# 
  2245  031E                     	;# 
  2246  038C                     	;# 
  2247  038D                     	;# 
  2248  0394                     	;# 
  2249  0395                     	;# 
  2250  0396                     	;# 
  2251  040C                     	;# 
  2252  040D                     	;# 
  2253  0415                     	;# 
  2254  0416                     	;# 
  2255  0417                     	;# 
  2256  041C                     	;# 
  2257  041D                     	;# 
  2258  041E                     	;# 
  2259  048D                     	;# 
  2260  0491                     	;# 
  2261  0492                     	;# 
  2262  0493                     	;# 
  2263  0493                     	;# 
  2264  0494                     	;# 
  2265  0495                     	;# 
  2266  0496                     	;# 
  2267  0497                     	;# 
  2268  0791                     	;# 
  2269  0792                     	;# 
  2270  0793                     	;# 
  2271  0794                     	;# 
  2272  0795                     	;# 
  2273  0798                     	;# 
  2274  0799                     	;# 
  2275  079A                     	;# 
  2276  079B                     	;# 
  2277  079C                     	;# 
  2278  079D                     	;# 
  2279  07A0                     	;# 
  2280  07A1                     	;# 
  2281  07A2                     	;# 
  2282  07A3                     	;# 
  2283  07A4                     	;# 
  2284  07A5                     	;# 
  2285  07A6                     	;# 
  2286  07A7                     	;# 
  2287  07A8                     	;# 
  2288  07A9                     	;# 
  2289  07AA                     	;# 
  2290  07AB                     	;# 
  2291  07AC                     	;# 
  2292  07AD                     	;# 
  2293  07AE                     	;# 
  2294  07AF                     	;# 
  2295  07B0                     	;# 
  2296  07B1                     	;# 
  2297  07B2                     	;# 
  2298  07B3                     	;# 
  2299  07B4                     	;# 
  2300  07B5                     	;# 
  2301  07B6                     	;# 
  2302  07B7                     	;# 
  2303  0FE4                     	;# 
  2304  0FE5                     	;# 
  2305  0FE6                     	;# 
  2306  0FE7                     	;# 
  2307  0FE8                     	;# 
  2308  0FE9                     	;# 
  2309  0FEA                     	;# 
  2310  0FEB                     	;# 
  2311  0FED                     	;# 
  2312  0FEE                     	;# 
  2313  0FEF                     	;# 
  2314  0000                     	;# 
  2315  0001                     	;# 
  2316  0002                     	;# 
  2317  0003                     	;# 
  2318  0004                     	;# 
  2319  0005                     	;# 
  2320  0006                     	;# 
  2321  0007                     	;# 
  2322  0008                     	;# 
  2323  0009                     	;# 
  2324  000A                     	;# 
  2325  000B                     	;# 
  2326  000C                     	;# 
  2327  000D                     	;# 
  2328  000E                     	;# 
  2329  000F                     	;# 
  2330  0010                     	;# 
  2331  0011                     	;# 
  2332  0012                     	;# 
  2333  0013                     	;# 
  2334  0014                     	;# 
  2335  0015                     	;# 
  2336  0016                     	;# 
  2337  0016                     	;# 
  2338  0017                     	;# 
  2339  0018                     	;# 
  2340  0019                     	;# 
  2341  001A                     	;# 
  2342  001B                     	;# 
  2343  001C                     	;# 
  2344  001E                     	;# 
  2345  001F                     	;# 
  2346  008C                     	;# 
  2347  008D                     	;# 
  2348  008E                     	;# 
  2349  008F                     	;# 
  2350  0090                     	;# 
  2351  0091                     	;# 
  2352  0092                     	;# 
  2353  0093                     	;# 
  2354  0094                     	;# 
  2355  0095                     	;# 
  2356  0096                     	;# 
  2357  0097                     	;# 
  2358  0098                     	;# 
  2359  0099                     	;# 
  2360  009A                     	;# 
  2361  009B                     	;# 
  2362  009B                     	;# 
  2363  009C                     	;# 
  2364  009D                     	;# 
  2365  009E                     	;# 
  2366  010C                     	;# 
  2367  010D                     	;# 
  2368  010E                     	;# 
  2369  010F                     	;# 
  2370  0110                     	;# 
  2371  0111                     	;# 
  2372  0112                     	;# 
  2373  0113                     	;# 
  2374  0114                     	;# 
  2375  0115                     	;# 
  2376  0116                     	;# 
  2377  0117                     	;# 
  2378  0118                     	;# 
  2379  0119                     	;# 
  2380  011A                     	;# 
  2381  011B                     	;# 
  2382  011D                     	;# 
  2383  011E                     	;# 
  2384  011F                     	;# 
  2385  018C                     	;# 
  2386  0190                     	;# 
  2387  0191                     	;# 
  2388  0191                     	;# 
  2389  0192                     	;# 
  2390  0193                     	;# 
  2391  0193                     	;# 
  2392  0193                     	;# 
  2393  0194                     	;# 
  2394  0195                     	;# 
  2395  0196                     	;# 
  2396  0199                     	;# 
  2397  0199                     	;# 
  2398  019A                     	;# 
  2399  019A                     	;# 
  2400  019B                     	;# 
  2401  019B                     	;# 
  2402  019B                     	;# 
  2403  019B                     	;# 
  2404  019C                     	;# 
  2405  019C                     	;# 
  2406  019D                     	;# 
  2407  019D                     	;# 
  2408  019E                     	;# 
  2409  019E                     	;# 
  2410  019F                     	;# 
  2411  019F                     	;# 
  2412  020D                     	;# 
  2413  0211                     	;# 
  2414  0211                     	;# 
  2415  0212                     	;# 
  2416  0212                     	;# 
  2417  0213                     	;# 
  2418  0213                     	;# 
  2419  0214                     	;# 
  2420  0214                     	;# 
  2421  0215                     	;# 
  2422  0215                     	;# 
  2423  0215                     	;# 
  2424  0216                     	;# 
  2425  0216                     	;# 
  2426  0217                     	;# 
  2427  0217                     	;# 
  2428  0219                     	;# 
  2429  021A                     	;# 
  2430  021B                     	;# 
  2431  021C                     	;# 
  2432  021D                     	;# 
  2433  021E                     	;# 
  2434  021F                     	;# 
  2435  028C                     	;# 
  2436  028D                     	;# 
  2437  0291                     	;# 
  2438  0291                     	;# 
  2439  0292                     	;# 
  2440  0293                     	;# 
  2441  0294                     	;# 
  2442  0295                     	;# 
  2443  0295                     	;# 
  2444  0296                     	;# 
  2445  0298                     	;# 
  2446  0298                     	;# 
  2447  0299                     	;# 
  2448  029A                     	;# 
  2449  029B                     	;# 
  2450  029C                     	;# 
  2451  029C                     	;# 
  2452  029D                     	;# 
  2453  029E                     	;# 
  2454  029F                     	;# 
  2455  030C                     	;# 
  2456  030D                     	;# 
  2457  0311                     	;# 
  2458  0311                     	;# 
  2459  0312                     	;# 
  2460  0313                     	;# 
  2461  0314                     	;# 
  2462  0315                     	;# 
  2463  0315                     	;# 
  2464  0316                     	;# 
  2465  0318                     	;# 
  2466  0318                     	;# 
  2467  0319                     	;# 
  2468  031A                     	;# 
  2469  031C                     	;# 
  2470  031C                     	;# 
  2471  031D                     	;# 
  2472  031E                     	;# 
  2473  038C                     	;# 
  2474  038D                     	;# 
  2475  0394                     	;# 
  2476  0395                     	;# 
  2477  0396                     	;# 
  2478  040C                     	;# 
  2479  040D                     	;# 
  2480  0415                     	;# 
  2481  0416                     	;# 
  2482  0417                     	;# 
  2483  041C                     	;# 
  2484  041D                     	;# 
  2485  041E                     	;# 
  2486  048D                     	;# 
  2487  0491                     	;# 
  2488  0492                     	;# 
  2489  0493                     	;# 
  2490  0493                     	;# 
  2491  0494                     	;# 
  2492  0495                     	;# 
  2493  0496                     	;# 
  2494  0497                     	;# 
  2495  0791                     	;# 
  2496  0792                     	;# 
  2497  0793                     	;# 
  2498  0794                     	;# 
  2499  0795                     	;# 
  2500  0798                     	;# 
  2501  0799                     	;# 
  2502  079A                     	;# 
  2503  079B                     	;# 
  2504  079C                     	;# 
  2505  079D                     	;# 
  2506  07A0                     	;# 
  2507  07A1                     	;# 
  2508  07A2                     	;# 
  2509  07A3                     	;# 
  2510  07A4                     	;# 
  2511  07A5                     	;# 
  2512  07A6                     	;# 
  2513  07A7                     	;# 
  2514  07A8                     	;# 
  2515  07A9                     	;# 
  2516  07AA                     	;# 
  2517  07AB                     	;# 
  2518  07AC                     	;# 
  2519  07AD                     	;# 
  2520  07AE                     	;# 
  2521  07AF                     	;# 
  2522  07B0                     	;# 
  2523  07B1                     	;# 
  2524  07B2                     	;# 
  2525  07B3                     	;# 
  2526  07B4                     	;# 
  2527  07B5                     	;# 
  2528  07B6                     	;# 
  2529  07B7                     	;# 
  2530  0FE4                     	;# 
  2531  0FE5                     	;# 
  2532  0FE6                     	;# 
  2533  0FE7                     	;# 
  2534  0FE8                     	;# 
  2535  0FE9                     	;# 
  2536  0FEA                     	;# 
  2537  0FEB                     	;# 
  2538  0FED                     	;# 
  2539  0FEE                     	;# 
  2540  0FEF                     	;# 
  2541  0000                     	;# 
  2542  0001                     	;# 
  2543  0002                     	;# 
  2544  0003                     	;# 
  2545  0004                     	;# 
  2546  0005                     	;# 
  2547  0006                     	;# 
  2548  0007                     	;# 
  2549  0008                     	;# 
  2550  0009                     	;# 
  2551  000A                     	;# 
  2552  000B                     	;# 
  2553  000C                     	;# 
  2554  000D                     	;# 
  2555  000E                     	;# 
  2556  000F                     	;# 
  2557  0010                     	;# 
  2558  0011                     	;# 
  2559  0012                     	;# 
  2560  0013                     	;# 
  2561  0014                     	;# 
  2562  0015                     	;# 
  2563  0016                     	;# 
  2564  0016                     	;# 
  2565  0017                     	;# 
  2566  0018                     	;# 
  2567  0019                     	;# 
  2568  001A                     	;# 
  2569  001B                     	;# 
  2570  001C                     	;# 
  2571  001E                     	;# 
  2572  001F                     	;# 
  2573  008C                     	;# 
  2574  008D                     	;# 
  2575  008E                     	;# 
  2576  008F                     	;# 
  2577  0090                     	;# 
  2578  0091                     	;# 
  2579  0092                     	;# 
  2580  0093                     	;# 
  2581  0094                     	;# 
  2582  0095                     	;# 
  2583  0096                     	;# 
  2584  0097                     	;# 
  2585  0098                     	;# 
  2586  0099                     	;# 
  2587  009A                     	;# 
  2588  009B                     	;# 
  2589  009B                     	;# 
  2590  009C                     	;# 
  2591  009D                     	;# 
  2592  009E                     	;# 
  2593  010C                     	;# 
  2594  010D                     	;# 
  2595  010E                     	;# 
  2596  010F                     	;# 
  2597  0110                     	;# 
  2598  0111                     	;# 
  2599  0112                     	;# 
  2600  0113                     	;# 
  2601  0114                     	;# 
  2602  0115                     	;# 
  2603  0116                     	;# 
  2604  0117                     	;# 
  2605  0118                     	;# 
  2606  0119                     	;# 
  2607  011A                     	;# 
  2608  011B                     	;# 
  2609  011D                     	;# 
  2610  011E                     	;# 
  2611  011F                     	;# 
  2612  018C                     	;# 
  2613  0190                     	;# 
  2614  0191                     	;# 
  2615  0191                     	;# 
  2616  0192                     	;# 
  2617  0193                     	;# 
  2618  0193                     	;# 
  2619  0193                     	;# 
  2620  0194                     	;# 
  2621  0195                     	;# 
  2622  0196                     	;# 
  2623  0199                     	;# 
  2624  0199                     	;# 
  2625  019A                     	;# 
  2626  019A                     	;# 
  2627  019B                     	;# 
  2628  019B                     	;# 
  2629  019B                     	;# 
  2630  019B                     	;# 
  2631  019C                     	;# 
  2632  019C                     	;# 
  2633  019D                     	;# 
  2634  019D                     	;# 
  2635  019E                     	;# 
  2636  019E                     	;# 
  2637  019F                     	;# 
  2638  019F                     	;# 
  2639  020D                     	;# 
  2640  0211                     	;# 
  2641  0211                     	;# 
  2642  0212                     	;# 
  2643  0212                     	;# 
  2644  0213                     	;# 
  2645  0213                     	;# 
  2646  0214                     	;# 
  2647  0214                     	;# 
  2648  0215                     	;# 
  2649  0215                     	;# 
  2650  0215                     	;# 
  2651  0216                     	;# 
  2652  0216                     	;# 
  2653  0217                     	;# 
  2654  0217                     	;# 
  2655  0219                     	;# 
  2656  021A                     	;# 
  2657  021B                     	;# 
  2658  021C                     	;# 
  2659  021D                     	;# 
  2660  021E                     	;# 
  2661  021F                     	;# 
  2662  028C                     	;# 
  2663  028D                     	;# 
  2664  0291                     	;# 
  2665  0291                     	;# 
  2666  0292                     	;# 
  2667  0293                     	;# 
  2668  0294                     	;# 
  2669  0295                     	;# 
  2670  0295                     	;# 
  2671  0296                     	;# 
  2672  0298                     	;# 
  2673  0298                     	;# 
  2674  0299                     	;# 
  2675  029A                     	;# 
  2676  029B                     	;# 
  2677  029C                     	;# 
  2678  029C                     	;# 
  2679  029D                     	;# 
  2680  029E                     	;# 
  2681  029F                     	;# 
  2682  030C                     	;# 
  2683  030D                     	;# 
  2684  0311                     	;# 
  2685  0311                     	;# 
  2686  0312                     	;# 
  2687  0313                     	;# 
  2688  0314                     	;# 
  2689  0315                     	;# 
  2690  0315                     	;# 
  2691  0316                     	;# 
  2692  0318                     	;# 
  2693  0318                     	;# 
  2694  0319                     	;# 
  2695  031A                     	;# 
  2696  031C                     	;# 
  2697  031C                     	;# 
  2698  031D                     	;# 
  2699  031E                     	;# 
  2700  038C                     	;# 
  2701  038D                     	;# 
  2702  0394                     	;# 
  2703  0395                     	;# 
  2704  0396                     	;# 
  2705  040C                     	;# 
  2706  040D                     	;# 
  2707  0415                     	;# 
  2708  0416                     	;# 
  2709  0417                     	;# 
  2710  041C                     	;# 
  2711  041D                     	;# 
  2712  041E                     	;# 
  2713  048D                     	;# 
  2714  0491                     	;# 
  2715  0492                     	;# 
  2716  0493                     	;# 
  2717  0493                     	;# 
  2718  0494                     	;# 
  2719  0495                     	;# 
  2720  0496                     	;# 
  2721  0497                     	;# 
  2722  0791                     	;# 
  2723  0792                     	;# 
  2724  0793                     	;# 
  2725  0794                     	;# 
  2726  0795                     	;# 
  2727  0798                     	;# 
  2728  0799                     	;# 
  2729  079A                     	;# 
  2730  079B                     	;# 
  2731  079C                     	;# 
  2732  079D                     	;# 
  2733  07A0                     	;# 
  2734  07A1                     	;# 
  2735  07A2                     	;# 
  2736  07A3                     	;# 
  2737  07A4                     	;# 
  2738  07A5                     	;# 
  2739  07A6                     	;# 
  2740  07A7                     	;# 
  2741  07A8                     	;# 
  2742  07A9                     	;# 
  2743  07AA                     	;# 
  2744  07AB                     	;# 
  2745  07AC                     	;# 
  2746  07AD                     	;# 
  2747  07AE                     	;# 
  2748  07AF                     	;# 
  2749  07B0                     	;# 
  2750  07B1                     	;# 
  2751  07B2                     	;# 
  2752  07B3                     	;# 
  2753  07B4                     	;# 
  2754  07B5                     	;# 
  2755  07B6                     	;# 
  2756  07B7                     	;# 
  2757  0FE4                     	;# 
  2758  0FE5                     	;# 
  2759  0FE6                     	;# 
  2760  0FE7                     	;# 
  2761  0FE8                     	;# 
  2762  0FE9                     	;# 
  2763  0FEA                     	;# 
  2764  0FEB                     	;# 
  2765  0FED                     	;# 
  2766  0FEE                     	;# 
  2767  0FEF                     	;# 
  2768  0000                     	;# 
  2769  0001                     	;# 
  2770  0002                     	;# 
  2771  0003                     	;# 
  2772  0004                     	;# 
  2773  0005                     	;# 
  2774  0006                     	;# 
  2775  0007                     	;# 
  2776  0008                     	;# 
  2777  0009                     	;# 
  2778  000A                     	;# 
  2779  000B                     	;# 
  2780  000C                     	;# 
  2781  000D                     	;# 
  2782  000E                     	;# 
  2783  000F                     	;# 
  2784  0010                     	;# 
  2785  0011                     	;# 
  2786  0012                     	;# 
  2787  0013                     	;# 
  2788  0014                     	;# 
  2789  0015                     	;# 
  2790  0016                     	;# 
  2791  0016                     	;# 
  2792  0017                     	;# 
  2793  0018                     	;# 
  2794  0019                     	;# 
  2795  001A                     	;# 
  2796  001B                     	;# 
  2797  001C                     	;# 
  2798  001E                     	;# 
  2799  001F                     	;# 
  2800  008C                     	;# 
  2801  008D                     	;# 
  2802  008E                     	;# 
  2803  008F                     	;# 
  2804  0090                     	;# 
  2805  0091                     	;# 
  2806  0092                     	;# 
  2807  0093                     	;# 
  2808  0094                     	;# 
  2809  0095                     	;# 
  2810  0096                     	;# 
  2811  0097                     	;# 
  2812  0098                     	;# 
  2813  0099                     	;# 
  2814  009A                     	;# 
  2815  009B                     	;# 
  2816  009B                     	;# 
  2817  009C                     	;# 
  2818  009D                     	;# 
  2819  009E                     	;# 
  2820  010C                     	;# 
  2821  010D                     	;# 
  2822  010E                     	;# 
  2823  010F                     	;# 
  2824  0110                     	;# 
  2825  0111                     	;# 
  2826  0112                     	;# 
  2827  0113                     	;# 
  2828  0114                     	;# 
  2829  0115                     	;# 
  2830  0116                     	;# 
  2831  0117                     	;# 
  2832  0118                     	;# 
  2833  0119                     	;# 
  2834  011A                     	;# 
  2835  011B                     	;# 
  2836  011D                     	;# 
  2837  011E                     	;# 
  2838  011F                     	;# 
  2839  018C                     	;# 
  2840  0190                     	;# 
  2841  0191                     	;# 
  2842  0191                     	;# 
  2843  0192                     	;# 
  2844  0193                     	;# 
  2845  0193                     	;# 
  2846  0193                     	;# 
  2847  0194                     	;# 
  2848  0195                     	;# 
  2849  0196                     	;# 
  2850  0199                     	;# 
  2851  0199                     	;# 
  2852  019A                     	;# 
  2853  019A                     	;# 
  2854  019B                     	;# 
  2855  019B                     	;# 
  2856  019B                     	;# 
  2857  019B                     	;# 
  2858  019C                     	;# 
  2859  019C                     	;# 
  2860  019D                     	;# 
  2861  019D                     	;# 
  2862  019E                     	;# 
  2863  019E                     	;# 
  2864  019F                     	;# 
  2865  019F                     	;# 
  2866  020D                     	;# 
  2867  0211                     	;# 
  2868  0211                     	;# 
  2869  0212                     	;# 
  2870  0212                     	;# 
  2871  0213                     	;# 
  2872  0213                     	;# 
  2873  0214                     	;# 
  2874  0214                     	;# 
  2875  0215                     	;# 
  2876  0215                     	;# 
  2877  0215                     	;# 
  2878  0216                     	;# 
  2879  0216                     	;# 
  2880  0217                     	;# 
  2881  0217                     	;# 
  2882  0219                     	;# 
  2883  021A                     	;# 
  2884  021B                     	;# 
  2885  021C                     	;# 
  2886  021D                     	;# 
  2887  021E                     	;# 
  2888  021F                     	;# 
  2889  028C                     	;# 
  2890  028D                     	;# 
  2891  0291                     	;# 
  2892  0291                     	;# 
  2893  0292                     	;# 
  2894  0293                     	;# 
  2895  0294                     	;# 
  2896  0295                     	;# 
  2897  0295                     	;# 
  2898  0296                     	;# 
  2899  0298                     	;# 
  2900  0298                     	;# 
  2901  0299                     	;# 
  2902  029A                     	;# 
  2903  029B                     	;# 
  2904  029C                     	;# 
  2905  029C                     	;# 
  2906  029D                     	;# 
  2907  029E                     	;# 
  2908  029F                     	;# 
  2909  030C                     	;# 
  2910  030D                     	;# 
  2911  0311                     	;# 
  2912  0311                     	;# 
  2913  0312                     	;# 
  2914  0313                     	;# 
  2915  0314                     	;# 
  2916  0315                     	;# 
  2917  0315                     	;# 
  2918  0316                     	;# 
  2919  0318                     	;# 
  2920  0318                     	;# 
  2921  0319                     	;# 
  2922  031A                     	;# 
  2923  031C                     	;# 
  2924  031C                     	;# 
  2925  031D                     	;# 
  2926  031E                     	;# 
  2927  038C                     	;# 
  2928  038D                     	;# 
  2929  0394                     	;# 
  2930  0395                     	;# 
  2931  0396                     	;# 
  2932  040C                     	;# 
  2933  040D                     	;# 
  2934  0415                     	;# 
  2935  0416                     	;# 
  2936  0417                     	;# 
  2937  041C                     	;# 
  2938  041D                     	;# 
  2939  041E                     	;# 
  2940  048D                     	;# 
  2941  0491                     	;# 
  2942  0492                     	;# 
  2943  0493                     	;# 
  2944  0493                     	;# 
  2945  0494                     	;# 
  2946  0495                     	;# 
  2947  0496                     	;# 
  2948  0497                     	;# 
  2949  0791                     	;# 
  2950  0792                     	;# 
  2951  0793                     	;# 
  2952  0794                     	;# 
  2953  0795                     	;# 
  2954  0798                     	;# 
  2955  0799                     	;# 
  2956  079A                     	;# 
  2957  079B                     	;# 
  2958  079C                     	;# 
  2959  079D                     	;# 
  2960  07A0                     	;# 
  2961  07A1                     	;# 
  2962  07A2                     	;# 
  2963  07A3                     	;# 
  2964  07A4                     	;# 
  2965  07A5                     	;# 
  2966  07A6                     	;# 
  2967  07A7                     	;# 
  2968  07A8                     	;# 
  2969  07A9                     	;# 
  2970  07AA                     	;# 
  2971  07AB                     	;# 
  2972  07AC                     	;# 
  2973  07AD                     	;# 
  2974  07AE                     	;# 
  2975  07AF                     	;# 
  2976  07B0                     	;# 
  2977  07B1                     	;# 
  2978  07B2                     	;# 
  2979  07B3                     	;# 
  2980  07B4                     	;# 
  2981  07B5                     	;# 
  2982  07B6                     	;# 
  2983  07B7                     	;# 
  2984  0FE4                     	;# 
  2985  0FE5                     	;# 
  2986  0FE6                     	;# 
  2987  0FE7                     	;# 
  2988  0FE8                     	;# 
  2989  0FE9                     	;# 
  2990  0FEA                     	;# 
  2991  0FEB                     	;# 
  2992  0FED                     	;# 
  2993  0FEE                     	;# 
  2994  0FEF                     	;# 
  2995  0000                     	;# 
  2996  0001                     	;# 
  2997  0002                     	;# 
  2998  0003                     	;# 
  2999  0004                     	;# 
  3000  0005                     	;# 
  3001  0006                     	;# 
  3002  0007                     	;# 
  3003  0008                     	;# 
  3004  0009                     	;# 
  3005  000A                     	;# 
  3006  000B                     	;# 
  3007  000C                     	;# 
  3008  000D                     	;# 
  3009  000E                     	;# 
  3010  000F                     	;# 
  3011  0010                     	;# 
  3012  0011                     	;# 
  3013  0012                     	;# 
  3014  0013                     	;# 
  3015  0014                     	;# 
  3016  0015                     	;# 
  3017  0016                     	;# 
  3018  0016                     	;# 
  3019  0017                     	;# 
  3020  0018                     	;# 
  3021  0019                     	;# 
  3022  001A                     	;# 
  3023  001B                     	;# 
  3024  001C                     	;# 
  3025  001E                     	;# 
  3026  001F                     	;# 
  3027  008C                     	;# 
  3028  008D                     	;# 
  3029  008E                     	;# 
  3030  008F                     	;# 
  3031  0090                     	;# 
  3032  0091                     	;# 
  3033  0092                     	;# 
  3034  0093                     	;# 
  3035  0094                     	;# 
  3036  0095                     	;# 
  3037  0096                     	;# 
  3038  0097                     	;# 
  3039  0098                     	;# 
  3040  0099                     	;# 
  3041  009A                     	;# 
  3042  009B                     	;# 
  3043  009B                     	;# 
  3044  009C                     	;# 
  3045  009D                     	;# 
  3046  009E                     	;# 
  3047  010C                     	;# 
  3048  010D                     	;# 
  3049  010E                     	;# 
  3050  010F                     	;# 
  3051  0110                     	;# 
  3052  0111                     	;# 
  3053  0112                     	;# 
  3054  0113                     	;# 
  3055  0114                     	;# 
  3056  0115                     	;# 
  3057  0116                     	;# 
  3058  0117                     	;# 
  3059  0118                     	;# 
  3060  0119                     	;# 
  3061  011A                     	;# 
  3062  011B                     	;# 
  3063  011D                     	;# 
  3064  011E                     	;# 
  3065  011F                     	;# 
  3066  018C                     	;# 
  3067  0190                     	;# 
  3068  0191                     	;# 
  3069  0191                     	;# 
  3070  0192                     	;# 
  3071  0193                     	;# 
  3072  0193                     	;# 
  3073  0193                     	;# 
  3074  0194                     	;# 
  3075  0195                     	;# 
  3076  0196                     	;# 
  3077  0199                     	;# 
  3078  0199                     	;# 
  3079  019A                     	;# 
  3080  019A                     	;# 
  3081  019B                     	;# 
  3082  019B                     	;# 
  3083  019B                     	;# 
  3084  019B                     	;# 
  3085  019C                     	;# 
  3086  019C                     	;# 
  3087  019D                     	;# 
  3088  019D                     	;# 
  3089  019E                     	;# 
  3090  019E                     	;# 
  3091  019F                     	;# 
  3092  019F                     	;# 
  3093  020D                     	;# 
  3094  0211                     	;# 
  3095  0211                     	;# 
  3096  0212                     	;# 
  3097  0212                     	;# 
  3098  0213                     	;# 
  3099  0213                     	;# 
  3100  0214                     	;# 
  3101  0214                     	;# 
  3102  0215                     	;# 
  3103  0215                     	;# 
  3104  0215                     	;# 
  3105  0216                     	;# 
  3106  0216                     	;# 
  3107  0217                     	;# 
  3108  0217                     	;# 
  3109  0219                     	;# 
  3110  021A                     	;# 
  3111  021B                     	;# 
  3112  021C                     	;# 
  3113  021D                     	;# 
  3114  021E                     	;# 
  3115  021F                     	;# 
  3116  028C                     	;# 
  3117  028D                     	;# 
  3118  0291                     	;# 
  3119  0291                     	;# 
  3120  0292                     	;# 
  3121  0293                     	;# 
  3122  0294                     	;# 
  3123  0295                     	;# 
  3124  0295                     	;# 
  3125  0296                     	;# 
  3126  0298                     	;# 
  3127  0298                     	;# 
  3128  0299                     	;# 
  3129  029A                     	;# 
  3130  029B                     	;# 
  3131  029C                     	;# 
  3132  029C                     	;# 
  3133  029D                     	;# 
  3134  029E                     	;# 
  3135  029F                     	;# 
  3136  030C                     	;# 
  3137  030D                     	;# 
  3138  0311                     	;# 
  3139  0311                     	;# 
  3140  0312                     	;# 
  3141  0313                     	;# 
  3142  0314                     	;# 
  3143  0315                     	;# 
  3144  0315                     	;# 
  3145  0316                     	;# 
  3146  0318                     	;# 
  3147  0318                     	;# 
  3148  0319                     	;# 
  3149  031A                     	;# 
  3150  031C                     	;# 
  3151  031C                     	;# 
  3152  031D                     	;# 
  3153  031E                     	;# 
  3154  038C                     	;# 
  3155  038D                     	;# 
  3156  0394                     	;# 
  3157  0395                     	;# 
  3158  0396                     	;# 
  3159  040C                     	;# 
  3160  040D                     	;# 
  3161  0415                     	;# 
  3162  0416                     	;# 
  3163  0417                     	;# 
  3164  041C                     	;# 
  3165  041D                     	;# 
  3166  041E                     	;# 
  3167  048D                     	;# 
  3168  0491                     	;# 
  3169  0492                     	;# 
  3170  0493                     	;# 
  3171  0493                     	;# 
  3172  0494                     	;# 
  3173  0495                     	;# 
  3174  0496                     	;# 
  3175  0497                     	;# 
  3176  0791                     	;# 
  3177  0792                     	;# 
  3178  0793                     	;# 
  3179  0794                     	;# 
  3180  0795                     	;# 
  3181  0798                     	;# 
  3182  0799                     	;# 
  3183  079A                     	;# 
  3184  079B                     	;# 
  3185  079C                     	;# 
  3186  079D                     	;# 
  3187  07A0                     	;# 
  3188  07A1                     	;# 
  3189  07A2                     	;# 
  3190  07A3                     	;# 
  3191  07A4                     	;# 
  3192  07A5                     	;# 
  3193  07A6                     	;# 
  3194  07A7                     	;# 
  3195  07A8                     	;# 
  3196  07A9                     	;# 
  3197  07AA                     	;# 
  3198  07AB                     	;# 
  3199  07AC                     	;# 
  3200  07AD                     	;# 
  3201  07AE                     	;# 
  3202  07AF                     	;# 
  3203  07B0                     	;# 
  3204  07B1                     	;# 
  3205  07B2                     	;# 
  3206  07B3                     	;# 
  3207  07B4                     	;# 
  3208  07B5                     	;# 
  3209  07B6                     	;# 
  3210  07B7                     	;# 
  3211  0FE4                     	;# 
  3212  0FE5                     	;# 
  3213  0FE6                     	;# 
  3214  0FE7                     	;# 
  3215  0FE8                     	;# 
  3216  0FE9                     	;# 
  3217  0FEA                     	;# 
  3218  0FEB                     	;# 
  3219  0FED                     	;# 
  3220  0FEE                     	;# 
  3221  0FEF                     	;# 
  3222  0000                     	;# 
  3223  0001                     	;# 
  3224  0002                     	;# 
  3225  0003                     	;# 
  3226  0004                     	;# 
  3227  0005                     	;# 
  3228  0006                     	;# 
  3229  0007                     	;# 
  3230  0008                     	;# 
  3231  0009                     	;# 
  3232  000A                     	;# 
  3233  000B                     	;# 
  3234  000C                     	;# 
  3235  000D                     	;# 
  3236  000E                     	;# 
  3237  000F                     	;# 
  3238  0010                     	;# 
  3239  0011                     	;# 
  3240  0012                     	;# 
  3241  0013                     	;# 
  3242  0014                     	;# 
  3243  0015                     	;# 
  3244  0016                     	;# 
  3245  0016                     	;# 
  3246  0017                     	;# 
  3247  0018                     	;# 
  3248  0019                     	;# 
  3249  001A                     	;# 
  3250  001B                     	;# 
  3251  001C                     	;# 
  3252  001E                     	;# 
  3253  001F                     	;# 
  3254  008C                     	;# 
  3255  008D                     	;# 
  3256  008E                     	;# 
  3257  008F                     	;# 
  3258  0090                     	;# 
  3259  0091                     	;# 
  3260  0092                     	;# 
  3261  0093                     	;# 
  3262  0094                     	;# 
  3263  0095                     	;# 
  3264  0096                     	;# 
  3265  0097                     	;# 
  3266  0098                     	;# 
  3267  0099                     	;# 
  3268  009A                     	;# 
  3269  009B                     	;# 
  3270  009B                     	;# 
  3271  009C                     	;# 
  3272  009D                     	;# 
  3273  009E                     	;# 
  3274  010C                     	;# 
  3275  010D                     	;# 
  3276  010E                     	;# 
  3277  010F                     	;# 
  3278  0110                     	;# 
  3279  0111                     	;# 
  3280  0112                     	;# 
  3281  0113                     	;# 
  3282  0114                     	;# 
  3283  0115                     	;# 
  3284  0116                     	;# 
  3285  0117                     	;# 
  3286  0118                     	;# 
  3287  0119                     	;# 
  3288  011A                     	;# 
  3289  011B                     	;# 
  3290  011D                     	;# 
  3291  011E                     	;# 
  3292  011F                     	;# 
  3293  018C                     	;# 
  3294  0190                     	;# 
  3295  0191                     	;# 
  3296  0191                     	;# 
  3297  0192                     	;# 
  3298  0193                     	;# 
  3299  0193                     	;# 
  3300  0193                     	;# 
  3301  0194                     	;# 
  3302  0195                     	;# 
  3303  0196                     	;# 
  3304  0199                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019A                     	;# 
  3308  019B                     	;# 
  3309  019B                     	;# 
  3310  019B                     	;# 
  3311  019B                     	;# 
  3312  019C                     	;# 
  3313  019C                     	;# 
  3314  019D                     	;# 
  3315  019D                     	;# 
  3316  019E                     	;# 
  3317  019E                     	;# 
  3318  019F                     	;# 
  3319  019F                     	;# 
  3320  020D                     	;# 
  3321  0211                     	;# 
  3322  0211                     	;# 
  3323  0212                     	;# 
  3324  0212                     	;# 
  3325  0213                     	;# 
  3326  0213                     	;# 
  3327  0214                     	;# 
  3328  0214                     	;# 
  3329  0215                     	;# 
  3330  0215                     	;# 
  3331  0215                     	;# 
  3332  0216                     	;# 
  3333  0216                     	;# 
  3334  0217                     	;# 
  3335  0217                     	;# 
  3336  0219                     	;# 
  3337  021A                     	;# 
  3338  021B                     	;# 
  3339  021C                     	;# 
  3340  021D                     	;# 
  3341  021E                     	;# 
  3342  021F                     	;# 
  3343  028C                     	;# 
  3344  028D                     	;# 
  3345  0291                     	;# 
  3346  0291                     	;# 
  3347  0292                     	;# 
  3348  0293                     	;# 
  3349  0294                     	;# 
  3350  0295                     	;# 
  3351  0295                     	;# 
  3352  0296                     	;# 
  3353  0298                     	;# 
  3354  0298                     	;# 
  3355  0299                     	;# 
  3356  029A                     	;# 
  3357  029B                     	;# 
  3358  029C                     	;# 
  3359  029C                     	;# 
  3360  029D                     	;# 
  3361  029E                     	;# 
  3362  029F                     	;# 
  3363  030C                     	;# 
  3364  030D                     	;# 
  3365  0311                     	;# 
  3366  0311                     	;# 
  3367  0312                     	;# 
  3368  0313                     	;# 
  3369  0314                     	;# 
  3370  0315                     	;# 
  3371  0315                     	;# 
  3372  0316                     	;# 
  3373  0318                     	;# 
  3374  0318                     	;# 
  3375  0319                     	;# 
  3376  031A                     	;# 
  3377  031C                     	;# 
  3378  031C                     	;# 
  3379  031D                     	;# 
  3380  031E                     	;# 
  3381  038C                     	;# 
  3382  038D                     	;# 
  3383  0394                     	;# 
  3384  0395                     	;# 
  3385  0396                     	;# 
  3386  040C                     	;# 
  3387  040D                     	;# 
  3388  0415                     	;# 
  3389  0416                     	;# 
  3390  0417                     	;# 
  3391  041C                     	;# 
  3392  041D                     	;# 
  3393  041E                     	;# 
  3394  048D                     	;# 
  3395  0491                     	;# 
  3396  0492                     	;# 
  3397  0493                     	;# 
  3398  0493                     	;# 
  3399  0494                     	;# 
  3400  0495                     	;# 
  3401  0496                     	;# 
  3402  0497                     	;# 
  3403  0791                     	;# 
  3404  0792                     	;# 
  3405  0793                     	;# 
  3406  0794                     	;# 
  3407  0795                     	;# 
  3408  0798                     	;# 
  3409  0799                     	;# 
  3410  079A                     	;# 
  3411  079B                     	;# 
  3412  079C                     	;# 
  3413  079D                     	;# 
  3414  07A0                     	;# 
  3415  07A1                     	;# 
  3416  07A2                     	;# 
  3417  07A3                     	;# 
  3418  07A4                     	;# 
  3419  07A5                     	;# 
  3420  07A6                     	;# 
  3421  07A7                     	;# 
  3422  07A8                     	;# 
  3423  07A9                     	;# 
  3424  07AA                     	;# 
  3425  07AB                     	;# 
  3426  07AC                     	;# 
  3427  07AD                     	;# 
  3428  07AE                     	;# 
  3429  07AF                     	;# 
  3430  07B0                     	;# 
  3431  07B1                     	;# 
  3432  07B2                     	;# 
  3433  07B3                     	;# 
  3434  07B4                     	;# 
  3435  07B5                     	;# 
  3436  07B6                     	;# 
  3437  07B7                     	;# 
  3438  0FE4                     	;# 
  3439  0FE5                     	;# 
  3440  0FE6                     	;# 
  3441  0FE7                     	;# 
  3442  0FE8                     	;# 
  3443  0FE9                     	;# 
  3444  0FEA                     	;# 
  3445  0FEB                     	;# 
  3446  0FED                     	;# 
  3447  0FEE                     	;# 
  3448  0FEF                     	;# 
  3449  0000                     	;# 
  3450  0001                     	;# 
  3451  0002                     	;# 
  3452  0003                     	;# 
  3453  0004                     	;# 
  3454  0005                     	;# 
  3455  0006                     	;# 
  3456  0007                     	;# 
  3457  0008                     	;# 
  3458  0009                     	;# 
  3459  000A                     	;# 
  3460  000B                     	;# 
  3461  000C                     	;# 
  3462  000D                     	;# 
  3463  000E                     	;# 
  3464  000F                     	;# 
  3465  0010                     	;# 
  3466  0011                     	;# 
  3467  0012                     	;# 
  3468  0013                     	;# 
  3469  0014                     	;# 
  3470  0015                     	;# 
  3471  0016                     	;# 
  3472  0016                     	;# 
  3473  0017                     	;# 
  3474  0018                     	;# 
  3475  0019                     	;# 
  3476  001A                     	;# 
  3477  001B                     	;# 
  3478  001C                     	;# 
  3479  001E                     	;# 
  3480  001F                     	;# 
  3481  008C                     	;# 
  3482  008D                     	;# 
  3483  008E                     	;# 
  3484  008F                     	;# 
  3485  0090                     	;# 
  3486  0091                     	;# 
  3487  0092                     	;# 
  3488  0093                     	;# 
  3489  0094                     	;# 
  3490  0095                     	;# 
  3491  0096                     	;# 
  3492  0097                     	;# 
  3493  0098                     	;# 
  3494  0099                     	;# 
  3495  009A                     	;# 
  3496  009B                     	;# 
  3497  009B                     	;# 
  3498  009C                     	;# 
  3499  009D                     	;# 
  3500  009E                     	;# 
  3501  010C                     	;# 
  3502  010D                     	;# 
  3503  010E                     	;# 
  3504  010F                     	;# 
  3505  0110                     	;# 
  3506  0111                     	;# 
  3507  0112                     	;# 
  3508  0113                     	;# 
  3509  0114                     	;# 
  3510  0115                     	;# 
  3511  0116                     	;# 
  3512  0117                     	;# 
  3513  0118                     	;# 
  3514  0119                     	;# 
  3515  011A                     	;# 
  3516  011B                     	;# 
  3517  011D                     	;# 
  3518  011E                     	;# 
  3519  011F                     	;# 
  3520  018C                     	;# 
  3521  0190                     	;# 
  3522  0191                     	;# 
  3523  0191                     	;# 
  3524  0192                     	;# 
  3525  0193                     	;# 
  3526  0193                     	;# 
  3527  0193                     	;# 
  3528  0194                     	;# 
  3529  0195                     	;# 
  3530  0196                     	;# 
  3531  0199                     	;# 
  3532  0199                     	;# 
  3533  019A                     	;# 
  3534  019A                     	;# 
  3535  019B                     	;# 
  3536  019B                     	;# 
  3537  019B                     	;# 
  3538  019B                     	;# 
  3539  019C                     	;# 
  3540  019C                     	;# 
  3541  019D                     	;# 
  3542  019D                     	;# 
  3543  019E                     	;# 
  3544  019E                     	;# 
  3545  019F                     	;# 
  3546  019F                     	;# 
  3547  020D                     	;# 
  3548  0211                     	;# 
  3549  0211                     	;# 
  3550  0212                     	;# 
  3551  0212                     	;# 
  3552  0213                     	;# 
  3553  0213                     	;# 
  3554  0214                     	;# 
  3555  0214                     	;# 
  3556  0215                     	;# 
  3557  0215                     	;# 
  3558  0215                     	;# 
  3559  0216                     	;# 
  3560  0216                     	;# 
  3561  0217                     	;# 
  3562  0217                     	;# 
  3563  0219                     	;# 
  3564  021A                     	;# 
  3565  021B                     	;# 
  3566  021C                     	;# 
  3567  021D                     	;# 
  3568  021E                     	;# 
  3569  021F                     	;# 
  3570  028C                     	;# 
  3571  028D                     	;# 
  3572  0291                     	;# 
  3573  0291                     	;# 
  3574  0292                     	;# 
  3575  0293                     	;# 
  3576  0294                     	;# 
  3577  0295                     	;# 
  3578  0295                     	;# 
  3579  0296                     	;# 
  3580  0298                     	;# 
  3581  0298                     	;# 
  3582  0299                     	;# 
  3583  029A                     	;# 
  3584  029B                     	;# 
  3585  029C                     	;# 
  3586  029C                     	;# 
  3587  029D                     	;# 
  3588  029E                     	;# 
  3589  029F                     	;# 
  3590  030C                     	;# 
  3591  030D                     	;# 
  3592  0311                     	;# 
  3593  0311                     	;# 
  3594  0312                     	;# 
  3595  0313                     	;# 
  3596  0314                     	;# 
  3597  0315                     	;# 
  3598  0315                     	;# 
  3599  0316                     	;# 
  3600  0318                     	;# 
  3601  0318                     	;# 
  3602  0319                     	;# 
  3603  031A                     	;# 
  3604  031C                     	;# 
  3605  031C                     	;# 
  3606  031D                     	;# 
  3607  031E                     	;# 
  3608  038C                     	;# 
  3609  038D                     	;# 
  3610  0394                     	;# 
  3611  0395                     	;# 
  3612  0396                     	;# 
  3613  040C                     	;# 
  3614  040D                     	;# 
  3615  0415                     	;# 
  3616  0416                     	;# 
  3617  0417                     	;# 
  3618  041C                     	;# 
  3619  041D                     	;# 
  3620  041E                     	;# 
  3621  048D                     	;# 
  3622  0491                     	;# 
  3623  0492                     	;# 
  3624  0493                     	;# 
  3625  0493                     	;# 
  3626  0494                     	;# 
  3627  0495                     	;# 
  3628  0496                     	;# 
  3629  0497                     	;# 
  3630  0791                     	;# 
  3631  0792                     	;# 
  3632  0793                     	;# 
  3633  0794                     	;# 
  3634  0795                     	;# 
  3635  0798                     	;# 
  3636  0799                     	;# 
  3637  079A                     	;# 
  3638  079B                     	;# 
  3639  079C                     	;# 
  3640  079D                     	;# 
  3641  07A0                     	;# 
  3642  07A1                     	;# 
  3643  07A2                     	;# 
  3644  07A3                     	;# 
  3645  07A4                     	;# 
  3646  07A5                     	;# 
  3647  07A6                     	;# 
  3648  07A7                     	;# 
  3649  07A8                     	;# 
  3650  07A9                     	;# 
  3651  07AA                     	;# 
  3652  07AB                     	;# 
  3653  07AC                     	;# 
  3654  07AD                     	;# 
  3655  07AE                     	;# 
  3656  07AF                     	;# 
  3657  07B0                     	;# 
  3658  07B1                     	;# 
  3659  07B2                     	;# 
  3660  07B3                     	;# 
  3661  07B4                     	;# 
  3662  07B5                     	;# 
  3663  07B6                     	;# 
  3664  07B7                     	;# 
  3665  0FE4                     	;# 
  3666  0FE5                     	;# 
  3667  0FE6                     	;# 
  3668  0FE7                     	;# 
  3669  0FE8                     	;# 
  3670  0FE9                     	;# 
  3671  0FEA                     	;# 
  3672  0FEB                     	;# 
  3673  0FED                     	;# 
  3674  0FEE                     	;# 
  3675  0FEF                     	;# 
  3676  0000                     	;# 
  3677  0001                     	;# 
  3678  0002                     	;# 
  3679  0003                     	;# 
  3680  0004                     	;# 
  3681  0005                     	;# 
  3682  0006                     	;# 
  3683  0007                     	;# 
  3684  0008                     	;# 
  3685  0009                     	;# 
  3686  000A                     	;# 
  3687  000B                     	;# 
  3688  000C                     	;# 
  3689  000D                     	;# 
  3690  000E                     	;# 
  3691  000F                     	;# 
  3692  0010                     	;# 
  3693  0011                     	;# 
  3694  0012                     	;# 
  3695  0013                     	;# 
  3696  0014                     	;# 
  3697  0015                     	;# 
  3698  0016                     	;# 
  3699  0016                     	;# 
  3700  0017                     	;# 
  3701  0018                     	;# 
  3702  0019                     	;# 
  3703  001A                     	;# 
  3704  001B                     	;# 
  3705  001C                     	;# 
  3706  001E                     	;# 
  3707  001F                     	;# 
  3708  008C                     	;# 
  3709  008D                     	;# 
  3710  008E                     	;# 
  3711  008F                     	;# 
  3712  0090                     	;# 
  3713  0091                     	;# 
  3714  0092                     	;# 
  3715  0093                     	;# 
  3716  0094                     	;# 
  3717  0095                     	;# 
  3718  0096                     	;# 
  3719  0097                     	;# 
  3720  0098                     	;# 
  3721  0099                     	;# 
  3722  009A                     	;# 
  3723  009B                     	;# 
  3724  009B                     	;# 
  3725  009C                     	;# 
  3726  009D                     	;# 
  3727  009E                     	;# 
  3728  010C                     	;# 
  3729  010D                     	;# 
  3730  010E                     	;# 
  3731  010F                     	;# 
  3732  0110                     	;# 
  3733  0111                     	;# 
  3734  0112                     	;# 
  3735  0113                     	;# 
  3736  0114                     	;# 
  3737  0115                     	;# 
  3738  0116                     	;# 
  3739  0117                     	;# 
  3740  0118                     	;# 
  3741  0119                     	;# 
  3742  011A                     	;# 
  3743  011B                     	;# 
  3744  011D                     	;# 
  3745  011E                     	;# 
  3746  011F                     	;# 
  3747  018C                     	;# 
  3748  0190                     	;# 
  3749  0191                     	;# 
  3750  0191                     	;# 
  3751  0192                     	;# 
  3752  0193                     	;# 
  3753  0193                     	;# 
  3754  0193                     	;# 
  3755  0194                     	;# 
  3756  0195                     	;# 
  3757  0196                     	;# 
  3758  0199                     	;# 
  3759  0199                     	;# 
  3760  019A                     	;# 
  3761  019A                     	;# 
  3762  019B                     	;# 
  3763  019B                     	;# 
  3764  019B                     	;# 
  3765  019B                     	;# 
  3766  019C                     	;# 
  3767  019C                     	;# 
  3768  019D                     	;# 
  3769  019D                     	;# 
  3770  019E                     	;# 
  3771  019E                     	;# 
  3772  019F                     	;# 
  3773  019F                     	;# 
  3774  020D                     	;# 
  3775  0211                     	;# 
  3776  0211                     	;# 
  3777  0212                     	;# 
  3778  0212                     	;# 
  3779  0213                     	;# 
  3780  0213                     	;# 
  3781  0214                     	;# 
  3782  0214                     	;# 
  3783  0215                     	;# 
  3784  0215                     	;# 
  3785  0215                     	;# 
  3786  0216                     	;# 
  3787  0216                     	;# 
  3788  0217                     	;# 
  3789  0217                     	;# 
  3790  0219                     	;# 
  3791  021A                     	;# 
  3792  021B                     	;# 
  3793  021C                     	;# 
  3794  021D                     	;# 
  3795  021E                     	;# 
  3796  021F                     	;# 
  3797  028C                     	;# 
  3798  028D                     	;# 
  3799  0291                     	;# 
  3800  0291                     	;# 
  3801  0292                     	;# 
  3802  0293                     	;# 
  3803  0294                     	;# 
  3804  0295                     	;# 
  3805  0295                     	;# 
  3806  0296                     	;# 
  3807  0298                     	;# 
  3808  0298                     	;# 
  3809  0299                     	;# 
  3810  029A                     	;# 
  3811  029B                     	;# 
  3812  029C                     	;# 
  3813  029C                     	;# 
  3814  029D                     	;# 
  3815  029E                     	;# 
  3816  029F                     	;# 
  3817  030C                     	;# 
  3818  030D                     	;# 
  3819  0311                     	;# 
  3820  0311                     	;# 
  3821  0312                     	;# 
  3822  0313                     	;# 
  3823  0314                     	;# 
  3824  0315                     	;# 
  3825  0315                     	;# 
  3826  0316                     	;# 
  3827  0318                     	;# 
  3828  0318                     	;# 
  3829  0319                     	;# 
  3830  031A                     	;# 
  3831  031C                     	;# 
  3832  031C                     	;# 
  3833  031D                     	;# 
  3834  031E                     	;# 
  3835  038C                     	;# 
  3836  038D                     	;# 
  3837  0394                     	;# 
  3838  0395                     	;# 
  3839  0396                     	;# 
  3840  040C                     	;# 
  3841  040D                     	;# 
  3842  0415                     	;# 
  3843  0416                     	;# 
  3844  0417                     	;# 
  3845  041C                     	;# 
  3846  041D                     	;# 
  3847  041E                     	;# 
  3848  048D                     	;# 
  3849  0491                     	;# 
  3850  0492                     	;# 
  3851  0493                     	;# 
  3852  0493                     	;# 
  3853  0494                     	;# 
  3854  0495                     	;# 
  3855  0496                     	;# 
  3856  0497                     	;# 
  3857  0791                     	;# 
  3858  0792                     	;# 
  3859  0793                     	;# 
  3860  0794                     	;# 
  3861  0795                     	;# 
  3862  0798                     	;# 
  3863  0799                     	;# 
  3864  079A                     	;# 
  3865  079B                     	;# 
  3866  079C                     	;# 
  3867  079D                     	;# 
  3868  07A0                     	;# 
  3869  07A1                     	;# 
  3870  07A2                     	;# 
  3871  07A3                     	;# 
  3872  07A4                     	;# 
  3873  07A5                     	;# 
  3874  07A6                     	;# 
  3875  07A7                     	;# 
  3876  07A8                     	;# 
  3877  07A9                     	;# 
  3878  07AA                     	;# 
  3879  07AB                     	;# 
  3880  07AC                     	;# 
  3881  07AD                     	;# 
  3882  07AE                     	;# 
  3883  07AF                     	;# 
  3884  07B0                     	;# 
  3885  07B1                     	;# 
  3886  07B2                     	;# 
  3887  07B3                     	;# 
  3888  07B4                     	;# 
  3889  07B5                     	;# 
  3890  07B6                     	;# 
  3891  07B7                     	;# 
  3892  0FE4                     	;# 
  3893  0FE5                     	;# 
  3894  0FE6                     	;# 
  3895  0FE7                     	;# 
  3896  0FE8                     	;# 
  3897  0FE9                     	;# 
  3898  0FEA                     	;# 
  3899  0FEB                     	;# 
  3900  0FED                     	;# 
  3901  0FEE                     	;# 
  3902  0FEF                     	;# 
  3903  0000                     	;# 
  3904  0001                     	;# 
  3905  0002                     	;# 
  3906  0003                     	;# 
  3907  0004                     	;# 
  3908  0005                     	;# 
  3909  0006                     	;# 
  3910  0007                     	;# 
  3911  0008                     	;# 
  3912  0009                     	;# 
  3913  000A                     	;# 
  3914  000B                     	;# 
  3915  000C                     	;# 
  3916  000D                     	;# 
  3917  000E                     	;# 
  3918  000F                     	;# 
  3919  0010                     	;# 
  3920  0011                     	;# 
  3921  0012                     	;# 
  3922  0013                     	;# 
  3923  0014                     	;# 
  3924  0015                     	;# 
  3925  0016                     	;# 
  3926  0016                     	;# 
  3927  0017                     	;# 
  3928  0018                     	;# 
  3929  0019                     	;# 
  3930  001A                     	;# 
  3931  001B                     	;# 
  3932  001C                     	;# 
  3933  001E                     	;# 
  3934  001F                     	;# 
  3935  008C                     	;# 
  3936  008D                     	;# 
  3937  008E                     	;# 
  3938  008F                     	;# 
  3939  0090                     	;# 
  3940  0091                     	;# 
  3941  0092                     	;# 
  3942  0093                     	;# 
  3943  0094                     	;# 
  3944  0095                     	;# 
  3945  0096                     	;# 
  3946  0097                     	;# 
  3947  0098                     	;# 
  3948  0099                     	;# 
  3949  009A                     	;# 
  3950  009B                     	;# 
  3951  009B                     	;# 
  3952  009C                     	;# 
  3953  009D                     	;# 
  3954  009E                     	;# 
  3955  010C                     	;# 
  3956  010D                     	;# 
  3957  010E                     	;# 
  3958  010F                     	;# 
  3959  0110                     	;# 
  3960  0111                     	;# 
  3961  0112                     	;# 
  3962  0113                     	;# 
  3963  0114                     	;# 
  3964  0115                     	;# 
  3965  0116                     	;# 
  3966  0117                     	;# 
  3967  0118                     	;# 
  3968  0119                     	;# 
  3969  011A                     	;# 
  3970  011B                     	;# 
  3971  011D                     	;# 
  3972  011E                     	;# 
  3973  011F                     	;# 
  3974  018C                     	;# 
  3975  0190                     	;# 
  3976  0191                     	;# 
  3977  0191                     	;# 
  3978  0192                     	;# 
  3979  0193                     	;# 
  3980  0193                     	;# 
  3981  0193                     	;# 
  3982  0194                     	;# 
  3983  0195                     	;# 
  3984  0196                     	;# 
  3985  0199                     	;# 
  3986  0199                     	;# 
  3987  019A                     	;# 
  3988  019A                     	;# 
  3989  019B                     	;# 
  3990  019B                     	;# 
  3991  019B                     	;# 
  3992  019B                     	;# 
  3993  019C                     	;# 
  3994  019C                     	;# 
  3995  019D                     	;# 
  3996  019D                     	;# 
  3997  019E                     	;# 
  3998  019E                     	;# 
  3999  019F                     	;# 
  4000  019F                     	;# 
  4001  020D                     	;# 
  4002  0211                     	;# 
  4003  0211                     	;# 
  4004  0212                     	;# 
  4005  0212                     	;# 
  4006  0213                     	;# 
  4007  0213                     	;# 
  4008  0214                     	;# 
  4009  0214                     	;# 
  4010  0215                     	;# 
  4011  0215                     	;# 
  4012  0215                     	;# 
  4013  0216                     	;# 
  4014  0216                     	;# 
  4015  0217                     	;# 
  4016  0217                     	;# 
  4017  0219                     	;# 
  4018  021A                     	;# 
  4019  021B                     	;# 
  4020  021C                     	;# 
  4021  021D                     	;# 
  4022  021E                     	;# 
  4023  021F                     	;# 
  4024  028C                     	;# 
  4025  028D                     	;# 
  4026  0291                     	;# 
  4027  0291                     	;# 
  4028  0292                     	;# 
  4029  0293                     	;# 
  4030  0294                     	;# 
  4031  0295                     	;# 
  4032  0295                     	;# 
  4033  0296                     	;# 
  4034  0298                     	;# 
  4035  0298                     	;# 
  4036  0299                     	;# 
  4037  029A                     	;# 
  4038  029B                     	;# 
  4039  029C                     	;# 
  4040  029C                     	;# 
  4041  029D                     	;# 
  4042  029E                     	;# 
  4043  029F                     	;# 
  4044  030C                     	;# 
  4045  030D                     	;# 
  4046  0311                     	;# 
  4047  0311                     	;# 
  4048  0312                     	;# 
  4049  0313                     	;# 
  4050  0314                     	;# 
  4051  0315                     	;# 
  4052  0315                     	;# 
  4053  0316                     	;# 
  4054  0318                     	;# 
  4055  0318                     	;# 
  4056  0319                     	;# 
  4057  031A                     	;# 
  4058  031C                     	;# 
  4059  031C                     	;# 
  4060  031D                     	;# 
  4061  031E                     	;# 
  4062  038C                     	;# 
  4063  038D                     	;# 
  4064  0394                     	;# 
  4065  0395                     	;# 
  4066  0396                     	;# 
  4067  040C                     	;# 
  4068  040D                     	;# 
  4069  0415                     	;# 
  4070  0416                     	;# 
  4071  0417                     	;# 
  4072  041C                     	;# 
  4073  041D                     	;# 
  4074  041E                     	;# 
  4075  048D                     	;# 
  4076  0491                     	;# 
  4077  0492                     	;# 
  4078  0493                     	;# 
  4079  0493                     	;# 
  4080  0494                     	;# 
  4081  0495                     	;# 
  4082  0496                     	;# 
  4083  0497                     	;# 
  4084  0791                     	;# 
  4085  0792                     	;# 
  4086  0793                     	;# 
  4087  0794                     	;# 
  4088  0795                     	;# 
  4089  0798                     	;# 
  4090  0799                     	;# 
  4091  079A                     	;# 
  4092  079B                     	;# 
  4093  079C                     	;# 
  4094  079D                     	;# 
  4095  07A0                     	;# 
  4096  07A1                     	;# 
  4097  07A2                     	;# 
  4098  07A3                     	;# 
  4099  07A4                     	;# 
  4100  07A5                     	;# 
  4101  07A6                     	;# 
  4102  07A7                     	;# 
  4103  07A8                     	;# 
  4104  07A9                     	;# 
  4105  07AA                     	;# 
  4106  07AB                     	;# 
  4107  07AC                     	;# 
  4108  07AD                     	;# 
  4109  07AE                     	;# 
  4110  07AF                     	;# 
  4111  07B0                     	;# 
  4112  07B1                     	;# 
  4113  07B2                     	;# 
  4114  07B3                     	;# 
  4115  07B4                     	;# 
  4116  07B5                     	;# 
  4117  07B6                     	;# 
  4118  07B7                     	;# 
  4119  0FE4                     	;# 
  4120  0FE5                     	;# 
  4121  0FE6                     	;# 
  4122  0FE7                     	;# 
  4123  0FE8                     	;# 
  4124  0FE9                     	;# 
  4125  0FEA                     	;# 
  4126  0FEB                     	;# 
  4127  0FED                     	;# 
  4128  0FEE                     	;# 
  4129  0FEF                     	;# 
  4130  0000                     	;# 
  4131  0001                     	;# 
  4132  0002                     	;# 
  4133  0003                     	;# 
  4134  0004                     	;# 
  4135  0005                     	;# 
  4136  0006                     	;# 
  4137  0007                     	;# 
  4138  0008                     	;# 
  4139  0009                     	;# 
  4140  000A                     	;# 
  4141  000B                     	;# 
  4142  000C                     	;# 
  4143  000D                     	;# 
  4144  000E                     	;# 
  4145  000F                     	;# 
  4146  0010                     	;# 
  4147  0011                     	;# 
  4148  0012                     	;# 
  4149  0013                     	;# 
  4150  0014                     	;# 
  4151  0015                     	;# 
  4152  0016                     	;# 
  4153  0016                     	;# 
  4154  0017                     	;# 
  4155  0018                     	;# 
  4156  0019                     	;# 
  4157  001A                     	;# 
  4158  001B                     	;# 
  4159  001C                     	;# 
  4160  001E                     	;# 
  4161  001F                     	;# 
  4162  008C                     	;# 
  4163  008D                     	;# 
  4164  008E                     	;# 
  4165  008F                     	;# 
  4166  0090                     	;# 
  4167  0091                     	;# 
  4168  0092                     	;# 
  4169  0093                     	;# 
  4170  0094                     	;# 
  4171  0095                     	;# 
  4172  0096                     	;# 
  4173  0097                     	;# 
  4174  0098                     	;# 
  4175  0099                     	;# 
  4176  009A                     	;# 
  4177  009B                     	;# 
  4178  009B                     	;# 
  4179  009C                     	;# 
  4180  009D                     	;# 
  4181  009E                     	;# 
  4182  010C                     	;# 
  4183  010D                     	;# 
  4184  010E                     	;# 
  4185  010F                     	;# 
  4186  0110                     	;# 
  4187  0111                     	;# 
  4188  0112                     	;# 
  4189  0113                     	;# 
  4190  0114                     	;# 
  4191  0115                     	;# 
  4192  0116                     	;# 
  4193  0117                     	;# 
  4194  0118                     	;# 
  4195  0119                     	;# 
  4196  011A                     	;# 
  4197  011B                     	;# 
  4198  011D                     	;# 
  4199  011E                     	;# 
  4200  011F                     	;# 
  4201  018C                     	;# 
  4202  0190                     	;# 
  4203  0191                     	;# 
  4204  0191                     	;# 
  4205  0192                     	;# 
  4206  0193                     	;# 
  4207  0193                     	;# 
  4208  0193                     	;# 
  4209  0194                     	;# 
  4210  0195                     	;# 
  4211  0196                     	;# 
  4212  0199                     	;# 
  4213  0199                     	;# 
  4214  019A                     	;# 
  4215  019A                     	;# 
  4216  019B                     	;# 
  4217  019B                     	;# 
  4218  019B                     	;# 
  4219  019B                     	;# 
  4220  019C                     	;# 
  4221  019C                     	;# 
  4222  019D                     	;# 
  4223  019D                     	;# 
  4224  019E                     	;# 
  4225  019E                     	;# 
  4226  019F                     	;# 
  4227  019F                     	;# 
  4228  020D                     	;# 
  4229  0211                     	;# 
  4230  0211                     	;# 
  4231  0212                     	;# 
  4232  0212                     	;# 
  4233  0213                     	;# 
  4234  0213                     	;# 
  4235  0214                     	;# 
  4236  0214                     	;# 
  4237  0215                     	;# 
  4238  0215                     	;# 
  4239  0215                     	;# 
  4240  0216                     	;# 
  4241  0216                     	;# 
  4242  0217                     	;# 
  4243  0217                     	;# 
  4244  0219                     	;# 
  4245  021A                     	;# 
  4246  021B                     	;# 
  4247  021C                     	;# 
  4248  021D                     	;# 
  4249  021E                     	;# 
  4250  021F                     	;# 
  4251  028C                     	;# 
  4252  028D                     	;# 
  4253  0291                     	;# 
  4254  0291                     	;# 
  4255  0292                     	;# 
  4256  0293                     	;# 
  4257  0294                     	;# 
  4258  0295                     	;# 
  4259  0295                     	;# 
  4260  0296                     	;# 
  4261  0298                     	;# 
  4262  0298                     	;# 
  4263  0299                     	;# 
  4264  029A                     	;# 
  4265  029B                     	;# 
  4266  029C                     	;# 
  4267  029C                     	;# 
  4268  029D                     	;# 
  4269  029E                     	;# 
  4270  029F                     	;# 
  4271  030C                     	;# 
  4272  030D                     	;# 
  4273  0311                     	;# 
  4274  0311                     	;# 
  4275  0312                     	;# 
  4276  0313                     	;# 
  4277  0314                     	;# 
  4278  0315                     	;# 
  4279  0315                     	;# 
  4280  0316                     	;# 
  4281  0318                     	;# 
  4282  0318                     	;# 
  4283  0319                     	;# 
  4284  031A                     	;# 
  4285  031C                     	;# 
  4286  031C                     	;# 
  4287  031D                     	;# 
  4288  031E                     	;# 
  4289  038C                     	;# 
  4290  038D                     	;# 
  4291  0394                     	;# 
  4292  0395                     	;# 
  4293  0396                     	;# 
  4294  040C                     	;# 
  4295  040D                     	;# 
  4296  0415                     	;# 
  4297  0416                     	;# 
  4298  0417                     	;# 
  4299  041C                     	;# 
  4300  041D                     	;# 
  4301  041E                     	;# 
  4302  048D                     	;# 
  4303  0491                     	;# 
  4304  0492                     	;# 
  4305  0493                     	;# 
  4306  0493                     	;# 
  4307  0494                     	;# 
  4308  0495                     	;# 
  4309  0496                     	;# 
  4310  0497                     	;# 
  4311  0791                     	;# 
  4312  0792                     	;# 
  4313  0793                     	;# 
  4314  0794                     	;# 
  4315  0795                     	;# 
  4316  0798                     	;# 
  4317  0799                     	;# 
  4318  079A                     	;# 
  4319  079B                     	;# 
  4320  079C                     	;# 
  4321  079D                     	;# 
  4322  07A0                     	;# 
  4323  07A1                     	;# 
  4324  07A2                     	;# 
  4325  07A3                     	;# 
  4326  07A4                     	;# 
  4327  07A5                     	;# 
  4328  07A6                     	;# 
  4329  07A7                     	;# 
  4330  07A8                     	;# 
  4331  07A9                     	;# 
  4332  07AA                     	;# 
  4333  07AB                     	;# 
  4334  07AC                     	;# 
  4335  07AD                     	;# 
  4336  07AE                     	;# 
  4337  07AF                     	;# 
  4338  07B0                     	;# 
  4339  07B1                     	;# 
  4340  07B2                     	;# 
  4341  07B3                     	;# 
  4342  07B4                     	;# 
  4343  07B5                     	;# 
  4344  07B6                     	;# 
  4345  07B7                     	;# 
  4346  0FE4                     	;# 
  4347  0FE5                     	;# 
  4348  0FE6                     	;# 
  4349  0FE7                     	;# 
  4350  0FE8                     	;# 
  4351  0FE9                     	;# 
  4352  0FEA                     	;# 
  4353  0FEB                     	;# 
  4354  0FED                     	;# 
  4355  0FEE                     	;# 
  4356  0FEF                     	;# 
  4357  0000                     	;# 
  4358  0001                     	;# 
  4359  0002                     	;# 
  4360  0003                     	;# 
  4361  0004                     	;# 
  4362  0005                     	;# 
  4363  0006                     	;# 
  4364  0007                     	;# 
  4365  0008                     	;# 
  4366  0009                     	;# 
  4367  000A                     	;# 
  4368  000B                     	;# 
  4369  000C                     	;# 
  4370  000D                     	;# 
  4371  000E                     	;# 
  4372  000F                     	;# 
  4373  0010                     	;# 
  4374  0011                     	;# 
  4375  0012                     	;# 
  4376  0013                     	;# 
  4377  0014                     	;# 
  4378  0015                     	;# 
  4379  0016                     	;# 
  4380  0016                     	;# 
  4381  0017                     	;# 
  4382  0018                     	;# 
  4383  0019                     	;# 
  4384  001A                     	;# 
  4385  001B                     	;# 
  4386  001C                     	;# 
  4387  001E                     	;# 
  4388  001F                     	;# 
  4389  008C                     	;# 
  4390  008D                     	;# 
  4391  008E                     	;# 
  4392  008F                     	;# 
  4393  0090                     	;# 
  4394  0091                     	;# 
  4395  0092                     	;# 
  4396  0093                     	;# 
  4397  0094                     	;# 
  4398  0095                     	;# 
  4399  0096                     	;# 
  4400  0097                     	;# 
  4401  0098                     	;# 
  4402  0099                     	;# 
  4403  009A                     	;# 
  4404  009B                     	;# 
  4405  009B                     	;# 
  4406  009C                     	;# 
  4407  009D                     	;# 
  4408  009E                     	;# 
  4409  010C                     	;# 
  4410  010D                     	;# 
  4411  010E                     	;# 
  4412  010F                     	;# 
  4413  0110                     	;# 
  4414  0111                     	;# 
  4415  0112                     	;# 
  4416  0113                     	;# 
  4417  0114                     	;# 
  4418  0115                     	;# 
  4419  0116                     	;# 
  4420  0117                     	;# 
  4421  0118                     	;# 
  4422  0119                     	;# 
  4423  011A                     	;# 
  4424  011B                     	;# 
  4425  011D                     	;# 
  4426  011E                     	;# 
  4427  011F                     	;# 
  4428  018C                     	;# 
  4429  0190                     	;# 
  4430  0191                     	;# 
  4431  0191                     	;# 
  4432  0192                     	;# 
  4433  0193                     	;# 
  4434  0193                     	;# 
  4435  0193                     	;# 
  4436  0194                     	;# 
  4437  0195                     	;# 
  4438  0196                     	;# 
  4439  0199                     	;# 
  4440  0199                     	;# 
  4441  019A                     	;# 
  4442  019A                     	;# 
  4443  019B                     	;# 
  4444  019B                     	;# 
  4445  019B                     	;# 
  4446  019B                     	;# 
  4447  019C                     	;# 
  4448  019C                     	;# 
  4449  019D                     	;# 
  4450  019D                     	;# 
  4451  019E                     	;# 
  4452  019E                     	;# 
  4453  019F                     	;# 
  4454  019F                     	;# 
  4455  020D                     	;# 
  4456  0211                     	;# 
  4457  0211                     	;# 
  4458  0212                     	;# 
  4459  0212                     	;# 
  4460  0213                     	;# 
  4461  0213                     	;# 
  4462  0214                     	;# 
  4463  0214                     	;# 
  4464  0215                     	;# 
  4465  0215                     	;# 
  4466  0215                     	;# 
  4467  0216                     	;# 
  4468  0216                     	;# 
  4469  0217                     	;# 
  4470  0217                     	;# 
  4471  0219                     	;# 
  4472  021A                     	;# 
  4473  021B                     	;# 
  4474  021C                     	;# 
  4475  021D                     	;# 
  4476  021E                     	;# 
  4477  021F                     	;# 
  4478  028C                     	;# 
  4479  028D                     	;# 
  4480  0291                     	;# 
  4481  0291                     	;# 
  4482  0292                     	;# 
  4483  0293                     	;# 
  4484  0294                     	;# 
  4485  0295                     	;# 
  4486  0295                     	;# 
  4487  0296                     	;# 
  4488  0298                     	;# 
  4489  0298                     	;# 
  4490  0299                     	;# 
  4491  029A                     	;# 
  4492  029B                     	;# 
  4493  029C                     	;# 
  4494  029C                     	;# 
  4495  029D                     	;# 
  4496  029E                     	;# 
  4497  029F                     	;# 
  4498  030C                     	;# 
  4499  030D                     	;# 
  4500  0311                     	;# 
  4501  0311                     	;# 
  4502  0312                     	;# 
  4503  0313                     	;# 
  4504  0314                     	;# 
  4505  0315                     	;# 
  4506  0315                     	;# 
  4507  0316                     	;# 
  4508  0318                     	;# 
  4509  0318                     	;# 
  4510  0319                     	;# 
  4511  031A                     	;# 
  4512  031C                     	;# 
  4513  031C                     	;# 
  4514  031D                     	;# 
  4515  031E                     	;# 
  4516  038C                     	;# 
  4517  038D                     	;# 
  4518  0394                     	;# 
  4519  0395                     	;# 
  4520  0396                     	;# 
  4521  040C                     	;# 
  4522  040D                     	;# 
  4523  0415                     	;# 
  4524  0416                     	;# 
  4525  0417                     	;# 
  4526  041C                     	;# 
  4527  041D                     	;# 
  4528  041E                     	;# 
  4529  048D                     	;# 
  4530  0491                     	;# 
  4531  0492                     	;# 
  4532  0493                     	;# 
  4533  0493                     	;# 
  4534  0494                     	;# 
  4535  0495                     	;# 
  4536  0496                     	;# 
  4537  0497                     	;# 
  4538  0791                     	;# 
  4539  0792                     	;# 
  4540  0793                     	;# 
  4541  0794                     	;# 
  4542  0795                     	;# 
  4543  0798                     	;# 
  4544  0799                     	;# 
  4545  079A                     	;# 
  4546  079B                     	;# 
  4547  079C                     	;# 
  4548  079D                     	;# 
  4549  07A0                     	;# 
  4550  07A1                     	;# 
  4551  07A2                     	;# 
  4552  07A3                     	;# 
  4553  07A4                     	;# 
  4554  07A5                     	;# 
  4555  07A6                     	;# 
  4556  07A7                     	;# 
  4557  07A8                     	;# 
  4558  07A9                     	;# 
  4559  07AA                     	;# 
  4560  07AB                     	;# 
  4561  07AC                     	;# 
  4562  07AD                     	;# 
  4563  07AE                     	;# 
  4564  07AF                     	;# 
  4565  07B0                     	;# 
  4566  07B1                     	;# 
  4567  07B2                     	;# 
  4568  07B3                     	;# 
  4569  07B4                     	;# 
  4570  07B5                     	;# 
  4571  07B6                     	;# 
  4572  07B7                     	;# 
  4573  0FE4                     	;# 
  4574  0FE5                     	;# 
  4575  0FE6                     	;# 
  4576  0FE7                     	;# 
  4577  0FE8                     	;# 
  4578  0FE9                     	;# 
  4579  0FEA                     	;# 
  4580  0FEB                     	;# 
  4581  0FED                     	;# 
  4582  0FEE                     	;# 
  4583  0FEF                     	;# 
  4584  0000                     	;# 
  4585  0001                     	;# 
  4586  0002                     	;# 
  4587  0003                     	;# 
  4588  0004                     	;# 
  4589  0005                     	;# 
  4590  0006                     	;# 
  4591  0007                     	;# 
  4592  0008                     	;# 
  4593  0009                     	;# 
  4594  000A                     	;# 
  4595  000B                     	;# 
  4596  000C                     	;# 
  4597  000D                     	;# 
  4598  000E                     	;# 
  4599  000F                     	;# 
  4600  0010                     	;# 
  4601  0011                     	;# 
  4602  0012                     	;# 
  4603  0013                     	;# 
  4604  0014                     	;# 
  4605  0015                     	;# 
  4606  0016                     	;# 
  4607  0016                     	;# 
  4608  0017                     	;# 
  4609  0018                     	;# 
  4610  0019                     	;# 
  4611  001A                     	;# 
  4612  001B                     	;# 
  4613  001C                     	;# 
  4614  001E                     	;# 
  4615  001F                     	;# 
  4616  008C                     	;# 
  4617  008D                     	;# 
  4618  008E                     	;# 
  4619  008F                     	;# 
  4620  0090                     	;# 
  4621  0091                     	;# 
  4622  0092                     	;# 
  4623  0093                     	;# 
  4624  0094                     	;# 
  4625  0095                     	;# 
  4626  0096                     	;# 
  4627  0097                     	;# 
  4628  0098                     	;# 
  4629  0099                     	;# 
  4630  009A                     	;# 
  4631  009B                     	;# 
  4632  009B                     	;# 
  4633  009C                     	;# 
  4634  009D                     	;# 
  4635  009E                     	;# 
  4636  010C                     	;# 
  4637  010D                     	;# 
  4638  010E                     	;# 
  4639  010F                     	;# 
  4640  0110                     	;# 
  4641  0111                     	;# 
  4642  0112                     	;# 
  4643  0113                     	;# 
  4644  0114                     	;# 
  4645  0115                     	;# 
  4646  0116                     	;# 
  4647  0117                     	;# 
  4648  0118                     	;# 
  4649  0119                     	;# 
  4650  011A                     	;# 
  4651  011B                     	;# 
  4652  011D                     	;# 
  4653  011E                     	;# 
  4654  011F                     	;# 
  4655  018C                     	;# 
  4656  0190                     	;# 
  4657  0191                     	;# 
  4658  0191                     	;# 
  4659  0192                     	;# 
  4660  0193                     	;# 
  4661  0193                     	;# 
  4662  0193                     	;# 
  4663  0194                     	;# 
  4664  0195                     	;# 
  4665  0196                     	;# 
  4666  0199                     	;# 
  4667  0199                     	;# 
  4668  019A                     	;# 
  4669  019A                     	;# 
  4670  019B                     	;# 
  4671  019B                     	;# 
  4672  019B                     	;# 
  4673  019B                     	;# 
  4674  019C                     	;# 
  4675  019C                     	;# 
  4676  019D                     	;# 
  4677  019D                     	;# 
  4678  019E                     	;# 
  4679  019E                     	;# 
  4680  019F                     	;# 
  4681  019F                     	;# 
  4682  020D                     	;# 
  4683  0211                     	;# 
  4684  0211                     	;# 
  4685  0212                     	;# 
  4686  0212                     	;# 
  4687  0213                     	;# 
  4688  0213                     	;# 
  4689  0214                     	;# 
  4690  0214                     	;# 
  4691  0215                     	;# 
  4692  0215                     	;# 
  4693  0215                     	;# 
  4694  0216                     	;# 
  4695  0216                     	;# 
  4696  0217                     	;# 
  4697  0217                     	;# 
  4698  0219                     	;# 
  4699  021A                     	;# 
  4700  021B                     	;# 
  4701  021C                     	;# 
  4702  021D                     	;# 
  4703  021E                     	;# 
  4704  021F                     	;# 
  4705  028C                     	;# 
  4706  028D                     	;# 
  4707  0291                     	;# 
  4708  0291                     	;# 
  4709  0292                     	;# 
  4710  0293                     	;# 
  4711  0294                     	;# 
  4712  0295                     	;# 
  4713  0295                     	;# 
  4714  0296                     	;# 
  4715  0298                     	;# 
  4716  0298                     	;# 
  4717  0299                     	;# 
  4718  029A                     	;# 
  4719  029B                     	;# 
  4720  029C                     	;# 
  4721  029C                     	;# 
  4722  029D                     	;# 
  4723  029E                     	;# 
  4724  029F                     	;# 
  4725  030C                     	;# 
  4726  030D                     	;# 
  4727  0311                     	;# 
  4728  0311                     	;# 
  4729  0312                     	;# 
  4730  0313                     	;# 
  4731  0314                     	;# 
  4732  0315                     	;# 
  4733  0315                     	;# 
  4734  0316                     	;# 
  4735  0318                     	;# 
  4736  0318                     	;# 
  4737  0319                     	;# 
  4738  031A                     	;# 
  4739  031C                     	;# 
  4740  031C                     	;# 
  4741  031D                     	;# 
  4742  031E                     	;# 
  4743  038C                     	;# 
  4744  038D                     	;# 
  4745  0394                     	;# 
  4746  0395                     	;# 
  4747  0396                     	;# 
  4748  040C                     	;# 
  4749  040D                     	;# 
  4750  0415                     	;# 
  4751  0416                     	;# 
  4752  0417                     	;# 
  4753  041C                     	;# 
  4754  041D                     	;# 
  4755  041E                     	;# 
  4756  048D                     	;# 
  4757  0491                     	;# 
  4758  0492                     	;# 
  4759  0493                     	;# 
  4760  0493                     	;# 
  4761  0494                     	;# 
  4762  0495                     	;# 
  4763  0496                     	;# 
  4764  0497                     	;# 
  4765  0791                     	;# 
  4766  0792                     	;# 
  4767  0793                     	;# 
  4768  0794                     	;# 
  4769  0795                     	;# 
  4770  0798                     	;# 
  4771  0799                     	;# 
  4772  079A                     	;# 
  4773  079B                     	;# 
  4774  079C                     	;# 
  4775  079D                     	;# 
  4776  07A0                     	;# 
  4777  07A1                     	;# 
  4778  07A2                     	;# 
  4779  07A3                     	;# 
  4780  07A4                     	;# 
  4781  07A5                     	;# 
  4782  07A6                     	;# 
  4783  07A7                     	;# 
  4784  07A8                     	;# 
  4785  07A9                     	;# 
  4786  07AA                     	;# 
  4787  07AB                     	;# 
  4788  07AC                     	;# 
  4789  07AD                     	;# 
  4790  07AE                     	;# 
  4791  07AF                     	;# 
  4792  07B0                     	;# 
  4793  07B1                     	;# 
  4794  07B2                     	;# 
  4795  07B3                     	;# 
  4796  07B4                     	;# 
  4797  07B5                     	;# 
  4798  07B6                     	;# 
  4799  07B7                     	;# 
  4800  0FE4                     	;# 
  4801  0FE5                     	;# 
  4802  0FE6                     	;# 
  4803  0FE7                     	;# 
  4804  0FE8                     	;# 
  4805  0FE9                     	;# 
  4806  0FEA                     	;# 
  4807  0FEB                     	;# 
  4808  0FED                     	;# 
  4809  0FEE                     	;# 
  4810  0FEF                     	;# 
  4811  0000                     	;# 
  4812  0001                     	;# 
  4813  0002                     	;# 
  4814  0003                     	;# 
  4815  0004                     	;# 
  4816  0005                     	;# 
  4817  0006                     	;# 
  4818  0007                     	;# 
  4819  0008                     	;# 
  4820  0009                     	;# 
  4821  000A                     	;# 
  4822  000B                     	;# 
  4823  000C                     	;# 
  4824  000D                     	;# 
  4825  000E                     	;# 
  4826  000F                     	;# 
  4827  0010                     	;# 
  4828  0011                     	;# 
  4829  0012                     	;# 
  4830  0013                     	;# 
  4831  0014                     	;# 
  4832  0015                     	;# 
  4833  0016                     	;# 
  4834  0016                     	;# 
  4835  0017                     	;# 
  4836  0018                     	;# 
  4837  0019                     	;# 
  4838  001A                     	;# 
  4839  001B                     	;# 
  4840  001C                     	;# 
  4841  001E                     	;# 
  4842  001F                     	;# 
  4843  008C                     	;# 
  4844  008D                     	;# 
  4845  008E                     	;# 
  4846  008F                     	;# 
  4847  0090                     	;# 
  4848  0091                     	;# 
  4849  0092                     	;# 
  4850  0093                     	;# 
  4851  0094                     	;# 
  4852  0095                     	;# 
  4853  0096                     	;# 
  4854  0097                     	;# 
  4855  0098                     	;# 
  4856  0099                     	;# 
  4857  009A                     	;# 
  4858  009B                     	;# 
  4859  009B                     	;# 
  4860  009C                     	;# 
  4861  009D                     	;# 
  4862  009E                     	;# 
  4863  010C                     	;# 
  4864  010D                     	;# 
  4865  010E                     	;# 
  4866  010F                     	;# 
  4867  0110                     	;# 
  4868  0111                     	;# 
  4869  0112                     	;# 
  4870  0113                     	;# 
  4871  0114                     	;# 
  4872  0115                     	;# 
  4873  0116                     	;# 
  4874  0117                     	;# 
  4875  0118                     	;# 
  4876  0119                     	;# 
  4877  011A                     	;# 
  4878  011B                     	;# 
  4879  011D                     	;# 
  4880  011E                     	;# 
  4881  011F                     	;# 
  4882  018C                     	;# 
  4883  0190                     	;# 
  4884  0191                     	;# 
  4885  0191                     	;# 
  4886  0192                     	;# 
  4887  0193                     	;# 
  4888  0193                     	;# 
  4889  0193                     	;# 
  4890  0194                     	;# 
  4891  0195                     	;# 
  4892  0196                     	;# 
  4893  0199                     	;# 
  4894  0199                     	;# 
  4895  019A                     	;# 
  4896  019A                     	;# 
  4897  019B                     	;# 
  4898  019B                     	;# 
  4899  019B                     	;# 
  4900  019B                     	;# 
  4901  019C                     	;# 
  4902  019C                     	;# 
  4903  019D                     	;# 
  4904  019D                     	;# 
  4905  019E                     	;# 
  4906  019E                     	;# 
  4907  019F                     	;# 
  4908  019F                     	;# 
  4909  020D                     	;# 
  4910  0211                     	;# 
  4911  0211                     	;# 
  4912  0212                     	;# 
  4913  0212                     	;# 
  4914  0213                     	;# 
  4915  0213                     	;# 
  4916  0214                     	;# 
  4917  0214                     	;# 
  4918  0215                     	;# 
  4919  0215                     	;# 
  4920  0215                     	;# 
  4921  0216                     	;# 
  4922  0216                     	;# 
  4923  0217                     	;# 
  4924  0217                     	;# 
  4925  0219                     	;# 
  4926  021A                     	;# 
  4927  021B                     	;# 
  4928  021C                     	;# 
  4929  021D                     	;# 
  4930  021E                     	;# 
  4931  021F                     	;# 
  4932  028C                     	;# 
  4933  028D                     	;# 
  4934  0291                     	;# 
  4935  0291                     	;# 
  4936  0292                     	;# 
  4937  0293                     	;# 
  4938  0294                     	;# 
  4939  0295                     	;# 
  4940  0295                     	;# 
  4941  0296                     	;# 
  4942  0298                     	;# 
  4943  0298                     	;# 
  4944  0299                     	;# 
  4945  029A                     	;# 
  4946  029B                     	;# 
  4947  029C                     	;# 
  4948  029C                     	;# 
  4949  029D                     	;# 
  4950  029E                     	;# 
  4951  029F                     	;# 
  4952  030C                     	;# 
  4953  030D                     	;# 
  4954  0311                     	;# 
  4955  0311                     	;# 
  4956  0312                     	;# 
  4957  0313                     	;# 
  4958  0314                     	;# 
  4959  0315                     	;# 
  4960  0315                     	;# 
  4961  0316                     	;# 
  4962  0318                     	;# 
  4963  0318                     	;# 
  4964  0319                     	;# 
  4965  031A                     	;# 
  4966  031C                     	;# 
  4967  031C                     	;# 
  4968  031D                     	;# 
  4969  031E                     	;# 
  4970  038C                     	;# 
  4971  038D                     	;# 
  4972  0394                     	;# 
  4973  0395                     	;# 
  4974  0396                     	;# 
  4975  040C                     	;# 
  4976  040D                     	;# 
  4977  0415                     	;# 
  4978  0416                     	;# 
  4979  0417                     	;# 
  4980  041C                     	;# 
  4981  041D                     	;# 
  4982  041E                     	;# 
  4983  048D                     	;# 
  4984  0491                     	;# 
  4985  0492                     	;# 
  4986  0493                     	;# 
  4987  0493                     	;# 
  4988  0494                     	;# 
  4989  0495                     	;# 
  4990  0496                     	;# 
  4991  0497                     	;# 
  4992  0791                     	;# 
  4993  0792                     	;# 
  4994  0793                     	;# 
  4995  0794                     	;# 
  4996  0795                     	;# 
  4997  0798                     	;# 
  4998  0799                     	;# 
  4999  079A                     	;# 
  5000  079B                     	;# 
  5001  079C                     	;# 
  5002  079D                     	;# 
  5003  07A0                     	;# 
  5004  07A1                     	;# 
  5005  07A2                     	;# 
  5006  07A3                     	;# 
  5007  07A4                     	;# 
  5008  07A5                     	;# 
  5009  07A6                     	;# 
  5010  07A7                     	;# 
  5011  07A8                     	;# 
  5012  07A9                     	;# 
  5013  07AA                     	;# 
  5014  07AB                     	;# 
  5015  07AC                     	;# 
  5016  07AD                     	;# 
  5017  07AE                     	;# 
  5018  07AF                     	;# 
  5019  07B0                     	;# 
  5020  07B1                     	;# 
  5021  07B2                     	;# 
  5022  07B3                     	;# 
  5023  07B4                     	;# 
  5024  07B5                     	;# 
  5025  07B6                     	;# 
  5026  07B7                     	;# 
  5027  0FE4                     	;# 
  5028  0FE5                     	;# 
  5029  0FE6                     	;# 
  5030  0FE7                     	;# 
  5031  0FE8                     	;# 
  5032  0FE9                     	;# 
  5033  0FEA                     	;# 
  5034  0FEB                     	;# 
  5035  0FED                     	;# 
  5036  0FEE                     	;# 
  5037  0FEF                     	;# 
  5038  0000                     	;# 
  5039  0001                     	;# 
  5040  0002                     	;# 
  5041  0003                     	;# 
  5042  0004                     	;# 
  5043  0005                     	;# 
  5044  0006                     	;# 
  5045  0007                     	;# 
  5046  0008                     	;# 
  5047  0009                     	;# 
  5048  000A                     	;# 
  5049  000B                     	;# 
  5050  000C                     	;# 
  5051  000D                     	;# 
  5052  000E                     	;# 
  5053  000F                     	;# 
  5054  0010                     	;# 
  5055  0011                     	;# 
  5056  0012                     	;# 
  5057  0013                     	;# 
  5058  0014                     	;# 
  5059  0015                     	;# 
  5060  0016                     	;# 
  5061  0016                     	;# 
  5062  0017                     	;# 
  5063  0018                     	;# 
  5064  0019                     	;# 
  5065  001A                     	;# 
  5066  001B                     	;# 
  5067  001C                     	;# 
  5068  001E                     	;# 
  5069  001F                     	;# 
  5070  008C                     	;# 
  5071  008D                     	;# 
  5072  008E                     	;# 
  5073  008F                     	;# 
  5074  0090                     	;# 
  5075  0091                     	;# 
  5076  0092                     	;# 
  5077  0093                     	;# 
  5078  0094                     	;# 
  5079  0095                     	;# 
  5080  0096                     	;# 
  5081  0097                     	;# 
  5082  0098                     	;# 
  5083  0099                     	;# 
  5084  009A                     	;# 
  5085  009B                     	;# 
  5086  009B                     	;# 
  5087  009C                     	;# 
  5088  009D                     	;# 
  5089  009E                     	;# 
  5090  010C                     	;# 
  5091  010D                     	;# 
  5092  010E                     	;# 
  5093  010F                     	;# 
  5094  0110                     	;# 
  5095  0111                     	;# 
  5096  0112                     	;# 
  5097  0113                     	;# 
  5098  0114                     	;# 
  5099  0115                     	;# 
  5100  0116                     	;# 
  5101  0117                     	;# 
  5102  0118                     	;# 
  5103  0119                     	;# 
  5104  011A                     	;# 
  5105  011B                     	;# 
  5106  011D                     	;# 
  5107  011E                     	;# 
  5108  011F                     	;# 
  5109  018C                     	;# 
  5110  0190                     	;# 
  5111  0191                     	;# 
  5112  0191                     	;# 
  5113  0192                     	;# 
  5114  0193                     	;# 
  5115  0193                     	;# 
  5116  0193                     	;# 
  5117  0194                     	;# 
  5118  0195                     	;# 
  5119  0196                     	;# 
  5120  0199                     	;# 
  5121  0199                     	;# 
  5122  019A                     	;# 
  5123  019A                     	;# 
  5124  019B                     	;# 
  5125  019B                     	;# 
  5126  019B                     	;# 
  5127  019B                     	;# 
  5128  019C                     	;# 
  5129  019C                     	;# 
  5130  019D                     	;# 
  5131  019D                     	;# 
  5132  019E                     	;# 
  5133  019E                     	;# 
  5134  019F                     	;# 
  5135  019F                     	;# 
  5136  020D                     	;# 
  5137  0211                     	;# 
  5138  0211                     	;# 
  5139  0212                     	;# 
  5140  0212                     	;# 
  5141  0213                     	;# 
  5142  0213                     	;# 
  5143  0214                     	;# 
  5144  0214                     	;# 
  5145  0215                     	;# 
  5146  0215                     	;# 
  5147  0215                     	;# 
  5148  0216                     	;# 
  5149  0216                     	;# 
  5150  0217                     	;# 
  5151  0217                     	;# 
  5152  0219                     	;# 
  5153  021A                     	;# 
  5154  021B                     	;# 
  5155  021C                     	;# 
  5156  021D                     	;# 
  5157  021E                     	;# 
  5158  021F                     	;# 
  5159  028C                     	;# 
  5160  028D                     	;# 
  5161  0291                     	;# 
  5162  0291                     	;# 
  5163  0292                     	;# 
  5164  0293                     	;# 
  5165  0294                     	;# 
  5166  0295                     	;# 
  5167  0295                     	;# 
  5168  0296                     	;# 
  5169  0298                     	;# 
  5170  0298                     	;# 
  5171  0299                     	;# 
  5172  029A                     	;# 
  5173  029B                     	;# 
  5174  029C                     	;# 
  5175  029C                     	;# 
  5176  029D                     	;# 
  5177  029E                     	;# 
  5178  029F                     	;# 
  5179  030C                     	;# 
  5180  030D                     	;# 
  5181  0311                     	;# 
  5182  0311                     	;# 
  5183  0312                     	;# 
  5184  0313                     	;# 
  5185  0314                     	;# 
  5186  0315                     	;# 
  5187  0315                     	;# 
  5188  0316                     	;# 
  5189  0318                     	;# 
  5190  0318                     	;# 
  5191  0319                     	;# 
  5192  031A                     	;# 
  5193  031C                     	;# 
  5194  031C                     	;# 
  5195  031D                     	;# 
  5196  031E                     	;# 
  5197  038C                     	;# 
  5198  038D                     	;# 
  5199  0394                     	;# 
  5200  0395                     	;# 
  5201  0396                     	;# 
  5202  040C                     	;# 
  5203  040D                     	;# 
  5204  0415                     	;# 
  5205  0416                     	;# 
  5206  0417                     	;# 
  5207  041C                     	;# 
  5208  041D                     	;# 
  5209  041E                     	;# 
  5210  048D                     	;# 
  5211  0491                     	;# 
  5212  0492                     	;# 
  5213  0493                     	;# 
  5214  0493                     	;# 
  5215  0494                     	;# 
  5216  0495                     	;# 
  5217  0496                     	;# 
  5218  0497                     	;# 
  5219  0791                     	;# 
  5220  0792                     	;# 
  5221  0793                     	;# 
  5222  0794                     	;# 
  5223  0795                     	;# 
  5224  0798                     	;# 
  5225  0799                     	;# 
  5226  079A                     	;# 
  5227  079B                     	;# 
  5228  079C                     	;# 
  5229  079D                     	;# 
  5230  07A0                     	;# 
  5231  07A1                     	;# 
  5232  07A2                     	;# 
  5233  07A3                     	;# 
  5234  07A4                     	;# 
  5235  07A5                     	;# 
  5236  07A6                     	;# 
  5237  07A7                     	;# 
  5238  07A8                     	;# 
  5239  07A9                     	;# 
  5240  07AA                     	;# 
  5241  07AB                     	;# 
  5242  07AC                     	;# 
  5243  07AD                     	;# 
  5244  07AE                     	;# 
  5245  07AF                     	;# 
  5246  07B0                     	;# 
  5247  07B1                     	;# 
  5248  07B2                     	;# 
  5249  07B3                     	;# 
  5250  07B4                     	;# 
  5251  07B5                     	;# 
  5252  07B6                     	;# 
  5253  07B7                     	;# 
  5254  0FE4                     	;# 
  5255  0FE5                     	;# 
  5256  0FE6                     	;# 
  5257  0FE7                     	;# 
  5258  0FE8                     	;# 
  5259  0FE9                     	;# 
  5260  0FEA                     	;# 
  5261  0FEB                     	;# 
  5262  0FED                     	;# 
  5263  0FEE                     	;# 
  5264  0FEF                     	;# 
  5265  0000                     	;# 
  5266  0001                     	;# 
  5267  0002                     	;# 
  5268  0003                     	;# 
  5269  0004                     	;# 
  5270  0005                     	;# 
  5271  0006                     	;# 
  5272  0007                     	;# 
  5273  0008                     	;# 
  5274  0009                     	;# 
  5275  000A                     	;# 
  5276  000B                     	;# 
  5277  000C                     	;# 
  5278  000D                     	;# 
  5279  000E                     	;# 
  5280  000F                     	;# 
  5281  0010                     	;# 
  5282  0011                     	;# 
  5283  0012                     	;# 
  5284  0013                     	;# 
  5285  0014                     	;# 
  5286  0015                     	;# 
  5287  0016                     	;# 
  5288  0016                     	;# 
  5289  0017                     	;# 
  5290  0018                     	;# 
  5291  0019                     	;# 
  5292  001A                     	;# 
  5293  001B                     	;# 
  5294  001C                     	;# 
  5295  001E                     	;# 
  5296  001F                     	;# 
  5297  008C                     	;# 
  5298  008D                     	;# 
  5299  008E                     	;# 
  5300  008F                     	;# 
  5301  0090                     	;# 
  5302  0091                     	;# 
  5303  0092                     	;# 
  5304  0093                     	;# 
  5305  0094                     	;# 
  5306  0095                     	;# 
  5307  0096                     	;# 
  5308  0097                     	;# 
  5309  0098                     	;# 
  5310  0099                     	;# 
  5311  009A                     	;# 
  5312  009B                     	;# 
  5313  009B                     	;# 
  5314  009C                     	;# 
  5315  009D                     	;# 
  5316  009E                     	;# 
  5317  010C                     	;# 
  5318  010D                     	;# 
  5319  010E                     	;# 
  5320  010F                     	;# 
  5321  0110                     	;# 
  5322  0111                     	;# 
  5323  0112                     	;# 
  5324  0113                     	;# 
  5325  0114                     	;# 
  5326  0115                     	;# 
  5327  0116                     	;# 
  5328  0117                     	;# 
  5329  0118                     	;# 
  5330  0119                     	;# 
  5331  011A                     	;# 
  5332  011B                     	;# 
  5333  011D                     	;# 
  5334  011E                     	;# 
  5335  011F                     	;# 
  5336  018C                     	;# 
  5337  0190                     	;# 
  5338  0191                     	;# 
  5339  0191                     	;# 
  5340  0192                     	;# 
  5341  0193                     	;# 
  5342  0193                     	;# 
  5343  0193                     	;# 
  5344  0194                     	;# 
  5345  0195                     	;# 
  5346  0196                     	;# 
  5347  0199                     	;# 
  5348  0199                     	;# 
  5349  019A                     	;# 
  5350  019A                     	;# 
  5351  019B                     	;# 
  5352  019B                     	;# 
  5353  019B                     	;# 
  5354  019B                     	;# 
  5355  019C                     	;# 
  5356  019C                     	;# 
  5357  019D                     	;# 
  5358  019D                     	;# 
  5359  019E                     	;# 
  5360  019E                     	;# 
  5361  019F                     	;# 
  5362  019F                     	;# 
  5363  020D                     	;# 
  5364  0211                     	;# 
  5365  0211                     	;# 
  5366  0212                     	;# 
  5367  0212                     	;# 
  5368  0213                     	;# 
  5369  0213                     	;# 
  5370  0214                     	;# 
  5371  0214                     	;# 
  5372  0215                     	;# 
  5373  0215                     	;# 
  5374  0215                     	;# 
  5375  0216                     	;# 
  5376  0216                     	;# 
  5377  0217                     	;# 
  5378  0217                     	;# 
  5379  0219                     	;# 
  5380  021A                     	;# 
  5381  021B                     	;# 
  5382  021C                     	;# 
  5383  021D                     	;# 
  5384  021E                     	;# 
  5385  021F                     	;# 
  5386  028C                     	;# 
  5387  028D                     	;# 
  5388  0291                     	;# 
  5389  0291                     	;# 
  5390  0292                     	;# 
  5391  0293                     	;# 
  5392  0294                     	;# 
  5393  0295                     	;# 
  5394  0295                     	;# 
  5395  0296                     	;# 
  5396  0298                     	;# 
  5397  0298                     	;# 
  5398  0299                     	;# 
  5399  029A                     	;# 
  5400  029B                     	;# 
  5401  029C                     	;# 
  5402  029C                     	;# 
  5403  029D                     	;# 
  5404  029E                     	;# 
  5405  029F                     	;# 
  5406  030C                     	;# 
  5407  030D                     	;# 
  5408  0311                     	;# 
  5409  0311                     	;# 
  5410  0312                     	;# 
  5411  0313                     	;# 
  5412  0314                     	;# 
  5413  0315                     	;# 
  5414  0315                     	;# 
  5415  0316                     	;# 
  5416  0318                     	;# 
  5417  0318                     	;# 
  5418  0319                     	;# 
  5419  031A                     	;# 
  5420  031C                     	;# 
  5421  031C                     	;# 
  5422  031D                     	;# 
  5423  031E                     	;# 
  5424  038C                     	;# 
  5425  038D                     	;# 
  5426  0394                     	;# 
  5427  0395                     	;# 
  5428  0396                     	;# 
  5429  040C                     	;# 
  5430  040D                     	;# 
  5431  0415                     	;# 
  5432  0416                     	;# 
  5433  0417                     	;# 
  5434  041C                     	;# 
  5435  041D                     	;# 
  5436  041E                     	;# 
  5437  048D                     	;# 
  5438  0491                     	;# 
  5439  0492                     	;# 
  5440  0493                     	;# 
  5441  0493                     	;# 
  5442  0494                     	;# 
  5443  0495                     	;# 
  5444  0496                     	;# 
  5445  0497                     	;# 
  5446  0791                     	;# 
  5447  0792                     	;# 
  5448  0793                     	;# 
  5449  0794                     	;# 
  5450  0795                     	;# 
  5451  0798                     	;# 
  5452  0799                     	;# 
  5453  079A                     	;# 
  5454  079B                     	;# 
  5455  079C                     	;# 
  5456  079D                     	;# 
  5457  07A0                     	;# 
  5458  07A1                     	;# 
  5459  07A2                     	;# 
  5460  07A3                     	;# 
  5461  07A4                     	;# 
  5462  07A5                     	;# 
  5463  07A6                     	;# 
  5464  07A7                     	;# 
  5465  07A8                     	;# 
  5466  07A9                     	;# 
  5467  07AA                     	;# 
  5468  07AB                     	;# 
  5469  07AC                     	;# 
  5470  07AD                     	;# 
  5471  07AE                     	;# 
  5472  07AF                     	;# 
  5473  07B0                     	;# 
  5474  07B1                     	;# 
  5475  07B2                     	;# 
  5476  07B3                     	;# 
  5477  07B4                     	;# 
  5478  07B5                     	;# 
  5479  07B6                     	;# 
  5480  07B7                     	;# 
  5481  0FE4                     	;# 
  5482  0FE5                     	;# 
  5483  0FE6                     	;# 
  5484  0FE7                     	;# 
  5485  0FE8                     	;# 
  5486  0FE9                     	;# 
  5487  0FEA                     	;# 
  5488  0FEB                     	;# 
  5489  0FED                     	;# 
  5490  0FEE                     	;# 
  5491  0FEF                     	;# 
  5492  0000                     	;# 
  5493  0001                     	;# 
  5494  0002                     	;# 
  5495  0003                     	;# 
  5496  0004                     	;# 
  5497  0005                     	;# 
  5498  0006                     	;# 
  5499  0007                     	;# 
  5500  0008                     	;# 
  5501  0009                     	;# 
  5502  000A                     	;# 
  5503  000B                     	;# 
  5504  000C                     	;# 
  5505  000D                     	;# 
  5506  000E                     	;# 
  5507  000F                     	;# 
  5508  0010                     	;# 
  5509  0011                     	;# 
  5510  0012                     	;# 
  5511  0013                     	;# 
  5512  0014                     	;# 
  5513  0015                     	;# 
  5514  0016                     	;# 
  5515  0016                     	;# 
  5516  0017                     	;# 
  5517  0018                     	;# 
  5518  0019                     	;# 
  5519  001A                     	;# 
  5520  001B                     	;# 
  5521  001C                     	;# 
  5522  001E                     	;# 
  5523  001F                     	;# 
  5524  008C                     	;# 
  5525  008D                     	;# 
  5526  008E                     	;# 
  5527  008F                     	;# 
  5528  0090                     	;# 
  5529  0091                     	;# 
  5530  0092                     	;# 
  5531  0093                     	;# 
  5532  0094                     	;# 
  5533  0095                     	;# 
  5534  0096                     	;# 
  5535  0097                     	;# 
  5536  0098                     	;# 
  5537  0099                     	;# 
  5538  009A                     	;# 
  5539  009B                     	;# 
  5540  009B                     	;# 
  5541  009C                     	;# 
  5542  009D                     	;# 
  5543  009E                     	;# 
  5544  010C                     	;# 
  5545  010D                     	;# 
  5546  010E                     	;# 
  5547  010F                     	;# 
  5548  0110                     	;# 
  5549  0111                     	;# 
  5550  0112                     	;# 
  5551  0113                     	;# 
  5552  0114                     	;# 
  5553  0115                     	;# 
  5554  0116                     	;# 
  5555  0117                     	;# 
  5556  0118                     	;# 
  5557  0119                     	;# 
  5558  011A                     	;# 
  5559  011B                     	;# 
  5560  011D                     	;# 
  5561  011E                     	;# 
  5562  011F                     	;# 
  5563  018C                     	;# 
  5564  0190                     	;# 
  5565  0191                     	;# 
  5566  0191                     	;# 
  5567  0192                     	;# 
  5568  0193                     	;# 
  5569  0193                     	;# 
  5570  0193                     	;# 
  5571  0194                     	;# 
  5572  0195                     	;# 
  5573  0196                     	;# 
  5574  0199                     	;# 
  5575  0199                     	;# 
  5576  019A                     	;# 
  5577  019A                     	;# 
  5578  019B                     	;# 
  5579  019B                     	;# 
  5580  019B                     	;# 
  5581  019B                     	;# 
  5582  019C                     	;# 
  5583  019C                     	;# 
  5584  019D                     	;# 
  5585  019D                     	;# 
  5586  019E                     	;# 
  5587  019E                     	;# 
  5588  019F                     	;# 
  5589  019F                     	;# 
  5590  020D                     	;# 
  5591  0211                     	;# 
  5592  0211                     	;# 
  5593  0212                     	;# 
  5594  0212                     	;# 
  5595  0213                     	;# 
  5596  0213                     	;# 
  5597  0214                     	;# 
  5598  0214                     	;# 
  5599  0215                     	;# 
  5600  0215                     	;# 
  5601  0215                     	;# 
  5602  0216                     	;# 
  5603  0216                     	;# 
  5604  0217                     	;# 
  5605  0217                     	;# 
  5606  0219                     	;# 
  5607  021A                     	;# 
  5608  021B                     	;# 
  5609  021C                     	;# 
  5610  021D                     	;# 
  5611  021E                     	;# 
  5612  021F                     	;# 
  5613  028C                     	;# 
  5614  028D                     	;# 
  5615  0291                     	;# 
  5616  0291                     	;# 
  5617  0292                     	;# 
  5618  0293                     	;# 
  5619  0294                     	;# 
  5620  0295                     	;# 
  5621  0295                     	;# 
  5622  0296                     	;# 
  5623  0298                     	;# 
  5624  0298                     	;# 
  5625  0299                     	;# 
  5626  029A                     	;# 
  5627  029B                     	;# 
  5628  029C                     	;# 
  5629  029C                     	;# 
  5630  029D                     	;# 
  5631  029E                     	;# 
  5632  029F                     	;# 
  5633  030C                     	;# 
  5634  030D                     	;# 
  5635  0311                     	;# 
  5636  0311                     	;# 
  5637  0312                     	;# 
  5638  0313                     	;# 
  5639  0314                     	;# 
  5640  0315                     	;# 
  5641  0315                     	;# 
  5642  0316                     	;# 
  5643  0318                     	;# 
  5644  0318                     	;# 
  5645  0319                     	;# 
  5646  031A                     	;# 
  5647  031C                     	;# 
  5648  031C                     	;# 
  5649  031D                     	;# 
  5650  031E                     	;# 
  5651  038C                     	;# 
  5652  038D                     	;# 
  5653  0394                     	;# 
  5654  0395                     	;# 
  5655  0396                     	;# 
  5656  040C                     	;# 
  5657  040D                     	;# 
  5658  0415                     	;# 
  5659  0416                     	;# 
  5660  0417                     	;# 
  5661  041C                     	;# 
  5662  041D                     	;# 
  5663  041E                     	;# 
  5664  048D                     	;# 
  5665  0491                     	;# 
  5666  0492                     	;# 
  5667  0493                     	;# 
  5668  0493                     	;# 
  5669  0494                     	;# 
  5670  0495                     	;# 
  5671  0496                     	;# 
  5672  0497                     	;# 
  5673  0791                     	;# 
  5674  0792                     	;# 
  5675  0793                     	;# 
  5676  0794                     	;# 
  5677  0795                     	;# 
  5678  0798                     	;# 
  5679  0799                     	;# 
  5680  079A                     	;# 
  5681  079B                     	;# 
  5682  079C                     	;# 
  5683  079D                     	;# 
  5684  07A0                     	;# 
  5685  07A1                     	;# 
  5686  07A2                     	;# 
  5687  07A3                     	;# 
  5688  07A4                     	;# 
  5689  07A5                     	;# 
  5690  07A6                     	;# 
  5691  07A7                     	;# 
  5692  07A8                     	;# 
  5693  07A9                     	;# 
  5694  07AA                     	;# 
  5695  07AB                     	;# 
  5696  07AC                     	;# 
  5697  07AD                     	;# 
  5698  07AE                     	;# 
  5699  07AF                     	;# 
  5700  07B0                     	;# 
  5701  07B1                     	;# 
  5702  07B2                     	;# 
  5703  07B3                     	;# 
  5704  07B4                     	;# 
  5705  07B5                     	;# 
  5706  07B6                     	;# 
  5707  07B7                     	;# 
  5708  0FE4                     	;# 
  5709  0FE5                     	;# 
  5710  0FE6                     	;# 
  5711  0FE7                     	;# 
  5712  0FE8                     	;# 
  5713  0FE9                     	;# 
  5714  0FEA                     	;# 
  5715  0FEB                     	;# 
  5716  0FED                     	;# 
  5717  0FEE                     	;# 
  5718  0FEF                     	;# 
  5719  0000                     	;# 
  5720  0001                     	;# 
  5721  0002                     	;# 
  5722  0003                     	;# 
  5723  0004                     	;# 
  5724  0005                     	;# 
  5725  0006                     	;# 
  5726  0007                     	;# 
  5727  0008                     	;# 
  5728  0009                     	;# 
  5729  000A                     	;# 
  5730  000B                     	;# 
  5731  000C                     	;# 
  5732  000D                     	;# 
  5733  000E                     	;# 
  5734  000F                     	;# 
  5735  0010                     	;# 
  5736  0011                     	;# 
  5737  0012                     	;# 
  5738  0013                     	;# 
  5739  0014                     	;# 
  5740  0015                     	;# 
  5741  0016                     	;# 
  5742  0016                     	;# 
  5743  0017                     	;# 
  5744  0018                     	;# 
  5745  0019                     	;# 
  5746  001A                     	;# 
  5747  001B                     	;# 
  5748  001C                     	;# 
  5749  001E                     	;# 
  5750  001F                     	;# 
  5751  008C                     	;# 
  5752  008D                     	;# 
  5753  008E                     	;# 
  5754  008F                     	;# 
  5755  0090                     	;# 
  5756  0091                     	;# 
  5757  0092                     	;# 
  5758  0093                     	;# 
  5759  0094                     	;# 
  5760  0095                     	;# 
  5761  0096                     	;# 
  5762  0097                     	;# 
  5763  0098                     	;# 
  5764  0099                     	;# 
  5765  009A                     	;# 
  5766  009B                     	;# 
  5767  009B                     	;# 
  5768  009C                     	;# 
  5769  009D                     	;# 
  5770  009E                     	;# 
  5771  010C                     	;# 
  5772  010D                     	;# 
  5773  010E                     	;# 
  5774  010F                     	;# 
  5775  0110                     	;# 
  5776  0111                     	;# 
  5777  0112                     	;# 
  5778  0113                     	;# 
  5779  0114                     	;# 
  5780  0115                     	;# 
  5781  0116                     	;# 
  5782  0117                     	;# 
  5783  0118                     	;# 
  5784  0119                     	;# 
  5785  011A                     	;# 
  5786  011B                     	;# 
  5787  011D                     	;# 
  5788  011E                     	;# 
  5789  011F                     	;# 
  5790  018C                     	;# 
  5791  0190                     	;# 
  5792  0191                     	;# 
  5793  0191                     	;# 
  5794  0192                     	;# 
  5795  0193                     	;# 
  5796  0193                     	;# 
  5797  0193                     	;# 
  5798  0194                     	;# 
  5799  0195                     	;# 
  5800  0196                     	;# 
  5801  0199                     	;# 
  5802  0199                     	;# 
  5803  019A                     	;# 
  5804  019A                     	;# 
  5805  019B                     	;# 
  5806  019B                     	;# 
  5807  019B                     	;# 
  5808  019B                     	;# 
  5809  019C                     	;# 
  5810  019C                     	;# 
  5811  019D                     	;# 
  5812  019D                     	;# 
  5813  019E                     	;# 
  5814  019E                     	;# 
  5815  019F                     	;# 
  5816  019F                     	;# 
  5817  020D                     	;# 
  5818  0211                     	;# 
  5819  0211                     	;# 
  5820  0212                     	;# 
  5821  0212                     	;# 
  5822  0213                     	;# 
  5823  0213                     	;# 
  5824  0214                     	;# 
  5825  0214                     	;# 
  5826  0215                     	;# 
  5827  0215                     	;# 
  5828  0215                     	;# 
  5829  0216                     	;# 
  5830  0216                     	;# 
  5831  0217                     	;# 
  5832  0217                     	;# 
  5833  0219                     	;# 
  5834  021A                     	;# 
  5835  021B                     	;# 
  5836  021C                     	;# 
  5837  021D                     	;# 
  5838  021E                     	;# 
  5839  021F                     	;# 
  5840  028C                     	;# 
  5841  028D                     	;# 
  5842  0291                     	;# 
  5843  0291                     	;# 
  5844  0292                     	;# 
  5845  0293                     	;# 
  5846  0294                     	;# 
  5847  0295                     	;# 
  5848  0295                     	;# 
  5849  0296                     	;# 
  5850  0298                     	;# 
  5851  0298                     	;# 
  5852  0299                     	;# 
  5853  029A                     	;# 
  5854  029B                     	;# 
  5855  029C                     	;# 
  5856  029C                     	;# 
  5857  029D                     	;# 
  5858  029E                     	;# 
  5859  029F                     	;# 
  5860  030C                     	;# 
  5861  030D                     	;# 
  5862  0311                     	;# 
  5863  0311                     	;# 
  5864  0312                     	;# 
  5865  0313                     	;# 
  5866  0314                     	;# 
  5867  0315                     	;# 
  5868  0315                     	;# 
  5869  0316                     	;# 
  5870  0318                     	;# 
  5871  0318                     	;# 
  5872  0319                     	;# 
  5873  031A                     	;# 
  5874  031C                     	;# 
  5875  031C                     	;# 
  5876  031D                     	;# 
  5877  031E                     	;# 
  5878  038C                     	;# 
  5879  038D                     	;# 
  5880  0394                     	;# 
  5881  0395                     	;# 
  5882  0396                     	;# 
  5883  040C                     	;# 
  5884  040D                     	;# 
  5885  0415                     	;# 
  5886  0416                     	;# 
  5887  0417                     	;# 
  5888  041C                     	;# 
  5889  041D                     	;# 
  5890  041E                     	;# 
  5891  048D                     	;# 
  5892  0491                     	;# 
  5893  0492                     	;# 
  5894  0493                     	;# 
  5895  0493                     	;# 
  5896  0494                     	;# 
  5897  0495                     	;# 
  5898  0496                     	;# 
  5899  0497                     	;# 
  5900  0791                     	;# 
  5901  0792                     	;# 
  5902  0793                     	;# 
  5903  0794                     	;# 
  5904  0795                     	;# 
  5905  0798                     	;# 
  5906  0799                     	;# 
  5907  079A                     	;# 
  5908  079B                     	;# 
  5909  079C                     	;# 
  5910  079D                     	;# 
  5911  07A0                     	;# 
  5912  07A1                     	;# 
  5913  07A2                     	;# 
  5914  07A3                     	;# 
  5915  07A4                     	;# 
  5916  07A5                     	;# 
  5917  07A6                     	;# 
  5918  07A7                     	;# 
  5919  07A8                     	;# 
  5920  07A9                     	;# 
  5921  07AA                     	;# 
  5922  07AB                     	;# 
  5923  07AC                     	;# 
  5924  07AD                     	;# 
  5925  07AE                     	;# 
  5926  07AF                     	;# 
  5927  07B0                     	;# 
  5928  07B1                     	;# 
  5929  07B2                     	;# 
  5930  07B3                     	;# 
  5931  07B4                     	;# 
  5932  07B5                     	;# 
  5933  07B6                     	;# 
  5934  07B7                     	;# 
  5935  0FE4                     	;# 
  5936  0FE5                     	;# 
  5937  0FE6                     	;# 
  5938  0FE7                     	;# 
  5939  0FE8                     	;# 
  5940  0FE9                     	;# 
  5941  0FEA                     	;# 
  5942  0FEB                     	;# 
  5943  0FED                     	;# 
  5944  0FEE                     	;# 
  5945  0FEF                     	;# 
  5946  0000                     	;# 
  5947  0001                     	;# 
  5948  0002                     	;# 
  5949  0003                     	;# 
  5950  0004                     	;# 
  5951  0005                     	;# 
  5952  0006                     	;# 
  5953  0007                     	;# 
  5954  0008                     	;# 
  5955  0009                     	;# 
  5956  000A                     	;# 
  5957  000B                     	;# 
  5958  000C                     	;# 
  5959  000D                     	;# 
  5960  000E                     	;# 
  5961  000F                     	;# 
  5962  0010                     	;# 
  5963  0011                     	;# 
  5964  0012                     	;# 
  5965  0013                     	;# 
  5966  0014                     	;# 
  5967  0015                     	;# 
  5968  0016                     	;# 
  5969  0016                     	;# 
  5970  0017                     	;# 
  5971  0018                     	;# 
  5972  0019                     	;# 
  5973  001A                     	;# 
  5974  001B                     	;# 
  5975  001C                     	;# 
  5976  001E                     	;# 
  5977  001F                     	;# 
  5978  008C                     	;# 
  5979  008D                     	;# 
  5980  008E                     	;# 
  5981  008F                     	;# 
  5982  0090                     	;# 
  5983  0091                     	;# 
  5984  0092                     	;# 
  5985  0093                     	;# 
  5986  0094                     	;# 
  5987  0095                     	;# 
  5988  0096                     	;# 
  5989  0097                     	;# 
  5990  0098                     	;# 
  5991  0099                     	;# 
  5992  009A                     	;# 
  5993  009B                     	;# 
  5994  009B                     	;# 
  5995  009C                     	;# 
  5996  009D                     	;# 
  5997  009E                     	;# 
  5998  010C                     	;# 
  5999  010D                     	;# 
  6000  010E                     	;# 
  6001  010F                     	;# 
  6002  0110                     	;# 
  6003  0111                     	;# 
  6004  0112                     	;# 
  6005  0113                     	;# 
  6006  0114                     	;# 
  6007  0115                     	;# 
  6008  0116                     	;# 
  6009  0117                     	;# 
  6010  0118                     	;# 
  6011  0119                     	;# 
  6012  011A                     	;# 
  6013  011B                     	;# 
  6014  011D                     	;# 
  6015  011E                     	;# 
  6016  011F                     	;# 
  6017  018C                     	;# 
  6018  0190                     	;# 
  6019  0191                     	;# 
  6020  0191                     	;# 
  6021  0192                     	;# 
  6022  0193                     	;# 
  6023  0193                     	;# 
  6024  0193                     	;# 
  6025  0194                     	;# 
  6026  0195                     	;# 
  6027  0196                     	;# 
  6028  0199                     	;# 
  6029  0199                     	;# 
  6030  019A                     	;# 
  6031  019A                     	;# 
  6032  019B                     	;# 
  6033  019B                     	;# 
  6034  019B                     	;# 
  6035  019B                     	;# 
  6036  019C                     	;# 
  6037  019C                     	;# 
  6038  019D                     	;# 
  6039  019D                     	;# 
  6040  019E                     	;# 
  6041  019E                     	;# 
  6042  019F                     	;# 
  6043  019F                     	;# 
  6044  020D                     	;# 
  6045  0211                     	;# 
  6046  0211                     	;# 
  6047  0212                     	;# 
  6048  0212                     	;# 
  6049  0213                     	;# 
  6050  0213                     	;# 
  6051  0214                     	;# 
  6052  0214                     	;# 
  6053  0215                     	;# 
  6054  0215                     	;# 
  6055  0215                     	;# 
  6056  0216                     	;# 
  6057  0216                     	;# 
  6058  0217                     	;# 
  6059  0217                     	;# 
  6060  0219                     	;# 
  6061  021A                     	;# 
  6062  021B                     	;# 
  6063  021C                     	;# 
  6064  021D                     	;# 
  6065  021E                     	;# 
  6066  021F                     	;# 
  6067  028C                     	;# 
  6068  028D                     	;# 
  6069  0291                     	;# 
  6070  0291                     	;# 
  6071  0292                     	;# 
  6072  0293                     	;# 
  6073  0294                     	;# 
  6074  0295                     	;# 
  6075  0295                     	;# 
  6076  0296                     	;# 
  6077  0298                     	;# 
  6078  0298                     	;# 
  6079  0299                     	;# 
  6080  029A                     	;# 
  6081  029B                     	;# 
  6082  029C                     	;# 
  6083  029C                     	;# 
  6084  029D                     	;# 
  6085  029E                     	;# 
  6086  029F                     	;# 
  6087  030C                     	;# 
  6088  030D                     	;# 
  6089  0311                     	;# 
  6090  0311                     	;# 
  6091  0312                     	;# 
  6092  0313                     	;# 
  6093  0314                     	;# 
  6094  0315                     	;# 
  6095  0315                     	;# 
  6096  0316                     	;# 
  6097  0318                     	;# 
  6098  0318                     	;# 
  6099  0319                     	;# 
  6100  031A                     	;# 
  6101  031C                     	;# 
  6102  031C                     	;# 
  6103  031D                     	;# 
  6104  031E                     	;# 
  6105  038C                     	;# 
  6106  038D                     	;# 
  6107  0394                     	;# 
  6108  0395                     	;# 
  6109  0396                     	;# 
  6110  040C                     	;# 
  6111  040D                     	;# 
  6112  0415                     	;# 
  6113  0416                     	;# 
  6114  0417                     	;# 
  6115  041C                     	;# 
  6116  041D                     	;# 
  6117  041E                     	;# 
  6118  048D                     	;# 
  6119  0491                     	;# 
  6120  0492                     	;# 
  6121  0493                     	;# 
  6122  0493                     	;# 
  6123  0494                     	;# 
  6124  0495                     	;# 
  6125  0496                     	;# 
  6126  0497                     	;# 
  6127  0791                     	;# 
  6128  0792                     	;# 
  6129  0793                     	;# 
  6130  0794                     	;# 
  6131  0795                     	;# 
  6132  0798                     	;# 
  6133  0799                     	;# 
  6134  079A                     	;# 
  6135  079B                     	;# 
  6136  079C                     	;# 
  6137  079D                     	;# 
  6138  07A0                     	;# 
  6139  07A1                     	;# 
  6140  07A2                     	;# 
  6141  07A3                     	;# 
  6142  07A4                     	;# 
  6143  07A5                     	;# 
  6144  07A6                     	;# 
  6145  07A7                     	;# 
  6146  07A8                     	;# 
  6147  07A9                     	;# 
  6148  07AA                     	;# 
  6149  07AB                     	;# 
  6150  07AC                     	;# 
  6151  07AD                     	;# 
  6152  07AE                     	;# 
  6153  07AF                     	;# 
  6154  07B0                     	;# 
  6155  07B1                     	;# 
  6156  07B2                     	;# 
  6157  07B3                     	;# 
  6158  07B4                     	;# 
  6159  07B5                     	;# 
  6160  07B6                     	;# 
  6161  07B7                     	;# 
  6162  0FE4                     	;# 
  6163  0FE5                     	;# 
  6164  0FE6                     	;# 
  6165  0FE7                     	;# 
  6166  0FE8                     	;# 
  6167  0FE9                     	;# 
  6168  0FEA                     	;# 
  6169  0FEB                     	;# 
  6170  0FED                     	;# 
  6171  0FEE                     	;# 
  6172  0FEF                     	;# 
  6173  0000                     	;# 
  6174  0001                     	;# 
  6175  0002                     	;# 
  6176  0003                     	;# 
  6177  0004                     	;# 
  6178  0005                     	;# 
  6179  0006                     	;# 
  6180  0007                     	;# 
  6181  0008                     	;# 
  6182  0009                     	;# 
  6183  000A                     	;# 
  6184  000B                     	;# 
  6185  000C                     	;# 
  6186  000D                     	;# 
  6187  000E                     	;# 
  6188  000F                     	;# 
  6189  0010                     	;# 
  6190  0011                     	;# 
  6191  0012                     	;# 
  6192  0013                     	;# 
  6193  0014                     	;# 
  6194  0015                     	;# 
  6195  0016                     	;# 
  6196  0016                     	;# 
  6197  0017                     	;# 
  6198  0018                     	;# 
  6199  0019                     	;# 
  6200  001A                     	;# 
  6201  001B                     	;# 
  6202  001C                     	;# 
  6203  001E                     	;# 
  6204  001F                     	;# 
  6205  008C                     	;# 
  6206  008D                     	;# 
  6207  008E                     	;# 
  6208  008F                     	;# 
  6209  0090                     	;# 
  6210  0091                     	;# 
  6211  0092                     	;# 
  6212  0093                     	;# 
  6213  0094                     	;# 
  6214  0095                     	;# 
  6215  0096                     	;# 
  6216  0097                     	;# 
  6217  0098                     	;# 
  6218  0099                     	;# 
  6219  009A                     	;# 
  6220  009B                     	;# 
  6221  009B                     	;# 
  6222  009C                     	;# 
  6223  009D                     	;# 
  6224  009E                     	;# 
  6225  010C                     	;# 
  6226  010D                     	;# 
  6227  010E                     	;# 
  6228  010F                     	;# 
  6229  0110                     	;# 
  6230  0111                     	;# 
  6231  0112                     	;# 
  6232  0113                     	;# 
  6233  0114                     	;# 
  6234  0115                     	;# 
  6235  0116                     	;# 
  6236  0117                     	;# 
  6237  0118                     	;# 
  6238  0119                     	;# 
  6239  011A                     	;# 
  6240  011B                     	;# 
  6241  011D                     	;# 
  6242  011E                     	;# 
  6243  011F                     	;# 
  6244  018C                     	;# 
  6245  0190                     	;# 
  6246  0191                     	;# 
  6247  0191                     	;# 
  6248  0192                     	;# 
  6249  0193                     	;# 
  6250  0193                     	;# 
  6251  0193                     	;# 
  6252  0194                     	;# 
  6253  0195                     	;# 
  6254  0196                     	;# 
  6255  0199                     	;# 
  6256  0199                     	;# 
  6257  019A                     	;# 
  6258  019A                     	;# 
  6259  019B                     	;# 
  6260  019B                     	;# 
  6261  019B                     	;# 
  6262  019B                     	;# 
  6263  019C                     	;# 
  6264  019C                     	;# 
  6265  019D                     	;# 
  6266  019D                     	;# 
  6267  019E                     	;# 
  6268  019E                     	;# 
  6269  019F                     	;# 
  6270  019F                     	;# 
  6271  020D                     	;# 
  6272  0211                     	;# 
  6273  0211                     	;# 
  6274  0212                     	;# 
  6275  0212                     	;# 
  6276  0213                     	;# 
  6277  0213                     	;# 
  6278  0214                     	;# 
  6279  0214                     	;# 
  6280  0215                     	;# 
  6281  0215                     	;# 
  6282  0215                     	;# 
  6283  0216                     	;# 
  6284  0216                     	;# 
  6285  0217                     	;# 
  6286  0217                     	;# 
  6287  0219                     	;# 
  6288  021A                     	;# 
  6289  021B                     	;# 
  6290  021C                     	;# 
  6291  021D                     	;# 
  6292  021E                     	;# 
  6293  021F                     	;# 
  6294  028C                     	;# 
  6295  028D                     	;# 
  6296  0291                     	;# 
  6297  0291                     	;# 
  6298  0292                     	;# 
  6299  0293                     	;# 
  6300  0294                     	;# 
  6301  0295                     	;# 
  6302  0295                     	;# 
  6303  0296                     	;# 
  6304  0298                     	;# 
  6305  0298                     	;# 
  6306  0299                     	;# 
  6307  029A                     	;# 
  6308  029B                     	;# 
  6309  029C                     	;# 
  6310  029C                     	;# 
  6311  029D                     	;# 
  6312  029E                     	;# 
  6313  029F                     	;# 
  6314  030C                     	;# 
  6315  030D                     	;# 
  6316  0311                     	;# 
  6317  0311                     	;# 
  6318  0312                     	;# 
  6319  0313                     	;# 
  6320  0314                     	;# 
  6321  0315                     	;# 
  6322  0315                     	;# 
  6323  0316                     	;# 
  6324  0318                     	;# 
  6325  0318                     	;# 
  6326  0319                     	;# 
  6327  031A                     	;# 
  6328  031C                     	;# 
  6329  031C                     	;# 
  6330  031D                     	;# 
  6331  031E                     	;# 
  6332  038C                     	;# 
  6333  038D                     	;# 
  6334  0394                     	;# 
  6335  0395                     	;# 
  6336  0396                     	;# 
  6337  040C                     	;# 
  6338  040D                     	;# 
  6339  0415                     	;# 
  6340  0416                     	;# 
  6341  0417                     	;# 
  6342  041C                     	;# 
  6343  041D                     	;# 
  6344  041E                     	;# 
  6345  048D                     	;# 
  6346  0491                     	;# 
  6347  0492                     	;# 
  6348  0493                     	;# 
  6349  0493                     	;# 
  6350  0494                     	;# 
  6351  0495                     	;# 
  6352  0496                     	;# 
  6353  0497                     	;# 
  6354  0791                     	;# 
  6355  0792                     	;# 
  6356  0793                     	;# 
  6357  0794                     	;# 
  6358  0795                     	;# 
  6359  0798                     	;# 
  6360  0799                     	;# 
  6361  079A                     	;# 
  6362  079B                     	;# 
  6363  079C                     	;# 
  6364  079D                     	;# 
  6365  07A0                     	;# 
  6366  07A1                     	;# 
  6367  07A2                     	;# 
  6368  07A3                     	;# 
  6369  07A4                     	;# 
  6370  07A5                     	;# 
  6371  07A6                     	;# 
  6372  07A7                     	;# 
  6373  07A8                     	;# 
  6374  07A9                     	;# 
  6375  07AA                     	;# 
  6376  07AB                     	;# 
  6377  07AC                     	;# 
  6378  07AD                     	;# 
  6379  07AE                     	;# 
  6380  07AF                     	;# 
  6381  07B0                     	;# 
  6382  07B1                     	;# 
  6383  07B2                     	;# 
  6384  07B3                     	;# 
  6385  07B4                     	;# 
  6386  07B5                     	;# 
  6387  07B6                     	;# 
  6388  07B7                     	;# 
  6389  0FE4                     	;# 
  6390  0FE5                     	;# 
  6391  0FE6                     	;# 
  6392  0FE7                     	;# 
  6393  0FE8                     	;# 
  6394  0FE9                     	;# 
  6395  0FEA                     	;# 
  6396  0FEB                     	;# 
  6397  0FED                     	;# 
  6398  0FEE                     	;# 
  6399  0FEF                     	;# 
  6400  0000                     	;# 
  6401  0001                     	;# 
  6402  0002                     	;# 
  6403  0003                     	;# 
  6404  0004                     	;# 
  6405  0005                     	;# 
  6406  0006                     	;# 
  6407  0007                     	;# 
  6408  0008                     	;# 
  6409  0009                     	;# 
  6410  000A                     	;# 
  6411  000B                     	;# 
  6412  000C                     	;# 
  6413  000D                     	;# 
  6414  000E                     	;# 
  6415  000F                     	;# 
  6416  0010                     	;# 
  6417  0011                     	;# 
  6418  0012                     	;# 
  6419  0013                     	;# 
  6420  0014                     	;# 
  6421  0015                     	;# 
  6422  0016                     	;# 
  6423  0016                     	;# 
  6424  0017                     	;# 
  6425  0018                     	;# 
  6426  0019                     	;# 
  6427  001A                     	;# 
  6428  001B                     	;# 
  6429  001C                     	;# 
  6430  001E                     	;# 
  6431  001F                     	;# 
  6432  008C                     	;# 
  6433  008D                     	;# 
  6434  008E                     	;# 
  6435  008F                     	;# 
  6436  0090                     	;# 
  6437  0091                     	;# 
  6438  0092                     	;# 
  6439  0093                     	;# 
  6440  0094                     	;# 
  6441  0095                     	;# 
  6442  0096                     	;# 
  6443  0097                     	;# 
  6444  0098                     	;# 
  6445  0099                     	;# 
  6446  009A                     	;# 
  6447  009B                     	;# 
  6448  009B                     	;# 
  6449  009C                     	;# 
  6450  009D                     	;# 
  6451  009E                     	;# 
  6452  010C                     	;# 
  6453  010D                     	;# 
  6454  010E                     	;# 
  6455  010F                     	;# 
  6456  0110                     	;# 
  6457  0111                     	;# 
  6458  0112                     	;# 
  6459  0113                     	;# 
  6460  0114                     	;# 
  6461  0115                     	;# 
  6462  0116                     	;# 
  6463  0117                     	;# 
  6464  0118                     	;# 
  6465  0119                     	;# 
  6466  011A                     	;# 
  6467  011B                     	;# 
  6468  011D                     	;# 
  6469  011E                     	;# 
  6470  011F                     	;# 
  6471  018C                     	;# 
  6472  0190                     	;# 
  6473  0191                     	;# 
  6474  0191                     	;# 
  6475  0192                     	;# 
  6476  0193                     	;# 
  6477  0193                     	;# 
  6478  0193                     	;# 
  6479  0194                     	;# 
  6480  0195                     	;# 
  6481  0196                     	;# 
  6482  0199                     	;# 
  6483  0199                     	;# 
  6484  019A                     	;# 
  6485  019A                     	;# 
  6486  019B                     	;# 
  6487  019B                     	;# 
  6488  019B                     	;# 
  6489  019B                     	;# 
  6490  019C                     	;# 
  6491  019C                     	;# 
  6492  019D                     	;# 
  6493  019D                     	;# 
  6494  019E                     	;# 
  6495  019E                     	;# 
  6496  019F                     	;# 
  6497  019F                     	;# 
  6498  020D                     	;# 
  6499  0211                     	;# 
  6500  0211                     	;# 
  6501  0212                     	;# 
  6502  0212                     	;# 
  6503  0213                     	;# 
  6504  0213                     	;# 
  6505  0214                     	;# 
  6506  0214                     	;# 
  6507  0215                     	;# 
  6508  0215                     	;# 
  6509  0215                     	;# 
  6510  0216                     	;# 
  6511  0216                     	;# 
  6512  0217                     	;# 
  6513  0217                     	;# 
  6514  0219                     	;# 
  6515  021A                     	;# 
  6516  021B                     	;# 
  6517  021C                     	;# 
  6518  021D                     	;# 
  6519  021E                     	;# 
  6520  021F                     	;# 
  6521  028C                     	;# 
  6522  028D                     	;# 
  6523  0291                     	;# 
  6524  0291                     	;# 
  6525  0292                     	;# 
  6526  0293                     	;# 
  6527  0294                     	;# 
  6528  0295                     	;# 
  6529  0295                     	;# 
  6530  0296                     	;# 
  6531  0298                     	;# 
  6532  0298                     	;# 
  6533  0299                     	;# 
  6534  029A                     	;# 
  6535  029B                     	;# 
  6536  029C                     	;# 
  6537  029C                     	;# 
  6538  029D                     	;# 
  6539  029E                     	;# 
  6540  029F                     	;# 
  6541  030C                     	;# 
  6542  030D                     	;# 
  6543  0311                     	;# 
  6544  0311                     	;# 
  6545  0312                     	;# 
  6546  0313                     	;# 
  6547  0314                     	;# 
  6548  0315                     	;# 
  6549  0315                     	;# 
  6550  0316                     	;# 
  6551  0318                     	;# 
  6552  0318                     	;# 
  6553  0319                     	;# 
  6554  031A                     	;# 
  6555  031C                     	;# 
  6556  031C                     	;# 
  6557  031D                     	;# 
  6558  031E                     	;# 
  6559  038C                     	;# 
  6560  038D                     	;# 
  6561  0394                     	;# 
  6562  0395                     	;# 
  6563  0396                     	;# 
  6564  040C                     	;# 
  6565  040D                     	;# 
  6566  0415                     	;# 
  6567  0416                     	;# 
  6568  0417                     	;# 
  6569  041C                     	;# 
  6570  041D                     	;# 
  6571  041E                     	;# 
  6572  048D                     	;# 
  6573  0491                     	;# 
  6574  0492                     	;# 
  6575  0493                     	;# 
  6576  0493                     	;# 
  6577  0494                     	;# 
  6578  0495                     	;# 
  6579  0496                     	;# 
  6580  0497                     	;# 
  6581  0791                     	;# 
  6582  0792                     	;# 
  6583  0793                     	;# 
  6584  0794                     	;# 
  6585  0795                     	;# 
  6586  0798                     	;# 
  6587  0799                     	;# 
  6588  079A                     	;# 
  6589  079B                     	;# 
  6590  079C                     	;# 
  6591  079D                     	;# 
  6592  07A0                     	;# 
  6593  07A1                     	;# 
  6594  07A2                     	;# 
  6595  07A3                     	;# 
  6596  07A4                     	;# 
  6597  07A5                     	;# 
  6598  07A6                     	;# 
  6599  07A7                     	;# 
  6600  07A8                     	;# 
  6601  07A9                     	;# 
  6602  07AA                     	;# 
  6603  07AB                     	;# 
  6604  07AC                     	;# 
  6605  07AD                     	;# 
  6606  07AE                     	;# 
  6607  07AF                     	;# 
  6608  07B0                     	;# 
  6609  07B1                     	;# 
  6610  07B2                     	;# 
  6611  07B3                     	;# 
  6612  07B4                     	;# 
  6613  07B5                     	;# 
  6614  07B6                     	;# 
  6615  07B7                     	;# 
  6616  0FE4                     	;# 
  6617  0FE5                     	;# 
  6618  0FE6                     	;# 
  6619  0FE7                     	;# 
  6620  0FE8                     	;# 
  6621  0FE9                     	;# 
  6622  0FEA                     	;# 
  6623  0FEB                     	;# 
  6624  0FED                     	;# 
  6625  0FEE                     	;# 
  6626  0FEF                     	;# 
  6627  0000                     	;# 
  6628  0001                     	;# 
  6629  0002                     	;# 
  6630  0003                     	;# 
  6631  0004                     	;# 
  6632  0005                     	;# 
  6633  0006                     	;# 
  6634  0007                     	;# 
  6635  0008                     	;# 
  6636  0009                     	;# 
  6637  000A                     	;# 
  6638  000B                     	;# 
  6639  000C                     	;# 
  6640  000D                     	;# 
  6641  000E                     	;# 
  6642  000F                     	;# 
  6643  0010                     	;# 
  6644  0011                     	;# 
  6645  0012                     	;# 
  6646  0013                     	;# 
  6647  0014                     	;# 
  6648  0015                     	;# 
  6649  0016                     	;# 
  6650  0016                     	;# 
  6651  0017                     	;# 
  6652  0018                     	;# 
  6653  0019                     	;# 
  6654  001A                     	;# 
  6655  001B                     	;# 
  6656  001C                     	;# 
  6657  001E                     	;# 
  6658  001F                     	;# 
  6659  008C                     	;# 
  6660  008D                     	;# 
  6661  008E                     	;# 
  6662  008F                     	;# 
  6663  0090                     	;# 
  6664  0091                     	;# 
  6665  0092                     	;# 
  6666  0093                     	;# 
  6667  0094                     	;# 
  6668  0095                     	;# 
  6669  0096                     	;# 
  6670  0097                     	;# 
  6671  0098                     	;# 
  6672  0099                     	;# 
  6673  009A                     	;# 
  6674  009B                     	;# 
  6675  009B                     	;# 
  6676  009C                     	;# 
  6677  009D                     	;# 
  6678  009E                     	;# 
  6679  010C                     	;# 
  6680  010D                     	;# 
  6681  010E                     	;# 
  6682  010F                     	;# 
  6683  0110                     	;# 
  6684  0111                     	;# 
  6685  0112                     	;# 
  6686  0113                     	;# 
  6687  0114                     	;# 
  6688  0115                     	;# 
  6689  0116                     	;# 
  6690  0117                     	;# 
  6691  0118                     	;# 
  6692  0119                     	;# 
  6693  011A                     	;# 
  6694  011B                     	;# 
  6695  011D                     	;# 
  6696  011E                     	;# 
  6697  011F                     	;# 
  6698  018C                     	;# 
  6699  0190                     	;# 
  6700  0191                     	;# 
  6701  0191                     	;# 
  6702  0192                     	;# 
  6703  0193                     	;# 
  6704  0193                     	;# 
  6705  0193                     	;# 
  6706  0194                     	;# 
  6707  0195                     	;# 
  6708  0196                     	;# 
  6709  0199                     	;# 
  6710  0199                     	;# 
  6711  019A                     	;# 
  6712  019A                     	;# 
  6713  019B                     	;# 
  6714  019B                     	;# 
  6715  019B                     	;# 
  6716  019B                     	;# 
  6717  019C                     	;# 
  6718  019C                     	;# 
  6719  019D                     	;# 
  6720  019D                     	;# 
  6721  019E                     	;# 
  6722  019E                     	;# 
  6723  019F                     	;# 
  6724  019F                     	;# 
  6725  020D                     	;# 
  6726  0211                     	;# 
  6727  0211                     	;# 
  6728  0212                     	;# 
  6729  0212                     	;# 
  6730  0213                     	;# 
  6731  0213                     	;# 
  6732  0214                     	;# 
  6733  0214                     	;# 
  6734  0215                     	;# 
  6735  0215                     	;# 
  6736  0215                     	;# 
  6737  0216                     	;# 
  6738  0216                     	;# 
  6739  0217                     	;# 
  6740  0217                     	;# 
  6741  0219                     	;# 
  6742  021A                     	;# 
  6743  021B                     	;# 
  6744  021C                     	;# 
  6745  021D                     	;# 
  6746  021E                     	;# 
  6747  021F                     	;# 
  6748  028C                     	;# 
  6749  028D                     	;# 
  6750  0291                     	;# 
  6751  0291                     	;# 
  6752  0292                     	;# 
  6753  0293                     	;# 
  6754  0294                     	;# 
  6755  0295                     	;# 
  6756  0295                     	;# 
  6757  0296                     	;# 
  6758  0298                     	;# 
  6759  0298                     	;# 
  6760  0299                     	;# 
  6761  029A                     	;# 
  6762  029B                     	;# 
  6763  029C                     	;# 
  6764  029C                     	;# 
  6765  029D                     	;# 
  6766  029E                     	;# 
  6767  029F                     	;# 
  6768  030C                     	;# 
  6769  030D                     	;# 
  6770  0311                     	;# 
  6771  0311                     	;# 
  6772  0312                     	;# 
  6773  0313                     	;# 
  6774  0314                     	;# 
  6775  0315                     	;# 
  6776  0315                     	;# 
  6777  0316                     	;# 
  6778  0318                     	;# 
  6779  0318                     	;# 
  6780  0319                     	;# 
  6781  031A                     	;# 
  6782  031C                     	;# 
  6783  031C                     	;# 
  6784  031D                     	;# 
  6785  031E                     	;# 
  6786  038C                     	;# 
  6787  038D                     	;# 
  6788  0394                     	;# 
  6789  0395                     	;# 
  6790  0396                     	;# 
  6791  040C                     	;# 
  6792  040D                     	;# 
  6793  0415                     	;# 
  6794  0416                     	;# 
  6795  0417                     	;# 
  6796  041C                     	;# 
  6797  041D                     	;# 
  6798  041E                     	;# 
  6799  048D                     	;# 
  6800  0491                     	;# 
  6801  0492                     	;# 
  6802  0493                     	;# 
  6803  0493                     	;# 
  6804  0494                     	;# 
  6805  0495                     	;# 
  6806  0496                     	;# 
  6807  0497                     	;# 
  6808  0791                     	;# 
  6809  0792                     	;# 
  6810  0793                     	;# 
  6811  0794                     	;# 
  6812  0795                     	;# 
  6813  0798                     	;# 
  6814  0799                     	;# 
  6815  079A                     	;# 
  6816  079B                     	;# 
  6817  079C                     	;# 
  6818  079D                     	;# 
  6819  07A0                     	;# 
  6820  07A1                     	;# 
  6821  07A2                     	;# 
  6822  07A3                     	;# 
  6823  07A4                     	;# 
  6824  07A5                     	;# 
  6825  07A6                     	;# 
  6826  07A7                     	;# 
  6827  07A8                     	;# 
  6828  07A9                     	;# 
  6829  07AA                     	;# 
  6830  07AB                     	;# 
  6831  07AC                     	;# 
  6832  07AD                     	;# 
  6833  07AE                     	;# 
  6834  07AF                     	;# 
  6835  07B0                     	;# 
  6836  07B1                     	;# 
  6837  07B2                     	;# 
  6838  07B3                     	;# 
  6839  07B4                     	;# 
  6840  07B5                     	;# 
  6841  07B6                     	;# 
  6842  07B7                     	;# 
  6843  0FE4                     	;# 
  6844  0FE5                     	;# 
  6845  0FE6                     	;# 
  6846  0FE7                     	;# 
  6847  0FE8                     	;# 
  6848  0FE9                     	;# 
  6849  0FEA                     	;# 
  6850  0FEB                     	;# 
  6851  0FED                     	;# 
  6852  0FEE                     	;# 
  6853  0FEF                     	;# 
  6854  0000                     	;# 
  6855  0001                     	;# 
  6856  0002                     	;# 
  6857  0003                     	;# 
  6858  0004                     	;# 
  6859  0005                     	;# 
  6860  0006                     	;# 
  6861  0007                     	;# 
  6862  0008                     	;# 
  6863  0009                     	;# 
  6864  000A                     	;# 
  6865  000B                     	;# 
  6866  000C                     	;# 
  6867  000D                     	;# 
  6868  000E                     	;# 
  6869  000F                     	;# 
  6870  0010                     	;# 
  6871  0011                     	;# 
  6872  0012                     	;# 
  6873  0013                     	;# 
  6874  0014                     	;# 
  6875  0015                     	;# 
  6876  0016                     	;# 
  6877  0016                     	;# 
  6878  0017                     	;# 
  6879  0018                     	;# 
  6880  0019                     	;# 
  6881  001A                     	;# 
  6882  001B                     	;# 
  6883  001C                     	;# 
  6884  001E                     	;# 
  6885  001F                     	;# 
  6886  008C                     	;# 
  6887  008D                     	;# 
  6888  008E                     	;# 
  6889  008F                     	;# 
  6890  0090                     	;# 
  6891  0091                     	;# 
  6892  0092                     	;# 
  6893  0093                     	;# 
  6894  0094                     	;# 
  6895  0095                     	;# 
  6896  0096                     	;# 
  6897  0097                     	;# 
  6898  0098                     	;# 
  6899  0099                     	;# 
  6900  009A                     	;# 
  6901  009B                     	;# 
  6902  009B                     	;# 
  6903  009C                     	;# 
  6904  009D                     	;# 
  6905  009E                     	;# 
  6906  010C                     	;# 
  6907  010D                     	;# 
  6908  010E                     	;# 
  6909  010F                     	;# 
  6910  0110                     	;# 
  6911  0111                     	;# 
  6912  0112                     	;# 
  6913  0113                     	;# 
  6914  0114                     	;# 
  6915  0115                     	;# 
  6916  0116                     	;# 
  6917  0117                     	;# 
  6918  0118                     	;# 
  6919  0119                     	;# 
  6920  011A                     	;# 
  6921  011B                     	;# 
  6922  011D                     	;# 
  6923  011E                     	;# 
  6924  011F                     	;# 
  6925  018C                     	;# 
  6926  0190                     	;# 
  6927  0191                     	;# 
  6928  0191                     	;# 
  6929  0192                     	;# 
  6930  0193                     	;# 
  6931  0193                     	;# 
  6932  0193                     	;# 
  6933  0194                     	;# 
  6934  0195                     	;# 
  6935  0196                     	;# 
  6936  0199                     	;# 
  6937  0199                     	;# 
  6938  019A                     	;# 
  6939  019A                     	;# 
  6940  019B                     	;# 
  6941  019B                     	;# 
  6942  019B                     	;# 
  6943  019B                     	;# 
  6944  019C                     	;# 
  6945  019C                     	;# 
  6946  019D                     	;# 
  6947  019D                     	;# 
  6948  019E                     	;# 
  6949  019E                     	;# 
  6950  019F                     	;# 
  6951  019F                     	;# 
  6952  020D                     	;# 
  6953  0211                     	;# 
  6954  0211                     	;# 
  6955  0212                     	;# 
  6956  0212                     	;# 
  6957  0213                     	;# 
  6958  0213                     	;# 
  6959  0214                     	;# 
  6960  0214                     	;# 
  6961  0215                     	;# 
  6962  0215                     	;# 
  6963  0215                     	;# 
  6964  0216                     	;# 
  6965  0216                     	;# 
  6966  0217                     	;# 
  6967  0217                     	;# 
  6968  0219                     	;# 
  6969  021A                     	;# 
  6970  021B                     	;# 
  6971  021C                     	;# 
  6972  021D                     	;# 
  6973  021E                     	;# 
  6974  021F                     	;# 
  6975  028C                     	;# 
  6976  028D                     	;# 
  6977  0291                     	;# 
  6978  0291                     	;# 
  6979  0292                     	;# 
  6980  0293                     	;# 
  6981  0294                     	;# 
  6982  0295                     	;# 
  6983  0295                     	;# 
  6984  0296                     	;# 
  6985  0298                     	;# 
  6986  0298                     	;# 
  6987  0299                     	;# 
  6988  029A                     	;# 
  6989  029B                     	;# 
  6990  029C                     	;# 
  6991  029C                     	;# 
  6992  029D                     	;# 
  6993  029E                     	;# 
  6994  029F                     	;# 
  6995  030C                     	;# 
  6996  030D                     	;# 
  6997  0311                     	;# 
  6998  0311                     	;# 
  6999  0312                     	;# 
  7000  0313                     	;# 
  7001  0314                     	;# 
  7002  0315                     	;# 
  7003  0315                     	;# 
  7004  0316                     	;# 
  7005  0318                     	;# 
  7006  0318                     	;# 
  7007  0319                     	;# 
  7008  031A                     	;# 
  7009  031C                     	;# 
  7010  031C                     	;# 
  7011  031D                     	;# 
  7012  031E                     	;# 
  7013  038C                     	;# 
  7014  038D                     	;# 
  7015  0394                     	;# 
  7016  0395                     	;# 
  7017  0396                     	;# 
  7018  040C                     	;# 
  7019  040D                     	;# 
  7020  0415                     	;# 
  7021  0416                     	;# 
  7022  0417                     	;# 
  7023  041C                     	;# 
  7024  041D                     	;# 
  7025  041E                     	;# 
  7026  048D                     	;# 
  7027  0491                     	;# 
  7028  0492                     	;# 
  7029  0493                     	;# 
  7030  0493                     	;# 
  7031  0494                     	;# 
  7032  0495                     	;# 
  7033  0496                     	;# 
  7034  0497                     	;# 
  7035  0791                     	;# 
  7036  0792                     	;# 
  7037  0793                     	;# 
  7038  0794                     	;# 
  7039  0795                     	;# 
  7040  0798                     	;# 
  7041  0799                     	;# 
  7042  079A                     	;# 
  7043  079B                     	;# 
  7044  079C                     	;# 
  7045  079D                     	;# 
  7046  07A0                     	;# 
  7047  07A1                     	;# 
  7048  07A2                     	;# 
  7049  07A3                     	;# 
  7050  07A4                     	;# 
  7051  07A5                     	;# 
  7052  07A6                     	;# 
  7053  07A7                     	;# 
  7054  07A8                     	;# 
  7055  07A9                     	;# 
  7056  07AA                     	;# 
  7057  07AB                     	;# 
  7058  07AC                     	;# 
  7059  07AD                     	;# 
  7060  07AE                     	;# 
  7061  07AF                     	;# 
  7062  07B0                     	;# 
  7063  07B1                     	;# 
  7064  07B2                     	;# 
  7065  07B3                     	;# 
  7066  07B4                     	;# 
  7067  07B5                     	;# 
  7068  07B6                     	;# 
  7069  07B7                     	;# 
  7070  0FE4                     	;# 
  7071  0FE5                     	;# 
  7072  0FE6                     	;# 
  7073  0FE7                     	;# 
  7074  0FE8                     	;# 
  7075  0FE9                     	;# 
  7076  0FEA                     	;# 
  7077  0FEB                     	;# 
  7078  0FED                     	;# 
  7079  0FEE                     	;# 
  7080  0FEF                     	;_comBuffer
  7081                           
  7082 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
  7083  0000                     
  7084 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
  7085  0000                     
  7086                           	psect	idataBANK2
  7087  3AE3                     __pidataBANK2:	
  7088                           
  7089                           ;initializer for _pLcdReg
  7090  3AE3  34A0               	retlw	160
  7091  3AE4  3407               	retlw	7
  7092                           
  7093                           ;initializer for _flowCalibrationPointSingle
  7094  3AE5  3401               	retlw	1
  7095                           
  7096                           ;initializer for _noKeyEventTimeOut
  7097  3AE6  341E               	retlw	30
  7098                           
  7099                           	psect	idataBANK3
  7100  3B03                     __pidataBANK3:	
  7101                           
  7102                           ;initializer for _userKeyB
  7103  3B03  3474               	retlw	116
  7104  3B04  3477               	retlw	119
  7105  3B05  3464               	retlw	100
  7106  3B06  346C               	retlw	108
  7107  3B07  3462               	retlw	98
  7108  3B08  3467               	retlw	103
  7109                           
  7110                           	psect	idataBANK4
  7111  2930                     __pidataBANK4:	
  7112                           
  7113                           ;initializer for _mainSystemData
  7114  2930  34E1               	retlw	225
  7115  2931  3410               	retlw	16
  7116  2932  3400               	retlw	0
  7117  2933  3400               	retlw	0
  7118  2934  3400               	retlw	0
  7119  2935  3400               	retlw	0
  7120  2936  3400               	retlw	0
  7121  2937  3400               	retlw	0
  7122  2938  3441               	retlw	65
  7123  2939  34FF               	retlw	255
  7124  293A  34B8               	retlw	184
  7125  293B  3422               	retlw	34
  7126  293C  3400               	retlw	0
  7127  293D  3400               	retlw	0
  7128  293E  3400               	retlw	0
  7129  293F  3400               	retlw	0
  7130  2940  3400               	retlw	0
  7131  2941  3400               	retlw	0
  7132  2942  3464               	retlw	100
  7133  2943  3400               	retlw	0
  7134  2944  3432               	retlw	50
  7135  2945  3400               	retlw	0
  7136  2946  3428               	retlw	40
  7137  2947  3400               	retlw	0
  7138  2948  3400               	retlw	0
  7139  2949  3400               	retlw	0
  7140  294A  34E8               	retlw	232
  7141  294B  3403               	retlw	3
  7142  294C  3400               	retlw	0
  7143  294D  3400               	retlw	0
  7144  294E  3400               	retlw	0
  7145  294F  3400               	retlw	0
  7146  2950  3400               	retlw	0
  7147  2951  3400               	retlw	0
  7148  2952  3400               	retlw	0
  7149  2953  3400               	retlw	0
  7150  2954  3464               	retlw	100
  7151  2955  3400               	retlw	0
  7152  2956  3400               	retlw	0
  7153  2957  3400               	retlw	0
  7154  2958  34E0               	retlw	224
  7155  2959  3493               	retlw	147
  7156  295A  3404               	retlw	4
  7157  295B  3400               	retlw	0
  7158  295C  3400               	retlw	0
  7159  295D  3400               	retlw	0
  7160  295E  3400               	retlw	0
  7161  295F  3400               	retlw	0
  7162  2960  3400               	retlw	0
  7163  2961  3400               	retlw	0
  7164  2962  3400               	retlw	0
  7165  2963  3400               	retlw	0
  7166  2964  3400               	retlw	0
  7167  2965  3400               	retlw	0
  7168  2966  3400               	retlw	0
  7169  2967  3400               	retlw	0
  7170  2968  3400               	retlw	0
  7171  2969  3405               	retlw	5
  7172  296A  3400               	retlw	0
  7173  296B  3401               	retlw	1
  7174  296C  3400               	retlw	0
  7175  296D  3401               	retlw	1
  7176  296E  3400               	retlw	0
  7177  296F  3401               	retlw	1
  7178  2970  3400               	retlw	0
  7179  2971  3400               	retlw	0
  7180  2972  3400               	retlw	0
  7181  2973  3400               	retlw	0
  7182  2974  3400               	retlw	0
  7183  2975  3400               	retlw	0
  7184  2976  3400               	retlw	0
  7185  2977  3400               	retlw	0
  7186                           
  7187                           	psect	stringtext1
  7188  3800                     __pstringtext1:	
  7189  3800                     _LCDDigitalIndexTable:	
  7190  3800  3430               	retlw	48
  7191  3801  3431               	retlw	49
  7192  3802  3432               	retlw	50
  7193  3803  3433               	retlw	51
  7194  3804  3434               	retlw	52
  7195  3805  3435               	retlw	53
  7196  3806  3436               	retlw	54
  7197  3807  3437               	retlw	55
  7198  3808  3438               	retlw	56
  7199  3809  3439               	retlw	57
  7200  380A  3461               	retlw	97
  7201  380B  3462               	retlw	98
  7202  380C  3463               	retlw	99
  7203  380D  3464               	retlw	100
  7204  380E  3465               	retlw	101
  7205  380F  3466               	retlw	102
  7206  3810  3467               	retlw	103
  7207  3811  3468               	retlw	104
  7208  3812  3469               	retlw	105
  7209  3813  346A               	retlw	106
  7210  3814  346B               	retlw	107
  7211  3815  346C               	retlw	108
  7212  3816  346D               	retlw	109
  7213  3817  346E               	retlw	110
  7214  3818  346F               	retlw	111
  7215  3819  3470               	retlw	112
  7216  381A  3471               	retlw	113
  7217  381B  3472               	retlw	114
  7218  381C  3473               	retlw	115
  7219  381D  3474               	retlw	116
  7220  381E  3475               	retlw	117
  7221  381F  3476               	retlw	118
  7222  3820  3477               	retlw	119
  7223  3821  3478               	retlw	120
  7224  3822  3479               	retlw	121
  7225  3823  347A               	retlw	122
  7226  3824  342E               	retlw	46
  7227  3825  342D               	retlw	45
  7228  3826  343A               	retlw	58
  7229  3827  3420               	retlw	32
  7230  3828  3400               	retlw	0
  7231  3829                     __end_of_LCDDigitalIndexTable:	
  7232                           
  7233                           	psect	stringtext2
  7234  3829                     __pstringtext2:	
  7235  3829                     _LCDDigitalTable:	
  7236  3829  343F               	retlw	63
  7237  382A  3406               	retlw	6
  7238  382B  345B               	retlw	91
  7239  382C  344F               	retlw	79
  7240  382D  3466               	retlw	102
  7241  382E  346D               	retlw	109
  7242  382F  347D               	retlw	125
  7243  3830  3407               	retlw	7
  7244  3831  347F               	retlw	127
  7245  3832  346F               	retlw	111
  7246  3833  3477               	retlw	119
  7247  3834  347C               	retlw	124
  7248  3835  3439               	retlw	57
  7249  3836  345E               	retlw	94
  7250  3837  3479               	retlw	121
  7251  3838  3471               	retlw	113
  7252  3839  346F               	retlw	111
  7253  383A  3476               	retlw	118
  7254  383B  3406               	retlw	6
  7255  383C  340E               	retlw	14
  7256  383D  347A               	retlw	122
  7257  383E  3438               	retlw	56
  7258  383F  3400               	retlw	0
  7259  3840  3437               	retlw	55
  7260  3841  345C               	retlw	92
  7261  3842  3473               	retlw	115
  7262  3843  3467               	retlw	103
  7263  3844  3450               	retlw	80
  7264  3845  346D               	retlw	109
  7265  3846  3478               	retlw	120
  7266  3847  343E               	retlw	62
  7267  3848  3400               	retlw	0
  7268  3849  3400               	retlw	0
  7269  384A  3400               	retlw	0
  7270  384B  346E               	retlw	110
  7271  384C  345B               	retlw	91
  7272  384D  3440               	retlw	64
  7273  384E  3440               	retlw	64
  7274  384F  3448               	retlw	72
  7275  3850  3400               	retlw	0
  7276  3851                     __end_of_LCDDigitalTable:	
  7277                           
  7278                           	psect	stringtext3
  7279  3869                     __pstringtext3:	
  7280  3869                     _hexTable:	
  7281  3869  3430               	retlw	48
  7282  386A  3431               	retlw	49
  7283  386B  3432               	retlw	50
  7284  386C  3433               	retlw	51
  7285  386D  3434               	retlw	52
  7286  386E  3435               	retlw	53
  7287  386F  3436               	retlw	54
  7288  3870  3437               	retlw	55
  7289  3871  3438               	retlw	56
  7290  3872  3439               	retlw	57
  7291  3873  3461               	retlw	97
  7292  3874  3462               	retlw	98
  7293  3875  3463               	retlw	99
  7294  3876  3464               	retlw	100
  7295  3877  3465               	retlw	101
  7296  3878  3466               	retlw	102
  7297  3879  3400               	retlw	0
  7298  387A                     __end_of_hexTable:	
  7299                           
  7300                           	psect	stringtext4
  7301  390F                     __pstringtext4:	
  7302  390F                     _TablerxAlign:	
  7303  390F  34FF               	retlw	255
  7304  3910  34FE               	retlw	254
  7305  3911  34FC               	retlw	252
  7306  3912  34F8               	retlw	248
  7307  3913  34F0               	retlw	240
  7308  3914  34E0               	retlw	224
  7309  3915  34C0               	retlw	192
  7310  3916  3480               	retlw	128
  7311  3917                     __end_of_TablerxAlign:	
  7312                           
  7313                           	psect	stringtext5
  7314  3925                     __pstringtext5:	
  7315  3925                     _defaultKeyA:	
  7316  3925  34FF               	retlw	255
  7317  3926  34FF               	retlw	255
  7318  3927  34FF               	retlw	255
  7319  3928  34FF               	retlw	255
  7320  3929  34FF               	retlw	255
  7321  392A  34FF               	retlw	255
  7322  392B                     __end_of_defaultKeyA:	
  7323                           
  7324                           	psect	nvBANK2
  7325  016D                     __pnvBANK2:	
  7326  016D                     _timer1ReloadVal:	
  7327  016D                     	ds	2
  7328  016F                     _timer0ReloadVal:	
  7329  016F                     	ds	1
  7330                           
  7331                           	psect	nvBANK3
  7332  01D0                     __pnvBANK3:	
  7333  01D0                     _TMR0_InterruptHandler:	
  7334  01D0                     	ds	2
  7335  01D2                     _TMR1_InterruptHandler:	
  7336  01D2                     	ds	2
  7337  000D                     _PORTBbits	set	13
  7338  000C                     _PORTAbits	set	12
  7339  000E                     _PORTCbits	set	14
  7340  000F                     _PORTDbits	set	15
  7341  000D                     _PORTB	set	13
  7342  0015                     _TMR0	set	21
  7343  000B                     _INTCONbits	set	11
  7344  0018                     _T1CONbits	set	24
  7345  0011                     _PIR1bits	set	17
  7346  0016                     _TMR1L	set	22
  7347  0017                     _TMR1H	set	23
  7348  0019                     _T1GCON	set	25
  7349  0018                     _T1CON	set	24
  7350  008E                     _TRISCbits	set	142
  7351  008D                     _TRISBbits	set	141
  7352  008F                     _TRISDbits	set	143
  7353  008C                     _TRISAbits	set	140
  7354  0095                     _OPTION_REG	set	149
  7355  0091                     _PIE1bits	set	145
  7356  0095                     _OPTION_REGbits	set	149
  7357  008F                     _TRISD	set	143
  7358  008E                     _TRISC	set	142
  7359  008D                     _TRISB	set	141
  7360  008C                     _TRISA	set	140
  7361  0090                     _TRISE	set	144
  7362  0097                     _WDTCON	set	151
  7363  0098                     _OSCTUNE	set	152
  7364  0099                     _OSCCON	set	153
  7365  010E                     _LATCbits	set	270
  7366  010D                     _LATBbits	set	269
  7367  010F                     _LATDbits	set	271
  7368  010C                     _LATAbits	set	268
  7369  011D                     _APFCON	set	285
  7370  010E                     _LATC	set	270
  7371  010D                     _LATB	set	269
  7372  010C                     _LATA	set	268
  7373  010F                     _LATD	set	271
  7374  0110                     _LATE	set	272
  7375  018C                     _ANSELAbits	set	396
  7376  0199                     _RC1REG	set	409
  7377  019D                     _RC1STAbits	set	413
  7378  019A                     _TX1REG	set	410
  7379  019C                     _SP1BRGH	set	412
  7380  019B                     _SP1BRGL	set	411
  7381  019E                     _TX1STA	set	414
  7382  019D                     _RC1STA	set	413
  7383  019F                     _BAUD1CON	set	415
  7384  0196                     _EECON2	set	406
  7385  0195                     _EECON1bits	set	405
  7386  0193                     _EEDATL	set	403
  7387  0191                     _EEADRL	set	401
  7388  018C                     _ANSELA	set	396
  7389  0190                     _ANSELE	set	400
  7390  020D                     _WPUB	set	525
  7391  030C                     _TRISFbits	set	780
  7392  030D                     _TRISG	set	781
  7393  030C                     _TRISF	set	780
  7394  038C                     _LATFbits	set	908
  7395  038D                     _LATG	set	909
  7396  038C                     _LATF	set	908
  7397  040C                     _ANSELFbits	set	1036
  7398  040C                     _ANSELF	set	1036
  7399  040D                     _ANSELG	set	1037
  7400  048D                     _WPUG	set	1165
  7401  0791                     _LCDCON	set	1937
  7402  0793                     _LCDREF	set	1939
  7403  0795                     _LCDRL	set	1941
  7404  0794                     _LCDCST	set	1940
  7405  079D                     _LCDSE5	set	1949
  7406  079C                     _LCDSE4	set	1948
  7407  079B                     _LCDSE3	set	1947
  7408  079A                     _LCDSE2	set	1946
  7409  0799                     _LCDSE1	set	1945
  7410  0798                     _LCDSE0	set	1944
  7411  0792                     _LCDPSbits	set	1938
  7412  07A0                     _LCDDATA0	set	1952
  7413                           
  7414                           	psect	stringtext6
  7415  389A                     __pstringtext6:	
  7416  389A                     STR_24:	
  7417  389A  342D               	retlw	45	;'-'
  7418  389B  342D               	retlw	45	;'-'
  7419  389C  3466               	retlw	102	;'f'
  7420  389D  3475               	retlw	117	;'u'
  7421  389E  346C               	retlw	108	;'l'
  7422  389F  346C               	retlw	108	;'l'
  7423  38A0  342D               	retlw	45	;'-'
  7424  38A1  342D               	retlw	45	;'-'
  7425  38A2  3400               	retlw	0
  7426                           
  7427                           	psect	stringtext7
  7428  38A3                     __pstringtext7:	
  7429  38A3                     STR_4:	
  7430  38A3  346B               	retlw	107	;'k'
  7431  38A4  3430               	retlw	48	;'0'
  7432  38A5  3420               	retlw	32	;' '
  7433  38A6  3420               	retlw	32	;' '
  7434  38A7  3420               	retlw	32	;' '
  7435  38A8  3420               	retlw	32	;' '
  7436  38A9  3420               	retlw	32	;' '
  7437  38AA  3420               	retlw	32	;' '
  7438  38AB  3400               	retlw	0
  7439                           
  7440                           	psect	stringtext8
  7441  38AC                     __pstringtext8:	
  7442  38AC                     STR_22:	
  7443  38AC  3420               	retlw	32	;' '
  7444  38AD  3420               	retlw	32	;' '
  7445  38AE  3420               	retlw	32	;' '
  7446  38AF  3420               	retlw	32	;' '
  7447  38B0  3430               	retlw	48	;'0'
  7448  38B1  346E               	retlw	110	;'n'
  7449  38B2  3420               	retlw	32	;' '
  7450  38B3  3420               	retlw	32	;' '
  7451  38B4  3400               	retlw	0
  7452                           
  7453                           	psect	stringtext9
  7454  38B5                     __pstringtext9:	
  7455  38B5                     STR_21:	
  7456  38B5  3420               	retlw	32	;' '
  7457  38B6  3468               	retlw	104	;'h'
  7458  38B7  3461               	retlw	97	;'a'
  7459  38B8  3420               	retlw	32	;' '
  7460  38B9  3430               	retlw	48	;'0'
  7461  38BA  346E               	retlw	110	;'n'
  7462  38BB  3420               	retlw	32	;' '
  7463  38BC  3420               	retlw	32	;' '
  7464  38BD  3400               	retlw	0
  7465                           
  7466                           	psect	stringtext10
  7467  38BE                     __pstringtext10:	
  7468  38BE                     STR_20:	
  7469  38BE  3420               	retlw	32	;' '
  7470  38BF  3420               	retlw	32	;' '
  7471  38C0  3420               	retlw	32	;' '
  7472  38C1  3420               	retlw	32	;' '
  7473  38C2  3430               	retlw	48	;'0'
  7474  38C3  3466               	retlw	102	;'f'
  7475  38C4  3466               	retlw	102	;'f'
  7476  38C5  3420               	retlw	32	;' '
  7477  38C6  3400               	retlw	0
  7478                           
  7479                           	psect	stringtext11
  7480  38C7                     __pstringtext11:	
  7481  38C7                     STR_19:	
  7482  38C7  3420               	retlw	32	;' '
  7483  38C8  346C               	retlw	108	;'l'
  7484  38C9  3461               	retlw	97	;'a'
  7485  38CA  3420               	retlw	32	;' '
  7486  38CB  3430               	retlw	48	;'0'
  7487  38CC  3466               	retlw	102	;'f'
  7488  38CD  3466               	retlw	102	;'f'
  7489  38CE  3420               	retlw	32	;' '
  7490  38CF  3400               	retlw	0
  7491                           
  7492                           	psect	stringtext12
  7493  38D0                     __pstringtext12:	
  7494  38D0                     STR_3:	
  7495  38D0  3420               	retlw	32	;' '
  7496  38D1  3420               	retlw	32	;' '
  7497  38D2  3465               	retlw	101	;'e'
  7498  38D3  3472               	retlw	114	;'r'
  7499  38D4  3472               	retlw	114	;'r'
  7500  38D5  346F               	retlw	111	;'o'
  7501  38D6  3472               	retlw	114	;'r'
  7502  38D7  3420               	retlw	32	;' '
  7503  38D8  3400               	retlw	0
  7504                           
  7505                           	psect	stringtext13
  7506  38D9                     __pstringtext13:	
  7507  38D9                     STR_1:	
  7508  38D9  3420               	retlw	32	;' '
  7509  38DA  342D               	retlw	45	;'-'
  7510  38DB  3468               	retlw	104	;'h'
  7511  38DC  3465               	retlw	101	;'e'
  7512  38DD  346C               	retlw	108	;'l'
  7513  38DE  346C               	retlw	108	;'l'
  7514  38DF  3430               	retlw	48	;'0'
  7515  38E0  342D               	retlw	45	;'-'
  7516  38E1  3400               	retlw	0
  7517                           
  7518                           	psect	stringtext14
  7519  38E2                     __pstringtext14:	
  7520  38E2                     STR_15:	
  7521  38E2  3420               	retlw	32	;' '
  7522  38E3  3420               	retlw	32	;' '
  7523  38E4  3420               	retlw	32	;' '
  7524  38E5  3463               	retlw	99	;'c'
  7525  38E6  342D               	retlw	45	;'-'
  7526  38E7  3469               	retlw	105	;'i'
  7527  38E8  3464               	retlw	100	;'d'
  7528  38E9  3430               	retlw	48	;'0'
  7529  38EA  3400               	retlw	0
  7530                           
  7531                           	psect	stringtext15
  7532  38EB                     __pstringtext15:	
  7533  38EB                     STR_16:	
  7534  38EB  3420               	retlw	32	;' '
  7535  38EC  3420               	retlw	32	;' '
  7536  38ED  3420               	retlw	32	;' '
  7537  38EE  3463               	retlw	99	;'c'
  7538  38EF  342D               	retlw	45	;'-'
  7539  38F0  3469               	retlw	105	;'i'
  7540  38F1  3464               	retlw	100	;'d'
  7541  38F2  3439               	retlw	57	;'9'
  7542  38F3  3400               	retlw	0
  7543                           
  7544                           	psect	stringtext16
  7545  38F4                     __pstringtext16:	
  7546  38F4                     STR_7:	
  7547  38F4  3472               	retlw	114	;'r'
  7548  38F5  3465               	retlw	101	;'e'
  7549  38F6  3463               	retlw	99	;'c'
  7550  38F7  3468               	retlw	104	;'h'
  7551  38F8  3461               	retlw	97	;'a'
  7552  38F9  3472               	retlw	114	;'r'
  7553  38FA  3467               	retlw	103	;'g'
  7554  38FB  3465               	retlw	101	;'e'
  7555  38FC  3400               	retlw	0
  7556                           
  7557                           	psect	stringtext17
  7558  38FD                     __pstringtext17:	
  7559  38FD                     STR_18:	
  7560  38FD  3420               	retlw	32	;' '
  7561  38FE  3420               	retlw	32	;' '
  7562  38FF  3420               	retlw	32	;' '
  7563  3900  3420               	retlw	32	;' '
  7564  3901  3473               	retlw	115	;'s'
  7565  3902  346C               	retlw	108	;'l'
  7566  3903  342D               	retlw	45	;'-'
  7567  3904  3466               	retlw	102	;'f'
  7568  3905  3400               	retlw	0
  7569                           
  7570                           	psect	stringtext18
  7571  3906                     __pstringtext18:	
  7572  3906                     STR_17:	
  7573  3906  3420               	retlw	32	;' '
  7574  3907  3420               	retlw	32	;' '
  7575  3908  3420               	retlw	32	;' '
  7576  3909  3420               	retlw	32	;' '
  7577  390A  3473               	retlw	115	;'s'
  7578  390B  346C               	retlw	108	;'l'
  7579  390C  342D               	retlw	45	;'-'
  7580  390D  346C               	retlw	108	;'l'
  7581  390E  3400               	retlw	0
  7582                           
  7583                           	psect	stringtext19
  7584  3917                     __pstringtext19:	
  7585  3917                     STR_6:	
  7586  3917  3420               	retlw	32	;' '
  7587  3918  3420               	retlw	32	;' '
  7588  3919  3420               	retlw	32	;' '
  7589  391A  3463               	retlw	99	;'c'
  7590  391B  3475               	retlw	117	;'u'
  7591  391C  342D               	retlw	45	;'-'
  7592  391D  3400               	retlw	0
  7593                           
  7594                           	psect	stringtext20
  7595  391E                     __pstringtext20:	
  7596  391E                     STR_2:	
  7597  391E  3420               	retlw	32	;' '
  7598  391F  3463               	retlw	99	;'c'
  7599  3920  3473               	retlw	115	;'s'
  7600  3921  3437               	retlw	55	;'7'
  7601  3922  3430               	retlw	48	;'0'
  7602  3923  3430               	retlw	48	;'0'
  7603  3924  3400               	retlw	0
  7604                           
  7605                           	psect	stringtext21
  7606  392B                     __pstringtext21:	
  7607  392B                     STR_11:	
  7608  392B  3464               	retlw	100	;'d'
  7609  392C  3431               	retlw	49	;'1'
  7610  392D  3420               	retlw	32	;' '
  7611  392E  3420               	retlw	32	;' '
  7612  392F  3420               	retlw	32	;' '
  7613  3930  3400               	retlw	0
  7614                           
  7615                           	psect	stringtext22
  7616  3931                     __pstringtext22:	
  7617  3931                     STR_13:	
  7618  3931  3464               	retlw	100	;'d'
  7619  3932  3432               	retlw	50	;'2'
  7620  3933  3420               	retlw	32	;' '
  7621  3934  3420               	retlw	32	;' '
  7622  3935  3420               	retlw	32	;' '
  7623  3936  3400               	retlw	0
  7624                           
  7625                           	psect	stringtext23
  7626  3937                     __pstringtext23:	
  7627  3937                     STR_12:	
  7628  3937  3464               	retlw	100	;'d'
  7629  3938  3431               	retlw	49	;'1'
  7630  3939  3420               	retlw	32	;' '
  7631  393A  3420               	retlw	32	;' '
  7632  393B  342D               	retlw	45	;'-'
  7633  393C  3400               	retlw	0
  7634                           
  7635                           	psect	stringtext24
  7636  393D                     __pstringtext24:	
  7637  393D                     STR_14:	
  7638  393D  3464               	retlw	100	;'d'
  7639  393E  3432               	retlw	50	;'2'
  7640  393F  3420               	retlw	32	;' '
  7641  3940  3420               	retlw	32	;' '
  7642  3941  342D               	retlw	45	;'-'
  7643  3942  3400               	retlw	0
  7644                           
  7645                           	psect	stringtext25
  7646  3943                     __pstringtext25:	
  7647  3943                     STR_10:	
  7648  3943  3464               	retlw	100	;'d'
  7649  3944  3469               	retlw	105	;'i'
  7650  3945  3464               	retlw	100	;'d'
  7651  3946  342D               	retlw	45	;'-'
  7652  3947  3400               	retlw	0
  7653                           
  7654                           	psect	stringtext26
  7655  3948                     __pstringtext26:	
  7656  3948                     STR_23:	
  7657  3948  3470               	retlw	112	;'p'
  7658  3949  3473               	retlw	115	;'s'
  7659  394A  3464               	retlw	100	;'d'
  7660  394B  342D               	retlw	45	;'-'
  7661  394C  3400               	retlw	0
  7662                           
  7663                           	psect	stringtext27
  7664  394D                     __pstringtext27:	
  7665  394D                     STR_9:	
  7666  394D  3473               	retlw	115	;'s'
  7667  394E  346A               	retlw	106	;'j'
  7668  394F  342D               	retlw	45	;'-'
  7669  3950  3400               	retlw	0
  7670                           
  7671                           	psect	stringtext28
  7672  3951                     __pstringtext28:	
  7673  3951                     STR_5:	
  7674  3951  346C               	retlw	108	;'l'
  7675  3952  342D               	retlw	45	;'-'
  7676  3953  3400               	retlw	0
  7677                           
  7678                           	psect	stringtext29
  7679  0000                     __pstringtext29:	
  7680  3944                     
  7681                           ; #config settings
  7682  0000                     
  7683                           	psect	cinit
  7684  0039                     start_initialization:	
  7685  0039                     __initialization:		;BIGRAM
  7686                           
  7687                           ; Initialize objects allocated to BANK2
  7688  0039  30E3               	movlw	low __pidataBANK2
  7689  003A  0084               	movwf	4
  7690  003B  30BA               	movlw	(high __pidataBANK2)| (0+128)
  7691  003C  0085               	movwf	5
  7692  003D  3069               	movlw	low __pdataBANK2
  7693  003E  0086               	movwf	6
  7694  003F  3001               	movlw	high __pdataBANK2
  7695  0040  0087               	movwf	7
  7696  0041  3000               	movlw	0
  7697  0042  00FF               	movwf	btemp+1
  7698  0043  3004               	movlw	4
  7699  0044  31BB  2370  3180   	fcall	init_ram
  7700                           
  7701                           ; Initialize objects allocated to BANK3
  7702  0047  3003               	movlw	low __pidataBANK3
  7703  0048  0084               	movwf	4
  7704  0049  30BB               	movlw	(high __pidataBANK3)| (0+128)
  7705  004A  0085               	movwf	5
  7706  004B  30CA               	movlw	low __pdataBANK3
  7707  004C  0086               	movwf	6
  7708  004D  3001               	movlw	high __pdataBANK3
  7709  004E  0087               	movwf	7
  7710  004F  3000               	movlw	0
  7711  0050  00FF               	movwf	btemp+1
  7712  0051  3006               	movlw	6
  7713  0052  31BB  2370  3180   	fcall	init_ram
  7714                           
  7715                           ; Initialize objects allocated to BANK4
  7716  0055  3030               	movlw	low __pidataBANK4
  7717  0056  0084               	movwf	4
  7718  0057  30A9               	movlw	(high __pidataBANK4)| (0+128)
  7719  0058  0085               	movwf	5
  7720  0059  3020               	movlw	low __pdataBANK4
  7721  005A  0086               	movwf	6
  7722  005B  3002               	movlw	high __pdataBANK4
  7723  005C  0087               	movwf	7
  7724  005D  3000               	movlw	0
  7725  005E  00FF               	movwf	btemp+1
  7726  005F  3048               	movlw	72
  7727  0060  31BB  2370  3180   	fcall	init_ram
  7728                           
  7729                           ; Clear objects allocated to BIGRAM
  7730  0063  3000               	movlw	low (0+8704)
  7731  0064  0084               	movwf	4
  7732  0065  3022               	movlw	high (0+8704)
  7733  0066  0085               	movwf	5
  7734  0067  30FC               	movlw	252
  7735  0068  00FE               	movwf	btemp
  7736  0069  3000               	movlw	0
  7737  006A  00FF               	movwf	btemp+1
  7738  006B  31BB  2364  3180   	fcall	clear_ram0
  7739                           
  7740                           ; Clear objects allocated to COMMON
  7741  006E  01F8               	clrf	__pbssCOMMON& (0+127)
  7742  006F  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  7743  0070  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  7744                           
  7745                           ; Clear objects allocated to BANK1
  7746  0071  30A0               	movlw	low __pbssBANK1
  7747  0072  0084               	movwf	4
  7748  0073  3000               	movlw	high __pbssBANK1
  7749  0074  0085               	movwf	5
  7750  0075  302A               	movlw	42
  7751  0076  00FE               	movwf	btemp
  7752  0077  3000               	movlw	0
  7753  0078  00FF               	movwf	btemp+1
  7754  0079  31BB  2364  3180   	fcall	clear_ram0
  7755                           
  7756                           ; Clear objects allocated to BANK2
  7757  007C  3020               	movlw	low __pbssBANK2
  7758  007D  0084               	movwf	4
  7759  007E  3001               	movlw	high __pbssBANK2
  7760  007F  0085               	movwf	5
  7761  0080  3049               	movlw	73
  7762  0081  00FE               	movwf	btemp
  7763  0082  3000               	movlw	0
  7764  0083  00FF               	movwf	btemp+1
  7765  0084  31BB  2364  3180   	fcall	clear_ram0
  7766                           
  7767                           ; Clear objects allocated to BANK3
  7768  0087  30A0               	movlw	low __pbssBANK3
  7769  0088  0084               	movwf	4
  7770  0089  3001               	movlw	high __pbssBANK3
  7771  008A  0085               	movwf	5
  7772  008B  302A               	movlw	42
  7773  008C  00FE               	movwf	btemp
  7774  008D  3000               	movlw	0
  7775  008E  00FF               	movwf	btemp+1
  7776  008F  31BB  2364  3180   	fcall	clear_ram0
  7777                           
  7778                           ; Clear objects allocated to BANK5
  7779  0092  30A0               	movlw	low __pbssBANK5
  7780  0093  0084               	movwf	4
  7781  0094  3002               	movlw	high __pbssBANK5
  7782  0095  0085               	movwf	5
  7783  0096  3028               	movlw	40
  7784  0097  00FE               	movwf	btemp
  7785  0098  3000               	movlw	0
  7786  0099  00FF               	movwf	btemp+1
  7787  009A  31BB  2364         	fcall	clear_ram0
  7788  009C                     end_of_initialization:	
  7789                           ;End of C runtime variable initialization code
  7790                           
  7791  009C                     __end_of__initialization:	
  7792  009C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  7793  009D  0020               	movlb	0
  7794  009E  3190  2800         	ljmp	_main	;jump to C main() function
  7795                           
  7796                           	psect	bssCOMMON
  7797  0078                     __pbssCOMMON:	
  7798  0078                     ___t16:	
  7799  0078                     	ds	2
  7800  007A                     _valveStatus:	
  7801  007A                     	ds	1
  7802                           
  7803                           	psect	bssBANK1
  7804  00A0                     __pbssBANK1:	
  7805  00A0                     _rtVolume_L:	
  7806  00A0                     	ds	4
  7807  00A4                     _fl_t32:	
  7808  00A4                     	ds	4
  7809  00A8                     _rtBalanceMoney:	
  7810  00A8                     	ds	4
  7811  00AC                     ___q31:	
  7812  00AC                     	ds	4
  7813  00B0                     _rtVolume_m3:	
  7814  00B0                     	ds	4
  7815  00B4                     ___t32:	
  7816  00B4                     	ds	4
  7817  00B8                     _adcAverageValue:	
  7818  00B8                     	ds	2
  7819  00BA                     ___q15:	
  7820  00BA                     	ds	2
  7821  00BC                     _flow:	
  7822  00BC                     	ds	2
  7823  00BE                     _piccResult:	
  7824  00BE                     	ds	1
  7825  00BF                     _adcSamplingTimes:	
  7826  00BF                     	ds	1
  7827  00C0                     _deviceStatus:	
  7828  00C0                     	ds	1
  7829  00C1                     _KeyValue:	
  7830  00C1                     	ds	1
  7831  00C2                     _bkupMenu:	
  7832  00C2                     	ds	1
  7833  00C3                     _menu:	
  7834  00C3                     	ds	1
  7835  00C4                     _opReason:	
  7836  00C4                     	ds	1
  7837  00C5                     _calibLocation:	
  7838  00C5                     	ds	1
  7839  00C6                     _flowError:	
  7840  00C6                     	ds	1
  7841  00C7                     _Event:	
  7842  00C7                     	ds	1
  7843  00C8                     _rdLen:	
  7844  00C8                     	ds	1
  7845  00C9                     ___t8:	
  7846  00C9                     	ds	1
  7847                           
  7848                           	psect	bssBANK2
  7849  0120                     __pbssBANK2:	
  7850  0120                     _tmTemp16:	
  7851  0120                     	ds	2
  7852  0122                     _adcvalue:	
  7853  0122                     	ds	2
  7854  0124                     _fl_t16:	
  7855  0124                     	ds	2
  7856  0126                     _adcSamplingTimerOneTime:	
  7857  0126                     	ds	2
  7858  0128                     _adcSamplingTimer:	
  7859  0128                     	ds	2
  7860  012A                     _password:	
  7861  012A                     	ds	2
  7862  012C                     _uart1ReceivedCount:	
  7863  012C                     	ds	2
  7864  012E                     _globlTickerms:	
  7865  012E                     	ds	2
  7866  0130                     _systemTikerms:	
  7867  0130                     	ds	2
  7868  0132                     _firstPowerDown:	
  7869  0132                     	ds	1
  7870  0133                     _pcdPwrOn:	
  7871  0133                     	ds	1
  7872  0134                     _hour:	
  7873  0134                     	ds	1
  7874  0135                     _min:	
  7875  0135                     	ds	1
  7876  0136                     _valveTimer:	
  7877  0136                     	ds	1
  7878  0137                     _CardError:	
  7879  0137                     	ds	1
  7880  0138                     _warningStatus:	
  7881  0138                     	ds	1
  7882  0139                     _smallFlowNotCare:	
  7883  0139                     	ds	1
  7884  013A                     _fl_t8:	
  7885  013A                     	ds	1
  7886  013B                     _cardReadingFlag:	
  7887  013B                     	ds	1
  7888  013C                     _flowCalibrationLocation:	
  7889  013C                     	ds	1
  7890  013D                     ___q7:	
  7891  013D                     	ds	1
  7892  013E                     _sec:	
  7893  013E                     	ds	1
  7894  013F                     _sendCount:	
  7895  013F                     	ds	1
  7896  0140                     _uart1ReceivedTimer:	
  7897  0140                     	ds	1
  7898  0141                     _calVolumeTimeSec:	
  7899  0141                     	ds	1
  7900  0142                     _systemTickerSec:	
  7901  0142                     	ds	1
  7902  0143                     _flashOpStr:	
  7903  0143                     	ds	21
  7904  0158                     _lcdBuf:	
  7905  0158                     	ds	9
  7906  0161                     _uiAdjbuf:	
  7907  0161                     	ds	8
  7908                           
  7909                           	psect	dataBANK2
  7910  0169                     __pdataBANK2:	
  7911  0169                     _pLcdReg:	
  7912  0169                     	ds	2
  7913  016B                     _flowCalibrationPointSingle:	
  7914  016B                     	ds	1
  7915  016C                     _noKeyEventTimeOut:	
  7916  016C                     	ds	1
  7917                           
  7918                           	psect	bssBANK3
  7919  01A0                     __pbssBANK3:	
  7920  01A0                     _findCardTimer:	
  7921  01A0                     	ds	2
  7922  01A2                     _calVolumeTs:	
  7923  01A2                     	ds	2
  7924  01A4                     _uart1ReceivedTimeout:	
  7925  01A4                     	ds	2
  7926  01A6                     _pLCD:	
  7927  01A6                     	ds	24
  7928  01BE                     _PiccUid:	
  7929  01BE                     	ds	12
  7930                           
  7931                           	psect	dataBANK3
  7932  01CA                     __pdataBANK3:	
  7933  01CA                     _userKeyB:	
  7934  01CA                     	ds	6
  7935                           
  7936                           	psect	dataBANK4
  7937  0220                     __pdataBANK4:	
  7938  0220                     _mainSystemData:	
  7939  0220                     	ds	72
  7940                           
  7941                           	psect	bssBANK5
  7942  02A0                     __pbssBANK5:	
  7943  02A0                     _adcSamplingBuffer:	
  7944  02A0                     	ds	40
  7945                           
  7946                           	psect	inittext
  7947  3B70                     init_ram:	
  7948  3B70  00FE               	movwf	126
  7949  3B71                     initloop:	
  7950  3B71  0012               	moviw fsr0++
  7951  3B72  001E               	movwi fsr1++
  7952  3B73  3001               	movlw	1
  7953  3B74  02FE               	subwf	126,f
  7954  3B75  3000               	movlw	0
  7955  3B76  3BFF               	subwfb	127,f
  7956  3B77  087F               	movf	127,w
  7957  3B78  047E               	iorwf	126,w
  7958  3B79  1903               	btfsc	3,2
  7959  3B7A  3400               	retlw	0
  7960  3B7B  2B71               	goto	initloop
  7961                           
  7962                           	psect	clrtext
  7963  3B64                     clear_ram0:	
  7964                           ;	Called with FSR0 containing the base address, and
  7965                           ;	btemp/btemp+1 has the size to clear
  7966                           
  7967  3B64  0064               	clrwdt	;clear the watchdog before getting into this loop
  7968  3B65                     clrloop0:	
  7969  3B65  0180               	clrf	0	;clear RAM location pointed to by FSR
  7970  3B66  3101               	addfsr 0,1
  7971  3B67  3001               	movlw	1
  7972  3B68  02FE               	subwf	126,f
  7973  3B69  3000               	movlw	0
  7974  3B6A  3BFF               	subwfb	127,f
  7975  3B6B  087F               	movf	127,w
  7976  3B6C  047E               	iorwf	126,w
  7977  3B6D  1903               	btfsc	3,2
  7978  3B6E  3400               	retlw	0	;all done for this memory range, return
  7979  3B6F  2B65               	goto	clrloop0	;have we reached the end yet?
  7980                           
  7981                           	psect	cstackBANK3
  7982  01D4                     __pcstackBANK3:	
  7983  01D4                     rfid_comm_process@valveCtrlflag:	
  7984                           
  7985                           ; 1 bytes @ 0x0
  7986  01D4                     	ds	1
  7987  01D5                     rfid_comm_process@ret:	
  7988                           
  7989                           ; 1 bytes @ 0x1
  7990  01D5                     	ds	1
  7991  01D6                     main@tm:	
  7992                           
  7993                           ; 1 bytes @ 0x2
  7994  01D6                     	ds	1
  7995                           
  7996                           	psect	cstackBANK1
  7997  00CA                     __pcstackBANK1:	
  7998  00CA                     mifare_write@blockAddr:	
  7999  00CA                     _picc_select$3251:	
  8000                           ; 1 bytes @ 0x0
  8001                           
  8002                           
  8003                           ; 2 bytes @ 0x0
  8004  00CA                     	ds	1
  8005  00CB                     mifare_write@cmdBuffer:	
  8006                           
  8007                           ; 2 bytes @ 0x1
  8008  00CB                     	ds	1
  8009  00CC                     _picc_select$3254:	
  8010                           
  8011                           ; 2 bytes @ 0x2
  8012  00CC                     	ds	1
  8013  00CD                     mifare_write@result:	
  8014                           
  8015                           ; 1 bytes @ 0x3
  8016  00CD                     	ds	1
  8017  00CE                     ??_rfid_comm_process_read_header:	
  8018  00CE                     ??_rfid_comm_process_recharge:	
  8019                           ; 1 bytes @ 0x4
  8020                           
  8021  00CE                     _picc_select$3255:	
  8022                           ; 1 bytes @ 0x4
  8023                           
  8024                           
  8025                           ; 2 bytes @ 0x4
  8026  00CE                     	ds	2
  8027  00D0                     picc_select@uidComplete:	
  8028                           
  8029                           ; 1 bytes @ 0x6
  8030  00D0                     	ds	1
  8031  00D1                     picc_select@selectDone:	
  8032                           
  8033                           ; 1 bytes @ 0x7
  8034  00D1                     	ds	1
  8035  00D2                     picc_select@bufferUsed:	
  8036                           
  8037                           ; 1 bytes @ 0x8
  8038  00D2                     	ds	1
  8039  00D3                     _picc_select$3247:	
  8040                           
  8041                           ; 1 bytes @ 0x9
  8042  00D3                     	ds	1
  8043  00D4                     _picc_select$3248:	
  8044                           
  8045                           ; 1 bytes @ 0xA
  8046  00D4                     	ds	1
  8047  00D5                     picc_select@rxAlign:	
  8048                           
  8049                           ; 1 bytes @ 0xB
  8050  00D5                     	ds	1
  8051  00D6                     picc_select@maxBytes:	
  8052                           
  8053                           ; 1 bytes @ 0xC
  8054  00D6                     	ds	1
  8055  00D7                     picc_select@valueOfCollReg:	
  8056                           
  8057                           ; 1 bytes @ 0xD
  8058  00D7                     	ds	1
  8059  00D8                     picc_select@buffer:	
  8060                           
  8061                           ; 9 bytes @ 0xE
  8062  00D8                     	ds	9
  8063  00E1                     picc_select@collisionPos:	
  8064                           
  8065                           ; 1 bytes @ 0x17
  8066  00E1                     	ds	1
  8067  00E2                     picc_select@useCascadeTag:	
  8068                           
  8069                           ; 1 bytes @ 0x18
  8070  00E2                     	ds	1
  8071  00E3                     picc_select@cascadeLevel:	
  8072                           
  8073                           ; 1 bytes @ 0x19
  8074  00E3                     	ds	1
  8075  00E4                     picc_select@uidIndex:	
  8076                           
  8077                           ; 1 bytes @ 0x1A
  8078  00E4                     	ds	1
  8079  00E5                     picc_select@bytesToCopy:	
  8080                           
  8081                           ; 1 bytes @ 0x1B
  8082  00E5                     	ds	1
  8083  00E6                     picc_select@responseLength:	
  8084                           
  8085                           ; 1 bytes @ 0x1C
  8086  00E6                     	ds	1
  8087  00E7                     picc_select@responseBuffer:	
  8088                           
  8089                           ; 1 bytes @ 0x1D
  8090  00E7                     	ds	1
  8091  00E8                     picc_select@uid:	
  8092                           
  8093                           ; 1 bytes @ 0x1E
  8094  00E8                     	ds	1
  8095  00E9                     picc_select@txLastBits:	
  8096                           
  8097                           ; 1 bytes @ 0x1F
  8098  00E9                     	ds	1
  8099  00EA                     picc_select@result:	
  8100                           
  8101                           ; 1 bytes @ 0x20
  8102  00EA                     	ds	1
  8103  00EB                     picc_select@count:	
  8104                           
  8105                           ; 1 bytes @ 0x21
  8106  00EB                     	ds	1
  8107  00EC                     picc_select@index:	
  8108                           
  8109                           ; 1 bytes @ 0x22
  8110  00EC                     	ds	1
  8111  00ED                     picc_select@currentLevelKnownBits:	
  8112                           
  8113                           ; 1 bytes @ 0x23
  8114  00ED                     	ds	1
  8115  00EE                     ??_rfid_comm_process:	
  8116                           
  8117                           ; 1 bytes @ 0x24
  8118  00EE                     	ds	1
  8119  00EF                     ??_main:	
  8120                           
  8121                           ; 1 bytes @ 0x25
  8122  00EF                     	ds	1
  8123                           
  8124                           	psect	cstackCOMMON
  8125  0070                     __pcstackCOMMON:	
  8126  0070                     ?_PIN_MANAGER_Initialize:	
  8127  0070                     ?_OSCILLATOR_Initialize:	
  8128                           ; 1 bytes @ 0x0
  8129                           
  8130  0070                     ?_WDT_Initialize:	
  8131                           ; 1 bytes @ 0x0
  8132                           
  8133  0070                     ?_TMR1_Initialize:	
  8134                           ; 1 bytes @ 0x0
  8135                           
  8136  0070                     ?_TMR0_Initialize:	
  8137                           ; 1 bytes @ 0x0
  8138                           
  8139  0070                     ?_EUSART1_Initialize:	
  8140                           ; 1 bytes @ 0x0
  8141                           
  8142  0070                     ?_TMR1_StartTimer:	
  8143                           ; 1 bytes @ 0x0
  8144                           
  8145  0070                     ?_TMR0_ISR:	
  8146                           ; 1 bytes @ 0x0
  8147                           
  8148  0070                     ??_TMR0_ISR:	
  8149                           ; 1 bytes @ 0x0
  8150                           
  8151  0070                     ?_EUSART1_Transmit_ISR:	
  8152                           ; 1 bytes @ 0x0
  8153                           
  8154  0070                     ??_EUSART1_Transmit_ISR:	
  8155                           ; 1 bytes @ 0x0
  8156                           
  8157  0070                     ?_EUSART1_Receive_ISR:	
  8158                           ; 1 bytes @ 0x0
  8159                           
  8160  0070                     ??_EUSART1_Receive_ISR:	
  8161                           ; 1 bytes @ 0x0
  8162                           
  8163  0070                     ?_lcd_clear_buffer:	
  8164                           ; 1 bytes @ 0x0
  8165                           
  8166  0070                     ?_lcd_disp_all:	
  8167                           ; 1 bytes @ 0x0
  8168                           
  8169  0070                     ?_lcd_disp_cln:	
  8170                           ; 1 bytes @ 0x0
  8171                           
  8172  0070                     ?_lcd_disp_refresh:	
  8173                           ; 1 bytes @ 0x0
  8174                           
  8175  0070                     ?_key_scan_call:	
  8176                           ; 1 bytes @ 0x0
  8177                           
  8178  0070                     ?_data_api_rt_data_save:	
  8179                           ; 1 bytes @ 0x0
  8180                           
  8181  0070                     ?_valve_off:	
  8182                           ; 1 bytes @ 0x0
  8183                           
  8184  0070                     ?_valve_on:	
  8185                           ; 1 bytes @ 0x0
  8186                           
  8187  0070                     ?_mfapi_is_new_card_present:	
  8188                           ; 1 bytes @ 0x0
  8189                           
  8190  0070                     ?_picc_halt_a:	
  8191                           ; 1 bytes @ 0x0
  8192                           
  8193  0070                     ?_picc_stop_cryptol:	
  8194                           ; 1 bytes @ 0x0
  8195                           
  8196  0070                     ?_mfrc522_hal_init:	
  8197                           ; 1 bytes @ 0x0
  8198                           
  8199  0070                     ?_mfrc522_bal_read_reg:	
  8200                           ; 1 bytes @ 0x0
  8201                           
  8202  0070                     ?_mfrc522_hal_reset_sf:	
  8203                           ; 1 bytes @ 0x0
  8204                           
  8205  0070                     ?_mfrc522_hal_set_antenna_gain:	
  8206                           ; 1 bytes @ 0x0
  8207                           
  8208  0070                     ?_mfrc522_hal_antenna_on:	
  8209                           ; 1 bytes @ 0x0
  8210                           
  8211  0070                     ?_SYSTEM_Initialize:	
  8212                           ; 1 bytes @ 0x0
  8213                           
  8214  0070                     ?_TMR1_ISR:	
  8215                           ; 1 bytes @ 0x0
  8216                           
  8217  0070                     ??_TMR1_ISR:	
  8218                           ; 1 bytes @ 0x0
  8219                           
  8220  0070                     ?_INTERRUPT_InterruptManager:	
  8221                           ; 1 bytes @ 0x0
  8222                           
  8223  0070                     ?_DATAEE_ReadByte:	
  8224                           ; 1 bytes @ 0x0
  8225                           
  8226  0070                     ?_my_uart1_received_ready:	
  8227                           ; 1 bytes @ 0x0
  8228                           
  8229  0070                     ?_ui_start_display:	
  8230                           ; 1 bytes @ 0x0
  8231                           
  8232  0070                     ?_ui_disp_flow_error:	
  8233                           ; 1 bytes @ 0x0
  8234                           
  8235  0070                     ?_ui_disp_flow:	
  8236                           ; 1 bytes @ 0x0
  8237                           
  8238  0070                     ?_ui_disp_totale_v:	
  8239                           ; 1 bytes @ 0x0
  8240                           
  8241  0070                     ?_ui_disp_transfer_money:	
  8242                           ; 1 bytes @ 0x0
  8243                           
  8244  0070                     ?_ui_disp_balance_and_volume:	
  8245                           ; 1 bytes @ 0x0
  8246                           
  8247  0070                     ?_ui_disp_clear_totale:	
  8248                           ; 1 bytes @ 0x0
  8249                           
  8250  0070                     ?_ui_disp_clear_balance:	
  8251                           ; 1 bytes @ 0x0
  8252                           
  8253  0070                     ?_ui_disp_set_line:	
  8254                           ; 1 bytes @ 0x0
  8255                           
  8256  0070                     ?_ui_disp_small_flow_how_care:	
  8257                           ; 1 bytes @ 0x0
  8258                           
  8259  0070                     ?_ui_disp_modbus_id:	
  8260                           ; 1 bytes @ 0x0
  8261                           
  8262  0070                     ?_ui_disp_set_price:	
  8263                           ; 1 bytes @ 0x0
  8264                           
  8265  0070                     ?_ui_disp_set_transferMoneyLimit:	
  8266                           ; 1 bytes @ 0x0
  8267                           
  8268  0070                     ?_ui_disp_set_device_id:	
  8269                           ; 1 bytes @ 0x0
  8270                           
  8271  0070                     ?_ui_disp_set_balanceWarning:	
  8272                           ; 1 bytes @ 0x0
  8273                           
  8274  0070                     ?_ui_disp_set_balanceOff:	
  8275                           ; 1 bytes @ 0x0
  8276                           
  8277  0070                     ?_ui_disp_set_calib:	
  8278                           ; 1 bytes @ 0x0
  8279                           
  8280  0070                     ?_ui_disp_set_imd_flow_uint:	
  8281                           ; 1 bytes @ 0x0
  8282                           
  8283  0070                     ?_ui_disp_menu:	
  8284                           ; 1 bytes @ 0x0
  8285                           
  8286  0070                     ?_ui_key_process_up_down_main:	
  8287                           ; 1 bytes @ 0x0
  8288                           
  8289  0070                     ?_ui_key_process_down:	
  8290                           ; 1 bytes @ 0x0
  8291                           
  8292  0070                     ?_ui_key_process_up_down:	
  8293                           ; 1 bytes @ 0x0
  8294                           
  8295  0070                     ?_ui_key_process_enter:	
  8296                           ; 1 bytes @ 0x0
  8297                           
  8298  0070                     ?_ui_key_process_cancel:	
  8299                           ; 1 bytes @ 0x0
  8300                           
  8301  0070                     ?_ui_key_set_process:	
  8302                           ; 1 bytes @ 0x0
  8303                           
  8304  0070                     ?_ui_key_process:	
  8305                           ; 1 bytes @ 0x0
  8306                           
  8307  0070                     ?_modbus_response_write_single_register:	
  8308                           ; 1 bytes @ 0x0
  8309                           
  8310  0070                     ?_modbus_response_command:	
  8311                           ; 1 bytes @ 0x0
  8312                           
  8313  0070                     ?_modbus_response_write_clib_data:	
  8314                           ; 1 bytes @ 0x0
  8315                           
  8316  0070                     ?_modbus_response_read_clib_data:	
  8317                           ; 1 bytes @ 0x0
  8318                           
  8319  0070                     ?_data_api_system_data_get:	
  8320                           ; 1 bytes @ 0x0
  8321                           
  8322  0070                     ?_data_api_calibration_table_data_init:	
  8323                           ; 1 bytes @ 0x0
  8324                           
  8325  0070                     ?_data_api_system_data_init:	
  8326                           ; 1 bytes @ 0x0
  8327                           
  8328  0070                     ?_data_api_flash_process:	
  8329                           ; 1 bytes @ 0x0
  8330                           
  8331  0070                     ?_in_app_vavle_off:	
  8332                           ; 1 bytes @ 0x0
  8333                           
  8334  0070                     ?_in_app_vavle_on:	
  8335                           ; 1 bytes @ 0x0
  8336                           
  8337  0070                     ?_app_flow_rt_volume_cal_ex:	
  8338                           ; 1 bytes @ 0x0
  8339                           
  8340  0070                     ?_app_flow_rt_balance_money_cal:	
  8341                           ; 1 bytes @ 0x0
  8342                           
  8343  0070                     ?_app_flow_money_warning:	
  8344                           ; 1 bytes @ 0x0
  8345                           
  8346  0070                     ?_app_flow_money_off:	
  8347                           ; 1 bytes @ 0x0
  8348                           
  8349  0070                     ?_flow_sampling_process:	
  8350                           ; 1 bytes @ 0x0
  8351                           
  8352  0070                     ?_rfid_comm_process_read_header:	
  8353                           ; 1 bytes @ 0x0
  8354                           
  8355  0070                     ?_rfid_comm_process_read_inc:	
  8356                           ; 1 bytes @ 0x0
  8357                           
  8358  0070                     ?_rfid_comm_process_read_dec:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_rfid_comm_process_recharge:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_rfid_comm_process:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_lcd_disp_code_0:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_lcd_disp_code_1:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_lcd_disp_code_2:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ?_lcd_disp_code_3:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_lcd_disp_code_4:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ?_lcd_disp_code_5:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ?_lcd_disp_code_6:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_lcd_disp_code_7:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ?_lcd_config:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_lcd_init:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ?_led_port_init:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_iic_start:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ?_iic_stop:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_iic_send_ack:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ?_iic_waite_ack:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ?_iic_send_byte:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_iic_received_byte:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_iic_received_byte_if_ack:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_other_gpio_port_init:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_valve_stop:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_timer0_irq_callback:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_timer1_irq_callback:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_mfapi_pcd_init:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_mfrc522_bal_write_read_via_spi:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ?_mfrc522_hal_get_antenna_gain:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_m_system_init:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ?_event_power_monitor:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_event_door_monitor:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_main:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454                           
  8455                           ; 1 bytes @ 0x0
  8456  0070                     	ds	1
  8457  0071                     EUSART1_Receive_ISR@t8:	
  8458                           
  8459                           ; 1 bytes @ 0x1
  8460  0071                     	ds	1
  8461  0072                     ??_INTERRUPT_InterruptManager:	
  8462                           
  8463                           ; 1 bytes @ 0x2
  8464  0072                     	ds	1
  8465  0073                     ??_PIN_MANAGER_Initialize:	
  8466  0073                     ??_OSCILLATOR_Initialize:	
  8467                           ; 1 bytes @ 0x3
  8468                           
  8469  0073                     ??_WDT_Initialize:	
  8470                           ; 1 bytes @ 0x3
  8471                           
  8472  0073                     ??_EUSART1_Initialize:	
  8473                           ; 1 bytes @ 0x3
  8474                           
  8475  0073                     ?_TMR1_SetInterruptHandler:	
  8476                           ; 1 bytes @ 0x3
  8477                           
  8478  0073                     ??_TMR1_StartTimer:	
  8479                           ; 1 bytes @ 0x3
  8480                           
  8481  0073                     ?_TMR0_SetInterruptHandler:	
  8482                           ; 1 bytes @ 0x3
  8483                           
  8484  0073                     ?_m_mem_set:	
  8485                           ; 1 bytes @ 0x3
  8486                           
  8487  0073                     ??_lcd_disp_all:	
  8488                           ; 1 bytes @ 0x3
  8489                           
  8490  0073                     ?_set_globle_ticker:	
  8491                           ; 1 bytes @ 0x3
  8492                           
  8493  0073                     ?_m_mem_cpy_len:	
  8494                           ; 1 bytes @ 0x3
  8495                           
  8496  0073                     ??_valve_off:	
  8497                           ; 1 bytes @ 0x3
  8498                           
  8499  0073                     ??_valve_on:	
  8500                           ; 1 bytes @ 0x3
  8501                           
  8502  0073                     ?_delay:	
  8503                           ; 1 bytes @ 0x3
  8504                           
  8505  0073                     ?_DATAEE_WriteByte:	
  8506                           ; 1 bytes @ 0x3
  8507                           
  8508  0073                     ??_DATAEE_ReadByte:	
  8509                           ; 1 bytes @ 0x3
  8510                           
  8511  0073                     ?_my_uart1_send_poll:	
  8512                           ; 1 bytes @ 0x3
  8513                           
  8514  0073                     ??_my_uart1_received_ready:	
  8515                           ; 1 bytes @ 0x3
  8516                           
  8517  0073                     ?_ui_head_hide:	
  8518                           ; 1 bytes @ 0x3
  8519                           
  8520  0073                     ?_ui_mem_cpy:	
  8521                           ; 1 bytes @ 0x3
  8522                           
  8523  0073                     ??_ui_key_process_up_down_main:	
  8524                           ; 1 bytes @ 0x3
  8525                           
  8526  0073                     ??_data_api_system_data_get:	
  8527                           ; 1 bytes @ 0x3
  8528                           
  8529  0073                     ?_app_flow_lookup:	
  8530                           ; 1 bytes @ 0x3
  8531                           
  8532  0073                     ??_app_flow_money_warning:	
  8533                           ; 1 bytes @ 0x3
  8534                           
  8535  0073                     ?_create_card_key_b:	
  8536                           ; 1 bytes @ 0x3
  8537                           
  8538  0073                     ??_lcd_disp_code_0:	
  8539                           ; 1 bytes @ 0x3
  8540                           
  8541  0073                     ??_lcd_disp_code_1:	
  8542                           ; 1 bytes @ 0x3
  8543                           
  8544  0073                     ??_lcd_disp_code_2:	
  8545                           ; 1 bytes @ 0x3
  8546                           
  8547  0073                     ??_lcd_disp_code_3:	
  8548                           ; 1 bytes @ 0x3
  8549                           
  8550  0073                     ??_lcd_disp_code_4:	
  8551                           ; 1 bytes @ 0x3
  8552                           
  8553  0073                     ??_lcd_disp_code_5:	
  8554                           ; 1 bytes @ 0x3
  8555                           
  8556  0073                     ??_lcd_disp_code_6:	
  8557                           ; 1 bytes @ 0x3
  8558                           
  8559  0073                     ??_lcd_disp_code_7:	
  8560                           ; 1 bytes @ 0x3
  8561                           
  8562  0073                     ??_led_port_init:	
  8563                           ; 1 bytes @ 0x3
  8564                           
  8565  0073                     ??_iic_send_ack:	
  8566                           ; 1 bytes @ 0x3
  8567                           
  8568  0073                     ??_iic_received_byte:	
  8569                           ; 1 bytes @ 0x3
  8570                           
  8571  0073                     ??_other_gpio_port_init:	
  8572                           ; 1 bytes @ 0x3
  8573                           
  8574  0073                     ??_valve_stop:	
  8575                           ; 1 bytes @ 0x3
  8576                           
  8577  0073                     ??_timer0_irq_callback:	
  8578                           ; 1 bytes @ 0x3
  8579                           
  8580  0073                     ??_mfrc522_bal_write_read_via_spi:	
  8581                           ; 1 bytes @ 0x3
  8582                           
  8583  0073                     ??_event_power_monitor:	
  8584                           ; 1 bytes @ 0x3
  8585                           
  8586  0073                     ??_event_door_monitor:	
  8587                           ; 1 bytes @ 0x3
  8588                           
  8589  0073                     ??___lmul:	
  8590                           ; 1 bytes @ 0x3
  8591                           
  8592  0073                     ??___aldiv:	
  8593                           ; 1 bytes @ 0x3
  8594                           
  8595  0073                     ??___almod:	
  8596                           ; 1 bytes @ 0x3
  8597                           
  8598  0073                     ?___lbmod:	
  8599                           ; 1 bytes @ 0x3
  8600                           
  8601  0073                     ??___llmod:	
  8602                           ; 1 bytes @ 0x3
  8603                           
  8604  0073                     ?_get_globle_ticker:	
  8605                           ; 1 bytes @ 0x3
  8606                           
  8607  0073                     ?_crc_sum:	
  8608                           ; 2 bytes @ 0x3
  8609                           
  8610  0073                     ?___wmul:	
  8611                           ; 2 bytes @ 0x3
  8612                           
  8613  0073                     ?___awdiv:	
  8614                           ; 2 bytes @ 0x3
  8615                           
  8616  0073                     ?___awmod:	
  8617                           ; 2 bytes @ 0x3
  8618                           
  8619  0073                     ?___lwdiv:	
  8620                           ; 2 bytes @ 0x3
  8621                           
  8622  0073                     ?___lwmod:	
  8623                           ; 2 bytes @ 0x3
  8624                           
  8625  0073                     DATAEE_WriteByte@bData:	
  8626                           ; 2 bytes @ 0x3
  8627                           
  8628  0073                     DATAEE_ReadByte@bAdd:	
  8629                           ; 1 bytes @ 0x3
  8630                           
  8631  0073                     my_uart1_send_poll@len:	
  8632                           ; 1 bytes @ 0x3
  8633                           
  8634  0073                     ui_head_hide@loc:	
  8635                           ; 1 bytes @ 0x3
  8636                           
  8637  0073                     create_card_key_b@uid:	
  8638                           ; 1 bytes @ 0x3
  8639                           
  8640  0073                     iic_send_ack@ack:	
  8641                           ; 1 bytes @ 0x3
  8642                           
  8643  0073                     ___lbmod@divisor:	
  8644                           ; 1 bytes @ 0x3
  8645                           
  8646  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  8647                           ; 1 bytes @ 0x3
  8648                           
  8649  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  8650                           ; 2 bytes @ 0x3
  8651                           
  8652  0073                     ui_mem_cpy@s:	
  8653                           ; 2 bytes @ 0x3
  8654                           
  8655  0073                     app_flow_lookup@adcValue:	
  8656                           ; 2 bytes @ 0x3
  8657                           
  8658  0073                     delay@t:	
  8659                           ; 2 bytes @ 0x3
  8660                           
  8661  0073                     m_mem_set@buf:	
  8662                           ; 2 bytes @ 0x3
  8663                           
  8664  0073                     m_mem_cpy_len@d:	
  8665                           ; 2 bytes @ 0x3
  8666                           
  8667  0073                     set_globle_ticker@tk:	
  8668                           ; 2 bytes @ 0x3
  8669                           
  8670  0073                     crc_sum@buf:	
  8671                           ; 2 bytes @ 0x3
  8672                           
  8673  0073                     ___wmul@multiplier:	
  8674                           ; 2 bytes @ 0x3
  8675                           
  8676  0073                     ___awdiv@divisor:	
  8677                           ; 2 bytes @ 0x3
  8678                           
  8679  0073                     ___awmod@divisor:	
  8680                           ; 2 bytes @ 0x3
  8681                           
  8682  0073                     ___lwdiv@divisor:	
  8683                           ; 2 bytes @ 0x3
  8684                           
  8685  0073                     ___lwmod@divisor:	
  8686                           ; 2 bytes @ 0x3
  8687                           
  8688  0073                     ___lmul@product:	
  8689                           ; 2 bytes @ 0x3
  8690                           
  8691                           
  8692                           ; 4 bytes @ 0x3
  8693  0073                     	ds	1
  8694  0074                     ?_data_api_read_eeprom:	
  8695  0074                     ??_DATAEE_WriteByte:	
  8696                           ; 1 bytes @ 0x4
  8697                           
  8698  0074                     ??_my_uart1_send_poll:	
  8699                           ; 1 bytes @ 0x4
  8700                           
  8701  0074                     ??_ui_head_hide:	
  8702                           ; 1 bytes @ 0x4
  8703                           
  8704  0074                     ??_in_app_vavle_off:	
  8705                           ; 1 bytes @ 0x4
  8706                           
  8707  0074                     ??_in_app_vavle_on:	
  8708                           ; 1 bytes @ 0x4
  8709                           
  8710  0074                     ??_timer1_irq_callback:	
  8711                           ; 1 bytes @ 0x4
  8712                           
  8713  0074                     ??___lbmod:	
  8714                           ; 1 bytes @ 0x4
  8715                           
  8716  0074                     DATAEE_WriteByte@bAdd:	
  8717                           ; 1 bytes @ 0x4
  8718                           
  8719  0074                     ui_key_process_up_down_main@up:	
  8720                           ; 1 bytes @ 0x4
  8721                           
  8722  0074                     create_card_key_b@cckey:	
  8723                           ; 1 bytes @ 0x4
  8724                           
  8725  0074                     lcd_disp_code_0@code:	
  8726                           ; 1 bytes @ 0x4
  8727                           
  8728  0074                     lcd_disp_code_1@code:	
  8729                           ; 1 bytes @ 0x4
  8730                           
  8731  0074                     lcd_disp_code_2@code:	
  8732                           ; 1 bytes @ 0x4
  8733                           
  8734  0074                     lcd_disp_code_3@code:	
  8735                           ; 1 bytes @ 0x4
  8736                           
  8737  0074                     lcd_disp_code_4@code:	
  8738                           ; 1 bytes @ 0x4
  8739                           
  8740  0074                     lcd_disp_code_5@code:	
  8741                           ; 1 bytes @ 0x4
  8742                           
  8743  0074                     lcd_disp_code_6@code:	
  8744                           ; 1 bytes @ 0x4
  8745                           
  8746  0074                     lcd_disp_code_7@code:	
  8747                           ; 1 bytes @ 0x4
  8748                           
  8749  0074                     iic_received_byte@ret:	
  8750                           ; 1 bytes @ 0x4
  8751                           
  8752  0074                     mfrc522_bal_write_read_via_spi@x:	
  8753                           ; 1 bytes @ 0x4
  8754                           
  8755  0074                     ___almod@counter:	
  8756                           ; 1 bytes @ 0x4
  8757                           
  8758  0074                     ___llmod@counter:	
  8759                           ; 1 bytes @ 0x4
  8760                           
  8761  0074                     data_api_read_eeprom@buf:	
  8762                           ; 1 bytes @ 0x4
  8763                           
  8764                           
  8765                           ; 2 bytes @ 0x4
  8766  0074                     	ds	1
  8767  0075                     ??_TMR1_Initialize:	
  8768  0075                     ??_TMR0_Initialize:	
  8769                           ; 1 bytes @ 0x5
  8770                           
  8771  0075                     ??_TMR1_SetInterruptHandler:	
  8772                           ; 1 bytes @ 0x5
  8773                           
  8774  0075                     ??_TMR0_SetInterruptHandler:	
  8775                           ; 1 bytes @ 0x5
  8776                           
  8777  0075                     ??_key_scan_call:	
  8778                           ; 1 bytes @ 0x5
  8779                           
  8780  0075                     ??_set_globle_ticker:	
  8781                           ; 1 bytes @ 0x5
  8782                           
  8783  0075                     ??_get_globle_ticker:	
  8784                           ; 1 bytes @ 0x5
  8785                           
  8786  0075                     ??_delay:	
  8787                           ; 1 bytes @ 0x5
  8788                           
  8789  0075                     ??_ui_mem_cpy:	
  8790                           ; 1 bytes @ 0x5
  8791                           
  8792  0075                     ??_create_card_key_b:	
  8793                           ; 1 bytes @ 0x5
  8794                           
  8795  0075                     ?_lcd_disp_code:	
  8796                           ; 1 bytes @ 0x5
  8797                           
  8798  0075                     ??_iic_start:	
  8799                           ; 1 bytes @ 0x5
  8800                           
  8801  0075                     ??_iic_stop:	
  8802                           ; 1 bytes @ 0x5
  8803                           
  8804  0075                     ??_iic_waite_ack:	
  8805                           ; 1 bytes @ 0x5
  8806                           
  8807  0075                     DATAEE_WriteByte@GIEBitValue:	
  8808                           ; 1 bytes @ 0x5
  8809                           
  8810  0075                     my_uart1_send_poll@buf:	
  8811                           ; 1 bytes @ 0x5
  8812                           
  8813  0075                     ui_head_hide@ret:	
  8814                           ; 1 bytes @ 0x5
  8815                           
  8816  0075                     in_app_vavle_off@op:	
  8817                           ; 1 bytes @ 0x5
  8818                           
  8819  0075                     in_app_vavle_on@op:	
  8820                           ; 1 bytes @ 0x5
  8821                           
  8822  0075                     app_flow_lookup@i:	
  8823                           ; 1 bytes @ 0x5
  8824                           
  8825  0075                     m_mem_set@x:	
  8826                           ; 1 bytes @ 0x5
  8827                           
  8828  0075                     lcd_disp_code@loc:	
  8829                           ; 1 bytes @ 0x5
  8830                           
  8831  0075                     iic_received_byte@i:	
  8832                           ; 1 bytes @ 0x5
  8833                           
  8834  0075                     mfrc522_bal_write_read_via_spi@rb:	
  8835                           ; 1 bytes @ 0x5
  8836                           
  8837  0075                     ___almod@sign:	
  8838                           ; 1 bytes @ 0x5
  8839                           
  8840  0075                     m_mem_cpy_len@s:	
  8841                           ; 1 bytes @ 0x5
  8842                           
  8843  0075                     get_globle_ticker@ret:	
  8844                           ; 2 bytes @ 0x5
  8845                           
  8846  0075                     crc_sum@len:	
  8847                           ; 2 bytes @ 0x5
  8848                           
  8849  0075                     ___wmul@multiplicand:	
  8850                           ; 2 bytes @ 0x5
  8851                           
  8852  0075                     ___awdiv@dividend:	
  8853                           ; 2 bytes @ 0x5
  8854                           
  8855  0075                     ___awmod@dividend:	
  8856                           ; 2 bytes @ 0x5
  8857                           
  8858  0075                     ___lwdiv@dividend:	
  8859                           ; 2 bytes @ 0x5
  8860                           
  8861  0075                     ___lwmod@dividend:	
  8862                           ; 2 bytes @ 0x5
  8863                           
  8864                           
  8865                           ; 2 bytes @ 0x5
  8866  0075                     	ds	1
  8867  0076                     ??_SYSTEM_Initialize:	
  8868  0076                     ??_data_api_write_eeprom:	
  8869                           ; 1 bytes @ 0x6
  8870                           
  8871  0076                     ??_app_flow_money_off:	
  8872                           ; 1 bytes @ 0x6
  8873                           
  8874  0076                     ??_lcd_disp_code:	
  8875                           ; 1 bytes @ 0x6
  8876                           
  8877  0076                     ??_iic_received_byte_if_ack:	
  8878                           ; 1 bytes @ 0x6
  8879                           
  8880  0076                     ui_head_hide@str:	
  8881                           ; 1 bytes @ 0x6
  8882                           
  8883  0076                     ui_mem_cpy@len:	
  8884                           ; 1 bytes @ 0x6
  8885                           
  8886  0076                     data_api_read_eeprom@addr:	
  8887                           ; 1 bytes @ 0x6
  8888                           
  8889  0076                     create_card_key_b@keyb:	
  8890                           ; 1 bytes @ 0x6
  8891                           
  8892  0076                     m_mem_set@len:	
  8893                           ; 1 bytes @ 0x6
  8894                           
  8895  0076                     lcd_disp_code@code:	
  8896                           ; 1 bytes @ 0x6
  8897                           
  8898  0076                     iic_waite_ack@timeout:	
  8899                           ; 1 bytes @ 0x6
  8900                           
  8901  0076                     mfrc522_bal_write_read_via_spi@i:	
  8902                           ; 1 bytes @ 0x6
  8903                           
  8904                           
  8905                           ; 1 bytes @ 0x6
  8906  0076                     	ds	1
  8907  0077                     ??_m_math_pow:	
  8908  0077                     ??_lcd_clear_buffer:	
  8909                           ; 1 bytes @ 0x7
  8910                           
  8911  0077                     ??_m_mem_set:	
  8912                           ; 1 bytes @ 0x7
  8913                           
  8914  0077                     ??_mfrc522_bal_read_reg:	
  8915                           ; 1 bytes @ 0x7
  8916                           
  8917  0077                     ??_ui_key_waite_up:	
  8918                           ; 1 bytes @ 0x7
  8919                           
  8920  0077                     ??_ui_key_waite_up_ex:	
  8921                           ; 1 bytes @ 0x7
  8922                           
  8923  0077                     ??_modbus_response_illgeal_function:	
  8924                           ; 1 bytes @ 0x7
  8925                           
  8926  0077                     ??_lcd_config:	
  8927                           ; 1 bytes @ 0x7
  8928                           
  8929  0077                     ??_lcd_init:	
  8930                           ; 1 bytes @ 0x7
  8931                           
  8932  0077                     ??_iic_send_byte:	
  8933                           ; 1 bytes @ 0x7
  8934                           
  8935  0077                     ?_mfrc522_bal_write_reg:	
  8936                           ; 1 bytes @ 0x7
  8937                           
  8938  0077                     ??_mfrc522_bal_write_reg_len:	
  8939                           ; 1 bytes @ 0x7
  8940                           
  8941  0077                     ??_mfrc522_bal_read_fifo_len_ex:	
  8942                           ; 1 bytes @ 0x7
  8943                           
  8944  0077                     ??_m_system_init:	
  8945                           ; 1 bytes @ 0x7
  8946                           
  8947  0077                     ??___wmul:	
  8948                           ; 1 bytes @ 0x7
  8949                           
  8950  0077                     ??___awdiv:	
  8951                           ; 1 bytes @ 0x7
  8952                           
  8953  0077                     ??___awmod:	
  8954                           ; 1 bytes @ 0x7
  8955                           
  8956  0077                     ??___lldiv:	
  8957                           ; 1 bytes @ 0x7
  8958                           
  8959  0077                     ??___lwdiv:	
  8960                           ; 1 bytes @ 0x7
  8961                           
  8962  0077                     ??___lwmod:	
  8963                           ; 1 bytes @ 0x7
  8964                           
  8965  0077                     ui_uint32_2_str@buf:	
  8966                           ; 1 bytes @ 0x7
  8967                           
  8968  0077                     ui_mem_cpy@d:	
  8969                           ; 1 bytes @ 0x7
  8970                           
  8971  0077                     data_api_write_eeprom@i:	
  8972                           ; 1 bytes @ 0x7
  8973                           
  8974  0077                     data_api_read_eeprom@len:	
  8975                           ; 1 bytes @ 0x7
  8976                           
  8977  0077                     create_card_key_b@i:	
  8978                           ; 1 bytes @ 0x7
  8979                           
  8980  0077                     m_mem_cpy_len@len:	
  8981                           ; 1 bytes @ 0x7
  8982                           
  8983  0077                     mfrc522_bal_write_reg@x:	
  8984                           ; 1 bytes @ 0x7
  8985                           
  8986                           
  8987                           ; 1 bytes @ 0x7
  8988  0077                     	ds	1
  8989  0078                     ??_ui_disp_flow_error:	
  8990  0078                     ??_ui_disp_clear_totale:	
  8991                           ; 1 bytes @ 0x8
  8992                           
  8993  0078                     ??_ui_disp_clear_balance:	
  8994                           ; 1 bytes @ 0x8
  8995                           
  8996  0078                     ??_ui_disp_set_transferMoneyLimit:	
  8997                           ; 1 bytes @ 0x8
  8998                           
  8999  0078                     ??_ui_disp_set_device_id:	
  9000                           ; 1 bytes @ 0x8
  9001                           
  9002  0078                     ??_ui_disp_set_balanceWarning:	
  9003                           ; 1 bytes @ 0x8
  9004                           
  9005  0078                     ??_ui_disp_set_balanceOff:	
  9006                           ; 1 bytes @ 0x8
  9007                           
  9008  0078                     ??_ui_disp_set_imd_flow_uint:	
  9009                           ; 1 bytes @ 0x8
  9010                           
  9011  0078                     ??_mfrc522_bal_write_reg:	
  9012                           ; 1 bytes @ 0x8
  9013                           
  9014                           
  9015                           	psect	cstackBANK0
  9016  0020                     __pcstackBANK0:	
  9017                           ; 1 bytes @ 0x8
  9018                           
  9019  0020                     ??_m_mem_cpy_len:	
  9020  0020                     ??_data_api_read_eeprom:	
  9021                           ; 1 bytes @ 0x0
  9022                           
  9023  0020                     ?_data_api_write_eeprom:	
  9024                           ; 1 bytes @ 0x0
  9025                           
  9026  0020                     ??_app_flow_lookup:	
  9027                           ; 1 bytes @ 0x0
  9028                           
  9029  0020                     ?_mfrc522_bal_write_reg_len:	
  9030                           ; 1 bytes @ 0x0
  9031                           
  9032  0020                     ?_mfrc522_bal_read_fifo_len_ex:	
  9033                           ; 1 bytes @ 0x0
  9034                           
  9035  0020                     ??_crc_sum:	
  9036                           ; 1 bytes @ 0x0
  9037                           
  9038  0020                     ?_ui_key_waite_up:	
  9039                           ; 1 bytes @ 0x0
  9040                           
  9041  0020                     ?_ui_key_waite_up_ex:	
  9042                           ; 2 bytes @ 0x0
  9043                           
  9044  0020                     ?___lmul:	
  9045                           ; 2 bytes @ 0x0
  9046                           
  9047  0020                     ?___aldiv:	
  9048                           ; 4 bytes @ 0x0
  9049                           
  9050  0020                     ?___almod:	
  9051                           ; 4 bytes @ 0x0
  9052                           
  9053  0020                     ?___llmod:	
  9054                           ; 4 bytes @ 0x0
  9055                           
  9056  0020                     lcd_disp_all@x:	
  9057                           ; 4 bytes @ 0x0
  9058                           
  9059  0020                     iic_send_byte@x:	
  9060                           ; 1 bytes @ 0x0
  9061                           
  9062  0020                     iic_received_byte_if_ack@ack:	
  9063                           ; 1 bytes @ 0x0
  9064                           
  9065  0020                     mfrc522_bal_write_reg@reg:	
  9066                           ; 1 bytes @ 0x0
  9067                           
  9068  0020                     mfrc522_bal_read_reg@reg:	
  9069                           ; 1 bytes @ 0x0
  9070                           
  9071  0020                     ___awdiv@counter:	
  9072                           ; 1 bytes @ 0x0
  9073                           
  9074  0020                     ___awmod@counter:	
  9075                           ; 1 bytes @ 0x0
  9076                           
  9077  0020                     ___lbmod@dividend:	
  9078                           ; 1 bytes @ 0x0
  9079                           
  9080  0020                     ___lwmod@counter:	
  9081                           ; 1 bytes @ 0x0
  9082                           
  9083  0020                     ui_key_waite_up_ex@tm:	
  9084                           ; 1 bytes @ 0x0
  9085                           
  9086  0020                     data_api_write_eeprom@buf:	
  9087                           ; 2 bytes @ 0x0
  9088                           
  9089  0020                     mfrc522_bal_write_reg_len@buf:	
  9090                           ; 2 bytes @ 0x0
  9091                           
  9092  0020                     mfrc522_bal_read_fifo_len_ex@buf:	
  9093                           ; 2 bytes @ 0x0
  9094                           
  9095  0020                     ___wmul@product:	
  9096                           ; 2 bytes @ 0x0
  9097                           
  9098  0020                     ___lwdiv@quotient:	
  9099                           ; 2 bytes @ 0x0
  9100                           
  9101  0020                     ___lmul@multiplier:	
  9102                           ; 2 bytes @ 0x0
  9103                           
  9104  0020                     ___aldiv@divisor:	
  9105                           ; 4 bytes @ 0x0
  9106                           
  9107  0020                     ___almod@divisor:	
  9108                           ; 4 bytes @ 0x0
  9109                           
  9110  0020                     ___llmod@divisor:	
  9111                           ; 4 bytes @ 0x0
  9112                           
  9113                           
  9114                           ; 4 bytes @ 0x0
  9115  0020                     	ds	1
  9116  0021                     ??_lcd_disp_refresh:	
  9117  0021                     ??_mfrc522_hal_reset_sf:	
  9118                           ; 1 bytes @ 0x1
  9119                           
  9120  0021                     data_api_read_eeprom@i:	
  9121                           ; 1 bytes @ 0x1
  9122                           
  9123  0021                     lcd_disp_all@i:	
  9124                           ; 1 bytes @ 0x1
  9125                           
  9126  0021                     iic_send_byte@i:	
  9127                           ; 1 bytes @ 0x1
  9128                           
  9129  0021                     iic_received_byte_if_ack@ret:	
  9130                           ; 1 bytes @ 0x1
  9131                           
  9132  0021                     mfrc522_bal_read_reg@x:	
  9133                           ; 1 bytes @ 0x1
  9134                           
  9135  0021                     ___awdiv@sign:	
  9136                           ; 1 bytes @ 0x1
  9137                           
  9138  0021                     ___awmod@sign:	
  9139                           ; 1 bytes @ 0x1
  9140                           
  9141  0021                     ___lbmod@counter:	
  9142                           ; 1 bytes @ 0x1
  9143                           
  9144                           
  9145                           ; 1 bytes @ 0x1
  9146  0021                     	ds	1
  9147  0022                     ?_lcd_disp_str:	
  9148  0022                     ?_adc_mcp3241_start_convert_16:	
  9149                           ; 1 bytes @ 0x2
  9150                           
  9151  0022                     ??_mfrc522_hal_antenna_on:	
  9152                           ; 1 bytes @ 0x2
  9153                           
  9154  0022                     ?_mfrc522_bal_set_bit_reg:	
  9155                           ; 1 bytes @ 0x2
  9156                           
  9157  0022                     ?_mfrc522_bal_clr_bit_reg:	
  9158                           ; 1 bytes @ 0x2
  9159                           
  9160  0022                     ??_mfrc522_hal_get_antenna_gain:	
  9161                           ; 1 bytes @ 0x2
  9162                           
  9163  0022                     ?_adc_mcp3241_read_convert_16:	
  9164                           ; 1 bytes @ 0x2
  9165                           
  9166  0022                     data_api_write_eeprom@addr:	
  9167                           ; 2 bytes @ 0x2
  9168                           
  9169  0022                     adc_mcp3241_start_convert_16@g:	
  9170                           ; 1 bytes @ 0x2
  9171                           
  9172  0022                     mfrc522_bal_write_reg_len@len:	
  9173                           ; 1 bytes @ 0x2
  9174                           
  9175  0022                     mfrc522_bal_read_fifo_len_ex@len:	
  9176                           ; 1 bytes @ 0x2
  9177                           
  9178  0022                     mfrc522_bal_set_bit_reg@bits:	
  9179                           ; 1 bytes @ 0x2
  9180                           
  9181  0022                     mfrc522_bal_clr_bit_reg@bits:	
  9182                           ; 1 bytes @ 0x2
  9183                           
  9184  0022                     ___lbmod@rem:	
  9185                           ; 1 bytes @ 0x2
  9186                           
  9187  0022                     ___lwdiv@counter:	
  9188                           ; 1 bytes @ 0x2
  9189                           
  9190  0022                     ui_key_waite_up@now:	
  9191                           ; 1 bytes @ 0x2
  9192                           
  9193  0022                     ui_key_waite_up_ex@now:	
  9194                           ; 2 bytes @ 0x2
  9195                           
  9196  0022                     lcd_disp_str@str:	
  9197                           ; 2 bytes @ 0x2
  9198                           
  9199  0022                     crc_sum@j:	
  9200                           ; 2 bytes @ 0x2
  9201                           
  9202  0022                     ___awdiv@quotient:	
  9203                           ; 2 bytes @ 0x2
  9204                           
  9205                           
  9206                           ; 2 bytes @ 0x2
  9207  0022                     	ds	1
  9208  0023                     ??_adc_mcp3241_start_convert_16:	
  9209  0023                     ??_mfrc522_bal_set_bit_reg:	
  9210                           ; 1 bytes @ 0x3
  9211                           
  9212  0023                     ??_mfrc522_bal_clr_bit_reg:	
  9213                           ; 1 bytes @ 0x3
  9214                           
  9215  0023                     data_api_write_eeprom@len:	
  9216                           ; 1 bytes @ 0x3
  9217                           
  9218  0023                     mfrc522_bal_write_reg_len@reg:	
  9219                           ; 1 bytes @ 0x3
  9220                           
  9221  0023                     mfrc522_bal_read_fifo_len_ex@rx_align:	
  9222                           ; 1 bytes @ 0x3
  9223                           
  9224  0023                     mfrc522_hal_antenna_on@t8:	
  9225                           ; 1 bytes @ 0x3
  9226                           
  9227  0023                     mfrc522_hal_get_antenna_gain@ret:	
  9228                           ; 1 bytes @ 0x3
  9229                           
  9230                           
  9231                           ; 1 bytes @ 0x3
  9232  0023                     	ds	1
  9233  0024                     ??_lcd_disp_str:	
  9234  0024                     ??_adc_mcp3241_read_convert_16:	
  9235                           ; 1 bytes @ 0x4
  9236                           
  9237  0024                     ?___bmul:	
  9238                           ; 1 bytes @ 0x4
  9239                           
  9240  0024                     adc_mcp3241_start_convert_16@b:	
  9241                           ; 1 bytes @ 0x4
  9242                           
  9243  0024                     mfrc522_bal_write_reg_len@i:	
  9244                           ; 1 bytes @ 0x4
  9245                           
  9246  0024                     mfrc522_bal_read_fifo_len_ex@reg:	
  9247                           ; 1 bytes @ 0x4
  9248                           
  9249  0024                     mfrc522_bal_set_bit_reg@tmp:	
  9250                           ; 1 bytes @ 0x4
  9251                           
  9252  0024                     mfrc522_bal_clr_bit_reg@tmp:	
  9253                           ; 1 bytes @ 0x4
  9254                           
  9255  0024                     ___bmul@multiplicand:	
  9256                           ; 1 bytes @ 0x4
  9257                           
  9258  0024                     crc_sum@i:	
  9259                           ; 1 bytes @ 0x4
  9260                           
  9261  0024                     ___lmul@multiplicand:	
  9262                           ; 2 bytes @ 0x4
  9263                           
  9264  0024                     ___aldiv@dividend:	
  9265                           ; 4 bytes @ 0x4
  9266                           
  9267  0024                     ___almod@dividend:	
  9268                           ; 4 bytes @ 0x4
  9269                           
  9270  0024                     ___llmod@dividend:	
  9271                           ; 4 bytes @ 0x4
  9272                           
  9273                           
  9274                           ; 4 bytes @ 0x4
  9275  0024                     	ds	1
  9276  0025                     ??___bmul:	
  9277  0025                     lcd_disp_str@loc:	
  9278                           ; 1 bytes @ 0x5
  9279                           
  9280  0025                     adc_mcp3241_start_convert_16@t8:	
  9281                           ; 1 bytes @ 0x5
  9282                           
  9283  0025                     mfrc522_bal_read_fifo_len_ex@adr:	
  9284                           ; 1 bytes @ 0x5
  9285                           
  9286  0025                     mfrc522_bal_set_bit_reg@reg:	
  9287                           ; 1 bytes @ 0x5
  9288                           
  9289  0025                     mfrc522_bal_clr_bit_reg@reg:	
  9290                           ; 1 bytes @ 0x5
  9291                           
  9292                           
  9293                           ; 1 bytes @ 0x5
  9294  0025                     	ds	1
  9295  0026                     ??_picc_stop_cryptol:	
  9296  0026                     ??_mfrc522_hal_set_antenna_gain:	
  9297                           ; 1 bytes @ 0x6
  9298                           
  9299  0026                     ?_mfrc522_hal_calculate_crc:	
  9300                           ; 1 bytes @ 0x6
  9301                           
  9302  0026                     lcd_disp_str@index:	
  9303                           ; 1 bytes @ 0x6
  9304                           
  9305  0026                     adc_mcp3241_read_convert_16@sta:	
  9306                           ; 1 bytes @ 0x6
  9307                           
  9308  0026                     mfrc522_bal_read_fifo_len_ex@i:	
  9309                           ; 1 bytes @ 0x6
  9310                           
  9311  0026                     ___bmul@product:	
  9312                           ; 1 bytes @ 0x6
  9313                           
  9314  0026                     mfrc522_hal_calculate_crc@data:	
  9315                           ; 1 bytes @ 0x6
  9316                           
  9317  0026                     crc_sum@crc:	
  9318                           ; 2 bytes @ 0x6
  9319                           
  9320                           
  9321                           ; 2 bytes @ 0x6
  9322  0026                     	ds	1
  9323  0027                     ?_ui_disp_str_num:	
  9324  0027                     ?_ui_disp_str_num_ex:	
  9325                           ; 1 bytes @ 0x7
  9326                           
  9327  0027                     mfrc522_hal_set_antenna_gain@gain:	
  9328                           ; 1 bytes @ 0x7
  9329                           
  9330  0027                     ___bmul@multiplier:	
  9331                           ; 1 bytes @ 0x7
  9332                           
  9333  0027                     ui_disp_str_num@str:	
  9334                           ; 1 bytes @ 0x7
  9335                           
  9336  0027                     ui_disp_str_num_ex@str:	
  9337                           ; 2 bytes @ 0x7
  9338                           
  9339  0027                     adc_mcp3241_read_convert_16@t16:	
  9340                           ; 2 bytes @ 0x7
  9341                           
  9342                           
  9343                           ; 2 bytes @ 0x7
  9344  0027                     	ds	1
  9345  0028                     ?_crc_append:	
  9346  0028                     ?_crc_verify:	
  9347                           ; 1 bytes @ 0x8
  9348                           
  9349  0028                     ??_mfrc522_hal_init:	
  9350                           ; 1 bytes @ 0x8
  9351                           
  9352  0028                     ?_lcd_set_com_seg:	
  9353                           ; 1 bytes @ 0x8
  9354                           
  9355  0028                     ?_m_math_pow:	
  9356                           ; 2 bytes @ 0x8
  9357                           
  9358  0028                     ?___lldiv:	
  9359                           ; 4 bytes @ 0x8
  9360                           
  9361  0028                     lcd_set_com_seg@seg:	
  9362                           ; 4 bytes @ 0x8
  9363                           
  9364  0028                     mfrc522_hal_calculate_crc@length:	
  9365                           ; 1 bytes @ 0x8
  9366                           
  9367  0028                     ___aldiv@counter:	
  9368                           ; 1 bytes @ 0x8
  9369                           
  9370  0028                     crc_verify@message:	
  9371                           ; 1 bytes @ 0x8
  9372                           
  9373  0028                     crc_append@message:	
  9374                           ; 2 bytes @ 0x8
  9375                           
  9376  0028                     m_math_pow@x:	
  9377                           ; 2 bytes @ 0x8
  9378                           
  9379  0028                     ___lldiv@divisor:	
  9380                           ; 4 bytes @ 0x8
  9381                           
  9382                           
  9383                           ; 4 bytes @ 0x8
  9384  0028                     	ds	1
  9385  0029                     ??_mfapi_pcd_init:	
  9386  0029                     lcd_set_com_seg@show:	
  9387                           ; 1 bytes @ 0x9
  9388                           
  9389  0029                     ___aldiv@sign:	
  9390                           ; 1 bytes @ 0x9
  9391                           
  9392  0029                     ui_disp_str_num@num:	
  9393                           ; 1 bytes @ 0x9
  9394                           
  9395  0029                     ui_disp_str_num_ex@num:	
  9396                           ; 2 bytes @ 0x9
  9397                           
  9398  0029                     mfrc522_hal_calculate_crc@result:	
  9399                           ; 2 bytes @ 0x9
  9400                           
  9401                           
  9402                           ; 2 bytes @ 0x9
  9403  0029                     	ds	1
  9404  002A                     ??_lcd_set_com_seg:	
  9405  002A                     mfapi_pcd_init@v:	
  9406                           ; 1 bytes @ 0xA
  9407                           
  9408  002A                     crc_verify@n:	
  9409                           ; 1 bytes @ 0xA
  9410                           
  9411  002A                     crc_append@n:	
  9412                           ; 2 bytes @ 0xA
  9413                           
  9414  002A                     ___aldiv@quotient:	
  9415                           ; 2 bytes @ 0xA
  9416                           
  9417                           
  9418                           ; 4 bytes @ 0xA
  9419  002A                     	ds	1
  9420  002B                     ??_ui_disp_str_num:	
  9421  002B                     ??_ui_disp_str_num_ex:	
  9422                           ; 1 bytes @ 0xB
  9423                           
  9424  002B                     ??_mfrc522_hal_calculate_crc:	
  9425                           ; 1 bytes @ 0xB
  9426                           
  9427                           
  9428                           ; 1 bytes @ 0xB
  9429  002B                     	ds	1
  9430  002C                     ??_crc_append:	
  9431  002C                     ??_crc_verify:	
  9432                           ; 1 bytes @ 0xC
  9433                           
  9434  002C                     m_math_pow@y:	
  9435                           ; 1 bytes @ 0xC
  9436                           
  9437  002C                     ___lldiv@dividend:	
  9438                           ; 1 bytes @ 0xC
  9439                           
  9440                           
  9441                           ; 4 bytes @ 0xC
  9442  002C                     	ds	1
  9443  002D                     ??_ui_start_display:	
  9444  002D                     ??_ui_disp_small_flow_how_care:	
  9445                           ; 1 bytes @ 0xD
  9446                           
  9447  002D                     ??_ui_disp_modbus_id:	
  9448                           ; 1 bytes @ 0xD
  9449                           
  9450  002D                     m_math_pow@ret:	
  9451                           ; 1 bytes @ 0xD
  9452                           
  9453                           
  9454                           ; 4 bytes @ 0xD
  9455  002D                     	ds	1
  9456  002E                     ??_ui_key_process_enter:	
  9457  002E                     lcd_set_com_seg@addr:	
  9458                           ; 1 bytes @ 0xE
  9459                           
  9460  002E                     mfrc522_hal_calculate_crc@t8:	
  9461                           ; 1 bytes @ 0xE
  9462                           
  9463                           
  9464                           ; 1 bytes @ 0xE
  9465  002E                     	ds	1
  9466  002F                     ui_start_display@dly:	
  9467  002F                     lcd_set_com_seg@com:	
  9468                           ; 1 bytes @ 0xF
  9469                           
  9470  002F                     mfrc522_hal_calculate_crc@i:	
  9471                           ; 1 bytes @ 0xF
  9472                           
  9473  002F                     crc_verify@crccal:	
  9474                           ; 2 bytes @ 0xF
  9475                           
  9476                           
  9477                           ; 2 bytes @ 0xF
  9478  002F                     	ds	1
  9479  0030                     lcd_set_com_seg@p:	
  9480  0030                     ___lldiv@quotient:	
  9481                           ; 1 bytes @ 0x10
  9482                           
  9483                           
  9484                           ; 4 bytes @ 0x10
  9485  0030                     	ds	1
  9486  0031                     ?_ui_uint32_2_str:	
  9487  0031                     ?_pcd_comm_with_picc:	
  9488                           ; 1 bytes @ 0x11
  9489                           
  9490  0031                     lcd_set_com_seg@bloc:	
  9491                           ; 1 bytes @ 0x11
  9492                           
  9493  0031                     pcd_comm_with_picc@waitIRQ:	
  9494                           ; 1 bytes @ 0x11
  9495                           
  9496  0031                     crc_verify@expected:	
  9497                           ; 1 bytes @ 0x11
  9498                           
  9499  0031                     crc_append@crc:	
  9500                           ; 2 bytes @ 0x11
  9501                           
  9502  0031                     ui_uint32_2_str@x:	
  9503                           ; 2 bytes @ 0x11
  9504                           
  9505                           
  9506                           ; 4 bytes @ 0x11
  9507  0031                     	ds	1
  9508  0032                     ?_lcd_disp_dp:	
  9509  0032                     ??_lcd_disp_cln:	
  9510                           ; 1 bytes @ 0x12
  9511                           
  9512  0032                     lcd_disp_dp@show:	
  9513                           ; 1 bytes @ 0x12
  9514                           
  9515  0032                     pcd_comm_with_picc@sbuf:	
  9516                           ; 1 bytes @ 0x12
  9517                           
  9518                           
  9519                           ; 2 bytes @ 0x12
  9520  0032                     	ds	1
  9521  0033                     ??_lcd_disp_dp:	
  9522  0033                     ?_data_api_calibration_table_data_save:	
  9523                           ; 1 bytes @ 0x13
  9524                           
  9525  0033                     ??_data_api_rt_data_save:	
  9526                           ; 1 bytes @ 0x13
  9527                           
  9528  0033                     ?_modbus_response_illgeal_function:	
  9529                           ; 1 bytes @ 0x13
  9530                           
  9531  0033                     ??_data_api_calibration_table_data_init:	
  9532                           ; 1 bytes @ 0x13
  9533                           
  9534  0033                     ??_data_api_system_data_init:	
  9535                           ; 1 bytes @ 0x13
  9536                           
  9537  0033                     modbus_response_illgeal_function@errcode:	
  9538                           ; 1 bytes @ 0x13
  9539                           
  9540  0033                     data_api_calibration_table_data_save@single:	
  9541                           ; 1 bytes @ 0x13
  9542                           
  9543                           
  9544                           ; 1 bytes @ 0x13
  9545  0033                     	ds	1
  9546  0034                     ??_data_api_calibration_table_data_save:	
  9547  0034                     modbus_response_illgeal_function@pmdbs:	
  9548                           ; 1 bytes @ 0x14
  9549                           
  9550  0034                     data_api_system_data_init@sta:	
  9551                           ; 1 bytes @ 0x14
  9552                           
  9553  0034                     lcd_disp_cln@show:	
  9554                           ; 1 bytes @ 0x14
  9555                           
  9556  0034                     pcd_comm_with_picc@slen:	
  9557                           ; 1 bytes @ 0x14
  9558                           
  9559  0034                     ___lldiv@counter:	
  9560                           ; 1 bytes @ 0x14
  9561                           
  9562                           
  9563                           ; 1 bytes @ 0x14
  9564  0034                     	ds	1
  9565  0035                     ??_app_flow_rt_volume_cal_ex:	
  9566  0035                     ??_app_flow_rt_balance_money_cal:	
  9567                           ; 1 bytes @ 0x15
  9568                           
  9569  0035                     ?_getRegisterVal:	
  9570                           ; 1 bytes @ 0x15
  9571                           
  9572  0035                     ?_app_flow_adc_2_flow:	
  9573                           ; 2 bytes @ 0x15
  9574                           
  9575  0035                     ?_app_flow_get_adcAverageValue:	
  9576                           ; 2 bytes @ 0x15
  9577                           
  9578  0035                     ui_uint32_2_str@len:	
  9579                           ; 2 bytes @ 0x15
  9580                           
  9581  0035                     modbus_response_illgeal_function@buf:	
  9582                           ; 1 bytes @ 0x15
  9583                           
  9584  0035                     lcd_disp_dp@dec:	
  9585                           ; 1 bytes @ 0x15
  9586                           
  9587  0035                     getRegisterVal@addr:	
  9588                           ; 1 bytes @ 0x15
  9589                           
  9590  0035                     pcd_comm_with_picc@rbuf:	
  9591                           ; 2 bytes @ 0x15
  9592                           
  9593                           
  9594                           ; 2 bytes @ 0x15
  9595  0035                     	ds	1
  9596  0036                     ??_ui_uint32_2_str:	
  9597  0036                     ??_modbus_response_write_single_register:	
  9598                           ; 1 bytes @ 0x16
  9599                           
  9600  0036                     ??_modbus_response_read_clib_data:	
  9601                           ; 1 bytes @ 0x16
  9602                           
  9603  0036                     data_api_rt_data_save@stp:	
  9604                           ; 1 bytes @ 0x16
  9605                           
  9606                           
  9607                           ; 2 bytes @ 0x16
  9608  0036                     	ds	1
  9609  0037                     ??_app_flow_adc_2_flow:	
  9610  0037                     ??_app_flow_get_adcAverageValue:	
  9611                           ; 1 bytes @ 0x17
  9612                           
  9613  0037                     getRegisterVal@tempData:	
  9614                           ; 1 bytes @ 0x17
  9615                           
  9616  0037                     pcd_comm_with_picc@rlen:	
  9617                           ; 1 bytes @ 0x17
  9618                           
  9619                           
  9620                           ; 1 bytes @ 0x17
  9621  0037                     	ds	1
  9622  0038                     ??_getRegisterVal:	
  9623  0038                     modbus_response_write_single_register@len:	
  9624                           ; 1 bytes @ 0x18
  9625                           
  9626  0038                     pcd_comm_with_picc@validBits:	
  9627                           ; 1 bytes @ 0x18
  9628                           
  9629                           
  9630                           ; 1 bytes @ 0x18
  9631  0038                     	ds	1
  9632  0039                     data_api_calibration_table_data_init@sta:	
  9633  0039                     pcd_comm_with_picc@rxAlign:	
  9634                           ; 1 bytes @ 0x19
  9635                           
  9636  0039                     modbus_response_write_single_register@startAddr:	
  9637                           ; 1 bytes @ 0x19
  9638                           
  9639                           
  9640                           ; 2 bytes @ 0x19
  9641  0039                     	ds	1
  9642  003A                     ??_ui_disp_flow:	
  9643  003A                     ??_ui_disp_totale_v:	
  9644                           ; 1 bytes @ 0x1A
  9645                           
  9646  003A                     ??_ui_disp_transfer_money:	
  9647                           ; 1 bytes @ 0x1A
  9648                           
  9649  003A                     ??_ui_disp_balance_and_volume:	
  9650                           ; 1 bytes @ 0x1A
  9651                           
  9652  003A                     ??_ui_disp_set_line:	
  9653                           ; 1 bytes @ 0x1A
  9654                           
  9655  003A                     ??_ui_disp_set_price:	
  9656                           ; 1 bytes @ 0x1A
  9657                           
  9658  003A                     ??_ui_disp_set_calib:	
  9659                           ; 1 bytes @ 0x1A
  9660                           
  9661  003A                     pcd_comm_with_picc@checkCRC:	
  9662                           ; 1 bytes @ 0x1A
  9663                           
  9664  003A                     modbus_response_read_clib_data@startAddr:	
  9665                           ; 1 bytes @ 0x1A
  9666                           
  9667  003A                     data_api_calibration_table_data_init@stp:	
  9668                           ; 2 bytes @ 0x1A
  9669                           
  9670                           
  9671                           ; 2 bytes @ 0x1A
  9672  003A                     	ds	1
  9673  003B                     ??_pcd_comm_with_picc:	
  9674  003B                     modbus_response_write_single_register@pmdbs:	
  9675                           ; 1 bytes @ 0x1B
  9676                           
  9677                           
  9678                           ; 1 bytes @ 0x1B
  9679  003B                     	ds	1
  9680  003C                     ui_disp_flow@decnum:	
  9681  003C                     ui_disp_totale_v@decnum:	
  9682                           ; 1 bytes @ 0x1C
  9683                           
  9684  003C                     ui_disp_balance_and_volume@ret:	
  9685                           ; 1 bytes @ 0x1C
  9686                           
  9687  003C                     modbus_response_write_single_register@rbuf:	
  9688                           ; 1 bytes @ 0x1C
  9689                           
  9690  003C                     modbus_response_read_clib_data@pmdbs:	
  9691                           ; 1 bytes @ 0x1C
  9692                           
  9693  003C                     data_api_calibration_table_data_init@i:	
  9694                           ; 1 bytes @ 0x1C
  9695                           
  9696  003C                     ui_disp_set_line@t16:	
  9697                           ; 1 bytes @ 0x1C
  9698                           
  9699  003C                     getRegisterVal@result:	
  9700                           ; 2 bytes @ 0x1C
  9701                           
  9702                           
  9703                           ; 2 bytes @ 0x1C
  9704  003C                     	ds	1
  9705  003D                     ui_disp_set_calib@loc:	
  9706  003D                     pcd_comm_with_picc@txLastBits:	
  9707                           ; 1 bytes @ 0x1D
  9708                           
  9709  003D                     modbus_response_read_clib_data@len:	
  9710                           ; 1 bytes @ 0x1D
  9711                           
  9712  003D                     ui_disp_flow@flw:	
  9713                           ; 2 bytes @ 0x1D
  9714                           
  9715  003D                     _app_flow_adc_2_flow$4477:	
  9716                           ; 4 bytes @ 0x1D
  9717                           
  9718                           
  9719                           ; 4 bytes @ 0x1D
  9720  003D                     	ds	1
  9721  003E                     pcd_comm_with_picc@bitFraming:	
  9722  003E                     getRegisterVal@tempAddr:	
  9723                           ; 1 bytes @ 0x1E
  9724                           
  9725                           
  9726                           ; 2 bytes @ 0x1E
  9727  003E                     	ds	1
  9728  003F                     modbus_response_read_clib_data@buf:	
  9729  003F                     app_flow_get_adcAverageValue@maxIndex:	
  9730                           ; 1 bytes @ 0x1F
  9731                           
  9732  003F                     _pcd_comm_with_picc$3211:	
  9733                           ; 1 bytes @ 0x1F
  9734                           
  9735                           
  9736                           ; 2 bytes @ 0x1F
  9737  003F                     	ds	1
  9738  0040                     ??_modbus_response_command:	
  9739  0040                     app_flow_get_adcAverageValue@minIndex:	
  9740                           ; 1 bytes @ 0x20
  9741                           
  9742                           
  9743                           ; 1 bytes @ 0x20
  9744  0040                     	ds	1
  9745  0041                     ??_ui_disp_menu:	
  9746  0041                     pcd_comm_with_picc@cmd:	
  9747                           ; 1 bytes @ 0x21
  9748                           
  9749  0041                     app_flow_adc_2_flow@flw2:	
  9750                           ; 1 bytes @ 0x21
  9751                           
  9752  0041                     app_flow_get_adcAverageValue@min:	
  9753                           ; 2 bytes @ 0x21
  9754                           
  9755                           
  9756                           ; 2 bytes @ 0x21
  9757  0041                     	ds	1
  9758  0042                     modbus_response_command@tmpAddr:	
  9759  0042                     data_api_calibration_table_data_save@stp:	
  9760                           ; 2 bytes @ 0x22
  9761                           
  9762  0042                     pcd_comm_with_picc@controlBuffer:	
  9763                           ; 2 bytes @ 0x22
  9764                           
  9765                           
  9766                           ; 2 bytes @ 0x22
  9767  0042                     	ds	1
  9768  0043                     ?_key_process_up_down_variable_speed_ex:	
  9769  0043                     app_flow_get_adcAverageValue@j:	
  9770                           ; 1 bytes @ 0x23
  9771                           
  9772  0043                     key_process_up_down_variable_speed_ex@min:	
  9773                           ; 1 bytes @ 0x23
  9774                           
  9775  0043                     app_flow_adc_2_flow@ad2:	
  9776                           ; 2 bytes @ 0x23
  9777                           
  9778                           
  9779                           ; 2 bytes @ 0x23
  9780  0043                     	ds	1
  9781  0044                     data_api_calibration_table_data_save@loc:	
  9782  0044                     pcd_comm_with_picc@errorRegValue:	
  9783                           ; 1 bytes @ 0x24
  9784                           
  9785  0044                     modbus_response_command@startAddr:	
  9786                           ; 1 bytes @ 0x24
  9787                           
  9788  0044                     app_flow_get_adcAverageValue@max:	
  9789                           ; 2 bytes @ 0x24
  9790                           
  9791                           
  9792                           ; 2 bytes @ 0x24
  9793  0044                     	ds	1
  9794  0045                     data_api_calibration_table_data_save@i:	
  9795  0045                     pcd_comm_with_picc@status:	
  9796                           ; 1 bytes @ 0x25
  9797                           
  9798  0045                     key_process_up_down_variable_speed_ex@max:	
  9799                           ; 1 bytes @ 0x25
  9800                           
  9801  0045                     app_flow_adc_2_flow@flw1:	
  9802                           ; 2 bytes @ 0x25
  9803                           
  9804                           
  9805                           ; 2 bytes @ 0x25
  9806  0045                     	ds	1
  9807  0046                     ??_ui_key_process_down:	
  9808  0046                     ??_ui_key_process_cancel:	
  9809                           ; 1 bytes @ 0x26
  9810                           
  9811  0046                     ??_ui_key_set_process:	
  9812                           ; 1 bytes @ 0x26
  9813                           
  9814  0046                     ??_modbus_response_write_clib_data:	
  9815                           ; 1 bytes @ 0x26
  9816                           
  9817  0046                     ??_data_api_flash_process:	
  9818                           ; 1 bytes @ 0x26
  9819                           
  9820  0046                     modbus_response_command@pmdbs:	
  9821                           ; 1 bytes @ 0x26
  9822                           
  9823  0046                     pcd_comm_with_picc@i:	
  9824                           ; 1 bytes @ 0x26
  9825                           
  9826  0046                     app_flow_get_adcAverageValue@ret:	
  9827                           ; 2 bytes @ 0x26
  9828                           
  9829                           
  9830                           ; 4 bytes @ 0x26
  9831  0046                     	ds	1
  9832  0047                     key_process_up_down_variable_speed_ex@up:	
  9833  0047                     ui_key_set_process@ret:	
  9834                           ; 1 bytes @ 0x27
  9835                           
  9836  0047                     modbus_response_command@i:	
  9837                           ; 1 bytes @ 0x27
  9838                           
  9839  0047                     app_flow_adc_2_flow@ad1:	
  9840                           ; 1 bytes @ 0x27
  9841                           
  9842                           
  9843                           ; 2 bytes @ 0x27
  9844  0047                     	ds	1
  9845  0048                     ??_key_process_up_down_variable_speed_ex:	
  9846  0048                     modbus_response_command@len:	
  9847                           ; 1 bytes @ 0x28
  9848                           
  9849  0048                     pcd_comm_with_picc@_validBits:	
  9850                           ; 1 bytes @ 0x28
  9851                           
  9852  0048                     modbus_response_write_clib_data@t16:	
  9853                           ; 1 bytes @ 0x28
  9854                           
  9855                           
  9856                           ; 2 bytes @ 0x28
  9857  0048                     	ds	1
  9858  0049                     modbus_response_command@rbuf:	
  9859  0049                     app_flow_adc_2_flow@index:	
  9860                           ; 1 bytes @ 0x29
  9861                           
  9862  0049                     pcd_comm_with_picc@tmp8:	
  9863                           ; 1 bytes @ 0x29
  9864                           
  9865                           
  9866                           ; 1 bytes @ 0x29
  9867  0049                     	ds	1
  9868  004A                     ?_picc_authenticate:	
  9869  004A                     ?_mifare_read:	
  9870                           ; 1 bytes @ 0x2A
  9871                           
  9872  004A                     ?_picc_select:	
  9873                           ; 1 bytes @ 0x2A
  9874                           
  9875  004A                     ??_picc_halt_a:	
  9876                           ; 1 bytes @ 0x2A
  9877                           
  9878  004A                     ?_picc_req_a_or_wakeup_a:	
  9879                           ; 1 bytes @ 0x2A
  9880                           
  9881  004A                     ?_pcd_mifare_transceive:	
  9882                           ; 1 bytes @ 0x2A
  9883                           
  9884  004A                     app_flow_get_adcAverageValue@i:	
  9885                           ; 1 bytes @ 0x2A
  9886                           
  9887  004A                     picc_req_a_or_wakeup_a@bufferATQA:	
  9888                           ; 1 bytes @ 0x2A
  9889                           
  9890  004A                     picc_select@validBits:	
  9891                           ; 1 bytes @ 0x2A
  9892                           
  9893  004A                     picc_authenticate@blockAddr:	
  9894                           ; 1 bytes @ 0x2A
  9895                           
  9896  004A                     mifare_read@buffer:	
  9897                           ; 1 bytes @ 0x2A
  9898                           
  9899  004A                     modbus_response_command@tempData:	
  9900                           ; 1 bytes @ 0x2A
  9901                           
  9902  004A                     modbus_response_write_clib_data@startAddr:	
  9903                           ; 2 bytes @ 0x2A
  9904                           
  9905  004A                     pcd_mifare_transceive@sendData:	
  9906                           ; 2 bytes @ 0x2A
  9907                           
  9908                           
  9909                           ; 2 bytes @ 0x2A
  9910  004A                     	ds	1
  9911  004B                     ??_picc_select:	
  9912  004B                     ??_flow_sampling_process:	
  9913                           ; 1 bytes @ 0x2B
  9914                           
  9915  004B                     picc_req_a_or_wakeup_a@bufferSize:	
  9916                           ; 1 bytes @ 0x2B
  9917                           
  9918  004B                     mifare_read@bufferSize:	
  9919                           ; 1 bytes @ 0x2B
  9920                           
  9921  004B                     picc_authenticate@key:	
  9922                           ; 1 bytes @ 0x2B
  9923                           
  9924                           
  9925                           ; 2 bytes @ 0x2B
  9926  004B                     	ds	1
  9927  004C                     ??_mifare_read:	
  9928  004C                     ??_picc_req_a_or_wakeup_a:	
  9929                           ; 1 bytes @ 0x2C
  9930                           
  9931  004C                     key_process_up_down_variable_speed_ex@key:	
  9932                           ; 1 bytes @ 0x2C
  9933                           
  9934  004C                     modbus_response_write_clib_data@buf:	
  9935                           ; 1 bytes @ 0x2C
  9936                           
  9937  004C                     flow_sampling_process@i:	
  9938                           ; 1 bytes @ 0x2C
  9939                           
  9940  004C                     pcd_mifare_transceive@sendLen:	
  9941                           ; 1 bytes @ 0x2C
  9942                           
  9943                           
  9944                           ; 1 bytes @ 0x2C
  9945  004C                     	ds	1
  9946  004D                     key_process_up_down_variable_speed_ex@change:	
  9947  004D                     modbus_response_write_clib_data@pmdbs:	
  9948                           ; 1 bytes @ 0x2D
  9949                           
  9950  004D                     picc_authenticate@uid:	
  9951                           ; 1 bytes @ 0x2D
  9952                           
  9953  004D                     pcd_mifare_transceive@acceptTimeout:	
  9954                           ; 1 bytes @ 0x2D
  9955                           
  9956  004D                     picc_halt_a@buffer:	
  9957                           ; 1 bytes @ 0x2D
  9958                           
  9959                           
  9960                           ; 4 bytes @ 0x2D
  9961  004D                     	ds	1
  9962  004E                     ??_picc_authenticate:	
  9963  004E                     ??_pcd_mifare_transceive:	
  9964                           ; 1 bytes @ 0x2E
  9965                           
  9966  004E                     ?_modbus_response_process:	
  9967                           ; 1 bytes @ 0x2E
  9968                           
  9969  004E                     key_process_up_down_variable_speed_ex@speed:	
  9970                           ; 1 bytes @ 0x2E
  9971                           
  9972  004E                     modbus_response_process@rlen:	
  9973                           ; 2 bytes @ 0x2E
  9974                           
  9975                           
  9976                           ; 2 bytes @ 0x2E
  9977  004E                     	ds	1
  9978  004F                     mifare_read@blockAddr:	
  9979                           
  9980                           ; 1 bytes @ 0x2F
  9981  004F                     	ds	1
  9982  0050                     ??_modbus_response_process:	
  9983  0050                     ui_key_process_cancel@ret:	
  9984                           ; 1 bytes @ 0x30
  9985                           
  9986  0050                     picc_req_a_or_wakeup_a@cmd:	
  9987                           ; 1 bytes @ 0x30
  9988                           
  9989  0050                     mifare_read@result:	
  9990                           ; 1 bytes @ 0x30
  9991                           
  9992  0050                     key_process_up_down_variable_speed_ex@t32:	
  9993                           ; 1 bytes @ 0x30
  9994                           
  9995                           
  9996                           ; 2 bytes @ 0x30
  9997  0050                     	ds	1
  9998  0051                     modbus_response_process@resp:	
  9999  0051                     picc_req_a_or_wakeup_a@__cmd:	
 10000                           ; 1 bytes @ 0x31
 10001                           
 10002  0051                     picc_halt_a@result:	
 10003                           ; 1 bytes @ 0x31
 10004                           
 10005  0051                     picc_authenticate@sendData:	
 10006                           ; 1 bytes @ 0x31
 10007                           
 10008                           
 10009                           ; 12 bytes @ 0x31
 10010  0051                     	ds	1
 10011  0052                     key_process_up_down_variable_speed_ex@val:	
 10012  0052                     modbus_response_process@pmdbs:	
 10013                           ; 1 bytes @ 0x32
 10014                           
 10015  0052                     picc_req_a_or_wakeup_a@status:	
 10016                           ; 1 bytes @ 0x32
 10017                           
 10018                           
 10019                           ; 1 bytes @ 0x32
 10020  0052                     	ds	1
 10021  0053                     ??_ui_key_process_up_down:	
 10022  0053                     modbus_response_process@rbuf:	
 10023                           ; 1 bytes @ 0x33
 10024                           
 10025  0053                     picc_req_a_or_wakeup_a@validBits:	
 10026                           ; 1 bytes @ 0x33
 10027                           
 10028  0053                     pcd_mifare_transceive@cmdBuffer:	
 10029                           ; 1 bytes @ 0x33
 10030                           
 10031                           
 10032                           ; 18 bytes @ 0x33
 10033  0053                     	ds	1
 10034  0054                     ??_mfapi_is_new_card_present:	
 10035  0054                     ui_key_process_up_down@up:	
 10036                           ; 1 bytes @ 0x34
 10037                           
 10038                           
 10039                           ; 1 bytes @ 0x34
 10040  0054                     	ds	1
 10041  0055                     ??_ui_key_process:	
 10042                           
 10043                           ; 1 bytes @ 0x35
 10044  0055                     	ds	1
 10045  0056                     ui_key_process@t16:	
 10046                           
 10047                           ; 2 bytes @ 0x36
 10048  0056                     	ds	1
 10049  0057                     mfapi_is_new_card_present@cmd:	
 10050                           
 10051                           ; 1 bytes @ 0x37
 10052  0057                     	ds	1
 10053  0058                     mfapi_is_new_card_present@bufferATQA:	
 10054                           
 10055                           ; 2 bytes @ 0x38
 10056  0058                     	ds	2
 10057  005A                     mfapi_is_new_card_present@result:	
 10058                           
 10059                           ; 1 bytes @ 0x3A
 10060  005A                     	ds	1
 10061  005B                     mfapi_is_new_card_present@bufferSize:	
 10062                           
 10063                           ; 1 bytes @ 0x3B
 10064  005B                     	ds	2
 10065  005D                     picc_authenticate@command:	
 10066                           
 10067                           ; 1 bytes @ 0x3D
 10068  005D                     	ds	1
 10069  005E                     picc_authenticate@waitIRQ:	
 10070                           
 10071                           ; 1 bytes @ 0x3E
 10072  005E                     	ds	1
 10073  005F                     picc_authenticate@i:	
 10074                           
 10075                           ; 1 bytes @ 0x3F
 10076  005F                     	ds	1
 10077  0060                     ??_rfid_comm_process_read_inc:	
 10078  0060                     ??_rfid_comm_process_read_dec:	
 10079                           ; 1 bytes @ 0x40
 10080                           
 10081                           
 10082                           ; 1 bytes @ 0x40
 10083  0060                     	ds	3
 10084  0063                     rfid_comm_process_read_inc@ret:	
 10085  0063                     rfid_comm_process_read_dec@ret:	
 10086                           ; 1 bytes @ 0x43
 10087                           
 10088                           
 10089                           ; 1 bytes @ 0x43
 10090  0063                     	ds	2
 10091  0065                     pcd_mifare_transceive@waitIRq:	
 10092                           
 10093                           ; 1 bytes @ 0x45
 10094  0065                     	ds	1
 10095  0066                     pcd_mifare_transceive@validBits:	
 10096                           
 10097                           ; 1 bytes @ 0x46
 10098  0066                     	ds	1
 10099  0067                     pcd_mifare_transceive@cmdBufferSize:	
 10100                           
 10101                           ; 1 bytes @ 0x47
 10102  0067                     	ds	1
 10103  0068                     pcd_mifare_transceive@result:	
 10104                           
 10105                           ; 1 bytes @ 0x48
 10106  0068                     	ds	1
 10107  0069                     ?_mifare_write:	
 10108  0069                     mifare_write@buffer:	
 10109                           ; 1 bytes @ 0x49
 10110                           
 10111                           
 10112                           ; 1 bytes @ 0x49
 10113  0069                     	ds	1
 10114  006A                     mifare_write@bufferSize:	
 10115                           
 10116                           ; 1 bytes @ 0x4A
 10117  006A                     	ds	1
 10118  006B                     ??_mifare_write:	
 10119                           
 10120                           ; 1 bytes @ 0x4B
 10121  006B                     	ds	2
 10122  006D                     rfid_comm_process_read_header@ret:	
 10123  006D                     rfid_comm_process_recharge@ret:	
 10124                           ; 1 bytes @ 0x4D
 10125                           
 10126                           
 10127                           ; 1 bytes @ 0x4D
 10128  006D                     	ds	1
 10129  006E                     rfid_comm_process_recharge@stpInc:	
 10130  006E                     rfid_comm_process_read_header@stp:	
 10131                           ; 1 bytes @ 0x4E
 10132                           
 10133                           
 10134                           ; 2 bytes @ 0x4E
 10135  006E                     	ds	1
 10136  006F                     rfid_comm_process_recharge@stpDec:	
 10137                           
 10138                           ; 1 bytes @ 0x4F
 10139  006F                     	ds	1
 10140                           
 10141                           	psect	maintext
 10142  1000                     __pmaintext:	
 10143 ;;
 10144 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 10145 ;;
 10146 ;; *************** function _main *****************
 10147 ;; Defined at:
 10148 ;;		line 55 in file "main.c"
 10149 ;; Parameters:    Size  Location     Type
 10150 ;;		None
 10151 ;; Auto vars:     Size  Location     Type
 10152 ;;  tm              1    2[BANK3 ] unsigned char 
 10153 ;; Return value:  Size  Location     Type
 10154 ;;                  1    wreg      void 
 10155 ;; Registers used:
 10156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10157 ;; Tracked objects:
 10158 ;;		On entry : B1F/0
 10159 ;;		On exit  : 0/0
 10160 ;;		Unchanged: 0/0
 10161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10163 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 10164 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0
 10165 ;;      Totals:         0       0       1       0       1       0       0       0       0       0       0       0       
      +0
 10166 ;;Total ram usage:        2 bytes
 10167 ;; Hardware stack levels required when called:   12
 10168 ;; This function calls:
 10169 ;;		_data_api_calibration_table_data_init
 10170 ;;		_data_api_flash_process
 10171 ;;		_data_api_system_data_init
 10172 ;;		_delay
 10173 ;;		_event_door_monitor
 10174 ;;		_event_power_monitor
 10175 ;;		_flow_sampling_process
 10176 ;;		_in_app_vavle_on
 10177 ;;		_m_system_init
 10178 ;;		_mfapi_pcd_init
 10179 ;;		_modbus_response_process
 10180 ;;		_my_uart1_received_ready
 10181 ;;		_rfid_comm_process
 10182 ;;		_timer0_irq_callback
 10183 ;;		_timer1_irq_callback
 10184 ;;		_ui_disp_menu
 10185 ;;		_ui_key_process
 10186 ;;		_ui_start_display
 10187 ;; This function is called by:
 10188 ;;		Startup code after reset
 10189 ;; This function uses a non-reentrant model
 10190 ;;
 10191                           
 10192                           
 10193                           ;psect for function _main
 10194  1000                     _main:	
 10195                           
 10196                           ;main.c: 57: uint8_t tm=0;
 10197                           
 10198                           ;incstack = 0
 10199                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10200  1000  0023               	movlb	3	; select bank3
 10201  1001  01D6               	clrf	main@tm^(0+384)
 10202                           
 10203                           ;main.c: 58: m_system_init();
 10204  1002  31BC  24CC  3190   	fcall	_m_system_init
 10205                           
 10206                           ;main.c: 59: ui_start_display();
 10207  1005  31B7  27BD  3190   	fcall	_ui_start_display
 10208                           
 10209                           ;main.c: 60: do{PIE1bits.RC1IE = 0;}while(0);;
 10210  1008  0021               	movlb	1	; select bank1
 10211  1009  1291               	bcf	17,5	;volatile
 10212                           
 10213                           ;main.c: 62: data_api_system_data_init();
 10214  100A  31A9  2178  3190   	fcall	_data_api_system_data_init
 10215                           
 10216                           ;main.c: 63: data_api_calibration_table_data_init();
 10217  100D  319C  2472  3190   	fcall	_data_api_calibration_table_data_init
 10218                           
 10219                           ;main.c: 65: mfapi_pcd_init();
 10220  1010  31BB  2336  3190   	fcall	_mfapi_pcd_init
 10221                           
 10222                           ;main.c: 67: my_uart1_received_ready();
 10223  1013  31BB  231A  3190   	fcall	_my_uart1_received_ready
 10224                           
 10225                           ;main.c: 68: calVolumeTimeSec=0;
 10226  1016  0022               	movlb	2	; select bank2
 10227  1017  01C1               	clrf	_calVolumeTimeSec^(0+256)
 10228                           
 10229                           ;main.c: 69: Event &= ~(uint8_t)(0x01<<7);
 10230  1018  307F               	movlw	127
 10231  1019  0021               	movlb	1	; select bank1
 10232  101A  00EF               	movwf	??_main^(0+128)
 10233  101B  086F               	movf	??_main^(0+128),w
 10234  101C  05C7               	andwf	_Event^(0+128),f
 10235                           
 10236                           ;main.c: 70: menu=mainSystemData.menuBackUp;
 10237  101D  0024               	movlb	4	; select bank4
 10238  101E  0842               	movf	(_mainSystemData^(0+512)+34),w
 10239  101F  0021               	movlb	1	; select bank1
 10240  1020  00EF               	movwf	??_main^(0+128)
 10241  1021  086F               	movf	??_main^(0+128),w
 10242  1022  00C3               	movwf	_menu^(0+128)
 10243                           
 10244                           ;main.c: 71: bkupMenu=menu;
 10245  1023  0843               	movf	_menu^(0+128),w
 10246  1024  00EF               	movwf	??_main^(0+128)
 10247  1025  086F               	movf	??_main^(0+128),w
 10248  1026  00C2               	movwf	_bkupMenu^(0+128)
 10249  1027                     l17145:	
 10250                           ;main.c: 72: while (1){
 10251                           
 10252                           
 10253                           ;main.c: 73: event_door_monitor();
 10254  1027  31BA  22F1  3190   	fcall	_event_door_monitor
 10255                           
 10256                           ;main.c: 74: event_power_monitor();
 10257  102A  31BB  23A5  3190   	fcall	_event_power_monitor
 10258                           
 10259                           ;main.c: 75: if(Event & (0x01<<4)){timer0_irq_callback();}
 10260  102D  0021               	movlb	1	; select bank1
 10261  102E  1E47               	btfss	_Event^(0+128),4
 10262  102F  2833               	goto	l17153
 10263  1030  31B2  22DB  3190   	fcall	_timer0_irq_callback
 10264  1033                     l17153:	
 10265                           
 10266                           ;main.c: 76: if(Event & (0x01<<5)){timer1_irq_callback();}
 10267  1033  0021               	movlb	1	; select bank1
 10268  1034  1EC7               	btfss	_Event^(0+128),5
 10269  1035  2839               	goto	l17157
 10270  1036  31AB  23BE  3190   	fcall	_timer1_irq_callback
 10271  1039                     l17157:	
 10272                           
 10273                           ;main.c: 77: if(Event & (0x01<<0)){rfid_comm_process(); }
 10274  1039  0021               	movlb	1	; select bank1
 10275  103A  1C47               	btfss	_Event^(0+128),0
 10276  103B  283F               	goto	l17161
 10277  103C  319D  2548  3190   	fcall	_rfid_comm_process
 10278  103F                     l17161:	
 10279                           
 10280                           ;main.c: 78: if(Event & (0x01<<1)){
 10281  103F  0021               	movlb	1	; select bank1
 10282  1040  1CC7               	btfss	_Event^(0+128),1
 10283  1041  285F               	goto	l17175
 10284                           
 10285                           ;main.c: 79: tm++;
 10286  1042  3001               	movlw	1
 10287  1043  00EF               	movwf	??_main^(0+128)
 10288  1044  086F               	movf	??_main^(0+128),w
 10289  1045  0023               	movlb	3	; select bank3
 10290  1046  07D6               	addwf	main@tm^(0+384),f
 10291                           
 10292                           ;main.c: 80: if(tm>=10){
 10293  1047  300A               	movlw	10
 10294  1048  0256               	subwf	main@tm^(0+384),w
 10295  1049  1C03               	skipc
 10296  104A  285C               	goto	l17173
 10297                           
 10298                           ;main.c: 81: tm=0;
 10299  104B  01D6               	clrf	main@tm^(0+384)
 10300                           
 10301                           ;main.c: 83: if(deviceStatus.bits.noEnough){
 10302  104C  0021               	movlb	1	; select bank1
 10303  104D  18C0               	btfsc	_deviceStatus^(0+128),1
 10304  104E  2857               	goto	L1
 10305                           
 10306                           ;main.c: 86: else if(warningStatus.bits.moneyLowWarning){
 10307                           
 10308                           ;main.c: 85: }
 10309                           
 10310                           ;main.c: 84: do { LATAbits.LATA0 = 1; } while(0);;
 10311  104F  0022               	movlb	2	; select bank2
 10312  1050  1E38               	btfss	_warningStatus^(0+256),4
 10313  1051  285B               	goto	l2602
 10314                           
 10315                           ;main.c: 87: do { LATAbits.LATA0 = ~LATAbits.LATA0; } while(0);;
 10316  1052  1003               	clrc
 10317  1053  1C0C               	btfss	12,0	;volatile
 10318  1054  1403               	setc
 10319  1055  1C03               	btfss	3,0
 10320  1056  285A               	goto	u16350
 10321  1057                     L1:	
 10322  1057  0022               	movlb	2	; select bank2
 10323  1058  140C               	bsf	12,0	;volatile
 10324  1059  285C               	goto	l17173
 10325  105A                     u16350:	
 10326  105A  0022               	movlb	2	; select bank2
 10327  105B                     l2602:	
 10328                           ;main.c: 89: do { LATAbits.LATA0 = 0; } while(0);;
 10329                           
 10330                           ;main.c: 88: }else {
 10331                           
 10332  105B  100C               	bcf	12,0	;volatile
 10333  105C                     l17173:	
 10334                           
 10335                           ;main.c: 90: }
 10336                           ;main.c: 91: }
 10337                           ;main.c: 92: flow_sampling_process();
 10338  105C  31AF  2786  3190   	fcall	_flow_sampling_process
 10339  105F                     l17175:	
 10340                           
 10341                           ;main.c: 93: }
 10342                           ;main.c: 94: if(Event & (0x01<<6)){
 10343  105F  0021               	movlb	1	; select bank1
 10344  1060  1F47               	btfss	_Event^(0+128),6
 10345  1061  2871               	goto	l17183
 10346                           
 10347                           ;main.c: 95: if(flashOpStr.op==enFLASH_NOTHING){
 10348  1062  0022               	movlb	2	; select bank2
 10349  1063  0857               	movf	(_flashOpStr^(0+256)+20),w
 10350  1064  1D03               	btfss	3,2
 10351  1065  2871               	goto	l17183
 10352                           
 10353                           ;main.c: 96: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10354  1066  3002               	movlw	2
 10355  1067  0021               	movlb	1	; select bank1
 10356  1068  00EF               	movwf	??_main^(0+128)
 10357  1069  086F               	movf	??_main^(0+128),w
 10358  106A  0022               	movlb	2	; select bank2
 10359  106B  00D7               	movwf	(_flashOpStr^(0+256)+20)
 10360                           
 10361                           ;main.c: 98: Event &= ~(0x01<<6);
 10362  106C  30BF               	movlw	191
 10363  106D  0021               	movlb	1	; select bank1
 10364  106E  00EF               	movwf	??_main^(0+128)
 10365  106F  086F               	movf	??_main^(0+128),w
 10366  1070  05C7               	andwf	_Event^(0+128),f
 10367  1071                     l17183:	
 10368                           
 10369                           ;main.c: 99: }
 10370                           ;main.c: 100: }
 10371                           ;main.c: 101: if(Event & (0x01<<3)){
 10372  1071  0021               	movlb	1	; select bank1
 10373  1072  1DC7               	btfss	_Event^(0+128),3
 10374  1073  2877               	goto	l17187
 10375                           
 10376                           ;main.c: 102: ui_disp_menu();
 10377  1074  319F  2707  3190   	fcall	_ui_disp_menu
 10378  1077                     l17187:	
 10379                           
 10380                           ;main.c: 103: }
 10381                           ;main.c: 104: if(Event & (0x01<<2)){
 10382  1077  0021               	movlb	1	; select bank1
 10383  1078  1D47               	btfss	_Event^(0+128),2
 10384  1079  2897               	goto	l17197
 10385                           
 10386                           ;main.c: 105: do{PIE1bits.RC1IE = 0;}while(0);
 10387  107A  1291               	bcf	17,5	;volatile
 10388                           
 10389                           ;main.c: 106: modbus_response_process(uart1Buffer,uart1ReceivedCount);
 10390  107B  0022               	movlb	2	; select bank2
 10391  107C  082D               	movf	(_uart1ReceivedCount+1)^(0+256),w
 10392  107D  0020               	movlb	0	; select bank0
 10393  107E  00CF               	movwf	modbus_response_process@rlen+1
 10394  107F  0022               	movlb	2	; select bank2
 10395  1080  082C               	movf	_uart1ReceivedCount^(0+256),w
 10396  1081  0020               	movlb	0	; select bank0
 10397  1082  00CE               	movwf	modbus_response_process@rlen
 10398  1083  30A0               	movlw	160
 10399  1084  31AB  2364  3190   	fcall	_modbus_response_process
 10400                           
 10401                           ;main.c: 107: Event &= ~(0x01<<2);
 10402  1087  30FB               	movlw	251
 10403  1088  0021               	movlb	1	; select bank1
 10404  1089  00EF               	movwf	??_main^(0+128)
 10405  108A  086F               	movf	??_main^(0+128),w
 10406  108B  05C7               	andwf	_Event^(0+128),f
 10407                           
 10408                           ;main.c: 108: delay(1847);
 10409  108C  3037               	movlw	55
 10410  108D  00F3               	movwf	delay@t
 10411  108E  3007               	movlw	7
 10412  108F  00F4               	movwf	delay@t+1
 10413  1090  31BB  2389  3190   	fcall	_delay
 10414                           
 10415                           ;main.c: 109: my_uart1_received_ready();
 10416  1093  31BB  231A  3190   	fcall	_my_uart1_received_ready
 10417                           
 10418                           ;main.c: 110: }
 10419  1096  289A               	goto	l17199
 10420  1097                     l17197:	
 10421                           
 10422                           ;main.c: 111: else {
 10423                           ;main.c: 112: ui_key_process();
 10424  1097  31AE  2696  3190   	fcall	_ui_key_process
 10425  109A                     l17199:	
 10426                           
 10427                           ;main.c: 113: }
 10428                           ;main.c: 114: if(bkupMenu!=mainSystemData.menuBackUp){
 10429  109A  0024               	movlb	4	; select bank4
 10430  109B  0842               	movf	(_mainSystemData^(0+512)+34),w
 10431  109C  0021               	movlb	1	; select bank1
 10432  109D  0642               	xorwf	_bkupMenu^(0+128),w
 10433  109E  1903               	skipnz
 10434  109F  28AC               	goto	l17207
 10435                           
 10436                           ;main.c: 115: if(flashOpStr.op == enFLASH_NOTHING){
 10437  10A0  0022               	movlb	2	; select bank2
 10438  10A1  0857               	movf	(_flashOpStr^(0+256)+20),w
 10439  10A2  1D03               	btfss	3,2
 10440  10A3  28AC               	goto	l17207
 10441                           
 10442                           ;main.c: 116: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10443  10A4  3002               	movlw	2
 10444  10A5  0021               	movlb	1	; select bank1
 10445  10A6  00EF               	movwf	??_main^(0+128)
 10446  10A7  086F               	movf	??_main^(0+128),w
 10447  10A8  0022               	movlb	2	; select bank2
 10448  10A9  00D7               	movwf	(_flashOpStr^(0+256)+20)
 10449                           
 10450                           ;main.c: 117: flashOpStr.len=0;
 10451  10AA  01C5               	clrf	(_flashOpStr^(0+256)+2)
 10452  10AB  01C6               	clrf	((_flashOpStr+1)^(0+256)+2)
 10453  10AC                     l17207:	
 10454                           
 10455                           ;main.c: 118: }
 10456                           ;main.c: 119: }
 10457                           ;main.c: 120: if(flashOpStr.op!=enFLASH_NOTHING){
 10458  10AC  0022               	movlb	2	; select bank2
 10459  10AD  0857               	movf	(_flashOpStr^(0+256)+20),w
 10460  10AE  1903               	btfsc	3,2
 10461  10AF  28B5               	goto	l17213
 10462                           
 10463                           ;main.c: 123: data_api_flash_process();
 10464  10B0  31BD  25D4  3190   	fcall	_data_api_flash_process
 10465                           
 10466                           ;main.c: 124: flashOpStr.op = enFLASH_NOTHING;
 10467  10B3  0022               	movlb	2	; select bank2
 10468  10B4  01D7               	clrf	(_flashOpStr^(0+256)+20)
 10469  10B5                     l17213:	
 10470                           
 10471                           ;main.c: 125: }
 10472                           ;main.c: 126: if(deviceStatus.bits.noEnough==0){
 10473  10B5  0021               	movlb	1	; select bank1
 10474  10B6  18C0               	btfsc	_deviceStatus^(0+128),1
 10475  10B7  28BC               	goto	l17217
 10476                           
 10477                           ;main.c: 127: in_app_vavle_on(ON_REASON_HA);
 10478  10B8  3003               	movlw	3
 10479  10B9  31BF  271D  3190   	fcall	_in_app_vavle_on
 10480  10BC                     l17217:	
 10481                           
 10482                           ;main.c: 128: }
 10483                           ;main.c: 129: if(noKeyEventTimeOut==0 ){
 10484  10BC  0022               	movlb	2	; select bank2
 10485  10BD  086C               	movf	_noKeyEventTimeOut^(0+256),w
 10486  10BE  1D03               	btfss	3,2
 10487  10BF  2827               	goto	l17145
 10488                           
 10489                           ;main.c: 130: if(menu!=0x50){
 10490  10C0  3050               	movlw	80
 10491  10C1  0021               	movlb	1	; select bank1
 10492  10C2  0643               	xorwf	_menu^(0+128),w
 10493  10C3  1903               	btfsc	3,2
 10494  10C4  2827               	goto	l17145
 10495                           
 10496                           ;main.c: 131: menu=bkupMenu;
 10497  10C5  0842               	movf	_bkupMenu^(0+128),w
 10498  10C6  00EF               	movwf	??_main^(0+128)
 10499  10C7  086F               	movf	??_main^(0+128),w
 10500  10C8  00C3               	movwf	_menu^(0+128)
 10501  10C9  2827               	goto	l17145
 10502  10CA                     __end_of_main:	
 10503                           
 10504                           	psect	text1
 10505  37BD                     __ptext1:	
 10506 ;; *************** function _ui_start_display *****************
 10507 ;; Defined at:
 10508 ;;		line 118 in file "src/api/ui.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;		None
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  dly             1   15[BANK0 ] unsigned char 
 10513 ;; Return value:  Size  Location     Type
 10514 ;;                  1    wreg      void 
 10515 ;; Registers used:
 10516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10517 ;; Tracked objects:
 10518 ;;		On entry : 0/0
 10519 ;;		On exit  : 0/0
 10520 ;;		Unchanged: 0/0
 10521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10524 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10525 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 10526 ;;Total ram usage:        3 bytes
 10527 ;; Hardware stack levels used:    1
 10528 ;; Hardware stack levels required when called:    6
 10529 ;; This function calls:
 10530 ;;		_lcd_disp_all
 10531 ;;		_lcd_disp_str
 10532 ;;		_ui_disp_str_num
 10533 ;; This function is called by:
 10534 ;;		_main
 10535 ;; This function uses a non-reentrant model
 10536 ;;
 10537                           
 10538                           
 10539                           ;psect for function _ui_start_display
 10540  37BD                     _ui_start_display:	
 10541                           
 10542                           ;ui.c: 119: uint8_t dly=9;
 10543                           
 10544                           ;incstack = 0
 10545                           ; Regs used in _ui_start_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10546  37BD  3009               	movlw	9
 10547  37BE  0020               	movlb	0	; select bank0
 10548  37BF  00AD               	movwf	??_ui_start_display
 10549  37C0  082D               	movf	??_ui_start_display,w
 10550  37C1  00AF               	movwf	ui_start_display@dly
 10551                           
 10552                           ;ui.c: 120: lcd_disp_all(0x00);;
 10553  37C2  3000               	movlw	0
 10554  37C3  31BE  2660  31B7   	fcall	_lcd_disp_all
 10555  37C6                     l385:	
 10556                           ;ui.c: 121: while((Event & (0x01<<5))==0);
 10557                           
 10558  37C6  0021               	movlb	1	; select bank1
 10559  37C7  1EC7               	btfss	_Event^(0+128),5
 10560  37C8  2FC6               	goto	l385
 10561                           
 10562                           ;ui.c: 122: Event &= ~(0x01<<5);
 10563  37C9  30DF               	movlw	223
 10564  37CA  0020               	movlb	0	; select bank0
 10565  37CB  00AD               	movwf	??_ui_start_display
 10566  37CC  082D               	movf	??_ui_start_display,w
 10567  37CD  0021               	movlb	1	; select bank1
 10568  37CE  05C7               	andwf	_Event^(0+128),f
 10569                           
 10570                           ;ui.c: 123: lcd_disp_str((uint8_t*) " -hell0-");
 10571  37CF  30D9               	movlw	low (STR_1| (0+32768))
 10572  37D0  0020               	movlb	0	; select bank0
 10573  37D1  00A2               	movwf	lcd_disp_str@str
 10574  37D2  30B8               	movlw	high (STR_1| (0+32768))
 10575  37D3  00A3               	movwf	lcd_disp_str@str+1
 10576  37D4  31A8  20E8  31B7   	fcall	_lcd_disp_str
 10577  37D7                     l388:	
 10578                           ;ui.c: 124: while((Event & (0x01<<5))==0);
 10579                           
 10580  37D7  0021               	movlb	1	; select bank1
 10581  37D8  1EC7               	btfss	_Event^(0+128),5
 10582  37D9  2FD7               	goto	l388
 10583                           
 10584                           ;ui.c: 125: Event &= ~(0x01<<5);
 10585  37DA  30DF               	movlw	223
 10586  37DB  0020               	movlb	0	; select bank0
 10587  37DC  00AD               	movwf	??_ui_start_display
 10588  37DD  082D               	movf	??_ui_start_display,w
 10589  37DE  0021               	movlb	1	; select bank1
 10590  37DF  05C7               	andwf	_Event^(0+128),f
 10591  37E0                     l391:	
 10592                           ;ui.c: 127: while(dly>0){
 10593                           
 10594  37E0  0020               	movlb	0	; select bank0
 10595  37E1  082F               	movf	ui_start_display@dly,w
 10596  37E2  1903               	btfsc	3,2
 10597  37E3  0008               	return
 10598                           
 10599                           ;ui.c: 128: ui_disp_str_num((uint8_t*)" cs700", dly);
 10600  37E4  301E               	movlw	low (STR_2| (0+32768))
 10601  37E5  0020               	movlb	0	; select bank0
 10602  37E6  00A7               	movwf	ui_disp_str_num@str
 10603  37E7  30B9               	movlw	high (STR_2| (0+32768))
 10604  37E8  00A8               	movwf	ui_disp_str_num@str+1
 10605  37E9  082F               	movf	ui_start_display@dly,w
 10606  37EA  00AD               	movwf	??_ui_start_display
 10607  37EB  01AE               	clrf	??_ui_start_display+1
 10608  37EC  082D               	movf	??_ui_start_display,w
 10609  37ED  00A9               	movwf	ui_disp_str_num@num
 10610  37EE  082E               	movf	??_ui_start_display+1,w
 10611  37EF  00AA               	movwf	ui_disp_str_num@num+1
 10612  37F0  31A5  2531  31B7   	fcall	_ui_disp_str_num
 10613  37F3                     l393:	
 10614                           ;ui.c: 130: while((Event & (0x01<<5))==0);
 10615                           
 10616  37F3  0021               	movlb	1	; select bank1
 10617  37F4  1EC7               	btfss	_Event^(0+128),5
 10618  37F5  2FF3               	goto	l393
 10619                           
 10620                           ;ui.c: 131: Event &= ~(0x01<<5);
 10621  37F6  30DF               	movlw	223
 10622  37F7  0020               	movlb	0	; select bank0
 10623  37F8  00AD               	movwf	??_ui_start_display
 10624  37F9  082D               	movf	??_ui_start_display,w
 10625  37FA  0021               	movlb	1	; select bank1
 10626  37FB  05C7               	andwf	_Event^(0+128),f
 10627                           
 10628                           ;ui.c: 132: dly--;
 10629  37FC  3001               	movlw	1
 10630  37FD  0020               	movlb	0	; select bank0
 10631  37FE  02AF               	subwf	ui_start_display@dly,f
 10632  37FF  2FE0               	goto	l391
 10633  3800                     __end_of_ui_start_display:	
 10634                           
 10635                           	psect	text2
 10636  2E96                     __ptext2:	
 10637 ;; *************** function _ui_key_process *****************
 10638 ;; Defined at:
 10639 ;;		line 473 in file "src/api/ui_key.c"
 10640 ;; Parameters:    Size  Location     Type
 10641 ;;		None
 10642 ;; Auto vars:     Size  Location     Type
 10643 ;;  t16             2   54[BANK0 ] unsigned int 
 10644 ;; Return value:  Size  Location     Type
 10645 ;;                  1    wreg      void 
 10646 ;; Registers used:
 10647 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10648 ;; Tracked objects:
 10649 ;;		On entry : 0/0
 10650 ;;		On exit  : 0/0
 10651 ;;		Unchanged: 0/0
 10652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10654 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10656 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 10657 ;;Total ram usage:        3 bytes
 10658 ;; Hardware stack levels used:    1
 10659 ;; Hardware stack levels required when called:   11
 10660 ;; This function calls:
 10661 ;;		_key_scan_call
 10662 ;;		_ui_disp_menu
 10663 ;;		_ui_key_process_cancel
 10664 ;;		_ui_key_process_down
 10665 ;;		_ui_key_process_enter
 10666 ;;		_ui_key_process_up_down
 10667 ;;		_ui_key_set_process
 10668 ;;		_ui_key_waite_up
 10669 ;;		_ui_key_waite_up_ex
 10670 ;; This function is called by:
 10671 ;;		_main
 10672 ;; This function uses a non-reentrant model
 10673 ;;
 10674                           
 10675                           
 10676                           ;psect for function _ui_key_process
 10677  2E96                     _ui_key_process:	
 10678                           
 10679                           ;ui_key.c: 475: uint16_t t16;
 10680                           ;ui_key.c: 476: key_scan_call();
 10681                           
 10682                           ;incstack = 0
 10683                           ; Regs used in _ui_key_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10684  2E96  31BF  27D9  31AE   	fcall	_key_scan_call
 10685                           
 10686                           ;ui_key.c: 477: if(KeyValue)noKeyEventTimeOut=30;
 10687  2E99  0021               	movlb	1	; select bank1
 10688  2E9A  0841               	movf	_KeyValue^(0+128),w
 10689  2E9B  1903               	btfsc	3,2
 10690  2E9C  2EF7               	goto	l17111
 10691  2E9D  301E               	movlw	30
 10692  2E9E  0020               	movlb	0	; select bank0
 10693  2E9F  00D5               	movwf	??_ui_key_process
 10694  2EA0  0855               	movf	??_ui_key_process,w
 10695  2EA1  0022               	movlb	2	; select bank2
 10696  2EA2  00EC               	movwf	_noKeyEventTimeOut^(0+256)
 10697                           
 10698                           ;ui_key.c: 478: switch (KeyValue) {
 10699  2EA3  2EF7               	goto	l17111
 10700  2EA4                     l17079:	
 10701                           ;ui_key.c: 479: case (1<<2): ui_key_process_up_down(1);
 10702                           
 10703  2EA4  3001               	movlw	1
 10704  2EA5  319E  2621  31AE   	fcall	_ui_key_process_up_down
 10705                           
 10706                           ;ui_key.c: 480: break;
 10707  2EA8  2F03               	goto	l17113
 10708  2EA9                     l17081:	
 10709                           ;ui_key.c: 481: case (1<<1):
 10710                           
 10711                           
 10712                           ;ui_key.c: 482: if(menu<3){
 10713  2EA9  3003               	movlw	3
 10714  2EAA  0021               	movlb	1	; select bank1
 10715  2EAB  0243               	subwf	_menu^(0+128),w
 10716  2EAC  1803               	skipnc
 10717  2EAD  2EC2               	goto	l17089
 10718                           
 10719                           ;ui_key.c: 483: t16=ui_key_waite_up_ex(1000);
 10720  2EAE  30E8               	movlw	232
 10721  2EAF  0020               	movlb	0	; select bank0
 10722  2EB0  00A0               	movwf	ui_key_waite_up_ex@tm
 10723  2EB1  3003               	movlw	3
 10724  2EB2  00A1               	movwf	ui_key_waite_up_ex@tm+1
 10725  2EB3  31B4  24BE  31AE   	fcall	_ui_key_waite_up_ex
 10726  2EB6  0020               	movlb	0	; select bank0
 10727  2EB7  0821               	movf	?_ui_key_waite_up_ex+1,w
 10728  2EB8  00D7               	movwf	ui_key_process@t16+1
 10729  2EB9  0820               	movf	?_ui_key_waite_up_ex,w
 10730  2EBA  00D6               	movwf	ui_key_process@t16
 10731                           
 10732                           ;ui_key.c: 484: if(t16>=1000)return;
 10733  2EBB  3003               	movlw	3
 10734  2EBC  0257               	subwf	ui_key_process@t16+1,w
 10735  2EBD  30E8               	movlw	232
 10736  2EBE  1903               	skipnz
 10737  2EBF  0256               	subwf	ui_key_process@t16,w
 10738  2EC0  1803               	btfsc	3,0
 10739  2EC1  0008               	return
 10740  2EC2                     l17089:	
 10741                           
 10742                           ;ui_key.c: 485: }
 10743                           ;ui_key.c: 486: if(!ui_key_process_down())
 10744  2EC2  31A3  23F1  31AE   	fcall	_ui_key_process_down
 10745  2EC5  3A00               	xorlw	0
 10746  2EC6  1D03               	skipz
 10747  2EC7  2F03               	goto	l17113
 10748                           
 10749                           ;ui_key.c: 487: ui_key_process_up_down(0);
 10750  2EC8  3000               	movlw	0
 10751  2EC9  319E  2621  31AE   	fcall	_ui_key_process_up_down
 10752                           
 10753                           ;ui_key.c: 488: break;
 10754  2ECC  2F03               	goto	l17113
 10755  2ECD                     l17093:	
 10756                           ;ui_key.c: 489: case (1<<0):
 10757                           
 10758                           
 10759                           ;ui_key.c: 490: __t16=ui_key_waite_up();
 10760  2ECD  31B4  242B  31AE   	fcall	_ui_key_waite_up
 10761  2ED0  0020               	movlb	0	; select bank0
 10762  2ED1  0821               	movf	?_ui_key_waite_up+1,w
 10763  2ED2  00F9               	movwf	___t16+1
 10764  2ED3  0820               	movf	?_ui_key_waite_up,w
 10765  2ED4  00F8               	movwf	___t16
 10766                           
 10767                           ;ui_key.c: 491: if(__t16>=2000){
 10768  2ED5  3007               	movlw	7
 10769  2ED6  0279               	subwf	___t16+1,w
 10770  2ED7  30D0               	movlw	208
 10771  2ED8  1903               	skipnz
 10772  2ED9  0278               	subwf	___t16,w
 10773  2EDA  1C03               	skipc
 10774  2EDB  2EED               	goto	l17105
 10775                           
 10776                           ;ui_key.c: 492: if(KeyValue==((1<<0)+(1<<2))){
 10777  2EDC  3005               	movlw	5
 10778  2EDD  0021               	movlb	1	; select bank1
 10779  2EDE  0641               	xorwf	_KeyValue^(0+128),w
 10780  2EDF  1D03               	btfss	3,2
 10781  2EE0  2EE5               	goto	l17101
 10782                           
 10783                           ;ui_key.c: 493: ui_key_process_enter();
 10784  2EE1  3188  2022  31AE   	fcall	_ui_key_process_enter
 10785                           
 10786                           ;ui_key.c: 494: }else if(KeyValue==((1<<0))){
 10787  2EE4  2EF0               	goto	l17107
 10788  2EE5                     l17101:	
 10789  2EE5  0021               	movlb	1	; select bank1
 10790  2EE6  0341               	decf	_KeyValue^(0+128),w
 10791  2EE7  1D03               	btfss	3,2
 10792  2EE8  2EF0               	goto	l17107
 10793                           
 10794                           ;ui_key.c: 495: ui_key_set_process();
 10795  2EE9  3196  2630  31AE   	fcall	_ui_key_set_process
 10796                           
 10797                           ;ui_key.c: 497: }
 10798                           ;ui_key.c: 499: }else{
 10799  2EEC  2EF0               	goto	l17107
 10800  2EED                     l17105:	
 10801                           
 10802                           ;ui_key.c: 500: ui_key_process_cancel();
 10803  2EED  3191  21D0  31AE   	fcall	_ui_key_process_cancel
 10804  2EF0                     l17107:	
 10805                           
 10806                           ;ui_key.c: 502: }
 10807                           ;ui_key.c: 503: KeyValue=0x08;
 10808  2EF0  3008               	movlw	8
 10809  2EF1  0020               	movlb	0	; select bank0
 10810  2EF2  00D5               	movwf	??_ui_key_process
 10811  2EF3  0855               	movf	??_ui_key_process,w
 10812  2EF4  0021               	movlb	1	; select bank1
 10813  2EF5  00C1               	movwf	_KeyValue^(0+128)
 10814                           
 10815                           ;ui_key.c: 506: }
 10816                           
 10817                           ;ui_key.c: 505: default:break;
 10818                           
 10819                           ;ui_key.c: 504: break;
 10820  2EF6  2F03               	goto	l17113
 10821  2EF7                     l17111:	
 10822  2EF7  0021               	movlb	1	; select bank1
 10823  2EF8  0841               	movf	_KeyValue^(0+128),w
 10824                           
 10825                           ; Switch size 1, requested type "space"
 10826                           ; Number of cases is 3, Range of values is 1 to 4
 10827                           ; switch strategies available:
 10828                           ; Name         Instructions Cycles
 10829                           ; simple_byte           10     6 (average)
 10830                           ; direct_byte           17     9 (fixed)
 10831                           ; jumptable            263     9 (fixed)
 10832                           ;	Chosen strategy is simple_byte
 10833  2EF9  3A01               	xorlw	1	; case 1
 10834  2EFA  1903               	skipnz
 10835  2EFB  2ECD               	goto	l17093
 10836  2EFC  3A03               	xorlw	3	; case 2
 10837  2EFD  1903               	skipnz
 10838  2EFE  2EA9               	goto	l17081
 10839  2EFF  3A06               	xorlw	6	; case 4
 10840  2F00  1903               	skipnz
 10841  2F01  2EA4               	goto	l17079
 10842  2F02  2F03               	goto	l17113
 10843  2F03                     l17113:	
 10844                           
 10845                           ;ui_key.c: 508: if (KeyValue){
 10846  2F03  0021               	movlb	1	; select bank1
 10847  2F04  0841               	movf	_KeyValue^(0+128),w
 10848  2F05  1903               	btfsc	3,2
 10849  2F06  0008               	return
 10850                           
 10851                           ;ui_key.c: 509: ui_disp_menu();
 10852  2F07  319F  2707  31AE   	fcall	_ui_disp_menu
 10853                           
 10854                           ;ui_key.c: 510: ui_key_waite_up();
 10855  2F0A  31B4  242B         	fcall	_ui_key_waite_up
 10856  2F0C  0008               	return
 10857  2F0D                     __end_of_ui_key_process:	
 10858                           
 10859                           	psect	text3
 10860  34BE                     __ptext3:	
 10861 ;; *************** function _ui_key_waite_up_ex *****************
 10862 ;; Defined at:
 10863 ;;		line 31 in file "src/api/ui_key.c"
 10864 ;; Parameters:    Size  Location     Type
 10865 ;;  tm              2    0[BANK0 ] unsigned int 
 10866 ;; Auto vars:     Size  Location     Type
 10867 ;;  now             2    2[BANK0 ] unsigned int 
 10868 ;; Return value:  Size  Location     Type
 10869 ;;                  2    0[BANK0 ] unsigned int 
 10870 ;; Registers used:
 10871 ;;		wreg, status,2, status,0, pclath, cstack
 10872 ;; Tracked objects:
 10873 ;;		On entry : 0/0
 10874 ;;		On exit  : 0/0
 10875 ;;		Unchanged: 0/0
 10876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10877 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10878 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10880 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 10881 ;;Total ram usage:        4 bytes
 10882 ;; Hardware stack levels used:    1
 10883 ;; Hardware stack levels required when called:    4
 10884 ;; This function calls:
 10885 ;;		_get_globle_ticker
 10886 ;;		_key_scan_call
 10887 ;;		_set_globle_ticker
 10888 ;; This function is called by:
 10889 ;;		_ui_key_process
 10890 ;; This function uses a non-reentrant model
 10891 ;;
 10892                           
 10893                           
 10894                           ;psect for function _ui_key_waite_up_ex
 10895  34BE                     _ui_key_waite_up_ex:	
 10896                           
 10897                           ;ui_key.c: 33: uint16_t now=0;
 10898                           
 10899                           ;incstack = 0
 10900                           ; Regs used in _ui_key_waite_up_ex: [wreg+status,2+status,0+pclath+cstack]
 10901  34BE  0020               	movlb	0	; select bank0
 10902  34BF  01A2               	clrf	ui_key_waite_up_ex@now
 10903  34C0  01A3               	clrf	ui_key_waite_up_ex@now+1
 10904                           
 10905                           ;ui_key.c: 36: key_scan_call();
 10906  34C1  31BF  27D9  31B4   	fcall	_key_scan_call
 10907                           
 10908                           ;ui_key.c: 37: if (KeyValue == 0)return 0;
 10909  34C4  0021               	movlb	1	; select bank1
 10910  34C5  0841               	movf	_KeyValue^(0+128),w
 10911  34C6  1D03               	btfss	3,2
 10912  34C7  2CCC               	goto	l14613
 10913  34C8  0020               	movlb	0	; select bank0
 10914  34C9  01A0               	clrf	?_ui_key_waite_up_ex
 10915  34CA  01A1               	clrf	?_ui_key_waite_up_ex+1
 10916  34CB  0008               	return
 10917  34CC                     l14613:	
 10918                           
 10919                           ;ui_key.c: 38: set_globle_ticker(0);
 10920  34CC  3000               	movlw	0
 10921  34CD  00F3               	movwf	set_globle_ticker@tk
 10922  34CE  00F4               	movwf	set_globle_ticker@tk+1
 10923  34CF  31BB  232C  31B4   	fcall	_set_globle_ticker
 10924  34D2                     l606:	
 10925                           ;ui_key.c: 39: do {
 10926                           
 10927                           
 10928                           ;ui_key.c: 40: key_scan_call();
 10929  34D2  31BF  27D9  31B4   	fcall	_key_scan_call
 10930                           
 10931                           ;ui_key.c: 41: now = get_globle_ticker();
 10932  34D5  31BB  2397  31B4   	fcall	_get_globle_ticker
 10933  34D8  0874               	movf	?_get_globle_ticker+1,w
 10934  34D9  0020               	movlb	0	; select bank0
 10935  34DA  00A3               	movwf	ui_key_waite_up_ex@now+1
 10936  34DB  0873               	movf	?_get_globle_ticker,w
 10937  34DC  00A2               	movwf	ui_key_waite_up_ex@now
 10938                           
 10939                           ;ui_key.c: 42: if (KeyValue == 0)break;
 10940  34DD  0021               	movlb	1	; select bank1
 10941  34DE  0841               	movf	_KeyValue^(0+128),w
 10942  34DF  1903               	btfsc	3,2
 10943  34E0  2CEA               	goto	l14625
 10944                           
 10945                           ;ui_key.c: 43: if (now > tm)break;
 10946  34E1  0020               	movlb	0	; select bank0
 10947  34E2  0823               	movf	ui_key_waite_up_ex@now+1,w
 10948  34E3  0221               	subwf	ui_key_waite_up_ex@tm+1,w
 10949  34E4  1D03               	skipz
 10950  34E5  2CE8               	goto	u13475
 10951  34E6  0822               	movf	ui_key_waite_up_ex@now,w
 10952  34E7  0220               	subwf	ui_key_waite_up_ex@tm,w
 10953  34E8                     u13475:	
 10954  34E8  1803               	skipnc
 10955  34E9  2CD2               	goto	l606
 10956  34EA                     l14625:	
 10957                           ;ui_key.c: 44: } while (1);
 10958                           
 10959                           
 10960                           ;ui_key.c: 45: return (uint16_t) (now );
 10961  34EA  0020               	movlb	0	; select bank0
 10962  34EB  0823               	movf	ui_key_waite_up_ex@now+1,w
 10963  34EC  00A1               	movwf	?_ui_key_waite_up_ex+1
 10964  34ED  0822               	movf	ui_key_waite_up_ex@now,w
 10965  34EE  00A0               	movwf	?_ui_key_waite_up_ex
 10966  34EF  0008               	return
 10967  34F0                     __end_of_ui_key_waite_up_ex:	
 10968                           
 10969                           	psect	text4
 10970  1630                     __ptext4:	
 10971 ;; *************** function _ui_key_set_process *****************
 10972 ;; Defined at:
 10973 ;;		line 316 in file "src/api/ui_key.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;		None
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;  ret             1   39[BANK0 ] unsigned char 
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      void 
 10980 ;; Registers used:
 10981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10990 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 10991 ;;Total ram usage:        2 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    5
 10994 ;; This function calls:
 10995 ;;		___awdiv
 10996 ;;		___wmul
 10997 ;;		_data_api_calibration_table_data_save
 10998 ;;		_m_mem_cpy_len
 10999 ;; This function is called by:
 11000 ;;		_ui_key_process
 11001 ;; This function uses a non-reentrant model
 11002 ;;
 11003                           
 11004                           
 11005                           ;psect for function _ui_key_set_process
 11006  1630                     _ui_key_set_process:	
 11007                           
 11008                           ;ui_key.c: 318: uint8_t ret=0;
 11009                           
 11010                           ;incstack = 0
 11011                           ; Regs used in _ui_key_set_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11012  1630  0020               	movlb	0	; select bank0
 11013  1631  01C7               	clrf	ui_key_set_process@ret
 11014                           
 11015                           ;ui_key.c: 319: switch(menu){
 11016  1632  2FDE               	goto	l14979
 11017  1633                     l14849:	
 11018                           ;ui_key.c: 326: case 0x40:
 11019                           
 11020                           
 11021                           ;ui_key.c: 327: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->flowRatio));
 11022  1633  301A               	movlw	26
 11023  1634  0022               	movlb	2	; select bank2
 11024  1635  00C3               	movwf	_flashOpStr^(0+256)
 11025  1636  3000               	movlw	0
 11026  1637  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11027                           
 11028                           ;ui_key.c: 329: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11029  1638  3002               	movlw	2
 11030  1639  0020               	movlb	0	; select bank0
 11031  163A  00C6               	movwf	??_ui_key_set_process
 11032  163B  0846               	movf	??_ui_key_set_process,w
 11033  163C  0022               	movlb	2	; select bank2
 11034  163D  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11035                           
 11036                           ;ui_key.c: 330: flashOpStr.len=2;
 11037  163E  3002               	movlw	2
 11038  163F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11039  1640  3000               	movlw	0
 11040  1641  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11041                           
 11042                           ;ui_key.c: 331: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)uiAdjbuf ,2);
 11043  1642  3047               	movlw	low (_flashOpStr+4)
 11044  1643  00F3               	movwf	m_mem_cpy_len@d
 11045  1644  3001               	movlw	high (_flashOpStr+4)
 11046  1645  00F4               	movwf	m_mem_cpy_len@d+1
 11047  1646  3061               	movlw	low _uiAdjbuf
 11048  1647  00F5               	movwf	m_mem_cpy_len@s
 11049  1648  3001               	movlw	high _uiAdjbuf
 11050  1649  00F6               	movwf	m_mem_cpy_len@s+1
 11051  164A  3002               	movlw	2
 11052  164B  0020               	movlb	0	; select bank0
 11053  164C  00C6               	movwf	??_ui_key_set_process
 11054  164D  0846               	movf	??_ui_key_set_process,w
 11055  164E  00F7               	movwf	m_mem_cpy_len@len
 11056  164F  31BD  259E         	fcall	_m_mem_cpy_len
 11057                           
 11058                           ;ui_key.c: 332: menu=bkupMenu;break;
 11059  1651  0021               	movlb	1	; select bank1
 11060  1652  0842               	movf	_bkupMenu^(0+128),w
 11061  1653  0020               	movlb	0	; select bank0
 11062  1654  00C6               	movwf	??_ui_key_set_process
 11063  1655  0846               	movf	??_ui_key_set_process,w
 11064  1656  0021               	movlb	1	; select bank1
 11065  1657  00C3               	movwf	_menu^(0+128)
 11066  1658  0008               	return
 11067  1659                     l699:	
 11068                           ;ui_key.c: 333: case 0x50:
 11069                           
 11070                           
 11071                           ;ui_key.c: 334: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 11072  1659  0022               	movlb	2	; select bank2
 11073  165A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 11074  165B  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 11075                           
 11076                           ;ui_key.c: 335: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 11077  165C  3061               	movlw	low (_uiAdjbuf| (0+256))
 11078  165D  0086               	movwf	6
 11079  165E  3001               	movlw	1	; select bank2/3
 11080  165F  0087               	movwf	7
 11081  1660  3F40               	moviw [0]fsr1
 11082  1661  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11083  1662  3F41               	moviw [1]fsr1
 11084  1663  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11085                           
 11086                           ;ui_key.c: 336: ret=data_api_calibration_table_data_save(calibLocation,0);
 11087  1664  0020               	movlb	0	; select bank0
 11088  1665  01B3               	clrf	data_api_calibration_table_data_save@single
 11089  1666  0021               	movlb	1	; select bank1
 11090  1667  0845               	movf	_calibLocation^(0+128),w
 11091  1668  3192  22FB  3196   	fcall	_data_api_calibration_table_data_save
 11092  166B  0020               	movlb	0	; select bank0
 11093  166C  00C6               	movwf	??_ui_key_set_process
 11094  166D  0846               	movf	??_ui_key_set_process,w
 11095  166E  00C7               	movwf	ui_key_set_process@ret
 11096                           
 11097                           ;ui_key.c: 338: if(!ret){
 11098  166F  0847               	movf	ui_key_set_process@ret,w
 11099  1670  1903               	btfsc	3,2
 11100  1671  0008               	return
 11101                           
 11102                           ;ui_key.c: 340: }
 11103                           ;ui_key.c: 342: calibLocation=0;
 11104                           
 11105                           ;ui_key.c: 339: break;
 11106  1672  0021               	movlb	1	; select bank1
 11107  1673  01C5               	clrf	_calibLocation^(0+128)
 11108                           
 11109                           ;ui_key.c: 343: menu=bkupMenu;break;
 11110  1674  0842               	movf	_bkupMenu^(0+128),w
 11111  1675  0020               	movlb	0	; select bank0
 11112  1676  00C6               	movwf	??_ui_key_set_process
 11113  1677  0846               	movf	??_ui_key_set_process,w
 11114  1678  0021               	movlb	1	; select bank1
 11115  1679  00C3               	movwf	_menu^(0+128)
 11116  167A  0008               	return
 11117  167B                     l14871:	
 11118                           ;ui_key.c: 344: case 0x60:
 11119                           
 11120                           
 11121                           ;ui_key.c: 345: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->deviceID));
 11122  167B  0022               	movlb	2	; select bank2
 11123  167C  01C3               	clrf	_flashOpStr^(0+256)
 11124  167D  01C4               	clrf	(_flashOpStr+1)^(0+256)
 11125                           
 11126                           ;ui_key.c: 347: flashOpStr.len=4;
 11127  167E  3004               	movlw	4
 11128  167F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11129  1680  3000               	movlw	0
 11130  1681  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11131                           
 11132                           ;ui_key.c: 348: flashOpStr.buf[0]=uiAdjbuf[0];
 11133  1682  0861               	movf	_uiAdjbuf^(0+256),w
 11134  1683  0020               	movlb	0	; select bank0
 11135  1684  00C6               	movwf	??_ui_key_set_process
 11136  1685  0846               	movf	??_ui_key_set_process,w
 11137  1686  0022               	movlb	2	; select bank2
 11138  1687  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11139                           
 11140                           ;ui_key.c: 349: flashOpStr.buf[1]=uiAdjbuf[1];
 11141  1688  0862               	movf	(_uiAdjbuf^(0+256)+1),w
 11142  1689  0020               	movlb	0	; select bank0
 11143  168A  00C6               	movwf	??_ui_key_set_process
 11144  168B  0846               	movf	??_ui_key_set_process,w
 11145  168C  0022               	movlb	2	; select bank2
 11146  168D  00C8               	movwf	(_flashOpStr^(0+256)+5)
 11147                           
 11148                           ;ui_key.c: 350: flashOpStr.buf[2]=0;
 11149  168E  01C9               	clrf	(_flashOpStr^(0+256)+6)
 11150                           
 11151                           ;ui_key.c: 351: flashOpStr.buf[3]=0;
 11152  168F  01CA               	clrf	(_flashOpStr^(0+256)+7)
 11153                           
 11154                           ;ui_key.c: 352: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11155  1690  3002               	movlw	2
 11156  1691  0020               	movlb	0	; select bank0
 11157  1692  00C6               	movwf	??_ui_key_set_process
 11158  1693  0846               	movf	??_ui_key_set_process,w
 11159  1694  0022               	movlb	2	; select bank2
 11160  1695  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11161                           
 11162                           ;ui_key.c: 353: menu=bkupMenu;
 11163  1696  0021               	movlb	1	; select bank1
 11164  1697  0842               	movf	_bkupMenu^(0+128),w
 11165  1698  0020               	movlb	0	; select bank0
 11166  1699  00C6               	movwf	??_ui_key_set_process
 11167  169A  0846               	movf	??_ui_key_set_process,w
 11168  169B  0021               	movlb	1	; select bank1
 11169  169C  00C3               	movwf	_menu^(0+128)
 11170                           
 11171                           ;ui_key.c: 354: break;
 11172  169D  0008               	return
 11173  169E                     l14887:	
 11174                           ;ui_key.c: 355: case 0x70:
 11175                           
 11176                           
 11177                           ;ui_key.c: 356: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->smallFlowNotCa
      +                          re));
 11178  169E  3039               	movlw	57
 11179  169F  0022               	movlb	2	; select bank2
 11180  16A0  00C3               	movwf	_flashOpStr^(0+256)
 11181  16A1  3000               	movlw	0
 11182  16A2  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11183                           
 11184                           ;ui_key.c: 358: flashOpStr.len=1;
 11185  16A3  3001               	movlw	1
 11186  16A4  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11187  16A5  3000               	movlw	0
 11188  16A6  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11189                           
 11190                           ;ui_key.c: 359: flashOpStr.buf[0]=uiAdjbuf[0];
 11191  16A7  0861               	movf	_uiAdjbuf^(0+256),w
 11192  16A8  0020               	movlb	0	; select bank0
 11193  16A9  00C6               	movwf	??_ui_key_set_process
 11194  16AA  0846               	movf	??_ui_key_set_process,w
 11195  16AB  0022               	movlb	2	; select bank2
 11196  16AC  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11197                           
 11198                           ;ui_key.c: 360: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11199  16AD  3002               	movlw	2
 11200  16AE  0020               	movlb	0	; select bank0
 11201  16AF  00C6               	movwf	??_ui_key_set_process
 11202  16B0  0846               	movf	??_ui_key_set_process,w
 11203  16B1  0022               	movlb	2	; select bank2
 11204  16B2  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11205                           
 11206                           ;ui_key.c: 361: menu=bkupMenu;
 11207  16B3  0021               	movlb	1	; select bank1
 11208  16B4  0842               	movf	_bkupMenu^(0+128),w
 11209  16B5  0020               	movlb	0	; select bank0
 11210  16B6  00C6               	movwf	??_ui_key_set_process
 11211  16B7  0846               	movf	??_ui_key_set_process,w
 11212  16B8  0021               	movlb	1	; select bank1
 11213  16B9  00C3               	movwf	_menu^(0+128)
 11214                           
 11215                           ;ui_key.c: 362: break;
 11216  16BA  0008               	return
 11217  16BB                     l14897:	
 11218                           ;ui_key.c: 363: case 0x80:
 11219                           
 11220                           
 11221                           ;ui_key.c: 364: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->price));
 11222  16BB  3012               	movlw	18
 11223  16BC  0022               	movlb	2	; select bank2
 11224  16BD  00C3               	movwf	_flashOpStr^(0+256)
 11225  16BE  3000               	movlw	0
 11226  16BF  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11227                           
 11228                           ;ui_key.c: 366: flashOpStr.len=2;
 11229  16C0  3002               	movlw	2
 11230  16C1  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11231  16C2  3000               	movlw	0
 11232  16C3  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11233                           
 11234                           ;ui_key.c: 367: flashOpStr.buf[0]=uiAdjbuf[0];
 11235  16C4  0861               	movf	_uiAdjbuf^(0+256),w
 11236  16C5  0020               	movlb	0	; select bank0
 11237  16C6  00C6               	movwf	??_ui_key_set_process
 11238  16C7  0846               	movf	??_ui_key_set_process,w
 11239  16C8  0022               	movlb	2	; select bank2
 11240  16C9  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11241                           
 11242                           ;ui_key.c: 368: flashOpStr.buf[1]=uiAdjbuf[1];
 11243  16CA  0862               	movf	(_uiAdjbuf^(0+256)+1),w
 11244  16CB  0020               	movlb	0	; select bank0
 11245  16CC  00C6               	movwf	??_ui_key_set_process
 11246  16CD  0846               	movf	??_ui_key_set_process,w
 11247  16CE  0022               	movlb	2	; select bank2
 11248  16CF  00C8               	movwf	(_flashOpStr^(0+256)+5)
 11249                           
 11250                           ;ui_key.c: 369: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11251  16D0  3002               	movlw	2
 11252  16D1  0020               	movlb	0	; select bank0
 11253  16D2  00C6               	movwf	??_ui_key_set_process
 11254  16D3  0846               	movf	??_ui_key_set_process,w
 11255  16D4  0022               	movlb	2	; select bank2
 11256  16D5  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11257                           
 11258                           ;ui_key.c: 370: menu=bkupMenu;
 11259  16D6  0021               	movlb	1	; select bank1
 11260  16D7  0842               	movf	_bkupMenu^(0+128),w
 11261  16D8  0020               	movlb	0	; select bank0
 11262  16D9  00C6               	movwf	??_ui_key_set_process
 11263  16DA  0846               	movf	??_ui_key_set_process,w
 11264  16DB  0021               	movlb	1	; select bank1
 11265  16DC  00C3               	movwf	_menu^(0+128)
 11266                           
 11267                           ;ui_key.c: 371: break;
 11268  16DD  0008               	return
 11269  16DE                     l14909:	
 11270                           ;ui_key.c: 372: case 0x90:
 11271                           
 11272                           
 11273                           ;ui_key.c: 373: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->transferMoneyL
      +                          imit));
 11274  16DE  3024               	movlw	36
 11275  16DF  0022               	movlb	2	; select bank2
 11276  16E0  00C3               	movwf	_flashOpStr^(0+256)
 11277  16E1  3000               	movlw	0
 11278  16E2  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11279                           
 11280                           ;ui_key.c: 375: __t16=*((uint16_t*)uiAdjbuf);
 11281  16E3  3061               	movlw	low (_uiAdjbuf| (0+256))
 11282  16E4  0086               	movwf	6
 11283  16E5  3001               	movlw	1	; select bank2/3
 11284  16E6  0087               	movwf	7
 11285  16E7  3F40               	moviw [0]fsr1
 11286  16E8  00F8               	movwf	___t16
 11287  16E9  3F41               	moviw [1]fsr1
 11288  16EA  00F9               	movwf	___t16+1
 11289                           
 11290                           ;ui_key.c: 376: __t32=__t16*100;
 11291  16EB  0879               	movf	___t16+1,w
 11292  16EC  00F4               	movwf	___wmul@multiplier+1
 11293  16ED  0878               	movf	___t16,w
 11294  16EE  00F3               	movwf	___wmul@multiplier
 11295  16EF  3064               	movlw	100
 11296  16F0  00F5               	movwf	___wmul@multiplicand
 11297  16F1  3000               	movlw	0
 11298  16F2  00F6               	movwf	___wmul@multiplicand+1
 11299  16F3  31BE  267D         	fcall	___wmul
 11300  16F5  0873               	movf	?___wmul,w
 11301  16F6  0021               	movlb	1	; select bank1
 11302  16F7  00B4               	movwf	___t32^(0+128)
 11303  16F8  0874               	movf	?___wmul+1,w
 11304  16F9  00B5               	movwf	(___t32^(0+128)+1)
 11305  16FA  01B6               	clrf	(___t32^(0+128)+2)
 11306  16FB  01B7               	clrf	(___t32^(0+128)+3)
 11307                           
 11308                           ;ui_key.c: 378: *((uint32_t*)(flashOpStr.buf))=__t32;
 11309  16FC  0837               	movf	(___t32+3)^(0+128),w
 11310  16FD  0022               	movlb	2	; select bank2
 11311  16FE  00CA               	movwf	((_flashOpStr+3)^(0+256)+4)
 11312  16FF  0021               	movlb	1	; select bank1
 11313  1700  0836               	movf	(___t32+2)^(0+128),w
 11314  1701  0022               	movlb	2	; select bank2
 11315  1702  00C9               	movwf	((_flashOpStr+2)^(0+256)+4)
 11316  1703  0021               	movlb	1	; select bank1
 11317  1704  0835               	movf	(___t32+1)^(0+128),w
 11318  1705  0022               	movlb	2	; select bank2
 11319  1706  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11320  1707  0021               	movlb	1	; select bank1
 11321  1708  0834               	movf	___t32^(0+128),w
 11322  1709  0022               	movlb	2	; select bank2
 11323  170A  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11324                           
 11325                           ;ui_key.c: 379: flashOpStr.len=4;
 11326  170B  3004               	movlw	4
 11327  170C  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11328  170D  3000               	movlw	0
 11329  170E  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11330                           
 11331                           ;ui_key.c: 384: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11332  170F  3002               	movlw	2
 11333  1710  0020               	movlb	0	; select bank0
 11334  1711  00C6               	movwf	??_ui_key_set_process
 11335  1712  0846               	movf	??_ui_key_set_process,w
 11336  1713  0022               	movlb	2	; select bank2
 11337  1714  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11338                           
 11339                           ;ui_key.c: 385: menu=bkupMenu;
 11340  1715  0021               	movlb	1	; select bank1
 11341  1716  0842               	movf	_bkupMenu^(0+128),w
 11342  1717  0020               	movlb	0	; select bank0
 11343  1718  00C6               	movwf	??_ui_key_set_process
 11344  1719  0846               	movf	??_ui_key_set_process,w
 11345  171A  0021               	movlb	1	; select bank1
 11346  171B  00C3               	movwf	_menu^(0+128)
 11347                           
 11348                           ;ui_key.c: 386: break;
 11349  171C  0008               	return
 11350  171D                     l14923:	
 11351                           ;ui_key.c: 388: case 0xa0:
 11352                           
 11353                           
 11354                           ;ui_key.c: 389: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->shortID));
 11355  171D  3009               	movlw	9
 11356  171E  0022               	movlb	2	; select bank2
 11357  171F  00C3               	movwf	_flashOpStr^(0+256)
 11358  1720  3000               	movlw	0
 11359  1721  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11360                           
 11361                           ;ui_key.c: 391: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11362  1722  3002               	movlw	2
 11363  1723  0020               	movlb	0	; select bank0
 11364  1724  00C6               	movwf	??_ui_key_set_process
 11365  1725  0846               	movf	??_ui_key_set_process,w
 11366  1726  0022               	movlb	2	; select bank2
 11367  1727  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11368                           
 11369                           ;ui_key.c: 392: flashOpStr.len=1;
 11370  1728  3001               	movlw	1
 11371  1729  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11372  172A  3000               	movlw	0
 11373  172B  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11374                           
 11375                           ;ui_key.c: 394: flashOpStr.buf[0]=uiAdjbuf[0];
 11376  172C  0861               	movf	_uiAdjbuf^(0+256),w
 11377  172D  0020               	movlb	0	; select bank0
 11378  172E  00C6               	movwf	??_ui_key_set_process
 11379  172F  0846               	movf	??_ui_key_set_process,w
 11380  1730  0022               	movlb	2	; select bank2
 11381  1731  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11382                           
 11383                           ;ui_key.c: 396: menu=bkupMenu;
 11384  1732  0021               	movlb	1	; select bank1
 11385  1733  0842               	movf	_bkupMenu^(0+128),w
 11386  1734  0020               	movlb	0	; select bank0
 11387  1735  00C6               	movwf	??_ui_key_set_process
 11388  1736  0846               	movf	??_ui_key_set_process,w
 11389  1737  0021               	movlb	1	; select bank1
 11390  1738  00C3               	movwf	_menu^(0+128)
 11391                           
 11392                           ;ui_key.c: 397: break;
 11393  1739  0008               	return
 11394  173A                     l14933:	
 11395                           ;ui_key.c: 413: case 0xb0:
 11396                           
 11397                           
 11398                           ;ui_key.c: 414: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceWarning
      +                          ));
 11399  173A  3014               	movlw	20
 11400  173B  0022               	movlb	2	; select bank2
 11401  173C  00C3               	movwf	_flashOpStr^(0+256)
 11402  173D  3000               	movlw	0
 11403  173E  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11404                           
 11405                           ;ui_key.c: 416: flashOpStr.len=2;
 11406  173F  3002               	movlw	2
 11407  1740  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11408  1741  3000               	movlw	0
 11409  1742  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11410                           
 11411                           ;ui_key.c: 417: __t16=*((uint16_t*)uiAdjbuf);
 11412  1743  3061               	movlw	low (_uiAdjbuf| (0+256))
 11413  1744  0086               	movwf	6
 11414  1745  3001               	movlw	1	; select bank2/3
 11415  1746  0087               	movwf	7
 11416  1747  3F40               	moviw [0]fsr1
 11417  1748  00F8               	movwf	___t16
 11418  1749  3F41               	moviw [1]fsr1
 11419  174A  00F9               	movwf	___t16+1
 11420                           
 11421                           ;ui_key.c: 418: __t16*=100;
 11422  174B  3064               	movlw	100
 11423  174C  00F3               	movwf	___wmul@multiplier
 11424  174D  3000               	movlw	0
 11425  174E  00F4               	movwf	___wmul@multiplier+1
 11426  174F  0879               	movf	___t16+1,w
 11427  1750  00F6               	movwf	___wmul@multiplicand+1
 11428  1751  0878               	movf	___t16,w
 11429  1752  00F5               	movwf	___wmul@multiplicand
 11430  1753  31BE  267D  3196   	fcall	___wmul
 11431  1756  0874               	movf	?___wmul+1,w
 11432  1757  00F9               	movwf	___t16+1
 11433  1758  0873               	movf	?___wmul,w
 11434  1759  00F8               	movwf	___t16
 11435                           
 11436                           ;ui_key.c: 419: *((uint16_t*)flashOpStr.buf)=__t16;
 11437  175A  0879               	movf	___t16+1,w
 11438  175B  0022               	movlb	2	; select bank2
 11439  175C  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11440  175D  0878               	movf	___t16,w
 11441  175E  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11442                           
 11443                           ;ui_key.c: 420: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11444  175F  3002               	movlw	2
 11445  1760  0020               	movlb	0	; select bank0
 11446  1761  00C6               	movwf	??_ui_key_set_process
 11447  1762  0846               	movf	??_ui_key_set_process,w
 11448  1763  0022               	movlb	2	; select bank2
 11449  1764  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11450                           
 11451                           ;ui_key.c: 421: flashOpStr.len=2;
 11452  1765  3002               	movlw	2
 11453  1766  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11454  1767  3000               	movlw	0
 11455  1768  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11456                           
 11457                           ;ui_key.c: 422: *(int16_t*)uiAdjbuf=(mainSystemData.balanceOff/100);
 11458  1769  3064               	movlw	100
 11459  176A  00F3               	movwf	___awdiv@divisor
 11460  176B  3000               	movlw	0
 11461  176C  00F4               	movwf	___awdiv@divisor+1
 11462  176D  0024               	movlb	4	; select bank4
 11463  176E  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 11464  176F  00F6               	movwf	___awdiv@dividend+1
 11465  1770  0836               	movf	(_mainSystemData^(0+512)+22),w
 11466  1771  00F5               	movwf	___awdiv@dividend
 11467  1772  31AA  2216         	fcall	___awdiv
 11468  1774  3061               	movlw	low (_uiAdjbuf| (0+256))
 11469  1775  0086               	movwf	6
 11470  1776  3001               	movlw	1	; select bank2/3
 11471  1777  0087               	movwf	7
 11472  1778  0873               	movf	?___awdiv,w
 11473  1779  3FC0               	movwi [0]fsr1
 11474  177A  0874               	movf	?___awdiv+1,w
 11475  177B  3FC1               	movwi [1]fsr1
 11476                           
 11477                           ;ui_key.c: 423: menu=bkupMenu;
 11478  177C  0021               	movlb	1	; select bank1
 11479  177D  0842               	movf	_bkupMenu^(0+128),w
 11480  177E  0020               	movlb	0	; select bank0
 11481  177F  00C6               	movwf	??_ui_key_set_process
 11482  1780  0846               	movf	??_ui_key_set_process,w
 11483  1781  0021               	movlb	1	; select bank1
 11484  1782  00C3               	movwf	_menu^(0+128)
 11485                           
 11486                           ;ui_key.c: 424: break;
 11487  1783  0008               	return
 11488  1784                     l14949:	
 11489                           ;ui_key.c: 425: case 0xb1:
 11490                           
 11491                           
 11492                           ;ui_key.c: 426: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceOff));
 11493  1784  3016               	movlw	22
 11494  1785  0022               	movlb	2	; select bank2
 11495  1786  00C3               	movwf	_flashOpStr^(0+256)
 11496  1787  3000               	movlw	0
 11497  1788  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11498                           
 11499                           ;ui_key.c: 428: flashOpStr.len=2;
 11500  1789  3002               	movlw	2
 11501  178A  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11502  178B  3000               	movlw	0
 11503  178C  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11504                           
 11505                           ;ui_key.c: 429: __t16=*((uint16_t*)uiAdjbuf);
 11506  178D  3061               	movlw	low (_uiAdjbuf| (0+256))
 11507  178E  0086               	movwf	6
 11508  178F  3001               	movlw	1	; select bank2/3
 11509  1790  0087               	movwf	7
 11510  1791  3F40               	moviw [0]fsr1
 11511  1792  00F8               	movwf	___t16
 11512  1793  3F41               	moviw [1]fsr1
 11513  1794  00F9               	movwf	___t16+1
 11514                           
 11515                           ;ui_key.c: 430: __t16*=100;
 11516  1795  3064               	movlw	100
 11517  1796  00F3               	movwf	___wmul@multiplier
 11518  1797  3000               	movlw	0
 11519  1798  00F4               	movwf	___wmul@multiplier+1
 11520  1799  0879               	movf	___t16+1,w
 11521  179A  00F6               	movwf	___wmul@multiplicand+1
 11522  179B  0878               	movf	___t16,w
 11523  179C  00F5               	movwf	___wmul@multiplicand
 11524  179D  31BE  267D         	fcall	___wmul
 11525  179F  0874               	movf	?___wmul+1,w
 11526  17A0  00F9               	movwf	___t16+1
 11527  17A1  0873               	movf	?___wmul,w
 11528  17A2  00F8               	movwf	___t16
 11529                           
 11530                           ;ui_key.c: 431: *((uint16_t*)flashOpStr.buf)=__t16;
 11531  17A3  0879               	movf	___t16+1,w
 11532  17A4  0022               	movlb	2	; select bank2
 11533  17A5  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 11534  17A6  0878               	movf	___t16,w
 11535  17A7  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11536                           
 11537                           ;ui_key.c: 432: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11538  17A8  3002               	movlw	2
 11539  17A9  0020               	movlb	0	; select bank0
 11540  17AA  00C6               	movwf	??_ui_key_set_process
 11541  17AB  0846               	movf	??_ui_key_set_process,w
 11542  17AC  0022               	movlb	2	; select bank2
 11543  17AD  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11544                           
 11545                           ;ui_key.c: 433: flashOpStr.len=2;
 11546  17AE  3002               	movlw	2
 11547  17AF  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11548  17B0  3000               	movlw	0
 11549  17B1  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11550                           
 11551                           ;ui_key.c: 434: menu=bkupMenu;
 11552  17B2  0021               	movlb	1	; select bank1
 11553  17B3  0842               	movf	_bkupMenu^(0+128),w
 11554  17B4  0020               	movlb	0	; select bank0
 11555  17B5  00C6               	movwf	??_ui_key_set_process
 11556  17B6  0846               	movf	??_ui_key_set_process,w
 11557  17B7  0021               	movlb	1	; select bank1
 11558  17B8  00C3               	movwf	_menu^(0+128)
 11559                           
 11560                           ;ui_key.c: 435: break;
 11561  17B9  0008               	return
 11562  17BA                     l14965:	
 11563                           ;ui_key.c: 461: case 0xf1:
 11564                           
 11565                           
 11566                           ;ui_key.c: 462: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->imdFlowUnit));
 11567  17BA  303C               	movlw	60
 11568  17BB  0022               	movlb	2	; select bank2
 11569  17BC  00C3               	movwf	_flashOpStr^(0+256)
 11570  17BD  3000               	movlw	0
 11571  17BE  00C4               	movwf	(_flashOpStr+1)^(0+256)
 11572                           
 11573                           ;ui_key.c: 463: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11574  17BF  3002               	movlw	2
 11575  17C0  0020               	movlb	0	; select bank0
 11576  17C1  00C6               	movwf	??_ui_key_set_process
 11577  17C2  0846               	movf	??_ui_key_set_process,w
 11578  17C3  0022               	movlb	2	; select bank2
 11579  17C4  00D7               	movwf	(_flashOpStr^(0+256)+20)
 11580                           
 11581                           ;ui_key.c: 464: flashOpStr.len=1;
 11582  17C5  3001               	movlw	1
 11583  17C6  00C5               	movwf	(_flashOpStr^(0+256)+2)
 11584  17C7  3000               	movlw	0
 11585  17C8  00C6               	movwf	(_flashOpStr^(0+256)+3)
 11586                           
 11587                           ;ui_key.c: 465: flashOpStr.buf[0]=uiAdjbuf[0];
 11588  17C9  0861               	movf	_uiAdjbuf^(0+256),w
 11589  17CA  0020               	movlb	0	; select bank0
 11590  17CB  00C6               	movwf	??_ui_key_set_process
 11591  17CC  0846               	movf	??_ui_key_set_process,w
 11592  17CD  0022               	movlb	2	; select bank2
 11593  17CE  00C7               	movwf	(_flashOpStr^(0+256)+4)
 11594                           
 11595                           ;ui_key.c: 466: menu=bkupMenu;
 11596  17CF  0021               	movlb	1	; select bank1
 11597  17D0  0842               	movf	_bkupMenu^(0+128),w
 11598  17D1  0020               	movlb	0	; select bank0
 11599  17D2  00C6               	movwf	??_ui_key_set_process
 11600  17D3  0846               	movf	??_ui_key_set_process,w
 11601  17D4  0021               	movlb	1	; select bank1
 11602  17D5  00C3               	movwf	_menu^(0+128)
 11603                           
 11604                           ;ui_key.c: 467: break;
 11605  17D6  0008               	return
 11606  17D7                     l14975:	
 11607                           ;ui_key.c: 468: default:
 11608                           
 11609                           
 11610                           ;ui_key.c: 469: menu=bkupMenu;break;
 11611  17D7  0842               	movf	_bkupMenu^(0+128),w
 11612  17D8  0020               	movlb	0	; select bank0
 11613  17D9  00C6               	movwf	??_ui_key_set_process
 11614  17DA  0846               	movf	??_ui_key_set_process,w
 11615  17DB  0021               	movlb	1	; select bank1
 11616  17DC  00C3               	movwf	_menu^(0+128)
 11617                           
 11618                           ;ui_key.c: 470: }
 11619  17DD  0008               	return
 11620  17DE                     l14979:	
 11621  17DE  0021               	movlb	1	; select bank1
 11622  17DF  0843               	movf	_menu^(0+128),w
 11623                           
 11624                           ; Switch size 1, requested type "space"
 11625                           ; Number of cases is 10, Range of values is 64 to 241
 11626                           ; switch strategies available:
 11627                           ; Name         Instructions Cycles
 11628                           ; simple_byte           31    16 (average)
 11629                           ; jumptable            263     9 (fixed)
 11630                           ;	Chosen strategy is simple_byte
 11631  17E0  3A40               	xorlw	64	; case 64
 11632  17E1  1903               	skipnz
 11633  17E2  2E33               	goto	l14849
 11634  17E3  3A10               	xorlw	16	; case 80
 11635  17E4  1903               	skipnz
 11636  17E5  2E59               	goto	l699
 11637  17E6  3A30               	xorlw	48	; case 96
 11638  17E7  1903               	skipnz
 11639  17E8  2E7B               	goto	l14871
 11640  17E9  3A10               	xorlw	16	; case 112
 11641  17EA  1903               	skipnz
 11642  17EB  2E9E               	goto	l14887
 11643  17EC  3AF0               	xorlw	240	; case 128
 11644  17ED  1903               	skipnz
 11645  17EE  2EBB               	goto	l14897
 11646  17EF  3A10               	xorlw	16	; case 144
 11647  17F0  1903               	skipnz
 11648  17F1  2EDE               	goto	l14909
 11649  17F2  3A30               	xorlw	48	; case 160
 11650  17F3  1903               	skipnz
 11651  17F4  2F1D               	goto	l14923
 11652  17F5  3A10               	xorlw	16	; case 176
 11653  17F6  1903               	skipnz
 11654  17F7  2F3A               	goto	l14933
 11655  17F8  3A01               	xorlw	1	; case 177
 11656  17F9  1903               	skipnz
 11657  17FA  2F84               	goto	l14949
 11658  17FB  3A40               	xorlw	64	; case 241
 11659  17FC  1903               	skipnz
 11660  17FD  2FBA               	goto	l14965
 11661  17FE  2FD7               	goto	l14975
 11662  17FF  0008               	return
 11663  1800                     __end_of_ui_key_set_process:	
 11664                           
 11665                           	psect	text5
 11666  1E21                     __ptext5:	
 11667 ;; *************** function _ui_key_process_up_down *****************
 11668 ;; Defined at:
 11669 ;;		line 154 in file "src/api/ui_key.c"
 11670 ;; Parameters:    Size  Location     Type
 11671 ;;  up              1    wreg     unsigned char 
 11672 ;; Auto vars:     Size  Location     Type
 11673 ;;  up              1   52[BANK0 ] unsigned char 
 11674 ;; Return value:  Size  Location     Type
 11675 ;;                  1    wreg      void 
 11676 ;; Registers used:
 11677 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11678 ;; Tracked objects:
 11679 ;;		On entry : 0/0
 11680 ;;		On exit  : 0/0
 11681 ;;		Unchanged: 0/0
 11682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11684 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11686 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 11687 ;;Total ram usage:        2 bytes
 11688 ;; Hardware stack levels used:    1
 11689 ;; Hardware stack levels required when called:   10
 11690 ;; This function calls:
 11691 ;;		_key_process_up_down_variable_speed_ex
 11692 ;;		_ui_key_process_up_down_main
 11693 ;; This function is called by:
 11694 ;;		_ui_key_process
 11695 ;; This function uses a non-reentrant model
 11696 ;;
 11697                           
 11698                           
 11699                           ;psect for function _ui_key_process_up_down
 11700  1E21                     _ui_key_process_up_down:	
 11701                           
 11702                           ;incstack = 0
 11703                           ; Regs used in _ui_key_process_up_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11704                           ;ui_key_process_up_down@up stored from wreg
 11705  1E21  0020               	movlb	0	; select bank0
 11706  1E22  00D4               	movwf	ui_key_process_up_down@up
 11707                           
 11708                           ;ui_key.c: 155: if(menu<3){
 11709  1E23  3003               	movlw	3
 11710  1E24  0021               	movlb	1	; select bank1
 11711  1E25  0243               	subwf	_menu^(0+128),w
 11712  1E26  1803               	skipnc
 11713  1E27  2EE2               	goto	l17057
 11714                           
 11715                           ;ui_key.c: 156: ui_key_process_up_down_main(up);
 11716  1E28  0020               	movlb	0	; select bank0
 11717  1E29  0854               	movf	ui_key_process_up_down@up,w
 11718  1E2A  31A0  2000         	fcall	_ui_key_process_up_down_main
 11719                           
 11720                           ;ui_key.c: 157: return;
 11721  1E2C  0008               	return
 11722  1E2D                     l17033:	
 11723                           ;ui_key.c: 161: case 0x10:
 11724                           
 11725                           ;ui_key.c: 158: }
 11726                           ;ui_key.c: 159: switch(menu){
 11727                           
 11728                           
 11729                           ;ui_key.c: 162: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 200, up);
 11730  1E2D  3000               	movlw	0
 11731  1E2E  0020               	movlb	0	; select bank0
 11732  1E2F  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11733  1E30  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11734  1E31  30C8               	movlw	200
 11735  1E32  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11736  1E33  3000               	movlw	0
 11737  1E34  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11738  1E35  0854               	movf	ui_key_process_up_down@up,w
 11739  1E36  00D3               	movwf	??_ui_key_process_up_down
 11740  1E37  0853               	movf	??_ui_key_process_up_down,w
 11741  1E38  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11742  1E39  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11743  1E3A  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11744                           
 11745                           ;ui_key.c: 163: break;
 11746  1E3C  0008               	return
 11747  1E3D                     l17035:	
 11748                           ;ui_key.c: 164: case 0x40:
 11749                           
 11750                           
 11751                           ;ui_key.c: 165: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,1, 9999, up);
 11752  1E3D  3001               	movlw	1
 11753  1E3E  0020               	movlb	0	; select bank0
 11754  1E3F  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11755  1E40  3000               	movlw	0
 11756  1E41  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11757  1E42  300F               	movlw	15
 11758  1E43  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11759  1E44  3027               	movlw	39
 11760  1E45  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11761  1E46  0854               	movf	ui_key_process_up_down@up,w
 11762  1E47  00D3               	movwf	??_ui_key_process_up_down
 11763  1E48  0853               	movf	??_ui_key_process_up_down,w
 11764  1E49  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11765  1E4A  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11766  1E4B  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11767                           
 11768                           ;ui_key.c: 166: break;
 11769  1E4D  0008               	return
 11770  1E4E                     l17037:	
 11771                           ;ui_key.c: 167: case 0x50:
 11772                           
 11773                           
 11774                           ;ui_key.c: 168: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 9999, up);
 11775  1E4E  3000               	movlw	0
 11776  1E4F  0020               	movlb	0	; select bank0
 11777  1E50  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11778  1E51  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11779  1E52  300F               	movlw	15
 11780  1E53  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11781  1E54  3027               	movlw	39
 11782  1E55  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11783  1E56  0854               	movf	ui_key_process_up_down@up,w
 11784  1E57  00D3               	movwf	??_ui_key_process_up_down
 11785  1E58  0853               	movf	??_ui_key_process_up_down,w
 11786  1E59  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11787  1E5A  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11788  1E5B  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11789                           
 11790                           ;ui_key.c: 169: break;
 11791  1E5D  0008               	return
 11792  1E5E                     l17039:	
 11793                           ;ui_key.c: 170: case 0x60:
 11794                           
 11795                           
 11796                           ;ui_key.c: 171: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 9999, up);
 11797  1E5E  3000               	movlw	0
 11798  1E5F  0020               	movlb	0	; select bank0
 11799  1E60  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11800  1E61  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11801  1E62  300F               	movlw	15
 11802  1E63  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11803  1E64  3027               	movlw	39
 11804  1E65  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11805  1E66  0854               	movf	ui_key_process_up_down@up,w
 11806  1E67  00D3               	movwf	??_ui_key_process_up_down
 11807  1E68  0853               	movf	??_ui_key_process_up_down,w
 11808  1E69  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11809  1E6A  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11810  1E6B  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11811                           
 11812                           ;ui_key.c: 172: break;
 11813  1E6D  0008               	return
 11814  1E6E                     l17041:	
 11815                           ;ui_key.c: 173: case 0xa0:
 11816                           
 11817                           
 11818                           ;ui_key.c: 174: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,1, 253, up);
 11819  1E6E  3001               	movlw	1
 11820  1E6F  0020               	movlb	0	; select bank0
 11821  1E70  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11822  1E71  3000               	movlw	0
 11823  1E72  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11824  1E73  30FD               	movlw	253
 11825  1E74  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11826  1E75  3000               	movlw	0
 11827  1E76  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11828  1E77  0854               	movf	ui_key_process_up_down@up,w
 11829  1E78  00D3               	movwf	??_ui_key_process_up_down
 11830  1E79  0853               	movf	??_ui_key_process_up_down,w
 11831  1E7A  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11832  1E7B  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11833  1E7C  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11834                           
 11835                           ;ui_key.c: 175: break;
 11836  1E7E  0008               	return
 11837  1E7F                     l17043:	
 11838                           ;ui_key.c: 177: case 0x70:
 11839                           
 11840                           
 11841                           ;ui_key.c: 178: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 20, up);
 11842  1E7F  3000               	movlw	0
 11843  1E80  0020               	movlb	0	; select bank0
 11844  1E81  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11845  1E82  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11846  1E83  3014               	movlw	20
 11847  1E84  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11848  1E85  3000               	movlw	0
 11849  1E86  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11850  1E87  0854               	movf	ui_key_process_up_down@up,w
 11851  1E88  00D3               	movwf	??_ui_key_process_up_down
 11852  1E89  0853               	movf	??_ui_key_process_up_down,w
 11853  1E8A  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11854  1E8B  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11855  1E8C  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11856                           
 11857                           ;ui_key.c: 179: break;
 11858  1E8E  0008               	return
 11859  1E8F                     l17045:	
 11860                           ;ui_key.c: 180: case 0x80:
 11861                           
 11862                           
 11863                           ;ui_key.c: 181: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,10, 1000, up);
 11864  1E8F  300A               	movlw	10
 11865  1E90  0020               	movlb	0	; select bank0
 11866  1E91  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11867  1E92  3000               	movlw	0
 11868  1E93  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11869  1E94  30E8               	movlw	232
 11870  1E95  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11871  1E96  3003               	movlw	3
 11872  1E97  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11873  1E98  0854               	movf	ui_key_process_up_down@up,w
 11874  1E99  00D3               	movwf	??_ui_key_process_up_down
 11875  1E9A  0853               	movf	??_ui_key_process_up_down,w
 11876  1E9B  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11877  1E9C  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11878  1E9D  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11879                           
 11880                           ;ui_key.c: 182: break;
 11881  1E9F  0008               	return
 11882  1EA0                     l17047:	
 11883                           ;ui_key.c: 183: case 0x90:
 11884                           
 11885                           
 11886                           ;ui_key.c: 184: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 1000, up);
 11887  1EA0  3000               	movlw	0
 11888  1EA1  0020               	movlb	0	; select bank0
 11889  1EA2  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11890  1EA3  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11891  1EA4  30E8               	movlw	232
 11892  1EA5  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11893  1EA6  3003               	movlw	3
 11894  1EA7  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11895  1EA8  0854               	movf	ui_key_process_up_down@up,w
 11896  1EA9  00D3               	movwf	??_ui_key_process_up_down
 11897  1EAA  0853               	movf	??_ui_key_process_up_down,w
 11898  1EAB  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11899  1EAC  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11900  1EAD  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11901                           
 11902                           ;ui_key.c: 185: break;
 11903  1EAF  0008               	return
 11904  1EB0                     l17049:	
 11905                           ;ui_key.c: 186: case 0xb0:
 11906                           
 11907                           
 11908                           ;ui_key.c: 187: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 11909  1EB0  309C               	movlw	156
 11910  1EB1  0020               	movlb	0	; select bank0
 11911  1EB2  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11912  1EB3  30FF               	movlw	255
 11913  1EB4  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11914  1EB5  3064               	movlw	100
 11915  1EB6  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11916  1EB7  3000               	movlw	0
 11917  1EB8  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11918  1EB9  0854               	movf	ui_key_process_up_down@up,w
 11919  1EBA  00D3               	movwf	??_ui_key_process_up_down
 11920  1EBB  0853               	movf	??_ui_key_process_up_down,w
 11921  1EBC  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11922  1EBD  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11923  1EBE  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11924                           
 11925                           ;ui_key.c: 188: break;
 11926  1EC0  0008               	return
 11927  1EC1                     l17051:	
 11928                           ;ui_key.c: 189: case 0xb1:
 11929                           
 11930                           
 11931                           ;ui_key.c: 190: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 11932  1EC1  309C               	movlw	156
 11933  1EC2  0020               	movlb	0	; select bank0
 11934  1EC3  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11935  1EC4  30FF               	movlw	255
 11936  1EC5  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11937  1EC6  3064               	movlw	100
 11938  1EC7  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11939  1EC8  3000               	movlw	0
 11940  1EC9  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11941  1ECA  0854               	movf	ui_key_process_up_down@up,w
 11942  1ECB  00D3               	movwf	??_ui_key_process_up_down
 11943  1ECC  0853               	movf	??_ui_key_process_up_down,w
 11944  1ECD  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11945  1ECE  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11946  1ECF  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11947                           
 11948                           ;ui_key.c: 191: break;
 11949  1ED1  0008               	return
 11950  1ED2                     l17053:	
 11951                           ;ui_key.c: 192: case 0xf1:
 11952                           
 11953                           
 11954                           ;ui_key.c: 193: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 1, up);
 11955  1ED2  3000               	movlw	0
 11956  1ED3  0020               	movlb	0	; select bank0
 11957  1ED4  00C3               	movwf	key_process_up_down_variable_speed_ex@min
 11958  1ED5  00C4               	movwf	key_process_up_down_variable_speed_ex@min+1
 11959  1ED6  3001               	movlw	1
 11960  1ED7  00C5               	movwf	key_process_up_down_variable_speed_ex@max
 11961  1ED8  3000               	movlw	0
 11962  1ED9  00C6               	movwf	key_process_up_down_variable_speed_ex@max+1
 11963  1EDA  0854               	movf	ui_key_process_up_down@up,w
 11964  1EDB  00D3               	movwf	??_ui_key_process_up_down
 11965  1EDC  0853               	movf	??_ui_key_process_up_down,w
 11966  1EDD  00C7               	movwf	key_process_up_down_variable_speed_ex@up
 11967  1EDE  3061               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11968  1EDF  319B  239D         	fcall	_key_process_up_down_variable_speed_ex
 11969                           
 11970                           ;ui_key.c: 195: }
 11971                           
 11972                           ;ui_key.c: 194: break;
 11973  1EE1  0008               	return
 11974  1EE2                     l17057:	
 11975  1EE2  0021               	movlb	1	; select bank1
 11976  1EE3  0843               	movf	_menu^(0+128),w
 11977                           
 11978                           ; Switch size 1, requested type "space"
 11979                           ; Number of cases is 11, Range of values is 16 to 241
 11980                           ; switch strategies available:
 11981                           ; Name         Instructions Cycles
 11982                           ; simple_byte           34    18 (average)
 11983                           ; jumptable            263     9 (fixed)
 11984                           ;	Chosen strategy is simple_byte
 11985  1EE4  3A10               	xorlw	16	; case 16
 11986  1EE5  1903               	skipnz
 11987  1EE6  2E2D               	goto	l17033
 11988  1EE7  3A50               	xorlw	80	; case 64
 11989  1EE8  1903               	skipnz
 11990  1EE9  2E3D               	goto	l17035
 11991  1EEA  3A10               	xorlw	16	; case 80
 11992  1EEB  1903               	skipnz
 11993  1EEC  2E4E               	goto	l17037
 11994  1EED  3A30               	xorlw	48	; case 96
 11995  1EEE  1903               	skipnz
 11996  1EEF  2E5E               	goto	l17039
 11997  1EF0  3A10               	xorlw	16	; case 112
 11998  1EF1  1903               	skipnz
 11999  1EF2  2E7F               	goto	l17043
 12000  1EF3  3AF0               	xorlw	240	; case 128
 12001  1EF4  1903               	skipnz
 12002  1EF5  2E8F               	goto	l17045
 12003  1EF6  3A10               	xorlw	16	; case 144
 12004  1EF7  1903               	skipnz
 12005  1EF8  2EA0               	goto	l17047
 12006  1EF9  3A30               	xorlw	48	; case 160
 12007  1EFA  1903               	skipnz
 12008  1EFB  2E6E               	goto	l17041
 12009  1EFC  3A10               	xorlw	16	; case 176
 12010  1EFD  1903               	skipnz
 12011  1EFE  2EB0               	goto	l17049
 12012  1EFF  3A01               	xorlw	1	; case 177
 12013  1F00  1903               	skipnz
 12014  1F01  2EC1               	goto	l17051
 12015  1F02  3A40               	xorlw	64	; case 241
 12016  1F03  1903               	skipnz
 12017  1F04  2ED2               	goto	l17053
 12018  1F05  2F06               	goto	l648
 12019  1F06                     l648:	
 12020  1F06  0008               	return
 12021  1F07                     __end_of_ui_key_process_up_down:	
 12022                           
 12023                           	psect	text6
 12024  2000                     __ptext6:	
 12025 ;; *************** function _ui_key_process_up_down_main *****************
 12026 ;; Defined at:
 12027 ;;		line 89 in file "src/api/ui_key.c"
 12028 ;; Parameters:    Size  Location     Type
 12029 ;;  up              1    wreg     unsigned char 
 12030 ;; Auto vars:     Size  Location     Type
 12031 ;;  up              1    4[COMMON] unsigned char 
 12032 ;; Return value:  Size  Location     Type
 12033 ;;                  1    wreg      void 
 12034 ;; Registers used:
 12035 ;;		wreg, status,2, status,0
 12036 ;; Tracked objects:
 12037 ;;		On entry : 0/0
 12038 ;;		On exit  : 0/0
 12039 ;;		Unchanged: 0/0
 12040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12042 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12045 ;;Total ram usage:        2 bytes
 12046 ;; Hardware stack levels used:    1
 12047 ;; Hardware stack levels required when called:    2
 12048 ;; This function calls:
 12049 ;;		Nothing
 12050 ;; This function is called by:
 12051 ;;		_ui_key_process_up_down
 12052 ;; This function uses a non-reentrant model
 12053 ;;
 12054                           
 12055                           
 12056                           ;psect for function _ui_key_process_up_down_main
 12057  2000                     _ui_key_process_up_down_main:	
 12058                           
 12059                           ;incstack = 0
 12060                           ; Regs used in _ui_key_process_up_down_main: [wreg+status,2+status,0]
 12061                           ;ui_key_process_up_down_main@up stored from wreg
 12062  2000  00F4               	movwf	ui_key_process_up_down_main@up
 12063                           
 12064                           ;ui_key.c: 91: if(!up){
 12065  2001  0874               	movf	ui_key_process_up_down_main@up,w
 12066  2002  1D03               	btfss	3,2
 12067  2003  280D               	goto	l14219
 12068                           
 12069                           ;ui_key.c: 93: menu++;
 12070  2004  3001               	movlw	1
 12071  2005  00F3               	movwf	??_ui_key_process_up_down_main
 12072  2006  0873               	movf	??_ui_key_process_up_down_main,w
 12073  2007  0021               	movlb	1	; select bank1
 12074  2008  07C3               	addwf	_menu^(0+128),f
 12075                           
 12076                           ;ui_key.c: 94: if(menu>2)menu=0;
 12077  2009  3003               	movlw	3
 12078  200A  0243               	subwf	_menu^(0+128),w
 12079  200B  1803               	btfsc	3,0
 12080  200C  01C3               	clrf	_menu^(0+128)
 12081  200D                     l14219:	
 12082                           
 12083                           ;ui_key.c: 95: }
 12084                           ;ui_key.c: 96: bkupMenu=menu;
 12085  200D  0021               	movlb	1	; select bank1
 12086  200E  0843               	movf	_menu^(0+128),w
 12087  200F  00F3               	movwf	??_ui_key_process_up_down_main
 12088  2010  0873               	movf	??_ui_key_process_up_down_main,w
 12089  2011  00C2               	movwf	_bkupMenu^(0+128)
 12090  2012  0008               	return
 12091  2013                     __end_of_ui_key_process_up_down_main:	
 12092                           
 12093                           	psect	text7
 12094  1B9D                     __ptext7:	
 12095 ;; *************** function _key_process_up_down_variable_speed_ex *****************
 12096 ;; Defined at:
 12097 ;;		line 47 in file "src/api/ui_key.c"
 12098 ;; Parameters:    Size  Location     Type
 12099 ;;  val             1    wreg     PTR int 
 12100 ;;		 -> uiAdjbuf(8), 
 12101 ;;  min             2   35[BANK0 ] int 
 12102 ;;  max             2   37[BANK0 ] int 
 12103 ;;  up              1   39[BANK0 ] unsigned char 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  val             1   50[BANK0 ] PTR int 
 12106 ;;		 -> uiAdjbuf(8), 
 12107 ;;  t32             2   48[BANK0 ] unsigned int 
 12108 ;;  speed           2   46[BANK0 ] unsigned int 
 12109 ;;  change          1   45[BANK0 ] unsigned char 
 12110 ;;  key             1   44[BANK0 ] unsigned char 
 12111 ;; Return value:  Size  Location     Type
 12112 ;;                  1    wreg      void 
 12113 ;; Registers used:
 12114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12120 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 12121 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 12122 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 12123 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0
 12124 ;;Total ram usage:       16 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    9
 12127 ;; This function calls:
 12128 ;;		_get_globle_ticker
 12129 ;;		_key_scan_call
 12130 ;;		_set_globle_ticker
 12131 ;;		_ui_disp_menu
 12132 ;; This function is called by:
 12133 ;;		_ui_key_process_up_down
 12134 ;; This function uses a non-reentrant model
 12135 ;;
 12136                           
 12137                           
 12138                           ;psect for function _key_process_up_down_variable_speed_ex
 12139  1B9D                     _key_process_up_down_variable_speed_ex:	
 12140                           
 12141                           ;incstack = 0
 12142                           ; Regs used in _key_process_up_down_variable_speed_ex: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 12143                           ;key_process_up_down_variable_speed_ex@val stored from wreg
 12144  1B9D  0020               	movlb	0	; select bank0
 12145  1B9E  00D2               	movwf	key_process_up_down_variable_speed_ex@val
 12146                           
 12147                           ;ui_key.c: 49: bool change = 1;
 12148  1B9F  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12149  1BA0  0ACD               	incf	key_process_up_down_variable_speed_ex@change,f
 12150                           
 12151                           ;ui_key.c: 50: uint16_t speed = 0, t32;
 12152  1BA1  01CE               	clrf	key_process_up_down_variable_speed_ex@speed
 12153  1BA2  01CF               	clrf	key_process_up_down_variable_speed_ex@speed+1
 12154                           
 12155                           ;ui_key.c: 51: uint8_t key = KeyValue;
 12156  1BA3  0021               	movlb	1	; select bank1
 12157  1BA4  0841               	movf	_KeyValue^(0+128),w
 12158  1BA5  0020               	movlb	0	; select bank0
 12159  1BA6  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12160  1BA7  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12161  1BA8  00CC               	movwf	key_process_up_down_variable_speed_ex@key
 12162                           
 12163                           ;ui_key.c: 52: if(min>=max)return;
 12164  1BA9  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12165  1BAA  3A80               	xorlw	128
 12166  1BAB  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12167  1BAC  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12168  1BAD  3A80               	xorlw	128
 12169  1BAE  0248               	subwf	??_key_process_up_down_variable_speed_ex,w
 12170  1BAF  1D03               	skipz
 12171  1BB0  2BB3               	goto	u16045
 12172  1BB1  0845               	movf	key_process_up_down_variable_speed_ex@max,w
 12173  1BB2  0243               	subwf	key_process_up_down_variable_speed_ex@min,w
 12174  1BB3                     u16045:	
 12175  1BB3  1803               	btfsc	3,0
 12176  1BB4  0008               	return
 12177                           
 12178                           ;ui_key.c: 53: set_globle_ticker(0);
 12179  1BB5  3000               	movlw	0
 12180  1BB6  00F3               	movwf	set_globle_ticker@tk
 12181  1BB7  00F4               	movwf	set_globle_ticker@tk+1
 12182  1BB8  31BB  232C  319B   	fcall	_set_globle_ticker
 12183  1BBB                     l16977:	
 12184                           ;ui_key.c: 54: do {
 12185                           
 12186                           
 12187                           ;ui_key.c: 55: if (change == 1) {
 12188  1BBB  0020               	movlb	0	; select bank0
 12189  1BBC  034D               	decf	key_process_up_down_variable_speed_ex@change,w
 12190  1BBD  1D03               	btfss	3,2
 12191  1BBE  2C16               	goto	l16997
 12192                           
 12193                           ;ui_key.c: 56: change = 0;
 12194  1BBF  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12195                           
 12196                           ;ui_key.c: 57: if (up) {
 12197  1BC0  0847               	movf	key_process_up_down_variable_speed_ex@up,w
 12198  1BC1  1903               	btfsc	3,2
 12199  1BC2  2BEA               	goto	l16989
 12200                           
 12201                           ;ui_key.c: 58: (*val) += 1;
 12202  1BC3  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12203  1BC4  0086               	movwf	6
 12204  1BC5  3001               	movlw	1	; select bank2/3
 12205  1BC6  0087               	movwf	7
 12206  1BC7  3001               	movlw	1
 12207  1BC8  0781               	addwf	1,f
 12208  1BC9  3141               	addfsr 1,1
 12209  1BCA  1803               	skipnc
 12210  1BCB  0A81               	incf	1,f
 12211                           
 12212                           ;ui_key.c: 59: if (*val > max)*val = min;
 12213  1BCC  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12214  1BCD  0086               	movwf	6
 12215  1BCE  3001               	movlw	1	; select bank2/3
 12216  1BCF  0087               	movwf	7
 12217  1BD0  3F40               	moviw [0]fsr1
 12218  1BD1  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12219  1BD2  3F41               	moviw [1]fsr1
 12220  1BD3  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12221  1BD4  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12222  1BD5  3A80               	xorlw	128
 12223  1BD6  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12224  1BD7  0849               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12225  1BD8  3A80               	xorlw	128
 12226  1BD9  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12227  1BDA  1D03               	skipz
 12228  1BDB  2BDE               	goto	u16075
 12229  1BDC  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12230  1BDD  0245               	subwf	key_process_up_down_variable_speed_ex@max,w
 12231  1BDE                     u16075:	
 12232  1BDE  1803               	skipnc
 12233  1BDF  2C13               	goto	l16995
 12234  1BE0  0020               	movlb	0	; select bank0
 12235  1BE1  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12236  1BE2  0086               	movwf	6
 12237  1BE3  3001               	movlw	1	; select bank2/3
 12238  1BE4  0087               	movwf	7
 12239  1BE5  0843               	movf	key_process_up_down_variable_speed_ex@min,w
 12240  1BE6  3FC0               	movwi [0]fsr1
 12241  1BE7  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12242  1BE8  3FC1               	movwi [1]fsr1
 12243                           
 12244                           ;ui_key.c: 60: } else {
 12245  1BE9  2C13               	goto	l16995
 12246  1BEA                     l16989:	
 12247                           
 12248                           ;ui_key.c: 61: if (*val <= min)*val = max;
 12249  1BEA  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12250  1BEB  0086               	movwf	6
 12251  1BEC  3001               	movlw	1	; select bank2/3
 12252  1BED  0087               	movwf	7
 12253  1BEE  3F40               	moviw [0]fsr1
 12254  1BEF  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12255  1BF0  3F41               	moviw [1]fsr1
 12256  1BF1  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12257  1BF2  0844               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12258  1BF3  3A80               	xorlw	128
 12259  1BF4  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12260  1BF5  0849               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12261  1BF6  3A80               	xorlw	128
 12262  1BF7  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12263  1BF8  1D03               	skipz
 12264  1BF9  2BFC               	goto	u16085
 12265  1BFA  0848               	movf	??_key_process_up_down_variable_speed_ex,w
 12266  1BFB  0243               	subwf	key_process_up_down_variable_speed_ex@min,w
 12267  1BFC                     u16085:	
 12268  1BFC  1C03               	skipc
 12269  1BFD  2C08               	goto	l16993
 12270  1BFE  0020               	movlb	0	; select bank0
 12271  1BFF  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12272  1C00  0086               	movwf	6
 12273  1C01  3001               	movlw	1	; select bank2/3
 12274  1C02  0087               	movwf	7
 12275  1C03  0845               	movf	key_process_up_down_variable_speed_ex@max,w
 12276  1C04  3FC0               	movwi [0]fsr1
 12277  1C05  0846               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12278  1C06  3FC1               	movwi [1]fsr1
 12279  1C07  2C13               	goto	l16995
 12280  1C08                     l16993:	
 12281                           
 12282                           ;ui_key.c: 62: else {
 12283                           ;ui_key.c: 63: (*val) -= 1;
 12284  1C08  0020               	movlb	0	; select bank0
 12285  1C09  0852               	movf	key_process_up_down_variable_speed_ex@val,w
 12286  1C0A  0086               	movwf	6
 12287  1C0B  3001               	movlw	1	; select bank2/3
 12288  1C0C  0087               	movwf	7
 12289  1C0D  30FF               	movlw	255
 12290  1C0E  0781               	addwf	1,f
 12291  1C0F  3141               	addfsr 1,1
 12292  1C10  30FF               	movlw	255
 12293  1C11  3D81               	addwfc	1,f
 12294  1C12  317F               	addfsr 1,-1
 12295  1C13                     l16995:	
 12296                           
 12297                           ;ui_key.c: 64: }
 12298                           ;ui_key.c: 65: }
 12299                           ;ui_key.c: 66: ui_disp_menu();
 12300  1C13  319F  2707  319B   	fcall	_ui_disp_menu
 12301  1C16                     l16997:	
 12302                           
 12303                           ;ui_key.c: 67: }
 12304                           ;ui_key.c: 68: key_scan_call();
 12305  1C16  31BF  27D9  319B   	fcall	_key_scan_call
 12306                           
 12307                           ;ui_key.c: 69: if (key != KeyValue)break;
 12308  1C19  0020               	movlb	0	; select bank0
 12309  1C1A  084C               	movf	key_process_up_down_variable_speed_ex@key,w
 12310  1C1B  0021               	movlb	1	; select bank1
 12311  1C1C  0641               	xorwf	_KeyValue^(0+128),w
 12312  1C1D  1D03               	btfss	3,2
 12313  1C1E  0008               	return
 12314                           
 12315                           ;ui_key.c: 70: t32 = get_globle_ticker();
 12316  1C1F  31BB  2397  319B   	fcall	_get_globle_ticker
 12317  1C22  0874               	movf	?_get_globle_ticker+1,w
 12318  1C23  0020               	movlb	0	; select bank0
 12319  1C24  00D1               	movwf	key_process_up_down_variable_speed_ex@t32+1
 12320  1C25  0873               	movf	?_get_globle_ticker,w
 12321  1C26  00D0               	movwf	key_process_up_down_variable_speed_ex@t32
 12322                           
 12323                           ;ui_key.c: 71: if (t32 <= 1000) {
 12324  1C27  3003               	movlw	3
 12325  1C28  0251               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12326  1C29  30E9               	movlw	233
 12327  1C2A  1903               	skipnz
 12328  1C2B  0250               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12329  1C2C  1803               	skipnc
 12330  1C2D  2C3F               	goto	l17013
 12331                           
 12332                           ;ui_key.c: 72: if (t32 - speed >= 200) {
 12333  1C2E  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12334  1C2F  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12335  1C30  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12336  1C31  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12337  1C32  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12338  1C33  1903               	skipnz
 12339  1C34  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12340  1C35  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12341  1C36  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12342  1C37  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12343  1C38  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12344  1C39  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12345  1C3A  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12346  1C3B  3000               	movlw	0
 12347  1C3C  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12348  1C3D  30C8               	movlw	200
 12349  1C3E  2C67               	goto	L2
 12350  1C3F                     l17013:	
 12351                           ;ui_key.c: 75: }
 12352                           ;ui_key.c: 76: } else if (t32 <= 2000) {
 12353                           
 12354                           ;ui_key.c: 74: change = 1;
 12355                           
 12356                           ;ui_key.c: 73: speed = t32;
 12357                           
 12358  1C3F  3007               	movlw	7
 12359  1C40  0251               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12360  1C41  30D1               	movlw	209
 12361  1C42  1903               	skipnz
 12362  1C43  0250               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12363  1C44  1803               	skipnc
 12364  1C45  2C57               	goto	l17021
 12365                           
 12366                           ;ui_key.c: 77: if (t32 - speed >= 100) {
 12367  1C46  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12368  1C47  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12369  1C48  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12370  1C49  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12371  1C4A  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12372  1C4B  1903               	skipnz
 12373  1C4C  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12374  1C4D  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12375  1C4E  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12376  1C4F  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12377  1C50  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12378  1C51  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12379  1C52  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12380  1C53  3000               	movlw	0
 12381  1C54  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12382  1C55  3064               	movlw	100
 12383  1C56  2C67               	goto	L2
 12384  1C57                     l17021:	
 12385                           ;ui_key.c: 80: }
 12386                           ;ui_key.c: 81: } else {
 12387                           
 12388                           ;ui_key.c: 79: change = 1;
 12389                           
 12390                           ;ui_key.c: 78: speed = t32;
 12391                           
 12392                           
 12393                           ;ui_key.c: 82: if (t32 - speed >= 10) {
 12394  1C57  094E               	comf	key_process_up_down_variable_speed_ex@speed,w
 12395  1C58  00C8               	movwf	??_key_process_up_down_variable_speed_ex
 12396  1C59  094F               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12397  1C5A  00C9               	movwf	??_key_process_up_down_variable_speed_ex+1
 12398  1C5B  0AC8               	incf	??_key_process_up_down_variable_speed_ex,f
 12399  1C5C  1903               	skipnz
 12400  1C5D  0AC9               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12401  1C5E  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12402  1C5F  0748               	addwf	??_key_process_up_down_variable_speed_ex,w
 12403  1C60  00CA               	movwf	??_key_process_up_down_variable_speed_ex+2
 12404  1C61  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12405  1C62  3D49               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12406  1C63  00CB               	movwf	??_key_process_up_down_variable_speed_ex+3
 12407  1C64  3000               	movlw	0
 12408  1C65  024B               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12409  1C66  300A               	movlw	10
 12410  1C67                     L2:	
 12411  1C67  1903               	skipnz
 12412  1C68  024A               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12413  1C69  1C03               	skipc
 12414  1C6A  2BBB               	goto	l16977
 12415                           
 12416                           ;ui_key.c: 83: speed = t32;
 12417  1C6B  0851               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12418  1C6C  00CF               	movwf	key_process_up_down_variable_speed_ex@speed+1
 12419  1C6D  0850               	movf	key_process_up_down_variable_speed_ex@t32,w
 12420  1C6E  00CE               	movwf	key_process_up_down_variable_speed_ex@speed
 12421                           
 12422                           ;ui_key.c: 84: change = 1;
 12423  1C6F  01CD               	clrf	key_process_up_down_variable_speed_ex@change
 12424  1C70  0ACD               	incf	key_process_up_down_variable_speed_ex@change,f
 12425                           
 12426                           ;ui_key.c: 85: }
 12427                           ;ui_key.c: 86: }
 12428                           ;ui_key.c: 87: } while (1);
 12429  1C71  2BBB               	goto	l16977
 12430  1C72                     __end_of_key_process_up_down_variable_speed_ex:	
 12431                           
 12432                           	psect	text8
 12433  1F07                     __ptext8:	
 12434 ;; *************** function _ui_disp_menu *****************
 12435 ;; Defined at:
 12436 ;;		line 549 in file "src/api/ui.c"
 12437 ;; Parameters:    Size  Location     Type
 12438 ;;		None
 12439 ;; Auto vars:     Size  Location     Type
 12440 ;;		None
 12441 ;; Return value:  Size  Location     Type
 12442 ;;                  1    wreg      void 
 12443 ;; Registers used:
 12444 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12445 ;; Tracked objects:
 12446 ;;		On entry : 0/0
 12447 ;;		On exit  : 0/0
 12448 ;;		Unchanged: 0/0
 12449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12451 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12454 ;;Total ram usage:        2 bytes
 12455 ;; Hardware stack levels used:    1
 12456 ;; Hardware stack levels required when called:    8
 12457 ;; This function calls:
 12458 ;;		_lcd_clear_buffer
 12459 ;;		_lcd_disp_refresh
 12460 ;;		_lcd_disp_str
 12461 ;;		_ui_disp_balance_and_volume
 12462 ;;		_ui_disp_clear_balance
 12463 ;;		_ui_disp_clear_totale
 12464 ;;		_ui_disp_flow
 12465 ;;		_ui_disp_modbus_id
 12466 ;;		_ui_disp_set_balanceOff
 12467 ;;		_ui_disp_set_balanceWarning
 12468 ;;		_ui_disp_set_calib
 12469 ;;		_ui_disp_set_device_id
 12470 ;;		_ui_disp_set_imd_flow_uint
 12471 ;;		_ui_disp_set_line
 12472 ;;		_ui_disp_set_price
 12473 ;;		_ui_disp_set_transferMoneyLimit
 12474 ;;		_ui_disp_small_flow_how_care
 12475 ;;		_ui_disp_str_num_ex
 12476 ;;		_ui_disp_totale_v
 12477 ;;		_ui_disp_transfer_money
 12478 ;; This function is called by:
 12479 ;;		_key_process_up_down_variable_speed_ex
 12480 ;;		_ui_key_process
 12481 ;;		_main
 12482 ;; This function uses a non-reentrant model
 12483 ;;
 12484                           
 12485                           
 12486                           ;psect for function _ui_disp_menu
 12487  1F07                     _ui_disp_menu:	
 12488                           
 12489                           ;ui.c: 550: Event &= ~(0x01<<3);
 12490                           
 12491                           ;incstack = 0
 12492                           ; Regs used in _ui_disp_menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12493  1F07  30F7               	movlw	247
 12494  1F08  0020               	movlb	0	; select bank0
 12495  1F09  00C1               	movwf	??_ui_disp_menu
 12496  1F0A  0841               	movf	??_ui_disp_menu,w
 12497  1F0B  0021               	movlb	1	; select bank1
 12498  1F0C  05C7               	andwf	_Event^(0+128),f
 12499                           
 12500                           ;ui.c: 551: if((valveStatus==VALVE_CLOSEING || valveStatus==VALVE_OPENING || valveStatus
      +                          ==VALVE_CLOSED) && (menu<3)){
 12501  1F0D  3004               	movlw	4
 12502  1F0E  067A               	xorwf	_valveStatus,w
 12503  1F0F  1903               	btfsc	3,2
 12504  1F10  2F17               	goto	l16875
 12505  1F11  3003               	movlw	3
 12506  1F12  067A               	xorwf	_valveStatus,w
 12507  1F13  1D03               	btfss	3,2
 12508  1F14  037A               	decf	_valveStatus,w
 12509  1F15  1D03               	btfss	3,2
 12510  1F16  2FC6               	goto	l16963
 12511  1F17                     l16875:	
 12512  1F17  3003               	movlw	3
 12513  1F18  0243               	subwf	_menu^(0+128),w
 12514  1F19  1803               	skipnc
 12515  1F1A  2FC6               	goto	l16963
 12516                           
 12517                           ;ui.c: 552: lcd_clear_buffer();
 12518  1F1B  31BB  2358  319F   	fcall	_lcd_clear_buffer
 12519                           
 12520                           ;ui.c: 553: if(valveStatus==VALVE_CLOSED || (sec&0x01)){
 12521  1F1E  037A               	decf	_valveStatus,w
 12522  1F1F  1903               	btfsc	3,2
 12523  1F20  2F24               	goto	l16883
 12524  1F21  0022               	movlb	2	; select bank2
 12525  1F22  1C3E               	btfss	_sec^(0+256),0
 12526  1F23  2F57               	goto	l16899
 12527  1F24                     l16883:	
 12528                           
 12529                           ;ui.c: 555: if(opReason==OFF_REASON_LA){
 12530  1F24  0021               	movlb	1	; select bank1
 12531  1F25  0344               	decf	_opReason^(0+128),w	;volatile
 12532  1F26  1D03               	btfss	3,2
 12533  1F27  2F30               	goto	l16887
 12534                           
 12535                           ;ui.c: 556: lcd_disp_str((uint8_t*)" la 0ff ");
 12536  1F28  30C7               	movlw	low (STR_19| (0+32768))
 12537  1F29  0020               	movlb	0	; select bank0
 12538  1F2A  00A2               	movwf	lcd_disp_str@str
 12539  1F2B  30B8               	movlw	high (STR_19| (0+32768))
 12540  1F2C  00A3               	movwf	lcd_disp_str@str+1
 12541  1F2D  31A8  20E8  319F   	fcall	_lcd_disp_str
 12542  1F30                     l16887:	
 12543                           
 12544                           ;ui.c: 557: }
 12545                           ;ui.c: 558: if(opReason== OFF_REASON_MAN){
 12546  1F30  3002               	movlw	2
 12547  1F31  0021               	movlb	1	; select bank1
 12548  1F32  0644               	xorwf	_opReason^(0+128),w	;volatile
 12549  1F33  1D03               	btfss	3,2
 12550  1F34  2F3D               	goto	l16891
 12551                           
 12552                           ;ui.c: 559: lcd_disp_str((uint8_t*)"    0ff ");
 12553  1F35  30BE               	movlw	low (STR_20| (0+32768))
 12554  1F36  0020               	movlb	0	; select bank0
 12555  1F37  00A2               	movwf	lcd_disp_str@str
 12556  1F38  30B8               	movlw	high (STR_20| (0+32768))
 12557  1F39  00A3               	movwf	lcd_disp_str@str+1
 12558  1F3A  31A8  20E8  319F   	fcall	_lcd_disp_str
 12559  1F3D                     l16891:	
 12560                           
 12561                           ;ui.c: 560: }
 12562                           ;ui.c: 561: if(opReason==ON_REASON_HA){
 12563  1F3D  3003               	movlw	3
 12564  1F3E  0021               	movlb	1	; select bank1
 12565  1F3F  0644               	xorwf	_opReason^(0+128),w	;volatile
 12566  1F40  1D03               	btfss	3,2
 12567  1F41  2F4A               	goto	l16895
 12568                           
 12569                           ;ui.c: 562: lcd_disp_str((uint8_t*)" ha 0n  ");
 12570  1F42  30B5               	movlw	low (STR_21| (0+32768))
 12571  1F43  0020               	movlb	0	; select bank0
 12572  1F44  00A2               	movwf	lcd_disp_str@str
 12573  1F45  30B8               	movlw	high (STR_21| (0+32768))
 12574  1F46  00A3               	movwf	lcd_disp_str@str+1
 12575  1F47  31A8  20E8  319F   	fcall	_lcd_disp_str
 12576  1F4A                     l16895:	
 12577                           
 12578                           ;ui.c: 563: }
 12579                           ;ui.c: 564: if(opReason==ON_REASON_MAN){
 12580  1F4A  3004               	movlw	4
 12581  1F4B  0021               	movlb	1	; select bank1
 12582  1F4C  0644               	xorwf	_opReason^(0+128),w	;volatile
 12583  1F4D  1D03               	btfss	3,2
 12584  1F4E  0008               	return
 12585                           
 12586                           ;ui.c: 565: lcd_disp_str((uint8_t*)"    0n  ");
 12587  1F4F  30AC               	movlw	low (STR_22| (0+32768))
 12588  1F50  0020               	movlb	0	; select bank0
 12589  1F51  00A2               	movwf	lcd_disp_str@str
 12590  1F52  30B8               	movlw	high (STR_22| (0+32768))
 12591  1F53  00A3               	movwf	lcd_disp_str@str+1
 12592  1F54  31A8  20E8         	fcall	_lcd_disp_str
 12593                           
 12594                           ;ui.c: 566: }
 12595                           ;ui.c: 567: }else{
 12596  1F56  0008               	return
 12597  1F57                     l16899:	
 12598                           
 12599                           ;ui.c: 568: lcd_disp_refresh();
 12600  1F57  31BC  2403         	fcall	_lcd_disp_refresh
 12601                           
 12602                           ;ui.c: 569: }
 12603                           ;ui.c: 570: return;
 12604  1F59  0008               	return
 12605  1F5A                     l16903:	
 12606                           ;ui.c: 574: {
 12607                           ;ui.c: 575: case 0: {ui_disp_flow(); do { LATFbits.LATF1 = 1; } while(0);;do { LATAbits.
      +                          LATA3 = 0; } while(0);;do { LATFbits.LATF0 = 0; } while(0);;break;}
 12608                           
 12609                           ;ui.c: 571: }
 12610                           ;ui.c: 573: switch (menu )
 12611                           
 12612  1F5A  31A2  22BE         	fcall	_ui_disp_flow
 12613  1F5C  0027               	movlb	7	; select bank7
 12614  1F5D  148C               	bsf	12,1	;volatile
 12615  1F5E  0022               	movlb	2	; select bank2
 12616  1F5F  118C               	bcf	12,3	;volatile
 12617  1F60  0027               	movlb	7	; select bank7
 12618  1F61  100C               	bcf	12,0	;volatile
 12619  1F62  0008               	return
 12620  1F63                     l16911:	
 12621                           ;ui.c: 576: case 1: {ui_disp_totale_v(); do { LATAbits.LATA3 = 1; } while(0);;do { LATFb
      +                          its.LATF0 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12622                           
 12623  1F63  31AE  2620         	fcall	_ui_disp_totale_v
 12624  1F65  0022               	movlb	2	; select bank2
 12625  1F66  158C               	bsf	12,3	;volatile
 12626  1F67  0027               	movlb	7	; select bank7
 12627  1F68  100C               	bcf	12,0	;volatile
 12628  1F69  108C               	bcf	12,1	;volatile
 12629  1F6A  0008               	return
 12630  1F6B                     l16919:	
 12631                           ;ui.c: 577: case 2: {ui_disp_balance_and_volume(); do { LATFbits.LATF0 = 1; } while(0);;
      +                          do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12632                           
 12633  1F6B  3194  247D         	fcall	_ui_disp_balance_and_volume
 12634  1F6D  0027               	movlb	7	; select bank7
 12635  1F6E  140C               	bsf	12,0	;volatile
 12636  1F6F  0022               	movlb	2	; select bank2
 12637  1F70  118C               	bcf	12,3	;volatile
 12638  1F71  0027               	movlb	7	; select bank7
 12639  1F72  108C               	bcf	12,1	;volatile
 12640  1F73  0008               	return
 12641  1F74                     l16927:	
 12642                           ;ui.c: 578: case 0x10: {
 12643                           
 12644                           
 12645                           ;ui.c: 579: password=(uint8_t)(*((uint16_t*)uiAdjbuf));
 12646  1F74  0022               	movlb	2	; select bank2
 12647  1F75  0861               	movf	_uiAdjbuf^(0+256),w
 12648  1F76  0020               	movlb	0	; select bank0
 12649  1F77  00C1               	movwf	??_ui_disp_menu
 12650  1F78  01C2               	clrf	??_ui_disp_menu+1
 12651  1F79  0841               	movf	??_ui_disp_menu,w
 12652  1F7A  0022               	movlb	2	; select bank2
 12653  1F7B  00AA               	movwf	_password^(0+256)
 12654  1F7C  0020               	movlb	0	; select bank0
 12655  1F7D  0842               	movf	??_ui_disp_menu+1,w
 12656  1F7E  0022               	movlb	2	; select bank2
 12657  1F7F  00AB               	movwf	(_password+1)^(0+256)
 12658                           
 12659                           ;ui.c: 580: ui_disp_str_num_ex((uint8_t*)"psd-", password);
 12660  1F80  3048               	movlw	low (STR_23| (0+32768))
 12661  1F81  0020               	movlb	0	; select bank0
 12662  1F82  00A7               	movwf	ui_disp_str_num_ex@str
 12663  1F83  30B9               	movlw	high (STR_23| (0+32768))
 12664  1F84  00A8               	movwf	ui_disp_str_num_ex@str+1
 12665  1F85  0022               	movlb	2	; select bank2
 12666  1F86  082B               	movf	(_password+1)^(0+256),w
 12667  1F87  0020               	movlb	0	; select bank0
 12668  1F88  00AA               	movwf	ui_disp_str_num_ex@num+1
 12669  1F89  0022               	movlb	2	; select bank2
 12670  1F8A  082A               	movf	_password^(0+256),w
 12671  1F8B  0020               	movlb	0	; select bank0
 12672  1F8C  00A9               	movwf	ui_disp_str_num_ex@num
 12673  1F8D  31A6  268F         	fcall	_ui_disp_str_num_ex
 12674                           
 12675                           ;ui.c: 581: break;}
 12676  1F8F  0008               	return
 12677  1F90                     l16931:	
 12678                           ;ui.c: 582: case 0x20: {ui_disp_clear_balance(); break; }
 12679                           
 12680  1F90  31BC  2491         	fcall	_ui_disp_clear_balance
 12681  1F92  0008               	return
 12682  1F93                     l16933:	
 12683                           ;ui.c: 583: case 0x30: {ui_disp_clear_totale(); break; }
 12684                           
 12685  1F93  31BC  246C         	fcall	_ui_disp_clear_totale
 12686  1F95  0008               	return
 12687  1F96                     l16935:	
 12688                           ;ui.c: 584: case 0x40: {ui_disp_set_line(); break; }
 12689                           
 12690  1F96  31A8  20A1         	fcall	_ui_disp_set_line
 12691  1F98  0008               	return
 12692  1F99                     l16937:	
 12693                           ;ui.c: 585: case 0xe0:
 12694                           
 12695                           
 12696                           ;ui.c: 586: ui_disp_set_calib();
 12697  1F99  31A1  2117  319F   	fcall	_ui_disp_set_calib
 12698                           
 12699                           ;ui.c: 587: do { LATFbits.LATF1 = ~LATFbits.LATF1; } while(0);;
 12700  1F9C  1003               	clrc
 12701  1F9D  0027               	movlb	7	; select bank7
 12702  1F9E  1C8C               	btfss	12,1	;volatile
 12703  1F9F  1403               	setc
 12704  1FA0  1C03               	btfss	3,0
 12705  1FA1  2FA5               	goto	u16020
 12706  1FA2  0027               	movlb	7	; select bank7
 12707  1FA3  148C               	bsf	12,1	;volatile
 12708  1FA4  0008               	return
 12709  1FA5                     u16020:	
 12710  1FA5  0027               	movlb	7	; select bank7
 12711  1FA6  108C               	bcf	12,1	;volatile
 12712                           
 12713                           ;ui.c: 588: break;
 12714  1FA7  0008               	return
 12715  1FA8                     l16941:	
 12716                           ;ui.c: 589: case 0x50: {ui_disp_set_calib();break;}
 12717                           
 12718  1FA8  31A1  2117         	fcall	_ui_disp_set_calib
 12719  1FAA  0008               	return
 12720  1FAB                     l16943:	
 12721                           ;ui.c: 590: case 0x60: {ui_disp_set_device_id();break;}
 12722                           
 12723  1FAB  31BC  24B8         	fcall	_ui_disp_set_device_id
 12724  1FAD  0008               	return
 12725  1FAE                     l16945:	
 12726                           ;ui.c: 591: case 0x70: {ui_disp_small_flow_how_care();break;}
 12727                           
 12728  1FAE  31BC  2425         	fcall	_ui_disp_small_flow_how_care
 12729  1FB0  0008               	return
 12730  1FB1                     l16947:	
 12731                           ;ui.c: 593: case 0x80: {ui_disp_set_price();break;}
 12732                           
 12733  1FB1  31AC  2418         	fcall	_ui_disp_set_price
 12734  1FB3  0008               	return
 12735  1FB4                     l16949:	
 12736                           ;ui.c: 594: case 0x90: {ui_disp_set_transferMoneyLimit();break;}
 12737                           
 12738  1FB4  31A8  2000         	fcall	_ui_disp_set_transferMoneyLimit
 12739  1FB6  0008               	return
 12740  1FB7                     l16951:	
 12741                           ;ui.c: 595: case 0xa0: {ui_disp_modbus_id(); break;}
 12742                           
 12743  1FB7  31BC  2414         	fcall	_ui_disp_modbus_id
 12744  1FB9  0008               	return
 12745  1FBA                     l16953:	
 12746                           ;ui.c: 597: case 0xb0:{ui_disp_set_balanceWarning();break;};
 12747                           
 12748  1FBA  31B4  248D         	fcall	_ui_disp_set_balanceWarning
 12749  1FBC  0008               	return
 12750  1FBD                     l16955:	
 12751                           ;ui.c: 598: case 0xb1:{ui_disp_set_balanceOff();break;}
 12752                           
 12753  1FBD  31B4  245C         	fcall	_ui_disp_set_balanceOff
 12754  1FBF  0008               	return
 12755  1FC0                     l16957:	
 12756                           ;ui.c: 601: case 0xc0: {ui_disp_transfer_money(); break;}
 12757                           
 12758  1FC0  31A1  2199         	fcall	_ui_disp_transfer_money
 12759  1FC2  0008               	return
 12760  1FC3                     l16959:	
 12761                           ;ui.c: 605: case 0xf1:{ui_disp_set_imd_flow_uint();break;}
 12762                           
 12763  1FC3  31B0  2000         	fcall	_ui_disp_set_imd_flow_uint
 12764                           
 12765                           ;ui.c: 638: }
 12766  1FC5  0008               	return
 12767  1FC6                     l16963:	
 12768  1FC6  0021               	movlb	1	; select bank1
 12769  1FC7  0843               	movf	_menu^(0+128),w
 12770                           
 12771                           ; Switch size 1, requested type "space"
 12772                           ; Number of cases is 18, Range of values is 0 to 241
 12773                           ; switch strategies available:
 12774                           ; Name         Instructions Cycles
 12775                           ; simple_byte           55    28 (average)
 12776                           ; jumptable            260     6 (fixed)
 12777                           ;	Chosen strategy is simple_byte
 12778  1FC8  3A00               	xorlw	0	; case 0
 12779  1FC9  1903               	skipnz
 12780  1FCA  2F5A               	goto	l16903
 12781  1FCB  3A01               	xorlw	1	; case 1
 12782  1FCC  1903               	skipnz
 12783  1FCD  2F63               	goto	l16911
 12784  1FCE  3A03               	xorlw	3	; case 2
 12785  1FCF  1903               	skipnz
 12786  1FD0  2F6B               	goto	l16919
 12787  1FD1  3A12               	xorlw	18	; case 16
 12788  1FD2  1903               	skipnz
 12789  1FD3  2F74               	goto	l16927
 12790  1FD4  3A30               	xorlw	48	; case 32
 12791  1FD5  1903               	skipnz
 12792  1FD6  2F90               	goto	l16931
 12793  1FD7  3A10               	xorlw	16	; case 48
 12794  1FD8  1903               	skipnz
 12795  1FD9  2F93               	goto	l16933
 12796  1FDA  3A70               	xorlw	112	; case 64
 12797  1FDB  1903               	skipnz
 12798  1FDC  2F96               	goto	l16935
 12799  1FDD  3A10               	xorlw	16	; case 80
 12800  1FDE  1903               	skipnz
 12801  1FDF  2FA8               	goto	l16941
 12802  1FE0  3A30               	xorlw	48	; case 96
 12803  1FE1  1903               	skipnz
 12804  1FE2  2FAB               	goto	l16943
 12805  1FE3  3A10               	xorlw	16	; case 112
 12806  1FE4  1903               	skipnz
 12807  1FE5  2FAE               	goto	l16945
 12808  1FE6  3AF0               	xorlw	240	; case 128
 12809  1FE7  1903               	skipnz
 12810  1FE8  2FB1               	goto	l16947
 12811  1FE9  3A10               	xorlw	16	; case 144
 12812  1FEA  1903               	skipnz
 12813  1FEB  2FB4               	goto	l16949
 12814  1FEC  3A30               	xorlw	48	; case 160
 12815  1FED  1903               	skipnz
 12816  1FEE  2FB7               	goto	l16951
 12817  1FEF  3A10               	xorlw	16	; case 176
 12818  1FF0  1903               	skipnz
 12819  1FF1  2FBA               	goto	l16953
 12820  1FF2  3A01               	xorlw	1	; case 177
 12821  1FF3  1903               	skipnz
 12822  1FF4  2FBD               	goto	l16955
 12823  1FF5  3A71               	xorlw	113	; case 192
 12824  1FF6  1903               	skipnz
 12825  1FF7  2FC0               	goto	l16957
 12826  1FF8  3A20               	xorlw	32	; case 224
 12827  1FF9  1903               	skipnz
 12828  1FFA  2F99               	goto	l16937
 12829  1FFB  3A11               	xorlw	17	; case 241
 12830  1FFC  1903               	skipnz
 12831  1FFD  2FC3               	goto	l16959
 12832  1FFE  2FFF               	goto	l509
 12833  1FFF                     l509:	
 12834  1FFF  0008               	return
 12835  2000                     __end_of_ui_disp_menu:	
 12836                           
 12837                           	psect	text9
 12838  2199                     __ptext9:	
 12839 ;; *************** function _ui_disp_transfer_money *****************
 12840 ;; Defined at:
 12841 ;;		line 250 in file "src/api/ui.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;		None
 12844 ;; Auto vars:     Size  Location     Type
 12845 ;;		None
 12846 ;; Return value:  Size  Location     Type
 12847 ;;                  1    wreg      void 
 12848 ;; Registers used:
 12849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12858 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12859 ;;Total ram usage:        2 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    5
 12862 ;; This function calls:
 12863 ;;		___lldiv
 12864 ;;		_lcd_clear_buffer
 12865 ;;		_lcd_disp_str
 12866 ;;		_m_mem_set
 12867 ;;		_ui_head_hide
 12868 ;;		_ui_uint32_2_str
 12869 ;; This function is called by:
 12870 ;;		_ui_disp_menu
 12871 ;; This function uses a non-reentrant model
 12872 ;;
 12873                           
 12874                           
 12875                           ;psect for function _ui_disp_transfer_money
 12876  2199                     _ui_disp_transfer_money:	
 12877                           
 12878                           ;ui.c: 251: lcd_clear_buffer();
 12879                           
 12880                           ;incstack = 0
 12881                           ; Regs used in _ui_disp_transfer_money: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12882  2199  31BB  2358  31A1   	fcall	_lcd_clear_buffer
 12883                           
 12884                           ;ui.c: 252: if(mainSystemData.cardID ==0 ){
 12885  219C  0024               	movlb	4	; select bank4
 12886  219D  0827               	movf	((_mainSystemData+3)^(0+512)+4),w
 12887  219E  0426               	iorwf	((_mainSystemData+2)^(0+512)+4),w
 12888  219F  0425               	iorwf	((_mainSystemData+1)^(0+512)+4),w
 12889  21A0  0424               	iorwf	(_mainSystemData^(0+512)+4),w
 12890  21A1  1D03               	skipz
 12891  21A2  29AB               	goto	l13289
 12892                           
 12893                           ;ui.c: 253: lcd_disp_str((uint8_t*)"k0      ");
 12894  21A3  30A3               	movlw	low (STR_4| (0+32768))
 12895  21A4  0020               	movlb	0	; select bank0
 12896  21A5  00A2               	movwf	lcd_disp_str@str
 12897  21A6  30B8               	movlw	high (STR_4| (0+32768))
 12898  21A7  00A3               	movwf	lcd_disp_str@str+1
 12899  21A8  31A8  20E8         	fcall	_lcd_disp_str
 12900                           
 12901                           ;ui.c: 254: }else{
 12902  21AA  0008               	return
 12903  21AB                     l13289:	
 12904                           
 12905                           ;ui.c: 255: __t32=mainSystemData.transferMoney;
 12906  21AB  300C               	movlw	12
 12907  21AC  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 12908  21AD  0086               	movwf	6
 12909  21AE  3002               	movlw	2	; select bank4/5
 12910  21AF  0087               	movwf	7
 12911  21B0  3F40               	moviw [0]fsr1
 12912  21B1  0021               	movlb	1	; select bank1
 12913  21B2  00B4               	movwf	___t32^(0+128)
 12914  21B3  3F41               	moviw [1]fsr1
 12915  21B4  00B5               	movwf	(___t32+1)^(0+128)
 12916  21B5  3F42               	moviw [2]fsr1
 12917  21B6  00B6               	movwf	(___t32+2)^(0+128)
 12918  21B7  3F43               	moviw [3]fsr1
 12919  21B8  00B7               	movwf	(___t32+3)^(0+128)
 12920                           
 12921                           ;ui.c: 256: __t32/=100;
 12922  21B9  3000               	movlw	0
 12923  21BA  0020               	movlb	0	; select bank0
 12924  21BB  00AB               	movwf	___lldiv@divisor+3
 12925  21BC  3000               	movlw	0
 12926  21BD  00AA               	movwf	___lldiv@divisor+2
 12927  21BE  3000               	movlw	0
 12928  21BF  00A9               	movwf	___lldiv@divisor+1
 12929  21C0  3064               	movlw	100
 12930  21C1  00A8               	movwf	___lldiv@divisor
 12931  21C2  0021               	movlb	1	; select bank1
 12932  21C3  0837               	movf	(___t32+3)^(0+128),w
 12933  21C4  0020               	movlb	0	; select bank0
 12934  21C5  00AF               	movwf	___lldiv@dividend+3
 12935  21C6  0021               	movlb	1	; select bank1
 12936  21C7  0836               	movf	(___t32+2)^(0+128),w
 12937  21C8  0020               	movlb	0	; select bank0
 12938  21C9  00AE               	movwf	___lldiv@dividend+2
 12939  21CA  0021               	movlb	1	; select bank1
 12940  21CB  0835               	movf	(___t32+1)^(0+128),w
 12941  21CC  0020               	movlb	0	; select bank0
 12942  21CD  00AD               	movwf	___lldiv@dividend+1
 12943  21CE  0021               	movlb	1	; select bank1
 12944  21CF  0834               	movf	___t32^(0+128),w
 12945  21D0  0020               	movlb	0	; select bank0
 12946  21D1  00AC               	movwf	___lldiv@dividend
 12947  21D2  31AA  2268  31A1   	fcall	___lldiv
 12948  21D5  0020               	movlb	0	; select bank0
 12949  21D6  082B               	movf	?___lldiv+3,w
 12950  21D7  0021               	movlb	1	; select bank1
 12951  21D8  00B7               	movwf	(___t32+3)^(0+128)
 12952  21D9  0020               	movlb	0	; select bank0
 12953  21DA  082A               	movf	?___lldiv+2,w
 12954  21DB  0021               	movlb	1	; select bank1
 12955  21DC  00B6               	movwf	(___t32+2)^(0+128)
 12956  21DD  0020               	movlb	0	; select bank0
 12957  21DE  0829               	movf	?___lldiv+1,w
 12958  21DF  0021               	movlb	1	; select bank1
 12959  21E0  00B5               	movwf	(___t32+1)^(0+128)
 12960  21E1  0020               	movlb	0	; select bank0
 12961  21E2  0828               	movf	?___lldiv,w
 12962  21E3  0021               	movlb	1	; select bank1
 12963  21E4  00B4               	movwf	___t32^(0+128)
 12964                           
 12965                           ;ui.c: 257: m_mem_set(lcdBuf, ' ', sizeof (lcdBuf));
 12966  21E5  3058               	movlw	low _lcdBuf
 12967  21E6  00F3               	movwf	m_mem_set@buf
 12968  21E7  3001               	movlw	high _lcdBuf
 12969  21E8  00F4               	movwf	m_mem_set@buf+1
 12970  21E9  3020               	movlw	32
 12971  21EA  0020               	movlb	0	; select bank0
 12972  21EB  00BA               	movwf	??_ui_disp_transfer_money
 12973  21EC  083A               	movf	??_ui_disp_transfer_money,w
 12974  21ED  00F5               	movwf	m_mem_set@x
 12975  21EE  3009               	movlw	9
 12976  21EF  00BB               	movwf	??_ui_disp_transfer_money+1
 12977  21F0  083B               	movf	??_ui_disp_transfer_money+1,w
 12978  21F1  00F6               	movwf	m_mem_set@len
 12979  21F2  31BB  23E2  31A1   	fcall	_m_mem_set
 12980                           
 12981                           ;ui.c: 258: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __t32, 8-1);
 12982  21F5  0021               	movlb	1	; select bank1
 12983  21F6  0837               	movf	(___t32+3)^(0+128),w
 12984  21F7  0020               	movlb	0	; select bank0
 12985  21F8  00B4               	movwf	ui_uint32_2_str@x+3
 12986  21F9  0021               	movlb	1	; select bank1
 12987  21FA  0836               	movf	(___t32+2)^(0+128),w
 12988  21FB  0020               	movlb	0	; select bank0
 12989  21FC  00B3               	movwf	ui_uint32_2_str@x+2
 12990  21FD  0021               	movlb	1	; select bank1
 12991  21FE  0835               	movf	(___t32+1)^(0+128),w
 12992  21FF  0020               	movlb	0	; select bank0
 12993  2200  00B2               	movwf	ui_uint32_2_str@x+1
 12994  2201  0021               	movlb	1	; select bank1
 12995  2202  0834               	movf	___t32^(0+128),w
 12996  2203  0020               	movlb	0	; select bank0
 12997  2204  00B1               	movwf	ui_uint32_2_str@x
 12998  2205  3007               	movlw	7
 12999  2206  00BA               	movwf	??_ui_disp_transfer_money
 13000  2207  083A               	movf	??_ui_disp_transfer_money,w
 13001  2208  00B5               	movwf	ui_uint32_2_str@len
 13002  2209  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13003  220A  31A7  2747  31A1   	fcall	_ui_uint32_2_str
 13004                           
 13005                           ;ui.c: 259: ui_head_hide(lcdBuf, 8 - 1 - 0);
 13006  220D  3007               	movlw	7
 13007  220E  0020               	movlb	0	; select bank0
 13008  220F  00BA               	movwf	??_ui_disp_transfer_money
 13009  2210  083A               	movf	??_ui_disp_transfer_money,w
 13010  2211  00F3               	movwf	ui_head_hide@loc
 13011  2212  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13012  2213  31B0  2091  31A1   	fcall	_ui_head_hide
 13013                           
 13014                           ;ui.c: 260: lcdBuf[0] = 'k';
 13015  2216  306B               	movlw	107
 13016  2217  0020               	movlb	0	; select bank0
 13017  2218  00BA               	movwf	??_ui_disp_transfer_money
 13018  2219  083A               	movf	??_ui_disp_transfer_money,w
 13019  221A  0022               	movlb	2	; select bank2
 13020  221B  00D8               	movwf	_lcdBuf^(0+256)
 13021                           
 13022                           ;ui.c: 261: lcdBuf[1] = 'j';
 13023  221C  306A               	movlw	106
 13024  221D  0020               	movlb	0	; select bank0
 13025  221E  00BA               	movwf	??_ui_disp_transfer_money
 13026  221F  083A               	movf	??_ui_disp_transfer_money,w
 13027  2220  0022               	movlb	2	; select bank2
 13028  2221  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13029                           
 13030                           ;ui.c: 264: lcd_disp_str(lcdBuf);
 13031  2222  3058               	movlw	low _lcdBuf
 13032  2223  0020               	movlb	0	; select bank0
 13033  2224  00A2               	movwf	lcd_disp_str@str
 13034  2225  3001               	movlw	high _lcdBuf
 13035  2226  00A3               	movwf	lcd_disp_str@str+1
 13036  2227  31A8  20E8         	fcall	_lcd_disp_str
 13037  2229  0008               	return
 13038  222A                     __end_of_ui_disp_transfer_money:	
 13039                           
 13040                           	psect	text10
 13041  268F                     __ptext10:	
 13042 ;; *************** function _ui_disp_str_num_ex *****************
 13043 ;; Defined at:
 13044 ;;		line 87 in file "src/api/ui.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  str             2    7[BANK0 ] PTR unsigned char 
 13047 ;;		 -> STR_23(5), 
 13048 ;;  num             2    9[BANK0 ] unsigned int 
 13049 ;; Auto vars:     Size  Location     Type
 13050 ;;		None
 13051 ;; Return value:  Size  Location     Type
 13052 ;;                  1    wreg      void 
 13053 ;; Registers used:
 13054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13055 ;; Tracked objects:
 13056 ;;		On entry : 0/0
 13057 ;;		On exit  : 0/0
 13058 ;;		Unchanged: 0/0
 13059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13060 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13061 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13062 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13063 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 13064 ;;Total ram usage:        6 bytes
 13065 ;; Hardware stack levels used:    1
 13066 ;; Hardware stack levels required when called:    5
 13067 ;; This function calls:
 13068 ;;		___lwdiv
 13069 ;;		___lwmod
 13070 ;;		_lcd_clear_buffer
 13071 ;;		_lcd_disp_str
 13072 ;;		_m_mem_set
 13073 ;;		_ui_mem_cpy
 13074 ;; This function is called by:
 13075 ;;		_ui_disp_menu
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079                           
 13080                           ;psect for function _ui_disp_str_num_ex
 13081  268F                     _ui_disp_str_num_ex:	
 13082                           
 13083                           ;ui.c: 89: lcd_clear_buffer();
 13084                           
 13085                           ;incstack = 0
 13086                           ; Regs used in _ui_disp_str_num_ex: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13087  268F  31BB  2358  31A6   	fcall	_lcd_clear_buffer
 13088                           
 13089                           ;ui.c: 90: m_mem_set(lcdBuf, ' ', 8);
 13090  2692  3058               	movlw	low _lcdBuf
 13091  2693  00F3               	movwf	m_mem_set@buf
 13092  2694  3001               	movlw	high _lcdBuf
 13093  2695  00F4               	movwf	m_mem_set@buf+1
 13094  2696  3020               	movlw	32
 13095  2697  0020               	movlb	0	; select bank0
 13096  2698  00AB               	movwf	??_ui_disp_str_num_ex
 13097  2699  082B               	movf	??_ui_disp_str_num_ex,w
 13098  269A  00F5               	movwf	m_mem_set@x
 13099  269B  3008               	movlw	8
 13100  269C  00AC               	movwf	??_ui_disp_str_num_ex+1
 13101  269D  082C               	movf	??_ui_disp_str_num_ex+1,w
 13102  269E  00F6               	movwf	m_mem_set@len
 13103  269F  31BB  23E2  31A6   	fcall	_m_mem_set
 13104                           
 13105                           ;ui.c: 91: lcdBuf[8] = '\0';
 13106  26A2  0022               	movlb	2	; select bank2
 13107  26A3  01E0               	clrf	(_lcdBuf^(0+256)+8)
 13108                           
 13109                           ;ui.c: 92: ui_mem_cpy(lcdBuf, str);
 13110  26A4  0020               	movlb	0	; select bank0
 13111  26A5  0828               	movf	ui_disp_str_num_ex@str+1,w
 13112  26A6  00F4               	movwf	ui_mem_cpy@s+1
 13113  26A7  0827               	movf	ui_disp_str_num_ex@str,w
 13114  26A8  00F3               	movwf	ui_mem_cpy@s
 13115  26A9  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13116  26AA  31BF  278C  31A6   	fcall	_ui_mem_cpy
 13117                           
 13118                           ;ui.c: 93: lcdBuf[5]='0';
 13119  26AD  3030               	movlw	48
 13120  26AE  0020               	movlb	0	; select bank0
 13121  26AF  00AB               	movwf	??_ui_disp_str_num_ex
 13122  26B0  082B               	movf	??_ui_disp_str_num_ex,w
 13123  26B1  0022               	movlb	2	; select bank2
 13124  26B2  00DD               	movwf	(_lcdBuf^(0+256)+5)
 13125                           
 13126                           ;ui.c: 94: lcdBuf[6]='0';
 13127  26B3  3030               	movlw	48
 13128  26B4  0020               	movlb	0	; select bank0
 13129  26B5  00AB               	movwf	??_ui_disp_str_num_ex
 13130  26B6  082B               	movf	??_ui_disp_str_num_ex,w
 13131  26B7  0022               	movlb	2	; select bank2
 13132  26B8  00DE               	movwf	(_lcdBuf^(0+256)+6)
 13133                           
 13134                           ;ui.c: 95: __t16 = num;
 13135  26B9  0020               	movlb	0	; select bank0
 13136  26BA  082A               	movf	ui_disp_str_num_ex@num+1,w
 13137  26BB  00F9               	movwf	___t16+1
 13138  26BC  0829               	movf	ui_disp_str_num_ex@num,w
 13139  26BD  00F8               	movwf	___t16
 13140                           
 13141                           ;ui.c: 96: lcdBuf[7] = '0' + (__t16 % 10);
 13142  26BE  300A               	movlw	10
 13143  26BF  00F3               	movwf	___lwmod@divisor
 13144  26C0  3000               	movlw	0
 13145  26C1  00F4               	movwf	___lwmod@divisor+1
 13146  26C2  0879               	movf	___t16+1,w
 13147  26C3  00F6               	movwf	___lwmod@dividend+1
 13148  26C4  0878               	movf	___t16,w
 13149  26C5  00F5               	movwf	___lwmod@dividend
 13150  26C6  31B1  213E  31A6   	fcall	___lwmod
 13151  26C9  0873               	movf	?___lwmod,w
 13152  26CA  3E30               	addlw	48
 13153  26CB  0020               	movlb	0	; select bank0
 13154  26CC  00AB               	movwf	??_ui_disp_str_num_ex
 13155  26CD  082B               	movf	??_ui_disp_str_num_ex,w
 13156  26CE  0022               	movlb	2	; select bank2
 13157  26CF  00DF               	movwf	(_lcdBuf^(0+256)+7)
 13158                           
 13159                           ;ui.c: 97: __t16 /= 10;
 13160  26D0  300A               	movlw	10
 13161  26D1  00F3               	movwf	___lwdiv@divisor
 13162  26D2  3000               	movlw	0
 13163  26D3  00F4               	movwf	___lwdiv@divisor+1
 13164  26D4  0879               	movf	___t16+1,w
 13165  26D5  00F6               	movwf	___lwdiv@dividend+1
 13166  26D6  0878               	movf	___t16,w
 13167  26D7  00F5               	movwf	___lwdiv@dividend
 13168  26D8  31B5  2525  31A6   	fcall	___lwdiv
 13169  26DB  0874               	movf	?___lwdiv+1,w
 13170  26DC  00F9               	movwf	___t16+1
 13171  26DD  0873               	movf	?___lwdiv,w
 13172  26DE  00F8               	movwf	___t16
 13173                           
 13174                           ;ui.c: 98: if (__t16 > 0) {
 13175  26DF  0878               	movf	___t16,w
 13176  26E0  0479               	iorwf	___t16+1,w
 13177  26E1  1903               	btfsc	3,2
 13178  26E2  2F3F               	goto	l16835
 13179                           
 13180                           ;ui.c: 99: lcdBuf[6] = '0' + (__t16 % 10);
 13181  26E3  300A               	movlw	10
 13182  26E4  00F3               	movwf	___lwmod@divisor
 13183  26E5  3000               	movlw	0
 13184  26E6  00F4               	movwf	___lwmod@divisor+1
 13185  26E7  0879               	movf	___t16+1,w
 13186  26E8  00F6               	movwf	___lwmod@dividend+1
 13187  26E9  0878               	movf	___t16,w
 13188  26EA  00F5               	movwf	___lwmod@dividend
 13189  26EB  31B1  213E  31A6   	fcall	___lwmod
 13190  26EE  0873               	movf	?___lwmod,w
 13191  26EF  3E30               	addlw	48
 13192  26F0  0020               	movlb	0	; select bank0
 13193  26F1  00AB               	movwf	??_ui_disp_str_num_ex
 13194  26F2  082B               	movf	??_ui_disp_str_num_ex,w
 13195  26F3  0022               	movlb	2	; select bank2
 13196  26F4  00DE               	movwf	(_lcdBuf^(0+256)+6)
 13197                           
 13198                           ;ui.c: 100: __t16 /= 10;
 13199  26F5  300A               	movlw	10
 13200  26F6  00F3               	movwf	___lwdiv@divisor
 13201  26F7  3000               	movlw	0
 13202  26F8  00F4               	movwf	___lwdiv@divisor+1
 13203  26F9  0879               	movf	___t16+1,w
 13204  26FA  00F6               	movwf	___lwdiv@dividend+1
 13205  26FB  0878               	movf	___t16,w
 13206  26FC  00F5               	movwf	___lwdiv@dividend
 13207  26FD  31B5  2525  31A6   	fcall	___lwdiv
 13208  2700  0874               	movf	?___lwdiv+1,w
 13209  2701  00F9               	movwf	___t16+1
 13210  2702  0873               	movf	?___lwdiv,w
 13211  2703  00F8               	movwf	___t16
 13212                           
 13213                           ;ui.c: 101: if (__t16 > 0) {
 13214  2704  0878               	movf	___t16,w
 13215  2705  0479               	iorwf	___t16+1,w
 13216  2706  1903               	btfsc	3,2
 13217  2707  2F3F               	goto	l16835
 13218                           
 13219                           ;ui.c: 102: lcdBuf[5] = '0' + (__t16 % 10);
 13220  2708  300A               	movlw	10
 13221  2709  00F3               	movwf	___lwmod@divisor
 13222  270A  3000               	movlw	0
 13223  270B  00F4               	movwf	___lwmod@divisor+1
 13224  270C  0879               	movf	___t16+1,w
 13225  270D  00F6               	movwf	___lwmod@dividend+1
 13226  270E  0878               	movf	___t16,w
 13227  270F  00F5               	movwf	___lwmod@dividend
 13228  2710  31B1  213E  31A6   	fcall	___lwmod
 13229  2713  0873               	movf	?___lwmod,w
 13230  2714  3E30               	addlw	48
 13231  2715  0020               	movlb	0	; select bank0
 13232  2716  00AB               	movwf	??_ui_disp_str_num_ex
 13233  2717  082B               	movf	??_ui_disp_str_num_ex,w
 13234  2718  0022               	movlb	2	; select bank2
 13235  2719  00DD               	movwf	(_lcdBuf^(0+256)+5)
 13236                           
 13237                           ;ui.c: 103: __t16 /= 10;
 13238  271A  300A               	movlw	10
 13239  271B  00F3               	movwf	___lwdiv@divisor
 13240  271C  3000               	movlw	0
 13241  271D  00F4               	movwf	___lwdiv@divisor+1
 13242  271E  0879               	movf	___t16+1,w
 13243  271F  00F6               	movwf	___lwdiv@dividend+1
 13244  2720  0878               	movf	___t16,w
 13245  2721  00F5               	movwf	___lwdiv@dividend
 13246  2722  31B5  2525  31A6   	fcall	___lwdiv
 13247  2725  0874               	movf	?___lwdiv+1,w
 13248  2726  00F9               	movwf	___t16+1
 13249  2727  0873               	movf	?___lwdiv,w
 13250  2728  00F8               	movwf	___t16
 13251                           
 13252                           ;ui.c: 104: if (__t16 > 0) {
 13253  2729  0878               	movf	___t16,w
 13254  272A  0479               	iorwf	___t16+1,w
 13255  272B  1903               	btfsc	3,2
 13256  272C  2F3F               	goto	l16835
 13257                           
 13258                           ;ui.c: 105: lcdBuf[4] = '0' + (__t16 % 10);
 13259  272D  300A               	movlw	10
 13260  272E  00F3               	movwf	___lwmod@divisor
 13261  272F  3000               	movlw	0
 13262  2730  00F4               	movwf	___lwmod@divisor+1
 13263  2731  0879               	movf	___t16+1,w
 13264  2732  00F6               	movwf	___lwmod@dividend+1
 13265  2733  0878               	movf	___t16,w
 13266  2734  00F5               	movwf	___lwmod@dividend
 13267  2735  31B1  213E  31A6   	fcall	___lwmod
 13268  2738  0873               	movf	?___lwmod,w
 13269  2739  3E30               	addlw	48
 13270  273A  0020               	movlb	0	; select bank0
 13271  273B  00AB               	movwf	??_ui_disp_str_num_ex
 13272  273C  082B               	movf	??_ui_disp_str_num_ex,w
 13273  273D  0022               	movlb	2	; select bank2
 13274  273E  00DC               	movwf	(_lcdBuf^(0+256)+4)
 13275  273F                     l16835:	
 13276                           
 13277                           ;ui.c: 106: }
 13278                           ;ui.c: 107: }
 13279                           ;ui.c: 108: }
 13280                           ;ui.c: 109: lcd_disp_str(lcdBuf);
 13281  273F  3058               	movlw	low _lcdBuf
 13282  2740  0020               	movlb	0	; select bank0
 13283  2741  00A2               	movwf	lcd_disp_str@str
 13284  2742  3001               	movlw	high _lcdBuf
 13285  2743  00A3               	movwf	lcd_disp_str@str+1
 13286  2744  31A8  20E8         	fcall	_lcd_disp_str
 13287  2746  0008               	return
 13288  2747                     __end_of_ui_disp_str_num_ex:	
 13289                           
 13290                           	psect	text11
 13291  3C25                     __ptext11:	
 13292 ;; *************** function _ui_disp_small_flow_how_care *****************
 13293 ;; Defined at:
 13294 ;;		line 387 in file "src/api/ui.c"
 13295 ;; Parameters:    Size  Location     Type
 13296 ;;		None
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;		None
 13299 ;; Return value:  Size  Location     Type
 13300 ;;                  1    wreg      void 
 13301 ;; Registers used:
 13302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13303 ;; Tracked objects:
 13304 ;;		On entry : 0/0
 13305 ;;		On exit  : 0/0
 13306 ;;		Unchanged: 0/0
 13307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13310 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13311 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13312 ;;Total ram usage:        2 bytes
 13313 ;; Hardware stack levels used:    1
 13314 ;; Hardware stack levels required when called:    6
 13315 ;; This function calls:
 13316 ;;		_ui_disp_str_num
 13317 ;; This function is called by:
 13318 ;;		_ui_disp_menu
 13319 ;; This function uses a non-reentrant model
 13320 ;;
 13321                           
 13322                           
 13323                           ;psect for function _ui_disp_small_flow_how_care
 13324  3C25                     _ui_disp_small_flow_how_care:	
 13325                           
 13326                           ;ui.c: 389: ui_disp_str_num((uint8_t*)"   cu-", uiAdjbuf[0]);
 13327                           
 13328                           ;incstack = 0
 13329                           ; Regs used in _ui_disp_small_flow_how_care: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13330  3C25  3017               	movlw	low (STR_6| (0+32768))
 13331  3C26  0020               	movlb	0	; select bank0
 13332  3C27  00A7               	movwf	ui_disp_str_num@str
 13333  3C28  30B9               	movlw	high (STR_6| (0+32768))
 13334  3C29  00A8               	movwf	ui_disp_str_num@str+1
 13335  3C2A  0022               	movlb	2	; select bank2
 13336  3C2B  0861               	movf	_uiAdjbuf^(0+256),w
 13337  3C2C  0020               	movlb	0	; select bank0
 13338  3C2D  00AD               	movwf	??_ui_disp_small_flow_how_care
 13339  3C2E  01AE               	clrf	??_ui_disp_small_flow_how_care+1
 13340  3C2F  082D               	movf	??_ui_disp_small_flow_how_care,w
 13341  3C30  00A9               	movwf	ui_disp_str_num@num
 13342  3C31  082E               	movf	??_ui_disp_small_flow_how_care+1,w
 13343  3C32  00AA               	movwf	ui_disp_str_num@num+1
 13344  3C33  31A5  2531         	fcall	_ui_disp_str_num
 13345  3C35  0008               	return
 13346  3C36                     __end_of_ui_disp_small_flow_how_care:	
 13347                           
 13348                           	psect	text12
 13349  2800                     __ptext12:	
 13350 ;; *************** function _ui_disp_set_transferMoneyLimit *****************
 13351 ;; Defined at:
 13352 ;;		line 492 in file "src/api/ui.c"
 13353 ;; Parameters:    Size  Location     Type
 13354 ;;		None
 13355 ;; Auto vars:     Size  Location     Type
 13356 ;;		None
 13357 ;; Return value:  Size  Location     Type
 13358 ;;                  1    wreg      void 
 13359 ;; Registers used:
 13360 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13361 ;; Tracked objects:
 13362 ;;		On entry : 0/0
 13363 ;;		On exit  : 0/0
 13364 ;;		Unchanged: 0/0
 13365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13370 ;;Total ram usage:        0 bytes
 13371 ;; Hardware stack levels used:    1
 13372 ;; Hardware stack levels required when called:    6
 13373 ;; This function calls:
 13374 ;;		_ui_disp_str_num
 13375 ;; This function is called by:
 13376 ;;		_ui_disp_menu
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           
 13381                           ;psect for function _ui_disp_set_transferMoneyLimit
 13382  2800                     _ui_disp_set_transferMoneyLimit:	
 13383                           
 13384                           ;ui.c: 493: __t16=*((uint16_t*)(uiAdjbuf));
 13385                           
 13386                           ;incstack = 0
 13387                           ; Regs used in _ui_disp_set_transferMoneyLimit: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13388  2800  3061               	movlw	low (_uiAdjbuf| (0+256))
 13389  2801  0086               	movwf	6
 13390  2802  3001               	movlw	1	; select bank2/3
 13391  2803  0087               	movwf	7
 13392  2804  3F40               	moviw [0]fsr1
 13393  2805  00F8               	movwf	___t16
 13394  2806  3F41               	moviw [1]fsr1
 13395  2807  00F9               	movwf	___t16+1
 13396                           
 13397                           ;ui.c: 494: ui_disp_str_num((uint8_t*)"sj-",__t16);
 13398  2808  304D               	movlw	low (STR_9| (0+32768))
 13399  2809  0020               	movlb	0	; select bank0
 13400  280A  00A7               	movwf	ui_disp_str_num@str
 13401  280B  30B9               	movlw	high (STR_9| (0+32768))
 13402  280C  00A8               	movwf	ui_disp_str_num@str+1
 13403  280D  0879               	movf	___t16+1,w
 13404  280E  00AA               	movwf	ui_disp_str_num@num+1
 13405  280F  0878               	movf	___t16,w
 13406  2810  00A9               	movwf	ui_disp_str_num@num
 13407  2811  31A5  2531         	fcall	_ui_disp_str_num
 13408  2813  0008               	return
 13409  2814                     __end_of_ui_disp_set_transferMoneyLimit:	
 13410                           
 13411                           	psect	text13
 13412  2C18                     __ptext13:	
 13413 ;; *************** function _ui_disp_set_price *****************
 13414 ;; Defined at:
 13415 ;;		line 472 in file "src/api/ui.c"
 13416 ;; Parameters:    Size  Location     Type
 13417 ;;		None
 13418 ;; Auto vars:     Size  Location     Type
 13419 ;;		None
 13420 ;; Return value:  Size  Location     Type
 13421 ;;                  1    wreg      void 
 13422 ;; Registers used:
 13423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13424 ;; Tracked objects:
 13425 ;;		On entry : 0/0
 13426 ;;		On exit  : 0/0
 13427 ;;		Unchanged: 0/0
 13428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13431 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13432 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13433 ;;Total ram usage:        3 bytes
 13434 ;; Hardware stack levels used:    1
 13435 ;; Hardware stack levels required when called:    5
 13436 ;; This function calls:
 13437 ;;		_lcd_clear_buffer
 13438 ;;		_lcd_disp_dp
 13439 ;;		_lcd_disp_str
 13440 ;;		_m_mem_set
 13441 ;;		_ui_head_hide
 13442 ;;		_ui_uint32_2_str
 13443 ;; This function is called by:
 13444 ;;		_ui_disp_menu
 13445 ;; This function uses a non-reentrant model
 13446 ;;
 13447                           
 13448                           
 13449                           ;psect for function _ui_disp_set_price
 13450  2C18                     _ui_disp_set_price:	
 13451                           
 13452                           ;ui.c: 481: m_mem_set(lcdBuf,'0',sizeof(lcdBuf));
 13453                           
 13454                           ;incstack = 0
 13455                           ; Regs used in _ui_disp_set_price: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13456  2C18  3058               	movlw	low _lcdBuf
 13457  2C19  00F3               	movwf	m_mem_set@buf
 13458  2C1A  3001               	movlw	high _lcdBuf
 13459  2C1B  00F4               	movwf	m_mem_set@buf+1
 13460  2C1C  3030               	movlw	48
 13461  2C1D  0020               	movlb	0	; select bank0
 13462  2C1E  00BA               	movwf	??_ui_disp_set_price
 13463  2C1F  083A               	movf	??_ui_disp_set_price,w
 13464  2C20  00F5               	movwf	m_mem_set@x
 13465  2C21  3009               	movlw	9
 13466  2C22  00BB               	movwf	??_ui_disp_set_price+1
 13467  2C23  083B               	movf	??_ui_disp_set_price+1,w
 13468  2C24  00F6               	movwf	m_mem_set@len
 13469  2C25  31BB  23E2  31AC   	fcall	_m_mem_set
 13470                           
 13471                           ;ui.c: 482: __t16=*((uint16_t*)(uiAdjbuf));
 13472  2C28  3061               	movlw	low (_uiAdjbuf| (0+256))
 13473  2C29  0086               	movwf	6
 13474  2C2A  3001               	movlw	1	; select bank2/3
 13475  2C2B  0087               	movwf	7
 13476  2C2C  3F40               	moviw [0]fsr1
 13477  2C2D  00F8               	movwf	___t16
 13478  2C2E  3F41               	moviw [1]fsr1
 13479  2C2F  00F9               	movwf	___t16+1
 13480                           
 13481                           ;ui.c: 483: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), *((int16_t*)(uiAd
      +                          jbuf)), 3);
 13482  2C30  3061               	movlw	low (_uiAdjbuf| (0+256))
 13483  2C31  0086               	movwf	6
 13484  2C32  3001               	movlw	1	; select bank2/3
 13485  2C33  0087               	movwf	7
 13486  2C34  3F40               	moviw [0]fsr1
 13487  2C35  0020               	movlb	0	; select bank0
 13488  2C36  00BA               	movwf	??_ui_disp_set_price
 13489  2C37  3F41               	moviw [1]fsr1
 13490  2C38  00BB               	movwf	??_ui_disp_set_price+1
 13491  2C39  083A               	movf	??_ui_disp_set_price,w
 13492  2C3A  00B1               	movwf	ui_uint32_2_str@x
 13493  2C3B  083B               	movf	??_ui_disp_set_price+1,w
 13494  2C3C  00B2               	movwf	ui_uint32_2_str@x+1
 13495  2C3D  0D89               	rlf	9,f
 13496  2C3E  3B89               	subwfb	9,f
 13497  2C3F  0989               	comf	9,f
 13498  2C40  00B3               	movwf	ui_uint32_2_str@x+2
 13499  2C41  00B4               	movwf	ui_uint32_2_str@x+3
 13500  2C42  3003               	movlw	3
 13501  2C43  00BC               	movwf	??_ui_disp_set_price+2
 13502  2C44  083C               	movf	??_ui_disp_set_price+2,w
 13503  2C45  00B5               	movwf	ui_uint32_2_str@len
 13504  2C46  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13505  2C47  31A7  2747  31AC   	fcall	_ui_uint32_2_str
 13506                           
 13507                           ;ui.c: 484: ui_head_hide(lcdBuf, 5);
 13508  2C4A  3005               	movlw	5
 13509  2C4B  0020               	movlb	0	; select bank0
 13510  2C4C  00BA               	movwf	??_ui_disp_set_price
 13511  2C4D  083A               	movf	??_ui_disp_set_price,w
 13512  2C4E  00F3               	movwf	ui_head_hide@loc
 13513  2C4F  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 13514  2C50  31B0  2091  31AC   	fcall	_ui_head_hide
 13515                           
 13516                           ;ui.c: 485: lcdBuf[0]='d';
 13517  2C53  3064               	movlw	100
 13518  2C54  0020               	movlb	0	; select bank0
 13519  2C55  00BA               	movwf	??_ui_disp_set_price
 13520  2C56  083A               	movf	??_ui_disp_set_price,w
 13521  2C57  0022               	movlb	2	; select bank2
 13522  2C58  00D8               	movwf	_lcdBuf^(0+256)
 13523                           
 13524                           ;ui.c: 486: lcdBuf[1]='j';
 13525  2C59  306A               	movlw	106
 13526  2C5A  0020               	movlb	0	; select bank0
 13527  2C5B  00BA               	movwf	??_ui_disp_set_price
 13528  2C5C  083A               	movf	??_ui_disp_set_price,w
 13529  2C5D  0022               	movlb	2	; select bank2
 13530  2C5E  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13531                           
 13532                           ;ui.c: 487: lcdBuf[2]='-';
 13533  2C5F  302D               	movlw	45
 13534  2C60  0020               	movlb	0	; select bank0
 13535  2C61  00BA               	movwf	??_ui_disp_set_price
 13536  2C62  083A               	movf	??_ui_disp_set_price,w
 13537  2C63  0022               	movlb	2	; select bank2
 13538  2C64  00DA               	movwf	(_lcdBuf^(0+256)+2)
 13539                           
 13540                           ;ui.c: 488: lcd_clear_buffer();
 13541  2C65  31BB  2358  31AC   	fcall	_lcd_clear_buffer
 13542                           
 13543                           ;ui.c: 489: lcd_disp_dp(2, 1);
 13544  2C68  0020               	movlb	0	; select bank0
 13545  2C69  01B2               	clrf	lcd_disp_dp@show
 13546  2C6A  0AB2               	incf	lcd_disp_dp@show,f
 13547  2C6B  3002               	movlw	2
 13548  2C6C  31AC  24DC  31AC   	fcall	_lcd_disp_dp
 13549                           
 13550                           ;ui.c: 490: lcd_disp_str(lcdBuf);
 13551  2C6F  3058               	movlw	low _lcdBuf
 13552  2C70  0020               	movlb	0	; select bank0
 13553  2C71  00A2               	movwf	lcd_disp_str@str
 13554  2C72  3001               	movlw	high _lcdBuf
 13555  2C73  00A3               	movwf	lcd_disp_str@str+1
 13556  2C74  31A8  20E8         	fcall	_lcd_disp_str
 13557  2C76  0008               	return
 13558  2C77                     __end_of_ui_disp_set_price:	
 13559                           
 13560                           	psect	text14
 13561  28A1                     __ptext14:	
 13562 ;; *************** function _ui_disp_set_line *****************
 13563 ;; Defined at:
 13564 ;;		line 352 in file "src/api/ui.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;		None
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;  t16             2   28[BANK0 ] unsigned int 
 13569 ;; Return value:  Size  Location     Type
 13570 ;;                  1    wreg      void 
 13571 ;; Registers used:
 13572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13573 ;; Tracked objects:
 13574 ;;		On entry : 0/0
 13575 ;;		On exit  : 0/0
 13576 ;;		Unchanged: 0/0
 13577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13579 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13580 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13581 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13582 ;;Total ram usage:        4 bytes
 13583 ;; Hardware stack levels used:    1
 13584 ;; Hardware stack levels required when called:    5
 13585 ;; This function calls:
 13586 ;;		_lcd_clear_buffer
 13587 ;;		_lcd_disp_dp
 13588 ;;		_lcd_disp_str
 13589 ;;		_m_mem_set
 13590 ;;		_ui_uint32_2_str
 13591 ;; This function is called by:
 13592 ;;		_ui_disp_menu
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           
 13597                           ;psect for function _ui_disp_set_line
 13598  28A1                     _ui_disp_set_line:	
 13599                           
 13600                           ;ui.c: 353: uint16_t t16=(*((uint16_t*)uiAdjbuf));
 13601                           
 13602                           ;incstack = 0
 13603                           ; Regs used in _ui_disp_set_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13604  28A1  3061               	movlw	low (_uiAdjbuf| (0+256))
 13605  28A2  0086               	movwf	6
 13606  28A3  3001               	movlw	1	; select bank2/3
 13607  28A4  0087               	movwf	7
 13608  28A5  3F40               	moviw [0]fsr1
 13609  28A6  0020               	movlb	0	; select bank0
 13610  28A7  00BC               	movwf	ui_disp_set_line@t16
 13611  28A8  3F41               	moviw [1]fsr1
 13612  28A9  00BD               	movwf	ui_disp_set_line@t16+1
 13613                           
 13614                           ;ui.c: 354: m_mem_set(lcdBuf, ' ', sizeof (lcdBuf));
 13615  28AA  3058               	movlw	low _lcdBuf
 13616  28AB  00F3               	movwf	m_mem_set@buf
 13617  28AC  3001               	movlw	high _lcdBuf
 13618  28AD  00F4               	movwf	m_mem_set@buf+1
 13619  28AE  3020               	movlw	32
 13620  28AF  00BA               	movwf	??_ui_disp_set_line
 13621  28B0  083A               	movf	??_ui_disp_set_line,w
 13622  28B1  00F5               	movwf	m_mem_set@x
 13623  28B2  3009               	movlw	9
 13624  28B3  00BB               	movwf	??_ui_disp_set_line+1
 13625  28B4  083B               	movf	??_ui_disp_set_line+1,w
 13626  28B5  00F6               	movwf	m_mem_set@len
 13627  28B6  31BB  23E2  31A8   	fcall	_m_mem_set
 13628                           
 13629                           ;ui.c: 355: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), t16, 4);
 13630  28B9  0020               	movlb	0	; select bank0
 13631  28BA  083C               	movf	ui_disp_set_line@t16,w
 13632  28BB  00B1               	movwf	ui_uint32_2_str@x
 13633  28BC  083D               	movf	ui_disp_set_line@t16+1,w
 13634  28BD  00B2               	movwf	ui_uint32_2_str@x+1
 13635  28BE  01B3               	clrf	ui_uint32_2_str@x+2
 13636  28BF  01B4               	clrf	ui_uint32_2_str@x+3
 13637  28C0  3004               	movlw	4
 13638  28C1  00BA               	movwf	??_ui_disp_set_line
 13639  28C2  083A               	movf	??_ui_disp_set_line,w
 13640  28C3  00B5               	movwf	ui_uint32_2_str@len
 13641  28C4  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13642  28C5  31A7  2747  31A8   	fcall	_ui_uint32_2_str
 13643                           
 13644                           ;ui.c: 356: lcdBuf[0]='l';
 13645  28C8  306C               	movlw	108
 13646  28C9  0020               	movlb	0	; select bank0
 13647  28CA  00BA               	movwf	??_ui_disp_set_line
 13648  28CB  083A               	movf	??_ui_disp_set_line,w
 13649  28CC  0022               	movlb	2	; select bank2
 13650  28CD  00D8               	movwf	_lcdBuf^(0+256)
 13651                           
 13652                           ;ui.c: 357: lcd_clear_buffer();
 13653  28CE  31BB  2358  31A8   	fcall	_lcd_clear_buffer
 13654                           
 13655                           ;ui.c: 358: lcd_disp_dp(3, 1);
 13656  28D1  0020               	movlb	0	; select bank0
 13657  28D2  01B2               	clrf	lcd_disp_dp@show
 13658  28D3  0AB2               	incf	lcd_disp_dp@show,f
 13659  28D4  3003               	movlw	3
 13660  28D5  31AC  24DC  31A8   	fcall	_lcd_disp_dp
 13661                           
 13662                           ;ui.c: 359: lcd_disp_str(lcdBuf);
 13663  28D8  3058               	movlw	low _lcdBuf
 13664  28D9  0020               	movlb	0	; select bank0
 13665  28DA  00A2               	movwf	lcd_disp_str@str
 13666  28DB  3001               	movlw	high _lcdBuf
 13667  28DC  00A3               	movwf	lcd_disp_str@str+1
 13668  28DD  31A8  20E8  31A8   	fcall	_lcd_disp_str
 13669                           
 13670                           ;ui.c: 382: lcd_disp_str(lcdBuf);
 13671  28E0  3058               	movlw	low _lcdBuf
 13672  28E1  0020               	movlb	0	; select bank0
 13673  28E2  00A2               	movwf	lcd_disp_str@str
 13674  28E3  3001               	movlw	high _lcdBuf
 13675  28E4  00A3               	movwf	lcd_disp_str@str+1
 13676  28E5  31A8  20E8         	fcall	_lcd_disp_str
 13677  28E7  0008               	return
 13678  28E8                     __end_of_ui_disp_set_line:	
 13679                           
 13680                           	psect	text15
 13681  3000                     __ptext15:	
 13682 ;; *************** function _ui_disp_set_imd_flow_uint *****************
 13683 ;; Defined at:
 13684 ;;		line 540 in file "src/api/ui.c"
 13685 ;; Parameters:    Size  Location     Type
 13686 ;;		None
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;		None
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1    wreg      void 
 13691 ;; Registers used:
 13692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13702 ;;Total ram usage:        0 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; Hardware stack levels required when called:    5
 13705 ;; This function calls:
 13706 ;;		_lcd_clear_buffer
 13707 ;;		_lcd_disp_str
 13708 ;; This function is called by:
 13709 ;;		_ui_disp_menu
 13710 ;; This function uses a non-reentrant model
 13711 ;;
 13712                           
 13713                           
 13714                           ;psect for function _ui_disp_set_imd_flow_uint
 13715  3000                     _ui_disp_set_imd_flow_uint:	
 13716                           
 13717                           ;ui.c: 541: lcd_clear_buffer();
 13718                           
 13719                           ;incstack = 0
 13720                           ; Regs used in _ui_disp_set_imd_flow_uint: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13721  3000  31BB  2358  31B0   	fcall	_lcd_clear_buffer
 13722                           
 13723                           ;ui.c: 543: if(uiAdjbuf[0]==0){
 13724  3003  0022               	movlb	2	; select bank2
 13725  3004  0861               	movf	_uiAdjbuf^(0+256),w
 13726  3005  1D03               	btfss	3,2
 13727  3006  280F               	goto	l13415
 13728                           
 13729                           ;ui.c: 544: lcd_disp_str((uint8_t*)"    sl-l");
 13730  3007  3006               	movlw	low (STR_17| (0+32768))
 13731  3008  0020               	movlb	0	; select bank0
 13732  3009  00A2               	movwf	lcd_disp_str@str
 13733  300A  30B9               	movlw	high (STR_17| (0+32768))
 13734  300B  00A3               	movwf	lcd_disp_str@str+1
 13735  300C  31A8  20E8         	fcall	_lcd_disp_str
 13736                           
 13737                           ;ui.c: 545: }else{
 13738  300E  0008               	return
 13739  300F                     l13415:	
 13740                           
 13741                           ;ui.c: 546: lcd_disp_str((uint8_t*)"    sl-f");
 13742  300F  30FD               	movlw	low (STR_18| (0+32768))
 13743  3010  0020               	movlb	0	; select bank0
 13744  3011  00A2               	movwf	lcd_disp_str@str
 13745  3012  30B8               	movlw	high (STR_18| (0+32768))
 13746  3013  00A3               	movwf	lcd_disp_str@str+1
 13747  3014  31A8  20E8         	fcall	_lcd_disp_str
 13748  3016  0008               	return
 13749  3017                     __end_of_ui_disp_set_imd_flow_uint:	
 13750                           
 13751                           	psect	text16
 13752  3CB8                     __ptext16:	
 13753 ;; *************** function _ui_disp_set_device_id *****************
 13754 ;; Defined at:
 13755 ;;		line 496 in file "src/api/ui.c"
 13756 ;; Parameters:    Size  Location     Type
 13757 ;;		None
 13758 ;; Auto vars:     Size  Location     Type
 13759 ;;		None
 13760 ;; Return value:  Size  Location     Type
 13761 ;;                  1    wreg      void 
 13762 ;; Registers used:
 13763 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13764 ;; Tracked objects:
 13765 ;;		On entry : 0/0
 13766 ;;		On exit  : 0/0
 13767 ;;		Unchanged: 0/0
 13768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13773 ;;Total ram usage:        0 bytes
 13774 ;; Hardware stack levels used:    1
 13775 ;; Hardware stack levels required when called:    6
 13776 ;; This function calls:
 13777 ;;		_ui_disp_str_num
 13778 ;; This function is called by:
 13779 ;;		_ui_disp_menu
 13780 ;; This function uses a non-reentrant model
 13781 ;;
 13782                           
 13783                           
 13784                           ;psect for function _ui_disp_set_device_id
 13785  3CB8                     _ui_disp_set_device_id:	
 13786                           
 13787                           ;ui.c: 497: __t16=*((uint16_t*)(uiAdjbuf));
 13788                           
 13789                           ;incstack = 0
 13790                           ; Regs used in _ui_disp_set_device_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13791  3CB8  3061               	movlw	low (_uiAdjbuf| (0+256))
 13792  3CB9  0086               	movwf	6
 13793  3CBA  3001               	movlw	1	; select bank2/3
 13794  3CBB  0087               	movwf	7
 13795  3CBC  3F40               	moviw [0]fsr1
 13796  3CBD  00F8               	movwf	___t16
 13797  3CBE  3F41               	moviw [1]fsr1
 13798  3CBF  00F9               	movwf	___t16+1
 13799                           
 13800                           ;ui.c: 498: ui_disp_str_num((uint8_t*)"did-",__t16);
 13801  3CC0  3043               	movlw	low (STR_10| (0+32768))
 13802  3CC1  0020               	movlb	0	; select bank0
 13803  3CC2  00A7               	movwf	ui_disp_str_num@str
 13804  3CC3  30B9               	movlw	high (STR_10| (0+32768))
 13805  3CC4  00A8               	movwf	ui_disp_str_num@str+1
 13806  3CC5  0879               	movf	___t16+1,w
 13807  3CC6  00AA               	movwf	ui_disp_str_num@num+1
 13808  3CC7  0878               	movf	___t16,w
 13809  3CC8  00A9               	movwf	ui_disp_str_num@num
 13810  3CC9  31A5  2531         	fcall	_ui_disp_str_num
 13811  3CCB  0008               	return
 13812  3CCC                     __end_of_ui_disp_set_device_id:	
 13813                           
 13814                           	psect	text17
 13815  2117                     __ptext17:	
 13816 ;; *************** function _ui_disp_set_calib *****************
 13817 ;; Defined at:
 13818 ;;		line 528 in file "src/api/ui.c"
 13819 ;; Parameters:    Size  Location     Type
 13820 ;;		None
 13821 ;; Auto vars:     Size  Location     Type
 13822 ;;  loc             1   29[BANK0 ] unsigned char 
 13823 ;; Return value:  Size  Location     Type
 13824 ;;                  1    wreg      void 
 13825 ;; Registers used:
 13826 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13827 ;; Tracked objects:
 13828 ;;		On entry : 0/0
 13829 ;;		On exit  : 0/0
 13830 ;;		Unchanged: 0/0
 13831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13833 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 13834 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 13835 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13836 ;;Total ram usage:        4 bytes
 13837 ;; Hardware stack levels used:    1
 13838 ;; Hardware stack levels required when called:    5
 13839 ;; This function calls:
 13840 ;;		___awdiv
 13841 ;;		___awmod
 13842 ;;		___lbmod
 13843 ;;		_lcd_clear_buffer
 13844 ;;		_lcd_disp_dp
 13845 ;;		_lcd_disp_str
 13846 ;;		_m_mem_set
 13847 ;;		_ui_head_hide
 13848 ;;		_ui_uint32_2_str
 13849 ;; This function is called by:
 13850 ;;		_ui_disp_menu
 13851 ;; This function uses a non-reentrant model
 13852 ;;
 13853                           
 13854                           
 13855                           ;psect for function _ui_disp_set_calib
 13856  2117                     _ui_disp_set_calib:	
 13857                           
 13858                           ;ui.c: 529: uint8_t loc=calibLocation;
 13859                           
 13860                           ;incstack = 0
 13861                           ; Regs used in _ui_disp_set_calib: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13862  2117  0021               	movlb	1	; select bank1
 13863  2118  0845               	movf	_calibLocation^(0+128),w
 13864  2119  0020               	movlb	0	; select bank0
 13865  211A  00BA               	movwf	??_ui_disp_set_calib
 13866  211B  083A               	movf	??_ui_disp_set_calib,w
 13867  211C  00BD               	movwf	ui_disp_set_calib@loc
 13868                           
 13869                           ;ui.c: 530: m_mem_set(lcdBuf,'0',sizeof(lcdBuf));
 13870  211D  3058               	movlw	low _lcdBuf
 13871  211E  00F3               	movwf	m_mem_set@buf
 13872  211F  3001               	movlw	high _lcdBuf
 13873  2120  00F4               	movwf	m_mem_set@buf+1
 13874  2121  3030               	movlw	48
 13875  2122  00BA               	movwf	??_ui_disp_set_calib
 13876  2123  083A               	movf	??_ui_disp_set_calib,w
 13877  2124  00F5               	movwf	m_mem_set@x
 13878  2125  3009               	movlw	9
 13879  2126  00BB               	movwf	??_ui_disp_set_calib+1
 13880  2127  083B               	movf	??_ui_disp_set_calib+1,w
 13881  2128  00F6               	movwf	m_mem_set@len
 13882  2129  31BB  23E2  31A1   	fcall	_m_mem_set
 13883                           
 13884                           ;ui.c: 531: loc%=100;
 13885  212C  3064               	movlw	100
 13886  212D  0020               	movlb	0	; select bank0
 13887  212E  00BA               	movwf	??_ui_disp_set_calib
 13888  212F  083A               	movf	??_ui_disp_set_calib,w
 13889  2130  00F3               	movwf	___lbmod@divisor
 13890  2131  083D               	movf	ui_disp_set_calib@loc,w
 13891  2132  31BE  26BA  31A1   	fcall	___lbmod
 13892  2135  0020               	movlb	0	; select bank0
 13893  2136  00BB               	movwf	??_ui_disp_set_calib+1
 13894  2137  083B               	movf	??_ui_disp_set_calib+1,w
 13895  2138  00BD               	movwf	ui_disp_set_calib@loc
 13896                           
 13897                           ;ui.c: 532: lcdBuf[0]=loc/10 + '0';
 13898  2139  300A               	movlw	10
 13899  213A  00F3               	movwf	___awdiv@divisor
 13900  213B  3000               	movlw	0
 13901  213C  00F4               	movwf	___awdiv@divisor+1
 13902  213D  083D               	movf	ui_disp_set_calib@loc,w
 13903  213E  00BA               	movwf	??_ui_disp_set_calib
 13904  213F  01BB               	clrf	??_ui_disp_set_calib+1
 13905  2140  083A               	movf	??_ui_disp_set_calib,w
 13906  2141  00F5               	movwf	___awdiv@dividend
 13907  2142  083B               	movf	??_ui_disp_set_calib+1,w
 13908  2143  00F6               	movwf	___awdiv@dividend+1
 13909  2144  31AA  2216  31A1   	fcall	___awdiv
 13910  2147  0873               	movf	?___awdiv,w
 13911  2148  3E30               	addlw	48
 13912  2149  0020               	movlb	0	; select bank0
 13913  214A  00BC               	movwf	??_ui_disp_set_calib+2
 13914  214B  083C               	movf	??_ui_disp_set_calib+2,w
 13915  214C  0022               	movlb	2	; select bank2
 13916  214D  00D8               	movwf	_lcdBuf^(0+256)
 13917                           
 13918                           ;ui.c: 533: lcdBuf[1]=loc%10 + '0';
 13919  214E  300A               	movlw	10
 13920  214F  00F3               	movwf	___awmod@divisor
 13921  2150  3000               	movlw	0
 13922  2151  00F4               	movwf	___awmod@divisor+1
 13923  2152  0020               	movlb	0	; select bank0
 13924  2153  083D               	movf	ui_disp_set_calib@loc,w
 13925  2154  00BA               	movwf	??_ui_disp_set_calib
 13926  2155  01BB               	clrf	??_ui_disp_set_calib+1
 13927  2156  083A               	movf	??_ui_disp_set_calib,w
 13928  2157  00F5               	movwf	___awmod@dividend
 13929  2158  083B               	movf	??_ui_disp_set_calib+1,w
 13930  2159  00F6               	movwf	___awmod@dividend+1
 13931  215A  31A8  2014  31A1   	fcall	___awmod
 13932  215D  0873               	movf	?___awmod,w
 13933  215E  3E30               	addlw	48
 13934  215F  0020               	movlb	0	; select bank0
 13935  2160  00BC               	movwf	??_ui_disp_set_calib+2
 13936  2161  083C               	movf	??_ui_disp_set_calib+2,w
 13937  2162  0022               	movlb	2	; select bank2
 13938  2163  00D9               	movwf	(_lcdBuf^(0+256)+1)
 13939                           
 13940                           ;ui.c: 534: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), *((int16_t*)(uiAd
      +                          jbuf)), 4);
 13941  2164  3061               	movlw	low (_uiAdjbuf| (0+256))
 13942  2165  0086               	movwf	6
 13943  2166  3001               	movlw	1	; select bank2/3
 13944  2167  0087               	movwf	7
 13945  2168  3F40               	moviw [0]fsr1
 13946  2169  0020               	movlb	0	; select bank0
 13947  216A  00BA               	movwf	??_ui_disp_set_calib
 13948  216B  3F41               	moviw [1]fsr1
 13949  216C  00BB               	movwf	??_ui_disp_set_calib+1
 13950  216D  083A               	movf	??_ui_disp_set_calib,w
 13951  216E  00B1               	movwf	ui_uint32_2_str@x
 13952  216F  083B               	movf	??_ui_disp_set_calib+1,w
 13953  2170  00B2               	movwf	ui_uint32_2_str@x+1
 13954  2171  0D89               	rlf	9,f
 13955  2172  3B89               	subwfb	9,f
 13956  2173  0989               	comf	9,f
 13957  2174  00B3               	movwf	ui_uint32_2_str@x+2
 13958  2175  00B4               	movwf	ui_uint32_2_str@x+3
 13959  2176  3004               	movlw	4
 13960  2177  00BC               	movwf	??_ui_disp_set_calib+2
 13961  2178  083C               	movf	??_ui_disp_set_calib+2,w
 13962  2179  00B5               	movwf	ui_uint32_2_str@len
 13963  217A  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 13964  217B  31A7  2747  31A1   	fcall	_ui_uint32_2_str
 13965                           
 13966                           ;ui.c: 535: ui_head_hide(lcdBuf+2, 4);
 13967  217E  3004               	movlw	4
 13968  217F  0020               	movlb	0	; select bank0
 13969  2180  00BA               	movwf	??_ui_disp_set_calib
 13970  2181  083A               	movf	??_ui_disp_set_calib,w
 13971  2182  00F3               	movwf	ui_head_hide@loc
 13972  2183  305A               	movlw	(low ((_lcdBuf| (0+256)+2)))& (0+255)
 13973  2184  31B0  2091  31A1   	fcall	_ui_head_hide
 13974                           
 13975                           ;ui.c: 536: lcd_clear_buffer();
 13976  2187  31BB  2358  31A1   	fcall	_lcd_clear_buffer
 13977                           
 13978                           ;ui.c: 537: lcd_disp_dp(1, 1);
 13979  218A  0020               	movlb	0	; select bank0
 13980  218B  01B2               	clrf	lcd_disp_dp@show
 13981  218C  0AB2               	incf	lcd_disp_dp@show,f
 13982  218D  3001               	movlw	1
 13983  218E  31AC  24DC  31A1   	fcall	_lcd_disp_dp
 13984                           
 13985                           ;ui.c: 538: lcd_disp_str(lcdBuf);
 13986  2191  3058               	movlw	low _lcdBuf
 13987  2192  0020               	movlb	0	; select bank0
 13988  2193  00A2               	movwf	lcd_disp_str@str
 13989  2194  3001               	movlw	high _lcdBuf
 13990  2195  00A3               	movwf	lcd_disp_str@str+1
 13991  2196  31A8  20E8         	fcall	_lcd_disp_str
 13992  2198  0008               	return
 13993  2199                     __end_of_ui_disp_set_calib:	
 13994                           
 13995                           	psect	text18
 13996  2814                     __ptext18:	
 13997 ;; *************** function ___awmod *****************
 13998 ;; Defined at:
 13999 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awmod.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;  divisor         2    3[COMMON] int 
 14002 ;;  dividend        2    5[COMMON] int 
 14003 ;; Auto vars:     Size  Location     Type
 14004 ;;  sign            1    1[BANK0 ] unsigned char 
 14005 ;;  counter         1    0[BANK0 ] unsigned char 
 14006 ;; Return value:  Size  Location     Type
 14007 ;;                  2    3[COMMON] int 
 14008 ;; Registers used:
 14009 ;;		wreg, status,2, status,0
 14010 ;; Tracked objects:
 14011 ;;		On entry : 0/0
 14012 ;;		On exit  : 0/0
 14013 ;;		Unchanged: 0/0
 14014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14015 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14016 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14017 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14018 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14019 ;;Total ram usage:        7 bytes
 14020 ;; Hardware stack levels used:    1
 14021 ;; Hardware stack levels required when called:    2
 14022 ;; This function calls:
 14023 ;;		Nothing
 14024 ;; This function is called by:
 14025 ;;		_ui_disp_set_calib
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           
 14030                           ;psect for function ___awmod
 14031  2814                     ___awmod:	
 14032                           
 14033                           ;incstack = 0
 14034                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14035  2814  0020               	movlb	0	; select bank0
 14036  2815  01A1               	clrf	___awmod@sign
 14037  2816  1FF6               	btfss	___awmod@dividend+1,7
 14038  2817  281F               	goto	l13167
 14039  2818  09F5               	comf	___awmod@dividend,f
 14040  2819  09F6               	comf	___awmod@dividend+1,f
 14041  281A  0AF5               	incf	___awmod@dividend,f
 14042  281B  1903               	skipnz
 14043  281C  0AF6               	incf	___awmod@dividend+1,f
 14044  281D  01A1               	clrf	___awmod@sign
 14045  281E  0AA1               	incf	___awmod@sign,f
 14046  281F                     l13167:	
 14047  281F  1FF4               	btfss	___awmod@divisor+1,7
 14048  2820  2826               	goto	l13171
 14049  2821  09F3               	comf	___awmod@divisor,f
 14050  2822  09F4               	comf	___awmod@divisor+1,f
 14051  2823  0AF3               	incf	___awmod@divisor,f
 14052  2824  1903               	skipnz
 14053  2825  0AF4               	incf	___awmod@divisor+1,f
 14054  2826                     l13171:	
 14055  2826  0873               	movf	___awmod@divisor,w
 14056  2827  0474               	iorwf	___awmod@divisor+1,w
 14057  2828  1903               	btfsc	3,2
 14058  2829  284D               	goto	l13189
 14059  282A  01A0               	clrf	___awmod@counter
 14060  282B  0AA0               	incf	___awmod@counter,f
 14061  282C                     l13179:	
 14062  282C  1BF4               	btfsc	___awmod@divisor+1,7
 14063  282D  2838               	goto	l13181
 14064  282E  3001               	movlw	1
 14065  282F                     u11795:	
 14066  282F  35F3               	lslf	___awmod@divisor,f
 14067  2830  0DF4               	rlf	___awmod@divisor+1,f
 14068  2831  0B89               	decfsz	9,f
 14069  2832  282F               	goto	u11795
 14070  2833  3001               	movlw	1
 14071  2834  00F7               	movwf	??___awmod
 14072  2835  0877               	movf	??___awmod,w
 14073  2836  07A0               	addwf	___awmod@counter,f
 14074  2837  282C               	goto	l13179
 14075  2838                     l13181:	
 14076  2838  0874               	movf	___awmod@divisor+1,w
 14077  2839  0276               	subwf	___awmod@dividend+1,w
 14078  283A  1D03               	skipz
 14079  283B  283E               	goto	u11815
 14080  283C  0873               	movf	___awmod@divisor,w
 14081  283D  0275               	subwf	___awmod@dividend,w
 14082  283E                     u11815:	
 14083  283E  1C03               	skipc
 14084  283F  2844               	goto	l13185
 14085  2840  0873               	movf	___awmod@divisor,w
 14086  2841  02F5               	subwf	___awmod@dividend,f
 14087  2842  0874               	movf	___awmod@divisor+1,w
 14088  2843  3BF6               	subwfb	___awmod@dividend+1,f
 14089  2844                     l13185:	
 14090  2844  3001               	movlw	1
 14091  2845                     u11825:	
 14092  2845  36F4               	lsrf	___awmod@divisor+1,f
 14093  2846  0CF3               	rrf	___awmod@divisor,f
 14094  2847  0B89               	decfsz	9,f
 14095  2848  2845               	goto	u11825
 14096  2849  3001               	movlw	1
 14097  284A  02A0               	subwf	___awmod@counter,f
 14098  284B  1D03               	btfss	3,2
 14099  284C  2838               	goto	l13181
 14100  284D                     l13189:	
 14101  284D  0821               	movf	___awmod@sign,w
 14102  284E  1903               	btfsc	3,2
 14103  284F  2855               	goto	l13193
 14104  2850  09F5               	comf	___awmod@dividend,f
 14105  2851  09F6               	comf	___awmod@dividend+1,f
 14106  2852  0AF5               	incf	___awmod@dividend,f
 14107  2853  1903               	skipnz
 14108  2854  0AF6               	incf	___awmod@dividend+1,f
 14109  2855                     l13193:	
 14110  2855  0876               	movf	___awmod@dividend+1,w
 14111  2856  00F4               	movwf	?___awmod+1
 14112  2857  0875               	movf	___awmod@dividend,w
 14113  2858  00F3               	movwf	?___awmod
 14114  2859  0008               	return
 14115  285A                     __end_of___awmod:	
 14116                           
 14117                           	psect	text19
 14118  348D                     __ptext19:	
 14119 ;; *************** function _ui_disp_set_balanceWarning *****************
 14120 ;; Defined at:
 14121 ;;		line 500 in file "src/api/ui.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;		None
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14139 ;;Total ram usage:        0 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    6
 14142 ;; This function calls:
 14143 ;;		_ui_disp_str_num
 14144 ;; This function is called by:
 14145 ;;		_ui_disp_menu
 14146 ;; This function uses a non-reentrant model
 14147 ;;
 14148                           
 14149                           
 14150                           ;psect for function _ui_disp_set_balanceWarning
 14151  348D                     _ui_disp_set_balanceWarning:	
 14152                           
 14153                           ;ui.c: 501: __q15=*((int16_t*)(uiAdjbuf));
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _ui_disp_set_balanceWarning: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14157  348D  3061               	movlw	low (_uiAdjbuf| (0+256))
 14158  348E  0086               	movwf	6
 14159  348F  3001               	movlw	1	; select bank2/3
 14160  3490  0087               	movwf	7
 14161  3491  3F40               	moviw [0]fsr1
 14162  3492  0021               	movlb	1	; select bank1
 14163  3493  00BA               	movwf	___q15^(0+128)
 14164  3494  3F41               	moviw [1]fsr1
 14165  3495  00BB               	movwf	(___q15+1)^(0+128)
 14166                           
 14167                           ;ui.c: 503: if(__q15>=0){
 14168  3496  1BBB               	btfsc	(___q15+1)^(0+128),7
 14169  3497  2CA8               	goto	l16855
 14170                           
 14171                           ;ui.c: 504: ui_disp_str_num((uint8_t*)"d1   ",__q15);
 14172  3498  302B               	movlw	low (STR_11| (0+32768))
 14173  3499  0020               	movlb	0	; select bank0
 14174  349A  00A7               	movwf	ui_disp_str_num@str
 14175  349B  30B9               	movlw	high (STR_11| (0+32768))
 14176  349C  00A8               	movwf	ui_disp_str_num@str+1
 14177  349D  0021               	movlb	1	; select bank1
 14178  349E  083B               	movf	(___q15+1)^(0+128),w
 14179  349F  0020               	movlb	0	; select bank0
 14180  34A0  00AA               	movwf	ui_disp_str_num@num+1
 14181  34A1  0021               	movlb	1	; select bank1
 14182  34A2  083A               	movf	___q15^(0+128),w
 14183  34A3  0020               	movlb	0	; select bank0
 14184  34A4  00A9               	movwf	ui_disp_str_num@num
 14185  34A5  31A5  2531         	fcall	_ui_disp_str_num
 14186                           
 14187                           ;ui.c: 505: }else{
 14188  34A7  0008               	return
 14189  34A8                     l16855:	
 14190                           
 14191                           ;ui.c: 506: __q15=0-__q15;
 14192  34A8  0021               	movlb	1	; select bank1
 14193  34A9  09BA               	comf	___q15^(0+128),f
 14194  34AA  09BB               	comf	(___q15+1)^(0+128),f
 14195  34AB  0ABA               	incf	___q15^(0+128),f
 14196  34AC  1903               	skipnz
 14197  34AD  0ABB               	incf	(___q15+1)^(0+128),f
 14198                           
 14199                           ;ui.c: 507: ui_disp_str_num((uint8_t*)"d1  -",__q15);
 14200  34AE  3037               	movlw	low (STR_12| (0+32768))
 14201  34AF  0020               	movlb	0	; select bank0
 14202  34B0  00A7               	movwf	ui_disp_str_num@str
 14203  34B1  30B9               	movlw	high (STR_12| (0+32768))
 14204  34B2  00A8               	movwf	ui_disp_str_num@str+1
 14205  34B3  0021               	movlb	1	; select bank1
 14206  34B4  083B               	movf	(___q15+1)^(0+128),w
 14207  34B5  0020               	movlb	0	; select bank0
 14208  34B6  00AA               	movwf	ui_disp_str_num@num+1
 14209  34B7  0021               	movlb	1	; select bank1
 14210  34B8  083A               	movf	___q15^(0+128),w
 14211  34B9  0020               	movlb	0	; select bank0
 14212  34BA  00A9               	movwf	ui_disp_str_num@num
 14213  34BB  31A5  2531         	fcall	_ui_disp_str_num
 14214  34BD  0008               	return
 14215  34BE                     __end_of_ui_disp_set_balanceWarning:	
 14216                           
 14217                           	psect	text20
 14218  345C                     __ptext20:	
 14219 ;; *************** function _ui_disp_set_balanceOff *****************
 14220 ;; Defined at:
 14221 ;;		line 511 in file "src/api/ui.c"
 14222 ;; Parameters:    Size  Location     Type
 14223 ;;		None
 14224 ;; Auto vars:     Size  Location     Type
 14225 ;;		None
 14226 ;; Return value:  Size  Location     Type
 14227 ;;                  1    wreg      void 
 14228 ;; Registers used:
 14229 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14230 ;; Tracked objects:
 14231 ;;		On entry : 0/0
 14232 ;;		On exit  : 0/0
 14233 ;;		Unchanged: 0/0
 14234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14237 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14238 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14239 ;;Total ram usage:        0 bytes
 14240 ;; Hardware stack levels used:    1
 14241 ;; Hardware stack levels required when called:    6
 14242 ;; This function calls:
 14243 ;;		_ui_disp_str_num
 14244 ;; This function is called by:
 14245 ;;		_ui_disp_menu
 14246 ;; This function uses a non-reentrant model
 14247 ;;
 14248                           
 14249                           
 14250                           ;psect for function _ui_disp_set_balanceOff
 14251  345C                     _ui_disp_set_balanceOff:	
 14252                           
 14253                           ;ui.c: 512: __q15=*((int16_t*)(uiAdjbuf));
 14254                           
 14255                           ;incstack = 0
 14256                           ; Regs used in _ui_disp_set_balanceOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14257  345C  3061               	movlw	low (_uiAdjbuf| (0+256))
 14258  345D  0086               	movwf	6
 14259  345E  3001               	movlw	1	; select bank2/3
 14260  345F  0087               	movwf	7
 14261  3460  3F40               	moviw [0]fsr1
 14262  3461  0021               	movlb	1	; select bank1
 14263  3462  00BA               	movwf	___q15^(0+128)
 14264  3463  3F41               	moviw [1]fsr1
 14265  3464  00BB               	movwf	(___q15+1)^(0+128)
 14266                           
 14267                           ;ui.c: 514: if(__q15>=0){
 14268  3465  1BBB               	btfsc	(___q15+1)^(0+128),7
 14269  3466  2C77               	goto	l16865
 14270                           
 14271                           ;ui.c: 515: ui_disp_str_num((uint8_t*)"d2   ",__q15);
 14272  3467  3031               	movlw	low (STR_13| (0+32768))
 14273  3468  0020               	movlb	0	; select bank0
 14274  3469  00A7               	movwf	ui_disp_str_num@str
 14275  346A  30B9               	movlw	high (STR_13| (0+32768))
 14276  346B  00A8               	movwf	ui_disp_str_num@str+1
 14277  346C  0021               	movlb	1	; select bank1
 14278  346D  083B               	movf	(___q15+1)^(0+128),w
 14279  346E  0020               	movlb	0	; select bank0
 14280  346F  00AA               	movwf	ui_disp_str_num@num+1
 14281  3470  0021               	movlb	1	; select bank1
 14282  3471  083A               	movf	___q15^(0+128),w
 14283  3472  0020               	movlb	0	; select bank0
 14284  3473  00A9               	movwf	ui_disp_str_num@num
 14285  3474  31A5  2531         	fcall	_ui_disp_str_num
 14286                           
 14287                           ;ui.c: 516: }else{
 14288  3476  0008               	return
 14289  3477                     l16865:	
 14290                           
 14291                           ;ui.c: 517: __q15=0-__q15;
 14292  3477  0021               	movlb	1	; select bank1
 14293  3478  09BA               	comf	___q15^(0+128),f
 14294  3479  09BB               	comf	(___q15+1)^(0+128),f
 14295  347A  0ABA               	incf	___q15^(0+128),f
 14296  347B  1903               	skipnz
 14297  347C  0ABB               	incf	(___q15+1)^(0+128),f
 14298                           
 14299                           ;ui.c: 518: ui_disp_str_num((uint8_t*)"d2  -",__q15);
 14300  347D  303D               	movlw	low (STR_14| (0+32768))
 14301  347E  0020               	movlb	0	; select bank0
 14302  347F  00A7               	movwf	ui_disp_str_num@str
 14303  3480  30B9               	movlw	high (STR_14| (0+32768))
 14304  3481  00A8               	movwf	ui_disp_str_num@str+1
 14305  3482  0021               	movlb	1	; select bank1
 14306  3483  083B               	movf	(___q15+1)^(0+128),w
 14307  3484  0020               	movlb	0	; select bank0
 14308  3485  00AA               	movwf	ui_disp_str_num@num+1
 14309  3486  0021               	movlb	1	; select bank1
 14310  3487  083A               	movf	___q15^(0+128),w
 14311  3488  0020               	movlb	0	; select bank0
 14312  3489  00A9               	movwf	ui_disp_str_num@num
 14313  348A  31A5  2531         	fcall	_ui_disp_str_num
 14314  348C  0008               	return
 14315  348D                     __end_of_ui_disp_set_balanceOff:	
 14316                           
 14317                           	psect	text21
 14318  3C14                     __ptext21:	
 14319 ;; *************** function _ui_disp_modbus_id *****************
 14320 ;; Defined at:
 14321 ;;		line 447 in file "src/api/ui.c"
 14322 ;; Parameters:    Size  Location     Type
 14323 ;;		None
 14324 ;; Auto vars:     Size  Location     Type
 14325 ;;		None
 14326 ;; Return value:  Size  Location     Type
 14327 ;;                  1    wreg      void 
 14328 ;; Registers used:
 14329 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14330 ;; Tracked objects:
 14331 ;;		On entry : 0/0
 14332 ;;		On exit  : 0/0
 14333 ;;		Unchanged: 0/0
 14334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14337 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14339 ;;Total ram usage:        2 bytes
 14340 ;; Hardware stack levels used:    1
 14341 ;; Hardware stack levels required when called:    6
 14342 ;; This function calls:
 14343 ;;		_ui_disp_str_num
 14344 ;; This function is called by:
 14345 ;;		_ui_disp_menu
 14346 ;; This function uses a non-reentrant model
 14347 ;;
 14348                           
 14349                           
 14350                           ;psect for function _ui_disp_modbus_id
 14351  3C14                     _ui_disp_modbus_id:	
 14352                           
 14353                           ;ui.c: 449: ui_disp_str_num((uint8_t*)"id-", uiAdjbuf[0]);
 14354                           
 14355                           ;incstack = 0
 14356                           ; Regs used in _ui_disp_modbus_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14357  3C14  3044               	movlw	low ((STR_10+1)| (0+32768))
 14358  3C15  0020               	movlb	0	; select bank0
 14359  3C16  00A7               	movwf	ui_disp_str_num@str
 14360  3C17  30B9               	movlw	high ((STR_10+1)| (0+32768))
 14361  3C18  00A8               	movwf	ui_disp_str_num@str+1
 14362  3C19  0022               	movlb	2	; select bank2
 14363  3C1A  0861               	movf	_uiAdjbuf^(0+256),w
 14364  3C1B  0020               	movlb	0	; select bank0
 14365  3C1C  00AD               	movwf	??_ui_disp_modbus_id
 14366  3C1D  01AE               	clrf	??_ui_disp_modbus_id+1
 14367  3C1E  082D               	movf	??_ui_disp_modbus_id,w
 14368  3C1F  00A9               	movwf	ui_disp_str_num@num
 14369  3C20  082E               	movf	??_ui_disp_modbus_id+1,w
 14370  3C21  00AA               	movwf	ui_disp_str_num@num+1
 14371  3C22  31A5  2531         	fcall	_ui_disp_str_num
 14372  3C24  0008               	return
 14373  3C25                     __end_of_ui_disp_modbus_id:	
 14374                           
 14375                           	psect	text22
 14376  2531                     __ptext22:	
 14377 ;; *************** function _ui_disp_str_num *****************
 14378 ;; Defined at:
 14379 ;;		line 64 in file "src/api/ui.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  str             2    7[BANK0 ] PTR unsigned char 
 14382 ;;		 -> STR_14(6), STR_13(6), STR_12(6), STR_11(6), 
 14383 ;;		 -> STR_10(5), STR_9(4), STR_8(4), STR_6(7), 
 14384 ;;		 -> STR_5(3), STR_2(7), 
 14385 ;;  num             2    9[BANK0 ] unsigned int 
 14386 ;; Auto vars:     Size  Location     Type
 14387 ;;		None
 14388 ;; Return value:  Size  Location     Type
 14389 ;;                  1    wreg      void 
 14390 ;; Registers used:
 14391 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14392 ;; Tracked objects:
 14393 ;;		On entry : 0/0
 14394 ;;		On exit  : 0/0
 14395 ;;		Unchanged: 0/0
 14396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14397 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14400 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 14401 ;;Total ram usage:        6 bytes
 14402 ;; Hardware stack levels used:    1
 14403 ;; Hardware stack levels required when called:    5
 14404 ;; This function calls:
 14405 ;;		___lwdiv
 14406 ;;		___lwmod
 14407 ;;		_lcd_clear_buffer
 14408 ;;		_lcd_disp_str
 14409 ;;		_m_mem_set
 14410 ;;		_ui_mem_cpy
 14411 ;; This function is called by:
 14412 ;;		_ui_start_display
 14413 ;;		_ui_disp_small_flow_how_care
 14414 ;;		_ui_disp_modbus_id
 14415 ;;		_ui_disp_set_transferMoneyLimit
 14416 ;;		_ui_disp_set_device_id
 14417 ;;		_ui_disp_set_balanceWarning
 14418 ;;		_ui_disp_set_balanceOff
 14419 ;;		_ui_disp_set_line_reset
 14420 ;; This function uses a non-reentrant model
 14421 ;;
 14422                           
 14423                           
 14424                           ;psect for function _ui_disp_str_num
 14425  2531                     _ui_disp_str_num:	
 14426                           
 14427                           ;ui.c: 66: lcd_clear_buffer();
 14428                           
 14429                           ;incstack = 0
 14430                           ; Regs used in _ui_disp_str_num: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14431  2531  31BB  2358  31A5   	fcall	_lcd_clear_buffer
 14432                           
 14433                           ;ui.c: 67: m_mem_set(lcdBuf, ' ', 8);
 14434  2534  3058               	movlw	low _lcdBuf
 14435  2535  00F3               	movwf	m_mem_set@buf
 14436  2536  3001               	movlw	high _lcdBuf
 14437  2537  00F4               	movwf	m_mem_set@buf+1
 14438  2538  3020               	movlw	32
 14439  2539  0020               	movlb	0	; select bank0
 14440  253A  00AB               	movwf	??_ui_disp_str_num
 14441  253B  082B               	movf	??_ui_disp_str_num,w
 14442  253C  00F5               	movwf	m_mem_set@x
 14443  253D  3008               	movlw	8
 14444  253E  00AC               	movwf	??_ui_disp_str_num+1
 14445  253F  082C               	movf	??_ui_disp_str_num+1,w
 14446  2540  00F6               	movwf	m_mem_set@len
 14447  2541  31BB  23E2  31A5   	fcall	_m_mem_set
 14448                           
 14449                           ;ui.c: 68: lcdBuf[8] = '\0';
 14450  2544  0022               	movlb	2	; select bank2
 14451  2545  01E0               	clrf	(_lcdBuf^(0+256)+8)
 14452                           
 14453                           ;ui.c: 69: ui_mem_cpy(lcdBuf, str);
 14454  2546  0020               	movlb	0	; select bank0
 14455  2547  0828               	movf	ui_disp_str_num@str+1,w
 14456  2548  00F4               	movwf	ui_mem_cpy@s+1
 14457  2549  0827               	movf	ui_disp_str_num@str,w
 14458  254A  00F3               	movwf	ui_mem_cpy@s
 14459  254B  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 14460  254C  31BF  278C  31A5   	fcall	_ui_mem_cpy
 14461                           
 14462                           ;ui.c: 70: __t16 = num;
 14463  254F  0020               	movlb	0	; select bank0
 14464  2550  082A               	movf	ui_disp_str_num@num+1,w
 14465  2551  00F9               	movwf	___t16+1
 14466  2552  0829               	movf	ui_disp_str_num@num,w
 14467  2553  00F8               	movwf	___t16
 14468                           
 14469                           ;ui.c: 71: lcdBuf[7] = '0' + (__t16 % 10);
 14470  2554  300A               	movlw	10
 14471  2555  00F3               	movwf	___lwmod@divisor
 14472  2556  3000               	movlw	0
 14473  2557  00F4               	movwf	___lwmod@divisor+1
 14474  2558  0879               	movf	___t16+1,w
 14475  2559  00F6               	movwf	___lwmod@dividend+1
 14476  255A  0878               	movf	___t16,w
 14477  255B  00F5               	movwf	___lwmod@dividend
 14478  255C  31B1  213E  31A5   	fcall	___lwmod
 14479  255F  0873               	movf	?___lwmod,w
 14480  2560  3E30               	addlw	48
 14481  2561  0020               	movlb	0	; select bank0
 14482  2562  00AB               	movwf	??_ui_disp_str_num
 14483  2563  082B               	movf	??_ui_disp_str_num,w
 14484  2564  0022               	movlb	2	; select bank2
 14485  2565  00DF               	movwf	(_lcdBuf^(0+256)+7)
 14486                           
 14487                           ;ui.c: 72: __t16 /= 10;
 14488  2566  300A               	movlw	10
 14489  2567  00F3               	movwf	___lwdiv@divisor
 14490  2568  3000               	movlw	0
 14491  2569  00F4               	movwf	___lwdiv@divisor+1
 14492  256A  0879               	movf	___t16+1,w
 14493  256B  00F6               	movwf	___lwdiv@dividend+1
 14494  256C  0878               	movf	___t16,w
 14495  256D  00F5               	movwf	___lwdiv@dividend
 14496  256E  31B5  2525  31A5   	fcall	___lwdiv
 14497  2571  0874               	movf	?___lwdiv+1,w
 14498  2572  00F9               	movwf	___t16+1
 14499  2573  0873               	movf	?___lwdiv,w
 14500  2574  00F8               	movwf	___t16
 14501                           
 14502                           ;ui.c: 73: if (__t16 > 0) {
 14503  2575  0878               	movf	___t16,w
 14504  2576  0479               	iorwf	___t16+1,w
 14505  2577  1903               	btfsc	3,2
 14506  2578  2DD5               	goto	l16805
 14507                           
 14508                           ;ui.c: 74: lcdBuf[6] = '0' + (__t16 % 10);
 14509  2579  300A               	movlw	10
 14510  257A  00F3               	movwf	___lwmod@divisor
 14511  257B  3000               	movlw	0
 14512  257C  00F4               	movwf	___lwmod@divisor+1
 14513  257D  0879               	movf	___t16+1,w
 14514  257E  00F6               	movwf	___lwmod@dividend+1
 14515  257F  0878               	movf	___t16,w
 14516  2580  00F5               	movwf	___lwmod@dividend
 14517  2581  31B1  213E  31A5   	fcall	___lwmod
 14518  2584  0873               	movf	?___lwmod,w
 14519  2585  3E30               	addlw	48
 14520  2586  0020               	movlb	0	; select bank0
 14521  2587  00AB               	movwf	??_ui_disp_str_num
 14522  2588  082B               	movf	??_ui_disp_str_num,w
 14523  2589  0022               	movlb	2	; select bank2
 14524  258A  00DE               	movwf	(_lcdBuf^(0+256)+6)
 14525                           
 14526                           ;ui.c: 75: __t16 /= 10;
 14527  258B  300A               	movlw	10
 14528  258C  00F3               	movwf	___lwdiv@divisor
 14529  258D  3000               	movlw	0
 14530  258E  00F4               	movwf	___lwdiv@divisor+1
 14531  258F  0879               	movf	___t16+1,w
 14532  2590  00F6               	movwf	___lwdiv@dividend+1
 14533  2591  0878               	movf	___t16,w
 14534  2592  00F5               	movwf	___lwdiv@dividend
 14535  2593  31B5  2525  31A5   	fcall	___lwdiv
 14536  2596  0874               	movf	?___lwdiv+1,w
 14537  2597  00F9               	movwf	___t16+1
 14538  2598  0873               	movf	?___lwdiv,w
 14539  2599  00F8               	movwf	___t16
 14540                           
 14541                           ;ui.c: 76: if (__t16 > 0) {
 14542  259A  0878               	movf	___t16,w
 14543  259B  0479               	iorwf	___t16+1,w
 14544  259C  1903               	btfsc	3,2
 14545  259D  2DD5               	goto	l16805
 14546                           
 14547                           ;ui.c: 77: lcdBuf[5] = '0' + (__t16 % 10);
 14548  259E  300A               	movlw	10
 14549  259F  00F3               	movwf	___lwmod@divisor
 14550  25A0  3000               	movlw	0
 14551  25A1  00F4               	movwf	___lwmod@divisor+1
 14552  25A2  0879               	movf	___t16+1,w
 14553  25A3  00F6               	movwf	___lwmod@dividend+1
 14554  25A4  0878               	movf	___t16,w
 14555  25A5  00F5               	movwf	___lwmod@dividend
 14556  25A6  31B1  213E  31A5   	fcall	___lwmod
 14557  25A9  0873               	movf	?___lwmod,w
 14558  25AA  3E30               	addlw	48
 14559  25AB  0020               	movlb	0	; select bank0
 14560  25AC  00AB               	movwf	??_ui_disp_str_num
 14561  25AD  082B               	movf	??_ui_disp_str_num,w
 14562  25AE  0022               	movlb	2	; select bank2
 14563  25AF  00DD               	movwf	(_lcdBuf^(0+256)+5)
 14564                           
 14565                           ;ui.c: 78: __t16 /= 10;
 14566  25B0  300A               	movlw	10
 14567  25B1  00F3               	movwf	___lwdiv@divisor
 14568  25B2  3000               	movlw	0
 14569  25B3  00F4               	movwf	___lwdiv@divisor+1
 14570  25B4  0879               	movf	___t16+1,w
 14571  25B5  00F6               	movwf	___lwdiv@dividend+1
 14572  25B6  0878               	movf	___t16,w
 14573  25B7  00F5               	movwf	___lwdiv@dividend
 14574  25B8  31B5  2525  31A5   	fcall	___lwdiv
 14575  25BB  0874               	movf	?___lwdiv+1,w
 14576  25BC  00F9               	movwf	___t16+1
 14577  25BD  0873               	movf	?___lwdiv,w
 14578  25BE  00F8               	movwf	___t16
 14579                           
 14580                           ;ui.c: 79: if (__t16 > 0) {
 14581  25BF  0878               	movf	___t16,w
 14582  25C0  0479               	iorwf	___t16+1,w
 14583  25C1  1903               	btfsc	3,2
 14584  25C2  2DD5               	goto	l16805
 14585                           
 14586                           ;ui.c: 80: lcdBuf[4] = '0' + (__t16 % 10);
 14587  25C3  300A               	movlw	10
 14588  25C4  00F3               	movwf	___lwmod@divisor
 14589  25C5  3000               	movlw	0
 14590  25C6  00F4               	movwf	___lwmod@divisor+1
 14591  25C7  0879               	movf	___t16+1,w
 14592  25C8  00F6               	movwf	___lwmod@dividend+1
 14593  25C9  0878               	movf	___t16,w
 14594  25CA  00F5               	movwf	___lwmod@dividend
 14595  25CB  31B1  213E  31A5   	fcall	___lwmod
 14596  25CE  0873               	movf	?___lwmod,w
 14597  25CF  3E30               	addlw	48
 14598  25D0  0020               	movlb	0	; select bank0
 14599  25D1  00AB               	movwf	??_ui_disp_str_num
 14600  25D2  082B               	movf	??_ui_disp_str_num,w
 14601  25D3  0022               	movlb	2	; select bank2
 14602  25D4  00DC               	movwf	(_lcdBuf^(0+256)+4)
 14603  25D5                     l16805:	
 14604                           
 14605                           ;ui.c: 81: }
 14606                           ;ui.c: 82: }
 14607                           ;ui.c: 83: }
 14608                           ;ui.c: 84: lcd_disp_str(lcdBuf);
 14609  25D5  3058               	movlw	low _lcdBuf
 14610  25D6  0020               	movlb	0	; select bank0
 14611  25D7  00A2               	movwf	lcd_disp_str@str
 14612  25D8  3001               	movlw	high _lcdBuf
 14613  25D9  00A3               	movwf	lcd_disp_str@str+1
 14614  25DA  31A8  20E8         	fcall	_lcd_disp_str
 14615  25DC  0008               	return
 14616  25DD                     __end_of_ui_disp_str_num:	
 14617                           
 14618                           	psect	text23
 14619  3F8C                     __ptext23:	
 14620 ;; *************** function _ui_mem_cpy *****************
 14621 ;; Defined at:
 14622 ;;		line 56 in file "src/api/ui.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;  d               1    wreg     PTR unsigned char 
 14625 ;;		 -> lcdBuf(9), 
 14626 ;;  s               2    3[COMMON] PTR unsigned char 
 14627 ;;		 -> STR_23(5), STR_14(6), STR_13(6), STR_12(6), 
 14628 ;;		 -> STR_11(6), STR_10(5), STR_9(4), STR_8(4), 
 14629 ;;		 -> STR_6(7), STR_5(3), STR_2(7), 
 14630 ;; Auto vars:     Size  Location     Type
 14631 ;;  d               1    7[COMMON] PTR unsigned char 
 14632 ;;		 -> lcdBuf(9), 
 14633 ;;  len             1    6[COMMON] unsigned char 
 14634 ;; Return value:  Size  Location     Type
 14635 ;;                  1    wreg      void 
 14636 ;; Registers used:
 14637 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14638 ;; Tracked objects:
 14639 ;;		On entry : 0/0
 14640 ;;		On exit  : 0/0
 14641 ;;		Unchanged: 0/0
 14642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14643 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14646 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14647 ;;Total ram usage:        5 bytes
 14648 ;; Hardware stack levels used:    1
 14649 ;; Hardware stack levels required when called:    2
 14650 ;; This function calls:
 14651 ;;		Nothing
 14652 ;; This function is called by:
 14653 ;;		_ui_disp_str_num
 14654 ;;		_ui_disp_str_num_ex
 14655 ;; This function uses a non-reentrant model
 14656 ;;
 14657                           
 14658                           
 14659                           ;psect for function _ui_mem_cpy
 14660  3F8C                     _ui_mem_cpy:	
 14661                           
 14662                           ;incstack = 0
 14663                           ; Regs used in _ui_mem_cpy: [wreg-fsr1h+status,2+status,0+pclath]
 14664                           ;ui_mem_cpy@d stored from wreg
 14665  3F8C  00F7               	movwf	ui_mem_cpy@d
 14666                           
 14667                           ;ui.c: 57: uint8_t len = 0;
 14668  3F8D  01F6               	clrf	ui_mem_cpy@len
 14669  3F8E                     l12821:	
 14670                           ;ui.c: 58: while (*s != '\0' && len < 8) {
 14671                           
 14672  3F8E  0873               	movf	ui_mem_cpy@s,w
 14673  3F8F  0084               	movwf	4
 14674  3F90  0874               	movf	ui_mem_cpy@s+1,w
 14675  3F91  0085               	movwf	5
 14676  3F92  0012               	moviw fsr0++
 14677  3F93  1903               	btfsc	3,2
 14678  3F94  0008               	return
 14679  3F95  3008               	movlw	8
 14680  3F96  0276               	subwf	ui_mem_cpy@len,w
 14681  3F97  1803               	btfsc	3,0
 14682  3F98  0008               	return
 14683                           
 14684                           ;ui.c: 59: *d++ = *s++;
 14685  3F99  0873               	movf	ui_mem_cpy@s,w
 14686  3F9A  0084               	movwf	4
 14687  3F9B  0874               	movf	ui_mem_cpy@s+1,w
 14688  3F9C  0085               	movwf	5
 14689  3F9D  0800               	movf	0,w	;code access
 14690  3F9E  00F5               	movwf	??_ui_mem_cpy
 14691  3F9F  0877               	movf	ui_mem_cpy@d,w
 14692  3FA0  0086               	movwf	6
 14693  3FA1  3001               	movlw	1	; select bank2/3
 14694  3FA2  0087               	movwf	7
 14695  3FA3  0875               	movf	??_ui_mem_cpy,w
 14696  3FA4  0081               	movwf	1
 14697  3FA5  3001               	movlw	1
 14698  3FA6  07F3               	addwf	ui_mem_cpy@s,f
 14699  3FA7  3000               	movlw	0
 14700  3FA8  3DF4               	addwfc	ui_mem_cpy@s+1,f
 14701  3FA9  3001               	movlw	1
 14702  3FAA  00F5               	movwf	??_ui_mem_cpy
 14703  3FAB  0875               	movf	??_ui_mem_cpy,w
 14704  3FAC  07F7               	addwf	ui_mem_cpy@d,f
 14705                           
 14706                           ;ui.c: 60: len++;
 14707  3FAD  3001               	movlw	1
 14708  3FAE  00F5               	movwf	??_ui_mem_cpy
 14709  3FAF  0875               	movf	??_ui_mem_cpy,w
 14710  3FB0  07F6               	addwf	ui_mem_cpy@len,f
 14711  3FB1  2F8E               	goto	l12821
 14712  3FB2                     __end_of_ui_mem_cpy:	
 14713                           
 14714                           	psect	text24
 14715  313E                     __ptext24:	
 14716 ;; *************** function ___lwmod *****************
 14717 ;; Defined at:
 14718 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
 14719 ;; Parameters:    Size  Location     Type
 14720 ;;  divisor         2    3[COMMON] unsigned int 
 14721 ;;  dividend        2    5[COMMON] unsigned int 
 14722 ;; Auto vars:     Size  Location     Type
 14723 ;;  counter         1    0[BANK0 ] unsigned char 
 14724 ;; Return value:  Size  Location     Type
 14725 ;;                  2    3[COMMON] unsigned int 
 14726 ;; Registers used:
 14727 ;;		wreg, status,2, status,0
 14728 ;; Tracked objects:
 14729 ;;		On entry : 0/0
 14730 ;;		On exit  : 0/0
 14731 ;;		Unchanged: 0/0
 14732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14733 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14736 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14737 ;;Total ram usage:        6 bytes
 14738 ;; Hardware stack levels used:    1
 14739 ;; Hardware stack levels required when called:    2
 14740 ;; This function calls:
 14741 ;;		Nothing
 14742 ;; This function is called by:
 14743 ;;		_ui_disp_str_num
 14744 ;;		_ui_disp_str_num_ex
 14745 ;; This function uses a non-reentrant model
 14746 ;;
 14747                           
 14748                           
 14749                           ;psect for function ___lwmod
 14750  313E                     ___lwmod:	
 14751                           
 14752                           ;incstack = 0
 14753                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 14754  313E  0873               	movf	___lwmod@divisor,w
 14755  313F  0474               	iorwf	___lwmod@divisor+1,w
 14756  3140  1903               	btfsc	3,2
 14757  3141  2966               	goto	l16777
 14758  3142  0020               	movlb	0	; select bank0
 14759  3143  01A0               	clrf	___lwmod@counter
 14760  3144  0AA0               	incf	___lwmod@counter,f
 14761  3145                     l16767:	
 14762  3145  1BF4               	btfsc	___lwmod@divisor+1,7
 14763  3146  2951               	goto	l16769
 14764  3147  3001               	movlw	1
 14765  3148                     u15795:	
 14766  3148  35F3               	lslf	___lwmod@divisor,f
 14767  3149  0DF4               	rlf	___lwmod@divisor+1,f
 14768  314A  0B89               	decfsz	9,f
 14769  314B  2948               	goto	u15795
 14770  314C  3001               	movlw	1
 14771  314D  00F7               	movwf	??___lwmod
 14772  314E  0877               	movf	??___lwmod,w
 14773  314F  07A0               	addwf	___lwmod@counter,f
 14774  3150  2945               	goto	l16767
 14775  3151                     l16769:	
 14776  3151  0874               	movf	___lwmod@divisor+1,w
 14777  3152  0276               	subwf	___lwmod@dividend+1,w
 14778  3153  1D03               	skipz
 14779  3154  2957               	goto	u15815
 14780  3155  0873               	movf	___lwmod@divisor,w
 14781  3156  0275               	subwf	___lwmod@dividend,w
 14782  3157                     u15815:	
 14783  3157  1C03               	skipc
 14784  3158  295D               	goto	l16773
 14785  3159  0873               	movf	___lwmod@divisor,w
 14786  315A  02F5               	subwf	___lwmod@dividend,f
 14787  315B  0874               	movf	___lwmod@divisor+1,w
 14788  315C  3BF6               	subwfb	___lwmod@dividend+1,f
 14789  315D                     l16773:	
 14790  315D  3001               	movlw	1
 14791  315E                     u15825:	
 14792  315E  36F4               	lsrf	___lwmod@divisor+1,f
 14793  315F  0CF3               	rrf	___lwmod@divisor,f
 14794  3160  0B89               	decfsz	9,f
 14795  3161  295E               	goto	u15825
 14796  3162  3001               	movlw	1
 14797  3163  02A0               	subwf	___lwmod@counter,f
 14798  3164  1D03               	btfss	3,2
 14799  3165  2951               	goto	l16769
 14800  3166                     l16777:	
 14801  3166  0876               	movf	___lwmod@dividend+1,w
 14802  3167  00F4               	movwf	?___lwmod+1
 14803  3168  0875               	movf	___lwmod@dividend,w
 14804  3169  00F3               	movwf	?___lwmod
 14805  316A  0008               	return
 14806  316B                     __end_of___lwmod:	
 14807                           
 14808                           	psect	text25
 14809  3525                     __ptext25:	
 14810 ;; *************** function ___lwdiv *****************
 14811 ;; Defined at:
 14812 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
 14813 ;; Parameters:    Size  Location     Type
 14814 ;;  divisor         2    3[COMMON] unsigned int 
 14815 ;;  dividend        2    5[COMMON] unsigned int 
 14816 ;; Auto vars:     Size  Location     Type
 14817 ;;  quotient        2    0[BANK0 ] unsigned int 
 14818 ;;  counter         1    2[BANK0 ] unsigned char 
 14819 ;; Return value:  Size  Location     Type
 14820 ;;                  2    3[COMMON] unsigned int 
 14821 ;; Registers used:
 14822 ;;		wreg, status,2, status,0
 14823 ;; Tracked objects:
 14824 ;;		On entry : 0/0
 14825 ;;		On exit  : 0/0
 14826 ;;		Unchanged: 0/0
 14827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14828 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14829 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14831 ;;      Totals:         5       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14832 ;;Total ram usage:        8 bytes
 14833 ;; Hardware stack levels used:    1
 14834 ;; Hardware stack levels required when called:    2
 14835 ;; This function calls:
 14836 ;;		Nothing
 14837 ;; This function is called by:
 14838 ;;		_ui_disp_str_num
 14839 ;;		_ui_disp_str_num_ex
 14840 ;; This function uses a non-reentrant model
 14841 ;;
 14842                           
 14843                           
 14844                           ;psect for function ___lwdiv
 14845  3525                     ___lwdiv:	
 14846                           
 14847                           ;incstack = 0
 14848                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 14849  3525  0020               	movlb	0	; select bank0
 14850  3526  01A0               	clrf	___lwdiv@quotient
 14851  3527  01A1               	clrf	___lwdiv@quotient+1
 14852  3528  0873               	movf	___lwdiv@divisor,w
 14853  3529  0474               	iorwf	___lwdiv@divisor+1,w
 14854  352A  1903               	btfsc	3,2
 14855  352B  2D55               	goto	l16755
 14856  352C  01A2               	clrf	___lwdiv@counter
 14857  352D  0AA2               	incf	___lwdiv@counter,f
 14858  352E                     l16743:	
 14859  352E  1BF4               	btfsc	___lwdiv@divisor+1,7
 14860  352F  2D3A               	goto	l16745
 14861  3530  3001               	movlw	1
 14862  3531                     u15725:	
 14863  3531  35F3               	lslf	___lwdiv@divisor,f
 14864  3532  0DF4               	rlf	___lwdiv@divisor+1,f
 14865  3533  0B89               	decfsz	9,f
 14866  3534  2D31               	goto	u15725
 14867  3535  3001               	movlw	1
 14868  3536  00F7               	movwf	??___lwdiv
 14869  3537  0877               	movf	??___lwdiv,w
 14870  3538  07A2               	addwf	___lwdiv@counter,f
 14871  3539  2D2E               	goto	l16743
 14872  353A                     l16745:	
 14873  353A  3001               	movlw	1
 14874  353B                     u15745:	
 14875  353B  35A0               	lslf	___lwdiv@quotient,f
 14876  353C  0DA1               	rlf	___lwdiv@quotient+1,f
 14877  353D  0B89               	decfsz	9,f
 14878  353E  2D3B               	goto	u15745
 14879  353F  0874               	movf	___lwdiv@divisor+1,w
 14880  3540  0276               	subwf	___lwdiv@dividend+1,w
 14881  3541  1D03               	skipz
 14882  3542  2D45               	goto	u15755
 14883  3543  0873               	movf	___lwdiv@divisor,w
 14884  3544  0275               	subwf	___lwdiv@dividend,w
 14885  3545                     u15755:	
 14886  3545  1C03               	skipc
 14887  3546  2D4C               	goto	l16751
 14888  3547  0873               	movf	___lwdiv@divisor,w
 14889  3548  02F5               	subwf	___lwdiv@dividend,f
 14890  3549  0874               	movf	___lwdiv@divisor+1,w
 14891  354A  3BF6               	subwfb	___lwdiv@dividend+1,f
 14892  354B  1420               	bsf	___lwdiv@quotient,0
 14893  354C                     l16751:	
 14894  354C  3001               	movlw	1
 14895  354D                     u15765:	
 14896  354D  36F4               	lsrf	___lwdiv@divisor+1,f
 14897  354E  0CF3               	rrf	___lwdiv@divisor,f
 14898  354F  0B89               	decfsz	9,f
 14899  3550  2D4D               	goto	u15765
 14900  3551  3001               	movlw	1
 14901  3552  02A2               	subwf	___lwdiv@counter,f
 14902  3553  1D03               	btfss	3,2
 14903  3554  2D3A               	goto	l16745
 14904  3555                     l16755:	
 14905  3555  0821               	movf	___lwdiv@quotient+1,w
 14906  3556  00F4               	movwf	?___lwdiv+1
 14907  3557  0820               	movf	___lwdiv@quotient,w
 14908  3558  00F3               	movwf	?___lwdiv
 14909  3559  0008               	return
 14910  355A                     __end_of___lwdiv:	
 14911                           
 14912                           	psect	text26
 14913  22BE                     __ptext26:	
 14914 ;; *************** function _ui_disp_flow *****************
 14915 ;; Defined at:
 14916 ;;		line 141 in file "src/api/ui.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;		None
 14919 ;; Auto vars:     Size  Location     Type
 14920 ;;  flw             4   29[BANK0 ] unsigned long 
 14921 ;;  decnum          1   28[BANK0 ] unsigned char 
 14922 ;; Return value:  Size  Location     Type
 14923 ;;                  1    wreg      void 
 14924 ;; Registers used:
 14925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14926 ;; Tracked objects:
 14927 ;;		On entry : 0/0
 14928 ;;		On exit  : 0/0
 14929 ;;		Unchanged: 0/0
 14930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14932 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14933 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14934 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 14935 ;;Total ram usage:        7 bytes
 14936 ;; Hardware stack levels used:    1
 14937 ;; Hardware stack levels required when called:    6
 14938 ;; This function calls:
 14939 ;;		___lldiv
 14940 ;;		___lmul
 14941 ;;		_lcd_clear_buffer
 14942 ;;		_lcd_disp_dp
 14943 ;;		_lcd_disp_str
 14944 ;;		_m_mem_set
 14945 ;;		_ui_disp_flow_error
 14946 ;;		_ui_head_hide
 14947 ;;		_ui_uint32_2_str
 14948 ;; This function is called by:
 14949 ;;		_ui_disp_menu
 14950 ;; This function uses a non-reentrant model
 14951 ;;
 14952                           
 14953                           
 14954                           ;psect for function _ui_disp_flow
 14955  22BE                     _ui_disp_flow:	
 14956                           
 14957                           ;ui.c: 142: uint32_t flw = flow;
 14958                           
 14959                           ;incstack = 0
 14960                           ; Regs used in _ui_disp_flow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14961  22BE  0021               	movlb	1	; select bank1
 14962  22BF  083C               	movf	_flow^(0+128),w	;volatile
 14963  22C0  0020               	movlb	0	; select bank0
 14964  22C1  00BD               	movwf	ui_disp_flow@flw
 14965  22C2  0021               	movlb	1	; select bank1
 14966  22C3  083D               	movf	(_flow+1)^(0+128),w	;volatile
 14967  22C4  0020               	movlb	0	; select bank0
 14968  22C5  00BE               	movwf	ui_disp_flow@flw+1
 14969  22C6  01BF               	clrf	ui_disp_flow@flw+2
 14970  22C7  01C0               	clrf	ui_disp_flow@flw+3
 14971                           
 14972                           ;ui.c: 143: uint8_t decnum;
 14973                           ;ui.c: 144: if(flowError){
 14974  22C8  0021               	movlb	1	; select bank1
 14975  22C9  0846               	movf	_flowError^(0+128),w
 14976  22CA  1903               	btfsc	3,2
 14977  22CB  2ACF               	goto	l13259
 14978                           
 14979                           ;ui.c: 145: ui_disp_flow_error();
 14980  22CC  31BB  2341         	fcall	_ui_disp_flow_error
 14981                           
 14982                           ;ui.c: 146: return;
 14983  22CE  0008               	return
 14984  22CF                     l13259:	
 14985                           
 14986                           ;ui.c: 147: }
 14987                           ;ui.c: 148: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 14988  22CF  3058               	movlw	low _lcdBuf
 14989  22D0  00F3               	movwf	m_mem_set@buf
 14990  22D1  3001               	movlw	high _lcdBuf
 14991  22D2  00F4               	movwf	m_mem_set@buf+1
 14992  22D3  3030               	movlw	48
 14993  22D4  0020               	movlb	0	; select bank0
 14994  22D5  00BA               	movwf	??_ui_disp_flow
 14995  22D6  083A               	movf	??_ui_disp_flow,w
 14996  22D7  00F5               	movwf	m_mem_set@x
 14997  22D8  3009               	movlw	9
 14998  22D9  00BB               	movwf	??_ui_disp_flow+1
 14999  22DA  083B               	movf	??_ui_disp_flow+1,w
 15000  22DB  00F6               	movwf	m_mem_set@len
 15001  22DC  31BB  23E2  31A2   	fcall	_m_mem_set
 15002                           
 15003                           ;ui.c: 149: lcdBuf[8] = '\0';
 15004  22DF  0022               	movlb	2	; select bank2
 15005  22E0  01E0               	clrf	(_lcdBuf^(0+256)+8)
 15006                           
 15007                           ;ui.c: 151: if(mainSystemData.imdFlowUnit==0){
 15008  22E1  0024               	movlb	4	; select bank4
 15009  22E2  085C               	movf	(_mainSystemData^(0+512)+60),w
 15010  22E3  1D03               	btfss	3,2
 15011  22E4  2AEB               	goto	l13267
 15012                           
 15013                           ;ui.c: 152: decnum=mainSystemData.imdFlowResolution;
 15014  22E5  085D               	movf	(_mainSystemData^(0+512)+61),w
 15015  22E6  0020               	movlb	0	; select bank0
 15016  22E7  00BA               	movwf	??_ui_disp_flow
 15017  22E8  083A               	movf	??_ui_disp_flow,w
 15018  22E9  00BC               	movwf	ui_disp_flow@decnum
 15019                           
 15020                           ;ui.c: 153: }else{
 15021  22EA  2B28               	goto	l13273
 15022  22EB                     l13267:	
 15023                           
 15024                           ;ui.c: 154: decnum=2;
 15025  22EB  3002               	movlw	2
 15026  22EC  0020               	movlb	0	; select bank0
 15027  22ED  00BA               	movwf	??_ui_disp_flow
 15028  22EE  083A               	movf	??_ui_disp_flow,w
 15029  22EF  00BC               	movwf	ui_disp_flow@decnum
 15030                           
 15031                           ;ui.c: 155: flw=flw*60;
 15032  22F0  0840               	movf	ui_disp_flow@flw+3,w
 15033  22F1  00A3               	movwf	___lmul@multiplier+3
 15034  22F2  083F               	movf	ui_disp_flow@flw+2,w
 15035  22F3  00A2               	movwf	___lmul@multiplier+2
 15036  22F4  083E               	movf	ui_disp_flow@flw+1,w
 15037  22F5  00A1               	movwf	___lmul@multiplier+1
 15038  22F6  083D               	movf	ui_disp_flow@flw,w
 15039  22F7  00A0               	movwf	___lmul@multiplier
 15040  22F8  3000               	movlw	0
 15041  22F9  00A7               	movwf	___lmul@multiplicand+3
 15042  22FA  3000               	movlw	0
 15043  22FB  00A6               	movwf	___lmul@multiplicand+2
 15044  22FC  3000               	movlw	0
 15045  22FD  00A5               	movwf	___lmul@multiplicand+1
 15046  22FE  303C               	movlw	60
 15047  22FF  00A4               	movwf	___lmul@multiplicand
 15048  2300  31B3  2369  31A2   	fcall	___lmul
 15049  2303  0020               	movlb	0	; select bank0
 15050  2304  0823               	movf	?___lmul+3,w
 15051  2305  00C0               	movwf	ui_disp_flow@flw+3
 15052  2306  0822               	movf	?___lmul+2,w
 15053  2307  00BF               	movwf	ui_disp_flow@flw+2
 15054  2308  0821               	movf	?___lmul+1,w
 15055  2309  00BE               	movwf	ui_disp_flow@flw+1
 15056  230A  0820               	movf	?___lmul,w
 15057  230B  00BD               	movwf	ui_disp_flow@flw
 15058                           
 15059                           ;ui.c: 156: flw=flw/100;
 15060  230C  3000               	movlw	0
 15061  230D  00AB               	movwf	___lldiv@divisor+3
 15062  230E  3000               	movlw	0
 15063  230F  00AA               	movwf	___lldiv@divisor+2
 15064  2310  3000               	movlw	0
 15065  2311  00A9               	movwf	___lldiv@divisor+1
 15066  2312  3064               	movlw	100
 15067  2313  00A8               	movwf	___lldiv@divisor
 15068  2314  0840               	movf	ui_disp_flow@flw+3,w
 15069  2315  00AF               	movwf	___lldiv@dividend+3
 15070  2316  083F               	movf	ui_disp_flow@flw+2,w
 15071  2317  00AE               	movwf	___lldiv@dividend+2
 15072  2318  083E               	movf	ui_disp_flow@flw+1,w
 15073  2319  00AD               	movwf	___lldiv@dividend+1
 15074  231A  083D               	movf	ui_disp_flow@flw,w
 15075  231B  00AC               	movwf	___lldiv@dividend
 15076  231C  31AA  2268  31A2   	fcall	___lldiv
 15077  231F  0020               	movlb	0	; select bank0
 15078  2320  082B               	movf	?___lldiv+3,w
 15079  2321  00C0               	movwf	ui_disp_flow@flw+3
 15080  2322  082A               	movf	?___lldiv+2,w
 15081  2323  00BF               	movwf	ui_disp_flow@flw+2
 15082  2324  0829               	movf	?___lldiv+1,w
 15083  2325  00BE               	movwf	ui_disp_flow@flw+1
 15084  2326  0828               	movf	?___lldiv,w
 15085  2327  00BD               	movwf	ui_disp_flow@flw
 15086  2328                     l13273:	
 15087                           
 15088                           ;ui.c: 157: }
 15089                           ;ui.c: 158: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), flw, 8);
 15090  2328  0840               	movf	ui_disp_flow@flw+3,w
 15091  2329  00B4               	movwf	ui_uint32_2_str@x+3
 15092  232A  083F               	movf	ui_disp_flow@flw+2,w
 15093  232B  00B3               	movwf	ui_uint32_2_str@x+2
 15094  232C  083E               	movf	ui_disp_flow@flw+1,w
 15095  232D  00B2               	movwf	ui_uint32_2_str@x+1
 15096  232E  083D               	movf	ui_disp_flow@flw,w
 15097  232F  00B1               	movwf	ui_uint32_2_str@x
 15098  2330  3008               	movlw	8
 15099  2331  00BA               	movwf	??_ui_disp_flow
 15100  2332  083A               	movf	??_ui_disp_flow,w
 15101  2333  00B5               	movwf	ui_uint32_2_str@len
 15102  2334  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 15103  2335  31A7  2747  31A2   	fcall	_ui_uint32_2_str
 15104                           
 15105                           ;ui.c: 159: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 15106  2338  0020               	movlb	0	; select bank0
 15107  2339  083C               	movf	ui_disp_flow@decnum,w
 15108  233A  3E01               	addlw	1
 15109  233B  3AFF               	xorlw	255
 15110  233C  3E01               	addlw	1
 15111  233D  3E08               	addlw	8
 15112  233E  00BA               	movwf	??_ui_disp_flow
 15113  233F  083A               	movf	??_ui_disp_flow,w
 15114  2340  00F3               	movwf	ui_head_hide@loc
 15115  2341  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 15116  2342  31B0  2091  31A2   	fcall	_ui_head_hide
 15117                           
 15118                           ;ui.c: 160: lcd_clear_buffer();
 15119  2345  31BB  2358  31A2   	fcall	_lcd_clear_buffer
 15120                           
 15121                           ;ui.c: 161: lcd_disp_dp(decnum, 1);
 15122  2348  0020               	movlb	0	; select bank0
 15123  2349  01B2               	clrf	lcd_disp_dp@show
 15124  234A  0AB2               	incf	lcd_disp_dp@show,f
 15125  234B  083C               	movf	ui_disp_flow@decnum,w
 15126  234C  31AC  24DC  31A2   	fcall	_lcd_disp_dp
 15127                           
 15128                           ;ui.c: 162: lcd_disp_str(lcdBuf);
 15129  234F  3058               	movlw	low _lcdBuf
 15130  2350  0020               	movlb	0	; select bank0
 15131  2351  00A2               	movwf	lcd_disp_str@str
 15132  2352  3001               	movlw	high _lcdBuf
 15133  2353  00A3               	movwf	lcd_disp_str@str+1
 15134  2354  31A8  20E8         	fcall	_lcd_disp_str
 15135  2356  0008               	return
 15136  2357                     __end_of_ui_disp_flow:	
 15137                           
 15138                           	psect	text27
 15139  3C6C                     __ptext27:	
 15140 ;; *************** function _ui_disp_clear_totale *****************
 15141 ;; Defined at:
 15142 ;;		line 314 in file "src/api/ui.c"
 15143 ;; Parameters:    Size  Location     Type
 15144 ;;		None
 15145 ;; Auto vars:     Size  Location     Type
 15146 ;;		None
 15147 ;; Return value:  Size  Location     Type
 15148 ;;                  1    wreg      void 
 15149 ;; Registers used:
 15150 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15151 ;; Tracked objects:
 15152 ;;		On entry : 0/0
 15153 ;;		On exit  : 0/0
 15154 ;;		Unchanged: 0/0
 15155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15159 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15160 ;;Total ram usage:        0 bytes
 15161 ;; Hardware stack levels used:    1
 15162 ;; Hardware stack levels required when called:    7
 15163 ;; This function calls:
 15164 ;;		_ui_disp_totale_v
 15165 ;; This function is called by:
 15166 ;;		_ui_disp_menu
 15167 ;; This function uses a non-reentrant model
 15168 ;;
 15169                           
 15170                           
 15171                           ;psect for function _ui_disp_clear_totale
 15172  3C6C                     _ui_disp_clear_totale:	
 15173                           
 15174                           ;ui.c: 315: ui_disp_totale_v();
 15175                           
 15176                           ;incstack = 0
 15177                           ; Regs used in _ui_disp_clear_totale: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15178  3C6C  31AE  2620  31BC   	fcall	_ui_disp_totale_v
 15179                           
 15180                           ;ui.c: 316: do { LATAbits.LATA3 = ~LATAbits.LATA3; } while(0);;
 15181  3C6F  1003               	clrc
 15182  3C70  0022               	movlb	2	; select bank2
 15183  3C71  1D8C               	btfss	12,3	;volatile
 15184  3C72  1403               	setc
 15185  3C73  1C03               	btfss	3,0
 15186  3C74  2C78               	goto	u11980
 15187  3C75  0022               	movlb	2	; select bank2
 15188  3C76  158C               	bsf	12,3	;volatile
 15189  3C77  2C7A               	goto	l13309
 15190  3C78                     u11980:	
 15191  3C78  0022               	movlb	2	; select bank2
 15192  3C79  118C               	bcf	12,3	;volatile
 15193  3C7A                     l13309:	
 15194                           ;ui.c: 317: do { LATFbits.LATF0 = 0; } while(0);;
 15195                           
 15196  3C7A  0027               	movlb	7	; select bank7
 15197  3C7B  100C               	bcf	12,0	;volatile
 15198                           
 15199                           ;ui.c: 318: do { LATFbits.LATF1 = 0; } while(0);;
 15200  3C7C  108C               	bcf	12,1	;volatile
 15201  3C7D  0008               	return
 15202  3C7E                     __end_of_ui_disp_clear_totale:	
 15203                           
 15204                           	psect	text28
 15205  2E20                     __ptext28:	
 15206 ;; *************** function _ui_disp_totale_v *****************
 15207 ;; Defined at:
 15208 ;;		line 165 in file "src/api/ui.c"
 15209 ;; Parameters:    Size  Location     Type
 15210 ;;		None
 15211 ;; Auto vars:     Size  Location     Type
 15212 ;;  decnum          1   28[BANK0 ] unsigned char 
 15213 ;; Return value:  Size  Location     Type
 15214 ;;                  1    wreg      void 
 15215 ;; Registers used:
 15216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15217 ;; Tracked objects:
 15218 ;;		On entry : 0/0
 15219 ;;		On exit  : 0/0
 15220 ;;		Unchanged: 0/0
 15221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 15224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15226 ;;Total ram usage:        3 bytes
 15227 ;; Hardware stack levels used:    1
 15228 ;; Hardware stack levels required when called:    6
 15229 ;; This function calls:
 15230 ;;		_lcd_clear_buffer
 15231 ;;		_lcd_disp_dp
 15232 ;;		_lcd_disp_str
 15233 ;;		_m_mem_set
 15234 ;;		_ui_disp_flow_error
 15235 ;;		_ui_head_hide
 15236 ;;		_ui_uint32_2_str
 15237 ;; This function is called by:
 15238 ;;		_ui_disp_clear_totale
 15239 ;;		_ui_disp_menu
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           
 15244                           ;psect for function _ui_disp_totale_v
 15245  2E20                     _ui_disp_totale_v:	
 15246                           
 15247                           ;ui.c: 166: uint8_t decnum ;
 15248                           ;ui.c: 167: if(flowError){
 15249                           
 15250                           ;incstack = 0
 15251                           ; Regs used in _ui_disp_totale_v: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15252  2E20  0021               	movlb	1	; select bank1
 15253  2E21  0846               	movf	_flowError^(0+128),w
 15254  2E22  1903               	btfsc	3,2
 15255  2E23  2E27               	goto	l12977
 15256                           
 15257                           ;ui.c: 168: ui_disp_flow_error();
 15258  2E24  31BB  2341         	fcall	_ui_disp_flow_error
 15259                           
 15260                           ;ui.c: 169: return;
 15261  2E26  0008               	return
 15262  2E27                     l12977:	
 15263                           
 15264                           ;ui.c: 170: }
 15265                           ;ui.c: 171: decnum = mainSystemData.volumeResolution;
 15266  2E27  0024               	movlb	4	; select bank4
 15267  2E28  085B               	movf	(_mainSystemData^(0+512)+59),w
 15268  2E29  0020               	movlb	0	; select bank0
 15269  2E2A  00BA               	movwf	??_ui_disp_totale_v
 15270  2E2B  083A               	movf	??_ui_disp_totale_v,w
 15271  2E2C  00BC               	movwf	ui_disp_totale_v@decnum
 15272                           
 15273                           ;ui.c: 172: __t32=mainSystemData.totalConsumeVolume;
 15274  2E2D  3030               	movlw	48
 15275  2E2E  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 15276  2E2F  0086               	movwf	6
 15277  2E30  3002               	movlw	2	; select bank4/5
 15278  2E31  0087               	movwf	7
 15279  2E32  3F40               	moviw [0]fsr1
 15280  2E33  0021               	movlb	1	; select bank1
 15281  2E34  00B4               	movwf	___t32^(0+128)
 15282  2E35  3F41               	moviw [1]fsr1
 15283  2E36  00B5               	movwf	(___t32+1)^(0+128)
 15284  2E37  3F42               	moviw [2]fsr1
 15285  2E38  00B6               	movwf	(___t32+2)^(0+128)
 15286  2E39  3F43               	moviw [3]fsr1
 15287  2E3A  00B7               	movwf	(___t32+3)^(0+128)
 15288                           
 15289                           ;ui.c: 173: if (decnum > 3)decnum = 3;
 15290  2E3B  3004               	movlw	4
 15291  2E3C  0020               	movlb	0	; select bank0
 15292  2E3D  023C               	subwf	ui_disp_totale_v@decnum,w
 15293  2E3E  1C03               	skipc
 15294  2E3F  2E44               	goto	l411
 15295  2E40  3003               	movlw	3
 15296  2E41  00BA               	movwf	??_ui_disp_totale_v
 15297  2E42  083A               	movf	??_ui_disp_totale_v,w
 15298  2E43  00BC               	movwf	ui_disp_totale_v@decnum
 15299  2E44                     l411:	
 15300                           
 15301                           ;ui.c: 174: __t32 += rtVolume_m3;
 15302  2E44  0021               	movlb	1	; select bank1
 15303  2E45  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 15304  2E46  07B4               	addwf	___t32^(0+128),f
 15305  2E47  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 15306  2E48  3DB5               	addwfc	(___t32+1)^(0+128),f
 15307  2E49  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 15308  2E4A  3DB6               	addwfc	(___t32+2)^(0+128),f
 15309  2E4B  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 15310  2E4C  3DB7               	addwfc	(___t32+3)^(0+128),f
 15311                           
 15312                           ;ui.c: 175: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 15313  2E4D  3058               	movlw	low _lcdBuf
 15314  2E4E  00F3               	movwf	m_mem_set@buf
 15315  2E4F  3001               	movlw	high _lcdBuf
 15316  2E50  00F4               	movwf	m_mem_set@buf+1
 15317  2E51  3030               	movlw	48
 15318  2E52  0020               	movlb	0	; select bank0
 15319  2E53  00BA               	movwf	??_ui_disp_totale_v
 15320  2E54  083A               	movf	??_ui_disp_totale_v,w
 15321  2E55  00F5               	movwf	m_mem_set@x
 15322  2E56  3009               	movlw	9
 15323  2E57  00BB               	movwf	??_ui_disp_totale_v+1
 15324  2E58  083B               	movf	??_ui_disp_totale_v+1,w
 15325  2E59  00F6               	movwf	m_mem_set@len
 15326  2E5A  31BB  23E2  31AE   	fcall	_m_mem_set
 15327                           
 15328                           ;ui.c: 176: lcdBuf[8] = '\0';
 15329  2E5D  0022               	movlb	2	; select bank2
 15330  2E5E  01E0               	clrf	(_lcdBuf^(0+256)+8)
 15331                           
 15332                           ;ui.c: 177: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __t32, 8);
 15333  2E5F  0021               	movlb	1	; select bank1
 15334  2E60  0837               	movf	(___t32+3)^(0+128),w
 15335  2E61  0020               	movlb	0	; select bank0
 15336  2E62  00B4               	movwf	ui_uint32_2_str@x+3
 15337  2E63  0021               	movlb	1	; select bank1
 15338  2E64  0836               	movf	(___t32+2)^(0+128),w
 15339  2E65  0020               	movlb	0	; select bank0
 15340  2E66  00B3               	movwf	ui_uint32_2_str@x+2
 15341  2E67  0021               	movlb	1	; select bank1
 15342  2E68  0835               	movf	(___t32+1)^(0+128),w
 15343  2E69  0020               	movlb	0	; select bank0
 15344  2E6A  00B2               	movwf	ui_uint32_2_str@x+1
 15345  2E6B  0021               	movlb	1	; select bank1
 15346  2E6C  0834               	movf	___t32^(0+128),w
 15347  2E6D  0020               	movlb	0	; select bank0
 15348  2E6E  00B1               	movwf	ui_uint32_2_str@x
 15349  2E6F  3008               	movlw	8
 15350  2E70  00BA               	movwf	??_ui_disp_totale_v
 15351  2E71  083A               	movf	??_ui_disp_totale_v,w
 15352  2E72  00B5               	movwf	ui_uint32_2_str@len
 15353  2E73  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 15354  2E74  31A7  2747  31AE   	fcall	_ui_uint32_2_str
 15355                           
 15356                           ;ui.c: 178: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 15357  2E77  0020               	movlb	0	; select bank0
 15358  2E78  083C               	movf	ui_disp_totale_v@decnum,w
 15359  2E79  3E01               	addlw	1
 15360  2E7A  3AFF               	xorlw	255
 15361  2E7B  3E01               	addlw	1
 15362  2E7C  3E08               	addlw	8
 15363  2E7D  00BA               	movwf	??_ui_disp_totale_v
 15364  2E7E  083A               	movf	??_ui_disp_totale_v,w
 15365  2E7F  00F3               	movwf	ui_head_hide@loc
 15366  2E80  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 15367  2E81  31B0  2091  31AE   	fcall	_ui_head_hide
 15368                           
 15369                           ;ui.c: 179: lcd_clear_buffer();
 15370  2E84  31BB  2358  31AE   	fcall	_lcd_clear_buffer
 15371                           
 15372                           ;ui.c: 180: lcd_disp_dp(decnum, 1);
 15373  2E87  0020               	movlb	0	; select bank0
 15374  2E88  01B2               	clrf	lcd_disp_dp@show
 15375  2E89  0AB2               	incf	lcd_disp_dp@show,f
 15376  2E8A  083C               	movf	ui_disp_totale_v@decnum,w
 15377  2E8B  31AC  24DC  31AE   	fcall	_lcd_disp_dp
 15378                           
 15379                           ;ui.c: 181: lcd_disp_str(lcdBuf);
 15380  2E8E  3058               	movlw	low _lcdBuf
 15381  2E8F  0020               	movlb	0	; select bank0
 15382  2E90  00A2               	movwf	lcd_disp_str@str
 15383  2E91  3001               	movlw	high _lcdBuf
 15384  2E92  00A3               	movwf	lcd_disp_str@str+1
 15385  2E93  31A8  20E8         	fcall	_lcd_disp_str
 15386  2E95  0008               	return
 15387  2E96                     __end_of_ui_disp_totale_v:	
 15388                           
 15389                           	psect	text29
 15390  3C91                     __ptext29:	
 15391 ;; *************** function _ui_disp_clear_balance *****************
 15392 ;; Defined at:
 15393 ;;		line 341 in file "src/api/ui.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;		None
 15396 ;; Auto vars:     Size  Location     Type
 15397 ;;		None
 15398 ;; Return value:  Size  Location     Type
 15399 ;;                  1    wreg      void 
 15400 ;; Registers used:
 15401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15402 ;; Tracked objects:
 15403 ;;		On entry : 0/0
 15404 ;;		On exit  : 0/0
 15405 ;;		Unchanged: 0/0
 15406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15409 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15410 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15411 ;;Total ram usage:        0 bytes
 15412 ;; Hardware stack levels used:    1
 15413 ;; Hardware stack levels required when called:    7
 15414 ;; This function calls:
 15415 ;;		_ui_disp_balance_and_volume
 15416 ;; This function is called by:
 15417 ;;		_ui_disp_menu
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421                           
 15422                           ;psect for function _ui_disp_clear_balance
 15423  3C91                     _ui_disp_clear_balance:	
 15424                           
 15425                           ;ui.c: 343: ui_disp_balance_and_volume();
 15426                           
 15427                           ;incstack = 0
 15428                           ; Regs used in _ui_disp_clear_balance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15429  3C91  3194  247D  31BC   	fcall	_ui_disp_balance_and_volume
 15430                           
 15431                           ;ui.c: 344: do { LATFbits.LATF0 = ~LATFbits.LATF0; } while(0);;
 15432  3C94  1003               	clrc
 15433  3C95  0027               	movlb	7	; select bank7
 15434  3C96  1C0C               	btfss	12,0	;volatile
 15435  3C97  1403               	setc
 15436  3C98  1C03               	btfss	3,0
 15437  3C99  2C9D               	goto	u12000
 15438  3C9A  0027               	movlb	7	; select bank7
 15439  3C9B  140C               	bsf	12,0	;volatile
 15440  3C9C  2C9F               	goto	l13317
 15441  3C9D                     u12000:	
 15442  3C9D  0027               	movlb	7	; select bank7
 15443  3C9E  100C               	bcf	12,0	;volatile
 15444  3C9F                     l13317:	
 15445                           ;ui.c: 345: do { LATAbits.LATA3 = 0; } while(0);;
 15446                           
 15447  3C9F  0022               	movlb	2	; select bank2
 15448  3CA0  118C               	bcf	12,3	;volatile
 15449                           
 15450                           ;ui.c: 346: do { LATFbits.LATF1 = 0; } while(0);;
 15451  3CA1  0027               	movlb	7	; select bank7
 15452  3CA2  108C               	bcf	12,1	;volatile
 15453  3CA3  0008               	return
 15454  3CA4                     __end_of_ui_disp_clear_balance:	
 15455                           
 15456                           	psect	text30
 15457  0822                     __ptext30:	
 15458 ;; *************** function _ui_key_process_enter *****************
 15459 ;; Defined at:
 15460 ;;		line 198 in file "src/api/ui_key.c"
 15461 ;; Parameters:    Size  Location     Type
 15462 ;;		None
 15463 ;; Auto vars:     Size  Location     Type
 15464 ;;		None
 15465 ;; Return value:  Size  Location     Type
 15466 ;;                  1    wreg      void 
 15467 ;; Registers used:
 15468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15469 ;; Tracked objects:
 15470 ;;		On entry : 0/0
 15471 ;;		On exit  : 0/0
 15472 ;;		Unchanged: 0/0
 15473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15476 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 15477 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 15478 ;;Total ram usage:        6 bytes
 15479 ;; Hardware stack levels used:    1
 15480 ;; Hardware stack levels required when called:    5
 15481 ;; This function calls:
 15482 ;;		___aldiv
 15483 ;;		___awdiv
 15484 ;;		_m_mem_cpy_len
 15485 ;;		_ui_key_waite_up
 15486 ;; This function is called by:
 15487 ;;		_ui_key_process
 15488 ;; This function uses a non-reentrant model
 15489 ;;
 15490                           
 15491                           
 15492                           ;psect for function _ui_key_process_enter
 15493  0822                     _ui_key_process_enter:	
 15494                           
 15495                           ;ui_key.c: 199: if(menu!=0x10)return;
 15496                           
 15497                           ;incstack = 0
 15498                           ; Regs used in _ui_key_process_enter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15499  0822  3010               	movlw	16
 15500  0823  0021               	movlb	1	; select bank1
 15501  0824  0643               	xorwf	_menu^(0+128),w
 15502  0825  1D03               	btfss	3,2
 15503  0826  0008               	return
 15504  0827  2920               	goto	l14773
 15505  0828                     l14721:	
 15506                           ;ui_key.c: 201: case 107:
 15507                           
 15508                           ;ui_key.c: 200: switch(password){
 15509                           
 15510                           
 15511                           ;ui_key.c: 202: ui_key_waite_up();
 15512  0828  31B4  242B         	fcall	_ui_key_waite_up
 15513                           
 15514                           ;ui_key.c: 203: menu=0x20;
 15515  082A  3020               	movlw	32
 15516  082B  0020               	movlb	0	; select bank0
 15517  082C  00AE               	movwf	??_ui_key_process_enter
 15518  082D  082E               	movf	??_ui_key_process_enter,w
 15519  082E  0021               	movlb	1	; select bank1
 15520  082F  00C3               	movwf	_menu^(0+128)
 15521                           
 15522                           ;ui_key.c: 204: break;
 15523  0830  0008               	return
 15524  0831                     l14725:	
 15525                           ;ui_key.c: 205: case 103:
 15526                           
 15527                           
 15528                           ;ui_key.c: 206: ui_key_waite_up();
 15529  0831  31B4  242B         	fcall	_ui_key_waite_up
 15530                           
 15531                           ;ui_key.c: 207: menu=0x30;
 15532  0833  3030               	movlw	48
 15533  0834  0020               	movlb	0	; select bank0
 15534  0835  00AE               	movwf	??_ui_key_process_enter
 15535  0836  082E               	movf	??_ui_key_process_enter,w
 15536  0837  0021               	movlb	1	; select bank1
 15537  0838  00C3               	movwf	_menu^(0+128)
 15538                           
 15539                           ;ui_key.c: 208: break;
 15540  0839  0008               	return
 15541  083A                     l14729:	
 15542                           ;ui_key.c: 209: case 109:
 15543                           
 15544                           
 15545                           ;ui_key.c: 210: m_mem_cpy_len(uiAdjbuf,(uint8_t*)(&mainSystemData.flowRatio),2);
 15546  083A  3061               	movlw	low _uiAdjbuf
 15547  083B  00F3               	movwf	m_mem_cpy_len@d
 15548  083C  3001               	movlw	high _uiAdjbuf
 15549  083D  00F4               	movwf	m_mem_cpy_len@d+1
 15550  083E  303A               	movlw	low (_mainSystemData+26)
 15551  083F  00F5               	movwf	m_mem_cpy_len@s
 15552  0840  3002               	movlw	high (_mainSystemData+26)
 15553  0841  00F6               	movwf	m_mem_cpy_len@s+1
 15554  0842  3002               	movlw	2
 15555  0843  0020               	movlb	0	; select bank0
 15556  0844  00AE               	movwf	??_ui_key_process_enter
 15557  0845  082E               	movf	??_ui_key_process_enter,w
 15558  0846  00F7               	movwf	m_mem_cpy_len@len
 15559  0847  31BD  259E         	fcall	_m_mem_cpy_len
 15560                           
 15561                           ;ui_key.c: 211: menu=0x40;
 15562  0849  3040               	movlw	64
 15563  084A  0020               	movlb	0	; select bank0
 15564  084B  00AE               	movwf	??_ui_key_process_enter
 15565  084C  082E               	movf	??_ui_key_process_enter,w
 15566  084D  0021               	movlb	1	; select bank1
 15567  084E  00C3               	movwf	_menu^(0+128)
 15568                           
 15569                           ;ui_key.c: 212: break;
 15570  084F  0008               	return
 15571  0850                     l14733:	
 15572                           ;ui_key.c: 213: case 168:
 15573                           
 15574                           
 15575                           ;ui_key.c: 214: calibLocation=0;
 15576  0850  0021               	movlb	1	; select bank1
 15577  0851  01C5               	clrf	_calibLocation^(0+128)
 15578                           
 15579                           ;ui_key.c: 215: *((uint16_t*)uiAdjbuf) = Main_flowCalibrationTable.flowCalibrationArr[ca
      +                          libLocation].rtflowValue;
 15580  0852  0845               	movf	_calibLocation^(0+128),w
 15581  0853  0020               	movlb	0	; select bank0
 15582  0854  00AE               	movwf	??_ui_key_process_enter
 15583  0855  01AF               	clrf	??_ui_key_process_enter+1
 15584  0856  35AE               	lslf	??_ui_key_process_enter,f
 15585  0857  0DAF               	rlf	??_ui_key_process_enter+1,f
 15586  0858  35AE               	lslf	??_ui_key_process_enter,f
 15587  0859  0DAF               	rlf	??_ui_key_process_enter+1,f
 15588  085A  082E               	movf	??_ui_key_process_enter,w
 15589  085B  3E02               	addlw	2
 15590  085C  00B0               	movwf	??_ui_key_process_enter+2
 15591  085D  3000               	movlw	0
 15592  085E  3D2F               	addwfc	??_ui_key_process_enter+1,w
 15593  085F  00B1               	movwf	??_ui_key_process_enter+3
 15594  0860  3074               	movlw	116
 15595  0861  00B2               	movwf	??_ui_key_process_enter+4
 15596  0862  3023               	movlw	35
 15597  0863  00B3               	movwf	??_ui_key_process_enter+5
 15598  0864  0830               	movf	??_ui_key_process_enter+2,w
 15599  0865  0732               	addwf	??_ui_key_process_enter+4,w
 15600  0866  0086               	movwf	6
 15601  0867  0831               	movf	??_ui_key_process_enter+3,w
 15602  0868  3D33               	addwfc	??_ui_key_process_enter+5,w
 15603  0869  0087               	movwf	7
 15604  086A  3061               	movlw	low (_uiAdjbuf| (0+256))
 15605  086B  0084               	movwf	4
 15606  086C  3001               	movlw	1	; select bank2/3
 15607  086D  0085               	movwf	5
 15608  086E  3F40               	moviw [0]fsr1
 15609  086F  3F80               	movwi [0]fsr0
 15610  0870  3F41               	moviw [1]fsr1
 15611  0871  3F81               	movwi [1]fsr0
 15612                           
 15613                           ;ui_key.c: 216: menu=0x50;break;
 15614  0872  3050               	movlw	80
 15615  0873  00AE               	movwf	??_ui_key_process_enter
 15616  0874  082E               	movf	??_ui_key_process_enter,w
 15617  0875  0021               	movlb	1	; select bank1
 15618  0876  00C3               	movwf	_menu^(0+128)
 15619  0877  0008               	return
 15620  0878                     l14739:	
 15621                           ;ui_key.c: 217: case 6:
 15622                           
 15623                           
 15624                           ;ui_key.c: 218: *(int16_t*)uiAdjbuf=(uint16_t)(mainSystemData.deviceID);
 15625  0878  3061               	movlw	low (_uiAdjbuf| (0+256))
 15626  0879  0086               	movwf	6
 15627  087A  3001               	movlw	1	; select bank2/3
 15628  087B  0087               	movwf	7
 15629  087C  0024               	movlb	4	; select bank4
 15630  087D  0820               	movf	_mainSystemData^(0+512),w
 15631  087E  3FC0               	movwi [0]fsr1
 15632  087F  0821               	movf	(_mainSystemData+1)^(0+512),w
 15633  0880  3FC1               	movwi [1]fsr1
 15634                           
 15635                           ;ui_key.c: 219: menu=0x60;
 15636  0881  3060               	movlw	96
 15637  0882  0020               	movlb	0	; select bank0
 15638  0883  00AE               	movwf	??_ui_key_process_enter
 15639  0884  082E               	movf	??_ui_key_process_enter,w
 15640  0885  0021               	movlb	1	; select bank1
 15641  0886  00C3               	movwf	_menu^(0+128)
 15642                           
 15643                           ;ui_key.c: 220: break;
 15644  0887  0008               	return
 15645  0888                     l14743:	
 15646                           ;ui_key.c: 221: case 133:
 15647                           
 15648                           
 15649                           ;ui_key.c: 222: uiAdjbuf[0]=mainSystemData.smallFlowNotCare;
 15650  0888  0024               	movlb	4	; select bank4
 15651  0889  0859               	movf	(_mainSystemData^(0+512)+57),w
 15652  088A  0020               	movlb	0	; select bank0
 15653  088B  00AE               	movwf	??_ui_key_process_enter
 15654  088C  082E               	movf	??_ui_key_process_enter,w
 15655  088D  0022               	movlb	2	; select bank2
 15656  088E  00E1               	movwf	_uiAdjbuf^(0+256)
 15657                           
 15658                           ;ui_key.c: 223: menu=0x70;
 15659  088F  3070               	movlw	112
 15660  0890  0020               	movlb	0	; select bank0
 15661  0891  00AE               	movwf	??_ui_key_process_enter
 15662  0892  082E               	movf	??_ui_key_process_enter,w
 15663  0893  0021               	movlb	1	; select bank1
 15664  0894  00C3               	movwf	_menu^(0+128)
 15665                           
 15666                           ;ui_key.c: 224: break;
 15667  0895  0008               	return
 15668  0896                     l14745:	
 15669                           ;ui_key.c: 225: case 9:
 15670                           
 15671                           
 15672                           ;ui_key.c: 226: *(uint16_t*)uiAdjbuf=mainSystemData.price;
 15673  0896  3061               	movlw	low (_uiAdjbuf| (0+256))
 15674  0897  0086               	movwf	6
 15675  0898  3001               	movlw	1	; select bank2/3
 15676  0899  0087               	movwf	7
 15677  089A  0024               	movlb	4	; select bank4
 15678  089B  0832               	movf	(_mainSystemData^(0+512)+18),w
 15679  089C  3FC0               	movwi [0]fsr1
 15680  089D  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 15681  089E  3FC1               	movwi [1]fsr1
 15682                           
 15683                           ;ui_key.c: 227: menu=0x80;
 15684  089F  3080               	movlw	128
 15685  08A0  0020               	movlb	0	; select bank0
 15686  08A1  00AE               	movwf	??_ui_key_process_enter
 15687  08A2  082E               	movf	??_ui_key_process_enter,w
 15688  08A3  0021               	movlb	1	; select bank1
 15689  08A4  00C3               	movwf	_menu^(0+128)
 15690                           
 15691                           ;ui_key.c: 228: break;
 15692  08A5  0008               	return
 15693  08A6                     l14749:	
 15694                           ;ui_key.c: 229: case 8:
 15695                           
 15696                           
 15697                           ;ui_key.c: 231: *(int16_t*)uiAdjbuf=(mainSystemData.transferMoneyLimit/100);
 15698  08A6  3000               	movlw	0
 15699  08A7  0020               	movlb	0	; select bank0
 15700  08A8  00A3               	movwf	___aldiv@divisor+3
 15701  08A9  3000               	movlw	0
 15702  08AA  00A2               	movwf	___aldiv@divisor+2
 15703  08AB  3000               	movlw	0
 15704  08AC  00A1               	movwf	___aldiv@divisor+1
 15705  08AD  3064               	movlw	100
 15706  08AE  00A0               	movwf	___aldiv@divisor
 15707  08AF  3024               	movlw	36
 15708  08B0  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 15709  08B1  0086               	movwf	6
 15710  08B2  3002               	movlw	2	; select bank4/5
 15711  08B3  0087               	movwf	7
 15712  08B4  3F40               	moviw [0]fsr1
 15713  08B5  00A4               	movwf	___aldiv@dividend
 15714  08B6  3F41               	moviw [1]fsr1
 15715  08B7  00A5               	movwf	___aldiv@dividend+1
 15716  08B8  3F42               	moviw [2]fsr1
 15717  08B9  00A6               	movwf	___aldiv@dividend+2
 15718  08BA  3F43               	moviw [3]fsr1
 15719  08BB  00A7               	movwf	___aldiv@dividend+3
 15720  08BC  31A0  2013         	fcall	___aldiv
 15721  08BE  3061               	movlw	low (_uiAdjbuf| (0+256))
 15722  08BF  0086               	movwf	6
 15723  08C0  3001               	movlw	1	; select bank2/3
 15724  08C1  0087               	movwf	7
 15725  08C2  0020               	movlb	0	; select bank0
 15726  08C3  0820               	movf	?___aldiv,w
 15727  08C4  3FC0               	movwi [0]fsr1
 15728  08C5  0821               	movf	?___aldiv+1,w
 15729  08C6  3FC1               	movwi [1]fsr1
 15730                           
 15731                           ;ui_key.c: 232: menu=0x90;
 15732  08C7  3090               	movlw	144
 15733  08C8  00AE               	movwf	??_ui_key_process_enter
 15734  08C9  082E               	movf	??_ui_key_process_enter,w
 15735  08CA  0021               	movlb	1	; select bank1
 15736  08CB  00C3               	movwf	_menu^(0+128)
 15737                           
 15738                           ;ui_key.c: 233: break;
 15739  08CC  0008               	return
 15740  08CD                     l14753:	
 15741                           ;ui_key.c: 234: case 178:
 15742                           
 15743                           
 15744                           ;ui_key.c: 235: uiAdjbuf[0]=mainSystemData.shortID;
 15745  08CD  0024               	movlb	4	; select bank4
 15746  08CE  0829               	movf	(_mainSystemData^(0+512)+9),w
 15747  08CF  0020               	movlb	0	; select bank0
 15748  08D0  00AE               	movwf	??_ui_key_process_enter
 15749  08D1  082E               	movf	??_ui_key_process_enter,w
 15750  08D2  0022               	movlb	2	; select bank2
 15751  08D3  00E1               	movwf	_uiAdjbuf^(0+256)
 15752                           
 15753                           ;ui_key.c: 236: menu=0xa0;
 15754  08D4  30A0               	movlw	160
 15755  08D5  0020               	movlb	0	; select bank0
 15756  08D6  00AE               	movwf	??_ui_key_process_enter
 15757  08D7  082E               	movf	??_ui_key_process_enter,w
 15758  08D8  0021               	movlb	1	; select bank1
 15759  08D9  00C3               	movwf	_menu^(0+128)
 15760                           
 15761                           ;ui_key.c: 237: break;
 15762  08DA  0008               	return
 15763  08DB                     l14755:	
 15764                           ;ui_key.c: 238: case 7:
 15765                           
 15766                           
 15767                           ;ui_key.c: 239: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 15768  08DB  3064               	movlw	100
 15769  08DC  00F3               	movwf	___awdiv@divisor
 15770  08DD  3000               	movlw	0
 15771  08DE  00F4               	movwf	___awdiv@divisor+1
 15772  08DF  0024               	movlb	4	; select bank4
 15773  08E0  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 15774  08E1  00F6               	movwf	___awdiv@dividend+1
 15775  08E2  0834               	movf	(_mainSystemData^(0+512)+20),w
 15776  08E3  00F5               	movwf	___awdiv@dividend
 15777  08E4  31AA  2216         	fcall	___awdiv
 15778  08E6  3061               	movlw	low (_uiAdjbuf| (0+256))
 15779  08E7  0086               	movwf	6
 15780  08E8  3001               	movlw	1	; select bank2/3
 15781  08E9  0087               	movwf	7
 15782  08EA  0873               	movf	?___awdiv,w
 15783  08EB  3FC0               	movwi [0]fsr1
 15784  08EC  0874               	movf	?___awdiv+1,w
 15785  08ED  3FC1               	movwi [1]fsr1
 15786                           
 15787                           ;ui_key.c: 240: menu=0xb0;
 15788  08EE  30B0               	movlw	176
 15789  08EF  0020               	movlb	0	; select bank0
 15790  08F0  00AE               	movwf	??_ui_key_process_enter
 15791  08F1  082E               	movf	??_ui_key_process_enter,w
 15792  08F2  0021               	movlb	1	; select bank1
 15793  08F3  00C3               	movwf	_menu^(0+128)
 15794                           
 15795                           ;ui_key.c: 241: break;
 15796  08F4  0008               	return
 15797  08F5                     l14759:	
 15798                           ;ui_key.c: 244: case 100:
 15799                           
 15800                           
 15801                           ;ui_key.c: 245: menu=0xc0;break;
 15802  08F5  30C0               	movlw	192
 15803  08F6  0020               	movlb	0	; select bank0
 15804  08F7  00AE               	movwf	??_ui_key_process_enter
 15805  08F8  082E               	movf	??_ui_key_process_enter,w
 15806  08F9  0021               	movlb	1	; select bank1
 15807  08FA  00C3               	movwf	_menu^(0+128)
 15808  08FB  0008               	return
 15809  08FC                     l14761:	
 15810                           ;ui_key.c: 249: case 60:
 15811                           
 15812                           
 15813                           ;ui_key.c: 250: calibLocation=0;
 15814  08FC  0021               	movlb	1	; select bank1
 15815  08FD  01C5               	clrf	_calibLocation^(0+128)
 15816                           
 15817                           ;ui_key.c: 251: *((int16_t*)(uiAdjbuf))=flow;
 15818  08FE  3061               	movlw	low (_uiAdjbuf| (0+256))
 15819  08FF  0086               	movwf	6
 15820  0900  3001               	movlw	1	; select bank2/3
 15821  0901  0087               	movwf	7
 15822  0902  083C               	movf	_flow^(0+128),w	;volatile
 15823  0903  3FC0               	movwi [0]fsr1
 15824  0904  083D               	movf	(_flow+1)^(0+128),w	;volatile
 15825  0905  3FC1               	movwi [1]fsr1
 15826                           
 15827                           ;ui_key.c: 252: menu=0xe0;break;
 15828  0906  30E0               	movlw	224
 15829  0907  0020               	movlb	0	; select bank0
 15830  0908  00AE               	movwf	??_ui_key_process_enter
 15831  0909  082E               	movf	??_ui_key_process_enter,w
 15832  090A  0021               	movlb	1	; select bank1
 15833  090B  00C3               	movwf	_menu^(0+128)
 15834  090C  0008               	return
 15835  090D                     l14767:	
 15836                           ;ui_key.c: 255: case 136:
 15837                           
 15838                           
 15839                           ;ui_key.c: 256: *((int16_t*)(uiAdjbuf))=(uint16_t)(mainSystemData.imdFlowUnit);
 15840  090D  0024               	movlb	4	; select bank4
 15841  090E  085C               	movf	(_mainSystemData^(0+512)+60),w
 15842  090F  0020               	movlb	0	; select bank0
 15843  0910  00AE               	movwf	??_ui_key_process_enter
 15844  0911  01AF               	clrf	??_ui_key_process_enter+1
 15845  0912  3061               	movlw	low (_uiAdjbuf| (0+256))
 15846  0913  0086               	movwf	6
 15847  0914  3001               	movlw	1	; select bank2/3
 15848  0915  0087               	movwf	7
 15849  0916  082E               	movf	??_ui_key_process_enter,w
 15850  0917  3FC0               	movwi [0]fsr1
 15851  0918  082F               	movf	??_ui_key_process_enter+1,w
 15852  0919  3FC1               	movwi [1]fsr1
 15853                           
 15854                           ;ui_key.c: 257: menu=0xf1;
 15855  091A  30F1               	movlw	241
 15856  091B  00AE               	movwf	??_ui_key_process_enter
 15857  091C  082E               	movf	??_ui_key_process_enter,w
 15858  091D  0021               	movlb	1	; select bank1
 15859  091E  00C3               	movwf	_menu^(0+128)
 15860                           
 15861                           ;ui_key.c: 261: }
 15862                           
 15863                           ;ui_key.c: 260: default:break;
 15864                           
 15865                           ;ui_key.c: 258: break;
 15866  091F  0008               	return
 15867  0920                     l14773:	
 15868                           
 15869                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15870                           ; Switch size 1, requested type "space"
 15871                           ; Number of cases is 1, Range of values is 0 to 0
 15872                           ; switch strategies available:
 15873                           ; Name         Instructions Cycles
 15874                           ; simple_byte            4     3 (average)
 15875                           ; direct_byte            8     6 (fixed)
 15876                           ; jumptable            260     6 (fixed)
 15877                           ;	Chosen strategy is simple_byte
 15878  0920  0022               	movlb	2	; select bank2
 15879  0921  082B               	movf	(_password+1)^(0+256),w
 15880  0922  3A00               	xorlw	0	; case 0
 15881  0923  1903               	skipnz
 15882  0924  2926               	goto	l17353
 15883  0925  294F               	goto	l665
 15884  0926                     l17353:	
 15885                           
 15886                           ; Switch size 1, requested type "space"
 15887                           ; Number of cases is 13, Range of values is 6 to 178
 15888                           ; switch strategies available:
 15889                           ; Name         Instructions Cycles
 15890                           ; simple_byte           40    21 (average)
 15891                           ; jumptable            263     9 (fixed)
 15892                           ;	Chosen strategy is simple_byte
 15893  0926  082A               	movf	_password^(0+256),w
 15894  0927  3A06               	xorlw	6	; case 6
 15895  0928  1903               	skipnz
 15896  0929  2878               	goto	l14739
 15897  092A  3A01               	xorlw	1	; case 7
 15898  092B  1903               	skipnz
 15899  092C  28DB               	goto	l14755
 15900  092D  3A0F               	xorlw	15	; case 8
 15901  092E  1903               	skipnz
 15902  092F  28A6               	goto	l14749
 15903  0930  3A01               	xorlw	1	; case 9
 15904  0931  1903               	skipnz
 15905  0932  2896               	goto	l14745
 15906  0933  3A35               	xorlw	53	; case 60
 15907  0934  1903               	skipnz
 15908  0935  28FC               	goto	l14761
 15909  0936  3A58               	xorlw	88	; case 100
 15910  0937  1903               	skipnz
 15911  0938  28F5               	goto	l14759
 15912  0939  3A03               	xorlw	3	; case 103
 15913  093A  1903               	skipnz
 15914  093B  2831               	goto	l14725
 15915  093C  3A0C               	xorlw	12	; case 107
 15916  093D  1903               	skipnz
 15917  093E  2828               	goto	l14721
 15918  093F  3A06               	xorlw	6	; case 109
 15919  0940  1903               	skipnz
 15920  0941  283A               	goto	l14729
 15921  0942  3AE8               	xorlw	232	; case 133
 15922  0943  1903               	skipnz
 15923  0944  2888               	goto	l14743
 15924  0945  3A0D               	xorlw	13	; case 136
 15925  0946  1903               	skipnz
 15926  0947  290D               	goto	l14767
 15927  0948  3A20               	xorlw	32	; case 168
 15928  0949  1903               	skipnz
 15929  094A  2850               	goto	l14733
 15930  094B  3A1A               	xorlw	26	; case 178
 15931  094C  1903               	skipnz
 15932  094D  28CD               	goto	l14753
 15933  094E  294F               	goto	l665
 15934  094F                     l665:	
 15935  094F  0008               	return
 15936  0950                     __end_of_ui_key_process_enter:	
 15937                           
 15938                           	psect	text31
 15939  342B                     __ptext31:	
 15940 ;; *************** function _ui_key_waite_up *****************
 15941 ;; Defined at:
 15942 ;;		line 15 in file "src/api/ui_key.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;		None
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;  now             2    2[BANK0 ] unsigned int 
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  2    0[BANK0 ] unsigned int 
 15949 ;; Registers used:
 15950 ;;		wreg, status,2, status,0, pclath, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15956 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15959 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 15960 ;;Total ram usage:        4 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    4
 15963 ;; This function calls:
 15964 ;;		_get_globle_ticker
 15965 ;;		_key_scan_call
 15966 ;;		_set_globle_ticker
 15967 ;; This function is called by:
 15968 ;;		_ui_key_process_enter
 15969 ;;		_ui_key_process
 15970 ;; This function uses a non-reentrant model
 15971 ;;
 15972                           
 15973                           
 15974                           ;psect for function _ui_key_waite_up
 15975  342B                     _ui_key_waite_up:	
 15976                           
 15977                           ;ui_key.c: 17: uint16_t now=0;
 15978                           
 15979                           ;incstack = 0
 15980                           ; Regs used in _ui_key_waite_up: [wreg+status,2+status,0+pclath+cstack]
 15981  342B  0020               	movlb	0	; select bank0
 15982  342C  01A2               	clrf	ui_key_waite_up@now
 15983  342D  01A3               	clrf	ui_key_waite_up@now+1
 15984                           
 15985                           ;ui_key.c: 20: key_scan_call();
 15986  342E  31BF  27D9  31B4   	fcall	_key_scan_call
 15987                           
 15988                           ;ui_key.c: 21: if (KeyValue == 0)return 0;
 15989  3431  0021               	movlb	1	; select bank1
 15990  3432  0841               	movf	_KeyValue^(0+128),w
 15991  3433  1D03               	btfss	3,2
 15992  3434  2C39               	goto	l14133
 15993  3435  0020               	movlb	0	; select bank0
 15994  3436  01A0               	clrf	?_ui_key_waite_up
 15995  3437  01A1               	clrf	?_ui_key_waite_up+1
 15996  3438  0008               	return
 15997  3439                     l14133:	
 15998                           
 15999                           ;ui_key.c: 22: set_globle_ticker(0);
 16000  3439  3000               	movlw	0
 16001  343A  00F3               	movwf	set_globle_ticker@tk
 16002  343B  00F4               	movwf	set_globle_ticker@tk+1
 16003  343C  31BB  232C  31B4   	fcall	_set_globle_ticker
 16004  343F                     l598:	
 16005                           ;ui_key.c: 23: do {
 16006                           
 16007                           
 16008                           ;ui_key.c: 24: key_scan_call();
 16009  343F  31BF  27D9  31B4   	fcall	_key_scan_call
 16010                           
 16011                           ;ui_key.c: 25: now = get_globle_ticker();
 16012  3442  31BB  2397  31B4   	fcall	_get_globle_ticker
 16013  3445  0874               	movf	?_get_globle_ticker+1,w
 16014  3446  0020               	movlb	0	; select bank0
 16015  3447  00A3               	movwf	ui_key_waite_up@now+1
 16016  3448  0873               	movf	?_get_globle_ticker,w
 16017  3449  00A2               	movwf	ui_key_waite_up@now
 16018                           
 16019                           ;ui_key.c: 26: if (KeyValue == 0)break;
 16020  344A  0021               	movlb	1	; select bank1
 16021  344B  0841               	movf	_KeyValue^(0+128),w
 16022  344C  1903               	btfsc	3,2
 16023  344D  2C56               	goto	l14145
 16024                           
 16025                           ;ui_key.c: 27: if (now > 2000)break;
 16026  344E  3007               	movlw	7
 16027  344F  0020               	movlb	0	; select bank0
 16028  3450  0223               	subwf	ui_key_waite_up@now+1,w
 16029  3451  30D1               	movlw	209
 16030  3452  1903               	skipnz
 16031  3453  0222               	subwf	ui_key_waite_up@now,w
 16032  3454  1C03               	skipc
 16033  3455  2C3F               	goto	l598
 16034  3456                     l14145:	
 16035                           ;ui_key.c: 28: } while (1);
 16036                           
 16037                           
 16038                           ;ui_key.c: 29: return (uint16_t) (now );
 16039  3456  0020               	movlb	0	; select bank0
 16040  3457  0823               	movf	ui_key_waite_up@now+1,w
 16041  3458  00A1               	movwf	?_ui_key_waite_up+1
 16042  3459  0822               	movf	ui_key_waite_up@now,w
 16043  345A  00A0               	movwf	?_ui_key_waite_up
 16044  345B  0008               	return
 16045  345C                     __end_of_ui_key_waite_up:	
 16046                           
 16047                           	psect	text32
 16048  3B2C                     __ptext32:	
 16049 ;; *************** function _set_globle_ticker *****************
 16050 ;; Defined at:
 16051 ;;		line 18 in file "src/driver/timer.c"
 16052 ;; Parameters:    Size  Location     Type
 16053 ;;  tk              2    3[COMMON] unsigned int 
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;		None
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      void 
 16058 ;; Registers used:
 16059 ;;		wreg
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16065 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16066 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16068 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16069 ;;Total ram usage:        2 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:    2
 16072 ;; This function calls:
 16073 ;;		Nothing
 16074 ;; This function is called by:
 16075 ;;		_ui_key_waite_up
 16076 ;;		_ui_key_waite_up_ex
 16077 ;;		_key_process_up_down_variable_speed_ex
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           
 16082                           ;psect for function _set_globle_ticker
 16083  3B2C                     _set_globle_ticker:	
 16084                           
 16085                           ;incstack = 0
 16086                           ; Regs used in _set_globle_ticker: [wreg]
 16087                           ;timer.c: 20: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 16088  3B2C  130B               	bcf	11,6	;volatile
 16089  3B2D  138B               	bcf	11,7	;volatile
 16090                           
 16091                           ;timer.c: 21: globlTickerms=tk;
 16092  3B2E  0874               	movf	set_globle_ticker@tk+1,w
 16093  3B2F  0022               	movlb	2	; select bank2
 16094  3B30  00AF               	movwf	(_globlTickerms+1)^(0+256)
 16095  3B31  0873               	movf	set_globle_ticker@tk,w
 16096  3B32  00AE               	movwf	_globlTickerms^(0+256)
 16097                           
 16098                           ;timer.c: 22: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 16099  3B33  178B               	bsf	11,7	;volatile
 16100  3B34  170B               	bsf	11,6	;volatile
 16101  3B35  0008               	return
 16102  3B36                     __end_of_set_globle_ticker:	
 16103                           
 16104                           	psect	text33
 16105  3B97                     __ptext33:	
 16106 ;; *************** function _get_globle_ticker *****************
 16107 ;; Defined at:
 16108 ;;		line 24 in file "src/driver/timer.c"
 16109 ;; Parameters:    Size  Location     Type
 16110 ;;		None
 16111 ;; Auto vars:     Size  Location     Type
 16112 ;;  ret             2    5[COMMON] unsigned int 
 16113 ;; Return value:  Size  Location     Type
 16114 ;;                  2    3[COMMON] unsigned int 
 16115 ;; Registers used:
 16116 ;;		wreg
 16117 ;; Tracked objects:
 16118 ;;		On entry : 0/0
 16119 ;;		On exit  : 0/0
 16120 ;;		Unchanged: 0/0
 16121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16122 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16125 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16126 ;;Total ram usage:        4 bytes
 16127 ;; Hardware stack levels used:    1
 16128 ;; Hardware stack levels required when called:    2
 16129 ;; This function calls:
 16130 ;;		Nothing
 16131 ;; This function is called by:
 16132 ;;		_ui_key_waite_up
 16133 ;;		_ui_key_waite_up_ex
 16134 ;;		_key_process_up_down_variable_speed_ex
 16135 ;; This function uses a non-reentrant model
 16136 ;;
 16137                           
 16138                           
 16139                           ;psect for function _get_globle_ticker
 16140  3B97                     _get_globle_ticker:	
 16141                           
 16142                           ;incstack = 0
 16143                           ; Regs used in _get_globle_ticker: [wreg]
 16144                           ;timer.c: 26: uint16_t ret;
 16145                           ;timer.c: 27: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 16146  3B97  130B               	bcf	11,6	;volatile
 16147  3B98  138B               	bcf	11,7	;volatile
 16148                           
 16149                           ;timer.c: 28: ret=globlTickerms;
 16150  3B99  0022               	movlb	2	; select bank2
 16151  3B9A  082F               	movf	(_globlTickerms+1)^(0+256),w
 16152  3B9B  00F6               	movwf	get_globle_ticker@ret+1
 16153  3B9C  082E               	movf	_globlTickerms^(0+256),w
 16154  3B9D  00F5               	movwf	get_globle_ticker@ret
 16155                           
 16156                           ;timer.c: 29: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 16157  3B9E  178B               	bsf	11,7	;volatile
 16158  3B9F  170B               	bsf	11,6	;volatile
 16159                           
 16160                           ;timer.c: 30: return ret;
 16161  3BA0  0876               	movf	get_globle_ticker@ret+1,w
 16162  3BA1  00F4               	movwf	?_get_globle_ticker+1
 16163  3BA2  0875               	movf	get_globle_ticker@ret,w
 16164  3BA3  00F3               	movwf	?_get_globle_ticker
 16165  3BA4  0008               	return
 16166  3BA5                     __end_of_get_globle_ticker:	
 16167                           
 16168                           	psect	text34
 16169  23F1                     __ptext34:	
 16170 ;; *************** function _ui_key_process_down *****************
 16171 ;; Defined at:
 16172 ;;		line 98 in file "src/api/ui_key.c"
 16173 ;; Parameters:    Size  Location     Type
 16174 ;;		None
 16175 ;; Auto vars:     Size  Location     Type
 16176 ;;		None
 16177 ;; Return value:  Size  Location     Type
 16178 ;;                  1    wreg      unsigned char 
 16179 ;; Registers used:
 16180 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16181 ;; Tracked objects:
 16182 ;;		On entry : 0/0
 16183 ;;		On exit  : 0/0
 16184 ;;		Unchanged: 0/0
 16185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16190 ;;Total ram usage:        1 bytes
 16191 ;; Hardware stack levels used:    1
 16192 ;; Hardware stack levels required when called:    5
 16193 ;; This function calls:
 16194 ;;		_data_api_calibration_table_data_save
 16195 ;;		_data_api_rt_data_save
 16196 ;;		_m_mem_set
 16197 ;; This function is called by:
 16198 ;;		_ui_key_process
 16199 ;; This function uses a non-reentrant model
 16200 ;;
 16201                           
 16202                           
 16203                           ;psect for function _ui_key_process_down
 16204  23F1                     _ui_key_process_down:	
 16205                           
 16206                           ;ui_key.c: 99: switch(menu){
 16207                           
 16208                           ;incstack = 0
 16209                           ; Regs used in _ui_key_process_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16210  23F1  2C7F               	goto	l14679
 16211  23F2                     l14631:	
 16212                           ;ui_key.c: 100: case 0xe0:
 16213                           
 16214                           
 16215                           ;ui_key.c: 101: calibLocation=0;
 16216  23F2  0021               	movlb	1	; select bank1
 16217  23F3  01C5               	clrf	_calibLocation^(0+128)
 16218                           
 16219                           ;ui_key.c: 102: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 16220  23F4  0022               	movlb	2	; select bank2
 16221  23F5  01D7               	clrf	(_flashOpStr^(0+256)+20)
 16222  23F6  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 16223                           
 16224                           ;ui_key.c: 103: *((uint16_t*)(flashOpStr.buf))=0;
 16225  23F7  01C7               	clrf	(_flashOpStr^(0+256)+4)
 16226  23F8  01C8               	clrf	((_flashOpStr+1)^(0+256)+4)
 16227                           
 16228                           ;ui_key.c: 104: data_api_calibration_table_data_save(calibLocation,1);
 16229  23F9  0020               	movlb	0	; select bank0
 16230  23FA  01B3               	clrf	data_api_calibration_table_data_save@single
 16231  23FB  0AB3               	incf	data_api_calibration_table_data_save@single,f
 16232  23FC  0021               	movlb	1	; select bank1
 16233  23FD  0845               	movf	_calibLocation^(0+128),w
 16234  23FE  3192  22FB  31A3   	fcall	_data_api_calibration_table_data_save
 16235                           
 16236                           ;ui_key.c: 106: *((uint16_t*)uiAdjbuf)=0;
 16237  2401  3061               	movlw	low (_uiAdjbuf| (0+256))
 16238  2402  0086               	movwf	6
 16239  2403  3001               	movlw	1	; select bank2/3
 16240  2404  0087               	movwf	7
 16241  2405  3000               	movlw	0
 16242  2406  3FC0               	movwi [0]fsr1
 16243  2407  3FC1               	movwi [1]fsr1
 16244                           
 16245                           ;ui_key.c: 107: break;
 16246  2408  2C8E               	goto	l14681
 16247  2409                     l14639:	
 16248                           ;ui_key.c: 108: case 0x20:
 16249                           
 16250                           
 16251                           ;ui_key.c: 109: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->BalanceMoney))
      +                          ;
 16252  2409  302C               	movlw	44
 16253  240A  0022               	movlb	2	; select bank2
 16254  240B  00C3               	movwf	_flashOpStr^(0+256)
 16255  240C  3000               	movlw	0
 16256  240D  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16257                           
 16258                           ;ui_key.c: 111: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16259  240E  3002               	movlw	2
 16260  240F  0020               	movlb	0	; select bank0
 16261  2410  00C6               	movwf	??_ui_key_process_down
 16262  2411  0846               	movf	??_ui_key_process_down,w
 16263  2412  0022               	movlb	2	; select bank2
 16264  2413  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16265                           
 16266                           ;ui_key.c: 112: flashOpStr.len=4;
 16267  2414  3004               	movlw	4
 16268  2415  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16269  2416  3000               	movlw	0
 16270  2417  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16271                           
 16272                           ;ui_key.c: 113: m_mem_set(flashOpStr.buf,0,4);
 16273  2418  3047               	movlw	low (_flashOpStr+4)
 16274  2419  00F3               	movwf	m_mem_set@buf
 16275  241A  3001               	movlw	high (_flashOpStr+4)
 16276  241B  00F4               	movwf	m_mem_set@buf+1
 16277  241C  01F5               	clrf	m_mem_set@x
 16278  241D  3004               	movlw	4
 16279  241E  0020               	movlb	0	; select bank0
 16280  241F  00C6               	movwf	??_ui_key_process_down
 16281  2420  0846               	movf	??_ui_key_process_down,w
 16282  2421  00F6               	movwf	m_mem_set@len
 16283  2422  31BB  23E2  31A3   	fcall	_m_mem_set
 16284                           
 16285                           ;ui_key.c: 114: break;
 16286  2425  2C8E               	goto	l14681
 16287  2426                     l14647:	
 16288                           ;ui_key.c: 116: case 0x30:
 16289                           
 16290                           
 16291                           ;ui_key.c: 117: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->totalConsumeVo
      +                          lume));
 16292  2426  3030               	movlw	48
 16293  2427  0022               	movlb	2	; select bank2
 16294  2428  00C3               	movwf	_flashOpStr^(0+256)
 16295  2429  3000               	movlw	0
 16296  242A  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16297                           
 16298                           ;ui_key.c: 119: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16299  242B  3002               	movlw	2
 16300  242C  0020               	movlb	0	; select bank0
 16301  242D  00C6               	movwf	??_ui_key_process_down
 16302  242E  0846               	movf	??_ui_key_process_down,w
 16303  242F  0022               	movlb	2	; select bank2
 16304  2430  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16305                           
 16306                           ;ui_key.c: 120: flashOpStr.len=4;
 16307  2431  3004               	movlw	4
 16308  2432  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16309  2433  3000               	movlw	0
 16310  2434  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16311                           
 16312                           ;ui_key.c: 121: m_mem_set(flashOpStr.buf,0,4);
 16313  2435  3047               	movlw	low (_flashOpStr+4)
 16314  2436  00F3               	movwf	m_mem_set@buf
 16315  2437  3001               	movlw	high (_flashOpStr+4)
 16316  2438  00F4               	movwf	m_mem_set@buf+1
 16317  2439  01F5               	clrf	m_mem_set@x
 16318  243A  3004               	movlw	4
 16319  243B  0020               	movlb	0	; select bank0
 16320  243C  00C6               	movwf	??_ui_key_process_down
 16321  243D  0846               	movf	??_ui_key_process_down,w
 16322  243E  00F6               	movwf	m_mem_set@len
 16323  243F  31BB  23E2  31A3   	fcall	_m_mem_set
 16324                           
 16325                           ;ui_key.c: 123: break;
 16326  2442  2C8E               	goto	l14681
 16327  2443                     l14655:	
 16328                           ;ui_key.c: 135: case 0xc0:
 16329                           
 16330                           
 16331                           ;ui_key.c: 137: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->transferMoney)
      +                          );
 16332  2443  300C               	movlw	12
 16333  2444  0022               	movlb	2	; select bank2
 16334  2445  00C3               	movwf	_flashOpStr^(0+256)
 16335  2446  3000               	movlw	0
 16336  2447  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16337                           
 16338                           ;ui_key.c: 138: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16339  2448  3002               	movlw	2
 16340  2449  0020               	movlb	0	; select bank0
 16341  244A  00C6               	movwf	??_ui_key_process_down
 16342  244B  0846               	movf	??_ui_key_process_down,w
 16343  244C  0022               	movlb	2	; select bank2
 16344  244D  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16345                           
 16346                           ;ui_key.c: 139: flashOpStr.len=6;
 16347  244E  3006               	movlw	6
 16348  244F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16349  2450  3000               	movlw	0
 16350  2451  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16351                           
 16352                           ;ui_key.c: 140: m_mem_set(flashOpStr.buf,0,6);
 16353  2452  3047               	movlw	low (_flashOpStr+4)
 16354  2453  00F3               	movwf	m_mem_set@buf
 16355  2454  3001               	movlw	high (_flashOpStr+4)
 16356  2455  00F4               	movwf	m_mem_set@buf+1
 16357  2456  01F5               	clrf	m_mem_set@x
 16358  2457  3006               	movlw	6
 16359  2458  0020               	movlb	0	; select bank0
 16360  2459  00C6               	movwf	??_ui_key_process_down
 16361  245A  0846               	movf	??_ui_key_process_down,w
 16362  245B  00F6               	movwf	m_mem_set@len
 16363  245C  31BB  23E2  31A3   	fcall	_m_mem_set
 16364                           
 16365                           ;ui_key.c: 142: data_api_rt_data_save();
 16366  245F  3198  207F  31A3   	fcall	_data_api_rt_data_save
 16367                           
 16368                           ;ui_key.c: 143: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->cardID));
 16369  2462  3004               	movlw	4
 16370  2463  0022               	movlb	2	; select bank2
 16371  2464  00C3               	movwf	_flashOpStr^(0+256)
 16372  2465  3000               	movlw	0
 16373  2466  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16374                           
 16375                           ;ui_key.c: 144: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16376  2467  3002               	movlw	2
 16377  2468  0020               	movlb	0	; select bank0
 16378  2469  00C6               	movwf	??_ui_key_process_down
 16379  246A  0846               	movf	??_ui_key_process_down,w
 16380  246B  0022               	movlb	2	; select bank2
 16381  246C  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16382                           
 16383                           ;ui_key.c: 145: flashOpStr.len=4;
 16384  246D  3004               	movlw	4
 16385  246E  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16386  246F  3000               	movlw	0
 16387  2470  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16388                           
 16389                           ;ui_key.c: 146: *((uint32_t*)(flashOpStr.buf))=0;
 16390  2471  3000               	movlw	0
 16391  2472  00CA               	movwf	((_flashOpStr+3)^(0+256)+4)
 16392  2473  3000               	movlw	0
 16393  2474  00C9               	movwf	((_flashOpStr+2)^(0+256)+4)
 16394  2475  3000               	movlw	0
 16395  2476  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16396  2477  3000               	movlw	0
 16397  2478  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16398                           
 16399                           ;ui_key.c: 147: data_api_rt_data_save();
 16400  2479  3198  207F  31A3   	fcall	_data_api_rt_data_save
 16401                           
 16402                           ;ui_key.c: 148: break;
 16403  247C  2C8E               	goto	l14681
 16404  247D                     l14673:	
 16405                           ;ui_key.c: 149: default:
 16406                           
 16407                           
 16408                           ;ui_key.c: 150: return 0;
 16409  247D  3000               	movlw	0
 16410  247E  0008               	return
 16411  247F                     l14679:	
 16412                           ;ui_key.c: 151: }
 16413                           
 16414  247F  0021               	movlb	1	; select bank1
 16415  2480  0843               	movf	_menu^(0+128),w
 16416                           
 16417                           ; Switch size 1, requested type "space"
 16418                           ; Number of cases is 4, Range of values is 32 to 224
 16419                           ; switch strategies available:
 16420                           ; Name         Instructions Cycles
 16421                           ; simple_byte           13     7 (average)
 16422                           ; jumptable            263     9 (fixed)
 16423                           ;	Chosen strategy is simple_byte
 16424  2481  3A20               	xorlw	32	; case 32
 16425  2482  1903               	skipnz
 16426  2483  2C09               	goto	l14639
 16427  2484  3A10               	xorlw	16	; case 48
 16428  2485  1903               	skipnz
 16429  2486  2C26               	goto	l14647
 16430  2487  3AF0               	xorlw	240	; case 192
 16431  2488  1903               	skipnz
 16432  2489  2C43               	goto	l14655
 16433  248A  3A20               	xorlw	32	; case 224
 16434  248B  1903               	skipnz
 16435  248C  2BF2               	goto	l14631
 16436  248D  2C7D               	goto	l14673
 16437  248E                     l14681:	
 16438                           
 16439                           ;ui_key.c: 152: return 0;
 16440  248E  3000               	movlw	0
 16441  248F  0008               	return
 16442  2490                     __end_of_ui_key_process_down:	
 16443                           
 16444                           	psect	text35
 16445  11D0                     __ptext35:	
 16446 ;; *************** function _ui_key_process_cancel *****************
 16447 ;; Defined at:
 16448 ;;		line 264 in file "src/api/ui_key.c"
 16449 ;; Parameters:    Size  Location     Type
 16450 ;;		None
 16451 ;; Auto vars:     Size  Location     Type
 16452 ;;  ret             1   48[BANK0 ] unsigned char 
 16453 ;; Return value:  Size  Location     Type
 16454 ;;                  1    wreg      void 
 16455 ;; Registers used:
 16456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16457 ;; Tracked objects:
 16458 ;;		On entry : 0/0
 16459 ;;		On exit  : 0/0
 16460 ;;		Unchanged: 0/0
 16461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16464 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 16465 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 16466 ;;Total ram usage:       11 bytes
 16467 ;; Hardware stack levels used:    1
 16468 ;; Hardware stack levels required when called:    5
 16469 ;; This function calls:
 16470 ;;		___awdiv
 16471 ;;		___wmul
 16472 ;;		_data_api_calibration_table_data_save
 16473 ;; This function is called by:
 16474 ;;		_ui_key_process
 16475 ;; This function uses a non-reentrant model
 16476 ;;
 16477                           
 16478                           
 16479                           ;psect for function _ui_key_process_cancel
 16480  11D0                     _ui_key_process_cancel:	
 16481                           
 16482                           ;ui_key.c: 266: uint8_t ret=0;
 16483                           
 16484                           ;incstack = 0
 16485                           ; Regs used in _ui_key_process_cancel: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16486  11D0  0020               	movlb	0	; select bank0
 16487  11D1  01D0               	clrf	ui_key_process_cancel@ret
 16488                           
 16489                           ;ui_key.c: 267: if(menu<3){
 16490  11D2  3003               	movlw	3
 16491  11D3  0021               	movlb	1	; select bank1
 16492  11D4  0243               	subwf	_menu^(0+128),w
 16493  11D5  1803               	skipnc
 16494  11D6  2AEF               	goto	l14845
 16495                           
 16496                           ;ui_key.c: 268: uiAdjbuf[0]=0;
 16497  11D7  0022               	movlb	2	; select bank2
 16498  11D8  01E1               	clrf	_uiAdjbuf^(0+256)
 16499                           
 16500                           ;ui_key.c: 269: uiAdjbuf[1]=0;
 16501  11D9  01E2               	clrf	(_uiAdjbuf^(0+256)+1)
 16502                           
 16503                           ;ui_key.c: 270: bkupMenu=menu;
 16504  11DA  0021               	movlb	1	; select bank1
 16505  11DB  0843               	movf	_menu^(0+128),w
 16506  11DC  0020               	movlb	0	; select bank0
 16507  11DD  00C6               	movwf	??_ui_key_process_cancel
 16508  11DE  0846               	movf	??_ui_key_process_cancel,w
 16509  11DF  0021               	movlb	1	; select bank1
 16510  11E0  00C2               	movwf	_bkupMenu^(0+128)
 16511                           
 16512                           ;ui_key.c: 271: password=0x00;
 16513  11E1  0022               	movlb	2	; select bank2
 16514  11E2  01AA               	clrf	_password^(0+256)
 16515  11E3  01AB               	clrf	(_password+1)^(0+256)
 16516                           
 16517                           ;ui_key.c: 272: menu=0x10;
 16518  11E4  3010               	movlw	16
 16519  11E5  0020               	movlb	0	; select bank0
 16520  11E6  00C6               	movwf	??_ui_key_process_cancel
 16521  11E7  0846               	movf	??_ui_key_process_cancel,w
 16522  11E8  0021               	movlb	1	; select bank1
 16523  11E9  00C3               	movwf	_menu^(0+128)
 16524                           
 16525                           ;ui_key.c: 273: return;
 16526  11EA  0008               	return
 16527  11EB                     l14791:	
 16528                           ;ui_key.c: 276: case 0x50:
 16529                           
 16530                           ;ui_key.c: 274: }
 16531                           ;ui_key.c: 275: switch(menu){
 16532                           
 16533                           
 16534                           ;ui_key.c: 277: if(*((uint16_t*)uiAdjbuf) != Main_flowCalibrationTable.flowCalibrationAr
      +                          r[calibLocation].rtflowValue){
 16535  11EB  3061               	movlw	low (_uiAdjbuf| (0+256))
 16536  11EC  0086               	movwf	6
 16537  11ED  3001               	movlw	1	; select bank2/3
 16538  11EE  0087               	movwf	7
 16539  11EF  3F40               	moviw [0]fsr1
 16540  11F0  0020               	movlb	0	; select bank0
 16541  11F1  00C6               	movwf	??_ui_key_process_cancel
 16542  11F2  3F41               	moviw [1]fsr1
 16543  11F3  00C7               	movwf	??_ui_key_process_cancel+1
 16544  11F4  0021               	movlb	1	; select bank1
 16545  11F5  0845               	movf	_calibLocation^(0+128),w
 16546  11F6  0020               	movlb	0	; select bank0
 16547  11F7  00C8               	movwf	??_ui_key_process_cancel+2
 16548  11F8  01C9               	clrf	??_ui_key_process_cancel+3
 16549  11F9  35C8               	lslf	??_ui_key_process_cancel+2,f
 16550  11FA  0DC9               	rlf	??_ui_key_process_cancel+3,f
 16551  11FB  35C8               	lslf	??_ui_key_process_cancel+2,f
 16552  11FC  0DC9               	rlf	??_ui_key_process_cancel+3,f
 16553  11FD  0848               	movf	??_ui_key_process_cancel+2,w
 16554  11FE  3E02               	addlw	2
 16555  11FF  00CA               	movwf	??_ui_key_process_cancel+4
 16556  1200  3000               	movlw	0
 16557  1201  3D49               	addwfc	??_ui_key_process_cancel+3,w
 16558  1202  00CB               	movwf	??_ui_key_process_cancel+5
 16559  1203  3074               	movlw	116
 16560  1204  00CC               	movwf	??_ui_key_process_cancel+6
 16561  1205  3023               	movlw	35
 16562  1206  00CD               	movwf	??_ui_key_process_cancel+7
 16563  1207  084A               	movf	??_ui_key_process_cancel+4,w
 16564  1208  074C               	addwf	??_ui_key_process_cancel+6,w
 16565  1209  0086               	movwf	6
 16566  120A  084B               	movf	??_ui_key_process_cancel+5,w
 16567  120B  3D4D               	addwfc	??_ui_key_process_cancel+7,w
 16568  120C  0087               	movwf	7
 16569  120D  3F40               	moviw [0]fsr1
 16570  120E  00CE               	movwf	??_ui_key_process_cancel+8
 16571  120F  3F41               	moviw [1]fsr1
 16572  1210  00CF               	movwf	??_ui_key_process_cancel+9
 16573  1211  0847               	movf	??_ui_key_process_cancel+1,w
 16574  1212  064F               	xorwf	??_ui_key_process_cancel+9,w
 16575  1213  1D03               	skipz
 16576  1214  2A17               	goto	u13515
 16577  1215  0846               	movf	??_ui_key_process_cancel,w
 16578  1216  064E               	xorwf	??_ui_key_process_cancel+8,w
 16579  1217                     u13515:	
 16580  1217  1903               	skipnz
 16581  1218  2A33               	goto	l14803
 16582                           
 16583                           ;ui_key.c: 278: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 16584  1219  0022               	movlb	2	; select bank2
 16585  121A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 16586  121B  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 16587                           
 16588                           ;ui_key.c: 279: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 16589  121C  3061               	movlw	low (_uiAdjbuf| (0+256))
 16590  121D  0086               	movwf	6
 16591  121E  3001               	movlw	1	; select bank2/3
 16592  121F  0087               	movwf	7
 16593  1220  3F40               	moviw [0]fsr1
 16594  1221  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16595  1222  3F41               	moviw [1]fsr1
 16596  1223  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16597                           
 16598                           ;ui_key.c: 280: ret=data_api_calibration_table_data_save(calibLocation,1);
 16599  1224  0020               	movlb	0	; select bank0
 16600  1225  01B3               	clrf	data_api_calibration_table_data_save@single
 16601  1226  0AB3               	incf	data_api_calibration_table_data_save@single,f
 16602  1227  0021               	movlb	1	; select bank1
 16603  1228  0845               	movf	_calibLocation^(0+128),w
 16604  1229  3192  22FB  3191   	fcall	_data_api_calibration_table_data_save
 16605  122C  0020               	movlb	0	; select bank0
 16606  122D  00C6               	movwf	??_ui_key_process_cancel
 16607  122E  0846               	movf	??_ui_key_process_cancel,w
 16608  122F  00D0               	movwf	ui_key_process_cancel@ret
 16609                           
 16610                           ;ui_key.c: 282: if(!ret)break;
 16611  1230  0850               	movf	ui_key_process_cancel@ret,w
 16612  1231  1903               	btfsc	3,2
 16613  1232  0008               	return
 16614  1233                     l14803:	
 16615                           
 16616                           ;ui_key.c: 284: }
 16617                           ;ui_key.c: 285: calibLocation++;
 16618  1233  3001               	movlw	1
 16619  1234  00C6               	movwf	??_ui_key_process_cancel
 16620  1235  0846               	movf	??_ui_key_process_cancel,w
 16621  1236  0021               	movlb	1	; select bank1
 16622  1237  07C5               	addwf	_calibLocation^(0+128),f
 16623                           
 16624                           ;ui_key.c: 286: if(calibLocation>=30)calibLocation=0;
 16625  1238  301E               	movlw	30
 16626  1239  0245               	subwf	_calibLocation^(0+128),w
 16627  123A  1803               	btfsc	3,0
 16628  123B  01C5               	clrf	_calibLocation^(0+128)
 16629                           
 16630                           ;ui_key.c: 287: *(uint16_t*)uiAdjbuf = Main_flowCalibrationTable.flowCalibrationArr[cali
      +                          bLocation].rtflowValue;
 16631  123C  0845               	movf	_calibLocation^(0+128),w
 16632  123D  0020               	movlb	0	; select bank0
 16633  123E  00C6               	movwf	??_ui_key_process_cancel
 16634  123F  01C7               	clrf	??_ui_key_process_cancel+1
 16635  1240  35C6               	lslf	??_ui_key_process_cancel,f
 16636  1241  0DC7               	rlf	??_ui_key_process_cancel+1,f
 16637  1242  35C6               	lslf	??_ui_key_process_cancel,f
 16638  1243  0DC7               	rlf	??_ui_key_process_cancel+1,f
 16639  1244  0846               	movf	??_ui_key_process_cancel,w
 16640  1245  3E02               	addlw	2
 16641  1246  00C8               	movwf	??_ui_key_process_cancel+2
 16642  1247  3000               	movlw	0
 16643  1248  3D47               	addwfc	??_ui_key_process_cancel+1,w
 16644  1249  00C9               	movwf	??_ui_key_process_cancel+3
 16645  124A  3074               	movlw	116
 16646  124B  00CA               	movwf	??_ui_key_process_cancel+4
 16647  124C  3023               	movlw	35
 16648  124D  00CB               	movwf	??_ui_key_process_cancel+5
 16649  124E  0848               	movf	??_ui_key_process_cancel+2,w
 16650  124F  074A               	addwf	??_ui_key_process_cancel+4,w
 16651  1250  0086               	movwf	6
 16652  1251  0849               	movf	??_ui_key_process_cancel+3,w
 16653  1252  3D4B               	addwfc	??_ui_key_process_cancel+5,w
 16654  1253  0087               	movwf	7
 16655  1254  3061               	movlw	low (_uiAdjbuf| (0+256))
 16656  1255  0084               	movwf	4
 16657  1256  3001               	movlw	1	; select bank2/3
 16658  1257  0085               	movwf	5
 16659  1258  3F40               	moviw [0]fsr1
 16660  1259  3F80               	movwi [0]fsr0
 16661  125A  3F41               	moviw [1]fsr1
 16662  125B  3F81               	movwi [1]fsr0
 16663                           
 16664                           ;ui_key.c: 288: break;
 16665  125C  0008               	return
 16666  125D                     l14811:	
 16667                           ;ui_key.c: 289: case 0xb0:
 16668                           
 16669                           
 16670                           ;ui_key.c: 290: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceWarning
      +                          ));
 16671  125D  3014               	movlw	20
 16672  125E  0022               	movlb	2	; select bank2
 16673  125F  00C3               	movwf	_flashOpStr^(0+256)
 16674  1260  3000               	movlw	0
 16675  1261  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16676                           
 16677                           ;ui_key.c: 292: flashOpStr.len=2;
 16678  1262  3002               	movlw	2
 16679  1263  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16680  1264  3000               	movlw	0
 16681  1265  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16682                           
 16683                           ;ui_key.c: 293: __t16=*((uint16_t*)uiAdjbuf);
 16684  1266  3061               	movlw	low (_uiAdjbuf| (0+256))
 16685  1267  0086               	movwf	6
 16686  1268  3001               	movlw	1	; select bank2/3
 16687  1269  0087               	movwf	7
 16688  126A  3F40               	moviw [0]fsr1
 16689  126B  00F8               	movwf	___t16
 16690  126C  3F41               	moviw [1]fsr1
 16691  126D  00F9               	movwf	___t16+1
 16692                           
 16693                           ;ui_key.c: 294: __t16*=100;
 16694  126E  3064               	movlw	100
 16695  126F  00F3               	movwf	___wmul@multiplier
 16696  1270  3000               	movlw	0
 16697  1271  00F4               	movwf	___wmul@multiplier+1
 16698  1272  0879               	movf	___t16+1,w
 16699  1273  00F6               	movwf	___wmul@multiplicand+1
 16700  1274  0878               	movf	___t16,w
 16701  1275  00F5               	movwf	___wmul@multiplicand
 16702  1276  31BE  267D  3191   	fcall	___wmul
 16703  1279  0874               	movf	?___wmul+1,w
 16704  127A  00F9               	movwf	___t16+1
 16705  127B  0873               	movf	?___wmul,w
 16706  127C  00F8               	movwf	___t16
 16707                           
 16708                           ;ui_key.c: 295: *((uint16_t*)flashOpStr.buf)=__t16;
 16709  127D  0879               	movf	___t16+1,w
 16710  127E  0022               	movlb	2	; select bank2
 16711  127F  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16712  1280  0878               	movf	___t16,w
 16713  1281  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16714                           
 16715                           ;ui_key.c: 296: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16716  1282  3002               	movlw	2
 16717  1283  0020               	movlb	0	; select bank0
 16718  1284  00C6               	movwf	??_ui_key_process_cancel
 16719  1285  0846               	movf	??_ui_key_process_cancel,w
 16720  1286  0022               	movlb	2	; select bank2
 16721  1287  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16722                           
 16723                           ;ui_key.c: 297: flashOpStr.len=2;
 16724  1288  3002               	movlw	2
 16725  1289  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16726  128A  3000               	movlw	0
 16727  128B  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16728                           
 16729                           ;ui_key.c: 298: *(int16_t*)uiAdjbuf=(mainSystemData.balanceOff/100);
 16730  128C  3064               	movlw	100
 16731  128D  00F3               	movwf	___awdiv@divisor
 16732  128E  3000               	movlw	0
 16733  128F  00F4               	movwf	___awdiv@divisor+1
 16734  1290  0024               	movlb	4	; select bank4
 16735  1291  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 16736  1292  00F6               	movwf	___awdiv@dividend+1
 16737  1293  0836               	movf	(_mainSystemData^(0+512)+22),w
 16738  1294  00F5               	movwf	___awdiv@dividend
 16739  1295  31AA  2216         	fcall	___awdiv
 16740  1297  3061               	movlw	low (_uiAdjbuf| (0+256))
 16741  1298  0086               	movwf	6
 16742  1299  3001               	movlw	1	; select bank2/3
 16743  129A  0087               	movwf	7
 16744  129B  0873               	movf	?___awdiv,w
 16745  129C  3FC0               	movwi [0]fsr1
 16746  129D  0874               	movf	?___awdiv+1,w
 16747  129E  3FC1               	movwi [1]fsr1
 16748                           
 16749                           ;ui_key.c: 299: menu=0xb1;
 16750  129F  30B1               	movlw	177
 16751  12A0  0020               	movlb	0	; select bank0
 16752  12A1  00C6               	movwf	??_ui_key_process_cancel
 16753  12A2  0846               	movf	??_ui_key_process_cancel,w
 16754  12A3  0021               	movlb	1	; select bank1
 16755  12A4  00C3               	movwf	_menu^(0+128)
 16756                           
 16757                           ;ui_key.c: 300: break;
 16758  12A5  0008               	return
 16759  12A6                     l14827:	
 16760                           ;ui_key.c: 301: case 0xb1:
 16761                           
 16762                           
 16763                           ;ui_key.c: 302: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceOff));
 16764  12A6  3016               	movlw	22
 16765  12A7  0022               	movlb	2	; select bank2
 16766  12A8  00C3               	movwf	_flashOpStr^(0+256)
 16767  12A9  3000               	movlw	0
 16768  12AA  00C4               	movwf	(_flashOpStr+1)^(0+256)
 16769                           
 16770                           ;ui_key.c: 304: flashOpStr.len=2;
 16771  12AB  3002               	movlw	2
 16772  12AC  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16773  12AD  3000               	movlw	0
 16774  12AE  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16775                           
 16776                           ;ui_key.c: 305: __t16=*((uint16_t*)uiAdjbuf);
 16777  12AF  3061               	movlw	low (_uiAdjbuf| (0+256))
 16778  12B0  0086               	movwf	6
 16779  12B1  3001               	movlw	1	; select bank2/3
 16780  12B2  0087               	movwf	7
 16781  12B3  3F40               	moviw [0]fsr1
 16782  12B4  00F8               	movwf	___t16
 16783  12B5  3F41               	moviw [1]fsr1
 16784  12B6  00F9               	movwf	___t16+1
 16785                           
 16786                           ;ui_key.c: 306: __t16*=100;
 16787  12B7  3064               	movlw	100
 16788  12B8  00F3               	movwf	___wmul@multiplier
 16789  12B9  3000               	movlw	0
 16790  12BA  00F4               	movwf	___wmul@multiplier+1
 16791  12BB  0879               	movf	___t16+1,w
 16792  12BC  00F6               	movwf	___wmul@multiplicand+1
 16793  12BD  0878               	movf	___t16,w
 16794  12BE  00F5               	movwf	___wmul@multiplicand
 16795  12BF  31BE  267D  3191   	fcall	___wmul
 16796  12C2  0874               	movf	?___wmul+1,w
 16797  12C3  00F9               	movwf	___t16+1
 16798  12C4  0873               	movf	?___wmul,w
 16799  12C5  00F8               	movwf	___t16
 16800                           
 16801                           ;ui_key.c: 307: *((uint16_t*)flashOpStr.buf)=__t16;
 16802  12C6  0879               	movf	___t16+1,w
 16803  12C7  0022               	movlb	2	; select bank2
 16804  12C8  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 16805  12C9  0878               	movf	___t16,w
 16806  12CA  00C7               	movwf	(_flashOpStr^(0+256)+4)
 16807                           
 16808                           ;ui_key.c: 308: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 16809  12CB  3002               	movlw	2
 16810  12CC  0020               	movlb	0	; select bank0
 16811  12CD  00C6               	movwf	??_ui_key_process_cancel
 16812  12CE  0846               	movf	??_ui_key_process_cancel,w
 16813  12CF  0022               	movlb	2	; select bank2
 16814  12D0  00D7               	movwf	(_flashOpStr^(0+256)+20)
 16815                           
 16816                           ;ui_key.c: 309: flashOpStr.len=2;
 16817  12D1  3002               	movlw	2
 16818  12D2  00C5               	movwf	(_flashOpStr^(0+256)+2)
 16819  12D3  3000               	movlw	0
 16820  12D4  00C6               	movwf	(_flashOpStr^(0+256)+3)
 16821                           
 16822                           ;ui_key.c: 310: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 16823  12D5  3064               	movlw	100
 16824  12D6  00F3               	movwf	___awdiv@divisor
 16825  12D7  3000               	movlw	0
 16826  12D8  00F4               	movwf	___awdiv@divisor+1
 16827  12D9  0024               	movlb	4	; select bank4
 16828  12DA  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 16829  12DB  00F6               	movwf	___awdiv@dividend+1
 16830  12DC  0834               	movf	(_mainSystemData^(0+512)+20),w
 16831  12DD  00F5               	movwf	___awdiv@dividend
 16832  12DE  31AA  2216         	fcall	___awdiv
 16833  12E0  3061               	movlw	low (_uiAdjbuf| (0+256))
 16834  12E1  0086               	movwf	6
 16835  12E2  3001               	movlw	1	; select bank2/3
 16836  12E3  0087               	movwf	7
 16837  12E4  0873               	movf	?___awdiv,w
 16838  12E5  3FC0               	movwi [0]fsr1
 16839  12E6  0874               	movf	?___awdiv+1,w
 16840  12E7  3FC1               	movwi [1]fsr1
 16841                           
 16842                           ;ui_key.c: 311: menu=0xb0;
 16843  12E8  30B0               	movlw	176
 16844  12E9  0020               	movlb	0	; select bank0
 16845  12EA  00C6               	movwf	??_ui_key_process_cancel
 16846  12EB  0846               	movf	??_ui_key_process_cancel,w
 16847  12EC  0021               	movlb	1	; select bank1
 16848  12ED  00C3               	movwf	_menu^(0+128)
 16849                           
 16850                           ;ui_key.c: 313: }
 16851                           
 16852                           ;ui_key.c: 312: break;
 16853  12EE  0008               	return
 16854  12EF                     l14845:	
 16855  12EF  0843               	movf	_menu^(0+128),w
 16856                           
 16857                           ; Switch size 1, requested type "space"
 16858                           ; Number of cases is 3, Range of values is 80 to 177
 16859                           ; switch strategies available:
 16860                           ; Name         Instructions Cycles
 16861                           ; simple_byte           10     6 (average)
 16862                           ; direct_byte          205     9 (fixed)
 16863                           ; jumptable            263     9 (fixed)
 16864                           ;	Chosen strategy is simple_byte
 16865  12F0  3A50               	xorlw	80	; case 80
 16866  12F1  1903               	skipnz
 16867  12F2  29EB               	goto	l14791
 16868  12F3  3AE0               	xorlw	224	; case 176
 16869  12F4  1903               	skipnz
 16870  12F5  2A5D               	goto	l14811
 16871  12F6  3A01               	xorlw	1	; case 177
 16872  12F7  1903               	skipnz
 16873  12F8  2AA6               	goto	l14827
 16874  12F9  2AFA               	goto	l685
 16875  12FA                     l685:	
 16876  12FA  0008               	return
 16877  12FB                     __end_of_ui_key_process_cancel:	
 16878                           
 16879                           	psect	text36
 16880  2BBE                     __ptext36:	
 16881 ;; *************** function _timer1_irq_callback *****************
 16882 ;; Defined at:
 16883 ;;		line 52 in file "src/driver/timer.c"
 16884 ;; Parameters:    Size  Location     Type
 16885 ;;		None
 16886 ;; Auto vars:     Size  Location     Type
 16887 ;;		None
 16888 ;; Return value:  Size  Location     Type
 16889 ;;                  1    wreg      void 
 16890 ;; Registers used:
 16891 ;;		wreg, status,2, status,0, pclath, cstack
 16892 ;; Tracked objects:
 16893 ;;		On entry : 0/0
 16894 ;;		On exit  : 0/0
 16895 ;;		Unchanged: 0/0
 16896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16898 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16899 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16900 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16901 ;;Total ram usage:        1 bytes
 16902 ;; Hardware stack levels used:    1
 16903 ;; Hardware stack levels required when called:    3
 16904 ;; This function calls:
 16905 ;;		_valve_stop
 16906 ;; This function is called by:
 16907 ;;		_main
 16908 ;; This function uses a non-reentrant model
 16909 ;;
 16910                           
 16911                           
 16912                           ;psect for function _timer1_irq_callback
 16913  2BBE                     _timer1_irq_callback:	
 16914                           
 16915                           ;timer.c: 54: if(noKeyEventTimeOut)noKeyEventTimeOut--;
 16916                           
 16917                           ;incstack = 0
 16918                           ; Regs used in _timer1_irq_callback: [wreg+status,2+status,0+pclath+cstack]
 16919  2BBE  0022               	movlb	2	; select bank2
 16920  2BBF  086C               	movf	_noKeyEventTimeOut^(0+256),w
 16921  2BC0  1903               	btfsc	3,2
 16922  2BC1  2BC4               	goto	l2026
 16923  2BC2  3001               	movlw	1
 16924  2BC3  02EC               	subwf	_noKeyEventTimeOut^(0+256),f
 16925  2BC4                     l2026:	
 16926                           
 16927                           ;timer.c: 55: Event &= ~ (0x01<<5);
 16928  2BC4  30DF               	movlw	223
 16929  2BC5  00F4               	movwf	??_timer1_irq_callback
 16930  2BC6  0874               	movf	??_timer1_irq_callback,w
 16931  2BC7  0021               	movlb	1	; select bank1
 16932  2BC8  05C7               	andwf	_Event^(0+128),f
 16933                           
 16934                           ;timer.c: 56: Event |= (0x01<<3);
 16935  2BC9  15C7               	bsf	_Event^(0+128),3
 16936                           
 16937                           ;timer.c: 60: if(valveStatus== VALVE_CLOSEING || valveStatus==VALVE_OPENING){
 16938                           
 16939                           ;timer.c: 59: do{
 16940  2BCA  3004               	movlw	4
 16941  2BCB  067A               	xorwf	_valveStatus,w
 16942  2BCC  1903               	btfsc	3,2
 16943  2BCD  2BD2               	goto	l16295
 16944  2BCE  3003               	movlw	3
 16945  2BCF  067A               	xorwf	_valveStatus,w
 16946  2BD0  1D03               	btfss	3,2
 16947  2BD1  2BF4               	goto	l16311
 16948  2BD2                     l16295:	
 16949                           
 16950                           ;timer.c: 61: valveTimer++;
 16951  2BD2  3001               	movlw	1
 16952  2BD3  00F4               	movwf	??_timer1_irq_callback
 16953  2BD4  0874               	movf	??_timer1_irq_callback,w
 16954  2BD5  0022               	movlb	2	; select bank2
 16955  2BD6  07B6               	addwf	_valveTimer^(0+256),f
 16956                           
 16957                           ;timer.c: 62: if(valveStatus== VALVE_CLOSEING && valveTimer>=20){
 16958  2BD7  3004               	movlw	4
 16959  2BD8  067A               	xorwf	_valveStatus,w
 16960  2BD9  1D03               	btfss	3,2
 16961  2BDA  2BE4               	goto	l16303
 16962  2BDB  3014               	movlw	20
 16963  2BDC  0236               	subwf	_valveTimer^(0+256),w
 16964  2BDD  1C03               	skipc
 16965  2BDE  2BE4               	goto	l16303
 16966                           
 16967                           ;timer.c: 63: valveStatus=VALVE_CLOSED;
 16968  2BDF  01FA               	clrf	_valveStatus
 16969  2BE0  0AFA               	incf	_valveStatus,f
 16970                           
 16971                           ;timer.c: 64: valve_stop();
 16972  2BE1  31BC  247E  31AB   	fcall	_valve_stop
 16973  2BE4                     l16303:	
 16974                           
 16975                           ;timer.c: 65: }
 16976                           ;timer.c: 66: if(valveStatus== VALVE_OPENING && valveTimer>=20){
 16977  2BE4  3003               	movlw	3
 16978  2BE5  067A               	xorwf	_valveStatus,w
 16979  2BE6  1D03               	btfss	3,2
 16980  2BE7  2BF4               	goto	l16311
 16981  2BE8  3014               	movlw	20
 16982  2BE9  0022               	movlb	2	; select bank2
 16983  2BEA  0236               	subwf	_valveTimer^(0+256),w
 16984  2BEB  1C03               	skipc
 16985  2BEC  2BF4               	goto	l16311
 16986                           
 16987                           ;timer.c: 67: valveStatus=VALVE_OPENED;
 16988  2BED  3002               	movlw	2
 16989  2BEE  00F4               	movwf	??_timer1_irq_callback
 16990  2BEF  0874               	movf	??_timer1_irq_callback,w
 16991  2BF0  00FA               	movwf	_valveStatus
 16992                           
 16993                           ;timer.c: 68: valve_stop();
 16994  2BF1  31BC  247E  31AB   	fcall	_valve_stop
 16995  2BF4                     l16311:	
 16996                           ;timer.c: 71: else{
 16997                           
 16998                           ;timer.c: 69: }
 16999                           ;timer.c: 70: }
 17000                           
 17001                           
 17002                           ;timer.c: 73: }
 17003                           ;timer.c: 74: }while(0);
 17004                           ;timer.c: 75: sec+=systemTickerSec;
 17005  2BF4  0022               	movlb	2	; select bank2
 17006  2BF5  0842               	movf	_systemTickerSec^(0+256),w
 17007  2BF6  00F4               	movwf	??_timer1_irq_callback
 17008  2BF7  0874               	movf	??_timer1_irq_callback,w
 17009  2BF8  07BE               	addwf	_sec^(0+256),f
 17010                           
 17011                           ;timer.c: 76: systemTickerSec=0;
 17012  2BF9  01C2               	clrf	_systemTickerSec^(0+256)
 17013                           
 17014                           ;timer.c: 77: if(sec>=60){
 17015  2BFA  303C               	movlw	60
 17016  2BFB  023E               	subwf	_sec^(0+256),w
 17017  2BFC  1C03               	skipc
 17018  2BFD  2C04               	goto	l16319
 17019                           
 17020                           ;timer.c: 78: sec-=60;
 17021  2BFE  303C               	movlw	60
 17022  2BFF  02BE               	subwf	_sec^(0+256),f
 17023                           
 17024                           ;timer.c: 79: min++;
 17025  2C00  3001               	movlw	1
 17026  2C01  00F4               	movwf	??_timer1_irq_callback
 17027  2C02  0874               	movf	??_timer1_irq_callback,w
 17028  2C03  07B5               	addwf	_min^(0+256),f
 17029  2C04                     l16319:	
 17030                           
 17031                           ;timer.c: 80: }
 17032                           ;timer.c: 81: if(min>=60){
 17033  2C04  303C               	movlw	60
 17034  2C05  0235               	subwf	_min^(0+256),w
 17035  2C06  1C03               	skipc
 17036  2C07  2C0E               	goto	l2036
 17037                           
 17038                           ;timer.c: 82: min-=60;
 17039  2C08  303C               	movlw	60
 17040  2C09  02B5               	subwf	_min^(0+256),f
 17041                           
 17042                           ;timer.c: 83: hour++;
 17043  2C0A  3001               	movlw	1
 17044  2C0B  00F4               	movwf	??_timer1_irq_callback
 17045  2C0C  0874               	movf	??_timer1_irq_callback,w
 17046  2C0D  07B4               	addwf	_hour^(0+256),f
 17047  2C0E                     l2036:	
 17048                           
 17049                           ;timer.c: 84: }
 17050                           ;timer.c: 85: if(hour>=1){
 17051  2C0E  0834               	movf	_hour^(0+256),w
 17052  2C0F  1903               	btfsc	3,2
 17053  2C10  0008               	return
 17054                           
 17055                           ;timer.c: 86: Event |=(0x01<<6);
 17056  2C11  0021               	movlb	1	; select bank1
 17057  2C12  1747               	bsf	_Event^(0+128),6
 17058                           
 17059                           ;timer.c: 87: sec=0;
 17060  2C13  0022               	movlb	2	; select bank2
 17061  2C14  01BE               	clrf	_sec^(0+256)
 17062                           
 17063                           ;timer.c: 88: min=0;
 17064  2C15  01B5               	clrf	_min^(0+256)
 17065                           
 17066                           ;timer.c: 89: hour=0;
 17067  2C16  01B4               	clrf	_hour^(0+256)
 17068  2C17  0008               	return
 17069  2C18                     __end_of_timer1_irq_callback:	
 17070                           
 17071                           	psect	text37
 17072  3C7E                     __ptext37:	
 17073 ;; *************** function _valve_stop *****************
 17074 ;; Defined at:
 17075 ;;		line 39 in file "src/driver/other-gpio.c"
 17076 ;; Parameters:    Size  Location     Type
 17077 ;;		None
 17078 ;; Auto vars:     Size  Location     Type
 17079 ;;		None
 17080 ;; Return value:  Size  Location     Type
 17081 ;;                  1    wreg      void 
 17082 ;; Registers used:
 17083 ;;		wreg, status,2, status,0
 17084 ;; Tracked objects:
 17085 ;;		On entry : 0/0
 17086 ;;		On exit  : 0/0
 17087 ;;		Unchanged: 0/0
 17088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17091 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17092 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17093 ;;Total ram usage:        1 bytes
 17094 ;; Hardware stack levels used:    1
 17095 ;; Hardware stack levels required when called:    2
 17096 ;; This function calls:
 17097 ;;		Nothing
 17098 ;; This function is called by:
 17099 ;;		_timer1_irq_callback
 17100 ;; This function uses a non-reentrant model
 17101 ;;
 17102                           
 17103                           
 17104                           ;psect for function _valve_stop
 17105  3C7E                     _valve_stop:	
 17106  3C7E                     l1960:	
 17107                           ;other-gpio.c: 42: while((Event & (0x01<<5))==0);
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in _valve_stop: [wreg+status,2+status,0]
 17111                           
 17112  3C7E  0021               	movlb	1	; select bank1
 17113  3C7F  1EC7               	btfss	_Event^(0+128),5
 17114  3C80  2C7E               	goto	l1960
 17115                           
 17116                           ;other-gpio.c: 43: Event &= ~(0x01<<5);
 17117  3C81  30DF               	movlw	223
 17118  3C82  00F3               	movwf	??_valve_stop
 17119  3C83  0873               	movf	??_valve_stop,w
 17120  3C84  05C7               	andwf	_Event^(0+128),f
 17121                           
 17122                           ;other-gpio.c: 45: do { LATDbits.LATD7 = 0; } while(0);
 17123  3C85  0022               	movlb	2	; select bank2
 17124  3C86  138F               	bcf	15,7	;volatile
 17125  3C87                     l1965:	
 17126                           ;other-gpio.c: 47: while((Event & (0x01<<5))==0);
 17127                           
 17128  3C87  0021               	movlb	1	; select bank1
 17129  3C88  1EC7               	btfss	_Event^(0+128),5
 17130  3C89  2C87               	goto	l1965
 17131                           
 17132                           ;other-gpio.c: 48: Event &= ~(0x01<<5);
 17133  3C8A  30DF               	movlw	223
 17134  3C8B  00F3               	movwf	??_valve_stop
 17135  3C8C  0873               	movf	??_valve_stop,w
 17136  3C8D  05C7               	andwf	_Event^(0+128),f
 17137                           
 17138                           ;other-gpio.c: 51: do { LATBbits.LATB0 = 0; } while(0);
 17139  3C8E  0022               	movlb	2	; select bank2
 17140  3C8F  100D               	bcf	13,0	;volatile
 17141  3C90  0008               	return
 17142  3C91                     __end_of_valve_stop:	
 17143                           
 17144                           	psect	text38
 17145  32DB                     __ptext38:	
 17146 ;; *************** function _timer0_irq_callback *****************
 17147 ;; Defined at:
 17148 ;;		line 33 in file "src/driver/timer.c"
 17149 ;; Parameters:    Size  Location     Type
 17150 ;;		None
 17151 ;; Auto vars:     Size  Location     Type
 17152 ;;		None
 17153 ;; Return value:  Size  Location     Type
 17154 ;;                  1    wreg      void 
 17155 ;; Registers used:
 17156 ;;		wreg, status,2, status,0
 17157 ;; Tracked objects:
 17158 ;;		On entry : 0/0
 17159 ;;		On exit  : 0/0
 17160 ;;		Unchanged: 0/0
 17161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17163 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17164 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17165 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17166 ;;Total ram usage:        1 bytes
 17167 ;; Hardware stack levels used:    1
 17168 ;; Hardware stack levels required when called:    2
 17169 ;; This function calls:
 17170 ;;		Nothing
 17171 ;; This function is called by:
 17172 ;;		_main
 17173 ;; This function uses a non-reentrant model
 17174 ;;
 17175                           
 17176                           
 17177                           ;psect for function _timer0_irq_callback
 17178  32DB                     _timer0_irq_callback:	
 17179                           
 17180                           ;timer.c: 35: Event &= ~ (0x01<<4);
 17181                           
 17182                           ;incstack = 0
 17183                           ; Regs used in _timer0_irq_callback: [wreg+status,2+status,0]
 17184  32DB  30EF               	movlw	239
 17185  32DC  00F3               	movwf	??_timer0_irq_callback
 17186  32DD  0873               	movf	??_timer0_irq_callback,w
 17187  32DE  0021               	movlb	1	; select bank1
 17188  32DF  05C7               	andwf	_Event^(0+128),f
 17189                           
 17190                           ;timer.c: 36: tmTemp16=systemTikerms;
 17191  32E0  0022               	movlb	2	; select bank2
 17192  32E1  0831               	movf	(_systemTikerms+1)^(0+256),w
 17193  32E2  00A1               	movwf	(_tmTemp16+1)^(0+256)
 17194  32E3  0830               	movf	_systemTikerms^(0+256),w
 17195  32E4  00A0               	movwf	_tmTemp16^(0+256)
 17196                           
 17197                           ;timer.c: 37: systemTikerms=0;
 17198  32E5  01B0               	clrf	_systemTikerms^(0+256)
 17199  32E6  01B1               	clrf	(_systemTikerms+1)^(0+256)
 17200                           
 17201                           ;timer.c: 39: findCardTimer+=tmTemp16;
 17202  32E7  0820               	movf	_tmTemp16^(0+256),w
 17203  32E8  0023               	movlb	3	; select bank3
 17204  32E9  07A0               	addwf	_findCardTimer^(0+384),f
 17205  32EA  0022               	movlb	2	; select bank2
 17206  32EB  0821               	movf	(_tmTemp16+1)^(0+256),w
 17207  32EC  0023               	movlb	3	; select bank3
 17208  32ED  3DA1               	addwfc	(_findCardTimer+1)^(0+384),f
 17209                           
 17210                           ;timer.c: 41: if(findCardTimer>330){
 17211  32EE  3001               	movlw	1
 17212  32EF  0221               	subwf	(_findCardTimer+1)^(0+384),w
 17213  32F0  304B               	movlw	75
 17214  32F1  1903               	skipnz
 17215  32F2  0220               	subwf	_findCardTimer^(0+384),w
 17216  32F3  1C03               	skipc
 17217  32F4  2AFA               	goto	l16281
 17218                           
 17219                           ;timer.c: 42: Event |= (0x01<<0);
 17220  32F5  0021               	movlb	1	; select bank1
 17221  32F6  1447               	bsf	_Event^(0+128),0
 17222                           
 17223                           ;timer.c: 43: findCardTimer=0;
 17224  32F7  0023               	movlb	3	; select bank3
 17225  32F8  01A0               	clrf	_findCardTimer^(0+384)
 17226  32F9  01A1               	clrf	(_findCardTimer+1)^(0+384)
 17227  32FA                     l16281:	
 17228                           
 17229                           ;timer.c: 44: }
 17230                           ;timer.c: 46: adcSamplingTimerOneTime+=tmTemp16;
 17231  32FA  0022               	movlb	2	; select bank2
 17232  32FB  0820               	movf	_tmTemp16^(0+256),w
 17233  32FC  07A6               	addwf	_adcSamplingTimerOneTime^(0+256),f	;volatile
 17234  32FD  0821               	movf	(_tmTemp16+1)^(0+256),w
 17235  32FE  3DA7               	addwfc	(_adcSamplingTimerOneTime+1)^(0+256),f	;volatile
 17236                           
 17237                           ;timer.c: 47: if(adcSamplingTimerOneTime>=(20)){
 17238  32FF  3000               	movlw	0
 17239  3300  0227               	subwf	(_adcSamplingTimerOneTime+1)^(0+256),w	;volatile
 17240  3301  3014               	movlw	20
 17241  3302  1903               	skipnz
 17242  3303  0226               	subwf	_adcSamplingTimerOneTime^(0+256),w	;volatile
 17243  3304  1C03               	skipc
 17244  3305  0008               	return
 17245                           
 17246                           ;timer.c: 48: Event |= (0x01<<1);
 17247  3306  0021               	movlb	1	; select bank1
 17248  3307  14C7               	bsf	_Event^(0+128),1
 17249  3308  0008               	return
 17250  3309                     __end_of_timer0_irq_callback:	
 17251                           
 17252                           	psect	text39
 17253  1D48                     __ptext39:	
 17254 ;; *************** function _rfid_comm_process *****************
 17255 ;; Defined at:
 17256 ;;		line 194 in file "src/app/rfid_demo.c"
 17257 ;; Parameters:    Size  Location     Type
 17258 ;;		None
 17259 ;; Auto vars:     Size  Location     Type
 17260 ;;  ret             1    1[BANK3 ] unsigned char 
 17261 ;;  valveCtrlfla    1    0[BANK3 ] unsigned char 
 17262 ;;  result          1    0        enum E5491
 17263 ;; Return value:  Size  Location     Type
 17264 ;;                  1    wreg      unsigned char 
 17265 ;; Registers used:
 17266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17267 ;; Tracked objects:
 17268 ;;		On entry : 0/0
 17269 ;;		On exit  : 0/0
 17270 ;;		Unchanged: 0/0
 17271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17273 ;;      Locals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0
 17274 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0
 17275 ;;      Totals:         0       0       1       0       2       0       0       0       0       0       0       0       
      +0
 17276 ;;Total ram usage:        3 bytes
 17277 ;; Hardware stack levels used:    1
 17278 ;; Hardware stack levels required when called:   10
 17279 ;; This function calls:
 17280 ;;		_delay
 17281 ;;		_in_app_vavle_off
 17282 ;;		_in_app_vavle_on
 17283 ;;		_key_scan_call
 17284 ;;		_lcd_disp_str
 17285 ;;		_mfapi_is_new_card_present
 17286 ;;		_picc_halt_a
 17287 ;;		_picc_select
 17288 ;;		_picc_stop_cryptol
 17289 ;;		_rfid_comm_process_read_dec
 17290 ;;		_rfid_comm_process_read_header
 17291 ;;		_rfid_comm_process_read_inc
 17292 ;;		_rfid_comm_process_recharge
 17293 ;;		_ui_disp_balance_and_volume
 17294 ;; This function is called by:
 17295 ;;		_main
 17296 ;; This function uses a non-reentrant model
 17297 ;;
 17298                           
 17299                           
 17300                           ;psect for function _rfid_comm_process
 17301  1D48                     _rfid_comm_process:	
 17302                           
 17303                           ;rfid_demo.c: 195: uint8_t valveCtrlflag=0;
 17304                           
 17305                           ;incstack = 0
 17306                           ; Regs used in _rfid_comm_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17307  1D48  0023               	movlb	3	; select bank3
 17308  1D49  01D4               	clrf	rfid_comm_process@valveCtrlflag^(0+384)
 17309                           
 17310                           ;rfid_demo.c: 196: uint8_t ret = 0;
 17311  1D4A  01D5               	clrf	rfid_comm_process@ret^(0+384)
 17312                           
 17313                           ;rfid_demo.c: 197: em_PcdStatusCode result;
 17314                           ;rfid_demo.c: 198: if(deviceStatus.bits.acPowerDown)return 0;
 17315  1D4B  0021               	movlb	1	; select bank1
 17316  1D4C  19C0               	btfsc	_deviceStatus^(0+128),3
 17317  1D4D  0008               	return
 17318                           
 17319                           ;rfid_demo.c: 199: if(valveStatus==VALVE_OPENING || valveStatus==VALVE_CLOSEING)return 0
      +                          ;
 17320                           
 17321                           ;	Return value of _rfid_comm_process is never used
 17322  1D4E  3003               	movlw	3
 17323  1D4F  067A               	xorwf	_valveStatus,w
 17324  1D50  1903               	btfsc	3,2
 17325  1D51  0008               	return
 17326  1D52  3004               	movlw	4
 17327  1D53  067A               	xorwf	_valveStatus,w
 17328  1D54  1903               	btfsc	3,2
 17329  1D55  0008               	return
 17330                           
 17331                           ;rfid_demo.c: 200: cardReadingFlag=1;
 17332                           
 17333                           ;	Return value of _rfid_comm_process is never used
 17334  1D56  0022               	movlb	2	; select bank2
 17335  1D57  01BB               	clrf	_cardReadingFlag^(0+256)
 17336  1D58  0ABB               	incf	_cardReadingFlag^(0+256),f
 17337                           
 17338                           ;rfid_demo.c: 202: CardError=NO_CARD;
 17339                           
 17340                           ;rfid_demo.c: 201: do {
 17341  1D59  01B7               	clrf	_CardError^(0+256)
 17342                           
 17343                           ;rfid_demo.c: 203: if (!(mfapi_is_new_card_present()))break;
 17344  1D5A  31B3  23FA  319D   	fcall	_mfapi_is_new_card_present
 17345  1D5D  3A00               	xorlw	0
 17346  1D5E  1903               	btfsc	3,2
 17347  1D5F  2DF8               	goto	l16241
 17348                           
 17349                           ;rfid_demo.c: 204: CardError=SELECT_CARD_ERROR;
 17350  1D60  0022               	movlb	2	; select bank2
 17351  1D61  01B7               	clrf	_CardError^(0+256)
 17352  1D62  0AB7               	incf	_CardError^(0+256),f
 17353                           
 17354                           ;rfid_demo.c: 205: piccResult = picc_select(&PiccUid, 0);
 17355  1D63  0020               	movlb	0	; select bank0
 17356  1D64  01CA               	clrf	picc_select@validBits
 17357  1D65  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 17358  1D66  3180  20A0  319D   	fcall	_picc_select
 17359  1D69  0021               	movlb	1	; select bank1
 17360  1D6A  00EE               	movwf	??_rfid_comm_process^(0+128)
 17361  1D6B  086E               	movf	??_rfid_comm_process^(0+128),w
 17362  1D6C  00BE               	movwf	_piccResult^(0+128)
 17363                           
 17364                           ;rfid_demo.c: 206: if (piccResult != STATUS_OK)break;
 17365  1D6D  083E               	movf	_piccResult^(0+128),w
 17366  1D6E  1D03               	btfss	3,2
 17367  1D6F  2DF8               	goto	l16241
 17368                           
 17369                           ;rfid_demo.c: 207: if (PiccUid.sak != 0x08) break;
 17370  1D70  3008               	movlw	8
 17371  1D71  0023               	movlb	3	; select bank3
 17372  1D72  0649               	xorwf	(_PiccUid^(0+384)+11),w
 17373  1D73  1D03               	btfss	3,2
 17374  1D74  2DF8               	goto	l16241
 17375                           
 17376                           ;rfid_demo.c: 208: CardError=READ_HEADER_ERROR;;
 17377  1D75  3002               	movlw	2
 17378  1D76  0021               	movlb	1	; select bank1
 17379  1D77  00EE               	movwf	??_rfid_comm_process^(0+128)
 17380  1D78  086E               	movf	??_rfid_comm_process^(0+128),w
 17381  1D79  0022               	movlb	2	; select bank2
 17382  1D7A  00B7               	movwf	_CardError^(0+256)
 17383                           
 17384                           ;rfid_demo.c: 209: ret=rfid_comm_process_read_header();
 17385  1D7B  318D  25A3  319D   	fcall	_rfid_comm_process_read_header
 17386  1D7E  0021               	movlb	1	; select bank1
 17387  1D7F  00EE               	movwf	??_rfid_comm_process^(0+128)
 17388  1D80  086E               	movf	??_rfid_comm_process^(0+128),w
 17389  1D81  0023               	movlb	3	; select bank3
 17390  1D82  00D5               	movwf	rfid_comm_process@ret^(0+384)
 17391                           
 17392                           ;rfid_demo.c: 210: if(!ret)break;
 17393  1D83  0855               	movf	rfid_comm_process@ret^(0+384),w
 17394  1D84  1903               	btfsc	3,2
 17395  1D85  2DF8               	goto	l16241
 17396                           
 17397                           ;rfid_demo.c: 213: key_scan_call();
 17398  1D86  31BF  27D9  319D   	fcall	_key_scan_call
 17399                           
 17400                           ;rfid_demo.c: 214: if(KeyValue==(1<<1)){
 17401  1D89  3002               	movlw	2
 17402  1D8A  0021               	movlb	1	; select bank1
 17403  1D8B  0641               	xorwf	_KeyValue^(0+128),w
 17404  1D8C  1D03               	btfss	3,2
 17405  1D8D  2DF5               	goto	l1237
 17406                           
 17407                           ;rfid_demo.c: 215: ret=rfid_comm_process_read_inc();
 17408  1D8E  31B6  26BA  319D   	fcall	_rfid_comm_process_read_inc
 17409  1D91  0021               	movlb	1	; select bank1
 17410  1D92  00EE               	movwf	??_rfid_comm_process^(0+128)
 17411  1D93  086E               	movf	??_rfid_comm_process^(0+128),w
 17412  1D94  0023               	movlb	3	; select bank3
 17413  1D95  00D5               	movwf	rfid_comm_process@ret^(0+384)
 17414                           
 17415                           ;rfid_demo.c: 216: if(!ret)break;
 17416  1D96  0855               	movf	rfid_comm_process@ret^(0+384),w
 17417  1D97  1903               	btfsc	3,2
 17418  1D98  2DF8               	goto	l16241
 17419                           
 17420                           ;rfid_demo.c: 217: ret=rfid_comm_process_read_dec();
 17421  1D99  31B6  267B  319D   	fcall	_rfid_comm_process_read_dec
 17422  1D9C  0021               	movlb	1	; select bank1
 17423  1D9D  00EE               	movwf	??_rfid_comm_process^(0+128)
 17424  1D9E  086E               	movf	??_rfid_comm_process^(0+128),w
 17425  1D9F  0023               	movlb	3	; select bank3
 17426  1DA0  00D5               	movwf	rfid_comm_process@ret^(0+384)
 17427                           
 17428                           ;rfid_demo.c: 218: if(!ret)break;
 17429  1DA1  0855               	movf	rfid_comm_process@ret^(0+384),w
 17430  1DA2  1903               	btfsc	3,2
 17431  1DA3  2DF8               	goto	l16241
 17432                           
 17433                           ;rfid_demo.c: 219: ui_disp_balance_and_volume();
 17434  1DA4  3194  247D  319D   	fcall	_ui_disp_balance_and_volume
 17435                           
 17436                           ;rfid_demo.c: 220: do { LATAbits.LATA2 = 1; } while(0);;do { LATFbits.LATF0 = 1; } while
      +                          (0);;do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;
 17437  1DA7  0022               	movlb	2	; select bank2
 17438  1DA8  150C               	bsf	12,2	;volatile
 17439  1DA9  0027               	movlb	7	; select bank7
 17440  1DAA  140C               	bsf	12,0	;volatile
 17441  1DAB  0022               	movlb	2	; select bank2
 17442  1DAC  118C               	bcf	12,3	;volatile
 17443  1DAD  0027               	movlb	7	; select bank7
 17444  1DAE  108C               	bcf	12,1	;volatile
 17445                           
 17446                           ;rfid_demo.c: 221: ret=rfid_comm_process_recharge();
 17447  1DAF  318B  2378  319D   	fcall	_rfid_comm_process_recharge
 17448  1DB2  0021               	movlb	1	; select bank1
 17449  1DB3  00EE               	movwf	??_rfid_comm_process^(0+128)
 17450  1DB4  086E               	movf	??_rfid_comm_process^(0+128),w
 17451  1DB5  0023               	movlb	3	; select bank3
 17452  1DB6  00D5               	movwf	rfid_comm_process@ret^(0+384)
 17453                           
 17454                           ;rfid_demo.c: 222: if(!ret){
 17455  1DB7  0855               	movf	rfid_comm_process@ret^(0+384),w
 17456  1DB8  1D03               	btfss	3,2
 17457  1DB9  2DC8               	goto	l16221
 17458                           
 17459                           ;rfid_demo.c: 223: if(CardError==RECHAERGE_OVERFLOW){
 17460  1DBA  3014               	movlw	20
 17461  1DBB  0022               	movlb	2	; select bank2
 17462  1DBC  0637               	xorwf	_CardError^(0+256),w
 17463  1DBD  1D03               	btfss	3,2
 17464  1DBE  2DCB               	goto	l16223
 17465                           
 17466                           ;rfid_demo.c: 224: lcd_disp_str((uint8_t*)("--full--"));
 17467  1DBF  309A               	movlw	low (STR_24| (0+32768))
 17468  1DC0  0020               	movlb	0	; select bank0
 17469  1DC1  00A2               	movwf	lcd_disp_str@str
 17470  1DC2  30B8               	movlw	high (STR_24| (0+32768))
 17471  1DC3  00A3               	movwf	lcd_disp_str@str+1
 17472  1DC4  31A8  20E8  319D   	fcall	_lcd_disp_str
 17473                           
 17474                           ;rfid_demo.c: 225: }
 17475                           ;rfid_demo.c: 226: }else{
 17476  1DC7  2DCB               	goto	l16223
 17477  1DC8                     l16221:	
 17478                           
 17479                           ;rfid_demo.c: 227: ui_disp_balance_and_volume();
 17480  1DC8  3194  247D  319D   	fcall	_ui_disp_balance_and_volume
 17481  1DCB                     l16223:	
 17482                           
 17483                           ;rfid_demo.c: 228: }
 17484                           ;rfid_demo.c: 229: for(ret=0;ret<15;ret++){
 17485  1DCB  0023               	movlb	3	; select bank3
 17486  1DCC  01D5               	clrf	rfid_comm_process@ret^(0+384)
 17487  1DCD  300F               	movlw	15
 17488  1DCE  0255               	subwf	rfid_comm_process@ret^(0+384),w
 17489  1DCF  1803               	btfsc	3,0
 17490  1DD0  2DED               	goto	l16237
 17491                           
 17492                           ;rfid_demo.c: 230: do { LATAbits.LATA2 = ~LATAbits.LATA2; } while(0);;
 17493  1DD1  1003               	clrc
 17494  1DD2                     L3:	
 17495  1DD2  0022               	movlb	2	; select bank2
 17496  1DD3  1D0C               	btfss	12,2	;volatile
 17497  1DD4  1403               	setc
 17498  1DD5  1C03               	btfss	3,0
 17499  1DD6  2DDA               	goto	u15260
 17500  1DD7  0022               	movlb	2	; select bank2
 17501  1DD8  150C               	bsf	12,2	;volatile
 17502  1DD9  2DDC               	goto	l16231
 17503  1DDA                     u15260:	
 17504  1DDA  0022               	movlb	2	; select bank2
 17505  1DDB  110C               	bcf	12,2	;volatile
 17506  1DDC                     l16231:	
 17507                           
 17508                           ;rfid_demo.c: 231: delay(0x904c);
 17509  1DDC  304C               	movlw	76
 17510  1DDD  00F3               	movwf	delay@t
 17511  1DDE  3090               	movlw	144
 17512  1DDF  00F4               	movwf	delay@t+1
 17513  1DE0  31BB  2389  319D   	fcall	_delay
 17514  1DE3  3001               	movlw	1
 17515  1DE4  0021               	movlb	1	; select bank1
 17516  1DE5  00EE               	movwf	??_rfid_comm_process^(0+128)
 17517  1DE6  086E               	movf	??_rfid_comm_process^(0+128),w
 17518  1DE7  0023               	movlb	3	; select bank3
 17519  1DE8  07D5               	addwf	rfid_comm_process@ret^(0+384),f
 17520  1DE9  300F               	movlw	15
 17521  1DEA  0255               	subwf	rfid_comm_process@ret^(0+384),w
 17522  1DEB  1C03               	skipc
 17523  1DEC  2DD2               	goto	L3
 17524  1DED                     l16237:	
 17525                           
 17526                           ;rfid_demo.c: 232: }
 17527                           ;rfid_demo.c: 233: CardError=NO_ERROR;
 17528  1DED  3015               	movlw	21
 17529  1DEE  0021               	movlb	1	; select bank1
 17530  1DEF  00EE               	movwf	??_rfid_comm_process^(0+128)
 17531  1DF0  086E               	movf	??_rfid_comm_process^(0+128),w
 17532  1DF1  0022               	movlb	2	; select bank2
 17533  1DF2  00B7               	movwf	_CardError^(0+256)
 17534                           
 17535                           ;rfid_demo.c: 234: do { LATAbits.LATA2 = 0; } while(0);;
 17536  1DF3  110C               	bcf	12,2	;volatile
 17537                           
 17538                           ;rfid_demo.c: 235: }else{
 17539  1DF4  2DF8               	goto	l16241
 17540  1DF5                     l1237:	
 17541                           
 17542                           ;rfid_demo.c: 236: valveCtrlflag=1;
 17543  1DF5  0023               	movlb	3	; select bank3
 17544  1DF6  01D4               	clrf	rfid_comm_process@valveCtrlflag^(0+384)
 17545  1DF7  0AD4               	incf	rfid_comm_process@valveCtrlflag^(0+384),f
 17546  1DF8                     l16241:	
 17547                           ;rfid_demo.c: 237: }
 17548                           ;rfid_demo.c: 238: } while (0);
 17549                           ;rfid_demo.c: 239: do{ picc_halt_a(); picc_stop_cryptol(); picc_halt_a(); }while(0);;
 17550                           
 17551  1DF8  31B5  2591  319D   	fcall	_picc_halt_a
 17552  1DFB  31BB  2323  319D   	fcall	_picc_stop_cryptol
 17553  1DFE  31B5  2591  319D   	fcall	_picc_halt_a
 17554                           
 17555                           ;rfid_demo.c: 240: findCardTimer=0;
 17556  1E01  0023               	movlb	3	; select bank3
 17557  1E02  01A0               	clrf	_findCardTimer^(0+384)
 17558  1E03  01A1               	clrf	(_findCardTimer+1)^(0+384)
 17559                           
 17560                           ;rfid_demo.c: 241: Event &= ~(0x01<<0);
 17561  1E04  30FE               	movlw	254
 17562  1E05  0021               	movlb	1	; select bank1
 17563  1E06  00EE               	movwf	??_rfid_comm_process^(0+128)
 17564  1E07  086E               	movf	??_rfid_comm_process^(0+128),w
 17565  1E08  05C7               	andwf	_Event^(0+128),f
 17566                           
 17567                           ;rfid_demo.c: 243: cardReadingFlag=0;
 17568  1E09  0022               	movlb	2	; select bank2
 17569  1E0A  01BB               	clrf	_cardReadingFlag^(0+256)
 17570                           
 17571                           ;rfid_demo.c: 245: if(valveCtrlflag){
 17572  1E0B  0023               	movlb	3	; select bank3
 17573  1E0C  0854               	movf	rfid_comm_process@valveCtrlflag^(0+384),w
 17574  1E0D  1903               	btfsc	3,2
 17575  1E0E  0008               	return
 17576                           
 17577                           ;rfid_demo.c: 246: if(valveStatus==VALVE_OPENED){
 17578  1E0F  3002               	movlw	2
 17579  1E10  067A               	xorwf	_valveStatus,w
 17580  1E11  1D03               	btfss	3,2
 17581  1E12  2E17               	goto	l16259
 17582                           
 17583                           ;rfid_demo.c: 247: in_app_vavle_off(OFF_REASON_MAN);
 17584  1E13  3002               	movlw	2
 17585  1E14  31B0  20BB  319D   	fcall	_in_app_vavle_off
 17586  1E17                     l16259:	
 17587                           
 17588                           ;rfid_demo.c: 249: }
 17589                           ;rfid_demo.c: 250: if(valveStatus==VALVE_CLOSED){
 17590  1E17  037A               	decf	_valveStatus,w
 17591  1E18  1D03               	btfss	3,2
 17592  1E19  0008               	return
 17593                           
 17594                           ;rfid_demo.c: 251: if(deviceStatus.bits.noEnough==0){
 17595  1E1A  0021               	movlb	1	; select bank1
 17596  1E1B  18C0               	btfsc	_deviceStatus^(0+128),1
 17597  1E1C  0008               	return
 17598                           
 17599                           ;rfid_demo.c: 252: in_app_vavle_on(ON_REASON_MAN);
 17600  1E1D  3004               	movlw	4
 17601  1E1E  31BF  271D         	fcall	_in_app_vavle_on
 17602  1E20  0008               	return
 17603  1E21                     __end_of_rfid_comm_process:	
 17604                           ;rfid_demo.c: 253: }
 17605                           ;rfid_demo.c: 255: }
 17606                           ;rfid_demo.c: 256: }
 17607                           ;rfid_demo.c: 258: return ret;
 17608                           ;	Return value of _rfid_comm_process is never used
 17609                           
 17610                           
 17611                           	psect	text40
 17612  147D                     __ptext40:	
 17613 ;; *************** function _ui_disp_balance_and_volume *****************
 17614 ;; Defined at:
 17615 ;;		line 267 in file "src/api/ui.c"
 17616 ;; Parameters:    Size  Location     Type
 17617 ;;		None
 17618 ;; Auto vars:     Size  Location     Type
 17619 ;;  ret             1   28[BANK0 ] unsigned char 
 17620 ;; Return value:  Size  Location     Type
 17621 ;;                  1    wreg      void 
 17622 ;; Registers used:
 17623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17624 ;; Tracked objects:
 17625 ;;		On entry : 0/0
 17626 ;;		On exit  : 0/0
 17627 ;;		Unchanged: 0/0
 17628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 17632 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 17633 ;;Total ram usage:        3 bytes
 17634 ;; Hardware stack levels used:    1
 17635 ;; Hardware stack levels required when called:    6
 17636 ;; This function calls:
 17637 ;;		___aldiv
 17638 ;;		_lcd_clear_buffer
 17639 ;;		_lcd_disp_cln
 17640 ;;		_lcd_disp_dp
 17641 ;;		_lcd_disp_str
 17642 ;;		_m_mem_set
 17643 ;;		_ui_disp_flow_error
 17644 ;;		_ui_head_hide
 17645 ;;		_ui_uint32_2_str
 17646 ;; This function is called by:
 17647 ;;		_ui_disp_clear_balance
 17648 ;;		_ui_disp_menu
 17649 ;;		_rfid_comm_process
 17650 ;; This function uses a non-reentrant model
 17651 ;;
 17652                           
 17653                           
 17654                           ;psect for function _ui_disp_balance_and_volume
 17655  147D                     _ui_disp_balance_and_volume:	
 17656                           
 17657                           ;ui.c: 269: uint8_t ret=0x00;
 17658                           
 17659                           ;incstack = 0
 17660                           ; Regs used in _ui_disp_balance_and_volume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17661  147D  0020               	movlb	0	; select bank0
 17662  147E  01BC               	clrf	ui_disp_balance_and_volume@ret
 17663                           
 17664                           ;ui.c: 270: if(flowError){
 17665  147F  0021               	movlb	1	; select bank1
 17666  1480  0846               	movf	_flowError^(0+128),w
 17667  1481  1903               	btfsc	3,2
 17668  1482  2C86               	goto	l13007
 17669                           
 17670                           ;ui.c: 271: ui_disp_flow_error();
 17671  1483  31BB  2341         	fcall	_ui_disp_flow_error
 17672                           
 17673                           ;ui.c: 272: return;
 17674  1485  0008               	return
 17675  1486                     l13007:	
 17676                           
 17677                           ;ui.c: 273: }
 17678                           ;ui.c: 274: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 17679  1486  3058               	movlw	low _lcdBuf
 17680  1487  00F3               	movwf	m_mem_set@buf
 17681  1488  3001               	movlw	high _lcdBuf
 17682  1489  00F4               	movwf	m_mem_set@buf+1
 17683  148A  3030               	movlw	48
 17684  148B  0020               	movlb	0	; select bank0
 17685  148C  00BA               	movwf	??_ui_disp_balance_and_volume
 17686  148D  083A               	movf	??_ui_disp_balance_and_volume,w
 17687  148E  00F5               	movwf	m_mem_set@x
 17688  148F  3009               	movlw	9
 17689  1490  00BB               	movwf	??_ui_disp_balance_and_volume+1
 17690  1491  083B               	movf	??_ui_disp_balance_and_volume+1,w
 17691  1492  00F6               	movwf	m_mem_set@len
 17692  1493  31BB  23E2  3194   	fcall	_m_mem_set
 17693                           
 17694                           ;ui.c: 276: __q31=rtBalanceMoney;
 17695  1496  0021               	movlb	1	; select bank1
 17696  1497  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 17697  1498  00AF               	movwf	(___q31+3)^(0+128)
 17698  1499  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 17699  149A  00AE               	movwf	(___q31+2)^(0+128)
 17700  149B  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 17701  149C  00AD               	movwf	(___q31+1)^(0+128)
 17702  149D  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 17703  149E  00AC               	movwf	___q31^(0+128)
 17704                           
 17705                           ;ui.c: 277: __q31/=100;
 17706  149F  3000               	movlw	0
 17707  14A0  0020               	movlb	0	; select bank0
 17708  14A1  00A3               	movwf	___aldiv@divisor+3
 17709  14A2  3000               	movlw	0
 17710  14A3  00A2               	movwf	___aldiv@divisor+2
 17711  14A4  3000               	movlw	0
 17712  14A5  00A1               	movwf	___aldiv@divisor+1
 17713  14A6  3064               	movlw	100
 17714  14A7  00A0               	movwf	___aldiv@divisor
 17715  14A8  0021               	movlb	1	; select bank1
 17716  14A9  082F               	movf	(___q31+3)^(0+128),w
 17717  14AA  0020               	movlb	0	; select bank0
 17718  14AB  00A7               	movwf	___aldiv@dividend+3
 17719  14AC  0021               	movlb	1	; select bank1
 17720  14AD  082E               	movf	(___q31+2)^(0+128),w
 17721  14AE  0020               	movlb	0	; select bank0
 17722  14AF  00A6               	movwf	___aldiv@dividend+2
 17723  14B0  0021               	movlb	1	; select bank1
 17724  14B1  082D               	movf	(___q31+1)^(0+128),w
 17725  14B2  0020               	movlb	0	; select bank0
 17726  14B3  00A5               	movwf	___aldiv@dividend+1
 17727  14B4  0021               	movlb	1	; select bank1
 17728  14B5  082C               	movf	___q31^(0+128),w
 17729  14B6  0020               	movlb	0	; select bank0
 17730  14B7  00A4               	movwf	___aldiv@dividend
 17731  14B8  31A0  2013  3194   	fcall	___aldiv
 17732  14BB  0020               	movlb	0	; select bank0
 17733  14BC  0823               	movf	?___aldiv+3,w
 17734  14BD  0021               	movlb	1	; select bank1
 17735  14BE  00AF               	movwf	(___q31+3)^(0+128)
 17736  14BF  0020               	movlb	0	; select bank0
 17737  14C0  0822               	movf	?___aldiv+2,w
 17738  14C1  0021               	movlb	1	; select bank1
 17739  14C2  00AE               	movwf	(___q31+2)^(0+128)
 17740  14C3  0020               	movlb	0	; select bank0
 17741  14C4  0821               	movf	?___aldiv+1,w
 17742  14C5  0021               	movlb	1	; select bank1
 17743  14C6  00AD               	movwf	(___q31+1)^(0+128)
 17744  14C7  0020               	movlb	0	; select bank0
 17745  14C8  0820               	movf	?___aldiv,w
 17746  14C9  0021               	movlb	1	; select bank1
 17747  14CA  00AC               	movwf	___q31^(0+128)
 17748                           
 17749                           ;ui.c: 278: if(__q31>=0){
 17750  14CB  1BAF               	btfsc	(___q31+3)^(0+128),7
 17751  14CC  2D04               	goto	l421
 17752                           
 17753                           ;ui.c: 279: if(__q31>3000)__q31=3000;
 17754  14CD  1BAF               	btfsc	(___q31+3)^(0+128),7
 17755  14CE  2CE3               	goto	l13019
 17756  14CF  082F               	movf	(___q31+3)^(0+128),w
 17757  14D0  1D03               	btfss	3,2
 17758  14D1  2CDB               	goto	l13017
 17759  14D2  082E               	movf	(___q31+2)^(0+128),w
 17760  14D3  1D03               	btfss	3,2
 17761  14D4  2CDB               	goto	l13017
 17762  14D5  30B9               	movlw	185
 17763  14D6  022C               	subwf	___q31^(0+128),w
 17764  14D7  300B               	movlw	11
 17765  14D8  3B2D               	subwfb	(___q31+1)^(0+128),w
 17766  14D9  1C03               	btfss	3,0
 17767  14DA  2CE3               	goto	l13019
 17768  14DB                     l13017:	
 17769  14DB  3000               	movlw	0
 17770  14DC  00AF               	movwf	(___q31+3)^(0+128)
 17771  14DD  3000               	movlw	0
 17772  14DE  00AE               	movwf	(___q31+2)^(0+128)
 17773  14DF  300B               	movlw	11
 17774  14E0  00AD               	movwf	(___q31+1)^(0+128)
 17775  14E1  30B8               	movlw	184
 17776  14E2  00AC               	movwf	___q31^(0+128)
 17777  14E3                     l13019:	
 17778                           
 17779                           ;ui.c: 280: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 4);
 17780  14E3  082F               	movf	(___q31+3)^(0+128),w
 17781  14E4  0020               	movlb	0	; select bank0
 17782  14E5  00B4               	movwf	ui_uint32_2_str@x+3
 17783  14E6  0021               	movlb	1	; select bank1
 17784  14E7  082E               	movf	(___q31+2)^(0+128),w
 17785  14E8  0020               	movlb	0	; select bank0
 17786  14E9  00B3               	movwf	ui_uint32_2_str@x+2
 17787  14EA  0021               	movlb	1	; select bank1
 17788  14EB  082D               	movf	(___q31+1)^(0+128),w
 17789  14EC  0020               	movlb	0	; select bank0
 17790  14ED  00B2               	movwf	ui_uint32_2_str@x+1
 17791  14EE  0021               	movlb	1	; select bank1
 17792  14EF  082C               	movf	___q31^(0+128),w
 17793  14F0  0020               	movlb	0	; select bank0
 17794  14F1  00B1               	movwf	ui_uint32_2_str@x
 17795  14F2  3004               	movlw	4
 17796  14F3  00BA               	movwf	??_ui_disp_balance_and_volume
 17797  14F4  083A               	movf	??_ui_disp_balance_and_volume,w
 17798  14F5  00B5               	movwf	ui_uint32_2_str@len
 17799  14F6  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 17800  14F7  31A7  2747  3194   	fcall	_ui_uint32_2_str
 17801                           
 17802                           ;ui.c: 281: ui_head_hide(lcdBuf+4, 3);
 17803  14FA  3003               	movlw	3
 17804  14FB  0020               	movlb	0	; select bank0
 17805  14FC  00BA               	movwf	??_ui_disp_balance_and_volume
 17806  14FD  083A               	movf	??_ui_disp_balance_and_volume,w
 17807  14FE  00F3               	movwf	ui_head_hide@loc
 17808  14FF  305C               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 17809  1500  31B0  2091  3194   	fcall	_ui_head_hide
 17810                           
 17811                           ;ui.c: 282: }else{
 17812  1503  2D56               	goto	l13035
 17813  1504                     l421:	
 17814                           
 17815                           ;ui.c: 283: __q31=0-__q31;
 17816  1504  09AC               	comf	___q31^(0+128),f
 17817  1505  09AD               	comf	(___q31+1)^(0+128),f
 17818  1506  09AE               	comf	(___q31+2)^(0+128),f
 17819  1507  09AF               	comf	(___q31+3)^(0+128),f
 17820  1508  0AAC               	incf	___q31^(0+128),f
 17821  1509  1903               	skipnz
 17822  150A  0AAD               	incf	(___q31+1)^(0+128),f
 17823  150B  1903               	skipnz
 17824  150C  0AAE               	incf	(___q31+2)^(0+128),f
 17825  150D  1903               	skipnz
 17826  150E  0AAF               	incf	(___q31+3)^(0+128),f
 17827                           
 17828                           ;ui.c: 284: if(__q31>999)__q31=999;
 17829  150F  1BAF               	btfsc	(___q31+3)^(0+128),7
 17830  1510  2D25               	goto	l13027
 17831  1511  082F               	movf	(___q31+3)^(0+128),w
 17832  1512  1D03               	btfss	3,2
 17833  1513  2D1D               	goto	l13025
 17834  1514  082E               	movf	(___q31+2)^(0+128),w
 17835  1515  1D03               	btfss	3,2
 17836  1516  2D1D               	goto	l13025
 17837  1517  30E8               	movlw	232
 17838  1518  022C               	subwf	___q31^(0+128),w
 17839  1519  3003               	movlw	3
 17840  151A  3B2D               	subwfb	(___q31+1)^(0+128),w
 17841  151B  1C03               	btfss	3,0
 17842  151C  2D25               	goto	l13027
 17843  151D                     l13025:	
 17844  151D  3000               	movlw	0
 17845  151E  00AF               	movwf	(___q31+3)^(0+128)
 17846  151F  3000               	movlw	0
 17847  1520  00AE               	movwf	(___q31+2)^(0+128)
 17848  1521  3003               	movlw	3
 17849  1522  00AD               	movwf	(___q31+1)^(0+128)
 17850  1523  30E7               	movlw	231
 17851  1524  00AC               	movwf	___q31^(0+128)
 17852  1525                     l13027:	
 17853                           
 17854                           ;ui.c: 285: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 4);
 17855  1525  082F               	movf	(___q31+3)^(0+128),w
 17856  1526  0020               	movlb	0	; select bank0
 17857  1527  00B4               	movwf	ui_uint32_2_str@x+3
 17858  1528  0021               	movlb	1	; select bank1
 17859  1529  082E               	movf	(___q31+2)^(0+128),w
 17860  152A  0020               	movlb	0	; select bank0
 17861  152B  00B3               	movwf	ui_uint32_2_str@x+2
 17862  152C  0021               	movlb	1	; select bank1
 17863  152D  082D               	movf	(___q31+1)^(0+128),w
 17864  152E  0020               	movlb	0	; select bank0
 17865  152F  00B2               	movwf	ui_uint32_2_str@x+1
 17866  1530  0021               	movlb	1	; select bank1
 17867  1531  082C               	movf	___q31^(0+128),w
 17868  1532  0020               	movlb	0	; select bank0
 17869  1533  00B1               	movwf	ui_uint32_2_str@x
 17870  1534  3004               	movlw	4
 17871  1535  00BA               	movwf	??_ui_disp_balance_and_volume
 17872  1536  083A               	movf	??_ui_disp_balance_and_volume,w
 17873  1537  00B5               	movwf	ui_uint32_2_str@len
 17874  1538  305F               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 17875  1539  31A7  2747  3194   	fcall	_ui_uint32_2_str
 17876                           
 17877                           ;ui.c: 286: ret=ui_head_hide(lcdBuf+4, 3);
 17878  153C  3003               	movlw	3
 17879  153D  0020               	movlb	0	; select bank0
 17880  153E  00BA               	movwf	??_ui_disp_balance_and_volume
 17881  153F  083A               	movf	??_ui_disp_balance_and_volume,w
 17882  1540  00F3               	movwf	ui_head_hide@loc
 17883  1541  305C               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 17884  1542  31B0  2091  3194   	fcall	_ui_head_hide
 17885  1545  0020               	movlb	0	; select bank0
 17886  1546  00BB               	movwf	??_ui_disp_balance_and_volume+1
 17887  1547  083B               	movf	??_ui_disp_balance_and_volume+1,w
 17888  1548  00BC               	movwf	ui_disp_balance_and_volume@ret
 17889                           
 17890                           ;ui.c: 287: if(ret)
 17891  1549  083C               	movf	ui_disp_balance_and_volume@ret,w
 17892  154A  1903               	btfsc	3,2
 17893  154B  2D56               	goto	l13035
 17894                           
 17895                           ;ui.c: 288: lcdBuf[4+ret-1]='-';
 17896  154C  302D               	movlw	45
 17897  154D  00BA               	movwf	??_ui_disp_balance_and_volume
 17898  154E  083C               	movf	ui_disp_balance_and_volume@ret,w
 17899  154F  3E03               	addlw	3
 17900  1550  3E58               	addlw	(low (_lcdBuf| (0+256)))& (0+255)
 17901  1551  0086               	movwf	6
 17902  1552  3001               	movlw	1	; select bank2/3
 17903  1553  0087               	movwf	7
 17904  1554  083A               	movf	??_ui_disp_balance_and_volume,w
 17905  1555  0081               	movwf	1
 17906  1556                     l13035:	
 17907                           
 17908                           ;ui.c: 290: }
 17909                           ;ui.c: 292: __q31=rtBalanceMoney;
 17910  1556  0021               	movlb	1	; select bank1
 17911  1557  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 17912  1558  00AF               	movwf	(___q31+3)^(0+128)
 17913  1559  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 17914  155A  00AE               	movwf	(___q31+2)^(0+128)
 17915  155B  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 17916  155C  00AD               	movwf	(___q31+1)^(0+128)
 17917  155D  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 17918  155E  00AC               	movwf	___q31^(0+128)
 17919                           
 17920                           ;ui.c: 293: __q31=__q31/mainSystemData.price;
 17921  155F  0024               	movlb	4	; select bank4
 17922  1560  0832               	movf	(_mainSystemData^(0+512)+18),w
 17923  1561  0020               	movlb	0	; select bank0
 17924  1562  00A0               	movwf	___aldiv@divisor
 17925  1563  0024               	movlb	4	; select bank4
 17926  1564  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 17927  1565  0020               	movlb	0	; select bank0
 17928  1566  00A1               	movwf	___aldiv@divisor+1
 17929  1567  0D89               	rlf	9,f
 17930  1568  3B89               	subwfb	9,f
 17931  1569  0989               	comf	9,f
 17932  156A  00A2               	movwf	___aldiv@divisor+2
 17933  156B  00A3               	movwf	___aldiv@divisor+3
 17934  156C  0021               	movlb	1	; select bank1
 17935  156D  082F               	movf	(___q31+3)^(0+128),w
 17936  156E  0020               	movlb	0	; select bank0
 17937  156F  00A7               	movwf	___aldiv@dividend+3
 17938  1570  0021               	movlb	1	; select bank1
 17939  1571  082E               	movf	(___q31+2)^(0+128),w
 17940  1572  0020               	movlb	0	; select bank0
 17941  1573  00A6               	movwf	___aldiv@dividend+2
 17942  1574  0021               	movlb	1	; select bank1
 17943  1575  082D               	movf	(___q31+1)^(0+128),w
 17944  1576  0020               	movlb	0	; select bank0
 17945  1577  00A5               	movwf	___aldiv@dividend+1
 17946  1578  0021               	movlb	1	; select bank1
 17947  1579  082C               	movf	___q31^(0+128),w
 17948  157A  0020               	movlb	0	; select bank0
 17949  157B  00A4               	movwf	___aldiv@dividend
 17950  157C  31A0  2013  3194   	fcall	___aldiv
 17951  157F  0020               	movlb	0	; select bank0
 17952  1580  0823               	movf	?___aldiv+3,w
 17953  1581  0021               	movlb	1	; select bank1
 17954  1582  00AF               	movwf	(___q31+3)^(0+128)
 17955  1583  0020               	movlb	0	; select bank0
 17956  1584  0822               	movf	?___aldiv+2,w
 17957  1585  0021               	movlb	1	; select bank1
 17958  1586  00AE               	movwf	(___q31+2)^(0+128)
 17959  1587  0020               	movlb	0	; select bank0
 17960  1588  0821               	movf	?___aldiv+1,w
 17961  1589  0021               	movlb	1	; select bank1
 17962  158A  00AD               	movwf	(___q31+1)^(0+128)
 17963  158B  0020               	movlb	0	; select bank0
 17964  158C  0820               	movf	?___aldiv,w
 17965  158D  0021               	movlb	1	; select bank1
 17966  158E  00AC               	movwf	___q31^(0+128)
 17967                           
 17968                           ;ui.c: 295: if(__q31>=0){
 17969  158F  1BAF               	btfsc	(___q31+3)^(0+128),7
 17970  1590  2DC8               	goto	l426
 17971                           
 17972                           ;ui.c: 296: if(__q31>9999)__q31=9999;
 17973  1591  1BAF               	btfsc	(___q31+3)^(0+128),7
 17974  1592  2DA7               	goto	l13045
 17975  1593  082F               	movf	(___q31+3)^(0+128),w
 17976  1594  1D03               	btfss	3,2
 17977  1595  2D9F               	goto	l13043
 17978  1596  082E               	movf	(___q31+2)^(0+128),w
 17979  1597  1D03               	btfss	3,2
 17980  1598  2D9F               	goto	l13043
 17981  1599  3010               	movlw	16
 17982  159A  022C               	subwf	___q31^(0+128),w
 17983  159B  3027               	movlw	39
 17984  159C  3B2D               	subwfb	(___q31+1)^(0+128),w
 17985  159D  1C03               	btfss	3,0
 17986  159E  2DA7               	goto	l13045
 17987  159F                     l13043:	
 17988  159F  3000               	movlw	0
 17989  15A0  00AF               	movwf	(___q31+3)^(0+128)
 17990  15A1  3000               	movlw	0
 17991  15A2  00AE               	movwf	(___q31+2)^(0+128)
 17992  15A3  3027               	movlw	39
 17993  15A4  00AD               	movwf	(___q31+1)^(0+128)
 17994  15A5  300F               	movlw	15
 17995  15A6  00AC               	movwf	___q31^(0+128)
 17996  15A7                     l13045:	
 17997                           
 17998                           ;ui.c: 297: ui_uint32_2_str(lcdBuf + 3, __q31, 4);
 17999  15A7  082F               	movf	(___q31+3)^(0+128),w
 18000  15A8  0020               	movlb	0	; select bank0
 18001  15A9  00B4               	movwf	ui_uint32_2_str@x+3
 18002  15AA  0021               	movlb	1	; select bank1
 18003  15AB  082E               	movf	(___q31+2)^(0+128),w
 18004  15AC  0020               	movlb	0	; select bank0
 18005  15AD  00B3               	movwf	ui_uint32_2_str@x+2
 18006  15AE  0021               	movlb	1	; select bank1
 18007  15AF  082D               	movf	(___q31+1)^(0+128),w
 18008  15B0  0020               	movlb	0	; select bank0
 18009  15B1  00B2               	movwf	ui_uint32_2_str@x+1
 18010  15B2  0021               	movlb	1	; select bank1
 18011  15B3  082C               	movf	___q31^(0+128),w
 18012  15B4  0020               	movlb	0	; select bank0
 18013  15B5  00B1               	movwf	ui_uint32_2_str@x
 18014  15B6  3004               	movlw	4
 18015  15B7  00BA               	movwf	??_ui_disp_balance_and_volume
 18016  15B8  083A               	movf	??_ui_disp_balance_and_volume,w
 18017  15B9  00B5               	movwf	ui_uint32_2_str@len
 18018  15BA  305B               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 18019  15BB  31A7  2747  3194   	fcall	_ui_uint32_2_str
 18020                           
 18021                           ;ui.c: 298: ui_head_hide(lcdBuf, 3);
 18022  15BE  3003               	movlw	3
 18023  15BF  0020               	movlb	0	; select bank0
 18024  15C0  00BA               	movwf	??_ui_disp_balance_and_volume
 18025  15C1  083A               	movf	??_ui_disp_balance_and_volume,w
 18026  15C2  00F3               	movwf	ui_head_hide@loc
 18027  15C3  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 18028  15C4  31B0  2091  3194   	fcall	_ui_head_hide
 18029                           
 18030                           ;ui.c: 299: }else{
 18031  15C7  2E1A               	goto	l13061
 18032  15C8                     l426:	
 18033                           
 18034                           ;ui.c: 300: __q31=0-__q31;
 18035  15C8  09AC               	comf	___q31^(0+128),f
 18036  15C9  09AD               	comf	(___q31+1)^(0+128),f
 18037  15CA  09AE               	comf	(___q31+2)^(0+128),f
 18038  15CB  09AF               	comf	(___q31+3)^(0+128),f
 18039  15CC  0AAC               	incf	___q31^(0+128),f
 18040  15CD  1903               	skipnz
 18041  15CE  0AAD               	incf	(___q31+1)^(0+128),f
 18042  15CF  1903               	skipnz
 18043  15D0  0AAE               	incf	(___q31+2)^(0+128),f
 18044  15D1  1903               	skipnz
 18045  15D2  0AAF               	incf	(___q31+3)^(0+128),f
 18046                           
 18047                           ;ui.c: 301: if(__q31>999)__q31=999;
 18048  15D3  1BAF               	btfsc	(___q31+3)^(0+128),7
 18049  15D4  2DE9               	goto	l13053
 18050  15D5  082F               	movf	(___q31+3)^(0+128),w
 18051  15D6  1D03               	btfss	3,2
 18052  15D7  2DE1               	goto	l13051
 18053  15D8  082E               	movf	(___q31+2)^(0+128),w
 18054  15D9  1D03               	btfss	3,2
 18055  15DA  2DE1               	goto	l13051
 18056  15DB  30E8               	movlw	232
 18057  15DC  022C               	subwf	___q31^(0+128),w
 18058  15DD  3003               	movlw	3
 18059  15DE  3B2D               	subwfb	(___q31+1)^(0+128),w
 18060  15DF  1C03               	btfss	3,0
 18061  15E0  2DE9               	goto	l13053
 18062  15E1                     l13051:	
 18063  15E1  3000               	movlw	0
 18064  15E2  00AF               	movwf	(___q31+3)^(0+128)
 18065  15E3  3000               	movlw	0
 18066  15E4  00AE               	movwf	(___q31+2)^(0+128)
 18067  15E5  3003               	movlw	3
 18068  15E6  00AD               	movwf	(___q31+1)^(0+128)
 18069  15E7  30E7               	movlw	231
 18070  15E8  00AC               	movwf	___q31^(0+128)
 18071  15E9                     l13053:	
 18072                           
 18073                           ;ui.c: 302: ui_uint32_2_str(lcdBuf + 3, __q31, 3);
 18074  15E9  082F               	movf	(___q31+3)^(0+128),w
 18075  15EA  0020               	movlb	0	; select bank0
 18076  15EB  00B4               	movwf	ui_uint32_2_str@x+3
 18077  15EC  0021               	movlb	1	; select bank1
 18078  15ED  082E               	movf	(___q31+2)^(0+128),w
 18079  15EE  0020               	movlb	0	; select bank0
 18080  15EF  00B3               	movwf	ui_uint32_2_str@x+2
 18081  15F0  0021               	movlb	1	; select bank1
 18082  15F1  082D               	movf	(___q31+1)^(0+128),w
 18083  15F2  0020               	movlb	0	; select bank0
 18084  15F3  00B2               	movwf	ui_uint32_2_str@x+1
 18085  15F4  0021               	movlb	1	; select bank1
 18086  15F5  082C               	movf	___q31^(0+128),w
 18087  15F6  0020               	movlb	0	; select bank0
 18088  15F7  00B1               	movwf	ui_uint32_2_str@x
 18089  15F8  3003               	movlw	3
 18090  15F9  00BA               	movwf	??_ui_disp_balance_and_volume
 18091  15FA  083A               	movf	??_ui_disp_balance_and_volume,w
 18092  15FB  00B5               	movwf	ui_uint32_2_str@len
 18093  15FC  305B               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 18094  15FD  31A7  2747  3194   	fcall	_ui_uint32_2_str
 18095                           
 18096                           ;ui.c: 303: ret=ui_head_hide(lcdBuf, 3);
 18097  1600  3003               	movlw	3
 18098  1601  0020               	movlb	0	; select bank0
 18099  1602  00BA               	movwf	??_ui_disp_balance_and_volume
 18100  1603  083A               	movf	??_ui_disp_balance_and_volume,w
 18101  1604  00F3               	movwf	ui_head_hide@loc
 18102  1605  3058               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 18103  1606  31B0  2091  3194   	fcall	_ui_head_hide
 18104  1609  0020               	movlb	0	; select bank0
 18105  160A  00BB               	movwf	??_ui_disp_balance_and_volume+1
 18106  160B  083B               	movf	??_ui_disp_balance_and_volume+1,w
 18107  160C  00BC               	movwf	ui_disp_balance_and_volume@ret
 18108                           
 18109                           ;ui.c: 304: if(ret)
 18110  160D  083C               	movf	ui_disp_balance_and_volume@ret,w
 18111  160E  1903               	btfsc	3,2
 18112  160F  2E1A               	goto	l13061
 18113                           
 18114                           ;ui.c: 305: lcdBuf[0+ret-1]='-';
 18115  1610  302D               	movlw	45
 18116  1611  00BA               	movwf	??_ui_disp_balance_and_volume
 18117  1612  083C               	movf	ui_disp_balance_and_volume@ret,w
 18118  1613  3EFF               	addlw	255
 18119  1614  3E58               	addlw	(low (_lcdBuf| (0+256)))& (0+255)
 18120  1615  0086               	movwf	6
 18121  1616  3001               	movlw	1	; select bank2/3
 18122  1617  0087               	movwf	7
 18123  1618  083A               	movf	??_ui_disp_balance_and_volume,w
 18124  1619  0081               	movwf	1
 18125  161A                     l13061:	
 18126                           
 18127                           ;ui.c: 306: }
 18128                           ;ui.c: 307: lcd_clear_buffer();
 18129  161A  31BB  2358  3194   	fcall	_lcd_clear_buffer
 18130                           
 18131                           ;ui.c: 308: lcd_disp_cln(1);
 18132  161D  3001               	movlw	1
 18133  161E  31BD  25EF  3194   	fcall	_lcd_disp_cln
 18134                           
 18135                           ;ui.c: 309: lcd_disp_dp(4,1);
 18136  1621  0020               	movlb	0	; select bank0
 18137  1622  01B2               	clrf	lcd_disp_dp@show
 18138  1623  0AB2               	incf	lcd_disp_dp@show,f
 18139  1624  3004               	movlw	4
 18140  1625  31AC  24DC  3194   	fcall	_lcd_disp_dp
 18141                           
 18142                           ;ui.c: 311: lcd_disp_str(lcdBuf);
 18143  1628  3058               	movlw	low _lcdBuf
 18144  1629  0020               	movlb	0	; select bank0
 18145  162A  00A2               	movwf	lcd_disp_str@str
 18146  162B  3001               	movlw	high _lcdBuf
 18147  162C  00A3               	movwf	lcd_disp_str@str+1
 18148  162D  31A8  20E8         	fcall	_lcd_disp_str
 18149  162F  0008               	return
 18150  1630                     __end_of_ui_disp_balance_and_volume:	
 18151                           
 18152                           	psect	text41
 18153  2747                     __ptext41:	
 18154 ;; *************** function _ui_uint32_2_str *****************
 18155 ;; Defined at:
 18156 ;;		line 25 in file "src/api/ui.c"
 18157 ;; Parameters:    Size  Location     Type
 18158 ;;  buf             1    wreg     PTR unsigned char 
 18159 ;;		 -> lcdBuf(9), 
 18160 ;;  x               4   17[BANK0 ] long 
 18161 ;;  len             1   21[BANK0 ] unsigned char 
 18162 ;; Auto vars:     Size  Location     Type
 18163 ;;  buf             1    7[COMMON] PTR unsigned char 
 18164 ;;		 -> lcdBuf(9), 
 18165 ;; Return value:  Size  Location     Type
 18166 ;;                  1    wreg      void 
 18167 ;; Registers used:
 18168 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18169 ;; Tracked objects:
 18170 ;;		On entry : 0/0
 18171 ;;		On exit  : 0/0
 18172 ;;		Unchanged: 0/0
 18173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18174 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18175 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18176 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18177 ;;      Totals:         1       9       0       0       0       0       0       0       0       0       0       0       
      +0
 18178 ;;Total ram usage:       10 bytes
 18179 ;; Hardware stack levels used:    1
 18180 ;; Hardware stack levels required when called:    4
 18181 ;; This function calls:
 18182 ;;		___aldiv
 18183 ;;		___almod
 18184 ;;		_m_math_pow
 18185 ;; This function is called by:
 18186 ;;		_ui_disp_flow
 18187 ;;		_ui_disp_totale_v
 18188 ;;		_ui_disp_transfer_money
 18189 ;;		_ui_disp_balance_and_volume
 18190 ;;		_ui_disp_set_line
 18191 ;;		_ui_disp_set_price
 18192 ;;		_ui_disp_set_calib
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           
 18197                           ;psect for function _ui_uint32_2_str
 18198  2747                     _ui_uint32_2_str:	
 18199                           
 18200                           ;incstack = 0
 18201                           ; Regs used in _ui_uint32_2_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18202                           ;ui_uint32_2_str@buf stored from wreg
 18203  2747  00F7               	movwf	ui_uint32_2_str@buf
 18204                           
 18205                           ;ui.c: 27: if (!len)return;
 18206  2748  0020               	movlb	0	; select bank0
 18207  2749  0835               	movf	ui_uint32_2_str@len,w
 18208  274A  1903               	btfsc	3,2
 18209  274B  0008               	return
 18210                           
 18211                           ;ui.c: 28: __t32 = m_math_pow(10, len);
 18212  274C  3000               	movlw	0
 18213  274D  00AB               	movwf	m_math_pow@x+3
 18214  274E  3000               	movlw	0
 18215  274F  00AA               	movwf	m_math_pow@x+2
 18216  2750  3000               	movlw	0
 18217  2751  00A9               	movwf	m_math_pow@x+1
 18218  2752  300A               	movlw	10
 18219  2753  00A8               	movwf	m_math_pow@x
 18220  2754  0835               	movf	ui_uint32_2_str@len,w
 18221  2755  00B6               	movwf	??_ui_uint32_2_str
 18222  2756  0836               	movf	??_ui_uint32_2_str,w
 18223  2757  00AC               	movwf	m_math_pow@y
 18224  2758  31B6  26F9  31A7   	fcall	_m_math_pow
 18225  275B  0020               	movlb	0	; select bank0
 18226  275C  082B               	movf	?_m_math_pow+3,w
 18227  275D  0021               	movlb	1	; select bank1
 18228  275E  00B7               	movwf	(___t32+3)^(0+128)
 18229  275F  0020               	movlb	0	; select bank0
 18230  2760  082A               	movf	?_m_math_pow+2,w
 18231  2761  0021               	movlb	1	; select bank1
 18232  2762  00B6               	movwf	(___t32+2)^(0+128)
 18233  2763  0020               	movlb	0	; select bank0
 18234  2764  0829               	movf	?_m_math_pow+1,w
 18235  2765  0021               	movlb	1	; select bank1
 18236  2766  00B5               	movwf	(___t32+1)^(0+128)
 18237  2767  0020               	movlb	0	; select bank0
 18238  2768  0828               	movf	?_m_math_pow,w
 18239  2769  0021               	movlb	1	; select bank1
 18240  276A  00B4               	movwf	___t32^(0+128)
 18241                           
 18242                           ;ui.c: 29: if (x >= __t32 - 1)x = __t32 - 1;
 18243  276B  30FF               	movlw	255
 18244  276C  0020               	movlb	0	; select bank0
 18245  276D  00B6               	movwf	??_ui_uint32_2_str
 18246  276E  30FF               	movlw	255
 18247  276F  00B7               	movwf	??_ui_uint32_2_str+1
 18248  2770  30FF               	movlw	255
 18249  2771  00B8               	movwf	??_ui_uint32_2_str+2
 18250  2772  30FF               	movlw	255
 18251  2773  00B9               	movwf	??_ui_uint32_2_str+3
 18252  2774  0021               	movlb	1	; select bank1
 18253  2775  0834               	movf	___t32^(0+128),w
 18254  2776  0020               	movlb	0	; select bank0
 18255  2777  07B6               	addwf	??_ui_uint32_2_str,f
 18256  2778  0021               	movlb	1	; select bank1
 18257  2779  0835               	movf	(___t32+1)^(0+128),w
 18258  277A  0020               	movlb	0	; select bank0
 18259  277B  3DB7               	addwfc	??_ui_uint32_2_str+1,f
 18260  277C  0021               	movlb	1	; select bank1
 18261  277D  0836               	movf	(___t32+2)^(0+128),w
 18262  277E  0020               	movlb	0	; select bank0
 18263  277F  3DB8               	addwfc	??_ui_uint32_2_str+2,f
 18264  2780  0021               	movlb	1	; select bank1
 18265  2781  0837               	movf	(___t32+3)^(0+128),w
 18266  2782  0020               	movlb	0	; select bank0
 18267  2783  3DB9               	addwfc	??_ui_uint32_2_str+3,f
 18268  2784  0839               	movf	??_ui_uint32_2_str+3,w
 18269  2785  0234               	subwf	ui_uint32_2_str@x+3,w
 18270  2786  1D03               	skipz
 18271  2787  2F92               	goto	u11315
 18272  2788  0838               	movf	??_ui_uint32_2_str+2,w
 18273  2789  0233               	subwf	ui_uint32_2_str@x+2,w
 18274  278A  1D03               	skipz
 18275  278B  2F92               	goto	u11315
 18276  278C  0837               	movf	??_ui_uint32_2_str+1,w
 18277  278D  0232               	subwf	ui_uint32_2_str@x+1,w
 18278  278E  1D03               	skipz
 18279  278F  2F92               	goto	u11315
 18280  2790  0836               	movf	??_ui_uint32_2_str,w
 18281  2791  0231               	subwf	ui_uint32_2_str@x,w
 18282  2792                     u11315:	
 18283  2792  1C03               	skipc
 18284  2793  2FA8               	goto	l12791
 18285  2794  30FF               	movlw	255
 18286  2795  0021               	movlb	1	; select bank1
 18287  2796  0734               	addwf	___t32^(0+128),w
 18288  2797  0020               	movlb	0	; select bank0
 18289  2798  00B1               	movwf	ui_uint32_2_str@x
 18290  2799  30FF               	movlw	255
 18291  279A  0021               	movlb	1	; select bank1
 18292  279B  3D35               	addwfc	(___t32+1)^(0+128),w
 18293  279C  0020               	movlb	0	; select bank0
 18294  279D  00B2               	movwf	ui_uint32_2_str@x+1
 18295  279E  30FF               	movlw	255
 18296  279F  0021               	movlb	1	; select bank1
 18297  27A0  3D36               	addwfc	(___t32+2)^(0+128),w
 18298  27A1  0020               	movlb	0	; select bank0
 18299  27A2  00B3               	movwf	ui_uint32_2_str@x+2
 18300  27A3  30FF               	movlw	255
 18301  27A4  0021               	movlb	1	; select bank1
 18302  27A5  3D37               	addwfc	(___t32+3)^(0+128),w
 18303  27A6  0020               	movlb	0	; select bank0
 18304  27A7  00B4               	movwf	ui_uint32_2_str@x+3
 18305  27A8                     l12791:	
 18306                           ;ui.c: 30: while (len--) {
 18307                           
 18308  27A8  3001               	movlw	1
 18309  27A9  02B5               	subwf	ui_uint32_2_str@len,f
 18310  27AA  0A35               	incf	ui_uint32_2_str@len,w
 18311  27AB  1903               	btfsc	3,2
 18312  27AC  0008               	return
 18313                           
 18314                           ;ui.c: 31: __t32 = x % 10;
 18315  27AD  3000               	movlw	0
 18316  27AE  00A3               	movwf	___almod@divisor+3
 18317  27AF  3000               	movlw	0
 18318  27B0  00A2               	movwf	___almod@divisor+2
 18319  27B1  3000               	movlw	0
 18320  27B2  00A1               	movwf	___almod@divisor+1
 18321  27B3  300A               	movlw	10
 18322  27B4  00A0               	movwf	___almod@divisor
 18323  27B5  0834               	movf	ui_uint32_2_str@x+3,w
 18324  27B6  00A7               	movwf	___almod@dividend+3
 18325  27B7  0833               	movf	ui_uint32_2_str@x+2,w
 18326  27B8  00A6               	movwf	___almod@dividend+2
 18327  27B9  0832               	movf	ui_uint32_2_str@x+1,w
 18328  27BA  00A5               	movwf	___almod@dividend+1
 18329  27BB  0831               	movf	ui_uint32_2_str@x,w
 18330  27BC  00A4               	movwf	___almod@dividend
 18331  27BD  31AD  2542  31A7   	fcall	___almod
 18332  27C0  0020               	movlb	0	; select bank0
 18333  27C1  0823               	movf	?___almod+3,w
 18334  27C2  0021               	movlb	1	; select bank1
 18335  27C3  00B7               	movwf	(___t32+3)^(0+128)
 18336  27C4  0020               	movlb	0	; select bank0
 18337  27C5  0822               	movf	?___almod+2,w
 18338  27C6  0021               	movlb	1	; select bank1
 18339  27C7  00B6               	movwf	(___t32+2)^(0+128)
 18340  27C8  0020               	movlb	0	; select bank0
 18341  27C9  0821               	movf	?___almod+1,w
 18342  27CA  0021               	movlb	1	; select bank1
 18343  27CB  00B5               	movwf	(___t32+1)^(0+128)
 18344  27CC  0020               	movlb	0	; select bank0
 18345  27CD  0820               	movf	?___almod,w
 18346  27CE  0021               	movlb	1	; select bank1
 18347  27CF  00B4               	movwf	___t32^(0+128)
 18348                           
 18349                           ;ui.c: 32: *buf-- = hexTable[__t32];
 18350  27D0  0835               	movf	(___t32+1)^(0+128),w
 18351  27D1  0085               	movwf	5
 18352  27D2  0834               	movf	___t32^(0+128),w
 18353  27D3  0084               	movwf	4
 18354  27D4  3069               	movlw	low (_hexTable| (0+32768))
 18355  27D5  0784               	addwf	4,f
 18356  27D6  30B8               	movlw	high (_hexTable| (0+32768))
 18357  27D7  3D85               	addwfc	5,f
 18358  27D8  0800               	movf	0,w	;code access
 18359  27D9  0020               	movlb	0	; select bank0
 18360  27DA  00B6               	movwf	??_ui_uint32_2_str
 18361  27DB  0877               	movf	ui_uint32_2_str@buf,w
 18362  27DC  0086               	movwf	6
 18363  27DD  3001               	movlw	1	; select bank2/3
 18364  27DE  0087               	movwf	7
 18365  27DF  0836               	movf	??_ui_uint32_2_str,w
 18366  27E0  0081               	movwf	1
 18367  27E1  3001               	movlw	1
 18368  27E2  02F7               	subwf	ui_uint32_2_str@buf,f
 18369                           
 18370                           ;ui.c: 33: x /= 10;
 18371  27E3  3000               	movlw	0
 18372  27E4  00A3               	movwf	___aldiv@divisor+3
 18373  27E5  3000               	movlw	0
 18374  27E6  00A2               	movwf	___aldiv@divisor+2
 18375  27E7  3000               	movlw	0
 18376  27E8  00A1               	movwf	___aldiv@divisor+1
 18377  27E9  300A               	movlw	10
 18378  27EA  00A0               	movwf	___aldiv@divisor
 18379  27EB  0834               	movf	ui_uint32_2_str@x+3,w
 18380  27EC  00A7               	movwf	___aldiv@dividend+3
 18381  27ED  0833               	movf	ui_uint32_2_str@x+2,w
 18382  27EE  00A6               	movwf	___aldiv@dividend+2
 18383  27EF  0832               	movf	ui_uint32_2_str@x+1,w
 18384  27F0  00A5               	movwf	___aldiv@dividend+1
 18385  27F1  0831               	movf	ui_uint32_2_str@x,w
 18386  27F2  00A4               	movwf	___aldiv@dividend
 18387  27F3  31A0  2013  31A7   	fcall	___aldiv
 18388  27F6  0020               	movlb	0	; select bank0
 18389  27F7  0823               	movf	?___aldiv+3,w
 18390  27F8  00B4               	movwf	ui_uint32_2_str@x+3
 18391  27F9  0822               	movf	?___aldiv+2,w
 18392  27FA  00B3               	movwf	ui_uint32_2_str@x+2
 18393  27FB  0821               	movf	?___aldiv+1,w
 18394  27FC  00B2               	movwf	ui_uint32_2_str@x+1
 18395  27FD  0820               	movf	?___aldiv,w
 18396  27FE  00B1               	movwf	ui_uint32_2_str@x
 18397  27FF  2FA8               	goto	l12791
 18398  2800                     __end_of_ui_uint32_2_str:	
 18399                           
 18400                           	psect	text42
 18401  36F9                     __ptext42:	
 18402 ;; *************** function _m_math_pow *****************
 18403 ;; Defined at:
 18404 ;;		line 116 in file "src/depend/m_string.c"
 18405 ;; Parameters:    Size  Location     Type
 18406 ;;  x               4    8[BANK0 ] long 
 18407 ;;  y               1   12[BANK0 ] unsigned char 
 18408 ;; Auto vars:     Size  Location     Type
 18409 ;;  ret             4   13[BANK0 ] long 
 18410 ;; Return value:  Size  Location     Type
 18411 ;;                  4    8[BANK0 ] long 
 18412 ;; Registers used:
 18413 ;;		wreg, status,2, status,0, pclath, cstack
 18414 ;; Tracked objects:
 18415 ;;		On entry : 0/0
 18416 ;;		On exit  : 0/0
 18417 ;;		Unchanged: 0/0
 18418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18419 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18420 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18422 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0
 18423 ;;Total ram usage:        9 bytes
 18424 ;; Hardware stack levels used:    1
 18425 ;; Hardware stack levels required when called:    3
 18426 ;; This function calls:
 18427 ;;		___lmul
 18428 ;; This function is called by:
 18429 ;;		_ui_uint32_2_str
 18430 ;; This function uses a non-reentrant model
 18431 ;;
 18432                           
 18433                           
 18434                           ;psect for function _m_math_pow
 18435  36F9                     _m_math_pow:	
 18436                           
 18437                           ;m_string.c: 118: int32_t ret=1;
 18438                           
 18439                           ;incstack = 0
 18440                           ; Regs used in _m_math_pow: [wreg+status,2+status,0+pclath+cstack]
 18441  36F9  3000               	movlw	0
 18442  36FA  0020               	movlb	0	; select bank0
 18443  36FB  00B0               	movwf	m_math_pow@ret+3
 18444  36FC  3000               	movlw	0
 18445  36FD  00AF               	movwf	m_math_pow@ret+2
 18446  36FE  3000               	movlw	0
 18447  36FF  00AE               	movwf	m_math_pow@ret+1
 18448  3700  3001               	movlw	1
 18449  3701  00AD               	movwf	m_math_pow@ret
 18450                           
 18451                           ;m_string.c: 119: if(y==0)return 1;
 18452  3702  082C               	movf	m_math_pow@y,w
 18453  3703  1D03               	btfss	3,2
 18454  3704  2F2A               	goto	l12629
 18455  3705  3000               	movlw	0
 18456  3706  00AB               	movwf	?_m_math_pow+3
 18457  3707  3000               	movlw	0
 18458  3708  00AA               	movwf	?_m_math_pow+2
 18459  3709  3000               	movlw	0
 18460  370A  00A9               	movwf	?_m_math_pow+1
 18461  370B  3001               	movlw	1
 18462  370C  00A8               	movwf	?_m_math_pow
 18463  370D  0008               	return
 18464  370E                     l12627:	
 18465                           ;m_string.c: 120: while(y--)
 18466                           
 18467                           
 18468                           ;m_string.c: 121: {
 18469                           ;m_string.c: 122: ret*=x;
 18470  370E  082B               	movf	m_math_pow@x+3,w
 18471  370F  00A3               	movwf	___lmul@multiplier+3
 18472  3710  082A               	movf	m_math_pow@x+2,w
 18473  3711  00A2               	movwf	___lmul@multiplier+2
 18474  3712  0829               	movf	m_math_pow@x+1,w
 18475  3713  00A1               	movwf	___lmul@multiplier+1
 18476  3714  0828               	movf	m_math_pow@x,w
 18477  3715  00A0               	movwf	___lmul@multiplier
 18478  3716  0830               	movf	m_math_pow@ret+3,w
 18479  3717  00A7               	movwf	___lmul@multiplicand+3
 18480  3718  082F               	movf	m_math_pow@ret+2,w
 18481  3719  00A6               	movwf	___lmul@multiplicand+2
 18482  371A  082E               	movf	m_math_pow@ret+1,w
 18483  371B  00A5               	movwf	___lmul@multiplicand+1
 18484  371C  082D               	movf	m_math_pow@ret,w
 18485  371D  00A4               	movwf	___lmul@multiplicand
 18486  371E  31B3  2369  31B6   	fcall	___lmul
 18487  3721  0020               	movlb	0	; select bank0
 18488  3722  0823               	movf	?___lmul+3,w
 18489  3723  00B0               	movwf	m_math_pow@ret+3
 18490  3724  0822               	movf	?___lmul+2,w
 18491  3725  00AF               	movwf	m_math_pow@ret+2
 18492  3726  0821               	movf	?___lmul+1,w
 18493  3727  00AE               	movwf	m_math_pow@ret+1
 18494  3728  0820               	movf	?___lmul,w
 18495  3729  00AD               	movwf	m_math_pow@ret
 18496  372A                     l12629:	
 18497  372A  3001               	movlw	1
 18498  372B  02AC               	subwf	m_math_pow@y,f
 18499  372C  0A2C               	incf	m_math_pow@y,w
 18500  372D  1D03               	btfss	3,2
 18501  372E  2F0E               	goto	l12627
 18502                           
 18503                           ;m_string.c: 123: }
 18504                           ;m_string.c: 124: return ret;
 18505  372F  0830               	movf	m_math_pow@ret+3,w
 18506  3730  00AB               	movwf	?_m_math_pow+3
 18507  3731  082F               	movf	m_math_pow@ret+2,w
 18508  3732  00AA               	movwf	?_m_math_pow+2
 18509  3733  082E               	movf	m_math_pow@ret+1,w
 18510  3734  00A9               	movwf	?_m_math_pow+1
 18511  3735  082D               	movf	m_math_pow@ret,w
 18512  3736  00A8               	movwf	?_m_math_pow
 18513  3737  0008               	return
 18514  3738                     __end_of_m_math_pow:	
 18515                           
 18516                           	psect	text43
 18517  2D42                     __ptext43:	
 18518 ;; *************** function ___almod *****************
 18519 ;; Defined at:
 18520 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\almod.c"
 18521 ;; Parameters:    Size  Location     Type
 18522 ;;  divisor         4    0[BANK0 ] long 
 18523 ;;  dividend        4    4[BANK0 ] long 
 18524 ;; Auto vars:     Size  Location     Type
 18525 ;;  sign            1    5[COMMON] unsigned char 
 18526 ;;  counter         1    4[COMMON] unsigned char 
 18527 ;; Return value:  Size  Location     Type
 18528 ;;                  4    0[BANK0 ] long 
 18529 ;; Registers used:
 18530 ;;		wreg, status,2, status,0
 18531 ;; Tracked objects:
 18532 ;;		On entry : 0/0
 18533 ;;		On exit  : 0/0
 18534 ;;		Unchanged: 0/0
 18535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18536 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 18537 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18539 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0
 18540 ;;Total ram usage:       11 bytes
 18541 ;; Hardware stack levels used:    1
 18542 ;; Hardware stack levels required when called:    2
 18543 ;; This function calls:
 18544 ;;		Nothing
 18545 ;; This function is called by:
 18546 ;;		_ui_uint32_2_str
 18547 ;; This function uses a non-reentrant model
 18548 ;;
 18549                           
 18550                           
 18551                           ;psect for function ___almod
 18552  2D42                     ___almod:	
 18553                           
 18554                           ;incstack = 0
 18555                           ; Regs used in ___almod: [wreg+status,2+status,0]
 18556  2D42  01F5               	clrf	___almod@sign
 18557  2D43  0020               	movlb	0	; select bank0
 18558  2D44  1FA7               	btfss	___almod@dividend+3,7
 18559  2D45  2D53               	goto	l2771
 18560  2D46  09A4               	comf	___almod@dividend,f
 18561  2D47  09A5               	comf	___almod@dividend+1,f
 18562  2D48  09A6               	comf	___almod@dividend+2,f
 18563  2D49  09A7               	comf	___almod@dividend+3,f
 18564  2D4A  0AA4               	incf	___almod@dividend,f
 18565  2D4B  1903               	skipnz
 18566  2D4C  0AA5               	incf	___almod@dividend+1,f
 18567  2D4D  1903               	skipnz
 18568  2D4E  0AA6               	incf	___almod@dividend+2,f
 18569  2D4F  1903               	skipnz
 18570  2D50  0AA7               	incf	___almod@dividend+3,f
 18571  2D51  01F5               	clrf	___almod@sign
 18572  2D52  0AF5               	incf	___almod@sign,f
 18573  2D53                     l2771:	
 18574  2D53  1FA3               	btfss	___almod@divisor+3,7
 18575  2D54  2D60               	goto	l12749
 18576  2D55  09A0               	comf	___almod@divisor,f
 18577  2D56  09A1               	comf	___almod@divisor+1,f
 18578  2D57  09A2               	comf	___almod@divisor+2,f
 18579  2D58  09A3               	comf	___almod@divisor+3,f
 18580  2D59  0AA0               	incf	___almod@divisor,f
 18581  2D5A  1903               	skipnz
 18582  2D5B  0AA1               	incf	___almod@divisor+1,f
 18583  2D5C  1903               	skipnz
 18584  2D5D  0AA2               	incf	___almod@divisor+2,f
 18585  2D5E  1903               	skipnz
 18586  2D5F  0AA3               	incf	___almod@divisor+3,f
 18587  2D60                     l12749:	
 18588  2D60  0823               	movf	___almod@divisor+3,w
 18589  2D61  0422               	iorwf	___almod@divisor+2,w
 18590  2D62  0421               	iorwf	___almod@divisor+1,w
 18591  2D63  0420               	iorwf	___almod@divisor,w
 18592  2D64  1903               	skipnz
 18593  2D65  2D99               	goto	l12765
 18594  2D66  01F4               	clrf	___almod@counter
 18595  2D67  0AF4               	incf	___almod@counter,f
 18596  2D68                     l12755:	
 18597  2D68  1BA3               	btfsc	___almod@divisor+3,7
 18598  2D69  2D76               	goto	l12757
 18599  2D6A  3001               	movlw	1
 18600  2D6B                     u11245:	
 18601  2D6B  35A0               	lslf	___almod@divisor,f
 18602  2D6C  0DA1               	rlf	___almod@divisor+1,f
 18603  2D6D  0DA2               	rlf	___almod@divisor+2,f
 18604  2D6E  0DA3               	rlf	___almod@divisor+3,f
 18605  2D6F  0B89               	decfsz	9,f
 18606  2D70  2D6B               	goto	u11245
 18607  2D71  3001               	movlw	1
 18608  2D72  00F3               	movwf	??___almod
 18609  2D73  0873               	movf	??___almod,w
 18610  2D74  07F4               	addwf	___almod@counter,f
 18611  2D75  2D68               	goto	l12755
 18612  2D76                     l12757:	
 18613  2D76  0823               	movf	___almod@divisor+3,w
 18614  2D77  0227               	subwf	___almod@dividend+3,w
 18615  2D78  1D03               	skipz
 18616  2D79  2D84               	goto	u11265
 18617  2D7A  0822               	movf	___almod@divisor+2,w
 18618  2D7B  0226               	subwf	___almod@dividend+2,w
 18619  2D7C  1D03               	skipz
 18620  2D7D  2D84               	goto	u11265
 18621  2D7E  0821               	movf	___almod@divisor+1,w
 18622  2D7F  0225               	subwf	___almod@dividend+1,w
 18623  2D80  1D03               	skipz
 18624  2D81  2D84               	goto	u11265
 18625  2D82  0820               	movf	___almod@divisor,w
 18626  2D83  0224               	subwf	___almod@dividend,w
 18627  2D84                     u11265:	
 18628  2D84  1C03               	skipc
 18629  2D85  2D8E               	goto	l12761
 18630  2D86  0820               	movf	___almod@divisor,w
 18631  2D87  02A4               	subwf	___almod@dividend,f
 18632  2D88  0821               	movf	___almod@divisor+1,w
 18633  2D89  3BA5               	subwfb	___almod@dividend+1,f
 18634  2D8A  0822               	movf	___almod@divisor+2,w
 18635  2D8B  3BA6               	subwfb	___almod@dividend+2,f
 18636  2D8C  0823               	movf	___almod@divisor+3,w
 18637  2D8D  3BA7               	subwfb	___almod@dividend+3,f
 18638  2D8E                     l12761:	
 18639  2D8E  3001               	movlw	1
 18640  2D8F                     u11275:	
 18641  2D8F  36A3               	lsrf	___almod@divisor+3,f
 18642  2D90  0CA2               	rrf	___almod@divisor+2,f
 18643  2D91  0CA1               	rrf	___almod@divisor+1,f
 18644  2D92  0CA0               	rrf	___almod@divisor,f
 18645  2D93  0B89               	decfsz	9,f
 18646  2D94  2D8F               	goto	u11275
 18647  2D95  3001               	movlw	1
 18648  2D96  02F4               	subwf	___almod@counter,f
 18649  2D97  1D03               	btfss	3,2
 18650  2D98  2D76               	goto	l12757
 18651  2D99                     l12765:	
 18652  2D99  0875               	movf	___almod@sign,w
 18653  2D9A  1903               	btfsc	3,2
 18654  2D9B  2DA7               	goto	l12769
 18655  2D9C  09A4               	comf	___almod@dividend,f
 18656  2D9D  09A5               	comf	___almod@dividend+1,f
 18657  2D9E  09A6               	comf	___almod@dividend+2,f
 18658  2D9F  09A7               	comf	___almod@dividend+3,f
 18659  2DA0  0AA4               	incf	___almod@dividend,f
 18660  2DA1  1903               	skipnz
 18661  2DA2  0AA5               	incf	___almod@dividend+1,f
 18662  2DA3  1903               	skipnz
 18663  2DA4  0AA6               	incf	___almod@dividend+2,f
 18664  2DA5  1903               	skipnz
 18665  2DA6  0AA7               	incf	___almod@dividend+3,f
 18666  2DA7                     l12769:	
 18667  2DA7  0827               	movf	___almod@dividend+3,w
 18668  2DA8  00A3               	movwf	?___almod+3
 18669  2DA9  0826               	movf	___almod@dividend+2,w
 18670  2DAA  00A2               	movwf	?___almod+2
 18671  2DAB  0825               	movf	___almod@dividend+1,w
 18672  2DAC  00A1               	movwf	?___almod+1
 18673  2DAD  0824               	movf	___almod@dividend,w
 18674  2DAE  00A0               	movwf	?___almod
 18675  2DAF  0008               	return
 18676  2DB0                     __end_of___almod:	
 18677                           
 18678                           	psect	text44
 18679  3091                     __ptext44:	
 18680 ;; *************** function _ui_head_hide *****************
 18681 ;; Defined at:
 18682 ;;		line 36 in file "src/api/ui.c"
 18683 ;; Parameters:    Size  Location     Type
 18684 ;;  str             1    wreg     PTR unsigned char 
 18685 ;;		 -> lcdBuf(9), 
 18686 ;;  loc             1    3[COMMON] unsigned char 
 18687 ;; Auto vars:     Size  Location     Type
 18688 ;;  str             1    6[COMMON] PTR unsigned char 
 18689 ;;		 -> lcdBuf(9), 
 18690 ;;  ret             1    5[COMMON] unsigned char 
 18691 ;; Return value:  Size  Location     Type
 18692 ;;                  1    wreg      unsigned char 
 18693 ;; Registers used:
 18694 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18695 ;; Tracked objects:
 18696 ;;		On entry : 0/0
 18697 ;;		On exit  : 0/0
 18698 ;;		Unchanged: 0/0
 18699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18700 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18701 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18702 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18703 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18704 ;;Total ram usage:        4 bytes
 18705 ;; Hardware stack levels used:    1
 18706 ;; Hardware stack levels required when called:    2
 18707 ;; This function calls:
 18708 ;;		Nothing
 18709 ;; This function is called by:
 18710 ;;		_ui_disp_flow
 18711 ;;		_ui_disp_totale_v
 18712 ;;		_ui_disp_transfer_money
 18713 ;;		_ui_disp_balance_and_volume
 18714 ;;		_ui_disp_set_price
 18715 ;;		_ui_disp_set_calib
 18716 ;; This function uses a non-reentrant model
 18717 ;;
 18718                           
 18719                           
 18720                           ;psect for function _ui_head_hide
 18721  3091                     _ui_head_hide:	
 18722                           
 18723                           ;incstack = 0
 18724                           ; Regs used in _ui_head_hide: [wreg+fsr1l+fsr1h+status,2+status,0]
 18725                           ;ui_head_hide@str stored from wreg
 18726  3091  00F6               	movwf	ui_head_hide@str
 18727                           
 18728                           ;ui.c: 37: uint8_t ret=0;
 18729  3092  01F5               	clrf	ui_head_hide@ret
 18730  3093                     l12805:	
 18731                           ;ui.c: 38: while (loc--) {
 18732                           
 18733  3093  3001               	movlw	1
 18734  3094  02F3               	subwf	ui_head_hide@loc,f
 18735  3095  0A73               	incf	ui_head_hide@loc,w
 18736  3096  1903               	btfsc	3,2
 18737  3097  28B9               	goto	l12807
 18738                           
 18739                           ;ui.c: 39: if (*str == '0' || *str == ' ') {
 18740  3098  0876               	movf	ui_head_hide@str,w
 18741  3099  0086               	movwf	6
 18742  309A  3001               	movlw	1	; select bank2/3
 18743  309B  0087               	movwf	7
 18744  309C  3030               	movlw	48
 18745  309D  0601               	xorwf	1,w
 18746  309E  1903               	btfsc	3,2
 18747  309F  28A8               	goto	l12799
 18748  30A0  0876               	movf	ui_head_hide@str,w
 18749  30A1  0086               	movwf	6
 18750  30A2  3001               	movlw	1	; select bank2/3
 18751  30A3  0087               	movwf	7
 18752  30A4  3020               	movlw	32
 18753  30A5  0601               	xorwf	1,w
 18754  30A6  1D03               	btfss	3,2
 18755  30A7  28B9               	goto	l12807
 18756  30A8                     l12799:	
 18757                           
 18758                           ;ui.c: 40: *str++ = ' ';
 18759  30A8  3020               	movlw	32
 18760  30A9  00F4               	movwf	??_ui_head_hide
 18761  30AA  0876               	movf	ui_head_hide@str,w
 18762  30AB  0086               	movwf	6
 18763  30AC  3001               	movlw	1	; select bank2/3
 18764  30AD  0087               	movwf	7
 18765  30AE  0874               	movf	??_ui_head_hide,w
 18766  30AF  0081               	movwf	1
 18767  30B0  3001               	movlw	1
 18768  30B1  00F4               	movwf	??_ui_head_hide
 18769  30B2  0874               	movf	??_ui_head_hide,w
 18770  30B3  07F6               	addwf	ui_head_hide@str,f
 18771                           
 18772                           ;ui.c: 41: ret++;
 18773  30B4  3001               	movlw	1
 18774  30B5  00F4               	movwf	??_ui_head_hide
 18775  30B6  0874               	movf	??_ui_head_hide,w
 18776  30B7  07F5               	addwf	ui_head_hide@ret,f
 18777                           
 18778                           ;ui.c: 42: } else {
 18779  30B8  2893               	goto	l12805
 18780  30B9                     l12807:	
 18781                           ;ui.c: 43: break;
 18782                           
 18783                           
 18784                           ;ui.c: 44: }
 18785                           ;ui.c: 45: }
 18786                           ;ui.c: 46: return ret;
 18787  30B9  0875               	movf	ui_head_hide@ret,w
 18788  30BA  0008               	return
 18789  30BB                     __end_of_ui_head_hide:	
 18790                           
 18791                           	psect	text45
 18792  3B41                     __ptext45:	
 18793 ;; *************** function _ui_disp_flow_error *****************
 18794 ;; Defined at:
 18795 ;;		line 136 in file "src/api/ui.c"
 18796 ;; Parameters:    Size  Location     Type
 18797 ;;		None
 18798 ;; Auto vars:     Size  Location     Type
 18799 ;;		None
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  1    wreg      void 
 18802 ;; Registers used:
 18803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18813 ;;Total ram usage:        0 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    5
 18816 ;; This function calls:
 18817 ;;		_lcd_clear_buffer
 18818 ;;		_lcd_disp_str
 18819 ;; This function is called by:
 18820 ;;		_ui_disp_flow
 18821 ;;		_ui_disp_totale_v
 18822 ;;		_ui_disp_balance_and_volume
 18823 ;; This function uses a non-reentrant model
 18824 ;;
 18825                           
 18826                           
 18827                           ;psect for function _ui_disp_flow_error
 18828  3B41                     _ui_disp_flow_error:	
 18829                           
 18830                           ;ui.c: 138: lcd_clear_buffer();
 18831                           
 18832                           ;incstack = 0
 18833                           ; Regs used in _ui_disp_flow_error: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18834  3B41  31BB  2358  31BB   	fcall	_lcd_clear_buffer
 18835                           
 18836                           ;ui.c: 139: lcd_disp_str((uint8_t*)"  error ");
 18837  3B44  30D0               	movlw	low (STR_3| (0+32768))
 18838  3B45  0020               	movlb	0	; select bank0
 18839  3B46  00A2               	movwf	lcd_disp_str@str
 18840  3B47  30B8               	movlw	high (STR_3| (0+32768))
 18841  3B48  00A3               	movwf	lcd_disp_str@str+1
 18842  3B49  31A8  20E8         	fcall	_lcd_disp_str
 18843  3B4B  0008               	return
 18844  3B4C                     __end_of_ui_disp_flow_error:	
 18845                           
 18846                           	psect	text46
 18847  28E8                     __ptext46:	
 18848 ;; *************** function _lcd_disp_str *****************
 18849 ;; Defined at:
 18850 ;;		line 180 in file "src/driver/lcd.c"
 18851 ;; Parameters:    Size  Location     Type
 18852 ;;  str             2    2[BANK0 ] PTR unsigned char 
 18853 ;;		 -> STR_24(9), STR_22(9), STR_21(9), STR_20(9), 
 18854 ;;		 -> STR_19(9), STR_18(9), STR_17(9), STR_16(9), 
 18855 ;;		 -> STR_15(9), STR_7(9), STR_4(9), STR_3(9), 
 18856 ;;		 -> STR_1(9), lcdBuf(9), 
 18857 ;; Auto vars:     Size  Location     Type
 18858 ;;  index           1    6[BANK0 ] unsigned char 
 18859 ;;  loc             1    5[BANK0 ] unsigned char 
 18860 ;; Return value:  Size  Location     Type
 18861 ;;                  1    wreg      void 
 18862 ;; Registers used:
 18863 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18864 ;; Tracked objects:
 18865 ;;		On entry : 0/0
 18866 ;;		On exit  : 0/0
 18867 ;;		Unchanged: 0/0
 18868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18869 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18872 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 18873 ;;Total ram usage:        5 bytes
 18874 ;; Hardware stack levels used:    1
 18875 ;; Hardware stack levels required when called:    4
 18876 ;; This function calls:
 18877 ;;		_lcd_disp_code
 18878 ;;		_lcd_disp_refresh
 18879 ;; This function is called by:
 18880 ;;		_ui_disp_str_num
 18881 ;;		_ui_disp_str_num_ex
 18882 ;;		_ui_start_display
 18883 ;;		_ui_disp_flow_error
 18884 ;;		_ui_disp_flow
 18885 ;;		_ui_disp_totale_v
 18886 ;;		_ui_disp_transfer_money
 18887 ;;		_ui_disp_balance_and_volume
 18888 ;;		_ui_disp_set_line
 18889 ;;		_ui_disp_set_price
 18890 ;;		_ui_disp_set_calib
 18891 ;;		_ui_disp_set_imd_flow_uint
 18892 ;;		_ui_disp_menu
 18893 ;;		_rfid_comm_process
 18894 ;;		_ui_disp_recharge
 18895 ;;		_ui_disp_clear_card_id
 18896 ;; This function uses a non-reentrant model
 18897 ;;
 18898                           
 18899                           
 18900                           ;psect for function _lcd_disp_str
 18901  28E8                     _lcd_disp_str:	
 18902                           
 18903                           ;lcd.c: 182: uint8_t loc=0;
 18904                           
 18905                           ;incstack = 0
 18906                           ; Regs used in _lcd_disp_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18907  28E8  0020               	movlb	0	; select bank0
 18908  28E9  01A5               	clrf	lcd_disp_str@loc
 18909                           
 18910                           ;lcd.c: 183: uint8_t index=0;
 18911  28EA  01A6               	clrf	lcd_disp_str@index
 18912  28EB                     l12661:	
 18913                           ;lcd.c: 184: while(*str!='\0'){
 18914                           
 18915  28EB  0822               	movf	lcd_disp_str@str,w
 18916  28EC  0084               	movwf	4
 18917  28ED  0823               	movf	lcd_disp_str@str+1,w
 18918  28EE  0085               	movwf	5
 18919  28EF  0012               	moviw fsr0++
 18920  28F0  1903               	btfsc	3,2
 18921  28F1  292D               	goto	l12663
 18922                           
 18923                           ;lcd.c: 185: for(index=0;index<40;index++){
 18924  28F2  01A6               	clrf	lcd_disp_str@index
 18925  28F3  3028               	movlw	40
 18926  28F4  0226               	subwf	lcd_disp_str@index,w
 18927  28F5  1803               	btfsc	3,0
 18928  28F6  2910               	goto	l12653
 18929  28F7                     l12645:	
 18930                           
 18931                           ;lcd.c: 186: if(*str==LCDDigitalIndexTable[index])break;
 18932  28F7  0826               	movf	lcd_disp_str@index,w
 18933  28F8  3E00               	addlw	low (_LCDDigitalIndexTable| (0+32768))
 18934  28F9  0084               	movwf	4
 18935  28FA  30B8               	movlw	high (_LCDDigitalIndexTable| (0+32768))
 18936  28FB  1803               	skipnc
 18937  28FC  3E01               	addlw	1
 18938  28FD  0085               	movwf	5
 18939  28FE  0800               	movf	0,w	;code access
 18940  28FF  00A4               	movwf	??_lcd_disp_str
 18941  2900  0822               	movf	lcd_disp_str@str,w
 18942  2901  0084               	movwf	4
 18943  2902  0823               	movf	lcd_disp_str@str+1,w
 18944  2903  0085               	movwf	5
 18945  2904  0800               	movf	0,w	;code access
 18946  2905  0624               	xorwf	??_lcd_disp_str,w
 18947  2906  1903               	btfsc	3,2
 18948  2907  2910               	goto	l12653
 18949  2908  3001               	movlw	1
 18950  2909  00A4               	movwf	??_lcd_disp_str
 18951  290A  0824               	movf	??_lcd_disp_str,w
 18952  290B  07A6               	addwf	lcd_disp_str@index,f
 18953  290C  3028               	movlw	40
 18954  290D  0226               	subwf	lcd_disp_str@index,w
 18955  290E  1C03               	skipc
 18956  290F  28F7               	goto	l12645
 18957  2910                     l12653:	
 18958                           
 18959                           ;lcd.c: 187: }
 18960                           ;lcd.c: 188: if(index<40)lcd_disp_code(LCDDigitalTable[index],loc);
 18961  2910  3028               	movlw	40
 18962  2911  0226               	subwf	lcd_disp_str@index,w
 18963  2912  1803               	skipnc
 18964  2913  2923               	goto	l12657
 18965  2914  0825               	movf	lcd_disp_str@loc,w
 18966  2915  00A4               	movwf	??_lcd_disp_str
 18967  2916  0824               	movf	??_lcd_disp_str,w
 18968  2917  00F5               	movwf	lcd_disp_code@loc
 18969  2918  0826               	movf	lcd_disp_str@index,w
 18970  2919  3E29               	addlw	low (_LCDDigitalTable| (0+32768))
 18971  291A  0084               	movwf	4
 18972  291B  30B8               	movlw	high (_LCDDigitalTable| (0+32768))
 18973  291C  1803               	skipnc
 18974  291D  3E01               	addlw	1
 18975  291E  0085               	movwf	5
 18976  291F  0800               	movf	0,w	;code access
 18977  2920  31B1  2111  31A8   	fcall	_lcd_disp_code
 18978  2923                     l12657:	
 18979                           
 18980                           ;lcd.c: 189: str++;
 18981  2923  3001               	movlw	1
 18982  2924  0020               	movlb	0	; select bank0
 18983  2925  07A2               	addwf	lcd_disp_str@str,f
 18984  2926  3000               	movlw	0
 18985  2927  3DA3               	addwfc	lcd_disp_str@str+1,f
 18986                           
 18987                           ;lcd.c: 190: loc++;
 18988  2928  3001               	movlw	1
 18989  2929  00A4               	movwf	??_lcd_disp_str
 18990  292A  0824               	movf	??_lcd_disp_str,w
 18991  292B  07A5               	addwf	lcd_disp_str@loc,f
 18992  292C  28EB               	goto	l12661
 18993  292D                     l12663:	
 18994                           
 18995                           ;lcd.c: 191: }
 18996                           ;lcd.c: 192: lcd_disp_refresh();
 18997  292D  31BC  2403         	fcall	_lcd_disp_refresh
 18998  292F  0008               	return
 18999  2930                     __end_of_lcd_disp_str:	
 19000                           
 19001                           	psect	text47
 19002  3C03                     __ptext47:	
 19003 ;; *************** function _lcd_disp_refresh *****************
 19004 ;; Defined at:
 19005 ;;		line 202 in file "src/driver/lcd.c"
 19006 ;; Parameters:    Size  Location     Type
 19007 ;;		None
 19008 ;; Auto vars:     Size  Location     Type
 19009 ;;		None
 19010 ;; Return value:  Size  Location     Type
 19011 ;;                  1    wreg      void 
 19012 ;; Registers used:
 19013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19014 ;; Tracked objects:
 19015 ;;		On entry : 0/0
 19016 ;;		On exit  : 0/0
 19017 ;;		Unchanged: 0/0
 19018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19022 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19023 ;;Total ram usage:        1 bytes
 19024 ;; Hardware stack levels used:    1
 19025 ;; Hardware stack levels required when called:    3
 19026 ;; This function calls:
 19027 ;;		_m_mem_cpy_len
 19028 ;; This function is called by:
 19029 ;;		_ui_disp_menu
 19030 ;;		_lcd_disp_str
 19031 ;; This function uses a non-reentrant model
 19032 ;;
 19033                           
 19034                           
 19035                           ;psect for function _lcd_disp_refresh
 19036  3C03                     _lcd_disp_refresh:	
 19037                           
 19038                           ;lcd.c: 204: m_mem_cpy_len(pLcdReg,pLCD,24);
 19039                           
 19040                           ;incstack = 0
 19041                           ; Regs used in _lcd_disp_refresh: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19042  3C03  0022               	movlb	2	; select bank2
 19043  3C04  086A               	movf	(_pLcdReg+1)^(0+256),w
 19044  3C05  00F4               	movwf	m_mem_cpy_len@d+1
 19045  3C06  0869               	movf	_pLcdReg^(0+256),w
 19046  3C07  00F3               	movwf	m_mem_cpy_len@d
 19047  3C08  30A6               	movlw	low _pLCD
 19048  3C09  00F5               	movwf	m_mem_cpy_len@s
 19049  3C0A  3001               	movlw	high _pLCD
 19050  3C0B  00F6               	movwf	m_mem_cpy_len@s+1
 19051  3C0C  3018               	movlw	24
 19052  3C0D  0020               	movlb	0	; select bank0
 19053  3C0E  00A1               	movwf	??_lcd_disp_refresh
 19054  3C0F  0821               	movf	??_lcd_disp_refresh,w
 19055  3C10  00F7               	movwf	m_mem_cpy_len@len
 19056  3C11  31BD  259E         	fcall	_m_mem_cpy_len
 19057  3C13  0008               	return
 19058  3C14                     __end_of_lcd_disp_refresh:	
 19059                           
 19060                           	psect	text48
 19061  3111                     __ptext48:	
 19062 ;; *************** function _lcd_disp_code *****************
 19063 ;; Defined at:
 19064 ;;		line 157 in file "src/driver/lcd.c"
 19065 ;; Parameters:    Size  Location     Type
 19066 ;;  code            1    wreg     unsigned char 
 19067 ;;  loc             1    5[COMMON] unsigned char 
 19068 ;; Auto vars:     Size  Location     Type
 19069 ;;  code            1    6[COMMON] unsigned char 
 19070 ;; Return value:  Size  Location     Type
 19071 ;;                  1    wreg      void 
 19072 ;; Registers used:
 19073 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19074 ;; Tracked objects:
 19075 ;;		On entry : 0/0
 19076 ;;		On exit  : 0/0
 19077 ;;		Unchanged: 0/0
 19078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19079 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19083 ;;Total ram usage:        2 bytes
 19084 ;; Hardware stack levels used:    1
 19085 ;; Hardware stack levels required when called:    3
 19086 ;; This function calls:
 19087 ;;		_lcd_disp_code_0
 19088 ;;		_lcd_disp_code_1
 19089 ;;		_lcd_disp_code_2
 19090 ;;		_lcd_disp_code_3
 19091 ;;		_lcd_disp_code_4
 19092 ;;		_lcd_disp_code_5
 19093 ;;		_lcd_disp_code_6
 19094 ;;		_lcd_disp_code_7
 19095 ;; This function is called by:
 19096 ;;		_lcd_disp_str
 19097 ;; This function uses a non-reentrant model
 19098 ;;
 19099                           
 19100                           
 19101                           ;psect for function _lcd_disp_code
 19102  3111                     _lcd_disp_code:	
 19103                           
 19104                           ;incstack = 0
 19105                           ; Regs used in _lcd_disp_code: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19106                           ;lcd_disp_code@code stored from wreg
 19107  3111  00F6               	movwf	lcd_disp_code@code
 19108                           
 19109                           ;lcd.c: 159: switch(loc){
 19110  3112  2933               	goto	l12505
 19111  3113                     l12487:	
 19112                           ;lcd.c: 160: case 0:lcd_disp_code_0(code);break;
 19113                           
 19114  3113  0876               	movf	lcd_disp_code@code,w
 19115  3114  31B1  216B         	fcall	_lcd_disp_code_0
 19116  3116  0008               	return
 19117  3117                     l12489:	
 19118                           ;lcd.c: 161: case 1:lcd_disp_code_1(code);break;
 19119                           
 19120  3117  0876               	movf	lcd_disp_code@code,w
 19121  3118  31B1  2199         	fcall	_lcd_disp_code_1
 19122  311A  0008               	return
 19123  311B                     l12491:	
 19124                           ;lcd.c: 162: case 2:lcd_disp_code_2(code);break;
 19125                           
 19126  311B  0876               	movf	lcd_disp_code@code,w
 19127  311C  31B1  21C7         	fcall	_lcd_disp_code_2
 19128  311E  0008               	return
 19129  311F                     l12493:	
 19130                           ;lcd.c: 163: case 3:lcd_disp_code_3(code);break;
 19131                           
 19132  311F  0876               	movf	lcd_disp_code@code,w
 19133  3120  31B1  21F5         	fcall	_lcd_disp_code_3
 19134  3122  0008               	return
 19135  3123                     l12495:	
 19136                           ;lcd.c: 164: case 4:lcd_disp_code_4(code);break;
 19137                           
 19138  3123  0876               	movf	lcd_disp_code@code,w
 19139  3124  31B2  2223         	fcall	_lcd_disp_code_4
 19140  3126  0008               	return
 19141  3127                     l12497:	
 19142                           ;lcd.c: 165: case 5:lcd_disp_code_5(code);break;
 19143                           
 19144  3127  0876               	movf	lcd_disp_code@code,w
 19145  3128  31B2  2251         	fcall	_lcd_disp_code_5
 19146  312A  0008               	return
 19147  312B                     l12499:	
 19148                           ;lcd.c: 166: case 6:lcd_disp_code_6(code);break;
 19149                           
 19150  312B  0876               	movf	lcd_disp_code@code,w
 19151  312C  31B2  227F         	fcall	_lcd_disp_code_6
 19152  312E  0008               	return
 19153  312F                     l12501:	
 19154                           ;lcd.c: 167: case 7:lcd_disp_code_7(code);break;
 19155                           
 19156  312F  0876               	movf	lcd_disp_code@code,w
 19157  3130  31B2  22AD         	fcall	_lcd_disp_code_7
 19158                           
 19159                           ;lcd.c: 169: }
 19160                           
 19161                           ;lcd.c: 168: default:break;
 19162  3132  0008               	return
 19163  3133                     l12505:	
 19164  3133  0875               	movf	lcd_disp_code@loc,w
 19165                           
 19166                           ; Switch size 1, requested type "space"
 19167                           ; Number of cases is 8, Range of values is 0 to 7
 19168                           ; switch strategies available:
 19169                           ; Name         Instructions Cycles
 19170                           ; direct_byte           22     6 (fixed)
 19171                           ; simple_byte           25    13 (average)
 19172                           ; jumptable            260     6 (fixed)
 19173                           ;	Chosen strategy is direct_byte
 19174  3134  0084               	movwf	4
 19175  3135  3008               	movlw	8
 19176  3136  0204               	subwf	4,w
 19177  3137  1803               	skipnc
 19178  3138  0008               	return
 19179  3139  31B8               	movlp	high S17355
 19180  313A  3504               	lslf	4,w
 19181  313B  3E7A               	addlw	low S17355
 19182  313C  0082               	movwf	2
 19183  313D  0008               	return
 19184  313E                     __end_of_lcd_disp_code:	
 19185                           
 19186                           	psect	swtext1
 19187  387A                     __pswtext1:	
 19188  387A                     S17355:	
 19189  387A  31B1  2913         	ljmp	l12487
 19190  387C  31B1  2917         	ljmp	l12489
 19191  387E  31B1  291B         	ljmp	l12491
 19192  3880  31B1  291F         	ljmp	l12493
 19193  3882  31B1  2923         	ljmp	l12495
 19194  3884  31B1  2927         	ljmp	l12497
 19195  3886  31B1  292B         	ljmp	l12499
 19196  3888  31B1  292F         	ljmp	l12501
 19197                           
 19198                           	psect	text49
 19199  32AD                     __ptext49:	
 19200 ;; *************** function _lcd_disp_code_7 *****************
 19201 ;; Defined at:
 19202 ;;		line 145 in file "src/driver/lcd.c"
 19203 ;; Parameters:    Size  Location     Type
 19204 ;;  code            1    wreg     unsigned char 
 19205 ;; Auto vars:     Size  Location     Type
 19206 ;;  code            1    4[COMMON] unsigned char 
 19207 ;; Return value:  Size  Location     Type
 19208 ;;                  1    wreg      void 
 19209 ;; Registers used:
 19210 ;;		wreg, status,2, status,0
 19211 ;; Tracked objects:
 19212 ;;		On entry : 0/0
 19213 ;;		On exit  : 0/0
 19214 ;;		Unchanged: 0/0
 19215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19217 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19218 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19219 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19220 ;;Total ram usage:        2 bytes
 19221 ;; Hardware stack levels used:    1
 19222 ;; Hardware stack levels required when called:    2
 19223 ;; This function calls:
 19224 ;;		Nothing
 19225 ;; This function is called by:
 19226 ;;		_lcd_disp_code
 19227 ;; This function uses a non-reentrant model
 19228 ;;
 19229                           
 19230                           
 19231                           ;psect for function _lcd_disp_code_7
 19232  32AD                     _lcd_disp_code_7:	
 19233                           
 19234                           ;incstack = 0
 19235                           ; Regs used in _lcd_disp_code_7: [wreg+status,2+status,0]
 19236                           ;lcd_disp_code_7@code stored from wreg
 19237  32AD  00F4               	movwf	lcd_disp_code_7@code
 19238                           
 19239                           ;lcd.c: 147: do{ pLCD[2] &= ~(1<<7); if(code&0x20){ pLCD[2] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19240  32AE  307F               	movlw	127
 19241  32AF  00F3               	movwf	??_lcd_disp_code_7
 19242  32B0  0873               	movf	??_lcd_disp_code_7,w
 19243  32B1  0023               	movlb	3	; select bank3
 19244  32B2  05A8               	andwf	(_pLCD^(0+384)+2),f
 19245  32B3  1AF4               	btfsc	lcd_disp_code_7@code,5
 19246  32B4  17A8               	bsf	(_pLCD^(0+384)+2),7
 19247                           
 19248                           ;lcd.c: 148: do{ pLCD[5] &= ~(1<<7); if(code&0x40){ pLCD[5] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19249  32B5  307F               	movlw	127
 19250  32B6  00F3               	movwf	??_lcd_disp_code_7
 19251  32B7  0873               	movf	??_lcd_disp_code_7,w
 19252  32B8  05AB               	andwf	(_pLCD^(0+384)+5),f
 19253  32B9  1B74               	btfsc	lcd_disp_code_7@code,6
 19254  32BA  17AB               	bsf	(_pLCD^(0+384)+5),7
 19255                           
 19256                           ;lcd.c: 149: do{ pLCD[8] &= ~(1<<7); if(code&0x10){ pLCD[8] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19257  32BB  307F               	movlw	127
 19258  32BC  00F3               	movwf	??_lcd_disp_code_7
 19259  32BD  0873               	movf	??_lcd_disp_code_7,w
 19260  32BE  05AE               	andwf	(_pLCD^(0+384)+8),f
 19261  32BF  1A74               	btfsc	lcd_disp_code_7@code,4
 19262  32C0  17AE               	bsf	(_pLCD^(0+384)+8),7
 19263                           
 19264                           ;lcd.c: 150: do{ pLCD[11] &= ~(1<<7); if(code&0x08){ pLCD[11] |= (1<<7); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19265  32C1  307F               	movlw	127
 19266  32C2  00F3               	movwf	??_lcd_disp_code_7
 19267  32C3  0873               	movf	??_lcd_disp_code_7,w
 19268  32C4  05B1               	andwf	(_pLCD^(0+384)+11),f
 19269  32C5  19F4               	btfsc	lcd_disp_code_7@code,3
 19270  32C6  17B1               	bsf	(_pLCD^(0+384)+11),7
 19271                           
 19272                           ;lcd.c: 152: do{ pLCD[2] &= ~(1<<6); if(code&0x01){ pLCD[2] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19273  32C7  30BF               	movlw	191
 19274  32C8  00F3               	movwf	??_lcd_disp_code_7
 19275  32C9  0873               	movf	??_lcd_disp_code_7,w
 19276  32CA  05A8               	andwf	(_pLCD^(0+384)+2),f
 19277  32CB  1874               	btfsc	lcd_disp_code_7@code,0
 19278  32CC  1728               	bsf	(_pLCD^(0+384)+2),6
 19279                           
 19280                           ;lcd.c: 153: do{ pLCD[5] &= ~(1<<6); if(code&0x02){ pLCD[5] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19281  32CD  30BF               	movlw	191
 19282  32CE  00F3               	movwf	??_lcd_disp_code_7
 19283  32CF  0873               	movf	??_lcd_disp_code_7,w
 19284  32D0  05AB               	andwf	(_pLCD^(0+384)+5),f
 19285  32D1  18F4               	btfsc	lcd_disp_code_7@code,1
 19286  32D2  172B               	bsf	(_pLCD^(0+384)+5),6
 19287                           
 19288                           ;lcd.c: 154: do{ pLCD[8] &= ~(1<<6); if(code&0x04){ pLCD[8] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19289  32D3  30BF               	movlw	191
 19290  32D4  00F3               	movwf	??_lcd_disp_code_7
 19291  32D5  0873               	movf	??_lcd_disp_code_7,w
 19292  32D6  05AE               	andwf	(_pLCD^(0+384)+8),f
 19293  32D7  1D74               	btfss	lcd_disp_code_7@code,2
 19294  32D8  0008               	return
 19295  32D9  172E               	bsf	(_pLCD^(0+384)+8),6
 19296  32DA  0008               	return
 19297  32DB                     __end_of_lcd_disp_code_7:	
 19298                           
 19299                           	psect	text50
 19300  327F                     __ptext50:	
 19301 ;; *************** function _lcd_disp_code_6 *****************
 19302 ;; Defined at:
 19303 ;;		line 133 in file "src/driver/lcd.c"
 19304 ;; Parameters:    Size  Location     Type
 19305 ;;  code            1    wreg     unsigned char 
 19306 ;; Auto vars:     Size  Location     Type
 19307 ;;  code            1    4[COMMON] unsigned char 
 19308 ;; Return value:  Size  Location     Type
 19309 ;;                  1    wreg      void 
 19310 ;; Registers used:
 19311 ;;		wreg, status,2, status,0
 19312 ;; Tracked objects:
 19313 ;;		On entry : 0/0
 19314 ;;		On exit  : 0/0
 19315 ;;		Unchanged: 0/0
 19316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19319 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19320 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19321 ;;Total ram usage:        2 bytes
 19322 ;; Hardware stack levels used:    1
 19323 ;; Hardware stack levels required when called:    2
 19324 ;; This function calls:
 19325 ;;		Nothing
 19326 ;; This function is called by:
 19327 ;;		_lcd_disp_code
 19328 ;; This function uses a non-reentrant model
 19329 ;;
 19330                           
 19331                           
 19332                           ;psect for function _lcd_disp_code_6
 19333  327F                     _lcd_disp_code_6:	
 19334                           
 19335                           ;incstack = 0
 19336                           ; Regs used in _lcd_disp_code_6: [wreg+status,2+status,0]
 19337                           ;lcd_disp_code_6@code stored from wreg
 19338  327F  00F4               	movwf	lcd_disp_code_6@code
 19339                           
 19340                           ;lcd.c: 135: do{ pLCD[12] &= ~(1<<1); if(code&0x20){ pLCD[12] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19341  3280  30FD               	movlw	253
 19342  3281  00F3               	movwf	??_lcd_disp_code_6
 19343  3282  0873               	movf	??_lcd_disp_code_6,w
 19344  3283  0023               	movlb	3	; select bank3
 19345  3284  05B2               	andwf	(_pLCD^(0+384)+12),f
 19346  3285  1AF4               	btfsc	lcd_disp_code_6@code,5
 19347  3286  14B2               	bsf	(_pLCD^(0+384)+12),1
 19348                           
 19349                           ;lcd.c: 136: do{ pLCD[15] &= ~(1<<1); if(code&0x40){ pLCD[15] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19350  3287  30FD               	movlw	253
 19351  3288  00F3               	movwf	??_lcd_disp_code_6
 19352  3289  0873               	movf	??_lcd_disp_code_6,w
 19353  328A  05B5               	andwf	(_pLCD^(0+384)+15),f
 19354  328B  1B74               	btfsc	lcd_disp_code_6@code,6
 19355  328C  14B5               	bsf	(_pLCD^(0+384)+15),1
 19356                           
 19357                           ;lcd.c: 137: do{ pLCD[18] &= ~(1<<1); if(code&0x10){ pLCD[18] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19358  328D  30FD               	movlw	253
 19359  328E  00F3               	movwf	??_lcd_disp_code_6
 19360  328F  0873               	movf	??_lcd_disp_code_6,w
 19361  3290  05B8               	andwf	(_pLCD^(0+384)+18),f
 19362  3291  1A74               	btfsc	lcd_disp_code_6@code,4
 19363  3292  14B8               	bsf	(_pLCD^(0+384)+18),1
 19364                           
 19365                           ;lcd.c: 138: do{ pLCD[21] &= ~(1<<1); if(code&0x08){ pLCD[21] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19366  3293  30FD               	movlw	253
 19367  3294  00F3               	movwf	??_lcd_disp_code_6
 19368  3295  0873               	movf	??_lcd_disp_code_6,w
 19369  3296  05BB               	andwf	(_pLCD^(0+384)+21),f
 19370  3297  19F4               	btfsc	lcd_disp_code_6@code,3
 19371  3298  14BB               	bsf	(_pLCD^(0+384)+21),1
 19372                           
 19373                           ;lcd.c: 140: do{ pLCD[12] &= ~(1<<0); if(code&0x01){ pLCD[12] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19374  3299  30FE               	movlw	254
 19375  329A  00F3               	movwf	??_lcd_disp_code_6
 19376  329B  0873               	movf	??_lcd_disp_code_6,w
 19377  329C  05B2               	andwf	(_pLCD^(0+384)+12),f
 19378  329D  1874               	btfsc	lcd_disp_code_6@code,0
 19379  329E  1432               	bsf	(_pLCD^(0+384)+12),0
 19380                           
 19381                           ;lcd.c: 141: do{ pLCD[15] &= ~(1<<0); if(code&0x02){ pLCD[15] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19382  329F  30FE               	movlw	254
 19383  32A0  00F3               	movwf	??_lcd_disp_code_6
 19384  32A1  0873               	movf	??_lcd_disp_code_6,w
 19385  32A2  05B5               	andwf	(_pLCD^(0+384)+15),f
 19386  32A3  18F4               	btfsc	lcd_disp_code_6@code,1
 19387  32A4  1435               	bsf	(_pLCD^(0+384)+15),0
 19388                           
 19389                           ;lcd.c: 142: do{ pLCD[18] &= ~(1<<0); if(code&0x04){ pLCD[18] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19390  32A5  30FE               	movlw	254
 19391  32A6  00F3               	movwf	??_lcd_disp_code_6
 19392  32A7  0873               	movf	??_lcd_disp_code_6,w
 19393  32A8  05B8               	andwf	(_pLCD^(0+384)+18),f
 19394  32A9  1D74               	btfss	lcd_disp_code_6@code,2
 19395  32AA  0008               	return
 19396  32AB  1438               	bsf	(_pLCD^(0+384)+18),0
 19397  32AC  0008               	return
 19398  32AD                     __end_of_lcd_disp_code_6:	
 19399                           
 19400                           	psect	text51
 19401  3251                     __ptext51:	
 19402 ;; *************** function _lcd_disp_code_5 *****************
 19403 ;; Defined at:
 19404 ;;		line 121 in file "src/driver/lcd.c"
 19405 ;; Parameters:    Size  Location     Type
 19406 ;;  code            1    wreg     unsigned char 
 19407 ;; Auto vars:     Size  Location     Type
 19408 ;;  code            1    4[COMMON] unsigned char 
 19409 ;; Return value:  Size  Location     Type
 19410 ;;                  1    wreg      void 
 19411 ;; Registers used:
 19412 ;;		wreg, status,2, status,0
 19413 ;; Tracked objects:
 19414 ;;		On entry : 0/0
 19415 ;;		On exit  : 0/0
 19416 ;;		Unchanged: 0/0
 19417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19421 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19422 ;;Total ram usage:        2 bytes
 19423 ;; Hardware stack levels used:    1
 19424 ;; Hardware stack levels required when called:    2
 19425 ;; This function calls:
 19426 ;;		Nothing
 19427 ;; This function is called by:
 19428 ;;		_lcd_disp_code
 19429 ;; This function uses a non-reentrant model
 19430 ;;
 19431                           
 19432                           
 19433                           ;psect for function _lcd_disp_code_5
 19434  3251                     _lcd_disp_code_5:	
 19435                           
 19436                           ;incstack = 0
 19437                           ; Regs used in _lcd_disp_code_5: [wreg+status,2+status,0]
 19438                           ;lcd_disp_code_5@code stored from wreg
 19439  3251  00F4               	movwf	lcd_disp_code_5@code
 19440                           
 19441                           ;lcd.c: 123: do{ pLCD[14] &= ~(1<<5); if(code&0x20){ pLCD[14] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19442  3252  30DF               	movlw	223
 19443  3253  00F3               	movwf	??_lcd_disp_code_5
 19444  3254  0873               	movf	??_lcd_disp_code_5,w
 19445  3255  0023               	movlb	3	; select bank3
 19446  3256  05B4               	andwf	(_pLCD^(0+384)+14),f
 19447  3257  1AF4               	btfsc	lcd_disp_code_5@code,5
 19448  3258  16B4               	bsf	(_pLCD^(0+384)+14),5
 19449                           
 19450                           ;lcd.c: 124: do{ pLCD[17] &= ~(1<<5); if(code&0x40){ pLCD[17] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19451  3259  30DF               	movlw	223
 19452  325A  00F3               	movwf	??_lcd_disp_code_5
 19453  325B  0873               	movf	??_lcd_disp_code_5,w
 19454  325C  05B7               	andwf	(_pLCD^(0+384)+17),f
 19455  325D  1B74               	btfsc	lcd_disp_code_5@code,6
 19456  325E  16B7               	bsf	(_pLCD^(0+384)+17),5
 19457                           
 19458                           ;lcd.c: 125: do{ pLCD[20] &= ~(1<<5); if(code&0x10){ pLCD[20] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19459  325F  30DF               	movlw	223
 19460  3260  00F3               	movwf	??_lcd_disp_code_5
 19461  3261  0873               	movf	??_lcd_disp_code_5,w
 19462  3262  05BA               	andwf	(_pLCD^(0+384)+20),f
 19463  3263  1A74               	btfsc	lcd_disp_code_5@code,4
 19464  3264  16BA               	bsf	(_pLCD^(0+384)+20),5
 19465                           
 19466                           ;lcd.c: 126: do{ pLCD[23] &= ~(1<<5); if(code&0x08){ pLCD[23] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19467  3265  30DF               	movlw	223
 19468  3266  00F3               	movwf	??_lcd_disp_code_5
 19469  3267  0873               	movf	??_lcd_disp_code_5,w
 19470  3268  05BD               	andwf	(_pLCD^(0+384)+23),f
 19471  3269  19F4               	btfsc	lcd_disp_code_5@code,3
 19472  326A  16BD               	bsf	(_pLCD^(0+384)+23),5
 19473                           
 19474                           ;lcd.c: 128: do{ pLCD[12] &= ~(1<<2); if(code&0x01){ pLCD[12] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19475  326B  30FB               	movlw	251
 19476  326C  00F3               	movwf	??_lcd_disp_code_5
 19477  326D  0873               	movf	??_lcd_disp_code_5,w
 19478  326E  05B2               	andwf	(_pLCD^(0+384)+12),f
 19479  326F  1874               	btfsc	lcd_disp_code_5@code,0
 19480  3270  1532               	bsf	(_pLCD^(0+384)+12),2
 19481                           
 19482                           ;lcd.c: 129: do{ pLCD[15] &= ~(1<<2); if(code&0x02){ pLCD[15] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19483  3271  30FB               	movlw	251
 19484  3272  00F3               	movwf	??_lcd_disp_code_5
 19485  3273  0873               	movf	??_lcd_disp_code_5,w
 19486  3274  05B5               	andwf	(_pLCD^(0+384)+15),f
 19487  3275  18F4               	btfsc	lcd_disp_code_5@code,1
 19488  3276  1535               	bsf	(_pLCD^(0+384)+15),2
 19489                           
 19490                           ;lcd.c: 130: do{ pLCD[18] &= ~(1<<2); if(code&0x04){ pLCD[18] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19491  3277  30FB               	movlw	251
 19492  3278  00F3               	movwf	??_lcd_disp_code_5
 19493  3279  0873               	movf	??_lcd_disp_code_5,w
 19494  327A  05B8               	andwf	(_pLCD^(0+384)+18),f
 19495  327B  1D74               	btfss	lcd_disp_code_5@code,2
 19496  327C  0008               	return
 19497  327D  1538               	bsf	(_pLCD^(0+384)+18),2
 19498  327E  0008               	return
 19499  327F                     __end_of_lcd_disp_code_5:	
 19500                           
 19501                           	psect	text52
 19502  3223                     __ptext52:	
 19503 ;; *************** function _lcd_disp_code_4 *****************
 19504 ;; Defined at:
 19505 ;;		line 109 in file "src/driver/lcd.c"
 19506 ;; Parameters:    Size  Location     Type
 19507 ;;  code            1    wreg     unsigned char 
 19508 ;; Auto vars:     Size  Location     Type
 19509 ;;  code            1    4[COMMON] unsigned char 
 19510 ;; Return value:  Size  Location     Type
 19511 ;;                  1    wreg      void 
 19512 ;; Registers used:
 19513 ;;		wreg, status,2, status,0
 19514 ;; Tracked objects:
 19515 ;;		On entry : 0/0
 19516 ;;		On exit  : 0/0
 19517 ;;		Unchanged: 0/0
 19518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19520 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19521 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19522 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19523 ;;Total ram usage:        2 bytes
 19524 ;; Hardware stack levels used:    1
 19525 ;; Hardware stack levels required when called:    2
 19526 ;; This function calls:
 19527 ;;		Nothing
 19528 ;; This function is called by:
 19529 ;;		_lcd_disp_code
 19530 ;; This function uses a non-reentrant model
 19531 ;;
 19532                           
 19533                           
 19534                           ;psect for function _lcd_disp_code_4
 19535  3223                     _lcd_disp_code_4:	
 19536                           
 19537                           ;incstack = 0
 19538                           ; Regs used in _lcd_disp_code_4: [wreg+status,2+status,0]
 19539                           ;lcd_disp_code_4@code stored from wreg
 19540  3223  00F4               	movwf	lcd_disp_code_4@code
 19541                           
 19542                           ;lcd.c: 111: do{ pLCD[14] &= ~(1<<3); if(code&0x20){ pLCD[14] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19543  3224  30F7               	movlw	247
 19544  3225  00F3               	movwf	??_lcd_disp_code_4
 19545  3226  0873               	movf	??_lcd_disp_code_4,w
 19546  3227  0023               	movlb	3	; select bank3
 19547  3228  05B4               	andwf	(_pLCD^(0+384)+14),f
 19548  3229  1AF4               	btfsc	lcd_disp_code_4@code,5
 19549  322A  15B4               	bsf	(_pLCD^(0+384)+14),3
 19550                           
 19551                           ;lcd.c: 112: do{ pLCD[17] &= ~(1<<3); if(code&0x40){ pLCD[17] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19552  322B  30F7               	movlw	247
 19553  322C  00F3               	movwf	??_lcd_disp_code_4
 19554  322D  0873               	movf	??_lcd_disp_code_4,w
 19555  322E  05B7               	andwf	(_pLCD^(0+384)+17),f
 19556  322F  1B74               	btfsc	lcd_disp_code_4@code,6
 19557  3230  15B7               	bsf	(_pLCD^(0+384)+17),3
 19558                           
 19559                           ;lcd.c: 113: do{ pLCD[20] &= ~(1<<3); if(code&0x10){ pLCD[20] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19560  3231  30F7               	movlw	247
 19561  3232  00F3               	movwf	??_lcd_disp_code_4
 19562  3233  0873               	movf	??_lcd_disp_code_4,w
 19563  3234  05BA               	andwf	(_pLCD^(0+384)+20),f
 19564  3235  1A74               	btfsc	lcd_disp_code_4@code,4
 19565  3236  15BA               	bsf	(_pLCD^(0+384)+20),3
 19566                           
 19567                           ;lcd.c: 114: do{ pLCD[23] &= ~(1<<3); if(code&0x08){ pLCD[23] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19568  3237  30F7               	movlw	247
 19569  3238  00F3               	movwf	??_lcd_disp_code_4
 19570  3239  0873               	movf	??_lcd_disp_code_4,w
 19571  323A  05BD               	andwf	(_pLCD^(0+384)+23),f
 19572  323B  19F4               	btfsc	lcd_disp_code_4@code,3
 19573  323C  15BD               	bsf	(_pLCD^(0+384)+23),3
 19574                           
 19575                           ;lcd.c: 116: do{ pLCD[14] &= ~(1<<4); if(code&0x01){ pLCD[14] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19576  323D  30EF               	movlw	239
 19577  323E  00F3               	movwf	??_lcd_disp_code_4
 19578  323F  0873               	movf	??_lcd_disp_code_4,w
 19579  3240  05B4               	andwf	(_pLCD^(0+384)+14),f
 19580  3241  1874               	btfsc	lcd_disp_code_4@code,0
 19581  3242  1634               	bsf	(_pLCD^(0+384)+14),4
 19582                           
 19583                           ;lcd.c: 117: do{ pLCD[17] &= ~(1<<4); if(code&0x02){ pLCD[17] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19584  3243  30EF               	movlw	239
 19585  3244  00F3               	movwf	??_lcd_disp_code_4
 19586  3245  0873               	movf	??_lcd_disp_code_4,w
 19587  3246  05B7               	andwf	(_pLCD^(0+384)+17),f
 19588  3247  18F4               	btfsc	lcd_disp_code_4@code,1
 19589  3248  1637               	bsf	(_pLCD^(0+384)+17),4
 19590                           
 19591                           ;lcd.c: 118: do{ pLCD[20] &= ~(1<<4); if(code&0x04){ pLCD[20] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19592  3249  30EF               	movlw	239
 19593  324A  00F3               	movwf	??_lcd_disp_code_4
 19594  324B  0873               	movf	??_lcd_disp_code_4,w
 19595  324C  05BA               	andwf	(_pLCD^(0+384)+20),f
 19596  324D  1D74               	btfss	lcd_disp_code_4@code,2
 19597  324E  0008               	return
 19598  324F  163A               	bsf	(_pLCD^(0+384)+20),4
 19599  3250  0008               	return
 19600  3251                     __end_of_lcd_disp_code_4:	
 19601                           
 19602                           	psect	text53
 19603  31F5                     __ptext53:	
 19604 ;; *************** function _lcd_disp_code_3 *****************
 19605 ;; Defined at:
 19606 ;;		line 97 in file "src/driver/lcd.c"
 19607 ;; Parameters:    Size  Location     Type
 19608 ;;  code            1    wreg     unsigned char 
 19609 ;; Auto vars:     Size  Location     Type
 19610 ;;  code            1    4[COMMON] unsigned char 
 19611 ;; Return value:  Size  Location     Type
 19612 ;;                  1    wreg      void 
 19613 ;; Registers used:
 19614 ;;		wreg, status,2, status,0
 19615 ;; Tracked objects:
 19616 ;;		On entry : 0/0
 19617 ;;		On exit  : 0/0
 19618 ;;		Unchanged: 0/0
 19619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19621 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19622 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19623 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19624 ;;Total ram usage:        2 bytes
 19625 ;; Hardware stack levels used:    1
 19626 ;; Hardware stack levels required when called:    2
 19627 ;; This function calls:
 19628 ;;		Nothing
 19629 ;; This function is called by:
 19630 ;;		_lcd_disp_code
 19631 ;; This function uses a non-reentrant model
 19632 ;;
 19633                           
 19634                           
 19635                           ;psect for function _lcd_disp_code_3
 19636  31F5                     _lcd_disp_code_3:	
 19637                           
 19638                           ;incstack = 0
 19639                           ; Regs used in _lcd_disp_code_3: [wreg+status,2+status,0]
 19640                           ;lcd_disp_code_3@code stored from wreg
 19641  31F5  00F4               	movwf	lcd_disp_code_3@code
 19642                           
 19643                           ;lcd.c: 99: do{ pLCD[2] &= ~(1<<4); if(code&0x20){ pLCD[2] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19644  31F6  30EF               	movlw	239
 19645  31F7  00F3               	movwf	??_lcd_disp_code_3
 19646  31F8  0873               	movf	??_lcd_disp_code_3,w
 19647  31F9  0023               	movlb	3	; select bank3
 19648  31FA  05A8               	andwf	(_pLCD^(0+384)+2),f
 19649  31FB  1AF4               	btfsc	lcd_disp_code_3@code,5
 19650  31FC  1628               	bsf	(_pLCD^(0+384)+2),4
 19651                           
 19652                           ;lcd.c: 100: do{ pLCD[5] &= ~(1<<4); if(code&0x40){ pLCD[5] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19653  31FD  30EF               	movlw	239
 19654  31FE  00F3               	movwf	??_lcd_disp_code_3
 19655  31FF  0873               	movf	??_lcd_disp_code_3,w
 19656  3200  05AB               	andwf	(_pLCD^(0+384)+5),f
 19657  3201  1B74               	btfsc	lcd_disp_code_3@code,6
 19658  3202  162B               	bsf	(_pLCD^(0+384)+5),4
 19659                           
 19660                           ;lcd.c: 101: do{ pLCD[8] &= ~(1<<4); if(code&0x10){ pLCD[8] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19661  3203  30EF               	movlw	239
 19662  3204  00F3               	movwf	??_lcd_disp_code_3
 19663  3205  0873               	movf	??_lcd_disp_code_3,w
 19664  3206  05AE               	andwf	(_pLCD^(0+384)+8),f
 19665  3207  1A74               	btfsc	lcd_disp_code_3@code,4
 19666  3208  162E               	bsf	(_pLCD^(0+384)+8),4
 19667                           
 19668                           ;lcd.c: 102: do{ pLCD[11] &= ~(1<<4); if(code&0x08){ pLCD[11] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19669  3209  30EF               	movlw	239
 19670  320A  00F3               	movwf	??_lcd_disp_code_3
 19671  320B  0873               	movf	??_lcd_disp_code_3,w
 19672  320C  05B1               	andwf	(_pLCD^(0+384)+11),f
 19673  320D  19F4               	btfsc	lcd_disp_code_3@code,3
 19674  320E  1631               	bsf	(_pLCD^(0+384)+11),4
 19675                           
 19676                           ;lcd.c: 104: do{ pLCD[2] &= ~(1<<5); if(code&0x01){ pLCD[2] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19677  320F  30DF               	movlw	223
 19678  3210  00F3               	movwf	??_lcd_disp_code_3
 19679  3211  0873               	movf	??_lcd_disp_code_3,w
 19680  3212  05A8               	andwf	(_pLCD^(0+384)+2),f
 19681  3213  1874               	btfsc	lcd_disp_code_3@code,0
 19682  3214  16A8               	bsf	(_pLCD^(0+384)+2),5
 19683                           
 19684                           ;lcd.c: 105: do{ pLCD[5] &= ~(1<<5); if(code&0x02){ pLCD[5] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19685  3215  30DF               	movlw	223
 19686  3216  00F3               	movwf	??_lcd_disp_code_3
 19687  3217  0873               	movf	??_lcd_disp_code_3,w
 19688  3218  05AB               	andwf	(_pLCD^(0+384)+5),f
 19689  3219  18F4               	btfsc	lcd_disp_code_3@code,1
 19690  321A  16AB               	bsf	(_pLCD^(0+384)+5),5
 19691                           
 19692                           ;lcd.c: 106: do{ pLCD[8] &= ~(1<<5); if(code&0x04){ pLCD[8] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19693  321B  30DF               	movlw	223
 19694  321C  00F3               	movwf	??_lcd_disp_code_3
 19695  321D  0873               	movf	??_lcd_disp_code_3,w
 19696  321E  05AE               	andwf	(_pLCD^(0+384)+8),f
 19697  321F  1D74               	btfss	lcd_disp_code_3@code,2
 19698  3220  0008               	return
 19699  3221  16AE               	bsf	(_pLCD^(0+384)+8),5
 19700  3222  0008               	return
 19701  3223                     __end_of_lcd_disp_code_3:	
 19702                           
 19703                           	psect	text54
 19704  31C7                     __ptext54:	
 19705 ;; *************** function _lcd_disp_code_2 *****************
 19706 ;; Defined at:
 19707 ;;		line 85 in file "src/driver/lcd.c"
 19708 ;; Parameters:    Size  Location     Type
 19709 ;;  code            1    wreg     unsigned char 
 19710 ;; Auto vars:     Size  Location     Type
 19711 ;;  code            1    4[COMMON] unsigned char 
 19712 ;; Return value:  Size  Location     Type
 19713 ;;                  1    wreg      void 
 19714 ;; Registers used:
 19715 ;;		wreg, status,2, status,0
 19716 ;; Tracked objects:
 19717 ;;		On entry : 0/0
 19718 ;;		On exit  : 0/0
 19719 ;;		Unchanged: 0/0
 19720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19722 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19723 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19724 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19725 ;;Total ram usage:        2 bytes
 19726 ;; Hardware stack levels used:    1
 19727 ;; Hardware stack levels required when called:    2
 19728 ;; This function calls:
 19729 ;;		Nothing
 19730 ;; This function is called by:
 19731 ;;		_lcd_disp_code
 19732 ;; This function uses a non-reentrant model
 19733 ;;
 19734                           
 19735                           
 19736                           ;psect for function _lcd_disp_code_2
 19737  31C7                     _lcd_disp_code_2:	
 19738                           
 19739                           ;incstack = 0
 19740                           ; Regs used in _lcd_disp_code_2: [wreg+status,2+status,0]
 19741                           ;lcd_disp_code_2@code stored from wreg
 19742  31C7  00F4               	movwf	lcd_disp_code_2@code
 19743                           
 19744                           ;lcd.c: 87: do{ pLCD[0] &= ~(1<<3); if(code&0x20){ pLCD[0] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19745  31C8  30F7               	movlw	247
 19746  31C9  00F3               	movwf	??_lcd_disp_code_2
 19747  31CA  0873               	movf	??_lcd_disp_code_2,w
 19748  31CB  0023               	movlb	3	; select bank3
 19749  31CC  05A6               	andwf	_pLCD^(0+384),f
 19750  31CD  1AF4               	btfsc	lcd_disp_code_2@code,5
 19751  31CE  15A6               	bsf	_pLCD^(0+384),3
 19752                           
 19753                           ;lcd.c: 88: do{ pLCD[3] &= ~(1<<3); if(code&0x40){ pLCD[3] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19754  31CF  30F7               	movlw	247
 19755  31D0  00F3               	movwf	??_lcd_disp_code_2
 19756  31D1  0873               	movf	??_lcd_disp_code_2,w
 19757  31D2  05A9               	andwf	(_pLCD^(0+384)+3),f
 19758  31D3  1B74               	btfsc	lcd_disp_code_2@code,6
 19759  31D4  15A9               	bsf	(_pLCD^(0+384)+3),3
 19760                           
 19761                           ;lcd.c: 89: do{ pLCD[6] &= ~(1<<3); if(code&0x10){ pLCD[6] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19762  31D5  30F7               	movlw	247
 19763  31D6  00F3               	movwf	??_lcd_disp_code_2
 19764  31D7  0873               	movf	??_lcd_disp_code_2,w
 19765  31D8  05AC               	andwf	(_pLCD^(0+384)+6),f
 19766  31D9  1A74               	btfsc	lcd_disp_code_2@code,4
 19767  31DA  15AC               	bsf	(_pLCD^(0+384)+6),3
 19768                           
 19769                           ;lcd.c: 90: do{ pLCD[9] &= ~(1<<3); if(code&0x08){ pLCD[9] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19770  31DB  30F7               	movlw	247
 19771  31DC  00F3               	movwf	??_lcd_disp_code_2
 19772  31DD  0873               	movf	??_lcd_disp_code_2,w
 19773  31DE  05AF               	andwf	(_pLCD^(0+384)+9),f
 19774  31DF  19F4               	btfsc	lcd_disp_code_2@code,3
 19775  31E0  15AF               	bsf	(_pLCD^(0+384)+9),3
 19776                           
 19777                           ;lcd.c: 92: do{ pLCD[0] &= ~(1<<4); if(code&0x01){ pLCD[0] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19778  31E1  30EF               	movlw	239
 19779  31E2  00F3               	movwf	??_lcd_disp_code_2
 19780  31E3  0873               	movf	??_lcd_disp_code_2,w
 19781  31E4  05A6               	andwf	_pLCD^(0+384),f
 19782  31E5  1874               	btfsc	lcd_disp_code_2@code,0
 19783  31E6  1626               	bsf	_pLCD^(0+384),4
 19784                           
 19785                           ;lcd.c: 93: do{ pLCD[3] &= ~(1<<4); if(code&0x02){ pLCD[3] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19786  31E7  30EF               	movlw	239
 19787  31E8  00F3               	movwf	??_lcd_disp_code_2
 19788  31E9  0873               	movf	??_lcd_disp_code_2,w
 19789  31EA  05A9               	andwf	(_pLCD^(0+384)+3),f
 19790  31EB  18F4               	btfsc	lcd_disp_code_2@code,1
 19791  31EC  1629               	bsf	(_pLCD^(0+384)+3),4
 19792                           
 19793                           ;lcd.c: 94: do{ pLCD[6] &= ~(1<<4); if(code&0x04){ pLCD[6] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19794  31ED  30EF               	movlw	239
 19795  31EE  00F3               	movwf	??_lcd_disp_code_2
 19796  31EF  0873               	movf	??_lcd_disp_code_2,w
 19797  31F0  05AC               	andwf	(_pLCD^(0+384)+6),f
 19798  31F1  1D74               	btfss	lcd_disp_code_2@code,2
 19799  31F2  0008               	return
 19800  31F3  162C               	bsf	(_pLCD^(0+384)+6),4
 19801  31F4  0008               	return
 19802  31F5                     __end_of_lcd_disp_code_2:	
 19803                           
 19804                           	psect	text55
 19805  3199                     __ptext55:	
 19806 ;; *************** function _lcd_disp_code_1 *****************
 19807 ;; Defined at:
 19808 ;;		line 73 in file "src/driver/lcd.c"
 19809 ;; Parameters:    Size  Location     Type
 19810 ;;  code            1    wreg     unsigned char 
 19811 ;; Auto vars:     Size  Location     Type
 19812 ;;  code            1    4[COMMON] unsigned char 
 19813 ;; Return value:  Size  Location     Type
 19814 ;;                  1    wreg      void 
 19815 ;; Registers used:
 19816 ;;		wreg, status,2, status,0
 19817 ;; Tracked objects:
 19818 ;;		On entry : 0/0
 19819 ;;		On exit  : 0/0
 19820 ;;		Unchanged: 0/0
 19821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19823 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19825 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19826 ;;Total ram usage:        2 bytes
 19827 ;; Hardware stack levels used:    1
 19828 ;; Hardware stack levels required when called:    2
 19829 ;; This function calls:
 19830 ;;		Nothing
 19831 ;; This function is called by:
 19832 ;;		_lcd_disp_code
 19833 ;; This function uses a non-reentrant model
 19834 ;;
 19835                           
 19836                           
 19837                           ;psect for function _lcd_disp_code_1
 19838  3199                     _lcd_disp_code_1:	
 19839                           
 19840                           ;incstack = 0
 19841                           ; Regs used in _lcd_disp_code_1: [wreg+status,2+status,0]
 19842                           ;lcd_disp_code_1@code stored from wreg
 19843  3199  00F4               	movwf	lcd_disp_code_1@code
 19844                           
 19845                           ;lcd.c: 75: do{ pLCD[0] &= ~(1<<1); if(code&0x20){ pLCD[0] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19846  319A  30FD               	movlw	253
 19847  319B  00F3               	movwf	??_lcd_disp_code_1
 19848  319C  0873               	movf	??_lcd_disp_code_1,w
 19849  319D  0023               	movlb	3	; select bank3
 19850  319E  05A6               	andwf	_pLCD^(0+384),f
 19851  319F  1AF4               	btfsc	lcd_disp_code_1@code,5
 19852  31A0  14A6               	bsf	_pLCD^(0+384),1
 19853                           
 19854                           ;lcd.c: 76: do{ pLCD[3] &= ~(1<<1); if(code&0x40){ pLCD[3] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19855  31A1  30FD               	movlw	253
 19856  31A2  00F3               	movwf	??_lcd_disp_code_1
 19857  31A3  0873               	movf	??_lcd_disp_code_1,w
 19858  31A4  05A9               	andwf	(_pLCD^(0+384)+3),f
 19859  31A5  1B74               	btfsc	lcd_disp_code_1@code,6
 19860  31A6  14A9               	bsf	(_pLCD^(0+384)+3),1
 19861                           
 19862                           ;lcd.c: 77: do{ pLCD[6] &= ~(1<<1); if(code&0x10){ pLCD[6] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19863  31A7  30FD               	movlw	253
 19864  31A8  00F3               	movwf	??_lcd_disp_code_1
 19865  31A9  0873               	movf	??_lcd_disp_code_1,w
 19866  31AA  05AC               	andwf	(_pLCD^(0+384)+6),f
 19867  31AB  1A74               	btfsc	lcd_disp_code_1@code,4
 19868  31AC  14AC               	bsf	(_pLCD^(0+384)+6),1
 19869                           
 19870                           ;lcd.c: 78: do{ pLCD[9] &= ~(1<<1); if(code&0x08){ pLCD[9] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19871  31AD  30FD               	movlw	253
 19872  31AE  00F3               	movwf	??_lcd_disp_code_1
 19873  31AF  0873               	movf	??_lcd_disp_code_1,w
 19874  31B0  05AF               	andwf	(_pLCD^(0+384)+9),f
 19875  31B1  19F4               	btfsc	lcd_disp_code_1@code,3
 19876  31B2  14AF               	bsf	(_pLCD^(0+384)+9),1
 19877                           
 19878                           ;lcd.c: 80: do{ pLCD[0] &= ~(1<<2); if(code&0x01){ pLCD[0] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19879  31B3  30FB               	movlw	251
 19880  31B4  00F3               	movwf	??_lcd_disp_code_1
 19881  31B5  0873               	movf	??_lcd_disp_code_1,w
 19882  31B6  05A6               	andwf	_pLCD^(0+384),f
 19883  31B7  1874               	btfsc	lcd_disp_code_1@code,0
 19884  31B8  1526               	bsf	_pLCD^(0+384),2
 19885                           
 19886                           ;lcd.c: 81: do{ pLCD[3] &= ~(1<<2); if(code&0x02){ pLCD[3] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19887  31B9  30FB               	movlw	251
 19888  31BA  00F3               	movwf	??_lcd_disp_code_1
 19889  31BB  0873               	movf	??_lcd_disp_code_1,w
 19890  31BC  05A9               	andwf	(_pLCD^(0+384)+3),f
 19891  31BD  18F4               	btfsc	lcd_disp_code_1@code,1
 19892  31BE  1529               	bsf	(_pLCD^(0+384)+3),2
 19893                           
 19894                           ;lcd.c: 82: do{ pLCD[6] &= ~(1<<2); if(code&0x04){ pLCD[6] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19895  31BF  30FB               	movlw	251
 19896  31C0  00F3               	movwf	??_lcd_disp_code_1
 19897  31C1  0873               	movf	??_lcd_disp_code_1,w
 19898  31C2  05AC               	andwf	(_pLCD^(0+384)+6),f
 19899  31C3  1D74               	btfss	lcd_disp_code_1@code,2
 19900  31C4  0008               	return
 19901  31C5  152C               	bsf	(_pLCD^(0+384)+6),2
 19902  31C6  0008               	return
 19903  31C7                     __end_of_lcd_disp_code_1:	
 19904                           
 19905                           	psect	text56
 19906  316B                     __ptext56:	
 19907 ;; *************** function _lcd_disp_code_0 *****************
 19908 ;; Defined at:
 19909 ;;		line 61 in file "src/driver/lcd.c"
 19910 ;; Parameters:    Size  Location     Type
 19911 ;;  code            1    wreg     unsigned char 
 19912 ;; Auto vars:     Size  Location     Type
 19913 ;;  code            1    4[COMMON] unsigned char 
 19914 ;; Return value:  Size  Location     Type
 19915 ;;                  1    wreg      void 
 19916 ;; Registers used:
 19917 ;;		wreg, status,2, status,0
 19918 ;; Tracked objects:
 19919 ;;		On entry : 0/0
 19920 ;;		On exit  : 0/0
 19921 ;;		Unchanged: 0/0
 19922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19925 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19926 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19927 ;;Total ram usage:        2 bytes
 19928 ;; Hardware stack levels used:    1
 19929 ;; Hardware stack levels required when called:    2
 19930 ;; This function calls:
 19931 ;;		Nothing
 19932 ;; This function is called by:
 19933 ;;		_lcd_disp_code
 19934 ;; This function uses a non-reentrant model
 19935 ;;
 19936                           
 19937                           
 19938                           ;psect for function _lcd_disp_code_0
 19939  316B                     _lcd_disp_code_0:	
 19940                           
 19941                           ;incstack = 0
 19942                           ; Regs used in _lcd_disp_code_0: [wreg+status,2+status,0]
 19943                           ;lcd_disp_code_0@code stored from wreg
 19944  316B  00F4               	movwf	lcd_disp_code_0@code
 19945                           
 19946                           ;lcd.c: 63: do{ pLCD[12] &= ~(1<<7); if(code&0x20){ pLCD[12] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19947  316C  307F               	movlw	127
 19948  316D  00F3               	movwf	??_lcd_disp_code_0
 19949  316E  0873               	movf	??_lcd_disp_code_0,w
 19950  316F  0023               	movlb	3	; select bank3
 19951  3170  05B2               	andwf	(_pLCD^(0+384)+12),f
 19952  3171  1AF4               	btfsc	lcd_disp_code_0@code,5
 19953  3172  17B2               	bsf	(_pLCD^(0+384)+12),7
 19954                           
 19955                           ;lcd.c: 64: do{ pLCD[15] &= ~(1<<7); if(code&0x40){ pLCD[15] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19956  3173  307F               	movlw	127
 19957  3174  00F3               	movwf	??_lcd_disp_code_0
 19958  3175  0873               	movf	??_lcd_disp_code_0,w
 19959  3176  05B5               	andwf	(_pLCD^(0+384)+15),f
 19960  3177  1B74               	btfsc	lcd_disp_code_0@code,6
 19961  3178  17B5               	bsf	(_pLCD^(0+384)+15),7
 19962                           
 19963                           ;lcd.c: 65: do{ pLCD[18] &= ~(1<<7); if(code&0x10){ pLCD[18] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19964  3179  307F               	movlw	127
 19965  317A  00F3               	movwf	??_lcd_disp_code_0
 19966  317B  0873               	movf	??_lcd_disp_code_0,w
 19967  317C  05B8               	andwf	(_pLCD^(0+384)+18),f
 19968  317D  1A74               	btfsc	lcd_disp_code_0@code,4
 19969  317E  17B8               	bsf	(_pLCD^(0+384)+18),7
 19970                           
 19971                           ;lcd.c: 66: do{ pLCD[21] &= ~(1<<7); if(code&0x08){ pLCD[21] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19972  317F  307F               	movlw	127
 19973  3180  00F3               	movwf	??_lcd_disp_code_0
 19974  3181  0873               	movf	??_lcd_disp_code_0,w
 19975  3182  05BB               	andwf	(_pLCD^(0+384)+21),f
 19976  3183  19F4               	btfsc	lcd_disp_code_0@code,3
 19977  3184  17BB               	bsf	(_pLCD^(0+384)+21),7
 19978                           
 19979                           ;lcd.c: 68: do{ pLCD[0] &= ~(1<<0); if(code&0x01){ pLCD[0] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19980  3185  30FE               	movlw	254
 19981  3186  00F3               	movwf	??_lcd_disp_code_0
 19982  3187  0873               	movf	??_lcd_disp_code_0,w
 19983  3188  05A6               	andwf	_pLCD^(0+384),f
 19984  3189  1874               	btfsc	lcd_disp_code_0@code,0
 19985  318A  1426               	bsf	_pLCD^(0+384),0
 19986                           
 19987                           ;lcd.c: 69: do{ pLCD[3] &= ~(1<<0); if(code&0x02){ pLCD[3] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19988  318B  30FE               	movlw	254
 19989  318C  00F3               	movwf	??_lcd_disp_code_0
 19990  318D  0873               	movf	??_lcd_disp_code_0,w
 19991  318E  05A9               	andwf	(_pLCD^(0+384)+3),f
 19992  318F  18F4               	btfsc	lcd_disp_code_0@code,1
 19993  3190  1429               	bsf	(_pLCD^(0+384)+3),0
 19994                           
 19995                           ;lcd.c: 70: do{ pLCD[6] &= ~(1<<0); if(code&0x04){ pLCD[6] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19996  3191  30FE               	movlw	254
 19997  3192  00F3               	movwf	??_lcd_disp_code_0
 19998  3193  0873               	movf	??_lcd_disp_code_0,w
 19999  3194  05AC               	andwf	(_pLCD^(0+384)+6),f
 20000  3195  1D74               	btfss	lcd_disp_code_0@code,2
 20001  3196  0008               	return
 20002  3197  142C               	bsf	(_pLCD^(0+384)+6),0
 20003  3198  0008               	return
 20004  3199                     __end_of_lcd_disp_code_0:	
 20005                           
 20006                           	psect	text57
 20007  3B58                     __ptext57:	
 20008 ;; *************** function _lcd_clear_buffer *****************
 20009 ;; Defined at:
 20010 ;;		line 207 in file "src/driver/lcd.c"
 20011 ;; Parameters:    Size  Location     Type
 20012 ;;		None
 20013 ;; Auto vars:     Size  Location     Type
 20014 ;;		None
 20015 ;; Return value:  Size  Location     Type
 20016 ;;                  1    wreg      void 
 20017 ;; Registers used:
 20018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20019 ;; Tracked objects:
 20020 ;;		On entry : 0/0
 20021 ;;		On exit  : 0/0
 20022 ;;		Unchanged: 0/0
 20023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20026 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20027 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20028 ;;Total ram usage:        1 bytes
 20029 ;; Hardware stack levels used:    1
 20030 ;; Hardware stack levels required when called:    3
 20031 ;; This function calls:
 20032 ;;		_m_mem_set
 20033 ;; This function is called by:
 20034 ;;		_ui_disp_str_num
 20035 ;;		_ui_disp_str_num_ex
 20036 ;;		_ui_disp_flow_error
 20037 ;;		_ui_disp_flow
 20038 ;;		_ui_disp_totale_v
 20039 ;;		_ui_disp_transfer_money
 20040 ;;		_ui_disp_balance_and_volume
 20041 ;;		_ui_disp_set_line
 20042 ;;		_ui_disp_set_price
 20043 ;;		_ui_disp_set_calib
 20044 ;;		_ui_disp_set_imd_flow_uint
 20045 ;;		_ui_disp_menu
 20046 ;; This function uses a non-reentrant model
 20047 ;;
 20048                           
 20049                           
 20050                           ;psect for function _lcd_clear_buffer
 20051  3B58                     _lcd_clear_buffer:	
 20052                           
 20053                           ;lcd.c: 209: m_mem_set(pLCD,0,24);
 20054                           
 20055                           ;incstack = 0
 20056                           ; Regs used in _lcd_clear_buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20057  3B58  30A6               	movlw	low _pLCD
 20058  3B59  00F3               	movwf	m_mem_set@buf
 20059  3B5A  3001               	movlw	high _pLCD
 20060  3B5B  00F4               	movwf	m_mem_set@buf+1
 20061  3B5C  01F5               	clrf	m_mem_set@x
 20062  3B5D  3018               	movlw	24
 20063  3B5E  00F7               	movwf	??_lcd_clear_buffer
 20064  3B5F  0877               	movf	??_lcd_clear_buffer,w
 20065  3B60  00F6               	movwf	m_mem_set@len
 20066  3B61  31BB  23E2         	fcall	_m_mem_set
 20067  3B63  0008               	return
 20068  3B64                     __end_of_lcd_clear_buffer:	
 20069                           
 20070                           	psect	text58
 20071  2CDC                     __ptext58:	
 20072 ;; *************** function _lcd_disp_dp *****************
 20073 ;; Defined at:
 20074 ;;		line 41 in file "src/driver/lcd.c"
 20075 ;; Parameters:    Size  Location     Type
 20076 ;;  dec             1    wreg     unsigned char 
 20077 ;;  show            1   18[BANK0 ] unsigned char 
 20078 ;; Auto vars:     Size  Location     Type
 20079 ;;  dec             1   21[BANK0 ] unsigned char 
 20080 ;; Return value:  Size  Location     Type
 20081 ;;                  1    wreg      void 
 20082 ;; Registers used:
 20083 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20084 ;; Tracked objects:
 20085 ;;		On entry : 0/0
 20086 ;;		On exit  : 0/0
 20087 ;;		Unchanged: 0/0
 20088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20089 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20090 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20091 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20092 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20093 ;;Total ram usage:        4 bytes
 20094 ;; Hardware stack levels used:    1
 20095 ;; Hardware stack levels required when called:    4
 20096 ;; This function calls:
 20097 ;;		_lcd_set_com_seg
 20098 ;; This function is called by:
 20099 ;;		_ui_disp_flow
 20100 ;;		_ui_disp_totale_v
 20101 ;;		_ui_disp_balance_and_volume
 20102 ;;		_ui_disp_set_line
 20103 ;;		_ui_disp_set_price
 20104 ;;		_ui_disp_set_calib
 20105 ;; This function uses a non-reentrant model
 20106 ;;
 20107                           
 20108                           
 20109                           ;psect for function _lcd_disp_dp
 20110  2CDC                     _lcd_disp_dp:	
 20111                           
 20112                           ;incstack = 0
 20113                           ; Regs used in _lcd_disp_dp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20114                           ;lcd_disp_dp@dec stored from wreg
 20115  2CDC  0020               	movlb	0	; select bank0
 20116  2CDD  00B5               	movwf	lcd_disp_dp@dec
 20117                           
 20118                           ;lcd.c: 43: switch(dec){
 20119  2CDE  2D36               	goto	l12847
 20120  2CDF                     l12831:	
 20121                           ;lcd.c: 44: case 1:lcd_set_com_seg(3,24,show);break;
 20122                           
 20123  2CDF  3018               	movlw	24
 20124  2CE0  00B3               	movwf	??_lcd_disp_dp
 20125  2CE1  0833               	movf	??_lcd_disp_dp,w
 20126  2CE2  00A8               	movwf	lcd_set_com_seg@seg
 20127  2CE3  0832               	movf	lcd_disp_dp@show,w
 20128  2CE4  00B4               	movwf	??_lcd_disp_dp+1
 20129  2CE5  0834               	movf	??_lcd_disp_dp+1,w
 20130  2CE6  00A9               	movwf	lcd_set_com_seg@show
 20131  2CE7  3003               	movlw	3
 20132  2CE8  3198  2002         	fcall	_lcd_set_com_seg
 20133  2CEA  0008               	return
 20134  2CEB                     l12833:	
 20135                           ;lcd.c: 45: case 2:lcd_set_com_seg(3,26,show);break;
 20136                           
 20137  2CEB  301A               	movlw	26
 20138  2CEC  0020               	movlb	0	; select bank0
 20139  2CED  00B3               	movwf	??_lcd_disp_dp
 20140  2CEE  0833               	movf	??_lcd_disp_dp,w
 20141  2CEF  00A8               	movwf	lcd_set_com_seg@seg
 20142  2CF0  0832               	movf	lcd_disp_dp@show,w
 20143  2CF1  00B4               	movwf	??_lcd_disp_dp+1
 20144  2CF2  0834               	movf	??_lcd_disp_dp+1,w
 20145  2CF3  00A9               	movwf	lcd_set_com_seg@show
 20146  2CF4  3003               	movlw	3
 20147  2CF5  3198  2002         	fcall	_lcd_set_com_seg
 20148  2CF7  0008               	return
 20149  2CF8                     l12835:	
 20150                           ;lcd.c: 46: case 3:lcd_set_com_seg(3,44,show);break;
 20151                           
 20152  2CF8  302C               	movlw	44
 20153  2CF9  0020               	movlb	0	; select bank0
 20154  2CFA  00B3               	movwf	??_lcd_disp_dp
 20155  2CFB  0833               	movf	??_lcd_disp_dp,w
 20156  2CFC  00A8               	movwf	lcd_set_com_seg@seg
 20157  2CFD  0832               	movf	lcd_disp_dp@show,w
 20158  2CFE  00B4               	movwf	??_lcd_disp_dp+1
 20159  2CFF  0834               	movf	??_lcd_disp_dp+1,w
 20160  2D00  00A9               	movwf	lcd_set_com_seg@show
 20161  2D01  3003               	movlw	3
 20162  2D02  3198  2002         	fcall	_lcd_set_com_seg
 20163  2D04  0008               	return
 20164  2D05                     l12837:	
 20165                           ;lcd.c: 47: case 4:lcd_set_com_seg(3,21,show);break;
 20166                           
 20167  2D05  3015               	movlw	21
 20168  2D06  0020               	movlb	0	; select bank0
 20169  2D07  00B3               	movwf	??_lcd_disp_dp
 20170  2D08  0833               	movf	??_lcd_disp_dp,w
 20171  2D09  00A8               	movwf	lcd_set_com_seg@seg
 20172  2D0A  0832               	movf	lcd_disp_dp@show,w
 20173  2D0B  00B4               	movwf	??_lcd_disp_dp+1
 20174  2D0C  0834               	movf	??_lcd_disp_dp+1,w
 20175  2D0D  00A9               	movwf	lcd_set_com_seg@show
 20176  2D0E  3003               	movlw	3
 20177  2D0F  3198  2002         	fcall	_lcd_set_com_seg
 20178  2D11  0008               	return
 20179  2D12                     l12839:	
 20180                           ;lcd.c: 48: case 5:lcd_set_com_seg(3, 4,show);break;
 20181                           
 20182  2D12  3004               	movlw	4
 20183  2D13  0020               	movlb	0	; select bank0
 20184  2D14  00B3               	movwf	??_lcd_disp_dp
 20185  2D15  0833               	movf	??_lcd_disp_dp,w
 20186  2D16  00A8               	movwf	lcd_set_com_seg@seg
 20187  2D17  0832               	movf	lcd_disp_dp@show,w
 20188  2D18  00B4               	movwf	??_lcd_disp_dp+1
 20189  2D19  0834               	movf	??_lcd_disp_dp+1,w
 20190  2D1A  00A9               	movwf	lcd_set_com_seg@show
 20191  2D1B  3003               	movlw	3
 20192  2D1C  3198  2002         	fcall	_lcd_set_com_seg
 20193  2D1E  0008               	return
 20194  2D1F                     l12841:	
 20195                           ;lcd.c: 49: case 6:lcd_set_com_seg(3, 2,show);break;
 20196                           
 20197  2D1F  3002               	movlw	2
 20198  2D20  0020               	movlb	0	; select bank0
 20199  2D21  00B3               	movwf	??_lcd_disp_dp
 20200  2D22  0833               	movf	??_lcd_disp_dp,w
 20201  2D23  00A8               	movwf	lcd_set_com_seg@seg
 20202  2D24  0832               	movf	lcd_disp_dp@show,w
 20203  2D25  00B4               	movwf	??_lcd_disp_dp+1
 20204  2D26  0834               	movf	??_lcd_disp_dp+1,w
 20205  2D27  00A9               	movwf	lcd_set_com_seg@show
 20206  2D28  3003               	movlw	3
 20207  2D29  3198  2002         	fcall	_lcd_set_com_seg
 20208  2D2B  0008               	return
 20209  2D2C                     l12843:	
 20210                           ;lcd.c: 50: case 7:lcd_set_com_seg(3, 0,show);break;
 20211                           
 20212  2D2C  0020               	movlb	0	; select bank0
 20213  2D2D  01A8               	clrf	lcd_set_com_seg@seg
 20214  2D2E  0832               	movf	lcd_disp_dp@show,w
 20215  2D2F  00B3               	movwf	??_lcd_disp_dp
 20216  2D30  0833               	movf	??_lcd_disp_dp,w
 20217  2D31  00A9               	movwf	lcd_set_com_seg@show
 20218  2D32  3003               	movlw	3
 20219  2D33  3198  2002         	fcall	_lcd_set_com_seg
 20220                           
 20221                           ;lcd.c: 53: }
 20222                           
 20223                           ;lcd.c: 52: default:break;
 20224                           
 20225                           ;lcd.c: 51: case 0:
 20226  2D35  0008               	return
 20227  2D36                     l12847:	
 20228  2D36  0020               	movlb	0	; select bank0
 20229  2D37  0835               	movf	lcd_disp_dp@dec,w
 20230                           
 20231                           ; Switch size 1, requested type "space"
 20232                           ; Number of cases is 8, Range of values is 0 to 7
 20233                           ; switch strategies available:
 20234                           ; Name         Instructions Cycles
 20235                           ; direct_byte           22     6 (fixed)
 20236                           ; simple_byte           25    13 (average)
 20237                           ; jumptable            260     6 (fixed)
 20238                           ;	Chosen strategy is direct_byte
 20239  2D38  0084               	movwf	4
 20240  2D39  3008               	movlw	8
 20241  2D3A  0204               	subwf	4,w
 20242  2D3B  1803               	skipnc
 20243  2D3C  0008               	return
 20244  2D3D  31B8               	movlp	high S17357
 20245  2D3E  3504               	lslf	4,w
 20246  2D3F  3E8A               	addlw	low S17357
 20247  2D40  0082               	movwf	2
 20248  2D41                     l1352:	
 20249  2D41  0008               	return
 20250  2D42                     __end_of_lcd_disp_dp:	
 20251                           
 20252                           	psect	swtext2
 20253  388A                     __pswtext2:	
 20254  388A                     S17357:	
 20255  388A  31AD  2D41         	ljmp	l1352
 20256  388C  31AC  2CDF         	ljmp	l12831
 20257  388E  31AC  2CEB         	ljmp	l12833
 20258  3890  31AC  2CF8         	ljmp	l12835
 20259  3892  31AD  2D05         	ljmp	l12837
 20260  3894  31AD  2D12         	ljmp	l12839
 20261  3896  31AD  2D1F         	ljmp	l12841
 20262  3898  31AD  2D2C         	ljmp	l12843
 20263                           
 20264                           	psect	text59
 20265  3DEF                     __ptext59:	
 20266 ;; *************** function _lcd_disp_cln *****************
 20267 ;; Defined at:
 20268 ;;		line 55 in file "src/driver/lcd.c"
 20269 ;; Parameters:    Size  Location     Type
 20270 ;;  show            1    wreg     unsigned char 
 20271 ;; Auto vars:     Size  Location     Type
 20272 ;;  show            1   20[BANK0 ] unsigned char 
 20273 ;; Return value:  Size  Location     Type
 20274 ;;                  1    wreg      void 
 20275 ;; Registers used:
 20276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20277 ;; Tracked objects:
 20278 ;;		On entry : 0/0
 20279 ;;		On exit  : 0/0
 20280 ;;		Unchanged: 0/0
 20281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20283 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20285 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20286 ;;Total ram usage:        3 bytes
 20287 ;; Hardware stack levels used:    1
 20288 ;; Hardware stack levels required when called:    4
 20289 ;; This function calls:
 20290 ;;		_lcd_set_com_seg
 20291 ;; This function is called by:
 20292 ;;		_ui_disp_balance_and_volume
 20293 ;; This function uses a non-reentrant model
 20294 ;;
 20295                           
 20296                           
 20297                           ;psect for function _lcd_disp_cln
 20298  3DEF                     _lcd_disp_cln:	
 20299                           
 20300                           ;incstack = 0
 20301                           ; Regs used in _lcd_disp_cln: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20302                           ;lcd_disp_cln@show stored from wreg
 20303  3DEF  0020               	movlb	0	; select bank0
 20304  3DF0  00B4               	movwf	lcd_disp_cln@show
 20305                           
 20306                           ;lcd.c: 58: lcd_set_com_seg(0, 42,show);
 20307  3DF1  302A               	movlw	42
 20308  3DF2  00B2               	movwf	??_lcd_disp_cln
 20309  3DF3  0832               	movf	??_lcd_disp_cln,w
 20310  3DF4  00A8               	movwf	lcd_set_com_seg@seg
 20311  3DF5  0834               	movf	lcd_disp_cln@show,w
 20312  3DF6  00B3               	movwf	??_lcd_disp_cln+1
 20313  3DF7  0833               	movf	??_lcd_disp_cln+1,w
 20314  3DF8  00A9               	movwf	lcd_set_com_seg@show
 20315  3DF9  3000               	movlw	0
 20316  3DFA  3198  2002  31BD   	fcall	_lcd_set_com_seg
 20317                           
 20318                           ;lcd.c: 59: lcd_set_com_seg(1, 42,show);
 20319  3DFD  302A               	movlw	42
 20320  3DFE  0020               	movlb	0	; select bank0
 20321  3DFF  00B2               	movwf	??_lcd_disp_cln
 20322  3E00  0832               	movf	??_lcd_disp_cln,w
 20323  3E01  00A8               	movwf	lcd_set_com_seg@seg
 20324  3E02  0834               	movf	lcd_disp_cln@show,w
 20325  3E03  00B3               	movwf	??_lcd_disp_cln+1
 20326  3E04  0833               	movf	??_lcd_disp_cln+1,w
 20327  3E05  00A9               	movwf	lcd_set_com_seg@show
 20328  3E06  3001               	movlw	1
 20329  3E07  3198  2002         	fcall	_lcd_set_com_seg
 20330  3E09  0008               	return
 20331  3E0A                     __end_of_lcd_disp_cln:	
 20332                           
 20333                           	psect	text60
 20334  1802                     __ptext60:	
 20335 ;; *************** function _lcd_set_com_seg *****************
 20336 ;; Defined at:
 20337 ;;		line 25 in file "src/driver/lcd.c"
 20338 ;; Parameters:    Size  Location     Type
 20339 ;;  com             1    wreg     unsigned char 
 20340 ;;  seg             1    8[BANK0 ] unsigned char 
 20341 ;;  show            1    9[BANK0 ] unsigned char 
 20342 ;; Auto vars:     Size  Location     Type
 20343 ;;  com             1   15[BANK0 ] unsigned char 
 20344 ;;  bloc            1   17[BANK0 ] unsigned char 
 20345 ;;  p               1   16[BANK0 ] PTR unsigned char 
 20346 ;;		 -> pLCD(24), 
 20347 ;;  addr            1   14[BANK0 ] unsigned char 
 20348 ;; Return value:  Size  Location     Type
 20349 ;;                  2    8[BANK0 ] int 
 20350 ;; Registers used:
 20351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20352 ;; Tracked objects:
 20353 ;;		On entry : 0/0
 20354 ;;		On exit  : 0/0
 20355 ;;		Unchanged: 0/0
 20356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20357 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20358 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20359 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 20360 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 20361 ;;Total ram usage:       10 bytes
 20362 ;; Hardware stack levels used:    1
 20363 ;; Hardware stack levels required when called:    3
 20364 ;; This function calls:
 20365 ;;		___awdiv
 20366 ;;		___bmul
 20367 ;;		___lbmod
 20368 ;; This function is called by:
 20369 ;;		_lcd_disp_dp
 20370 ;;		_lcd_disp_cln
 20371 ;; This function uses a non-reentrant model
 20372 ;;
 20373                           
 20374                           
 20375                           ;psect for function _lcd_set_com_seg
 20376  1802                     _lcd_set_com_seg:	
 20377                           
 20378                           ;incstack = 0
 20379                           ; Regs used in _lcd_set_com_seg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20380                           ;lcd_set_com_seg@com stored from wreg
 20381  1802  0020               	movlb	0	; select bank0
 20382  1803  00AF               	movwf	lcd_set_com_seg@com
 20383                           
 20384                           ;lcd.c: 27: uint8_t *p;
 20385                           ;lcd.c: 28: uint8_t addr,bloc;
 20386                           ;lcd.c: 29: if(seg>45 || com>3)return;
 20387  1804  302E               	movlw	46
 20388  1805  0228               	subwf	lcd_set_com_seg@seg,w
 20389  1806  1803               	skipnc
 20390  1807  0008               	return
 20391  1808  3004               	movlw	4
 20392  1809  022F               	subwf	lcd_set_com_seg@com,w
 20393  180A  1803               	btfsc	3,0
 20394  180B  0008               	return
 20395                           
 20396                           ;lcd.c: 30: addr=(seg/24)*12;
 20397  180C  300C               	movlw	12
 20398  180D  00AA               	movwf	??_lcd_set_com_seg
 20399  180E  082A               	movf	??_lcd_set_com_seg,w
 20400  180F  00A4               	movwf	___bmul@multiplicand
 20401  1810  0828               	movf	lcd_set_com_seg@seg,w
 20402  1811  00AB               	movwf	??_lcd_set_com_seg+1
 20403  1812  01AC               	clrf	??_lcd_set_com_seg+2
 20404  1813  082B               	movf	??_lcd_set_com_seg+1,w
 20405  1814  00F5               	movwf	___awdiv@dividend
 20406  1815  082C               	movf	??_lcd_set_com_seg+2,w
 20407  1816  00F6               	movwf	___awdiv@dividend+1
 20408  1817  3018               	movlw	24
 20409  1818  00F3               	movwf	___awdiv@divisor
 20410  1819  3000               	movlw	0
 20411  181A  00F4               	movwf	___awdiv@divisor+1
 20412  181B  31AA  2216  3198   	fcall	___awdiv
 20413  181E  0873               	movf	?___awdiv,w
 20414  181F  31BC  245A  3198   	fcall	___bmul
 20415  1822  0020               	movlb	0	; select bank0
 20416  1823  00AD               	movwf	??_lcd_set_com_seg+3
 20417  1824  082D               	movf	??_lcd_set_com_seg+3,w
 20418  1825  00AE               	movwf	lcd_set_com_seg@addr
 20419                           
 20420                           ;lcd.c: 31: addr+=(com*3);
 20421  1826  3003               	movlw	3
 20422  1827  00AA               	movwf	??_lcd_set_com_seg
 20423  1828  082A               	movf	??_lcd_set_com_seg,w
 20424  1829  00A4               	movwf	___bmul@multiplicand
 20425  182A  082F               	movf	lcd_set_com_seg@com,w
 20426  182B  31BC  245A  3198   	fcall	___bmul
 20427  182E  0020               	movlb	0	; select bank0
 20428  182F  00AB               	movwf	??_lcd_set_com_seg+1
 20429  1830  082B               	movf	??_lcd_set_com_seg+1,w
 20430  1831  07AE               	addwf	lcd_set_com_seg@addr,f
 20431                           
 20432                           ;lcd.c: 32: seg%=24;
 20433  1832  3018               	movlw	24
 20434  1833  00AA               	movwf	??_lcd_set_com_seg
 20435  1834  082A               	movf	??_lcd_set_com_seg,w
 20436  1835  00F3               	movwf	___lbmod@divisor
 20437  1836  0828               	movf	lcd_set_com_seg@seg,w
 20438  1837  31BE  26BA  3198   	fcall	___lbmod
 20439  183A  0020               	movlb	0	; select bank0
 20440  183B  00AB               	movwf	??_lcd_set_com_seg+1
 20441  183C  082B               	movf	??_lcd_set_com_seg+1,w
 20442  183D  00A8               	movwf	lcd_set_com_seg@seg
 20443                           
 20444                           ;lcd.c: 33: addr+=(seg/8);
 20445  183E  3008               	movlw	8
 20446  183F  00F3               	movwf	___awdiv@divisor
 20447  1840  3000               	movlw	0
 20448  1841  00F4               	movwf	___awdiv@divisor+1
 20449  1842  0828               	movf	lcd_set_com_seg@seg,w
 20450  1843  00AA               	movwf	??_lcd_set_com_seg
 20451  1844  01AB               	clrf	??_lcd_set_com_seg+1
 20452  1845  082A               	movf	??_lcd_set_com_seg,w
 20453  1846  00F5               	movwf	___awdiv@dividend
 20454  1847  082B               	movf	??_lcd_set_com_seg+1,w
 20455  1848  00F6               	movwf	___awdiv@dividend+1
 20456  1849  31AA  2216  3198   	fcall	___awdiv
 20457  184C  0873               	movf	?___awdiv,w
 20458  184D  0020               	movlb	0	; select bank0
 20459  184E  00AC               	movwf	??_lcd_set_com_seg+2
 20460  184F  082C               	movf	??_lcd_set_com_seg+2,w
 20461  1850  07AE               	addwf	lcd_set_com_seg@addr,f
 20462                           
 20463                           ;lcd.c: 34: bloc=seg%8;
 20464  1851  0828               	movf	lcd_set_com_seg@seg,w
 20465  1852  3907               	andlw	7
 20466  1853  00AA               	movwf	??_lcd_set_com_seg
 20467  1854  082A               	movf	??_lcd_set_com_seg,w
 20468  1855  00B1               	movwf	lcd_set_com_seg@bloc
 20469                           
 20470                           ;lcd.c: 35: p=pLCD+addr;
 20471  1856  082E               	movf	lcd_set_com_seg@addr,w
 20472  1857  3EA6               	addlw	(low (_pLCD| (0+256)))& (0+255)
 20473  1858  00AA               	movwf	??_lcd_set_com_seg
 20474  1859  082A               	movf	??_lcd_set_com_seg,w
 20475  185A  00B0               	movwf	lcd_set_com_seg@p
 20476                           
 20477                           ;lcd.c: 36: if(show)
 20478  185B  0829               	movf	lcd_set_com_seg@show,w
 20479  185C  1903               	btfsc	3,2
 20480  185D  286E               	goto	l12679
 20481                           
 20482                           ;lcd.c: 37: *p |= (1<<bloc);
 20483  185E  3001               	movlw	1
 20484  185F  00AA               	movwf	??_lcd_set_com_seg
 20485  1860  0A31               	incf	lcd_set_com_seg@bloc,w
 20486  1861  2863               	goto	u11094
 20487  1862                     u11095:	
 20488  1862  35AA               	lslf	??_lcd_set_com_seg,f
 20489  1863                     u11094:	
 20490  1863  0B89               	decfsz	9,f
 20491  1864  2862               	goto	u11095
 20492  1865  082A               	movf	??_lcd_set_com_seg,w
 20493  1866  00AB               	movwf	??_lcd_set_com_seg+1
 20494  1867  0830               	movf	lcd_set_com_seg@p,w
 20495  1868  0086               	movwf	6
 20496  1869  3001               	movlw	1	; select bank2/3
 20497  186A  0087               	movwf	7
 20498  186B  082B               	movf	??_lcd_set_com_seg+1,w
 20499  186C  0481               	iorwf	1,f
 20500  186D  0008               	return
 20501  186E                     l12679:	
 20502                           
 20503                           ;lcd.c: 38: else
 20504                           ;lcd.c: 39: *p &= ~(1<<bloc);
 20505  186E  3001               	movlw	1
 20506  186F  00AA               	movwf	??_lcd_set_com_seg
 20507  1870  0A31               	incf	lcd_set_com_seg@bloc,w
 20508  1871  2873               	goto	u11104
 20509  1872                     u11105:	
 20510  1872  35AA               	lslf	??_lcd_set_com_seg,f
 20511  1873                     u11104:	
 20512  1873  0B89               	decfsz	9,f
 20513  1874  2872               	goto	u11105
 20514  1875  082A               	movf	??_lcd_set_com_seg,w
 20515  1876  3AFF               	xorlw	255
 20516  1877  00AB               	movwf	??_lcd_set_com_seg+1
 20517  1878  0830               	movf	lcd_set_com_seg@p,w
 20518  1879  0086               	movwf	6
 20519  187A  3001               	movlw	1	; select bank2/3
 20520  187B  0087               	movwf	7
 20521  187C  082B               	movf	??_lcd_set_com_seg+1,w
 20522  187D  0581               	andwf	1,f
 20523  187E  0008               	return
 20524  187F                     __end_of_lcd_set_com_seg:	
 20525                           
 20526                           	psect	text61
 20527  3EBA                     __ptext61:	
 20528 ;; *************** function ___lbmod *****************
 20529 ;; Defined at:
 20530 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lbmod.c"
 20531 ;; Parameters:    Size  Location     Type
 20532 ;;  dividend        1    wreg     unsigned char 
 20533 ;;  divisor         1    3[COMMON] unsigned char 
 20534 ;; Auto vars:     Size  Location     Type
 20535 ;;  dividend        1    0[BANK0 ] unsigned char 
 20536 ;;  rem             1    2[BANK0 ] unsigned char 
 20537 ;;  counter         1    1[BANK0 ] unsigned char 
 20538 ;; Return value:  Size  Location     Type
 20539 ;;                  1    wreg      unsigned char 
 20540 ;; Registers used:
 20541 ;;		wreg, status,2, status,0
 20542 ;; Tracked objects:
 20543 ;;		On entry : 0/0
 20544 ;;		On exit  : 0/0
 20545 ;;		Unchanged: 0/0
 20546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20547 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20548 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20549 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20550 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20551 ;;Total ram usage:        6 bytes
 20552 ;; Hardware stack levels used:    1
 20553 ;; Hardware stack levels required when called:    2
 20554 ;; This function calls:
 20555 ;;		Nothing
 20556 ;; This function is called by:
 20557 ;;		_ui_disp_set_calib
 20558 ;;		_lcd_set_com_seg
 20559 ;; This function uses a non-reentrant model
 20560 ;;
 20561                           
 20562                           
 20563                           ;psect for function ___lbmod
 20564  3EBA                     ___lbmod:	
 20565                           
 20566                           ;incstack = 0
 20567                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 20568                           ;___lbmod@dividend stored from wreg
 20569  3EBA  0020               	movlb	0	; select bank0
 20570  3EBB  00A0               	movwf	___lbmod@dividend
 20571  3EBC  3008               	movlw	8
 20572  3EBD  00F4               	movwf	??___lbmod
 20573  3EBE  0874               	movf	??___lbmod,w
 20574  3EBF  00A1               	movwf	___lbmod@counter
 20575  3EC0  01A2               	clrf	___lbmod@rem
 20576  3EC1                     l12607:	
 20577  3EC1  0820               	movf	___lbmod@dividend,w
 20578  3EC2  00F4               	movwf	??___lbmod
 20579  3EC3  3007               	movlw	7
 20580  3EC4                     u10965:	
 20581  3EC4  36F4               	lsrf	??___lbmod,f
 20582  3EC5  0B89               	decfsz	9,f
 20583  3EC6  2EC4               	goto	u10965
 20584  3EC7  3522               	lslf	___lbmod@rem,w
 20585  3EC8  0474               	iorwf	??___lbmod,w
 20586  3EC9  00F5               	movwf	??___lbmod+1
 20587  3ECA  0875               	movf	??___lbmod+1,w
 20588  3ECB  00A2               	movwf	___lbmod@rem
 20589  3ECC  1003               	clrc
 20590  3ECD  0DA0               	rlf	___lbmod@dividend,f
 20591  3ECE  0873               	movf	___lbmod@divisor,w
 20592  3ECF  0222               	subwf	___lbmod@rem,w
 20593  3ED0  1C03               	skipc
 20594  3ED1  2ED4               	goto	l2972
 20595  3ED2  0873               	movf	___lbmod@divisor,w
 20596  3ED3  02A2               	subwf	___lbmod@rem,f
 20597  3ED4                     l2972:	
 20598  3ED4  3001               	movlw	1
 20599  3ED5  02A1               	subwf	___lbmod@counter,f
 20600  3ED6  1D03               	btfss	3,2
 20601  3ED7  2EC1               	goto	l12607
 20602  3ED8  0822               	movf	___lbmod@rem,w
 20603  3ED9  0008               	return
 20604  3EDA                     __end_of___lbmod:	
 20605                           
 20606                           	psect	text62
 20607  0B78                     __ptext62:	
 20608 ;; *************** function _rfid_comm_process_recharge *****************
 20609 ;; Defined at:
 20610 ;;		line 126 in file "src/app/rfid_demo.c"
 20611 ;; Parameters:    Size  Location     Type
 20612 ;;		None
 20613 ;; Auto vars:     Size  Location     Type
 20614 ;;  stpDec          1   79[BANK0 ] PTR struct .
 20615 ;;		 -> cardDecBuf(18), 
 20616 ;;  stpInc          1   78[BANK0 ] PTR struct .
 20617 ;;		 -> cardIncBuf(18), 
 20618 ;;  ret             1   77[BANK0 ] unsigned char 
 20619 ;; Return value:  Size  Location     Type
 20620 ;;                  1    wreg      unsigned char 
 20621 ;; Registers used:
 20622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20623 ;; Tracked objects:
 20624 ;;		On entry : 0/0
 20625 ;;		On exit  : 0/0
 20626 ;;		Unchanged: 0/0
 20627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20629 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20630 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0
 20631 ;;      Totals:         0       3       8       0       0       0       0       0       0       0       0       0       
      +0
 20632 ;;Total ram usage:       11 bytes
 20633 ;; Hardware stack levels used:    1
 20634 ;; Hardware stack levels required when called:    9
 20635 ;; This function calls:
 20636 ;;		_crc_append
 20637 ;;		_data_api_flash_process
 20638 ;;		_m_mem_cpy_len
 20639 ;;		_mifare_write
 20640 ;;		_picc_authenticate
 20641 ;; This function is called by:
 20642 ;;		_rfid_comm_process
 20643 ;; This function uses a non-reentrant model
 20644 ;;
 20645                           
 20646                           
 20647                           ;psect for function _rfid_comm_process_recharge
 20648  0B78                     _rfid_comm_process_recharge:	
 20649                           
 20650                           ;rfid_demo.c: 128: st_cardValueStrucrtDef* stpInc,*stpDec;
 20651                           ;rfid_demo.c: 130: uint8_t ret;
 20652                           ;rfid_demo.c: 131: stpInc=(st_cardValueStrucrtDef*)cardIncBuf;
 20653                           
 20654                           ;incstack = 0
 20655                           ; Regs used in _rfid_comm_process_recharge: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20656  0B78  3044               	movlw	68
 20657  0B79  0021               	movlb	1	; select bank1
 20658  0B7A  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20659  0B7B  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20660  0B7C  0020               	movlb	0	; select bank0
 20661  0B7D  00EE               	movwf	rfid_comm_process_recharge@stpInc
 20662                           
 20663                           ;rfid_demo.c: 132: stpDec=(st_cardValueStrucrtDef*)cardDecBuf;
 20664  0B7E  3056               	movlw	86
 20665  0B7F  0021               	movlb	1	; select bank1
 20666  0B80  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20667  0B81  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20668  0B82  0020               	movlb	0	; select bank0
 20669  0B83  00EF               	movwf	rfid_comm_process_recharge@stpDec
 20670                           
 20671                           ;rfid_demo.c: 133: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 20672  0B84  300F               	movlw	15
 20673  0B85  0021               	movlb	1	; select bank1
 20674  0B86  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20675  0B87  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20676  0B88  0020               	movlb	0	; select bank0
 20677  0B89  00CA               	movwf	picc_authenticate@blockAddr
 20678  0B8A  30CA               	movlw	low _userKeyB
 20679  0B8B  00CB               	movwf	picc_authenticate@key
 20680  0B8C  3001               	movlw	high _userKeyB
 20681  0B8D  00CC               	movwf	picc_authenticate@key+1
 20682  0B8E  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 20683  0B8F  0021               	movlb	1	; select bank1
 20684  0B90  00CF               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 20685  0B91  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20686  0B92  0020               	movlb	0	; select bank0
 20687  0B93  00CD               	movwf	picc_authenticate@uid
 20688  0B94  3061               	movlw	97
 20689  0B95  31AC  2477  318B   	fcall	_picc_authenticate
 20690  0B98  0021               	movlb	1	; select bank1
 20691  0B99  00D0               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20692  0B9A  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20693  0B9B  00BE               	movwf	_piccResult^(0+128)
 20694                           
 20695                           ;rfid_demo.c: 134: if(piccResult!=STATUS_OK)return 0;
 20696  0B9C  083E               	movf	_piccResult^(0+128),w
 20697  0B9D  1903               	btfsc	3,2
 20698  0B9E  2BA1               	goto	l15589
 20699  0B9F  3000               	movlw	0
 20700  0BA0  0008               	return
 20701  0BA1                     l15589:	
 20702                           
 20703                           ;rfid_demo.c: 135: if(mainSystemData.payTimes!=stpDec->Times){
 20704  0BA1  0020               	movlb	0	; select bank0
 20705  0BA2  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20706  0BA3  3E04               	addlw	4
 20707  0BA4  0086               	movwf	6
 20708  0BA5  3004               	movlw	4	; select bank8/9
 20709  0BA6  0087               	movwf	7
 20710  0BA7  3F40               	moviw [0]fsr1
 20711  0BA8  0021               	movlb	1	; select bank1
 20712  0BA9  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20713  0BAA  3F41               	moviw [1]fsr1
 20714  0BAB  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20715  0BAC  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20716  0BAD  0024               	movlb	4	; select bank4
 20717  0BAE  0641               	xorwf	((_mainSystemData+1)^(0+512)+32),w
 20718  0BAF  1D03               	skipz
 20719  0BB0  2BB5               	goto	u14325
 20720  0BB1  0021               	movlb	1	; select bank1
 20721  0BB2  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20722  0BB3  0024               	movlb	4	; select bank4
 20723  0BB4  0640               	xorwf	(_mainSystemData^(0+512)+32),w
 20724  0BB5                     u14325:	
 20725  0BB5  1903               	skipnz
 20726  0BB6  2C3A               	goto	l15613
 20727                           
 20728                           ;rfid_demo.c: 136: if(mainSystemData.payTimes==stpDec->Times+1){
 20729  0BB7  0020               	movlb	0	; select bank0
 20730  0BB8  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20731  0BB9  3E04               	addlw	4
 20732  0BBA  0086               	movwf	6
 20733  0BBB  3004               	movlw	4	; select bank8/9
 20734  0BBC  0087               	movwf	7
 20735  0BBD  3F40               	moviw [0]fsr1
 20736  0BBE  0021               	movlb	1	; select bank1
 20737  0BBF  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20738  0BC0  3F41               	moviw [1]fsr1
 20739  0BC1  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20740  0BC2  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20741  0BC3  3E01               	addlw	1
 20742  0BC4  00D0               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20743  0BC5  3000               	movlw	0
 20744  0BC6  3D4F               	addwfc	(??_rfid_comm_process_recharge+1)^(0+128),w
 20745  0BC7  00D1               	movwf	(??_rfid_comm_process_recharge+3)^(0+128)
 20746  0BC8  0024               	movlb	4	; select bank4
 20747  0BC9  0841               	movf	((_mainSystemData+1)^(0+512)+32),w
 20748  0BCA  0021               	movlb	1	; select bank1
 20749  0BCB  0651               	xorwf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20750  0BCC  1D03               	skipz
 20751  0BCD  2BD2               	goto	u14335
 20752  0BCE  0024               	movlb	4	; select bank4
 20753  0BCF  0840               	movf	(_mainSystemData^(0+512)+32),w
 20754  0BD0  0021               	movlb	1	; select bank1
 20755  0BD1  0650               	xorwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20756  0BD2                     u14335:	
 20757  0BD2  1D03               	skipz
 20758  0BD3  2C12               	goto	l15607
 20759                           
 20760                           ;rfid_demo.c: 137: stpDec->Value=mainSystemData.transferMoney;
 20761  0BD4  0020               	movlb	0	; select bank0
 20762  0BD5  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20763  0BD6  0086               	movwf	6
 20764  0BD7  3004               	movlw	4	; select bank8/9
 20765  0BD8  0087               	movwf	7
 20766  0BD9  0024               	movlb	4	; select bank4
 20767  0BDA  082C               	movf	(_mainSystemData^(0+512)+12),w
 20768  0BDB  3FC0               	movwi [0]fsr1
 20769  0BDC  082D               	movf	((_mainSystemData+1)^(0+512)+12),w
 20770  0BDD  3FC1               	movwi [1]fsr1
 20771  0BDE  082E               	movf	((_mainSystemData+2)^(0+512)+12),w
 20772  0BDF  3FC2               	movwi [2]fsr1
 20773  0BE0  082F               	movf	((_mainSystemData+3)^(0+512)+12),w
 20774  0BE1  3FC3               	movwi [3]fsr1
 20775                           
 20776                           ;rfid_demo.c: 138: stpDec->Times=mainSystemData.payTimes;
 20777  0BE2  0020               	movlb	0	; select bank0
 20778  0BE3  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20779  0BE4  3E04               	addlw	4
 20780  0BE5  0086               	movwf	6
 20781  0BE6  3004               	movlw	4	; select bank8/9
 20782  0BE7  0087               	movwf	7
 20783  0BE8  0024               	movlb	4	; select bank4
 20784  0BE9  0840               	movf	(_mainSystemData^(0+512)+32),w
 20785  0BEA  3FC0               	movwi [0]fsr1
 20786  0BEB  0841               	movf	((_mainSystemData+1)^(0+512)+32),w
 20787  0BEC  3FC1               	movwi [1]fsr1
 20788                           
 20789                           ;rfid_demo.c: 139: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 20790  0BED  3056               	movlw	86
 20791  0BEE  0020               	movlb	0	; select bank0
 20792  0BEF  00A8               	movwf	crc_append@message
 20793  0BF0  3004               	movlw	4
 20794  0BF1  00A9               	movwf	crc_append@message+1
 20795  0BF2  3006               	movlw	6
 20796  0BF3  00AA               	movwf	crc_append@n
 20797  0BF4  3000               	movlw	0
 20798  0BF5  00AB               	movwf	crc_append@n+1
 20799  0BF6  31B3  23C9  318B   	fcall	_crc_append
 20800                           
 20801                           ;rfid_demo.c: 140: piccResult = mifare_write(12, cardDecBuf,16);
 20802  0BF9  3056               	movlw	86
 20803  0BFA  0021               	movlb	1	; select bank1
 20804  0BFB  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20805  0BFC  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20806  0BFD  0020               	movlb	0	; select bank0
 20807  0BFE  00E9               	movwf	mifare_write@buffer
 20808  0BFF  3010               	movlw	16
 20809  0C00  0021               	movlb	1	; select bank1
 20810  0C01  00CF               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 20811  0C02  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20812  0C03  0020               	movlb	0	; select bank0
 20813  0C04  00EA               	movwf	mifare_write@bufferSize
 20814  0C05  300C               	movlw	12
 20815  0C06  31A8  205A  318B   	fcall	_mifare_write
 20816  0C09  0021               	movlb	1	; select bank1
 20817  0C0A  00D0               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 20818  0C0B  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20819  0C0C  00BE               	movwf	_piccResult^(0+128)
 20820                           
 20821                           ;rfid_demo.c: 141: if(piccResult!=STATUS_OK){
 20822  0C0D  083E               	movf	_piccResult^(0+128),w
 20823  0C0E  1903               	btfsc	3,2
 20824  0C0F  2C3A               	goto	l15613
 20825                           
 20826                           ;rfid_demo.c: 142: return 0;
 20827  0C10  3000               	movlw	0
 20828  0C11  0008               	return
 20829  0C12                     l15607:	
 20830                           ;rfid_demo.c: 143: }
 20831                           ;rfid_demo.c: 144: }
 20832                           
 20833                           
 20834                           ;rfid_demo.c: 145: else{
 20835                           ;rfid_demo.c: 146: if(stpDec->Value != mainSystemData.transferMoney ){
 20836  0C12  0020               	movlb	0	; select bank0
 20837  0C13  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20838  0C14  0086               	movwf	6
 20839  0C15  3004               	movlw	4	; select bank8/9
 20840  0C16  0087               	movwf	7
 20841  0C17  3F40               	moviw [0]fsr1
 20842  0C18  0021               	movlb	1	; select bank1
 20843  0C19  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20844  0C1A  3F41               	moviw [1]fsr1
 20845  0C1B  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20846  0C1C  3F42               	moviw [2]fsr1
 20847  0C1D  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 20848  0C1E  3F43               	moviw [3]fsr1
 20849  0C1F  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 20850  0C20  0024               	movlb	4	; select bank4
 20851  0C21  082F               	movf	((_mainSystemData+3)^(0+512)+12),w
 20852  0C22  0021               	movlb	1	; select bank1
 20853  0C23  0651               	xorwf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20854  0C24  1D03               	skipz
 20855  0C25  2C36               	goto	u14355
 20856  0C26  0024               	movlb	4	; select bank4
 20857  0C27  082E               	movf	((_mainSystemData+2)^(0+512)+12),w
 20858  0C28  0021               	movlb	1	; select bank1
 20859  0C29  0650               	xorwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20860  0C2A  1D03               	skipz
 20861  0C2B  2C36               	goto	u14355
 20862  0C2C  0024               	movlb	4	; select bank4
 20863  0C2D  082D               	movf	((_mainSystemData+1)^(0+512)+12),w
 20864  0C2E  0021               	movlb	1	; select bank1
 20865  0C2F  064F               	xorwf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20866  0C30  1D03               	skipz
 20867  0C31  2C36               	goto	u14355
 20868  0C32  0024               	movlb	4	; select bank4
 20869  0C33  082C               	movf	(_mainSystemData^(0+512)+12),w
 20870  0C34  0021               	movlb	1	; select bank1
 20871  0C35  064E               	xorwf	??_rfid_comm_process_recharge^(0+128),w
 20872  0C36                     u14355:	
 20873  0C36  1903               	skipnz
 20874  0C37  2C3A               	goto	l15613
 20875                           
 20876                           ;rfid_demo.c: 147: return 0;
 20877  0C38  3000               	movlw	0
 20878  0C39  0008               	return
 20879  0C3A                     l15613:	
 20880                           
 20881                           ;rfid_demo.c: 148: }
 20882                           ;rfid_demo.c: 149: }
 20883                           ;rfid_demo.c: 150: }
 20884                           ;rfid_demo.c: 152: __q31=stpInc->Value;
 20885  0C3A  0020               	movlb	0	; select bank0
 20886  0C3B  086E               	movf	rfid_comm_process_recharge@stpInc,w
 20887  0C3C  0086               	movwf	6
 20888  0C3D  3004               	movlw	4	; select bank8/9
 20889  0C3E  0087               	movwf	7
 20890  0C3F  3F40               	moviw [0]fsr1
 20891  0C40  0021               	movlb	1	; select bank1
 20892  0C41  00AC               	movwf	___q31^(0+128)
 20893  0C42  3F41               	moviw [1]fsr1
 20894  0C43  00AD               	movwf	(___q31+1)^(0+128)
 20895  0C44  3F42               	moviw [2]fsr1
 20896  0C45  00AE               	movwf	(___q31+2)^(0+128)
 20897  0C46  3F43               	moviw [3]fsr1
 20898  0C47  00AF               	movwf	(___q31+3)^(0+128)
 20899                           
 20900                           ;rfid_demo.c: 153: __q31=__q31-stpDec->Value;
 20901  0C48  082C               	movf	___q31^(0+128),w
 20902  0C49  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20903  0C4A  082D               	movf	(___q31+1)^(0+128),w
 20904  0C4B  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 20905  0C4C  082E               	movf	(___q31+2)^(0+128),w
 20906  0C4D  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 20907  0C4E  082F               	movf	(___q31+3)^(0+128),w
 20908  0C4F  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 20909  0C50  0020               	movlb	0	; select bank0
 20910  0C51  086F               	movf	rfid_comm_process_recharge@stpDec,w
 20911  0C52  0086               	movwf	6
 20912  0C53  3004               	movlw	4	; select bank8/9
 20913  0C54  0087               	movwf	7
 20914  0C55  3F40               	moviw [0]fsr1
 20915  0C56  0021               	movlb	1	; select bank1
 20916  0C57  00D2               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 20917  0C58  3F41               	moviw [1]fsr1
 20918  0C59  00D3               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 20919  0C5A  3F42               	moviw [2]fsr1
 20920  0C5B  00D4               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 20921  0C5C  3F43               	moviw [3]fsr1
 20922  0C5D  00D5               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 20923  0C5E  09D2               	comf	(??_rfid_comm_process_recharge+4)^(0+128),f
 20924  0C5F  09D3               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 20925  0C60  09D4               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 20926  0C61  09D5               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 20927  0C62  0AD2               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 20928  0C63  1903               	skipnz
 20929  0C64  0AD3               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 20930  0C65  1903               	skipnz
 20931  0C66  0AD4               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 20932  0C67  1903               	skipnz
 20933  0C68  0AD5               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 20934  0C69  0852               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 20935  0C6A  07CE               	addwf	??_rfid_comm_process_recharge^(0+128),f
 20936  0C6B  0853               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 20937  0C6C  3DCF               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 20938  0C6D  0854               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 20939  0C6E  3DD0               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 20940  0C6F  0855               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 20941  0C70  3DD1               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 20942  0C71  0851               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 20943  0C72  00AF               	movwf	(___q31+3)^(0+128)
 20944  0C73  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 20945  0C74  00AE               	movwf	(___q31+2)^(0+128)
 20946  0C75  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 20947  0C76  00AD               	movwf	(___q31+1)^(0+128)
 20948  0C77  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20949  0C78  00AC               	movwf	___q31^(0+128)
 20950                           
 20951                           ;rfid_demo.c: 154: if(__q31<=0){
 20952  0C79  1BAF               	btfsc	(___q31+3)^(0+128),7
 20953  0C7A  2C88               	goto	l15619
 20954  0C7B  082F               	movf	(___q31+3)^(0+128),w
 20955  0C7C  1D03               	btfss	3,2
 20956  0C7D  2C8F               	goto	l15623
 20957  0C7E  082E               	movf	(___q31+2)^(0+128),w
 20958  0C7F  1D03               	btfss	3,2
 20959  0C80  2C8F               	goto	l15623
 20960  0C81  082D               	movf	(___q31+1)^(0+128),w
 20961  0C82  1D03               	btfss	3,2
 20962  0C83  2C8F               	goto	l15623
 20963  0C84  3001               	movlw	1
 20964  0C85  022C               	subwf	___q31^(0+128),w
 20965  0C86  1803               	btfsc	3,0
 20966  0C87  2C8F               	goto	l15623
 20967  0C88                     l15619:	
 20968                           
 20969                           ;rfid_demo.c: 155: CardError=CARD_NO_BALANCE;
 20970  0C88  300E               	movlw	14
 20971  0C89  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20972  0C8A  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 20973  0C8B  0022               	movlb	2	; select bank2
 20974  0C8C  00B7               	movwf	_CardError^(0+256)
 20975                           
 20976                           ;rfid_demo.c: 156: return 0;
 20977  0C8D  3000               	movlw	0
 20978  0C8E  0008               	return
 20979  0C8F                     l15623:	
 20980                           
 20981                           ;rfid_demo.c: 157: }
 20982                           ;rfid_demo.c: 158: if(__q31>mainSystemData.transferMoneyLimit){
 20983  0C8F  0024               	movlb	4	; select bank4
 20984  0C90  0847               	movf	((_mainSystemData+3)^(0+512)+36),w
 20985  0C91  3A80               	xorlw	128
 20986  0C92  0021               	movlb	1	; select bank1
 20987  0C93  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 20988  0C94  082F               	movf	(___q31+3)^(0+128),w
 20989  0C95  3A80               	xorlw	128
 20990  0C96  024E               	subwf	??_rfid_comm_process_recharge^(0+128),w
 20991  0C97  0024               	movlb	4	; select bank4
 20992  0C98  1D03               	skipz
 20993  0C99  2CAA               	goto	u14373
 20994  0C9A  0021               	movlb	1	; select bank1
 20995  0C9B  082E               	movf	(___q31+2)^(0+128),w
 20996  0C9C  0024               	movlb	4	; select bank4
 20997  0C9D  0246               	subwf	((_mainSystemData+2)^(0+512)+36),w
 20998  0C9E  1D03               	skipz
 20999  0C9F  2CAA               	goto	u14373
 21000  0CA0  0021               	movlb	1	; select bank1
 21001  0CA1  082D               	movf	(___q31+1)^(0+128),w
 21002  0CA2  0024               	movlb	4	; select bank4
 21003  0CA3  0245               	subwf	((_mainSystemData+1)^(0+512)+36),w
 21004  0CA4  1D03               	skipz
 21005  0CA5  2CAA               	goto	u14373
 21006  0CA6  0021               	movlb	1	; select bank1
 21007  0CA7  082C               	movf	___q31^(0+128),w
 21008  0CA8  0024               	movlb	4	; select bank4
 21009  0CA9  0244               	subwf	(_mainSystemData^(0+512)+36),w
 21010  0CAA                     u14373:	
 21011  0CAA  1803               	skipnc
 21012  0CAB  2CBA               	goto	l15627
 21013                           
 21014                           ;rfid_demo.c: 159: __q31=mainSystemData.transferMoneyLimit;
 21015  0CAC  3024               	movlw	36
 21016  0CAD  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 21017  0CAE  0086               	movwf	6
 21018  0CAF  3002               	movlw	2	; select bank4/5
 21019  0CB0  0087               	movwf	7
 21020  0CB1  3F40               	moviw [0]fsr1
 21021  0CB2  0021               	movlb	1	; select bank1
 21022  0CB3  00AC               	movwf	___q31^(0+128)
 21023  0CB4  3F41               	moviw [1]fsr1
 21024  0CB5  00AD               	movwf	(___q31+1)^(0+128)
 21025  0CB6  3F42               	moviw [2]fsr1
 21026  0CB7  00AE               	movwf	(___q31+2)^(0+128)
 21027  0CB8  3F43               	moviw [3]fsr1
 21028  0CB9  00AF               	movwf	(___q31+3)^(0+128)
 21029  0CBA                     l15627:	
 21030                           
 21031                           ;rfid_demo.c: 160: }
 21032                           ;rfid_demo.c: 161: stpDec->Value += __q31;
 21033  0CBA  0020               	movlb	0	; select bank0
 21034  0CBB  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21035  0CBC  0086               	movwf	6
 21036  0CBD  3004               	movlw	4	; select bank8/9
 21037  0CBE  0087               	movwf	7
 21038  0CBF  0021               	movlb	1	; select bank1
 21039  0CC0  082C               	movf	___q31^(0+128),w
 21040  0CC1  0781               	addwf	1,f
 21041  0CC2  3141               	addfsr 1,1
 21042  0CC3  082D               	movf	(___q31+1)^(0+128),w
 21043  0CC4  3D81               	addwfc	1,f
 21044  0CC5  3141               	addfsr 1,1
 21045  0CC6  082E               	movf	(___q31+2)^(0+128),w
 21046  0CC7  3D81               	addwfc	1,f
 21047  0CC8  3141               	addfsr 1,1
 21048  0CC9  082F               	movf	(___q31+3)^(0+128),w
 21049  0CCA  3D81               	addwfc	1,f
 21050                           
 21051                           ;rfid_demo.c: 162: stpDec->Times+=1;
 21052  0CCB  0020               	movlb	0	; select bank0
 21053  0CCC  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21054  0CCD  3E04               	addlw	4
 21055  0CCE  0086               	movwf	6
 21056  0CCF  3004               	movlw	4	; select bank8/9
 21057  0CD0  0087               	movwf	7
 21058  0CD1  3001               	movlw	1
 21059  0CD2  0781               	addwf	1,f
 21060  0CD3  3141               	addfsr 1,1
 21061  0CD4  1803               	skipnc
 21062  0CD5  0A81               	incf	1,f
 21063                           
 21064                           ;rfid_demo.c: 163: __t16=stpDec->Times,
 21065                           ;rfid_demo.c: 164: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 21066  0CD6  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21067  0CD7  3E04               	addlw	4
 21068  0CD8  0086               	movwf	6
 21069  0CD9  3004               	movlw	4	; select bank8/9
 21070  0CDA  0087               	movwf	7
 21071  0CDB  3F40               	moviw [0]fsr1
 21072  0CDC  00F8               	movwf	___t16
 21073  0CDD  3F41               	moviw [1]fsr1
 21074  0CDE  00F9               	movwf	___t16+1
 21075  0CDF  3056               	movlw	86
 21076  0CE0  00A8               	movwf	crc_append@message
 21077  0CE1  3004               	movlw	4
 21078  0CE2  00A9               	movwf	crc_append@message+1
 21079  0CE3  3006               	movlw	6
 21080  0CE4  00AA               	movwf	crc_append@n
 21081  0CE5  3000               	movlw	0
 21082  0CE6  00AB               	movwf	crc_append@n+1
 21083  0CE7  31B3  23C9  318B   	fcall	_crc_append
 21084                           
 21085                           ;rfid_demo.c: 167: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->transferMone
      +                          y));
 21086  0CEA  300C               	movlw	12
 21087  0CEB  0022               	movlb	2	; select bank2
 21088  0CEC  00C3               	movwf	_flashOpStr^(0+256)
 21089  0CED  3000               	movlw	0
 21090  0CEE  00C4               	movwf	(_flashOpStr+1)^(0+256)
 21091                           
 21092                           ;rfid_demo.c: 168: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21093  0CEF  3002               	movlw	2
 21094  0CF0  0021               	movlb	1	; select bank1
 21095  0CF1  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21096  0CF2  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21097  0CF3  0022               	movlb	2	; select bank2
 21098  0CF4  00D7               	movwf	(_flashOpStr^(0+256)+20)
 21099                           
 21100                           ;rfid_demo.c: 169: flashOpStr.len=6;
 21101  0CF5  3006               	movlw	6
 21102  0CF6  00C5               	movwf	(_flashOpStr^(0+256)+2)
 21103  0CF7  3000               	movlw	0
 21104  0CF8  00C6               	movwf	(_flashOpStr^(0+256)+3)
 21105                           
 21106                           ;rfid_demo.c: 170: rtBalanceMoney=rtBalanceMoney+__q31;
 21107  0CF9  0021               	movlb	1	; select bank1
 21108  0CFA  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 21109  0CFB  072C               	addwf	___q31^(0+128),w
 21110  0CFC  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21111  0CFD  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21112  0CFE  3D2D               	addwfc	(___q31+1)^(0+128),w
 21113  0CFF  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21114  0D00  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21115  0D01  3D2E               	addwfc	(___q31+2)^(0+128),w
 21116  0D02  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21117  0D03  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21118  0D04  3D2F               	addwfc	(___q31+3)^(0+128),w
 21119  0D05  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21120  0D06  0851               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21121  0D07  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 21122  0D08  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21123  0D09  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 21124  0D0A  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21125  0D0B  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 21126  0D0C  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21127  0D0D  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 21128                           
 21129                           ;rfid_demo.c: 171: if(rtBalanceMoney>=mainSystemData.maxBalanceLimit){
 21130  0D0E  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21131  0D0F  3A80               	xorlw	128
 21132  0D10  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21133  0D11  0024               	movlb	4	; select bank4
 21134  0D12  084B               	movf	((_mainSystemData+3)^(0+512)+40),w
 21135  0D13  3A80               	xorlw	128
 21136  0D14  0021               	movlb	1	; select bank1
 21137  0D15  024E               	subwf	??_rfid_comm_process_recharge^(0+128),w
 21138  0D16  1D03               	skipz
 21139  0D17  2D28               	goto	u14383
 21140  0D18  0024               	movlb	4	; select bank4
 21141  0D19  084A               	movf	((_mainSystemData+2)^(0+512)+40),w
 21142  0D1A  0021               	movlb	1	; select bank1
 21143  0D1B  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21144  0D1C  1D03               	skipz
 21145  0D1D  2D28               	goto	u14383
 21146  0D1E  0024               	movlb	4	; select bank4
 21147  0D1F  0849               	movf	((_mainSystemData+1)^(0+512)+40),w
 21148  0D20  0021               	movlb	1	; select bank1
 21149  0D21  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21150  0D22  1D03               	skipz
 21151  0D23  2D28               	goto	u14383
 21152  0D24  0024               	movlb	4	; select bank4
 21153  0D25  0848               	movf	(_mainSystemData^(0+512)+40),w
 21154  0D26  0021               	movlb	1	; select bank1
 21155  0D27  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 21156  0D28                     u14383:	
 21157  0D28  1C03               	skipc
 21158  0D29  2D59               	goto	l15655
 21159                           
 21160                           ;rfid_demo.c: 172: rtBalanceMoney=rtBalanceMoney-__q31;
 21161  0D2A  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 21162  0D2B  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21163  0D2C  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21164  0D2D  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21165  0D2E  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21166  0D2F  00D0               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21167  0D30  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21168  0D31  00D1               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21169  0D32  092C               	comf	___q31^(0+128),w
 21170  0D33  00D2               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 21171  0D34  092D               	comf	(___q31+1)^(0+128),w
 21172  0D35  00D3               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 21173  0D36  092E               	comf	(___q31+2)^(0+128),w
 21174  0D37  00D4               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 21175  0D38  092F               	comf	(___q31+3)^(0+128),w
 21176  0D39  00D5               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 21177  0D3A  0AD2               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 21178  0D3B  1903               	skipnz
 21179  0D3C  0AD3               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 21180  0D3D  1903               	skipnz
 21181  0D3E  0AD4               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 21182  0D3F  1903               	skipnz
 21183  0D40  0AD5               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 21184  0D41  0852               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 21185  0D42  07CE               	addwf	??_rfid_comm_process_recharge^(0+128),f
 21186  0D43  0853               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 21187  0D44  3DCF               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 21188  0D45  0854               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 21189  0D46  3DD0               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 21190  0D47  0855               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 21191  0D48  3DD1               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 21192  0D49  0851               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21193  0D4A  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 21194  0D4B  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21195  0D4C  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 21196  0D4D  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21197  0D4E  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 21198  0D4F  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21199  0D50  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 21200                           
 21201                           ;rfid_demo.c: 174: CardError=RECHAERGE_OVERFLOW;
 21202  0D51  3014               	movlw	20
 21203  0D52  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21204  0D53  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21205  0D54  0022               	movlb	2	; select bank2
 21206  0D55  00B7               	movwf	_CardError^(0+256)
 21207                           
 21208                           ;rfid_demo.c: 175: flashOpStr.op=enFLASH_NOTHING;
 21209  0D56  01D7               	clrf	(_flashOpStr^(0+256)+20)
 21210                           
 21211                           ;rfid_demo.c: 176: return 0;
 21212  0D57  3000               	movlw	0
 21213  0D58  0008               	return
 21214  0D59                     l15655:	
 21215                           
 21216                           ;rfid_demo.c: 177: };
 21217                           ;rfid_demo.c: 181: m_mem_cpy_len((uint8_t*)(&flashOpStr.buf[0]),(uint8_t*)(cardDecBuf),6
      +                          );
 21218  0D59  3047               	movlw	low (_flashOpStr+4)
 21219  0D5A  00F3               	movwf	m_mem_cpy_len@d
 21220  0D5B  3001               	movlw	high (_flashOpStr+4)
 21221  0D5C  00F4               	movwf	m_mem_cpy_len@d+1
 21222  0D5D  3056               	movlw	86
 21223  0D5E  00F5               	movwf	m_mem_cpy_len@s
 21224  0D5F  3004               	movlw	4
 21225  0D60  00F6               	movwf	m_mem_cpy_len@s+1
 21226  0D61  3006               	movlw	6
 21227  0D62  0021               	movlb	1	; select bank1
 21228  0D63  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21229  0D64  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21230  0D65  00F7               	movwf	m_mem_cpy_len@len
 21231  0D66  31BD  259E  318B   	fcall	_m_mem_cpy_len
 21232                           
 21233                           ;rfid_demo.c: 183: ret=data_api_flash_process();
 21234  0D69  31BD  25D4  318B   	fcall	_data_api_flash_process
 21235  0D6C  0021               	movlb	1	; select bank1
 21236  0D6D  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21237  0D6E  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21238  0D6F  0020               	movlb	0	; select bank0
 21239  0D70  00ED               	movwf	rfid_comm_process_recharge@ret
 21240                           
 21241                           ;rfid_demo.c: 184: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 21242  0D71  300F               	movlw	15
 21243  0D72  0021               	movlb	1	; select bank1
 21244  0D73  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21245  0D74  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21246  0D75  0020               	movlb	0	; select bank0
 21247  0D76  00CA               	movwf	picc_authenticate@blockAddr
 21248  0D77  30CA               	movlw	low _userKeyB
 21249  0D78  00CB               	movwf	picc_authenticate@key
 21250  0D79  3001               	movlw	high _userKeyB
 21251  0D7A  00CC               	movwf	picc_authenticate@key+1
 21252  0D7B  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21253  0D7C  0021               	movlb	1	; select bank1
 21254  0D7D  00CF               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21255  0D7E  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21256  0D7F  0020               	movlb	0	; select bank0
 21257  0D80  00CD               	movwf	picc_authenticate@uid
 21258  0D81  3061               	movlw	97
 21259  0D82  31AC  2477  318B   	fcall	_picc_authenticate
 21260  0D85  0021               	movlb	1	; select bank1
 21261  0D86  00D0               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21262  0D87  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21263  0D88  00BE               	movwf	_piccResult^(0+128)
 21264                           
 21265                           ;rfid_demo.c: 185: piccResult = mifare_write(12, cardDecBuf, 16);
 21266  0D89  3056               	movlw	86
 21267  0D8A  00CE               	movwf	??_rfid_comm_process_recharge^(0+128)
 21268  0D8B  084E               	movf	??_rfid_comm_process_recharge^(0+128),w
 21269  0D8C  0020               	movlb	0	; select bank0
 21270  0D8D  00E9               	movwf	mifare_write@buffer
 21271  0D8E  3010               	movlw	16
 21272  0D8F  0021               	movlb	1	; select bank1
 21273  0D90  00CF               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21274  0D91  084F               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21275  0D92  0020               	movlb	0	; select bank0
 21276  0D93  00EA               	movwf	mifare_write@bufferSize
 21277  0D94  300C               	movlw	12
 21278  0D95  31A8  205A  318B   	fcall	_mifare_write
 21279  0D98  0021               	movlb	1	; select bank1
 21280  0D99  00D0               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21281  0D9A  0850               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21282  0D9B  00BE               	movwf	_piccResult^(0+128)
 21283                           
 21284                           ;rfid_demo.c: 186: if(piccResult!=STATUS_OK){
 21285  0D9C  083E               	movf	_piccResult^(0+128),w
 21286  0D9D  1903               	btfsc	3,2
 21287  0D9E  2DA1               	goto	l15669
 21288                           
 21289                           ;rfid_demo.c: 187: return 0;
 21290  0D9F  3000               	movlw	0
 21291  0DA0  0008               	return
 21292  0DA1                     l15669:	
 21293                           
 21294                           ;rfid_demo.c: 188: }
 21295                           ;rfid_demo.c: 189: return 1;
 21296  0DA1  3001               	movlw	1
 21297  0DA2  0008               	return
 21298  0DA3                     __end_of_rfid_comm_process_recharge:	
 21299                           
 21300                           	psect	text63
 21301  36BA                     __ptext63:	
 21302 ;; *************** function _rfid_comm_process_read_inc *****************
 21303 ;; Defined at:
 21304 ;;		line 106 in file "src/app/rfid_demo.c"
 21305 ;; Parameters:    Size  Location     Type
 21306 ;;		None
 21307 ;; Auto vars:     Size  Location     Type
 21308 ;;  ret             1   67[BANK0 ] unsigned char 
 21309 ;; Return value:  Size  Location     Type
 21310 ;;                  1    wreg      unsigned char 
 21311 ;; Registers used:
 21312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21313 ;; Tracked objects:
 21314 ;;		On entry : 0/0
 21315 ;;		On exit  : 0/0
 21316 ;;		Unchanged: 0/0
 21317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21319 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21320 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 21321 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 21322 ;;Total ram usage:        4 bytes
 21323 ;; Hardware stack levels used:    1
 21324 ;; Hardware stack levels required when called:    8
 21325 ;; This function calls:
 21326 ;;		_crc_verify
 21327 ;;		_mifare_read
 21328 ;;		_picc_authenticate
 21329 ;; This function is called by:
 21330 ;;		_rfid_comm_process
 21331 ;; This function uses a non-reentrant model
 21332 ;;
 21333                           
 21334                           
 21335                           ;psect for function _rfid_comm_process_read_inc
 21336  36BA                     _rfid_comm_process_read_inc:	
 21337                           
 21338                           ;rfid_demo.c: 108: uint8_t ret;
 21339                           ;rfid_demo.c: 110: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 11, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 21340                           
 21341                           ;incstack = 0
 21342                           ; Regs used in _rfid_comm_process_read_inc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21343  36BA  300B               	movlw	11
 21344  36BB  0020               	movlb	0	; select bank0
 21345  36BC  00E0               	movwf	??_rfid_comm_process_read_inc
 21346  36BD  0860               	movf	??_rfid_comm_process_read_inc,w
 21347  36BE  00CA               	movwf	picc_authenticate@blockAddr
 21348  36BF  30CA               	movlw	low _userKeyB
 21349  36C0  00CB               	movwf	picc_authenticate@key
 21350  36C1  3001               	movlw	high _userKeyB
 21351  36C2  00CC               	movwf	picc_authenticate@key+1
 21352  36C3  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21353  36C4  00E1               	movwf	??_rfid_comm_process_read_inc+1
 21354  36C5  0861               	movf	??_rfid_comm_process_read_inc+1,w
 21355  36C6  00CD               	movwf	picc_authenticate@uid
 21356  36C7  3061               	movlw	97
 21357  36C8  31AC  2477  31B6   	fcall	_picc_authenticate
 21358  36CB  0020               	movlb	0	; select bank0
 21359  36CC  00E2               	movwf	??_rfid_comm_process_read_inc+2
 21360  36CD  0862               	movf	??_rfid_comm_process_read_inc+2,w
 21361  36CE  0021               	movlb	1	; select bank1
 21362  36CF  00BE               	movwf	_piccResult^(0+128)
 21363                           
 21364                           ;rfid_demo.c: 111: __t8=18;
 21365  36D0  3012               	movlw	18
 21366  36D1  0020               	movlb	0	; select bank0
 21367  36D2  00E0               	movwf	??_rfid_comm_process_read_inc
 21368  36D3  0860               	movf	??_rfid_comm_process_read_inc,w
 21369  36D4  0021               	movlb	1	; select bank1
 21370  36D5  00C9               	movwf	___t8^(0+128)
 21371                           
 21372                           ;rfid_demo.c: 112: piccResult = mifare_read(8, cardIncBuf, &__t8);
 21373  36D6  3044               	movlw	68
 21374  36D7  0020               	movlb	0	; select bank0
 21375  36D8  00E0               	movwf	??_rfid_comm_process_read_inc
 21376  36D9  0860               	movf	??_rfid_comm_process_read_inc,w
 21377  36DA  00CA               	movwf	mifare_read@buffer
 21378  36DB  30C9               	movlw	(low (___t8| 0))& (0+255)
 21379  36DC  00E1               	movwf	??_rfid_comm_process_read_inc+1
 21380  36DD  0861               	movf	??_rfid_comm_process_read_inc+1,w
 21381  36DE  00CB               	movwf	mifare_read@bufferSize
 21382  36DF  3008               	movlw	8
 21383  36E0  31AA  22BB  31B6   	fcall	_mifare_read
 21384  36E3  0020               	movlb	0	; select bank0
 21385  36E4  00E2               	movwf	??_rfid_comm_process_read_inc+2
 21386  36E5  0862               	movf	??_rfid_comm_process_read_inc+2,w
 21387  36E6  0021               	movlb	1	; select bank1
 21388  36E7  00BE               	movwf	_piccResult^(0+128)
 21389                           
 21390                           ;rfid_demo.c: 113: ret=crc_verify(cardIncBuf,sizeof(st_cardValueStrucrtDef));
 21391  36E8  3044               	movlw	68
 21392  36E9  0020               	movlb	0	; select bank0
 21393  36EA  00A8               	movwf	crc_verify@message
 21394  36EB  3004               	movlw	4
 21395  36EC  00A9               	movwf	crc_verify@message+1
 21396  36ED  3008               	movlw	8
 21397  36EE  00AA               	movwf	crc_verify@n
 21398  36EF  3000               	movlw	0
 21399  36F0  00AB               	movwf	crc_verify@n+1
 21400  36F1  31B5  255A         	fcall	_crc_verify
 21401  36F3  0020               	movlb	0	; select bank0
 21402  36F4  00E0               	movwf	??_rfid_comm_process_read_inc
 21403  36F5  0860               	movf	??_rfid_comm_process_read_inc,w
 21404  36F6  00E3               	movwf	rfid_comm_process_read_inc@ret
 21405                           
 21406                           ;rfid_demo.c: 114: return ret;
 21407  36F7  0863               	movf	rfid_comm_process_read_inc@ret,w
 21408  36F8  0008               	return
 21409  36F9                     __end_of_rfid_comm_process_read_inc:	
 21410                           
 21411                           	psect	text64
 21412  0DA3                     __ptext64:	
 21413 ;; *************** function _rfid_comm_process_read_header *****************
 21414 ;; Defined at:
 21415 ;;		line 41 in file "src/app/rfid_demo.c"
 21416 ;; Parameters:    Size  Location     Type
 21417 ;;		None
 21418 ;; Auto vars:     Size  Location     Type
 21419 ;;  stp             2   78[BANK0 ] PTR struct .
 21420 ;;		 -> comBuffer(128), 
 21421 ;;  ret             1   77[BANK0 ] unsigned char 
 21422 ;; Return value:  Size  Location     Type
 21423 ;;                  1    wreg      unsigned char 
 21424 ;; Registers used:
 21425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21426 ;; Tracked objects:
 21427 ;;		On entry : 0/0
 21428 ;;		On exit  : 0/0
 21429 ;;		Unchanged: 0/0
 21430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21432 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 21433 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0
 21434 ;;      Totals:         0       3       7       0       0       0       0       0       0       0       0       0       
      +0
 21435 ;;Total ram usage:       10 bytes
 21436 ;; Hardware stack levels used:    1
 21437 ;; Hardware stack levels required when called:    9
 21438 ;; This function calls:
 21439 ;;		_crc_append
 21440 ;;		_crc_verify
 21441 ;;		_create_card_key_b
 21442 ;;		_data_api_flash_process
 21443 ;;		_m_mem_cpy_len
 21444 ;;		_m_mem_set
 21445 ;;		_mifare_read
 21446 ;;		_mifare_write
 21447 ;;		_picc_authenticate
 21448 ;; This function is called by:
 21449 ;;		_rfid_comm_process
 21450 ;; This function uses a non-reentrant model
 21451 ;;
 21452                           
 21453                           
 21454                           ;psect for function _rfid_comm_process_read_header
 21455  0DA3                     _rfid_comm_process_read_header:	
 21456                           
 21457                           ;rfid_demo.c: 43: uint8_t ret;
 21458                           ;rfid_demo.c: 44: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 3, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 21459                           
 21460                           ;incstack = 0
 21461                           ; Regs used in _rfid_comm_process_read_header: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 21462  0DA3  3003               	movlw	3
 21463  0DA4  0021               	movlb	1	; select bank1
 21464  0DA5  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21465  0DA6  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21466  0DA7  0020               	movlb	0	; select bank0
 21467  0DA8  00CA               	movwf	picc_authenticate@blockAddr
 21468  0DA9  3025               	movlw	low (_defaultKeyA| (0+32768))
 21469  0DAA  00CB               	movwf	picc_authenticate@key
 21470  0DAB  30B9               	movlw	high (_defaultKeyA| (0+32768))
 21471  0DAC  00CC               	movwf	picc_authenticate@key+1
 21472  0DAD  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21473  0DAE  0021               	movlb	1	; select bank1
 21474  0DAF  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21475  0DB0  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21476  0DB1  0020               	movlb	0	; select bank0
 21477  0DB2  00CD               	movwf	picc_authenticate@uid
 21478  0DB3  3060               	movlw	96
 21479  0DB4  31AC  2477  318D   	fcall	_picc_authenticate
 21480  0DB7  0021               	movlb	1	; select bank1
 21481  0DB8  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21482  0DB9  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21483  0DBA  00BE               	movwf	_piccResult^(0+128)
 21484                           
 21485                           ;rfid_demo.c: 45: if (piccResult != STATUS_OK)return 0;
 21486  0DBB  083E               	movf	_piccResult^(0+128),w
 21487  0DBC  1903               	btfsc	3,2
 21488  0DBD  2DC0               	goto	l15433
 21489  0DBE  3000               	movlw	0
 21490  0DBF  0008               	return
 21491  0DC0                     l15433:	
 21492                           
 21493                           ;rfid_demo.c: 46: rdLen=18;
 21494  0DC0  3012               	movlw	18
 21495  0DC1  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21496  0DC2  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21497  0DC3  00C8               	movwf	_rdLen^(0+128)
 21498                           
 21499                           ;rfid_demo.c: 47: piccResult = mifare_read(0, cardUidBlockBuf, &rdLen);
 21500  0DC4  3020               	movlw	32
 21501  0DC5  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21502  0DC6  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21503  0DC7  0020               	movlb	0	; select bank0
 21504  0DC8  00CA               	movwf	mifare_read@buffer
 21505  0DC9  30C8               	movlw	(low (_rdLen| 0))& (0+255)
 21506  0DCA  0021               	movlb	1	; select bank1
 21507  0DCB  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21508  0DCC  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21509  0DCD  0020               	movlb	0	; select bank0
 21510  0DCE  00CB               	movwf	mifare_read@bufferSize
 21511  0DCF  3000               	movlw	0
 21512  0DD0  31AA  22BB  318D   	fcall	_mifare_read
 21513  0DD3  0021               	movlb	1	; select bank1
 21514  0DD4  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21515  0DD5  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21516  0DD6  00BE               	movwf	_piccResult^(0+128)
 21517                           
 21518                           ;rfid_demo.c: 48: if (piccResult != STATUS_OK) return 0;
 21519  0DD7  083E               	movf	_piccResult^(0+128),w
 21520  0DD8  1903               	btfsc	3,2
 21521  0DD9  2DDC               	goto	l15443
 21522  0DDA  3000               	movlw	0
 21523  0DDB  0008               	return
 21524  0DDC                     l15443:	
 21525                           
 21526                           ;rfid_demo.c: 50: m_mem_cpy_len(comBuffer,cardUidBlockBuf,18);
 21527  0DDC  3000               	movlw	0
 21528  0DDD  00F3               	movwf	m_mem_cpy_len@d
 21529  0DDE  3022               	movlw	34
 21530  0DDF  00F4               	movwf	m_mem_cpy_len@d+1
 21531  0DE0  3020               	movlw	32
 21532  0DE1  00F5               	movwf	m_mem_cpy_len@s
 21533  0DE2  3004               	movlw	4
 21534  0DE3  00F6               	movwf	m_mem_cpy_len@s+1
 21535  0DE4  3012               	movlw	18
 21536  0DE5  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21537  0DE6  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21538  0DE7  00F7               	movwf	m_mem_cpy_len@len
 21539  0DE8  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21540                           
 21541                           ;rfid_demo.c: 52: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 21542  0DEB  3007               	movlw	7
 21543  0DEC  0021               	movlb	1	; select bank1
 21544  0DED  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21545  0DEE  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21546  0DEF  0020               	movlb	0	; select bank0
 21547  0DF0  00CA               	movwf	picc_authenticate@blockAddr
 21548  0DF1  3025               	movlw	low (_defaultKeyA| (0+32768))
 21549  0DF2  00CB               	movwf	picc_authenticate@key
 21550  0DF3  30B9               	movlw	high (_defaultKeyA| (0+32768))
 21551  0DF4  00CC               	movwf	picc_authenticate@key+1
 21552  0DF5  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21553  0DF6  0021               	movlb	1	; select bank1
 21554  0DF7  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21555  0DF8  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21556  0DF9  0020               	movlb	0	; select bank0
 21557  0DFA  00CD               	movwf	picc_authenticate@uid
 21558  0DFB  3060               	movlw	96
 21559  0DFC  31AC  2477  318D   	fcall	_picc_authenticate
 21560  0DFF  0021               	movlb	1	; select bank1
 21561  0E00  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21562  0E01  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21563  0E02  00BE               	movwf	_piccResult^(0+128)
 21564                           
 21565                           ;rfid_demo.c: 53: if(piccResult!=STATUS_OK)return 0;
 21566  0E03  083E               	movf	_piccResult^(0+128),w
 21567  0E04  1903               	btfsc	3,2
 21568  0E05  2E08               	goto	l15453
 21569  0E06  3000               	movlw	0
 21570  0E07  0008               	return
 21571  0E08                     l15453:	
 21572                           
 21573                           ;rfid_demo.c: 54: for(__t8=4;__t8<7;__t8++){
 21574  0E08  3004               	movlw	4
 21575  0E09  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21576  0E0A  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21577  0E0B  00C9               	movwf	___t8^(0+128)
 21578  0E0C  3007               	movlw	7
 21579  0E0D  0249               	subwf	___t8^(0+128),w
 21580  0E0E  1803               	btfsc	3,0
 21581  0E0F  2E62               	goto	l15471
 21582  0E10                     l15457:	
 21583                           
 21584                           ;rfid_demo.c: 55: rdLen=18;
 21585  0E10  3012               	movlw	18
 21586  0E11  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21587  0E12  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21588  0E13  00C8               	movwf	_rdLen^(0+128)
 21589                           
 21590                           ;rfid_demo.c: 56: piccResult = mifare_read(__t8, cardWriteBuf, &rdLen);
 21591  0E14  3032               	movlw	50
 21592  0E15  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21593  0E16  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21594  0E17  0020               	movlb	0	; select bank0
 21595  0E18  00CA               	movwf	mifare_read@buffer
 21596  0E19  30C8               	movlw	(low (_rdLen| 0))& (0+255)
 21597  0E1A  0021               	movlb	1	; select bank1
 21598  0E1B  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21599  0E1C  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21600  0E1D  0020               	movlb	0	; select bank0
 21601  0E1E  00CB               	movwf	mifare_read@bufferSize
 21602  0E1F  0021               	movlb	1	; select bank1
 21603  0E20  0849               	movf	___t8^(0+128),w
 21604  0E21  31AA  22BB  318D   	fcall	_mifare_read
 21605  0E24  0021               	movlb	1	; select bank1
 21606  0E25  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21607  0E26  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21608  0E27  00BE               	movwf	_piccResult^(0+128)
 21609                           
 21610                           ;rfid_demo.c: 57: m_mem_cpy_len(comBuffer+(__t8-4)*16,cardWriteBuf,16);
 21611  0E28  0849               	movf	___t8^(0+128),w
 21612  0E29  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21613  0E2A  01CF               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 21614  0E2B  0ECE               	swapf	??_rfid_comm_process_read_header^(0+128),f
 21615  0E2C  0ECF               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21616  0E2D  30F0               	movlw	240
 21617  0E2E  05CF               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21618  0E2F  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21619  0E30  390F               	andlw	15
 21620  0E31  04CF               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21621  0E32  30F0               	movlw	240
 21622  0E33  05CE               	andwf	??_rfid_comm_process_read_header^(0+128),f
 21623  0E34  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21624  0E35  3EC0               	addlw	192
 21625  0E36  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21626  0E37  30FF               	movlw	255
 21627  0E38  3D4F               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 21628  0E39  00D1               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 21629  0E3A  3000               	movlw	0
 21630  0E3B  00D2               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 21631  0E3C  3022               	movlw	34
 21632  0E3D  00D3               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 21633  0E3E  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21634  0E3F  0752               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 21635  0E40  00F3               	movwf	m_mem_cpy_len@d
 21636  0E41  0851               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21637  0E42  3D53               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 21638  0E43  00F4               	movwf	m_mem_cpy_len@d+1
 21639  0E44  3032               	movlw	50
 21640  0E45  00F5               	movwf	m_mem_cpy_len@s
 21641  0E46  3004               	movlw	4
 21642  0E47  00F6               	movwf	m_mem_cpy_len@s+1
 21643  0E48  3010               	movlw	16
 21644  0E49  00D4               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 21645  0E4A  0854               	movf	(??_rfid_comm_process_read_header+6)^(0+128),w
 21646  0E4B  00F7               	movwf	m_mem_cpy_len@len
 21647  0E4C  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21648                           
 21649                           ;rfid_demo.c: 58: if(piccResult!=STATUS_OK){ CardError=READ_HEADER_ERROR; break;}
 21650  0E4F  0021               	movlb	1	; select bank1
 21651  0E50  083E               	movf	_piccResult^(0+128),w
 21652  0E51  1903               	btfsc	3,2
 21653  0E52  2E59               	goto	l15467
 21654  0E53  3002               	movlw	2
 21655  0E54  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21656  0E55  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21657  0E56  0022               	movlb	2	; select bank2
 21658  0E57  00B7               	movwf	_CardError^(0+256)
 21659  0E58  2E62               	goto	l15471
 21660  0E59                     l15467:	
 21661  0E59  3001               	movlw	1
 21662  0E5A  0021               	movlb	1	; select bank1
 21663  0E5B  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21664  0E5C  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21665  0E5D  07C9               	addwf	___t8^(0+128),f
 21666  0E5E  3007               	movlw	7
 21667  0E5F  0249               	subwf	___t8^(0+128),w
 21668  0E60  1C03               	skipc
 21669  0E61  2E10               	goto	l15457
 21670  0E62                     l15471:	
 21671                           
 21672                           ;rfid_demo.c: 59: }
 21673                           ;rfid_demo.c: 60: ret=crc_verify(comBuffer,sizeof(st_cardHeaderDef));
 21674  0E62  3000               	movlw	0
 21675  0E63  0020               	movlb	0	; select bank0
 21676  0E64  00A8               	movwf	crc_verify@message
 21677  0E65  3022               	movlw	34
 21678  0E66  00A9               	movwf	crc_verify@message+1
 21679  0E67  3030               	movlw	48
 21680  0E68  00AA               	movwf	crc_verify@n
 21681  0E69  3000               	movlw	0
 21682  0E6A  00AB               	movwf	crc_verify@n+1
 21683  0E6B  31B5  255A  318D   	fcall	_crc_verify
 21684  0E6E  0021               	movlb	1	; select bank1
 21685  0E6F  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21686  0E70  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21687  0E71  0020               	movlb	0	; select bank0
 21688  0E72  00ED               	movwf	rfid_comm_process_read_header@ret
 21689                           
 21690                           ;rfid_demo.c: 61: if(!ret)return 0;
 21691  0E73  086D               	movf	rfid_comm_process_read_header@ret,w
 21692  0E74  1D03               	btfss	3,2
 21693  0E75  2E78               	goto	l15479
 21694  0E76  3000               	movlw	0
 21695  0E77  0008               	return
 21696  0E78                     l15479:	
 21697                           
 21698                           ;rfid_demo.c: 63: st_cardHeaderDef* stp=(st_cardHeaderDef*)comBuffer;
 21699  0E78  3000               	movlw	0
 21700  0E79  00EE               	movwf	rfid_comm_process_read_header@stp
 21701  0E7A  3022               	movlw	34
 21702  0E7B  00EF               	movwf	rfid_comm_process_read_header@stp+1
 21703                           
 21704                           ;rfid_demo.c: 64: if(stp->keyUpdate ==0xff ){
 21705  0E7C  086E               	movf	rfid_comm_process_read_header@stp,w
 21706  0E7D  0086               	movwf	6
 21707  0E7E  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21708  0E7F  0087               	movwf	7
 21709  0E80  314C               	addfsr 1,12
 21710  0E81  0A01               	incf	1,w
 21711  0E82  1D03               	btfss	3,2
 21712  0E83  2F42               	goto	l15523
 21713                           
 21714                           ;rfid_demo.c: 65: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21715  0E84  3002               	movlw	2
 21716  0E85  0021               	movlb	1	; select bank1
 21717  0E86  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21718  0E87  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21719  0E88  0022               	movlb	2	; select bank2
 21720  0E89  00D7               	movwf	(_flashOpStr^(0+256)+20)
 21721                           
 21722                           ;rfid_demo.c: 66: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardKeyCreate
      +                          Key[0]));
 21723  0E8A  3040               	movlw	64
 21724  0E8B  00C3               	movwf	_flashOpStr^(0+256)
 21725  0E8C  3000               	movlw	0
 21726  0E8D  00C4               	movwf	(_flashOpStr+1)^(0+256)
 21727                           
 21728                           ;rfid_demo.c: 67: flashOpStr.len=6;
 21729  0E8E  3006               	movlw	6
 21730  0E8F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 21731  0E90  3000               	movlw	0
 21732  0E91  00C6               	movwf	(_flashOpStr^(0+256)+3)
 21733                           
 21734                           ;rfid_demo.c: 68: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)(stp->cardkeyBcreatKey),6);
 21735  0E92  3047               	movlw	low (_flashOpStr+4)
 21736  0E93  00F3               	movwf	m_mem_cpy_len@d
 21737  0E94  3001               	movlw	high (_flashOpStr+4)
 21738  0E95  00F4               	movwf	m_mem_cpy_len@d+1
 21739  0E96  0020               	movlb	0	; select bank0
 21740  0E97  086E               	movf	rfid_comm_process_read_header@stp,w
 21741  0E98  3E20               	addlw	32
 21742  0E99  00F5               	movwf	m_mem_cpy_len@s
 21743  0E9A  3000               	movlw	0
 21744  0E9B  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 21745  0E9C  00F6               	movwf	m_mem_cpy_len@s+1
 21746  0E9D  3006               	movlw	6
 21747  0E9E  0021               	movlb	1	; select bank1
 21748  0E9F  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21749  0EA0  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21750  0EA1  00F7               	movwf	m_mem_cpy_len@len
 21751  0EA2  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21752                           
 21753                           ;rfid_demo.c: 69: m_mem_cpy_len(comBuffer+80,comBuffer,48);
 21754  0EA5  3050               	movlw	80
 21755  0EA6  00F3               	movwf	m_mem_cpy_len@d
 21756  0EA7  3022               	movlw	34
 21757  0EA8  00F4               	movwf	m_mem_cpy_len@d+1
 21758  0EA9  3000               	movlw	0
 21759  0EAA  00F5               	movwf	m_mem_cpy_len@s
 21760  0EAB  3022               	movlw	34
 21761  0EAC  00F6               	movwf	m_mem_cpy_len@s+1
 21762  0EAD  3030               	movlw	48
 21763  0EAE  0021               	movlb	1	; select bank1
 21764  0EAF  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21765  0EB0  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21766  0EB1  00F7               	movwf	m_mem_cpy_len@len
 21767  0EB2  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21768                           
 21769                           ;rfid_demo.c: 70: ret=data_api_flash_process();
 21770  0EB5  31BD  25D4  318D   	fcall	_data_api_flash_process
 21771  0EB8  0021               	movlb	1	; select bank1
 21772  0EB9  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21773  0EBA  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21774  0EBB  0020               	movlb	0	; select bank0
 21775  0EBC  00ED               	movwf	rfid_comm_process_read_header@ret
 21776                           
 21777                           ;rfid_demo.c: 71: m_mem_cpy_len(comBuffer,comBuffer+80,48);
 21778  0EBD  3000               	movlw	0
 21779  0EBE  00F3               	movwf	m_mem_cpy_len@d
 21780  0EBF  3022               	movlw	34
 21781  0EC0  00F4               	movwf	m_mem_cpy_len@d+1
 21782  0EC1  3050               	movlw	80
 21783  0EC2  00F5               	movwf	m_mem_cpy_len@s
 21784  0EC3  3022               	movlw	34
 21785  0EC4  00F6               	movwf	m_mem_cpy_len@s+1
 21786  0EC5  3030               	movlw	48
 21787  0EC6  0021               	movlb	1	; select bank1
 21788  0EC7  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21789  0EC8  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21790  0EC9  00F7               	movwf	m_mem_cpy_len@len
 21791  0ECA  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21792                           
 21793                           ;rfid_demo.c: 72: if(ret){
 21794  0ECD  0020               	movlb	0	; select bank0
 21795  0ECE  086D               	movf	rfid_comm_process_read_header@ret,w
 21796  0ECF  1903               	btfsc	3,2
 21797  0ED0  2F42               	goto	l15523
 21798                           
 21799                           ;rfid_demo.c: 73: stp->keyUpdate=0;
 21800  0ED1  086E               	movf	rfid_comm_process_read_header@stp,w
 21801  0ED2  0086               	movwf	6
 21802  0ED3  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21803  0ED4  0087               	movwf	7
 21804  0ED5  314C               	addfsr 1,12
 21805  0ED6  0181               	clrf	1
 21806                           
 21807                           ;rfid_demo.c: 74: m_mem_set(stp->cardkeyBcreatKey,0,6);
 21808  0ED7  086E               	movf	rfid_comm_process_read_header@stp,w
 21809  0ED8  3E20               	addlw	32
 21810  0ED9  00F3               	movwf	m_mem_set@buf
 21811  0EDA  3000               	movlw	0
 21812  0EDB  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 21813  0EDC  00F4               	movwf	m_mem_set@buf+1
 21814  0EDD  01F5               	clrf	m_mem_set@x
 21815  0EDE  3006               	movlw	6
 21816  0EDF  0021               	movlb	1	; select bank1
 21817  0EE0  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21818  0EE1  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21819  0EE2  00F6               	movwf	m_mem_set@len
 21820  0EE3  31BB  23E2  318D   	fcall	_m_mem_set
 21821                           
 21822                           ;rfid_demo.c: 75: crc_append(comBuffer,sizeof(st_cardHeaderDef)-2);
 21823  0EE6  3000               	movlw	0
 21824  0EE7  0020               	movlb	0	; select bank0
 21825  0EE8  00A8               	movwf	crc_append@message
 21826  0EE9  3022               	movlw	34
 21827  0EEA  00A9               	movwf	crc_append@message+1
 21828  0EEB  302E               	movlw	46
 21829  0EEC  00AA               	movwf	crc_append@n
 21830  0EED  3000               	movlw	0
 21831  0EEE  00AB               	movwf	crc_append@n+1
 21832  0EEF  31B3  23C9  318D   	fcall	_crc_append
 21833                           
 21834                           ;rfid_demo.c: 77: for(__t8=4;__t8<7;__t8++){
 21835  0EF2  3004               	movlw	4
 21836  0EF3  0021               	movlb	1	; select bank1
 21837  0EF4  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21838  0EF5  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21839  0EF6  00C9               	movwf	___t8^(0+128)
 21840  0EF7  3007               	movlw	7
 21841  0EF8  0249               	subwf	___t8^(0+128),w
 21842  0EF9  1803               	btfsc	3,0
 21843  0EFA  2F42               	goto	l15523
 21844  0EFB                     l15511:	
 21845                           
 21846                           ;rfid_demo.c: 78: m_mem_cpy_len(cardWriteBuf,comBuffer+(__t8-4)*16,16);
 21847  0EFB  3032               	movlw	50
 21848  0EFC  00F3               	movwf	m_mem_cpy_len@d
 21849  0EFD  3004               	movlw	4
 21850  0EFE  00F4               	movwf	m_mem_cpy_len@d+1
 21851  0EFF  0849               	movf	___t8^(0+128),w
 21852  0F00  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21853  0F01  01CF               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 21854  0F02  0ECE               	swapf	??_rfid_comm_process_read_header^(0+128),f
 21855  0F03  0ECF               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21856  0F04  30F0               	movlw	240
 21857  0F05  05CF               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21858  0F06  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21859  0F07  390F               	andlw	15
 21860  0F08  04CF               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 21861  0F09  30F0               	movlw	240
 21862  0F0A  05CE               	andwf	??_rfid_comm_process_read_header^(0+128),f
 21863  0F0B  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21864  0F0C  3EC0               	addlw	192
 21865  0F0D  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21866  0F0E  30FF               	movlw	255
 21867  0F0F  3D4F               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 21868  0F10  00D1               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 21869  0F11  3000               	movlw	0
 21870  0F12  00D2               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 21871  0F13  3022               	movlw	34
 21872  0F14  00D3               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 21873  0F15  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21874  0F16  0752               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 21875  0F17  00F5               	movwf	m_mem_cpy_len@s
 21876  0F18  0851               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21877  0F19  3D53               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 21878  0F1A  00F6               	movwf	m_mem_cpy_len@s+1
 21879  0F1B  3010               	movlw	16
 21880  0F1C  00D4               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 21881  0F1D  0854               	movf	(??_rfid_comm_process_read_header+6)^(0+128),w
 21882  0F1E  00F7               	movwf	m_mem_cpy_len@len
 21883  0F1F  31BD  259E  318D   	fcall	_m_mem_cpy_len
 21884                           
 21885                           ;rfid_demo.c: 79: piccResult = mifare_write(__t8, cardWriteBuf, 16);
 21886  0F22  3032               	movlw	50
 21887  0F23  0021               	movlb	1	; select bank1
 21888  0F24  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21889  0F25  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21890  0F26  0020               	movlb	0	; select bank0
 21891  0F27  00E9               	movwf	mifare_write@buffer
 21892  0F28  3010               	movlw	16
 21893  0F29  0021               	movlb	1	; select bank1
 21894  0F2A  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 21895  0F2B  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21896  0F2C  0020               	movlb	0	; select bank0
 21897  0F2D  00EA               	movwf	mifare_write@bufferSize
 21898  0F2E  0021               	movlb	1	; select bank1
 21899  0F2F  0849               	movf	___t8^(0+128),w
 21900  0F30  31A8  205A  318D   	fcall	_mifare_write
 21901  0F33  0021               	movlb	1	; select bank1
 21902  0F34  00D0               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 21903  0F35  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21904  0F36  00BE               	movwf	_piccResult^(0+128)
 21905                           
 21906                           ;rfid_demo.c: 80: if(piccResult!=STATUS_OK)break;
 21907  0F37  083E               	movf	_piccResult^(0+128),w
 21908  0F38  1D03               	btfss	3,2
 21909  0F39  2F42               	goto	l15523
 21910  0F3A  3001               	movlw	1
 21911  0F3B  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21912  0F3C  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21913  0F3D  07C9               	addwf	___t8^(0+128),f
 21914  0F3E  3007               	movlw	7
 21915  0F3F  0249               	subwf	___t8^(0+128),w
 21916  0F40  1C03               	skipc
 21917  0F41  2EFB               	goto	l15511
 21918  0F42                     l15523:	
 21919                           
 21920                           ;rfid_demo.c: 81: }
 21921                           ;rfid_demo.c: 82: }
 21922                           ;rfid_demo.c: 83: }
 21923                           ;rfid_demo.c: 84: if( mainSystemData.cardID==0)
 21924  0F42  0024               	movlb	4	; select bank4
 21925  0F43  0827               	movf	((_mainSystemData+3)^(0+512)+4),w
 21926  0F44  0426               	iorwf	((_mainSystemData+2)^(0+512)+4),w
 21927  0F45  0425               	iorwf	((_mainSystemData+1)^(0+512)+4),w
 21928  0F46  0424               	iorwf	(_mainSystemData^(0+512)+4),w
 21929  0F47  1D03               	skipz
 21930  0F48  2F9F               	goto	l15541
 21931                           
 21932                           ;rfid_demo.c: 85: {
 21933                           ;rfid_demo.c: 87: if(!(stp->deviceID==mainSystemData.deviceID)){
 21934  0F49  0020               	movlb	0	; select bank0
 21935  0F4A  086E               	movf	rfid_comm_process_read_header@stp,w
 21936  0F4B  0086               	movwf	6
 21937  0F4C  086F               	movf	rfid_comm_process_read_header@stp+1,w
 21938  0F4D  0087               	movwf	7
 21939  0F4E  3148               	addfsr 1,8
 21940  0F4F  3F40               	moviw [0]fsr1
 21941  0F50  0021               	movlb	1	; select bank1
 21942  0F51  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21943  0F52  3F41               	moviw [1]fsr1
 21944  0F53  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 21945  0F54  3F42               	moviw [2]fsr1
 21946  0F55  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 21947  0F56  3F43               	moviw [3]fsr1
 21948  0F57  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 21949  0F58  0024               	movlb	4	; select bank4
 21950  0F59  0823               	movf	(_mainSystemData+3)^(0+512),w
 21951  0F5A  0021               	movlb	1	; select bank1
 21952  0F5B  0651               	xorwf	(??_rfid_comm_process_read_header+3)^(0+128),w
 21953  0F5C  1D03               	skipz
 21954  0F5D  2F6E               	goto	u14285
 21955  0F5E  0024               	movlb	4	; select bank4
 21956  0F5F  0822               	movf	(_mainSystemData+2)^(0+512),w
 21957  0F60  0021               	movlb	1	; select bank1
 21958  0F61  0650               	xorwf	(??_rfid_comm_process_read_header+2)^(0+128),w
 21959  0F62  1D03               	skipz
 21960  0F63  2F6E               	goto	u14285
 21961  0F64  0024               	movlb	4	; select bank4
 21962  0F65  0821               	movf	(_mainSystemData+1)^(0+512),w
 21963  0F66  0021               	movlb	1	; select bank1
 21964  0F67  064F               	xorwf	(??_rfid_comm_process_read_header+1)^(0+128),w
 21965  0F68  1D03               	skipz
 21966  0F69  2F6E               	goto	u14285
 21967  0F6A  0024               	movlb	4	; select bank4
 21968  0F6B  0820               	movf	_mainSystemData^(0+512),w
 21969  0F6C  0021               	movlb	1	; select bank1
 21970  0F6D  064E               	xorwf	??_rfid_comm_process_read_header^(0+128),w
 21971  0F6E                     u14285:	
 21972  0F6E  1903               	skipnz
 21973  0F6F  2F77               	goto	l15531
 21974                           
 21975                           ;rfid_demo.c: 88: CardError=CARD_NOT_IS_MINE;
 21976  0F70  3003               	movlw	3
 21977  0F71  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21978  0F72  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 21979  0F73  0022               	movlb	2	; select bank2
 21980  0F74  00B7               	movwf	_CardError^(0+256)
 21981                           
 21982                           ;rfid_demo.c: 89: return 0;
 21983  0F75  3000               	movlw	0
 21984  0F76  0008               	return
 21985  0F77                     l15531:	
 21986                           
 21987                           ;rfid_demo.c: 90: }
 21988                           ;rfid_demo.c: 91: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardID));
 21989  0F77  3004               	movlw	4
 21990  0F78  0022               	movlb	2	; select bank2
 21991  0F79  00C3               	movwf	_flashOpStr^(0+256)
 21992  0F7A  3000               	movlw	0
 21993  0F7B  00C4               	movwf	(_flashOpStr+1)^(0+256)
 21994                           
 21995                           ;rfid_demo.c: 92: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21996  0F7C  3002               	movlw	2
 21997  0F7D  0021               	movlb	1	; select bank1
 21998  0F7E  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 21999  0F7F  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22000  0F80  0022               	movlb	2	; select bank2
 22001  0F81  00D7               	movwf	(_flashOpStr^(0+256)+20)
 22002                           
 22003                           ;rfid_demo.c: 93: flashOpStr.len=4;
 22004  0F82  3004               	movlw	4
 22005  0F83  00C5               	movwf	(_flashOpStr^(0+256)+2)
 22006  0F84  3000               	movlw	0
 22007  0F85  00C6               	movwf	(_flashOpStr^(0+256)+3)
 22008                           
 22009                           ;rfid_demo.c: 94: m_mem_cpy_len(flashOpStr.buf,cardUidBlockBuf,4);
 22010  0F86  3047               	movlw	low (_flashOpStr+4)
 22011  0F87  00F3               	movwf	m_mem_cpy_len@d
 22012  0F88  3001               	movlw	high (_flashOpStr+4)
 22013  0F89  00F4               	movwf	m_mem_cpy_len@d+1
 22014  0F8A  3020               	movlw	32
 22015  0F8B  00F5               	movwf	m_mem_cpy_len@s
 22016  0F8C  3004               	movlw	4
 22017  0F8D  00F6               	movwf	m_mem_cpy_len@s+1
 22018  0F8E  3004               	movlw	4
 22019  0F8F  0021               	movlb	1	; select bank1
 22020  0F90  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22021  0F91  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22022  0F92  00F7               	movwf	m_mem_cpy_len@len
 22023  0F93  31BD  259E  318D   	fcall	_m_mem_cpy_len
 22024                           
 22025                           ;rfid_demo.c: 95: ret=data_api_flash_process();
 22026  0F96  31BD  25D4  318D   	fcall	_data_api_flash_process
 22027  0F99  0021               	movlb	1	; select bank1
 22028  0F9A  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22029  0F9B  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22030  0F9C  0020               	movlb	0	; select bank0
 22031  0F9D  00ED               	movwf	rfid_comm_process_read_header@ret
 22032                           
 22033                           ;rfid_demo.c: 97: }else if(mainSystemData.cardID!=*((uint32_t*)cardUidBlockBuf) || mainS
      +                          ystemData.deviceID != stp->deviceID){
 22034  0F9E  2FF2               	goto	l15549
 22035  0F9F                     l15541:	
 22036  0F9F  3020               	movlw	32
 22037  0FA0  0086               	movwf	6
 22038  0FA1  3004               	movlw	4	; select bank8/9
 22039  0FA2  0087               	movwf	7
 22040  0FA3  3F40               	moviw [0]fsr1
 22041  0FA4  0021               	movlb	1	; select bank1
 22042  0FA5  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22043  0FA6  3F41               	moviw [1]fsr1
 22044  0FA7  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 22045  0FA8  3F42               	moviw [2]fsr1
 22046  0FA9  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 22047  0FAA  3F43               	moviw [3]fsr1
 22048  0FAB  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 22049  0FAC  0851               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 22050  0FAD  0024               	movlb	4	; select bank4
 22051  0FAE  0627               	xorwf	((_mainSystemData+3)^(0+512)+4),w
 22052  0FAF  1D03               	skipz
 22053  0FB0  2FC1               	goto	u14295
 22054  0FB1  0021               	movlb	1	; select bank1
 22055  0FB2  0850               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 22056  0FB3  0024               	movlb	4	; select bank4
 22057  0FB4  0626               	xorwf	((_mainSystemData+2)^(0+512)+4),w
 22058  0FB5  1D03               	skipz
 22059  0FB6  2FC1               	goto	u14295
 22060  0FB7  0021               	movlb	1	; select bank1
 22061  0FB8  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22062  0FB9  0024               	movlb	4	; select bank4
 22063  0FBA  0625               	xorwf	((_mainSystemData+1)^(0+512)+4),w
 22064  0FBB  1D03               	skipz
 22065  0FBC  2FC1               	goto	u14295
 22066  0FBD  0021               	movlb	1	; select bank1
 22067  0FBE  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22068  0FBF  0024               	movlb	4	; select bank4
 22069  0FC0  0624               	xorwf	(_mainSystemData^(0+512)+4),w
 22070  0FC1                     u14295:	
 22071  0FC1  1D03               	skipz
 22072  0FC2  2FEA               	goto	l15545
 22073  0FC3  0020               	movlb	0	; select bank0
 22074  0FC4  086E               	movf	rfid_comm_process_read_header@stp,w
 22075  0FC5  0086               	movwf	6
 22076  0FC6  086F               	movf	rfid_comm_process_read_header@stp+1,w
 22077  0FC7  0087               	movwf	7
 22078  0FC8  3148               	addfsr 1,8
 22079  0FC9  3F40               	moviw [0]fsr1
 22080  0FCA  0021               	movlb	1	; select bank1
 22081  0FCB  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22082  0FCC  3F41               	moviw [1]fsr1
 22083  0FCD  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 22084  0FCE  3F42               	moviw [2]fsr1
 22085  0FCF  00D0               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 22086  0FD0  3F43               	moviw [3]fsr1
 22087  0FD1  00D1               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 22088  0FD2  0024               	movlb	4	; select bank4
 22089  0FD3  0823               	movf	(_mainSystemData+3)^(0+512),w
 22090  0FD4  0021               	movlb	1	; select bank1
 22091  0FD5  0651               	xorwf	(??_rfid_comm_process_read_header+3)^(0+128),w
 22092  0FD6  1D03               	skipz
 22093  0FD7  2FE8               	goto	u14305
 22094  0FD8  0024               	movlb	4	; select bank4
 22095  0FD9  0822               	movf	(_mainSystemData+2)^(0+512),w
 22096  0FDA  0021               	movlb	1	; select bank1
 22097  0FDB  0650               	xorwf	(??_rfid_comm_process_read_header+2)^(0+128),w
 22098  0FDC  1D03               	skipz
 22099  0FDD  2FE8               	goto	u14305
 22100  0FDE  0024               	movlb	4	; select bank4
 22101  0FDF  0821               	movf	(_mainSystemData+1)^(0+512),w
 22102  0FE0  0021               	movlb	1	; select bank1
 22103  0FE1  064F               	xorwf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22104  0FE2  1D03               	skipz
 22105  0FE3  2FE8               	goto	u14305
 22106  0FE4  0024               	movlb	4	; select bank4
 22107  0FE5  0820               	movf	_mainSystemData^(0+512),w
 22108  0FE6  0021               	movlb	1	; select bank1
 22109  0FE7  064E               	xorwf	??_rfid_comm_process_read_header^(0+128),w
 22110  0FE8                     u14305:	
 22111  0FE8  1903               	skipnz
 22112  0FE9  2FF2               	goto	l15549
 22113  0FEA                     l15545:	
 22114                           
 22115                           ;rfid_demo.c: 99: CardError=CARD_NOT_IS_MINE;
 22116  0FEA  3003               	movlw	3
 22117  0FEB  0021               	movlb	1	; select bank1
 22118  0FEC  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22119  0FED  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22120  0FEE  0022               	movlb	2	; select bank2
 22121  0FEF  00B7               	movwf	_CardError^(0+256)
 22122                           
 22123                           ;rfid_demo.c: 100: return 0;
 22124  0FF0  3000               	movlw	0
 22125  0FF1  0008               	return
 22126  0FF2                     l15549:	
 22127                           
 22128                           ;rfid_demo.c: 101: }
 22129                           ;rfid_demo.c: 102: create_card_key_b(userKeyB,cardUidBlockBuf,(uint8_t*)mainSystemData.c
      +                          ardKeyCreateKey);
 22130  0FF2  3020               	movlw	32
 22131  0FF3  0021               	movlb	1	; select bank1
 22132  0FF4  00CE               	movwf	??_rfid_comm_process_read_header^(0+128)
 22133  0FF5  084E               	movf	??_rfid_comm_process_read_header^(0+128),w
 22134  0FF6  00F3               	movwf	create_card_key_b@uid
 22135  0FF7  3060               	movlw	(low ((_mainSystemData| (0+512)+64)))& (0+255)
 22136  0FF8  00CF               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 22137  0FF9  084F               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 22138  0FFA  00F4               	movwf	create_card_key_b@cckey
 22139  0FFB  30CA               	movlw	(low (_userKeyB| (0+256)))& (0+255)
 22140  0FFC  31B0  2017         	fcall	_create_card_key_b
 22141                           
 22142                           ;rfid_demo.c: 103: return 1;
 22143  0FFE  3001               	movlw	1
 22144  0FFF  0008               	return
 22145  1000                     __end_of_rfid_comm_process_read_header:	
 22146                           
 22147                           	psect	text65
 22148  285A                     __ptext65:	
 22149 ;; *************** function _mifare_write *****************
 22150 ;; Defined at:
 22151 ;;		line 57 in file "src/nfc/pal/mfrc522_mifare.c"
 22152 ;; Parameters:    Size  Location     Type
 22153 ;;  blockAddr       1    wreg     unsigned char 
 22154 ;;  buffer          1   73[BANK0 ] PTR unsigned char 
 22155 ;;		 -> cardDecBuf(18), cardWriteBuf(18), 
 22156 ;;  bufferSize      1   74[BANK0 ] unsigned char 
 22157 ;; Auto vars:     Size  Location     Type
 22158 ;;  blockAddr       1    0[BANK1 ] unsigned char 
 22159 ;;  cmdBuffer       2    1[BANK1 ] unsigned char [2]
 22160 ;;  result          1    3[BANK1 ] enum E5266
 22161 ;; Return value:  Size  Location     Type
 22162 ;;                  1    wreg      enum E5491
 22163 ;; Registers used:
 22164 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22165 ;; Tracked objects:
 22166 ;;		On entry : 0/0
 22167 ;;		On exit  : 0/0
 22168 ;;		Unchanged: 0/0
 22169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22170 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22171 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0
 22172 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22173 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0
 22174 ;;Total ram usage:        8 bytes
 22175 ;; Hardware stack levels used:    1
 22176 ;; Hardware stack levels required when called:    8
 22177 ;; This function calls:
 22178 ;;		_pcd_mifare_transceive
 22179 ;; This function is called by:
 22180 ;;		_rfid_comm_process_read_header
 22181 ;;		_rfid_comm_process_recharge
 22182 ;; This function uses a non-reentrant model
 22183 ;;
 22184                           
 22185                           
 22186                           ;psect for function _mifare_write
 22187  285A                     _mifare_write:	
 22188                           
 22189                           ;incstack = 0
 22190                           ; Regs used in _mifare_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22191                           ;mifare_write@blockAddr stored from wreg
 22192  285A  0021               	movlb	1	; select bank1
 22193  285B  00CA               	movwf	mifare_write@blockAddr^(0+128)
 22194                           
 22195                           ;mfrc522_mifare.c: 64: em_PcdStatusCode result;
 22196                           ;mfrc522_mifare.c: 65: if (buffer == (0) || bufferSize < 16)
 22197  285C  0020               	movlb	0	; select bank0
 22198  285D  0869               	movf	mifare_write@buffer,w
 22199  285E  1903               	btfsc	3,2
 22200  285F  2864               	goto	l14435
 22201  2860  3010               	movlw	16
 22202  2861  026A               	subwf	mifare_write@bufferSize,w
 22203  2862  1803               	skipnc
 22204  2863  2866               	goto	l14439
 22205  2864                     l14435:	
 22206                           
 22207                           ;mfrc522_mifare.c: 66: {
 22208                           ;mfrc522_mifare.c: 67: return STATUS_INVALID;
 22209  2864  3006               	movlw	6
 22210  2865  0008               	return
 22211  2866                     l14439:	
 22212                           
 22213                           ;mfrc522_mifare.c: 68: }
 22214                           ;mfrc522_mifare.c: 69: uint8_t cmdBuffer[2];
 22215                           ;mfrc522_mifare.c: 70: cmdBuffer[0] = PICC_CMD_MF_WRITE;
 22216  2866  30A0               	movlw	160
 22217  2867  00EB               	movwf	??_mifare_write
 22218  2868  086B               	movf	??_mifare_write,w
 22219  2869  0021               	movlb	1	; select bank1
 22220  286A  00CB               	movwf	mifare_write@cmdBuffer^(0+128)
 22221                           
 22222                           ;mfrc522_mifare.c: 71: cmdBuffer[1] = blockAddr;
 22223  286B  084A               	movf	mifare_write@blockAddr^(0+128),w
 22224  286C  0020               	movlb	0	; select bank0
 22225  286D  00EB               	movwf	??_mifare_write
 22226  286E  086B               	movf	??_mifare_write,w
 22227  286F  0021               	movlb	1	; select bank1
 22228  2870  00CC               	movwf	(mifare_write@cmdBuffer^(0+128)+1)
 22229                           
 22230                           ;mfrc522_mifare.c: 72: result = pcd_mifare_transceive(cmdBuffer, 2,0);
 22231  2871  30CB               	movlw	low mifare_write@cmdBuffer
 22232  2872  0020               	movlb	0	; select bank0
 22233  2873  00CA               	movwf	pcd_mifare_transceive@sendData
 22234  2874  3000               	movlw	high mifare_write@cmdBuffer
 22235  2875  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22236  2876  3002               	movlw	2
 22237  2877  00EB               	movwf	??_mifare_write
 22238  2878  086B               	movf	??_mifare_write,w
 22239  2879  00CC               	movwf	pcd_mifare_transceive@sendLen
 22240  287A  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22241  287B  31A0  2095  31A8   	fcall	_pcd_mifare_transceive
 22242  287E  0020               	movlb	0	; select bank0
 22243  287F  00EC               	movwf	??_mifare_write+1
 22244  2880  086C               	movf	??_mifare_write+1,w
 22245  2881  0021               	movlb	1	; select bank1
 22246  2882  00CD               	movwf	mifare_write@result^(0+128)
 22247                           
 22248                           ;mfrc522_mifare.c: 73: if (result != STATUS_OK)
 22249  2883  084D               	movf	mifare_write@result^(0+128),w
 22250  2884  1903               	btfsc	3,2
 22251  2885  2888               	goto	l14449
 22252                           
 22253                           ;mfrc522_mifare.c: 74: {
 22254                           ;mfrc522_mifare.c: 75: return result;
 22255  2886  084D               	movf	mifare_write@result^(0+128),w
 22256  2887  0008               	return
 22257  2888                     l14449:	
 22258                           
 22259                           ;mfrc522_mifare.c: 76: }
 22260                           ;mfrc522_mifare.c: 77: result = pcd_mifare_transceive(buffer, bufferSize,0);
 22261  2888  0020               	movlb	0	; select bank0
 22262  2889  0869               	movf	mifare_write@buffer,w
 22263  288A  00CA               	movwf	pcd_mifare_transceive@sendData
 22264  288B  3004               	movlw	4
 22265  288C  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22266  288D  086A               	movf	mifare_write@bufferSize,w
 22267  288E  00EB               	movwf	??_mifare_write
 22268  288F  086B               	movf	??_mifare_write,w
 22269  2890  00CC               	movwf	pcd_mifare_transceive@sendLen
 22270  2891  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22271  2892  31A0  2095  31A8   	fcall	_pcd_mifare_transceive
 22272  2895  0020               	movlb	0	; select bank0
 22273  2896  00EC               	movwf	??_mifare_write+1
 22274  2897  086C               	movf	??_mifare_write+1,w
 22275  2898  0021               	movlb	1	; select bank1
 22276  2899  00CD               	movwf	mifare_write@result^(0+128)
 22277                           
 22278                           ;mfrc522_mifare.c: 78: if (result != STATUS_OK)
 22279  289A  084D               	movf	mifare_write@result^(0+128),w
 22280  289B  1903               	btfsc	3,2
 22281  289C  289F               	goto	l14457
 22282                           
 22283                           ;mfrc522_mifare.c: 79: {
 22284                           ;mfrc522_mifare.c: 80: return result;
 22285  289D  084D               	movf	mifare_write@result^(0+128),w
 22286  289E  0008               	return
 22287  289F                     l14457:	
 22288                           
 22289                           ;mfrc522_mifare.c: 81: }
 22290                           ;mfrc522_mifare.c: 82: return STATUS_OK;
 22291  289F  3000               	movlw	0
 22292  28A0  0008               	return
 22293  28A1                     __end_of_mifare_write:	
 22294                           
 22295                           	psect	text66
 22296  2095                     __ptext66:	
 22297 ;; *************** function _pcd_mifare_transceive *****************
 22298 ;; Defined at:
 22299 ;;		line 127 in file "src/nfc/pal/mfrc522_mifare.c"
 22300 ;; Parameters:    Size  Location     Type
 22301 ;;  sendData        2   42[BANK0 ] PTR unsigned char 
 22302 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), cardDecBuf(18), 
 22303 ;;		 -> cardWriteBuf(18), 
 22304 ;;  sendLen         1   44[BANK0 ] unsigned char 
 22305 ;;  acceptTimeou    1   45[BANK0 ] unsigned char 
 22306 ;; Auto vars:     Size  Location     Type
 22307 ;;  cmdBuffer      18   51[BANK0 ] unsigned char [18]
 22308 ;;  result          1   72[BANK0 ] enum E5266
 22309 ;;  cmdBufferSiz    1   71[BANK0 ] unsigned char 
 22310 ;;  validBits       1   70[BANK0 ] unsigned char 
 22311 ;;  waitIRq         1   69[BANK0 ] unsigned char 
 22312 ;; Return value:  Size  Location     Type
 22313 ;;                  1    wreg      enum E5266
 22314 ;; Registers used:
 22315 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22316 ;; Tracked objects:
 22317 ;;		On entry : 0/0
 22318 ;;		On exit  : 0/0
 22319 ;;		Unchanged: 0/0
 22320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22321 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 22322 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 22323 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22324 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0
 22325 ;;Total ram usage:       31 bytes
 22326 ;; Hardware stack levels used:    1
 22327 ;; Hardware stack levels required when called:    7
 22328 ;; This function calls:
 22329 ;;		_m_mem_cpy_len
 22330 ;;		_mfrc522_hal_calculate_crc
 22331 ;;		_pcd_comm_with_picc
 22332 ;; This function is called by:
 22333 ;;		_mifare_write
 22334 ;;		_mifare_two_Step_helper
 22335 ;; This function uses a non-reentrant model
 22336 ;;
 22337                           
 22338                           
 22339                           ;psect for function _pcd_mifare_transceive
 22340  2095                     _pcd_mifare_transceive:	
 22341                           
 22342                           ;mfrc522_mifare.c: 134: em_PcdStatusCode result;
 22343                           ;mfrc522_mifare.c: 135: uint8_t cmdBuffer[18];
 22344                           ;mfrc522_mifare.c: 138: if (sendData == (0) || sendLen > 16)
 22345                           
 22346                           ;incstack = 0
 22347                           ; Regs used in _pcd_mifare_transceive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22348  2095  0020               	movlb	0	; select bank0
 22349  2096  084A               	movf	pcd_mifare_transceive@sendData,w
 22350  2097  044B               	iorwf	pcd_mifare_transceive@sendData+1,w
 22351  2098  1903               	btfsc	3,2
 22352  2099  289E               	goto	l14005
 22353  209A  3011               	movlw	17
 22354  209B  024C               	subwf	pcd_mifare_transceive@sendLen,w
 22355  209C  1C03               	skipc
 22356  209D  28A0               	goto	l14009
 22357  209E                     l14005:	
 22358                           
 22359                           ;mfrc522_mifare.c: 139: {
 22360                           ;mfrc522_mifare.c: 140: return STATUS_INVALID;
 22361  209E  3006               	movlw	6
 22362  209F  0008               	return
 22363  20A0                     l14009:	
 22364                           
 22365                           ;mfrc522_mifare.c: 141: }
 22366                           ;mfrc522_mifare.c: 144: m_mem_cpy_len(cmdBuffer, sendData, sendLen);
 22367  20A0  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22368  20A1  00F3               	movwf	m_mem_cpy_len@d
 22369  20A2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22370  20A3  00F4               	movwf	m_mem_cpy_len@d+1
 22371  20A4  084B               	movf	pcd_mifare_transceive@sendData+1,w
 22372  20A5  00F6               	movwf	m_mem_cpy_len@s+1
 22373  20A6  084A               	movf	pcd_mifare_transceive@sendData,w
 22374  20A7  00F5               	movwf	m_mem_cpy_len@s
 22375  20A8  084C               	movf	pcd_mifare_transceive@sendLen,w
 22376  20A9  00CE               	movwf	??_pcd_mifare_transceive
 22377  20AA  084E               	movf	??_pcd_mifare_transceive,w
 22378  20AB  00F7               	movwf	m_mem_cpy_len@len
 22379  20AC  31BD  259E  31A0   	fcall	_m_mem_cpy_len
 22380                           
 22381                           ;mfrc522_mifare.c: 145: result = mfrc522_hal_calculate_crc(cmdBuffer, sendLen, &cmdBuffe
      +                          r[sendLen]);
 22382  20AF  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22383  20B0  0020               	movlb	0	; select bank0
 22384  20B1  00A6               	movwf	mfrc522_hal_calculate_crc@data
 22385  20B2  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22386  20B3  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 22387  20B4  084C               	movf	pcd_mifare_transceive@sendLen,w
 22388  20B5  00CE               	movwf	??_pcd_mifare_transceive
 22389  20B6  084E               	movf	??_pcd_mifare_transceive,w
 22390  20B7  00A8               	movwf	mfrc522_hal_calculate_crc@length
 22391  20B8  084C               	movf	pcd_mifare_transceive@sendLen,w
 22392  20B9  3E53               	addlw	(low (pcd_mifare_transceive@cmdBuffer| 0))& (0+255)
 22393  20BA  00A9               	movwf	mfrc522_hal_calculate_crc@result
 22394  20BB  3000               	movlw	0
 22395  20BC  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 22396  20BD  31AD  25B0  31A0   	fcall	_mfrc522_hal_calculate_crc
 22397  20C0  0020               	movlb	0	; select bank0
 22398  20C1  00CF               	movwf	??_pcd_mifare_transceive+1
 22399  20C2  084F               	movf	??_pcd_mifare_transceive+1,w
 22400  20C3  00E8               	movwf	pcd_mifare_transceive@result
 22401                           
 22402                           ;mfrc522_mifare.c: 146: if (result != STATUS_OK)
 22403  20C4  0868               	movf	pcd_mifare_transceive@result,w
 22404  20C5  1903               	btfsc	3,2
 22405  20C6  28C9               	goto	l14017
 22406                           
 22407                           ;mfrc522_mifare.c: 147: {
 22408                           ;mfrc522_mifare.c: 148: return result;
 22409  20C7  0868               	movf	pcd_mifare_transceive@result,w
 22410  20C8  0008               	return
 22411  20C9                     l14017:	
 22412                           
 22413                           ;mfrc522_mifare.c: 149: }
 22414                           ;mfrc522_mifare.c: 150: sendLen += 2;
 22415  20C9  3002               	movlw	2
 22416  20CA  00CE               	movwf	??_pcd_mifare_transceive
 22417  20CB  084E               	movf	??_pcd_mifare_transceive,w
 22418  20CC  07CC               	addwf	pcd_mifare_transceive@sendLen,f
 22419                           
 22420                           ;mfrc522_mifare.c: 153: uint8_t waitIRq = 0x30;
 22421  20CD  3030               	movlw	48
 22422  20CE  00CE               	movwf	??_pcd_mifare_transceive
 22423  20CF  084E               	movf	??_pcd_mifare_transceive,w
 22424  20D0  00E5               	movwf	pcd_mifare_transceive@waitIRq
 22425                           
 22426                           ;mfrc522_mifare.c: 154: uint8_t cmdBufferSize = sizeof(cmdBuffer);
 22427  20D1  3012               	movlw	18
 22428  20D2  00CE               	movwf	??_pcd_mifare_transceive
 22429  20D3  084E               	movf	??_pcd_mifare_transceive,w
 22430  20D4  00E7               	movwf	pcd_mifare_transceive@cmdBufferSize
 22431                           
 22432                           ;mfrc522_mifare.c: 155: uint8_t validBits = 0;
 22433  20D5  01E6               	clrf	pcd_mifare_transceive@validBits
 22434                           
 22435                           ;mfrc522_mifare.c: 156: result = pcd_comm_with_picc(PCD_Transceive, waitIRq, cmdBuffer, 
      +                          sendLen, cmdBuffer, &cmdBufferSize, &validBits,0,0);
 22436  20D6  0865               	movf	pcd_mifare_transceive@waitIRq,w
 22437  20D7  00CE               	movwf	??_pcd_mifare_transceive
 22438  20D8  084E               	movf	??_pcd_mifare_transceive,w
 22439  20D9  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 22440  20DA  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22441  20DB  00B2               	movwf	pcd_comm_with_picc@sbuf
 22442  20DC  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22443  20DD  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 22444  20DE  084C               	movf	pcd_mifare_transceive@sendLen,w
 22445  20DF  00CF               	movwf	??_pcd_mifare_transceive+1
 22446  20E0  084F               	movf	??_pcd_mifare_transceive+1,w
 22447  20E1  00B4               	movwf	pcd_comm_with_picc@slen
 22448  20E2  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22449  20E3  00B5               	movwf	pcd_comm_with_picc@rbuf
 22450  20E4  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22451  20E5  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 22452  20E6  3067               	movlw	(low (pcd_mifare_transceive@cmdBufferSize| 0))& (0+255)
 22453  20E7  00D0               	movwf	??_pcd_mifare_transceive+2
 22454  20E8  0850               	movf	??_pcd_mifare_transceive+2,w
 22455  20E9  00B7               	movwf	pcd_comm_with_picc@rlen
 22456  20EA  3066               	movlw	(low (pcd_mifare_transceive@validBits| 0))& (0+255)
 22457  20EB  00D1               	movwf	??_pcd_mifare_transceive+3
 22458  20EC  0851               	movf	??_pcd_mifare_transceive+3,w
 22459  20ED  00B8               	movwf	pcd_comm_with_picc@validBits
 22460  20EE  01B9               	clrf	pcd_comm_with_picc@rxAlign
 22461  20EF  01BA               	clrf	pcd_comm_with_picc@checkCRC
 22462  20F0  300C               	movlw	12
 22463  20F1  3186  26A4  31A0   	fcall	_pcd_comm_with_picc
 22464  20F4  0020               	movlb	0	; select bank0
 22465  20F5  00D2               	movwf	??_pcd_mifare_transceive+4
 22466  20F6  0852               	movf	??_pcd_mifare_transceive+4,w
 22467  20F7  00E8               	movwf	pcd_mifare_transceive@result
 22468                           
 22469                           ;mfrc522_mifare.c: 157: if (acceptTimeout && result == STATUS_TIMEOUT)
 22470  20F8  084D               	movf	pcd_mifare_transceive@acceptTimeout,w
 22471  20F9  1903               	btfsc	3,2
 22472  20FA  2901               	goto	l14035
 22473  20FB  3003               	movlw	3
 22474  20FC  0668               	xorwf	pcd_mifare_transceive@result,w
 22475  20FD  1D03               	btfss	3,2
 22476  20FE  2901               	goto	l14035
 22477                           
 22478                           ;mfrc522_mifare.c: 158: {
 22479                           ;mfrc522_mifare.c: 159: return STATUS_OK;
 22480  20FF  3000               	movlw	0
 22481  2100  0008               	return
 22482  2101                     l14035:	
 22483                           
 22484                           ;mfrc522_mifare.c: 160: }
 22485                           ;mfrc522_mifare.c: 161: if (result != STATUS_OK)
 22486  2101  0868               	movf	pcd_mifare_transceive@result,w
 22487  2102  1903               	btfsc	3,2
 22488  2103  2906               	goto	l14041
 22489                           
 22490                           ;mfrc522_mifare.c: 162: {
 22491                           ;mfrc522_mifare.c: 163: return result;
 22492  2104  0868               	movf	pcd_mifare_transceive@result,w
 22493  2105  0008               	return
 22494  2106                     l14041:	
 22495                           
 22496                           ;mfrc522_mifare.c: 164: }
 22497                           ;mfrc522_mifare.c: 166: if (cmdBufferSize != 1 || validBits != 4)
 22498  2106  0367               	decf	pcd_mifare_transceive@cmdBufferSize,w
 22499  2107  1D03               	btfss	3,2
 22500  2108  290D               	goto	l14045
 22501  2109  3004               	movlw	4
 22502  210A  0666               	xorwf	pcd_mifare_transceive@validBits,w
 22503  210B  1903               	btfsc	3,2
 22504  210C  290F               	goto	l14049
 22505  210D                     l14045:	
 22506                           
 22507                           ;mfrc522_mifare.c: 167: {
 22508                           ;mfrc522_mifare.c: 168: return STATUS_ERROR;
 22509  210D  3001               	movlw	1
 22510  210E  0008               	return
 22511  210F                     l14049:	
 22512                           
 22513                           ;mfrc522_mifare.c: 169: }
 22514                           ;mfrc522_mifare.c: 170: if (cmdBuffer[0] != MF_ACK)
 22515  210F  300A               	movlw	10
 22516  2110  0653               	xorwf	pcd_mifare_transceive@cmdBuffer,w
 22517  2111  1903               	btfsc	3,2
 22518  2112  2915               	goto	l14055
 22519                           
 22520                           ;mfrc522_mifare.c: 171: {
 22521                           ;mfrc522_mifare.c: 172: return STATUS_MIFARE_NACK;
 22522  2113  30FF               	movlw	255
 22523  2114  0008               	return
 22524  2115                     l14055:	
 22525                           
 22526                           ;mfrc522_mifare.c: 173: }
 22527                           ;mfrc522_mifare.c: 174: return STATUS_OK;
 22528  2115  3000               	movlw	0
 22529  2116  0008               	return
 22530  2117                     __end_of_pcd_mifare_transceive:	
 22531                           
 22532                           	psect	text67
 22533  3DD4                     __ptext67:	
 22534 ;; *************** function _data_api_flash_process *****************
 22535 ;; Defined at:
 22536 ;;		line 244 in file "src/app/appdata.c"
 22537 ;; Parameters:    Size  Location     Type
 22538 ;;		None
 22539 ;; Auto vars:     Size  Location     Type
 22540 ;;		None
 22541 ;; Return value:  Size  Location     Type
 22542 ;;                  1    wreg      unsigned char 
 22543 ;; Registers used:
 22544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22545 ;; Tracked objects:
 22546 ;;		On entry : 0/0
 22547 ;;		On exit  : 0/0
 22548 ;;		Unchanged: 0/0
 22549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22550 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22552 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 22553 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 22554 ;;Total ram usage:        1 bytes
 22555 ;; Hardware stack levels used:    1
 22556 ;; Hardware stack levels required when called:    5
 22557 ;; This function calls:
 22558 ;;		_data_api_calibration_table_data_save
 22559 ;;		_data_api_rt_data_save
 22560 ;; This function is called by:
 22561 ;;		_rfid_comm_process_read_header
 22562 ;;		_rfid_comm_process_recharge
 22563 ;;		_main
 22564 ;; This function uses a non-reentrant model
 22565 ;;
 22566                           
 22567                           
 22568                           ;psect for function _data_api_flash_process
 22569  3DD4                     _data_api_flash_process:	
 22570                           
 22571                           ;appdata.c: 246: if (flashOpStr.op == emFLASH_WRITE_main_CALIB_DATA) {
 22572                           
 22573                           ;incstack = 0
 22574                           ; Regs used in _data_api_flash_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22575  3DD4  0022               	movlb	2	; select bank2
 22576  3DD5  0357               	decf	(_flashOpStr^(0+256)+20),w
 22577  3DD6  1D03               	btfss	3,2
 22578  3DD7  2DE4               	goto	l14321
 22579                           
 22580                           ;appdata.c: 247: data_api_calibration_table_data_save(flowCalibrationLocation,flowCalibr
      +                          ationPointSingle);
 22581  3DD8  086B               	movf	_flowCalibrationPointSingle^(0+256),w
 22582  3DD9  0020               	movlb	0	; select bank0
 22583  3DDA  00C6               	movwf	??_data_api_flash_process
 22584  3DDB  0846               	movf	??_data_api_flash_process,w
 22585  3DDC  00B3               	movwf	data_api_calibration_table_data_save@single
 22586  3DDD  0022               	movlb	2	; select bank2
 22587  3DDE  083C               	movf	_flowCalibrationLocation^(0+256),w
 22588  3DDF  3192  22FB  31BD   	fcall	_data_api_calibration_table_data_save
 22589                           
 22590                           ;appdata.c: 248: flashOpStr.op=enFLASH_NOTHING;
 22591  3DE2  0022               	movlb	2	; select bank2
 22592  3DE3  01D7               	clrf	(_flashOpStr^(0+256)+20)
 22593  3DE4                     l14321:	
 22594                           
 22595                           ;appdata.c: 249: }
 22596                           ;appdata.c: 250: if (flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA) {
 22597  3DE4  3002               	movlw	2
 22598  3DE5  0657               	xorwf	(_flashOpStr^(0+256)+20),w
 22599  3DE6  1D03               	btfss	3,2
 22600  3DE7  2DED               	goto	l14327
 22601                           
 22602                           ;appdata.c: 252: data_api_rt_data_save();
 22603  3DE8  3198  207F         	fcall	_data_api_rt_data_save
 22604                           
 22605                           ;appdata.c: 253: flashOpStr.len=0;
 22606  3DEA  0022               	movlb	2	; select bank2
 22607  3DEB  01C5               	clrf	(_flashOpStr^(0+256)+2)
 22608  3DEC  01C6               	clrf	((_flashOpStr+1)^(0+256)+2)
 22609  3DED                     l14327:	
 22610                           
 22611                           ;appdata.c: 254: }
 22612                           ;appdata.c: 255: return 1;
 22613  3DED  3001               	movlw	1
 22614  3DEE  0008               	return
 22615  3DEF                     __end_of_data_api_flash_process:	
 22616                           
 22617                           	psect	text68
 22618  187F                     __ptext68:	
 22619 ;; *************** function _data_api_rt_data_save *****************
 22620 ;; Defined at:
 22621 ;;		line 159 in file "src/app/appdata.c"
 22622 ;; Parameters:    Size  Location     Type
 22623 ;;		None
 22624 ;; Auto vars:     Size  Location     Type
 22625 ;;  stp             2   22[BANK0 ] PTR struct .
 22626 ;;		 -> comBuffer(128), 
 22627 ;; Return value:  Size  Location     Type
 22628 ;;                  1    wreg      unsigned char 
 22629 ;; Registers used:
 22630 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22631 ;; Tracked objects:
 22632 ;;		On entry : 0/0
 22633 ;;		On exit  : 0/0
 22634 ;;		Unchanged: 0/0
 22635 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22637 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22638 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 22639 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22640 ;;Total ram usage:        5 bytes
 22641 ;; Hardware stack levels used:    1
 22642 ;; Hardware stack levels required when called:    4
 22643 ;; This function calls:
 22644 ;;		_crc_append
 22645 ;;		_data_api_system_data_get
 22646 ;;		_data_api_write_eeprom
 22647 ;;		_m_mem_cpy_len
 22648 ;; This function is called by:
 22649 ;;		_ui_key_process_down
 22650 ;;		_data_api_flash_process
 22651 ;; This function uses a non-reentrant model
 22652 ;;
 22653                           
 22654                           
 22655                           ;psect for function _data_api_rt_data_save
 22656  187F                     _data_api_rt_data_save:	
 22657                           
 22658                           ;appdata.c: 160: st_SystemData* stp=(st_SystemData*)comBuffer;
 22659                           
 22660                           ;incstack = 0
 22661                           ; Regs used in _data_api_rt_data_save: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 22662  187F  3000               	movlw	0
 22663  1880  0020               	movlb	0	; select bank0
 22664  1881  00B6               	movwf	data_api_rt_data_save@stp
 22665  1882  3022               	movlw	34
 22666  1883  00B7               	movwf	data_api_rt_data_save@stp+1
 22667                           
 22668                           ;appdata.c: 161: m_mem_cpy_len(comBuffer,(uint8_t*)(&mainSystemData),sizeof(st_SystemDat
      +                          a));
 22669  1884  3000               	movlw	0
 22670  1885  00F3               	movwf	m_mem_cpy_len@d
 22671  1886  3022               	movlw	34
 22672  1887  00F4               	movwf	m_mem_cpy_len@d+1
 22673  1888  3020               	movlw	low _mainSystemData
 22674  1889  00F5               	movwf	m_mem_cpy_len@s
 22675  188A  3002               	movlw	high _mainSystemData
 22676  188B  00F6               	movwf	m_mem_cpy_len@s+1
 22677  188C  3048               	movlw	72
 22678  188D  00B3               	movwf	??_data_api_rt_data_save
 22679  188E  0833               	movf	??_data_api_rt_data_save,w
 22680  188F  00F7               	movwf	m_mem_cpy_len@len
 22681  1890  31BD  259E  3198   	fcall	_m_mem_cpy_len
 22682                           
 22683                           ;appdata.c: 166: stp->totalConsumeVolume+=rtVolume_m3;
 22684  1893  0020               	movlb	0	; select bank0
 22685  1894  0836               	movf	data_api_rt_data_save@stp,w
 22686  1895  3E30               	addlw	48
 22687  1896  0086               	movwf	6
 22688  1897  3000               	movlw	0
 22689  1898  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22690  1899  0087               	movwf	7
 22691  189A  0021               	movlb	1	; select bank1
 22692  189B  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 22693  189C  0781               	addwf	1,f
 22694  189D  3141               	addfsr 1,1
 22695  189E  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 22696  189F  3D81               	addwfc	1,f
 22697  18A0  3141               	addfsr 1,1
 22698  18A1  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 22699  18A2  3D81               	addwfc	1,f
 22700  18A3  3141               	addfsr 1,1
 22701  18A4  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 22702  18A5  3D81               	addwfc	1,f
 22703                           
 22704                           ;appdata.c: 167: stp->BalanceMoney=rtBalanceMoney;
 22705  18A6  0020               	movlb	0	; select bank0
 22706  18A7  0836               	movf	data_api_rt_data_save@stp,w
 22707  18A8  3E2C               	addlw	44
 22708  18A9  0086               	movwf	6
 22709  18AA  3000               	movlw	0
 22710  18AB  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22711  18AC  0087               	movwf	7
 22712  18AD  0021               	movlb	1	; select bank1
 22713  18AE  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 22714  18AF  3FC0               	movwi [0]fsr1
 22715  18B0  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 22716  18B1  3FC1               	movwi [1]fsr1
 22717  18B2  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 22718  18B3  3FC2               	movwi [2]fsr1
 22719  18B4  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 22720  18B5  3FC3               	movwi [3]fsr1
 22721                           
 22722                           ;appdata.c: 168: stp->status.byte=deviceStatus.byte;
 22723  18B6  0020               	movlb	0	; select bank0
 22724  18B7  0836               	movf	data_api_rt_data_save@stp,w
 22725  18B8  3E3E               	addlw	62
 22726  18B9  00B3               	movwf	??_data_api_rt_data_save
 22727  18BA  3000               	movlw	0
 22728  18BB  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22729  18BC  00B4               	movwf	??_data_api_rt_data_save+1
 22730  18BD  0833               	movf	??_data_api_rt_data_save,w
 22731  18BE  0086               	movwf	6
 22732  18BF  0834               	movf	??_data_api_rt_data_save+1,w
 22733  18C0  0087               	movwf	7
 22734  18C1  0021               	movlb	1	; select bank1
 22735  18C2  0840               	movf	_deviceStatus^(0+128),w
 22736  18C3  0081               	movwf	1
 22737                           
 22738                           ;appdata.c: 169: if(menu<=2){
 22739  18C4  3003               	movlw	3
 22740  18C5  0243               	subwf	_menu^(0+128),w
 22741  18C6  1803               	skipnc
 22742  18C7  28D6               	goto	l13845
 22743                           
 22744                           ;appdata.c: 170: stp->menuBackUp=menu;
 22745  18C8  0020               	movlb	0	; select bank0
 22746  18C9  0836               	movf	data_api_rt_data_save@stp,w
 22747  18CA  3E22               	addlw	34
 22748  18CB  00B3               	movwf	??_data_api_rt_data_save
 22749  18CC  3000               	movlw	0
 22750  18CD  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22751  18CE  00B4               	movwf	??_data_api_rt_data_save+1
 22752  18CF  0833               	movf	??_data_api_rt_data_save,w
 22753  18D0  0086               	movwf	6
 22754  18D1  0834               	movf	??_data_api_rt_data_save+1,w
 22755  18D2  0087               	movwf	7
 22756  18D3  0021               	movlb	1	; select bank1
 22757  18D4  0843               	movf	_menu^(0+128),w
 22758  18D5  28E3               	goto	L4
 22759  18D6                     l13845:	
 22760                           ;appdata.c: 171: }else{
 22761                           
 22762                           
 22763                           ;appdata.c: 172: stp->menuBackUp=bkupMenu;
 22764  18D6  0020               	movlb	0	; select bank0
 22765  18D7  0836               	movf	data_api_rt_data_save@stp,w
 22766  18D8  3E22               	addlw	34
 22767  18D9  00B3               	movwf	??_data_api_rt_data_save
 22768  18DA  3000               	movlw	0
 22769  18DB  3D37               	addwfc	data_api_rt_data_save@stp+1,w
 22770  18DC  00B4               	movwf	??_data_api_rt_data_save+1
 22771  18DD  0833               	movf	??_data_api_rt_data_save,w
 22772  18DE  0086               	movwf	6
 22773  18DF  0834               	movf	??_data_api_rt_data_save+1,w
 22774  18E0  0087               	movwf	7
 22775  18E1  0021               	movlb	1	; select bank1
 22776  18E2  0842               	movf	_bkupMenu^(0+128),w
 22777  18E3                     L4:	
 22778  18E3  0081               	movwf	1
 22779                           
 22780                           ;appdata.c: 173: }
 22781                           ;appdata.c: 174: if(flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA){
 22782  18E4  3002               	movlw	2
 22783  18E5  0022               	movlb	2	; select bank2
 22784  18E6  0657               	xorwf	(_flashOpStr^(0+256)+20),w
 22785  18E7  1D03               	btfss	3,2
 22786  18E8  2906               	goto	l13855
 22787                           
 22788                           ;appdata.c: 175: flashOpStr.op=enFLASH_NOTHING;
 22789  18E9  01D7               	clrf	(_flashOpStr^(0+256)+20)
 22790                           
 22791                           ;appdata.c: 176: __t16=flashOpStr.flashAddr;
 22792  18EA  0844               	movf	(_flashOpStr+1)^(0+256),w
 22793  18EB  00F9               	movwf	___t16+1
 22794  18EC  0843               	movf	_flashOpStr^(0+256),w
 22795  18ED  00F8               	movwf	___t16
 22796                           
 22797                           ;appdata.c: 177: m_mem_cpy_len(comBuffer+__t16,flashOpStr.buf,flashOpStr.len);
 22798  18EE  3000               	movlw	0
 22799  18EF  0020               	movlb	0	; select bank0
 22800  18F0  00B3               	movwf	??_data_api_rt_data_save
 22801  18F1  3022               	movlw	34
 22802  18F2  00B4               	movwf	??_data_api_rt_data_save+1
 22803  18F3  0878               	movf	___t16,w
 22804  18F4  0733               	addwf	??_data_api_rt_data_save,w
 22805  18F5  00F3               	movwf	m_mem_cpy_len@d
 22806  18F6  0879               	movf	___t16+1,w
 22807  18F7  3D34               	addwfc	??_data_api_rt_data_save+1,w
 22808  18F8  00F4               	movwf	m_mem_cpy_len@d+1
 22809  18F9  3047               	movlw	low (_flashOpStr+4)
 22810  18FA  00F5               	movwf	m_mem_cpy_len@s
 22811  18FB  3001               	movlw	high (_flashOpStr+4)
 22812  18FC  00F6               	movwf	m_mem_cpy_len@s+1
 22813  18FD  0022               	movlb	2	; select bank2
 22814  18FE  0845               	movf	(_flashOpStr^(0+256)+2),w
 22815  18FF  0020               	movlb	0	; select bank0
 22816  1900  00B5               	movwf	??_data_api_rt_data_save+2
 22817  1901  0835               	movf	??_data_api_rt_data_save+2,w
 22818  1902  00F7               	movwf	m_mem_cpy_len@len
 22819  1903  31BD  259E  3198   	fcall	_m_mem_cpy_len
 22820  1906                     l13855:	
 22821                           
 22822                           ;appdata.c: 179: }
 22823                           ;appdata.c: 181: crc_append(comBuffer,sizeof(st_SystemData)-2);
 22824  1906  3000               	movlw	0
 22825  1907  0020               	movlb	0	; select bank0
 22826  1908  00A8               	movwf	crc_append@message
 22827  1909  3022               	movlw	34
 22828  190A  00A9               	movwf	crc_append@message+1
 22829  190B  3046               	movlw	70
 22830  190C  00AA               	movwf	crc_append@n
 22831  190D  3000               	movlw	0
 22832  190E  00AB               	movwf	crc_append@n+1
 22833  190F  31B3  23C9  3198   	fcall	_crc_append
 22834                           
 22835                           ;appdata.c: 182: m_mem_cpy_len((uint8_t*)(&mainSystemData),comBuffer,sizeof(st_SystemDat
      +                          a));
 22836  1912  3020               	movlw	low _mainSystemData
 22837  1913  00F3               	movwf	m_mem_cpy_len@d
 22838  1914  3002               	movlw	high _mainSystemData
 22839  1915  00F4               	movwf	m_mem_cpy_len@d+1
 22840  1916  3000               	movlw	0
 22841  1917  00F5               	movwf	m_mem_cpy_len@s
 22842  1918  3022               	movlw	34
 22843  1919  00F6               	movwf	m_mem_cpy_len@s+1
 22844  191A  3048               	movlw	72
 22845  191B  0020               	movlb	0	; select bank0
 22846  191C  00B3               	movwf	??_data_api_rt_data_save
 22847  191D  0833               	movf	??_data_api_rt_data_save,w
 22848  191E  00F7               	movwf	m_mem_cpy_len@len
 22849  191F  31BD  259E  3198   	fcall	_m_mem_cpy_len
 22850                           
 22851                           ;appdata.c: 187: data_api_write_eeprom(comBuffer,0x00,sizeof(st_SystemData));
 22852  1922  3000               	movlw	0
 22853  1923  0020               	movlb	0	; select bank0
 22854  1924  00A0               	movwf	data_api_write_eeprom@buf
 22855  1925  3022               	movlw	34
 22856  1926  00A1               	movwf	data_api_write_eeprom@buf+1
 22857  1927  01A2               	clrf	data_api_write_eeprom@addr
 22858  1928  3048               	movlw	72
 22859  1929  00B3               	movwf	??_data_api_rt_data_save
 22860  192A  0833               	movf	??_data_api_rt_data_save,w
 22861  192B  00A3               	movwf	data_api_write_eeprom@len
 22862  192C  31BE  26DA  3198   	fcall	_data_api_write_eeprom
 22863                           
 22864                           ;appdata.c: 190: data_api_system_data_get();
 22865  192F  31BC  24A4         	fcall	_data_api_system_data_get
 22866                           
 22867                           ;appdata.c: 191: rtVolume_m3=0;
 22868  1931  3000               	movlw	0
 22869  1932  0021               	movlb	1	; select bank1
 22870  1933  00B3               	movwf	(_rtVolume_m3+3)^(0+128)	;volatile
 22871  1934  3000               	movlw	0
 22872  1935  00B2               	movwf	(_rtVolume_m3+2)^(0+128)	;volatile
 22873  1936  3000               	movlw	0
 22874  1937  00B1               	movwf	(_rtVolume_m3+1)^(0+128)	;volatile
 22875  1938  3000               	movlw	0
 22876  1939  00B0               	movwf	_rtVolume_m3^(0+128)	;volatile
 22877                           
 22878                           ;appdata.c: 194: return 0;
 22879                           ;	Return value of _data_api_rt_data_save is never used
 22880  193A  0008               	return
 22881  193B                     __end_of_data_api_rt_data_save:	
 22882                           ;appdata.c: 195: }
 22883                           ;appdata.c: 196: return 1;
 22884                           ;	Return value of _data_api_rt_data_save is never used
 22885                           
 22886                           
 22887                           	psect	text69
 22888  3017                     __ptext69:	
 22889 ;; *************** function _create_card_key_b *****************
 22890 ;; Defined at:
 22891 ;;		line 32 in file "src/app/rfid_demo.c"
 22892 ;; Parameters:    Size  Location     Type
 22893 ;;  keyb            1    wreg     PTR unsigned char 
 22894 ;;		 -> userKeyB(6), 
 22895 ;;  uid             1    3[COMMON] PTR unsigned char 
 22896 ;;		 -> cardUidBlockBuf(18), 
 22897 ;;  cckey           1    4[COMMON] PTR unsigned char 
 22898 ;;		 -> mainSystemData(72), 
 22899 ;; Auto vars:     Size  Location     Type
 22900 ;;  keyb            1    6[COMMON] PTR unsigned char 
 22901 ;;		 -> userKeyB(6), 
 22902 ;;  i               1    7[COMMON] unsigned char 
 22903 ;; Return value:  Size  Location     Type
 22904 ;;                  1    wreg      void 
 22905 ;; Registers used:
 22906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 22907 ;; Tracked objects:
 22908 ;;		On entry : 0/0
 22909 ;;		On exit  : 0/0
 22910 ;;		Unchanged: 0/0
 22911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22912 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22915 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22916 ;;Total ram usage:        5 bytes
 22917 ;; Hardware stack levels used:    1
 22918 ;; Hardware stack levels required when called:    2
 22919 ;; This function calls:
 22920 ;;		Nothing
 22921 ;; This function is called by:
 22922 ;;		_rfid_comm_process_read_header
 22923 ;; This function uses a non-reentrant model
 22924 ;;
 22925                           
 22926                           
 22927                           ;psect for function _create_card_key_b
 22928  3017                     _create_card_key_b:	
 22929                           
 22930                           ;incstack = 0
 22931                           ; Regs used in _create_card_key_b: [wreg-fsr1h+status,2+status,0]
 22932                           ;create_card_key_b@keyb stored from wreg
 22933  3017  00F6               	movwf	create_card_key_b@keyb
 22934                           
 22935                           ;rfid_demo.c: 33: uint8_t i;
 22936                           ;rfid_demo.c: 34: for(i=0;i<6;i++){
 22937  3018  01F7               	clrf	create_card_key_b@i
 22938  3019                     L5:	
 22939  3019  3006               	movlw	6
 22940  301A  0277               	subwf	create_card_key_b@i,w
 22941  301B  1803               	btfsc	3,0
 22942  301C  0008               	return
 22943                           
 22944                           ;rfid_demo.c: 35: *keyb=*uid ^ *cckey;
 22945  301D  0874               	movf	create_card_key_b@cckey,w
 22946  301E  0086               	movwf	6
 22947  301F  3002               	movlw	2	; select bank4/5
 22948  3020  0087               	movwf	7
 22949  3021  0873               	movf	create_card_key_b@uid,w
 22950  3022  0084               	movwf	4
 22951  3023  3004               	movlw	4	; select bank8/9
 22952  3024  0085               	movwf	5
 22953  3025  0800               	movf	0,w
 22954  3026  0601               	xorwf	1,w
 22955  3027  00F5               	movwf	??_create_card_key_b
 22956  3028  0876               	movf	create_card_key_b@keyb,w
 22957  3029  0086               	movwf	6
 22958  302A  3001               	movlw	1	; select bank2/3
 22959  302B  0087               	movwf	7
 22960  302C  0875               	movf	??_create_card_key_b,w
 22961  302D  0081               	movwf	1
 22962                           
 22963                           ;rfid_demo.c: 36: keyb++;
 22964  302E  3001               	movlw	1
 22965  302F  00F5               	movwf	??_create_card_key_b
 22966  3030  0875               	movf	??_create_card_key_b,w
 22967  3031  07F6               	addwf	create_card_key_b@keyb,f
 22968                           
 22969                           ;rfid_demo.c: 37: uid++;
 22970  3032  3001               	movlw	1
 22971  3033  00F5               	movwf	??_create_card_key_b
 22972  3034  0875               	movf	??_create_card_key_b,w
 22973  3035  07F3               	addwf	create_card_key_b@uid,f
 22974                           
 22975                           ;rfid_demo.c: 38: cckey++;
 22976  3036  3001               	movlw	1
 22977  3037  00F5               	movwf	??_create_card_key_b
 22978  3038  0875               	movf	??_create_card_key_b,w
 22979  3039  07F4               	addwf	create_card_key_b@cckey,f
 22980  303A  3001               	movlw	1
 22981  303B  00F5               	movwf	??_create_card_key_b
 22982  303C  0875               	movf	??_create_card_key_b,w
 22983  303D  07F7               	addwf	create_card_key_b@i,f
 22984  303E  2819               	goto	L5
 22985  303F                     __end_of_create_card_key_b:	
 22986                           
 22987                           	psect	text70
 22988  367B                     __ptext70:	
 22989 ;; *************** function _rfid_comm_process_read_dec *****************
 22990 ;; Defined at:
 22991 ;;		line 116 in file "src/app/rfid_demo.c"
 22992 ;; Parameters:    Size  Location     Type
 22993 ;;		None
 22994 ;; Auto vars:     Size  Location     Type
 22995 ;;  ret             1   67[BANK0 ] unsigned char 
 22996 ;; Return value:  Size  Location     Type
 22997 ;;                  1    wreg      unsigned char 
 22998 ;; Registers used:
 22999 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23000 ;; Tracked objects:
 23001 ;;		On entry : 0/0
 23002 ;;		On exit  : 0/0
 23003 ;;		Unchanged: 0/0
 23004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23007 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23008 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23009 ;;Total ram usage:        4 bytes
 23010 ;; Hardware stack levels used:    1
 23011 ;; Hardware stack levels required when called:    8
 23012 ;; This function calls:
 23013 ;;		_crc_verify
 23014 ;;		_mifare_read
 23015 ;;		_picc_authenticate
 23016 ;; This function is called by:
 23017 ;;		_rfid_comm_process
 23018 ;; This function uses a non-reentrant model
 23019 ;;
 23020                           
 23021                           
 23022                           ;psect for function _rfid_comm_process_read_dec
 23023  367B                     _rfid_comm_process_read_dec:	
 23024                           
 23025                           ;rfid_demo.c: 118: uint8_t ret;
 23026                           ;rfid_demo.c: 120: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 23027                           
 23028                           ;incstack = 0
 23029                           ; Regs used in _rfid_comm_process_read_dec: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23030  367B  300F               	movlw	15
 23031  367C  0020               	movlb	0	; select bank0
 23032  367D  00E0               	movwf	??_rfid_comm_process_read_dec
 23033  367E  0860               	movf	??_rfid_comm_process_read_dec,w
 23034  367F  00CA               	movwf	picc_authenticate@blockAddr
 23035  3680  30CA               	movlw	low _userKeyB
 23036  3681  00CB               	movwf	picc_authenticate@key
 23037  3682  3001               	movlw	high _userKeyB
 23038  3683  00CC               	movwf	picc_authenticate@key+1
 23039  3684  30BE               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 23040  3685  00E1               	movwf	??_rfid_comm_process_read_dec+1
 23041  3686  0861               	movf	??_rfid_comm_process_read_dec+1,w
 23042  3687  00CD               	movwf	picc_authenticate@uid
 23043  3688  3061               	movlw	97
 23044  3689  31AC  2477  31B6   	fcall	_picc_authenticate
 23045  368C  0020               	movlb	0	; select bank0
 23046  368D  00E2               	movwf	??_rfid_comm_process_read_dec+2
 23047  368E  0862               	movf	??_rfid_comm_process_read_dec+2,w
 23048  368F  0021               	movlb	1	; select bank1
 23049  3690  00BE               	movwf	_piccResult^(0+128)
 23050                           
 23051                           ;rfid_demo.c: 121: rdLen=18;
 23052  3691  3012               	movlw	18
 23053  3692  0020               	movlb	0	; select bank0
 23054  3693  00E0               	movwf	??_rfid_comm_process_read_dec
 23055  3694  0860               	movf	??_rfid_comm_process_read_dec,w
 23056  3695  0021               	movlb	1	; select bank1
 23057  3696  00C8               	movwf	_rdLen^(0+128)
 23058                           
 23059                           ;rfid_demo.c: 122: piccResult = mifare_read(12, cardDecBuf, &rdLen);
 23060  3697  3056               	movlw	86
 23061  3698  0020               	movlb	0	; select bank0
 23062  3699  00E0               	movwf	??_rfid_comm_process_read_dec
 23063  369A  0860               	movf	??_rfid_comm_process_read_dec,w
 23064  369B  00CA               	movwf	mifare_read@buffer
 23065  369C  30C8               	movlw	(low (_rdLen| 0))& (0+255)
 23066  369D  00E1               	movwf	??_rfid_comm_process_read_dec+1
 23067  369E  0861               	movf	??_rfid_comm_process_read_dec+1,w
 23068  369F  00CB               	movwf	mifare_read@bufferSize
 23069  36A0  300C               	movlw	12
 23070  36A1  31AA  22BB  31B6   	fcall	_mifare_read
 23071  36A4  0020               	movlb	0	; select bank0
 23072  36A5  00E2               	movwf	??_rfid_comm_process_read_dec+2
 23073  36A6  0862               	movf	??_rfid_comm_process_read_dec+2,w
 23074  36A7  0021               	movlb	1	; select bank1
 23075  36A8  00BE               	movwf	_piccResult^(0+128)
 23076                           
 23077                           ;rfid_demo.c: 123: ret=crc_verify(cardDecBuf,sizeof(st_cardValueStrucrtDef));
 23078  36A9  3056               	movlw	86
 23079  36AA  0020               	movlb	0	; select bank0
 23080  36AB  00A8               	movwf	crc_verify@message
 23081  36AC  3004               	movlw	4
 23082  36AD  00A9               	movwf	crc_verify@message+1
 23083  36AE  3008               	movlw	8
 23084  36AF  00AA               	movwf	crc_verify@n
 23085  36B0  3000               	movlw	0
 23086  36B1  00AB               	movwf	crc_verify@n+1
 23087  36B2  31B5  255A         	fcall	_crc_verify
 23088  36B4  0020               	movlb	0	; select bank0
 23089  36B5  00E0               	movwf	??_rfid_comm_process_read_dec
 23090  36B6  0860               	movf	??_rfid_comm_process_read_dec,w
 23091  36B7  00E3               	movwf	rfid_comm_process_read_dec@ret
 23092                           
 23093                           ;rfid_demo.c: 124: return ret;
 23094  36B8  0863               	movf	rfid_comm_process_read_dec@ret,w
 23095  36B9  0008               	return
 23096  36BA                     __end_of_rfid_comm_process_read_dec:	
 23097                           
 23098                           	psect	text71
 23099  2C77                     __ptext71:	
 23100 ;; *************** function _picc_authenticate *****************
 23101 ;; Defined at:
 23102 ;;		line 288 in file "src/nfc/pal/mfrc522_picc.c"
 23103 ;; Parameters:    Size  Location     Type
 23104 ;;  command         1    wreg     unsigned char 
 23105 ;;  blockAddr       1   42[BANK0 ] unsigned char 
 23106 ;;  key             2   43[BANK0 ] PTR struct .
 23107 ;;		 -> userKeyB(6), defaultKeyA(6), 
 23108 ;;  uid             1   45[BANK0 ] PTR struct __PICC_UID
 23109 ;;		 -> PiccUid(12), 
 23110 ;; Auto vars:     Size  Location     Type
 23111 ;;  command         1   61[BANK0 ] unsigned char 
 23112 ;;  sendData       12   49[BANK0 ] unsigned char [12]
 23113 ;;  i               1   63[BANK0 ] unsigned char 
 23114 ;;  waitIRQ         1   62[BANK0 ] unsigned char 
 23115 ;; Return value:  Size  Location     Type
 23116 ;;                  1    wreg      enum E5491
 23117 ;; Registers used:
 23118 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23119 ;; Tracked objects:
 23120 ;;		On entry : 0/0
 23121 ;;		On exit  : 0/0
 23122 ;;		Unchanged: 0/0
 23123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23124 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23125 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0
 23126 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23127 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 23128 ;;Total ram usage:       22 bytes
 23129 ;; Hardware stack levels used:    1
 23130 ;; Hardware stack levels required when called:    7
 23131 ;; This function calls:
 23132 ;;		_pcd_comm_with_picc
 23133 ;; This function is called by:
 23134 ;;		_rfid_comm_process_read_header
 23135 ;;		_rfid_comm_process_read_inc
 23136 ;;		_rfid_comm_process_read_dec
 23137 ;;		_rfid_comm_process_recharge
 23138 ;; This function uses a non-reentrant model
 23139 ;;
 23140                           
 23141                           
 23142                           ;psect for function _picc_authenticate
 23143  2C77                     _picc_authenticate:	
 23144                           
 23145                           ;incstack = 0
 23146                           ; Regs used in _picc_authenticate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23147                           ;picc_authenticate@command stored from wreg
 23148  2C77  0020               	movlb	0	; select bank0
 23149  2C78  00DD               	movwf	picc_authenticate@command
 23150                           
 23151                           ;mfrc522_picc.c: 289: uint8_t waitIRQ = 0x10;
 23152  2C79  3010               	movlw	16
 23153  2C7A  00CE               	movwf	??_picc_authenticate
 23154  2C7B  084E               	movf	??_picc_authenticate,w
 23155  2C7C  00DE               	movwf	picc_authenticate@waitIRQ
 23156                           
 23157                           ;mfrc522_picc.c: 290: uint8_t i;
 23158                           ;mfrc522_picc.c: 291: uint8_t sendData[12];
 23159                           ;mfrc522_picc.c: 292: sendData[0] = command;
 23160  2C7D  085D               	movf	picc_authenticate@command,w
 23161  2C7E  00CE               	movwf	??_picc_authenticate
 23162  2C7F  084E               	movf	??_picc_authenticate,w
 23163  2C80  00D1               	movwf	picc_authenticate@sendData
 23164                           
 23165                           ;mfrc522_picc.c: 293: sendData[1] = blockAddr;
 23166  2C81  084A               	movf	picc_authenticate@blockAddr,w
 23167  2C82  00CE               	movwf	??_picc_authenticate
 23168  2C83  084E               	movf	??_picc_authenticate,w
 23169  2C84  00D2               	movwf	picc_authenticate@sendData+1
 23170                           
 23171                           ;mfrc522_picc.c: 294: for (i = 0; i < MF_KEY_SIZE; i++) {
 23172  2C85  01DF               	clrf	picc_authenticate@i
 23173  2C86  3006               	movlw	6
 23174  2C87  025F               	subwf	picc_authenticate@i,w
 23175  2C88  1803               	btfsc	3,0
 23176  2C89  2CA6               	goto	l14393
 23177  2C8A                     l14387:	
 23178                           
 23179                           ;mfrc522_picc.c: 295: sendData[2 + i] = key->keyByte[i];
 23180  2C8A  084C               	movf	picc_authenticate@key+1,w
 23181  2C8B  00CF               	movwf	??_picc_authenticate+1
 23182  2C8C  084B               	movf	picc_authenticate@key,w
 23183  2C8D  00CE               	movwf	??_picc_authenticate
 23184  2C8E  085F               	movf	picc_authenticate@i,w
 23185  2C8F  074E               	addwf	??_picc_authenticate,w
 23186  2C90  0084               	movwf	4
 23187  2C91  084F               	movf	??_picc_authenticate+1,w
 23188  2C92  1803               	skipnc
 23189  2C93  0A4F               	incf	??_picc_authenticate+1,w
 23190  2C94  0085               	movwf	5
 23191  2C95  0800               	movf	0,w	;code access
 23192  2C96  00D0               	movwf	??_picc_authenticate+2
 23193  2C97  085F               	movf	picc_authenticate@i,w
 23194  2C98  3E02               	addlw	2
 23195  2C99  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 23196  2C9A  0086               	movwf	6
 23197  2C9B  0187               	clrf	7
 23198  2C9C  0850               	movf	??_picc_authenticate+2,w
 23199  2C9D  0081               	movwf	1
 23200  2C9E  3001               	movlw	1
 23201  2C9F  00CE               	movwf	??_picc_authenticate
 23202  2CA0  084E               	movf	??_picc_authenticate,w
 23203  2CA1  07DF               	addwf	picc_authenticate@i,f
 23204  2CA2  3006               	movlw	6
 23205  2CA3  025F               	subwf	picc_authenticate@i,w
 23206  2CA4  1C03               	skipc
 23207  2CA5  2C8A               	goto	l14387
 23208  2CA6                     l14393:	
 23209                           
 23210                           ;mfrc522_picc.c: 296: }
 23211                           ;mfrc522_picc.c: 297: for (i = 0; i < 4; i++) {
 23212  2CA6  01DF               	clrf	picc_authenticate@i
 23213  2CA7  3004               	movlw	4
 23214  2CA8  025F               	subwf	picc_authenticate@i,w
 23215  2CA9  1803               	btfsc	3,0
 23216  2CAA  2CC4               	goto	l14405
 23217  2CAB                     l14399:	
 23218                           
 23219                           ;mfrc522_picc.c: 298: sendData[8 + i] = uid->uidByte[i];
 23220  2CAB  085F               	movf	picc_authenticate@i,w
 23221  2CAC  3E01               	addlw	1
 23222  2CAD  074D               	addwf	picc_authenticate@uid,w
 23223  2CAE  00CE               	movwf	??_picc_authenticate
 23224  2CAF  084E               	movf	??_picc_authenticate,w
 23225  2CB0  0086               	movwf	6
 23226  2CB1  3001               	movlw	1	; select bank2/3
 23227  2CB2  0087               	movwf	7
 23228  2CB3  0801               	movf	1,w
 23229  2CB4  00CF               	movwf	??_picc_authenticate+1
 23230  2CB5  085F               	movf	picc_authenticate@i,w
 23231  2CB6  3E08               	addlw	8
 23232  2CB7  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 23233  2CB8  0086               	movwf	6
 23234  2CB9  0187               	clrf	7
 23235  2CBA  084F               	movf	??_picc_authenticate+1,w
 23236  2CBB  0081               	movwf	1
 23237  2CBC  3001               	movlw	1
 23238  2CBD  00CE               	movwf	??_picc_authenticate
 23239  2CBE  084E               	movf	??_picc_authenticate,w
 23240  2CBF  07DF               	addwf	picc_authenticate@i,f
 23241  2CC0  3004               	movlw	4
 23242  2CC1  025F               	subwf	picc_authenticate@i,w
 23243  2CC2  1C03               	skipc
 23244  2CC3  2CAB               	goto	l14399
 23245  2CC4                     l14405:	
 23246                           
 23247                           ;mfrc522_picc.c: 299: }
 23248                           ;mfrc522_picc.c: 300: return pcd_comm_with_picc(PCD_MFAuthent, waitIRQ, &sendData[0], si
      +                          zeof (sendData), (0), (0), (0), 0, 0);
 23249  2CC4  085E               	movf	picc_authenticate@waitIRQ,w
 23250  2CC5  00CE               	movwf	??_picc_authenticate
 23251  2CC6  084E               	movf	??_picc_authenticate,w
 23252  2CC7  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 23253  2CC8  3051               	movlw	low picc_authenticate@sendData
 23254  2CC9  00B2               	movwf	pcd_comm_with_picc@sbuf
 23255  2CCA  3000               	movlw	high picc_authenticate@sendData
 23256  2CCB  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 23257  2CCC  300C               	movlw	12
 23258  2CCD  00CF               	movwf	??_picc_authenticate+1
 23259  2CCE  084F               	movf	??_picc_authenticate+1,w
 23260  2CCF  00B4               	movwf	pcd_comm_with_picc@slen
 23261  2CD0  3000               	movlw	0
 23262  2CD1  00B5               	movwf	pcd_comm_with_picc@rbuf
 23263  2CD2  3000               	movlw	0
 23264  2CD3  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 23265  2CD4  01B7               	clrf	pcd_comm_with_picc@rlen
 23266  2CD5  01B8               	clrf	pcd_comm_with_picc@validBits
 23267  2CD6  01B9               	clrf	pcd_comm_with_picc@rxAlign
 23268  2CD7  01BA               	clrf	pcd_comm_with_picc@checkCRC
 23269  2CD8  300E               	movlw	14
 23270  2CD9  3186  26A4         	fcall	_pcd_comm_with_picc
 23271  2CDB  0008               	return
 23272  2CDC                     __end_of_picc_authenticate:	
 23273                           
 23274                           	psect	text72
 23275  2ABB                     __ptext72:	
 23276 ;; *************** function _mifare_read *****************
 23277 ;; Defined at:
 23278 ;;		line 35 in file "src/nfc/pal/mfrc522_mifare.c"
 23279 ;; Parameters:    Size  Location     Type
 23280 ;;  blockAddr       1    wreg     unsigned char 
 23281 ;;  buffer          1   42[BANK0 ] PTR unsigned char 
 23282 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 23283 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 23284 ;;		 -> rdLen(1), __t8(1), 
 23285 ;; Auto vars:     Size  Location     Type
 23286 ;;  blockAddr       1   47[BANK0 ] unsigned char 
 23287 ;;  result          1   48[BANK0 ] enum E5266
 23288 ;; Return value:  Size  Location     Type
 23289 ;;                  1    wreg      enum E5491
 23290 ;; Registers used:
 23291 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23292 ;; Tracked objects:
 23293 ;;		On entry : 0/0
 23294 ;;		On exit  : 0/0
 23295 ;;		Unchanged: 0/0
 23296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23297 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23298 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23299 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23300 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 23301 ;;Total ram usage:        7 bytes
 23302 ;; Hardware stack levels used:    1
 23303 ;; Hardware stack levels required when called:    7
 23304 ;; This function calls:
 23305 ;;		_mfrc522_hal_calculate_crc
 23306 ;;		_pcd_comm_with_picc
 23307 ;; This function is called by:
 23308 ;;		_rfid_comm_process_read_header
 23309 ;;		_rfid_comm_process_read_inc
 23310 ;;		_rfid_comm_process_read_dec
 23311 ;; This function uses a non-reentrant model
 23312 ;;
 23313                           
 23314                           
 23315                           ;psect for function _mifare_read
 23316  2ABB                     _mifare_read:	
 23317                           
 23318                           ;incstack = 0
 23319                           ; Regs used in _mifare_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23320                           ;mifare_read@blockAddr stored from wreg
 23321  2ABB  0020               	movlb	0	; select bank0
 23322  2ABC  00CF               	movwf	mifare_read@blockAddr
 23323                           
 23324                           ;mfrc522_mifare.c: 42: em_PcdStatusCode result;
 23325                           ;mfrc522_mifare.c: 43: if (buffer == (0) || *bufferSize < 18)
 23326  2ABD  084A               	movf	mifare_read@buffer,w
 23327  2ABE  1903               	btfsc	3,2
 23328  2ABF  2AC7               	goto	l14413
 23329  2AC0  084B               	movf	mifare_read@bufferSize,w
 23330  2AC1  0086               	movwf	6
 23331  2AC2  0187               	clrf	7
 23332  2AC3  3012               	movlw	18
 23333  2AC4  0201               	subwf	1,w
 23334  2AC5  1803               	skipnc
 23335  2AC6  2AC9               	goto	l14417
 23336  2AC7                     l14413:	
 23337                           
 23338                           ;mfrc522_mifare.c: 44: {
 23339                           ;mfrc522_mifare.c: 45: return STATUS_NO_ROOM;
 23340  2AC7  3004               	movlw	4
 23341  2AC8  0008               	return
 23342  2AC9                     l14417:	
 23343                           
 23344                           ;mfrc522_mifare.c: 46: }
 23345                           ;mfrc522_mifare.c: 47: buffer[0] = PICC_CMD_MF_READ;
 23346  2AC9  3030               	movlw	48
 23347  2ACA  00CC               	movwf	??_mifare_read
 23348  2ACB  084A               	movf	mifare_read@buffer,w
 23349  2ACC  0086               	movwf	6
 23350  2ACD  3004               	movlw	4	; select bank8/9
 23351  2ACE  0087               	movwf	7
 23352  2ACF  084C               	movf	??_mifare_read,w
 23353  2AD0  0081               	movwf	1
 23354                           
 23355                           ;mfrc522_mifare.c: 48: buffer[1] = blockAddr;
 23356  2AD1  084F               	movf	mifare_read@blockAddr,w
 23357  2AD2  00CC               	movwf	??_mifare_read
 23358  2AD3  0A4A               	incf	mifare_read@buffer,w
 23359  2AD4  0086               	movwf	6
 23360  2AD5  3004               	movlw	4	; select bank8/9
 23361  2AD6  0087               	movwf	7
 23362  2AD7  084C               	movf	??_mifare_read,w
 23363  2AD8  0081               	movwf	1
 23364                           
 23365                           ;mfrc522_mifare.c: 49: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 23366  2AD9  084A               	movf	mifare_read@buffer,w
 23367  2ADA  00A6               	movwf	mfrc522_hal_calculate_crc@data
 23368  2ADB  3004               	movlw	4
 23369  2ADC  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 23370  2ADD  3002               	movlw	2
 23371  2ADE  00CC               	movwf	??_mifare_read
 23372  2ADF  084C               	movf	??_mifare_read,w
 23373  2AE0  00A8               	movwf	mfrc522_hal_calculate_crc@length
 23374  2AE1  084A               	movf	mifare_read@buffer,w
 23375  2AE2  3E02               	addlw	2
 23376  2AE3  00A9               	movwf	mfrc522_hal_calculate_crc@result
 23377  2AE4  3004               	movlw	4
 23378  2AE5  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 23379  2AE6  31AD  25B0  31AA   	fcall	_mfrc522_hal_calculate_crc
 23380  2AE9  0020               	movlb	0	; select bank0
 23381  2AEA  00CD               	movwf	??_mifare_read+1
 23382  2AEB  084D               	movf	??_mifare_read+1,w
 23383  2AEC  00D0               	movwf	mifare_read@result
 23384                           
 23385                           ;mfrc522_mifare.c: 50: if (result != STATUS_OK) {
 23386  2AED  0850               	movf	mifare_read@result,w
 23387  2AEE  1903               	btfsc	3,2
 23388  2AEF  2AF2               	goto	l14427
 23389                           
 23390                           ;mfrc522_mifare.c: 51: return result;
 23391  2AF0  0850               	movf	mifare_read@result,w
 23392  2AF1  0008               	return
 23393  2AF2                     l14427:	
 23394                           
 23395                           ;mfrc522_mifare.c: 52: }
 23396                           ;mfrc522_mifare.c: 54: return pcd_comm_with_picc(PCD_Transceive,0x30,buffer, 4, buffer, 
      +                          bufferSize, (0), 0, 1);
 23397  2AF2  3030               	movlw	48
 23398  2AF3  00CC               	movwf	??_mifare_read
 23399  2AF4  084C               	movf	??_mifare_read,w
 23400  2AF5  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 23401  2AF6  084A               	movf	mifare_read@buffer,w
 23402  2AF7  00B2               	movwf	pcd_comm_with_picc@sbuf
 23403  2AF8  3004               	movlw	4
 23404  2AF9  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 23405  2AFA  3004               	movlw	4
 23406  2AFB  00CD               	movwf	??_mifare_read+1
 23407  2AFC  084D               	movf	??_mifare_read+1,w
 23408  2AFD  00B4               	movwf	pcd_comm_with_picc@slen
 23409  2AFE  084A               	movf	mifare_read@buffer,w
 23410  2AFF  00B5               	movwf	pcd_comm_with_picc@rbuf
 23411  2B00  3004               	movlw	4
 23412  2B01  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 23413  2B02  084B               	movf	mifare_read@bufferSize,w
 23414  2B03  00CE               	movwf	??_mifare_read+2
 23415  2B04  084E               	movf	??_mifare_read+2,w
 23416  2B05  00B7               	movwf	pcd_comm_with_picc@rlen
 23417  2B06  01B8               	clrf	pcd_comm_with_picc@validBits
 23418  2B07  01B9               	clrf	pcd_comm_with_picc@rxAlign
 23419  2B08  01BA               	clrf	pcd_comm_with_picc@checkCRC
 23420  2B09  0ABA               	incf	pcd_comm_with_picc@checkCRC,f
 23421  2B0A  300C               	movlw	12
 23422  2B0B  3186  26A4         	fcall	_pcd_comm_with_picc
 23423  2B0D  0008               	return
 23424  2B0E                     __end_of_mifare_read:	
 23425                           
 23426                           	psect	text73
 23427  3B23                     __ptext73:	
 23428 ;; *************** function _picc_stop_cryptol *****************
 23429 ;; Defined at:
 23430 ;;		line 308 in file "src/nfc/pal/mfrc522_picc.c"
 23431 ;; Parameters:    Size  Location     Type
 23432 ;;		None
 23433 ;; Auto vars:     Size  Location     Type
 23434 ;;		None
 23435 ;; Return value:  Size  Location     Type
 23436 ;;                  1    wreg      void 
 23437 ;; Registers used:
 23438 ;;		wreg, status,2, status,0, pclath, cstack
 23439 ;; Tracked objects:
 23440 ;;		On entry : 0/0
 23441 ;;		On exit  : 0/0
 23442 ;;		Unchanged: 0/0
 23443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23447 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23448 ;;Total ram usage:        1 bytes
 23449 ;; Hardware stack levels used:    1
 23450 ;; Hardware stack levels required when called:    5
 23451 ;; This function calls:
 23452 ;;		_mfrc522_bal_clr_bit_reg
 23453 ;; This function is called by:
 23454 ;;		_rfid_comm_process
 23455 ;; This function uses a non-reentrant model
 23456 ;;
 23457                           
 23458                           
 23459                           ;psect for function _picc_stop_cryptol
 23460  3B23                     _picc_stop_cryptol:	
 23461                           
 23462                           ;mfrc522_picc.c: 309: mfrc522_bal_clr_bit_reg(Status2Reg, 0x08);
 23463                           
 23464                           ;incstack = 0
 23465                           ; Regs used in _picc_stop_cryptol: [wreg+status,2+status,0+pclath+cstack]
 23466  3B23  3008               	movlw	8
 23467  3B24  0020               	movlb	0	; select bank0
 23468  3B25  00A6               	movwf	??_picc_stop_cryptol
 23469  3B26  0826               	movf	??_picc_stop_cryptol,w
 23470  3B27  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 23471  3B28  3008               	movlw	8
 23472  3B29  31BD  250E         	fcall	_mfrc522_bal_clr_bit_reg
 23473  3B2B  0008               	return
 23474  3B2C                     __end_of_picc_stop_cryptol:	
 23475                           
 23476                           	psect	text74
 23477  00A0                     __ptext74:	
 23478 ;; *************** function _picc_select *****************
 23479 ;; Defined at:
 23480 ;;		line 126 in file "src/nfc/pal/mfrc522_picc.c"
 23481 ;; Parameters:    Size  Location     Type
 23482 ;;  uid             1    wreg     PTR struct __PICC_UID
 23483 ;;		 -> PiccUid(12), 
 23484 ;;  validBits       1   42[BANK0 ] unsigned char 
 23485 ;; Auto vars:     Size  Location     Type
 23486 ;;  uid             1   30[BANK1 ] PTR struct __PICC_UID
 23487 ;;		 -> PiccUid(12), 
 23488 ;;  collisionPos    1   23[BANK1 ] unsigned char 
 23489 ;;  valueOfCollR    1   13[BANK1 ] unsigned char 
 23490 ;;  maxBytes        1   12[BANK1 ] unsigned char 
 23491 ;;  bytesToCopy     1   27[BANK1 ] unsigned char 
 23492 ;;  buffer          9   14[BANK1 ] unsigned char [9]
 23493 ;;  currentLevel    1   35[BANK1 ] unsigned char 
 23494 ;;  index           1   34[BANK1 ] unsigned char 
 23495 ;;  count           1   33[BANK1 ] unsigned char 
 23496 ;;  result          1   32[BANK1 ] enum E5266
 23497 ;;  txLastBits      1   31[BANK1 ] unsigned char 
 23498 ;;  responseBuff    1   29[BANK1 ] PTR unsigned char 
 23499 ;;		 -> picc_select@buffer(9), 
 23500 ;;  responseLeng    1   28[BANK1 ] unsigned char 
 23501 ;;  uidIndex        1   26[BANK1 ] unsigned char 
 23502 ;;  cascadeLevel    1   25[BANK1 ] unsigned char 
 23503 ;;  useCascadeTa    1   24[BANK1 ] unsigned char 
 23504 ;;  rxAlign         1   11[BANK1 ] unsigned char 
 23505 ;;  bufferUsed      1    8[BANK1 ] unsigned char 
 23506 ;;  selectDone      1    7[BANK1 ] unsigned char 
 23507 ;;  uidComplete     1    6[BANK1 ] unsigned char 
 23508 ;; Return value:  Size  Location     Type
 23509 ;;                  1    wreg      enum E5491
 23510 ;; Registers used:
 23511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23512 ;; Tracked objects:
 23513 ;;		On entry : 0/0
 23514 ;;		On exit  : 0/0
 23515 ;;		Unchanged: 0/0
 23516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23517 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23518 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0
 23519 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 23520 ;;      Totals:         0       7      36       0       0       0       0       0       0       0       0       0       
      +0
 23521 ;;Total ram usage:       43 bytes
 23522 ;; Hardware stack levels used:    1
 23523 ;; Hardware stack levels required when called:    7
 23524 ;; This function calls:
 23525 ;;		___awdiv
 23526 ;;		___bmul
 23527 ;;		_mfrc522_bal_clr_bit_reg
 23528 ;;		_mfrc522_bal_read_reg
 23529 ;;		_mfrc522_bal_write_reg
 23530 ;;		_mfrc522_hal_calculate_crc
 23531 ;;		_pcd_comm_with_picc
 23532 ;; This function is called by:
 23533 ;;		_rfid_comm_process
 23534 ;; This function uses a non-reentrant model
 23535 ;;
 23536                           
 23537                           
 23538                           ;psect for function _picc_select
 23539  00A0                     _picc_select:	
 23540                           
 23541                           ;incstack = 0
 23542                           ; Regs used in _picc_select: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23543                           ;picc_select@uid stored from wreg
 23544  00A0  0021               	movlb	1	; select bank1
 23545  00A1  00E8               	movwf	picc_select@uid^(0+128)
 23546                           
 23547                           ;mfrc522_picc.c: 127: bool uidComplete;
 23548                           ;mfrc522_picc.c: 128: bool selectDone;
 23549                           ;mfrc522_picc.c: 129: bool useCascadeTag;
 23550                           ;mfrc522_picc.c: 130: uint8_t cascadeLevel = 1;
 23551  00A2  01E3               	clrf	picc_select@cascadeLevel^(0+128)
 23552  00A3  0AE3               	incf	picc_select@cascadeLevel^(0+128),f
 23553                           
 23554                           ;mfrc522_picc.c: 131: em_PcdStatusCode result;
 23555                           ;mfrc522_picc.c: 132: uint8_t count;
 23556                           ;mfrc522_picc.c: 133: uint8_t index;
 23557                           ;mfrc522_picc.c: 134: uint8_t uidIndex;
 23558                           ;mfrc522_picc.c: 135: uint8_t currentLevelKnownBits;
 23559                           ;mfrc522_picc.c: 136: uint8_t buffer[9];
 23560                           ;mfrc522_picc.c: 137: uint8_t bufferUsed;
 23561                           ;mfrc522_picc.c: 138: uint8_t rxAlign;
 23562                           ;mfrc522_picc.c: 139: uint8_t txLastBits;
 23563                           ;mfrc522_picc.c: 140: uint8_t *responseBuffer;
 23564                           ;mfrc522_picc.c: 141: uint8_t responseLength;
 23565                           ;mfrc522_picc.c: 144: if (validBits > 80) return STATUS_INVALID;
 23566  00A4  3051               	movlw	81
 23567  00A5  0020               	movlb	0	; select bank0
 23568  00A6  024A               	subwf	picc_select@validBits,w
 23569  00A7  1C03               	skipc
 23570  00A8  28AB               	goto	l15701
 23571  00A9  3006               	movlw	6
 23572  00AA  0008               	return
 23573  00AB                     l15701:	
 23574                           
 23575                           ;mfrc522_picc.c: 145: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 23576  00AB  3080               	movlw	128
 23577  00AC  00CB               	movwf	??_picc_select
 23578  00AD  084B               	movf	??_picc_select,w
 23579  00AE  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 23580  00AF  300E               	movlw	14
 23581  00B0  31BD  250E  3180   	fcall	_mfrc522_bal_clr_bit_reg
 23582                           
 23583                           ;mfrc522_picc.c: 146: uidComplete = 0;
 23584  00B3  0021               	movlb	1	; select bank1
 23585  00B4  01D0               	clrf	picc_select@uidComplete^(0+128)
 23586  00B5                     l15925:	
 23587                           ;mfrc522_picc.c: 147: while (!uidComplete) {
 23588                           
 23589  00B5  0021               	movlb	1	; select bank1
 23590  00B6  0850               	movf	picc_select@uidComplete^(0+128),w
 23591  00B7  1D03               	btfss	3,2
 23592  00B8  2BA7               	goto	l15927
 23593                           
 23594                           ;mfrc522_picc.c: 148: if (cascadeLevel == 1) {
 23595  00B9  0363               	decf	picc_select@cascadeLevel^(0+128),w
 23596  00BA  1D03               	btfss	3,2
 23597  00BB  28D6               	goto	l15721
 23598                           
 23599                           ;mfrc522_picc.c: 149: buffer[0] = PICC_CMD_SEL_CL1;
 23600  00BC  3093               	movlw	147
 23601  00BD  0020               	movlb	0	; select bank0
 23602  00BE  00CB               	movwf	??_picc_select
 23603  00BF  084B               	movf	??_picc_select,w
 23604  00C0  0021               	movlb	1	; select bank1
 23605  00C1  00D8               	movwf	picc_select@buffer^(0+128)
 23606                           
 23607                           ;mfrc522_picc.c: 150: uidIndex = 0;
 23608  00C2  01E4               	clrf	picc_select@uidIndex^(0+128)
 23609                           
 23610                           ;mfrc522_picc.c: 151: useCascadeTag = validBits && uid->size > 4;
 23611  00C3  01D3               	clrf	_picc_select$3247^(0+128)
 23612  00C4  0020               	movlb	0	; select bank0
 23613  00C5  084A               	movf	picc_select@validBits,w
 23614  00C6  1903               	btfsc	3,2
 23615  00C7  28D3               	goto	l15719
 23616  00C8  0021               	movlb	1	; select bank1
 23617  00C9  0868               	movf	picc_select@uid^(0+128),w
 23618  00CA  0086               	movwf	6
 23619  00CB  3001               	movlw	1	; select bank2/3
 23620  00CC  0087               	movwf	7
 23621  00CD  3005               	movlw	5
 23622  00CE  0201               	subwf	1,w
 23623  00CF  1C03               	skipc
 23624  00D0  28D3               	goto	l15719
 23625  00D1  01D3               	clrf	_picc_select$3247^(0+128)
 23626  00D2  0AD3               	incf	_picc_select$3247^(0+128),f
 23627  00D3                     l15719:	
 23628  00D3  0021               	movlb	1	; select bank1
 23629  00D4  0853               	movf	_picc_select$3247^(0+128),w
 23630  00D5  28F8               	goto	L6
 23631  00D6                     l15721:	
 23632                           ;mfrc522_picc.c: 152: } else if (cascadeLevel == 2) {
 23633                           
 23634  00D6  3002               	movlw	2
 23635  00D7  0663               	xorwf	picc_select@cascadeLevel^(0+128),w
 23636  00D8  1D03               	btfss	3,2
 23637  00D9  28FE               	goto	l15735
 23638                           
 23639                           ;mfrc522_picc.c: 153: buffer[0] = PICC_CMD_SEL_CL2;
 23640  00DA  3095               	movlw	149
 23641  00DB  0020               	movlb	0	; select bank0
 23642  00DC  00CB               	movwf	??_picc_select
 23643  00DD  084B               	movf	??_picc_select,w
 23644  00DE  0021               	movlb	1	; select bank1
 23645  00DF  00D8               	movwf	picc_select@buffer^(0+128)
 23646                           
 23647                           ;mfrc522_picc.c: 154: uidIndex = 3;
 23648  00E0  3003               	movlw	3
 23649  00E1  0020               	movlb	0	; select bank0
 23650  00E2  00CB               	movwf	??_picc_select
 23651  00E3  084B               	movf	??_picc_select,w
 23652  00E4  0021               	movlb	1	; select bank1
 23653  00E5  00E4               	movwf	picc_select@uidIndex^(0+128)
 23654                           
 23655                           ;mfrc522_picc.c: 155: useCascadeTag = validBits && uid->size > 7;
 23656  00E6  01D4               	clrf	_picc_select$3248^(0+128)
 23657  00E7  0020               	movlb	0	; select bank0
 23658  00E8  084A               	movf	picc_select@validBits,w
 23659  00E9  1903               	btfsc	3,2
 23660  00EA  28F6               	goto	l15733
 23661  00EB  0021               	movlb	1	; select bank1
 23662  00EC  0868               	movf	picc_select@uid^(0+128),w
 23663  00ED  0086               	movwf	6
 23664  00EE  3001               	movlw	1	; select bank2/3
 23665  00EF  0087               	movwf	7
 23666  00F0  3008               	movlw	8
 23667  00F1  0201               	subwf	1,w
 23668  00F2  1C03               	skipc
 23669  00F3  28F6               	goto	l15733
 23670  00F4  01D4               	clrf	_picc_select$3248^(0+128)
 23671  00F5  0AD4               	incf	_picc_select$3248^(0+128),f
 23672  00F6                     l15733:	
 23673  00F6  0021               	movlb	1	; select bank1
 23674  00F7  0854               	movf	_picc_select$3248^(0+128),w
 23675  00F8                     L6:	
 23676  00F8  0020               	movlb	0	; select bank0
 23677  00F9  00CB               	movwf	??_picc_select
 23678  00FA  084B               	movf	??_picc_select,w
 23679  00FB  0021               	movlb	1	; select bank1
 23680  00FC  00E2               	movwf	picc_select@useCascadeTag^(0+128)
 23681                           
 23682                           ;mfrc522_picc.c: 156: } else if (cascadeLevel == 3) {
 23683  00FD  2912               	goto	l15745
 23684  00FE                     l15735:	
 23685  00FE  3003               	movlw	3
 23686  00FF  0663               	xorwf	picc_select@cascadeLevel^(0+128),w
 23687  0100  1D03               	btfss	3,2
 23688  0101  2910               	goto	l15741
 23689                           
 23690                           ;mfrc522_picc.c: 157: buffer[0] = PICC_CMD_SEL_CL3;
 23691  0102  3097               	movlw	151
 23692  0103  0020               	movlb	0	; select bank0
 23693  0104  00CB               	movwf	??_picc_select
 23694  0105  084B               	movf	??_picc_select,w
 23695  0106  0021               	movlb	1	; select bank1
 23696  0107  00D8               	movwf	picc_select@buffer^(0+128)
 23697                           
 23698                           ;mfrc522_picc.c: 158: uidIndex = 6;
 23699  0108  3006               	movlw	6
 23700  0109  0020               	movlb	0	; select bank0
 23701  010A  00CB               	movwf	??_picc_select
 23702  010B  084B               	movf	??_picc_select,w
 23703  010C  0021               	movlb	1	; select bank1
 23704  010D  00E4               	movwf	picc_select@uidIndex^(0+128)
 23705                           
 23706                           ;mfrc522_picc.c: 159: useCascadeTag = 0;
 23707  010E  01E2               	clrf	picc_select@useCascadeTag^(0+128)
 23708                           
 23709                           ;mfrc522_picc.c: 160: } else {
 23710  010F  2912               	goto	l15745
 23711  0110                     l15741:	
 23712                           
 23713                           ;mfrc522_picc.c: 161: return STATUS_INTERNAL_ERROR;
 23714  0110  3005               	movlw	5
 23715  0111  0008               	return
 23716  0112                     l15745:	
 23717                           
 23718                           ;mfrc522_picc.c: 162: }
 23719                           ;mfrc522_picc.c: 164: if (validBits < (8 * uidIndex)) {
 23720  0112  0864               	movf	picc_select@uidIndex^(0+128),w
 23721  0113  0020               	movlb	0	; select bank0
 23722  0114  00CB               	movwf	??_picc_select
 23723  0115  01CC               	clrf	??_picc_select+1
 23724  0116  35CB               	lslf	??_picc_select,f
 23725  0117  0DCC               	rlf	??_picc_select+1,f
 23726  0118  35CB               	lslf	??_picc_select,f
 23727  0119  0DCC               	rlf	??_picc_select+1,f
 23728  011A  35CB               	lslf	??_picc_select,f
 23729  011B  0DCC               	rlf	??_picc_select+1,f
 23730  011C  084C               	movf	??_picc_select+1,w
 23731  011D  3A80               	xorlw	128
 23732  011E  3C80               	sublw	128
 23733  011F  1D03               	skipz
 23734  0120  2923               	goto	u14505
 23735  0121  084B               	movf	??_picc_select,w
 23736  0122  024A               	subwf	picc_select@validBits,w
 23737  0123                     u14505:	
 23738  0123  1803               	skipnc
 23739  0124  2928               	goto	l15749
 23740                           
 23741                           ;mfrc522_picc.c: 165: currentLevelKnownBits = 0;
 23742  0125  0021               	movlb	1	; select bank1
 23743  0126  01ED               	clrf	picc_select@currentLevelKnownBits^(0+128)
 23744                           
 23745                           ;mfrc522_picc.c: 166: } else {
 23746  0127  2939               	goto	l15751
 23747  0128                     l15749:	
 23748                           
 23749                           ;mfrc522_picc.c: 167: currentLevelKnownBits = validBits - (8 * uidIndex);
 23750  0128  0021               	movlb	1	; select bank1
 23751  0129  0864               	movf	picc_select@uidIndex^(0+128),w
 23752  012A  0020               	movlb	0	; select bank0
 23753  012B  00CB               	movwf	??_picc_select
 23754  012C  3002               	movlw	2
 23755  012D                     u14515:	
 23756  012D  35CB               	lslf	??_picc_select,f
 23757  012E  3EFF               	addlw	-1
 23758  012F  1D03               	skipz
 23759  0130  292D               	goto	u14515
 23760  0131  354B               	lslf	??_picc_select,w
 23761  0132  3AFF               	xorlw	255
 23762  0133  3E01               	addlw	1
 23763  0134  074A               	addwf	picc_select@validBits,w
 23764  0135  00CC               	movwf	??_picc_select+1
 23765  0136  084C               	movf	??_picc_select+1,w
 23766  0137  0021               	movlb	1	; select bank1
 23767  0138  00ED               	movwf	picc_select@currentLevelKnownBits^(0+128)
 23768  0139                     l15751:	
 23769                           
 23770                           ;mfrc522_picc.c: 168: }
 23771                           ;mfrc522_picc.c: 169: index = 2;
 23772  0139  3002               	movlw	2
 23773  013A  0020               	movlb	0	; select bank0
 23774  013B  00CB               	movwf	??_picc_select
 23775  013C  084B               	movf	??_picc_select,w
 23776  013D  0021               	movlb	1	; select bank1
 23777  013E  00EC               	movwf	picc_select@index^(0+128)
 23778                           
 23779                           ;mfrc522_picc.c: 170: if (useCascadeTag) {
 23780  013F  0862               	movf	picc_select@useCascadeTag^(0+128),w
 23781  0140  1903               	btfsc	3,2
 23782  0141  2952               	goto	l15759
 23783                           
 23784                           ;mfrc522_picc.c: 171: buffer[index++] = PICC_CMD_CT;
 23785  0142  3088               	movlw	136
 23786  0143  0020               	movlb	0	; select bank0
 23787  0144  00CB               	movwf	??_picc_select
 23788  0145  0021               	movlb	1	; select bank1
 23789  0146  086C               	movf	picc_select@index^(0+128),w
 23790  0147  3ED8               	addlw	(low (picc_select@buffer| 0))& (0+255)
 23791  0148  0086               	movwf	6
 23792  0149  0187               	clrf	7
 23793  014A  0020               	movlb	0	; select bank0
 23794  014B  084B               	movf	??_picc_select,w
 23795  014C  0081               	movwf	1
 23796  014D  3001               	movlw	1
 23797  014E  00CB               	movwf	??_picc_select
 23798  014F  084B               	movf	??_picc_select,w
 23799  0150  0021               	movlb	1	; select bank1
 23800  0151  07EC               	addwf	picc_select@index^(0+128),f
 23801  0152                     l15759:	
 23802                           
 23803                           ;mfrc522_picc.c: 172: }
 23804                           ;mfrc522_picc.c: 173: uint8_t bytesToCopy;
 23805                           ;mfrc522_picc.c: 174: bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits %
      +                           8 ? 1 : 0);
 23806  0152  3008               	movlw	8
 23807  0153  00F3               	movwf	___awdiv@divisor
 23808  0154  3000               	movlw	0
 23809  0155  00F4               	movwf	___awdiv@divisor+1
 23810  0156  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 23811  0157  0020               	movlb	0	; select bank0
 23812  0158  00CB               	movwf	??_picc_select
 23813  0159  01CC               	clrf	??_picc_select+1
 23814  015A  084B               	movf	??_picc_select,w
 23815  015B  00F5               	movwf	___awdiv@dividend
 23816  015C  084C               	movf	??_picc_select+1,w
 23817  015D  00F6               	movwf	___awdiv@dividend+1
 23818  015E  31AA  2216  3180   	fcall	___awdiv
 23819  0161  0873               	movf	?___awdiv,w
 23820  0162  0020               	movlb	0	; select bank0
 23821  0163  00CD               	movwf	??_picc_select+2
 23822  0164  0874               	movf	?___awdiv+1,w
 23823  0165  00CE               	movwf	??_picc_select+3
 23824  0166  0021               	movlb	1	; select bank1
 23825  0167  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 23826  0168  3907               	andlw	7
 23827  0169  1903               	btfsc	3,2
 23828  016A  296D               	goto	u14530
 23829  016B  3001               	movlw	1
 23830  016C  296E               	goto	u14540
 23831  016D                     u14530:	
 23832  016D  3000               	movlw	0
 23833  016E                     u14540:	
 23834  016E  0020               	movlb	0	; select bank0
 23835  016F  074D               	addwf	??_picc_select+2,w
 23836  0170  00CF               	movwf	??_picc_select+4
 23837  0171  084F               	movf	??_picc_select+4,w
 23838  0172  0021               	movlb	1	; select bank1
 23839  0173  00E5               	movwf	picc_select@bytesToCopy^(0+128)
 23840                           
 23841                           ;mfrc522_picc.c: 175: if (bytesToCopy) {
 23842  0174  0865               	movf	picc_select@bytesToCopy^(0+128),w
 23843  0175  1903               	btfsc	3,2
 23844  0176  29B5               	goto	l15781
 23845                           
 23846                           ;mfrc522_picc.c: 176: uint8_t maxBytes = useCascadeTag ? 3 : 4;
 23847  0177  0862               	movf	picc_select@useCascadeTag^(0+128),w
 23848  0178  1D03               	btfss	3,2
 23849  0179  297C               	goto	l15767
 23850  017A  3004               	movlw	4
 23851  017B  297D               	goto	L7
 23852  017C                     l15767:	
 23853  017C  3003               	movlw	3
 23854  017D                     L7:	
 23855  017D  00CA               	movwf	_picc_select$3251^(0+128)
 23856  017E  3000               	movlw	0
 23857  017F  00CB               	movwf	(_picc_select$3251^(0+128)+1)
 23858  0180  084A               	movf	_picc_select$3251^(0+128),w
 23859  0181  0020               	movlb	0	; select bank0
 23860  0182  00CB               	movwf	??_picc_select
 23861  0183  084B               	movf	??_picc_select,w
 23862  0184  0021               	movlb	1	; select bank1
 23863  0185  00D6               	movwf	picc_select@maxBytes^(0+128)
 23864                           
 23865                           ;mfrc522_picc.c: 177: if (bytesToCopy > maxBytes) {
 23866  0186  0865               	movf	picc_select@bytesToCopy^(0+128),w
 23867  0187  0256               	subwf	picc_select@maxBytes^(0+128),w
 23868  0188  1803               	skipnc
 23869  0189  2990               	goto	l15771
 23870                           
 23871                           ;mfrc522_picc.c: 178: bytesToCopy = maxBytes;
 23872  018A  0856               	movf	picc_select@maxBytes^(0+128),w
 23873  018B  0020               	movlb	0	; select bank0
 23874  018C  00CB               	movwf	??_picc_select
 23875  018D  084B               	movf	??_picc_select,w
 23876  018E  0021               	movlb	1	; select bank1
 23877  018F  00E5               	movwf	picc_select@bytesToCopy^(0+128)
 23878  0190                     l15771:	
 23879                           
 23880                           ;mfrc522_picc.c: 179: }
 23881                           ;mfrc522_picc.c: 180: for (count = 0; count < bytesToCopy; count++) {
 23882  0190  01EB               	clrf	picc_select@count^(0+128)
 23883  0191                     l15779:	
 23884  0191  0865               	movf	picc_select@bytesToCopy^(0+128),w
 23885  0192  026B               	subwf	picc_select@count^(0+128),w
 23886  0193  1803               	btfsc	3,0
 23887  0194  29B5               	goto	l15781
 23888                           
 23889                           ;mfrc522_picc.c: 181: buffer[index++] = uid->uidByte[uidIndex + count];
 23890  0195  0864               	movf	picc_select@uidIndex^(0+128),w
 23891  0196  076B               	addwf	picc_select@count^(0+128),w
 23892  0197  3E01               	addlw	1
 23893  0198  0768               	addwf	picc_select@uid^(0+128),w
 23894  0199  0020               	movlb	0	; select bank0
 23895  019A  00CB               	movwf	??_picc_select
 23896  019B  084B               	movf	??_picc_select,w
 23897  019C  0086               	movwf	6
 23898  019D  3001               	movlw	1	; select bank2/3
 23899  019E  0087               	movwf	7
 23900  019F  0801               	movf	1,w
 23901  01A0  00CC               	movwf	??_picc_select+1
 23902  01A1  0021               	movlb	1	; select bank1
 23903  01A2  086C               	movf	picc_select@index^(0+128),w
 23904  01A3  3ED8               	addlw	(low (picc_select@buffer| 0))& (0+255)
 23905  01A4  0086               	movwf	6
 23906  01A5  0187               	clrf	7
 23907  01A6  0020               	movlb	0	; select bank0
 23908  01A7  084C               	movf	??_picc_select+1,w
 23909  01A8  0081               	movwf	1
 23910  01A9  3001               	movlw	1
 23911  01AA  00CB               	movwf	??_picc_select
 23912  01AB  084B               	movf	??_picc_select,w
 23913  01AC  0021               	movlb	1	; select bank1
 23914  01AD  07EC               	addwf	picc_select@index^(0+128),f
 23915  01AE  3001               	movlw	1
 23916  01AF  0020               	movlb	0	; select bank0
 23917  01B0  00CB               	movwf	??_picc_select
 23918  01B1  084B               	movf	??_picc_select,w
 23919  01B2  0021               	movlb	1	; select bank1
 23920  01B3  07EB               	addwf	picc_select@count^(0+128),f
 23921  01B4  2991               	goto	l15779
 23922  01B5                     l15781:	
 23923                           
 23924                           ;mfrc522_picc.c: 182: }
 23925                           ;mfrc522_picc.c: 183: }
 23926                           ;mfrc522_picc.c: 184: if (useCascadeTag) {
 23927  01B5  0862               	movf	picc_select@useCascadeTag^(0+128),w
 23928  01B6  1903               	btfsc	3,2
 23929  01B7  29BE               	goto	l15785
 23930                           
 23931                           ;mfrc522_picc.c: 185: currentLevelKnownBits += 8;
 23932  01B8  3008               	movlw	8
 23933  01B9  0020               	movlb	0	; select bank0
 23934  01BA  00CB               	movwf	??_picc_select
 23935  01BB  084B               	movf	??_picc_select,w
 23936  01BC  0021               	movlb	1	; select bank1
 23937  01BD  07ED               	addwf	picc_select@currentLevelKnownBits^(0+128),f
 23938  01BE                     l15785:	
 23939                           
 23940                           ;mfrc522_picc.c: 186: }
 23941                           ;mfrc522_picc.c: 188: selectDone = 0;
 23942  01BE  01D1               	clrf	picc_select@selectDone^(0+128)
 23943  01BF                     l15871:	
 23944                           ;mfrc522_picc.c: 189: while (!selectDone) {
 23945                           
 23946  01BF  0021               	movlb	1	; select bank1
 23947  01C0  0851               	movf	picc_select@selectDone^(0+128),w
 23948  01C1  1D03               	btfss	3,2
 23949  01C2  2B13               	goto	l15873
 23950                           
 23951                           ;mfrc522_picc.c: 190: if (currentLevelKnownBits >= 32) {
 23952  01C3  3020               	movlw	32
 23953  01C4  026D               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 23954  01C5  1C03               	skipc
 23955  01C6  29FF               	goto	l15809
 23956                           
 23957                           ;mfrc522_picc.c: 192: buffer[1] = 0x70;
 23958  01C7  3070               	movlw	112
 23959  01C8  0020               	movlb	0	; select bank0
 23960  01C9  00CB               	movwf	??_picc_select
 23961  01CA  084B               	movf	??_picc_select,w
 23962  01CB  0021               	movlb	1	; select bank1
 23963  01CC  00D9               	movwf	(picc_select@buffer^(0+128)+1)
 23964                           
 23965                           ;mfrc522_picc.c: 193: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 23966  01CD  085A               	movf	(picc_select@buffer^(0+128)+2),w
 23967  01CE  065B               	xorwf	(picc_select@buffer^(0+128)+3),w
 23968  01CF  065C               	xorwf	(picc_select@buffer^(0+128)+4),w
 23969  01D0  065D               	xorwf	(picc_select@buffer^(0+128)+5),w
 23970  01D1  0020               	movlb	0	; select bank0
 23971  01D2  00CB               	movwf	??_picc_select
 23972  01D3  084B               	movf	??_picc_select,w
 23973  01D4  0021               	movlb	1	; select bank1
 23974  01D5  00DE               	movwf	(picc_select@buffer^(0+128)+6)
 23975                           
 23976                           ;mfrc522_picc.c: 194: result = mfrc522_hal_calculate_crc(buffer, 7, &buffer[7]);
 23977  01D6  30D8               	movlw	low picc_select@buffer
 23978  01D7  0020               	movlb	0	; select bank0
 23979  01D8  00A6               	movwf	mfrc522_hal_calculate_crc@data
 23980  01D9  3000               	movlw	high picc_select@buffer
 23981  01DA  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 23982  01DB  3007               	movlw	7
 23983  01DC  00CB               	movwf	??_picc_select
 23984  01DD  084B               	movf	??_picc_select,w
 23985  01DE  00A8               	movwf	mfrc522_hal_calculate_crc@length
 23986  01DF  30DF               	movlw	low (picc_select@buffer+7)
 23987  01E0  00A9               	movwf	mfrc522_hal_calculate_crc@result
 23988  01E1  3000               	movlw	high (picc_select@buffer+7)
 23989  01E2  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 23990  01E3  31AD  25B0  3180   	fcall	_mfrc522_hal_calculate_crc
 23991  01E6  0020               	movlb	0	; select bank0
 23992  01E7  00CC               	movwf	??_picc_select+1
 23993  01E8  084C               	movf	??_picc_select+1,w
 23994  01E9  0021               	movlb	1	; select bank1
 23995  01EA  00EA               	movwf	picc_select@result^(0+128)
 23996                           
 23997                           ;mfrc522_picc.c: 195: if (result != STATUS_OK) {
 23998  01EB  086A               	movf	picc_select@result^(0+128),w
 23999  01EC  1903               	btfsc	3,2
 24000  01ED  29F0               	goto	l15801
 24001                           
 24002                           ;mfrc522_picc.c: 196: return result;
 24003  01EE  086A               	movf	picc_select@result^(0+128),w
 24004  01EF  0008               	return
 24005  01F0                     l15801:	
 24006                           
 24007                           ;mfrc522_picc.c: 197: }
 24008                           ;mfrc522_picc.c: 198: txLastBits = 0;
 24009  01F0  01E9               	clrf	picc_select@txLastBits^(0+128)
 24010                           
 24011                           ;mfrc522_picc.c: 199: bufferUsed = 9;
 24012  01F1  3009               	movlw	9
 24013  01F2  0020               	movlb	0	; select bank0
 24014  01F3  00CB               	movwf	??_picc_select
 24015  01F4  084B               	movf	??_picc_select,w
 24016  01F5  0021               	movlb	1	; select bank1
 24017  01F6  00D2               	movwf	picc_select@bufferUsed^(0+128)
 24018                           
 24019                           ;mfrc522_picc.c: 201: responseBuffer = &buffer[6];
 24020  01F7  30DE               	movlw	(low ((picc_select@buffer| 0+6)))& (0+255)
 24021  01F8  0020               	movlb	0	; select bank0
 24022  01F9  00CB               	movwf	??_picc_select
 24023  01FA  084B               	movf	??_picc_select,w
 24024  01FB  0021               	movlb	1	; select bank1
 24025  01FC  00E7               	movwf	picc_select@responseBuffer^(0+128)
 24026                           
 24027                           ;mfrc522_picc.c: 202: responseLength = 3;
 24028  01FD  3003               	movlw	3
 24029  01FE  2A48               	goto	L8
 24030  01FF                     l15809:	
 24031                           ;mfrc522_picc.c: 203: } else {
 24032                           
 24033                           
 24034                           ;mfrc522_picc.c: 204: txLastBits = currentLevelKnownBits % 8;
 24035  01FF  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24036  0200  3907               	andlw	7
 24037  0201  0020               	movlb	0	; select bank0
 24038  0202  00CB               	movwf	??_picc_select
 24039  0203  084B               	movf	??_picc_select,w
 24040  0204  0021               	movlb	1	; select bank1
 24041  0205  00E9               	movwf	picc_select@txLastBits^(0+128)
 24042                           
 24043                           ;mfrc522_picc.c: 205: count = currentLevelKnownBits / 8;
 24044  0206  3008               	movlw	8
 24045  0207  00F3               	movwf	___awdiv@divisor
 24046  0208  3000               	movlw	0
 24047  0209  00F4               	movwf	___awdiv@divisor+1
 24048  020A  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24049  020B  0020               	movlb	0	; select bank0
 24050  020C  00CB               	movwf	??_picc_select
 24051  020D  01CC               	clrf	??_picc_select+1
 24052  020E  084B               	movf	??_picc_select,w
 24053  020F  00F5               	movwf	___awdiv@dividend
 24054  0210  084C               	movf	??_picc_select+1,w
 24055  0211  00F6               	movwf	___awdiv@dividend+1
 24056  0212  31AA  2216  3180   	fcall	___awdiv
 24057  0215  0873               	movf	?___awdiv,w
 24058  0216  0020               	movlb	0	; select bank0
 24059  0217  00CD               	movwf	??_picc_select+2
 24060  0218  084D               	movf	??_picc_select+2,w
 24061  0219  0021               	movlb	1	; select bank1
 24062  021A  00EB               	movwf	picc_select@count^(0+128)
 24063                           
 24064                           ;mfrc522_picc.c: 206: index = 2 + count;
 24065  021B  086B               	movf	picc_select@count^(0+128),w
 24066  021C  3E02               	addlw	2
 24067  021D  0020               	movlb	0	; select bank0
 24068  021E  00CB               	movwf	??_picc_select
 24069  021F  084B               	movf	??_picc_select,w
 24070  0220  0021               	movlb	1	; select bank1
 24071  0221  00EC               	movwf	picc_select@index^(0+128)
 24072                           
 24073                           ;mfrc522_picc.c: 207: buffer[1] = (index << 4) + txLastBits;
 24074  0222  086C               	movf	picc_select@index^(0+128),w
 24075  0223  0020               	movlb	0	; select bank0
 24076  0224  00CB               	movwf	??_picc_select
 24077  0225  3003               	movlw	3
 24078  0226                     u14625:	
 24079  0226  35CB               	lslf	??_picc_select,f
 24080  0227  3EFF               	addlw	-1
 24081  0228  1D03               	skipz
 24082  0229  2A26               	goto	u14625
 24083  022A  354B               	lslf	??_picc_select,w
 24084  022B  0021               	movlb	1	; select bank1
 24085  022C  0769               	addwf	picc_select@txLastBits^(0+128),w
 24086  022D  0020               	movlb	0	; select bank0
 24087  022E  00CC               	movwf	??_picc_select+1
 24088  022F  084C               	movf	??_picc_select+1,w
 24089  0230  0021               	movlb	1	; select bank1
 24090  0231  00D9               	movwf	(picc_select@buffer^(0+128)+1)
 24091                           
 24092                           ;mfrc522_picc.c: 208: bufferUsed = index + (txLastBits ? 1 : 0);
 24093  0232  0869               	movf	picc_select@txLastBits^(0+128),w
 24094  0233  1903               	btfsc	3,2
 24095  0234  2A37               	goto	u14630
 24096  0235  3001               	movlw	1
 24097  0236  2A38               	goto	u14640
 24098  0237                     u14630:	
 24099  0237  3000               	movlw	0
 24100  0238                     u14640:	
 24101  0238  076C               	addwf	picc_select@index^(0+128),w
 24102  0239  0020               	movlb	0	; select bank0
 24103  023A  00CB               	movwf	??_picc_select
 24104  023B  084B               	movf	??_picc_select,w
 24105  023C  0021               	movlb	1	; select bank1
 24106  023D  00D2               	movwf	picc_select@bufferUsed^(0+128)
 24107                           
 24108                           ;mfrc522_picc.c: 209: responseBuffer = &buffer[index];
 24109  023E  086C               	movf	picc_select@index^(0+128),w
 24110  023F  3ED8               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24111  0240  0020               	movlb	0	; select bank0
 24112  0241  00CB               	movwf	??_picc_select
 24113  0242  084B               	movf	??_picc_select,w
 24114  0243  0021               	movlb	1	; select bank1
 24115  0244  00E7               	movwf	picc_select@responseBuffer^(0+128)
 24116                           
 24117                           ;mfrc522_picc.c: 210: responseLength = sizeof (buffer) - index;
 24118  0245  036C               	decf	picc_select@index^(0+128),w
 24119  0246  3AFF               	xorlw	255
 24120  0247  3E09               	addlw	9
 24121  0248                     L8:	
 24122  0248  0020               	movlb	0	; select bank0
 24123  0249  00CB               	movwf	??_picc_select
 24124  024A  084B               	movf	??_picc_select,w
 24125  024B  0021               	movlb	1	; select bank1
 24126  024C  00E6               	movwf	picc_select@responseLength^(0+128)
 24127                           
 24128                           ;mfrc522_picc.c: 211: }
 24129                           ;mfrc522_picc.c: 213: rxAlign = txLastBits;
 24130  024D  0869               	movf	picc_select@txLastBits^(0+128),w
 24131  024E  0020               	movlb	0	; select bank0
 24132  024F  00CB               	movwf	??_picc_select
 24133  0250  084B               	movf	??_picc_select,w
 24134  0251  0021               	movlb	1	; select bank1
 24135  0252  00D5               	movwf	picc_select@rxAlign^(0+128)
 24136                           
 24137                           ;mfrc522_picc.c: 214: mfrc522_bal_write_reg(BitFramingReg, (rxAlign << 4) + txLastBits);
 24138  0253  0855               	movf	picc_select@rxAlign^(0+128),w
 24139  0254  0020               	movlb	0	; select bank0
 24140  0255  00CB               	movwf	??_picc_select
 24141  0256  3003               	movlw	3
 24142  0257                     u14655:	
 24143  0257  35CB               	lslf	??_picc_select,f
 24144  0258  3EFF               	addlw	-1
 24145  0259  1D03               	skipz
 24146  025A  2A57               	goto	u14655
 24147  025B  354B               	lslf	??_picc_select,w
 24148  025C  0021               	movlb	1	; select bank1
 24149  025D  0769               	addwf	picc_select@txLastBits^(0+128),w
 24150  025E  0020               	movlb	0	; select bank0
 24151  025F  00CC               	movwf	??_picc_select+1
 24152  0260  084C               	movf	??_picc_select+1,w
 24153  0261  00F7               	movwf	mfrc522_bal_write_reg@x
 24154  0262  300D               	movlw	13
 24155  0263  31BB  23F2  3180   	fcall	_mfrc522_bal_write_reg
 24156                           
 24157                           ;mfrc522_picc.c: 217: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, bufferUsed
      +                          , responseBuffer, &responseLength, &txLastBits, rxAlign, 0);
 24158  0266  3030               	movlw	48
 24159  0267  0020               	movlb	0	; select bank0
 24160  0268  00CB               	movwf	??_picc_select
 24161  0269  084B               	movf	??_picc_select,w
 24162  026A  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 24163  026B  30D8               	movlw	low picc_select@buffer
 24164  026C  00B2               	movwf	pcd_comm_with_picc@sbuf
 24165  026D  3000               	movlw	high picc_select@buffer
 24166  026E  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 24167  026F  0021               	movlb	1	; select bank1
 24168  0270  0852               	movf	picc_select@bufferUsed^(0+128),w
 24169  0271  0020               	movlb	0	; select bank0
 24170  0272  00CC               	movwf	??_picc_select+1
 24171  0273  084C               	movf	??_picc_select+1,w
 24172  0274  00B4               	movwf	pcd_comm_with_picc@slen
 24173  0275  0021               	movlb	1	; select bank1
 24174  0276  0867               	movf	picc_select@responseBuffer^(0+128),w
 24175  0277  0020               	movlb	0	; select bank0
 24176  0278  00B5               	movwf	pcd_comm_with_picc@rbuf
 24177  0279  3000               	movlw	0
 24178  027A  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 24179  027B  30E6               	movlw	(low (picc_select@responseLength| 0))& (0+255)
 24180  027C  00CD               	movwf	??_picc_select+2
 24181  027D  084D               	movf	??_picc_select+2,w
 24182  027E  00B7               	movwf	pcd_comm_with_picc@rlen
 24183  027F  30E9               	movlw	(low (picc_select@txLastBits| 0))& (0+255)
 24184  0280  00CE               	movwf	??_picc_select+3
 24185  0281  084E               	movf	??_picc_select+3,w
 24186  0282  00B8               	movwf	pcd_comm_with_picc@validBits
 24187  0283  0021               	movlb	1	; select bank1
 24188  0284  0855               	movf	picc_select@rxAlign^(0+128),w
 24189  0285  0020               	movlb	0	; select bank0
 24190  0286  00CF               	movwf	??_picc_select+4
 24191  0287  084F               	movf	??_picc_select+4,w
 24192  0288  00B9               	movwf	pcd_comm_with_picc@rxAlign
 24193  0289  01BA               	clrf	pcd_comm_with_picc@checkCRC
 24194  028A  300C               	movlw	12
 24195  028B  3186  26A4  3180   	fcall	_pcd_comm_with_picc
 24196  028E  0020               	movlb	0	; select bank0
 24197  028F  00D0               	movwf	??_picc_select+5
 24198  0290  0850               	movf	??_picc_select+5,w
 24199  0291  0021               	movlb	1	; select bank1
 24200  0292  00EA               	movwf	picc_select@result^(0+128)
 24201                           
 24202                           ;mfrc522_picc.c: 218: if (result == STATUS_COLLISION) {
 24203  0293  3002               	movlw	2
 24204  0294  066A               	xorwf	picc_select@result^(0+128),w
 24205  0295  1D03               	btfss	3,2
 24206  0296  2AFF               	goto	l15857
 24207                           
 24208                           ;mfrc522_picc.c: 219: uint8_t valueOfCollReg = mfrc522_bal_read_reg(CollReg);
 24209  0297  300E               	movlw	14
 24210  0298  31BD  2585  3180   	fcall	_mfrc522_bal_read_reg
 24211  029B  0020               	movlb	0	; select bank0
 24212  029C  00CB               	movwf	??_picc_select
 24213  029D  084B               	movf	??_picc_select,w
 24214  029E  0021               	movlb	1	; select bank1
 24215  029F  00D7               	movwf	picc_select@valueOfCollReg^(0+128)
 24216                           
 24217                           ;mfrc522_picc.c: 220: if (valueOfCollReg & 0x20) {
 24218  02A0  1ED7               	btfss	picc_select@valueOfCollReg^(0+128),5
 24219  02A1  2AA4               	goto	l15839
 24220                           
 24221                           ;mfrc522_picc.c: 221: return STATUS_COLLISION;
 24222  02A2  3002               	movlw	2
 24223  02A3  0008               	return
 24224  02A4                     l15839:	
 24225                           
 24226                           ;mfrc522_picc.c: 222: }
 24227                           ;mfrc522_picc.c: 223: uint8_t collisionPos = valueOfCollReg & 0x1F;
 24228  02A4  0857               	movf	picc_select@valueOfCollReg^(0+128),w
 24229  02A5  391F               	andlw	31
 24230  02A6  0020               	movlb	0	; select bank0
 24231  02A7  00CB               	movwf	??_picc_select
 24232  02A8  084B               	movf	??_picc_select,w
 24233  02A9  0021               	movlb	1	; select bank1
 24234  02AA  00E1               	movwf	picc_select@collisionPos^(0+128)
 24235                           
 24236                           ;mfrc522_picc.c: 224: if (collisionPos == 0) {
 24237  02AB  0861               	movf	picc_select@collisionPos^(0+128),w
 24238  02AC  1D03               	btfss	3,2
 24239  02AD  2AB4               	goto	l2332
 24240                           
 24241                           ;mfrc522_picc.c: 225: collisionPos = 32;
 24242  02AE  3020               	movlw	32
 24243  02AF  0020               	movlb	0	; select bank0
 24244  02B0  00CB               	movwf	??_picc_select
 24245  02B1  084B               	movf	??_picc_select,w
 24246  02B2  0021               	movlb	1	; select bank1
 24247  02B3  00E1               	movwf	picc_select@collisionPos^(0+128)
 24248  02B4                     l2332:	
 24249                           
 24250                           ;mfrc522_picc.c: 226: }
 24251                           ;mfrc522_picc.c: 227: if (collisionPos <= currentLevelKnownBits) {
 24252  02B4  0861               	movf	picc_select@collisionPos^(0+128),w
 24253  02B5  026D               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 24254  02B6  1C03               	skipc
 24255  02B7  2ABA               	goto	l15849
 24256                           
 24257                           ;mfrc522_picc.c: 228: return STATUS_INTERNAL_ERROR;
 24258  02B8  3005               	movlw	5
 24259  02B9  0008               	return
 24260  02BA                     l15849:	
 24261                           
 24262                           ;mfrc522_picc.c: 229: }
 24263                           ;mfrc522_picc.c: 230: currentLevelKnownBits = collisionPos;
 24264  02BA  0861               	movf	picc_select@collisionPos^(0+128),w
 24265  02BB  0020               	movlb	0	; select bank0
 24266  02BC  00CB               	movwf	??_picc_select
 24267  02BD  084B               	movf	??_picc_select,w
 24268  02BE  0021               	movlb	1	; select bank1
 24269  02BF  00ED               	movwf	picc_select@currentLevelKnownBits^(0+128)
 24270                           
 24271                           ;mfrc522_picc.c: 231: count = (currentLevelKnownBits - 1) % 8;
 24272  02C0  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24273  02C1  3EFF               	addlw	255
 24274  02C2  3907               	andlw	7
 24275  02C3  0020               	movlb	0	; select bank0
 24276  02C4  00CB               	movwf	??_picc_select
 24277  02C5  084B               	movf	??_picc_select,w
 24278  02C6  0021               	movlb	1	; select bank1
 24279  02C7  00EB               	movwf	picc_select@count^(0+128)
 24280                           
 24281                           ;mfrc522_picc.c: 232: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
 24282  02C8  3008               	movlw	8
 24283  02C9  00F3               	movwf	___awdiv@divisor
 24284  02CA  3000               	movlw	0
 24285  02CB  00F4               	movwf	___awdiv@divisor+1
 24286  02CC  086D               	movf	picc_select@currentLevelKnownBits^(0+128),w
 24287  02CD  0020               	movlb	0	; select bank0
 24288  02CE  00CB               	movwf	??_picc_select
 24289  02CF  01CC               	clrf	??_picc_select+1
 24290  02D0  084B               	movf	??_picc_select,w
 24291  02D1  00F5               	movwf	___awdiv@dividend
 24292  02D2  084C               	movf	??_picc_select+1,w
 24293  02D3  00F6               	movwf	___awdiv@dividend+1
 24294  02D4  31AA  2216  3180   	fcall	___awdiv
 24295  02D7  0873               	movf	?___awdiv,w
 24296  02D8  0020               	movlb	0	; select bank0
 24297  02D9  00CD               	movwf	??_picc_select+2
 24298  02DA  0874               	movf	?___awdiv+1,w
 24299  02DB  00CE               	movwf	??_picc_select+3
 24300  02DC  0021               	movlb	1	; select bank1
 24301  02DD  086B               	movf	picc_select@count^(0+128),w
 24302  02DE  1903               	btfsc	3,2
 24303  02DF  2AE2               	goto	u14700
 24304  02E0  3001               	movlw	1
 24305  02E1  2AE3               	goto	u14710
 24306  02E2                     u14700:	
 24307  02E2  3000               	movlw	0
 24308  02E3                     u14710:	
 24309  02E3  0020               	movlb	0	; select bank0
 24310  02E4  074D               	addwf	??_picc_select+2,w
 24311  02E5  3E01               	addlw	1
 24312  02E6  00CF               	movwf	??_picc_select+4
 24313  02E7  084F               	movf	??_picc_select+4,w
 24314  02E8  0021               	movlb	1	; select bank1
 24315  02E9  00EC               	movwf	picc_select@index^(0+128)
 24316                           
 24317                           ;mfrc522_picc.c: 233: buffer[index] |= (1 << count);
 24318  02EA  3001               	movlw	1
 24319  02EB  0020               	movlb	0	; select bank0
 24320  02EC  00CB               	movwf	??_picc_select
 24321  02ED  0021               	movlb	1	; select bank1
 24322  02EE  0A6B               	incf	picc_select@count^(0+128),w
 24323  02EF  0020               	movlb	0	; select bank0
 24324  02F0  2AF2               	goto	u14724
 24325  02F1                     u14725:	
 24326  02F1  35CB               	lslf	??_picc_select,f
 24327  02F2                     u14724:	
 24328  02F2  0B89               	decfsz	9,f
 24329  02F3  2AF1               	goto	u14725
 24330  02F4  084B               	movf	??_picc_select,w
 24331  02F5  00CC               	movwf	??_picc_select+1
 24332  02F6  0021               	movlb	1	; select bank1
 24333  02F7  086C               	movf	picc_select@index^(0+128),w
 24334  02F8  3ED8               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24335  02F9  0086               	movwf	6
 24336  02FA  0187               	clrf	7
 24337  02FB  0020               	movlb	0	; select bank0
 24338  02FC  084C               	movf	??_picc_select+1,w
 24339  02FD  0481               	iorwf	1,f
 24340                           
 24341                           ;mfrc522_picc.c: 234: } else if (result != STATUS_OK) {
 24342  02FE  29BF               	goto	l15871
 24343  02FF                     l15857:	
 24344  02FF  0021               	movlb	1	; select bank1
 24345  0300  086A               	movf	picc_select@result^(0+128),w
 24346  0301  1903               	btfsc	3,2
 24347  0302  2B05               	goto	l15865
 24348                           
 24349                           ;mfrc522_picc.c: 235: return result;
 24350  0303  086A               	movf	picc_select@result^(0+128),w
 24351  0304  0008               	return
 24352  0305                     l15865:	
 24353                           ;mfrc522_picc.c: 236: } else {
 24354                           
 24355                           
 24356                           ;mfrc522_picc.c: 237: if (currentLevelKnownBits >= 32) {
 24357  0305  3020               	movlw	32
 24358  0306  026D               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 24359  0307  1C03               	skipc
 24360  0308  2B0C               	goto	l15869
 24361                           
 24362                           ;mfrc522_picc.c: 238: selectDone = 1;
 24363  0309  01D1               	clrf	picc_select@selectDone^(0+128)
 24364  030A  0AD1               	incf	picc_select@selectDone^(0+128),f
 24365                           
 24366                           ;mfrc522_picc.c: 239: } else {
 24367  030B  29BF               	goto	l15871
 24368  030C                     l15869:	
 24369                           
 24370                           ;mfrc522_picc.c: 240: currentLevelKnownBits = 32;
 24371  030C  3020               	movlw	32
 24372  030D  0020               	movlb	0	; select bank0
 24373  030E  00CB               	movwf	??_picc_select
 24374  030F  084B               	movf	??_picc_select,w
 24375  0310  0021               	movlb	1	; select bank1
 24376  0311  00ED               	movwf	picc_select@currentLevelKnownBits^(0+128)
 24377  0312  29BF               	goto	l15871
 24378  0313                     l15873:	
 24379                           
 24380                           ;mfrc522_picc.c: 241: }
 24381                           ;mfrc522_picc.c: 242: }
 24382                           ;mfrc522_picc.c: 243: }
 24383                           ;mfrc522_picc.c: 244: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
 24384  0313  3088               	movlw	136
 24385  0314  065A               	xorwf	(picc_select@buffer^(0+128)+2),w
 24386  0315  1903               	btfsc	3,2
 24387  0316  2B19               	goto	l15877
 24388  0317  3002               	movlw	2
 24389  0318  2B1A               	goto	L9
 24390  0319                     l15877:	
 24391  0319  3003               	movlw	3
 24392  031A                     L9:	
 24393  031A  00CC               	movwf	_picc_select$3254^(0+128)
 24394  031B  3000               	movlw	0
 24395  031C  00CD               	movwf	(_picc_select$3254^(0+128)+1)
 24396  031D  084C               	movf	_picc_select$3254^(0+128),w
 24397  031E  0020               	movlb	0	; select bank0
 24398  031F  00CB               	movwf	??_picc_select
 24399  0320  084B               	movf	??_picc_select,w
 24400  0321  0021               	movlb	1	; select bank1
 24401  0322  00EC               	movwf	picc_select@index^(0+128)
 24402                           
 24403                           ;mfrc522_picc.c: 245: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 24404  0323  3088               	movlw	136
 24405  0324  065A               	xorwf	(picc_select@buffer^(0+128)+2),w
 24406  0325  1903               	btfsc	3,2
 24407  0326  2B29               	goto	l15883
 24408  0327  3004               	movlw	4
 24409  0328  2B2A               	goto	L10
 24410  0329                     l15883:	
 24411  0329  3003               	movlw	3
 24412  032A                     L10:	
 24413  032A  00CE               	movwf	_picc_select$3255^(0+128)
 24414  032B  3000               	movlw	0
 24415  032C  00CF               	movwf	(_picc_select$3255^(0+128)+1)
 24416  032D  084E               	movf	_picc_select$3255^(0+128),w
 24417  032E  0020               	movlb	0	; select bank0
 24418  032F  00CB               	movwf	??_picc_select
 24419  0330  084B               	movf	??_picc_select,w
 24420  0331  0021               	movlb	1	; select bank1
 24421  0332  00E5               	movwf	picc_select@bytesToCopy^(0+128)
 24422                           
 24423                           ;mfrc522_picc.c: 246: for (count = 0; count < bytesToCopy; count++) {
 24424  0333  01EB               	clrf	picc_select@count^(0+128)
 24425  0334                     l15893:	
 24426  0334  0865               	movf	picc_select@bytesToCopy^(0+128),w
 24427  0335  026B               	subwf	picc_select@count^(0+128),w
 24428  0336  1803               	btfsc	3,0
 24429  0337  2B58               	goto	l15895
 24430                           
 24431                           ;mfrc522_picc.c: 247: uid->uidByte[uidIndex + count] = buffer[index++];
 24432  0338  086C               	movf	picc_select@index^(0+128),w
 24433  0339  3ED8               	addlw	(low (picc_select@buffer| 0))& (0+255)
 24434  033A  0086               	movwf	6
 24435  033B  0187               	clrf	7
 24436  033C  0801               	movf	1,w
 24437  033D  0020               	movlb	0	; select bank0
 24438  033E  00CB               	movwf	??_picc_select
 24439  033F  0021               	movlb	1	; select bank1
 24440  0340  0864               	movf	picc_select@uidIndex^(0+128),w
 24441  0341  076B               	addwf	picc_select@count^(0+128),w
 24442  0342  3E01               	addlw	1
 24443  0343  0768               	addwf	picc_select@uid^(0+128),w
 24444  0344  0020               	movlb	0	; select bank0
 24445  0345  00CC               	movwf	??_picc_select+1
 24446  0346  084C               	movf	??_picc_select+1,w
 24447  0347  0086               	movwf	6
 24448  0348  3001               	movlw	1	; select bank2/3
 24449  0349  0087               	movwf	7
 24450  034A  084B               	movf	??_picc_select,w
 24451  034B  0081               	movwf	1
 24452  034C  3001               	movlw	1
 24453  034D  00CB               	movwf	??_picc_select
 24454  034E  084B               	movf	??_picc_select,w
 24455  034F  0021               	movlb	1	; select bank1
 24456  0350  07EC               	addwf	picc_select@index^(0+128),f
 24457  0351  3001               	movlw	1
 24458  0352  0020               	movlb	0	; select bank0
 24459  0353  00CB               	movwf	??_picc_select
 24460  0354  084B               	movf	??_picc_select,w
 24461  0355  0021               	movlb	1	; select bank1
 24462  0356  07EB               	addwf	picc_select@count^(0+128),f
 24463  0357  2B34               	goto	l15893
 24464  0358                     l15895:	
 24465                           
 24466                           ;mfrc522_picc.c: 248: }
 24467                           ;mfrc522_picc.c: 249: if (responseLength != 3 || txLastBits != 0) {
 24468  0358  3003               	movlw	3
 24469  0359  0666               	xorwf	picc_select@responseLength^(0+128),w
 24470  035A  1903               	btfsc	3,2
 24471  035B  0869               	movf	picc_select@txLastBits^(0+128),w
 24472  035C  1903               	btfsc	3,2
 24473  035D  2B60               	goto	l15903
 24474                           
 24475                           ;mfrc522_picc.c: 250: return STATUS_ERROR;
 24476  035E  3001               	movlw	1
 24477  035F  0008               	return
 24478  0360                     l15903:	
 24479                           
 24480                           ;mfrc522_picc.c: 251: }
 24481                           ;mfrc522_picc.c: 252: result = mfrc522_hal_calculate_crc(responseBuffer, 1, &buffer[2]);
 24482  0360  0867               	movf	picc_select@responseBuffer^(0+128),w
 24483  0361  0020               	movlb	0	; select bank0
 24484  0362  00A6               	movwf	mfrc522_hal_calculate_crc@data
 24485  0363  3000               	movlw	0
 24486  0364  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 24487  0365  01A8               	clrf	mfrc522_hal_calculate_crc@length
 24488  0366  0AA8               	incf	mfrc522_hal_calculate_crc@length,f
 24489  0367  30DA               	movlw	low (picc_select@buffer+2)
 24490  0368  00A9               	movwf	mfrc522_hal_calculate_crc@result
 24491  0369  3000               	movlw	high (picc_select@buffer+2)
 24492  036A  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 24493  036B  31AD  25B0  3180   	fcall	_mfrc522_hal_calculate_crc
 24494  036E  0020               	movlb	0	; select bank0
 24495  036F  00CB               	movwf	??_picc_select
 24496  0370  084B               	movf	??_picc_select,w
 24497  0371  0021               	movlb	1	; select bank1
 24498  0372  00EA               	movwf	picc_select@result^(0+128)
 24499                           
 24500                           ;mfrc522_picc.c: 253: if (result != STATUS_OK) {
 24501  0373  086A               	movf	picc_select@result^(0+128),w
 24502  0374  1903               	btfsc	3,2
 24503  0375  2B78               	goto	l15911
 24504                           
 24505                           ;mfrc522_picc.c: 254: return result;
 24506  0376  086A               	movf	picc_select@result^(0+128),w
 24507  0377  0008               	return
 24508  0378                     l15911:	
 24509                           
 24510                           ;mfrc522_picc.c: 255: }
 24511                           ;mfrc522_picc.c: 256: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuff
      +                          er[2])) {
 24512  0378  0A67               	incf	picc_select@responseBuffer^(0+128),w
 24513  0379  0086               	movwf	6
 24514  037A  0187               	clrf	7
 24515  037B  085A               	movf	(picc_select@buffer^(0+128)+2),w
 24516  037C  0601               	xorwf	1,w
 24517  037D  1D03               	skipz
 24518  037E  2B87               	goto	l15915
 24519  037F  0867               	movf	picc_select@responseBuffer^(0+128),w
 24520  0380  3E02               	addlw	2
 24521  0381  0086               	movwf	6
 24522  0382  0187               	clrf	7
 24523  0383  085B               	movf	(picc_select@buffer^(0+128)+3),w
 24524  0384  0601               	xorwf	1,w
 24525  0385  1903               	skipnz
 24526  0386  2B89               	goto	l15919
 24527  0387                     l15915:	
 24528                           
 24529                           ;mfrc522_picc.c: 257: return STATUS_CRC_WRONG;
 24530  0387  3007               	movlw	7
 24531  0388  0008               	return
 24532  0389                     l15919:	
 24533                           
 24534                           ;mfrc522_picc.c: 258: }
 24535                           ;mfrc522_picc.c: 259: if (responseBuffer[0] & 0x04) {
 24536  0389  0867               	movf	picc_select@responseBuffer^(0+128),w
 24537  038A  0086               	movwf	6
 24538  038B  0187               	clrf	7
 24539  038C  1D01               	btfss	1,2
 24540  038D  2B95               	goto	l2358
 24541                           
 24542                           ;mfrc522_picc.c: 260: cascadeLevel++;
 24543  038E  3001               	movlw	1
 24544  038F  0020               	movlb	0	; select bank0
 24545  0390  00CB               	movwf	??_picc_select
 24546  0391  084B               	movf	??_picc_select,w
 24547  0392  0021               	movlb	1	; select bank1
 24548  0393  07E3               	addwf	picc_select@cascadeLevel^(0+128),f
 24549                           
 24550                           ;mfrc522_picc.c: 261: } else {
 24551  0394  28B5               	goto	l15925
 24552  0395                     l2358:	
 24553                           
 24554                           ;mfrc522_picc.c: 262: uidComplete = 1;
 24555  0395  01D0               	clrf	picc_select@uidComplete^(0+128)
 24556  0396  0AD0               	incf	picc_select@uidComplete^(0+128),f
 24557                           
 24558                           ;mfrc522_picc.c: 264: uid->sak = responseBuffer[0];
 24559  0397  0867               	movf	picc_select@responseBuffer^(0+128),w
 24560  0398  0086               	movwf	6
 24561  0399  0187               	clrf	7
 24562  039A  0801               	movf	1,w
 24563  039B  0020               	movlb	0	; select bank0
 24564  039C  00CB               	movwf	??_picc_select
 24565  039D  0021               	movlb	1	; select bank1
 24566  039E  0868               	movf	picc_select@uid^(0+128),w
 24567  039F  3E0B               	addlw	11
 24568  03A0  0086               	movwf	6
 24569  03A1  3001               	movlw	1	; select bank2/3
 24570  03A2  0087               	movwf	7
 24571  03A3  0020               	movlb	0	; select bank0
 24572  03A4  084B               	movf	??_picc_select,w
 24573  03A5  0081               	movwf	1
 24574  03A6  28B5               	goto	l15925
 24575  03A7                     l15927:	
 24576                           
 24577                           ;mfrc522_picc.c: 266: }
 24578                           ;mfrc522_picc.c: 267: }
 24579                           ;mfrc522_picc.c: 268: uid->size = 3 * cascadeLevel + 1;
 24580  03A7  3003               	movlw	3
 24581  03A8  0020               	movlb	0	; select bank0
 24582  03A9  00CB               	movwf	??_picc_select
 24583  03AA  084B               	movf	??_picc_select,w
 24584  03AB  00A4               	movwf	___bmul@multiplicand
 24585  03AC  0021               	movlb	1	; select bank1
 24586  03AD  0863               	movf	picc_select@cascadeLevel^(0+128),w
 24587  03AE  31BC  245A         	fcall	___bmul
 24588  03B0  3E01               	addlw	1
 24589  03B1  0020               	movlb	0	; select bank0
 24590  03B2  00CC               	movwf	??_picc_select+1
 24591  03B3  0021               	movlb	1	; select bank1
 24592  03B4  0868               	movf	picc_select@uid^(0+128),w
 24593  03B5  0086               	movwf	6
 24594  03B6  3001               	movlw	1	; select bank2/3
 24595  03B7  0087               	movwf	7
 24596  03B8  0020               	movlb	0	; select bank0
 24597  03B9  084C               	movf	??_picc_select+1,w
 24598  03BA  0081               	movwf	1
 24599                           
 24600                           ;mfrc522_picc.c: 269: return STATUS_OK;
 24601  03BB  3000               	movlw	0
 24602  03BC  0008               	return
 24603  03BD                     __end_of_picc_select:	
 24604                           
 24605                           	psect	text75
 24606  3C5A                     __ptext75:	
 24607 ;; *************** function ___bmul *****************
 24608 ;; Defined at:
 24609 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul8.c"
 24610 ;; Parameters:    Size  Location     Type
 24611 ;;  multiplier      1    wreg     unsigned char 
 24612 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 24613 ;; Auto vars:     Size  Location     Type
 24614 ;;  multiplier      1    7[BANK0 ] unsigned char 
 24615 ;;  product         1    6[BANK0 ] unsigned char 
 24616 ;; Return value:  Size  Location     Type
 24617 ;;                  1    wreg      unsigned char 
 24618 ;; Registers used:
 24619 ;;		wreg, status,2, status,0
 24620 ;; Tracked objects:
 24621 ;;		On entry : 0/0
 24622 ;;		On exit  : 0/0
 24623 ;;		Unchanged: 0/0
 24624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24625 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24628 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24629 ;;Total ram usage:        4 bytes
 24630 ;; Hardware stack levels used:    1
 24631 ;; Hardware stack levels required when called:    2
 24632 ;; This function calls:
 24633 ;;		Nothing
 24634 ;; This function is called by:
 24635 ;;		_lcd_set_com_seg
 24636 ;;		_picc_select
 24637 ;; This function uses a non-reentrant model
 24638 ;;
 24639                           
 24640                           
 24641                           ;psect for function ___bmul
 24642  3C5A                     ___bmul:	
 24643                           
 24644                           ;incstack = 0
 24645                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 24646                           ;___bmul@multiplier stored from wreg
 24647  3C5A  0020               	movlb	0	; select bank0
 24648  3C5B  00A7               	movwf	___bmul@multiplier
 24649  3C5C  01A6               	clrf	___bmul@product
 24650  3C5D                     l12547:	
 24651  3C5D  1C27               	btfss	___bmul@multiplier,0
 24652  3C5E  2C63               	goto	l12551
 24653  3C5F  0824               	movf	___bmul@multiplicand,w
 24654  3C60  00A5               	movwf	??___bmul
 24655  3C61  0825               	movf	??___bmul,w
 24656  3C62  07A6               	addwf	___bmul@product,f
 24657  3C63                     l12551:	
 24658  3C63  1003               	clrc
 24659  3C64  0DA4               	rlf	___bmul@multiplicand,f
 24660  3C65  1003               	clrc
 24661  3C66  0CA7               	rrf	___bmul@multiplier,f
 24662  3C67  0827               	movf	___bmul@multiplier,w
 24663  3C68  1D03               	btfss	3,2
 24664  3C69  2C5D               	goto	l12547
 24665  3C6A  0826               	movf	___bmul@product,w
 24666  3C6B  0008               	return
 24667  3C6C                     __end_of___bmul:	
 24668                           
 24669                           	psect	text76
 24670  2A16                     __ptext76:	
 24671 ;; *************** function ___awdiv *****************
 24672 ;; Defined at:
 24673 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
 24674 ;; Parameters:    Size  Location     Type
 24675 ;;  divisor         2    3[COMMON] int 
 24676 ;;  dividend        2    5[COMMON] int 
 24677 ;; Auto vars:     Size  Location     Type
 24678 ;;  quotient        2    2[BANK0 ] int 
 24679 ;;  sign            1    1[BANK0 ] unsigned char 
 24680 ;;  counter         1    0[BANK0 ] unsigned char 
 24681 ;; Return value:  Size  Location     Type
 24682 ;;                  2    3[COMMON] int 
 24683 ;; Registers used:
 24684 ;;		wreg, status,2, status,0
 24685 ;; Tracked objects:
 24686 ;;		On entry : 0/0
 24687 ;;		On exit  : 0/0
 24688 ;;		Unchanged: 0/0
 24689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24690 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24691 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24692 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24693 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24694 ;;Total ram usage:        9 bytes
 24695 ;; Hardware stack levels used:    1
 24696 ;; Hardware stack levels required when called:    2
 24697 ;; This function calls:
 24698 ;;		Nothing
 24699 ;; This function is called by:
 24700 ;;		_ui_disp_set_calib
 24701 ;;		_ui_key_process_enter
 24702 ;;		_ui_key_process_cancel
 24703 ;;		_ui_key_set_process
 24704 ;;		_lcd_set_com_seg
 24705 ;;		_picc_select
 24706 ;; This function uses a non-reentrant model
 24707 ;;
 24708                           
 24709                           
 24710                           ;psect for function ___awdiv
 24711  2A16                     ___awdiv:	
 24712                           
 24713                           ;incstack = 0
 24714                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 24715  2A16  0020               	movlb	0	; select bank0
 24716  2A17  01A1               	clrf	___awdiv@sign
 24717  2A18  1FF4               	btfss	___awdiv@divisor+1,7
 24718  2A19  2A21               	goto	l12567
 24719  2A1A  09F3               	comf	___awdiv@divisor,f
 24720  2A1B  09F4               	comf	___awdiv@divisor+1,f
 24721  2A1C  0AF3               	incf	___awdiv@divisor,f
 24722  2A1D  1903               	skipnz
 24723  2A1E  0AF4               	incf	___awdiv@divisor+1,f
 24724  2A1F  01A1               	clrf	___awdiv@sign
 24725  2A20  0AA1               	incf	___awdiv@sign,f
 24726  2A21                     l12567:	
 24727  2A21  1FF6               	btfss	___awdiv@dividend+1,7
 24728  2A22  2A2C               	goto	l12573
 24729  2A23  09F5               	comf	___awdiv@dividend,f
 24730  2A24  09F6               	comf	___awdiv@dividend+1,f
 24731  2A25  0AF5               	incf	___awdiv@dividend,f
 24732  2A26  1903               	skipnz
 24733  2A27  0AF6               	incf	___awdiv@dividend+1,f
 24734  2A28  3001               	movlw	1
 24735  2A29  00F7               	movwf	??___awdiv
 24736  2A2A  0877               	movf	??___awdiv,w
 24737  2A2B  06A1               	xorwf	___awdiv@sign,f
 24738  2A2C                     l12573:	
 24739  2A2C  01A2               	clrf	___awdiv@quotient
 24740  2A2D  01A3               	clrf	___awdiv@quotient+1
 24741  2A2E  0873               	movf	___awdiv@divisor,w
 24742  2A2F  0474               	iorwf	___awdiv@divisor+1,w
 24743  2A30  1903               	btfsc	3,2
 24744  2A31  2A5B               	goto	l12595
 24745  2A32  01A0               	clrf	___awdiv@counter
 24746  2A33  0AA0               	incf	___awdiv@counter,f
 24747  2A34                     l12583:	
 24748  2A34  1BF4               	btfsc	___awdiv@divisor+1,7
 24749  2A35  2A40               	goto	l12585
 24750  2A36  3001               	movlw	1
 24751  2A37                     u10895:	
 24752  2A37  35F3               	lslf	___awdiv@divisor,f
 24753  2A38  0DF4               	rlf	___awdiv@divisor+1,f
 24754  2A39  0B89               	decfsz	9,f
 24755  2A3A  2A37               	goto	u10895
 24756  2A3B  3001               	movlw	1
 24757  2A3C  00F7               	movwf	??___awdiv
 24758  2A3D  0877               	movf	??___awdiv,w
 24759  2A3E  07A0               	addwf	___awdiv@counter,f
 24760  2A3F  2A34               	goto	l12583
 24761  2A40                     l12585:	
 24762  2A40  3001               	movlw	1
 24763  2A41                     u10915:	
 24764  2A41  35A2               	lslf	___awdiv@quotient,f
 24765  2A42  0DA3               	rlf	___awdiv@quotient+1,f
 24766  2A43  0B89               	decfsz	9,f
 24767  2A44  2A41               	goto	u10915
 24768  2A45  0874               	movf	___awdiv@divisor+1,w
 24769  2A46  0276               	subwf	___awdiv@dividend+1,w
 24770  2A47  1D03               	skipz
 24771  2A48  2A4B               	goto	u10925
 24772  2A49  0873               	movf	___awdiv@divisor,w
 24773  2A4A  0275               	subwf	___awdiv@dividend,w
 24774  2A4B                     u10925:	
 24775  2A4B  1C03               	skipc
 24776  2A4C  2A52               	goto	l12591
 24777  2A4D  0873               	movf	___awdiv@divisor,w
 24778  2A4E  02F5               	subwf	___awdiv@dividend,f
 24779  2A4F  0874               	movf	___awdiv@divisor+1,w
 24780  2A50  3BF6               	subwfb	___awdiv@dividend+1,f
 24781  2A51  1422               	bsf	___awdiv@quotient,0
 24782  2A52                     l12591:	
 24783  2A52  3001               	movlw	1
 24784  2A53                     u10935:	
 24785  2A53  36F4               	lsrf	___awdiv@divisor+1,f
 24786  2A54  0CF3               	rrf	___awdiv@divisor,f
 24787  2A55  0B89               	decfsz	9,f
 24788  2A56  2A53               	goto	u10935
 24789  2A57  3001               	movlw	1
 24790  2A58  02A0               	subwf	___awdiv@counter,f
 24791  2A59  1D03               	btfss	3,2
 24792  2A5A  2A40               	goto	l12585
 24793  2A5B                     l12595:	
 24794  2A5B  0821               	movf	___awdiv@sign,w
 24795  2A5C  1903               	btfsc	3,2
 24796  2A5D  2A63               	goto	l12599
 24797  2A5E  09A2               	comf	___awdiv@quotient,f
 24798  2A5F  09A3               	comf	___awdiv@quotient+1,f
 24799  2A60  0AA2               	incf	___awdiv@quotient,f
 24800  2A61  1903               	skipnz
 24801  2A62  0AA3               	incf	___awdiv@quotient+1,f
 24802  2A63                     l12599:	
 24803  2A63  0823               	movf	___awdiv@quotient+1,w
 24804  2A64  00F4               	movwf	?___awdiv+1
 24805  2A65  0822               	movf	___awdiv@quotient,w
 24806  2A66  00F3               	movwf	?___awdiv
 24807  2A67  0008               	return
 24808  2A68                     __end_of___awdiv:	
 24809                           
 24810                           	psect	text77
 24811  3591                     __ptext77:	
 24812 ;; *************** function _picc_halt_a *****************
 24813 ;; Defined at:
 24814 ;;		line 272 in file "src/nfc/pal/mfrc522_picc.c"
 24815 ;; Parameters:    Size  Location     Type
 24816 ;;		None
 24817 ;; Auto vars:     Size  Location     Type
 24818 ;;  buffer          4   45[BANK0 ] unsigned char [4]
 24819 ;;  result          1   49[BANK0 ] enum E5266
 24820 ;; Return value:  Size  Location     Type
 24821 ;;                  1    wreg      enum E5491
 24822 ;; Registers used:
 24823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24824 ;; Tracked objects:
 24825 ;;		On entry : 0/0
 24826 ;;		On exit  : 0/0
 24827 ;;		Unchanged: 0/0
 24828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24830 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24831 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24832 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 24833 ;;Total ram usage:        8 bytes
 24834 ;; Hardware stack levels used:    1
 24835 ;; Hardware stack levels required when called:    7
 24836 ;; This function calls:
 24837 ;;		_mfrc522_hal_calculate_crc
 24838 ;;		_pcd_comm_with_picc
 24839 ;; This function is called by:
 24840 ;;		_rfid_comm_process
 24841 ;; This function uses a non-reentrant model
 24842 ;;
 24843                           
 24844                           
 24845                           ;psect for function _picc_halt_a
 24846  3591                     _picc_halt_a:	
 24847                           
 24848                           ;mfrc522_picc.c: 273: em_PcdStatusCode result;
 24849                           ;mfrc522_picc.c: 274: uint8_t buffer[4];
 24850                           ;mfrc522_picc.c: 276: buffer[0] = PICC_CMD_HLTA;
 24851                           
 24852                           ;incstack = 0
 24853                           ; Regs used in _picc_halt_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24854  3591  3050               	movlw	80
 24855  3592  0020               	movlb	0	; select bank0
 24856  3593  00CA               	movwf	??_picc_halt_a
 24857  3594  084A               	movf	??_picc_halt_a,w
 24858  3595  00CD               	movwf	picc_halt_a@buffer
 24859                           
 24860                           ;mfrc522_picc.c: 277: buffer[1] = 0;
 24861  3596  01CE               	clrf	picc_halt_a@buffer+1
 24862                           
 24863                           ;mfrc522_picc.c: 278: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 24864  3597  304D               	movlw	low picc_halt_a@buffer
 24865  3598  00A6               	movwf	mfrc522_hal_calculate_crc@data
 24866  3599  3000               	movlw	high picc_halt_a@buffer
 24867  359A  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 24868  359B  3002               	movlw	2
 24869  359C  00CA               	movwf	??_picc_halt_a
 24870  359D  084A               	movf	??_picc_halt_a,w
 24871  359E  00A8               	movwf	mfrc522_hal_calculate_crc@length
 24872  359F  304F               	movlw	low (picc_halt_a@buffer+2)
 24873  35A0  00A9               	movwf	mfrc522_hal_calculate_crc@result
 24874  35A1  3000               	movlw	high (picc_halt_a@buffer+2)
 24875  35A2  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 24876  35A3  31AD  25B0  31B5   	fcall	_mfrc522_hal_calculate_crc
 24877  35A6  0020               	movlb	0	; select bank0
 24878  35A7  00CB               	movwf	??_picc_halt_a+1
 24879  35A8  084B               	movf	??_picc_halt_a+1,w
 24880  35A9  00D1               	movwf	picc_halt_a@result
 24881                           
 24882                           ;mfrc522_picc.c: 279: if (result != STATUS_OK)return result;
 24883  35AA  0851               	movf	picc_halt_a@result,w
 24884  35AB  1D03               	btfss	3,2
 24885  35AC  0008               	return
 24886                           
 24887                           ;mfrc522_picc.c: 282: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, sizeof (bu
      +                          ffer), (0), (0), (0), 0, 0);
 24888                           
 24889                           ;	Return value of _picc_halt_a is never used
 24890  35AD  3030               	movlw	48
 24891  35AE  00CA               	movwf	??_picc_halt_a
 24892  35AF  084A               	movf	??_picc_halt_a,w
 24893  35B0  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 24894  35B1  304D               	movlw	low picc_halt_a@buffer
 24895  35B2  00B2               	movwf	pcd_comm_with_picc@sbuf
 24896  35B3  3000               	movlw	high picc_halt_a@buffer
 24897  35B4  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 24898  35B5  3004               	movlw	4
 24899  35B6  00CB               	movwf	??_picc_halt_a+1
 24900  35B7  084B               	movf	??_picc_halt_a+1,w
 24901  35B8  00B4               	movwf	pcd_comm_with_picc@slen
 24902  35B9  3000               	movlw	0
 24903  35BA  00B5               	movwf	pcd_comm_with_picc@rbuf
 24904  35BB  3000               	movlw	0
 24905  35BC  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 24906  35BD  01B7               	clrf	pcd_comm_with_picc@rlen
 24907  35BE  01B8               	clrf	pcd_comm_with_picc@validBits
 24908  35BF  01B9               	clrf	pcd_comm_with_picc@rxAlign
 24909  35C0  01BA               	clrf	pcd_comm_with_picc@checkCRC
 24910  35C1  300C               	movlw	12
 24911  35C2  3186  26A4         	fcall	_pcd_comm_with_picc
 24912  35C4  0020               	movlb	0	; select bank0
 24913  35C5  00CC               	movwf	??_picc_halt_a+2
 24914  35C6  084C               	movf	??_picc_halt_a+2,w
 24915  35C7  00D1               	movwf	picc_halt_a@result
 24916                           
 24917                           ;	Return value of _picc_halt_a is never used
 24918                           
 24919                           ;	Return value of _picc_halt_a is never used
 24920  35C8  0008               	return
 24921  35C9                     __end_of_picc_halt_a:	
 24922                           ;mfrc522_picc.c: 285: return result;
 24923                           ;	Return value of _picc_halt_a is never used
 24924                           
 24925                           
 24926                           	psect	text78
 24927  33FA                     __ptext78:	
 24928 ;; *************** function _mfapi_is_new_card_present *****************
 24929 ;; Defined at:
 24930 ;;		line 76 in file "src/nfc/apl/mfrc522_apl.c"
 24931 ;; Parameters:    Size  Location     Type
 24932 ;;		None
 24933 ;; Auto vars:     Size  Location     Type
 24934 ;;  bufferATQA      2   56[BANK0 ] unsigned char [2]
 24935 ;;  bufferSize      1   59[BANK0 ] unsigned char 
 24936 ;;  result          1   58[BANK0 ] enum E5266
 24937 ;;  cmd             1   55[BANK0 ] unsigned char 
 24938 ;; Return value:  Size  Location     Type
 24939 ;;                  1    wreg      unsigned char 
 24940 ;; Registers used:
 24941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24942 ;; Tracked objects:
 24943 ;;		On entry : 0/0
 24944 ;;		On exit  : 0/0
 24945 ;;		Unchanged: 0/0
 24946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24948 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24949 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24950 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 24951 ;;Total ram usage:        8 bytes
 24952 ;; Hardware stack levels used:    1
 24953 ;; Hardware stack levels required when called:    8
 24954 ;; This function calls:
 24955 ;;		_m_mem_set
 24956 ;;		_picc_req_a_or_wakeup_a
 24957 ;; This function is called by:
 24958 ;;		_rfid_comm_process
 24959 ;; This function uses a non-reentrant model
 24960 ;;
 24961                           
 24962                           
 24963                           ;psect for function _mfapi_is_new_card_present
 24964  33FA                     _mfapi_is_new_card_present:	
 24965                           
 24966                           ;mfrc522_apl.c: 77: uint8_t cmd;
 24967                           ;mfrc522_apl.c: 78: uint8_t bufferATQA[2];
 24968                           ;mfrc522_apl.c: 79: uint8_t bufferSize = sizeof (bufferATQA);
 24969                           
 24970                           ;incstack = 0
 24971                           ; Regs used in _mfapi_is_new_card_present: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24972  33FA  3002               	movlw	2
 24973  33FB  0020               	movlb	0	; select bank0
 24974  33FC  00D4               	movwf	??_mfapi_is_new_card_present
 24975  33FD  0854               	movf	??_mfapi_is_new_card_present,w
 24976  33FE  00DB               	movwf	mfapi_is_new_card_present@bufferSize
 24977                           
 24978                           ;mfrc522_apl.c: 80: em_PcdStatusCode result;
 24979                           ;mfrc522_apl.c: 81: m_mem_set((uint8_t*) (&PiccUid), 0, sizeof (PiccUid));
 24980  33FF  30BE               	movlw	low _PiccUid
 24981  3400  00F3               	movwf	m_mem_set@buf
 24982  3401  3001               	movlw	high _PiccUid
 24983  3402  00F4               	movwf	m_mem_set@buf+1
 24984  3403  01F5               	clrf	m_mem_set@x
 24985  3404  300C               	movlw	12
 24986  3405  00D4               	movwf	??_mfapi_is_new_card_present
 24987  3406  0854               	movf	??_mfapi_is_new_card_present,w
 24988  3407  00F6               	movwf	m_mem_set@len
 24989  3408  31BB  23E2  31B3   	fcall	_m_mem_set
 24990                           
 24991                           ;mfrc522_apl.c: 82: ;
 24992                           ;mfrc522_apl.c: 83: cmd = PICC_CMD_REQA;
 24993  340B  3026               	movlw	38
 24994  340C  0020               	movlb	0	; select bank0
 24995  340D  00D4               	movwf	??_mfapi_is_new_card_present
 24996  340E  0854               	movf	??_mfapi_is_new_card_present,w
 24997  340F  00D7               	movwf	mfapi_is_new_card_present@cmd
 24998                           
 24999                           ;mfrc522_apl.c: 84: result = picc_req_a_or_wakeup_a(cmd, bufferATQA, &bufferSize);
 25000  3410  3058               	movlw	(low (mfapi_is_new_card_present@bufferATQA| 0))& (0+255)
 25001  3411  00D4               	movwf	??_mfapi_is_new_card_present
 25002  3412  0854               	movf	??_mfapi_is_new_card_present,w
 25003  3413  00CA               	movwf	picc_req_a_or_wakeup_a@bufferATQA
 25004  3414  305B               	movlw	(low (mfapi_is_new_card_present@bufferSize| 0))& (0+255)
 25005  3415  00D5               	movwf	??_mfapi_is_new_card_present+1
 25006  3416  0855               	movf	??_mfapi_is_new_card_present+1,w
 25007  3417  00CB               	movwf	picc_req_a_or_wakeup_a@bufferSize
 25008  3418  0857               	movf	mfapi_is_new_card_present@cmd,w
 25009  3419  31A9  21C5  31B3   	fcall	_picc_req_a_or_wakeup_a
 25010  341C  0020               	movlb	0	; select bank0
 25011  341D  00D6               	movwf	??_mfapi_is_new_card_present+2
 25012  341E  0856               	movf	??_mfapi_is_new_card_present+2,w
 25013  341F  00DA               	movwf	mfapi_is_new_card_present@result
 25014                           
 25015                           ;mfrc522_apl.c: 85: if (result == STATUS_OK || result == STATUS_COLLISION) {
 25016  3420  085A               	movf	mfapi_is_new_card_present@result,w
 25017  3421  1903               	btfsc	3,2
 25018  3422  2C27               	goto	l15685
 25019  3423  3002               	movlw	2
 25020  3424  065A               	xorwf	mfapi_is_new_card_present@result,w
 25021  3425  1D03               	btfss	3,2
 25022  3426  2C29               	goto	l15689
 25023  3427                     l15685:	
 25024                           
 25025                           ;mfrc522_apl.c: 86: return 1;
 25026  3427  3001               	movlw	1
 25027  3428  0008               	return
 25028  3429                     l15689:	
 25029                           
 25030                           ;mfrc522_apl.c: 87: }
 25031                           ;mfrc522_apl.c: 88: return 0;
 25032  3429  3000               	movlw	0
 25033  342A  0008               	return
 25034  342B                     __end_of_mfapi_is_new_card_present:	
 25035                           
 25036                           	psect	text79
 25037  29C5                     __ptext79:	
 25038 ;; *************** function _picc_req_a_or_wakeup_a *****************
 25039 ;; Defined at:
 25040 ;;		line 108 in file "src/nfc/pal/mfrc522_picc.c"
 25041 ;; Parameters:    Size  Location     Type
 25042 ;;  cmd             1    wreg     unsigned char 
 25043 ;;  bufferATQA      1   42[BANK0 ] PTR unsigned char 
 25044 ;;		 -> mfapi_is_new_card_present@bufferATQA(2), 
 25045 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 25046 ;;		 -> mfapi_is_new_card_present@bufferSize(1), 
 25047 ;; Auto vars:     Size  Location     Type
 25048 ;;  cmd             1   48[BANK0 ] unsigned char 
 25049 ;;  validBits       1   51[BANK0 ] unsigned char 
 25050 ;;  status          1   50[BANK0 ] enum E5266
 25051 ;;  __cmd           1   49[BANK0 ] unsigned char 
 25052 ;; Return value:  Size  Location     Type
 25053 ;;                  1    wreg      enum E5266
 25054 ;; Registers used:
 25055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25056 ;; Tracked objects:
 25057 ;;		On entry : 0/0
 25058 ;;		On exit  : 0/0
 25059 ;;		Unchanged: 0/0
 25060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25061 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25062 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25063 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25064 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 25065 ;;Total ram usage:       10 bytes
 25066 ;; Hardware stack levels used:    1
 25067 ;; Hardware stack levels required when called:    7
 25068 ;; This function calls:
 25069 ;;		_mfrc522_bal_clr_bit_reg
 25070 ;;		_pcd_comm_with_picc
 25071 ;; This function is called by:
 25072 ;;		_mfapi_is_new_card_present
 25073 ;; This function uses a non-reentrant model
 25074 ;;
 25075                           
 25076                           
 25077                           ;psect for function _picc_req_a_or_wakeup_a
 25078  29C5                     _picc_req_a_or_wakeup_a:	
 25079                           
 25080                           ;incstack = 0
 25081                           ; Regs used in _picc_req_a_or_wakeup_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25082                           ;picc_req_a_or_wakeup_a@cmd stored from wreg
 25083  29C5  0020               	movlb	0	; select bank0
 25084  29C6  00D0               	movwf	picc_req_a_or_wakeup_a@cmd
 25085                           
 25086                           ;mfrc522_picc.c: 109: uint8_t validBits;
 25087                           ;mfrc522_picc.c: 110: em_PcdStatusCode status;
 25088                           ;mfrc522_picc.c: 111: uint8_t __cmd=cmd;
 25089  29C7  0850               	movf	picc_req_a_or_wakeup_a@cmd,w
 25090  29C8  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25091  29C9  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25092  29CA  00D1               	movwf	picc_req_a_or_wakeup_a@__cmd
 25093                           
 25094                           ;mfrc522_picc.c: 113: if (bufferATQA == (0) || *bufferSize < 2) {
 25095  29CB  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 25096  29CC  1903               	btfsc	3,2
 25097  29CD  29D5               	goto	l14527
 25098  29CE  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25099  29CF  0086               	movwf	6
 25100  29D0  0187               	clrf	7
 25101  29D1  3002               	movlw	2
 25102  29D2  0201               	subwf	1,w
 25103  29D3  1803               	skipnc
 25104  29D4  29D7               	goto	l14531
 25105  29D5                     l14527:	
 25106                           
 25107                           ;mfrc522_picc.c: 114: return STATUS_NO_ROOM;
 25108  29D5  3004               	movlw	4
 25109  29D6  0008               	return
 25110  29D7                     l14531:	
 25111                           
 25112                           ;mfrc522_picc.c: 115: }
 25113                           ;mfrc522_picc.c: 116: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 25114  29D7  3080               	movlw	128
 25115  29D8  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25116  29D9  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25117  29DA  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 25118  29DB  300E               	movlw	14
 25119  29DC  31BD  250E  31A9   	fcall	_mfrc522_bal_clr_bit_reg
 25120                           
 25121                           ;mfrc522_picc.c: 117: validBits = 7;
 25122  29DF  3007               	movlw	7
 25123  29E0  0020               	movlb	0	; select bank0
 25124  29E1  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25125  29E2  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25126  29E3  00D3               	movwf	picc_req_a_or_wakeup_a@validBits
 25127                           
 25128                           ;mfrc522_picc.c: 120: status=pcd_comm_with_picc(PCD_Transceive,0x30,&__cmd, 1, bufferATQ
      +                          A, bufferSize, &validBits, 0, 0);
 25129  29E4  3030               	movlw	48
 25130  29E5  00CC               	movwf	??_picc_req_a_or_wakeup_a
 25131  29E6  084C               	movf	??_picc_req_a_or_wakeup_a,w
 25132  29E7  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 25133  29E8  3051               	movlw	low picc_req_a_or_wakeup_a@__cmd
 25134  29E9  00B2               	movwf	pcd_comm_with_picc@sbuf
 25135  29EA  3000               	movlw	high picc_req_a_or_wakeup_a@__cmd
 25136  29EB  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 25137  29EC  01B4               	clrf	pcd_comm_with_picc@slen
 25138  29ED  0AB4               	incf	pcd_comm_with_picc@slen,f
 25139  29EE  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 25140  29EF  00B5               	movwf	pcd_comm_with_picc@rbuf
 25141  29F0  3000               	movlw	0
 25142  29F1  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 25143  29F2  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25144  29F3  00CD               	movwf	??_picc_req_a_or_wakeup_a+1
 25145  29F4  084D               	movf	??_picc_req_a_or_wakeup_a+1,w
 25146  29F5  00B7               	movwf	pcd_comm_with_picc@rlen
 25147  29F6  3053               	movlw	(low (picc_req_a_or_wakeup_a@validBits| 0))& (0+255)
 25148  29F7  00CE               	movwf	??_picc_req_a_or_wakeup_a+2
 25149  29F8  084E               	movf	??_picc_req_a_or_wakeup_a+2,w
 25150  29F9  00B8               	movwf	pcd_comm_with_picc@validBits
 25151  29FA  01B9               	clrf	pcd_comm_with_picc@rxAlign
 25152  29FB  01BA               	clrf	pcd_comm_with_picc@checkCRC
 25153  29FC  300C               	movlw	12
 25154  29FD  3186  26A4  31A9   	fcall	_pcd_comm_with_picc
 25155  2A00  0020               	movlb	0	; select bank0
 25156  2A01  00CF               	movwf	??_picc_req_a_or_wakeup_a+3
 25157  2A02  084F               	movf	??_picc_req_a_or_wakeup_a+3,w
 25158  2A03  00D2               	movwf	picc_req_a_or_wakeup_a@status
 25159                           
 25160                           ;mfrc522_picc.c: 121: if (status != STATUS_OK) return status;
 25161  2A04  0852               	movf	picc_req_a_or_wakeup_a@status,w
 25162  2A05  1903               	btfsc	3,2
 25163  2A06  2A09               	goto	l14543
 25164  2A07  0852               	movf	picc_req_a_or_wakeup_a@status,w
 25165  2A08  0008               	return
 25166  2A09                     l14543:	
 25167                           
 25168                           ;mfrc522_picc.c: 122: if (*bufferSize != 2 || validBits != 0) return STATUS_ERROR;
 25169  2A09  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 25170  2A0A  0086               	movwf	6
 25171  2A0B  0187               	clrf	7
 25172  2A0C  3002               	movlw	2
 25173  2A0D  0601               	xorwf	1,w
 25174  2A0E  1903               	btfsc	3,2
 25175  2A0F  0853               	movf	picc_req_a_or_wakeup_a@validBits,w
 25176  2A10  1903               	btfsc	3,2
 25177  2A11  2A14               	goto	l14551
 25178  2A12  3001               	movlw	1
 25179  2A13  0008               	return
 25180  2A14                     l14551:	
 25181                           
 25182                           ;mfrc522_picc.c: 123: return STATUS_OK;
 25183  2A14  3000               	movlw	0
 25184  2A15  0008               	return
 25185  2A16                     __end_of_picc_req_a_or_wakeup_a:	
 25186                           
 25187                           	psect	text80
 25188  06A4                     __ptext80:	
 25189 ;; *************** function _pcd_comm_with_picc *****************
 25190 ;; Defined at:
 25191 ;;		line 35 in file "src/nfc/pal/mfrc522_picc.c"
 25192 ;; Parameters:    Size  Location     Type
 25193 ;;  cmd             1    wreg     unsigned char 
 25194 ;;  waitIRQ         1   17[BANK0 ] unsigned char 
 25195 ;;  sbuf            2   18[BANK0 ] PTR unsigned char 
 25196 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 25197 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), 
 25198 ;;		 -> cardUidBlockBuf(18), 
 25199 ;;  slen            1   20[BANK0 ] unsigned char 
 25200 ;;  rbuf            2   21[BANK0 ] PTR unsigned char 
 25201 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 25202 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25203 ;;  rlen            1   23[BANK0 ] PTR unsigned char 
 25204 ;;		 -> pcd_mifare_transceive@cmdBufferSize(1), picc_select@responseLength(1), mfapi_is_new_card_present@bufferSize(1), 
      +rdLen(1), 
 25205 ;;		 -> __t8(1), NULL(0), 
 25206 ;;  validBits       1   24[BANK0 ] PTR unsigned char 
 25207 ;;		 -> pcd_mifare_transceive@validBits(1), picc_select@txLastBits(1), picc_req_a_or_wakeup_a@validBits(1), NULL(0), 
 25208 ;;  rxAlign         1   25[BANK0 ] unsigned char 
 25209 ;;  checkCRC        1   26[BANK0 ] unsigned char 
 25210 ;; Auto vars:     Size  Location     Type
 25211 ;;  cmd             1   33[BANK0 ] unsigned char 
 25212 ;;  controlBuffe    2   34[BANK0 ] unsigned char [2]
 25213 ;;  status          1   37[BANK0 ] enum E5266
 25214 ;;  i               2   38[BANK0 ] unsigned int 
 25215 ;;  tmp8            1   41[BANK0 ] unsigned char 
 25216 ;;  _validBits      1   40[BANK0 ] unsigned char 
 25217 ;;  errorRegValu    1   36[BANK0 ] unsigned char 
 25218 ;;  bitFraming      1   30[BANK0 ] unsigned char 
 25219 ;;  txLastBits      1   29[BANK0 ] unsigned char 
 25220 ;; Return value:  Size  Location     Type
 25221 ;;                  1    wreg      enum E5266
 25222 ;; Registers used:
 25223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25224 ;; Tracked objects:
 25225 ;;		On entry : 0/0
 25226 ;;		On exit  : 0/0
 25227 ;;		Unchanged: 0/0
 25228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25229 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 25230 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 25231 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25232 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0
 25233 ;;Total ram usage:       25 bytes
 25234 ;; Hardware stack levels used:    1
 25235 ;; Hardware stack levels required when called:    6
 25236 ;; This function calls:
 25237 ;;		_mfrc522_bal_read_fifo_len_ex
 25238 ;;		_mfrc522_bal_read_reg
 25239 ;;		_mfrc522_bal_set_bit_reg
 25240 ;;		_mfrc522_bal_write_reg
 25241 ;;		_mfrc522_bal_write_reg_len
 25242 ;;		_mfrc522_hal_calculate_crc
 25243 ;; This function is called by:
 25244 ;;		_picc_req_a_or_wakeup_a
 25245 ;;		_picc_select
 25246 ;;		_picc_halt_a
 25247 ;;		_picc_authenticate
 25248 ;;		_mifare_read
 25249 ;;		_pcd_mifare_transceive
 25250 ;; This function uses a non-reentrant model
 25251 ;;
 25252                           
 25253                           
 25254                           ;psect for function _pcd_comm_with_picc
 25255  06A4                     _pcd_comm_with_picc:	
 25256                           
 25257                           ;incstack = 0
 25258                           ; Regs used in _pcd_comm_with_picc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25259                           ;pcd_comm_with_picc@cmd stored from wreg
 25260  06A4  0020               	movlb	0	; select bank0
 25261  06A5  00C1               	movwf	pcd_comm_with_picc@cmd
 25262                           
 25263                           ;mfrc522_picc.c: 47: uint8_t tmp8, _validBits;
 25264                           ;mfrc522_picc.c: 48: uint16_t i;
 25265                           ;mfrc522_picc.c: 50: uint8_t txLastBits = validBits ? (*validBits) : 0;
 25266  06A6  0838               	movf	pcd_comm_with_picc@validBits,w
 25267  06A7  1D03               	btfss	3,2
 25268  06A8  2EAC               	goto	l13461
 25269  06A9  01BF               	clrf	_pcd_comm_with_picc$3211
 25270  06AA  01C0               	clrf	_pcd_comm_with_picc$3211+1
 25271  06AB  2EB6               	goto	l13463
 25272  06AC                     l13461:	
 25273  06AC  0838               	movf	pcd_comm_with_picc@validBits,w
 25274  06AD  0086               	movwf	6
 25275  06AE  0187               	clrf	7
 25276  06AF  0801               	movf	1,w
 25277  06B0  00BB               	movwf	??_pcd_comm_with_picc
 25278  06B1  01BC               	clrf	??_pcd_comm_with_picc+1
 25279  06B2  083B               	movf	??_pcd_comm_with_picc,w
 25280  06B3  00BF               	movwf	_pcd_comm_with_picc$3211
 25281  06B4  083C               	movf	??_pcd_comm_with_picc+1,w
 25282  06B5  00C0               	movwf	_pcd_comm_with_picc$3211+1
 25283  06B6                     l13463:	
 25284  06B6  083F               	movf	_pcd_comm_with_picc$3211,w
 25285  06B7  00BB               	movwf	??_pcd_comm_with_picc
 25286  06B8  083B               	movf	??_pcd_comm_with_picc,w
 25287  06B9  00BD               	movwf	pcd_comm_with_picc@txLastBits
 25288                           
 25289                           ;mfrc522_picc.c: 51: uint8_t bitFraming = (rxAlign << 4) + txLastBits;
 25290  06BA  0839               	movf	pcd_comm_with_picc@rxAlign,w
 25291  06BB  00BB               	movwf	??_pcd_comm_with_picc
 25292  06BC  3003               	movlw	3
 25293  06BD                     u12085:	
 25294  06BD  35BB               	lslf	??_pcd_comm_with_picc,f
 25295  06BE  3EFF               	addlw	-1
 25296  06BF  1D03               	skipz
 25297  06C0  2EBD               	goto	u12085
 25298  06C1  353B               	lslf	??_pcd_comm_with_picc,w
 25299  06C2  073D               	addwf	pcd_comm_with_picc@txLastBits,w
 25300  06C3  00BC               	movwf	??_pcd_comm_with_picc+1
 25301  06C4  083C               	movf	??_pcd_comm_with_picc+1,w
 25302  06C5  00BE               	movwf	pcd_comm_with_picc@bitFraming
 25303                           
 25304                           ;mfrc522_picc.c: 53: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25305  06C6  01F7               	clrf	mfrc522_bal_write_reg@x
 25306  06C7  3001               	movlw	1
 25307  06C8  31BB  23F2  3186   	fcall	_mfrc522_bal_write_reg
 25308                           
 25309                           ;mfrc522_picc.c: 54: mfrc522_bal_write_reg(ComIrqReg, 0x7F);
 25310  06CB  307F               	movlw	127
 25311  06CC  0020               	movlb	0	; select bank0
 25312  06CD  00BB               	movwf	??_pcd_comm_with_picc
 25313  06CE  083B               	movf	??_pcd_comm_with_picc,w
 25314  06CF  00F7               	movwf	mfrc522_bal_write_reg@x
 25315  06D0  3004               	movlw	4
 25316  06D1  31BB  23F2  3186   	fcall	_mfrc522_bal_write_reg
 25317                           
 25318                           ;mfrc522_picc.c: 55: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 25319  06D4  3080               	movlw	128
 25320  06D5  0020               	movlb	0	; select bank0
 25321  06D6  00BB               	movwf	??_pcd_comm_with_picc
 25322  06D7  083B               	movf	??_pcd_comm_with_picc,w
 25323  06D8  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25324  06D9  300A               	movlw	10
 25325  06DA  31BD  2525  3186   	fcall	_mfrc522_bal_set_bit_reg
 25326                           
 25327                           ;mfrc522_picc.c: 56: mfrc522_bal_write_reg_len(FIFODataReg, sbuf, slen);
 25328  06DD  0020               	movlb	0	; select bank0
 25329  06DE  0833               	movf	pcd_comm_with_picc@sbuf+1,w
 25330  06DF  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 25331  06E0  0832               	movf	pcd_comm_with_picc@sbuf,w
 25332  06E1  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 25333  06E2  0834               	movf	pcd_comm_with_picc@slen,w
 25334  06E3  00BB               	movwf	??_pcd_comm_with_picc
 25335  06E4  083B               	movf	??_pcd_comm_with_picc,w
 25336  06E5  00A2               	movwf	mfrc522_bal_write_reg_len@len
 25337  06E6  3009               	movlw	9
 25338  06E7  31BF  2766  3186   	fcall	_mfrc522_bal_write_reg_len
 25339                           
 25340                           ;mfrc522_picc.c: 57: mfrc522_bal_write_reg(BitFramingReg, bitFraming);
 25341  06EA  0020               	movlb	0	; select bank0
 25342  06EB  083E               	movf	pcd_comm_with_picc@bitFraming,w
 25343  06EC  00BB               	movwf	??_pcd_comm_with_picc
 25344  06ED  083B               	movf	??_pcd_comm_with_picc,w
 25345  06EE  00F7               	movwf	mfrc522_bal_write_reg@x
 25346  06EF  300D               	movlw	13
 25347  06F0  31BB  23F2  3186   	fcall	_mfrc522_bal_write_reg
 25348                           
 25349                           ;mfrc522_picc.c: 58: mfrc522_bal_write_reg(CommandReg, cmd);
 25350  06F3  0020               	movlb	0	; select bank0
 25351  06F4  0841               	movf	pcd_comm_with_picc@cmd,w
 25352  06F5  00BB               	movwf	??_pcd_comm_with_picc
 25353  06F6  083B               	movf	??_pcd_comm_with_picc,w
 25354  06F7  00F7               	movwf	mfrc522_bal_write_reg@x
 25355  06F8  3001               	movlw	1
 25356  06F9  31BB  23F2  3186   	fcall	_mfrc522_bal_write_reg
 25357                           
 25358                           ;mfrc522_picc.c: 59: if (cmd == PCD_Transceive) {
 25359  06FC  300C               	movlw	12
 25360  06FD  0020               	movlb	0	; select bank0
 25361  06FE  0641               	xorwf	pcd_comm_with_picc@cmd,w
 25362  06FF  1D03               	btfss	3,2
 25363  0700  2F09               	goto	l13481
 25364                           
 25365                           ;mfrc522_picc.c: 60: mfrc522_bal_set_bit_reg(BitFramingReg, 0x80);
 25366  0701  3080               	movlw	128
 25367  0702  00BB               	movwf	??_pcd_comm_with_picc
 25368  0703  083B               	movf	??_pcd_comm_with_picc,w
 25369  0704  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25370  0705  300D               	movlw	13
 25371  0706  31BD  2525  3186   	fcall	_mfrc522_bal_set_bit_reg
 25372  0709                     l13481:	
 25373                           
 25374                           ;mfrc522_picc.c: 61: }
 25375                           ;mfrc522_picc.c: 63: i = 2000;
 25376  0709  30D0               	movlw	208
 25377  070A  0020               	movlb	0	; select bank0
 25378  070B  00C6               	movwf	pcd_comm_with_picc@i
 25379  070C  3007               	movlw	7
 25380  070D  00C7               	movwf	pcd_comm_with_picc@i+1
 25381  070E                     l13501:	
 25382                           ;mfrc522_picc.c: 64: while (i) {
 25383                           
 25384  070E  0846               	movf	pcd_comm_with_picc@i,w
 25385  070F  0447               	iorwf	pcd_comm_with_picc@i+1,w
 25386  0710  1903               	btfsc	3,2
 25387  0711  2F2C               	goto	l13503
 25388                           
 25389                           ;mfrc522_picc.c: 65: tmp8 = mfrc522_bal_read_reg(ComIrqReg);
 25390  0712  3004               	movlw	4
 25391  0713  31BD  2585  3186   	fcall	_mfrc522_bal_read_reg
 25392  0716  0020               	movlb	0	; select bank0
 25393  0717  00BB               	movwf	??_pcd_comm_with_picc
 25394  0718  083B               	movf	??_pcd_comm_with_picc,w
 25395  0719  00C9               	movwf	pcd_comm_with_picc@tmp8
 25396                           
 25397                           ;mfrc522_picc.c: 66: if (tmp8 & waitIRQ) break;
 25398  071A  0849               	movf	pcd_comm_with_picc@tmp8,w
 25399  071B  0531               	andwf	pcd_comm_with_picc@waitIRQ,w
 25400  071C  1D03               	btfss	3,2
 25401  071D  2F2C               	goto	l13503
 25402                           
 25403                           ;mfrc522_picc.c: 67: if (tmp8 & 0x01) return STATUS_TIMEOUT;
 25404  071E  1C49               	btfss	pcd_comm_with_picc@tmp8,0
 25405  071F  2F22               	goto	l13493
 25406  0720  3003               	movlw	3
 25407  0721  0008               	return
 25408  0722                     l13493:	
 25409                           
 25410                           ;mfrc522_picc.c: 68: i--;
 25411  0722  3001               	movlw	1
 25412  0723  02C6               	subwf	pcd_comm_with_picc@i,f
 25413  0724  3000               	movlw	0
 25414  0725  3BC7               	subwfb	pcd_comm_with_picc@i+1,f
 25415                           
 25416                           ;mfrc522_picc.c: 69: if(i==0)return STATUS_TIMEOUT;
 25417  0726  0846               	movf	pcd_comm_with_picc@i,w
 25418  0727  0447               	iorwf	pcd_comm_with_picc@i+1,w
 25419  0728  1D03               	btfss	3,2
 25420  0729  2F0E               	goto	l13501
 25421  072A  3003               	movlw	3
 25422  072B  0008               	return
 25423  072C                     l13503:	
 25424                           
 25425                           ;mfrc522_picc.c: 70: }
 25426                           ;mfrc522_picc.c: 71: uint8_t errorRegValue = mfrc522_bal_read_reg(ErrorReg);
 25427  072C  3006               	movlw	6
 25428  072D  31BD  2585  3186   	fcall	_mfrc522_bal_read_reg
 25429  0730  0020               	movlb	0	; select bank0
 25430  0731  00BB               	movwf	??_pcd_comm_with_picc
 25431  0732  083B               	movf	??_pcd_comm_with_picc,w
 25432  0733  00C4               	movwf	pcd_comm_with_picc@errorRegValue
 25433                           
 25434                           ;mfrc522_picc.c: 72: if (errorRegValue & 0x13)return STATUS_ERROR;
 25435  0734  0844               	movf	pcd_comm_with_picc@errorRegValue,w
 25436  0735  3913               	andlw	19
 25437  0736  1903               	btfsc	3,2
 25438  0737  2F3A               	goto	l13511
 25439  0738  3001               	movlw	1
 25440  0739  0008               	return
 25441  073A                     l13511:	
 25442                           
 25443                           ;mfrc522_picc.c: 73: if ((rbuf != (0))&& (rlen != (0))) {
 25444  073A  0835               	movf	pcd_comm_with_picc@rbuf,w
 25445  073B  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 25446  073C  1903               	btfsc	3,2
 25447  073D  2F7C               	goto	l13533
 25448  073E  0837               	movf	pcd_comm_with_picc@rlen,w
 25449  073F  1903               	btfsc	3,2
 25450  0740  2F7C               	goto	l13533
 25451                           
 25452                           ;mfrc522_picc.c: 74: tmp8 = mfrc522_bal_read_reg(FIFOLevelReg);
 25453  0741  300A               	movlw	10
 25454  0742  31BD  2585  3186   	fcall	_mfrc522_bal_read_reg
 25455  0745  0020               	movlb	0	; select bank0
 25456  0746  00BB               	movwf	??_pcd_comm_with_picc
 25457  0747  083B               	movf	??_pcd_comm_with_picc,w
 25458  0748  00C9               	movwf	pcd_comm_with_picc@tmp8
 25459                           
 25460                           ;mfrc522_picc.c: 75: if (tmp8 > *rlen) return STATUS_NO_ROOM;
 25461  0749  0837               	movf	pcd_comm_with_picc@rlen,w
 25462  074A  0086               	movwf	6
 25463  074B  0187               	clrf	7
 25464  074C  0849               	movf	pcd_comm_with_picc@tmp8,w
 25465  074D  0201               	subwf	1,w
 25466  074E  1803               	skipnc
 25467  074F  2F52               	goto	l13523
 25468  0750  3004               	movlw	4
 25469  0751  0008               	return
 25470  0752                     l13523:	
 25471                           
 25472                           ;mfrc522_picc.c: 76: *rlen = tmp8;
 25473  0752  0849               	movf	pcd_comm_with_picc@tmp8,w
 25474  0753  00BB               	movwf	??_pcd_comm_with_picc
 25475  0754  0837               	movf	pcd_comm_with_picc@rlen,w
 25476  0755  0086               	movwf	6
 25477  0756  0187               	clrf	7
 25478  0757  083B               	movf	??_pcd_comm_with_picc,w
 25479  0758  0081               	movwf	1
 25480                           
 25481                           ;mfrc522_picc.c: 77: mfrc522_bal_read_fifo_len_ex(FIFODataReg, rbuf, tmp8, rxAlign);
 25482  0759  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 25483  075A  00A1               	movwf	mfrc522_bal_read_fifo_len_ex@buf+1
 25484  075B  0835               	movf	pcd_comm_with_picc@rbuf,w
 25485  075C  00A0               	movwf	mfrc522_bal_read_fifo_len_ex@buf
 25486  075D  0849               	movf	pcd_comm_with_picc@tmp8,w
 25487  075E  00BB               	movwf	??_pcd_comm_with_picc
 25488  075F  083B               	movf	??_pcd_comm_with_picc,w
 25489  0760  00A2               	movwf	mfrc522_bal_read_fifo_len_ex@len
 25490  0761  0839               	movf	pcd_comm_with_picc@rxAlign,w
 25491  0762  00BC               	movwf	??_pcd_comm_with_picc+1
 25492  0763  083C               	movf	??_pcd_comm_with_picc+1,w
 25493  0764  00A3               	movwf	mfrc522_bal_read_fifo_len_ex@rx_align
 25494  0765  3009               	movlw	9
 25495  0766  31B7  2738  3186   	fcall	_mfrc522_bal_read_fifo_len_ex
 25496                           
 25497                           ;mfrc522_picc.c: 78: _validBits = mfrc522_bal_read_reg(ControlReg) & 0x07;
 25498  0769  300C               	movlw	12
 25499  076A  31BD  2585  3186   	fcall	_mfrc522_bal_read_reg
 25500  076D  3907               	andlw	7
 25501  076E  0020               	movlb	0	; select bank0
 25502  076F  00BB               	movwf	??_pcd_comm_with_picc
 25503  0770  083B               	movf	??_pcd_comm_with_picc,w
 25504  0771  00C8               	movwf	pcd_comm_with_picc@_validBits
 25505                           
 25506                           ;mfrc522_picc.c: 80: if (validBits != (0)) {
 25507  0772  0838               	movf	pcd_comm_with_picc@validBits,w
 25508  0773  1903               	btfsc	3,2
 25509  0774  2F7C               	goto	l13533
 25510                           
 25511                           ;mfrc522_picc.c: 81: *validBits = _validBits;
 25512  0775  0848               	movf	pcd_comm_with_picc@_validBits,w
 25513  0776  00BB               	movwf	??_pcd_comm_with_picc
 25514  0777  0838               	movf	pcd_comm_with_picc@validBits,w
 25515  0778  0086               	movwf	6
 25516  0779  0187               	clrf	7
 25517  077A  083B               	movf	??_pcd_comm_with_picc,w
 25518  077B  0081               	movwf	1
 25519  077C                     l13533:	
 25520                           
 25521                           ;mfrc522_picc.c: 82: }
 25522                           ;mfrc522_picc.c: 83: }
 25523                           ;mfrc522_picc.c: 84: if (errorRegValue & 0x08) return STATUS_COLLISION;
 25524  077C  1DC4               	btfss	pcd_comm_with_picc@errorRegValue,3
 25525  077D  2F80               	goto	l13539
 25526  077E  3002               	movlw	2
 25527  077F  0008               	return
 25528  0780                     l13539:	
 25529                           
 25530                           ;mfrc522_picc.c: 85: if ((rbuf != (0)) && (rlen != (0)) && checkCRC) {
 25531  0780  0835               	movf	pcd_comm_with_picc@rbuf,w
 25532  0781  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 25533  0782  1903               	btfsc	3,2
 25534  0783  2FE8               	goto	l13577
 25535  0784  0837               	movf	pcd_comm_with_picc@rlen,w
 25536  0785  1903               	btfsc	3,2
 25537  0786  2FE8               	goto	l13577
 25538  0787  083A               	movf	pcd_comm_with_picc@checkCRC,w
 25539  0788  1903               	btfsc	3,2
 25540  0789  2FE8               	goto	l13577
 25541                           
 25542                           ;mfrc522_picc.c: 86: if (*rlen == 1 && _validBits == 4) return STATUS_MIFARE_NACK;
 25543  078A  0837               	movf	pcd_comm_with_picc@rlen,w
 25544  078B  0086               	movwf	6
 25545  078C  0187               	clrf	7
 25546  078D  0301               	decf	1,w
 25547  078E  1D03               	btfss	3,2
 25548  078F  2F96               	goto	l13553
 25549  0790  3004               	movlw	4
 25550  0791  0648               	xorwf	pcd_comm_with_picc@_validBits,w
 25551  0792  1D03               	btfss	3,2
 25552  0793  2F96               	goto	l13553
 25553  0794  30FF               	movlw	255
 25554  0795  0008               	return
 25555  0796                     l13553:	
 25556                           
 25557                           ;mfrc522_picc.c: 87: if (*rlen < 2 || _validBits != 0) return STATUS_CRC_WRONG;
 25558  0796  0837               	movf	pcd_comm_with_picc@rlen,w
 25559  0797  0086               	movwf	6
 25560  0798  0187               	clrf	7
 25561  0799  3002               	movlw	2
 25562  079A  0201               	subwf	1,w
 25563  079B  1C03               	skipc
 25564  079C  2FA0               	goto	l13557
 25565  079D  0848               	movf	pcd_comm_with_picc@_validBits,w
 25566  079E  1903               	btfsc	3,2
 25567  079F  2FA2               	goto	l13561
 25568  07A0                     l13557:	
 25569  07A0  3007               	movlw	7
 25570  07A1  0008               	return
 25571  07A2                     l13561:	
 25572                           
 25573                           ;mfrc522_picc.c: 88: uint8_t controlBuffer[2];
 25574                           ;mfrc522_picc.c: 89: em_PcdStatusCode status = mfrc522_hal_calculate_crc(rbuf, *rlen - 2
      +                          , controlBuffer);
 25575  07A2  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 25576  07A3  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 25577  07A4  0835               	movf	pcd_comm_with_picc@rbuf,w
 25578  07A5  00A6               	movwf	mfrc522_hal_calculate_crc@data
 25579  07A6  0837               	movf	pcd_comm_with_picc@rlen,w
 25580  07A7  0086               	movwf	6
 25581  07A8  0187               	clrf	7
 25582  07A9  0801               	movf	1,w
 25583  07AA  3EFE               	addlw	254
 25584  07AB  00BB               	movwf	??_pcd_comm_with_picc
 25585  07AC  083B               	movf	??_pcd_comm_with_picc,w
 25586  07AD  00A8               	movwf	mfrc522_hal_calculate_crc@length
 25587  07AE  3042               	movlw	low pcd_comm_with_picc@controlBuffer
 25588  07AF  00A9               	movwf	mfrc522_hal_calculate_crc@result
 25589  07B0  3000               	movlw	high pcd_comm_with_picc@controlBuffer
 25590  07B1  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 25591  07B2  31AD  25B0  3186   	fcall	_mfrc522_hal_calculate_crc
 25592  07B5  0020               	movlb	0	; select bank0
 25593  07B6  00BC               	movwf	??_pcd_comm_with_picc+1
 25594  07B7  083C               	movf	??_pcd_comm_with_picc+1,w
 25595  07B8  00C5               	movwf	pcd_comm_with_picc@status
 25596                           
 25597                           ;mfrc522_picc.c: 90: if (status != STATUS_OK) return status;
 25598  07B9  0845               	movf	pcd_comm_with_picc@status,w
 25599  07BA  1903               	btfsc	3,2
 25600  07BB  2FBE               	goto	l13569
 25601  07BC  0845               	movf	pcd_comm_with_picc@status,w
 25602  07BD  0008               	return
 25603  07BE                     l13569:	
 25604                           
 25605                           ;mfrc522_picc.c: 92: if ((rbuf[*rlen - 2] != controlBuffer[0]) || (rbuf[*rlen - 1] != co
      +                          ntrolBuffer[1])) {
 25606  07BE  0837               	movf	pcd_comm_with_picc@rlen,w
 25607  07BF  0086               	movwf	6
 25608  07C0  0187               	clrf	7
 25609  07C1  0801               	movf	1,w
 25610  07C2  3EFE               	addlw	254
 25611  07C3  00BB               	movwf	??_pcd_comm_with_picc
 25612  07C4  30FF               	movlw	255
 25613  07C5  1803               	skipnc
 25614  07C6  3000               	movlw	0
 25615  07C7  00BC               	movwf	??_pcd_comm_with_picc+1
 25616  07C8  083B               	movf	??_pcd_comm_with_picc,w
 25617  07C9  0735               	addwf	pcd_comm_with_picc@rbuf,w
 25618  07CA  0086               	movwf	6
 25619  07CB  083C               	movf	??_pcd_comm_with_picc+1,w
 25620  07CC  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 25621  07CD  0087               	movwf	7
 25622  07CE  0801               	movf	1,w
 25623  07CF  0642               	xorwf	pcd_comm_with_picc@controlBuffer,w
 25624  07D0  1D03               	skipz
 25625  07D1  2FE6               	goto	l13573
 25626  07D2  0837               	movf	pcd_comm_with_picc@rlen,w
 25627  07D3  0086               	movwf	6
 25628  07D4  0187               	clrf	7
 25629  07D5  0801               	movf	1,w
 25630  07D6  3EFF               	addlw	255
 25631  07D7  00BB               	movwf	??_pcd_comm_with_picc
 25632  07D8  30FF               	movlw	255
 25633  07D9  1803               	skipnc
 25634  07DA  3000               	movlw	0
 25635  07DB  00BC               	movwf	??_pcd_comm_with_picc+1
 25636  07DC  083B               	movf	??_pcd_comm_with_picc,w
 25637  07DD  0735               	addwf	pcd_comm_with_picc@rbuf,w
 25638  07DE  0086               	movwf	6
 25639  07DF  083C               	movf	??_pcd_comm_with_picc+1,w
 25640  07E0  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 25641  07E1  0087               	movwf	7
 25642  07E2  0801               	movf	1,w
 25643  07E3  0643               	xorwf	pcd_comm_with_picc@controlBuffer+1,w
 25644  07E4  1903               	skipnz
 25645  07E5  2FE8               	goto	l13577
 25646  07E6                     l13573:	
 25647                           
 25648                           ;mfrc522_picc.c: 93: return STATUS_CRC_WRONG;
 25649  07E6  3007               	movlw	7
 25650  07E7  0008               	return
 25651  07E8                     l13577:	
 25652                           
 25653                           ;mfrc522_picc.c: 94: }
 25654                           ;mfrc522_picc.c: 95: }
 25655                           ;mfrc522_picc.c: 96: return STATUS_OK;
 25656  07E8  3000               	movlw	0
 25657  07E9  0008               	return
 25658  07EA                     __end_of_pcd_comm_with_picc:	
 25659                           
 25660                           	psect	text81
 25661  2DB0                     __ptext81:	
 25662 ;; *************** function _mfrc522_hal_calculate_crc *****************
 25663 ;; Defined at:
 25664 ;;		line 68 in file "src/nfc/hal/mfrc522_hal.c"
 25665 ;; Parameters:    Size  Location     Type
 25666 ;;  data            2    6[BANK0 ] PTR unsigned char 
 25667 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), mfapi_is_new_card_present@buf
      +ferATQA(2), 
 25668 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 25669 ;;		 -> NULL(0), 
 25670 ;;  length          1    8[BANK0 ] unsigned char 
 25671 ;;  result          2    9[BANK0 ] PTR unsigned char 
 25672 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), pcd_comm_with_picc@controlBuf
      +fer(2), 
 25673 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 25674 ;; Auto vars:     Size  Location     Type
 25675 ;;  i               2   15[BANK0 ] unsigned int 
 25676 ;;  t8              1   14[BANK0 ] unsigned char 
 25677 ;; Return value:  Size  Location     Type
 25678 ;;                  1    wreg      enum E5266
 25679 ;; Registers used:
 25680 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25681 ;; Tracked objects:
 25682 ;;		On entry : 0/0
 25683 ;;		On exit  : 0/0
 25684 ;;		Unchanged: 0/0
 25685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25686 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25687 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25688 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25689 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 25690 ;;Total ram usage:       11 bytes
 25691 ;; Hardware stack levels used:    1
 25692 ;; Hardware stack levels required when called:    5
 25693 ;; This function calls:
 25694 ;;		_mfrc522_bal_read_reg
 25695 ;;		_mfrc522_bal_set_bit_reg
 25696 ;;		_mfrc522_bal_write_reg
 25697 ;;		_mfrc522_bal_write_reg_len
 25698 ;; This function is called by:
 25699 ;;		_pcd_comm_with_picc
 25700 ;;		_picc_select
 25701 ;;		_picc_halt_a
 25702 ;;		_mifare_read
 25703 ;;		_pcd_mifare_transceive
 25704 ;; This function uses a non-reentrant model
 25705 ;;
 25706                           
 25707                           
 25708                           ;psect for function _mfrc522_hal_calculate_crc
 25709  2DB0                     _mfrc522_hal_calculate_crc:	
 25710                           
 25711                           ;mfrc522_hal.c: 70: uint16_t i = 1847;
 25712                           
 25713                           ;incstack = 0
 25714                           ; Regs used in _mfrc522_hal_calculate_crc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 25715  2DB0  3037               	movlw	55
 25716  2DB1  0020               	movlb	0	; select bank0
 25717  2DB2  00AF               	movwf	mfrc522_hal_calculate_crc@i
 25718  2DB3  3007               	movlw	7
 25719  2DB4  00B0               	movwf	mfrc522_hal_calculate_crc@i+1
 25720                           
 25721                           ;mfrc522_hal.c: 71: uint8_t t8;
 25722                           ;mfrc522_hal.c: 72: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25723  2DB5  01F7               	clrf	mfrc522_bal_write_reg@x
 25724  2DB6  3001               	movlw	1
 25725  2DB7  31BB  23F2  31AD   	fcall	_mfrc522_bal_write_reg
 25726                           
 25727                           ;mfrc522_hal.c: 73: mfrc522_bal_write_reg(DivIrqReg, 0x04);
 25728  2DBA  3004               	movlw	4
 25729  2DBB  0020               	movlb	0	; select bank0
 25730  2DBC  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25731  2DBD  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25732  2DBE  00F7               	movwf	mfrc522_bal_write_reg@x
 25733  2DBF  3005               	movlw	5
 25734  2DC0  31BB  23F2  31AD   	fcall	_mfrc522_bal_write_reg
 25735                           
 25736                           ;mfrc522_hal.c: 74: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 25737  2DC3  3080               	movlw	128
 25738  2DC4  0020               	movlb	0	; select bank0
 25739  2DC5  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25740  2DC6  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25741  2DC7  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 25742  2DC8  300A               	movlw	10
 25743  2DC9  31BD  2525  31AD   	fcall	_mfrc522_bal_set_bit_reg
 25744                           
 25745                           ;mfrc522_hal.c: 75: mfrc522_bal_write_reg_len(FIFODataReg,data,length);
 25746  2DCC  0020               	movlb	0	; select bank0
 25747  2DCD  0827               	movf	mfrc522_hal_calculate_crc@data+1,w
 25748  2DCE  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 25749  2DCF  0826               	movf	mfrc522_hal_calculate_crc@data,w
 25750  2DD0  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 25751  2DD1  0828               	movf	mfrc522_hal_calculate_crc@length,w
 25752  2DD2  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25753  2DD3  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25754  2DD4  00A2               	movwf	mfrc522_bal_write_reg_len@len
 25755  2DD5  3009               	movlw	9
 25756  2DD6  31BF  2766  31AD   	fcall	_mfrc522_bal_write_reg_len
 25757                           
 25758                           ;mfrc522_hal.c: 76: mfrc522_bal_write_reg(CommandReg, PCD_CalcCRC);
 25759  2DD9  3003               	movlw	3
 25760  2DDA  0020               	movlb	0	; select bank0
 25761  2DDB  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25762  2DDC  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25763  2DDD  00F7               	movwf	mfrc522_bal_write_reg@x
 25764  2DDE  3001               	movlw	1
 25765  2DDF  31BB  23F2  31AD   	fcall	_mfrc522_bal_write_reg
 25766  2DE2                     l13111:	
 25767                           ;mfrc522_hal.c: 77: while(i)
 25768                           
 25769  2DE2  0020               	movlb	0	; select bank0
 25770  2DE3  082F               	movf	mfrc522_hal_calculate_crc@i,w
 25771  2DE4  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 25772  2DE5  1903               	btfsc	3,2
 25773  2DE6  2DF6               	goto	l13113
 25774                           
 25775                           ;mfrc522_hal.c: 78: {
 25776                           ;mfrc522_hal.c: 79: i--;
 25777  2DE7  3001               	movlw	1
 25778  2DE8  0020               	movlb	0	; select bank0
 25779  2DE9  02AF               	subwf	mfrc522_hal_calculate_crc@i,f
 25780  2DEA  3000               	movlw	0
 25781  2DEB  3BB0               	subwfb	mfrc522_hal_calculate_crc@i+1,f
 25782                           
 25783                           ;mfrc522_hal.c: 80: t8 = mfrc522_bal_read_reg(DivIrqReg);
 25784  2DEC  3005               	movlw	5
 25785  2DED  31BD  2585  31AD   	fcall	_mfrc522_bal_read_reg
 25786  2DF0  0020               	movlb	0	; select bank0
 25787  2DF1  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25788  2DF2  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25789  2DF3  00AE               	movwf	mfrc522_hal_calculate_crc@t8
 25790                           
 25791                           ;mfrc522_hal.c: 81: if (t8 & 0x04)break;
 25792  2DF4  1D2E               	btfss	mfrc522_hal_calculate_crc@t8,2
 25793  2DF5  2DE2               	goto	l13111
 25794  2DF6                     l13113:	
 25795                           
 25796                           ;mfrc522_hal.c: 82: }
 25797                           ;mfrc522_hal.c: 83: if(i==0)return STATUS_TIMEOUT;
 25798  2DF6  082F               	movf	mfrc522_hal_calculate_crc@i,w
 25799  2DF7  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 25800  2DF8  1D03               	btfss	3,2
 25801  2DF9  2DFC               	goto	l13119
 25802  2DFA  3003               	movlw	3
 25803  2DFB  0008               	return
 25804  2DFC                     l13119:	
 25805                           
 25806                           ;mfrc522_hal.c: 84: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 25807  2DFC  01F7               	clrf	mfrc522_bal_write_reg@x
 25808  2DFD  3001               	movlw	1
 25809  2DFE  31BB  23F2  31AD   	fcall	_mfrc522_bal_write_reg
 25810                           
 25811                           ;mfrc522_hal.c: 85: result[0] = mfrc522_bal_read_reg(CRCResultRegL);
 25812  2E01  3022               	movlw	34
 25813  2E02  31BD  2585  31AD   	fcall	_mfrc522_bal_read_reg
 25814  2E05  0020               	movlb	0	; select bank0
 25815  2E06  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25816  2E07  0829               	movf	mfrc522_hal_calculate_crc@result,w
 25817  2E08  0086               	movwf	6
 25818  2E09  082A               	movf	mfrc522_hal_calculate_crc@result+1,w
 25819  2E0A  0087               	movwf	7
 25820  2E0B  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25821  2E0C  0081               	movwf	1
 25822                           
 25823                           ;mfrc522_hal.c: 86: result[1] = mfrc522_bal_read_reg(CRCResultRegH);
 25824  2E0D  3021               	movlw	33
 25825  2E0E  31BD  2585         	fcall	_mfrc522_bal_read_reg
 25826  2E10  0020               	movlb	0	; select bank0
 25827  2E11  00AB               	movwf	??_mfrc522_hal_calculate_crc
 25828  2E12  0829               	movf	mfrc522_hal_calculate_crc@result,w
 25829  2E13  3E01               	addlw	1
 25830  2E14  00AC               	movwf	??_mfrc522_hal_calculate_crc+1
 25831  2E15  3000               	movlw	0
 25832  2E16  3D2A               	addwfc	mfrc522_hal_calculate_crc@result+1,w
 25833  2E17  00AD               	movwf	??_mfrc522_hal_calculate_crc+2
 25834  2E18  082C               	movf	??_mfrc522_hal_calculate_crc+1,w
 25835  2E19  0086               	movwf	6
 25836  2E1A  082D               	movf	??_mfrc522_hal_calculate_crc+2,w
 25837  2E1B  0087               	movwf	7
 25838  2E1C  082B               	movf	??_mfrc522_hal_calculate_crc,w
 25839  2E1D  0081               	movwf	1
 25840                           
 25841                           ;mfrc522_hal.c: 87: return STATUS_OK;
 25842  2E1E  3000               	movlw	0
 25843  2E1F  0008               	return
 25844  2E20                     __end_of_mfrc522_hal_calculate_crc:	
 25845                           
 25846                           	psect	text82
 25847  3F66                     __ptext82:	
 25848 ;; *************** function _mfrc522_bal_write_reg_len *****************
 25849 ;; Defined at:
 25850 ;;		line 59 in file "src/nfc/bal/mfrc522_bal.c"
 25851 ;; Parameters:    Size  Location     Type
 25852 ;;  reg             1    wreg     unsigned char 
 25853 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25854 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 25855 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(18), cardIncBuf(18), 
 25856 ;;		 -> cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25857 ;;  len             1    2[BANK0 ] unsigned char 
 25858 ;; Auto vars:     Size  Location     Type
 25859 ;;  reg             1    3[BANK0 ] unsigned char 
 25860 ;;  i               1    4[BANK0 ] unsigned char 
 25861 ;; Return value:  Size  Location     Type
 25862 ;;                  1    wreg      void 
 25863 ;; Registers used:
 25864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25865 ;; Tracked objects:
 25866 ;;		On entry : 0/0
 25867 ;;		On exit  : 0/0
 25868 ;;		Unchanged: 0/0
 25869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25870 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25872 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25873 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25874 ;;Total ram usage:        6 bytes
 25875 ;; Hardware stack levels used:    1
 25876 ;; Hardware stack levels required when called:    3
 25877 ;; This function calls:
 25878 ;;		_mfrc522_bal_write_read_via_spi
 25879 ;; This function is called by:
 25880 ;;		_mfrc522_hal_calculate_crc
 25881 ;;		_pcd_comm_with_picc
 25882 ;; This function uses a non-reentrant model
 25883 ;;
 25884                           
 25885                           
 25886                           ;psect for function _mfrc522_bal_write_reg_len
 25887  3F66                     _mfrc522_bal_write_reg_len:	
 25888                           
 25889                           ;incstack = 0
 25890                           ; Regs used in _mfrc522_bal_write_reg_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 25891                           ;mfrc522_bal_write_reg_len@reg stored from wreg
 25892  3F66  0020               	movlb	0	; select bank0
 25893  3F67  00A3               	movwf	mfrc522_bal_write_reg_len@reg
 25894                           
 25895                           ;mfrc522_bal.c: 61: uint8_t i;
 25896                           ;mfrc522_bal.c: 62: do { LATCbits.LATC2 = 0; } while(0);;
 25897  3F68  0022               	movlb	2	; select bank2
 25898  3F69  110E               	bcf	14,2	;volatile
 25899                           
 25900                           ;mfrc522_bal.c: 63: do { LATCbits.LATC3 = 0; } while(0);;
 25901  3F6A  118E               	bcf	14,3	;volatile
 25902                           
 25903                           ;mfrc522_bal.c: 64: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 25904  3F6B  0020               	movlb	0	; select bank0
 25905  3F6C  3523               	lslf	mfrc522_bal_write_reg_len@reg,w
 25906  3F6D  397E               	andlw	126
 25907  3F6E  3188  2000  31BF   	fcall	_mfrc522_bal_write_read_via_spi
 25908                           
 25909                           ;mfrc522_bal.c: 65: for(i=0;i<len;i++)
 25910  3F71  0020               	movlb	0	; select bank0
 25911  3F72  01A4               	clrf	mfrc522_bal_write_reg_len@i
 25912  3F73                     l12867:	
 25913  3F73  0822               	movf	mfrc522_bal_write_reg_len@len,w
 25914  3F74  0224               	subwf	mfrc522_bal_write_reg_len@i,w
 25915  3F75  1803               	btfsc	3,0
 25916  3F76  2F89               	goto	l2132
 25917                           
 25918                           ;mfrc522_bal.c: 66: {
 25919                           ;mfrc522_bal.c: 67: mfrc522_bal_write_read_via_spi(*buf++);
 25920  3F77  0820               	movf	mfrc522_bal_write_reg_len@buf,w
 25921  3F78  0086               	movwf	6
 25922  3F79  0821               	movf	mfrc522_bal_write_reg_len@buf+1,w
 25923  3F7A  0087               	movwf	7
 25924  3F7B  0801               	movf	1,w
 25925  3F7C  3188  2000  31BF   	fcall	_mfrc522_bal_write_read_via_spi
 25926  3F7F  3001               	movlw	1
 25927  3F80  0020               	movlb	0	; select bank0
 25928  3F81  07A0               	addwf	mfrc522_bal_write_reg_len@buf,f
 25929  3F82  3000               	movlw	0
 25930  3F83  3DA1               	addwfc	mfrc522_bal_write_reg_len@buf+1,f
 25931  3F84  3001               	movlw	1
 25932  3F85  00F7               	movwf	??_mfrc522_bal_write_reg_len
 25933  3F86  0877               	movf	??_mfrc522_bal_write_reg_len,w
 25934  3F87  07A4               	addwf	mfrc522_bal_write_reg_len@i,f
 25935  3F88  2F73               	goto	l12867
 25936  3F89                     l2132:	
 25937                           ;mfrc522_bal.c: 68: }
 25938                           ;mfrc522_bal.c: 69: do { LATCbits.LATC2 = 1; } while(0);;
 25939                           
 25940  3F89  0022               	movlb	2	; select bank2
 25941  3F8A  150E               	bsf	14,2	;volatile
 25942  3F8B  0008               	return
 25943  3F8C                     __end_of_mfrc522_bal_write_reg_len:	
 25944                           
 25945                           	psect	text83
 25946  3738                     __ptext83:	
 25947 ;; *************** function _mfrc522_bal_read_fifo_len_ex *****************
 25948 ;; Defined at:
 25949 ;;		line 117 in file "src/nfc/bal/mfrc522_bal.c"
 25950 ;; Parameters:    Size  Location     Type
 25951 ;;  reg             1    wreg     unsigned char 
 25952 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25953 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 25954 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 25955 ;;  len             1    2[BANK0 ] unsigned char 
 25956 ;;  rx_align        1    3[BANK0 ] unsigned char 
 25957 ;; Auto vars:     Size  Location     Type
 25958 ;;  reg             1    4[BANK0 ] unsigned char 
 25959 ;;  i               1    6[BANK0 ] unsigned char 
 25960 ;;  adr             1    5[BANK0 ] unsigned char 
 25961 ;; Return value:  Size  Location     Type
 25962 ;;                  1    wreg      void 
 25963 ;; Registers used:
 25964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25965 ;; Tracked objects:
 25966 ;;		On entry : 0/0
 25967 ;;		On exit  : 0/0
 25968 ;;		Unchanged: 0/0
 25969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25970 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25971 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25973 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0
 25974 ;;Total ram usage:        8 bytes
 25975 ;; Hardware stack levels used:    1
 25976 ;; Hardware stack levels required when called:    3
 25977 ;; This function calls:
 25978 ;;		_mfrc522_bal_write_read_via_spi
 25979 ;; This function is called by:
 25980 ;;		_pcd_comm_with_picc
 25981 ;; This function uses a non-reentrant model
 25982 ;;
 25983                           
 25984                           
 25985                           ;psect for function _mfrc522_bal_read_fifo_len_ex
 25986  3738                     _mfrc522_bal_read_fifo_len_ex:	
 25987                           
 25988                           ;incstack = 0
 25989                           ; Regs used in _mfrc522_bal_read_fifo_len_ex: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 25990                           ;mfrc522_bal_read_fifo_len_ex@reg stored from wreg
 25991  3738  0020               	movlb	0	; select bank0
 25992  3739  00A4               	movwf	mfrc522_bal_read_fifo_len_ex@reg
 25993                           
 25994                           ;mfrc522_bal.c: 119: uint8_t adr;
 25995                           ;mfrc522_bal.c: 120: uint8_t i;
 25996                           ;mfrc522_bal.c: 121: do { LATCbits.LATC2 = 0; } while(0);;
 25997  373A  0022               	movlb	2	; select bank2
 25998  373B  110E               	bcf	14,2	;volatile
 25999                           
 26000                           ;mfrc522_bal.c: 122: do { LATCbits.LATC3 = 0; } while(0);;
 26001  373C  118E               	bcf	14,3	;volatile
 26002                           
 26003                           ;mfrc522_bal.c: 123: adr=((reg<<1) & 0x7e) | 0x80;
 26004  373D  0020               	movlb	0	; select bank0
 26005  373E  3524               	lslf	mfrc522_bal_read_fifo_len_ex@reg,w
 26006  373F  397E               	andlw	126
 26007  3740  3880               	iorlw	128
 26008  3741  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26009  3742  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26010  3743  00A5               	movwf	mfrc522_bal_read_fifo_len_ex@adr
 26011                           
 26012                           ;mfrc522_bal.c: 124: mfrc522_bal_write_read_via_spi(adr);
 26013  3744  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 26014  3745  3188  2000  31B7   	fcall	_mfrc522_bal_write_read_via_spi
 26015                           
 26016                           ;mfrc522_bal.c: 125: for(i=0;i<len;i++)
 26017  3748  0020               	movlb	0	; select bank0
 26018  3749  01A6               	clrf	mfrc522_bal_read_fifo_len_ex@i
 26019  374A                     l13085:	
 26020  374A  0822               	movf	mfrc522_bal_read_fifo_len_ex@len,w
 26021  374B  0226               	subwf	mfrc522_bal_read_fifo_len_ex@i,w
 26022  374C  1803               	btfsc	3,0
 26023  374D  2F63               	goto	l2155
 26024                           
 26025                           ;mfrc522_bal.c: 126: {
 26026                           ;mfrc522_bal.c: 127: *buf++=mfrc522_bal_write_read_via_spi(adr);
 26027  374E  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 26028  374F  3188  2000  31B7   	fcall	_mfrc522_bal_write_read_via_spi
 26029  3752  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26030  3753  0020               	movlb	0	; select bank0
 26031  3754  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 26032  3755  0086               	movwf	6
 26033  3756  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 26034  3757  0087               	movwf	7
 26035  3758  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26036  3759  0081               	movwf	1
 26037  375A  3001               	movlw	1
 26038  375B  07A0               	addwf	mfrc522_bal_read_fifo_len_ex@buf,f
 26039  375C  3000               	movlw	0
 26040  375D  3DA1               	addwfc	mfrc522_bal_read_fifo_len_ex@buf+1,f
 26041  375E  3001               	movlw	1
 26042  375F  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26043  3760  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26044  3761  07A6               	addwf	mfrc522_bal_read_fifo_len_ex@i,f
 26045  3762  2F4A               	goto	l13085
 26046  3763                     l2155:	
 26047                           ;mfrc522_bal.c: 128: }
 26048                           ;mfrc522_bal.c: 129: do { LATCbits.LATC2 = 1; } while(0);;
 26049                           
 26050  3763  0022               	movlb	2	; select bank2
 26051  3764  150E               	bsf	14,2	;volatile
 26052                           
 26053                           ;mfrc522_bal.c: 130: i=TablerxAlign[rx_align];
 26054  3765  0020               	movlb	0	; select bank0
 26055  3766  0823               	movf	mfrc522_bal_read_fifo_len_ex@rx_align,w
 26056  3767  3E0F               	addlw	low (_TablerxAlign| (0+32768))
 26057  3768  0084               	movwf	4
 26058  3769  30B9               	movlw	high (_TablerxAlign| (0+32768))
 26059  376A  1803               	skipnc
 26060  376B  3E01               	addlw	1
 26061  376C  0085               	movwf	5
 26062  376D  0800               	movf	0,w	;code access
 26063  376E  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26064  376F  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26065  3770  00A6               	movwf	mfrc522_bal_read_fifo_len_ex@i
 26066                           
 26067                           ;mfrc522_bal.c: 131: buf[0] &= i;
 26068  3771  0826               	movf	mfrc522_bal_read_fifo_len_ex@i,w
 26069  3772  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 26070  3773  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 26071  3774  0086               	movwf	6
 26072  3775  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 26073  3776  0087               	movwf	7
 26074  3777  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 26075  3778  0581               	andwf	1,f
 26076  3779  0008               	return
 26077  377A                     __end_of_mfrc522_bal_read_fifo_len_ex:	
 26078                           
 26079                           	psect	text84
 26080  3BE2                     __ptext84:	
 26081 ;; *************** function _m_mem_set *****************
 26082 ;; Defined at:
 26083 ;;		line 32 in file "src/depend/m_string.c"
 26084 ;; Parameters:    Size  Location     Type
 26085 ;;  buf             2    3[COMMON] PTR unsigned char 
 26086 ;;		 -> pLCD(24), PiccUid(12), comBuffer(128), flashOpStr(21), 
 26087 ;;		 -> lcdBuf(9), 
 26088 ;;  x               1    5[COMMON] unsigned char 
 26089 ;;  len             1    6[COMMON] unsigned char 
 26090 ;; Auto vars:     Size  Location     Type
 26091 ;;		None
 26092 ;; Return value:  Size  Location     Type
 26093 ;;                  1    wreg      void 
 26094 ;; Registers used:
 26095 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 26096 ;; Tracked objects:
 26097 ;;		On entry : 0/0
 26098 ;;		On exit  : 0/0
 26099 ;;		Unchanged: 0/0
 26100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26101 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26104 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26105 ;;Total ram usage:        4 bytes
 26106 ;; Hardware stack levels used:    1
 26107 ;; Hardware stack levels required when called:    2
 26108 ;; This function calls:
 26109 ;;		Nothing
 26110 ;; This function is called by:
 26111 ;;		_ui_disp_str_num
 26112 ;;		_ui_disp_str_num_ex
 26113 ;;		_ui_disp_flow
 26114 ;;		_ui_disp_totale_v
 26115 ;;		_ui_disp_transfer_money
 26116 ;;		_ui_disp_balance_and_volume
 26117 ;;		_ui_disp_set_line
 26118 ;;		_ui_disp_set_price
 26119 ;;		_ui_disp_set_calib
 26120 ;;		_ui_key_process_down
 26121 ;;		_rfid_comm_process_read_header
 26122 ;;		_lcd_clear_buffer
 26123 ;;		_mfapi_is_new_card_present
 26124 ;; This function uses a non-reentrant model
 26125 ;;
 26126                           
 26127                           
 26128                           ;psect for function _m_mem_set
 26129  3BE2                     _m_mem_set:	
 26130  3BE2                     l12481:	
 26131                           ;m_string.c: 34: while(len--)
 26132                           
 26133                           ;incstack = 0
 26134                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
 26135                           
 26136  3BE2  3001               	movlw	1
 26137  3BE3  02F6               	subwf	m_mem_set@len,f
 26138  3BE4  0A76               	incf	m_mem_set@len,w
 26139  3BE5  1903               	btfsc	3,2
 26140  3BE6  0008               	return
 26141                           
 26142                           ;m_string.c: 35: {
 26143                           ;m_string.c: 36: *buf++=x;
 26144  3BE7  0873               	movf	m_mem_set@buf,w
 26145  3BE8  0086               	movwf	6
 26146  3BE9  0874               	movf	m_mem_set@buf+1,w
 26147  3BEA  0087               	movwf	7
 26148  3BEB  0875               	movf	m_mem_set@x,w
 26149  3BEC  0081               	movwf	1
 26150  3BED  3001               	movlw	1
 26151  3BEE  07F3               	addwf	m_mem_set@buf,f
 26152  3BEF  3000               	movlw	0
 26153  3BF0  3DF4               	addwfc	m_mem_set@buf+1,f
 26154  3BF1  2BE2               	goto	l12481
 26155  3BF2                     __end_of_m_mem_set:	
 26156                           
 26157                           	psect	text85
 26158  3FD9                     __ptext85:	
 26159 ;; *************** function _key_scan_call *****************
 26160 ;; Defined at:
 26161 ;;		line 7 in file "src/driver/key.c"
 26162 ;; Parameters:    Size  Location     Type
 26163 ;;		None
 26164 ;; Auto vars:     Size  Location     Type
 26165 ;;		None
 26166 ;; Return value:  Size  Location     Type
 26167 ;;                  1    wreg      void 
 26168 ;; Registers used:
 26169 ;;		wreg, status,2, status,0, pclath, cstack
 26170 ;; Tracked objects:
 26171 ;;		On entry : 0/0
 26172 ;;		On exit  : 0/0
 26173 ;;		Unchanged: 0/0
 26174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26177 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26178 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26179 ;;Total ram usage:        1 bytes
 26180 ;; Hardware stack levels used:    1
 26181 ;; Hardware stack levels required when called:    3
 26182 ;; This function calls:
 26183 ;;		_delay
 26184 ;; This function is called by:
 26185 ;;		_ui_key_waite_up
 26186 ;;		_ui_key_waite_up_ex
 26187 ;;		_key_process_up_down_variable_speed_ex
 26188 ;;		_ui_key_process
 26189 ;;		_rfid_comm_process
 26190 ;; This function uses a non-reentrant model
 26191 ;;
 26192                           
 26193                           
 26194                           ;psect for function _key_scan_call
 26195  3FD9                     _key_scan_call:	
 26196                           
 26197                           ;key.c: 9: KeyValue=0;
 26198                           
 26199                           ;incstack = 0
 26200                           ; Regs used in _key_scan_call: [wreg+status,2+status,0+pclath+cstack]
 26201  3FD9  0021               	movlb	1	; select bank1
 26202  3FDA  01C1               	clrf	_KeyValue^(0+128)
 26203                           
 26204                           ;key.c: 12: if((PORTB & 0x0e) != 0x0e){
 26205  3FDB  300E               	movlw	14
 26206  3FDC  0020               	movlb	0	; select bank0
 26207  3FDD  050D               	andwf	13,w	;volatile
 26208  3FDE  00F5               	movwf	??_key_scan_call
 26209  3FDF  300E               	movlw	14
 26210  3FE0  0675               	xorwf	??_key_scan_call,w
 26211  3FE1  1903               	btfsc	3,2
 26212  3FE2  0008               	return
 26213                           
 26214                           ;key.c: 15: delay(1847);;
 26215  3FE3  3037               	movlw	55
 26216  3FE4  00F3               	movwf	delay@t
 26217  3FE5  3007               	movlw	7
 26218  3FE6  00F4               	movwf	delay@t+1
 26219  3FE7  31BB  2389  31BF   	fcall	_delay
 26220                           
 26221                           ;key.c: 16: if((PORTB & 0x0e)!=0x0e)
 26222  3FEA  300E               	movlw	14
 26223  3FEB  0020               	movlb	0	; select bank0
 26224  3FEC  050D               	andwf	13,w	;volatile
 26225  3FED  00F5               	movwf	??_key_scan_call
 26226  3FEE  300E               	movlw	14
 26227  3FEF  0675               	xorwf	??_key_scan_call,w
 26228  3FF0  1903               	btfsc	3,2
 26229  3FF1  0008               	return
 26230                           
 26231                           ;key.c: 17: {
 26232                           ;key.c: 18: KeyValue=(PORTB & 0x0e);
 26233  3FF2  080D               	movf	13,w	;volatile
 26234  3FF3  390E               	andlw	14
 26235  3FF4  00F5               	movwf	??_key_scan_call
 26236  3FF5  0875               	movf	??_key_scan_call,w
 26237  3FF6  0021               	movlb	1	; select bank1
 26238  3FF7  00C1               	movwf	_KeyValue^(0+128)
 26239                           
 26240                           ;key.c: 19: KeyValue>>=1;
 26241  3FF8  1003               	clrc
 26242  3FF9  0CC1               	rrf	_KeyValue^(0+128),f
 26243                           
 26244                           ;key.c: 20: KeyValue = ~KeyValue;
 26245  3FFA  09C1               	comf	_KeyValue^(0+128),f
 26246                           
 26247                           ;key.c: 21: KeyValue &=0x07;
 26248  3FFB  3007               	movlw	7
 26249  3FFC  00F5               	movwf	??_key_scan_call
 26250  3FFD  0875               	movf	??_key_scan_call,w
 26251  3FFE  05C1               	andwf	_KeyValue^(0+128),f
 26252  3FFF  0008               	return
 26253  4000                     __end_of_key_scan_call:	
 26254                           
 26255                           	psect	text86
 26256  3F1D                     __ptext86:	
 26257 ;; *************** function _in_app_vavle_on *****************
 26258 ;; Defined at:
 26259 ;;		line 43 in file "src/app/flow.c"
 26260 ;; Parameters:    Size  Location     Type
 26261 ;;  op              1    wreg     enum E5863
 26262 ;; Auto vars:     Size  Location     Type
 26263 ;;  op              1    5[COMMON] enum E5863
 26264 ;; Return value:  Size  Location     Type
 26265 ;;                  1    wreg      void 
 26266 ;; Registers used:
 26267 ;;		wreg, status,2, status,0, pclath, cstack
 26268 ;; Tracked objects:
 26269 ;;		On entry : 0/0
 26270 ;;		On exit  : 0/0
 26271 ;;		Unchanged: 0/0
 26272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26273 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26274 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26275 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26276 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26277 ;;Total ram usage:        2 bytes
 26278 ;; Hardware stack levels used:    1
 26279 ;; Hardware stack levels required when called:    3
 26280 ;; This function calls:
 26281 ;;		_valve_on
 26282 ;; This function is called by:
 26283 ;;		_rfid_comm_process
 26284 ;;		_main
 26285 ;; This function uses a non-reentrant model
 26286 ;;
 26287                           
 26288                           
 26289                           ;psect for function _in_app_vavle_on
 26290  3F1D                     _in_app_vavle_on:	
 26291                           
 26292                           ;incstack = 0
 26293                           ; Regs used in _in_app_vavle_on: [wreg+status,2+status,0+pclath+cstack]
 26294                           ;in_app_vavle_on@op stored from wreg
 26295  3F1D  00F5               	movwf	in_app_vavle_on@op
 26296                           
 26297                           ;flow.c: 45: if(cardReadingFlag)return ;
 26298  3F1E  0022               	movlb	2	; select bank2
 26299  3F1F  083B               	movf	_cardReadingFlag^(0+256),w
 26300  3F20  1D03               	btfss	3,2
 26301  3F21  0008               	return
 26302                           
 26303                           ;flow.c: 46: if(op==ON_REASON_HA && opReason==OFF_REASON_MAN)return;
 26304  3F22  3003               	movlw	3
 26305  3F23  0675               	xorwf	in_app_vavle_on@op,w
 26306  3F24  1D03               	btfss	3,2
 26307  3F25  2F2B               	goto	l15183
 26308  3F26  3002               	movlw	2
 26309  3F27  0021               	movlb	1	; select bank1
 26310  3F28  0644               	xorwf	_opReason^(0+128),w	;volatile
 26311  3F29  1903               	btfsc	3,2
 26312  3F2A  0008               	return
 26313  3F2B                     l15183:	
 26314                           
 26315                           ;flow.c: 47: if(valveStatus==VALVE_OPENED || valveStatus==VALVE_OPENING || valveStatus==
      +                          VALVE_CLOSEING)return;
 26316  3F2B  3002               	movlw	2
 26317  3F2C  067A               	xorwf	_valveStatus,w
 26318  3F2D  1903               	btfsc	3,2
 26319  3F2E  0008               	return
 26320  3F2F  3003               	movlw	3
 26321  3F30  067A               	xorwf	_valveStatus,w
 26322  3F31  1903               	btfsc	3,2
 26323  3F32  0008               	return
 26324  3F33  3004               	movlw	4
 26325  3F34  067A               	xorwf	_valveStatus,w
 26326  3F35  1903               	btfsc	3,2
 26327  3F36  0008               	return
 26328                           
 26329                           ;flow.c: 48: if(deviceStatus.bits.acPowerDown)return;
 26330  3F37  0021               	movlb	1	; select bank1
 26331  3F38  19C0               	btfsc	_deviceStatus^(0+128),3
 26332  3F39  0008               	return
 26333                           
 26334                           ;flow.c: 50: opReason=op;
 26335  3F3A  0875               	movf	in_app_vavle_on@op,w
 26336  3F3B  00F4               	movwf	??_in_app_vavle_on
 26337  3F3C  0874               	movf	??_in_app_vavle_on,w
 26338  3F3D  00C4               	movwf	_opReason^(0+128)	;volatile
 26339                           
 26340                           ;flow.c: 51: valve_on();
 26341  3F3E  31BB  2309         	fcall	_valve_on
 26342  3F40  0008               	return
 26343  3F41                     __end_of_in_app_vavle_on:	
 26344                           
 26345                           	psect	text87
 26346  3B09                     __ptext87:	
 26347 ;; *************** function _valve_on *****************
 26348 ;; Defined at:
 26349 ;;		line 12 in file "src/driver/other-gpio.c"
 26350 ;; Parameters:    Size  Location     Type
 26351 ;;		None
 26352 ;; Auto vars:     Size  Location     Type
 26353 ;;		None
 26354 ;; Return value:  Size  Location     Type
 26355 ;;                  1    wreg      void 
 26356 ;; Registers used:
 26357 ;;		wreg, status,2
 26358 ;; Tracked objects:
 26359 ;;		On entry : 0/0
 26360 ;;		On exit  : 0/0
 26361 ;;		Unchanged: 0/0
 26362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26366 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26367 ;;Total ram usage:        1 bytes
 26368 ;; Hardware stack levels used:    1
 26369 ;; Hardware stack levels required when called:    2
 26370 ;; This function calls:
 26371 ;;		Nothing
 26372 ;; This function is called by:
 26373 ;;		_in_app_vavle_on
 26374 ;; This function uses a non-reentrant model
 26375 ;;
 26376                           
 26377                           
 26378                           ;psect for function _valve_on
 26379  3B09                     _valve_on:	
 26380                           
 26381                           ;incstack = 0
 26382                           ; Regs used in _valve_on: [wreg+status,2]
 26383                           ;other-gpio.c: 17: do { LATDbits.LATD7 = 1; } while(0);
 26384  3B09  0022               	movlb	2	; select bank2
 26385  3B0A  178F               	bsf	15,7	;volatile
 26386                           
 26387                           ;other-gpio.c: 18: valveStatus=VALVE_OPENING;
 26388  3B0B  3003               	movlw	3
 26389  3B0C  00F3               	movwf	??_valve_on
 26390  3B0D  0873               	movf	??_valve_on,w
 26391  3B0E  00FA               	movwf	_valveStatus
 26392                           
 26393                           ;other-gpio.c: 19: valveTimer=0;
 26394  3B0F  01B6               	clrf	_valveTimer^(0+256)
 26395  3B10  0008               	return
 26396  3B11                     __end_of_valve_on:	
 26397                           
 26398                           	psect	text88
 26399  3B1A                     __ptext88:	
 26400 ;; *************** function _my_uart1_received_ready *****************
 26401 ;; Defined at:
 26402 ;;		line 96 in file "mcc_generated_files/eusart1.c"
 26403 ;; Parameters:    Size  Location     Type
 26404 ;;		None
 26405 ;; Auto vars:     Size  Location     Type
 26406 ;;		None
 26407 ;; Return value:  Size  Location     Type
 26408 ;;                  1    wreg      void 
 26409 ;; Registers used:
 26410 ;;		status,2
 26411 ;; Tracked objects:
 26412 ;;		On entry : 0/0
 26413 ;;		On exit  : 0/0
 26414 ;;		Unchanged: 0/0
 26415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26419 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26420 ;;Total ram usage:        0 bytes
 26421 ;; Hardware stack levels used:    1
 26422 ;; Hardware stack levels required when called:    2
 26423 ;; This function calls:
 26424 ;;		Nothing
 26425 ;; This function is called by:
 26426 ;;		_main
 26427 ;; This function uses a non-reentrant model
 26428 ;;
 26429                           
 26430                           
 26431                           ;psect for function _my_uart1_received_ready
 26432  3B1A                     _my_uart1_received_ready:	
 26433                           
 26434                           ;eusart1.c: 99: PIE1bits.RC1IE = 0;
 26435                           
 26436                           ;incstack = 0
 26437                           ; Regs used in _my_uart1_received_ready: [status,2]
 26438  3B1A  0021               	movlb	1	; select bank1
 26439  3B1B  1291               	bcf	17,5	;volatile
 26440                           
 26441                           ;eusart1.c: 104: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 26442  3B1C  0022               	movlb	2	; select bank2
 26443  3B1D  120C               	bcf	12,4	;volatile
 26444                           
 26445                           ;eusart1.c: 106: uart1ReceivedCount=0;
 26446  3B1E  01AC               	clrf	_uart1ReceivedCount^(0+256)
 26447  3B1F  01AD               	clrf	(_uart1ReceivedCount+1)^(0+256)
 26448                           
 26449                           ;eusart1.c: 108: PIE1bits.RC1IE = 1;
 26450  3B20  0021               	movlb	1	; select bank1
 26451  3B21  1691               	bsf	17,5	;volatile
 26452  3B22  0008               	return
 26453  3B23                     __end_of_my_uart1_received_ready:	
 26454                           
 26455                           	psect	text89
 26456  2B64                     __ptext89:	
 26457 ;; *************** function _modbus_response_process *****************
 26458 ;; Defined at:
 26459 ;;		line 237 in file "src/api/modbus.c"
 26460 ;; Parameters:    Size  Location     Type
 26461 ;;  rbuf            1    wreg     PTR unsigned char 
 26462 ;;		 -> uart1Buffer(80), 
 26463 ;;  rlen            2   46[BANK0 ] unsigned int 
 26464 ;; Auto vars:     Size  Location     Type
 26465 ;;  rbuf            1   51[BANK0 ] PTR unsigned char 
 26466 ;;		 -> uart1Buffer(80), 
 26467 ;;  pmdbs           1   50[BANK0 ] PTR struct .
 26468 ;;		 -> uart1Buffer(80), 
 26469 ;;  resp            1   49[BANK0 ] unsigned char 
 26470 ;; Return value:  Size  Location     Type
 26471 ;;                  1    wreg      void 
 26472 ;; Registers used:
 26473 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26474 ;; Tracked objects:
 26475 ;;		On entry : 0/0
 26476 ;;		On exit  : 0/0
 26477 ;;		Unchanged: 0/0
 26478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26479 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 26480 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 26481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 26482 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 26483 ;;Total ram usage:        6 bytes
 26484 ;; Hardware stack levels used:    1
 26485 ;; Hardware stack levels required when called:    6
 26486 ;; This function calls:
 26487 ;;		_crc_verify
 26488 ;;		_modbus_response_command
 26489 ;;		_modbus_response_illgeal_function
 26490 ;;		_modbus_response_read_clib_data
 26491 ;;		_modbus_response_write_clib_data
 26492 ;;		_modbus_response_write_single_register
 26493 ;; This function is called by:
 26494 ;;		_main
 26495 ;; This function uses a non-reentrant model
 26496 ;;
 26497                           
 26498                           
 26499                           ;psect for function _modbus_response_process
 26500  2B64                     _modbus_response_process:	
 26501                           
 26502                           ;incstack = 0
 26503                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26504                           ;modbus_response_process@rbuf stored from wreg
 26505  2B64  0020               	movlb	0	; select bank0
 26506  2B65  00D3               	movwf	modbus_response_process@rbuf
 26507                           
 26508                           ;modbus.c: 238: uint8_t resp=0;
 26509  2B66  01D1               	clrf	modbus_response_process@resp
 26510                           
 26511                           ;modbus.c: 239: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 26512  2B67  0853               	movf	modbus_response_process@rbuf,w
 26513  2B68  00D0               	movwf	??_modbus_response_process
 26514  2B69  0850               	movf	??_modbus_response_process,w
 26515  2B6A  00D2               	movwf	modbus_response_process@pmdbs
 26516                           
 26517                           ;modbus.c: 241: if(!( pmdbs->addr==mainSystemData.shortID || pmdbs->addr!=0x00))return;
 26518  2B6B  0852               	movf	modbus_response_process@pmdbs,w
 26519  2B6C  0086               	movwf	6
 26520  2B6D  3004               	movlw	4	; select bank8/9
 26521  2B6E  0087               	movwf	7
 26522  2B6F  0801               	movf	1,w
 26523  2B70  0024               	movlb	4	; select bank4
 26524  2B71  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 26525  2B72  1903               	skipnz
 26526  2B73  2B7C               	goto	l16051
 26527  2B74  0020               	movlb	0	; select bank0
 26528  2B75  0852               	movf	modbus_response_process@pmdbs,w
 26529  2B76  0086               	movwf	6
 26530  2B77  3004               	movlw	4	; select bank8/9
 26531  2B78  0087               	movwf	7
 26532  2B79  0801               	movf	1,w
 26533  2B7A  1903               	btfsc	3,2
 26534  2B7B  0008               	return
 26535  2B7C                     l16051:	
 26536                           
 26537                           ;modbus.c: 242: if(!(crc_verify(rbuf,rlen)))return ;
 26538  2B7C  0020               	movlb	0	; select bank0
 26539  2B7D  0853               	movf	modbus_response_process@rbuf,w
 26540  2B7E  00A8               	movwf	crc_verify@message
 26541  2B7F  3004               	movlw	4
 26542  2B80  00A9               	movwf	crc_verify@message+1
 26543  2B81  084F               	movf	modbus_response_process@rlen+1,w
 26544  2B82  00AB               	movwf	crc_verify@n+1
 26545  2B83  084E               	movf	modbus_response_process@rlen,w
 26546  2B84  00AA               	movwf	crc_verify@n
 26547  2B85  31B5  255A  31AB   	fcall	_crc_verify
 26548  2B88  3A00               	xorlw	0
 26549  2B89  1903               	btfsc	3,2
 26550  2B8A  0008               	return
 26551  2B8B  2BA7               	goto	l16067
 26552  2B8C                     l16055:	
 26553                           ;modbus.c: 245: case 0x03:
 26554                           
 26555                           ;modbus.c: 244: switch(pmdbs->func){
 26556                           
 26557                           
 26558                           ;modbus.c: 246: modbus_response_command(rbuf);
 26559  2B8C  0020               	movlb	0	; select bank0
 26560  2B8D  0853               	movf	modbus_response_process@rbuf,w
 26561  2B8E  31A5  25DD         	fcall	_modbus_response_command
 26562                           
 26563                           ;modbus.c: 247: break;
 26564  2B90  0008               	return
 26565  2B91                     l16057:	
 26566                           ;modbus.c: 248: case 0x06:
 26567                           
 26568                           
 26569                           ;modbus.c: 249: modbus_response_write_single_register(rbuf);
 26570  2B91  0020               	movlb	0	; select bank0
 26571  2B92  0853               	movf	modbus_response_process@rbuf,w
 26572  2B93  3199  213B         	fcall	_modbus_response_write_single_register
 26573                           
 26574                           ;modbus.c: 250: break;
 26575  2B95  0008               	return
 26576  2B96                     l16059:	
 26577                           ;modbus.c: 251: case 103:
 26578                           
 26579                           
 26580                           ;modbus.c: 252: modbus_response_read_clib_data(rbuf);
 26581  2B96  0020               	movlb	0	; select bank0
 26582  2B97  0853               	movf	modbus_response_process@rbuf,w
 26583  2B98  319A  22CD         	fcall	_modbus_response_read_clib_data
 26584                           
 26585                           ;modbus.c: 253: break;
 26586  2B9A  0008               	return
 26587  2B9B                     l16061:	
 26588                           ;modbus.c: 254: case 101:
 26589                           
 26590                           
 26591                           ;modbus.c: 255: case 110:
 26592                           ;modbus.c: 256: modbus_response_write_clib_data(rbuf);
 26593  2B9B  0020               	movlb	0	; select bank0
 26594  2B9C  0853               	movf	modbus_response_process@rbuf,w
 26595  2B9D  31A4  2490         	fcall	_modbus_response_write_clib_data
 26596                           
 26597                           ;modbus.c: 257: break;
 26598  2B9F  0008               	return
 26599  2BA0                     l16063:	
 26600                           ;modbus.c: 276: default:
 26601                           
 26602                           
 26603                           ;modbus.c: 277: modbus_response_illgeal_function(rbuf,0x01);break;
 26604  2BA0  0020               	movlb	0	; select bank0
 26605  2BA1  01B3               	clrf	modbus_response_illgeal_function@errcode
 26606  2BA2  0AB3               	incf	modbus_response_illgeal_function@errcode,f
 26607  2BA3  0853               	movf	modbus_response_process@rbuf,w
 26608  2BA4  31B6  263C         	fcall	_modbus_response_illgeal_function
 26609                           
 26610                           ;modbus.c: 278: }
 26611  2BA6  0008               	return
 26612  2BA7                     l16067:	
 26613  2BA7  0020               	movlb	0	; select bank0
 26614  2BA8  0A52               	incf	modbus_response_process@pmdbs,w
 26615  2BA9  0086               	movwf	6
 26616  2BAA  3004               	movlw	4	; select bank8/9
 26617  2BAB  0087               	movwf	7
 26618  2BAC  0801               	movf	1,w
 26619                           
 26620                           ; Switch size 1, requested type "space"
 26621                           ; Number of cases is 5, Range of values is 3 to 110
 26622                           ; switch strategies available:
 26623                           ; Name         Instructions Cycles
 26624                           ; simple_byte           16     9 (average)
 26625                           ; direct_byte          225     9 (fixed)
 26626                           ; jumptable            263     9 (fixed)
 26627                           ;	Chosen strategy is simple_byte
 26628  2BAD  3A03               	xorlw	3	; case 3
 26629  2BAE  1903               	skipnz
 26630  2BAF  2B8C               	goto	l16055
 26631  2BB0  3A05               	xorlw	5	; case 6
 26632  2BB1  1903               	skipnz
 26633  2BB2  2B91               	goto	l16057
 26634  2BB3  3A63               	xorlw	99	; case 101
 26635  2BB4  1903               	skipnz
 26636  2BB5  2B9B               	goto	l16061
 26637  2BB6  3A02               	xorlw	2	; case 103
 26638  2BB7  1903               	skipnz
 26639  2BB8  2B96               	goto	l16059
 26640  2BB9  3A09               	xorlw	9	; case 110
 26641  2BBA  1903               	skipnz
 26642  2BBB  2B9B               	goto	l16061
 26643  2BBC  2BA0               	goto	l16063
 26644  2BBD  0008               	return
 26645  2BBE                     __end_of_modbus_response_process:	
 26646                           
 26647                           	psect	text90
 26648  193B                     __ptext90:	
 26649 ;; *************** function _modbus_response_write_single_register *****************
 26650 ;; Defined at:
 26651 ;;		line 111 in file "src/api/modbus.c"
 26652 ;; Parameters:    Size  Location     Type
 26653 ;;  rbuf            1    wreg     PTR unsigned char 
 26654 ;;		 -> uart1Buffer(80), 
 26655 ;; Auto vars:     Size  Location     Type
 26656 ;;  rbuf            1   28[BANK0 ] PTR unsigned char 
 26657 ;;		 -> uart1Buffer(80), 
 26658 ;;  startAddr       2   25[BANK0 ] unsigned int 
 26659 ;;  pmdbs           1   27[BANK0 ] PTR struct .
 26660 ;;		 -> uart1Buffer(80), 
 26661 ;;  len             1   24[BANK0 ] unsigned char 
 26662 ;; Return value:  Size  Location     Type
 26663 ;;                  1    wreg      void 
 26664 ;; Registers used:
 26665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26666 ;; Tracked objects:
 26667 ;;		On entry : 0/0
 26668 ;;		On exit  : 0/0
 26669 ;;		Unchanged: 0/0
 26670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26672 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 26673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 26674 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 26675 ;;Total ram usage:        7 bytes
 26676 ;; Hardware stack levels used:    1
 26677 ;; Hardware stack levels required when called:    5
 26678 ;; This function calls:
 26679 ;;		_crc_append
 26680 ;;		_modbus_response_illgeal_function
 26681 ;;		_my_uart1_send_poll
 26682 ;; This function is called by:
 26683 ;;		_modbus_response_process
 26684 ;; This function uses a non-reentrant model
 26685 ;;
 26686                           
 26687                           
 26688                           ;psect for function _modbus_response_write_single_register
 26689  193B                     _modbus_response_write_single_register:	
 26690                           
 26691                           ;incstack = 0
 26692                           ; Regs used in _modbus_response_write_single_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 26693                           ;modbus_response_write_single_register@rbuf stored from wreg
 26694  193B  0020               	movlb	0	; select bank0
 26695  193C  00BC               	movwf	modbus_response_write_single_register@rbuf
 26696                           
 26697                           ;modbus.c: 113: uint16_t startAddr=0;
 26698  193D  01B9               	clrf	modbus_response_write_single_register@startAddr
 26699  193E  01BA               	clrf	modbus_response_write_single_register@startAddr+1
 26700                           
 26701                           ;modbus.c: 114: uint8_t len=0;
 26702  193F  01B8               	clrf	modbus_response_write_single_register@len
 26703                           
 26704                           ;modbus.c: 115: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 26705  1940  083C               	movf	modbus_response_write_single_register@rbuf,w
 26706  1941  00B6               	movwf	??_modbus_response_write_single_register
 26707  1942  0836               	movf	??_modbus_response_write_single_register,w
 26708  1943  00BB               	movwf	modbus_response_write_single_register@pmdbs
 26709                           
 26710                           ;modbus.c: 116: if(pmdbs->addr!=mainSystemData.shortID)return;
 26711  1944  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26712  1945  0086               	movwf	6
 26713  1946  3004               	movlw	4	; select bank8/9
 26714  1947  0087               	movwf	7
 26715  1948  0801               	movf	1,w
 26716  1949  0024               	movlb	4	; select bank4
 26717  194A  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 26718  194B  1D03               	btfss	3,2
 26719  194C  0008               	return
 26720                           
 26721                           ;modbus.c: 117: startAddr=pmdbs->addr_hi;
 26722  194D  0020               	movlb	0	; select bank0
 26723  194E  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26724  194F  3E02               	addlw	2
 26725  1950  0086               	movwf	6
 26726  1951  3004               	movlw	4	; select bank8/9
 26727  1952  0087               	movwf	7
 26728  1953  0801               	movf	1,w
 26729  1954  00B6               	movwf	??_modbus_response_write_single_register
 26730  1955  01B7               	clrf	??_modbus_response_write_single_register+1
 26731  1956  0836               	movf	??_modbus_response_write_single_register,w
 26732  1957  00B9               	movwf	modbus_response_write_single_register@startAddr
 26733  1958  0837               	movf	??_modbus_response_write_single_register+1,w
 26734  1959  00BA               	movwf	modbus_response_write_single_register@startAddr+1
 26735                           
 26736                           ;modbus.c: 118: startAddr<<=8;
 26737  195A  3008               	movlw	8
 26738  195B                     u13565:	
 26739  195B  35B9               	lslf	modbus_response_write_single_register@startAddr,f
 26740  195C  0DBA               	rlf	modbus_response_write_single_register@startAddr+1,f
 26741  195D  0B89               	decfsz	9,f
 26742  195E  295B               	goto	u13565
 26743                           
 26744                           ;modbus.c: 119: startAddr |= pmdbs->addr_lo;
 26745  195F  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26746  1960  3E03               	addlw	3
 26747  1961  0086               	movwf	6
 26748  1962  3004               	movlw	4	; select bank8/9
 26749  1963  0087               	movwf	7
 26750  1964  0801               	movf	1,w
 26751  1965  00B6               	movwf	??_modbus_response_write_single_register
 26752  1966  01B7               	clrf	??_modbus_response_write_single_register+1
 26753  1967  0836               	movf	??_modbus_response_write_single_register,w
 26754  1968  04B9               	iorwf	modbus_response_write_single_register@startAddr,f
 26755  1969  0837               	movf	??_modbus_response_write_single_register+1,w
 26756  196A  04BA               	iorwf	modbus_response_write_single_register@startAddr+1,f
 26757                           
 26758                           ;modbus.c: 123: switch( startAddr & 0xff){
 26759  196B  29C3               	goto	l15025
 26760  196C                     l14995:	
 26761                           ;modbus.c: 124: case 0x02:
 26762                           
 26763                           
 26764                           ;modbus.c: 125: if((rbuf[5]&0x04)==0){
 26765  196C  083C               	movf	modbus_response_write_single_register@rbuf,w
 26766  196D  3E05               	addlw	5
 26767  196E  0086               	movwf	6
 26768  196F  3004               	movlw	4	; select bank8/9
 26769  1970  0087               	movwf	7
 26770  1971  1901               	btfsc	1,2
 26771  1972  29D7               	goto	l15027
 26772                           
 26773                           ;modbus.c: 126: deviceStatus.bits.doorOpen=0;
 26774  1973  0021               	movlb	1	; select bank1
 26775  1974  1140               	bcf	_deviceStatus^(0+128),2
 26776                           
 26777                           ;modbus.c: 127: }
 26778                           ;modbus.c: 128: break;
 26779  1975  29D7               	goto	l15027
 26780  1976                     l14999:	
 26781                           ;modbus.c: 129: case 0x09:
 26782                           
 26783                           
 26784                           ;modbus.c: 130: if(flashOpStr.op==enFLASH_NOTHING){
 26785  1976  0022               	movlb	2	; select bank2
 26786  1977  0857               	movf	(_flashOpStr^(0+256)+20),w
 26787  1978  1D03               	btfss	3,2
 26788  1979  29B1               	goto	l15015
 26789                           
 26790                           ;modbus.c: 131: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->price));
 26791  197A  3012               	movlw	18
 26792  197B  00C3               	movwf	_flashOpStr^(0+256)
 26793  197C  3000               	movlw	0
 26794  197D  00C4               	movwf	(_flashOpStr+1)^(0+256)
 26795                           
 26796                           ;modbus.c: 132: flashOpStr.len=2;
 26797  197E  3002               	movlw	2
 26798  197F  00C5               	movwf	(_flashOpStr^(0+256)+2)
 26799  1980  3000               	movlw	0
 26800  1981  00C6               	movwf	(_flashOpStr^(0+256)+3)
 26801                           
 26802                           ;modbus.c: 133: flashOpStr.buf[0]=rbuf[5];
 26803  1982  0020               	movlb	0	; select bank0
 26804  1983  083C               	movf	modbus_response_write_single_register@rbuf,w
 26805  1984  0086               	movwf	6
 26806  1985  3004               	movlw	4	; select bank8/9
 26807  1986  0087               	movwf	7
 26808  1987  3004               	movlw	4	; select bank8/9
 26809  1988  3F45               	moviw [5]fsr1
 26810  1989  0022               	movlb	2	; select bank2
 26811  198A  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26812                           
 26813                           ;modbus.c: 134: flashOpStr.buf[1]=rbuf[4];
 26814  198B  0020               	movlb	0	; select bank0
 26815  198C  083C               	movf	modbus_response_write_single_register@rbuf,w
 26816  198D  0086               	movwf	6
 26817  198E  3004               	movlw	4	; select bank8/9
 26818  198F  0087               	movwf	7
 26819  1990  3004               	movlw	4	; select bank8/9
 26820  1991  3F44               	moviw [4]fsr1
 26821  1992  0022               	movlb	2	; select bank2
 26822  1993  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26823                           
 26824                           ;modbus.c: 135: if(*((uint16_t*)(flashOpStr.buf))>1000){*((uint16_t*)(flashOpStr.buf))=1
      +                          000;}
 26825  1994  3003               	movlw	3
 26826  1995  0248               	subwf	((_flashOpStr+1)^(0+256)+4),w
 26827  1996  30E9               	movlw	233
 26828  1997  1903               	skipnz
 26829  1998  0247               	subwf	(_flashOpStr^(0+256)+4),w
 26830  1999  1C03               	skipc
 26831  199A  299F               	goto	l789
 26832  199B  30E8               	movlw	232
 26833  199C  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26834  199D  3003               	movlw	3
 26835  199E  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26836  199F                     l789:	
 26837                           
 26838                           ;modbus.c: 136: if(*((uint16_t*)(flashOpStr.buf))<10){*((uint16_t*)(flashOpStr.buf))=10;
      +                          }
 26839  199F  3000               	movlw	0
 26840  19A0  0248               	subwf	((_flashOpStr+1)^(0+256)+4),w
 26841  19A1  300A               	movlw	10
 26842  19A2  1903               	skipnz
 26843  19A3  0247               	subwf	(_flashOpStr^(0+256)+4),w
 26844  19A4  1803               	skipnc
 26845  19A5  29AA               	goto	l790
 26846  19A6  300A               	movlw	10
 26847  19A7  00C7               	movwf	(_flashOpStr^(0+256)+4)
 26848  19A8  3000               	movlw	0
 26849  19A9  00C8               	movwf	(_flashOpStr^(0+256)+5)
 26850  19AA                     l790:	
 26851                           
 26852                           ;modbus.c: 138: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 26853  19AA  3002               	movlw	2
 26854  19AB  0020               	movlb	0	; select bank0
 26855  19AC  00B6               	movwf	??_modbus_response_write_single_register
 26856  19AD  0836               	movf	??_modbus_response_write_single_register,w
 26857  19AE  0022               	movlb	2	; select bank2
 26858  19AF  00D7               	movwf	(_flashOpStr^(0+256)+20)
 26859                           
 26860                           ;modbus.c: 139: }else{
 26861  19B0  29D7               	goto	l15027
 26862  19B1                     l15015:	
 26863                           
 26864                           ;modbus.c: 140: modbus_response_illgeal_function(rbuf,4);
 26865  19B1  3004               	movlw	4
 26866  19B2  0020               	movlb	0	; select bank0
 26867  19B3  00B6               	movwf	??_modbus_response_write_single_register
 26868  19B4  0836               	movf	??_modbus_response_write_single_register,w
 26869  19B5  00B3               	movwf	modbus_response_illgeal_function@errcode
 26870  19B6  083C               	movf	modbus_response_write_single_register@rbuf,w
 26871  19B7  31B6  263C         	fcall	_modbus_response_illgeal_function
 26872                           
 26873                           ;modbus.c: 141: return;
 26874  19B9  0008               	return
 26875  19BA                     l15019:	
 26876                           ;modbus.c: 144: default:
 26877                           
 26878                           ;modbus.c: 142: }
 26879                           ;modbus.c: 143: break;
 26880                           
 26881                           
 26882                           ;modbus.c: 145: modbus_response_illgeal_function(rbuf,0x02);
 26883  19BA  3002               	movlw	2
 26884  19BB  0020               	movlb	0	; select bank0
 26885  19BC  00B6               	movwf	??_modbus_response_write_single_register
 26886  19BD  0836               	movf	??_modbus_response_write_single_register,w
 26887  19BE  00B3               	movwf	modbus_response_illgeal_function@errcode
 26888  19BF  083C               	movf	modbus_response_write_single_register@rbuf,w
 26889  19C0  31B6  263C         	fcall	_modbus_response_illgeal_function
 26890                           
 26891                           ;modbus.c: 146: return;
 26892  19C2  0008               	return
 26893  19C3                     l15025:	
 26894                           ;modbus.c: 147: }
 26895                           
 26896  19C3  30FF               	movlw	255
 26897  19C4  0020               	movlb	0	; select bank0
 26898  19C5  0539               	andwf	modbus_response_write_single_register@startAddr,w
 26899  19C6  00B6               	movwf	??_modbus_response_write_single_register
 26900  19C7  3000               	movlw	0
 26901  19C8  053A               	andwf	modbus_response_write_single_register@startAddr+1,w
 26902  19C9  00B7               	movwf	??_modbus_response_write_single_register+1
 26903                           
 26904                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 26905                           ; Switch size 1, requested type "space"
 26906                           ; Number of cases is 1, Range of values is 0 to 0
 26907                           ; switch strategies available:
 26908                           ; Name         Instructions Cycles
 26909                           ; simple_byte            4     3 (average)
 26910                           ; direct_byte            8     6 (fixed)
 26911                           ; jumptable            260     6 (fixed)
 26912                           ;	Chosen strategy is simple_byte
 26913  19CA  0837               	movf	??_modbus_response_write_single_register+1,w
 26914  19CB  3A00               	xorlw	0	; case 0
 26915  19CC  1903               	skipnz
 26916  19CD  29CF               	goto	l17359
 26917  19CE  29BA               	goto	l15019
 26918  19CF                     l17359:	
 26919                           
 26920                           ; Switch size 1, requested type "space"
 26921                           ; Number of cases is 2, Range of values is 2 to 9
 26922                           ; switch strategies available:
 26923                           ; Name         Instructions Cycles
 26924                           ; simple_byte            7     4 (average)
 26925                           ; direct_byte           25     9 (fixed)
 26926                           ; jumptable            263     9 (fixed)
 26927                           ;	Chosen strategy is simple_byte
 26928  19CF  0836               	movf	??_modbus_response_write_single_register,w
 26929  19D0  3A02               	xorlw	2	; case 2
 26930  19D1  1903               	skipnz
 26931  19D2  296C               	goto	l14995
 26932  19D3  3A0B               	xorlw	11	; case 9
 26933  19D4  1903               	skipnz
 26934  19D5  2976               	goto	l14999
 26935  19D6  29BA               	goto	l15019
 26936  19D7                     l15027:	
 26937                           
 26938                           ;modbus.c: 148: if(pmdbs->addr==0)return;
 26939  19D7  0020               	movlb	0	; select bank0
 26940  19D8  083B               	movf	modbus_response_write_single_register@pmdbs,w
 26941  19D9  0086               	movwf	6
 26942  19DA  3004               	movlw	4	; select bank8/9
 26943  19DB  0087               	movwf	7
 26944  19DC  0801               	movf	1,w
 26945  19DD  1903               	btfsc	3,2
 26946  19DE  0008               	return
 26947                           
 26948                           ;modbus.c: 149: rbuf[0]=mainSystemData.shortID;
 26949  19DF  0024               	movlb	4	; select bank4
 26950  19E0  0829               	movf	(_mainSystemData^(0+512)+9),w
 26951  19E1  0020               	movlb	0	; select bank0
 26952  19E2  00B6               	movwf	??_modbus_response_write_single_register
 26953  19E3  083C               	movf	modbus_response_write_single_register@rbuf,w
 26954  19E4  0086               	movwf	6
 26955  19E5  3004               	movlw	4	; select bank8/9
 26956  19E6  0087               	movwf	7
 26957  19E7  0836               	movf	??_modbus_response_write_single_register,w
 26958  19E8  0081               	movwf	1
 26959                           
 26960                           ;modbus.c: 150: crc_append(rbuf,6);
 26961  19E9  083C               	movf	modbus_response_write_single_register@rbuf,w
 26962  19EA  00A8               	movwf	crc_append@message
 26963  19EB  3004               	movlw	4
 26964  19EC  00A9               	movwf	crc_append@message+1
 26965  19ED  3006               	movlw	6
 26966  19EE  00AA               	movwf	crc_append@n
 26967  19EF  3000               	movlw	0
 26968  19F0  00AB               	movwf	crc_append@n+1
 26969  19F1  31B3  23C9  3199   	fcall	_crc_append
 26970                           
 26971                           ;modbus.c: 151: my_uart1_send_poll(rbuf,8);
 26972  19F4  3008               	movlw	8
 26973  19F5  0020               	movlb	0	; select bank0
 26974  19F6  00B6               	movwf	??_modbus_response_write_single_register
 26975  19F7  0836               	movf	??_modbus_response_write_single_register,w
 26976  19F8  00F3               	movwf	my_uart1_send_poll@len
 26977  19F9  083C               	movf	modbus_response_write_single_register@rbuf,w
 26978  19FA  31B3  2399         	fcall	_my_uart1_send_poll
 26979  19FC  0008               	return
 26980  19FD                     __end_of_modbus_response_write_single_register:	
 26981                           
 26982                           	psect	text91
 26983  2490                     __ptext91:	
 26984 ;; *************** function _modbus_response_write_clib_data *****************
 26985 ;; Defined at:
 26986 ;;		line 182 in file "src/api/modbus.c"
 26987 ;; Parameters:    Size  Location     Type
 26988 ;;  buf             1    wreg     PTR unsigned char 
 26989 ;;		 -> uart1Buffer(80), 
 26990 ;; Auto vars:     Size  Location     Type
 26991 ;;  buf             1   44[BANK0 ] PTR unsigned char 
 26992 ;;		 -> uart1Buffer(80), 
 26993 ;;  startAddr       2   42[BANK0 ] unsigned int 
 26994 ;;  t16             2   40[BANK0 ] unsigned int 
 26995 ;;  pmdbs           1   45[BANK0 ] PTR struct .
 26996 ;;		 -> uart1Buffer(80), 
 26997 ;; Return value:  Size  Location     Type
 26998 ;;                  1    wreg      void 
 26999 ;; Registers used:
 27000 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27001 ;; Tracked objects:
 27002 ;;		On entry : 0/0
 27003 ;;		On exit  : 0/0
 27004 ;;		Unchanged: 0/0
 27005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27007 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27008 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27009 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 27010 ;;Total ram usage:        8 bytes
 27011 ;; Hardware stack levels used:    1
 27012 ;; Hardware stack levels required when called:    5
 27013 ;; This function calls:
 27014 ;;		_crc_append
 27015 ;;		_data_api_calibration_table_data_save
 27016 ;;		_modbus_response_illgeal_function
 27017 ;;		_my_uart1_send_poll
 27018 ;; This function is called by:
 27019 ;;		_modbus_response_process
 27020 ;; This function uses a non-reentrant model
 27021 ;;
 27022                           
 27023                           
 27024                           ;psect for function _modbus_response_write_clib_data
 27025  2490                     _modbus_response_write_clib_data:	
 27026                           
 27027                           ;incstack = 0
 27028                           ; Regs used in _modbus_response_write_clib_data: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 27029                           ;modbus_response_write_clib_data@buf stored from wreg
 27030  2490  0020               	movlb	0	; select bank0
 27031  2491  00CC               	movwf	modbus_response_write_clib_data@buf
 27032                           
 27033                           ;modbus.c: 183: uint16_t startAddr=0;
 27034  2492  01CA               	clrf	modbus_response_write_clib_data@startAddr
 27035  2493  01CB               	clrf	modbus_response_write_clib_data@startAddr+1
 27036                           
 27037                           ;modbus.c: 184: uint16_t t16;
 27038                           ;modbus.c: 185: st_modbusWriteSingleClib* pmdbs=(st_modbusWriteSingleClib*)buf;
 27039  2494  084C               	movf	modbus_response_write_clib_data@buf,w
 27040  2495  00C6               	movwf	??_modbus_response_write_clib_data
 27041  2496  0846               	movf	??_modbus_response_write_clib_data,w
 27042  2497  00CD               	movwf	modbus_response_write_clib_data@pmdbs
 27043                           
 27044                           ;modbus.c: 186: if(pmdbs->addr!=mainSystemData.shortID)return;
 27045  2498  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27046  2499  0086               	movwf	6
 27047  249A  3004               	movlw	4	; select bank8/9
 27048  249B  0087               	movwf	7
 27049  249C  0801               	movf	1,w
 27050  249D  0024               	movlb	4	; select bank4
 27051  249E  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 27052  249F  1D03               	btfss	3,2
 27053  24A0  0008               	return
 27054                           
 27055                           ;modbus.c: 187: startAddr=pmdbs->addr_hi;
 27056  24A1  0020               	movlb	0	; select bank0
 27057  24A2  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27058  24A3  3E02               	addlw	2
 27059  24A4  0086               	movwf	6
 27060  24A5  3004               	movlw	4	; select bank8/9
 27061  24A6  0087               	movwf	7
 27062  24A7  0801               	movf	1,w
 27063  24A8  00C6               	movwf	??_modbus_response_write_clib_data
 27064  24A9  01C7               	clrf	??_modbus_response_write_clib_data+1
 27065  24AA  0846               	movf	??_modbus_response_write_clib_data,w
 27066  24AB  00CA               	movwf	modbus_response_write_clib_data@startAddr
 27067  24AC  0847               	movf	??_modbus_response_write_clib_data+1,w
 27068  24AD  00CB               	movwf	modbus_response_write_clib_data@startAddr+1
 27069                           
 27070                           ;modbus.c: 188: startAddr<<=8;
 27071  24AE  3008               	movlw	8
 27072  24AF                     u13675:	
 27073  24AF  35CA               	lslf	modbus_response_write_clib_data@startAddr,f
 27074  24B0  0DCB               	rlf	modbus_response_write_clib_data@startAddr+1,f
 27075  24B1  0B89               	decfsz	9,f
 27076  24B2  2CAF               	goto	u13675
 27077                           
 27078                           ;modbus.c: 189: startAddr |= pmdbs->addr_lo;
 27079  24B3  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27080  24B4  3E03               	addlw	3
 27081  24B5  0086               	movwf	6
 27082  24B6  3004               	movlw	4	; select bank8/9
 27083  24B7  0087               	movwf	7
 27084  24B8  0801               	movf	1,w
 27085  24B9  00C6               	movwf	??_modbus_response_write_clib_data
 27086  24BA  01C7               	clrf	??_modbus_response_write_clib_data+1
 27087  24BB  0846               	movf	??_modbus_response_write_clib_data,w
 27088  24BC  04CA               	iorwf	modbus_response_write_clib_data@startAddr,f
 27089  24BD  0847               	movf	??_modbus_response_write_clib_data+1,w
 27090  24BE  04CB               	iorwf	modbus_response_write_clib_data@startAddr+1,f
 27091                           
 27092                           ;modbus.c: 191: if(startAddr>30){
 27093  24BF  3000               	movlw	0
 27094  24C0  024B               	subwf	modbus_response_write_clib_data@startAddr+1,w
 27095  24C1  301F               	movlw	31
 27096  24C2  1903               	skipnz
 27097  24C3  024A               	subwf	modbus_response_write_clib_data@startAddr,w
 27098  24C4  1C03               	skipc
 27099  24C5  2CCE               	goto	l15107
 27100                           
 27101                           ;modbus.c: 192: modbus_response_illgeal_function(buf,0x02);
 27102  24C6  3002               	movlw	2
 27103  24C7  00C6               	movwf	??_modbus_response_write_clib_data
 27104  24C8  0846               	movf	??_modbus_response_write_clib_data,w
 27105  24C9  00B3               	movwf	modbus_response_illgeal_function@errcode
 27106  24CA  084C               	movf	modbus_response_write_clib_data@buf,w
 27107  24CB  31B6  263C         	fcall	_modbus_response_illgeal_function
 27108                           
 27109                           ;modbus.c: 193: return;
 27110  24CD  0008               	return
 27111  24CE                     l15107:	
 27112                           
 27113                           ;modbus.c: 194: }
 27114                           ;modbus.c: 195: t16=pmdbs->data_hi;
 27115  24CE  0020               	movlb	0	; select bank0
 27116  24CF  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27117  24D0  3E04               	addlw	4
 27118  24D1  0086               	movwf	6
 27119  24D2  3004               	movlw	4	; select bank8/9
 27120  24D3  0087               	movwf	7
 27121  24D4  0801               	movf	1,w
 27122  24D5  00C6               	movwf	??_modbus_response_write_clib_data
 27123  24D6  01C7               	clrf	??_modbus_response_write_clib_data+1
 27124  24D7  0846               	movf	??_modbus_response_write_clib_data,w
 27125  24D8  00C8               	movwf	modbus_response_write_clib_data@t16
 27126  24D9  0847               	movf	??_modbus_response_write_clib_data+1,w
 27127  24DA  00C9               	movwf	modbus_response_write_clib_data@t16+1
 27128                           
 27129                           ;modbus.c: 196: t16<<=8;
 27130  24DB  3008               	movlw	8
 27131  24DC                     u13695:	
 27132  24DC  35C8               	lslf	modbus_response_write_clib_data@t16,f
 27133  24DD  0DC9               	rlf	modbus_response_write_clib_data@t16+1,f
 27134  24DE  0B89               	decfsz	9,f
 27135  24DF  2CDC               	goto	u13695
 27136                           
 27137                           ;modbus.c: 197: t16|=pmdbs->data_lo;
 27138  24E0  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27139  24E1  3E05               	addlw	5
 27140  24E2  0086               	movwf	6
 27141  24E3  3004               	movlw	4	; select bank8/9
 27142  24E4  0087               	movwf	7
 27143  24E5  0801               	movf	1,w
 27144  24E6  00C6               	movwf	??_modbus_response_write_clib_data
 27145  24E7  01C7               	clrf	??_modbus_response_write_clib_data+1
 27146  24E8  0846               	movf	??_modbus_response_write_clib_data,w
 27147  24E9  04C8               	iorwf	modbus_response_write_clib_data@t16,f
 27148  24EA  0847               	movf	??_modbus_response_write_clib_data+1,w
 27149  24EB  04C9               	iorwf	modbus_response_write_clib_data@t16+1,f
 27150                           
 27151                           ;modbus.c: 198: *((uint16_t*)(flashOpStr.buf))=t16;
 27152  24EC  0849               	movf	modbus_response_write_clib_data@t16+1,w
 27153  24ED  0022               	movlb	2	; select bank2
 27154  24EE  00C8               	movwf	((_flashOpStr+1)^(0+256)+4)
 27155  24EF  0020               	movlb	0	; select bank0
 27156  24F0  0848               	movf	modbus_response_write_clib_data@t16,w
 27157  24F1  0022               	movlb	2	; select bank2
 27158  24F2  00C7               	movwf	(_flashOpStr^(0+256)+4)
 27159                           
 27160                           ;modbus.c: 199: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 27161  24F3  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27162  24F4  0AD7               	incf	(_flashOpStr^(0+256)+20),f
 27163                           
 27164                           ;modbus.c: 200: if(buf[1]==110 && startAddr>=1){
 27165  24F5  0020               	movlb	0	; select bank0
 27166  24F6  0A4C               	incf	modbus_response_write_clib_data@buf,w
 27167  24F7  0086               	movwf	6
 27168  24F8  3004               	movlw	4	; select bank8/9
 27169  24F9  0087               	movwf	7
 27170  24FA  306E               	movlw	110
 27171  24FB  0601               	xorwf	1,w
 27172  24FC  1D03               	btfss	3,2
 27173  24FD  2D04               	goto	l15121
 27174  24FE  084A               	movf	modbus_response_write_clib_data@startAddr,w
 27175  24FF  044B               	iorwf	modbus_response_write_clib_data@startAddr+1,w
 27176  2500  1903               	btfsc	3,2
 27177  2501  2D04               	goto	l15121
 27178                           
 27179                           ;modbus.c: 201: data_api_calibration_table_data_save((uint8_t)startAddr,0);
 27180  2502  01B3               	clrf	data_api_calibration_table_data_save@single
 27181  2503  2D07               	goto	L11
 27182  2504                     l15121:	
 27183                           ;modbus.c: 202: }else{
 27184                           
 27185                           
 27186                           ;modbus.c: 203: data_api_calibration_table_data_save((uint8_t)startAddr,1);
 27187  2504  0020               	movlb	0	; select bank0
 27188  2505  01B3               	clrf	data_api_calibration_table_data_save@single
 27189  2506  0AB3               	incf	data_api_calibration_table_data_save@single,f
 27190  2507                     L11:	
 27191  2507  084A               	movf	modbus_response_write_clib_data@startAddr,w
 27192  2508  3192  22FB  31A4   	fcall	_data_api_calibration_table_data_save
 27193                           
 27194                           ;modbus.c: 204: }
 27195                           ;modbus.c: 206: if(pmdbs->addr==0)return;
 27196  250B  0020               	movlb	0	; select bank0
 27197  250C  084D               	movf	modbus_response_write_clib_data@pmdbs,w
 27198  250D  0086               	movwf	6
 27199  250E  3004               	movlw	4	; select bank8/9
 27200  250F  0087               	movwf	7
 27201  2510  0801               	movf	1,w
 27202  2511  1903               	btfsc	3,2
 27203  2512  0008               	return
 27204                           
 27205                           ;modbus.c: 207: buf[0]=mainSystemData.shortID;
 27206  2513  0024               	movlb	4	; select bank4
 27207  2514  0829               	movf	(_mainSystemData^(0+512)+9),w
 27208  2515  0020               	movlb	0	; select bank0
 27209  2516  00C6               	movwf	??_modbus_response_write_clib_data
 27210  2517  084C               	movf	modbus_response_write_clib_data@buf,w
 27211  2518  0086               	movwf	6
 27212  2519  3004               	movlw	4	; select bank8/9
 27213  251A  0087               	movwf	7
 27214  251B  0846               	movf	??_modbus_response_write_clib_data,w
 27215  251C  0081               	movwf	1
 27216                           
 27217                           ;modbus.c: 208: crc_append(buf,6);
 27218  251D  084C               	movf	modbus_response_write_clib_data@buf,w
 27219  251E  00A8               	movwf	crc_append@message
 27220  251F  3004               	movlw	4
 27221  2520  00A9               	movwf	crc_append@message+1
 27222  2521  3006               	movlw	6
 27223  2522  00AA               	movwf	crc_append@n
 27224  2523  3000               	movlw	0
 27225  2524  00AB               	movwf	crc_append@n+1
 27226  2525  31B3  23C9  31A4   	fcall	_crc_append
 27227                           
 27228                           ;modbus.c: 209: my_uart1_send_poll(buf,8);
 27229  2528  3008               	movlw	8
 27230  2529  0020               	movlb	0	; select bank0
 27231  252A  00C6               	movwf	??_modbus_response_write_clib_data
 27232  252B  0846               	movf	??_modbus_response_write_clib_data,w
 27233  252C  00F3               	movwf	my_uart1_send_poll@len
 27234  252D  084C               	movf	modbus_response_write_clib_data@buf,w
 27235  252E  31B3  2399         	fcall	_my_uart1_send_poll
 27236  2530  0008               	return
 27237  2531                     __end_of_modbus_response_write_clib_data:	
 27238                           
 27239                           	psect	text92
 27240  12FB                     __ptext92:	
 27241 ;; *************** function _data_api_calibration_table_data_save *****************
 27242 ;; Defined at:
 27243 ;;		line 198 in file "src/app/appdata.c"
 27244 ;; Parameters:    Size  Location     Type
 27245 ;;  loc             1    wreg     unsigned char 
 27246 ;;  single          1   19[BANK0 ] unsigned char 
 27247 ;; Auto vars:     Size  Location     Type
 27248 ;;  loc             1   36[BANK0 ] unsigned char 
 27249 ;;  stp             2   34[BANK0 ] PTR struct .
 27250 ;;		 -> comBuffer(128), 
 27251 ;;  i               1   37[BANK0 ] unsigned char 
 27252 ;; Return value:  Size  Location     Type
 27253 ;;                  1    wreg      unsigned char 
 27254 ;; Registers used:
 27255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27256 ;; Tracked objects:
 27257 ;;		On entry : 0/0
 27258 ;;		On exit  : 0/0
 27259 ;;		Unchanged: 0/0
 27260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27261 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 27262 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27263 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0
 27264 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0
 27265 ;;Total ram usage:       19 bytes
 27266 ;; Hardware stack levels used:    1
 27267 ;; Hardware stack levels required when called:    4
 27268 ;; This function calls:
 27269 ;;		_crc_append
 27270 ;;		_crc_verify
 27271 ;;		_data_api_write_eeprom
 27272 ;;		_m_mem_cpy_len
 27273 ;; This function is called by:
 27274 ;;		_ui_key_process_down
 27275 ;;		_ui_key_process_cancel
 27276 ;;		_ui_key_set_process
 27277 ;;		_modbus_response_write_clib_data
 27278 ;;		_data_api_flash_process
 27279 ;; This function uses a non-reentrant model
 27280 ;;
 27281                           
 27282                           
 27283                           ;psect for function _data_api_calibration_table_data_save
 27284  12FB                     _data_api_calibration_table_data_save:	
 27285                           
 27286                           ;incstack = 0
 27287                           ; Regs used in _data_api_calibration_table_data_save: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 27288                           ;data_api_calibration_table_data_save@loc stored from wreg
 27289  12FB  0020               	movlb	0	; select bank0
 27290  12FC  00C4               	movwf	data_api_calibration_table_data_save@loc
 27291                           
 27292                           ;appdata.c: 199: uint8_t i;
 27293                           ;appdata.c: 200: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 27294  12FD  3000               	movlw	0
 27295  12FE  00C2               	movwf	data_api_calibration_table_data_save@stp
 27296  12FF  3022               	movlw	34
 27297  1300  00C3               	movwf	data_api_calibration_table_data_save@stp+1
 27298                           
 27299                           ;appdata.c: 201: m_mem_cpy_len(comBuffer,(uint8_t*)(&Main_flowCalibrationTable),sizeof (
      +                          st_flowCalibrationTable));
 27300  1301  3000               	movlw	0
 27301  1302  00F3               	movwf	m_mem_cpy_len@d
 27302  1303  3022               	movlw	34
 27303  1304  00F4               	movwf	m_mem_cpy_len@d+1
 27304  1305  3074               	movlw	116
 27305  1306  00F5               	movwf	m_mem_cpy_len@s
 27306  1307  3023               	movlw	35
 27307  1308  00F6               	movwf	m_mem_cpy_len@s+1
 27308  1309  307C               	movlw	124
 27309  130A  00B4               	movwf	??_data_api_calibration_table_data_save
 27310  130B  0834               	movf	??_data_api_calibration_table_data_save,w
 27311  130C  00F7               	movwf	m_mem_cpy_len@len
 27312  130D  31BD  259E  3192   	fcall	_m_mem_cpy_len
 27313                           
 27314                           ;appdata.c: 202: stp->flowCalibrationArr[loc].adcValue=adcAverageValue;
 27315  1310  0020               	movlb	0	; select bank0
 27316  1311  0844               	movf	data_api_calibration_table_data_save@loc,w
 27317  1312  00B4               	movwf	??_data_api_calibration_table_data_save
 27318  1313  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27319  1314  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27320  1315  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27321  1316  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27322  1317  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27323  1318  0834               	movf	??_data_api_calibration_table_data_save,w
 27324  1319  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27325  131A  0086               	movwf	6
 27326  131B  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27327  131C  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27328  131D  0087               	movwf	7
 27329  131E  0021               	movlb	1	; select bank1
 27330  131F  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 27331  1320  3FC0               	movwi [0]fsr1
 27332  1321  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 27333  1322  3FC1               	movwi [1]fsr1
 27334                           
 27335                           ;appdata.c: 203: stp->flowCalibrationArr[loc].rtflowValue=*((uint16_t*)(flashOpStr.buf))
      +                          ;
 27336  1323  0020               	movlb	0	; select bank0
 27337  1324  0844               	movf	data_api_calibration_table_data_save@loc,w
 27338  1325  00B4               	movwf	??_data_api_calibration_table_data_save
 27339  1326  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27340  1327  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27341  1328  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27342  1329  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27343  132A  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27344  132B  0834               	movf	??_data_api_calibration_table_data_save,w
 27345  132C  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27346  132D  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27347  132E  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27348  132F  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27349  1330  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27350  1331  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27351  1332  0086               	movwf	6
 27352  1333  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27353  1334  0087               	movwf	7
 27354  1335  3142               	addfsr 1,2
 27355  1336  0022               	movlb	2	; select bank2
 27356  1337  0847               	movf	(_flashOpStr^(0+256)+4),w
 27357  1338  3FC0               	movwi [0]fsr1
 27358  1339  0848               	movf	((_flashOpStr+1)^(0+256)+4),w
 27359  133A  3FC1               	movwi [1]fsr1
 27360                           
 27361                           ;appdata.c: 204: m_mem_cpy_len(flashOpStr.buf,comBuffer+loc*sizeof(st_CalibrationPoint),
      +                          4);
 27362  133B  3047               	movlw	low (_flashOpStr+4)
 27363  133C  00F3               	movwf	m_mem_cpy_len@d
 27364  133D  3001               	movlw	high (_flashOpStr+4)
 27365  133E  00F4               	movwf	m_mem_cpy_len@d+1
 27366  133F  0020               	movlb	0	; select bank0
 27367  1340  0844               	movf	data_api_calibration_table_data_save@loc,w
 27368  1341  00B4               	movwf	??_data_api_calibration_table_data_save
 27369  1342  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27370  1343  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27371  1344  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27372  1345  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27373  1346  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27374  1347  3000               	movlw	0
 27375  1348  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27376  1349  3022               	movlw	34
 27377  134A  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27378  134B  0834               	movf	??_data_api_calibration_table_data_save,w
 27379  134C  0736               	addwf	??_data_api_calibration_table_data_save+2,w
 27380  134D  00F5               	movwf	m_mem_cpy_len@s
 27381  134E  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27382  134F  3D37               	addwfc	??_data_api_calibration_table_data_save+3,w
 27383  1350  00F6               	movwf	m_mem_cpy_len@s+1
 27384  1351  3004               	movlw	4
 27385  1352  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27386  1353  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27387  1354  00F7               	movwf	m_mem_cpy_len@len
 27388  1355  31BD  259E  3192   	fcall	_m_mem_cpy_len
 27389                           
 27390                           ;appdata.c: 206: if(loc>1){
 27391  1358  3002               	movlw	2
 27392  1359  0020               	movlb	0	; select bank0
 27393  135A  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27394  135B  1C03               	skipc
 27395  135C  2BA7               	goto	l13793
 27396                           
 27397                           ;appdata.c: 207: for(i=1;i<=loc;i++){
 27398  135D  01C5               	clrf	data_api_calibration_table_data_save@i
 27399  135E  0AC5               	incf	data_api_calibration_table_data_save@i,f
 27400  135F                     l13791:	
 27401  135F  0845               	movf	data_api_calibration_table_data_save@i,w
 27402  1360  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27403  1361  1C03               	btfss	3,0
 27404  1362  2BA7               	goto	l13793
 27405                           
 27406                           ;appdata.c: 210: if(stp->flowCalibrationArr[i].rtflowValue < stp->flowCalibrationArr[i-1
      +                          ].rtflowValue){
 27407  1363  0845               	movf	data_api_calibration_table_data_save@i,w
 27408  1364  00B4               	movwf	??_data_api_calibration_table_data_save
 27409  1365  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27410  1366  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27411  1367  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27412  1368  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27413  1369  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27414  136A  0834               	movf	??_data_api_calibration_table_data_save,w
 27415  136B  3EFC               	addlw	252
 27416  136C  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27417  136D  30FF               	movlw	255
 27418  136E  3D35               	addwfc	??_data_api_calibration_table_data_save+1,w
 27419  136F  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27420  1370  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27421  1371  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27422  1372  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27423  1373  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27424  1374  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27425  1375  00B9               	movwf	??_data_api_calibration_table_data_save+5
 27426  1376  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27427  1377  0086               	movwf	6
 27428  1378  0839               	movf	??_data_api_calibration_table_data_save+5,w
 27429  1379  0087               	movwf	7
 27430  137A  3142               	addfsr 1,2
 27431  137B  3F40               	moviw [0]fsr1
 27432  137C  00BA               	movwf	??_data_api_calibration_table_data_save+6
 27433  137D  3F41               	moviw [1]fsr1
 27434  137E  00BB               	movwf	??_data_api_calibration_table_data_save+7
 27435  137F  0845               	movf	data_api_calibration_table_data_save@i,w
 27436  1380  00BC               	movwf	??_data_api_calibration_table_data_save+8
 27437  1381  01BD               	clrf	??_data_api_calibration_table_data_save+9
 27438  1382  35BC               	lslf	??_data_api_calibration_table_data_save+8,f
 27439  1383  0DBD               	rlf	??_data_api_calibration_table_data_save+9,f
 27440  1384  35BC               	lslf	??_data_api_calibration_table_data_save+8,f
 27441  1385  0DBD               	rlf	??_data_api_calibration_table_data_save+9,f
 27442  1386  083C               	movf	??_data_api_calibration_table_data_save+8,w
 27443  1387  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27444  1388  00BE               	movwf	??_data_api_calibration_table_data_save+10
 27445  1389  083D               	movf	??_data_api_calibration_table_data_save+9,w
 27446  138A  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27447  138B  00BF               	movwf	??_data_api_calibration_table_data_save+11
 27448  138C  083E               	movf	??_data_api_calibration_table_data_save+10,w
 27449  138D  0086               	movwf	6
 27450  138E  083F               	movf	??_data_api_calibration_table_data_save+11,w
 27451  138F  0087               	movwf	7
 27452  1390  3142               	addfsr 1,2
 27453  1391  3F40               	moviw [0]fsr1
 27454  1392  00C0               	movwf	??_data_api_calibration_table_data_save+12
 27455  1393  3F41               	moviw [1]fsr1
 27456  1394  00C1               	movwf	??_data_api_calibration_table_data_save+13
 27457  1395  083B               	movf	??_data_api_calibration_table_data_save+7,w
 27458  1396  0241               	subwf	??_data_api_calibration_table_data_save+13,w
 27459  1397  1D03               	skipz
 27460  1398  2B9B               	goto	u12515
 27461  1399  083A               	movf	??_data_api_calibration_table_data_save+6,w
 27462  139A  0240               	subwf	??_data_api_calibration_table_data_save+12,w
 27463  139B                     u12515:	
 27464  139B  1803               	skipnc
 27465  139C  2BA1               	goto	l13789
 27466                           
 27467                           ;appdata.c: 211: flashOpStr.op = enFLASH_NOTHING;
 27468  139D  0022               	movlb	2	; select bank2
 27469  139E  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27470                           
 27471                           ;appdata.c: 212: return 0;
 27472  139F  3000               	movlw	0
 27473  13A0  0008               	return
 27474  13A1                     l13789:	
 27475  13A1  3001               	movlw	1
 27476  13A2  0020               	movlb	0	; select bank0
 27477  13A3  00B4               	movwf	??_data_api_calibration_table_data_save
 27478  13A4  0834               	movf	??_data_api_calibration_table_data_save,w
 27479  13A5  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27480  13A6  2B5F               	goto	l13791
 27481  13A7                     l13793:	
 27482                           
 27483                           ;appdata.c: 213: }
 27484                           ;appdata.c: 214: }
 27485                           ;appdata.c: 215: }
 27486                           ;appdata.c: 216: if(loc>1){
 27487  13A7  3002               	movlw	2
 27488  13A8  0244               	subwf	data_api_calibration_table_data_save@loc,w
 27489  13A9  1C03               	skipc
 27490  13AA  2BEF               	goto	l13805
 27491                           
 27492                           ;appdata.c: 217: for(i=0;i<loc;i++){
 27493  13AB  01C5               	clrf	data_api_calibration_table_data_save@i
 27494  13AC                     l13803:	
 27495  13AC  0844               	movf	data_api_calibration_table_data_save@loc,w
 27496  13AD  0245               	subwf	data_api_calibration_table_data_save@i,w
 27497  13AE  1803               	btfsc	3,0
 27498  13AF  2BEF               	goto	l13805
 27499                           
 27500                           ;appdata.c: 222: if(( stp->flowCalibrationArr[i].rtflowValue > stp->flowCalibrationArr[i
      +                          +1].rtflowValue)){
 27501  13B0  0845               	movf	data_api_calibration_table_data_save@i,w
 27502  13B1  00B4               	movwf	??_data_api_calibration_table_data_save
 27503  13B2  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27504  13B3  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27505  13B4  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27506  13B5  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27507  13B6  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27508  13B7  0834               	movf	??_data_api_calibration_table_data_save,w
 27509  13B8  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27510  13B9  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27511  13BA  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27512  13BB  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27513  13BC  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27514  13BD  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27515  13BE  0086               	movwf	6
 27516  13BF  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27517  13C0  0087               	movwf	7
 27518  13C1  3142               	addfsr 1,2
 27519  13C2  3F40               	moviw [0]fsr1
 27520  13C3  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27521  13C4  3F41               	moviw [1]fsr1
 27522  13C5  00B9               	movwf	??_data_api_calibration_table_data_save+5
 27523  13C6  0845               	movf	data_api_calibration_table_data_save@i,w
 27524  13C7  00BA               	movwf	??_data_api_calibration_table_data_save+6
 27525  13C8  01BB               	clrf	??_data_api_calibration_table_data_save+7
 27526  13C9  35BA               	lslf	??_data_api_calibration_table_data_save+6,f
 27527  13CA  0DBB               	rlf	??_data_api_calibration_table_data_save+7,f
 27528  13CB  35BA               	lslf	??_data_api_calibration_table_data_save+6,f
 27529  13CC  0DBB               	rlf	??_data_api_calibration_table_data_save+7,f
 27530  13CD  083A               	movf	??_data_api_calibration_table_data_save+6,w
 27531  13CE  3E04               	addlw	4
 27532  13CF  00BC               	movwf	??_data_api_calibration_table_data_save+8
 27533  13D0  3000               	movlw	0
 27534  13D1  3D3B               	addwfc	??_data_api_calibration_table_data_save+7,w
 27535  13D2  00BD               	movwf	??_data_api_calibration_table_data_save+9
 27536  13D3  083C               	movf	??_data_api_calibration_table_data_save+8,w
 27537  13D4  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27538  13D5  00BE               	movwf	??_data_api_calibration_table_data_save+10
 27539  13D6  083D               	movf	??_data_api_calibration_table_data_save+9,w
 27540  13D7  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27541  13D8  00BF               	movwf	??_data_api_calibration_table_data_save+11
 27542  13D9  083E               	movf	??_data_api_calibration_table_data_save+10,w
 27543  13DA  0086               	movwf	6
 27544  13DB  083F               	movf	??_data_api_calibration_table_data_save+11,w
 27545  13DC  0087               	movwf	7
 27546  13DD  3142               	addfsr 1,2
 27547  13DE  3F40               	moviw [0]fsr1
 27548  13DF  00C0               	movwf	??_data_api_calibration_table_data_save+12
 27549  13E0  3F41               	moviw [1]fsr1
 27550  13E1  00C1               	movwf	??_data_api_calibration_table_data_save+13
 27551  13E2  0839               	movf	??_data_api_calibration_table_data_save+5,w
 27552  13E3  0241               	subwf	??_data_api_calibration_table_data_save+13,w
 27553  13E4  1D03               	skipz
 27554  13E5  2BE8               	goto	u12545
 27555  13E6  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27556  13E7  0240               	subwf	??_data_api_calibration_table_data_save+12,w
 27557  13E8                     u12545:	
 27558  13E8  1C03               	btfss	3,0
 27559                           
 27560                           ;appdata.c: 223: single=0;
 27561  13E9  01B3               	clrf	data_api_calibration_table_data_save@single
 27562  13EA  3001               	movlw	1
 27563  13EB  00B4               	movwf	??_data_api_calibration_table_data_save
 27564  13EC  0834               	movf	??_data_api_calibration_table_data_save,w
 27565  13ED  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27566  13EE  2BAC               	goto	l13803
 27567  13EF                     l13805:	
 27568                           
 27569                           ;appdata.c: 224: }
 27570                           ;appdata.c: 225: }
 27571                           ;appdata.c: 226: }
 27572                           ;appdata.c: 228: if(!single && loc>0){
 27573  13EF  0833               	movf	data_api_calibration_table_data_save@single,w
 27574  13F0  1D03               	btfss	3,2
 27575  13F1  2C3F               	goto	l13823
 27576  13F2  0844               	movf	data_api_calibration_table_data_save@loc,w
 27577  13F3  1903               	btfsc	3,2
 27578  13F4  2C3F               	goto	l13823
 27579                           
 27580                           ;appdata.c: 229: stp->maxFlow=stp->flowCalibrationArr[loc].rtflowValue;
 27581  13F5  0844               	movf	data_api_calibration_table_data_save@loc,w
 27582  13F6  00B4               	movwf	??_data_api_calibration_table_data_save
 27583  13F7  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27584  13F8  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27585  13F9  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27586  13FA  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27587  13FB  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27588  13FC  0834               	movf	??_data_api_calibration_table_data_save,w
 27589  13FD  0742               	addwf	data_api_calibration_table_data_save@stp,w
 27590  13FE  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27591  13FF  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27592  1400  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27593  1401  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27594  1402  0836               	movf	??_data_api_calibration_table_data_save+2,w
 27595  1403  0086               	movwf	6
 27596  1404  0837               	movf	??_data_api_calibration_table_data_save+3,w
 27597  1405  0087               	movwf	7
 27598  1406  3142               	addfsr 1,2
 27599  1407  0842               	movf	data_api_calibration_table_data_save@stp,w
 27600  1408  3E78               	addlw	120
 27601  1409  0084               	movwf	4
 27602  140A  3000               	movlw	0
 27603  140B  3D43               	addwfc	data_api_calibration_table_data_save@stp+1,w
 27604  140C  0085               	movwf	5
 27605  140D  3F40               	moviw [0]fsr1
 27606  140E  3F80               	movwi [0]fsr0
 27607  140F  3F41               	moviw [1]fsr1
 27608  1410  3F81               	movwi [1]fsr0
 27609                           
 27610                           ;appdata.c: 230: for(i=loc+1;i<30;i++){
 27611  1411  0844               	movf	data_api_calibration_table_data_save@loc,w
 27612  1412  3E01               	addlw	1
 27613  1413  00B4               	movwf	??_data_api_calibration_table_data_save
 27614  1414  0834               	movf	??_data_api_calibration_table_data_save,w
 27615  1415  00C5               	movwf	data_api_calibration_table_data_save@i
 27616  1416  301E               	movlw	30
 27617  1417  0245               	subwf	data_api_calibration_table_data_save@i,w
 27618  1418  1803               	btfsc	3,0
 27619  1419  2C3F               	goto	l13823
 27620  141A                     l13817:	
 27621                           
 27622                           ;appdata.c: 231: m_mem_cpy_len(comBuffer+i*sizeof(st_CalibrationPoint),flashOpStr.buf,4)
      +                          ;
 27623  141A  0845               	movf	data_api_calibration_table_data_save@i,w
 27624  141B  00B4               	movwf	??_data_api_calibration_table_data_save
 27625  141C  01B5               	clrf	??_data_api_calibration_table_data_save+1
 27626  141D  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27627  141E  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27628  141F  35B4               	lslf	??_data_api_calibration_table_data_save,f
 27629  1420  0DB5               	rlf	??_data_api_calibration_table_data_save+1,f
 27630  1421  3000               	movlw	0
 27631  1422  00B6               	movwf	??_data_api_calibration_table_data_save+2
 27632  1423  3022               	movlw	34
 27633  1424  00B7               	movwf	??_data_api_calibration_table_data_save+3
 27634  1425  0834               	movf	??_data_api_calibration_table_data_save,w
 27635  1426  0736               	addwf	??_data_api_calibration_table_data_save+2,w
 27636  1427  00F3               	movwf	m_mem_cpy_len@d
 27637  1428  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27638  1429  3D37               	addwfc	??_data_api_calibration_table_data_save+3,w
 27639  142A  00F4               	movwf	m_mem_cpy_len@d+1
 27640  142B  3047               	movlw	low (_flashOpStr+4)
 27641  142C  00F5               	movwf	m_mem_cpy_len@s
 27642  142D  3001               	movlw	high (_flashOpStr+4)
 27643  142E  00F6               	movwf	m_mem_cpy_len@s+1
 27644  142F  3004               	movlw	4
 27645  1430  00B8               	movwf	??_data_api_calibration_table_data_save+4
 27646  1431  0838               	movf	??_data_api_calibration_table_data_save+4,w
 27647  1432  00F7               	movwf	m_mem_cpy_len@len
 27648  1433  31BD  259E  3192   	fcall	_m_mem_cpy_len
 27649  1436  3001               	movlw	1
 27650  1437  0020               	movlb	0	; select bank0
 27651  1438  00B4               	movwf	??_data_api_calibration_table_data_save
 27652  1439  0834               	movf	??_data_api_calibration_table_data_save,w
 27653  143A  07C5               	addwf	data_api_calibration_table_data_save@i,f
 27654  143B  301E               	movlw	30
 27655  143C  0245               	subwf	data_api_calibration_table_data_save@i,w
 27656  143D  1C03               	skipc
 27657  143E  2C1A               	goto	l13817
 27658  143F                     l13823:	
 27659                           
 27660                           ;appdata.c: 232: }
 27661                           ;appdata.c: 233: }
 27662                           ;appdata.c: 234: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 27663  143F  3000               	movlw	0
 27664  1440  00A8               	movwf	crc_append@message
 27665  1441  3022               	movlw	34
 27666  1442  00A9               	movwf	crc_append@message+1
 27667  1443  307A               	movlw	122
 27668  1444  00AA               	movwf	crc_append@n
 27669  1445  3000               	movlw	0
 27670  1446  00AB               	movwf	crc_append@n+1
 27671  1447  31B3  23C9  3192   	fcall	_crc_append
 27672                           
 27673                           ;appdata.c: 236: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 27674  144A  3000               	movlw	0
 27675  144B  0020               	movlb	0	; select bank0
 27676  144C  00A0               	movwf	data_api_write_eeprom@buf
 27677  144D  3022               	movlw	34
 27678  144E  00A1               	movwf	data_api_write_eeprom@buf+1
 27679  144F  3080               	movlw	128
 27680  1450  00B4               	movwf	??_data_api_calibration_table_data_save
 27681  1451  0834               	movf	??_data_api_calibration_table_data_save,w
 27682  1452  00A2               	movwf	data_api_write_eeprom@addr
 27683  1453  307C               	movlw	124
 27684  1454  00B5               	movwf	??_data_api_calibration_table_data_save+1
 27685  1455  0835               	movf	??_data_api_calibration_table_data_save+1,w
 27686  1456  00A3               	movwf	data_api_write_eeprom@len
 27687  1457  31BE  26DA  3192   	fcall	_data_api_write_eeprom
 27688                           
 27689                           ;appdata.c: 237: m_mem_cpy_len((uint8_t*)(&Main_flowCalibrationTable),comBuffer,sizeof (
      +                          st_flowCalibrationTable));
 27690  145A  3074               	movlw	116
 27691  145B  00F3               	movwf	m_mem_cpy_len@d
 27692  145C  3023               	movlw	35
 27693  145D  00F4               	movwf	m_mem_cpy_len@d+1
 27694  145E  3000               	movlw	0
 27695  145F  00F5               	movwf	m_mem_cpy_len@s
 27696  1460  3022               	movlw	34
 27697  1461  00F6               	movwf	m_mem_cpy_len@s+1
 27698  1462  307C               	movlw	124
 27699  1463  0020               	movlb	0	; select bank0
 27700  1464  00B4               	movwf	??_data_api_calibration_table_data_save
 27701  1465  0834               	movf	??_data_api_calibration_table_data_save,w
 27702  1466  00F7               	movwf	m_mem_cpy_len@len
 27703  1467  31BD  259E  3192   	fcall	_m_mem_cpy_len
 27704                           
 27705                           ;appdata.c: 239: i=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowCal
      +                          ibrationTable) );
 27706  146A  3074               	movlw	116
 27707  146B  0020               	movlb	0	; select bank0
 27708  146C  00A8               	movwf	crc_verify@message
 27709  146D  3023               	movlw	35
 27710  146E  00A9               	movwf	crc_verify@message+1
 27711  146F  307C               	movlw	124
 27712  1470  00AA               	movwf	crc_verify@n
 27713  1471  3000               	movlw	0
 27714  1472  00AB               	movwf	crc_verify@n+1
 27715  1473  31B5  255A         	fcall	_crc_verify
 27716  1475  0020               	movlb	0	; select bank0
 27717  1476  00B4               	movwf	??_data_api_calibration_table_data_save
 27718  1477  0834               	movf	??_data_api_calibration_table_data_save,w
 27719  1478  00C5               	movwf	data_api_calibration_table_data_save@i
 27720                           
 27721                           ;appdata.c: 240: flashOpStr.op = enFLASH_NOTHING;
 27722  1479  0022               	movlb	2	; select bank2
 27723  147A  01D7               	clrf	(_flashOpStr^(0+256)+20)
 27724                           
 27725                           ;appdata.c: 241: return 1;
 27726  147B  3001               	movlw	1
 27727  147C  0008               	return
 27728  147D                     __end_of_data_api_calibration_table_data_save:	
 27729                           
 27730                           	psect	text93
 27731  1ACD                     __ptext93:	
 27732 ;; *************** function _modbus_response_read_clib_data *****************
 27733 ;; Defined at:
 27734 ;;		line 211 in file "src/api/modbus.c"
 27735 ;; Parameters:    Size  Location     Type
 27736 ;;  buf             1    wreg     PTR unsigned char 
 27737 ;;		 -> uart1Buffer(80), 
 27738 ;; Auto vars:     Size  Location     Type
 27739 ;;  buf             1   31[BANK0 ] PTR unsigned char 
 27740 ;;		 -> uart1Buffer(80), 
 27741 ;;  len             2   29[BANK0 ] unsigned int 
 27742 ;;  startAddr       2   26[BANK0 ] unsigned int 
 27743 ;;  i               2    0        unsigned int 
 27744 ;;  pmdbs           1   28[BANK0 ] PTR struct .
 27745 ;;		 -> uart1Buffer(80), 
 27746 ;; Return value:  Size  Location     Type
 27747 ;;                  1    wreg      void 
 27748 ;; Registers used:
 27749 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27750 ;; Tracked objects:
 27751 ;;		On entry : 0/0
 27752 ;;		On exit  : 0/0
 27753 ;;		Unchanged: 0/0
 27754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27756 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27757 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27758 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 27759 ;;Total ram usage:       10 bytes
 27760 ;; Hardware stack levels used:    1
 27761 ;; Hardware stack levels required when called:    5
 27762 ;; This function calls:
 27763 ;;		_crc_append
 27764 ;;		_data_api_read_eeprom
 27765 ;;		_modbus_response_illgeal_function
 27766 ;;		_my_uart1_send_poll
 27767 ;; This function is called by:
 27768 ;;		_modbus_response_process
 27769 ;; This function uses a non-reentrant model
 27770 ;;
 27771                           
 27772                           
 27773                           ;psect for function _modbus_response_read_clib_data
 27774  1ACD                     _modbus_response_read_clib_data:	
 27775                           
 27776                           ;incstack = 0
 27777                           ; Regs used in _modbus_response_read_clib_data: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 27778                           ;modbus_response_read_clib_data@buf stored from wreg
 27779  1ACD  0020               	movlb	0	; select bank0
 27780  1ACE  00BF               	movwf	modbus_response_read_clib_data@buf
 27781                           
 27782                           ;modbus.c: 213: uint16_t i;
 27783                           ;modbus.c: 214: uint16_t startAddr=0;
 27784  1ACF  01BA               	clrf	modbus_response_read_clib_data@startAddr
 27785  1AD0  01BB               	clrf	modbus_response_read_clib_data@startAddr+1
 27786                           
 27787                           ;modbus.c: 215: uint16_t len=0;
 27788  1AD1  01BD               	clrf	modbus_response_read_clib_data@len
 27789  1AD2  01BE               	clrf	modbus_response_read_clib_data@len+1
 27790                           
 27791                           ;modbus.c: 216: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 27792  1AD3  083F               	movf	modbus_response_read_clib_data@buf,w
 27793  1AD4  00B6               	movwf	??_modbus_response_read_clib_data
 27794  1AD5  0836               	movf	??_modbus_response_read_clib_data,w
 27795  1AD6  00BC               	movwf	modbus_response_read_clib_data@pmdbs
 27796                           
 27797                           ;modbus.c: 217: if(pmdbs->addr!=mainSystemData.shortID)return;
 27798  1AD7  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27799  1AD8  0086               	movwf	6
 27800  1AD9  3004               	movlw	4	; select bank8/9
 27801  1ADA  0087               	movwf	7
 27802  1ADB  0801               	movf	1,w
 27803  1ADC  0024               	movlb	4	; select bank4
 27804  1ADD  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 27805  1ADE  1D03               	btfss	3,2
 27806  1ADF  0008               	return
 27807                           
 27808                           ;modbus.c: 218: startAddr=pmdbs->addr_hi;
 27809  1AE0  0020               	movlb	0	; select bank0
 27810  1AE1  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27811  1AE2  3E02               	addlw	2
 27812  1AE3  0086               	movwf	6
 27813  1AE4  3004               	movlw	4	; select bank8/9
 27814  1AE5  0087               	movwf	7
 27815  1AE6  0801               	movf	1,w
 27816  1AE7  00B6               	movwf	??_modbus_response_read_clib_data
 27817  1AE8  01B7               	clrf	??_modbus_response_read_clib_data+1
 27818  1AE9  0836               	movf	??_modbus_response_read_clib_data,w
 27819  1AEA  00BA               	movwf	modbus_response_read_clib_data@startAddr
 27820  1AEB  0837               	movf	??_modbus_response_read_clib_data+1,w
 27821  1AEC  00BB               	movwf	modbus_response_read_clib_data@startAddr+1
 27822                           
 27823                           ;modbus.c: 219: startAddr<<=8;
 27824  1AED  3008               	movlw	8
 27825  1AEE                     u13745:	
 27826  1AEE  35BA               	lslf	modbus_response_read_clib_data@startAddr,f
 27827  1AEF  0DBB               	rlf	modbus_response_read_clib_data@startAddr+1,f
 27828  1AF0  0B89               	decfsz	9,f
 27829  1AF1  2AEE               	goto	u13745
 27830                           
 27831                           ;modbus.c: 220: startAddr |= pmdbs->addr_lo;
 27832  1AF2  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27833  1AF3  3E03               	addlw	3
 27834  1AF4  0086               	movwf	6
 27835  1AF5  3004               	movlw	4	; select bank8/9
 27836  1AF6  0087               	movwf	7
 27837  1AF7  0801               	movf	1,w
 27838  1AF8  00B6               	movwf	??_modbus_response_read_clib_data
 27839  1AF9  01B7               	clrf	??_modbus_response_read_clib_data+1
 27840  1AFA  0836               	movf	??_modbus_response_read_clib_data,w
 27841  1AFB  04BA               	iorwf	modbus_response_read_clib_data@startAddr,f
 27842  1AFC  0837               	movf	??_modbus_response_read_clib_data+1,w
 27843  1AFD  04BB               	iorwf	modbus_response_read_clib_data@startAddr+1,f
 27844                           
 27845                           ;modbus.c: 221: len=pmdbs->len_hi;
 27846  1AFE  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27847  1AFF  3E04               	addlw	4
 27848  1B00  0086               	movwf	6
 27849  1B01  3004               	movlw	4	; select bank8/9
 27850  1B02  0087               	movwf	7
 27851  1B03  0801               	movf	1,w
 27852  1B04  00B6               	movwf	??_modbus_response_read_clib_data
 27853  1B05  01B7               	clrf	??_modbus_response_read_clib_data+1
 27854  1B06  0836               	movf	??_modbus_response_read_clib_data,w
 27855  1B07  00BD               	movwf	modbus_response_read_clib_data@len
 27856  1B08  0837               	movf	??_modbus_response_read_clib_data+1,w
 27857  1B09  00BE               	movwf	modbus_response_read_clib_data@len+1
 27858                           
 27859                           ;modbus.c: 222: len<<=8;
 27860  1B0A  3008               	movlw	8
 27861  1B0B                     u13755:	
 27862  1B0B  35BD               	lslf	modbus_response_read_clib_data@len,f
 27863  1B0C  0DBE               	rlf	modbus_response_read_clib_data@len+1,f
 27864  1B0D  0B89               	decfsz	9,f
 27865  1B0E  2B0B               	goto	u13755
 27866                           
 27867                           ;modbus.c: 223: len = pmdbs->len_lo;
 27868  1B0F  083C               	movf	modbus_response_read_clib_data@pmdbs,w
 27869  1B10  3E05               	addlw	5
 27870  1B11  0086               	movwf	6
 27871  1B12  3004               	movlw	4	; select bank8/9
 27872  1B13  0087               	movwf	7
 27873  1B14  0801               	movf	1,w
 27874  1B15  00B6               	movwf	??_modbus_response_read_clib_data
 27875  1B16  01B7               	clrf	??_modbus_response_read_clib_data+1
 27876  1B17  0836               	movf	??_modbus_response_read_clib_data,w
 27877  1B18  00BD               	movwf	modbus_response_read_clib_data@len
 27878  1B19  0837               	movf	??_modbus_response_read_clib_data+1,w
 27879  1B1A  00BE               	movwf	modbus_response_read_clib_data@len+1
 27880                           
 27881                           ;modbus.c: 224: if((len+startAddr)>30+1 || (len>16)){
 27882  1B1B  083A               	movf	modbus_response_read_clib_data@startAddr,w
 27883  1B1C  073D               	addwf	modbus_response_read_clib_data@len,w
 27884  1B1D  00B6               	movwf	??_modbus_response_read_clib_data
 27885  1B1E  083B               	movf	modbus_response_read_clib_data@startAddr+1,w
 27886  1B1F  3D3E               	addwfc	modbus_response_read_clib_data@len+1,w
 27887  1B20  00B7               	movwf	??_modbus_response_read_clib_data+1
 27888  1B21  3000               	movlw	0
 27889  1B22  0237               	subwf	??_modbus_response_read_clib_data+1,w
 27890  1B23  3020               	movlw	32
 27891  1B24  1903               	skipnz
 27892  1B25  0236               	subwf	??_modbus_response_read_clib_data,w
 27893  1B26  1803               	skipnc
 27894  1B27  2B2F               	goto	l15155
 27895  1B28  3000               	movlw	0
 27896  1B29  023E               	subwf	modbus_response_read_clib_data@len+1,w
 27897  1B2A  3011               	movlw	17
 27898  1B2B  1903               	skipnz
 27899  1B2C  023D               	subwf	modbus_response_read_clib_data@len,w
 27900  1B2D  1C03               	skipc
 27901  1B2E  2B37               	goto	l15159
 27902  1B2F                     l15155:	
 27903                           
 27904                           ;modbus.c: 225: modbus_response_illgeal_function(buf,0x02);
 27905  1B2F  3002               	movlw	2
 27906  1B30  00B6               	movwf	??_modbus_response_read_clib_data
 27907  1B31  0836               	movf	??_modbus_response_read_clib_data,w
 27908  1B32  00B3               	movwf	modbus_response_illgeal_function@errcode
 27909  1B33  083F               	movf	modbus_response_read_clib_data@buf,w
 27910  1B34  31B6  263C         	fcall	_modbus_response_illgeal_function
 27911                           
 27912                           ;modbus.c: 226: return;
 27913  1B36  0008               	return
 27914  1B37                     l15159:	
 27915                           
 27916                           ;modbus.c: 227: }
 27917                           ;modbus.c: 228: data_api_read_eeprom(buf+3,0x80+startAddr*4,len*4);
 27918  1B37  0020               	movlb	0	; select bank0
 27919  1B38  083F               	movf	modbus_response_read_clib_data@buf,w
 27920  1B39  3E03               	addlw	3
 27921  1B3A  00F4               	movwf	data_api_read_eeprom@buf
 27922  1B3B  3004               	movlw	4
 27923  1B3C  00F5               	movwf	data_api_read_eeprom@buf+1
 27924  1B3D  083A               	movf	modbus_response_read_clib_data@startAddr,w
 27925  1B3E  00B6               	movwf	??_modbus_response_read_clib_data
 27926  1B3F  3001               	movlw	1
 27927  1B40                     u13785:	
 27928  1B40  35B6               	lslf	??_modbus_response_read_clib_data,f
 27929  1B41  3EFF               	addlw	-1
 27930  1B42  1D03               	skipz
 27931  1B43  2B40               	goto	u13785
 27932  1B44  3536               	lslf	??_modbus_response_read_clib_data,w
 27933  1B45  3E80               	addlw	128
 27934  1B46  00B7               	movwf	??_modbus_response_read_clib_data+1
 27935  1B47  0837               	movf	??_modbus_response_read_clib_data+1,w
 27936  1B48  00F6               	movwf	data_api_read_eeprom@addr
 27937  1B49  083D               	movf	modbus_response_read_clib_data@len,w
 27938  1B4A  00B8               	movwf	??_modbus_response_read_clib_data+2
 27939  1B4B  3001               	movlw	1
 27940  1B4C                     u13795:	
 27941  1B4C  35B8               	lslf	??_modbus_response_read_clib_data+2,f
 27942  1B4D  3EFF               	addlw	-1
 27943  1B4E  1D03               	skipz
 27944  1B4F  2B4C               	goto	u13795
 27945  1B50  3538               	lslf	??_modbus_response_read_clib_data+2,w
 27946  1B51  00B9               	movwf	??_modbus_response_read_clib_data+3
 27947  1B52  0839               	movf	??_modbus_response_read_clib_data+3,w
 27948  1B53  00F7               	movwf	data_api_read_eeprom@len
 27949  1B54  31BE  269B  319A   	fcall	_data_api_read_eeprom
 27950                           
 27951                           ;modbus.c: 229: buf[0] = mainSystemData.shortID;
 27952  1B57  0024               	movlb	4	; select bank4
 27953  1B58  0829               	movf	(_mainSystemData^(0+512)+9),w
 27954  1B59  0020               	movlb	0	; select bank0
 27955  1B5A  00B6               	movwf	??_modbus_response_read_clib_data
 27956  1B5B  083F               	movf	modbus_response_read_clib_data@buf,w
 27957  1B5C  0086               	movwf	6
 27958  1B5D  3004               	movlw	4	; select bank8/9
 27959  1B5E  0087               	movwf	7
 27960  1B5F  0836               	movf	??_modbus_response_read_clib_data,w
 27961  1B60  0081               	movwf	1
 27962                           
 27963                           ;modbus.c: 230: buf[1] = 3;
 27964  1B61  3003               	movlw	3
 27965  1B62  00B6               	movwf	??_modbus_response_read_clib_data
 27966  1B63  0A3F               	incf	modbus_response_read_clib_data@buf,w
 27967  1B64  0086               	movwf	6
 27968  1B65  3004               	movlw	4	; select bank8/9
 27969  1B66  0087               	movwf	7
 27970  1B67  0836               	movf	??_modbus_response_read_clib_data,w
 27971  1B68  0081               	movwf	1
 27972                           
 27973                           ;modbus.c: 231: buf[2] = (uint8_t)(len*4);
 27974  1B69  083D               	movf	modbus_response_read_clib_data@len,w
 27975  1B6A  00B6               	movwf	??_modbus_response_read_clib_data
 27976  1B6B  3001               	movlw	1
 27977  1B6C                     u13805:	
 27978  1B6C  35B6               	lslf	??_modbus_response_read_clib_data,f
 27979  1B6D  3EFF               	addlw	-1
 27980  1B6E  1D03               	skipz
 27981  1B6F  2B6C               	goto	u13805
 27982  1B70  3536               	lslf	??_modbus_response_read_clib_data,w
 27983  1B71  00B7               	movwf	??_modbus_response_read_clib_data+1
 27984  1B72  083F               	movf	modbus_response_read_clib_data@buf,w
 27985  1B73  3E02               	addlw	2
 27986  1B74  0086               	movwf	6
 27987  1B75  3004               	movlw	4	; select bank8/9
 27988  1B76  0087               	movwf	7
 27989  1B77  0837               	movf	??_modbus_response_read_clib_data+1,w
 27990  1B78  0081               	movwf	1
 27991                           
 27992                           ;modbus.c: 232: len=buf[2]+3;
 27993  1B79  083F               	movf	modbus_response_read_clib_data@buf,w
 27994  1B7A  3E02               	addlw	2
 27995  1B7B  0086               	movwf	6
 27996  1B7C  3004               	movlw	4	; select bank8/9
 27997  1B7D  0087               	movwf	7
 27998  1B7E  0801               	movf	1,w
 27999  1B7F  3E03               	addlw	3
 28000  1B80  00BD               	movwf	modbus_response_read_clib_data@len
 28001  1B81  3000               	movlw	0
 28002  1B82  1803               	skipnc
 28003  1B83  3001               	movlw	1
 28004  1B84  00BE               	movwf	modbus_response_read_clib_data@len+1
 28005                           
 28006                           ;modbus.c: 233: crc_append(buf,len);
 28007  1B85  083F               	movf	modbus_response_read_clib_data@buf,w
 28008  1B86  00A8               	movwf	crc_append@message
 28009  1B87  3004               	movlw	4
 28010  1B88  00A9               	movwf	crc_append@message+1
 28011  1B89  083E               	movf	modbus_response_read_clib_data@len+1,w
 28012  1B8A  00AB               	movwf	crc_append@n+1
 28013  1B8B  083D               	movf	modbus_response_read_clib_data@len,w
 28014  1B8C  00AA               	movwf	crc_append@n
 28015  1B8D  31B3  23C9  319A   	fcall	_crc_append
 28016                           
 28017                           ;modbus.c: 234: len += 2;
 28018  1B90  3002               	movlw	2
 28019  1B91  0020               	movlb	0	; select bank0
 28020  1B92  07BD               	addwf	modbus_response_read_clib_data@len,f
 28021  1B93  3000               	movlw	0
 28022  1B94  3DBE               	addwfc	modbus_response_read_clib_data@len+1,f
 28023                           
 28024                           ;modbus.c: 235: my_uart1_send_poll(buf,len);
 28025  1B95  083D               	movf	modbus_response_read_clib_data@len,w
 28026  1B96  00B6               	movwf	??_modbus_response_read_clib_data
 28027  1B97  0836               	movf	??_modbus_response_read_clib_data,w
 28028  1B98  00F3               	movwf	my_uart1_send_poll@len
 28029  1B99  083F               	movf	modbus_response_read_clib_data@buf,w
 28030  1B9A  31B3  2399         	fcall	_my_uart1_send_poll
 28031  1B9C  0008               	return
 28032  1B9D                     __end_of_modbus_response_read_clib_data:	
 28033                           
 28034                           	psect	text94
 28035  363C                     __ptext94:	
 28036 ;; *************** function _modbus_response_illgeal_function *****************
 28037 ;; Defined at:
 28038 ;;		line 6 in file "src/api/modbus.c"
 28039 ;; Parameters:    Size  Location     Type
 28040 ;;  buf             1    wreg     PTR unsigned char 
 28041 ;;		 -> uart1Buffer(80), 
 28042 ;;  errcode         1   19[BANK0 ] unsigned char 
 28043 ;; Auto vars:     Size  Location     Type
 28044 ;;  buf             1   21[BANK0 ] PTR unsigned char 
 28045 ;;		 -> uart1Buffer(80), 
 28046 ;;  pmdbs           1   20[BANK0 ] PTR struct .
 28047 ;;		 -> uart1Buffer(80), 
 28048 ;; Return value:  Size  Location     Type
 28049 ;;                  1    wreg      void 
 28050 ;; Registers used:
 28051 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28052 ;; Tracked objects:
 28053 ;;		On entry : 0/0
 28054 ;;		On exit  : 0/0
 28055 ;;		Unchanged: 0/0
 28056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28057 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 28058 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 28059 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28060 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28061 ;;Total ram usage:        4 bytes
 28062 ;; Hardware stack levels used:    1
 28063 ;; Hardware stack levels required when called:    4
 28064 ;; This function calls:
 28065 ;;		_crc_append
 28066 ;;		_my_uart1_send_poll
 28067 ;; This function is called by:
 28068 ;;		_modbus_response_write_single_register
 28069 ;;		_modbus_response_write_clib_data
 28070 ;;		_modbus_response_read_clib_data
 28071 ;;		_modbus_response_process
 28072 ;; This function uses a non-reentrant model
 28073 ;;
 28074                           
 28075                           
 28076                           ;psect for function _modbus_response_illgeal_function
 28077  363C                     _modbus_response_illgeal_function:	
 28078                           
 28079                           ;incstack = 0
 28080                           ; Regs used in _modbus_response_illgeal_function: [wreg+fsr1l+fsr1h+status,2+status,0+pc
      +                          lath+cstack]
 28081                           ;modbus_response_illgeal_function@buf stored from wreg
 28082  363C  0020               	movlb	0	; select bank0
 28083  363D  00B5               	movwf	modbus_response_illgeal_function@buf
 28084                           
 28085                           ;modbus.c: 8: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 28086  363E  0835               	movf	modbus_response_illgeal_function@buf,w
 28087  363F  00F7               	movwf	??_modbus_response_illgeal_function
 28088  3640  0877               	movf	??_modbus_response_illgeal_function,w
 28089  3641  00B4               	movwf	modbus_response_illgeal_function@pmdbs
 28090                           
 28091                           ;modbus.c: 9: if(pmdbs->addr==0x00)return;
 28092  3642  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28093  3643  0086               	movwf	6
 28094  3644  3004               	movlw	4	; select bank8/9
 28095  3645  0087               	movwf	7
 28096  3646  0801               	movf	1,w
 28097  3647  1903               	btfsc	3,2
 28098  3648  0008               	return
 28099                           
 28100                           ;modbus.c: 10: pmdbs->addr=mainSystemData.shortID;
 28101  3649  0024               	movlb	4	; select bank4
 28102  364A  0829               	movf	(_mainSystemData^(0+512)+9),w
 28103  364B  00F7               	movwf	??_modbus_response_illgeal_function
 28104  364C  0020               	movlb	0	; select bank0
 28105  364D  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28106  364E  0086               	movwf	6
 28107  364F  3004               	movlw	4	; select bank8/9
 28108  3650  0087               	movwf	7
 28109  3651  0877               	movf	??_modbus_response_illgeal_function,w
 28110  3652  0081               	movwf	1
 28111                           
 28112                           ;modbus.c: 11: if(errcode){
 28113  3653  0833               	movf	modbus_response_illgeal_function@errcode,w
 28114  3654  1903               	btfsc	3,2
 28115  3655  2E5E               	goto	l760
 28116                           
 28117                           ;modbus.c: 12: pmdbs->func+=0x80;
 28118  3656  3080               	movlw	128
 28119  3657  00F7               	movwf	??_modbus_response_illgeal_function
 28120  3658  0A34               	incf	modbus_response_illgeal_function@pmdbs,w
 28121  3659  0086               	movwf	6
 28122  365A  3004               	movlw	4	; select bank8/9
 28123  365B  0087               	movwf	7
 28124  365C  0877               	movf	??_modbus_response_illgeal_function,w
 28125  365D  0781               	addwf	1,f
 28126  365E                     l760:	
 28127                           
 28128                           ;modbus.c: 13: }
 28129                           ;modbus.c: 14: pmdbs->errcord=errcode;
 28130  365E  0833               	movf	modbus_response_illgeal_function@errcode,w
 28131  365F  00F7               	movwf	??_modbus_response_illgeal_function
 28132  3660  0834               	movf	modbus_response_illgeal_function@pmdbs,w
 28133  3661  3E02               	addlw	2
 28134  3662  0086               	movwf	6
 28135  3663  3004               	movlw	4	; select bank8/9
 28136  3664  0087               	movwf	7
 28137  3665  0877               	movf	??_modbus_response_illgeal_function,w
 28138  3666  0081               	movwf	1
 28139                           
 28140                           ;modbus.c: 15: crc_append(buf,3);
 28141  3667  0835               	movf	modbus_response_illgeal_function@buf,w
 28142  3668  00A8               	movwf	crc_append@message
 28143  3669  3004               	movlw	4
 28144  366A  00A9               	movwf	crc_append@message+1
 28145  366B  3003               	movlw	3
 28146  366C  00AA               	movwf	crc_append@n
 28147  366D  3000               	movlw	0
 28148  366E  00AB               	movwf	crc_append@n+1
 28149  366F  31B3  23C9  31B6   	fcall	_crc_append
 28150                           
 28151                           ;modbus.c: 16: my_uart1_send_poll(buf,5);
 28152  3672  3005               	movlw	5
 28153  3673  00F7               	movwf	??_modbus_response_illgeal_function
 28154  3674  0877               	movf	??_modbus_response_illgeal_function,w
 28155  3675  00F3               	movwf	my_uart1_send_poll@len
 28156  3676  0020               	movlb	0	; select bank0
 28157  3677  0835               	movf	modbus_response_illgeal_function@buf,w
 28158  3678  31B3  2399         	fcall	_my_uart1_send_poll
 28159  367A  0008               	return
 28160  367B                     __end_of_modbus_response_illgeal_function:	
 28161                           
 28162                           	psect	text95
 28163  25DD                     __ptext95:	
 28164 ;; *************** function _modbus_response_command *****************
 28165 ;; Defined at:
 28166 ;;		line 153 in file "src/api/modbus.c"
 28167 ;; Parameters:    Size  Location     Type
 28168 ;;  rbuf            1    wreg     PTR unsigned char 
 28169 ;;		 -> uart1Buffer(80), 
 28170 ;; Auto vars:     Size  Location     Type
 28171 ;;  rbuf            1   41[BANK0 ] PTR unsigned char 
 28172 ;;		 -> uart1Buffer(80), 
 28173 ;;  tempData        2   42[BANK0 ] unsigned int 
 28174 ;;  startAddr       2   36[BANK0 ] unsigned int 
 28175 ;;  tmpAddr         2   34[BANK0 ] unsigned int 
 28176 ;;  len             1   40[BANK0 ] unsigned char 
 28177 ;;  i               1   39[BANK0 ] unsigned char 
 28178 ;;  pmdbs           1   38[BANK0 ] PTR struct .
 28179 ;;		 -> uart1Buffer(80), 
 28180 ;; Return value:  Size  Location     Type
 28181 ;;                  1    wreg      void 
 28182 ;; Registers used:
 28183 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28184 ;; Tracked objects:
 28185 ;;		On entry : 0/0
 28186 ;;		On exit  : 0/0
 28187 ;;		Unchanged: 0/0
 28188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28190 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 28191 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 28192 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0
 28193 ;;Total ram usage:       12 bytes
 28194 ;; Hardware stack levels used:    1
 28195 ;; Hardware stack levels required when called:    4
 28196 ;; This function calls:
 28197 ;;		_crc_append
 28198 ;;		_getRegisterVal
 28199 ;;		_my_uart1_send_poll
 28200 ;; This function is called by:
 28201 ;;		_modbus_response_process
 28202 ;; This function uses a non-reentrant model
 28203 ;;
 28204                           
 28205                           
 28206                           ;psect for function _modbus_response_command
 28207  25DD                     _modbus_response_command:	
 28208                           
 28209                           ;incstack = 0
 28210                           ; Regs used in _modbus_response_command: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 28211                           ;modbus_response_command@rbuf stored from wreg
 28212  25DD  0020               	movlb	0	; select bank0
 28213  25DE  00C9               	movwf	modbus_response_command@rbuf
 28214                           
 28215                           ;modbus.c: 154: uint8_t i;
 28216                           ;modbus.c: 155: uint16_t startAddr=0;
 28217  25DF  01C4               	clrf	modbus_response_command@startAddr
 28218  25E0  01C5               	clrf	modbus_response_command@startAddr+1
 28219                           
 28220                           ;modbus.c: 156: uint16_t tempData,tmpAddr;
 28221                           ;modbus.c: 157: uint8_t len=0;
 28222  25E1  01C8               	clrf	modbus_response_command@len
 28223                           
 28224                           ;modbus.c: 158: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 28225  25E2  0849               	movf	modbus_response_command@rbuf,w
 28226  25E3  00C0               	movwf	??_modbus_response_command
 28227  25E4  0840               	movf	??_modbus_response_command,w
 28228  25E5  00C6               	movwf	modbus_response_command@pmdbs
 28229                           
 28230                           ;modbus.c: 159: if(pmdbs->addr!=mainSystemData.shortID)return;
 28231  25E6  0846               	movf	modbus_response_command@pmdbs,w
 28232  25E7  0086               	movwf	6
 28233  25E8  3004               	movlw	4	; select bank8/9
 28234  25E9  0087               	movwf	7
 28235  25EA  0801               	movf	1,w
 28236  25EB  0024               	movlb	4	; select bank4
 28237  25EC  0629               	xorwf	(_mainSystemData^(0+512)+9),w
 28238  25ED  1D03               	btfss	3,2
 28239  25EE  0008               	return
 28240                           
 28241                           ;modbus.c: 160: startAddr=pmdbs->addr_hi;
 28242  25EF  0020               	movlb	0	; select bank0
 28243  25F0  0846               	movf	modbus_response_command@pmdbs,w
 28244  25F1  3E02               	addlw	2
 28245  25F2  0086               	movwf	6
 28246  25F3  3004               	movlw	4	; select bank8/9
 28247  25F4  0087               	movwf	7
 28248  25F5  0801               	movf	1,w
 28249  25F6  00C0               	movwf	??_modbus_response_command
 28250  25F7  01C1               	clrf	??_modbus_response_command+1
 28251  25F8  0840               	movf	??_modbus_response_command,w
 28252  25F9  00C4               	movwf	modbus_response_command@startAddr
 28253  25FA  0841               	movf	??_modbus_response_command+1,w
 28254  25FB  00C5               	movwf	modbus_response_command@startAddr+1
 28255                           
 28256                           ;modbus.c: 161: startAddr<<=8;
 28257  25FC  3008               	movlw	8
 28258  25FD                     u13635:	
 28259  25FD  35C4               	lslf	modbus_response_command@startAddr,f
 28260  25FE  0DC5               	rlf	modbus_response_command@startAddr+1,f
 28261  25FF  0B89               	decfsz	9,f
 28262  2600  2DFD               	goto	u13635
 28263                           
 28264                           ;modbus.c: 162: startAddr |= pmdbs->addr_lo;
 28265  2601  0846               	movf	modbus_response_command@pmdbs,w
 28266  2602  3E03               	addlw	3
 28267  2603  0086               	movwf	6
 28268  2604  3004               	movlw	4	; select bank8/9
 28269  2605  0087               	movwf	7
 28270  2606  0801               	movf	1,w
 28271  2607  00C0               	movwf	??_modbus_response_command
 28272  2608  01C1               	clrf	??_modbus_response_command+1
 28273  2609  0840               	movf	??_modbus_response_command,w
 28274  260A  04C4               	iorwf	modbus_response_command@startAddr,f
 28275  260B  0841               	movf	??_modbus_response_command+1,w
 28276  260C  04C5               	iorwf	modbus_response_command@startAddr+1,f
 28277                           
 28278                           ;modbus.c: 163: tmpAddr=startAddr;
 28279  260D  0845               	movf	modbus_response_command@startAddr+1,w
 28280  260E  00C3               	movwf	modbus_response_command@tmpAddr+1
 28281  260F  0844               	movf	modbus_response_command@startAddr,w
 28282  2610  00C2               	movwf	modbus_response_command@tmpAddr
 28283                           
 28284                           ;modbus.c: 164: len = pmdbs->len_lo;
 28285  2611  0846               	movf	modbus_response_command@pmdbs,w
 28286  2612  0086               	movwf	6
 28287  2613  3004               	movlw	4	; select bank8/9
 28288  2614  0087               	movwf	7
 28289  2615  3004               	movlw	4	; select bank8/9
 28290  2616  3F45               	moviw [5]fsr1
 28291  2617  00C8               	movwf	modbus_response_command@len
 28292                           
 28293                           ;modbus.c: 165: len<<=1;
 28294  2618  1003               	clrc
 28295  2619  0DC8               	rlf	modbus_response_command@len,f
 28296                           
 28297                           ;modbus.c: 166: if(len>32)len=32;
 28298  261A  3021               	movlw	33
 28299  261B  0248               	subwf	modbus_response_command@len,w
 28300  261C  1C03               	skipc
 28301  261D  2E22               	goto	l15063
 28302  261E  3020               	movlw	32
 28303  261F  00C0               	movwf	??_modbus_response_command
 28304  2620  0840               	movf	??_modbus_response_command,w
 28305  2621  00C8               	movwf	modbus_response_command@len
 28306  2622                     l15063:	
 28307                           
 28308                           ;modbus.c: 167: for(i=0;i<len;i=i+2,tmpAddr++){
 28309  2622  01C7               	clrf	modbus_response_command@i
 28310  2623                     l15075:	
 28311  2623  0848               	movf	modbus_response_command@len,w
 28312  2624  0247               	subwf	modbus_response_command@i,w
 28313  2625  1803               	btfsc	3,0
 28314  2626  2E55               	goto	l15077
 28315                           
 28316                           ;modbus.c: 168: getRegisterVal(tmpAddr,&tempData);
 28317  2627  0843               	movf	modbus_response_command@tmpAddr+1,w
 28318  2628  00B6               	movwf	getRegisterVal@addr+1
 28319  2629  0842               	movf	modbus_response_command@tmpAddr,w
 28320  262A  00B5               	movwf	getRegisterVal@addr
 28321  262B  304A               	movlw	(low (modbus_response_command@tempData| 0))& (0+255)
 28322  262C  00C0               	movwf	??_modbus_response_command
 28323  262D  0840               	movf	??_modbus_response_command,w
 28324  262E  00B7               	movwf	getRegisterVal@tempData
 28325  262F  3189  2150  31A5   	fcall	_getRegisterVal
 28326                           
 28327                           ;modbus.c: 169: rbuf[i+3] = tempData >> 8;
 28328  2632  0020               	movlb	0	; select bank0
 28329  2633  084B               	movf	modbus_response_command@tempData+1,w
 28330  2634  00C0               	movwf	??_modbus_response_command
 28331  2635  0847               	movf	modbus_response_command@i,w
 28332  2636  3E03               	addlw	3
 28333  2637  0749               	addwf	modbus_response_command@rbuf,w
 28334  2638  00C1               	movwf	??_modbus_response_command+1
 28335  2639  0841               	movf	??_modbus_response_command+1,w
 28336  263A  0086               	movwf	6
 28337  263B  3004               	movlw	4	; select bank8/9
 28338  263C  0087               	movwf	7
 28339  263D  0840               	movf	??_modbus_response_command,w
 28340  263E  0081               	movwf	1
 28341                           
 28342                           ;modbus.c: 170: rbuf[i+4] = tempData & 0xff;
 28343  263F  084A               	movf	modbus_response_command@tempData,w
 28344  2640  00C0               	movwf	??_modbus_response_command
 28345  2641  0847               	movf	modbus_response_command@i,w
 28346  2642  3E04               	addlw	4
 28347  2643  0749               	addwf	modbus_response_command@rbuf,w
 28348  2644  00C1               	movwf	??_modbus_response_command+1
 28349  2645  0841               	movf	??_modbus_response_command+1,w
 28350  2646  0086               	movwf	6
 28351  2647  3004               	movlw	4	; select bank8/9
 28352  2648  0087               	movwf	7
 28353  2649  0840               	movf	??_modbus_response_command,w
 28354  264A  0081               	movwf	1
 28355  264B  0847               	movf	modbus_response_command@i,w
 28356  264C  3E02               	addlw	2
 28357  264D  00C0               	movwf	??_modbus_response_command
 28358  264E  0840               	movf	??_modbus_response_command,w
 28359  264F  00C7               	movwf	modbus_response_command@i
 28360  2650  3001               	movlw	1
 28361  2651  07C2               	addwf	modbus_response_command@tmpAddr,f
 28362  2652  3000               	movlw	0
 28363  2653  3DC3               	addwfc	modbus_response_command@tmpAddr+1,f
 28364  2654  2E23               	goto	l15075
 28365  2655                     l15077:	
 28366                           
 28367                           ;modbus.c: 172: }
 28368                           ;modbus.c: 173: rbuf[0] = mainSystemData.shortID;
 28369  2655  0024               	movlb	4	; select bank4
 28370  2656  0829               	movf	(_mainSystemData^(0+512)+9),w
 28371  2657  0020               	movlb	0	; select bank0
 28372  2658  00C0               	movwf	??_modbus_response_command
 28373  2659  0849               	movf	modbus_response_command@rbuf,w
 28374  265A  0086               	movwf	6
 28375  265B  3004               	movlw	4	; select bank8/9
 28376  265C  0087               	movwf	7
 28377  265D  0840               	movf	??_modbus_response_command,w
 28378  265E  0081               	movwf	1
 28379                           
 28380                           ;modbus.c: 174: rbuf[1] = 3;
 28381  265F  3003               	movlw	3
 28382  2660  00C0               	movwf	??_modbus_response_command
 28383  2661  0A49               	incf	modbus_response_command@rbuf,w
 28384  2662  0086               	movwf	6
 28385  2663  3004               	movlw	4	; select bank8/9
 28386  2664  0087               	movwf	7
 28387  2665  0840               	movf	??_modbus_response_command,w
 28388  2666  0081               	movwf	1
 28389                           
 28390                           ;modbus.c: 175: rbuf[2] = len;
 28391  2667  0848               	movf	modbus_response_command@len,w
 28392  2668  00C0               	movwf	??_modbus_response_command
 28393  2669  0849               	movf	modbus_response_command@rbuf,w
 28394  266A  3E02               	addlw	2
 28395  266B  0086               	movwf	6
 28396  266C  3004               	movlw	4	; select bank8/9
 28397  266D  0087               	movwf	7
 28398  266E  0840               	movf	??_modbus_response_command,w
 28399  266F  0081               	movwf	1
 28400                           
 28401                           ;modbus.c: 176: len += 3;
 28402  2670  3003               	movlw	3
 28403  2671  00C0               	movwf	??_modbus_response_command
 28404  2672  0840               	movf	??_modbus_response_command,w
 28405  2673  07C8               	addwf	modbus_response_command@len,f
 28406                           
 28407                           ;modbus.c: 177: crc_append(rbuf,len);
 28408  2674  0849               	movf	modbus_response_command@rbuf,w
 28409  2675  00A8               	movwf	crc_append@message
 28410  2676  3004               	movlw	4
 28411  2677  00A9               	movwf	crc_append@message+1
 28412  2678  0848               	movf	modbus_response_command@len,w
 28413  2679  00C0               	movwf	??_modbus_response_command
 28414  267A  01C1               	clrf	??_modbus_response_command+1
 28415  267B  0840               	movf	??_modbus_response_command,w
 28416  267C  00AA               	movwf	crc_append@n
 28417  267D  0841               	movf	??_modbus_response_command+1,w
 28418  267E  00AB               	movwf	crc_append@n+1
 28419  267F  31B3  23C9  31A5   	fcall	_crc_append
 28420                           
 28421                           ;modbus.c: 178: len += 2;
 28422  2682  3002               	movlw	2
 28423  2683  0020               	movlb	0	; select bank0
 28424  2684  00C0               	movwf	??_modbus_response_command
 28425  2685  0840               	movf	??_modbus_response_command,w
 28426  2686  07C8               	addwf	modbus_response_command@len,f
 28427                           
 28428                           ;modbus.c: 179: my_uart1_send_poll(rbuf,len);
 28429  2687  0848               	movf	modbus_response_command@len,w
 28430  2688  00C0               	movwf	??_modbus_response_command
 28431  2689  0840               	movf	??_modbus_response_command,w
 28432  268A  00F3               	movwf	my_uart1_send_poll@len
 28433  268B  0849               	movf	modbus_response_command@rbuf,w
 28434  268C  31B3  2399         	fcall	_my_uart1_send_poll
 28435  268E  0008               	return
 28436  268F                     __end_of_modbus_response_command:	
 28437                           
 28438                           	psect	text96
 28439  3399                     __ptext96:	
 28440 ;; *************** function _my_uart1_send_poll *****************
 28441 ;; Defined at:
 28442 ;;		line 56 in file "mcc_generated_files/eusart1.c"
 28443 ;; Parameters:    Size  Location     Type
 28444 ;;  buf             1    wreg     PTR unsigned char 
 28445 ;;		 -> uart1Buffer(80), 
 28446 ;;  len             1    3[COMMON] unsigned char 
 28447 ;; Auto vars:     Size  Location     Type
 28448 ;;  buf             1    5[COMMON] PTR unsigned char 
 28449 ;;		 -> uart1Buffer(80), 
 28450 ;; Return value:  Size  Location     Type
 28451 ;;                  1    wreg      void 
 28452 ;; Registers used:
 28453 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 28454 ;; Tracked objects:
 28455 ;;		On entry : 0/0
 28456 ;;		On exit  : 0/0
 28457 ;;		Unchanged: 0/0
 28458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28459 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28462 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28463 ;;Total ram usage:        3 bytes
 28464 ;; Hardware stack levels used:    1
 28465 ;; Hardware stack levels required when called:    2
 28466 ;; This function calls:
 28467 ;;		Nothing
 28468 ;; This function is called by:
 28469 ;;		_modbus_response_illgeal_function
 28470 ;;		_modbus_response_write_single_register
 28471 ;;		_modbus_response_command
 28472 ;;		_modbus_response_write_clib_data
 28473 ;;		_modbus_response_read_clib_data
 28474 ;; This function uses a non-reentrant model
 28475 ;;
 28476                           
 28477                           
 28478                           ;psect for function _my_uart1_send_poll
 28479  3399                     _my_uart1_send_poll:	
 28480                           
 28481                           ;incstack = 0
 28482                           ; Regs used in _my_uart1_send_poll: [wreg+fsr1l+fsr1h+status,2+status,0]
 28483                           ;my_uart1_send_poll@buf stored from wreg
 28484  3399  00F5               	movwf	my_uart1_send_poll@buf
 28485                           
 28486                           ;eusart1.c: 61: do{do { LATAbits.LATA4 = 1; } while(0);}while(0);;
 28487  339A  0022               	movlb	2	; select bank2
 28488  339B  160C               	bsf	12,4	;volatile
 28489                           
 28490                           ;eusart1.c: 63: for(sendCount=0;sendCount<len;sendCount++){
 28491  339C  01BF               	clrf	_sendCount^(0+256)
 28492  339D                     l13615:	
 28493  339D  0873               	movf	my_uart1_send_poll@len,w
 28494  339E  023F               	subwf	_sendCount^(0+256),w
 28495  339F  1803               	btfsc	3,0
 28496  33A0  2BBB               	goto	l261
 28497  33A1                     l257:	
 28498                           ;eusart1.c: 64: do{
 28499                           
 28500                           
 28501                           ;eusart1.c: 65: if(PIR1bits.TXIF)break;
 28502  33A1  0020               	movlb	0	; select bank0
 28503  33A2  1E11               	btfss	17,4	;volatile
 28504  33A3  2BA1               	goto	l257
 28505                           
 28506                           ;eusart1.c: 67: __nop();
 28507                           
 28508                           ;eusart1.c: 66: }while(1);
 28509  33A4  0000               	nop
 28510                           
 28511                           ;eusart1.c: 68: __nop();
 28512  33A5  0000               	nop
 28513                           
 28514                           ;eusart1.c: 69: __nop();
 28515  33A6  0000               	nop
 28516                           
 28517                           ;eusart1.c: 72: TX1REG=(uint8_t)(buf[sendCount]);
 28518  33A7  0022               	movlb	2	; select bank2
 28519  33A8  083F               	movf	_sendCount^(0+256),w
 28520  33A9  0775               	addwf	my_uart1_send_poll@buf,w
 28521  33AA  00F4               	movwf	??_my_uart1_send_poll
 28522  33AB  0874               	movf	??_my_uart1_send_poll,w
 28523  33AC  0086               	movwf	6
 28524  33AD  3004               	movlw	4	; select bank8/9
 28525  33AE  0087               	movwf	7
 28526  33AF  0801               	movf	1,w
 28527  33B0  0023               	movlb	3	; select bank3
 28528  33B1  009A               	movwf	26	;volatile
 28529                           
 28530                           ;eusart1.c: 73: __nop();
 28531  33B2  0000               	nop
 28532                           
 28533                           ;eusart1.c: 74: __nop();
 28534  33B3  0000               	nop
 28535                           
 28536                           ;eusart1.c: 75: __nop();
 28537  33B4  0000               	nop
 28538  33B5  3001               	movlw	1
 28539  33B6  00F4               	movwf	??_my_uart1_send_poll
 28540  33B7  0874               	movf	??_my_uart1_send_poll,w
 28541  33B8  0022               	movlb	2	; select bank2
 28542  33B9  07BF               	addwf	_sendCount^(0+256),f
 28543  33BA  2B9D               	goto	l13615
 28544  33BB                     l261:	
 28545                           ;eusart1.c: 76: }
 28546                           ;eusart1.c: 77: do{
 28547                           
 28548                           
 28549                           ;eusart1.c: 78: if(PIR1bits.TXIF)break;
 28550  33BB  0020               	movlb	0	; select bank0
 28551  33BC  1E11               	btfss	17,4	;volatile
 28552  33BD  2BBB               	goto	l261
 28553                           
 28554                           ;eusart1.c: 80: TX1REG=0x00;
 28555                           
 28556                           ;eusart1.c: 79: }while(1);
 28557  33BE  0023               	movlb	3	; select bank3
 28558  33BF  019A               	clrf	26	;volatile
 28559                           
 28560                           ;eusart1.c: 81: __nop();
 28561  33C0  0000               	nop
 28562                           
 28563                           ;eusart1.c: 82: __nop();
 28564  33C1  0000               	nop
 28565                           
 28566                           ;eusart1.c: 83: __nop();
 28567  33C2  0000               	nop
 28568  33C3                     l13627:	
 28569                           ;eusart1.c: 84: do{
 28570                           
 28571                           
 28572                           ;eusart1.c: 85: if(PIR1bits.TXIF)break;
 28573  33C3  0020               	movlb	0	; select bank0
 28574  33C4  1E11               	btfss	17,4	;volatile
 28575  33C5  2BC3               	goto	l13627
 28576                           
 28577                           ;eusart1.c: 93: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 28578                           
 28579                           ;eusart1.c: 86: }while(1);
 28580  33C6  0022               	movlb	2	; select bank2
 28581  33C7  120C               	bcf	12,4	;volatile
 28582  33C8  0008               	return
 28583  33C9                     __end_of_my_uart1_send_poll:	
 28584                           
 28585                           	psect	text97
 28586  0950                     __ptext97:	
 28587 ;; *************** function _getRegisterVal *****************
 28588 ;; Defined at:
 28589 ;;		line 18 in file "src/api/modbus.c"
 28590 ;; Parameters:    Size  Location     Type
 28591 ;;  addr            2   21[BANK0 ] unsigned int 
 28592 ;;  tempData        1   23[BANK0 ] PTR unsigned int 
 28593 ;;		 -> modbus_response_command@tempData(2), 
 28594 ;; Auto vars:     Size  Location     Type
 28595 ;;  tempAddr        2   30[BANK0 ] unsigned int 
 28596 ;;  result          2   28[BANK0 ] unsigned int 
 28597 ;; Return value:  Size  Location     Type
 28598 ;;                  2   21[BANK0 ] unsigned int 
 28599 ;; Registers used:
 28600 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28601 ;; Tracked objects:
 28602 ;;		On entry : 0/0
 28603 ;;		On exit  : 0/0
 28604 ;;		Unchanged: 0/0
 28605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28606 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28607 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 28608 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 28609 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 28610 ;;Total ram usage:       11 bytes
 28611 ;; Hardware stack levels used:    1
 28612 ;; Hardware stack levels required when called:    3
 28613 ;; This function calls:
 28614 ;;		___aldiv
 28615 ;;		___lldiv
 28616 ;;		___lmul
 28617 ;; This function is called by:
 28618 ;;		_modbus_response_command
 28619 ;; This function uses a non-reentrant model
 28620 ;;
 28621                           
 28622                           
 28623                           ;psect for function _getRegisterVal
 28624  0950                     _getRegisterVal:	
 28625                           
 28626                           ;modbus.c: 20: uint16_t result = 0;
 28627                           
 28628                           ;incstack = 0
 28629                           ; Regs used in _getRegisterVal: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 28630  0950  0020               	movlb	0	; select bank0
 28631  0951  01BC               	clrf	getRegisterVal@result
 28632  0952  01BD               	clrf	getRegisterVal@result+1
 28633                           
 28634                           ;modbus.c: 21: uint16_t tempAddr;
 28635                           ;modbus.c: 24: tempAddr = addr & 0xff;
 28636  0953  30FF               	movlw	255
 28637  0954  0535               	andwf	getRegisterVal@addr,w
 28638  0955  00BE               	movwf	getRegisterVal@tempAddr
 28639  0956  3000               	movlw	0
 28640  0957  0536               	andwf	getRegisterVal@addr+1,w
 28641  0958  00BF               	movwf	getRegisterVal@tempAddr+1
 28642                           
 28643                           ;modbus.c: 25: switch(tempAddr & 0xf)
 28644  0959  2B5E               	goto	l14293
 28645  095A                     l14241:	
 28646                           ;modbus.c: 26: {
 28647                           ;modbus.c: 28: case 1:
 28648                           
 28649                           
 28650                           ;modbus.c: 29: *tempData = 0x5555;
 28651  095A  0837               	movf	getRegisterVal@tempData,w
 28652  095B  0086               	movwf	6
 28653  095C  0187               	clrf	7
 28654  095D  3055               	movlw	85
 28655  095E  3FC0               	movwi [0]fsr1
 28656  095F  3055               	movlw	85
 28657  0960  3FC1               	movwi [1]fsr1
 28658                           
 28659                           ;modbus.c: 30: break;
 28660  0961  0008               	return
 28661  0962                     l14243:	
 28662                           ;modbus.c: 31: case 2:
 28663                           
 28664                           
 28665                           ;modbus.c: 35: *tempData=(deviceStatus.byte & 0x0c);
 28666  0962  0021               	movlb	1	; select bank1
 28667  0963  0840               	movf	_deviceStatus^(0+128),w
 28668  0964  390C               	andlw	12
 28669  0965  0020               	movlb	0	; select bank0
 28670  0966  00B8               	movwf	??_getRegisterVal
 28671  0967  01B9               	clrf	??_getRegisterVal+1
 28672  0968  0837               	movf	getRegisterVal@tempData,w
 28673  0969  0086               	movwf	6
 28674  096A  0187               	clrf	7
 28675  096B  0838               	movf	??_getRegisterVal,w
 28676  096C  3FC0               	movwi [0]fsr1
 28677  096D  0839               	movf	??_getRegisterVal+1,w
 28678  096E  3FC1               	movwi [1]fsr1
 28679                           
 28680                           ;modbus.c: 37: break;
 28681  096F  0008               	return
 28682  0970                     l14245:	
 28683                           ;modbus.c: 39: case 3:
 28684                           
 28685                           
 28686                           ;modbus.c: 45: *tempData=0;
 28687  0970  0837               	movf	getRegisterVal@tempData,w
 28688  0971  0086               	movwf	6
 28689  0972  0187               	clrf	7
 28690  0973  3000               	movlw	0
 28691  0974  3FC0               	movwi [0]fsr1
 28692  0975  3FC1               	movwi [1]fsr1
 28693                           
 28694                           ;modbus.c: 46: break;
 28695  0976  0008               	return
 28696  0977                     l14247:	
 28697                           ;modbus.c: 47: case 4:
 28698                           
 28699                           
 28700                           ;modbus.c: 52: __t32=flow;
 28701  0977  0021               	movlb	1	; select bank1
 28702  0978  083C               	movf	_flow^(0+128),w	;volatile
 28703  0979  00B4               	movwf	___t32^(0+128)
 28704  097A  083D               	movf	(_flow+1)^(0+128),w	;volatile
 28705  097B  00B5               	movwf	(___t32^(0+128)+1)
 28706  097C  01B6               	clrf	(___t32^(0+128)+2)
 28707  097D  01B7               	clrf	(___t32^(0+128)+3)
 28708                           
 28709                           ;modbus.c: 53: __t32=__t32*6;
 28710  097E  0837               	movf	(___t32+3)^(0+128),w
 28711  097F  0020               	movlb	0	; select bank0
 28712  0980  00A3               	movwf	___lmul@multiplier+3
 28713  0981  0021               	movlb	1	; select bank1
 28714  0982  0836               	movf	(___t32+2)^(0+128),w
 28715  0983  0020               	movlb	0	; select bank0
 28716  0984  00A2               	movwf	___lmul@multiplier+2
 28717  0985  0021               	movlb	1	; select bank1
 28718  0986  0835               	movf	(___t32+1)^(0+128),w
 28719  0987  0020               	movlb	0	; select bank0
 28720  0988  00A1               	movwf	___lmul@multiplier+1
 28721  0989  0021               	movlb	1	; select bank1
 28722  098A  0834               	movf	___t32^(0+128),w
 28723  098B  0020               	movlb	0	; select bank0
 28724  098C  00A0               	movwf	___lmul@multiplier
 28725  098D  3000               	movlw	0
 28726  098E  00A7               	movwf	___lmul@multiplicand+3
 28727  098F  3000               	movlw	0
 28728  0990  00A6               	movwf	___lmul@multiplicand+2
 28729  0991  3000               	movlw	0
 28730  0992  00A5               	movwf	___lmul@multiplicand+1
 28731  0993  3006               	movlw	6
 28732  0994  00A4               	movwf	___lmul@multiplicand
 28733  0995  31B3  2369  3189   	fcall	___lmul
 28734  0998  0020               	movlb	0	; select bank0
 28735  0999  0823               	movf	?___lmul+3,w
 28736  099A  0021               	movlb	1	; select bank1
 28737  099B  00B7               	movwf	(___t32+3)^(0+128)
 28738  099C  0020               	movlb	0	; select bank0
 28739  099D  0822               	movf	?___lmul+2,w
 28740  099E  0021               	movlb	1	; select bank1
 28741  099F  00B6               	movwf	(___t32+2)^(0+128)
 28742  09A0  0020               	movlb	0	; select bank0
 28743  09A1  0821               	movf	?___lmul+1,w
 28744  09A2  0021               	movlb	1	; select bank1
 28745  09A3  00B5               	movwf	(___t32+1)^(0+128)
 28746  09A4  0020               	movlb	0	; select bank0
 28747  09A5  0820               	movf	?___lmul,w
 28748  09A6  0021               	movlb	1	; select bank1
 28749  09A7  00B4               	movwf	___t32^(0+128)
 28750                           
 28751                           ;modbus.c: 54: __t32=__t32/10;
 28752  09A8  3000               	movlw	0
 28753  09A9  0020               	movlb	0	; select bank0
 28754  09AA  00AB               	movwf	___lldiv@divisor+3
 28755  09AB  3000               	movlw	0
 28756  09AC  00AA               	movwf	___lldiv@divisor+2
 28757  09AD  3000               	movlw	0
 28758  09AE  00A9               	movwf	___lldiv@divisor+1
 28759  09AF  300A               	movlw	10
 28760  09B0  00A8               	movwf	___lldiv@divisor
 28761  09B1  0021               	movlb	1	; select bank1
 28762  09B2  0837               	movf	(___t32+3)^(0+128),w
 28763  09B3  0020               	movlb	0	; select bank0
 28764  09B4  00AF               	movwf	___lldiv@dividend+3
 28765  09B5  0021               	movlb	1	; select bank1
 28766  09B6  0836               	movf	(___t32+2)^(0+128),w
 28767  09B7  0020               	movlb	0	; select bank0
 28768  09B8  00AE               	movwf	___lldiv@dividend+2
 28769  09B9  0021               	movlb	1	; select bank1
 28770  09BA  0835               	movf	(___t32+1)^(0+128),w
 28771  09BB  0020               	movlb	0	; select bank0
 28772  09BC  00AD               	movwf	___lldiv@dividend+1
 28773  09BD  0021               	movlb	1	; select bank1
 28774  09BE  0834               	movf	___t32^(0+128),w
 28775  09BF  0020               	movlb	0	; select bank0
 28776  09C0  00AC               	movwf	___lldiv@dividend
 28777  09C1  31AA  2268         	fcall	___lldiv
 28778  09C3  0020               	movlb	0	; select bank0
 28779  09C4  082B               	movf	?___lldiv+3,w
 28780  09C5  0021               	movlb	1	; select bank1
 28781  09C6  00B7               	movwf	(___t32+3)^(0+128)
 28782  09C7  0020               	movlb	0	; select bank0
 28783  09C8  082A               	movf	?___lldiv+2,w
 28784  09C9  0021               	movlb	1	; select bank1
 28785  09CA  00B6               	movwf	(___t32+2)^(0+128)
 28786  09CB  0020               	movlb	0	; select bank0
 28787  09CC  0829               	movf	?___lldiv+1,w
 28788  09CD  0021               	movlb	1	; select bank1
 28789  09CE  00B5               	movwf	(___t32+1)^(0+128)
 28790  09CF  0020               	movlb	0	; select bank0
 28791  09D0  0828               	movf	?___lldiv,w
 28792  09D1  0021               	movlb	1	; select bank1
 28793  09D2  00B4               	movwf	___t32^(0+128)
 28794                           
 28795                           ;modbus.c: 55: *tempData=(uint16_t)( __t32 & 0x0000ffff);
 28796  09D3  0020               	movlb	0	; select bank0
 28797  09D4  0837               	movf	getRegisterVal@tempData,w
 28798  09D5  0086               	movwf	6
 28799  09D6  0187               	clrf	7
 28800  09D7  0021               	movlb	1	; select bank1
 28801  09D8  0834               	movf	___t32^(0+128),w
 28802  09D9  3FC0               	movwi [0]fsr1
 28803  09DA  0835               	movf	(___t32+1)^(0+128),w
 28804  09DB  3FC1               	movwi [1]fsr1
 28805                           
 28806                           ;modbus.c: 56: break;
 28807  09DC  0008               	return
 28808  09DD                     l14255:	
 28809                           ;modbus.c: 58: case 5:
 28810                           
 28811                           
 28812                           ;modbus.c: 61: __t32=rtBalanceMoney/100;
 28813  09DD  3000               	movlw	0
 28814  09DE  0020               	movlb	0	; select bank0
 28815  09DF  00A3               	movwf	___aldiv@divisor+3
 28816  09E0  3000               	movlw	0
 28817  09E1  00A2               	movwf	___aldiv@divisor+2
 28818  09E2  3000               	movlw	0
 28819  09E3  00A1               	movwf	___aldiv@divisor+1
 28820  09E4  3064               	movlw	100
 28821  09E5  00A0               	movwf	___aldiv@divisor
 28822  09E6  0021               	movlb	1	; select bank1
 28823  09E7  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 28824  09E8  0020               	movlb	0	; select bank0
 28825  09E9  00A7               	movwf	___aldiv@dividend+3
 28826  09EA  0021               	movlb	1	; select bank1
 28827  09EB  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 28828  09EC  0020               	movlb	0	; select bank0
 28829  09ED  00A6               	movwf	___aldiv@dividend+2
 28830  09EE  0021               	movlb	1	; select bank1
 28831  09EF  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 28832  09F0  0020               	movlb	0	; select bank0
 28833  09F1  00A5               	movwf	___aldiv@dividend+1
 28834  09F2  0021               	movlb	1	; select bank1
 28835  09F3  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 28836  09F4  0020               	movlb	0	; select bank0
 28837  09F5  00A4               	movwf	___aldiv@dividend
 28838  09F6  31A0  2013  3189   	fcall	___aldiv
 28839  09F9  0020               	movlb	0	; select bank0
 28840  09FA  0823               	movf	?___aldiv+3,w
 28841  09FB  0021               	movlb	1	; select bank1
 28842  09FC  00B7               	movwf	(___t32+3)^(0+128)
 28843  09FD  0020               	movlb	0	; select bank0
 28844  09FE  0822               	movf	?___aldiv+2,w
 28845  09FF  0021               	movlb	1	; select bank1
 28846  0A00  00B6               	movwf	(___t32+2)^(0+128)
 28847  0A01  0020               	movlb	0	; select bank0
 28848  0A02  0821               	movf	?___aldiv+1,w
 28849  0A03  0021               	movlb	1	; select bank1
 28850  0A04  00B5               	movwf	(___t32+1)^(0+128)
 28851  0A05  0020               	movlb	0	; select bank0
 28852  0A06  0820               	movf	?___aldiv,w
 28853  0A07  0021               	movlb	1	; select bank1
 28854  0A08  00B4               	movwf	___t32^(0+128)
 28855                           
 28856                           ;modbus.c: 62: *tempData = (uint16_t)((__t32>>16) & 0x0000ffff);
 28857  0A09  0834               	movf	___t32^(0+128),w
 28858  0A0A  0020               	movlb	0	; select bank0
 28859  0A0B  00B8               	movwf	??_getRegisterVal
 28860  0A0C  0021               	movlb	1	; select bank1
 28861  0A0D  0835               	movf	(___t32+1)^(0+128),w
 28862  0A0E  0020               	movlb	0	; select bank0
 28863  0A0F  00B9               	movwf	??_getRegisterVal+1
 28864  0A10  0021               	movlb	1	; select bank1
 28865  0A11  0836               	movf	(___t32+2)^(0+128),w
 28866  0A12  0020               	movlb	0	; select bank0
 28867  0A13  00BA               	movwf	??_getRegisterVal+2
 28868  0A14  0021               	movlb	1	; select bank1
 28869  0A15  0837               	movf	(___t32+3)^(0+128),w
 28870  0A16  0020               	movlb	0	; select bank0
 28871  0A17  00BB               	movwf	??_getRegisterVal+3
 28872  0A18  3010               	movlw	16
 28873  0A19                     u12985:	
 28874  0A19  36BB               	lsrf	??_getRegisterVal+3,f
 28875  0A1A  0CBA               	rrf	??_getRegisterVal+2,f
 28876  0A1B  0CB9               	rrf	??_getRegisterVal+1,f
 28877  0A1C  0CB8               	rrf	??_getRegisterVal,f
 28878  0A1D  0B89               	decfsz	9,f
 28879  0A1E  2A19               	goto	u12985
 28880  0A1F  0837               	movf	getRegisterVal@tempData,w
 28881  0A20  0086               	movwf	6
 28882  0A21  0187               	clrf	7
 28883  0A22  0838               	movf	??_getRegisterVal,w
 28884  0A23  3FC0               	movwi [0]fsr1
 28885  0A24  0839               	movf	??_getRegisterVal+1,w
 28886  0A25  3FC1               	movwi [1]fsr1
 28887                           
 28888                           ;modbus.c: 64: break;
 28889  0A26  0008               	return
 28890  0A27                     l14259:	
 28891                           ;modbus.c: 65: case 6:
 28892                           
 28893                           
 28894                           ;modbus.c: 67: __t32=rtBalanceMoney/100;
 28895  0A27  3000               	movlw	0
 28896  0A28  00A3               	movwf	___aldiv@divisor+3
 28897  0A29  3000               	movlw	0
 28898  0A2A  00A2               	movwf	___aldiv@divisor+2
 28899  0A2B  3000               	movlw	0
 28900  0A2C  00A1               	movwf	___aldiv@divisor+1
 28901  0A2D  3064               	movlw	100
 28902  0A2E  00A0               	movwf	___aldiv@divisor
 28903  0A2F  0021               	movlb	1	; select bank1
 28904  0A30  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 28905  0A31  0020               	movlb	0	; select bank0
 28906  0A32  00A7               	movwf	___aldiv@dividend+3
 28907  0A33  0021               	movlb	1	; select bank1
 28908  0A34  082A               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 28909  0A35  0020               	movlb	0	; select bank0
 28910  0A36  00A6               	movwf	___aldiv@dividend+2
 28911  0A37  0021               	movlb	1	; select bank1
 28912  0A38  0829               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 28913  0A39  0020               	movlb	0	; select bank0
 28914  0A3A  00A5               	movwf	___aldiv@dividend+1
 28915  0A3B  0021               	movlb	1	; select bank1
 28916  0A3C  0828               	movf	_rtBalanceMoney^(0+128),w	;volatile
 28917  0A3D  0020               	movlb	0	; select bank0
 28918  0A3E  00A4               	movwf	___aldiv@dividend
 28919  0A3F  31A0  2013         	fcall	___aldiv
 28920  0A41  0020               	movlb	0	; select bank0
 28921  0A42  0823               	movf	?___aldiv+3,w
 28922  0A43  0021               	movlb	1	; select bank1
 28923  0A44  00B7               	movwf	(___t32+3)^(0+128)
 28924  0A45  0020               	movlb	0	; select bank0
 28925  0A46  0822               	movf	?___aldiv+2,w
 28926  0A47  0021               	movlb	1	; select bank1
 28927  0A48  00B6               	movwf	(___t32+2)^(0+128)
 28928  0A49  0020               	movlb	0	; select bank0
 28929  0A4A  0821               	movf	?___aldiv+1,w
 28930  0A4B  0021               	movlb	1	; select bank1
 28931  0A4C  00B5               	movwf	(___t32+1)^(0+128)
 28932  0A4D  0020               	movlb	0	; select bank0
 28933  0A4E  0820               	movf	?___aldiv,w
 28934  0A4F  0021               	movlb	1	; select bank1
 28935  0A50  00B4               	movwf	___t32^(0+128)
 28936                           
 28937                           ;modbus.c: 68: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 28938  0A51  0020               	movlb	0	; select bank0
 28939  0A52  0837               	movf	getRegisterVal@tempData,w
 28940  0A53  0086               	movwf	6
 28941  0A54  0187               	clrf	7
 28942  0A55  0021               	movlb	1	; select bank1
 28943  0A56  0834               	movf	___t32^(0+128),w
 28944  0A57  3FC0               	movwi [0]fsr1
 28945  0A58  0835               	movf	(___t32+1)^(0+128),w
 28946  0A59  3FC1               	movwi [1]fsr1
 28947                           
 28948                           ;modbus.c: 70: break;
 28949  0A5A  0008               	return
 28950  0A5B                     l14263:	
 28951                           ;modbus.c: 72: case 7:
 28952                           
 28953                           
 28954                           ;modbus.c: 75: __t32=mainSystemData.totalConsumeVolume;
 28955  0A5B  3030               	movlw	48
 28956  0A5C  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 28957  0A5D  0086               	movwf	6
 28958  0A5E  3002               	movlw	2	; select bank4/5
 28959  0A5F  0087               	movwf	7
 28960  0A60  3F40               	moviw [0]fsr1
 28961  0A61  0021               	movlb	1	; select bank1
 28962  0A62  00B4               	movwf	___t32^(0+128)
 28963  0A63  3F41               	moviw [1]fsr1
 28964  0A64  00B5               	movwf	(___t32+1)^(0+128)
 28965  0A65  3F42               	moviw [2]fsr1
 28966  0A66  00B6               	movwf	(___t32+2)^(0+128)
 28967  0A67  3F43               	moviw [3]fsr1
 28968  0A68  00B7               	movwf	(___t32+3)^(0+128)
 28969                           
 28970                           ;modbus.c: 76: __t32 += rtVolume_m3;
 28971  0A69  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 28972  0A6A  07B4               	addwf	___t32^(0+128),f
 28973  0A6B  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 28974  0A6C  3DB5               	addwfc	(___t32+1)^(0+128),f
 28975  0A6D  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 28976  0A6E  3DB6               	addwfc	(___t32+2)^(0+128),f
 28977  0A6F  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 28978  0A70  3DB7               	addwfc	(___t32+3)^(0+128),f
 28979                           
 28980                           ;modbus.c: 78: *tempData =(uint16_t)( (__t32>>16) & 0x0000ffff);
 28981  0A71  0834               	movf	___t32^(0+128),w
 28982  0A72  0020               	movlb	0	; select bank0
 28983  0A73  00B8               	movwf	??_getRegisterVal
 28984  0A74  0021               	movlb	1	; select bank1
 28985  0A75  0835               	movf	(___t32+1)^(0+128),w
 28986  0A76  0020               	movlb	0	; select bank0
 28987  0A77  00B9               	movwf	??_getRegisterVal+1
 28988  0A78  0021               	movlb	1	; select bank1
 28989  0A79  0836               	movf	(___t32+2)^(0+128),w
 28990  0A7A  0020               	movlb	0	; select bank0
 28991  0A7B  00BA               	movwf	??_getRegisterVal+2
 28992  0A7C  0021               	movlb	1	; select bank1
 28993  0A7D  0837               	movf	(___t32+3)^(0+128),w
 28994  0A7E  0020               	movlb	0	; select bank0
 28995  0A7F  00BB               	movwf	??_getRegisterVal+3
 28996  0A80  3010               	movlw	16
 28997  0A81                     u12995:	
 28998  0A81  36BB               	lsrf	??_getRegisterVal+3,f
 28999  0A82  0CBA               	rrf	??_getRegisterVal+2,f
 29000  0A83  0CB9               	rrf	??_getRegisterVal+1,f
 29001  0A84  0CB8               	rrf	??_getRegisterVal,f
 29002  0A85  0B89               	decfsz	9,f
 29003  0A86  2A81               	goto	u12995
 29004  0A87  0837               	movf	getRegisterVal@tempData,w
 29005  0A88  0086               	movwf	6
 29006  0A89  0187               	clrf	7
 29007  0A8A  0838               	movf	??_getRegisterVal,w
 29008  0A8B  3FC0               	movwi [0]fsr1
 29009  0A8C  0839               	movf	??_getRegisterVal+1,w
 29010  0A8D  3FC1               	movwi [1]fsr1
 29011                           
 29012                           ;modbus.c: 79: break;
 29013  0A8E  0008               	return
 29014  0A8F                     l14269:	
 29015                           ;modbus.c: 80: case 8:
 29016                           
 29017                           
 29018                           ;modbus.c: 83: __t32=mainSystemData.totalConsumeVolume;
 29019  0A8F  3030               	movlw	48
 29020  0A90  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29021  0A91  0086               	movwf	6
 29022  0A92  3002               	movlw	2	; select bank4/5
 29023  0A93  0087               	movwf	7
 29024  0A94  3F40               	moviw [0]fsr1
 29025  0A95  0021               	movlb	1	; select bank1
 29026  0A96  00B4               	movwf	___t32^(0+128)
 29027  0A97  3F41               	moviw [1]fsr1
 29028  0A98  00B5               	movwf	(___t32+1)^(0+128)
 29029  0A99  3F42               	moviw [2]fsr1
 29030  0A9A  00B6               	movwf	(___t32+2)^(0+128)
 29031  0A9B  3F43               	moviw [3]fsr1
 29032  0A9C  00B7               	movwf	(___t32+3)^(0+128)
 29033                           
 29034                           ;modbus.c: 84: __t32 += rtVolume_m3;
 29035  0A9D  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 29036  0A9E  07B4               	addwf	___t32^(0+128),f
 29037  0A9F  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 29038  0AA0  3DB5               	addwfc	(___t32+1)^(0+128),f
 29039  0AA1  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 29040  0AA2  3DB6               	addwfc	(___t32+2)^(0+128),f
 29041  0AA3  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 29042  0AA4  3DB7               	addwfc	(___t32+3)^(0+128),f
 29043                           
 29044                           ;modbus.c: 85: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 29045  0AA5  0020               	movlb	0	; select bank0
 29046  0AA6  0837               	movf	getRegisterVal@tempData,w
 29047  0AA7  0086               	movwf	6
 29048  0AA8  0187               	clrf	7
 29049  0AA9  0021               	movlb	1	; select bank1
 29050  0AAA  0834               	movf	___t32^(0+128),w
 29051  0AAB  3FC0               	movwi [0]fsr1
 29052  0AAC  0835               	movf	(___t32+1)^(0+128),w
 29053  0AAD  3FC1               	movwi [1]fsr1
 29054                           
 29055                           ;modbus.c: 86: break;
 29056  0AAE  0008               	return
 29057  0AAF                     l14275:	
 29058                           ;modbus.c: 87: case 9:
 29059                           
 29060                           
 29061                           ;modbus.c: 90: *tempData =(uint16_t)(mainSystemData.price);
 29062  0AAF  0020               	movlb	0	; select bank0
 29063  0AB0  0837               	movf	getRegisterVal@tempData,w
 29064  0AB1  0086               	movwf	6
 29065  0AB2  0187               	clrf	7
 29066  0AB3  0024               	movlb	4	; select bank4
 29067  0AB4  0832               	movf	(_mainSystemData^(0+512)+18),w
 29068  0AB5  3FC0               	movwi [0]fsr1
 29069  0AB6  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 29070  0AB7  3FC1               	movwi [1]fsr1
 29071                           
 29072                           ;modbus.c: 91: break;
 29073  0AB8  0008               	return
 29074  0AB9                     l14277:	
 29075                           ;modbus.c: 92: case 0x0a:
 29076                           
 29077                           
 29078                           ;modbus.c: 93: __t32=mainSystemData.transferMoney;
 29079  0AB9  300C               	movlw	12
 29080  0ABA  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29081  0ABB  0086               	movwf	6
 29082  0ABC  3002               	movlw	2	; select bank4/5
 29083  0ABD  0087               	movwf	7
 29084  0ABE  3F40               	moviw [0]fsr1
 29085  0ABF  0021               	movlb	1	; select bank1
 29086  0AC0  00B4               	movwf	___t32^(0+128)
 29087  0AC1  3F41               	moviw [1]fsr1
 29088  0AC2  00B5               	movwf	(___t32+1)^(0+128)
 29089  0AC3  3F42               	moviw [2]fsr1
 29090  0AC4  00B6               	movwf	(___t32+2)^(0+128)
 29091  0AC5  3F43               	moviw [3]fsr1
 29092  0AC6  00B7               	movwf	(___t32+3)^(0+128)
 29093                           
 29094                           ;modbus.c: 94: __t32=__t32/100;
 29095  0AC7  3000               	movlw	0
 29096  0AC8  0020               	movlb	0	; select bank0
 29097  0AC9  00AB               	movwf	___lldiv@divisor+3
 29098  0ACA  3000               	movlw	0
 29099  0ACB  00AA               	movwf	___lldiv@divisor+2
 29100  0ACC  3000               	movlw	0
 29101  0ACD  00A9               	movwf	___lldiv@divisor+1
 29102  0ACE  3064               	movlw	100
 29103  0ACF  00A8               	movwf	___lldiv@divisor
 29104  0AD0  0021               	movlb	1	; select bank1
 29105  0AD1  0837               	movf	(___t32+3)^(0+128),w
 29106  0AD2  0020               	movlb	0	; select bank0
 29107  0AD3  00AF               	movwf	___lldiv@dividend+3
 29108  0AD4  0021               	movlb	1	; select bank1
 29109  0AD5  0836               	movf	(___t32+2)^(0+128),w
 29110  0AD6  0020               	movlb	0	; select bank0
 29111  0AD7  00AE               	movwf	___lldiv@dividend+2
 29112  0AD8  0021               	movlb	1	; select bank1
 29113  0AD9  0835               	movf	(___t32+1)^(0+128),w
 29114  0ADA  0020               	movlb	0	; select bank0
 29115  0ADB  00AD               	movwf	___lldiv@dividend+1
 29116  0ADC  0021               	movlb	1	; select bank1
 29117  0ADD  0834               	movf	___t32^(0+128),w
 29118  0ADE  0020               	movlb	0	; select bank0
 29119  0ADF  00AC               	movwf	___lldiv@dividend
 29120  0AE0  31AA  2268  3189   	fcall	___lldiv
 29121  0AE3  0020               	movlb	0	; select bank0
 29122  0AE4  082B               	movf	?___lldiv+3,w
 29123  0AE5  0021               	movlb	1	; select bank1
 29124  0AE6  00B7               	movwf	(___t32+3)^(0+128)
 29125  0AE7  0020               	movlb	0	; select bank0
 29126  0AE8  082A               	movf	?___lldiv+2,w
 29127  0AE9  0021               	movlb	1	; select bank1
 29128  0AEA  00B6               	movwf	(___t32+2)^(0+128)
 29129  0AEB  0020               	movlb	0	; select bank0
 29130  0AEC  0829               	movf	?___lldiv+1,w
 29131  0AED  0021               	movlb	1	; select bank1
 29132  0AEE  00B5               	movwf	(___t32+1)^(0+128)
 29133  0AEF  0020               	movlb	0	; select bank0
 29134  0AF0  0828               	movf	?___lldiv,w
 29135  0AF1  0021               	movlb	1	; select bank1
 29136  0AF2  00B4               	movwf	___t32^(0+128)
 29137                           
 29138                           ;modbus.c: 95: *tempData =(uint16_t)( (__t32>>16) & 0x0000ffff);
 29139  0AF3  0834               	movf	___t32^(0+128),w
 29140  0AF4  0020               	movlb	0	; select bank0
 29141  0AF5  00B8               	movwf	??_getRegisterVal
 29142  0AF6  0021               	movlb	1	; select bank1
 29143  0AF7  0835               	movf	(___t32+1)^(0+128),w
 29144  0AF8  0020               	movlb	0	; select bank0
 29145  0AF9  00B9               	movwf	??_getRegisterVal+1
 29146  0AFA  0021               	movlb	1	; select bank1
 29147  0AFB  0836               	movf	(___t32+2)^(0+128),w
 29148  0AFC  0020               	movlb	0	; select bank0
 29149  0AFD  00BA               	movwf	??_getRegisterVal+2
 29150  0AFE  0021               	movlb	1	; select bank1
 29151  0AFF  0837               	movf	(___t32+3)^(0+128),w
 29152  0B00  0020               	movlb	0	; select bank0
 29153  0B01  00BB               	movwf	??_getRegisterVal+3
 29154  0B02  3010               	movlw	16
 29155  0B03                     u13005:	
 29156  0B03  36BB               	lsrf	??_getRegisterVal+3,f
 29157  0B04  0CBA               	rrf	??_getRegisterVal+2,f
 29158  0B05  0CB9               	rrf	??_getRegisterVal+1,f
 29159  0B06  0CB8               	rrf	??_getRegisterVal,f
 29160  0B07  0B89               	decfsz	9,f
 29161  0B08  2B03               	goto	u13005
 29162  0B09  0837               	movf	getRegisterVal@tempData,w
 29163  0B0A  0086               	movwf	6
 29164  0B0B  0187               	clrf	7
 29165  0B0C  0838               	movf	??_getRegisterVal,w
 29166  0B0D  3FC0               	movwi [0]fsr1
 29167  0B0E  0839               	movf	??_getRegisterVal+1,w
 29168  0B0F  3FC1               	movwi [1]fsr1
 29169                           
 29170                           ;modbus.c: 96: break;
 29171  0B10  0008               	return
 29172  0B11                     l14283:	
 29173                           ;modbus.c: 97: case 0x0b:
 29174                           
 29175                           
 29176                           ;modbus.c: 98: __t32=mainSystemData.transferMoney;
 29177  0B11  300C               	movlw	12
 29178  0B12  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 29179  0B13  0086               	movwf	6
 29180  0B14  3002               	movlw	2	; select bank4/5
 29181  0B15  0087               	movwf	7
 29182  0B16  3F40               	moviw [0]fsr1
 29183  0B17  0021               	movlb	1	; select bank1
 29184  0B18  00B4               	movwf	___t32^(0+128)
 29185  0B19  3F41               	moviw [1]fsr1
 29186  0B1A  00B5               	movwf	(___t32+1)^(0+128)
 29187  0B1B  3F42               	moviw [2]fsr1
 29188  0B1C  00B6               	movwf	(___t32+2)^(0+128)
 29189  0B1D  3F43               	moviw [3]fsr1
 29190  0B1E  00B7               	movwf	(___t32+3)^(0+128)
 29191                           
 29192                           ;modbus.c: 99: __t32=__t32/100;
 29193  0B1F  3000               	movlw	0
 29194  0B20  0020               	movlb	0	; select bank0
 29195  0B21  00AB               	movwf	___lldiv@divisor+3
 29196  0B22  3000               	movlw	0
 29197  0B23  00AA               	movwf	___lldiv@divisor+2
 29198  0B24  3000               	movlw	0
 29199  0B25  00A9               	movwf	___lldiv@divisor+1
 29200  0B26  3064               	movlw	100
 29201  0B27  00A8               	movwf	___lldiv@divisor
 29202  0B28  0021               	movlb	1	; select bank1
 29203  0B29  0837               	movf	(___t32+3)^(0+128),w
 29204  0B2A  0020               	movlb	0	; select bank0
 29205  0B2B  00AF               	movwf	___lldiv@dividend+3
 29206  0B2C  0021               	movlb	1	; select bank1
 29207  0B2D  0836               	movf	(___t32+2)^(0+128),w
 29208  0B2E  0020               	movlb	0	; select bank0
 29209  0B2F  00AE               	movwf	___lldiv@dividend+2
 29210  0B30  0021               	movlb	1	; select bank1
 29211  0B31  0835               	movf	(___t32+1)^(0+128),w
 29212  0B32  0020               	movlb	0	; select bank0
 29213  0B33  00AD               	movwf	___lldiv@dividend+1
 29214  0B34  0021               	movlb	1	; select bank1
 29215  0B35  0834               	movf	___t32^(0+128),w
 29216  0B36  0020               	movlb	0	; select bank0
 29217  0B37  00AC               	movwf	___lldiv@dividend
 29218  0B38  31AA  2268         	fcall	___lldiv
 29219  0B3A  0020               	movlb	0	; select bank0
 29220  0B3B  082B               	movf	?___lldiv+3,w
 29221  0B3C  0021               	movlb	1	; select bank1
 29222  0B3D  00B7               	movwf	(___t32+3)^(0+128)
 29223  0B3E  0020               	movlb	0	; select bank0
 29224  0B3F  082A               	movf	?___lldiv+2,w
 29225  0B40  0021               	movlb	1	; select bank1
 29226  0B41  00B6               	movwf	(___t32+2)^(0+128)
 29227  0B42  0020               	movlb	0	; select bank0
 29228  0B43  0829               	movf	?___lldiv+1,w
 29229  0B44  0021               	movlb	1	; select bank1
 29230  0B45  00B5               	movwf	(___t32+1)^(0+128)
 29231  0B46  0020               	movlb	0	; select bank0
 29232  0B47  0828               	movf	?___lldiv,w
 29233  0B48  0021               	movlb	1	; select bank1
 29234  0B49  00B4               	movwf	___t32^(0+128)
 29235                           
 29236                           ;modbus.c: 100: *tempData =(uint16_t)( __t32 & 0x0000ffff);
 29237  0B4A  0020               	movlb	0	; select bank0
 29238  0B4B  0837               	movf	getRegisterVal@tempData,w
 29239  0B4C  0086               	movwf	6
 29240  0B4D  0187               	clrf	7
 29241  0B4E  0021               	movlb	1	; select bank1
 29242  0B4F  0834               	movf	___t32^(0+128),w
 29243  0B50  3FC0               	movwi [0]fsr1
 29244  0B51  0835               	movf	(___t32+1)^(0+128),w
 29245  0B52  3FC1               	movwi [1]fsr1
 29246                           
 29247                           ;modbus.c: 101: break;
 29248  0B53  0008               	return
 29249  0B54                     l14289:	
 29250                           ;modbus.c: 102: case 0x0c:
 29251                           
 29252                           
 29253                           ;modbus.c: 103: *tempData =(uint16_t)(mainSystemData.transferTime);
 29254  0B54  0020               	movlb	0	; select bank0
 29255  0B55  0837               	movf	getRegisterVal@tempData,w
 29256  0B56  0086               	movwf	6
 29257  0B57  0187               	clrf	7
 29258  0B58  0024               	movlb	4	; select bank4
 29259  0B59  0830               	movf	(_mainSystemData^(0+512)+16),w
 29260  0B5A  3FC0               	movwi [0]fsr1
 29261  0B5B  0831               	movf	((_mainSystemData+1)^(0+512)+16),w
 29262  0B5C  3FC1               	movwi [1]fsr1
 29263                           
 29264                           ;modbus.c: 108: }
 29265                           
 29266                           ;modbus.c: 106: break;
 29267                           
 29268                           ;modbus.c: 105: default:
 29269                           
 29270                           ;modbus.c: 104: break;
 29271  0B5D  0008               	return
 29272  0B5E                     l14293:	
 29273  0B5E  300F               	movlw	15
 29274  0B5F  0020               	movlb	0	; select bank0
 29275  0B60  053E               	andwf	getRegisterVal@tempAddr,w
 29276  0B61  00B8               	movwf	??_getRegisterVal
 29277  0B62  3000               	movlw	0
 29278  0B63  053F               	andwf	getRegisterVal@tempAddr+1,w
 29279  0B64  00B9               	movwf	??_getRegisterVal+1
 29280                           
 29281                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 29282                           ; Switch size 1, requested type "space"
 29283                           ; Number of cases is 1, Range of values is 0 to 0
 29284                           ; switch strategies available:
 29285                           ; Name         Instructions Cycles
 29286                           ; simple_byte            4     3 (average)
 29287                           ; direct_byte            8     6 (fixed)
 29288                           ; jumptable            260     6 (fixed)
 29289                           ;	Chosen strategy is simple_byte
 29290  0B65  0839               	movf	??_getRegisterVal+1,w
 29291  0B66  3A00               	xorlw	0	; case 0
 29292  0B67  1903               	skipnz
 29293  0B68  2B6A               	goto	l17361
 29294  0B69  2B77               	goto	l778
 29295  0B6A                     l17361:	
 29296                           
 29297                           ; Switch size 1, requested type "space"
 29298                           ; Number of cases is 12, Range of values is 1 to 12
 29299                           ; switch strategies available:
 29300                           ; Name         Instructions Cycles
 29301                           ; direct_byte           33     9 (fixed)
 29302                           ; simple_byte           37    19 (average)
 29303                           ; jumptable            263     9 (fixed)
 29304                           ;	Chosen strategy is direct_byte
 29305  0B6A  0838               	movf	??_getRegisterVal,w
 29306  0B6B  3EFF               	addlw	-1
 29307  0B6C  1C03               	skipc
 29308  0B6D  0008               	return
 29309  0B6E  0084               	movwf	4
 29310  0B6F  300C               	movlw	12
 29311  0B70  0204               	subwf	4,w
 29312  0B71  1803               	skipnc
 29313  0B72  0008               	return
 29314  0B73  31B8               	movlp	high S17363
 29315  0B74  3504               	lslf	4,w
 29316  0B75  3E51               	addlw	low S17363
 29317  0B76  0082               	movwf	2
 29318  0B77                     l778:	
 29319                           ;modbus.c: 109: return result;
 29320                           ;	Return value of _getRegisterVal is never used
 29321                           
 29322  0B77  0008               	return
 29323  0B78                     __end_of_getRegisterVal:	
 29324                           
 29325                           	psect	swtext3
 29326  3851                     __pswtext3:	
 29327  3851                     S17363:	
 29328  3851  3189  295A         	ljmp	l14241
 29329  3853  3189  2962         	ljmp	l14243
 29330  3855  3189  2970         	ljmp	l14245
 29331  3857  3189  2977         	ljmp	l14247
 29332  3859  3189  29DD         	ljmp	l14255
 29333  385B  318A  2A27         	ljmp	l14259
 29334  385D  318A  2A5B         	ljmp	l14263
 29335  385F  318A  2A8F         	ljmp	l14269
 29336  3861  318A  2AAF         	ljmp	l14275
 29337  3863  318A  2AB9         	ljmp	l14277
 29338  3865  318B  2B11         	ljmp	l14283
 29339  3867  318B  2B54         	ljmp	l14289
 29340                           
 29341                           	psect	text98
 29342  2013                     __ptext98:	
 29343 ;; *************** function ___aldiv *****************
 29344 ;; Defined at:
 29345 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\aldiv.c"
 29346 ;; Parameters:    Size  Location     Type
 29347 ;;  divisor         4    0[BANK0 ] long 
 29348 ;;  dividend        4    4[BANK0 ] long 
 29349 ;; Auto vars:     Size  Location     Type
 29350 ;;  quotient        4   10[BANK0 ] long 
 29351 ;;  sign            1    9[BANK0 ] unsigned char 
 29352 ;;  counter         1    8[BANK0 ] unsigned char 
 29353 ;; Return value:  Size  Location     Type
 29354 ;;                  4    0[BANK0 ] long 
 29355 ;; Registers used:
 29356 ;;		wreg, status,2, status,0
 29357 ;; Tracked objects:
 29358 ;;		On entry : 0/0
 29359 ;;		On exit  : 0/0
 29360 ;;		Unchanged: 0/0
 29361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29362 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 29363 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 29364 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29365 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0
 29366 ;;Total ram usage:       15 bytes
 29367 ;; Hardware stack levels used:    1
 29368 ;; Hardware stack levels required when called:    2
 29369 ;; This function calls:
 29370 ;;		Nothing
 29371 ;; This function is called by:
 29372 ;;		_ui_uint32_2_str
 29373 ;;		_ui_key_process_enter
 29374 ;;		_ui_disp_balance_and_volume
 29375 ;;		_getRegisterVal
 29376 ;; This function uses a non-reentrant model
 29377 ;;
 29378                           
 29379                           
 29380                           ;psect for function ___aldiv
 29381  2013                     ___aldiv:	
 29382                           
 29383                           ;incstack = 0
 29384                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 29385  2013  0020               	movlb	0	; select bank0
 29386  2014  01A9               	clrf	___aldiv@sign
 29387  2015  1FA3               	btfss	___aldiv@divisor+3,7
 29388  2016  2824               	goto	l2758
 29389  2017  09A0               	comf	___aldiv@divisor,f
 29390  2018  09A1               	comf	___aldiv@divisor+1,f
 29391  2019  09A2               	comf	___aldiv@divisor+2,f
 29392  201A  09A3               	comf	___aldiv@divisor+3,f
 29393  201B  0AA0               	incf	___aldiv@divisor,f
 29394  201C  1903               	skipnz
 29395  201D  0AA1               	incf	___aldiv@divisor+1,f
 29396  201E  1903               	skipnz
 29397  201F  0AA2               	incf	___aldiv@divisor+2,f
 29398  2020  1903               	skipnz
 29399  2021  0AA3               	incf	___aldiv@divisor+3,f
 29400  2022  01A9               	clrf	___aldiv@sign
 29401  2023  0AA9               	incf	___aldiv@sign,f
 29402  2024                     l2758:	
 29403  2024  1FA7               	btfss	___aldiv@dividend+3,7
 29404  2025  2835               	goto	l12711
 29405  2026  09A4               	comf	___aldiv@dividend,f
 29406  2027  09A5               	comf	___aldiv@dividend+1,f
 29407  2028  09A6               	comf	___aldiv@dividend+2,f
 29408  2029  09A7               	comf	___aldiv@dividend+3,f
 29409  202A  0AA4               	incf	___aldiv@dividend,f
 29410  202B  1903               	skipnz
 29411  202C  0AA5               	incf	___aldiv@dividend+1,f
 29412  202D  1903               	skipnz
 29413  202E  0AA6               	incf	___aldiv@dividend+2,f
 29414  202F  1903               	skipnz
 29415  2030  0AA7               	incf	___aldiv@dividend+3,f
 29416  2031  3001               	movlw	1
 29417  2032  00F3               	movwf	??___aldiv
 29418  2033  0873               	movf	??___aldiv,w
 29419  2034  06A9               	xorwf	___aldiv@sign,f
 29420  2035                     l12711:	
 29421  2035  3000               	movlw	0
 29422  2036  00AD               	movwf	___aldiv@quotient+3
 29423  2037  3000               	movlw	0
 29424  2038  00AC               	movwf	___aldiv@quotient+2
 29425  2039  3000               	movlw	0
 29426  203A  00AB               	movwf	___aldiv@quotient+1
 29427  203B  3000               	movlw	0
 29428  203C  00AA               	movwf	___aldiv@quotient
 29429  203D  0823               	movf	___aldiv@divisor+3,w
 29430  203E  0422               	iorwf	___aldiv@divisor+2,w
 29431  203F  0421               	iorwf	___aldiv@divisor+1,w
 29432  2040  0420               	iorwf	___aldiv@divisor,w
 29433  2041  1903               	skipnz
 29434  2042  287E               	goto	l12733
 29435  2043  01A8               	clrf	___aldiv@counter
 29436  2044  0AA8               	incf	___aldiv@counter,f
 29437  2045                     l12719:	
 29438  2045  1BA3               	btfsc	___aldiv@divisor+3,7
 29439  2046  2853               	goto	l12721
 29440  2047  3001               	movlw	1
 29441  2048                     u11145:	
 29442  2048  35A0               	lslf	___aldiv@divisor,f
 29443  2049  0DA1               	rlf	___aldiv@divisor+1,f
 29444  204A  0DA2               	rlf	___aldiv@divisor+2,f
 29445  204B  0DA3               	rlf	___aldiv@divisor+3,f
 29446  204C  0B89               	decfsz	9,f
 29447  204D  2848               	goto	u11145
 29448  204E  3001               	movlw	1
 29449  204F  00F3               	movwf	??___aldiv
 29450  2050  0873               	movf	??___aldiv,w
 29451  2051  07A8               	addwf	___aldiv@counter,f
 29452  2052  2845               	goto	l12719
 29453  2053                     l12721:	
 29454  2053  3001               	movlw	1
 29455  2054                     u11165:	
 29456  2054  35AA               	lslf	___aldiv@quotient,f
 29457  2055  0DAB               	rlf	___aldiv@quotient+1,f
 29458  2056  0DAC               	rlf	___aldiv@quotient+2,f
 29459  2057  0DAD               	rlf	___aldiv@quotient+3,f
 29460  2058  0B89               	decfsz	9,f
 29461  2059  2854               	goto	u11165
 29462  205A  0823               	movf	___aldiv@divisor+3,w
 29463  205B  0227               	subwf	___aldiv@dividend+3,w
 29464  205C  1D03               	skipz
 29465  205D  2868               	goto	u11175
 29466  205E  0822               	movf	___aldiv@divisor+2,w
 29467  205F  0226               	subwf	___aldiv@dividend+2,w
 29468  2060  1D03               	skipz
 29469  2061  2868               	goto	u11175
 29470  2062  0821               	movf	___aldiv@divisor+1,w
 29471  2063  0225               	subwf	___aldiv@dividend+1,w
 29472  2064  1D03               	skipz
 29473  2065  2868               	goto	u11175
 29474  2066  0820               	movf	___aldiv@divisor,w
 29475  2067  0224               	subwf	___aldiv@dividend,w
 29476  2068                     u11175:	
 29477  2068  1C03               	skipc
 29478  2069  2873               	goto	l12729
 29479  206A  0820               	movf	___aldiv@divisor,w
 29480  206B  02A4               	subwf	___aldiv@dividend,f
 29481  206C  0821               	movf	___aldiv@divisor+1,w
 29482  206D  3BA5               	subwfb	___aldiv@dividend+1,f
 29483  206E  0822               	movf	___aldiv@divisor+2,w
 29484  206F  3BA6               	subwfb	___aldiv@dividend+2,f
 29485  2070  0823               	movf	___aldiv@divisor+3,w
 29486  2071  3BA7               	subwfb	___aldiv@dividend+3,f
 29487  2072  142A               	bsf	___aldiv@quotient,0
 29488  2073                     l12729:	
 29489  2073  3001               	movlw	1
 29490  2074                     u11185:	
 29491  2074  36A3               	lsrf	___aldiv@divisor+3,f
 29492  2075  0CA2               	rrf	___aldiv@divisor+2,f
 29493  2076  0CA1               	rrf	___aldiv@divisor+1,f
 29494  2077  0CA0               	rrf	___aldiv@divisor,f
 29495  2078  0B89               	decfsz	9,f
 29496  2079  2874               	goto	u11185
 29497  207A  3001               	movlw	1
 29498  207B  02A8               	subwf	___aldiv@counter,f
 29499  207C  1D03               	btfss	3,2
 29500  207D  2853               	goto	l12721
 29501  207E                     l12733:	
 29502  207E  0829               	movf	___aldiv@sign,w
 29503  207F  1903               	btfsc	3,2
 29504  2080  288C               	goto	l12737
 29505  2081  09AA               	comf	___aldiv@quotient,f
 29506  2082  09AB               	comf	___aldiv@quotient+1,f
 29507  2083  09AC               	comf	___aldiv@quotient+2,f
 29508  2084  09AD               	comf	___aldiv@quotient+3,f
 29509  2085  0AAA               	incf	___aldiv@quotient,f
 29510  2086  1903               	skipnz
 29511  2087  0AAB               	incf	___aldiv@quotient+1,f
 29512  2088  1903               	skipnz
 29513  2089  0AAC               	incf	___aldiv@quotient+2,f
 29514  208A  1903               	skipnz
 29515  208B  0AAD               	incf	___aldiv@quotient+3,f
 29516  208C                     l12737:	
 29517  208C  082D               	movf	___aldiv@quotient+3,w
 29518  208D  00A3               	movwf	?___aldiv+3
 29519  208E  082C               	movf	___aldiv@quotient+2,w
 29520  208F  00A2               	movwf	?___aldiv+2
 29521  2090  082B               	movf	___aldiv@quotient+1,w
 29522  2091  00A1               	movwf	?___aldiv+1
 29523  2092  082A               	movf	___aldiv@quotient,w
 29524  2093  00A0               	movwf	?___aldiv
 29525  2094  0008               	return
 29526  2095                     __end_of___aldiv:	
 29527                           
 29528                           	psect	text99
 29529  3B36                     __ptext99:	
 29530 ;; *************** function _mfapi_pcd_init *****************
 29531 ;; Defined at:
 29532 ;;		line 63 in file "src/nfc/apl/mfrc522_apl.c"
 29533 ;; Parameters:    Size  Location     Type
 29534 ;;		None
 29535 ;; Auto vars:     Size  Location     Type
 29536 ;;  v               1   10[BANK0 ] unsigned char 
 29537 ;; Return value:  Size  Location     Type
 29538 ;;                  1    wreg      unsigned char 
 29539 ;; Registers used:
 29540 ;;		wreg, status,2, status,0, pclath, cstack
 29541 ;; Tracked objects:
 29542 ;;		On entry : 0/0
 29543 ;;		On exit  : 0/0
 29544 ;;		Unchanged: 0/0
 29545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29550 ;;Total ram usage:        2 bytes
 29551 ;; Hardware stack levels used:    1
 29552 ;; Hardware stack levels required when called:    7
 29553 ;; This function calls:
 29554 ;;		_mfrc522_bal_read_reg
 29555 ;;		_mfrc522_hal_init
 29556 ;; This function is called by:
 29557 ;;		_main
 29558 ;; This function uses a non-reentrant model
 29559 ;;
 29560                           
 29561                           
 29562                           ;psect for function _mfapi_pcd_init
 29563  3B36                     _mfapi_pcd_init:	
 29564                           
 29565                           ;mfrc522_apl.c: 64: uint8_t v;
 29566                           ;mfrc522_apl.c: 65: mfrc522_hal_init();
 29567                           
 29568                           ;incstack = 0
 29569                           ; Regs used in _mfapi_pcd_init: [wreg+status,2+status,0+pclath+cstack]
 29570  3B36  31AF  270D  31BB   	fcall	_mfrc522_hal_init
 29571                           
 29572                           ;mfrc522_apl.c: 69: v = mfrc522_bal_read_reg(VersionReg);
 29573  3B39  3037               	movlw	55
 29574  3B3A  31BD  2585         	fcall	_mfrc522_bal_read_reg
 29575  3B3C  0020               	movlb	0	; select bank0
 29576  3B3D  00A9               	movwf	??_mfapi_pcd_init
 29577  3B3E  0829               	movf	??_mfapi_pcd_init,w
 29578  3B3F  00AA               	movwf	mfapi_pcd_init@v
 29579                           
 29580                           ;mfrc522_apl.c: 71: return 0;
 29581                           ;	Return value of _mfapi_pcd_init is never used
 29582  3B40  0008               	return
 29583  3B41                     __end_of_mfapi_pcd_init:	
 29584                           ;mfrc522_apl.c: 72: }
 29585                           ;mfrc522_apl.c: 73: return 1;
 29586                           ;	Return value of _mfapi_pcd_init is never used
 29587                           
 29588                           
 29589                           	psect	text100
 29590  2F0D                     __ptext100:	
 29591 ;; *************** function _mfrc522_hal_init *****************
 29592 ;; Defined at:
 29593 ;;		line 99 in file "src/nfc/hal/mfrc522_hal.c"
 29594 ;; Parameters:    Size  Location     Type
 29595 ;;		None
 29596 ;; Auto vars:     Size  Location     Type
 29597 ;;		None
 29598 ;; Return value:  Size  Location     Type
 29599 ;;                  1    wreg      void 
 29600 ;; Registers used:
 29601 ;;		wreg, status,2, status,0, pclath, cstack
 29602 ;; Tracked objects:
 29603 ;;		On entry : 0/0
 29604 ;;		On exit  : 0/0
 29605 ;;		Unchanged: 0/0
 29606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29607 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29608 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29609 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29610 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29611 ;;Total ram usage:        1 bytes
 29612 ;; Hardware stack levels used:    1
 29613 ;; Hardware stack levels required when called:    6
 29614 ;; This function calls:
 29615 ;;		_delay
 29616 ;;		_mfrc522_bal_write_reg
 29617 ;;		_mfrc522_hal_antenna_on
 29618 ;;		_mfrc522_hal_reset_sf
 29619 ;;		_mfrc522_hal_set_antenna_gain
 29620 ;; This function is called by:
 29621 ;;		_mfapi_pcd_init
 29622 ;; This function uses a non-reentrant model
 29623 ;;
 29624                           
 29625                           
 29626                           ;psect for function _mfrc522_hal_init
 29627  2F0D                     _mfrc522_hal_init:	
 29628                           
 29629                           ;incstack = 0
 29630                           ; Regs used in _mfrc522_hal_init: [wreg+status,2+status,0+pclath+cstack]
 29631                           ;mfrc522_hal.c: 102: do{ do { TRISBbits.TRISB5 = 0; } while(0); do { TRISCbits.TRISC2 = 
      +                          0; } while(0); do { TRISCbits.TRISC3 = 0; } while(0); do { TRISCbits.TRISC4 = 0; } while
      +                          (0); do { TRISCbits.TRISC5 = 1; } while(0); do { LATBbits.LATB5 = 1; } while(0); do { LA
      +                          TCbits.
 29632  2F0D  0021               	movlb	1	; select bank1
 29633  2F0E  128D               	bcf	13,5	;volatile
 29634  2F0F  110E               	bcf	14,2	;volatile
 29635  2F10  118E               	bcf	14,3	;volatile
 29636  2F11  120E               	bcf	14,4	;volatile
 29637  2F12  168E               	bsf	14,5	;volatile
 29638  2F13  0022               	movlb	2	; select bank2
 29639  2F14  168D               	bsf	13,5	;volatile
 29640  2F15  150E               	bsf	14,2	;volatile
 29641  2F16  158E               	bsf	14,3	;volatile
 29642  2F17  168E               	bsf	14,5	;volatile
 29643                           
 29644                           ;mfrc522_hal.c: 104: ;;
 29645                           ;mfrc522_hal.c: 105: delay(1847);
 29646  2F18  3037               	movlw	55
 29647  2F19  00F3               	movwf	delay@t
 29648  2F1A  3007               	movlw	7
 29649  2F1B  00F4               	movwf	delay@t+1
 29650  2F1C  31BB  2389  31AF   	fcall	_delay
 29651                           
 29652                           ;mfrc522_hal.c: 107: do { LATBbits.LATB5 = 0; } while(0);;;;
 29653  2F1F  0022               	movlb	2	; select bank2
 29654  2F20  128D               	bcf	13,5	;volatile
 29655                           
 29656                           ;mfrc522_hal.c: 108: delay(1847);
 29657  2F21  3037               	movlw	55
 29658  2F22  00F3               	movwf	delay@t
 29659  2F23  3007               	movlw	7
 29660  2F24  00F4               	movwf	delay@t+1
 29661  2F25  31BB  2389  31AF   	fcall	_delay
 29662                           
 29663                           ;mfrc522_hal.c: 109: do { LATBbits.LATB5 = 1; } while(0);;;;
 29664  2F28  0022               	movlb	2	; select bank2
 29665  2F29  168D               	bsf	13,5	;volatile
 29666                           
 29667                           ;mfrc522_hal.c: 111: delay(1847);
 29668  2F2A  3037               	movlw	55
 29669  2F2B  00F3               	movwf	delay@t
 29670  2F2C  3007               	movlw	7
 29671  2F2D  00F4               	movwf	delay@t+1
 29672  2F2E  31BB  2389  31AF   	fcall	_delay
 29673                           
 29674                           ;mfrc522_hal.c: 112: mfrc522_hal_reset_sf();
 29675  2F31  31BB  2311  31AF   	fcall	_mfrc522_hal_reset_sf
 29676                           
 29677                           ;mfrc522_hal.c: 113: delay(1847);
 29678  2F34  3037               	movlw	55
 29679  2F35  00F3               	movwf	delay@t
 29680  2F36  3007               	movlw	7
 29681  2F37  00F4               	movwf	delay@t+1
 29682  2F38  31BB  2389  31AF   	fcall	_delay
 29683                           
 29684                           ;mfrc522_hal.c: 116: mfrc522_bal_write_reg(TModeReg, 0x80);
 29685  2F3B  3080               	movlw	128
 29686  2F3C  0020               	movlb	0	; select bank0
 29687  2F3D  00A8               	movwf	??_mfrc522_hal_init
 29688  2F3E  0828               	movf	??_mfrc522_hal_init,w
 29689  2F3F  00F7               	movwf	mfrc522_bal_write_reg@x
 29690  2F40  302A               	movlw	42
 29691  2F41  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29692                           
 29693                           ;mfrc522_hal.c: 117: mfrc522_bal_write_reg(TPrescalerReg, 0xA9);
 29694  2F44  30A9               	movlw	169
 29695  2F45  0020               	movlb	0	; select bank0
 29696  2F46  00A8               	movwf	??_mfrc522_hal_init
 29697  2F47  0828               	movf	??_mfrc522_hal_init,w
 29698  2F48  00F7               	movwf	mfrc522_bal_write_reg@x
 29699  2F49  302B               	movlw	43
 29700  2F4A  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29701                           
 29702                           ;mfrc522_hal.c: 118: mfrc522_bal_write_reg(TReloadRegH, 0x04);
 29703  2F4D  3004               	movlw	4
 29704  2F4E  0020               	movlb	0	; select bank0
 29705  2F4F  00A8               	movwf	??_mfrc522_hal_init
 29706  2F50  0828               	movf	??_mfrc522_hal_init,w
 29707  2F51  00F7               	movwf	mfrc522_bal_write_reg@x
 29708  2F52  302C               	movlw	44
 29709  2F53  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29710                           
 29711                           ;mfrc522_hal.c: 119: mfrc522_bal_write_reg(TReloadRegL, 0xE8);
 29712  2F56  30E8               	movlw	232
 29713  2F57  0020               	movlb	0	; select bank0
 29714  2F58  00A8               	movwf	??_mfrc522_hal_init
 29715  2F59  0828               	movf	??_mfrc522_hal_init,w
 29716  2F5A  00F7               	movwf	mfrc522_bal_write_reg@x
 29717  2F5B  302D               	movlw	45
 29718  2F5C  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29719                           
 29720                           ;mfrc522_hal.c: 120: mfrc522_bal_write_reg(TxASKReg, 0x40);
 29721  2F5F  3040               	movlw	64
 29722  2F60  0020               	movlb	0	; select bank0
 29723  2F61  00A8               	movwf	??_mfrc522_hal_init
 29724  2F62  0828               	movf	??_mfrc522_hal_init,w
 29725  2F63  00F7               	movwf	mfrc522_bal_write_reg@x
 29726  2F64  3015               	movlw	21
 29727  2F65  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29728                           
 29729                           ;mfrc522_hal.c: 121: mfrc522_bal_write_reg(ModeReg, 0x3D);
 29730  2F68  303D               	movlw	61
 29731  2F69  0020               	movlb	0	; select bank0
 29732  2F6A  00A8               	movwf	??_mfrc522_hal_init
 29733  2F6B  0828               	movf	??_mfrc522_hal_init,w
 29734  2F6C  00F7               	movwf	mfrc522_bal_write_reg@x
 29735  2F6D  3011               	movlw	17
 29736  2F6E  31BB  23F2  31AF   	fcall	_mfrc522_bal_write_reg
 29737                           
 29738                           ;mfrc522_hal.c: 122: delay(1847);
 29739  2F71  3037               	movlw	55
 29740  2F72  00F3               	movwf	delay@t
 29741  2F73  3007               	movlw	7
 29742  2F74  00F4               	movwf	delay@t+1
 29743  2F75  31BB  2389  31AF   	fcall	_delay
 29744                           
 29745                           ;mfrc522_hal.c: 124: mfrc522_hal_set_antenna_gain(RxGain_avg);
 29746  2F78  3040               	movlw	64
 29747  2F79  31BD  25B9  31AF   	fcall	_mfrc522_hal_set_antenna_gain
 29748                           
 29749                           ;mfrc522_hal.c: 125: mfrc522_hal_antenna_on();
 29750  2F7C  31BD  2554  31AF   	fcall	_mfrc522_hal_antenna_on
 29751                           
 29752                           ;mfrc522_hal.c: 126: delay(1847);
 29753  2F7F  3037               	movlw	55
 29754  2F80  00F3               	movwf	delay@t
 29755  2F81  3007               	movlw	7
 29756  2F82  00F4               	movwf	delay@t+1
 29757  2F83  31BB  2389         	fcall	_delay
 29758  2F85  0008               	return
 29759  2F86                     __end_of_mfrc522_hal_init:	
 29760                           
 29761                           	psect	text101
 29762  3DB9                     __ptext101:	
 29763 ;; *************** function _mfrc522_hal_set_antenna_gain *****************
 29764 ;; Defined at:
 29765 ;;		line 160 in file "src/nfc/hal/mfrc522_hal.c"
 29766 ;; Parameters:    Size  Location     Type
 29767 ;;  gain            1    wreg     unsigned char 
 29768 ;; Auto vars:     Size  Location     Type
 29769 ;;  gain            1    7[BANK0 ] unsigned char 
 29770 ;; Return value:  Size  Location     Type
 29771 ;;                  1    wreg      void 
 29772 ;; Registers used:
 29773 ;;		wreg, status,2, status,0, pclath, cstack
 29774 ;; Tracked objects:
 29775 ;;		On entry : 0/0
 29776 ;;		On exit  : 0/0
 29777 ;;		Unchanged: 0/0
 29778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29781 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29782 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29783 ;;Total ram usage:        2 bytes
 29784 ;; Hardware stack levels used:    1
 29785 ;; Hardware stack levels required when called:    5
 29786 ;; This function calls:
 29787 ;;		_mfrc522_bal_clr_bit_reg
 29788 ;;		_mfrc522_bal_set_bit_reg
 29789 ;;		_mfrc522_hal_get_antenna_gain
 29790 ;; This function is called by:
 29791 ;;		_mfrc522_hal_init
 29792 ;; This function uses a non-reentrant model
 29793 ;;
 29794                           
 29795                           
 29796                           ;psect for function _mfrc522_hal_set_antenna_gain
 29797  3DB9                     _mfrc522_hal_set_antenna_gain:	
 29798                           
 29799                           ;incstack = 0
 29800                           ; Regs used in _mfrc522_hal_set_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 29801                           ;mfrc522_hal_set_antenna_gain@gain stored from wreg
 29802  3DB9  0020               	movlb	0	; select bank0
 29803  3DBA  00A7               	movwf	mfrc522_hal_set_antenna_gain@gain
 29804                           
 29805                           ;mfrc522_hal.c: 162: if (mfrc522_hal_get_antenna_gain() != gain)
 29806  3DBB  31BB  23C3  31BD   	fcall	_mfrc522_hal_get_antenna_gain
 29807  3DBE  0020               	movlb	0	; select bank0
 29808  3DBF  0627               	xorwf	mfrc522_hal_set_antenna_gain@gain,w
 29809  3DC0  1903               	skipnz
 29810  3DC1  0008               	return
 29811                           
 29812                           ;mfrc522_hal.c: 163: {
 29813                           ;mfrc522_hal.c: 164: mfrc522_bal_clr_bit_reg(RFCfgReg, (0x07<<4));
 29814  3DC2  3070               	movlw	112
 29815  3DC3  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 29816  3DC4  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 29817  3DC5  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 29818  3DC6  3026               	movlw	38
 29819  3DC7  31BD  250E  31BD   	fcall	_mfrc522_bal_clr_bit_reg
 29820                           
 29821                           ;mfrc522_hal.c: 165: mfrc522_bal_set_bit_reg(RFCfgReg, gain & (0x07<<4));
 29822  3DCA  0020               	movlb	0	; select bank0
 29823  3DCB  0827               	movf	mfrc522_hal_set_antenna_gain@gain,w
 29824  3DCC  3970               	andlw	112
 29825  3DCD  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 29826  3DCE  0826               	movf	??_mfrc522_hal_set_antenna_gain,w
 29827  3DCF  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 29828  3DD0  3026               	movlw	38
 29829  3DD1  31BD  2525         	fcall	_mfrc522_bal_set_bit_reg
 29830  3DD3  0008               	return
 29831  3DD4                     __end_of_mfrc522_hal_set_antenna_gain:	
 29832                           
 29833                           	psect	text102
 29834  3BC3                     __ptext102:	
 29835 ;; *************** function _mfrc522_hal_get_antenna_gain *****************
 29836 ;; Defined at:
 29837 ;;		line 152 in file "src/nfc/hal/mfrc522_hal.c"
 29838 ;; Parameters:    Size  Location     Type
 29839 ;;		None
 29840 ;; Auto vars:     Size  Location     Type
 29841 ;;  ret             1    3[BANK0 ] unsigned char 
 29842 ;; Return value:  Size  Location     Type
 29843 ;;                  1    wreg      unsigned char 
 29844 ;; Registers used:
 29845 ;;		wreg, status,2, status,0, pclath, cstack
 29846 ;; Tracked objects:
 29847 ;;		On entry : 0/0
 29848 ;;		On exit  : 0/0
 29849 ;;		Unchanged: 0/0
 29850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29852 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29853 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29854 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29855 ;;Total ram usage:        2 bytes
 29856 ;; Hardware stack levels used:    1
 29857 ;; Hardware stack levels required when called:    4
 29858 ;; This function calls:
 29859 ;;		_mfrc522_bal_read_reg
 29860 ;; This function is called by:
 29861 ;;		_mfrc522_hal_set_antenna_gain
 29862 ;; This function uses a non-reentrant model
 29863 ;;
 29864                           
 29865                           
 29866                           ;psect for function _mfrc522_hal_get_antenna_gain
 29867  3BC3                     _mfrc522_hal_get_antenna_gain:	
 29868                           
 29869                           ;mfrc522_hal.c: 154: uint8_t ret=0;
 29870                           
 29871                           ;incstack = 0
 29872                           ; Regs used in _mfrc522_hal_get_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 29873  3BC3  0020               	movlb	0	; select bank0
 29874  3BC4  01A3               	clrf	mfrc522_hal_get_antenna_gain@ret
 29875                           
 29876                           ;mfrc522_hal.c: 155: ret=mfrc522_bal_read_reg(RFCfgReg);
 29877  3BC5  3026               	movlw	38
 29878  3BC6  31BD  2585         	fcall	_mfrc522_bal_read_reg
 29879  3BC8  0020               	movlb	0	; select bank0
 29880  3BC9  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 29881  3BCA  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 29882  3BCB  00A3               	movwf	mfrc522_hal_get_antenna_gain@ret
 29883                           
 29884                           ;mfrc522_hal.c: 156: ret &= (0x07<<4);
 29885  3BCC  3070               	movlw	112
 29886  3BCD  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 29887  3BCE  0822               	movf	??_mfrc522_hal_get_antenna_gain,w
 29888  3BCF  05A3               	andwf	mfrc522_hal_get_antenna_gain@ret,f
 29889                           
 29890                           ;mfrc522_hal.c: 157: return ret;
 29891  3BD0  0823               	movf	mfrc522_hal_get_antenna_gain@ret,w
 29892  3BD1  0008               	return
 29893  3BD2                     __end_of_mfrc522_hal_get_antenna_gain:	
 29894                           
 29895                           	psect	text103
 29896  3D25                     __ptext103:	
 29897 ;; *************** function _mfrc522_bal_set_bit_reg *****************
 29898 ;; Defined at:
 29899 ;;		line 136 in file "src/nfc/bal/mfrc522_bal.c"
 29900 ;; Parameters:    Size  Location     Type
 29901 ;;  reg             1    wreg     unsigned char 
 29902 ;;  bits            1    2[BANK0 ] unsigned char 
 29903 ;; Auto vars:     Size  Location     Type
 29904 ;;  reg             1    5[BANK0 ] unsigned char 
 29905 ;;  tmp             1    4[BANK0 ] unsigned char 
 29906 ;; Return value:  Size  Location     Type
 29907 ;;                  1    wreg      void 
 29908 ;; Registers used:
 29909 ;;		wreg, status,2, status,0, pclath, cstack
 29910 ;; Tracked objects:
 29911 ;;		On entry : 0/0
 29912 ;;		On exit  : 0/0
 29913 ;;		Unchanged: 0/0
 29914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29915 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29916 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29917 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29918 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 29919 ;;Total ram usage:        4 bytes
 29920 ;; Hardware stack levels used:    1
 29921 ;; Hardware stack levels required when called:    4
 29922 ;; This function calls:
 29923 ;;		_mfrc522_bal_read_reg
 29924 ;;		_mfrc522_bal_write_reg
 29925 ;; This function is called by:
 29926 ;;		_mfrc522_hal_calculate_crc
 29927 ;;		_mfrc522_hal_set_antenna_gain
 29928 ;;		_pcd_comm_with_picc
 29929 ;; This function uses a non-reentrant model
 29930 ;;
 29931                           
 29932                           
 29933                           ;psect for function _mfrc522_bal_set_bit_reg
 29934  3D25                     _mfrc522_bal_set_bit_reg:	
 29935                           
 29936                           ;incstack = 0
 29937                           ; Regs used in _mfrc522_bal_set_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 29938                           ;mfrc522_bal_set_bit_reg@reg stored from wreg
 29939  3D25  0020               	movlb	0	; select bank0
 29940  3D26  00A5               	movwf	mfrc522_bal_set_bit_reg@reg
 29941                           
 29942                           ;mfrc522_bal.c: 138: uint8_t tmp = 0x0;
 29943  3D27  01A4               	clrf	mfrc522_bal_set_bit_reg@tmp
 29944                           
 29945                           ;mfrc522_bal.c: 139: tmp = mfrc522_bal_read_reg(reg);
 29946  3D28  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 29947  3D29  31BD  2585  31BD   	fcall	_mfrc522_bal_read_reg
 29948  3D2C  0020               	movlb	0	; select bank0
 29949  3D2D  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29950  3D2E  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29951  3D2F  00A4               	movwf	mfrc522_bal_set_bit_reg@tmp
 29952                           
 29953                           ;mfrc522_bal.c: 140: tmp|=bits;
 29954  3D30  0822               	movf	mfrc522_bal_set_bit_reg@bits,w
 29955  3D31  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29956  3D32  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29957  3D33  04A4               	iorwf	mfrc522_bal_set_bit_reg@tmp,f
 29958                           
 29959                           ;mfrc522_bal.c: 141: mfrc522_bal_write_reg(reg,tmp);
 29960  3D34  0824               	movf	mfrc522_bal_set_bit_reg@tmp,w
 29961  3D35  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 29962  3D36  0823               	movf	??_mfrc522_bal_set_bit_reg,w
 29963  3D37  00F7               	movwf	mfrc522_bal_write_reg@x
 29964  3D38  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 29965  3D39  31BB  23F2         	fcall	_mfrc522_bal_write_reg
 29966  3D3B  0008               	return
 29967  3D3C                     __end_of_mfrc522_bal_set_bit_reg:	
 29968                           
 29969                           	psect	text104
 29970  3D0E                     __ptext104:	
 29971 ;; *************** function _mfrc522_bal_clr_bit_reg *****************
 29972 ;; Defined at:
 29973 ;;		line 146 in file "src/nfc/bal/mfrc522_bal.c"
 29974 ;; Parameters:    Size  Location     Type
 29975 ;;  reg             1    wreg     unsigned char 
 29976 ;;  bits            1    2[BANK0 ] unsigned char 
 29977 ;; Auto vars:     Size  Location     Type
 29978 ;;  reg             1    5[BANK0 ] unsigned char 
 29979 ;;  tmp             1    4[BANK0 ] unsigned char 
 29980 ;; Return value:  Size  Location     Type
 29981 ;;                  1    wreg      void 
 29982 ;; Registers used:
 29983 ;;		wreg, status,2, status,0, pclath, cstack
 29984 ;; Tracked objects:
 29985 ;;		On entry : 0/0
 29986 ;;		On exit  : 0/0
 29987 ;;		Unchanged: 0/0
 29988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29989 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29990 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29991 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29992 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 29993 ;;Total ram usage:        4 bytes
 29994 ;; Hardware stack levels used:    1
 29995 ;; Hardware stack levels required when called:    4
 29996 ;; This function calls:
 29997 ;;		_mfrc522_bal_read_reg
 29998 ;;		_mfrc522_bal_write_reg
 29999 ;; This function is called by:
 30000 ;;		_mfrc522_hal_set_antenna_gain
 30001 ;;		_picc_req_a_or_wakeup_a
 30002 ;;		_picc_select
 30003 ;;		_picc_stop_cryptol
 30004 ;;		_mfrc522_hal_antenna_off
 30005 ;; This function uses a non-reentrant model
 30006 ;;
 30007                           
 30008                           
 30009                           ;psect for function _mfrc522_bal_clr_bit_reg
 30010  3D0E                     _mfrc522_bal_clr_bit_reg:	
 30011                           
 30012                           ;incstack = 0
 30013                           ; Regs used in _mfrc522_bal_clr_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 30014                           ;mfrc522_bal_clr_bit_reg@reg stored from wreg
 30015  3D0E  0020               	movlb	0	; select bank0
 30016  3D0F  00A5               	movwf	mfrc522_bal_clr_bit_reg@reg
 30017                           
 30018                           ;mfrc522_bal.c: 148: uint8_t tmp = 0x0;
 30019  3D10  01A4               	clrf	mfrc522_bal_clr_bit_reg@tmp
 30020                           
 30021                           ;mfrc522_bal.c: 149: tmp = mfrc522_bal_read_reg(reg);
 30022  3D11  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 30023  3D12  31BD  2585  31BD   	fcall	_mfrc522_bal_read_reg
 30024  3D15  0020               	movlb	0	; select bank0
 30025  3D16  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30026  3D17  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30027  3D18  00A4               	movwf	mfrc522_bal_clr_bit_reg@tmp
 30028                           
 30029                           ;mfrc522_bal.c: 150: tmp &= ~bits;
 30030  3D19  0922               	comf	mfrc522_bal_clr_bit_reg@bits,w
 30031  3D1A  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30032  3D1B  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30033  3D1C  05A4               	andwf	mfrc522_bal_clr_bit_reg@tmp,f
 30034                           
 30035                           ;mfrc522_bal.c: 151: mfrc522_bal_write_reg(reg,tmp);
 30036  3D1D  0824               	movf	mfrc522_bal_clr_bit_reg@tmp,w
 30037  3D1E  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 30038  3D1F  0823               	movf	??_mfrc522_bal_clr_bit_reg,w
 30039  3D20  00F7               	movwf	mfrc522_bal_write_reg@x
 30040  3D21  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 30041  3D22  31BB  23F2         	fcall	_mfrc522_bal_write_reg
 30042  3D24  0008               	return
 30043  3D25                     __end_of_mfrc522_bal_clr_bit_reg:	
 30044                           
 30045                           	psect	text105
 30046  3B11                     __ptext105:	
 30047 ;; *************** function _mfrc522_hal_reset_sf *****************
 30048 ;; Defined at:
 30049 ;;		line 129 in file "src/nfc/hal/mfrc522_hal.c"
 30050 ;; Parameters:    Size  Location     Type
 30051 ;;		None
 30052 ;; Auto vars:     Size  Location     Type
 30053 ;;		None
 30054 ;; Return value:  Size  Location     Type
 30055 ;;                  1    wreg      void 
 30056 ;; Registers used:
 30057 ;;		wreg, status,2, status,0, pclath, cstack
 30058 ;; Tracked objects:
 30059 ;;		On entry : 0/0
 30060 ;;		On exit  : 0/0
 30061 ;;		Unchanged: 0/0
 30062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30065 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30066 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30067 ;;Total ram usage:        1 bytes
 30068 ;; Hardware stack levels used:    1
 30069 ;; Hardware stack levels required when called:    4
 30070 ;; This function calls:
 30071 ;;		_mfrc522_bal_write_reg
 30072 ;; This function is called by:
 30073 ;;		_mfrc522_hal_init
 30074 ;; This function uses a non-reentrant model
 30075 ;;
 30076                           
 30077                           
 30078                           ;psect for function _mfrc522_hal_reset_sf
 30079  3B11                     _mfrc522_hal_reset_sf:	
 30080                           
 30081                           ;mfrc522_hal.c: 131: mfrc522_bal_write_reg(CommandReg, PCD_SoftReset);
 30082                           
 30083                           ;incstack = 0
 30084                           ; Regs used in _mfrc522_hal_reset_sf: [wreg+status,2+status,0+pclath+cstack]
 30085  3B11  300F               	movlw	15
 30086  3B12  0020               	movlb	0	; select bank0
 30087  3B13  00A1               	movwf	??_mfrc522_hal_reset_sf
 30088  3B14  0821               	movf	??_mfrc522_hal_reset_sf,w
 30089  3B15  00F7               	movwf	mfrc522_bal_write_reg@x
 30090  3B16  3001               	movlw	1
 30091  3B17  31BB  23F2         	fcall	_mfrc522_bal_write_reg
 30092  3B19  0008               	return
 30093  3B1A                     __end_of_mfrc522_hal_reset_sf:	
 30094                           
 30095                           	psect	text106
 30096  3D54                     __ptext106:	
 30097 ;; *************** function _mfrc522_hal_antenna_on *****************
 30098 ;; Defined at:
 30099 ;;		line 138 in file "src/nfc/hal/mfrc522_hal.c"
 30100 ;; Parameters:    Size  Location     Type
 30101 ;;		None
 30102 ;; Auto vars:     Size  Location     Type
 30103 ;;  t8              1    3[BANK0 ] unsigned char 
 30104 ;; Return value:  Size  Location     Type
 30105 ;;                  1    wreg      void 
 30106 ;; Registers used:
 30107 ;;		wreg, status,2, status,0, pclath, cstack
 30108 ;; Tracked objects:
 30109 ;;		On entry : 0/0
 30110 ;;		On exit  : 0/0
 30111 ;;		Unchanged: 0/0
 30112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30114 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30116 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30117 ;;Total ram usage:        2 bytes
 30118 ;; Hardware stack levels used:    1
 30119 ;; Hardware stack levels required when called:    4
 30120 ;; This function calls:
 30121 ;;		_mfrc522_bal_read_reg
 30122 ;;		_mfrc522_bal_write_reg
 30123 ;; This function is called by:
 30124 ;;		_mfrc522_hal_init
 30125 ;; This function uses a non-reentrant model
 30126 ;;
 30127                           
 30128                           
 30129                           ;psect for function _mfrc522_hal_antenna_on
 30130  3D54                     _mfrc522_hal_antenna_on:	
 30131                           
 30132                           ;mfrc522_hal.c: 140: uint8_t t8;
 30133                           ;mfrc522_hal.c: 141: t8= mfrc522_bal_read_reg(TxControlReg);
 30134                           
 30135                           ;incstack = 0
 30136                           ; Regs used in _mfrc522_hal_antenna_on: [wreg+status,2+status,0+pclath+cstack]
 30137  3D54  3014               	movlw	20
 30138  3D55  31BD  2585  31BD   	fcall	_mfrc522_bal_read_reg
 30139  3D58  0020               	movlb	0	; select bank0
 30140  3D59  00A2               	movwf	??_mfrc522_hal_antenna_on
 30141  3D5A  0822               	movf	??_mfrc522_hal_antenna_on,w
 30142  3D5B  00A3               	movwf	mfrc522_hal_antenna_on@t8
 30143                           
 30144                           ;mfrc522_hal.c: 142: if((t8&0x03)!=0x03)
 30145  3D5C  3003               	movlw	3
 30146  3D5D  0523               	andwf	mfrc522_hal_antenna_on@t8,w
 30147  3D5E  00A2               	movwf	??_mfrc522_hal_antenna_on
 30148  3D5F  3003               	movlw	3
 30149  3D60  0622               	xorwf	??_mfrc522_hal_antenna_on,w
 30150  3D61  1903               	btfsc	3,2
 30151  3D62  0008               	return
 30152                           
 30153                           ;mfrc522_hal.c: 143: {
 30154                           ;mfrc522_hal.c: 144: mfrc522_bal_write_reg(TxControlReg, t8 | 0x03);
 30155  3D63  0823               	movf	mfrc522_hal_antenna_on@t8,w
 30156  3D64  3803               	iorlw	3
 30157  3D65  00A2               	movwf	??_mfrc522_hal_antenna_on
 30158  3D66  0822               	movf	??_mfrc522_hal_antenna_on,w
 30159  3D67  00F7               	movwf	mfrc522_bal_write_reg@x
 30160  3D68  3014               	movlw	20
 30161  3D69  31BB  23F2         	fcall	_mfrc522_bal_write_reg
 30162  3D6B  0008               	return
 30163  3D6C                     __end_of_mfrc522_hal_antenna_on:	
 30164                           
 30165                           	psect	text107
 30166  3BF2                     __ptext107:	
 30167 ;; *************** function _mfrc522_bal_write_reg *****************
 30168 ;; Defined at:
 30169 ;;		line 47 in file "src/nfc/bal/mfrc522_bal.c"
 30170 ;; Parameters:    Size  Location     Type
 30171 ;;  reg             1    wreg     unsigned char 
 30172 ;;  x               1    7[COMMON] unsigned char 
 30173 ;; Auto vars:     Size  Location     Type
 30174 ;;  reg             1    0[BANK0 ] unsigned char 
 30175 ;; Return value:  Size  Location     Type
 30176 ;;                  1    wreg      void 
 30177 ;; Registers used:
 30178 ;;		wreg, status,2, status,0, pclath, cstack
 30179 ;; Tracked objects:
 30180 ;;		On entry : 0/0
 30181 ;;		On exit  : 0/0
 30182 ;;		Unchanged: 0/0
 30183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30184 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30187 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30188 ;;Total ram usage:        2 bytes
 30189 ;; Hardware stack levels used:    1
 30190 ;; Hardware stack levels required when called:    3
 30191 ;; This function calls:
 30192 ;;		_mfrc522_bal_write_read_via_spi
 30193 ;; This function is called by:
 30194 ;;		_mfrc522_bal_set_bit_reg
 30195 ;;		_mfrc522_bal_clr_bit_reg
 30196 ;;		_mfrc522_hal_calculate_crc
 30197 ;;		_mfrc522_hal_init
 30198 ;;		_mfrc522_hal_reset_sf
 30199 ;;		_mfrc522_hal_antenna_on
 30200 ;;		_pcd_comm_with_picc
 30201 ;;		_picc_select
 30202 ;; This function uses a non-reentrant model
 30203 ;;
 30204                           
 30205                           
 30206                           ;psect for function _mfrc522_bal_write_reg
 30207  3BF2                     _mfrc522_bal_write_reg:	
 30208                           
 30209                           ;incstack = 0
 30210                           ; Regs used in _mfrc522_bal_write_reg: [wreg+status,2+status,0+pclath+cstack]
 30211                           ;mfrc522_bal_write_reg@reg stored from wreg
 30212  3BF2  0020               	movlb	0	; select bank0
 30213  3BF3  00A0               	movwf	mfrc522_bal_write_reg@reg
 30214                           
 30215                           ;mfrc522_bal.c: 49: do { LATCbits.LATC2 = 0; } while(0);;
 30216  3BF4  0022               	movlb	2	; select bank2
 30217  3BF5  110E               	bcf	14,2	;volatile
 30218                           
 30219                           ;mfrc522_bal.c: 51: do { LATCbits.LATC3 = 0; } while(0);;
 30220  3BF6  118E               	bcf	14,3	;volatile
 30221                           
 30222                           ;mfrc522_bal.c: 52: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 30223  3BF7  0020               	movlb	0	; select bank0
 30224  3BF8  3520               	lslf	mfrc522_bal_write_reg@reg,w
 30225  3BF9  397E               	andlw	126
 30226  3BFA  3188  2000  31BB   	fcall	_mfrc522_bal_write_read_via_spi
 30227                           
 30228                           ;mfrc522_bal.c: 53: mfrc522_bal_write_read_via_spi(x);
 30229  3BFD  0877               	movf	mfrc522_bal_write_reg@x,w
 30230  3BFE  3188  2000         	fcall	_mfrc522_bal_write_read_via_spi
 30231                           
 30232                           ;mfrc522_bal.c: 54: do { LATCbits.LATC2 = 1; } while(0);;
 30233  3C00  0022               	movlb	2	; select bank2
 30234  3C01  150E               	bsf	14,2	;volatile
 30235  3C02  0008               	return
 30236  3C03                     __end_of_mfrc522_bal_write_reg:	
 30237                           
 30238                           	psect	text108
 30239  3D85                     __ptext108:	
 30240 ;; *************** function _mfrc522_bal_read_reg *****************
 30241 ;; Defined at:
 30242 ;;		line 75 in file "src/nfc/bal/mfrc522_bal.c"
 30243 ;; Parameters:    Size  Location     Type
 30244 ;;  reg             1    wreg     unsigned char 
 30245 ;; Auto vars:     Size  Location     Type
 30246 ;;  reg             1    0[BANK0 ] unsigned char 
 30247 ;;  x               1    1[BANK0 ] unsigned char 
 30248 ;; Return value:  Size  Location     Type
 30249 ;;                  1    wreg      unsigned char 
 30250 ;; Registers used:
 30251 ;;		wreg, status,2, status,0, pclath, cstack
 30252 ;; Tracked objects:
 30253 ;;		On entry : 0/0
 30254 ;;		On exit  : 0/0
 30255 ;;		Unchanged: 0/0
 30256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30258 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30259 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30260 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30261 ;;Total ram usage:        3 bytes
 30262 ;; Hardware stack levels used:    1
 30263 ;; Hardware stack levels required when called:    3
 30264 ;; This function calls:
 30265 ;;		_mfrc522_bal_write_read_via_spi
 30266 ;; This function is called by:
 30267 ;;		_mfapi_pcd_init
 30268 ;;		_mfrc522_bal_set_bit_reg
 30269 ;;		_mfrc522_bal_clr_bit_reg
 30270 ;;		_mfrc522_hal_calculate_crc
 30271 ;;		_mfrc522_hal_antenna_on
 30272 ;;		_mfrc522_hal_get_antenna_gain
 30273 ;;		_pcd_comm_with_picc
 30274 ;;		_picc_select
 30275 ;; This function uses a non-reentrant model
 30276 ;;
 30277                           
 30278                           
 30279                           ;psect for function _mfrc522_bal_read_reg
 30280  3D85                     _mfrc522_bal_read_reg:	
 30281                           
 30282                           ;incstack = 0
 30283                           ; Regs used in _mfrc522_bal_read_reg: [wreg+status,2+status,0+pclath+cstack]
 30284                           ;mfrc522_bal_read_reg@reg stored from wreg
 30285  3D85  0020               	movlb	0	; select bank0
 30286  3D86  00A0               	movwf	mfrc522_bal_read_reg@reg
 30287                           
 30288                           ;mfrc522_bal.c: 77: uint8_t x=0;
 30289  3D87  01A1               	clrf	mfrc522_bal_read_reg@x
 30290                           
 30291                           ;mfrc522_bal.c: 78: do { LATCbits.LATC2 = 0; } while(0);;
 30292  3D88  0022               	movlb	2	; select bank2
 30293  3D89  110E               	bcf	14,2	;volatile
 30294                           
 30295                           ;mfrc522_bal.c: 79: do { LATCbits.LATC3 = 0; } while(0);;
 30296  3D8A  118E               	bcf	14,3	;volatile
 30297                           
 30298                           ;mfrc522_bal.c: 80: mfrc522_bal_write_read_via_spi(((reg<<1) & 0x7e) | 0x80);
 30299  3D8B  0020               	movlb	0	; select bank0
 30300  3D8C  3520               	lslf	mfrc522_bal_read_reg@reg,w
 30301  3D8D  397E               	andlw	126
 30302  3D8E  3880               	iorlw	128
 30303  3D8F  3188  2000  31BD   	fcall	_mfrc522_bal_write_read_via_spi
 30304                           
 30305                           ;mfrc522_bal.c: 81: x=mfrc522_bal_write_read_via_spi(0x00);
 30306  3D92  3000               	movlw	0
 30307  3D93  3188  2000         	fcall	_mfrc522_bal_write_read_via_spi
 30308  3D95  00F7               	movwf	??_mfrc522_bal_read_reg
 30309  3D96  0877               	movf	??_mfrc522_bal_read_reg,w
 30310  3D97  0020               	movlb	0	; select bank0
 30311  3D98  00A1               	movwf	mfrc522_bal_read_reg@x
 30312                           
 30313                           ;mfrc522_bal.c: 82: do { LATCbits.LATC2 = 1; } while(0);;
 30314  3D99  0022               	movlb	2	; select bank2
 30315  3D9A  150E               	bsf	14,2	;volatile
 30316                           
 30317                           ;mfrc522_bal.c: 83: return x;
 30318  3D9B  0020               	movlb	0	; select bank0
 30319  3D9C  0821               	movf	mfrc522_bal_read_reg@x,w
 30320  3D9D  0008               	return
 30321  3D9E                     __end_of_mfrc522_bal_read_reg:	
 30322                           
 30323                           	psect	text109
 30324  0800                     __ptext109:	
 30325 ;; *************** function _mfrc522_bal_write_read_via_spi *****************
 30326 ;; Defined at:
 30327 ;;		line 19 in file "src/nfc/bal/mfrc522_bal.c"
 30328 ;; Parameters:    Size  Location     Type
 30329 ;;  x               1    wreg     unsigned char 
 30330 ;; Auto vars:     Size  Location     Type
 30331 ;;  x               1    4[COMMON] unsigned char 
 30332 ;;  i               1    6[COMMON] unsigned char 
 30333 ;;  rb              1    5[COMMON] unsigned char 
 30334 ;; Return value:  Size  Location     Type
 30335 ;;                  1    wreg      unsigned char 
 30336 ;; Registers used:
 30337 ;;		wreg, status,2, status,0
 30338 ;; Tracked objects:
 30339 ;;		On entry : 0/0
 30340 ;;		On exit  : 0/0
 30341 ;;		Unchanged: 0/0
 30342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30344 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30345 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30346 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30347 ;;Total ram usage:        4 bytes
 30348 ;; Hardware stack levels used:    1
 30349 ;; Hardware stack levels required when called:    2
 30350 ;; This function calls:
 30351 ;;		Nothing
 30352 ;; This function is called by:
 30353 ;;		_mfrc522_bal_write_reg
 30354 ;;		_mfrc522_bal_write_reg_len
 30355 ;;		_mfrc522_bal_read_reg
 30356 ;;		_mfrc522_bal_read_fifo_len_ex
 30357 ;; This function uses a non-reentrant model
 30358 ;;
 30359                           
 30360                           
 30361                           ;psect for function _mfrc522_bal_write_read_via_spi
 30362  0800                     _mfrc522_bal_write_read_via_spi:	
 30363                           
 30364                           ;incstack = 0
 30365                           ; Regs used in _mfrc522_bal_write_read_via_spi: [wreg+status,2+status,0]
 30366                           ;mfrc522_bal_write_read_via_spi@x stored from wreg
 30367  0800  00F4               	movwf	mfrc522_bal_write_read_via_spi@x
 30368                           
 30369                           ;mfrc522_bal.c: 21: uint8_t i;
 30370                           ;mfrc522_bal.c: 22: uint8_t rb=0;
 30371  0801  01F5               	clrf	mfrc522_bal_write_read_via_spi@rb
 30372                           
 30373                           ;mfrc522_bal.c: 23: for(i=0;i<8;i++)
 30374  0802  01F6               	clrf	mfrc522_bal_write_read_via_spi@i
 30375  0803  3008               	movlw	8
 30376  0804  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 30377  0805  1803               	btfsc	3,0
 30378  0806  281E               	goto	l2111
 30379  0807                     l2100:	
 30380                           ;mfrc522_bal.c: 24: {
 30381                           ;mfrc522_bal.c: 25: do { LATCbits.LATC3 = 0; } while(0);;
 30382                           
 30383  0807  0022               	movlb	2	; select bank2
 30384  0808  118E               	bcf	14,3	;volatile
 30385                           
 30386                           ;mfrc522_bal.c: 27: if(x&0x80){
 30387  0809  1FF4               	btfss	mfrc522_bal_write_read_via_spi@x,7
 30388  080A  280D               	goto	l2106
 30389                           
 30390                           ;mfrc522_bal.c: 28: do { LATCbits.LATC4 = 1; } while(0);;
 30391  080B  160E               	bsf	14,4	;volatile
 30392                           
 30393                           ;mfrc522_bal.c: 29: }
 30394  080C  280E               	goto	l2108
 30395  080D                     l2106:	
 30396                           ;mfrc522_bal.c: 30: else{
 30397                           ;mfrc522_bal.c: 31: do { LATCbits.LATC4 = 0; } while(0);;
 30398                           
 30399  080D  120E               	bcf	14,4	;volatile
 30400  080E                     l2108:	
 30401                           ;mfrc522_bal.c: 32: }
 30402                           ;mfrc522_bal.c: 33: do { LATCbits.LATC3 = 1; } while(0);;
 30403                           
 30404  080E  158E               	bsf	14,3	;volatile
 30405                           
 30406                           ;mfrc522_bal.c: 34: x<<=1;
 30407  080F  1003               	clrc
 30408  0810  0DF4               	rlf	mfrc522_bal_write_read_via_spi@x,f
 30409                           
 30410                           ;mfrc522_bal.c: 36: rb<<=1;
 30411  0811  1003               	clrc
 30412  0812  0DF5               	rlf	mfrc522_bal_write_read_via_spi@rb,f
 30413                           
 30414                           ;mfrc522_bal.c: 37: if(PORTCbits.RC5)
 30415  0813  0020               	movlb	0	; select bank0
 30416  0814  1A8E               	btfsc	14,5	;volatile
 30417                           
 30418                           ;mfrc522_bal.c: 38: rb|=1;
 30419  0815  1475               	bsf	mfrc522_bal_write_read_via_spi@rb,0
 30420  0816  3001               	movlw	1
 30421  0817  00F3               	movwf	??_mfrc522_bal_write_read_via_spi
 30422  0818  0873               	movf	??_mfrc522_bal_write_read_via_spi,w
 30423  0819  07F6               	addwf	mfrc522_bal_write_read_via_spi@i,f
 30424  081A  3008               	movlw	8
 30425  081B  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 30426  081C  1C03               	skipc
 30427  081D  2807               	goto	l2100
 30428  081E                     l2111:	
 30429                           ;mfrc522_bal.c: 39: }
 30430                           ;mfrc522_bal.c: 40: do { LATCbits.LATC3 = 0; } while(0);;
 30431                           
 30432  081E  0022               	movlb	2	; select bank2
 30433  081F  118E               	bcf	14,3	;volatile
 30434                           
 30435                           ;mfrc522_bal.c: 41: return rb;
 30436  0820  0875               	movf	mfrc522_bal_write_read_via_spi@rb,w
 30437  0821  0008               	return
 30438  0822                     __end_of_mfrc522_bal_write_read_via_spi:	
 30439                           
 30440                           	psect	text110
 30441  3CCC                     __ptext110:	
 30442 ;; *************** function _m_system_init *****************
 30443 ;; Defined at:
 30444 ;;		line 4 in file "main.c"
 30445 ;; Parameters:    Size  Location     Type
 30446 ;;		None
 30447 ;; Auto vars:     Size  Location     Type
 30448 ;;		None
 30449 ;; Return value:  Size  Location     Type
 30450 ;;                  1    wreg      void 
 30451 ;; Registers used:
 30452 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30453 ;; Tracked objects:
 30454 ;;		On entry : 0/0
 30455 ;;		On exit  : 0/0
 30456 ;;		Unchanged: 0/0
 30457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30461 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30462 ;;Total ram usage:        0 bytes
 30463 ;; Hardware stack levels used:    1
 30464 ;; Hardware stack levels required when called:    5
 30465 ;; This function calls:
 30466 ;;		_SYSTEM_Initialize
 30467 ;;		_lcd_init
 30468 ;;		_led_port_init
 30469 ;;		_other_gpio_port_init
 30470 ;; This function is called by:
 30471 ;;		_main
 30472 ;; This function uses a non-reentrant model
 30473 ;;
 30474                           
 30475                           
 30476                           ;psect for function _m_system_init
 30477  3CCC                     _m_system_init:	
 30478                           
 30479                           ;main.c: 6: SYSTEM_Initialize();
 30480                           
 30481                           ;incstack = 0
 30482                           ; Regs used in _m_system_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30483  3CCC  31BC  2448  31BC   	fcall	_SYSTEM_Initialize
 30484                           
 30485                           ;main.c: 7: do{ do { TRISBbits.TRISB1 = 1; } while(0); do { TRISBbits.TRISB2 = 1; } whil
      +                          e(0); do { TRISBbits.TRISB3 = 1; } while(0); }while(0);;
 30486  3CCF  0021               	movlb	1	; select bank1
 30487  3CD0  148D               	bsf	13,1	;volatile
 30488  3CD1  150D               	bsf	13,2	;volatile
 30489  3CD2  158D               	bsf	13,3	;volatile
 30490                           
 30491                           ;main.c: 8: led_port_init();
 30492  3CD3  31BD  256C  31BC   	fcall	_led_port_init
 30493                           
 30494                           ;main.c: 9: other_gpio_port_init();
 30495  3CD6  31BB  237C  31BC   	fcall	_other_gpio_port_init
 30496                           
 30497                           ;main.c: 10: lcd_init();
 30498  3CD9  31BA  22EC         	fcall	_lcd_init
 30499                           
 30500                           ;main.c: 11: do{LCDCON=0x83;}while(0);;
 30501  3CDB  3083               	movlw	131
 30502  3CDC  002F               	movlb	15	; select bank15
 30503  3CDD  0091               	movwf	17	;volatile
 30504                           
 30505                           ;main.c: 12: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 30506  3CDE  178B               	bsf	11,7	;volatile
 30507  3CDF  170B               	bsf	11,6	;volatile
 30508  3CE0  0008               	return
 30509  3CE1                     __end_of_m_system_init:	
 30510                           
 30511                           	psect	text111
 30512  3B7C                     __ptext111:	
 30513 ;; *************** function _other_gpio_port_init *****************
 30514 ;; Defined at:
 30515 ;;		line 8 in file "src/driver/other-gpio.c"
 30516 ;; Parameters:    Size  Location     Type
 30517 ;;		None
 30518 ;; Auto vars:     Size  Location     Type
 30519 ;;		None
 30520 ;; Return value:  Size  Location     Type
 30521 ;;                  1    wreg      void 
 30522 ;; Registers used:
 30523 ;;		None
 30524 ;; Tracked objects:
 30525 ;;		On entry : 0/0
 30526 ;;		On exit  : 0/0
 30527 ;;		Unchanged: 0/0
 30528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30533 ;;Total ram usage:        0 bytes
 30534 ;; Hardware stack levels used:    1
 30535 ;; Hardware stack levels required when called:    2
 30536 ;; This function calls:
 30537 ;;		Nothing
 30538 ;; This function is called by:
 30539 ;;		_m_system_init
 30540 ;; This function uses a non-reentrant model
 30541 ;;
 30542                           
 30543                           
 30544                           ;psect for function _other_gpio_port_init
 30545  3B7C                     _other_gpio_port_init:	
 30546                           
 30547                           ;incstack = 0
 30548                           ; Regs used in _other_gpio_port_init: []
 30549                           ;other-gpio.c: 10: do{ do{do { TRISAbits.TRISA4 = 0; } while(0);}while(0);; do{ do { ANS
      +                          ELAbits.ANSA5 = 0; } while(0); do { TRISAbits.TRISA5 = 1; } while(0);}while(0);; do{ do 
      +                          { TRISBbits.TRISB4 = 1; } while(0);}while(0);; do{ do { TRISBbits.TRISB0 = 0; } while(0)
      +                          ; }wh
 30550  3B7C  0021               	movlb	1	; select bank1
 30551  3B7D  120C               	bcf	12,4	;volatile
 30552  3B7E  0023               	movlb	3	; select bank3
 30553  3B7F  128C               	bcf	12,5	;volatile
 30554  3B80  0021               	movlb	1	; select bank1
 30555  3B81  168C               	bsf	12,5	;volatile
 30556  3B82  160D               	bsf	13,4	;volatile
 30557  3B83  100D               	bcf	13,0	;volatile
 30558  3B84  0022               	movlb	2	; select bank2
 30559  3B85  138F               	bcf	15,7	;volatile
 30560  3B86  0021               	movlb	1	; select bank1
 30561  3B87  138F               	bcf	15,7	;volatile
 30562  3B88  0008               	return
 30563  3B89                     __end_of_other_gpio_port_init:	
 30564                           
 30565                           	psect	text112
 30566  3D6C                     __ptext112:	
 30567 ;; *************** function _led_port_init *****************
 30568 ;; Defined at:
 30569 ;;		line 4 in file "src/driver/led.c"
 30570 ;; Parameters:    Size  Location     Type
 30571 ;;		None
 30572 ;; Auto vars:     Size  Location     Type
 30573 ;;		None
 30574 ;; Return value:  Size  Location     Type
 30575 ;;                  1    wreg      void 
 30576 ;; Registers used:
 30577 ;;		None
 30578 ;; Tracked objects:
 30579 ;;		On entry : 0/0
 30580 ;;		On exit  : 0/0
 30581 ;;		Unchanged: 0/0
 30582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30587 ;;Total ram usage:        0 bytes
 30588 ;; Hardware stack levels used:    1
 30589 ;; Hardware stack levels required when called:    2
 30590 ;; This function calls:
 30591 ;;		Nothing
 30592 ;; This function is called by:
 30593 ;;		_m_system_init
 30594 ;; This function uses a non-reentrant model
 30595 ;;
 30596                           
 30597                           
 30598                           ;psect for function _led_port_init
 30599  3D6C                     _led_port_init:	
 30600                           
 30601                           ;incstack = 0
 30602                           ; Regs used in _led_port_init: []
 30603                           ;led.c: 6: do{ do { ANSELAbits.ANSA3 = 0; } while(0); do { TRISAbits.TRISA3 = 0; } while
      +                          (0); }while(0);;
 30604  3D6C  0023               	movlb	3	; select bank3
 30605  3D6D  118C               	bcf	12,3	;volatile
 30606  3D6E  0021               	movlb	1	; select bank1
 30607  3D6F  118C               	bcf	12,3	;volatile
 30608                           
 30609                           ;led.c: 7: do{ do { ANSELFbits.ANSF0 = 0; } while(0); do { TRISFbits.TRISF0 = 0; } while
      +                          (0); }while(0);;
 30610  3D70  0028               	movlb	8	; select bank8
 30611  3D71  100C               	bcf	12,0	;volatile
 30612  3D72  0026               	movlb	6	; select bank6
 30613  3D73  100C               	bcf	12,0	;volatile
 30614                           
 30615                           ;led.c: 8: do{ do { ANSELFbits.ANSF1 = 0; } while(0); do { TRISFbits.TRISF1 = 0; } while
      +                          (0); }while(0);;
 30616  3D74  0028               	movlb	8	; select bank8
 30617  3D75  108C               	bcf	12,1	;volatile
 30618  3D76  0026               	movlb	6	; select bank6
 30619  3D77  108C               	bcf	12,1	;volatile
 30620                           
 30621                           ;led.c: 9: do{ do { ANSELAbits.ANSA0 = 0; } while(0); do { TRISAbits.TRISA0 = 0; } while
      +                          (0); }while(0);;
 30622  3D78  0023               	movlb	3	; select bank3
 30623  3D79  100C               	bcf	12,0	;volatile
 30624  3D7A  0021               	movlb	1	; select bank1
 30625  3D7B  100C               	bcf	12,0	;volatile
 30626                           
 30627                           ;led.c: 10: do{ do { ANSELAbits.ANSA2 = 0; } while(0); do { TRISAbits.TRISA2 = 0; } whil
      +                          e(0); }while(0);;
 30628  3D7C  0023               	movlb	3	; select bank3
 30629  3D7D  110C               	bcf	12,2	;volatile
 30630  3D7E  0021               	movlb	1	; select bank1
 30631  3D7F  110C               	bcf	12,2	;volatile
 30632                           
 30633                           ;led.c: 11: do{ do { ANSELAbits.ANSA1 = 0; } while(0); do { TRISAbits.TRISA1 = 0; } whil
      +                          e(0); }while(0);;
 30634  3D80  0023               	movlb	3	; select bank3
 30635  3D81  108C               	bcf	12,1	;volatile
 30636  3D82  0021               	movlb	1	; select bank1
 30637  3D83  108C               	bcf	12,1	;volatile
 30638  3D84  0008               	return
 30639  3D85                     __end_of_led_port_init:	
 30640                           
 30641                           	psect	text113
 30642  3AEC                     __ptext113:	
 30643 ;; *************** function _lcd_init *****************
 30644 ;; Defined at:
 30645 ;;		line 251 in file "src/driver/lcd.c"
 30646 ;; Parameters:    Size  Location     Type
 30647 ;;		None
 30648 ;; Auto vars:     Size  Location     Type
 30649 ;;		None
 30650 ;; Return value:  Size  Location     Type
 30651 ;;                  1    wreg      void 
 30652 ;; Registers used:
 30653 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30654 ;; Tracked objects:
 30655 ;;		On entry : 0/0
 30656 ;;		On exit  : 0/0
 30657 ;;		Unchanged: 0/0
 30658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30663 ;;Total ram usage:        0 bytes
 30664 ;; Hardware stack levels used:    1
 30665 ;; Hardware stack levels required when called:    4
 30666 ;; This function calls:
 30667 ;;		_lcd_config
 30668 ;; This function is called by:
 30669 ;;		_m_system_init
 30670 ;; This function uses a non-reentrant model
 30671 ;;
 30672                           
 30673                           
 30674                           ;psect for function _lcd_init
 30675  3AEC                     _lcd_init:	
 30676                           
 30677                           ;lcd.c: 254: lcd_config();
 30678                           
 30679                           ;incstack = 0
 30680                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30681  3AEC  31BE  26FB         	fcall	_lcd_config
 30682                           
 30683                           ;lcd.c: 255: do { LATAbits.LATA1 = 1; } while(0);;
 30684  3AEE  0022               	movlb	2	; select bank2
 30685  3AEF  148C               	bsf	12,1	;volatile
 30686  3AF0  0008               	return
 30687  3AF1                     __end_of_lcd_init:	
 30688                           
 30689                           	psect	text114
 30690  3EFB                     __ptext114:	
 30691 ;; *************** function _lcd_config *****************
 30692 ;; Defined at:
 30693 ;;		line 211 in file "src/driver/lcd.c"
 30694 ;; Parameters:    Size  Location     Type
 30695 ;;		None
 30696 ;; Auto vars:     Size  Location     Type
 30697 ;;		None
 30698 ;; Return value:  Size  Location     Type
 30699 ;;                  1    wreg      void 
 30700 ;; Registers used:
 30701 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30702 ;; Tracked objects:
 30703 ;;		On entry : 0/0
 30704 ;;		On exit  : 0/0
 30705 ;;		Unchanged: 0/0
 30706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30711 ;;Total ram usage:        0 bytes
 30712 ;; Hardware stack levels used:    1
 30713 ;; Hardware stack levels required when called:    3
 30714 ;; This function calls:
 30715 ;;		_lcd_disp_all
 30716 ;; This function is called by:
 30717 ;;		_lcd_init
 30718 ;; This function uses a non-reentrant model
 30719 ;;
 30720                           
 30721                           
 30722                           ;psect for function _lcd_config
 30723  3EFB                     _lcd_config:	
 30724                           
 30725                           ;lcd.c: 215: LCDPSbits.WFT = 0;
 30726                           
 30727                           ;incstack = 0
 30728                           ; Regs used in _lcd_config: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30729  3EFB  002F               	movlb	15	; select bank15
 30730  3EFC  1392               	bcf	18,7	;volatile
 30731                           
 30732                           ;lcd.c: 216: LCDPSbits.BIASMD = 0;
 30733  3EFD  1312               	bcf	18,6	;volatile
 30734                           
 30735                           ;lcd.c: 217: LCDPSbits.LP=0x07;
 30736  3EFE  0812               	movf	18,w	;volatile
 30737  3EFF  39F0               	andlw	-16
 30738  3F00  3807               	iorlw	7
 30739  3F01  0092               	movwf	18	;volatile
 30740                           
 30741                           ;lcd.c: 225: LCDSE0 = 0x1f;
 30742  3F02  301F               	movlw	31
 30743  3F03  0098               	movwf	24	;volatile
 30744                           
 30745                           ;lcd.c: 226: LCDSE1 = 0x00;
 30746  3F04  0199               	clrf	25	;volatile
 30747                           
 30748                           ;lcd.c: 227: LCDSE2 = 0xf0;
 30749  3F05  30F0               	movlw	240
 30750  3F06  009A               	movwf	26	;volatile
 30751                           
 30752                           ;lcd.c: 228: LCDSE3 = 0x87;
 30753  3F07  3087               	movlw	135
 30754  3F08  009B               	movwf	27	;volatile
 30755                           
 30756                           ;lcd.c: 229: LCDSE4 = 0x00;
 30757  3F09  019C               	clrf	28	;volatile
 30758                           
 30759                           ;lcd.c: 230: LCDSE5 = 0b00111100;
 30760  3F0A  303C               	movlw	60
 30761  3F0B  009D               	movwf	29	;volatile
 30762                           
 30763                           ;lcd.c: 234: lcd_disp_all(0x00);;
 30764  3F0C  3000               	movlw	0
 30765  3F0D  31BE  2660  31BE   	fcall	_lcd_disp_all
 30766                           
 30767                           ;lcd.c: 239: LCDCST=0x00;
 30768  3F10  002F               	movlb	15	; select bank15
 30769  3F11  0194               	clrf	20	;volatile
 30770                           
 30771                           ;lcd.c: 241: LCDRL=0xff;
 30772  3F12  30FF               	movlw	255
 30773  3F13  0095               	movwf	21	;volatile
 30774                           
 30775                           ;lcd.c: 242: LCDREF= 0x80 ;
 30776  3F14  3080               	movlw	128
 30777  3F15  0093               	movwf	19	;volatile
 30778                           
 30779                           ;lcd.c: 248: lcd_disp_all(0x00);;
 30780  3F16  3000               	movlw	0
 30781  3F17  31BE  2660         	fcall	_lcd_disp_all
 30782                           
 30783                           ;lcd.c: 249: do{LCDCON=0x83;}while(0);;
 30784  3F19  3083               	movlw	131
 30785  3F1A  002F               	movlb	15	; select bank15
 30786  3F1B  0091               	movwf	17	;volatile
 30787  3F1C  0008               	return
 30788  3F1D                     __end_of_lcd_config:	
 30789                           
 30790                           	psect	text115
 30791  3E60                     __ptext115:	
 30792 ;; *************** function _lcd_disp_all *****************
 30793 ;; Defined at:
 30794 ;;		line 194 in file "src/driver/lcd.c"
 30795 ;; Parameters:    Size  Location     Type
 30796 ;;  x               1    wreg     unsigned char 
 30797 ;; Auto vars:     Size  Location     Type
 30798 ;;  x               1    0[BANK0 ] unsigned char 
 30799 ;;  i               1    1[BANK0 ] unsigned char 
 30800 ;; Return value:  Size  Location     Type
 30801 ;;                  1    wreg      void 
 30802 ;; Registers used:
 30803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 30804 ;; Tracked objects:
 30805 ;;		On entry : 0/0
 30806 ;;		On exit  : 0/0
 30807 ;;		Unchanged: 0/0
 30808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30810 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30811 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30812 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30813 ;;Total ram usage:        6 bytes
 30814 ;; Hardware stack levels used:    1
 30815 ;; Hardware stack levels required when called:    2
 30816 ;; This function calls:
 30817 ;;		Nothing
 30818 ;; This function is called by:
 30819 ;;		_ui_start_display
 30820 ;;		_lcd_config
 30821 ;;		_m_system_start_self_test
 30822 ;; This function uses a non-reentrant model
 30823 ;;
 30824                           
 30825                           
 30826                           ;psect for function _lcd_disp_all
 30827  3E60                     _lcd_disp_all:	
 30828                           
 30829                           ;incstack = 0
 30830                           ; Regs used in _lcd_disp_all: [wreg+fsr1l+fsr1h+status,2+status,0]
 30831                           ;lcd_disp_all@x stored from wreg
 30832  3E60  0020               	movlb	0	; select bank0
 30833  3E61  00A0               	movwf	lcd_disp_all@x
 30834                           
 30835                           ;lcd.c: 196: uint8_t i;
 30836                           ;lcd.c: 197: for(i=0;i<24;i++)
 30837  3E62  01A1               	clrf	lcd_disp_all@i
 30838  3E63                     L12:	
 30839  3E63  3018               	movlw	24
 30840  3E64  0221               	subwf	lcd_disp_all@i,w
 30841  3E65  1803               	btfsc	3,0
 30842  3E66  0008               	return
 30843                           
 30844                           ;lcd.c: 198: {
 30845                           ;lcd.c: 199: pLcdReg[i]=x;
 30846  3E67  0821               	movf	lcd_disp_all@i,w
 30847  3E68  00F3               	movwf	??_lcd_disp_all
 30848  3E69  01F4               	clrf	??_lcd_disp_all+1
 30849  3E6A  0873               	movf	??_lcd_disp_all,w
 30850  3E6B  0022               	movlb	2	; select bank2
 30851  3E6C  0769               	addwf	_pLcdReg^(0+256),w
 30852  3E6D  00F5               	movwf	??_lcd_disp_all+2
 30853  3E6E  0874               	movf	??_lcd_disp_all+1,w
 30854  3E6F  3D6A               	addwfc	(_pLcdReg+1)^(0+256),w
 30855  3E70  00F6               	movwf	??_lcd_disp_all+3
 30856  3E71  0875               	movf	??_lcd_disp_all+2,w
 30857  3E72  0086               	movwf	6
 30858  3E73  0876               	movf	??_lcd_disp_all+3,w
 30859  3E74  0087               	movwf	7
 30860  3E75  0020               	movlb	0	; select bank0
 30861  3E76  0820               	movf	lcd_disp_all@x,w
 30862  3E77  0081               	movwf	1
 30863  3E78  3001               	movlw	1
 30864  3E79  00F3               	movwf	??_lcd_disp_all
 30865  3E7A  0873               	movf	??_lcd_disp_all,w
 30866  3E7B  07A1               	addwf	lcd_disp_all@i,f
 30867  3E7C  2E63               	goto	L12
 30868  3E7D                     __end_of_lcd_disp_all:	
 30869                           
 30870                           	psect	text116
 30871  3C48                     __ptext116:	
 30872 ;; *************** function _SYSTEM_Initialize *****************
 30873 ;; Defined at:
 30874 ;;		line 70 in file "mcc_generated_files/mcc.c"
 30875 ;; Parameters:    Size  Location     Type
 30876 ;;		None
 30877 ;; Auto vars:     Size  Location     Type
 30878 ;;		None
 30879 ;; Return value:  Size  Location     Type
 30880 ;;                  1    wreg      void 
 30881 ;; Registers used:
 30882 ;;		wreg, status,2, status,0, pclath, cstack
 30883 ;; Tracked objects:
 30884 ;;		On entry : 0/0
 30885 ;;		On exit  : 0/0
 30886 ;;		Unchanged: 0/0
 30887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30891 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30892 ;;Total ram usage:        0 bytes
 30893 ;; Hardware stack levels used:    1
 30894 ;; Hardware stack levels required when called:    4
 30895 ;; This function calls:
 30896 ;;		_EUSART1_Initialize
 30897 ;;		_OSCILLATOR_Initialize
 30898 ;;		_PIN_MANAGER_Initialize
 30899 ;;		_TMR0_Initialize
 30900 ;;		_TMR1_Initialize
 30901 ;;		_WDT_Initialize
 30902 ;; This function is called by:
 30903 ;;		_m_system_init
 30904 ;; This function uses a non-reentrant model
 30905 ;;
 30906                           
 30907                           
 30908                           ;psect for function _SYSTEM_Initialize
 30909  3C48                     _SYSTEM_Initialize:	
 30910                           
 30911                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 30912                           
 30913                           ;incstack = 0
 30914                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 30915  3C48  31B4  24F0  31BC   	fcall	_PIN_MANAGER_Initialize
 30916                           
 30917                           ;mcc.c: 74: OSCILLATOR_Initialize();
 30918  3C4B  31BA  22E7  31BC   	fcall	_OSCILLATOR_Initialize
 30919                           
 30920                           ;mcc.c: 75: WDT_Initialize();
 30921  3C4E  31BA  22DF  31BC   	fcall	_WDT_Initialize
 30922                           
 30923                           ;mcc.c: 76: TMR1_Initialize();
 30924  3C51  31BE  2643  31BC   	fcall	_TMR1_Initialize
 30925                           
 30926                           ;mcc.c: 77: TMR0_Initialize();
 30927  3C54  3187  27EA  31BC   	fcall	_TMR0_Initialize
 30928                           
 30929                           ;mcc.c: 78: EUSART1_Initialize();
 30930  3C57  31BB  23B4         	fcall	_EUSART1_Initialize
 30931  3C59  0008               	return
 30932  3C5A                     __end_of_SYSTEM_Initialize:	
 30933                           
 30934                           	psect	text117
 30935  3ADF                     __ptext117:	
 30936 ;; *************** function _WDT_Initialize *****************
 30937 ;; Defined at:
 30938 ;;		line 91 in file "mcc_generated_files/mcc.c"
 30939 ;; Parameters:    Size  Location     Type
 30940 ;;		None
 30941 ;; Auto vars:     Size  Location     Type
 30942 ;;		None
 30943 ;; Return value:  Size  Location     Type
 30944 ;;                  1    wreg      void 
 30945 ;; Registers used:
 30946 ;;		wreg
 30947 ;; Tracked objects:
 30948 ;;		On entry : 0/0
 30949 ;;		On exit  : 0/0
 30950 ;;		Unchanged: 0/0
 30951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30952 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30955 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30956 ;;Total ram usage:        0 bytes
 30957 ;; Hardware stack levels used:    1
 30958 ;; Hardware stack levels required when called:    2
 30959 ;; This function calls:
 30960 ;;		Nothing
 30961 ;; This function is called by:
 30962 ;;		_SYSTEM_Initialize
 30963 ;; This function uses a non-reentrant model
 30964 ;;
 30965                           
 30966                           
 30967                           ;psect for function _WDT_Initialize
 30968  3ADF                     _WDT_Initialize:	
 30969                           
 30970                           ;mcc.c: 94: WDTCON = 0x16;
 30971                           
 30972                           ;incstack = 0
 30973                           ; Regs used in _WDT_Initialize: [wreg]
 30974  3ADF  3016               	movlw	22
 30975  3AE0  0021               	movlb	1	; select bank1
 30976  3AE1  0097               	movwf	23	;volatile
 30977  3AE2  0008               	return
 30978  3AE3                     __end_of_WDT_Initialize:	
 30979                           
 30980                           	psect	text118
 30981  3E43                     __ptext118:	
 30982 ;; *************** function _TMR1_Initialize *****************
 30983 ;; Defined at:
 30984 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 30985 ;; Parameters:    Size  Location     Type
 30986 ;;		None
 30987 ;; Auto vars:     Size  Location     Type
 30988 ;;		None
 30989 ;; Return value:  Size  Location     Type
 30990 ;;                  1    wreg      void 
 30991 ;; Registers used:
 30992 ;;		wreg, status,2, status,0, pclath, cstack
 30993 ;; Tracked objects:
 30994 ;;		On entry : 0/0
 30995 ;;		On exit  : 0/0
 30996 ;;		Unchanged: 0/0
 30997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31002 ;;Total ram usage:        0 bytes
 31003 ;; Hardware stack levels used:    1
 31004 ;; Hardware stack levels required when called:    3
 31005 ;; This function calls:
 31006 ;;		_TMR1_SetInterruptHandler
 31007 ;;		_TMR1_StartTimer
 31008 ;; This function is called by:
 31009 ;;		_SYSTEM_Initialize
 31010 ;; This function uses a non-reentrant model
 31011 ;;
 31012                           
 31013                           
 31014                           ;psect for function _TMR1_Initialize
 31015  3E43                     _TMR1_Initialize:	
 31016                           
 31017                           ;tmr1.c: 69: T1CON = 0x8C;
 31018                           
 31019                           ;incstack = 0
 31020                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31021  3E43  308C               	movlw	140
 31022  3E44  0020               	movlb	0	; select bank0
 31023  3E45  0098               	movwf	24	;volatile
 31024                           
 31025                           ;tmr1.c: 72: T1GCON = 0x01;
 31026  3E46  3001               	movlw	1
 31027  3E47  0099               	movwf	25	;volatile
 31028                           
 31029                           ;tmr1.c: 75: TMR1H = 0x80;
 31030  3E48  3080               	movlw	128
 31031  3E49  0097               	movwf	23	;volatile
 31032                           
 31033                           ;tmr1.c: 78: TMR1L = 0x00;
 31034  3E4A  0196               	clrf	22	;volatile
 31035                           
 31036                           ;tmr1.c: 81: timer1ReloadVal=(TMR1H << 8) | TMR1L;
 31037  3E4B  0817               	movf	23,w	;volatile
 31038  3E4C  0022               	movlb	2	; select bank2
 31039  3E4D  00EE               	movwf	(_timer1ReloadVal+1)^(0+256)	;volatile
 31040  3E4E  0020               	movlb	0	; select bank0
 31041  3E4F  0816               	movf	22,w	;volatile
 31042  3E50  0022               	movlb	2	; select bank2
 31043  3E51  00ED               	movwf	_timer1ReloadVal^(0+256)	;volatile
 31044                           
 31045                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
 31046  3E52  0020               	movlb	0	; select bank0
 31047  3E53  1011               	bcf	17,0	;volatile
 31048                           
 31049                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
 31050  3E54  0021               	movlb	1	; select bank1
 31051  3E55  1411               	bsf	17,0	;volatile
 31052                           
 31053                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 31054  3E56  3000               	movlw	0
 31055  3E57  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
 31056  3E58  3000               	movlw	0
 31057  3E59  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
 31058  3E5A  31BA  22FD  31BE   	fcall	_TMR1_SetInterruptHandler
 31059                           
 31060                           ;tmr1.c: 93: TMR1_StartTimer();
 31061  3E5D  31BA  22DC         	fcall	_TMR1_StartTimer
 31062  3E5F  0008               	return
 31063  3E60                     __end_of_TMR1_Initialize:	
 31064                           
 31065                           	psect	text119
 31066  3ADC                     __ptext119:	
 31067 ;; *************** function _TMR1_StartTimer *****************
 31068 ;; Defined at:
 31069 ;;		line 96 in file "mcc_generated_files/tmr1.c"
 31070 ;; Parameters:    Size  Location     Type
 31071 ;;		None
 31072 ;; Auto vars:     Size  Location     Type
 31073 ;;		None
 31074 ;; Return value:  Size  Location     Type
 31075 ;;                  1    wreg      void 
 31076 ;; Registers used:
 31077 ;;		None
 31078 ;; Tracked objects:
 31079 ;;		On entry : 0/0
 31080 ;;		On exit  : 0/0
 31081 ;;		Unchanged: 0/0
 31082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31086 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31087 ;;Total ram usage:        0 bytes
 31088 ;; Hardware stack levels used:    1
 31089 ;; Hardware stack levels required when called:    2
 31090 ;; This function calls:
 31091 ;;		Nothing
 31092 ;; This function is called by:
 31093 ;;		_TMR1_Initialize
 31094 ;; This function uses a non-reentrant model
 31095 ;;
 31096                           
 31097                           
 31098                           ;psect for function _TMR1_StartTimer
 31099  3ADC                     _TMR1_StartTimer:	
 31100                           
 31101                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
 31102                           
 31103                           ;incstack = 0
 31104                           ; Regs used in _TMR1_StartTimer: []
 31105  3ADC  0020               	movlb	0	; select bank0
 31106  3ADD  1418               	bsf	24,0	;volatile
 31107  3ADE  0008               	return
 31108  3ADF                     __end_of_TMR1_StartTimer:	
 31109                           
 31110                           	psect	text120
 31111  3AFD                     __ptext120:	
 31112 ;; *************** function _TMR1_SetInterruptHandler *****************
 31113 ;; Defined at:
 31114 ;;		line 179 in file "mcc_generated_files/tmr1.c"
 31115 ;; Parameters:    Size  Location     Type
 31116 ;;  InterruptHan    2    3[COMMON] PTR void 
 31117 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 31118 ;; Auto vars:     Size  Location     Type
 31119 ;;		None
 31120 ;; Return value:  Size  Location     Type
 31121 ;;                  1    wreg      void 
 31122 ;; Registers used:
 31123 ;;		wreg
 31124 ;; Tracked objects:
 31125 ;;		On entry : 0/0
 31126 ;;		On exit  : 0/0
 31127 ;;		Unchanged: 0/0
 31128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31129 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31133 ;;Total ram usage:        2 bytes
 31134 ;; Hardware stack levels used:    1
 31135 ;; Hardware stack levels required when called:    2
 31136 ;; This function calls:
 31137 ;;		Nothing
 31138 ;; This function is called by:
 31139 ;;		_TMR1_Initialize
 31140 ;; This function uses a non-reentrant model
 31141 ;;
 31142                           
 31143                           
 31144                           ;psect for function _TMR1_SetInterruptHandler
 31145  3AFD                     _TMR1_SetInterruptHandler:	
 31146                           
 31147                           ;tmr1.c: 180: TMR1_InterruptHandler = InterruptHandler;
 31148                           
 31149                           ;incstack = 0
 31150                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 31151  3AFD  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 31152  3AFE  0023               	movlb	3	; select bank3
 31153  3AFF  00D3               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
 31154  3B00  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 31155  3B01  00D2               	movwf	_TMR1_InterruptHandler^(0+384)
 31156  3B02  0008               	return
 31157  3B03                     __end_of_TMR1_SetInterruptHandler:	
 31158                           
 31159                           	psect	text121
 31160  07EA                     __ptext121:	
 31161 ;; *************** function _TMR0_Initialize *****************
 31162 ;; Defined at:
 31163 ;;		line 65 in file "mcc_generated_files/tmr0.c"
 31164 ;; Parameters:    Size  Location     Type
 31165 ;;		None
 31166 ;; Auto vars:     Size  Location     Type
 31167 ;;		None
 31168 ;; Return value:  Size  Location     Type
 31169 ;;                  1    wreg      void 
 31170 ;; Registers used:
 31171 ;;		wreg, status,2, status,0, pclath, cstack
 31172 ;; Tracked objects:
 31173 ;;		On entry : 0/0
 31174 ;;		On exit  : 0/0
 31175 ;;		Unchanged: 0/0
 31176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31180 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31181 ;;Total ram usage:        1 bytes
 31182 ;; Hardware stack levels used:    1
 31183 ;; Hardware stack levels required when called:    3
 31184 ;; This function calls:
 31185 ;;		_TMR0_SetInterruptHandler
 31186 ;; This function is called by:
 31187 ;;		_SYSTEM_Initialize
 31188 ;; This function uses a non-reentrant model
 31189 ;;
 31190                           
 31191                           
 31192                           ;psect for function _TMR0_Initialize
 31193  07EA                     _TMR0_Initialize:	
 31194                           
 31195                           ;tmr0.c: 70: OPTION_REG = (OPTION_REG & 0xC0) | 0xC7 & 0x3F;
 31196                           
 31197                           ;incstack = 0
 31198                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 31199  07EA  0021               	movlb	1	; select bank1
 31200  07EB  0815               	movf	21,w	;volatile
 31201  07EC  39C0               	andlw	192
 31202  07ED  3807               	iorlw	7
 31203  07EE  0095               	movwf	21	;volatile
 31204                           
 31205                           ;tmr0.c: 73: TMR0 = 0x94;
 31206  07EF  3094               	movlw	148
 31207  07F0  0020               	movlb	0	; select bank0
 31208  07F1  0095               	movwf	21	;volatile
 31209                           
 31210                           ;tmr0.c: 76: timer0ReloadVal= 148;
 31211  07F2  3094               	movlw	148
 31212  07F3  00F5               	movwf	??_TMR0_Initialize
 31213  07F4  0875               	movf	??_TMR0_Initialize,w
 31214  07F5  0022               	movlb	2	; select bank2
 31215  07F6  00EF               	movwf	_timer0ReloadVal^(0+256)	;volatile
 31216                           
 31217                           ;tmr0.c: 79: INTCONbits.TMR0IF = 0;
 31218  07F7  110B               	bcf	11,2	;volatile
 31219                           
 31220                           ;tmr0.c: 82: INTCONbits.TMR0IE = 1;
 31221  07F8  168B               	bsf	11,5	;volatile
 31222                           
 31223                           ;tmr0.c: 85: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 31224  07F9  3000               	movlw	0
 31225  07FA  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
 31226  07FB  3000               	movlw	0
 31227  07FC  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
 31228  07FD  31BA  22F7         	fcall	_TMR0_SetInterruptHandler
 31229  07FF  0008               	return
 31230  0800                     __end_of_TMR0_Initialize:	
 31231                           
 31232                           	psect	text122
 31233  3AF7                     __ptext122:	
 31234 ;; *************** function _TMR0_SetInterruptHandler *****************
 31235 ;; Defined at:
 31236 ;;		line 155 in file "mcc_generated_files/tmr0.c"
 31237 ;; Parameters:    Size  Location     Type
 31238 ;;  InterruptHan    2    3[COMMON] PTR void 
 31239 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 31240 ;; Auto vars:     Size  Location     Type
 31241 ;;		None
 31242 ;; Return value:  Size  Location     Type
 31243 ;;                  1    wreg      void 
 31244 ;; Registers used:
 31245 ;;		wreg
 31246 ;; Tracked objects:
 31247 ;;		On entry : 0/0
 31248 ;;		On exit  : 0/0
 31249 ;;		Unchanged: 0/0
 31250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31251 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31255 ;;Total ram usage:        2 bytes
 31256 ;; Hardware stack levels used:    1
 31257 ;; Hardware stack levels required when called:    2
 31258 ;; This function calls:
 31259 ;;		Nothing
 31260 ;; This function is called by:
 31261 ;;		_TMR0_Initialize
 31262 ;; This function uses a non-reentrant model
 31263 ;;
 31264                           
 31265                           
 31266                           ;psect for function _TMR0_SetInterruptHandler
 31267  3AF7                     _TMR0_SetInterruptHandler:	
 31268                           
 31269                           ;tmr0.c: 156: TMR0_InterruptHandler = InterruptHandler;
 31270                           
 31271                           ;incstack = 0
 31272                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 31273  3AF7  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 31274  3AF8  0023               	movlb	3	; select bank3
 31275  3AF9  00D1               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 31276  3AFA  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 31277  3AFB  00D0               	movwf	_TMR0_InterruptHandler^(0+384)
 31278  3AFC  0008               	return
 31279  3AFD                     __end_of_TMR0_SetInterruptHandler:	
 31280                           
 31281                           	psect	text123
 31282  34F0                     __ptext123:	
 31283 ;; *************** function _PIN_MANAGER_Initialize *****************
 31284 ;; Defined at:
 31285 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 31286 ;; Parameters:    Size  Location     Type
 31287 ;;		None
 31288 ;; Auto vars:     Size  Location     Type
 31289 ;;		None
 31290 ;; Return value:  Size  Location     Type
 31291 ;;                  1    wreg      void 
 31292 ;; Registers used:
 31293 ;;		wreg, status,2
 31294 ;; Tracked objects:
 31295 ;;		On entry : 0/0
 31296 ;;		On exit  : 0/0
 31297 ;;		Unchanged: 0/0
 31298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31303 ;;Total ram usage:        0 bytes
 31304 ;; Hardware stack levels used:    1
 31305 ;; Hardware stack levels required when called:    2
 31306 ;; This function calls:
 31307 ;;		Nothing
 31308 ;; This function is called by:
 31309 ;;		_SYSTEM_Initialize
 31310 ;; This function uses a non-reentrant model
 31311 ;;
 31312                           
 31313                           
 31314                           ;psect for function _PIN_MANAGER_Initialize
 31315  34F0                     _PIN_MANAGER_Initialize:	
 31316                           
 31317                           ;pin_manager.c: 56: LATE = 0x00;
 31318                           
 31319                           ;incstack = 0
 31320                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 31321  34F0  0022               	movlb	2	; select bank2
 31322  34F1  0190               	clrf	16	;volatile
 31323                           
 31324                           ;pin_manager.c: 57: LATD = 0x02;
 31325  34F2  3002               	movlw	2
 31326  34F3  008F               	movwf	15	;volatile
 31327                           
 31328                           ;pin_manager.c: 58: LATA = 0x00;
 31329  34F4  018C               	clrf	12	;volatile
 31330                           
 31331                           ;pin_manager.c: 59: LATF = 0x00;
 31332  34F5  0027               	movlb	7	; select bank7
 31333  34F6  018C               	clrf	12	;volatile
 31334                           
 31335                           ;pin_manager.c: 60: LATB = 0x00;
 31336  34F7  0022               	movlb	2	; select bank2
 31337  34F8  018D               	clrf	13	;volatile
 31338                           
 31339                           ;pin_manager.c: 61: LATG = 0x00;
 31340  34F9  0027               	movlb	7	; select bank7
 31341  34FA  018D               	clrf	13	;volatile
 31342                           
 31343                           ;pin_manager.c: 62: LATC = 0x00;
 31344  34FB  0022               	movlb	2	; select bank2
 31345  34FC  018E               	clrf	14	;volatile
 31346                           
 31347                           ;pin_manager.c: 67: TRISE = 0xDF;
 31348  34FD  30DF               	movlw	223
 31349  34FE  0021               	movlb	1	; select bank1
 31350  34FF  0090               	movwf	16	;volatile
 31351                           
 31352                           ;pin_manager.c: 68: TRISF = 0xFF;
 31353  3500  30FF               	movlw	255
 31354  3501  0026               	movlb	6	; select bank6
 31355  3502  008C               	movwf	12	;volatile
 31356                           
 31357                           ;pin_manager.c: 69: TRISA = 0xFF;
 31358  3503  30FF               	movlw	255
 31359  3504  0021               	movlb	1	; select bank1
 31360  3505  008C               	movwf	12	;volatile
 31361                           
 31362                           ;pin_manager.c: 70: TRISG = 0x3F;
 31363  3506  303F               	movlw	63
 31364  3507  0026               	movlb	6	; select bank6
 31365  3508  008D               	movwf	13	;volatile
 31366                           
 31367                           ;pin_manager.c: 71: TRISB = 0xFF;
 31368  3509  30FF               	movlw	255
 31369  350A  0021               	movlb	1	; select bank1
 31370  350B  008D               	movwf	13	;volatile
 31371                           
 31372                           ;pin_manager.c: 72: TRISC = 0xFF;
 31373  350C  30FF               	movlw	255
 31374  350D  008E               	movwf	14	;volatile
 31375                           
 31376                           ;pin_manager.c: 73: TRISD = 0xFD;
 31377  350E  30FD               	movlw	253
 31378  350F  008F               	movwf	15	;volatile
 31379                           
 31380                           ;pin_manager.c: 78: ANSELE = 0x00;
 31381  3510  0023               	movlb	3	; select bank3
 31382  3511  0190               	clrf	16	;volatile
 31383                           
 31384                           ;pin_manager.c: 79: ANSELG = 0x1C;
 31385  3512  301C               	movlw	28
 31386  3513  0028               	movlb	8	; select bank8
 31387  3514  008D               	movwf	13	;volatile
 31388                           
 31389                           ;pin_manager.c: 80: ANSELF = 0xFF;
 31390  3515  30FF               	movlw	255
 31391  3516  008C               	movwf	12	;volatile
 31392                           
 31393                           ;pin_manager.c: 81: ANSELA = 0x2F;
 31394  3517  302F               	movlw	47
 31395  3518  0023               	movlb	3	; select bank3
 31396  3519  008C               	movwf	12	;volatile
 31397                           
 31398                           ;pin_manager.c: 86: WPUB = 0xFF;
 31399  351A  30FF               	movlw	255
 31400  351B  0024               	movlb	4	; select bank4
 31401  351C  008D               	movwf	13	;volatile
 31402                           
 31403                           ;pin_manager.c: 87: WPUG = 0x20;
 31404  351D  3020               	movlw	32
 31405  351E  0029               	movlb	9	; select bank9
 31406  351F  008D               	movwf	13	;volatile
 31407                           
 31408                           ;pin_manager.c: 88: OPTION_REGbits.nWPUEN = 0;
 31409  3520  0021               	movlb	1	; select bank1
 31410  3521  1395               	bcf	21,7	;volatile
 31411                           
 31412                           ;pin_manager.c: 94: APFCON = 0x00;
 31413  3522  0022               	movlb	2	; select bank2
 31414  3523  019D               	clrf	29	;volatile
 31415  3524  0008               	return
 31416  3525                     __end_of_PIN_MANAGER_Initialize:	
 31417                           
 31418                           	psect	text124
 31419  3AE7                     __ptext124:	
 31420 ;; *************** function _OSCILLATOR_Initialize *****************
 31421 ;; Defined at:
 31422 ;;		line 81 in file "mcc_generated_files/mcc.c"
 31423 ;; Parameters:    Size  Location     Type
 31424 ;;		None
 31425 ;; Auto vars:     Size  Location     Type
 31426 ;;		None
 31427 ;; Return value:  Size  Location     Type
 31428 ;;                  1    wreg      void 
 31429 ;; Registers used:
 31430 ;;		wreg, status,2
 31431 ;; Tracked objects:
 31432 ;;		On entry : 0/0
 31433 ;;		On exit  : 0/0
 31434 ;;		Unchanged: 0/0
 31435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31440 ;;Total ram usage:        0 bytes
 31441 ;; Hardware stack levels used:    1
 31442 ;; Hardware stack levels required when called:    2
 31443 ;; This function calls:
 31444 ;;		Nothing
 31445 ;; This function is called by:
 31446 ;;		_SYSTEM_Initialize
 31447 ;; This function uses a non-reentrant model
 31448 ;;
 31449                           
 31450                           
 31451                           ;psect for function _OSCILLATOR_Initialize
 31452  3AE7                     _OSCILLATOR_Initialize:	
 31453                           
 31454                           ;mcc.c: 84: OSCCON = 0x78;
 31455                           
 31456                           ;incstack = 0
 31457                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 31458  3AE7  3078               	movlw	120
 31459  3AE8  0021               	movlb	1	; select bank1
 31460  3AE9  0099               	movwf	25	;volatile
 31461                           
 31462                           ;mcc.c: 86: OSCTUNE = 0x00;
 31463  3AEA  0198               	clrf	24	;volatile
 31464  3AEB  0008               	return
 31465  3AEC                     __end_of_OSCILLATOR_Initialize:	
 31466                           
 31467                           	psect	text125
 31468  3BB4                     __ptext125:	
 31469 ;; *************** function _EUSART1_Initialize *****************
 31470 ;; Defined at:
 31471 ;;		line 14 in file "mcc_generated_files/eusart1.c"
 31472 ;; Parameters:    Size  Location     Type
 31473 ;;		None
 31474 ;; Auto vars:     Size  Location     Type
 31475 ;;		None
 31476 ;; Return value:  Size  Location     Type
 31477 ;;                  1    wreg      void 
 31478 ;; Registers used:
 31479 ;;		wreg
 31480 ;; Tracked objects:
 31481 ;;		On entry : 0/0
 31482 ;;		On exit  : 0/0
 31483 ;;		Unchanged: 0/0
 31484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31488 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31489 ;;Total ram usage:        0 bytes
 31490 ;; Hardware stack levels used:    1
 31491 ;; Hardware stack levels required when called:    2
 31492 ;; This function calls:
 31493 ;;		Nothing
 31494 ;; This function is called by:
 31495 ;;		_SYSTEM_Initialize
 31496 ;; This function uses a non-reentrant model
 31497 ;;
 31498                           
 31499                           
 31500                           ;psect for function _EUSART1_Initialize
 31501  3BB4                     _EUSART1_Initialize:	
 31502                           
 31503                           ;eusart1.c: 17: PIE1bits.RC1IE = 0;
 31504                           
 31505                           ;incstack = 0
 31506                           ; Regs used in _EUSART1_Initialize: [wreg]
 31507  3BB4  0021               	movlb	1	; select bank1
 31508  3BB5  1291               	bcf	17,5	;volatile
 31509                           
 31510                           ;eusart1.c: 18: PIE1bits.TX1IE = 0;
 31511  3BB6  1211               	bcf	17,4	;volatile
 31512                           
 31513                           ;eusart1.c: 21: BAUD1CON = 0x08;
 31514  3BB7  3008               	movlw	8
 31515  3BB8  0023               	movlb	3	; select bank3
 31516  3BB9  009F               	movwf	31	;volatile
 31517                           
 31518                           ;eusart1.c: 23: RC1STA = 0x90;
 31519  3BBA  3090               	movlw	144
 31520  3BBB  009D               	movwf	29	;volatile
 31521                           
 31522                           ;eusart1.c: 25: TX1STA = 0x24;
 31523  3BBC  3024               	movlw	36
 31524  3BBD  009E               	movwf	30	;volatile
 31525                           
 31526                           ;eusart1.c: 27: SP1BRGL = 0x1F;
 31527  3BBE  301F               	movlw	31
 31528  3BBF  009B               	movwf	27	;volatile
 31529                           
 31530                           ;eusart1.c: 29: SP1BRGH = 0x01;
 31531  3BC0  3001               	movlw	1
 31532  3BC1  009C               	movwf	28	;volatile
 31533  3BC2  0008               	return
 31534  3BC3                     __end_of_EUSART1_Initialize:	
 31535                           
 31536                           	psect	text126
 31537  2F86                     __ptext126:	
 31538 ;; *************** function _flow_sampling_process *****************
 31539 ;; Defined at:
 31540 ;;		line 259 in file "src/app/flow.c"
 31541 ;; Parameters:    Size  Location     Type
 31542 ;;		None
 31543 ;; Auto vars:     Size  Location     Type
 31544 ;;  i               1   44[BANK0 ] unsigned char 
 31545 ;; Return value:  Size  Location     Type
 31546 ;;                  1    wreg      void 
 31547 ;; Registers used:
 31548 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 31549 ;; Tracked objects:
 31550 ;;		On entry : 0/0
 31551 ;;		On exit  : 0/0
 31552 ;;		Unchanged: 0/0
 31553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 31556 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 31557 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 31558 ;;Total ram usage:        2 bytes
 31559 ;; Hardware stack levels used:    1
 31560 ;; Hardware stack levels required when called:    7
 31561 ;; This function calls:
 31562 ;;		_adc_mcp3241_read_convert_16
 31563 ;;		_adc_mcp3241_start_convert_16
 31564 ;;		_app_flow_adc_2_flow
 31565 ;;		_app_flow_get_adcAverageValue
 31566 ;;		_app_flow_lookup
 31567 ;;		_app_flow_money_off
 31568 ;;		_app_flow_money_warning
 31569 ;;		_app_flow_rt_balance_money_cal
 31570 ;;		_app_flow_rt_volume_cal_ex
 31571 ;; This function is called by:
 31572 ;;		_main
 31573 ;; This function uses a non-reentrant model
 31574 ;;
 31575                           
 31576                           
 31577                           ;psect for function _flow_sampling_process
 31578  2F86                     _flow_sampling_process:	
 31579                           
 31580                           ;flow.c: 261: uint8_t i;
 31581                           ;flow.c: 262: Event &= ~(0x01<<1);
 31582                           
 31583                           ;incstack = 0
 31584                           ; Regs used in _flow_sampling_process: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 31585  2F86  30FD               	movlw	253
 31586  2F87  0020               	movlb	0	; select bank0
 31587  2F88  00CB               	movwf	??_flow_sampling_process
 31588  2F89  084B               	movf	??_flow_sampling_process,w
 31589  2F8A  0021               	movlb	1	; select bank1
 31590  2F8B  05C7               	andwf	_Event^(0+128),f
 31591                           
 31592                           ;flow.c: 264: adcvalue = adc_mcp3241_read_convert_16(&i);
 31593  2F8C  304C               	movlw	(low (flow_sampling_process@i| 0))& (0+255)
 31594  2F8D  31B5  25C9  31AF   	fcall	_adc_mcp3241_read_convert_16
 31595  2F90  0020               	movlb	0	; select bank0
 31596  2F91  0823               	movf	?_adc_mcp3241_read_convert_16+1,w
 31597  2F92  0022               	movlb	2	; select bank2
 31598  2F93  00A3               	movwf	(_adcvalue+1)^(0+256)	;volatile
 31599  2F94  0020               	movlb	0	; select bank0
 31600  2F95  0822               	movf	?_adc_mcp3241_read_convert_16,w
 31601  2F96  0022               	movlb	2	; select bank2
 31602  2F97  00A2               	movwf	_adcvalue^(0+256)	;volatile
 31603                           
 31604                           ;flow.c: 265: __nop();
 31605  2F98  0000               	nop
 31606                           
 31607                           ;flow.c: 266: if ((i & 0x80) == 0) {
 31608  2F99  0020               	movlb	0	; select bank0
 31609  2F9A  1BCC               	btfsc	flow_sampling_process@i,7
 31610  2F9B  2FBE               	goto	l16131
 31611                           
 31612                           ;flow.c: 267: if(adcSamplingTimes<=20){
 31613  2F9C  3015               	movlw	21
 31614  2F9D  0021               	movlb	1	; select bank1
 31615  2F9E  023F               	subwf	_adcSamplingTimes^(0+128),w
 31616  2F9F  1803               	skipnc
 31617  2FA0  2FBE               	goto	l16131
 31618                           
 31619                           ;flow.c: 268: adcvalue=adcvalue & 0x1fff;
 31620  2FA1  30FF               	movlw	255
 31621  2FA2  0022               	movlb	2	; select bank2
 31622  2FA3  0522               	andwf	_adcvalue^(0+256),w	;volatile
 31623  2FA4  00A2               	movwf	_adcvalue^(0+256)	;volatile
 31624  2FA5  301F               	movlw	31
 31625  2FA6  0523               	andwf	(_adcvalue+1)^(0+256),w	;volatile
 31626  2FA7  00A3               	movwf	(_adcvalue+1)^(0+256)	;volatile
 31627                           
 31628                           ;flow.c: 269: adcvalue<<=4;
 31629  2FA8  3004               	movlw	4
 31630  2FA9                     u15105:	
 31631  2FA9  35A2               	lslf	_adcvalue^(0+256),f	;volatile
 31632  2FAA  0DA3               	rlf	(_adcvalue+1)^(0+256),f	;volatile
 31633  2FAB  0B89               	decfsz	9,f
 31634  2FAC  2FA9               	goto	u15105
 31635                           
 31636                           ;flow.c: 270: adcSamplingBuffer[adcSamplingTimes]=adcvalue;
 31637  2FAD  0021               	movlb	1	; select bank1
 31638  2FAE  353F               	lslf	_adcSamplingTimes^(0+128),w
 31639  2FAF  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 31640  2FB0  0086               	movwf	6
 31641  2FB1  3002               	movlw	2	; select bank5/6
 31642  2FB2  0087               	movwf	7
 31643  2FB3  0022               	movlb	2	; select bank2
 31644  2FB4  0822               	movf	_adcvalue^(0+256),w	;volatile
 31645  2FB5  3FC0               	movwi [0]fsr1
 31646  2FB6  0823               	movf	(_adcvalue+1)^(0+256),w	;volatile
 31647  2FB7  3FC1               	movwi [1]fsr1
 31648                           
 31649                           ;flow.c: 271: adcSamplingTimes++;
 31650  2FB8  3001               	movlw	1
 31651  2FB9  0020               	movlb	0	; select bank0
 31652  2FBA  00CB               	movwf	??_flow_sampling_process
 31653  2FBB  084B               	movf	??_flow_sampling_process,w
 31654  2FBC  0021               	movlb	1	; select bank1
 31655  2FBD  07BF               	addwf	_adcSamplingTimes^(0+128),f
 31656  2FBE                     l16131:	
 31657                           
 31658                           ;flow.c: 272: }
 31659                           ;flow.c: 273: }
 31660                           ;flow.c: 274: if(adcSamplingTimes>=20){
 31661  2FBE  3014               	movlw	20
 31662  2FBF  0021               	movlb	1	; select bank1
 31663  2FC0  023F               	subwf	_adcSamplingTimes^(0+128),w
 31664  2FC1  1C03               	skipc
 31665  2FC2  2FFA               	goto	l16153
 31666                           
 31667                           ;flow.c: 275: adcAverageValue=app_flow_get_adcAverageValue();
 31668  2FC3  3190  20CA  31AF   	fcall	_app_flow_get_adcAverageValue
 31669  2FC6  0020               	movlb	0	; select bank0
 31670  2FC7  0836               	movf	?_app_flow_get_adcAverageValue+1,w
 31671  2FC8  0021               	movlb	1	; select bank1
 31672  2FC9  00B9               	movwf	(_adcAverageValue+1)^(0+128)	;volatile
 31673  2FCA  0020               	movlb	0	; select bank0
 31674  2FCB  0835               	movf	?_app_flow_get_adcAverageValue,w
 31675  2FCC  0021               	movlb	1	; select bank1
 31676  2FCD  00B8               	movwf	_adcAverageValue^(0+128)	;volatile
 31677                           
 31678                           ;flow.c: 276: adcSamplingTimes=0;
 31679  2FCE  01BF               	clrf	_adcSamplingTimes^(0+128)
 31680                           
 31681                           ;flow.c: 277: i = app_flow_lookup(adcAverageValue);
 31682  2FCF  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 31683  2FD0  00F4               	movwf	app_flow_lookup@adcValue+1
 31684  2FD1  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 31685  2FD2  00F3               	movwf	app_flow_lookup@adcValue
 31686  2FD3  31A3  2357  31AF   	fcall	_app_flow_lookup
 31687  2FD6  0020               	movlb	0	; select bank0
 31688  2FD7  00CB               	movwf	??_flow_sampling_process
 31689  2FD8  084B               	movf	??_flow_sampling_process,w
 31690  2FD9  00CC               	movwf	flow_sampling_process@i
 31691                           
 31692                           ;flow.c: 278: flow = app_flow_adc_2_flow(i);
 31693  2FDA  084C               	movf	flow_sampling_process@i,w
 31694  2FDB  3183  23BD  31AF   	fcall	_app_flow_adc_2_flow
 31695  2FDE  0020               	movlb	0	; select bank0
 31696  2FDF  0836               	movf	?_app_flow_adc_2_flow+1,w
 31697  2FE0  0021               	movlb	1	; select bank1
 31698  2FE1  00BD               	movwf	(_flow+1)^(0+128)	;volatile
 31699  2FE2  0020               	movlb	0	; select bank0
 31700  2FE3  0835               	movf	?_app_flow_adc_2_flow,w
 31701  2FE4  0021               	movlb	1	; select bank1
 31702  2FE5  00BC               	movwf	_flow^(0+128)	;volatile
 31703                           
 31704                           ;flow.c: 280: if( Event & (uint8_t)(0x01<<7)){
 31705  2FE6  1FC7               	btfss	_Event^(0+128),7
 31706  2FE7  2FF4               	goto	l16149
 31707                           
 31708                           ;flow.c: 281: Event &= ~(uint8_t)(0x01<<7);
 31709  2FE8  307F               	movlw	127
 31710  2FE9  0020               	movlb	0	; select bank0
 31711  2FEA  00CB               	movwf	??_flow_sampling_process
 31712  2FEB  084B               	movf	??_flow_sampling_process,w
 31713  2FEC  0021               	movlb	1	; select bank1
 31714  2FED  05C7               	andwf	_Event^(0+128),f
 31715                           
 31716                           ;flow.c: 283: app_flow_rt_volume_cal_ex();
 31717  2FEE  3199  21FD  31AF   	fcall	_app_flow_rt_volume_cal_ex
 31718                           
 31719                           ;flow.c: 284: app_flow_rt_balance_money_cal();
 31720  2FF1  31A2  222A  31AF   	fcall	_app_flow_rt_balance_money_cal
 31721  2FF4                     l16149:	
 31722                           
 31723                           ;flow.c: 285: }
 31724                           ;flow.c: 287: app_flow_money_warning();
 31725  2FF4  31BF  27B2  31AF   	fcall	_app_flow_money_warning
 31726                           
 31727                           ;flow.c: 288: app_flow_money_off();
 31728  2FF7  31B0  20E6  31AF   	fcall	_app_flow_money_off
 31729  2FFA                     l16153:	
 31730                           
 31731                           ;flow.c: 289: }
 31732                           ;flow.c: 291: adc_mcp3241_start_convert_16(0, 0);
 31733  2FFA  0020               	movlb	0	; select bank0
 31734  2FFB  01A2               	clrf	adc_mcp3241_start_convert_16@g
 31735  2FFC  3000               	movlw	0
 31736  2FFD  31B3  2339         	fcall	_adc_mcp3241_start_convert_16
 31737  2FFF  0008               	return
 31738  3000                     __end_of_flow_sampling_process:	
 31739                           
 31740                           	psect	text127
 31741  19FD                     __ptext127:	
 31742 ;; *************** function _app_flow_rt_volume_cal_ex *****************
 31743 ;; Defined at:
 31744 ;;		line 167 in file "src/app/flow.c"
 31745 ;; Parameters:    Size  Location     Type
 31746 ;;		None
 31747 ;; Auto vars:     Size  Location     Type
 31748 ;;		None
 31749 ;; Return value:  Size  Location     Type
 31750 ;;                  1    wreg      void 
 31751 ;; Registers used:
 31752 ;;		wreg, status,2, status,0, pclath, cstack
 31753 ;; Tracked objects:
 31754 ;;		On entry : 0/0
 31755 ;;		On exit  : 0/0
 31756 ;;		Unchanged: 0/0
 31757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31760 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 31761 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 31762 ;;Total ram usage:        4 bytes
 31763 ;; Hardware stack levels used:    1
 31764 ;; Hardware stack levels required when called:    3
 31765 ;; This function calls:
 31766 ;;		___lldiv
 31767 ;;		___llmod
 31768 ;;		___lmul
 31769 ;; This function is called by:
 31770 ;;		_flow_sampling_process
 31771 ;; This function uses a non-reentrant model
 31772 ;;
 31773                           
 31774                           
 31775                           ;psect for function _app_flow_rt_volume_cal_ex
 31776  19FD                     _app_flow_rt_volume_cal_ex:	
 31777                           
 31778                           ;flow.c: 169: fl_t32=flow;
 31779                           
 31780                           ;incstack = 0
 31781                           ; Regs used in _app_flow_rt_volume_cal_ex: [wreg+status,2+status,0+pclath+cstack]
 31782  19FD  0021               	movlb	1	; select bank1
 31783  19FE  083C               	movf	_flow^(0+128),w	;volatile
 31784  19FF  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31785  1A00  083D               	movf	(_flow+1)^(0+128),w	;volatile
 31786  1A01  00A5               	movwf	(_fl_t32^(0+128)+1)	;volatile
 31787  1A02  01A6               	clrf	(_fl_t32^(0+128)+2)	;volatile
 31788  1A03  01A7               	clrf	(_fl_t32^(0+128)+3)	;volatile
 31789                           
 31790                           ;flow.c: 171: fl_t32 = fl_t32 * (uint32_t)calVolumeTimeSec;
 31791  1A04  0022               	movlb	2	; select bank2
 31792  1A05  0841               	movf	_calVolumeTimeSec^(0+256),w
 31793  1A06  0020               	movlb	0	; select bank0
 31794  1A07  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31795  1A08  01B6               	clrf	??_app_flow_rt_volume_cal_ex+1
 31796  1A09  01B7               	clrf	??_app_flow_rt_volume_cal_ex+2
 31797  1A0A  01B8               	clrf	??_app_flow_rt_volume_cal_ex+3
 31798  1A0B  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31799  1A0C  00A3               	movwf	___lmul@multiplier+3
 31800  1A0D  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31801  1A0E  00A2               	movwf	___lmul@multiplier+2
 31802  1A0F  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31803  1A10  00A1               	movwf	___lmul@multiplier+1
 31804  1A11  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31805  1A12  00A0               	movwf	___lmul@multiplier
 31806  1A13  0021               	movlb	1	; select bank1
 31807  1A14  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 31808  1A15  0020               	movlb	0	; select bank0
 31809  1A16  00A7               	movwf	___lmul@multiplicand+3
 31810  1A17  0021               	movlb	1	; select bank1
 31811  1A18  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 31812  1A19  0020               	movlb	0	; select bank0
 31813  1A1A  00A6               	movwf	___lmul@multiplicand+2
 31814  1A1B  0021               	movlb	1	; select bank1
 31815  1A1C  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 31816  1A1D  0020               	movlb	0	; select bank0
 31817  1A1E  00A5               	movwf	___lmul@multiplicand+1
 31818  1A1F  0021               	movlb	1	; select bank1
 31819  1A20  0824               	movf	_fl_t32^(0+128),w	;volatile
 31820  1A21  0020               	movlb	0	; select bank0
 31821  1A22  00A4               	movwf	___lmul@multiplicand
 31822  1A23  31B3  2369  3199   	fcall	___lmul
 31823  1A26  0020               	movlb	0	; select bank0
 31824  1A27  0823               	movf	?___lmul+3,w
 31825  1A28  0021               	movlb	1	; select bank1
 31826  1A29  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 31827  1A2A  0020               	movlb	0	; select bank0
 31828  1A2B  0822               	movf	?___lmul+2,w
 31829  1A2C  0021               	movlb	1	; select bank1
 31830  1A2D  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 31831  1A2E  0020               	movlb	0	; select bank0
 31832  1A2F  0821               	movf	?___lmul+1,w
 31833  1A30  0021               	movlb	1	; select bank1
 31834  1A31  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 31835  1A32  0020               	movlb	0	; select bank0
 31836  1A33  0820               	movf	?___lmul,w
 31837  1A34  0021               	movlb	1	; select bank1
 31838  1A35  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31839                           
 31840                           ;flow.c: 172: fl_t32>>=1;
 31841  1A36  3001               	movlw	1
 31842  1A37                     u14045:	
 31843  1A37  36A7               	lsrf	(_fl_t32+3)^(0+128),f	;volatile
 31844  1A38  0CA6               	rrf	(_fl_t32+2)^(0+128),f	;volatile
 31845  1A39  0CA5               	rrf	(_fl_t32+1)^(0+128),f	;volatile
 31846  1A3A  0CA4               	rrf	_fl_t32^(0+128),f	;volatile
 31847  1A3B  0B89               	decfsz	9,f
 31848  1A3C  2A37               	goto	u14045
 31849                           
 31850                           ;flow.c: 175: rtVolume_L=rtVolume_L+fl_t32;
 31851  1A3D  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31852  1A3E  0724               	addwf	_fl_t32^(0+128),w	;volatile
 31853  1A3F  0020               	movlb	0	; select bank0
 31854  1A40  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31855  1A41  0021               	movlb	1	; select bank1
 31856  1A42  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31857  1A43  3D25               	addwfc	(_fl_t32+1)^(0+128),w	;volatile
 31858  1A44  0020               	movlb	0	; select bank0
 31859  1A45  00B6               	movwf	??_app_flow_rt_volume_cal_ex+1
 31860  1A46  0021               	movlb	1	; select bank1
 31861  1A47  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31862  1A48  3D26               	addwfc	(_fl_t32+2)^(0+128),w	;volatile
 31863  1A49  0020               	movlb	0	; select bank0
 31864  1A4A  00B7               	movwf	??_app_flow_rt_volume_cal_ex+2
 31865  1A4B  0021               	movlb	1	; select bank1
 31866  1A4C  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31867  1A4D  3D27               	addwfc	(_fl_t32+3)^(0+128),w	;volatile
 31868  1A4E  0020               	movlb	0	; select bank0
 31869  1A4F  00B8               	movwf	??_app_flow_rt_volume_cal_ex+3
 31870  1A50  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31871  1A51  0021               	movlb	1	; select bank1
 31872  1A52  00A3               	movwf	(_rtVolume_L+3)^(0+128)	;volatile
 31873  1A53  0020               	movlb	0	; select bank0
 31874  1A54  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31875  1A55  0021               	movlb	1	; select bank1
 31876  1A56  00A2               	movwf	(_rtVolume_L+2)^(0+128)	;volatile
 31877  1A57  0020               	movlb	0	; select bank0
 31878  1A58  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31879  1A59  0021               	movlb	1	; select bank1
 31880  1A5A  00A1               	movwf	(_rtVolume_L+1)^(0+128)	;volatile
 31881  1A5B  0020               	movlb	0	; select bank0
 31882  1A5C  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31883  1A5D  0021               	movlb	1	; select bank1
 31884  1A5E  00A0               	movwf	_rtVolume_L^(0+128)	;volatile
 31885                           
 31886                           ;flow.c: 176: rtVolume_m3=rtVolume_m3+(rtVolume_L / 60000ul);
 31887  1A5F  3000               	movlw	0
 31888  1A60  0020               	movlb	0	; select bank0
 31889  1A61  00AB               	movwf	___lldiv@divisor+3
 31890  1A62  3000               	movlw	0
 31891  1A63  00AA               	movwf	___lldiv@divisor+2
 31892  1A64  30EA               	movlw	234
 31893  1A65  00A9               	movwf	___lldiv@divisor+1
 31894  1A66  3060               	movlw	96
 31895  1A67  00A8               	movwf	___lldiv@divisor
 31896  1A68  0021               	movlb	1	; select bank1
 31897  1A69  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31898  1A6A  0020               	movlb	0	; select bank0
 31899  1A6B  00AF               	movwf	___lldiv@dividend+3
 31900  1A6C  0021               	movlb	1	; select bank1
 31901  1A6D  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31902  1A6E  0020               	movlb	0	; select bank0
 31903  1A6F  00AE               	movwf	___lldiv@dividend+2
 31904  1A70  0021               	movlb	1	; select bank1
 31905  1A71  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31906  1A72  0020               	movlb	0	; select bank0
 31907  1A73  00AD               	movwf	___lldiv@dividend+1
 31908  1A74  0021               	movlb	1	; select bank1
 31909  1A75  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31910  1A76  0020               	movlb	0	; select bank0
 31911  1A77  00AC               	movwf	___lldiv@dividend
 31912  1A78  31AA  2268  3199   	fcall	___lldiv
 31913  1A7B  0020               	movlb	0	; select bank0
 31914  1A7C  0828               	movf	?___lldiv,w
 31915  1A7D  0021               	movlb	1	; select bank1
 31916  1A7E  0730               	addwf	_rtVolume_m3^(0+128),w	;volatile
 31917  1A7F  0020               	movlb	0	; select bank0
 31918  1A80  00B5               	movwf	??_app_flow_rt_volume_cal_ex
 31919  1A81  0829               	movf	?___lldiv+1,w
 31920  1A82  0021               	movlb	1	; select bank1
 31921  1A83  3D31               	addwfc	(_rtVolume_m3+1)^(0+128),w	;volatile
 31922  1A84  0020               	movlb	0	; select bank0
 31923  1A85  00B6               	movwf	??_app_flow_rt_volume_cal_ex+1
 31924  1A86  082A               	movf	?___lldiv+2,w
 31925  1A87  0021               	movlb	1	; select bank1
 31926  1A88  3D32               	addwfc	(_rtVolume_m3+2)^(0+128),w	;volatile
 31927  1A89  0020               	movlb	0	; select bank0
 31928  1A8A  00B7               	movwf	??_app_flow_rt_volume_cal_ex+2
 31929  1A8B  082B               	movf	?___lldiv+3,w
 31930  1A8C  0021               	movlb	1	; select bank1
 31931  1A8D  3D33               	addwfc	(_rtVolume_m3+3)^(0+128),w	;volatile
 31932  1A8E  0020               	movlb	0	; select bank0
 31933  1A8F  00B8               	movwf	??_app_flow_rt_volume_cal_ex+3
 31934  1A90  0838               	movf	??_app_flow_rt_volume_cal_ex+3,w
 31935  1A91  0021               	movlb	1	; select bank1
 31936  1A92  00B3               	movwf	(_rtVolume_m3+3)^(0+128)	;volatile
 31937  1A93  0020               	movlb	0	; select bank0
 31938  1A94  0837               	movf	??_app_flow_rt_volume_cal_ex+2,w
 31939  1A95  0021               	movlb	1	; select bank1
 31940  1A96  00B2               	movwf	(_rtVolume_m3+2)^(0+128)	;volatile
 31941  1A97  0020               	movlb	0	; select bank0
 31942  1A98  0836               	movf	??_app_flow_rt_volume_cal_ex+1,w
 31943  1A99  0021               	movlb	1	; select bank1
 31944  1A9A  00B1               	movwf	(_rtVolume_m3+1)^(0+128)	;volatile
 31945  1A9B  0020               	movlb	0	; select bank0
 31946  1A9C  0835               	movf	??_app_flow_rt_volume_cal_ex,w
 31947  1A9D  0021               	movlb	1	; select bank1
 31948  1A9E  00B0               	movwf	_rtVolume_m3^(0+128)	;volatile
 31949                           
 31950                           ;flow.c: 178: rtVolume_L = rtVolume_L % 60000ul;
 31951  1A9F  3000               	movlw	0
 31952  1AA0  0020               	movlb	0	; select bank0
 31953  1AA1  00A3               	movwf	___llmod@divisor+3
 31954  1AA2  3000               	movlw	0
 31955  1AA3  00A2               	movwf	___llmod@divisor+2
 31956  1AA4  30EA               	movlw	234
 31957  1AA5  00A1               	movwf	___llmod@divisor+1
 31958  1AA6  3060               	movlw	96
 31959  1AA7  00A0               	movwf	___llmod@divisor
 31960  1AA8  0021               	movlb	1	; select bank1
 31961  1AA9  0823               	movf	(_rtVolume_L+3)^(0+128),w	;volatile
 31962  1AAA  0020               	movlb	0	; select bank0
 31963  1AAB  00A7               	movwf	___llmod@dividend+3
 31964  1AAC  0021               	movlb	1	; select bank1
 31965  1AAD  0822               	movf	(_rtVolume_L+2)^(0+128),w	;volatile
 31966  1AAE  0020               	movlb	0	; select bank0
 31967  1AAF  00A6               	movwf	___llmod@dividend+2
 31968  1AB0  0021               	movlb	1	; select bank1
 31969  1AB1  0821               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 31970  1AB2  0020               	movlb	0	; select bank0
 31971  1AB3  00A5               	movwf	___llmod@dividend+1
 31972  1AB4  0021               	movlb	1	; select bank1
 31973  1AB5  0820               	movf	_rtVolume_L^(0+128),w	;volatile
 31974  1AB6  0020               	movlb	0	; select bank0
 31975  1AB7  00A4               	movwf	___llmod@dividend
 31976  1AB8  31B7  277A         	fcall	___llmod
 31977  1ABA  0020               	movlb	0	; select bank0
 31978  1ABB  0823               	movf	?___llmod+3,w
 31979  1ABC  0021               	movlb	1	; select bank1
 31980  1ABD  00A3               	movwf	(_rtVolume_L+3)^(0+128)	;volatile
 31981  1ABE  0020               	movlb	0	; select bank0
 31982  1ABF  0822               	movf	?___llmod+2,w
 31983  1AC0  0021               	movlb	1	; select bank1
 31984  1AC1  00A2               	movwf	(_rtVolume_L+2)^(0+128)	;volatile
 31985  1AC2  0020               	movlb	0	; select bank0
 31986  1AC3  0821               	movf	?___llmod+1,w
 31987  1AC4  0021               	movlb	1	; select bank1
 31988  1AC5  00A1               	movwf	(_rtVolume_L+1)^(0+128)	;volatile
 31989  1AC6  0020               	movlb	0	; select bank0
 31990  1AC7  0820               	movf	?___llmod,w
 31991  1AC8  0021               	movlb	1	; select bank1
 31992  1AC9  00A0               	movwf	_rtVolume_L^(0+128)	;volatile
 31993                           
 31994                           ;flow.c: 180: calVolumeTimeSec=0;
 31995  1ACA  0022               	movlb	2	; select bank2
 31996  1ACB  01C1               	clrf	_calVolumeTimeSec^(0+256)
 31997  1ACC  0008               	return
 31998  1ACD                     __end_of_app_flow_rt_volume_cal_ex:	
 31999                           
 32000                           	psect	text128
 32001  377A                     __ptext128:	
 32002 ;; *************** function ___llmod *****************
 32003 ;; Defined at:
 32004 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
 32005 ;; Parameters:    Size  Location     Type
 32006 ;;  divisor         4    0[BANK0 ] unsigned long 
 32007 ;;  dividend        4    4[BANK0 ] unsigned long 
 32008 ;; Auto vars:     Size  Location     Type
 32009 ;;  counter         1    4[COMMON] unsigned char 
 32010 ;; Return value:  Size  Location     Type
 32011 ;;                  4    0[BANK0 ] unsigned long 
 32012 ;; Registers used:
 32013 ;;		wreg, status,2, status,0
 32014 ;; Tracked objects:
 32015 ;;		On entry : 0/0
 32016 ;;		On exit  : 0/0
 32017 ;;		Unchanged: 0/0
 32018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32019 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32020 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32021 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32022 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32023 ;;Total ram usage:       10 bytes
 32024 ;; Hardware stack levels used:    1
 32025 ;; Hardware stack levels required when called:    2
 32026 ;; This function calls:
 32027 ;;		Nothing
 32028 ;; This function is called by:
 32029 ;;		_app_flow_rt_volume_cal_ex
 32030 ;;		_app_flow_rt_volume_cal
 32031 ;; This function uses a non-reentrant model
 32032 ;;
 32033                           
 32034                           
 32035                           ;psect for function ___llmod
 32036  377A                     ___llmod:	
 32037                           
 32038                           ;incstack = 0
 32039                           ; Regs used in ___llmod: [wreg+status,2+status,0]
 32040  377A  0020               	movlb	0	; select bank0
 32041  377B  0823               	movf	___llmod@divisor+3,w
 32042  377C  0422               	iorwf	___llmod@divisor+2,w
 32043  377D  0421               	iorwf	___llmod@divisor+1,w
 32044  377E  0420               	iorwf	___llmod@divisor,w
 32045  377F  1903               	skipnz
 32046  3780  2FB4               	goto	l14597
 32047  3781  01F4               	clrf	___llmod@counter
 32048  3782  0AF4               	incf	___llmod@counter,f
 32049  3783                     l14587:	
 32050  3783  1BA3               	btfsc	___llmod@divisor+3,7
 32051  3784  2F91               	goto	l14589
 32052  3785  3001               	movlw	1
 32053  3786                     u13405:	
 32054  3786  35A0               	lslf	___llmod@divisor,f
 32055  3787  0DA1               	rlf	___llmod@divisor+1,f
 32056  3788  0DA2               	rlf	___llmod@divisor+2,f
 32057  3789  0DA3               	rlf	___llmod@divisor+3,f
 32058  378A  0B89               	decfsz	9,f
 32059  378B  2F86               	goto	u13405
 32060  378C  3001               	movlw	1
 32061  378D  00F3               	movwf	??___llmod
 32062  378E  0873               	movf	??___llmod,w
 32063  378F  07F4               	addwf	___llmod@counter,f
 32064  3790  2F83               	goto	l14587
 32065  3791                     l14589:	
 32066  3791  0823               	movf	___llmod@divisor+3,w
 32067  3792  0227               	subwf	___llmod@dividend+3,w
 32068  3793  1D03               	skipz
 32069  3794  2F9F               	goto	u13425
 32070  3795  0822               	movf	___llmod@divisor+2,w
 32071  3796  0226               	subwf	___llmod@dividend+2,w
 32072  3797  1D03               	skipz
 32073  3798  2F9F               	goto	u13425
 32074  3799  0821               	movf	___llmod@divisor+1,w
 32075  379A  0225               	subwf	___llmod@dividend+1,w
 32076  379B  1D03               	skipz
 32077  379C  2F9F               	goto	u13425
 32078  379D  0820               	movf	___llmod@divisor,w
 32079  379E  0224               	subwf	___llmod@dividend,w
 32080  379F                     u13425:	
 32081  379F  1C03               	skipc
 32082  37A0  2FA9               	goto	l14593
 32083  37A1  0820               	movf	___llmod@divisor,w
 32084  37A2  02A4               	subwf	___llmod@dividend,f
 32085  37A3  0821               	movf	___llmod@divisor+1,w
 32086  37A4  3BA5               	subwfb	___llmod@dividend+1,f
 32087  37A5  0822               	movf	___llmod@divisor+2,w
 32088  37A6  3BA6               	subwfb	___llmod@dividend+2,f
 32089  37A7  0823               	movf	___llmod@divisor+3,w
 32090  37A8  3BA7               	subwfb	___llmod@dividend+3,f
 32091  37A9                     l14593:	
 32092  37A9  3001               	movlw	1
 32093  37AA                     u13435:	
 32094  37AA  36A3               	lsrf	___llmod@divisor+3,f
 32095  37AB  0CA2               	rrf	___llmod@divisor+2,f
 32096  37AC  0CA1               	rrf	___llmod@divisor+1,f
 32097  37AD  0CA0               	rrf	___llmod@divisor,f
 32098  37AE  0B89               	decfsz	9,f
 32099  37AF  2FAA               	goto	u13435
 32100  37B0  3001               	movlw	1
 32101  37B1  02F4               	subwf	___llmod@counter,f
 32102  37B2  1D03               	btfss	3,2
 32103  37B3  2F91               	goto	l14589
 32104  37B4                     l14597:	
 32105  37B4  0827               	movf	___llmod@dividend+3,w
 32106  37B5  00A3               	movwf	?___llmod+3
 32107  37B6  0826               	movf	___llmod@dividend+2,w
 32108  37B7  00A2               	movwf	?___llmod+2
 32109  37B8  0825               	movf	___llmod@dividend+1,w
 32110  37B9  00A1               	movwf	?___llmod+1
 32111  37BA  0824               	movf	___llmod@dividend,w
 32112  37BB  00A0               	movwf	?___llmod
 32113  37BC  0008               	return
 32114  37BD                     __end_of___llmod:	
 32115                           
 32116                           	psect	text129
 32117  222A                     __ptext129:	
 32118 ;; *************** function _app_flow_rt_balance_money_cal *****************
 32119 ;; Defined at:
 32120 ;;		line 183 in file "src/app/flow.c"
 32121 ;; Parameters:    Size  Location     Type
 32122 ;;		None
 32123 ;; Auto vars:     Size  Location     Type
 32124 ;;		None
 32125 ;; Return value:  Size  Location     Type
 32126 ;;                  1    wreg      void 
 32127 ;; Registers used:
 32128 ;;		wreg, status,2, status,0, pclath, cstack
 32129 ;; Tracked objects:
 32130 ;;		On entry : 0/0
 32131 ;;		On exit  : 0/0
 32132 ;;		Unchanged: 0/0
 32133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32135 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32136 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32137 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32138 ;;Total ram usage:        8 bytes
 32139 ;; Hardware stack levels used:    1
 32140 ;; Hardware stack levels required when called:    3
 32141 ;; This function calls:
 32142 ;;		___lldiv
 32143 ;;		___lmul
 32144 ;; This function is called by:
 32145 ;;		_flow_sampling_process
 32146 ;; This function uses a non-reentrant model
 32147 ;;
 32148                           
 32149                           
 32150                           ;psect for function _app_flow_rt_balance_money_cal
 32151  222A                     _app_flow_rt_balance_money_cal:	
 32152                           
 32153                           ;flow.c: 185: __q31 = mainSystemData.price;
 32154                           
 32155                           ;incstack = 0
 32156                           ; Regs used in _app_flow_rt_balance_money_cal: [wreg+status,2+status,0+pclath+cstack]
 32157  222A  0024               	movlb	4	; select bank4
 32158  222B  0832               	movf	(_mainSystemData^(0+512)+18),w
 32159  222C  0021               	movlb	1	; select bank1
 32160  222D  00AC               	movwf	___q31^(0+128)
 32161  222E  0024               	movlb	4	; select bank4
 32162  222F  0833               	movf	((_mainSystemData+1)^(0+512)+18),w
 32163  2230  0021               	movlb	1	; select bank1
 32164  2231  00AD               	movwf	(___q31+1)^(0+128)
 32165  2232  0D89               	rlf	9,f
 32166  2233  3B89               	subwfb	9,f
 32167  2234  0989               	comf	9,f
 32168  2235  00AE               	movwf	(___q31+2)^(0+128)
 32169  2236  00AF               	movwf	(___q31+3)^(0+128)
 32170                           
 32171                           ;flow.c: 187: __q31 = (__q31 * rtVolume_m3 / 10);
 32172  2237  3000               	movlw	0
 32173  2238  0020               	movlb	0	; select bank0
 32174  2239  00AB               	movwf	___lldiv@divisor+3
 32175  223A  3000               	movlw	0
 32176  223B  00AA               	movwf	___lldiv@divisor+2
 32177  223C  3000               	movlw	0
 32178  223D  00A9               	movwf	___lldiv@divisor+1
 32179  223E  300A               	movlw	10
 32180  223F  00A8               	movwf	___lldiv@divisor
 32181  2240  0021               	movlb	1	; select bank1
 32182  2241  082F               	movf	(___q31+3)^(0+128),w
 32183  2242  0020               	movlb	0	; select bank0
 32184  2243  00A3               	movwf	___lmul@multiplier+3
 32185  2244  0021               	movlb	1	; select bank1
 32186  2245  082E               	movf	(___q31+2)^(0+128),w
 32187  2246  0020               	movlb	0	; select bank0
 32188  2247  00A2               	movwf	___lmul@multiplier+2
 32189  2248  0021               	movlb	1	; select bank1
 32190  2249  082D               	movf	(___q31+1)^(0+128),w
 32191  224A  0020               	movlb	0	; select bank0
 32192  224B  00A1               	movwf	___lmul@multiplier+1
 32193  224C  0021               	movlb	1	; select bank1
 32194  224D  082C               	movf	___q31^(0+128),w
 32195  224E  0020               	movlb	0	; select bank0
 32196  224F  00A0               	movwf	___lmul@multiplier
 32197  2250  0021               	movlb	1	; select bank1
 32198  2251  0833               	movf	(_rtVolume_m3+3)^(0+128),w	;volatile
 32199  2252  0020               	movlb	0	; select bank0
 32200  2253  00A7               	movwf	___lmul@multiplicand+3
 32201  2254  0021               	movlb	1	; select bank1
 32202  2255  0832               	movf	(_rtVolume_m3+2)^(0+128),w	;volatile
 32203  2256  0020               	movlb	0	; select bank0
 32204  2257  00A6               	movwf	___lmul@multiplicand+2
 32205  2258  0021               	movlb	1	; select bank1
 32206  2259  0831               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 32207  225A  0020               	movlb	0	; select bank0
 32208  225B  00A5               	movwf	___lmul@multiplicand+1
 32209  225C  0021               	movlb	1	; select bank1
 32210  225D  0830               	movf	_rtVolume_m3^(0+128),w	;volatile
 32211  225E  0020               	movlb	0	; select bank0
 32212  225F  00A4               	movwf	___lmul@multiplicand
 32213  2260  31B3  2369  31A2   	fcall	___lmul
 32214  2263  0020               	movlb	0	; select bank0
 32215  2264  0823               	movf	?___lmul+3,w
 32216  2265  00AF               	movwf	___lldiv@dividend+3
 32217  2266  0822               	movf	?___lmul+2,w
 32218  2267  00AE               	movwf	___lldiv@dividend+2
 32219  2268  0821               	movf	?___lmul+1,w
 32220  2269  00AD               	movwf	___lldiv@dividend+1
 32221  226A  0820               	movf	?___lmul,w
 32222  226B  00AC               	movwf	___lldiv@dividend
 32223  226C  31AA  2268  31A2   	fcall	___lldiv
 32224  226F  0020               	movlb	0	; select bank0
 32225  2270  082B               	movf	?___lldiv+3,w
 32226  2271  0021               	movlb	1	; select bank1
 32227  2272  00AF               	movwf	(___q31+3)^(0+128)
 32228  2273  0020               	movlb	0	; select bank0
 32229  2274  082A               	movf	?___lldiv+2,w
 32230  2275  0021               	movlb	1	; select bank1
 32231  2276  00AE               	movwf	(___q31+2)^(0+128)
 32232  2277  0020               	movlb	0	; select bank0
 32233  2278  0829               	movf	?___lldiv+1,w
 32234  2279  0021               	movlb	1	; select bank1
 32235  227A  00AD               	movwf	(___q31+1)^(0+128)
 32236  227B  0020               	movlb	0	; select bank0
 32237  227C  0828               	movf	?___lldiv,w
 32238  227D  0021               	movlb	1	; select bank1
 32239  227E  00AC               	movwf	___q31^(0+128)
 32240                           
 32241                           ;flow.c: 188: rtBalanceMoney = mainSystemData.BalanceMoney - __q31;
 32242  227F  0024               	movlb	4	; select bank4
 32243  2280  084C               	movf	(_mainSystemData^(0+512)+44),w
 32244  2281  0020               	movlb	0	; select bank0
 32245  2282  00B5               	movwf	??_app_flow_rt_balance_money_cal
 32246  2283  0024               	movlb	4	; select bank4
 32247  2284  084D               	movf	((_mainSystemData+1)^(0+512)+44),w
 32248  2285  0020               	movlb	0	; select bank0
 32249  2286  00B6               	movwf	??_app_flow_rt_balance_money_cal+1
 32250  2287  0024               	movlb	4	; select bank4
 32251  2288  084E               	movf	((_mainSystemData+2)^(0+512)+44),w
 32252  2289  0020               	movlb	0	; select bank0
 32253  228A  00B7               	movwf	??_app_flow_rt_balance_money_cal+2
 32254  228B  0024               	movlb	4	; select bank4
 32255  228C  084F               	movf	((_mainSystemData+3)^(0+512)+44),w
 32256  228D  0020               	movlb	0	; select bank0
 32257  228E  00B8               	movwf	??_app_flow_rt_balance_money_cal+3
 32258  228F  0021               	movlb	1	; select bank1
 32259  2290  092C               	comf	___q31^(0+128),w
 32260  2291  0020               	movlb	0	; select bank0
 32261  2292  00B9               	movwf	??_app_flow_rt_balance_money_cal+4
 32262  2293  0021               	movlb	1	; select bank1
 32263  2294  092D               	comf	(___q31+1)^(0+128),w
 32264  2295  0020               	movlb	0	; select bank0
 32265  2296  00BA               	movwf	??_app_flow_rt_balance_money_cal+5
 32266  2297  0021               	movlb	1	; select bank1
 32267  2298  092E               	comf	(___q31+2)^(0+128),w
 32268  2299  0020               	movlb	0	; select bank0
 32269  229A  00BB               	movwf	??_app_flow_rt_balance_money_cal+6
 32270  229B  0021               	movlb	1	; select bank1
 32271  229C  092F               	comf	(___q31+3)^(0+128),w
 32272  229D  0020               	movlb	0	; select bank0
 32273  229E  00BC               	movwf	??_app_flow_rt_balance_money_cal+7
 32274  229F  0AB9               	incf	??_app_flow_rt_balance_money_cal+4,f
 32275  22A0  1903               	skipnz
 32276  22A1  0ABA               	incf	??_app_flow_rt_balance_money_cal+5,f
 32277  22A2  1903               	skipnz
 32278  22A3  0ABB               	incf	??_app_flow_rt_balance_money_cal+6,f
 32279  22A4  1903               	skipnz
 32280  22A5  0ABC               	incf	??_app_flow_rt_balance_money_cal+7,f
 32281  22A6  0839               	movf	??_app_flow_rt_balance_money_cal+4,w
 32282  22A7  07B5               	addwf	??_app_flow_rt_balance_money_cal,f
 32283  22A8  083A               	movf	??_app_flow_rt_balance_money_cal+5,w
 32284  22A9  3DB6               	addwfc	??_app_flow_rt_balance_money_cal+1,f
 32285  22AA  083B               	movf	??_app_flow_rt_balance_money_cal+6,w
 32286  22AB  3DB7               	addwfc	??_app_flow_rt_balance_money_cal+2,f
 32287  22AC  083C               	movf	??_app_flow_rt_balance_money_cal+7,w
 32288  22AD  3DB8               	addwfc	??_app_flow_rt_balance_money_cal+3,f
 32289  22AE  0838               	movf	??_app_flow_rt_balance_money_cal+3,w
 32290  22AF  0021               	movlb	1	; select bank1
 32291  22B0  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 32292  22B1  0020               	movlb	0	; select bank0
 32293  22B2  0837               	movf	??_app_flow_rt_balance_money_cal+2,w
 32294  22B3  0021               	movlb	1	; select bank1
 32295  22B4  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 32296  22B5  0020               	movlb	0	; select bank0
 32297  22B6  0836               	movf	??_app_flow_rt_balance_money_cal+1,w
 32298  22B7  0021               	movlb	1	; select bank1
 32299  22B8  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 32300  22B9  0020               	movlb	0	; select bank0
 32301  22BA  0835               	movf	??_app_flow_rt_balance_money_cal,w
 32302  22BB  0021               	movlb	1	; select bank1
 32303  22BC  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 32304  22BD  0008               	return
 32305  22BE                     __end_of_app_flow_rt_balance_money_cal:	
 32306                           
 32307                           	psect	text130
 32308  3FB2                     __ptext130:	
 32309 ;; *************** function _app_flow_money_warning *****************
 32310 ;; Defined at:
 32311 ;;		line 191 in file "src/app/flow.c"
 32312 ;; Parameters:    Size  Location     Type
 32313 ;;		None
 32314 ;; Auto vars:     Size  Location     Type
 32315 ;;		None
 32316 ;; Return value:  Size  Location     Type
 32317 ;;                  1    wreg      void 
 32318 ;; Registers used:
 32319 ;;		wreg
 32320 ;; Tracked objects:
 32321 ;;		On entry : 0/0
 32322 ;;		On exit  : 0/0
 32323 ;;		Unchanged: 0/0
 32324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32327 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32328 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32329 ;;Total ram usage:        1 bytes
 32330 ;; Hardware stack levels used:    1
 32331 ;; Hardware stack levels required when called:    2
 32332 ;; This function calls:
 32333 ;;		Nothing
 32334 ;; This function is called by:
 32335 ;;		_flow_sampling_process
 32336 ;; This function uses a non-reentrant model
 32337 ;;
 32338                           
 32339                           
 32340                           ;psect for function _app_flow_money_warning
 32341  3FB2                     _app_flow_money_warning:	
 32342                           
 32343                           ;flow.c: 192: __q31=(int32_t)(mainSystemData.balanceWarning);
 32344                           
 32345                           ;incstack = 0
 32346                           ; Regs used in _app_flow_money_warning: [wreg]
 32347  3FB2  0024               	movlb	4	; select bank4
 32348  3FB3  0834               	movf	(_mainSystemData^(0+512)+20),w
 32349  3FB4  0021               	movlb	1	; select bank1
 32350  3FB5  00AC               	movwf	___q31^(0+128)
 32351  3FB6  0024               	movlb	4	; select bank4
 32352  3FB7  0835               	movf	((_mainSystemData+1)^(0+512)+20),w
 32353  3FB8  0021               	movlb	1	; select bank1
 32354  3FB9  00AD               	movwf	(___q31+1)^(0+128)
 32355  3FBA  0D89               	rlf	9,f
 32356  3FBB  3B89               	subwfb	9,f
 32357  3FBC  0989               	comf	9,f
 32358  3FBD  00AE               	movwf	(___q31+2)^(0+128)
 32359  3FBE  00AF               	movwf	(___q31+3)^(0+128)
 32360                           
 32361                           ;flow.c: 193: if (rtBalanceMoney < __q31) {
 32362  3FBF  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32363  3FC0  3A80               	xorlw	128
 32364  3FC1  00F3               	movwf	??_app_flow_money_warning
 32365  3FC2  082F               	movf	(___q31+3)^(0+128),w
 32366  3FC3  3A80               	xorlw	128
 32367  3FC4  0273               	subwf	??_app_flow_money_warning,w
 32368  3FC5  1D03               	skipz
 32369  3FC6  2FD1               	goto	u14053
 32370  3FC7  082E               	movf	(___q31+2)^(0+128),w
 32371  3FC8  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32372  3FC9  1D03               	skipz
 32373  3FCA  2FD1               	goto	u14053
 32374  3FCB  082D               	movf	(___q31+1)^(0+128),w
 32375  3FCC  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32376  3FCD  1D03               	skipz
 32377  3FCE  2FD1               	goto	u14053
 32378  3FCF  082C               	movf	___q31^(0+128),w
 32379  3FD0  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32380  3FD1                     u14053:	
 32381  3FD1  1803               	skipnc
 32382  3FD2  2FD6               	goto	l1065
 32383                           
 32384                           ;flow.c: 194: warningStatus.bits.moneyLowWarning = 1;
 32385  3FD3  0022               	movlb	2	; select bank2
 32386  3FD4  1638               	bsf	_warningStatus^(0+256),4
 32387                           
 32388                           ;flow.c: 195: } else {
 32389  3FD5  0008               	return
 32390  3FD6                     l1065:	
 32391                           
 32392                           ;flow.c: 196: warningStatus.bits.moneyLowWarning = 0;
 32393  3FD6  0022               	movlb	2	; select bank2
 32394  3FD7  1238               	bcf	_warningStatus^(0+256),4
 32395  3FD8  0008               	return
 32396  3FD9                     __end_of_app_flow_money_warning:	
 32397                           
 32398                           	psect	text131
 32399  30E6                     __ptext131:	
 32400 ;; *************** function _app_flow_money_off *****************
 32401 ;; Defined at:
 32402 ;;		line 200 in file "src/app/flow.c"
 32403 ;; Parameters:    Size  Location     Type
 32404 ;;		None
 32405 ;; Auto vars:     Size  Location     Type
 32406 ;;		None
 32407 ;; Return value:  Size  Location     Type
 32408 ;;                  1    wreg      void 
 32409 ;; Registers used:
 32410 ;;		wreg, status,2, status,0, pclath, cstack
 32411 ;; Tracked objects:
 32412 ;;		On entry : 0/0
 32413 ;;		On exit  : 0/0
 32414 ;;		Unchanged: 0/0
 32415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32417 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32419 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32420 ;;Total ram usage:        1 bytes
 32421 ;; Hardware stack levels used:    1
 32422 ;; Hardware stack levels required when called:    4
 32423 ;; This function calls:
 32424 ;;		_in_app_vavle_off
 32425 ;; This function is called by:
 32426 ;;		_flow_sampling_process
 32427 ;; This function uses a non-reentrant model
 32428 ;;
 32429                           
 32430                           
 32431                           ;psect for function _app_flow_money_off
 32432  30E6                     _app_flow_money_off:	
 32433                           
 32434                           ;flow.c: 201: __q31=(int32_t)(mainSystemData.balanceOff);
 32435                           
 32436                           ;incstack = 0
 32437                           ; Regs used in _app_flow_money_off: [wreg+status,2+status,0+pclath+cstack]
 32438  30E6  0024               	movlb	4	; select bank4
 32439  30E7  0836               	movf	(_mainSystemData^(0+512)+22),w
 32440  30E8  0021               	movlb	1	; select bank1
 32441  30E9  00AC               	movwf	___q31^(0+128)
 32442  30EA  0024               	movlb	4	; select bank4
 32443  30EB  0837               	movf	((_mainSystemData+1)^(0+512)+22),w
 32444  30EC  0021               	movlb	1	; select bank1
 32445  30ED  00AD               	movwf	(___q31+1)^(0+128)
 32446  30EE  0D89               	rlf	9,f
 32447  30EF  3B89               	subwfb	9,f
 32448  30F0  0989               	comf	9,f
 32449  30F1  00AE               	movwf	(___q31+2)^(0+128)
 32450  30F2  00AF               	movwf	(___q31+3)^(0+128)
 32451                           
 32452                           ;flow.c: 202: if (rtBalanceMoney < __q31) {
 32453  30F3  082B               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32454  30F4  3A80               	xorlw	128
 32455  30F5  00F6               	movwf	??_app_flow_money_off
 32456  30F6  082F               	movf	(___q31+3)^(0+128),w
 32457  30F7  3A80               	xorlw	128
 32458  30F8  0276               	subwf	??_app_flow_money_off,w
 32459  30F9  1D03               	skipz
 32460  30FA  2905               	goto	u14063
 32461  30FB  082E               	movf	(___q31+2)^(0+128),w
 32462  30FC  022A               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32463  30FD  1D03               	skipz
 32464  30FE  2905               	goto	u14063
 32465  30FF  082D               	movf	(___q31+1)^(0+128),w
 32466  3100  0229               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32467  3101  1D03               	skipz
 32468  3102  2905               	goto	u14063
 32469  3103  082C               	movf	___q31^(0+128),w
 32470  3104  0228               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32471  3105                     u14063:	
 32472  3105  1803               	skipnc
 32473  3106  290F               	goto	l1070
 32474                           
 32475                           ;flow.c: 203: warningStatus.bits.moneyLowWarning = 1;
 32476  3107  0022               	movlb	2	; select bank2
 32477  3108  1638               	bsf	_warningStatus^(0+256),4
 32478                           
 32479                           ;flow.c: 205: deviceStatus.bits.noEnough=1;
 32480  3109  0021               	movlb	1	; select bank1
 32481  310A  14C0               	bsf	_deviceStatus^(0+128),1
 32482                           
 32483                           ;flow.c: 206: in_app_vavle_off(OFF_REASON_LA);
 32484  310B  3001               	movlw	1
 32485  310C  31B0  20BB         	fcall	_in_app_vavle_off
 32486                           
 32487                           ;flow.c: 207: } else {
 32488  310E  0008               	return
 32489  310F                     l1070:	
 32490                           
 32491                           ;flow.c: 208: deviceStatus.bits.noEnough=0;
 32492  310F  10C0               	bcf	_deviceStatus^(0+128),1
 32493  3110  0008               	return
 32494  3111                     __end_of_app_flow_money_off:	
 32495                           
 32496                           	psect	text132
 32497  30BB                     __ptext132:	
 32498 ;; *************** function _in_app_vavle_off *****************
 32499 ;; Defined at:
 32500 ;;		line 25 in file "src/app/flow.c"
 32501 ;; Parameters:    Size  Location     Type
 32502 ;;  op              1    wreg     enum E5863
 32503 ;; Auto vars:     Size  Location     Type
 32504 ;;  op              1    5[COMMON] enum E5863
 32505 ;; Return value:  Size  Location     Type
 32506 ;;                  1    wreg      void 
 32507 ;; Registers used:
 32508 ;;		wreg, status,2, status,0, pclath, cstack
 32509 ;; Tracked objects:
 32510 ;;		On entry : 0/0
 32511 ;;		On exit  : 0/0
 32512 ;;		Unchanged: 0/0
 32513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32515 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32516 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32517 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32518 ;;Total ram usage:        2 bytes
 32519 ;; Hardware stack levels used:    1
 32520 ;; Hardware stack levels required when called:    3
 32521 ;; This function calls:
 32522 ;;		_valve_off
 32523 ;; This function is called by:
 32524 ;;		_app_flow_money_off
 32525 ;;		_rfid_comm_process
 32526 ;; This function uses a non-reentrant model
 32527 ;;
 32528                           
 32529                           
 32530                           ;psect for function _in_app_vavle_off
 32531  30BB                     _in_app_vavle_off:	
 32532                           
 32533                           ;incstack = 0
 32534                           ; Regs used in _in_app_vavle_off: [wreg+status,2+status,0+pclath+cstack]
 32535                           ;in_app_vavle_off@op stored from wreg
 32536  30BB  00F5               	movwf	in_app_vavle_off@op
 32537                           
 32538                           ;flow.c: 28: if(cardReadingFlag)return ;
 32539  30BC  0022               	movlb	2	; select bank2
 32540  30BD  083B               	movf	_cardReadingFlag^(0+256),w
 32541  30BE  1D03               	btfss	3,2
 32542  30BF  0008               	return
 32543                           
 32544                           ;flow.c: 29: if(valveStatus==VALVE_CLOSED || valveStatus==VALVE_OPENING || valveStatus==
      +                          VALVE_CLOSEING)return;
 32545  30C0  037A               	decf	_valveStatus,w
 32546  30C1  1903               	btfsc	3,2
 32547  30C2  0008               	return
 32548  30C3  3003               	movlw	3
 32549  30C4  067A               	xorwf	_valveStatus,w
 32550  30C5  1903               	btfsc	3,2
 32551  30C6  0008               	return
 32552  30C7  3004               	movlw	4
 32553  30C8  067A               	xorwf	_valveStatus,w
 32554  30C9  1903               	btfsc	3,2
 32555  30CA  0008               	return
 32556                           
 32557                           ;flow.c: 32: if(deviceStatus.bits.acPowerDown)return;
 32558  30CB  0021               	movlb	1	; select bank1
 32559  30CC  19C0               	btfsc	_deviceStatus^(0+128),3
 32560  30CD  0008               	return
 32561                           
 32562                           ;flow.c: 34: opReason=op;
 32563  30CE  0875               	movf	in_app_vavle_off@op,w
 32564  30CF  00F4               	movwf	??_in_app_vavle_off
 32565  30D0  0874               	movf	??_in_app_vavle_off,w
 32566  30D1  00C4               	movwf	_opReason^(0+128)	;volatile
 32567                           
 32568                           ;flow.c: 35: valve_off();
 32569  30D2  31BD  253C  31B0   	fcall	_valve_off
 32570                           
 32571                           ;flow.c: 37: if(valveStatus==VALVE_CLOSED || valveStatus==VALVE_CLOSEING)return;
 32572  30D5  037A               	decf	_valveStatus,w
 32573  30D6  1903               	btfsc	3,2
 32574  30D7  0008               	return
 32575  30D8  3004               	movlw	4
 32576  30D9  067A               	xorwf	_valveStatus,w
 32577  30DA  1903               	btfsc	3,2
 32578  30DB  0008               	return
 32579                           
 32580                           ;flow.c: 38: if(deviceStatus.bits.acPowerDown)return;
 32581  30DC  0021               	movlb	1	; select bank1
 32582  30DD  19C0               	btfsc	_deviceStatus^(0+128),3
 32583  30DE  0008               	return
 32584                           
 32585                           ;flow.c: 39: opReason=op;
 32586  30DF  0875               	movf	in_app_vavle_off@op,w
 32587  30E0  00F4               	movwf	??_in_app_vavle_off
 32588  30E1  0874               	movf	??_in_app_vavle_off,w
 32589  30E2  00C4               	movwf	_opReason^(0+128)	;volatile
 32590                           
 32591                           ;flow.c: 40: valve_off();
 32592  30E3  31BD  253C         	fcall	_valve_off
 32593  30E5  0008               	return
 32594  30E6                     __end_of_in_app_vavle_off:	
 32595                           
 32596                           	psect	text133
 32597  3D3C                     __ptext133:	
 32598 ;; *************** function _valve_off *****************
 32599 ;; Defined at:
 32600 ;;		line 21 in file "src/driver/other-gpio.c"
 32601 ;; Parameters:    Size  Location     Type
 32602 ;;		None
 32603 ;; Auto vars:     Size  Location     Type
 32604 ;;		None
 32605 ;; Return value:  Size  Location     Type
 32606 ;;                  1    wreg      void 
 32607 ;; Registers used:
 32608 ;;		wreg, status,2, status,0
 32609 ;; Tracked objects:
 32610 ;;		On entry : 0/0
 32611 ;;		On exit  : 0/0
 32612 ;;		Unchanged: 0/0
 32613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32616 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32617 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32618 ;;Total ram usage:        1 bytes
 32619 ;; Hardware stack levels used:    1
 32620 ;; Hardware stack levels required when called:    2
 32621 ;; This function calls:
 32622 ;;		Nothing
 32623 ;; This function is called by:
 32624 ;;		_in_app_vavle_off
 32625 ;; This function uses a non-reentrant model
 32626 ;;
 32627                           
 32628                           
 32629                           ;psect for function _valve_off
 32630  3D3C                     _valve_off:	
 32631  3D3C                     l1947:	
 32632                           ;other-gpio.c: 27: while((Event & (0x01<<5))==0);
 32633                           
 32634                           ;incstack = 0
 32635                           ; Regs used in _valve_off: [wreg+status,2+status,0]
 32636                           
 32637  3D3C  0021               	movlb	1	; select bank1
 32638  3D3D  1EC7               	btfss	_Event^(0+128),5
 32639  3D3E  2D3C               	goto	l1947
 32640                           
 32641                           ;other-gpio.c: 28: Event &= ~(0x01<<5);
 32642  3D3F  30DF               	movlw	223
 32643  3D40  00F3               	movwf	??_valve_off
 32644  3D41  0873               	movf	??_valve_off,w
 32645  3D42  05C7               	andwf	_Event^(0+128),f
 32646                           
 32647                           ;other-gpio.c: 29: do { LATBbits.LATB0 = 1; } while(0);
 32648  3D43  0022               	movlb	2	; select bank2
 32649  3D44  140D               	bsf	13,0	;volatile
 32650  3D45                     l1952:	
 32651                           ;other-gpio.c: 31: while((Event & (0x01<<5))==0);
 32652                           
 32653  3D45  0021               	movlb	1	; select bank1
 32654  3D46  1EC7               	btfss	_Event^(0+128),5
 32655  3D47  2D45               	goto	l1952
 32656                           
 32657                           ;other-gpio.c: 32: Event &= ~(0x01<<5);
 32658  3D48  30DF               	movlw	223
 32659  3D49  00F3               	movwf	??_valve_off
 32660  3D4A  0873               	movf	??_valve_off,w
 32661  3D4B  05C7               	andwf	_Event^(0+128),f
 32662                           
 32663                           ;other-gpio.c: 35: do { LATDbits.LATD7 = 1; } while(0);
 32664  3D4C  0022               	movlb	2	; select bank2
 32665  3D4D  178F               	bsf	15,7	;volatile
 32666                           
 32667                           ;other-gpio.c: 36: valveStatus=VALVE_CLOSEING;
 32668  3D4E  3004               	movlw	4
 32669  3D4F  00F3               	movwf	??_valve_off
 32670  3D50  0873               	movf	??_valve_off,w
 32671  3D51  00FA               	movwf	_valveStatus
 32672                           
 32673                           ;other-gpio.c: 37: valveTimer=0;
 32674  3D52  01B6               	clrf	_valveTimer^(0+256)
 32675  3D53  0008               	return
 32676  3D54                     __end_of_valve_off:	
 32677                           
 32678                           	psect	text134
 32679  2357                     __ptext134:	
 32680 ;; *************** function _app_flow_lookup *****************
 32681 ;; Defined at:
 32682 ;;		line 71 in file "src/app/flow.c"
 32683 ;; Parameters:    Size  Location     Type
 32684 ;;  adcValue        2    3[COMMON] unsigned int 
 32685 ;; Auto vars:     Size  Location     Type
 32686 ;;  i               1    5[COMMON] unsigned char 
 32687 ;; Return value:  Size  Location     Type
 32688 ;;                  1    wreg      unsigned char 
 32689 ;; Registers used:
 32690 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 32691 ;; Tracked objects:
 32692 ;;		On entry : 0/0
 32693 ;;		On exit  : 0/0
 32694 ;;		Unchanged: 0/0
 32695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32696 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32697 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32698 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0
 32699 ;;      Totals:         3      14       0       0       0       0       0       0       0       0       0       0       
      +0
 32700 ;;Total ram usage:       17 bytes
 32701 ;; Hardware stack levels used:    1
 32702 ;; Hardware stack levels required when called:    2
 32703 ;; This function calls:
 32704 ;;		Nothing
 32705 ;; This function is called by:
 32706 ;;		_flow_sampling_process
 32707 ;; This function uses a non-reentrant model
 32708 ;;
 32709                           
 32710                           
 32711                           ;psect for function _app_flow_lookup
 32712  2357                     _app_flow_lookup:	
 32713                           
 32714                           ;flow.c: 72: uint8_t i;
 32715                           ;flow.c: 73: if (adcValue < Main_flowCalibrationTable.flowCalibrationArr[0].adcValue)ret
      +                          urn 0;
 32716                           
 32717                           ;incstack = 0
 32718                           ; Regs used in _app_flow_lookup: [wreg+fsr1l+fsr1h+status,2+status,0]
 32719  2357  3074               	movlw	116
 32720  2358  0086               	movwf	6
 32721  2359  3023               	movlw	35
 32722  235A  0087               	movwf	7
 32723  235B  3F40               	moviw [0]fsr1
 32724  235C  0020               	movlb	0	; select bank0
 32725  235D  00A0               	movwf	??_app_flow_lookup
 32726  235E  3F41               	moviw [1]fsr1
 32727  235F  00A1               	movwf	??_app_flow_lookup+1
 32728  2360  0821               	movf	??_app_flow_lookup+1,w
 32729  2361  0274               	subwf	app_flow_lookup@adcValue+1,w
 32730  2362  1D03               	skipz
 32731  2363  2B66               	goto	u13885
 32732  2364  0820               	movf	??_app_flow_lookup,w
 32733  2365  0273               	subwf	app_flow_lookup@adcValue,w
 32734  2366                     u13885:	
 32735  2366  1803               	skipnc
 32736  2367  2B6A               	goto	l15201
 32737  2368  3000               	movlw	0
 32738  2369  0008               	return
 32739  236A                     l15201:	
 32740                           
 32741                           ;flow.c: 74: for (i = 0; i < 30-1; i++) {
 32742  236A  01F5               	clrf	app_flow_lookup@i
 32743  236B  301D               	movlw	29
 32744  236C  0275               	subwf	app_flow_lookup@i,w
 32745  236D  1803               	btfsc	3,0
 32746  236E  2BEF               	goto	l15221
 32747  236F                     l15207:	
 32748                           
 32749                           ;flow.c: 75: if (adcValue >= Main_flowCalibrationTable.flowCalibrationArr[i].adcValue &&
 32750                           ;flow.c: 76: adcValue < Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue)bre
      +                          ak;
 32751  236F  0875               	movf	app_flow_lookup@i,w
 32752  2370  00A0               	movwf	??_app_flow_lookup
 32753  2371  01A1               	clrf	??_app_flow_lookup+1
 32754  2372  35A0               	lslf	??_app_flow_lookup,f
 32755  2373  0DA1               	rlf	??_app_flow_lookup+1,f
 32756  2374  35A0               	lslf	??_app_flow_lookup,f
 32757  2375  0DA1               	rlf	??_app_flow_lookup+1,f
 32758  2376  3074               	movlw	116
 32759  2377  00A2               	movwf	??_app_flow_lookup+2
 32760  2378  3023               	movlw	35
 32761  2379  00A3               	movwf	??_app_flow_lookup+3
 32762  237A  0820               	movf	??_app_flow_lookup,w
 32763  237B  0722               	addwf	??_app_flow_lookup+2,w
 32764  237C  0086               	movwf	6
 32765  237D  0821               	movf	??_app_flow_lookup+1,w
 32766  237E  3D23               	addwfc	??_app_flow_lookup+3,w
 32767  237F  0087               	movwf	7
 32768  2380  3F40               	moviw [0]fsr1
 32769  2381  00A4               	movwf	??_app_flow_lookup+4
 32770  2382  3F41               	moviw [1]fsr1
 32771  2383  00A5               	movwf	??_app_flow_lookup+5
 32772  2384  0825               	movf	??_app_flow_lookup+5,w
 32773  2385  0274               	subwf	app_flow_lookup@adcValue+1,w
 32774  2386  1D03               	skipz
 32775  2387  2B8A               	goto	u13905
 32776  2388  0824               	movf	??_app_flow_lookup+4,w
 32777  2389  0273               	subwf	app_flow_lookup@adcValue,w
 32778  238A                     u13905:	
 32779  238A  1C03               	skipc
 32780  238B  2BAF               	goto	l15213
 32781  238C  0875               	movf	app_flow_lookup@i,w
 32782  238D  00A0               	movwf	??_app_flow_lookup
 32783  238E  01A1               	clrf	??_app_flow_lookup+1
 32784  238F  35A0               	lslf	??_app_flow_lookup,f
 32785  2390  0DA1               	rlf	??_app_flow_lookup+1,f
 32786  2391  35A0               	lslf	??_app_flow_lookup,f
 32787  2392  0DA1               	rlf	??_app_flow_lookup+1,f
 32788  2393  0820               	movf	??_app_flow_lookup,w
 32789  2394  3E04               	addlw	4
 32790  2395  00A2               	movwf	??_app_flow_lookup+2
 32791  2396  3000               	movlw	0
 32792  2397  3D21               	addwfc	??_app_flow_lookup+1,w
 32793  2398  00A3               	movwf	??_app_flow_lookup+3
 32794  2399  3074               	movlw	116
 32795  239A  00A4               	movwf	??_app_flow_lookup+4
 32796  239B  3023               	movlw	35
 32797  239C  00A5               	movwf	??_app_flow_lookup+5
 32798  239D  0822               	movf	??_app_flow_lookup+2,w
 32799  239E  0724               	addwf	??_app_flow_lookup+4,w
 32800  239F  0086               	movwf	6
 32801  23A0  0823               	movf	??_app_flow_lookup+3,w
 32802  23A1  3D25               	addwfc	??_app_flow_lookup+5,w
 32803  23A2  0087               	movwf	7
 32804  23A3  3F40               	moviw [0]fsr1
 32805  23A4  00A6               	movwf	??_app_flow_lookup+6
 32806  23A5  3F41               	moviw [1]fsr1
 32807  23A6  00A7               	movwf	??_app_flow_lookup+7
 32808  23A7  0827               	movf	??_app_flow_lookup+7,w
 32809  23A8  0274               	subwf	app_flow_lookup@adcValue+1,w
 32810  23A9  1D03               	skipz
 32811  23AA  2BAD               	goto	u13915
 32812  23AB  0826               	movf	??_app_flow_lookup+6,w
 32813  23AC  0273               	subwf	app_flow_lookup@adcValue,w
 32814  23AD                     u13915:	
 32815  23AD  1C03               	btfss	3,0
 32816  23AE  2BEF               	goto	l15221
 32817  23AF                     l15213:	
 32818                           
 32819                           ;flow.c: 77: if(Main_flowCalibrationTable.flowCalibrationArr[i].adcValue >=
 32820                           ;flow.c: 78: Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue){
 32821  23AF  0875               	movf	app_flow_lookup@i,w
 32822  23B0  00A0               	movwf	??_app_flow_lookup
 32823  23B1  01A1               	clrf	??_app_flow_lookup+1
 32824  23B2  35A0               	lslf	??_app_flow_lookup,f
 32825  23B3  0DA1               	rlf	??_app_flow_lookup+1,f
 32826  23B4  35A0               	lslf	??_app_flow_lookup,f
 32827  23B5  0DA1               	rlf	??_app_flow_lookup+1,f
 32828  23B6  0820               	movf	??_app_flow_lookup,w
 32829  23B7  3E04               	addlw	4
 32830  23B8  00A2               	movwf	??_app_flow_lookup+2
 32831  23B9  3000               	movlw	0
 32832  23BA  3D21               	addwfc	??_app_flow_lookup+1,w
 32833  23BB  00A3               	movwf	??_app_flow_lookup+3
 32834  23BC  3074               	movlw	116
 32835  23BD  00A4               	movwf	??_app_flow_lookup+4
 32836  23BE  3023               	movlw	35
 32837  23BF  00A5               	movwf	??_app_flow_lookup+5
 32838  23C0  0822               	movf	??_app_flow_lookup+2,w
 32839  23C1  0724               	addwf	??_app_flow_lookup+4,w
 32840  23C2  0086               	movwf	6
 32841  23C3  0823               	movf	??_app_flow_lookup+3,w
 32842  23C4  3D25               	addwfc	??_app_flow_lookup+5,w
 32843  23C5  0087               	movwf	7
 32844  23C6  3F40               	moviw [0]fsr1
 32845  23C7  00A6               	movwf	??_app_flow_lookup+6
 32846  23C8  3F41               	moviw [1]fsr1
 32847  23C9  00A7               	movwf	??_app_flow_lookup+7
 32848  23CA  0875               	movf	app_flow_lookup@i,w
 32849  23CB  00A8               	movwf	??_app_flow_lookup+8
 32850  23CC  01A9               	clrf	??_app_flow_lookup+9
 32851  23CD  35A8               	lslf	??_app_flow_lookup+8,f
 32852  23CE  0DA9               	rlf	??_app_flow_lookup+9,f
 32853  23CF  35A8               	lslf	??_app_flow_lookup+8,f
 32854  23D0  0DA9               	rlf	??_app_flow_lookup+9,f
 32855  23D1  3074               	movlw	116
 32856  23D2  00AA               	movwf	??_app_flow_lookup+10
 32857  23D3  3023               	movlw	35
 32858  23D4  00AB               	movwf	??_app_flow_lookup+11
 32859  23D5  0828               	movf	??_app_flow_lookup+8,w
 32860  23D6  072A               	addwf	??_app_flow_lookup+10,w
 32861  23D7  0086               	movwf	6
 32862  23D8  0829               	movf	??_app_flow_lookup+9,w
 32863  23D9  3D2B               	addwfc	??_app_flow_lookup+11,w
 32864  23DA  0087               	movwf	7
 32865  23DB  3F40               	moviw [0]fsr1
 32866  23DC  00AC               	movwf	??_app_flow_lookup+12
 32867  23DD  3F41               	moviw [1]fsr1
 32868  23DE  00AD               	movwf	??_app_flow_lookup+13
 32869  23DF  0827               	movf	??_app_flow_lookup+7,w
 32870  23E0  022D               	subwf	??_app_flow_lookup+13,w
 32871  23E1  1D03               	skipz
 32872  23E2  2BE5               	goto	u13925
 32873  23E3  0826               	movf	??_app_flow_lookup+6,w
 32874  23E4  022C               	subwf	??_app_flow_lookup+12,w
 32875  23E5                     u13925:	
 32876  23E5  1803               	btfsc	3,0
 32877  23E6  2BEF               	goto	l15221
 32878                           
 32879                           ;flow.c: 80: break;
 32880  23E7  3001               	movlw	1
 32881  23E8  00A0               	movwf	??_app_flow_lookup
 32882  23E9  0820               	movf	??_app_flow_lookup,w
 32883  23EA  07F5               	addwf	app_flow_lookup@i,f
 32884  23EB  301D               	movlw	29
 32885  23EC  0275               	subwf	app_flow_lookup@i,w
 32886  23ED  1C03               	skipc
 32887  23EE  2B6F               	goto	l15207
 32888  23EF                     l15221:	
 32889                           
 32890                           ;flow.c: 81: }
 32891                           ;flow.c: 82: }
 32892                           ;flow.c: 83: return i;
 32893  23EF  0875               	movf	app_flow_lookup@i,w
 32894  23F0  0008               	return
 32895  23F1                     __end_of_app_flow_lookup:	
 32896                           
 32897                           	psect	text135
 32898  10CA                     __ptext135:	
 32899 ;; *************** function _app_flow_get_adcAverageValue *****************
 32900 ;; Defined at:
 32901 ;;		line 212 in file "src/app/flow.c"
 32902 ;; Parameters:    Size  Location     Type
 32903 ;;		None
 32904 ;; Auto vars:     Size  Location     Type
 32905 ;;  ret             4   38[BANK0 ] unsigned long 
 32906 ;;  max             2   36[BANK0 ] unsigned int 
 32907 ;;  min             2   33[BANK0 ] unsigned int 
 32908 ;;  i               1   42[BANK0 ] unsigned char 
 32909 ;;  j               1   35[BANK0 ] unsigned char 
 32910 ;;  minIndex        1   32[BANK0 ] unsigned char 
 32911 ;;  maxIndex        1   31[BANK0 ] unsigned char 
 32912 ;; Return value:  Size  Location     Type
 32913 ;;                  2   21[BANK0 ] unsigned int 
 32914 ;; Registers used:
 32915 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32916 ;; Tracked objects:
 32917 ;;		On entry : 0/0
 32918 ;;		On exit  : 0/0
 32919 ;;		Unchanged: 0/0
 32920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 32922 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0
 32923 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32924 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 32925 ;;Total ram usage:       22 bytes
 32926 ;; Hardware stack levels used:    1
 32927 ;; Hardware stack levels required when called:    3
 32928 ;; This function calls:
 32929 ;;		___lldiv
 32930 ;; This function is called by:
 32931 ;;		_flow_sampling_process
 32932 ;; This function uses a non-reentrant model
 32933 ;;
 32934                           
 32935                           
 32936                           ;psect for function _app_flow_get_adcAverageValue
 32937  10CA                     _app_flow_get_adcAverageValue:	
 32938                           
 32939                           ;flow.c: 229: uint8_t maxIndex,minIndex;
 32940                           ;flow.c: 230: uint8_t i,j;
 32941                           ;flow.c: 231: uint32_t ret=0;
 32942                           
 32943                           ;incstack = 0
 32944                           ; Regs used in _app_flow_get_adcAverageValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath
      +                          +cstack]
 32945  10CA  3000               	movlw	0
 32946  10CB  0020               	movlb	0	; select bank0
 32947  10CC  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 32948  10CD  3000               	movlw	0
 32949  10CE  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 32950  10CF  3000               	movlw	0
 32951  10D0  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 32952  10D1  3000               	movlw	0
 32953  10D2  00C6               	movwf	app_flow_get_adcAverageValue@ret
 32954                           
 32955                           ;flow.c: 232: uint16_t max=0,min;
 32956  10D3  01C4               	clrf	app_flow_get_adcAverageValue@max
 32957  10D4  01C5               	clrf	app_flow_get_adcAverageValue@max+1
 32958                           
 32959                           ;flow.c: 233: for(j=0;j<8;j++){
 32960  10D5  01C3               	clrf	app_flow_get_adcAverageValue@j
 32961  10D6  3008               	movlw	8
 32962  10D7  0243               	subwf	app_flow_get_adcAverageValue@j,w
 32963  10D8  1803               	btfsc	3,0
 32964  10D9  29CB               	goto	l15375
 32965  10DA                     l15335:	
 32966                           
 32967                           ;flow.c: 234: ret=0;
 32968  10DA  3000               	movlw	0
 32969  10DB  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 32970  10DC  3000               	movlw	0
 32971  10DD  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 32972  10DE  3000               	movlw	0
 32973  10DF  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 32974  10E0  3000               	movlw	0
 32975  10E1  00C6               	movwf	app_flow_get_adcAverageValue@ret
 32976                           
 32977                           ;flow.c: 235: max=0;
 32978  10E2  01C4               	clrf	app_flow_get_adcAverageValue@max
 32979  10E3  01C5               	clrf	app_flow_get_adcAverageValue@max+1
 32980                           
 32981                           ;flow.c: 236: min=0x8000;
 32982  10E4  3000               	movlw	0
 32983  10E5  00C1               	movwf	app_flow_get_adcAverageValue@min
 32984  10E6  3080               	movlw	128
 32985  10E7  00C2               	movwf	app_flow_get_adcAverageValue@min+1
 32986                           
 32987                           ;flow.c: 237: maxIndex=0;
 32988  10E8  01BF               	clrf	app_flow_get_adcAverageValue@maxIndex
 32989                           
 32990                           ;flow.c: 238: minIndex=0;
 32991  10E9  01C0               	clrf	app_flow_get_adcAverageValue@minIndex
 32992                           
 32993                           ;flow.c: 239: for(i=0;i<20;i++){
 32994  10EA  01CA               	clrf	app_flow_get_adcAverageValue@i
 32995  10EB  3014               	movlw	20
 32996  10EC  024A               	subwf	app_flow_get_adcAverageValue@i,w
 32997  10ED  1803               	btfsc	3,0
 32998  10EE  2943               	goto	l15363
 32999  10EF                     l15345:	
 33000                           
 33001                           ;flow.c: 240: if(max<adcSamplingBuffer[i]){
 33002  10EF  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33003  10F0  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33004  10F1  0086               	movwf	6
 33005  10F2  3002               	movlw	2	; select bank5/6
 33006  10F3  0087               	movwf	7
 33007  10F4  3F40               	moviw [0]fsr1
 33008  10F5  00B7               	movwf	??_app_flow_get_adcAverageValue
 33009  10F6  3F41               	moviw [1]fsr1
 33010  10F7  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33011  10F8  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33012  10F9  0245               	subwf	app_flow_get_adcAverageValue@max+1,w
 33013  10FA  1D03               	skipz
 33014  10FB  28FE               	goto	u14095
 33015  10FC  0837               	movf	??_app_flow_get_adcAverageValue,w
 33016  10FD  0244               	subwf	app_flow_get_adcAverageValue@max,w
 33017  10FE                     u14095:	
 33018  10FE  1803               	skipnc
 33019  10FF  290D               	goto	l15351
 33020                           
 33021                           ;flow.c: 241: max=adcSamplingBuffer[i];
 33022  1100  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33023  1101  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33024  1102  0086               	movwf	6
 33025  1103  3002               	movlw	2	; select bank5/6
 33026  1104  0087               	movwf	7
 33027  1105  3F40               	moviw [0]fsr1
 33028  1106  00C4               	movwf	app_flow_get_adcAverageValue@max
 33029  1107  3F41               	moviw [1]fsr1
 33030  1108  00C5               	movwf	app_flow_get_adcAverageValue@max+1
 33031                           
 33032                           ;flow.c: 242: maxIndex=i;
 33033  1109  084A               	movf	app_flow_get_adcAverageValue@i,w
 33034  110A  00B7               	movwf	??_app_flow_get_adcAverageValue
 33035  110B  0837               	movf	??_app_flow_get_adcAverageValue,w
 33036  110C  00BF               	movwf	app_flow_get_adcAverageValue@maxIndex
 33037  110D                     l15351:	
 33038                           
 33039                           ;flow.c: 243: }
 33040                           ;flow.c: 244: if(min>adcSamplingBuffer[i]){
 33041  110D  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33042  110E  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33043  110F  0086               	movwf	6
 33044  1110  3002               	movlw	2	; select bank5/6
 33045  1111  0087               	movwf	7
 33046  1112  3F40               	moviw [0]fsr1
 33047  1113  00B7               	movwf	??_app_flow_get_adcAverageValue
 33048  1114  3F41               	moviw [1]fsr1
 33049  1115  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33050  1116  0842               	movf	app_flow_get_adcAverageValue@min+1,w
 33051  1117  0238               	subwf	??_app_flow_get_adcAverageValue+1,w
 33052  1118  1D03               	skipz
 33053  1119  291C               	goto	u14105
 33054  111A  0841               	movf	app_flow_get_adcAverageValue@min,w
 33055  111B  0237               	subwf	??_app_flow_get_adcAverageValue,w
 33056  111C                     u14105:	
 33057  111C  1803               	skipnc
 33058  111D  292B               	goto	l15357
 33059                           
 33060                           ;flow.c: 245: min=adcSamplingBuffer[i];
 33061  111E  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33062  111F  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33063  1120  0086               	movwf	6
 33064  1121  3002               	movlw	2	; select bank5/6
 33065  1122  0087               	movwf	7
 33066  1123  3F40               	moviw [0]fsr1
 33067  1124  00C1               	movwf	app_flow_get_adcAverageValue@min
 33068  1125  3F41               	moviw [1]fsr1
 33069  1126  00C2               	movwf	app_flow_get_adcAverageValue@min+1
 33070                           
 33071                           ;flow.c: 246: minIndex=i;
 33072  1127  084A               	movf	app_flow_get_adcAverageValue@i,w
 33073  1128  00B7               	movwf	??_app_flow_get_adcAverageValue
 33074  1129  0837               	movf	??_app_flow_get_adcAverageValue,w
 33075  112A  00C0               	movwf	app_flow_get_adcAverageValue@minIndex
 33076  112B                     l15357:	
 33077                           
 33078                           ;flow.c: 247: }
 33079                           ;flow.c: 248: ret+=adcSamplingBuffer[i];
 33080  112B  354A               	lslf	app_flow_get_adcAverageValue@i,w
 33081  112C  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33082  112D  0086               	movwf	6
 33083  112E  3002               	movlw	2	; select bank5/6
 33084  112F  0087               	movwf	7
 33085  1130  3F40               	moviw [0]fsr1
 33086  1131  00B7               	movwf	??_app_flow_get_adcAverageValue
 33087  1132  3F41               	moviw [1]fsr1
 33088  1133  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33089  1134  0837               	movf	??_app_flow_get_adcAverageValue,w
 33090  1135  07C6               	addwf	app_flow_get_adcAverageValue@ret,f
 33091  1136  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33092  1137  3DC7               	addwfc	app_flow_get_adcAverageValue@ret+1,f
 33093  1138  3000               	movlw	0
 33094  1139  3DC8               	addwfc	app_flow_get_adcAverageValue@ret+2,f
 33095  113A  3DC9               	addwfc	app_flow_get_adcAverageValue@ret+3,f
 33096  113B  3001               	movlw	1
 33097  113C  00B7               	movwf	??_app_flow_get_adcAverageValue
 33098  113D  0837               	movf	??_app_flow_get_adcAverageValue,w
 33099  113E  07CA               	addwf	app_flow_get_adcAverageValue@i,f
 33100  113F  3014               	movlw	20
 33101  1140  024A               	subwf	app_flow_get_adcAverageValue@i,w
 33102  1141  1C03               	skipc
 33103  1142  28EF               	goto	l15345
 33104  1143                     l15363:	
 33105                           
 33106                           ;flow.c: 249: }
 33107                           ;flow.c: 250: ret=ret-max;
 33108  1143  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33109  1144  00B7               	movwf	??_app_flow_get_adcAverageValue
 33110  1145  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33111  1146  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33112  1147  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33113  1148  00B9               	movwf	??_app_flow_get_adcAverageValue+2
 33114  1149  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33115  114A  00BA               	movwf	??_app_flow_get_adcAverageValue+3
 33116  114B  0844               	movf	app_flow_get_adcAverageValue@max,w
 33117  114C  00BB               	movwf	??_app_flow_get_adcAverageValue+4
 33118  114D  0845               	movf	app_flow_get_adcAverageValue@max+1,w
 33119  114E  00BC               	movwf	??_app_flow_get_adcAverageValue+5
 33120  114F  01BD               	clrf	??_app_flow_get_adcAverageValue+6
 33121  1150  01BE               	clrf	??_app_flow_get_adcAverageValue+7
 33122  1151  09BB               	comf	??_app_flow_get_adcAverageValue+4,f
 33123  1152  09BC               	comf	??_app_flow_get_adcAverageValue+5,f
 33124  1153  09BD               	comf	??_app_flow_get_adcAverageValue+6,f
 33125  1154  09BE               	comf	??_app_flow_get_adcAverageValue+7,f
 33126  1155  0ABB               	incf	??_app_flow_get_adcAverageValue+4,f
 33127  1156  1903               	skipnz
 33128  1157  0ABC               	incf	??_app_flow_get_adcAverageValue+5,f
 33129  1158  1903               	skipnz
 33130  1159  0ABD               	incf	??_app_flow_get_adcAverageValue+6,f
 33131  115A  1903               	skipnz
 33132  115B  0ABE               	incf	??_app_flow_get_adcAverageValue+7,f
 33133  115C  083B               	movf	??_app_flow_get_adcAverageValue+4,w
 33134  115D  07B7               	addwf	??_app_flow_get_adcAverageValue,f
 33135  115E  083C               	movf	??_app_flow_get_adcAverageValue+5,w
 33136  115F  3DB8               	addwfc	??_app_flow_get_adcAverageValue+1,f
 33137  1160  083D               	movf	??_app_flow_get_adcAverageValue+6,w
 33138  1161  3DB9               	addwfc	??_app_flow_get_adcAverageValue+2,f
 33139  1162  083E               	movf	??_app_flow_get_adcAverageValue+7,w
 33140  1163  3DBA               	addwfc	??_app_flow_get_adcAverageValue+3,f
 33141  1164  083A               	movf	??_app_flow_get_adcAverageValue+3,w
 33142  1165  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33143  1166  0839               	movf	??_app_flow_get_adcAverageValue+2,w
 33144  1167  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33145  1168  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33146  1169  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33147  116A  0837               	movf	??_app_flow_get_adcAverageValue,w
 33148  116B  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33149                           
 33150                           ;flow.c: 251: ret=ret-min;
 33151  116C  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33152  116D  00B7               	movwf	??_app_flow_get_adcAverageValue
 33153  116E  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33154  116F  00B8               	movwf	??_app_flow_get_adcAverageValue+1
 33155  1170  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33156  1171  00B9               	movwf	??_app_flow_get_adcAverageValue+2
 33157  1172  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33158  1173  00BA               	movwf	??_app_flow_get_adcAverageValue+3
 33159  1174  0841               	movf	app_flow_get_adcAverageValue@min,w
 33160  1175  00BB               	movwf	??_app_flow_get_adcAverageValue+4
 33161  1176  0842               	movf	app_flow_get_adcAverageValue@min+1,w
 33162  1177  00BC               	movwf	??_app_flow_get_adcAverageValue+5
 33163  1178  01BD               	clrf	??_app_flow_get_adcAverageValue+6
 33164  1179  01BE               	clrf	??_app_flow_get_adcAverageValue+7
 33165  117A  09BB               	comf	??_app_flow_get_adcAverageValue+4,f
 33166  117B  09BC               	comf	??_app_flow_get_adcAverageValue+5,f
 33167  117C  09BD               	comf	??_app_flow_get_adcAverageValue+6,f
 33168  117D  09BE               	comf	??_app_flow_get_adcAverageValue+7,f
 33169  117E  0ABB               	incf	??_app_flow_get_adcAverageValue+4,f
 33170  117F  1903               	skipnz
 33171  1180  0ABC               	incf	??_app_flow_get_adcAverageValue+5,f
 33172  1181  1903               	skipnz
 33173  1182  0ABD               	incf	??_app_flow_get_adcAverageValue+6,f
 33174  1183  1903               	skipnz
 33175  1184  0ABE               	incf	??_app_flow_get_adcAverageValue+7,f
 33176  1185  083B               	movf	??_app_flow_get_adcAverageValue+4,w
 33177  1186  07B7               	addwf	??_app_flow_get_adcAverageValue,f
 33178  1187  083C               	movf	??_app_flow_get_adcAverageValue+5,w
 33179  1188  3DB8               	addwfc	??_app_flow_get_adcAverageValue+1,f
 33180  1189  083D               	movf	??_app_flow_get_adcAverageValue+6,w
 33181  118A  3DB9               	addwfc	??_app_flow_get_adcAverageValue+2,f
 33182  118B  083E               	movf	??_app_flow_get_adcAverageValue+7,w
 33183  118C  3DBA               	addwfc	??_app_flow_get_adcAverageValue+3,f
 33184  118D  083A               	movf	??_app_flow_get_adcAverageValue+3,w
 33185  118E  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33186  118F  0839               	movf	??_app_flow_get_adcAverageValue+2,w
 33187  1190  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33188  1191  0838               	movf	??_app_flow_get_adcAverageValue+1,w
 33189  1192  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33190  1193  0837               	movf	??_app_flow_get_adcAverageValue,w
 33191  1194  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33192                           
 33193                           ;flow.c: 252: ret=ret/(20-2);
 33194  1195  3000               	movlw	0
 33195  1196  00AB               	movwf	___lldiv@divisor+3
 33196  1197  3000               	movlw	0
 33197  1198  00AA               	movwf	___lldiv@divisor+2
 33198  1199  3000               	movlw	0
 33199  119A  00A9               	movwf	___lldiv@divisor+1
 33200  119B  3012               	movlw	18
 33201  119C  00A8               	movwf	___lldiv@divisor
 33202  119D  0849               	movf	app_flow_get_adcAverageValue@ret+3,w
 33203  119E  00AF               	movwf	___lldiv@dividend+3
 33204  119F  0848               	movf	app_flow_get_adcAverageValue@ret+2,w
 33205  11A0  00AE               	movwf	___lldiv@dividend+2
 33206  11A1  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33207  11A2  00AD               	movwf	___lldiv@dividend+1
 33208  11A3  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33209  11A4  00AC               	movwf	___lldiv@dividend
 33210  11A5  31AA  2268  3190   	fcall	___lldiv
 33211  11A8  0020               	movlb	0	; select bank0
 33212  11A9  082B               	movf	?___lldiv+3,w
 33213  11AA  00C9               	movwf	app_flow_get_adcAverageValue@ret+3
 33214  11AB  082A               	movf	?___lldiv+2,w
 33215  11AC  00C8               	movwf	app_flow_get_adcAverageValue@ret+2
 33216  11AD  0829               	movf	?___lldiv+1,w
 33217  11AE  00C7               	movwf	app_flow_get_adcAverageValue@ret+1
 33218  11AF  0828               	movf	?___lldiv,w
 33219  11B0  00C6               	movwf	app_flow_get_adcAverageValue@ret
 33220                           
 33221                           ;flow.c: 253: adcSamplingBuffer[maxIndex]=(uint16_t)ret;
 33222  11B1  353F               	lslf	app_flow_get_adcAverageValue@maxIndex,w
 33223  11B2  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33224  11B3  0086               	movwf	6
 33225  11B4  3002               	movlw	2	; select bank5/6
 33226  11B5  0087               	movwf	7
 33227  11B6  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33228  11B7  3FC0               	movwi [0]fsr1
 33229  11B8  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33230  11B9  3FC1               	movwi [1]fsr1
 33231                           
 33232                           ;flow.c: 254: adcSamplingBuffer[minIndex]=(uint16_t)ret;
 33233  11BA  3540               	lslf	app_flow_get_adcAverageValue@minIndex,w
 33234  11BB  3EA0               	addlw	(low (_adcSamplingBuffer| (0+512)))& (0+255)
 33235  11BC  0086               	movwf	6
 33236  11BD  3002               	movlw	2	; select bank5/6
 33237  11BE  0087               	movwf	7
 33238  11BF  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33239  11C0  3FC0               	movwi [0]fsr1
 33240  11C1  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33241  11C2  3FC1               	movwi [1]fsr1
 33242  11C3  3001               	movlw	1
 33243  11C4  00B7               	movwf	??_app_flow_get_adcAverageValue
 33244  11C5  0837               	movf	??_app_flow_get_adcAverageValue,w
 33245  11C6  07C3               	addwf	app_flow_get_adcAverageValue@j,f
 33246  11C7  3008               	movlw	8
 33247  11C8  0243               	subwf	app_flow_get_adcAverageValue@j,w
 33248  11C9  1C03               	skipc
 33249  11CA  28DA               	goto	l15335
 33250  11CB                     l15375:	
 33251                           
 33252                           ;flow.c: 255: }
 33253                           ;flow.c: 256: return (uint16_t)ret;
 33254  11CB  0847               	movf	app_flow_get_adcAverageValue@ret+1,w
 33255  11CC  00B6               	movwf	?_app_flow_get_adcAverageValue+1
 33256  11CD  0846               	movf	app_flow_get_adcAverageValue@ret,w
 33257  11CE  00B5               	movwf	?_app_flow_get_adcAverageValue
 33258  11CF  0008               	return
 33259  11D0                     __end_of_app_flow_get_adcAverageValue:	
 33260                           
 33261                           	psect	text136
 33262  03BD                     __ptext136:	
 33263 ;; *************** function _app_flow_adc_2_flow *****************
 33264 ;; Defined at:
 33265 ;;		line 87 in file "src/app/flow.c"
 33266 ;; Parameters:    Size  Location     Type
 33267 ;;  index           1    wreg     unsigned char 
 33268 ;; Auto vars:     Size  Location     Type
 33269 ;;  index           1   41[BANK0 ] unsigned char 
 33270 ;;  ad1             2   39[BANK0 ] unsigned int 
 33271 ;;  flw1            2   37[BANK0 ] unsigned int 
 33272 ;;  ad2             2   35[BANK0 ] unsigned int 
 33273 ;;  flw2            2   33[BANK0 ] unsigned int 
 33274 ;; Return value:  Size  Location     Type
 33275 ;;                  2   21[BANK0 ] unsigned int 
 33276 ;; Registers used:
 33277 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 33278 ;; Tracked objects:
 33279 ;;		On entry : 0/0
 33280 ;;		On exit  : 0/0
 33281 ;;		Unchanged: 0/0
 33282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33283 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 33284 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 33285 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 33286 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0
 33287 ;;Total ram usage:       21 bytes
 33288 ;; Hardware stack levels used:    1
 33289 ;; Hardware stack levels required when called:    3
 33290 ;; This function calls:
 33291 ;;		___lldiv
 33292 ;;		___lmul
 33293 ;; This function is called by:
 33294 ;;		_flow_sampling_process
 33295 ;; This function uses a non-reentrant model
 33296 ;;
 33297                           
 33298                           
 33299                           ;psect for function _app_flow_adc_2_flow
 33300  03BD                     _app_flow_adc_2_flow:	
 33301                           
 33302                           ;incstack = 0
 33303                           ; Regs used in _app_flow_adc_2_flow: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 33304                           ;app_flow_adc_2_flow@index stored from wreg
 33305  03BD  0020               	movlb	0	; select bank0
 33306  03BE  00C9               	movwf	app_flow_adc_2_flow@index
 33307                           
 33308                           ;flow.c: 89: uint16_t flw1 = 0, flw2 = 0;
 33309  03BF  01C5               	clrf	app_flow_adc_2_flow@flw1
 33310  03C0  01C6               	clrf	app_flow_adc_2_flow@flw1+1
 33311  03C1  01C1               	clrf	app_flow_adc_2_flow@flw2
 33312  03C2  01C2               	clrf	app_flow_adc_2_flow@flw2+1
 33313                           
 33314                           ;flow.c: 90: uint16_t ad1 = 0, ad2 = 0;
 33315  03C3  01C7               	clrf	app_flow_adc_2_flow@ad1
 33316  03C4  01C8               	clrf	app_flow_adc_2_flow@ad1+1
 33317  03C5  01C3               	clrf	app_flow_adc_2_flow@ad2
 33318  03C6  01C4               	clrf	app_flow_adc_2_flow@ad2+1
 33319                           
 33320                           ;flow.c: 93: if(valveStatus==VALVE_CLOSED){
 33321  03C7  037A               	decf	_valveStatus,w
 33322  03C8  1D03               	btfss	3,2
 33323  03C9  2BD0               	goto	l15233
 33324                           
 33325                           ;flow.c: 94: flowError=0;
 33326  03CA  0021               	movlb	1	; select bank1
 33327  03CB  01C6               	clrf	_flowError^(0+128)
 33328                           
 33329                           ;flow.c: 95: return 0;
 33330  03CC  0020               	movlb	0	; select bank0
 33331  03CD  01B5               	clrf	?_app_flow_adc_2_flow
 33332  03CE  01B6               	clrf	?_app_flow_adc_2_flow+1
 33333  03CF  0008               	return
 33334  03D0                     l15233:	
 33335                           
 33336                           ;flow.c: 96: }
 33337                           ;flow.c: 98: fl_t32=1;
 33338  03D0  3000               	movlw	0
 33339  03D1  0021               	movlb	1	; select bank1
 33340  03D2  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33341  03D3  3000               	movlw	0
 33342  03D4  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33343  03D5  3000               	movlw	0
 33344  03D6  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33345  03D7  3001               	movlw	1
 33346  03D8  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33347                           
 33348                           ;flow.c: 99: if (index < 30 - 1) {
 33349  03D9  301D               	movlw	29
 33350  03DA  0020               	movlb	0	; select bank0
 33351  03DB  0249               	subwf	app_flow_adc_2_flow@index,w
 33352  03DC  1803               	skipnc
 33353  03DD  2D7E               	goto	l15267
 33354                           
 33355                           ;flow.c: 100: ad1 = Main_flowCalibrationTable.flowCalibrationArr[index].adcValue;
 33356  03DE  0849               	movf	app_flow_adc_2_flow@index,w
 33357  03DF  00B7               	movwf	??_app_flow_adc_2_flow
 33358  03E0  01B8               	clrf	??_app_flow_adc_2_flow+1
 33359  03E1  35B7               	lslf	??_app_flow_adc_2_flow,f
 33360  03E2  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33361  03E3  35B7               	lslf	??_app_flow_adc_2_flow,f
 33362  03E4  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33363  03E5  3074               	movlw	116
 33364  03E6  00B9               	movwf	??_app_flow_adc_2_flow+2
 33365  03E7  3023               	movlw	35
 33366  03E8  00BA               	movwf	??_app_flow_adc_2_flow+3
 33367  03E9  0837               	movf	??_app_flow_adc_2_flow,w
 33368  03EA  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33369  03EB  0086               	movwf	6
 33370  03EC  0838               	movf	??_app_flow_adc_2_flow+1,w
 33371  03ED  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33372  03EE  0087               	movwf	7
 33373  03EF  3F40               	moviw [0]fsr1
 33374  03F0  00C7               	movwf	app_flow_adc_2_flow@ad1
 33375  03F1  3F41               	moviw [1]fsr1
 33376  03F2  00C8               	movwf	app_flow_adc_2_flow@ad1+1
 33377                           
 33378                           ;flow.c: 101: ad2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].adcValue;
 33379  03F3  0849               	movf	app_flow_adc_2_flow@index,w
 33380  03F4  00B7               	movwf	??_app_flow_adc_2_flow
 33381  03F5  01B8               	clrf	??_app_flow_adc_2_flow+1
 33382  03F6  35B7               	lslf	??_app_flow_adc_2_flow,f
 33383  03F7  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33384  03F8  35B7               	lslf	??_app_flow_adc_2_flow,f
 33385  03F9  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33386  03FA  0837               	movf	??_app_flow_adc_2_flow,w
 33387  03FB  3E04               	addlw	4
 33388  03FC  00B9               	movwf	??_app_flow_adc_2_flow+2
 33389  03FD  3000               	movlw	0
 33390  03FE  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33391  03FF  00BA               	movwf	??_app_flow_adc_2_flow+3
 33392  0400  3074               	movlw	116
 33393  0401  00BB               	movwf	??_app_flow_adc_2_flow+4
 33394  0402  3023               	movlw	35
 33395  0403  00BC               	movwf	??_app_flow_adc_2_flow+5
 33396  0404  0839               	movf	??_app_flow_adc_2_flow+2,w
 33397  0405  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33398  0406  0086               	movwf	6
 33399  0407  083A               	movf	??_app_flow_adc_2_flow+3,w
 33400  0408  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33401  0409  0087               	movwf	7
 33402  040A  3F40               	moviw [0]fsr1
 33403  040B  00C3               	movwf	app_flow_adc_2_flow@ad2
 33404  040C  3F41               	moviw [1]fsr1
 33405  040D  00C4               	movwf	app_flow_adc_2_flow@ad2+1
 33406                           
 33407                           ;flow.c: 102: flw1 = Main_flowCalibrationTable.flowCalibrationArr[index].rtflowValue;
 33408  040E  0849               	movf	app_flow_adc_2_flow@index,w
 33409  040F  00B7               	movwf	??_app_flow_adc_2_flow
 33410  0410  01B8               	clrf	??_app_flow_adc_2_flow+1
 33411  0411  35B7               	lslf	??_app_flow_adc_2_flow,f
 33412  0412  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33413  0413  35B7               	lslf	??_app_flow_adc_2_flow,f
 33414  0414  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33415  0415  0837               	movf	??_app_flow_adc_2_flow,w
 33416  0416  3E02               	addlw	2
 33417  0417  00B9               	movwf	??_app_flow_adc_2_flow+2
 33418  0418  3000               	movlw	0
 33419  0419  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33420  041A  00BA               	movwf	??_app_flow_adc_2_flow+3
 33421  041B  3074               	movlw	116
 33422  041C  00BB               	movwf	??_app_flow_adc_2_flow+4
 33423  041D  3023               	movlw	35
 33424  041E  00BC               	movwf	??_app_flow_adc_2_flow+5
 33425  041F  0839               	movf	??_app_flow_adc_2_flow+2,w
 33426  0420  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33427  0421  0086               	movwf	6
 33428  0422  083A               	movf	??_app_flow_adc_2_flow+3,w
 33429  0423  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33430  0424  0087               	movwf	7
 33431  0425  3F40               	moviw [0]fsr1
 33432  0426  00C5               	movwf	app_flow_adc_2_flow@flw1
 33433  0427  3F41               	moviw [1]fsr1
 33434  0428  00C6               	movwf	app_flow_adc_2_flow@flw1+1
 33435                           
 33436                           ;flow.c: 103: flw2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].rtflowValue
      +                          ;
 33437  0429  0849               	movf	app_flow_adc_2_flow@index,w
 33438  042A  00B7               	movwf	??_app_flow_adc_2_flow
 33439  042B  01B8               	clrf	??_app_flow_adc_2_flow+1
 33440  042C  35B7               	lslf	??_app_flow_adc_2_flow,f
 33441  042D  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33442  042E  35B7               	lslf	??_app_flow_adc_2_flow,f
 33443  042F  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33444  0430  0837               	movf	??_app_flow_adc_2_flow,w
 33445  0431  3E06               	addlw	6
 33446  0432  00B9               	movwf	??_app_flow_adc_2_flow+2
 33447  0433  3000               	movlw	0
 33448  0434  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33449  0435  00BA               	movwf	??_app_flow_adc_2_flow+3
 33450  0436  3074               	movlw	116
 33451  0437  00BB               	movwf	??_app_flow_adc_2_flow+4
 33452  0438  3023               	movlw	35
 33453  0439  00BC               	movwf	??_app_flow_adc_2_flow+5
 33454  043A  0839               	movf	??_app_flow_adc_2_flow+2,w
 33455  043B  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33456  043C  0086               	movwf	6
 33457  043D  083A               	movf	??_app_flow_adc_2_flow+3,w
 33458  043E  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33459  043F  0087               	movwf	7
 33460  0440  3F40               	moviw [0]fsr1
 33461  0441  00C1               	movwf	app_flow_adc_2_flow@flw2
 33462  0442  3F41               	moviw [1]fsr1
 33463  0443  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33464                           
 33465                           ;flow.c: 104: if(ad2 == ad1){
 33466  0444  0848               	movf	app_flow_adc_2_flow@ad1+1,w
 33467  0445  0644               	xorwf	app_flow_adc_2_flow@ad2+1,w
 33468  0446  1D03               	skipz
 33469  0447  2C4A               	goto	u13965
 33470  0448  0847               	movf	app_flow_adc_2_flow@ad1,w
 33471  0449  0643               	xorwf	app_flow_adc_2_flow@ad2,w
 33472  044A                     u13965:	
 33473  044A  1D03               	skipz
 33474  044B  2CB8               	goto	l15247
 33475                           
 33476                           ;flow.c: 107: if(index==0)return 0;
 33477  044C  0849               	movf	app_flow_adc_2_flow@index,w
 33478  044D  1D03               	btfss	3,2
 33479  044E  2C52               	goto	l15245
 33480  044F  01B5               	clrf	?_app_flow_adc_2_flow
 33481  0450  01B6               	clrf	?_app_flow_adc_2_flow+1
 33482  0451  0008               	return
 33483  0452                     l15245:	
 33484                           
 33485                           ;flow.c: 108: ad1 = Main_flowCalibrationTable.flowCalibrationArr[index-1].adcValue;
 33486  0452  0849               	movf	app_flow_adc_2_flow@index,w
 33487  0453  00B7               	movwf	??_app_flow_adc_2_flow
 33488  0454  01B8               	clrf	??_app_flow_adc_2_flow+1
 33489  0455  35B7               	lslf	??_app_flow_adc_2_flow,f
 33490  0456  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33491  0457  35B7               	lslf	??_app_flow_adc_2_flow,f
 33492  0458  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33493  0459  0837               	movf	??_app_flow_adc_2_flow,w
 33494  045A  3EFC               	addlw	252
 33495  045B  00B9               	movwf	??_app_flow_adc_2_flow+2
 33496  045C  30FF               	movlw	255
 33497  045D  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33498  045E  00BA               	movwf	??_app_flow_adc_2_flow+3
 33499  045F  3074               	movlw	116
 33500  0460  00BB               	movwf	??_app_flow_adc_2_flow+4
 33501  0461  3023               	movlw	35
 33502  0462  00BC               	movwf	??_app_flow_adc_2_flow+5
 33503  0463  0839               	movf	??_app_flow_adc_2_flow+2,w
 33504  0464  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33505  0465  0086               	movwf	6
 33506  0466  083A               	movf	??_app_flow_adc_2_flow+3,w
 33507  0467  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33508  0468  0087               	movwf	7
 33509  0469  3F40               	moviw [0]fsr1
 33510  046A  00C7               	movwf	app_flow_adc_2_flow@ad1
 33511  046B  3F41               	moviw [1]fsr1
 33512  046C  00C8               	movwf	app_flow_adc_2_flow@ad1+1
 33513                           
 33514                           ;flow.c: 109: ad2 = Main_flowCalibrationTable.flowCalibrationArr[index].adcValue;
 33515  046D  0849               	movf	app_flow_adc_2_flow@index,w
 33516  046E  00B7               	movwf	??_app_flow_adc_2_flow
 33517  046F  01B8               	clrf	??_app_flow_adc_2_flow+1
 33518  0470  35B7               	lslf	??_app_flow_adc_2_flow,f
 33519  0471  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33520  0472  35B7               	lslf	??_app_flow_adc_2_flow,f
 33521  0473  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33522  0474  3074               	movlw	116
 33523  0475  00B9               	movwf	??_app_flow_adc_2_flow+2
 33524  0476  3023               	movlw	35
 33525  0477  00BA               	movwf	??_app_flow_adc_2_flow+3
 33526  0478  0837               	movf	??_app_flow_adc_2_flow,w
 33527  0479  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33528  047A  0086               	movwf	6
 33529  047B  0838               	movf	??_app_flow_adc_2_flow+1,w
 33530  047C  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33531  047D  0087               	movwf	7
 33532  047E  3F40               	moviw [0]fsr1
 33533  047F  00C3               	movwf	app_flow_adc_2_flow@ad2
 33534  0480  3F41               	moviw [1]fsr1
 33535  0481  00C4               	movwf	app_flow_adc_2_flow@ad2+1
 33536                           
 33537                           ;flow.c: 110: flw1 = Main_flowCalibrationTable.flowCalibrationArr[index-1].rtflowValue;
 33538  0482  0849               	movf	app_flow_adc_2_flow@index,w
 33539  0483  00B7               	movwf	??_app_flow_adc_2_flow
 33540  0484  01B8               	clrf	??_app_flow_adc_2_flow+1
 33541  0485  35B7               	lslf	??_app_flow_adc_2_flow,f
 33542  0486  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33543  0487  35B7               	lslf	??_app_flow_adc_2_flow,f
 33544  0488  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33545  0489  0837               	movf	??_app_flow_adc_2_flow,w
 33546  048A  3EFE               	addlw	254
 33547  048B  00B9               	movwf	??_app_flow_adc_2_flow+2
 33548  048C  30FF               	movlw	255
 33549  048D  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33550  048E  00BA               	movwf	??_app_flow_adc_2_flow+3
 33551  048F  3074               	movlw	116
 33552  0490  00BB               	movwf	??_app_flow_adc_2_flow+4
 33553  0491  3023               	movlw	35
 33554  0492  00BC               	movwf	??_app_flow_adc_2_flow+5
 33555  0493  0839               	movf	??_app_flow_adc_2_flow+2,w
 33556  0494  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33557  0495  0086               	movwf	6
 33558  0496  083A               	movf	??_app_flow_adc_2_flow+3,w
 33559  0497  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33560  0498  0087               	movwf	7
 33561  0499  3F40               	moviw [0]fsr1
 33562  049A  00C5               	movwf	app_flow_adc_2_flow@flw1
 33563  049B  3F41               	moviw [1]fsr1
 33564  049C  00C6               	movwf	app_flow_adc_2_flow@flw1+1
 33565                           
 33566                           ;flow.c: 111: flw2 = Main_flowCalibrationTable.flowCalibrationArr[index].rtflowValue;
 33567  049D  0849               	movf	app_flow_adc_2_flow@index,w
 33568  049E  00B7               	movwf	??_app_flow_adc_2_flow
 33569  049F  01B8               	clrf	??_app_flow_adc_2_flow+1
 33570  04A0  35B7               	lslf	??_app_flow_adc_2_flow,f
 33571  04A1  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33572  04A2  35B7               	lslf	??_app_flow_adc_2_flow,f
 33573  04A3  0DB8               	rlf	??_app_flow_adc_2_flow+1,f
 33574  04A4  0837               	movf	??_app_flow_adc_2_flow,w
 33575  04A5  3E02               	addlw	2
 33576  04A6  00B9               	movwf	??_app_flow_adc_2_flow+2
 33577  04A7  3000               	movlw	0
 33578  04A8  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33579  04A9  00BA               	movwf	??_app_flow_adc_2_flow+3
 33580  04AA  3074               	movlw	116
 33581  04AB  00BB               	movwf	??_app_flow_adc_2_flow+4
 33582  04AC  3023               	movlw	35
 33583  04AD  00BC               	movwf	??_app_flow_adc_2_flow+5
 33584  04AE  0839               	movf	??_app_flow_adc_2_flow+2,w
 33585  04AF  073B               	addwf	??_app_flow_adc_2_flow+4,w
 33586  04B0  0086               	movwf	6
 33587  04B1  083A               	movf	??_app_flow_adc_2_flow+3,w
 33588  04B2  3D3C               	addwfc	??_app_flow_adc_2_flow+5,w
 33589  04B3  0087               	movwf	7
 33590  04B4  3F40               	moviw [0]fsr1
 33591  04B5  00C1               	movwf	app_flow_adc_2_flow@flw2
 33592  04B6  3F41               	moviw [1]fsr1
 33593  04B7  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33594  04B8                     l15247:	
 33595                           
 33596                           ;flow.c: 112: }
 33597                           ;flow.c: 113: if(adcAverageValue < ad1)return 0;
 33598  04B8  0848               	movf	app_flow_adc_2_flow@ad1+1,w
 33599  04B9  0021               	movlb	1	; select bank1
 33600  04BA  0239               	subwf	(_adcAverageValue+1)^(0+128),w	;volatile
 33601  04BB  1D03               	skipz
 33602  04BC  2CC1               	goto	u13985
 33603  04BD  0020               	movlb	0	; select bank0
 33604  04BE  0847               	movf	app_flow_adc_2_flow@ad1,w
 33605  04BF  0021               	movlb	1	; select bank1
 33606  04C0  0238               	subwf	_adcAverageValue^(0+128),w	;volatile
 33607  04C1                     u13985:	
 33608  04C1  1803               	skipnc
 33609  04C2  2CC7               	goto	l15253
 33610  04C3  0020               	movlb	0	; select bank0
 33611  04C4  01B5               	clrf	?_app_flow_adc_2_flow
 33612  04C5  01B6               	clrf	?_app_flow_adc_2_flow+1
 33613  04C6  0008               	return
 33614  04C7                     l15253:	
 33615                           
 33616                           ;flow.c: 116: if(flw2<flw1)flw2=flw1;
 33617  04C7  0020               	movlb	0	; select bank0
 33618  04C8  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33619  04C9  0242               	subwf	app_flow_adc_2_flow@flw2+1,w
 33620  04CA  1D03               	skipz
 33621  04CB  2CCE               	goto	u13995
 33622  04CC  0845               	movf	app_flow_adc_2_flow@flw1,w
 33623  04CD  0241               	subwf	app_flow_adc_2_flow@flw2,w
 33624  04CE                     u13995:	
 33625  04CE  1803               	skipnc
 33626  04CF  2CD4               	goto	l15257
 33627  04D0  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33628  04D1  00C2               	movwf	app_flow_adc_2_flow@flw2+1
 33629  04D2  0845               	movf	app_flow_adc_2_flow@flw1,w
 33630  04D3  00C1               	movwf	app_flow_adc_2_flow@flw2
 33631  04D4                     l15257:	
 33632                           
 33633                           ;flow.c: 117: fl_t32 = fl_t32*(flw2 - flw1)*(adcAverageValue - ad1);
 33634  04D4  0945               	comf	app_flow_adc_2_flow@flw1,w
 33635  04D5  00B7               	movwf	??_app_flow_adc_2_flow
 33636  04D6  0946               	comf	app_flow_adc_2_flow@flw1+1,w
 33637  04D7  00B8               	movwf	??_app_flow_adc_2_flow+1
 33638  04D8  0AB7               	incf	??_app_flow_adc_2_flow,f
 33639  04D9  1903               	skipnz
 33640  04DA  0AB8               	incf	??_app_flow_adc_2_flow+1,f
 33641  04DB  0841               	movf	app_flow_adc_2_flow@flw2,w
 33642  04DC  0737               	addwf	??_app_flow_adc_2_flow,w
 33643  04DD  00A0               	movwf	___lmul@multiplier
 33644  04DE  0842               	movf	app_flow_adc_2_flow@flw2+1,w
 33645  04DF  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33646  04E0  00A1               	movwf	___lmul@multiplier+1
 33647  04E1  01A2               	clrf	___lmul@multiplier+2
 33648  04E2  01A3               	clrf	___lmul@multiplier+3
 33649  04E3  0947               	comf	app_flow_adc_2_flow@ad1,w
 33650  04E4  00B9               	movwf	??_app_flow_adc_2_flow+2
 33651  04E5  0948               	comf	app_flow_adc_2_flow@ad1+1,w
 33652  04E6  00BA               	movwf	??_app_flow_adc_2_flow+3
 33653  04E7  0AB9               	incf	??_app_flow_adc_2_flow+2,f
 33654  04E8  1903               	skipnz
 33655  04E9  0ABA               	incf	??_app_flow_adc_2_flow+3,f
 33656  04EA  0021               	movlb	1	; select bank1
 33657  04EB  0838               	movf	_adcAverageValue^(0+128),w	;volatile
 33658  04EC  0020               	movlb	0	; select bank0
 33659  04ED  0739               	addwf	??_app_flow_adc_2_flow+2,w
 33660  04EE  00A4               	movwf	___lmul@multiplicand
 33661  04EF  0021               	movlb	1	; select bank1
 33662  04F0  0839               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 33663  04F1  0020               	movlb	0	; select bank0
 33664  04F2  3D3A               	addwfc	??_app_flow_adc_2_flow+3,w
 33665  04F3  00A5               	movwf	___lmul@multiplicand+1
 33666  04F4  01A6               	clrf	___lmul@multiplicand+2
 33667  04F5  01A7               	clrf	___lmul@multiplicand+3
 33668  04F6  31B3  2369  3183   	fcall	___lmul
 33669  04F9  0020               	movlb	0	; select bank0
 33670  04FA  0823               	movf	?___lmul+3,w
 33671  04FB  00C0               	movwf	_app_flow_adc_2_flow$4477+3
 33672  04FC  0822               	movf	?___lmul+2,w
 33673  04FD  00BF               	movwf	_app_flow_adc_2_flow$4477+2
 33674  04FE  0821               	movf	?___lmul+1,w
 33675  04FF  00BE               	movwf	_app_flow_adc_2_flow$4477+1
 33676  0500  0820               	movf	?___lmul,w
 33677  0501  00BD               	movwf	_app_flow_adc_2_flow$4477
 33678                           
 33679                           ;flow.c: 117: fl_t32 = fl_t32*(flw2 - flw1)*(adcAverageValue - ad1);
 33680  0502  0840               	movf	_app_flow_adc_2_flow$4477+3,w
 33681  0503  00A3               	movwf	___lmul@multiplier+3
 33682  0504  083F               	movf	_app_flow_adc_2_flow$4477+2,w
 33683  0505  00A2               	movwf	___lmul@multiplier+2
 33684  0506  083E               	movf	_app_flow_adc_2_flow$4477+1,w
 33685  0507  00A1               	movwf	___lmul@multiplier+1
 33686  0508  083D               	movf	_app_flow_adc_2_flow$4477,w
 33687  0509  00A0               	movwf	___lmul@multiplier
 33688  050A  0021               	movlb	1	; select bank1
 33689  050B  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33690  050C  0020               	movlb	0	; select bank0
 33691  050D  00A7               	movwf	___lmul@multiplicand+3
 33692  050E  0021               	movlb	1	; select bank1
 33693  050F  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33694  0510  0020               	movlb	0	; select bank0
 33695  0511  00A6               	movwf	___lmul@multiplicand+2
 33696  0512  0021               	movlb	1	; select bank1
 33697  0513  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33698  0514  0020               	movlb	0	; select bank0
 33699  0515  00A5               	movwf	___lmul@multiplicand+1
 33700  0516  0021               	movlb	1	; select bank1
 33701  0517  0824               	movf	_fl_t32^(0+128),w	;volatile
 33702  0518  0020               	movlb	0	; select bank0
 33703  0519  00A4               	movwf	___lmul@multiplicand
 33704  051A  31B3  2369  3183   	fcall	___lmul
 33705  051D  0020               	movlb	0	; select bank0
 33706  051E  0823               	movf	?___lmul+3,w
 33707  051F  0021               	movlb	1	; select bank1
 33708  0520  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33709  0521  0020               	movlb	0	; select bank0
 33710  0522  0822               	movf	?___lmul+2,w
 33711  0523  0021               	movlb	1	; select bank1
 33712  0524  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33713  0525  0020               	movlb	0	; select bank0
 33714  0526  0821               	movf	?___lmul+1,w
 33715  0527  0021               	movlb	1	; select bank1
 33716  0528  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33717  0529  0020               	movlb	0	; select bank0
 33718  052A  0820               	movf	?___lmul,w
 33719  052B  0021               	movlb	1	; select bank1
 33720  052C  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33721                           
 33722                           ;flow.c: 118: if(ad2 > ad1){
 33723  052D  0020               	movlb	0	; select bank0
 33724  052E  0844               	movf	app_flow_adc_2_flow@ad2+1,w
 33725  052F  0248               	subwf	app_flow_adc_2_flow@ad1+1,w
 33726  0530  1D03               	skipz
 33727  0531  2D34               	goto	u14005
 33728  0532  0843               	movf	app_flow_adc_2_flow@ad2,w
 33729  0533  0247               	subwf	app_flow_adc_2_flow@ad1,w
 33730  0534                     u14005:	
 33731  0534  1803               	skipnc
 33732  0535  2D74               	goto	l15265
 33733                           
 33734                           ;flow.c: 119: fl_t32 = fl_t32 /(ad2 - ad1);
 33735  0536  0947               	comf	app_flow_adc_2_flow@ad1,w
 33736  0537  00B7               	movwf	??_app_flow_adc_2_flow
 33737  0538  0948               	comf	app_flow_adc_2_flow@ad1+1,w
 33738  0539  00B8               	movwf	??_app_flow_adc_2_flow+1
 33739  053A  0AB7               	incf	??_app_flow_adc_2_flow,f
 33740  053B  1903               	skipnz
 33741  053C  0AB8               	incf	??_app_flow_adc_2_flow+1,f
 33742  053D  0843               	movf	app_flow_adc_2_flow@ad2,w
 33743  053E  0737               	addwf	??_app_flow_adc_2_flow,w
 33744  053F  00A8               	movwf	___lldiv@divisor
 33745  0540  0844               	movf	app_flow_adc_2_flow@ad2+1,w
 33746  0541  3D38               	addwfc	??_app_flow_adc_2_flow+1,w
 33747  0542  00A9               	movwf	___lldiv@divisor+1
 33748  0543  01AA               	clrf	___lldiv@divisor+2
 33749  0544  01AB               	clrf	___lldiv@divisor+3
 33750  0545  0021               	movlb	1	; select bank1
 33751  0546  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33752  0547  0020               	movlb	0	; select bank0
 33753  0548  00AF               	movwf	___lldiv@dividend+3
 33754  0549  0021               	movlb	1	; select bank1
 33755  054A  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33756  054B  0020               	movlb	0	; select bank0
 33757  054C  00AE               	movwf	___lldiv@dividend+2
 33758  054D  0021               	movlb	1	; select bank1
 33759  054E  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33760  054F  0020               	movlb	0	; select bank0
 33761  0550  00AD               	movwf	___lldiv@dividend+1
 33762  0551  0021               	movlb	1	; select bank1
 33763  0552  0824               	movf	_fl_t32^(0+128),w	;volatile
 33764  0553  0020               	movlb	0	; select bank0
 33765  0554  00AC               	movwf	___lldiv@dividend
 33766  0555  31AA  2268  3183   	fcall	___lldiv
 33767  0558  0020               	movlb	0	; select bank0
 33768  0559  082B               	movf	?___lldiv+3,w
 33769  055A  0021               	movlb	1	; select bank1
 33770  055B  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33771  055C  0020               	movlb	0	; select bank0
 33772  055D  082A               	movf	?___lldiv+2,w
 33773  055E  0021               	movlb	1	; select bank1
 33774  055F  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33775  0560  0020               	movlb	0	; select bank0
 33776  0561  0829               	movf	?___lldiv+1,w
 33777  0562  0021               	movlb	1	; select bank1
 33778  0563  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33779  0564  0020               	movlb	0	; select bank0
 33780  0565  0828               	movf	?___lldiv,w
 33781  0566  0021               	movlb	1	; select bank1
 33782  0567  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33783                           
 33784                           ;flow.c: 120: fl_t32 += flw1;
 33785  0568  0020               	movlb	0	; select bank0
 33786  0569  0845               	movf	app_flow_adc_2_flow@flw1,w
 33787  056A  0021               	movlb	1	; select bank1
 33788  056B  07A4               	addwf	_fl_t32^(0+128),f	;volatile
 33789  056C  0020               	movlb	0	; select bank0
 33790  056D  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33791  056E  0021               	movlb	1	; select bank1
 33792  056F  3DA5               	addwfc	(_fl_t32+1)^(0+128),f	;volatile
 33793  0570  3000               	movlw	0
 33794  0571  3DA6               	addwfc	(_fl_t32+2)^(0+128),f	;volatile
 33795  0572  3DA7               	addwfc	(_fl_t32+3)^(0+128),f	;volatile
 33796                           
 33797                           ;flow.c: 121: }else{
 33798  0573  2D7E               	goto	l15267
 33799  0574                     l15265:	
 33800                           
 33801                           ;flow.c: 122: fl_t32= flw1;
 33802  0574  0020               	movlb	0	; select bank0
 33803  0575  0845               	movf	app_flow_adc_2_flow@flw1,w
 33804  0576  0021               	movlb	1	; select bank1
 33805  0577  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33806  0578  0020               	movlb	0	; select bank0
 33807  0579  0846               	movf	app_flow_adc_2_flow@flw1+1,w
 33808  057A  0021               	movlb	1	; select bank1
 33809  057B  00A5               	movwf	(_fl_t32^(0+128)+1)	;volatile
 33810  057C  01A6               	clrf	(_fl_t32^(0+128)+2)	;volatile
 33811  057D  01A7               	clrf	(_fl_t32^(0+128)+3)	;volatile
 33812  057E                     l15267:	
 33813                           
 33814                           ;flow.c: 123: }
 33815                           ;flow.c: 124: }
 33816                           ;flow.c: 125: fl_t32 = fl_t32 * mainSystemData.flowRatio;
 33817  057E  0024               	movlb	4	; select bank4
 33818  057F  083A               	movf	(_mainSystemData^(0+512)+26),w
 33819  0580  0020               	movlb	0	; select bank0
 33820  0581  00A0               	movwf	___lmul@multiplier
 33821  0582  0024               	movlb	4	; select bank4
 33822  0583  083B               	movf	((_mainSystemData+1)^(0+512)+26),w
 33823  0584  0020               	movlb	0	; select bank0
 33824  0585  00A1               	movwf	___lmul@multiplier+1
 33825  0586  0D89               	rlf	9,f
 33826  0587  3B89               	subwfb	9,f
 33827  0588  0989               	comf	9,f
 33828  0589  00A2               	movwf	___lmul@multiplier+2
 33829  058A  00A3               	movwf	___lmul@multiplier+3
 33830  058B  0021               	movlb	1	; select bank1
 33831  058C  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33832  058D  0020               	movlb	0	; select bank0
 33833  058E  00A7               	movwf	___lmul@multiplicand+3
 33834  058F  0021               	movlb	1	; select bank1
 33835  0590  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33836  0591  0020               	movlb	0	; select bank0
 33837  0592  00A6               	movwf	___lmul@multiplicand+2
 33838  0593  0021               	movlb	1	; select bank1
 33839  0594  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33840  0595  0020               	movlb	0	; select bank0
 33841  0596  00A5               	movwf	___lmul@multiplicand+1
 33842  0597  0021               	movlb	1	; select bank1
 33843  0598  0824               	movf	_fl_t32^(0+128),w	;volatile
 33844  0599  0020               	movlb	0	; select bank0
 33845  059A  00A4               	movwf	___lmul@multiplicand
 33846  059B  31B3  2369  3183   	fcall	___lmul
 33847  059E  0020               	movlb	0	; select bank0
 33848  059F  0823               	movf	?___lmul+3,w
 33849  05A0  0021               	movlb	1	; select bank1
 33850  05A1  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33851  05A2  0020               	movlb	0	; select bank0
 33852  05A3  0822               	movf	?___lmul+2,w
 33853  05A4  0021               	movlb	1	; select bank1
 33854  05A5  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33855  05A6  0020               	movlb	0	; select bank0
 33856  05A7  0821               	movf	?___lmul+1,w
 33857  05A8  0021               	movlb	1	; select bank1
 33858  05A9  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33859  05AA  0020               	movlb	0	; select bank0
 33860  05AB  0820               	movf	?___lmul,w
 33861  05AC  0021               	movlb	1	; select bank1
 33862  05AD  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33863                           
 33864                           ;flow.c: 126: fl_t32 /= 1000;
 33865  05AE  3000               	movlw	0
 33866  05AF  0020               	movlb	0	; select bank0
 33867  05B0  00AB               	movwf	___lldiv@divisor+3
 33868  05B1  3000               	movlw	0
 33869  05B2  00AA               	movwf	___lldiv@divisor+2
 33870  05B3  3003               	movlw	3
 33871  05B4  00A9               	movwf	___lldiv@divisor+1
 33872  05B5  30E8               	movlw	232
 33873  05B6  00A8               	movwf	___lldiv@divisor
 33874  05B7  0021               	movlb	1	; select bank1
 33875  05B8  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 33876  05B9  0020               	movlb	0	; select bank0
 33877  05BA  00AF               	movwf	___lldiv@dividend+3
 33878  05BB  0021               	movlb	1	; select bank1
 33879  05BC  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 33880  05BD  0020               	movlb	0	; select bank0
 33881  05BE  00AE               	movwf	___lldiv@dividend+2
 33882  05BF  0021               	movlb	1	; select bank1
 33883  05C0  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 33884  05C1  0020               	movlb	0	; select bank0
 33885  05C2  00AD               	movwf	___lldiv@dividend+1
 33886  05C3  0021               	movlb	1	; select bank1
 33887  05C4  0824               	movf	_fl_t32^(0+128),w	;volatile
 33888  05C5  0020               	movlb	0	; select bank0
 33889  05C6  00AC               	movwf	___lldiv@dividend
 33890  05C7  31AA  2268  3183   	fcall	___lldiv
 33891  05CA  0020               	movlb	0	; select bank0
 33892  05CB  082B               	movf	?___lldiv+3,w
 33893  05CC  0021               	movlb	1	; select bank1
 33894  05CD  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 33895  05CE  0020               	movlb	0	; select bank0
 33896  05CF  082A               	movf	?___lldiv+2,w
 33897  05D0  0021               	movlb	1	; select bank1
 33898  05D1  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 33899  05D2  0020               	movlb	0	; select bank0
 33900  05D3  0829               	movf	?___lldiv+1,w
 33901  05D4  0021               	movlb	1	; select bank1
 33902  05D5  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 33903  05D6  0020               	movlb	0	; select bank0
 33904  05D7  0828               	movf	?___lldiv,w
 33905  05D8  0021               	movlb	1	; select bank1
 33906  05D9  00A4               	movwf	_fl_t32^(0+128)	;volatile
 33907                           
 33908                           ;flow.c: 127: __t32=Main_flowCalibrationTable.maxFlow;
 33909  05DA  30EC               	movlw	236
 33910  05DB  0086               	movwf	6
 33911  05DC  3023               	movlw	35
 33912  05DD  0087               	movwf	7
 33913  05DE  3F40               	moviw [0]fsr1
 33914  05DF  0020               	movlb	0	; select bank0
 33915  05E0  00B7               	movwf	??_app_flow_adc_2_flow
 33916  05E1  3F41               	moviw [1]fsr1
 33917  05E2  00B8               	movwf	??_app_flow_adc_2_flow+1
 33918  05E3  0837               	movf	??_app_flow_adc_2_flow,w
 33919  05E4  0021               	movlb	1	; select bank1
 33920  05E5  00B4               	movwf	___t32^(0+128)
 33921  05E6  0020               	movlb	0	; select bank0
 33922  05E7  0838               	movf	??_app_flow_adc_2_flow+1,w
 33923  05E8  0021               	movlb	1	; select bank1
 33924  05E9  00B5               	movwf	(___t32^(0+128)+1)
 33925  05EA  01B6               	clrf	(___t32^(0+128)+2)
 33926  05EB  01B7               	clrf	(___t32^(0+128)+3)
 33927                           
 33928                           ;flow.c: 128: __t32 =__t32 * mainSystemData.smallFlowNotCare ;
 33929  05EC  0024               	movlb	4	; select bank4
 33930  05ED  0859               	movf	(_mainSystemData^(0+512)+57),w
 33931  05EE  0020               	movlb	0	; select bank0
 33932  05EF  00B7               	movwf	??_app_flow_adc_2_flow
 33933  05F0  01B8               	clrf	??_app_flow_adc_2_flow+1
 33934  05F1  01B9               	clrf	??_app_flow_adc_2_flow+2
 33935  05F2  01BA               	clrf	??_app_flow_adc_2_flow+3
 33936  05F3  083A               	movf	??_app_flow_adc_2_flow+3,w
 33937  05F4  00A3               	movwf	___lmul@multiplier+3
 33938  05F5  0839               	movf	??_app_flow_adc_2_flow+2,w
 33939  05F6  00A2               	movwf	___lmul@multiplier+2
 33940  05F7  0838               	movf	??_app_flow_adc_2_flow+1,w
 33941  05F8  00A1               	movwf	___lmul@multiplier+1
 33942  05F9  0837               	movf	??_app_flow_adc_2_flow,w
 33943  05FA  00A0               	movwf	___lmul@multiplier
 33944  05FB  0021               	movlb	1	; select bank1
 33945  05FC  0837               	movf	(___t32+3)^(0+128),w
 33946  05FD  0020               	movlb	0	; select bank0
 33947  05FE  00A7               	movwf	___lmul@multiplicand+3
 33948  05FF  0021               	movlb	1	; select bank1
 33949  0600  0836               	movf	(___t32+2)^(0+128),w
 33950  0601  0020               	movlb	0	; select bank0
 33951  0602  00A6               	movwf	___lmul@multiplicand+2
 33952  0603  0021               	movlb	1	; select bank1
 33953  0604  0835               	movf	(___t32+1)^(0+128),w
 33954  0605  0020               	movlb	0	; select bank0
 33955  0606  00A5               	movwf	___lmul@multiplicand+1
 33956  0607  0021               	movlb	1	; select bank1
 33957  0608  0834               	movf	___t32^(0+128),w
 33958  0609  0020               	movlb	0	; select bank0
 33959  060A  00A4               	movwf	___lmul@multiplicand
 33960  060B  31B3  2369  3183   	fcall	___lmul
 33961  060E  0020               	movlb	0	; select bank0
 33962  060F  0823               	movf	?___lmul+3,w
 33963  0610  0021               	movlb	1	; select bank1
 33964  0611  00B7               	movwf	(___t32+3)^(0+128)
 33965  0612  0020               	movlb	0	; select bank0
 33966  0613  0822               	movf	?___lmul+2,w
 33967  0614  0021               	movlb	1	; select bank1
 33968  0615  00B6               	movwf	(___t32+2)^(0+128)
 33969  0616  0020               	movlb	0	; select bank0
 33970  0617  0821               	movf	?___lmul+1,w
 33971  0618  0021               	movlb	1	; select bank1
 33972  0619  00B5               	movwf	(___t32+1)^(0+128)
 33973  061A  0020               	movlb	0	; select bank0
 33974  061B  0820               	movf	?___lmul,w
 33975  061C  0021               	movlb	1	; select bank1
 33976  061D  00B4               	movwf	___t32^(0+128)
 33977                           
 33978                           ;flow.c: 129: __t32 = __t32 /100;
 33979  061E  3000               	movlw	0
 33980  061F  0020               	movlb	0	; select bank0
 33981  0620  00AB               	movwf	___lldiv@divisor+3
 33982  0621  3000               	movlw	0
 33983  0622  00AA               	movwf	___lldiv@divisor+2
 33984  0623  3000               	movlw	0
 33985  0624  00A9               	movwf	___lldiv@divisor+1
 33986  0625  3064               	movlw	100
 33987  0626  00A8               	movwf	___lldiv@divisor
 33988  0627  0021               	movlb	1	; select bank1
 33989  0628  0837               	movf	(___t32+3)^(0+128),w
 33990  0629  0020               	movlb	0	; select bank0
 33991  062A  00AF               	movwf	___lldiv@dividend+3
 33992  062B  0021               	movlb	1	; select bank1
 33993  062C  0836               	movf	(___t32+2)^(0+128),w
 33994  062D  0020               	movlb	0	; select bank0
 33995  062E  00AE               	movwf	___lldiv@dividend+2
 33996  062F  0021               	movlb	1	; select bank1
 33997  0630  0835               	movf	(___t32+1)^(0+128),w
 33998  0631  0020               	movlb	0	; select bank0
 33999  0632  00AD               	movwf	___lldiv@dividend+1
 34000  0633  0021               	movlb	1	; select bank1
 34001  0634  0834               	movf	___t32^(0+128),w
 34002  0635  0020               	movlb	0	; select bank0
 34003  0636  00AC               	movwf	___lldiv@dividend
 34004  0637  31AA  2268  3183   	fcall	___lldiv
 34005  063A  0020               	movlb	0	; select bank0
 34006  063B  082B               	movf	?___lldiv+3,w
 34007  063C  0021               	movlb	1	; select bank1
 34008  063D  00B7               	movwf	(___t32+3)^(0+128)
 34009  063E  0020               	movlb	0	; select bank0
 34010  063F  082A               	movf	?___lldiv+2,w
 34011  0640  0021               	movlb	1	; select bank1
 34012  0641  00B6               	movwf	(___t32+2)^(0+128)
 34013  0642  0020               	movlb	0	; select bank0
 34014  0643  0829               	movf	?___lldiv+1,w
 34015  0644  0021               	movlb	1	; select bank1
 34016  0645  00B5               	movwf	(___t32+1)^(0+128)
 34017  0646  0020               	movlb	0	; select bank0
 34018  0647  0828               	movf	?___lldiv,w
 34019  0648  0021               	movlb	1	; select bank1
 34020  0649  00B4               	movwf	___t32^(0+128)
 34021                           
 34022                           ;flow.c: 130: if(fl_t32<__t32)return 0;
 34023  064A  0837               	movf	(___t32+3)^(0+128),w
 34024  064B  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34025  064C  1D03               	skipz
 34026  064D  2E58               	goto	u14015
 34027  064E  0836               	movf	(___t32+2)^(0+128),w
 34028  064F  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34029  0650  1D03               	skipz
 34030  0651  2E58               	goto	u14015
 34031  0652  0835               	movf	(___t32+1)^(0+128),w
 34032  0653  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34033  0654  1D03               	skipz
 34034  0655  2E58               	goto	u14015
 34035  0656  0834               	movf	___t32^(0+128),w
 34036  0657  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34037  0658                     u14015:	
 34038  0658  1803               	skipnc
 34039  0659  2E5E               	goto	l15283
 34040  065A  0020               	movlb	0	; select bank0
 34041  065B  01B5               	clrf	?_app_flow_adc_2_flow
 34042  065C  01B6               	clrf	?_app_flow_adc_2_flow+1
 34043  065D  0008               	return
 34044  065E                     l15283:	
 34045                           
 34046                           ;flow.c: 132: __t32=Main_flowCalibrationTable.maxFlow;
 34047  065E  30EC               	movlw	236
 34048  065F  0086               	movwf	6
 34049  0660  3023               	movlw	35
 34050  0661  0087               	movwf	7
 34051  0662  3F40               	moviw [0]fsr1
 34052  0663  0020               	movlb	0	; select bank0
 34053  0664  00B7               	movwf	??_app_flow_adc_2_flow
 34054  0665  3F41               	moviw [1]fsr1
 34055  0666  00B8               	movwf	??_app_flow_adc_2_flow+1
 34056  0667  0837               	movf	??_app_flow_adc_2_flow,w
 34057  0668  0021               	movlb	1	; select bank1
 34058  0669  00B4               	movwf	___t32^(0+128)
 34059  066A  0020               	movlb	0	; select bank0
 34060  066B  0838               	movf	??_app_flow_adc_2_flow+1,w
 34061  066C  0021               	movlb	1	; select bank1
 34062  066D  00B5               	movwf	(___t32^(0+128)+1)
 34063  066E  01B6               	clrf	(___t32^(0+128)+2)
 34064  066F  01B7               	clrf	(___t32^(0+128)+3)
 34065                           
 34066                           ;flow.c: 137: if(fl_t32>=__t32)fl_t32=__t32;
 34067  0670  0837               	movf	(___t32+3)^(0+128),w
 34068  0671  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34069  0672  1D03               	skipz
 34070  0673  2E7E               	goto	u14025
 34071  0674  0836               	movf	(___t32+2)^(0+128),w
 34072  0675  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34073  0676  1D03               	skipz
 34074  0677  2E7E               	goto	u14025
 34075  0678  0835               	movf	(___t32+1)^(0+128),w
 34076  0679  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34077  067A  1D03               	skipz
 34078  067B  2E7E               	goto	u14025
 34079  067C  0834               	movf	___t32^(0+128),w
 34080  067D  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34081  067E                     u14025:	
 34082  067E  1C03               	skipc
 34083  067F  2E88               	goto	l1047
 34084  0680  0837               	movf	(___t32+3)^(0+128),w
 34085  0681  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 34086  0682  0836               	movf	(___t32+2)^(0+128),w
 34087  0683  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 34088  0684  0835               	movf	(___t32+1)^(0+128),w
 34089  0685  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 34090  0686  0834               	movf	___t32^(0+128),w
 34091  0687  00A4               	movwf	_fl_t32^(0+128)	;volatile
 34092  0688                     l1047:	
 34093                           
 34094                           ;flow.c: 139: if(fl_t32>=__t32){
 34095  0688  0837               	movf	(___t32+3)^(0+128),w
 34096  0689  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 34097  068A  1D03               	skipz
 34098  068B  2E96               	goto	u14035
 34099  068C  0836               	movf	(___t32+2)^(0+128),w
 34100  068D  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 34101  068E  1D03               	skipz
 34102  068F  2E96               	goto	u14035
 34103  0690  0835               	movf	(___t32+1)^(0+128),w
 34104  0691  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 34105  0692  1D03               	skipz
 34106  0693  2E96               	goto	u14035
 34107  0694  0834               	movf	___t32^(0+128),w
 34108  0695  0224               	subwf	_fl_t32^(0+128),w	;volatile
 34109  0696                     u14035:	
 34110  0696  1C03               	skipc
 34111  0697  2E9B               	goto	l15291
 34112                           
 34113                           ;flow.c: 140: flowError=1;
 34114  0698  01C6               	clrf	_flowError^(0+128)
 34115  0699  0AC6               	incf	_flowError^(0+128),f
 34116                           
 34117                           ;flow.c: 141: }else{
 34118  069A  2E9C               	goto	l15293
 34119  069B                     l15291:	
 34120                           
 34121                           ;flow.c: 142: flowError=0;
 34122  069B  01C6               	clrf	_flowError^(0+128)
 34123  069C                     l15293:	
 34124                           
 34125                           ;flow.c: 143: }
 34126                           ;flow.c: 144: return (uint16_t)fl_t32;
 34127  069C  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 34128  069D  0020               	movlb	0	; select bank0
 34129  069E  00B6               	movwf	?_app_flow_adc_2_flow+1
 34130  069F  0021               	movlb	1	; select bank1
 34131  06A0  0824               	movf	_fl_t32^(0+128),w	;volatile
 34132  06A1  0020               	movlb	0	; select bank0
 34133  06A2  00B5               	movwf	?_app_flow_adc_2_flow
 34134  06A3  0008               	return
 34135  06A4                     __end_of_app_flow_adc_2_flow:	
 34136                           
 34137                           	psect	text137
 34138  3369                     __ptext137:	
 34139 ;; *************** function ___lmul *****************
 34140 ;; Defined at:
 34141 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul32.c"
 34142 ;; Parameters:    Size  Location     Type
 34143 ;;  multiplier      4    0[BANK0 ] unsigned long 
 34144 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 34145 ;; Auto vars:     Size  Location     Type
 34146 ;;  product         4    3[COMMON] unsigned long 
 34147 ;; Return value:  Size  Location     Type
 34148 ;;                  4    0[BANK0 ] unsigned long 
 34149 ;; Registers used:
 34150 ;;		wreg, status,2, status,0
 34151 ;; Tracked objects:
 34152 ;;		On entry : 0/0
 34153 ;;		On exit  : 0/0
 34154 ;;		Unchanged: 0/0
 34155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34156 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34157 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34159 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34160 ;;Total ram usage:       12 bytes
 34161 ;; Hardware stack levels used:    1
 34162 ;; Hardware stack levels required when called:    2
 34163 ;; This function calls:
 34164 ;;		Nothing
 34165 ;; This function is called by:
 34166 ;;		_ui_disp_flow
 34167 ;;		_app_flow_adc_2_flow
 34168 ;;		_m_math_pow
 34169 ;;		_app_flow_rt_volume_cal
 34170 ;;		_app_flow_rt_volume_cal_ex
 34171 ;;		_app_flow_rt_balance_money_cal
 34172 ;;		_getRegisterVal
 34173 ;; This function uses a non-reentrant model
 34174 ;;
 34175                           
 34176                           
 34177                           ;psect for function ___lmul
 34178  3369                     ___lmul:	
 34179                           
 34180                           ;incstack = 0
 34181                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 34182  3369  3000               	movlw	0
 34183  336A  00F6               	movwf	___lmul@product+3
 34184  336B  3000               	movlw	0
 34185  336C  00F5               	movwf	___lmul@product+2
 34186  336D  3000               	movlw	0
 34187  336E  00F4               	movwf	___lmul@product+1
 34188  336F  3000               	movlw	0
 34189  3370  00F3               	movwf	___lmul@product
 34190  3371                     l12533:	
 34191  3371  0020               	movlb	0	; select bank0
 34192  3372  1C20               	btfss	___lmul@multiplier,0
 34193  3373  2B7C               	goto	l12537
 34194  3374  0824               	movf	___lmul@multiplicand,w
 34195  3375  07F3               	addwf	___lmul@product,f
 34196  3376  0825               	movf	___lmul@multiplicand+1,w
 34197  3377  3DF4               	addwfc	___lmul@product+1,f
 34198  3378  0826               	movf	___lmul@multiplicand+2,w
 34199  3379  3DF5               	addwfc	___lmul@product+2,f
 34200  337A  0827               	movf	___lmul@multiplicand+3,w
 34201  337B  3DF6               	addwfc	___lmul@product+3,f
 34202  337C                     l12537:	
 34203  337C  3001               	movlw	1
 34204  337D                     u10815:	
 34205  337D  35A4               	lslf	___lmul@multiplicand,f
 34206  337E  0DA5               	rlf	___lmul@multiplicand+1,f
 34207  337F  0DA6               	rlf	___lmul@multiplicand+2,f
 34208  3380  0DA7               	rlf	___lmul@multiplicand+3,f
 34209  3381  0B89               	decfsz	9,f
 34210  3382  2B7D               	goto	u10815
 34211  3383  3001               	movlw	1
 34212  3384                     u10825:	
 34213  3384  36A3               	lsrf	___lmul@multiplier+3,f
 34214  3385  0CA2               	rrf	___lmul@multiplier+2,f
 34215  3386  0CA1               	rrf	___lmul@multiplier+1,f
 34216  3387  0CA0               	rrf	___lmul@multiplier,f
 34217  3388  0B89               	decfsz	9,f
 34218  3389  2B84               	goto	u10825
 34219  338A  0823               	movf	___lmul@multiplier+3,w
 34220  338B  0422               	iorwf	___lmul@multiplier+2,w
 34221  338C  0421               	iorwf	___lmul@multiplier+1,w
 34222  338D  0420               	iorwf	___lmul@multiplier,w
 34223  338E  1D03               	skipz
 34224  338F  2B71               	goto	l12533
 34225  3390  0876               	movf	___lmul@product+3,w
 34226  3391  00A3               	movwf	?___lmul+3
 34227  3392  0875               	movf	___lmul@product+2,w
 34228  3393  00A2               	movwf	?___lmul+2
 34229  3394  0874               	movf	___lmul@product+1,w
 34230  3395  00A1               	movwf	?___lmul+1
 34231  3396  0873               	movf	___lmul@product,w
 34232  3397  00A0               	movwf	?___lmul
 34233  3398  0008               	return
 34234  3399                     __end_of___lmul:	
 34235                           
 34236                           	psect	text138
 34237  2A68                     __ptext138:	
 34238 ;; *************** function ___lldiv *****************
 34239 ;; Defined at:
 34240 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 34241 ;; Parameters:    Size  Location     Type
 34242 ;;  divisor         4    8[BANK0 ] unsigned long 
 34243 ;;  dividend        4   12[BANK0 ] unsigned long 
 34244 ;; Auto vars:     Size  Location     Type
 34245 ;;  quotient        4   16[BANK0 ] unsigned long 
 34246 ;;  counter         1   20[BANK0 ] unsigned char 
 34247 ;; Return value:  Size  Location     Type
 34248 ;;                  4    8[BANK0 ] unsigned long 
 34249 ;; Registers used:
 34250 ;;		wreg, status,2, status,0
 34251 ;; Tracked objects:
 34252 ;;		On entry : 0/0
 34253 ;;		On exit  : 0/0
 34254 ;;		Unchanged: 0/0
 34255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34256 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 34257 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 34258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34259 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0
 34260 ;;Total ram usage:       14 bytes
 34261 ;; Hardware stack levels used:    1
 34262 ;; Hardware stack levels required when called:    2
 34263 ;; This function calls:
 34264 ;;		Nothing
 34265 ;; This function is called by:
 34266 ;;		_ui_disp_flow
 34267 ;;		_app_flow_adc_2_flow
 34268 ;;		_app_flow_rt_volume_cal_ex
 34269 ;;		_app_flow_rt_balance_money_cal
 34270 ;;		_app_flow_get_adcAverageValue
 34271 ;;		_app_flow_rt_volume_cal
 34272 ;;		_ui_disp_transfer_money
 34273 ;;		_getRegisterVal
 34274 ;; This function uses a non-reentrant model
 34275 ;;
 34276                           
 34277                           
 34278                           ;psect for function ___lldiv
 34279  2A68                     ___lldiv:	
 34280                           
 34281                           ;incstack = 0
 34282                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 34283  2A68  3000               	movlw	0
 34284  2A69  0020               	movlb	0	; select bank0
 34285  2A6A  00B3               	movwf	___lldiv@quotient+3
 34286  2A6B  3000               	movlw	0
 34287  2A6C  00B2               	movwf	___lldiv@quotient+2
 34288  2A6D  3000               	movlw	0
 34289  2A6E  00B1               	movwf	___lldiv@quotient+1
 34290  2A6F  3000               	movlw	0
 34291  2A70  00B0               	movwf	___lldiv@quotient
 34292  2A71  082B               	movf	___lldiv@divisor+3,w
 34293  2A72  042A               	iorwf	___lldiv@divisor+2,w
 34294  2A73  0429               	iorwf	___lldiv@divisor+1,w
 34295  2A74  0428               	iorwf	___lldiv@divisor,w
 34296  2A75  1903               	skipnz
 34297  2A76  2AB2               	goto	l13217
 34298  2A77  01B4               	clrf	___lldiv@counter
 34299  2A78  0AB4               	incf	___lldiv@counter,f
 34300  2A79                     l13203:	
 34301  2A79  1BAB               	btfsc	___lldiv@divisor+3,7
 34302  2A7A  2A87               	goto	l13205
 34303  2A7B  3001               	movlw	1
 34304  2A7C                     u11865:	
 34305  2A7C  35A8               	lslf	___lldiv@divisor,f
 34306  2A7D  0DA9               	rlf	___lldiv@divisor+1,f
 34307  2A7E  0DAA               	rlf	___lldiv@divisor+2,f
 34308  2A7F  0DAB               	rlf	___lldiv@divisor+3,f
 34309  2A80  0B89               	decfsz	9,f
 34310  2A81  2A7C               	goto	u11865
 34311  2A82  3001               	movlw	1
 34312  2A83  00F7               	movwf	??___lldiv
 34313  2A84  0877               	movf	??___lldiv,w
 34314  2A85  07B4               	addwf	___lldiv@counter,f
 34315  2A86  2A79               	goto	l13203
 34316  2A87                     l13205:	
 34317  2A87  3001               	movlw	1
 34318  2A88                     u11885:	
 34319  2A88  35B0               	lslf	___lldiv@quotient,f
 34320  2A89  0DB1               	rlf	___lldiv@quotient+1,f
 34321  2A8A  0DB2               	rlf	___lldiv@quotient+2,f
 34322  2A8B  0DB3               	rlf	___lldiv@quotient+3,f
 34323  2A8C  0B89               	decfsz	9,f
 34324  2A8D  2A88               	goto	u11885
 34325  2A8E  082B               	movf	___lldiv@divisor+3,w
 34326  2A8F  022F               	subwf	___lldiv@dividend+3,w
 34327  2A90  1D03               	skipz
 34328  2A91  2A9C               	goto	u11895
 34329  2A92  082A               	movf	___lldiv@divisor+2,w
 34330  2A93  022E               	subwf	___lldiv@dividend+2,w
 34331  2A94  1D03               	skipz
 34332  2A95  2A9C               	goto	u11895
 34333  2A96  0829               	movf	___lldiv@divisor+1,w
 34334  2A97  022D               	subwf	___lldiv@dividend+1,w
 34335  2A98  1D03               	skipz
 34336  2A99  2A9C               	goto	u11895
 34337  2A9A  0828               	movf	___lldiv@divisor,w
 34338  2A9B  022C               	subwf	___lldiv@dividend,w
 34339  2A9C                     u11895:	
 34340  2A9C  1C03               	skipc
 34341  2A9D  2AA7               	goto	l13213
 34342  2A9E  0828               	movf	___lldiv@divisor,w
 34343  2A9F  02AC               	subwf	___lldiv@dividend,f
 34344  2AA0  0829               	movf	___lldiv@divisor+1,w
 34345  2AA1  3BAD               	subwfb	___lldiv@dividend+1,f
 34346  2AA2  082A               	movf	___lldiv@divisor+2,w
 34347  2AA3  3BAE               	subwfb	___lldiv@dividend+2,f
 34348  2AA4  082B               	movf	___lldiv@divisor+3,w
 34349  2AA5  3BAF               	subwfb	___lldiv@dividend+3,f
 34350  2AA6  1430               	bsf	___lldiv@quotient,0
 34351  2AA7                     l13213:	
 34352  2AA7  3001               	movlw	1
 34353  2AA8                     u11905:	
 34354  2AA8  36AB               	lsrf	___lldiv@divisor+3,f
 34355  2AA9  0CAA               	rrf	___lldiv@divisor+2,f
 34356  2AAA  0CA9               	rrf	___lldiv@divisor+1,f
 34357  2AAB  0CA8               	rrf	___lldiv@divisor,f
 34358  2AAC  0B89               	decfsz	9,f
 34359  2AAD  2AA8               	goto	u11905
 34360  2AAE  3001               	movlw	1
 34361  2AAF  02B4               	subwf	___lldiv@counter,f
 34362  2AB0  1D03               	btfss	3,2
 34363  2AB1  2A87               	goto	l13205
 34364  2AB2                     l13217:	
 34365  2AB2  0833               	movf	___lldiv@quotient+3,w
 34366  2AB3  00AB               	movwf	?___lldiv+3
 34367  2AB4  0832               	movf	___lldiv@quotient+2,w
 34368  2AB5  00AA               	movwf	?___lldiv+2
 34369  2AB6  0831               	movf	___lldiv@quotient+1,w
 34370  2AB7  00A9               	movwf	?___lldiv+1
 34371  2AB8  0830               	movf	___lldiv@quotient,w
 34372  2AB9  00A8               	movwf	?___lldiv
 34373  2ABA  0008               	return
 34374  2ABB                     __end_of___lldiv:	
 34375                           
 34376                           	psect	text139
 34377  3339                     __ptext139:	
 34378 ;; *************** function _adc_mcp3241_start_convert_16 *****************
 34379 ;; Defined at:
 34380 ;;		line 11 in file "src/driver/adc-mcp3421.c"
 34381 ;; Parameters:    Size  Location     Type
 34382 ;;  b               1    wreg     unsigned char 
 34383 ;;  g               1    2[BANK0 ] unsigned char 
 34384 ;; Auto vars:     Size  Location     Type
 34385 ;;  b               1    4[BANK0 ] unsigned char 
 34386 ;;  t8              1    5[BANK0 ] unsigned char 
 34387 ;; Return value:  Size  Location     Type
 34388 ;;                  1    wreg      void 
 34389 ;; Registers used:
 34390 ;;		wreg, status,2, status,0, pclath, cstack
 34391 ;; Tracked objects:
 34392 ;;		On entry : 0/0
 34393 ;;		On exit  : 0/0
 34394 ;;		Unchanged: 0/0
 34395 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34396 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 34397 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34398 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 34399 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 34400 ;;Total ram usage:        4 bytes
 34401 ;; Hardware stack levels used:    1
 34402 ;; Hardware stack levels required when called:    6
 34403 ;; This function calls:
 34404 ;;		_iic_send_byte
 34405 ;;		_iic_start
 34406 ;;		_iic_stop
 34407 ;; This function is called by:
 34408 ;;		_flow_sampling_process
 34409 ;; This function uses a non-reentrant model
 34410 ;;
 34411                           
 34412                           
 34413                           ;psect for function _adc_mcp3241_start_convert_16
 34414  3339                     _adc_mcp3241_start_convert_16:	
 34415                           
 34416                           ;incstack = 0
 34417                           ; Regs used in _adc_mcp3241_start_convert_16: [wreg+status,2+status,0+pclath+cstack]
 34418                           ;adc_mcp3241_start_convert_16@b stored from wreg
 34419  3339  0020               	movlb	0	; select bank0
 34420  333A  00A4               	movwf	adc_mcp3241_start_convert_16@b
 34421                           
 34422                           ;adc-mcp3421.c: 13: uint8_t t8=b;
 34423  333B  0824               	movf	adc_mcp3241_start_convert_16@b,w
 34424  333C  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34425  333D  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34426  333E  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 34427                           
 34428                           ;adc-mcp3421.c: 14: do{do { TRISDbits.TRISD6 = 0; } while(0);}while(0);;
 34429  333F  0021               	movlb	1	; select bank1
 34430  3340  130F               	bcf	15,6	;volatile
 34431                           
 34432                           ;adc-mcp3421.c: 15: iic_start();
 34433  3341  31BC  24F7  31B3   	fcall	_iic_start
 34434                           
 34435                           ;adc-mcp3421.c: 17: iic_send_byte((0xd0));
 34436  3344  30D0               	movlw	208
 34437  3345  31B3  2309  31B3   	fcall	_iic_send_byte
 34438                           
 34439                           ;adc-mcp3421.c: 18: if(t8>=2)t8=2;
 34440  3348  3002               	movlw	2
 34441  3349  0020               	movlb	0	; select bank0
 34442  334A  0225               	subwf	adc_mcp3241_start_convert_16@t8,w
 34443  334B  1C03               	skipc
 34444  334C  2B52               	goto	L13
 34445  334D  3002               	movlw	2
 34446  334E  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34447  334F  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34448  3350  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 34449                           
 34450                           ;adc-mcp3421.c: 19: t8<<=2;
 34451  3351  1003               	clrc
 34452  3352                     L13:	
 34453  3352  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 34454  3353  1003               	clrc
 34455  3354  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 34456                           
 34457                           ;adc-mcp3421.c: 20: t8 |= (g & 0x03);
 34458  3355  0822               	movf	adc_mcp3241_start_convert_16@g,w
 34459  3356  3903               	andlw	3
 34460  3357  00A3               	movwf	??_adc_mcp3241_start_convert_16
 34461  3358  0823               	movf	??_adc_mcp3241_start_convert_16,w
 34462  3359  04A5               	iorwf	adc_mcp3241_start_convert_16@t8,f
 34463                           
 34464                           ;adc-mcp3421.c: 21: iic_send_byte(0x80 | t8);
 34465  335A  0825               	movf	adc_mcp3241_start_convert_16@t8,w
 34466  335B  3880               	iorlw	128
 34467  335C  31B3  2309  31B3   	fcall	_iic_send_byte
 34468                           
 34469                           ;adc-mcp3421.c: 22: iic_stop();
 34470  335F  31BC  24E1         	fcall	_iic_stop
 34471                           
 34472                           ;adc-mcp3421.c: 23: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 34473  3361  130B               	bcf	11,6	;volatile
 34474  3362  138B               	bcf	11,7	;volatile
 34475                           
 34476                           ;adc-mcp3421.c: 25: adcSamplingTimerOneTime=0;
 34477  3363  0022               	movlb	2	; select bank2
 34478  3364  01A6               	clrf	_adcSamplingTimerOneTime^(0+256)	;volatile
 34479  3365  01A7               	clrf	(_adcSamplingTimerOneTime+1)^(0+256)	;volatile
 34480                           
 34481                           ;adc-mcp3421.c: 26: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 34482  3366  178B               	bsf	11,7	;volatile
 34483  3367  170B               	bsf	11,6	;volatile
 34484  3368  0008               	return
 34485  3369                     __end_of_adc_mcp3241_start_convert_16:	
 34486                           
 34487                           	psect	text140
 34488  35C9                     __ptext140:	
 34489 ;; *************** function _adc_mcp3241_read_convert_16 *****************
 34490 ;; Defined at:
 34491 ;;		line 28 in file "src/driver/adc-mcp3421.c"
 34492 ;; Parameters:    Size  Location     Type
 34493 ;;  sta             1    wreg     PTR unsigned char 
 34494 ;;		 -> flow_sampling_process@i(1), 
 34495 ;; Auto vars:     Size  Location     Type
 34496 ;;  sta             1    6[BANK0 ] PTR unsigned char 
 34497 ;;		 -> flow_sampling_process@i(1), 
 34498 ;;  t16             2    7[BANK0 ] volatile unsigned int 
 34499 ;; Return value:  Size  Location     Type
 34500 ;;                  2    2[BANK0 ] unsigned int 
 34501 ;; Registers used:
 34502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 34503 ;; Tracked objects:
 34504 ;;		On entry : 0/0
 34505 ;;		On exit  : 0/0
 34506 ;;		Unchanged: 0/0
 34507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34508 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34509 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 34510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34511 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 34512 ;;Total ram usage:        7 bytes
 34513 ;; Hardware stack levels used:    1
 34514 ;; Hardware stack levels required when called:    6
 34515 ;; This function calls:
 34516 ;;		_iic_received_byte_if_ack
 34517 ;;		_iic_send_byte
 34518 ;;		_iic_start
 34519 ;;		_iic_stop
 34520 ;; This function is called by:
 34521 ;;		_flow_sampling_process
 34522 ;; This function uses a non-reentrant model
 34523 ;;
 34524                           
 34525                           
 34526                           ;psect for function _adc_mcp3241_read_convert_16
 34527  35C9                     _adc_mcp3241_read_convert_16:	
 34528                           
 34529                           ;incstack = 0
 34530                           ; Regs used in _adc_mcp3241_read_convert_16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 34531                           ;adc_mcp3241_read_convert_16@sta stored from wreg
 34532  35C9  0020               	movlb	0	; select bank0
 34533  35CA  00A6               	movwf	adc_mcp3241_read_convert_16@sta
 34534                           
 34535                           ;adc-mcp3421.c: 30: volatile uint16_t t16=0;
 34536  35CB  01A7               	clrf	adc_mcp3241_read_convert_16@t16	;volatile
 34537  35CC  01A8               	clrf	adc_mcp3241_read_convert_16@t16+1	;volatile
 34538                           
 34539                           ;adc-mcp3421.c: 31: iic_start();
 34540  35CD  31BC  24F7  31B5   	fcall	_iic_start
 34541                           
 34542                           ;adc-mcp3421.c: 32: iic_send_byte((0xd0) | 0x01);
 34543  35D0  30D1               	movlw	209
 34544  35D1  31B3  2309  31B5   	fcall	_iic_send_byte
 34545                           
 34546                           ;adc-mcp3421.c: 33: t16 |= iic_received_byte_if_ack(IIC_ACK);
 34547  35D4  3000               	movlw	0
 34548  35D5  31BB  23D2  31B5   	fcall	_iic_received_byte_if_ack
 34549  35D8  0020               	movlb	0	; select bank0
 34550  35D9  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34551  35DA  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 34552  35DB  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34553  35DC  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34554  35DD  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 34555  35DE  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34556                           
 34557                           ;adc-mcp3421.c: 34: t16 <<=8;
 34558  35DF  3008               	movlw	8
 34559  35E0                     u14135:	
 34560  35E0  35A7               	lslf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34561  35E1  0DA8               	rlf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34562  35E2  0B89               	decfsz	9,f
 34563  35E3  2DE0               	goto	u14135
 34564                           
 34565                           ;adc-mcp3421.c: 35: t16 |= iic_received_byte_if_ack(IIC_ACK);
 34566  35E4  3000               	movlw	0
 34567  35E5  31BB  23D2  31B5   	fcall	_iic_received_byte_if_ack
 34568  35E8  0020               	movlb	0	; select bank0
 34569  35E9  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34570  35EA  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 34571  35EB  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34572  35EC  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 34573  35ED  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 34574  35EE  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 34575                           
 34576                           ;adc-mcp3421.c: 36: *sta=iic_received_byte_if_ack(IIC_NACK);
 34577  35EF  3001               	movlw	1
 34578  35F0  31BB  23D2  31B5   	fcall	_iic_received_byte_if_ack
 34579  35F3  0020               	movlb	0	; select bank0
 34580  35F4  00A4               	movwf	??_adc_mcp3241_read_convert_16
 34581  35F5  0826               	movf	adc_mcp3241_read_convert_16@sta,w
 34582  35F6  0086               	movwf	6
 34583  35F7  0187               	clrf	7
 34584  35F8  0824               	movf	??_adc_mcp3241_read_convert_16,w
 34585  35F9  0081               	movwf	1
 34586                           
 34587                           ;adc-mcp3421.c: 37: iic_stop();
 34588  35FA  31BC  24E1         	fcall	_iic_stop
 34589                           
 34590                           ;adc-mcp3421.c: 39: return t16;
 34591  35FC  0020               	movlb	0	; select bank0
 34592  35FD  0828               	movf	adc_mcp3241_read_convert_16@t16+1,w	;volatile
 34593  35FE  00A3               	movwf	?_adc_mcp3241_read_convert_16+1
 34594  35FF  0827               	movf	adc_mcp3241_read_convert_16@t16,w	;volatile
 34595  3600  00A2               	movwf	?_adc_mcp3241_read_convert_16
 34596  3601  0008               	return
 34597  3602                     __end_of_adc_mcp3241_read_convert_16:	
 34598                           
 34599                           	psect	text141
 34600  3CF7                     __ptext141:	
 34601 ;; *************** function _iic_start *****************
 34602 ;; Defined at:
 34603 ;;		line 29 in file "src/driver/i2c.c"
 34604 ;; Parameters:    Size  Location     Type
 34605 ;;		None
 34606 ;; Auto vars:     Size  Location     Type
 34607 ;;		None
 34608 ;; Return value:  Size  Location     Type
 34609 ;;                  1    wreg      void 
 34610 ;; Registers used:
 34611 ;;		wreg, status,2, status,0, pclath, cstack
 34612 ;; Tracked objects:
 34613 ;;		On entry : 0/0
 34614 ;;		On exit  : 0/0
 34615 ;;		Unchanged: 0/0
 34616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34621 ;;Total ram usage:        0 bytes
 34622 ;; Hardware stack levels used:    1
 34623 ;; Hardware stack levels required when called:    3
 34624 ;; This function calls:
 34625 ;;		_delay
 34626 ;; This function is called by:
 34627 ;;		_adc_mcp3241_start_convert_16
 34628 ;;		_adc_mcp3241_read_convert_16
 34629 ;;		_iic_read_byte
 34630 ;;		_iic_write_byte
 34631 ;;		_iic_write_n_byte
 34632 ;; This function uses a non-reentrant model
 34633 ;;
 34634                           
 34635                           
 34636                           ;psect for function _iic_start
 34637  3CF7                     _iic_start:	
 34638                           
 34639                           ;incstack = 0
 34640                           ; Regs used in _iic_start: [wreg+status,2+status,0+pclath+cstack]
 34641                           ;i2c.c: 31: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34642  3CF7  0021               	movlb	1	; select bank1
 34643  3CF8  128F               	bcf	15,5	;volatile
 34644                           
 34645                           ;i2c.c: 32: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34646  3CF9  0022               	movlb	2	; select bank2
 34647  3CFA  168F               	bsf	15,5	;volatile
 34648                           
 34649                           ;i2c.c: 33: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34650  3CFB  170F               	bsf	15,6	;volatile
 34651                           
 34652                           ;i2c.c: 34: delay(2);
 34653  3CFC  3002               	movlw	2
 34654  3CFD  00F3               	movwf	delay@t
 34655  3CFE  3000               	movlw	0
 34656  3CFF  00F4               	movwf	delay@t+1
 34657  3D00  31BB  2389  31BC   	fcall	_delay
 34658                           
 34659                           ;i2c.c: 35: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34660  3D03  0022               	movlb	2	; select bank2
 34661  3D04  128F               	bcf	15,5	;volatile
 34662                           
 34663                           ;i2c.c: 36: delay(2);
 34664  3D05  3002               	movlw	2
 34665  3D06  00F3               	movwf	delay@t
 34666  3D07  3000               	movlw	0
 34667  3D08  00F4               	movwf	delay@t+1
 34668  3D09  31BB  2389         	fcall	_delay
 34669                           
 34670                           ;i2c.c: 37: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34671  3D0B  0022               	movlb	2	; select bank2
 34672  3D0C  130F               	bcf	15,6	;volatile
 34673  3D0D  0008               	return
 34674  3D0E                     __end_of_iic_start:	
 34675                           
 34676                           	psect	text142
 34677  3309                     __ptext142:	
 34678 ;; *************** function _iic_send_byte *****************
 34679 ;; Defined at:
 34680 ;;		line 91 in file "src/driver/i2c.c"
 34681 ;; Parameters:    Size  Location     Type
 34682 ;;  x               1    wreg     unsigned char 
 34683 ;; Auto vars:     Size  Location     Type
 34684 ;;  x               1    0[BANK0 ] unsigned char 
 34685 ;;  i               1    1[BANK0 ] unsigned char 
 34686 ;; Return value:  Size  Location     Type
 34687 ;;                  1    wreg      unsigned char 
 34688 ;; Registers used:
 34689 ;;		wreg, status,2, status,0, pclath, cstack
 34690 ;; Tracked objects:
 34691 ;;		On entry : 0/0
 34692 ;;		On exit  : 0/0
 34693 ;;		Unchanged: 0/0
 34694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34696 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34698 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 34699 ;;Total ram usage:        3 bytes
 34700 ;; Hardware stack levels used:    1
 34701 ;; Hardware stack levels required when called:    5
 34702 ;; This function calls:
 34703 ;;		_iic_waite_ack
 34704 ;; This function is called by:
 34705 ;;		_adc_mcp3241_start_convert_16
 34706 ;;		_adc_mcp3241_read_convert_16
 34707 ;;		_iic_read_byte
 34708 ;;		_iic_write_byte
 34709 ;;		_iic_write_n_byte
 34710 ;; This function uses a non-reentrant model
 34711 ;;
 34712                           
 34713                           
 34714                           ;psect for function _iic_send_byte
 34715  3309                     _iic_send_byte:	
 34716                           
 34717                           ;incstack = 0
 34718                           ; Regs used in _iic_send_byte: [wreg+status,2+status,0+pclath+cstack]
 34719                           ;iic_send_byte@x stored from wreg
 34720  3309  0020               	movlb	0	; select bank0
 34721  330A  00A0               	movwf	iic_send_byte@x
 34722                           
 34723                           ;i2c.c: 93: uint8_t i;
 34724                           ;i2c.c: 95: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34725  330B  0021               	movlb	1	; select bank1
 34726  330C  128F               	bcf	15,5	;volatile
 34727                           
 34728                           ;i2c.c: 96: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34729  330D  0022               	movlb	2	; select bank2
 34730  330E  130F               	bcf	15,6	;volatile
 34731                           
 34732                           ;i2c.c: 97: for(i=0;i<8;i++)
 34733  330F  0020               	movlb	0	; select bank0
 34734  3310  01A1               	clrf	iic_send_byte@i
 34735  3311  3008               	movlw	8
 34736  3312  0221               	subwf	iic_send_byte@i,w
 34737  3313  1803               	btfsc	3,0
 34738  3314  2B36               	goto	l14507
 34739  3315                     l1827:	
 34740                           
 34741                           ;i2c.c: 98: {
 34742                           ;i2c.c: 99: if(x&0x80){
 34743  3315  1FA0               	btfss	iic_send_byte@x,7
 34744  3316  2B1A               	goto	l1836
 34745                           
 34746                           ;i2c.c: 100: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34747  3317  0022               	movlb	2	; select bank2
 34748  3318  168F               	bsf	15,5	;volatile
 34749                           
 34750                           ;i2c.c: 101: }
 34751  3319  2B1C               	goto	l1840
 34752  331A                     l1836:	
 34753                           ;i2c.c: 102: else{
 34754                           ;i2c.c: 103: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34755                           
 34756  331A  0022               	movlb	2	; select bank2
 34757  331B  128F               	bcf	15,5	;volatile
 34758  331C                     l1840:	
 34759                           ;i2c.c: 104: }
 34760                           ;i2c.c: 105: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34761                           
 34762  331C  170F               	bsf	15,6	;volatile
 34763                           
 34764                           ;i2c.c: 106: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34765  331D  0000               	nop
 34766  331E  0000               	nop
 34767  331F  0000               	nop
 34768  3320  0000               	nop
 34769  3321  0000               	nop
 34770  3322  0000               	nop
 34771                           
 34772                           ;i2c.c: 107: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34773  3323  0022               	movlb	2	; select bank2
 34774  3324  130F               	bcf	15,6	;volatile
 34775                           
 34776                           ;i2c.c: 108: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34777  3325  0000               	nop
 34778  3326  0000               	nop
 34779  3327  0000               	nop
 34780  3328  0000               	nop
 34781  3329  0000               	nop
 34782  332A  0000               	nop
 34783                           
 34784                           ;i2c.c: 109: x<<=1;
 34785  332B  1003               	clrc
 34786  332C  0020               	movlb	0	; select bank0
 34787  332D  0DA0               	rlf	iic_send_byte@x,f
 34788  332E  3001               	movlw	1
 34789  332F  00F7               	movwf	??_iic_send_byte
 34790  3330  0877               	movf	??_iic_send_byte,w
 34791  3331  07A1               	addwf	iic_send_byte@i,f
 34792  3332  3008               	movlw	8
 34793  3333  0221               	subwf	iic_send_byte@i,w
 34794  3334  1C03               	skipc
 34795  3335  2B15               	goto	l1827
 34796  3336                     l14507:	
 34797                           
 34798                           ;i2c.c: 110: }
 34799                           ;i2c.c: 111: return iic_waite_ack();
 34800                           ;	Return value of _iic_send_byte is never used
 34801  3336  31B0  2068         	fcall	_iic_waite_ack
 34802  3338  0008               	return
 34803  3339                     __end_of_iic_send_byte:	
 34804                           
 34805                           	psect	text143
 34806  3068                     __ptext143:	
 34807 ;; *************** function _iic_waite_ack *****************
 34808 ;; Defined at:
 34809 ;;		line 70 in file "src/driver/i2c.c"
 34810 ;; Parameters:    Size  Location     Type
 34811 ;;		None
 34812 ;; Auto vars:     Size  Location     Type
 34813 ;;  timeout         1    6[COMMON] unsigned char 
 34814 ;; Return value:  Size  Location     Type
 34815 ;;                  1    wreg      unsigned char 
 34816 ;; Registers used:
 34817 ;;		wreg, status,2, status,0, pclath, cstack
 34818 ;; Tracked objects:
 34819 ;;		On entry : 0/0
 34820 ;;		On exit  : 0/0
 34821 ;;		Unchanged: 0/0
 34822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34825 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34826 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34827 ;;Total ram usage:        2 bytes
 34828 ;; Hardware stack levels used:    1
 34829 ;; Hardware stack levels required when called:    4
 34830 ;; This function calls:
 34831 ;;		_iic_stop
 34832 ;; This function is called by:
 34833 ;;		_iic_send_byte
 34834 ;; This function uses a non-reentrant model
 34835 ;;
 34836                           
 34837                           
 34838                           ;psect for function _iic_waite_ack
 34839  3068                     _iic_waite_ack:	
 34840                           
 34841                           ;i2c.c: 72: uint8_t timeout=200;
 34842                           
 34843                           ;incstack = 0
 34844                           ; Regs used in _iic_waite_ack: [wreg+status,2+status,0+pclath+cstack]
 34845  3068  30C8               	movlw	200
 34846  3069  00F5               	movwf	??_iic_waite_ack
 34847  306A  0875               	movf	??_iic_waite_ack,w
 34848  306B  00F6               	movwf	iic_waite_ack@timeout
 34849                           
 34850                           ;i2c.c: 73: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 34851  306C  0021               	movlb	1	; select bank1
 34852  306D  168F               	bsf	15,5	;volatile
 34853                           
 34854                           ;i2c.c: 74: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34855  306E  0022               	movlb	2	; select bank2
 34856  306F  130F               	bcf	15,6	;volatile
 34857                           
 34858                           ;i2c.c: 75: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34859  3070  0000               	nop
 34860  3071  0000               	nop
 34861  3072  0000               	nop
 34862  3073  0000               	nop
 34863  3074  0000               	nop
 34864  3075  0000               	nop
 34865                           
 34866                           ;i2c.c: 76: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34867  3076  0022               	movlb	2	; select bank2
 34868  3077  170F               	bsf	15,6	;volatile
 34869                           
 34870                           ;i2c.c: 77: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 34871  3078  0000               	nop
 34872  3079  0000               	nop
 34873  307A  0000               	nop
 34874  307B  0000               	nop
 34875  307C  0000               	nop
 34876  307D  0000               	nop
 34877  307E                     l13919:	
 34878                           ;i2c.c: 78: while(timeout--)
 34879                           
 34880  307E  3001               	movlw	1
 34881  307F  02F6               	subwf	iic_waite_ack@timeout,f
 34882  3080  0A76               	incf	iic_waite_ack@timeout,w
 34883  3081  1903               	btfsc	3,2
 34884  3082  2886               	goto	l13921
 34885                           
 34886                           ;i2c.c: 79: {
 34887                           ;i2c.c: 80: if(!PORTDbits.RD5)break;
 34888  3083  0020               	movlb	0	; select bank0
 34889  3084  1A8F               	btfsc	15,5	;volatile
 34890  3085  287E               	goto	l13919
 34891  3086                     l13921:	
 34892                           
 34893                           ;i2c.c: 81: }
 34894                           ;i2c.c: 82: if(!timeout)
 34895  3086  0876               	movf	iic_waite_ack@timeout,w
 34896  3087  1D03               	btfss	3,2
 34897  3088  288D               	goto	l1814
 34898                           
 34899                           ;i2c.c: 83: {
 34900                           ;i2c.c: 84: iic_stop();
 34901  3089  31BC  24E1         	fcall	_iic_stop
 34902                           
 34903                           ;i2c.c: 85: return 0;
 34904  308B  3000               	movlw	0
 34905  308C  0008               	return
 34906  308D                     l1814:	
 34907                           ;i2c.c: 86: }
 34908                           ;i2c.c: 87: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 34909                           
 34910  308D  0022               	movlb	2	; select bank2
 34911  308E  130F               	bcf	15,6	;volatile
 34912                           
 34913                           ;i2c.c: 88: return 1;
 34914  308F  3001               	movlw	1
 34915  3090  0008               	return
 34916  3091                     __end_of_iic_waite_ack:	
 34917                           
 34918                           	psect	text144
 34919  3CE1                     __ptext144:	
 34920 ;; *************** function _iic_stop *****************
 34921 ;; Defined at:
 34922 ;;		line 41 in file "src/driver/i2c.c"
 34923 ;; Parameters:    Size  Location     Type
 34924 ;;		None
 34925 ;; Auto vars:     Size  Location     Type
 34926 ;;		None
 34927 ;; Return value:  Size  Location     Type
 34928 ;;                  1    wreg      void 
 34929 ;; Registers used:
 34930 ;;		wreg, status,2, status,0, pclath, cstack
 34931 ;; Tracked objects:
 34932 ;;		On entry : 0/0
 34933 ;;		On exit  : 0/0
 34934 ;;		Unchanged: 0/0
 34935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 34936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 34940 ;;Total ram usage:        0 bytes
 34941 ;; Hardware stack levels used:    1
 34942 ;; Hardware stack levels required when called:    3
 34943 ;; This function calls:
 34944 ;;		_delay
 34945 ;; This function is called by:
 34946 ;;		_iic_waite_ack
 34947 ;;		_adc_mcp3241_start_convert_16
 34948 ;;		_adc_mcp3241_read_convert_16
 34949 ;;		_iic_read_byte
 34950 ;;		_iic_write_byte
 34951 ;;		_iic_write_n_byte
 34952 ;; This function uses a non-reentrant model
 34953 ;;
 34954                           
 34955                           
 34956                           ;psect for function _iic_stop
 34957  3CE1                     _iic_stop:	
 34958                           
 34959                           ;incstack = 0
 34960                           ; Regs used in _iic_stop: [wreg+status,2+status,0+pclath+cstack]
 34961                           ;i2c.c: 43: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 34962  3CE1  0021               	movlb	1	; select bank1
 34963  3CE2  128F               	bcf	15,5	;volatile
 34964                           
 34965                           ;i2c.c: 44: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 34966  3CE3  0022               	movlb	2	; select bank2
 34967  3CE4  128F               	bcf	15,5	;volatile
 34968                           
 34969                           ;i2c.c: 45: delay(2);
 34970  3CE5  3002               	movlw	2
 34971  3CE6  00F3               	movwf	delay@t
 34972  3CE7  3000               	movlw	0
 34973  3CE8  00F4               	movwf	delay@t+1
 34974  3CE9  31BB  2389  31BC   	fcall	_delay
 34975                           
 34976                           ;i2c.c: 46: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 34977  3CEC  0022               	movlb	2	; select bank2
 34978  3CED  170F               	bsf	15,6	;volatile
 34979                           
 34980                           ;i2c.c: 47: delay(2);
 34981  3CEE  3002               	movlw	2
 34982  3CEF  00F3               	movwf	delay@t
 34983  3CF0  3000               	movlw	0
 34984  3CF1  00F4               	movwf	delay@t+1
 34985  3CF2  31BB  2389         	fcall	_delay
 34986                           
 34987                           ;i2c.c: 48: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 34988  3CF4  0022               	movlb	2	; select bank2
 34989  3CF5  168F               	bsf	15,5	;volatile
 34990  3CF6  0008               	return
 34991  3CF7                     __end_of_iic_stop:	
 34992                           
 34993                           	psect	text145
 34994  3B89                     __ptext145:	
 34995 ;; *************** function _delay *****************
 34996 ;; Defined at:
 34997 ;;		line 5 in file "src/depend/delay.c"
 34998 ;; Parameters:    Size  Location     Type
 34999 ;;  t               2    3[COMMON] unsigned int 
 35000 ;; Auto vars:     Size  Location     Type
 35001 ;;		None
 35002 ;; Return value:  Size  Location     Type
 35003 ;;                  1    wreg      void 
 35004 ;; Registers used:
 35005 ;;		wreg, status,2, status,0
 35006 ;; Tracked objects:
 35007 ;;		On entry : 0/0
 35008 ;;		On exit  : 0/0
 35009 ;;		Unchanged: 0/0
 35010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35011 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35014 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35015 ;;Total ram usage:        2 bytes
 35016 ;; Hardware stack levels used:    1
 35017 ;; Hardware stack levels required when called:    2
 35018 ;; This function calls:
 35019 ;;		Nothing
 35020 ;; This function is called by:
 35021 ;;		_rfid_comm_process
 35022 ;;		_key_scan_call
 35023 ;;		_iic_start
 35024 ;;		_iic_stop
 35025 ;;		_mfrc522_hal_init
 35026 ;;		_main
 35027 ;;		_led_all_test
 35028 ;;		_m_system_start_self_test
 35029 ;; This function uses a non-reentrant model
 35030 ;;
 35031                           
 35032                           
 35033                           ;psect for function _delay
 35034  3B89                     _delay:	
 35035  3B89                     l13071:	
 35036                           ;delay.c: 7: while(t--)
 35037                           
 35038                           ;incstack = 0
 35039                           ; Regs used in _delay: [wreg+status,2+status,0]
 35040                           
 35041  3B89  3001               	movlw	1
 35042  3B8A  02F3               	subwf	delay@t,f
 35043  3B8B  3000               	movlw	0
 35044  3B8C  3BF4               	subwfb	delay@t+1,f
 35045  3B8D  0A73               	incf	delay@t,w
 35046  3B8E  1903               	btfsc	3,2
 35047  3B8F  0A74               	incf	delay@t+1,w
 35048  3B90  1903               	btfsc	3,2
 35049  3B91  0008               	return
 35050                           
 35051                           ;delay.c: 8: {
 35052                           ;delay.c: 9: __nop();
 35053  3B92  0000               	nop
 35054                           
 35055                           ;delay.c: 10: __nop();
 35056  3B93  0000               	nop
 35057                           
 35058                           ;delay.c: 11: __nop();
 35059  3B94  0000               	nop
 35060                           
 35061                           ;delay.c: 12: __nop();
 35062  3B95  0000               	nop
 35063  3B96  2B89               	goto	l13071
 35064  3B97                     __end_of_delay:	
 35065                           
 35066                           	psect	text146
 35067  3BD2                     __ptext146:	
 35068 ;; *************** function _iic_received_byte_if_ack *****************
 35069 ;; Defined at:
 35070 ;;		line 133 in file "src/driver/i2c.c"
 35071 ;; Parameters:    Size  Location     Type
 35072 ;;  ack             1    wreg     unsigned char 
 35073 ;; Auto vars:     Size  Location     Type
 35074 ;;  ack             1    0[BANK0 ] unsigned char 
 35075 ;;  ret             1    1[BANK0 ] unsigned char 
 35076 ;; Return value:  Size  Location     Type
 35077 ;;                  1    wreg      unsigned char 
 35078 ;; Registers used:
 35079 ;;		wreg, status,2, status,0, pclath, cstack
 35080 ;; Tracked objects:
 35081 ;;		On entry : 0/0
 35082 ;;		On exit  : 0/0
 35083 ;;		Unchanged: 0/0
 35084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35086 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35088 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35089 ;;Total ram usage:        3 bytes
 35090 ;; Hardware stack levels used:    1
 35091 ;; Hardware stack levels required when called:    3
 35092 ;; This function calls:
 35093 ;;		_iic_received_byte
 35094 ;;		_iic_send_ack
 35095 ;; This function is called by:
 35096 ;;		_adc_mcp3241_read_convert_16
 35097 ;;		_iic_read_byte
 35098 ;; This function uses a non-reentrant model
 35099 ;;
 35100                           
 35101                           
 35102                           ;psect for function _iic_received_byte_if_ack
 35103  3BD2                     _iic_received_byte_if_ack:	
 35104                           
 35105                           ;incstack = 0
 35106                           ; Regs used in _iic_received_byte_if_ack: [wreg+status,2+status,0+pclath+cstack]
 35107                           ;iic_received_byte_if_ack@ack stored from wreg
 35108  3BD2  0020               	movlb	0	; select bank0
 35109  3BD3  00A0               	movwf	iic_received_byte_if_ack@ack
 35110                           
 35111                           ;i2c.c: 135: uint8_t ret=0;
 35112  3BD4  01A1               	clrf	iic_received_byte_if_ack@ret
 35113                           
 35114                           ;i2c.c: 136: ret=iic_received_byte();
 35115  3BD5  31B0  203F  31BB   	fcall	_iic_received_byte
 35116  3BD8  00F6               	movwf	??_iic_received_byte_if_ack
 35117  3BD9  0876               	movf	??_iic_received_byte_if_ack,w
 35118  3BDA  0020               	movlb	0	; select bank0
 35119  3BDB  00A1               	movwf	iic_received_byte_if_ack@ret
 35120                           
 35121                           ;i2c.c: 137: iic_send_ack(ack);
 35122  3BDC  0820               	movf	iic_received_byte_if_ack@ack,w
 35123  3BDD  31BE  260A         	fcall	_iic_send_ack
 35124                           
 35125                           ;i2c.c: 138: return ret;
 35126  3BDF  0020               	movlb	0	; select bank0
 35127  3BE0  0821               	movf	iic_received_byte_if_ack@ret,w
 35128  3BE1  0008               	return
 35129  3BE2                     __end_of_iic_received_byte_if_ack:	
 35130                           
 35131                           	psect	text147
 35132  3E0A                     __ptext147:	
 35133 ;; *************** function _iic_send_ack *****************
 35134 ;; Defined at:
 35135 ;;		line 52 in file "src/driver/i2c.c"
 35136 ;; Parameters:    Size  Location     Type
 35137 ;;  ack             1    wreg     char 
 35138 ;; Auto vars:     Size  Location     Type
 35139 ;;  ack             1    3[COMMON] char 
 35140 ;; Return value:  Size  Location     Type
 35141 ;;                  1    wreg      void 
 35142 ;; Registers used:
 35143 ;;		wreg, status,2, status,0
 35144 ;; Tracked objects:
 35145 ;;		On entry : 0/0
 35146 ;;		On exit  : 0/0
 35147 ;;		Unchanged: 0/0
 35148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35152 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35153 ;;Total ram usage:        1 bytes
 35154 ;; Hardware stack levels used:    1
 35155 ;; Hardware stack levels required when called:    2
 35156 ;; This function calls:
 35157 ;;		Nothing
 35158 ;; This function is called by:
 35159 ;;		_iic_received_byte_if_ack
 35160 ;; This function uses a non-reentrant model
 35161 ;;
 35162                           
 35163                           
 35164                           ;psect for function _iic_send_ack
 35165  3E0A                     _iic_send_ack:	
 35166                           
 35167                           ;incstack = 0
 35168                           ; Regs used in _iic_send_ack: [wreg+status,2+status,0]
 35169                           ;iic_send_ack@ack stored from wreg
 35170  3E0A  00F3               	movwf	iic_send_ack@ack
 35171                           
 35172                           ;i2c.c: 54: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 35173  3E0B  0021               	movlb	1	; select bank1
 35174  3E0C  128F               	bcf	15,5	;volatile
 35175                           
 35176                           ;i2c.c: 55: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35177  3E0D  0022               	movlb	2	; select bank2
 35178  3E0E  130F               	bcf	15,6	;volatile
 35179                           
 35180                           ;i2c.c: 56: if(ack)
 35181  3E0F  0873               	movf	iic_send_ack@ack,w
 35182  3E10  1903               	btfsc	3,2
 35183  3E11  2E14               	goto	l1773
 35184                           
 35185                           ;i2c.c: 57: {
 35186                           ;i2c.c: 58: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 35187  3E12  168F               	bsf	15,5	;volatile
 35188                           
 35189                           ;i2c.c: 59: }
 35190  3E13  2E15               	goto	l1776
 35191  3E14                     l1773:	
 35192                           ;i2c.c: 60: else
 35193                           ;i2c.c: 61: {
 35194                           ;i2c.c: 62: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 35195                           
 35196  3E14  128F               	bcf	15,5	;volatile
 35197  3E15                     l1776:	
 35198                           ;i2c.c: 63: }
 35199                           ;i2c.c: 64: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35200                           
 35201  3E15  0000               	nop
 35202  3E16  0000               	nop
 35203  3E17  0000               	nop
 35204  3E18  0000               	nop
 35205  3E19  0000               	nop
 35206  3E1A  0000               	nop
 35207                           
 35208                           ;i2c.c: 65: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 35209  3E1B  0022               	movlb	2	; select bank2
 35210  3E1C  170F               	bsf	15,6	;volatile
 35211                           
 35212                           ;i2c.c: 66: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35213  3E1D  0000               	nop
 35214  3E1E  0000               	nop
 35215  3E1F  0000               	nop
 35216  3E20  0000               	nop
 35217  3E21  0000               	nop
 35218  3E22  0000               	nop
 35219                           
 35220                           ;i2c.c: 67: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35221  3E23  0022               	movlb	2	; select bank2
 35222  3E24  130F               	bcf	15,6	;volatile
 35223  3E25  0008               	return
 35224  3E26                     __end_of_iic_send_ack:	
 35225                           
 35226                           	psect	text148
 35227  303F                     __ptext148:	
 35228 ;; *************** function _iic_received_byte *****************
 35229 ;; Defined at:
 35230 ;;		line 114 in file "src/driver/i2c.c"
 35231 ;; Parameters:    Size  Location     Type
 35232 ;;		None
 35233 ;; Auto vars:     Size  Location     Type
 35234 ;;  i               1    5[COMMON] unsigned char 
 35235 ;;  ret             1    4[COMMON] unsigned char 
 35236 ;; Return value:  Size  Location     Type
 35237 ;;                  1    wreg      unsigned char 
 35238 ;; Registers used:
 35239 ;;		wreg, status,2, status,0
 35240 ;; Tracked objects:
 35241 ;;		On entry : 0/0
 35242 ;;		On exit  : 0/0
 35243 ;;		Unchanged: 0/0
 35244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35246 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35247 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35248 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35249 ;;Total ram usage:        3 bytes
 35250 ;; Hardware stack levels used:    1
 35251 ;; Hardware stack levels required when called:    2
 35252 ;; This function calls:
 35253 ;;		Nothing
 35254 ;; This function is called by:
 35255 ;;		_iic_received_byte_if_ack
 35256 ;; This function uses a non-reentrant model
 35257 ;;
 35258                           
 35259                           
 35260                           ;psect for function _iic_received_byte
 35261  303F                     _iic_received_byte:	
 35262                           
 35263                           ;i2c.c: 116: uint8_t i;
 35264                           ;i2c.c: 117: uint8_t ret=0;
 35265                           
 35266                           ;incstack = 0
 35267                           ; Regs used in _iic_received_byte: [wreg+status,2+status,0]
 35268  303F  01F4               	clrf	iic_received_byte@ret
 35269                           
 35270                           ;i2c.c: 118: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 35271  3040  0021               	movlb	1	; select bank1
 35272  3041  168F               	bsf	15,5	;volatile
 35273                           
 35274                           ;i2c.c: 119: for(i=0;i<8;i++)
 35275  3042  01F5               	clrf	iic_received_byte@i
 35276  3043  3008               	movlw	8
 35277  3044  0275               	subwf	iic_received_byte@i,w
 35278  3045  1803               	btfsc	3,0
 35279  3046  2864               	goto	l1874
 35280                           
 35281                           ;i2c.c: 120: {
 35282                           ;i2c.c: 121: ret<<=1;
 35283  3047  1003               	clrc
 35284  3048                     L14:	
 35285  3048  0DF4               	rlf	iic_received_byte@ret,f
 35286                           
 35287                           ;i2c.c: 122: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35288  3049  0022               	movlb	2	; select bank2
 35289  304A  130F               	bcf	15,6	;volatile
 35290                           
 35291                           ;i2c.c: 123: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35292  304B  0000               	nop
 35293  304C  0000               	nop
 35294  304D  0000               	nop
 35295  304E  0000               	nop
 35296  304F  0000               	nop
 35297  3050  0000               	nop
 35298                           
 35299                           ;i2c.c: 124: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 35300  3051  0022               	movlb	2	; select bank2
 35301  3052  170F               	bsf	15,6	;volatile
 35302                           
 35303                           ;i2c.c: 125: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 35304  3053  0000               	nop
 35305  3054  0000               	nop
 35306  3055  0000               	nop
 35307  3056  0000               	nop
 35308  3057  0000               	nop
 35309  3058  0000               	nop
 35310                           
 35311                           ;i2c.c: 126: if(PORTDbits.RD5){
 35312  3059  0020               	movlb	0	; select bank0
 35313  305A  1A8F               	btfsc	15,5	;volatile
 35314                           
 35315                           ;i2c.c: 127: ret|=1;
 35316  305B  1474               	bsf	iic_received_byte@ret,0
 35317  305C  3001               	movlw	1
 35318  305D  00F3               	movwf	??_iic_received_byte
 35319  305E  0873               	movf	??_iic_received_byte,w
 35320  305F  07F5               	addwf	iic_received_byte@i,f
 35321  3060  3008               	movlw	8
 35322  3061  0275               	subwf	iic_received_byte@i,w
 35323  3062  1C03               	skipc
 35324  3063  2848               	goto	L14
 35325  3064                     l1874:	
 35326                           ;i2c.c: 128: }
 35327                           ;i2c.c: 129: }
 35328                           ;i2c.c: 130: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 35329                           
 35330  3064  0022               	movlb	2	; select bank2
 35331  3065  130F               	bcf	15,6	;volatile
 35332                           
 35333                           ;i2c.c: 131: return ret;
 35334  3066  0874               	movf	iic_received_byte@ret,w
 35335  3067  0008               	return
 35336  3068                     __end_of_iic_received_byte:	
 35337                           
 35338                           	psect	text149
 35339  3BA5                     __ptext149:	
 35340 ;; *************** function _event_power_monitor *****************
 35341 ;; Defined at:
 35342 ;;		line 34 in file "main.c"
 35343 ;; Parameters:    Size  Location     Type
 35344 ;;		None
 35345 ;; Auto vars:     Size  Location     Type
 35346 ;;		None
 35347 ;; Return value:  Size  Location     Type
 35348 ;;                  1    wreg      void 
 35349 ;; Registers used:
 35350 ;;		status,2
 35351 ;; Tracked objects:
 35352 ;;		On entry : 0/0
 35353 ;;		On exit  : 0/0
 35354 ;;		Unchanged: 0/0
 35355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35357 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35359 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35360 ;;Total ram usage:        0 bytes
 35361 ;; Hardware stack levels used:    1
 35362 ;; Hardware stack levels required when called:    2
 35363 ;; This function calls:
 35364 ;;		Nothing
 35365 ;; This function is called by:
 35366 ;;		_main
 35367 ;; This function uses a non-reentrant model
 35368 ;;
 35369                           
 35370                           
 35371                           ;psect for function _event_power_monitor
 35372  3BA5                     _event_power_monitor:	
 35373                           
 35374                           ;main.c: 35: if(PORTAbits.RA5){
 35375                           
 35376                           ;incstack = 0
 35377                           ; Regs used in _event_power_monitor: [status,2]
 35378  3BA5  0020               	movlb	0	; select bank0
 35379  3BA6  1E8C               	btfss	12,5	;volatile
 35380  3BA7  2BAD               	goto	l16361
 35381                           
 35382                           ;main.c: 36: deviceStatus.bits.acPowerDown=1;
 35383  3BA8  0021               	movlb	1	; select bank1
 35384  3BA9  15C0               	bsf	_deviceStatus^(0+128),3
 35385                           
 35386                           ;main.c: 43: do { LATAbits.LATA1 = 0; } while(0);;
 35387  3BAA  0022               	movlb	2	; select bank2
 35388  3BAB  108C               	bcf	12,1	;volatile
 35389                           
 35390                           ;main.c: 44: }else{
 35391  3BAC  0008               	return
 35392  3BAD                     l16361:	
 35393                           
 35394                           ;main.c: 45: firstPowerDown=0;
 35395  3BAD  0022               	movlb	2	; select bank2
 35396  3BAE  01B2               	clrf	_firstPowerDown^(0+256)
 35397                           
 35398                           ;main.c: 46: deviceStatus.bits.acPowerDown=0;
 35399  3BAF  0021               	movlb	1	; select bank1
 35400  3BB0  11C0               	bcf	_deviceStatus^(0+128),3
 35401                           
 35402                           ;main.c: 47: do { LATAbits.LATA1 = 1; } while(0);;
 35403  3BB1  0022               	movlb	2	; select bank2
 35404  3BB2  148C               	bsf	12,1	;volatile
 35405  3BB3  0008               	return
 35406  3BB4                     __end_of_event_power_monitor:	
 35407                           
 35408                           	psect	text150
 35409  3AF1                     __ptext150:	
 35410 ;; *************** function _event_door_monitor *****************
 35411 ;; Defined at:
 35412 ;;		line 50 in file "main.c"
 35413 ;; Parameters:    Size  Location     Type
 35414 ;;		None
 35415 ;; Auto vars:     Size  Location     Type
 35416 ;;		None
 35417 ;; Return value:  Size  Location     Type
 35418 ;;                  1    wreg      void 
 35419 ;; Registers used:
 35420 ;;		None
 35421 ;; Tracked objects:
 35422 ;;		On entry : 0/0
 35423 ;;		On exit  : 0/0
 35424 ;;		Unchanged: 0/0
 35425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35430 ;;Total ram usage:        0 bytes
 35431 ;; Hardware stack levels used:    1
 35432 ;; Hardware stack levels required when called:    2
 35433 ;; This function calls:
 35434 ;;		Nothing
 35435 ;; This function is called by:
 35436 ;;		_main
 35437 ;; This function uses a non-reentrant model
 35438 ;;
 35439                           
 35440                           
 35441                           ;psect for function _event_door_monitor
 35442  3AF1                     _event_door_monitor:	
 35443                           
 35444                           ;main.c: 51: if(PORTBbits.RB4){
 35445                           
 35446                           ;incstack = 0
 35447                           ; Regs used in _event_door_monitor: []
 35448  3AF1  0020               	movlb	0	; select bank0
 35449  3AF2  1E0D               	btfss	13,4	;volatile
 35450  3AF3  0008               	return
 35451                           
 35452                           ;main.c: 52: deviceStatus.bits.doorOpen=1;
 35453  3AF4  0021               	movlb	1	; select bank1
 35454  3AF5  1540               	bsf	_deviceStatus^(0+128),2
 35455  3AF6  0008               	return
 35456  3AF7                     __end_of_event_door_monitor:	
 35457                           
 35458                           	psect	text151
 35459  2978                     __ptext151:	
 35460 ;; *************** function _data_api_system_data_init *****************
 35461 ;; Defined at:
 35462 ;;		line 128 in file "src/app/appdata.c"
 35463 ;; Parameters:    Size  Location     Type
 35464 ;;		None
 35465 ;; Auto vars:     Size  Location     Type
 35466 ;;  sta             1   20[BANK0 ] unsigned char 
 35467 ;; Return value:  Size  Location     Type
 35468 ;;                  1    wreg      unsigned char 
 35469 ;; Registers used:
 35470 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35471 ;; Tracked objects:
 35472 ;;		On entry : 0/0
 35473 ;;		On exit  : 0/0
 35474 ;;		Unchanged: 0/0
 35475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 35478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 35479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 35480 ;;Total ram usage:        2 bytes
 35481 ;; Hardware stack levels used:    1
 35482 ;; Hardware stack levels required when called:    4
 35483 ;; This function calls:
 35484 ;;		_crc_append
 35485 ;;		_crc_verify
 35486 ;;		_data_api_read_eeprom
 35487 ;;		_data_api_system_data_get
 35488 ;;		_data_api_write_eeprom
 35489 ;;		_m_mem_cpy_len
 35490 ;; This function is called by:
 35491 ;;		_main
 35492 ;; This function uses a non-reentrant model
 35493 ;;
 35494                           
 35495                           
 35496                           ;psect for function _data_api_system_data_init
 35497  2978                     _data_api_system_data_init:	
 35498                           
 35499                           ;appdata.c: 129: uint8_t sta = 0;
 35500                           
 35501                           ;incstack = 0
 35502                           ; Regs used in _data_api_system_data_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 35503  2978  0020               	movlb	0	; select bank0
 35504  2979  01B4               	clrf	data_api_system_data_init@sta
 35505                           
 35506                           ;appdata.c: 130: data_api_read_eeprom(comBuffer,0x00,sizeof (st_SystemData));
 35507  297A  3000               	movlw	0
 35508  297B  00F4               	movwf	data_api_read_eeprom@buf
 35509  297C  3022               	movlw	34
 35510  297D  00F5               	movwf	data_api_read_eeprom@buf+1
 35511  297E  01F6               	clrf	data_api_read_eeprom@addr
 35512  297F  3048               	movlw	72
 35513  2980  00B3               	movwf	??_data_api_system_data_init
 35514  2981  0833               	movf	??_data_api_system_data_init,w
 35515  2982  00F7               	movwf	data_api_read_eeprom@len
 35516  2983  31BE  269B  31A9   	fcall	_data_api_read_eeprom
 35517                           
 35518                           ;appdata.c: 131: sta=crc_verify(comBuffer,sizeof (st_SystemData));
 35519  2986  3000               	movlw	0
 35520  2987  0020               	movlb	0	; select bank0
 35521  2988  00A8               	movwf	crc_verify@message
 35522  2989  3022               	movlw	34
 35523  298A  00A9               	movwf	crc_verify@message+1
 35524  298B  3048               	movlw	72
 35525  298C  00AA               	movwf	crc_verify@n
 35526  298D  3000               	movlw	0
 35527  298E  00AB               	movwf	crc_verify@n+1
 35528  298F  31B5  255A  31A9   	fcall	_crc_verify
 35529  2992  0020               	movlb	0	; select bank0
 35530  2993  00B3               	movwf	??_data_api_system_data_init
 35531  2994  0833               	movf	??_data_api_system_data_init,w
 35532  2995  00B4               	movwf	data_api_system_data_init@sta
 35533                           
 35534                           ;appdata.c: 132: if(!sta){
 35535  2996  0834               	movf	data_api_system_data_init@sta,w
 35536  2997  1D03               	btfss	3,2
 35537  2998  29B2               	goto	l16111
 35538                           
 35539                           ;appdata.c: 133: crc_append((uint8_t*)(&mainSystemData),sizeof (st_SystemData)-2);
 35540  2999  3020               	movlw	low _mainSystemData
 35541  299A  00A8               	movwf	crc_append@message
 35542  299B  3002               	movlw	high _mainSystemData
 35543  299C  00A9               	movwf	crc_append@message+1
 35544  299D  3046               	movlw	70
 35545  299E  00AA               	movwf	crc_append@n
 35546  299F  3000               	movlw	0
 35547  29A0  00AB               	movwf	crc_append@n+1
 35548  29A1  31B3  23C9  31A9   	fcall	_crc_append
 35549                           
 35550                           ;appdata.c: 134: data_api_write_eeprom((uint8_t*)(&mainSystemData),0x00,sizeof(st_System
      +                          Data));
 35551  29A4  3020               	movlw	low _mainSystemData
 35552  29A5  0020               	movlb	0	; select bank0
 35553  29A6  00A0               	movwf	data_api_write_eeprom@buf
 35554  29A7  3002               	movlw	high _mainSystemData
 35555  29A8  00A1               	movwf	data_api_write_eeprom@buf+1
 35556  29A9  01A2               	clrf	data_api_write_eeprom@addr
 35557  29AA  3048               	movlw	72
 35558  29AB  00B3               	movwf	??_data_api_system_data_init
 35559  29AC  0833               	movf	??_data_api_system_data_init,w
 35560  29AD  00A3               	movwf	data_api_write_eeprom@len
 35561  29AE  31BE  26DA  31A9   	fcall	_data_api_write_eeprom
 35562                           
 35563                           ;appdata.c: 136: }else{
 35564  29B1  29C2               	goto	l911
 35565  29B2                     l16111:	
 35566                           
 35567                           ;appdata.c: 137: m_mem_cpy_len((uint8_t*)(&mainSystemData),comBuffer,sizeof (st_SystemDa
      +                          ta));
 35568  29B2  3020               	movlw	low _mainSystemData
 35569  29B3  00F3               	movwf	m_mem_cpy_len@d
 35570  29B4  3002               	movlw	high _mainSystemData
 35571  29B5  00F4               	movwf	m_mem_cpy_len@d+1
 35572  29B6  3000               	movlw	0
 35573  29B7  00F5               	movwf	m_mem_cpy_len@s
 35574  29B8  3022               	movlw	34
 35575  29B9  00F6               	movwf	m_mem_cpy_len@s+1
 35576  29BA  3048               	movlw	72
 35577  29BB  0020               	movlb	0	; select bank0
 35578  29BC  00B3               	movwf	??_data_api_system_data_init
 35579  29BD  0833               	movf	??_data_api_system_data_init,w
 35580  29BE  00F7               	movwf	m_mem_cpy_len@len
 35581  29BF  31BD  259E  31A9   	fcall	_m_mem_cpy_len
 35582  29C2                     l911:	
 35583                           
 35584                           ;appdata.c: 138: }
 35585                           ;appdata.c: 139: data_api_system_data_get();
 35586  29C2  31BC  24A4         	fcall	_data_api_system_data_get
 35587  29C4  0008               	return
 35588  29C5                     __end_of_data_api_system_data_init:	
 35589                           ;appdata.c: 140: return sta;
 35590                           ;	Return value of _data_api_system_data_init is never used
 35591                           
 35592                           
 35593                           	psect	text152
 35594  3CA4                     __ptext152:	
 35595 ;; *************** function _data_api_system_data_get *****************
 35596 ;; Defined at:
 35597 ;;		line 58 in file "src/app/appdata.c"
 35598 ;; Parameters:    Size  Location     Type
 35599 ;;		None
 35600 ;; Auto vars:     Size  Location     Type
 35601 ;;		None
 35602 ;; Return value:  Size  Location     Type
 35603 ;;                  1    wreg      void 
 35604 ;; Registers used:
 35605 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 35606 ;; Tracked objects:
 35607 ;;		On entry : 0/0
 35608 ;;		On exit  : 0/0
 35609 ;;		Unchanged: 0/0
 35610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35613 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35614 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35615 ;;Total ram usage:        1 bytes
 35616 ;; Hardware stack levels used:    1
 35617 ;; Hardware stack levels required when called:    2
 35618 ;; This function calls:
 35619 ;;		Nothing
 35620 ;; This function is called by:
 35621 ;;		_data_api_system_data_init
 35622 ;;		_data_api_rt_data_save
 35623 ;; This function uses a non-reentrant model
 35624 ;;
 35625                           
 35626                           
 35627                           ;psect for function _data_api_system_data_get
 35628  3CA4                     _data_api_system_data_get:	
 35629                           
 35630                           ;appdata.c: 59: deviceStatus.byte=mainSystemData.status.byte;
 35631                           
 35632                           ;incstack = 0
 35633                           ; Regs used in _data_api_system_data_get: [wreg+fsr1l+fsr1h+status,2+status,0]
 35634  3CA4  0024               	movlb	4	; select bank4
 35635  3CA5  085E               	movf	(_mainSystemData^(0+512)+62),w
 35636  3CA6  00F3               	movwf	??_data_api_system_data_get
 35637  3CA7  0873               	movf	??_data_api_system_data_get,w
 35638  3CA8  0021               	movlb	1	; select bank1
 35639  3CA9  00C0               	movwf	_deviceStatus^(0+128)
 35640                           
 35641                           ;appdata.c: 60: rtBalanceMoney=mainSystemData.BalanceMoney;
 35642  3CAA  302C               	movlw	44
 35643  3CAB  3E20               	addlw	(low (_mainSystemData| (0+512)))& (0+255)
 35644  3CAC  0086               	movwf	6
 35645  3CAD  3002               	movlw	2	; select bank4/5
 35646  3CAE  0087               	movwf	7
 35647  3CAF  3F40               	moviw [0]fsr1
 35648  3CB0  00A8               	movwf	_rtBalanceMoney^(0+128)	;volatile
 35649  3CB1  3F41               	moviw [1]fsr1
 35650  3CB2  00A9               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 35651  3CB3  3F42               	moviw [2]fsr1
 35652  3CB4  00AA               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 35653  3CB5  3F43               	moviw [3]fsr1
 35654  3CB6  00AB               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 35655  3CB7  0008               	return
 35656  3CB8                     __end_of_data_api_system_data_get:	
 35657                           
 35658                           	psect	text153
 35659  1C72                     __ptext153:	
 35660 ;; *************** function _data_api_calibration_table_data_init *****************
 35661 ;; Defined at:
 35662 ;;		line 89 in file "src/app/appdata.c"
 35663 ;; Parameters:    Size  Location     Type
 35664 ;;		None
 35665 ;; Auto vars:     Size  Location     Type
 35666 ;;  stp             2   26[BANK0 ] PTR struct .
 35667 ;;		 -> comBuffer(128), 
 35668 ;;  i               1   28[BANK0 ] unsigned char 
 35669 ;;  sta             1   25[BANK0 ] unsigned char 
 35670 ;; Return value:  Size  Location     Type
 35671 ;;                  1    wreg      unsigned char 
 35672 ;; Registers used:
 35673 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35674 ;; Tracked objects:
 35675 ;;		On entry : 0/0
 35676 ;;		On exit  : 0/0
 35677 ;;		Unchanged: 0/0
 35678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35680 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35681 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 35682 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 35683 ;;Total ram usage:       10 bytes
 35684 ;; Hardware stack levels used:    1
 35685 ;; Hardware stack levels required when called:    4
 35686 ;; This function calls:
 35687 ;;		___wmul
 35688 ;;		_crc_append
 35689 ;;		_crc_verify
 35690 ;;		_data_api_read_eeprom
 35691 ;;		_data_api_write_eeprom
 35692 ;;		_m_mem_cpy_len
 35693 ;; This function is called by:
 35694 ;;		_main
 35695 ;; This function uses a non-reentrant model
 35696 ;;
 35697                           
 35698                           
 35699                           ;psect for function _data_api_calibration_table_data_init
 35700  1C72                     _data_api_calibration_table_data_init:	
 35701                           
 35702                           ;appdata.c: 90: uint8_t i,sta;
 35703                           ;appdata.c: 91: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 35704                           
 35705                           ;incstack = 0
 35706                           ; Regs used in _data_api_calibration_table_data_init: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 35707  1C72  3000               	movlw	0
 35708  1C73  0020               	movlb	0	; select bank0
 35709  1C74  00BA               	movwf	data_api_calibration_table_data_init@stp
 35710  1C75  3022               	movlw	34
 35711  1C76  00BB               	movwf	data_api_calibration_table_data_init@stp+1
 35712                           
 35713                           ;appdata.c: 92: data_api_read_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 35714  1C77  3000               	movlw	0
 35715  1C78  00F4               	movwf	data_api_read_eeprom@buf
 35716  1C79  3022               	movlw	34
 35717  1C7A  00F5               	movwf	data_api_read_eeprom@buf+1
 35718  1C7B  3080               	movlw	128
 35719  1C7C  00B3               	movwf	??_data_api_calibration_table_data_init
 35720  1C7D  0833               	movf	??_data_api_calibration_table_data_init,w
 35721  1C7E  00F6               	movwf	data_api_read_eeprom@addr
 35722  1C7F  307C               	movlw	124
 35723  1C80  00B4               	movwf	??_data_api_calibration_table_data_init+1
 35724  1C81  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35725  1C82  00F7               	movwf	data_api_read_eeprom@len
 35726  1C83  31BE  269B  319C   	fcall	_data_api_read_eeprom
 35727                           
 35728                           ;appdata.c: 93: sta=crc_verify(comBuffer,sizeof (st_flowCalibrationTable));
 35729  1C86  3000               	movlw	0
 35730  1C87  0020               	movlb	0	; select bank0
 35731  1C88  00A8               	movwf	crc_verify@message
 35732  1C89  3022               	movlw	34
 35733  1C8A  00A9               	movwf	crc_verify@message+1
 35734  1C8B  307C               	movlw	124
 35735  1C8C  00AA               	movwf	crc_verify@n
 35736  1C8D  3000               	movlw	0
 35737  1C8E  00AB               	movwf	crc_verify@n+1
 35738  1C8F  31B5  255A  319C   	fcall	_crc_verify
 35739  1C92  0020               	movlb	0	; select bank0
 35740  1C93  00B3               	movwf	??_data_api_calibration_table_data_init
 35741  1C94  0833               	movf	??_data_api_calibration_table_data_init,w
 35742  1C95  00B9               	movwf	data_api_calibration_table_data_init@sta
 35743                           
 35744                           ;appdata.c: 94: if(!sta){
 35745  1C96  0839               	movf	data_api_calibration_table_data_init@sta,w
 35746  1C97  1D03               	btfss	3,2
 35747  1C98  2D28               	goto	l16095
 35748                           
 35749                           ;appdata.c: 95: for(i=0;i<30;i++){
 35750  1C99  01BC               	clrf	data_api_calibration_table_data_init@i
 35751  1C9A  301E               	movlw	30
 35752  1C9B  023C               	subwf	data_api_calibration_table_data_init@i,w
 35753  1C9C  1803               	btfsc	3,0
 35754  1C9D  2CEB               	goto	l16089
 35755  1C9E                     l16083:	
 35756                           
 35757                           ;appdata.c: 96: stp->flowCalibrationArr[i].adcValue=2000*(i+1);
 35758  1C9E  083C               	movf	data_api_calibration_table_data_init@i,w
 35759  1C9F  3E01               	addlw	1
 35760  1CA0  00F3               	movwf	___wmul@multiplier
 35761  1CA1  3000               	movlw	0
 35762  1CA2  1803               	skipnc
 35763  1CA3  3001               	movlw	1
 35764  1CA4  00F4               	movwf	___wmul@multiplier+1
 35765  1CA5  30D0               	movlw	208
 35766  1CA6  00F5               	movwf	___wmul@multiplicand
 35767  1CA7  3007               	movlw	7
 35768  1CA8  00F6               	movwf	___wmul@multiplicand+1
 35769  1CA9  31BE  267D  319C   	fcall	___wmul
 35770  1CAC  0020               	movlb	0	; select bank0
 35771  1CAD  083C               	movf	data_api_calibration_table_data_init@i,w
 35772  1CAE  00B3               	movwf	??_data_api_calibration_table_data_init
 35773  1CAF  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35774  1CB0  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35775  1CB1  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35776  1CB2  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35777  1CB3  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35778  1CB4  0833               	movf	??_data_api_calibration_table_data_init,w
 35779  1CB5  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35780  1CB6  0086               	movwf	6
 35781  1CB7  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35782  1CB8  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35783  1CB9  0087               	movwf	7
 35784  1CBA  0873               	movf	?___wmul,w
 35785  1CBB  3FC0               	movwi [0]fsr1
 35786  1CBC  0874               	movf	?___wmul+1,w
 35787  1CBD  3FC1               	movwi [1]fsr1
 35788                           
 35789                           ;appdata.c: 97: stp->flowCalibrationArr[i].rtflowValue=100*i;
 35790  1CBE  083C               	movf	data_api_calibration_table_data_init@i,w
 35791  1CBF  00B3               	movwf	??_data_api_calibration_table_data_init
 35792  1CC0  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35793  1CC1  0833               	movf	??_data_api_calibration_table_data_init,w
 35794  1CC2  00F3               	movwf	___wmul@multiplier
 35795  1CC3  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35796  1CC4  00F4               	movwf	___wmul@multiplier+1
 35797  1CC5  3064               	movlw	100
 35798  1CC6  00F5               	movwf	___wmul@multiplicand
 35799  1CC7  3000               	movlw	0
 35800  1CC8  00F6               	movwf	___wmul@multiplicand+1
 35801  1CC9  31BE  267D  319C   	fcall	___wmul
 35802  1CCC  0020               	movlb	0	; select bank0
 35803  1CCD  083C               	movf	data_api_calibration_table_data_init@i,w
 35804  1CCE  00B5               	movwf	??_data_api_calibration_table_data_init+2
 35805  1CCF  01B6               	clrf	??_data_api_calibration_table_data_init+3
 35806  1CD0  35B5               	lslf	??_data_api_calibration_table_data_init+2,f
 35807  1CD1  0DB6               	rlf	??_data_api_calibration_table_data_init+3,f
 35808  1CD2  35B5               	lslf	??_data_api_calibration_table_data_init+2,f
 35809  1CD3  0DB6               	rlf	??_data_api_calibration_table_data_init+3,f
 35810  1CD4  0835               	movf	??_data_api_calibration_table_data_init+2,w
 35811  1CD5  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35812  1CD6  00B7               	movwf	??_data_api_calibration_table_data_init+4
 35813  1CD7  0836               	movf	??_data_api_calibration_table_data_init+3,w
 35814  1CD8  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35815  1CD9  00B8               	movwf	??_data_api_calibration_table_data_init+5
 35816  1CDA  0837               	movf	??_data_api_calibration_table_data_init+4,w
 35817  1CDB  0086               	movwf	6
 35818  1CDC  0838               	movf	??_data_api_calibration_table_data_init+5,w
 35819  1CDD  0087               	movwf	7
 35820  1CDE  3142               	addfsr 1,2
 35821  1CDF  0873               	movf	?___wmul,w
 35822  1CE0  3FC0               	movwi [0]fsr1
 35823  1CE1  0874               	movf	?___wmul+1,w
 35824  1CE2  3FC1               	movwi [1]fsr1
 35825  1CE3  3001               	movlw	1
 35826  1CE4  00B3               	movwf	??_data_api_calibration_table_data_init
 35827  1CE5  0833               	movf	??_data_api_calibration_table_data_init,w
 35828  1CE6  07BC               	addwf	data_api_calibration_table_data_init@i,f
 35829  1CE7  301E               	movlw	30
 35830  1CE8  023C               	subwf	data_api_calibration_table_data_init@i,w
 35831  1CE9  1C03               	skipc
 35832  1CEA  2C9E               	goto	l16083
 35833  1CEB                     l16089:	
 35834                           
 35835                           ;appdata.c: 98: }
 35836                           ;appdata.c: 99: stp->maxFlow=stp->flowCalibrationArr[i-1].rtflowValue;
 35837  1CEB  083C               	movf	data_api_calibration_table_data_init@i,w
 35838  1CEC  00B3               	movwf	??_data_api_calibration_table_data_init
 35839  1CED  01B4               	clrf	??_data_api_calibration_table_data_init+1
 35840  1CEE  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35841  1CEF  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35842  1CF0  35B3               	lslf	??_data_api_calibration_table_data_init,f
 35843  1CF1  0DB4               	rlf	??_data_api_calibration_table_data_init+1,f
 35844  1CF2  0833               	movf	??_data_api_calibration_table_data_init,w
 35845  1CF3  3EFC               	addlw	252
 35846  1CF4  00B5               	movwf	??_data_api_calibration_table_data_init+2
 35847  1CF5  30FF               	movlw	255
 35848  1CF6  3D34               	addwfc	??_data_api_calibration_table_data_init+1,w
 35849  1CF7  00B6               	movwf	??_data_api_calibration_table_data_init+3
 35850  1CF8  0835               	movf	??_data_api_calibration_table_data_init+2,w
 35851  1CF9  073A               	addwf	data_api_calibration_table_data_init@stp,w
 35852  1CFA  00B7               	movwf	??_data_api_calibration_table_data_init+4
 35853  1CFB  0836               	movf	??_data_api_calibration_table_data_init+3,w
 35854  1CFC  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35855  1CFD  00B8               	movwf	??_data_api_calibration_table_data_init+5
 35856  1CFE  0837               	movf	??_data_api_calibration_table_data_init+4,w
 35857  1CFF  0086               	movwf	6
 35858  1D00  0838               	movf	??_data_api_calibration_table_data_init+5,w
 35859  1D01  0087               	movwf	7
 35860  1D02  3142               	addfsr 1,2
 35861  1D03  083A               	movf	data_api_calibration_table_data_init@stp,w
 35862  1D04  3E78               	addlw	120
 35863  1D05  0084               	movwf	4
 35864  1D06  3000               	movlw	0
 35865  1D07  3D3B               	addwfc	data_api_calibration_table_data_init@stp+1,w
 35866  1D08  0085               	movwf	5
 35867  1D09  3F40               	moviw [0]fsr1
 35868  1D0A  3F80               	movwi [0]fsr0
 35869  1D0B  3F41               	moviw [1]fsr1
 35870  1D0C  3F81               	movwi [1]fsr0
 35871                           
 35872                           ;appdata.c: 100: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 35873  1D0D  3000               	movlw	0
 35874  1D0E  00A8               	movwf	crc_append@message
 35875  1D0F  3022               	movlw	34
 35876  1D10  00A9               	movwf	crc_append@message+1
 35877  1D11  307A               	movlw	122
 35878  1D12  00AA               	movwf	crc_append@n
 35879  1D13  3000               	movlw	0
 35880  1D14  00AB               	movwf	crc_append@n+1
 35881  1D15  31B3  23C9  319C   	fcall	_crc_append
 35882                           
 35883                           ;appdata.c: 101: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 35884  1D18  3000               	movlw	0
 35885  1D19  0020               	movlb	0	; select bank0
 35886  1D1A  00A0               	movwf	data_api_write_eeprom@buf
 35887  1D1B  3022               	movlw	34
 35888  1D1C  00A1               	movwf	data_api_write_eeprom@buf+1
 35889  1D1D  3080               	movlw	128
 35890  1D1E  00B3               	movwf	??_data_api_calibration_table_data_init
 35891  1D1F  0833               	movf	??_data_api_calibration_table_data_init,w
 35892  1D20  00A2               	movwf	data_api_write_eeprom@addr
 35893  1D21  307C               	movlw	124
 35894  1D22  00B4               	movwf	??_data_api_calibration_table_data_init+1
 35895  1D23  0834               	movf	??_data_api_calibration_table_data_init+1,w
 35896  1D24  00A3               	movwf	data_api_write_eeprom@len
 35897  1D25  31BE  26DA  319C   	fcall	_data_api_write_eeprom
 35898  1D28                     l16095:	
 35899                           
 35900                           ;appdata.c: 102: }
 35901                           ;appdata.c: 103: m_mem_cpy_len((uint8_t*)(&Main_flowCalibrationTable),comBuffer,sizeof (
      +                          st_flowCalibrationTable));
 35902  1D28  3074               	movlw	116
 35903  1D29  00F3               	movwf	m_mem_cpy_len@d
 35904  1D2A  3023               	movlw	35
 35905  1D2B  00F4               	movwf	m_mem_cpy_len@d+1
 35906  1D2C  3000               	movlw	0
 35907  1D2D  00F5               	movwf	m_mem_cpy_len@s
 35908  1D2E  3022               	movlw	34
 35909  1D2F  00F6               	movwf	m_mem_cpy_len@s+1
 35910  1D30  307C               	movlw	124
 35911  1D31  0020               	movlb	0	; select bank0
 35912  1D32  00B3               	movwf	??_data_api_calibration_table_data_init
 35913  1D33  0833               	movf	??_data_api_calibration_table_data_init,w
 35914  1D34  00F7               	movwf	m_mem_cpy_len@len
 35915  1D35  31BD  259E  319C   	fcall	_m_mem_cpy_len
 35916                           
 35917                           ;appdata.c: 104: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowC
      +                          alibrationTable) );
 35918  1D38  3074               	movlw	116
 35919  1D39  0020               	movlb	0	; select bank0
 35920  1D3A  00A8               	movwf	crc_verify@message
 35921  1D3B  3023               	movlw	35
 35922  1D3C  00A9               	movwf	crc_verify@message+1
 35923  1D3D  307C               	movlw	124
 35924  1D3E  00AA               	movwf	crc_verify@n
 35925  1D3F  3000               	movlw	0
 35926  1D40  00AB               	movwf	crc_verify@n+1
 35927  1D41  31B5  255A         	fcall	_crc_verify
 35928  1D43  0020               	movlb	0	; select bank0
 35929  1D44  00B3               	movwf	??_data_api_calibration_table_data_init
 35930  1D45  0833               	movf	??_data_api_calibration_table_data_init,w
 35931  1D46  00B9               	movwf	data_api_calibration_table_data_init@sta
 35932  1D47  0008               	return
 35933  1D48                     __end_of_data_api_calibration_table_data_init:	
 35934                           ;appdata.c: 105: return sta;
 35935                           ;	Return value of _data_api_calibration_table_data_init is never used
 35936                           
 35937                           
 35938                           	psect	text154
 35939  3EDA                     __ptext154:	
 35940 ;; *************** function _data_api_write_eeprom *****************
 35941 ;; Defined at:
 35942 ;;		line 65 in file "src/app/appdata.c"
 35943 ;; Parameters:    Size  Location     Type
 35944 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 35945 ;;		 -> comBuffer(128), mainSystemData(72), 
 35946 ;;  addr            1    2[BANK0 ] unsigned char 
 35947 ;;  len             1    3[BANK0 ] unsigned char 
 35948 ;; Auto vars:     Size  Location     Type
 35949 ;;  i               1    7[COMMON] unsigned char 
 35950 ;; Return value:  Size  Location     Type
 35951 ;;                  1    wreg      void 
 35952 ;; Registers used:
 35953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 35954 ;; Tracked objects:
 35955 ;;		On entry : 0/0
 35956 ;;		On exit  : 0/0
 35957 ;;		Unchanged: 0/0
 35958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 35959 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35960 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 35962 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0
 35963 ;;Total ram usage:        6 bytes
 35964 ;; Hardware stack levels used:    1
 35965 ;; Hardware stack levels required when called:    3
 35966 ;; This function calls:
 35967 ;;		_DATAEE_WriteByte
 35968 ;; This function is called by:
 35969 ;;		_data_api_calibration_table_data_init
 35970 ;;		_data_api_system_data_init
 35971 ;;		_data_api_rt_data_save
 35972 ;;		_data_api_calibration_table_data_save
 35973 ;; This function uses a non-reentrant model
 35974 ;;
 35975                           
 35976                           
 35977                           ;psect for function _data_api_write_eeprom
 35978  3EDA                     _data_api_write_eeprom:	
 35979                           
 35980                           ;appdata.c: 66: uint8_t i;
 35981                           ;appdata.c: 67: for(i=0;i<len;i++){
 35982                           
 35983                           ;incstack = 0
 35984                           ; Regs used in _data_api_write_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 35985  3EDA  01F7               	clrf	data_api_write_eeprom@i
 35986  3EDB                     l13449:	
 35987  3EDB  0020               	movlb	0	; select bank0
 35988  3EDC  0823               	movf	data_api_write_eeprom@len,w
 35989  3EDD  0277               	subwf	data_api_write_eeprom@i,w
 35990  3EDE  1803               	btfsc	3,0
 35991  3EDF  0008               	return
 35992                           
 35993                           ;appdata.c: 68: DATAEE_WriteByte(addr,*buf);
 35994  3EE0  0020               	movlb	0	; select bank0
 35995  3EE1  0820               	movf	data_api_write_eeprom@buf,w
 35996  3EE2  0086               	movwf	6
 35997  3EE3  0821               	movf	data_api_write_eeprom@buf+1,w
 35998  3EE4  0087               	movwf	7
 35999  3EE5  0801               	movf	1,w
 36000  3EE6  00F6               	movwf	??_data_api_write_eeprom
 36001  3EE7  0876               	movf	??_data_api_write_eeprom,w
 36002  3EE8  00F3               	movwf	DATAEE_WriteByte@bData
 36003  3EE9  0822               	movf	data_api_write_eeprom@addr,w
 36004  3EEA  31BE  2626  31BE   	fcall	_DATAEE_WriteByte
 36005                           
 36006                           ;appdata.c: 69: buf++;
 36007  3EED  3001               	movlw	1
 36008  3EEE  0020               	movlb	0	; select bank0
 36009  3EEF  07A0               	addwf	data_api_write_eeprom@buf,f
 36010  3EF0  3000               	movlw	0
 36011  3EF1  3DA1               	addwfc	data_api_write_eeprom@buf+1,f
 36012                           
 36013                           ;appdata.c: 70: addr++;
 36014  3EF2  3001               	movlw	1
 36015  3EF3  00F6               	movwf	??_data_api_write_eeprom
 36016  3EF4  0876               	movf	??_data_api_write_eeprom,w
 36017  3EF5  07A2               	addwf	data_api_write_eeprom@addr,f
 36018  3EF6  3001               	movlw	1
 36019  3EF7  00F6               	movwf	??_data_api_write_eeprom
 36020  3EF8  0876               	movf	??_data_api_write_eeprom,w
 36021  3EF9  07F7               	addwf	data_api_write_eeprom@i,f
 36022  3EFA  2EDB               	goto	l13449
 36023  3EFB                     __end_of_data_api_write_eeprom:	
 36024                           
 36025                           	psect	text155
 36026  3E26                     __ptext155:	
 36027 ;; *************** function _DATAEE_WriteByte *****************
 36028 ;; Defined at:
 36029 ;;		line 180 in file "mcc_generated_files/memory.c"
 36030 ;; Parameters:    Size  Location     Type
 36031 ;;  bAdd            1    wreg     unsigned char 
 36032 ;;  bData           1    3[COMMON] unsigned char 
 36033 ;; Auto vars:     Size  Location     Type
 36034 ;;  bAdd            1    4[COMMON] unsigned char 
 36035 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 36036 ;; Return value:  Size  Location     Type
 36037 ;;                  1    wreg      void 
 36038 ;; Registers used:
 36039 ;;		wreg, status,2, status,0
 36040 ;; Tracked objects:
 36041 ;;		On entry : 0/0
 36042 ;;		On exit  : 0/0
 36043 ;;		Unchanged: 0/0
 36044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36045 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36049 ;;Total ram usage:        3 bytes
 36050 ;; Hardware stack levels used:    1
 36051 ;; Hardware stack levels required when called:    2
 36052 ;; This function calls:
 36053 ;;		Nothing
 36054 ;; This function is called by:
 36055 ;;		_data_api_write_eeprom
 36056 ;;		_data_api_write_eeprom_clr
 36057 ;; This function uses a non-reentrant model
 36058 ;;
 36059                           
 36060                           
 36061                           ;psect for function _DATAEE_WriteByte
 36062  3E26                     _DATAEE_WriteByte:	
 36063                           
 36064                           ;incstack = 0
 36065                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 36066                           ;DATAEE_WriteByte@bAdd stored from wreg
 36067  3E26  00F4               	movwf	DATAEE_WriteByte@bAdd
 36068                           
 36069                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 36070  3E27  01F5               	clrf	DATAEE_WriteByte@GIEBitValue
 36071                           
 36072                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 36073  3E28  0874               	movf	DATAEE_WriteByte@bAdd,w
 36074  3E29  0023               	movlb	3	; select bank3
 36075  3E2A  0091               	movwf	17	;volatile
 36076                           
 36077                           ;memory.c: 185: EEDATL = bData;
 36078  3E2B  0873               	movf	DATAEE_WriteByte@bData,w
 36079  3E2C  0093               	movwf	19	;volatile
 36080                           
 36081                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 36082  3E2D  1395               	bcf	21,7	;volsfr
 36083                           
 36084                           ;memory.c: 187: EECON1bits.CFGS = 0;
 36085  3E2E  1315               	bcf	21,6	;volsfr
 36086                           
 36087                           ;memory.c: 188: EECON1bits.WREN = 1;
 36088  3E2F  1515               	bsf	21,2	;volsfr
 36089                           
 36090                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 36091  3E30  3000               	movlw	0
 36092  3E31  1B8B               	btfsc	11,7	;volatile
 36093  3E32  3001               	movlw	1
 36094  3E33  00F5               	movwf	DATAEE_WriteByte@GIEBitValue
 36095                           
 36096                           ;memory.c: 191: INTCONbits.GIE = 0;
 36097  3E34  138B               	bcf	11,7	;volatile
 36098                           
 36099                           ;memory.c: 192: EECON2 = 0x55;
 36100  3E35  3055               	movlw	85
 36101  3E36  0096               	movwf	22	;volsfr
 36102                           
 36103                           ;memory.c: 193: EECON2 = 0xAA;
 36104  3E37  30AA               	movlw	170
 36105  3E38  0096               	movwf	22	;volsfr
 36106                           
 36107                           ;memory.c: 194: EECON1bits.WR = 1;
 36108  3E39  1495               	bsf	21,1	;volsfr
 36109  3E3A                     l202:	
 36110                           ;memory.c: 197: {
 36111                           
 36112                           ;memory.c: 196: while (EECON1bits.WR)
 36113                           
 36114  3E3A  1895               	btfsc	21,1	;volsfr
 36115  3E3B  2E3A               	goto	l202
 36116                           
 36117                           ;memory.c: 198: }
 36118                           ;memory.c: 200: EECON1bits.WREN = 0;
 36119  3E3C  1115               	bcf	21,2	;volsfr
 36120                           
 36121                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 36122  3E3D  0C75               	rrf	DATAEE_WriteByte@GIEBitValue,w
 36123  3E3E  1C03               	skipc
 36124  3E3F  138B               	bcf	11,7	;volatile
 36125  3E40  1803               	skipnc
 36126  3E41  178B               	bsf	11,7	;volatile
 36127  3E42  0008               	return
 36128  3E43                     __end_of_DATAEE_WriteByte:	
 36129                           
 36130                           	psect	text156
 36131  3E9B                     __ptext156:	
 36132 ;; *************** function _data_api_read_eeprom *****************
 36133 ;; Defined at:
 36134 ;;		line 81 in file "src/app/appdata.c"
 36135 ;; Parameters:    Size  Location     Type
 36136 ;;  buf             2    4[COMMON] PTR unsigned char 
 36137 ;;		 -> comBuffer(128), uart1Buffer(80), 
 36138 ;;  addr            1    6[COMMON] unsigned char 
 36139 ;;  len             1    7[COMMON] unsigned char 
 36140 ;; Auto vars:     Size  Location     Type
 36141 ;;  i               1    1[BANK0 ] unsigned char 
 36142 ;; Return value:  Size  Location     Type
 36143 ;;                  1    wreg      void 
 36144 ;; Registers used:
 36145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36146 ;; Tracked objects:
 36147 ;;		On entry : 0/0
 36148 ;;		On exit  : 0/0
 36149 ;;		Unchanged: 0/0
 36150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36151 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36152 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36153 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36154 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36155 ;;Total ram usage:        6 bytes
 36156 ;; Hardware stack levels used:    1
 36157 ;; Hardware stack levels required when called:    3
 36158 ;; This function calls:
 36159 ;;		_DATAEE_ReadByte
 36160 ;; This function is called by:
 36161 ;;		_modbus_response_read_clib_data
 36162 ;;		_data_api_calibration_table_data_init
 36163 ;;		_data_api_system_data_init
 36164 ;; This function uses a non-reentrant model
 36165 ;;
 36166                           
 36167                           
 36168                           ;psect for function _data_api_read_eeprom
 36169  3E9B                     _data_api_read_eeprom:	
 36170                           
 36171                           ;appdata.c: 82: uint8_t i;
 36172                           ;appdata.c: 83: for(i=0;i<len;i++){
 36173                           
 36174                           ;incstack = 0
 36175                           ; Regs used in _data_api_read_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36176  3E9B  0020               	movlb	0	; select bank0
 36177  3E9C  01A1               	clrf	data_api_read_eeprom@i
 36178  3E9D                     l14313:	
 36179  3E9D  0877               	movf	data_api_read_eeprom@len,w
 36180  3E9E  0221               	subwf	data_api_read_eeprom@i,w
 36181  3E9F  1803               	btfsc	3,0
 36182  3EA0  0008               	return
 36183                           
 36184                           ;appdata.c: 84: *buf=DATAEE_ReadByte(addr);
 36185  3EA1  0876               	movf	data_api_read_eeprom@addr,w
 36186  3EA2  31BB  234C  31BE   	fcall	_DATAEE_ReadByte
 36187  3EA5  0020               	movlb	0	; select bank0
 36188  3EA6  00A0               	movwf	??_data_api_read_eeprom
 36189  3EA7  0874               	movf	data_api_read_eeprom@buf,w
 36190  3EA8  0086               	movwf	6
 36191  3EA9  0875               	movf	data_api_read_eeprom@buf+1,w
 36192  3EAA  0087               	movwf	7
 36193  3EAB  0820               	movf	??_data_api_read_eeprom,w
 36194  3EAC  0081               	movwf	1
 36195                           
 36196                           ;appdata.c: 85: buf++;
 36197  3EAD  3001               	movlw	1
 36198  3EAE  07F4               	addwf	data_api_read_eeprom@buf,f
 36199  3EAF  3000               	movlw	0
 36200  3EB0  3DF5               	addwfc	data_api_read_eeprom@buf+1,f
 36201                           
 36202                           ;appdata.c: 86: addr++;
 36203  3EB1  3001               	movlw	1
 36204  3EB2  00A0               	movwf	??_data_api_read_eeprom
 36205  3EB3  0820               	movf	??_data_api_read_eeprom,w
 36206  3EB4  07F6               	addwf	data_api_read_eeprom@addr,f
 36207  3EB5  3001               	movlw	1
 36208  3EB6  00A0               	movwf	??_data_api_read_eeprom
 36209  3EB7  0820               	movf	??_data_api_read_eeprom,w
 36210  3EB8  07A1               	addwf	data_api_read_eeprom@i,f
 36211  3EB9  2E9D               	goto	l14313
 36212  3EBA                     __end_of_data_api_read_eeprom:	
 36213                           
 36214                           	psect	text157
 36215  3B4C                     __ptext157:	
 36216 ;; *************** function _DATAEE_ReadByte *****************
 36217 ;; Defined at:
 36218 ;;		line 204 in file "mcc_generated_files/memory.c"
 36219 ;; Parameters:    Size  Location     Type
 36220 ;;  bAdd            1    wreg     unsigned char 
 36221 ;; Auto vars:     Size  Location     Type
 36222 ;;  bAdd            1    3[COMMON] unsigned char 
 36223 ;; Return value:  Size  Location     Type
 36224 ;;                  1    wreg      unsigned char 
 36225 ;; Registers used:
 36226 ;;		wreg
 36227 ;; Tracked objects:
 36228 ;;		On entry : 0/0
 36229 ;;		On exit  : 0/0
 36230 ;;		Unchanged: 0/0
 36231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36235 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36236 ;;Total ram usage:        1 bytes
 36237 ;; Hardware stack levels used:    1
 36238 ;; Hardware stack levels required when called:    2
 36239 ;; This function calls:
 36240 ;;		Nothing
 36241 ;; This function is called by:
 36242 ;;		_data_api_read_eeprom
 36243 ;; This function uses a non-reentrant model
 36244 ;;
 36245                           
 36246                           
 36247                           ;psect for function _DATAEE_ReadByte
 36248  3B4C                     _DATAEE_ReadByte:	
 36249                           
 36250                           ;incstack = 0
 36251                           ; Regs used in _DATAEE_ReadByte: [wreg]
 36252                           ;DATAEE_ReadByte@bAdd stored from wreg
 36253  3B4C  00F3               	movwf	DATAEE_ReadByte@bAdd
 36254                           
 36255                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 36256  3B4D  0873               	movf	DATAEE_ReadByte@bAdd,w
 36257  3B4E  0023               	movlb	3	; select bank3
 36258  3B4F  0091               	movwf	17	;volatile
 36259                           
 36260                           ;memory.c: 207: EECON1bits.CFGS = 0;
 36261  3B50  1315               	bcf	21,6	;volsfr
 36262                           
 36263                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 36264  3B51  1395               	bcf	21,7	;volsfr
 36265                           
 36266                           ;memory.c: 209: EECON1bits.RD = 1;
 36267  3B52  1415               	bsf	21,0	;volsfr
 36268                           
 36269                           ;memory.c: 210: __nop();
 36270  3B53  0000               	nop
 36271                           
 36272                           ;memory.c: 211: __nop();
 36273  3B54  0000               	nop
 36274                           
 36275                           ;memory.c: 213: return (EEDATL);
 36276  3B55  0023               	movlb	3	; select bank3
 36277  3B56  0813               	movf	19,w	;volatile
 36278  3B57  0008               	return
 36279  3B58                     __end_of_DATAEE_ReadByte:	
 36280                           
 36281                           	psect	text158
 36282  355A                     __ptext158:	
 36283 ;; *************** function _crc_verify *****************
 36284 ;; Defined at:
 36285 ;;		line 99 in file "src/protocol/crc16_sf.c"
 36286 ;; Parameters:    Size  Location     Type
 36287 ;;  message         2    8[BANK0 ] PTR unsigned char 
 36288 ;;		 -> cardDecBuf(18), cardIncBuf(18), comBuffer(128), Main_flowCalibrationTable(124), 
 36289 ;;		 -> uart1Buffer(80), 
 36290 ;;  n               2   10[BANK0 ] unsigned int 
 36291 ;; Auto vars:     Size  Location     Type
 36292 ;;  expected        2   17[BANK0 ] unsigned int 
 36293 ;;  crccal          2   15[BANK0 ] unsigned int 
 36294 ;; Return value:  Size  Location     Type
 36295 ;;                  1    wreg      unsigned char 
 36296 ;; Registers used:
 36297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36298 ;; Tracked objects:
 36299 ;;		On entry : 0/0
 36300 ;;		On exit  : 0/0
 36301 ;;		Unchanged: 0/0
 36302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36303 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36304 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36305 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 36306 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 36307 ;;Total ram usage:       11 bytes
 36308 ;; Hardware stack levels used:    1
 36309 ;; Hardware stack levels required when called:    3
 36310 ;; This function calls:
 36311 ;;		_crc_sum
 36312 ;;		_m_mem_cpy_len
 36313 ;; This function is called by:
 36314 ;;		_modbus_response_process
 36315 ;;		_data_api_calibration_table_data_init
 36316 ;;		_data_api_system_data_init
 36317 ;;		_data_api_calibration_table_data_save
 36318 ;;		_rfid_comm_process_read_header
 36319 ;;		_rfid_comm_process_read_inc
 36320 ;;		_rfid_comm_process_read_dec
 36321 ;; This function uses a non-reentrant model
 36322 ;;
 36323                           
 36324                           
 36325                           ;psect for function _crc_verify
 36326  355A                     _crc_verify:	
 36327                           
 36328                           ;crc16_sf.c: 101: uint16_t expected,crccal;
 36329                           ;crc16_sf.c: 104: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 36330                           
 36331                           ;incstack = 0
 36332                           ; Regs used in _crc_verify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36333  355A  3031               	movlw	low crc_verify@expected
 36334  355B  00F3               	movwf	m_mem_cpy_len@d
 36335  355C  3000               	movlw	high crc_verify@expected
 36336  355D  00F4               	movwf	m_mem_cpy_len@d+1
 36337  355E  0020               	movlb	0	; select bank0
 36338  355F  082A               	movf	crc_verify@n,w
 36339  3560  0728               	addwf	crc_verify@message,w
 36340  3561  00AC               	movwf	??_crc_verify
 36341  3562  082B               	movf	crc_verify@n+1,w
 36342  3563  3D29               	addwfc	crc_verify@message+1,w
 36343  3564  00AD               	movwf	??_crc_verify+1
 36344  3565  082C               	movf	??_crc_verify,w
 36345  3566  3EFE               	addlw	254
 36346  3567  00F5               	movwf	m_mem_cpy_len@s
 36347  3568  30FF               	movlw	255
 36348  3569  3D2D               	addwfc	??_crc_verify+1,w
 36349  356A  00F6               	movwf	m_mem_cpy_len@s+1
 36350  356B  3002               	movlw	2
 36351  356C  00AE               	movwf	??_crc_verify+2
 36352  356D  082E               	movf	??_crc_verify+2,w
 36353  356E  00F7               	movwf	m_mem_cpy_len@len
 36354  356F  31BD  259E  31B5   	fcall	_m_mem_cpy_len
 36355                           
 36356                           ;crc16_sf.c: 105: crccal=crc_sum(message,n - 2);
 36357  3572  0020               	movlb	0	; select bank0
 36358  3573  0829               	movf	crc_verify@message+1,w
 36359  3574  00F4               	movwf	crc_sum@buf+1
 36360  3575  0828               	movf	crc_verify@message,w
 36361  3576  00F3               	movwf	crc_sum@buf
 36362  3577  082A               	movf	crc_verify@n,w
 36363  3578  3EFE               	addlw	254
 36364  3579  00F5               	movwf	crc_sum@len
 36365  357A  30FF               	movlw	255
 36366  357B  3D2B               	addwfc	crc_verify@n+1,w
 36367  357C  00F6               	movwf	crc_sum@len+1
 36368  357D  31AB  230E  31B5   	fcall	_crc_sum
 36369  3580  0874               	movf	?_crc_sum+1,w
 36370  3581  0020               	movlb	0	; select bank0
 36371  3582  00B0               	movwf	crc_verify@crccal+1
 36372  3583  0873               	movf	?_crc_sum,w
 36373  3584  00AF               	movwf	crc_verify@crccal
 36374                           
 36375                           ;crc16_sf.c: 106: if(expected!=crccal)return 0;
 36376  3585  0830               	movf	crc_verify@crccal+1,w
 36377  3586  0632               	xorwf	crc_verify@expected+1,w
 36378  3587  1D03               	skipz
 36379  3588  2D8B               	goto	u12055
 36380  3589  082F               	movf	crc_verify@crccal,w
 36381  358A  0631               	xorwf	crc_verify@expected,w
 36382  358B                     u12055:	
 36383  358B  1903               	skipnz
 36384  358C  2D8F               	goto	l13431
 36385  358D  3000               	movlw	0
 36386  358E  0008               	return
 36387  358F                     l13431:	
 36388                           
 36389                           ;crc16_sf.c: 107: return 1;
 36390  358F  3001               	movlw	1
 36391  3590  0008               	return
 36392  3591                     __end_of_crc_verify:	
 36393                           
 36394                           	psect	text159
 36395  3D9E                     __ptext159:	
 36396 ;; *************** function _m_mem_cpy_len *****************
 36397 ;; Defined at:
 36398 ;;		line 41 in file "src/depend/m_string.c"
 36399 ;; Parameters:    Size  Location     Type
 36400 ;;  d               2    3[COMMON] PTR unsigned char 
 36401 ;;		 -> crc_verify@expected(2), pcd_mifare_transceive@cmdBuffer(18), LCDDATA0(1), cardWriteBuf(18), 
 36402 ;;		 -> comBuffer(128), Main_flowCalibrationTable(124), flashOpStr(21), uiAdjbuf(8), 
 36403 ;;		 -> mainSystemData(72), 
 36404 ;;  s               2    5[COMMON] PTR unsigned char 
 36405 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), pLCD(24), 
 36406 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 36407 ;;		 -> comBuffer(128), Main_flowCalibrationTable(124), flashOpStr(21), uiAdjbuf(8), 
 36408 ;;		 -> mainSystemData(72), uart1Buffer(80), 
 36409 ;;  len             1    7[COMMON] unsigned char 
 36410 ;; Auto vars:     Size  Location     Type
 36411 ;;		None
 36412 ;; Return value:  Size  Location     Type
 36413 ;;                  1    wreg      void 
 36414 ;; Registers used:
 36415 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 36416 ;; Tracked objects:
 36417 ;;		On entry : 0/0
 36418 ;;		On exit  : 0/0
 36419 ;;		Unchanged: 0/0
 36420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36421 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36423 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36424 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 36425 ;;Total ram usage:        6 bytes
 36426 ;; Hardware stack levels used:    1
 36427 ;; Hardware stack levels required when called:    2
 36428 ;; This function calls:
 36429 ;;		Nothing
 36430 ;; This function is called by:
 36431 ;;		_ui_key_process_enter
 36432 ;;		_ui_key_set_process
 36433 ;;		_data_api_calibration_table_data_init
 36434 ;;		_data_api_system_data_init
 36435 ;;		_data_api_rt_data_save
 36436 ;;		_data_api_calibration_table_data_save
 36437 ;;		_rfid_comm_process_read_header
 36438 ;;		_rfid_comm_process_recharge
 36439 ;;		_lcd_disp_refresh
 36440 ;;		_pcd_mifare_transceive
 36441 ;;		_crc_verify
 36442 ;; This function uses a non-reentrant model
 36443 ;;
 36444                           
 36445                           
 36446                           ;psect for function _m_mem_cpy_len
 36447  3D9E                     _m_mem_cpy_len:	
 36448  3D9E                     l12137:	
 36449                           ;m_string.c: 44: while(len)
 36450                           
 36451                           ;incstack = 0
 36452                           ; Regs used in _m_mem_cpy_len: [wreg+fsr1l+fsr1h+status,2+status,0]
 36453                           
 36454  3D9E  0877               	movf	m_mem_cpy_len@len,w
 36455  3D9F  1903               	btfsc	3,2
 36456  3DA0  0008               	return
 36457                           
 36458                           ;m_string.c: 45: {
 36459                           ;m_string.c: 46: *d++=*s++;
 36460  3DA1  0875               	movf	m_mem_cpy_len@s,w
 36461  3DA2  0086               	movwf	6
 36462  3DA3  0876               	movf	m_mem_cpy_len@s+1,w
 36463  3DA4  0087               	movwf	7
 36464  3DA5  0801               	movf	1,w
 36465  3DA6  0020               	movlb	0	; select bank0
 36466  3DA7  00A0               	movwf	??_m_mem_cpy_len
 36467  3DA8  0873               	movf	m_mem_cpy_len@d,w
 36468  3DA9  0086               	movwf	6
 36469  3DAA  0874               	movf	m_mem_cpy_len@d+1,w
 36470  3DAB  0087               	movwf	7
 36471  3DAC  0820               	movf	??_m_mem_cpy_len,w
 36472  3DAD  0081               	movwf	1
 36473  3DAE  3001               	movlw	1
 36474  3DAF  07F5               	addwf	m_mem_cpy_len@s,f
 36475  3DB0  3000               	movlw	0
 36476  3DB1  3DF6               	addwfc	m_mem_cpy_len@s+1,f
 36477  3DB2  3001               	movlw	1
 36478  3DB3  07F3               	addwf	m_mem_cpy_len@d,f
 36479  3DB4  3000               	movlw	0
 36480  3DB5  3DF4               	addwfc	m_mem_cpy_len@d+1,f
 36481                           
 36482                           ;m_string.c: 47: len--;
 36483  3DB6  3001               	movlw	1
 36484  3DB7  02F7               	subwf	m_mem_cpy_len@len,f
 36485  3DB8  2D9E               	goto	l12137
 36486  3DB9                     __end_of_m_mem_cpy_len:	
 36487                           
 36488                           	psect	text160
 36489  33C9                     __ptext160:	
 36490 ;; *************** function _crc_append *****************
 36491 ;; Defined at:
 36492 ;;		line 109 in file "src/protocol/crc16_sf.c"
 36493 ;; Parameters:    Size  Location     Type
 36494 ;;  message         2    8[BANK0 ] PTR unsigned char 
 36495 ;;		 -> cardDecBuf(18), comBuffer(128), mainSystemData(72), uart1Buffer(80), 
 36496 ;;  n               2   10[BANK0 ] unsigned int 
 36497 ;; Auto vars:     Size  Location     Type
 36498 ;;  crc             2   17[BANK0 ] unsigned int 
 36499 ;; Return value:  Size  Location     Type
 36500 ;;                  1    wreg      void 
 36501 ;; Registers used:
 36502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36503 ;; Tracked objects:
 36504 ;;		On entry : 0/0
 36505 ;;		On exit  : 0/0
 36506 ;;		Unchanged: 0/0
 36507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36508 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 36509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36510 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 36511 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 36512 ;;Total ram usage:       11 bytes
 36513 ;; Hardware stack levels used:    1
 36514 ;; Hardware stack levels required when called:    3
 36515 ;; This function calls:
 36516 ;;		_crc_sum
 36517 ;; This function is called by:
 36518 ;;		_modbus_response_illgeal_function
 36519 ;;		_modbus_response_write_single_register
 36520 ;;		_modbus_response_command
 36521 ;;		_modbus_response_write_clib_data
 36522 ;;		_modbus_response_read_clib_data
 36523 ;;		_data_api_calibration_table_data_init
 36524 ;;		_data_api_system_data_init
 36525 ;;		_data_api_rt_data_save
 36526 ;;		_data_api_calibration_table_data_save
 36527 ;;		_rfid_comm_process_read_header
 36528 ;;		_rfid_comm_process_recharge
 36529 ;; This function uses a non-reentrant model
 36530 ;;
 36531                           
 36532                           
 36533                           ;psect for function _crc_append
 36534  33C9                     _crc_append:	
 36535                           
 36536                           ;crc16_sf.c: 111: uint16_t crc;
 36537                           ;crc16_sf.c: 112: crc = crc_sum(message, n);
 36538                           
 36539                           ;incstack = 0
 36540                           ; Regs used in _crc_append: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 36541  33C9  0020               	movlb	0	; select bank0
 36542  33CA  0829               	movf	crc_append@message+1,w
 36543  33CB  00F4               	movwf	crc_sum@buf+1
 36544  33CC  0828               	movf	crc_append@message,w
 36545  33CD  00F3               	movwf	crc_sum@buf
 36546  33CE  082B               	movf	crc_append@n+1,w
 36547  33CF  00F6               	movwf	crc_sum@len+1
 36548  33D0  082A               	movf	crc_append@n,w
 36549  33D1  00F5               	movwf	crc_sum@len
 36550  33D2  31AB  230E         	fcall	_crc_sum
 36551  33D4  0874               	movf	?_crc_sum+1,w
 36552  33D5  0020               	movlb	0	; select bank0
 36553  33D6  00B2               	movwf	crc_append@crc+1
 36554  33D7  0873               	movf	?_crc_sum,w
 36555  33D8  00B1               	movwf	crc_append@crc
 36556                           
 36557                           ;crc16_sf.c: 113: message[n] = (uint8_t)(crc & 0xff);
 36558  33D9  082A               	movf	crc_append@n,w
 36559  33DA  0728               	addwf	crc_append@message,w
 36560  33DB  00AC               	movwf	??_crc_append
 36561  33DC  082B               	movf	crc_append@n+1,w
 36562  33DD  3D29               	addwfc	crc_append@message+1,w
 36563  33DE  00AD               	movwf	??_crc_append+1
 36564  33DF  082C               	movf	??_crc_append,w
 36565  33E0  0086               	movwf	6
 36566  33E1  082D               	movf	??_crc_append+1,w
 36567  33E2  0087               	movwf	7
 36568  33E3  0831               	movf	crc_append@crc,w
 36569  33E4  0081               	movwf	1
 36570                           
 36571                           ;crc16_sf.c: 114: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 36572  33E5  0832               	movf	crc_append@crc+1,w
 36573  33E6  00AC               	movwf	??_crc_append
 36574  33E7  082A               	movf	crc_append@n,w
 36575  33E8  3E01               	addlw	1
 36576  33E9  00AD               	movwf	??_crc_append+1
 36577  33EA  3000               	movlw	0
 36578  33EB  3D2B               	addwfc	crc_append@n+1,w
 36579  33EC  00AE               	movwf	??_crc_append+2
 36580  33ED  082D               	movf	??_crc_append+1,w
 36581  33EE  0728               	addwf	crc_append@message,w
 36582  33EF  00AF               	movwf	??_crc_append+3
 36583  33F0  082E               	movf	??_crc_append+2,w
 36584  33F1  3D29               	addwfc	crc_append@message+1,w
 36585  33F2  00B0               	movwf	??_crc_append+4
 36586  33F3  082F               	movf	??_crc_append+3,w
 36587  33F4  0086               	movwf	6
 36588  33F5  0830               	movf	??_crc_append+4,w
 36589  33F6  0087               	movwf	7
 36590  33F7  082C               	movf	??_crc_append,w
 36591  33F8  0081               	movwf	1
 36592  33F9  0008               	return
 36593  33FA                     __end_of_crc_append:	
 36594                           
 36595                           	psect	text161
 36596  2B0E                     __ptext161:	
 36597 ;; *************** function _crc_sum *****************
 36598 ;; Defined at:
 36599 ;;		line 80 in file "src/protocol/crc16_sf.c"
 36600 ;; Parameters:    Size  Location     Type
 36601 ;;  buf             2    3[COMMON] PTR unsigned char 
 36602 ;;		 -> cardDecBuf(18), cardIncBuf(18), comBuffer(128), Main_flowCalibrationTable(124), 
 36603 ;;		 -> mainSystemData(72), uart1Buffer(80), 
 36604 ;;  len             2    5[COMMON] unsigned int 
 36605 ;; Auto vars:     Size  Location     Type
 36606 ;;  crc             2    6[BANK0 ] unsigned int 
 36607 ;;  i               2    4[BANK0 ] unsigned int 
 36608 ;;  j               2    2[BANK0 ] unsigned int 
 36609 ;; Return value:  Size  Location     Type
 36610 ;;                  2    3[COMMON] unsigned int 
 36611 ;; Registers used:
 36612 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 36613 ;; Tracked objects:
 36614 ;;		On entry : 0/0
 36615 ;;		On exit  : 0/0
 36616 ;;		Unchanged: 0/0
 36617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36618 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36619 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 36620 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36621 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0
 36622 ;;Total ram usage:       12 bytes
 36623 ;; Hardware stack levels used:    1
 36624 ;; Hardware stack levels required when called:    2
 36625 ;; This function calls:
 36626 ;;		Nothing
 36627 ;; This function is called by:
 36628 ;;		_crc_verify
 36629 ;;		_crc_append
 36630 ;; This function uses a non-reentrant model
 36631 ;;
 36632                           
 36633                           
 36634                           ;psect for function _crc_sum
 36635  2B0E                     _crc_sum:	
 36636                           
 36637                           ;crc16_sf.c: 82: uint16_t crc=0xFFFF;
 36638                           
 36639                           ;incstack = 0
 36640                           ; Regs used in _crc_sum: [wreg+fsr1l+fsr1h+status,2+status,0]
 36641  2B0E  30FF               	movlw	255
 36642  2B0F  0020               	movlb	0	; select bank0
 36643  2B10  00A6               	movwf	crc_sum@crc
 36644  2B11  30FF               	movlw	255
 36645  2B12  00A7               	movwf	crc_sum@crc+1
 36646                           
 36647                           ;crc16_sf.c: 83: uint16_t i, j;
 36648                           ;crc16_sf.c: 84: for ( j=0; j<len;j++){
 36649  2B13  01A2               	clrf	crc_sum@j
 36650  2B14  01A3               	clrf	crc_sum@j+1
 36651  2B15                     l2424:	
 36652  2B15  0876               	movf	crc_sum@len+1,w
 36653  2B16  0223               	subwf	crc_sum@j+1,w
 36654  2B17  1D03               	skipz
 36655  2B18  2B1B               	goto	u11755
 36656  2B19  0875               	movf	crc_sum@len,w
 36657  2B1A  0222               	subwf	crc_sum@j,w
 36658  2B1B                     u11755:	
 36659  2B1B  1803               	btfsc	3,0
 36660  2B1C  2B5F               	goto	l13155
 36661                           
 36662                           ;crc16_sf.c: 85: crc=crc ^*buf++;
 36663  2B1D  0873               	movf	crc_sum@buf,w
 36664  2B1E  0086               	movwf	6
 36665  2B1F  0874               	movf	crc_sum@buf+1,w
 36666  2B20  0087               	movwf	7
 36667  2B21  0826               	movf	crc_sum@crc,w
 36668  2B22  0601               	xorwf	1,w
 36669  2B23  00A6               	movwf	crc_sum@crc
 36670  2B24  0827               	movf	crc_sum@crc+1,w
 36671  2B25  00A7               	movwf	crc_sum@crc+1
 36672  2B26  3001               	movlw	1
 36673  2B27  07F3               	addwf	crc_sum@buf,f
 36674  2B28  3000               	movlw	0
 36675  2B29  3DF4               	addwfc	crc_sum@buf+1,f
 36676                           
 36677                           ;crc16_sf.c: 86: for ( i=0; i<8; i++){
 36678  2B2A  01A4               	clrf	crc_sum@i
 36679  2B2B  01A5               	clrf	crc_sum@i+1
 36680  2B2C  3000               	movlw	0
 36681  2B2D  0225               	subwf	crc_sum@i+1,w
 36682  2B2E  3008               	movlw	8
 36683  2B2F  1903               	skipnz
 36684  2B30  0224               	subwf	crc_sum@i,w
 36685  2B31  1803               	btfsc	3,0
 36686  2B32  2B5A               	goto	l13153
 36687  2B33                     l2426:	
 36688                           
 36689                           ;crc16_sf.c: 88: if(crc&0x0001){
 36690  2B33  1C26               	btfss	crc_sum@crc,0
 36691  2B34  2B45               	goto	l13147
 36692                           
 36693                           ;crc16_sf.c: 89: crc=crc>>1;
 36694  2B35  0827               	movf	crc_sum@crc+1,w
 36695  2B36  00A1               	movwf	??_crc_sum+1
 36696  2B37  0826               	movf	crc_sum@crc,w
 36697  2B38  00A0               	movwf	??_crc_sum
 36698  2B39  36A1               	lsrf	??_crc_sum+1,f
 36699  2B3A  0CA0               	rrf	??_crc_sum,f
 36700  2B3B  0820               	movf	??_crc_sum,w
 36701  2B3C  00A6               	movwf	crc_sum@crc
 36702  2B3D  0821               	movf	??_crc_sum+1,w
 36703  2B3E  00A7               	movwf	crc_sum@crc+1
 36704                           
 36705                           ;crc16_sf.c: 90: crc=crc^ 0xa001;
 36706  2B3F  3001               	movlw	1
 36707  2B40  0626               	xorwf	crc_sum@crc,w
 36708  2B41  00A6               	movwf	crc_sum@crc
 36709  2B42  30A0               	movlw	160
 36710  2B43  0627               	xorwf	crc_sum@crc+1,w
 36711  2B44  2B4E               	goto	L15
 36712  2B45                     l13147:	
 36713                           ;crc16_sf.c: 91: }else{
 36714                           
 36715                           
 36716                           ;crc16_sf.c: 92: crc=crc>>1;
 36717  2B45  0827               	movf	crc_sum@crc+1,w
 36718  2B46  00A1               	movwf	??_crc_sum+1
 36719  2B47  0826               	movf	crc_sum@crc,w
 36720  2B48  00A0               	movwf	??_crc_sum
 36721  2B49  36A1               	lsrf	??_crc_sum+1,f
 36722  2B4A  0CA0               	rrf	??_crc_sum,f
 36723  2B4B  0820               	movf	??_crc_sum,w
 36724  2B4C  00A6               	movwf	crc_sum@crc
 36725  2B4D  0821               	movf	??_crc_sum+1,w
 36726  2B4E                     L15:	
 36727  2B4E  00A7               	movwf	crc_sum@crc+1
 36728  2B4F  3001               	movlw	1
 36729  2B50  07A4               	addwf	crc_sum@i,f
 36730  2B51  3000               	movlw	0
 36731  2B52  3DA5               	addwfc	crc_sum@i+1,f
 36732  2B53  3000               	movlw	0
 36733  2B54  0225               	subwf	crc_sum@i+1,w
 36734  2B55  3008               	movlw	8
 36735  2B56  1903               	skipnz
 36736  2B57  0224               	subwf	crc_sum@i,w
 36737  2B58  1C03               	skipc
 36738  2B59  2B33               	goto	l2426
 36739  2B5A                     l13153:	
 36740  2B5A  3001               	movlw	1
 36741  2B5B  07A2               	addwf	crc_sum@j,f
 36742  2B5C  3000               	movlw	0
 36743  2B5D  3DA3               	addwfc	crc_sum@j+1,f
 36744  2B5E  2B15               	goto	l2424
 36745  2B5F                     l13155:	
 36746                           
 36747                           ;crc16_sf.c: 93: }
 36748                           ;crc16_sf.c: 94: }
 36749                           ;crc16_sf.c: 96: }
 36750                           ;crc16_sf.c: 97: return ( crc);
 36751  2B5F  0827               	movf	crc_sum@crc+1,w
 36752  2B60  00F4               	movwf	?_crc_sum+1
 36753  2B61  0826               	movf	crc_sum@crc,w
 36754  2B62  00F3               	movwf	?_crc_sum
 36755  2B63  0008               	return
 36756  2B64                     __end_of_crc_sum:	
 36757                           
 36758                           	psect	text162
 36759  3E7D                     __ptext162:	
 36760 ;; *************** function ___wmul *****************
 36761 ;; Defined at:
 36762 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 36763 ;; Parameters:    Size  Location     Type
 36764 ;;  multiplier      2    3[COMMON] unsigned int 
 36765 ;;  multiplicand    2    5[COMMON] unsigned int 
 36766 ;; Auto vars:     Size  Location     Type
 36767 ;;  product         2    0[BANK0 ] unsigned int 
 36768 ;; Return value:  Size  Location     Type
 36769 ;;                  2    3[COMMON] unsigned int 
 36770 ;; Registers used:
 36771 ;;		wreg, status,2, status,0
 36772 ;; Tracked objects:
 36773 ;;		On entry : 0/0
 36774 ;;		On exit  : 0/0
 36775 ;;		Unchanged: 0/0
 36776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36777 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36778 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36780 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 36781 ;;Total ram usage:        6 bytes
 36782 ;; Hardware stack levels used:    1
 36783 ;; Hardware stack levels required when called:    2
 36784 ;; This function calls:
 36785 ;;		Nothing
 36786 ;; This function is called by:
 36787 ;;		_data_api_calibration_table_data_init
 36788 ;;		_ui_key_process_cancel
 36789 ;;		_ui_key_set_process
 36790 ;; This function uses a non-reentrant model
 36791 ;;
 36792                           
 36793                           
 36794                           ;psect for function ___wmul
 36795  3E7D                     ___wmul:	
 36796                           
 36797                           ;incstack = 0
 36798                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 36799  3E7D  0020               	movlb	0	; select bank0
 36800  3E7E  01A0               	clrf	___wmul@product
 36801  3E7F  01A1               	clrf	___wmul@product+1
 36802  3E80                     l14569:	
 36803  3E80  1C73               	btfss	___wmul@multiplier,0
 36804  3E81  2E87               	goto	l2703
 36805  3E82  0875               	movf	___wmul@multiplicand,w
 36806  3E83  0020               	movlb	0	; select bank0
 36807  3E84  07A0               	addwf	___wmul@product,f
 36808  3E85  0876               	movf	___wmul@multiplicand+1,w
 36809  3E86  3DA1               	addwfc	___wmul@product+1,f
 36810  3E87                     l2703:	
 36811  3E87  3001               	movlw	1
 36812  3E88                     u13365:	
 36813  3E88  35F5               	lslf	___wmul@multiplicand,f
 36814  3E89  0DF6               	rlf	___wmul@multiplicand+1,f
 36815  3E8A  0B89               	decfsz	9,f
 36816  3E8B  2E88               	goto	u13365
 36817  3E8C  3001               	movlw	1
 36818  3E8D                     u13375:	
 36819  3E8D  36F4               	lsrf	___wmul@multiplier+1,f
 36820  3E8E  0CF3               	rrf	___wmul@multiplier,f
 36821  3E8F  0B89               	decfsz	9,f
 36822  3E90  2E8D               	goto	u13375
 36823  3E91  0873               	movf	___wmul@multiplier,w
 36824  3E92  0474               	iorwf	___wmul@multiplier+1,w
 36825  3E93  1D03               	btfss	3,2
 36826  3E94  2E80               	goto	l14569
 36827  3E95  0020               	movlb	0	; select bank0
 36828  3E96  0821               	movf	___wmul@product+1,w
 36829  3E97  00F4               	movwf	?___wmul+1
 36830  3E98  0820               	movf	___wmul@product,w
 36831  3E99  00F3               	movwf	?___wmul
 36832  3E9A  0008               	return
 36833  3E9B                     __end_of___wmul:	
 36834                           
 36835                           	psect	intentry
 36836  0004                     __pintentry:	
 36837 ;; *************** function _INTERRUPT_InterruptManager *****************
 36838 ;; Defined at:
 36839 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 36840 ;; Parameters:    Size  Location     Type
 36841 ;;		None
 36842 ;; Auto vars:     Size  Location     Type
 36843 ;;		None
 36844 ;; Return value:  Size  Location     Type
 36845 ;;                  1    wreg      void 
 36846 ;; Registers used:
 36847 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 36848 ;; Tracked objects:
 36849 ;;		On entry : 0/0
 36850 ;;		On exit  : 0/0
 36851 ;;		Unchanged: 0/0
 36852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36855 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36856 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36857 ;;Total ram usage:        1 bytes
 36858 ;; Hardware stack levels used:    1
 36859 ;; Hardware stack levels required when called:    1
 36860 ;; This function calls:
 36861 ;;		_EUSART1_Receive_ISR
 36862 ;;		_EUSART1_Transmit_ISR
 36863 ;;		_TMR0_ISR
 36864 ;;		_TMR1_ISR
 36865 ;; This function is called by:
 36866 ;;		Interrupt level 1
 36867 ;; This function uses a non-reentrant model
 36868 ;;
 36869                           
 36870  0004                     _INTERRUPT_InterruptManager:	
 36871                           
 36872                           ;incstack = 0
 36873  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 36874                           
 36875                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 36876  0005  3180               	pagesel	$
 36877  0006  0020               	movlb	0	; select bank0
 36878  0007  087F               	movf	127,w
 36879  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 36880                           
 36881                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 36882  0009  1A8B               	btfsc	11,5	;volatile
 36883  000A  1D0B               	btfss	11,2	;volatile
 36884  000B  2810               	goto	i1l136
 36885                           
 36886                           ;interrupt_manager.c: 56: {
 36887                           ;interrupt_manager.c: 57: TMR0_ISR();
 36888  000C  31B6  2602  3180   	fcall	_TMR0_ISR
 36889                           
 36890                           ;interrupt_manager.c: 58: }
 36891  000F  2832               	goto	i1l144
 36892  0010                     i1l136:	
 36893                           
 36894                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 36895  0010  1F0B               	btfss	11,6	;volatile
 36896  0011  281C               	goto	i1l138
 36897  0012  0021               	movlb	1	; select bank1
 36898  0013  1E11               	btfss	17,4	;volatile
 36899  0014  281C               	goto	i1l138
 36900  0015  0020               	movlb	0	; select bank0
 36901  0016  1E11               	btfss	17,4	;volatile
 36902  0017  281C               	goto	i1l138
 36903                           
 36904                           ;interrupt_manager.c: 60: {
 36905                           ;interrupt_manager.c: 61: EUSART1_Transmit_ISR();
 36906  0018  3180  2003  3180   	fcall	_EUSART1_Transmit_ISR
 36907                           
 36908                           ;interrupt_manager.c: 62: }
 36909  001B  2832               	goto	i1l144
 36910  001C                     i1l138:	
 36911                           
 36912                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 36913  001C  1F0B               	btfss	11,6	;volatile
 36914  001D  2828               	goto	i1l140
 36915  001E  0021               	movlb	1	; select bank1
 36916  001F  1E91               	btfss	17,5	;volatile
 36917  0020  2828               	goto	i1l140
 36918  0021  0020               	movlb	0	; select bank0
 36919  0022  1E91               	btfss	17,5	;volatile
 36920  0023  2828               	goto	i1l140
 36921                           
 36922                           ;interrupt_manager.c: 64: {
 36923                           ;interrupt_manager.c: 65: EUSART1_Receive_ISR();
 36924  0024  31BF  2741  3180   	fcall	_EUSART1_Receive_ISR
 36925                           
 36926                           ;interrupt_manager.c: 66: }
 36927  0027  2832               	goto	i1l144
 36928  0028                     i1l140:	
 36929                           
 36930                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 36931  0028  1F0B               	btfss	11,6	;volatile
 36932  0029  2832               	goto	i1l144
 36933  002A  0021               	movlb	1	; select bank1
 36934  002B  1C11               	btfss	17,0	;volatile
 36935  002C  2832               	goto	i1l144
 36936  002D  0020               	movlb	0	; select bank0
 36937  002E  1C11               	btfss	17,0	;volatile
 36938  002F  2832               	goto	i1l144
 36939                           
 36940                           ;interrupt_manager.c: 68: {
 36941                           ;interrupt_manager.c: 69: TMR1_ISR();
 36942  0030  31BC  2436         	fcall	_TMR1_ISR
 36943  0032                     i1l144:	
 36944                           ;interrupt_manager.c: 71: else
 36945                           ;interrupt_manager.c: 72: {
 36946                           
 36947                           ;interrupt_manager.c: 70: }
 36948                           
 36949  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 36950  0033  0020               	movlb	0	; select bank0
 36951  0034  00FF               	movwf	127
 36952  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 36953  0036  0009               	retfie
 36954  0037                     __end_of_INTERRUPT_InterruptManager:	
 36955                           
 36956                           	psect	text164
 36957  3C36                     __ptext164:	
 36958 ;; *************** function _TMR1_ISR *****************
 36959 ;; Defined at:
 36960 ;;		line 156 in file "mcc_generated_files/tmr1.c"
 36961 ;; Parameters:    Size  Location     Type
 36962 ;;		None
 36963 ;; Auto vars:     Size  Location     Type
 36964 ;;		None
 36965 ;; Return value:  Size  Location     Type
 36966 ;;                  1    wreg      void 
 36967 ;; Registers used:
 36968 ;;		wreg, status,2, status,0
 36969 ;; Tracked objects:
 36970 ;;		On entry : 0/0
 36971 ;;		On exit  : 0/0
 36972 ;;		Unchanged: 0/0
 36973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 36974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36977 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 36978 ;;Total ram usage:        1 bytes
 36979 ;; Hardware stack levels used:    1
 36980 ;; This function calls:
 36981 ;;		Nothing
 36982 ;; This function is called by:
 36983 ;;		_INTERRUPT_InterruptManager
 36984 ;; This function uses a non-reentrant model
 36985 ;;
 36986                           
 36987                           
 36988                           ;psect for function _TMR1_ISR
 36989  3C36                     _TMR1_ISR:	
 36990                           
 36991                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
 36992                           
 36993                           ;incstack = 0
 36994                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0]
 36995  3C36  0020               	movlb	0	; select bank0
 36996  3C37  1011               	bcf	17,0	;volatile
 36997                           
 36998                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 36999  3C38  0022               	movlb	2	; select bank2
 37000  3C39  086E               	movf	(_timer1ReloadVal+1)^(0+256),w	;volatile
 37001  3C3A  0020               	movlb	0	; select bank0
 37002  3C3B  0097               	movwf	23	;volatile
 37003                           
 37004                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
 37005  3C3C  0022               	movlb	2	; select bank2
 37006  3C3D  086D               	movf	_timer1ReloadVal^(0+256),w	;volatile
 37007  3C3E  0020               	movlb	0	; select bank0
 37008  3C3F  0096               	movwf	22	;volatile
 37009                           
 37010                           ;tmr1.c: 173: systemTickerSec++;
 37011  3C40  3001               	movlw	1
 37012  3C41  00F0               	movwf	??_TMR1_ISR
 37013  3C42  0870               	movf	??_TMR1_ISR,w
 37014  3C43  0022               	movlb	2	; select bank2
 37015  3C44  07C2               	addwf	_systemTickerSec^(0+256),f
 37016                           
 37017                           ;tmr1.c: 174: Event |= (0x01<<5);
 37018  3C45  0021               	movlb	1	; select bank1
 37019  3C46  16C7               	bsf	_Event^(0+128),5
 37020  3C47  0008               	return
 37021  3C48                     __end_of_TMR1_ISR:	
 37022                           
 37023                           	psect	text165
 37024  3602                     __ptext165:	
 37025 ;; *************** function _TMR0_ISR *****************
 37026 ;; Defined at:
 37027 ;;		line 111 in file "mcc_generated_files/tmr0.c"
 37028 ;; Parameters:    Size  Location     Type
 37029 ;;		None
 37030 ;; Auto vars:     Size  Location     Type
 37031 ;;		None
 37032 ;; Return value:  Size  Location     Type
 37033 ;;                  1    wreg      void 
 37034 ;; Registers used:
 37035 ;;		wreg, status,2, status,0
 37036 ;; Tracked objects:
 37037 ;;		On entry : 0/0
 37038 ;;		On exit  : 0/0
 37039 ;;		Unchanged: 0/0
 37040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37045 ;;Total ram usage:        1 bytes
 37046 ;; Hardware stack levels used:    1
 37047 ;; This function calls:
 37048 ;;		Nothing
 37049 ;; This function is called by:
 37050 ;;		_INTERRUPT_InterruptManager
 37051 ;; This function uses a non-reentrant model
 37052 ;;
 37053                           
 37054                           
 37055                           ;psect for function _TMR0_ISR
 37056  3602                     _TMR0_ISR:	
 37057                           
 37058                           ;tmr0.c: 115: INTCONbits.TMR0IF = 0;
 37059                           
 37060                           ;incstack = 0
 37061                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0]
 37062  3602  110B               	bcf	11,2	;volatile
 37063                           
 37064                           ;tmr0.c: 117: TMR0 = timer0ReloadVal;
 37065  3603  0022               	movlb	2	; select bank2
 37066  3604  086F               	movf	_timer0ReloadVal^(0+256),w	;volatile
 37067  3605  0020               	movlb	0	; select bank0
 37068  3606  0095               	movwf	21	;volatile
 37069                           
 37070                           ;tmr0.c: 122: systemTikerms+=10;
 37071  3607  300A               	movlw	10
 37072  3608  0022               	movlb	2	; select bank2
 37073  3609  07B0               	addwf	_systemTikerms^(0+256),f
 37074  360A  3000               	movlw	0
 37075  360B  3DB1               	addwfc	(_systemTikerms+1)^(0+256),f
 37076                           
 37077                           ;tmr0.c: 123: globlTickerms+=10;
 37078  360C  300A               	movlw	10
 37079  360D  07AE               	addwf	_globlTickerms^(0+256),f
 37080  360E  3000               	movlw	0
 37081  360F  3DAF               	addwfc	(_globlTickerms+1)^(0+256),f
 37082                           
 37083                           ;tmr0.c: 124: calVolumeTs+=10;
 37084  3610  300A               	movlw	10
 37085  3611  0023               	movlb	3	; select bank3
 37086  3612  07A2               	addwf	_calVolumeTs^(0+384),f
 37087  3613  3000               	movlw	0
 37088  3614  3DA3               	addwfc	(_calVolumeTs+1)^(0+384),f
 37089                           
 37090                           ;tmr0.c: 125: if(calVolumeTs>=500){
 37091  3615  3001               	movlw	1
 37092  3616  0223               	subwf	(_calVolumeTs+1)^(0+384),w
 37093  3617  30F4               	movlw	244
 37094  3618  1903               	skipnz
 37095  3619  0222               	subwf	_calVolumeTs^(0+384),w
 37096  361A  1C03               	skipc
 37097  361B  2E25               	goto	i1l11301
 37098                           
 37099                           ;tmr0.c: 126: calVolumeTs=0;
 37100  361C  01A2               	clrf	_calVolumeTs^(0+384)
 37101  361D  01A3               	clrf	(_calVolumeTs+1)^(0+384)
 37102                           
 37103                           ;tmr0.c: 127: Event |= (uint8_t)(0x01<<7);
 37104  361E  0021               	movlb	1	; select bank1
 37105  361F  17C7               	bsf	_Event^(0+128),7
 37106                           
 37107                           ;tmr0.c: 128: calVolumeTimeSec++;
 37108  3620  3001               	movlw	1
 37109  3621  00F0               	movwf	??_TMR0_ISR
 37110  3622  0870               	movf	??_TMR0_ISR,w
 37111  3623  0022               	movlb	2	; select bank2
 37112  3624  07C1               	addwf	_calVolumeTimeSec^(0+256),f
 37113  3625                     i1l11301:	
 37114                           
 37115                           ;tmr0.c: 130: }
 37116                           ;tmr0.c: 131: Event |= (0x01<<4);
 37117  3625  0021               	movlb	1	; select bank1
 37118  3626  1647               	bsf	_Event^(0+128),4
 37119                           
 37120                           ;tmr0.c: 134: if(uart1ReceivedTimer){
 37121  3627  0022               	movlb	2	; select bank2
 37122  3628  0840               	movf	_uart1ReceivedTimer^(0+256),w
 37123  3629  1903               	btfsc	3,2
 37124  362A  0008               	return
 37125                           
 37126                           ;tmr0.c: 135: uart1ReceivedTimeout+=10;
 37127  362B  300A               	movlw	10
 37128  362C  0023               	movlb	3	; select bank3
 37129  362D  07A4               	addwf	_uart1ReceivedTimeout^(0+384),f
 37130  362E  3000               	movlw	0
 37131  362F  3DA5               	addwfc	(_uart1ReceivedTimeout+1)^(0+384),f
 37132                           
 37133                           ;tmr0.c: 136: if(uart1ReceivedTimeout>=100)
 37134  3630  3000               	movlw	0
 37135  3631  0225               	subwf	(_uart1ReceivedTimeout+1)^(0+384),w
 37136  3632  3064               	movlw	100
 37137  3633  1903               	skipnz
 37138  3634  0224               	subwf	_uart1ReceivedTimeout^(0+384),w
 37139  3635  1C03               	skipc
 37140  3636  0008               	return
 37141                           
 37142                           ;tmr0.c: 137: {
 37143                           ;tmr0.c: 138: uart1ReceivedTimer=0;
 37144  3637  0022               	movlb	2	; select bank2
 37145  3638  01C0               	clrf	_uart1ReceivedTimer^(0+256)
 37146                           
 37147                           ;tmr0.c: 139: Event |= (0x01<<2);
 37148  3639  0021               	movlb	1	; select bank1
 37149  363A  1547               	bsf	_Event^(0+128),2
 37150  363B  0008               	return
 37151  363C                     __end_of_TMR0_ISR:	
 37152                           
 37153                           	psect	text166
 37154  0003                     __ptext166:	
 37155 ;; *************** function _EUSART1_Transmit_ISR *****************
 37156 ;; Defined at:
 37157 ;;		line 32 in file "mcc_generated_files/eusart1.c"
 37158 ;; Parameters:    Size  Location     Type
 37159 ;;		None
 37160 ;; Auto vars:     Size  Location     Type
 37161 ;;		None
 37162 ;; Return value:  Size  Location     Type
 37163 ;;                  1    wreg      void 
 37164 ;; Registers used:
 37165 ;;		None
 37166 ;; Tracked objects:
 37167 ;;		On entry : 0/0
 37168 ;;		On exit  : 0/0
 37169 ;;		Unchanged: 0/0
 37170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37175 ;;Total ram usage:        0 bytes
 37176 ;; Hardware stack levels used:    1
 37177 ;; This function calls:
 37178 ;;		Nothing
 37179 ;; This function is called by:
 37180 ;;		_INTERRUPT_InterruptManager
 37181 ;; This function uses a non-reentrant model
 37182 ;;
 37183                           
 37184                           
 37185                           ;psect for function _EUSART1_Transmit_ISR
 37186  0003                     _EUSART1_Transmit_ISR:	
 37187                           
 37188                           ;incstack = 0
 37189                           ; Regs used in _EUSART1_Transmit_ISR: []
 37190  0003  0008               	return
 37191  0004                     __end_of_EUSART1_Transmit_ISR:	
 37192                           
 37193                           	psect	text167
 37194  3F41                     __ptext167:	
 37195 ;; *************** function _EUSART1_Receive_ISR *****************
 37196 ;; Defined at:
 37197 ;;		line 111 in file "mcc_generated_files/eusart1.c"
 37198 ;; Parameters:    Size  Location     Type
 37199 ;;		None
 37200 ;; Auto vars:     Size  Location     Type
 37201 ;;  t8              1    1[COMMON] unsigned char 
 37202 ;; Return value:  Size  Location     Type
 37203 ;;                  1    wreg      void 
 37204 ;; Registers used:
 37205 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 37206 ;; Tracked objects:
 37207 ;;		On entry : 0/0
 37208 ;;		On exit  : 0/0
 37209 ;;		Unchanged: 0/0
 37210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 37211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37213 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37214 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 37215 ;;Total ram usage:        2 bytes
 37216 ;; Hardware stack levels used:    1
 37217 ;; This function calls:
 37218 ;;		Nothing
 37219 ;; This function is called by:
 37220 ;;		_INTERRUPT_InterruptManager
 37221 ;; This function uses a non-reentrant model
 37222 ;;
 37223                           
 37224                           
 37225                           ;psect for function _EUSART1_Receive_ISR
 37226  3F41                     _EUSART1_Receive_ISR:	
 37227                           
 37228                           ;eusart1.c: 113: uint8_t t8;
 37229                           ;eusart1.c: 114: if(1 == RC1STAbits.OERR)
 37230                           
 37231                           ;incstack = 0
 37232                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 37233  3F41  0023               	movlb	3	; select bank3
 37234  3F42  1C9D               	btfss	29,1	;volatile
 37235  3F43  2F47               	goto	i1l11315
 37236                           
 37237                           ;eusart1.c: 115: {
 37238                           ;eusart1.c: 118: RC1STAbits.CREN = 0;
 37239  3F44  121D               	bcf	29,4	;volatile
 37240                           
 37241                           ;eusart1.c: 119: RC1STAbits.CREN = 1;
 37242  3F45  161D               	bsf	29,4	;volatile
 37243                           
 37244                           ;eusart1.c: 121: }
 37245  3F46  0008               	return
 37246  3F47                     i1l11315:	
 37247                           
 37248                           ;eusart1.c: 122: else{
 37249                           ;eusart1.c: 123: t8=RC1REG;
 37250  3F47  0819               	movf	25,w	;volatile
 37251  3F48  00F0               	movwf	??_EUSART1_Receive_ISR
 37252  3F49  0870               	movf	??_EUSART1_Receive_ISR,w
 37253  3F4A  00F1               	movwf	EUSART1_Receive_ISR@t8
 37254                           
 37255                           ;eusart1.c: 124: if(uart1ReceivedCount<80)
 37256  3F4B  3000               	movlw	0
 37257  3F4C  0022               	movlb	2	; select bank2
 37258  3F4D  022D               	subwf	(_uart1ReceivedCount+1)^(0+256),w
 37259  3F4E  3050               	movlw	80
 37260  3F4F  1903               	skipnz
 37261  3F50  022C               	subwf	_uart1ReceivedCount^(0+256),w
 37262  3F51  1803               	skipnc
 37263  3F52  2F60               	goto	i1l11321
 37264                           
 37265                           ;eusart1.c: 125: {
 37266                           ;eusart1.c: 126: uart1Buffer[uart1ReceivedCount]=t8;
 37267  3F53  0871               	movf	EUSART1_Receive_ISR@t8,w
 37268  3F54  00F0               	movwf	??_EUSART1_Receive_ISR
 37269  3F55  082C               	movf	_uart1ReceivedCount^(0+256),w
 37270  3F56  3EA0               	addlw	160
 37271  3F57  0086               	movwf	6
 37272  3F58  3004               	movlw	4	; select bank9/10
 37273  3F59  0087               	movwf	7
 37274  3F5A  0870               	movf	??_EUSART1_Receive_ISR,w
 37275  3F5B  0081               	movwf	1
 37276                           
 37277                           ;eusart1.c: 127: uart1ReceivedCount++;
 37278  3F5C  3001               	movlw	1
 37279  3F5D  07AC               	addwf	_uart1ReceivedCount^(0+256),f
 37280  3F5E  3000               	movlw	0
 37281  3F5F  3DAD               	addwfc	(_uart1ReceivedCount+1)^(0+256),f
 37282  3F60                     i1l11321:	
 37283                           
 37284                           ;eusart1.c: 128: }
 37285                           ;eusart1.c: 129: uart1ReceivedTimer=1;
 37286  3F60  01C0               	clrf	_uart1ReceivedTimer^(0+256)
 37287  3F61  0AC0               	incf	_uart1ReceivedTimer^(0+256),f
 37288                           
 37289                           ;eusart1.c: 130: uart1ReceivedTimeout=0;
 37290  3F62  0023               	movlb	3	; select bank3
 37291  3F63  01A4               	clrf	_uart1ReceivedTimeout^(0+384)
 37292  3F64  01A5               	clrf	(_uart1ReceivedTimeout+1)^(0+384)
 37293  3F65  0008               	return
 37294  3F66                     __end_of_EUSART1_Receive_ISR:	
 37295  007E                     btemp	set	126	;btemp
 37296  007E                     int$flags	set	126
 37297  007E                     wtemp0	set	126


Data Sizes:
    Strings     172
    Constant    112
    Data        82
    BSS         200
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80     38      80
    BANK2            80      0      80
    BANK3            80      3      55
    BANK4            80      0      72
    BANK5            80      0      40
    BANK6            32      0       0
    BANK7             0      0       0
    BANK8             8      0       0
    BANK10           80      0       0
    BANK11            4      0       0
    BANK12            0      0       0

Pointer List with Targets:

    crc_append@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), comBuffer(BIGRAM[128]), mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), 
		 -> uart1Buffer(ABS[80]), 

    crc_sum@buf	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), 
		 -> mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    pcd_mifare_transceive@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), cardDecBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), 

    mifare_write@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 

    mifare_read@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> rdLen(BANK1[1]), __t8(BANK1[1]), 

    mifare_read@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    picc_authenticate@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_authenticate@key	PTR struct . size(2) Largest target is 6
		 -> userKeyB(BANK3[6]), defaultKeyA(CODE[6]), 

    picc_select@responseBuffer	PTR unsigned char  size(1) Largest target is 9
		 -> picc_select@buffer(BANK1[9]), 

    picc_select@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_req_a_or_wakeup_a@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> mfapi_is_new_card_present@bufferSize(BANK0[1]), 

    picc_req_a_or_wakeup_a@bufferATQA	PTR unsigned char  size(1) Largest target is 2
		 -> mfapi_is_new_card_present@bufferATQA(BANK0[2]), 

    pcd_comm_with_picc@rlen	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@cmdBufferSize(BANK0[1]), picc_select@responseLength(BANK1[1]), mfapi_is_new_card_present@bufferSize(BANK0[1]), rdLen(BANK1[1]), 
		 -> __t8(BANK1[1]), NULL(NULL[0]), 

    pcd_comm_with_picc@rbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    pcd_comm_with_picc@sbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 
		 -> cardUidBlockBuf(BANK8[18]), 

    pcd_comm_with_picc@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@validBits(BANK0[1]), picc_select@txLastBits(BANK1[1]), picc_req_a_or_wakeup_a@validBits(BANK0[1]), NULL(NULL[0]), 

    mfrc522_hal_calculate_crc@result	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), pcd_comm_with_picc@controlBuffer(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    mfrc522_hal_calculate_crc@data	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> NULL(NULL[0]), 

    mfrc522_bal_read_fifo_len_ex@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    mfrc522_bal_write_reg_len@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    adc_mcp3241_read_convert_16@sta	PTR unsigned char  size(1) Largest target is 1
		 -> flow_sampling_process@i(BANK0[1]), 

    lcd_disp_str@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_24(CODE[9]), STR_22(CODE[9]), STR_21(CODE[9]), STR_20(CODE[9]), 
		 -> STR_19(CODE[9]), STR_18(CODE[9]), STR_17(CODE[9]), STR_16(CODE[9]), 
		 -> STR_15(CODE[9]), STR_7(CODE[9]), STR_4(CODE[9]), STR_3(CODE[9]), 
		 -> STR_1(CODE[9]), lcdBuf(BANK2[9]), 

    lcd_set_com_seg@p	PTR unsigned char  size(1) Largest target is 24
		 -> pLCD(BANK3[24]), 

    pLcdReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR15[1]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 128
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), pLCD(BANK3[24]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> mainSystemData(BANK4[72]), uart1Buffer(ABS[80]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 128
		 -> crc_verify@expected(BANK0[2]), pcd_mifare_transceive@cmdBuffer(BANK0[18]), LCDDATA0(SFR15[1]), cardWriteBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), Main_flowCalibrationTable(BIGRAM[124]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> mainSystemData(BANK4[72]), 

    m_mem_set@buf	PTR unsigned char  size(2) Largest target is 128
		 -> pLCD(BANK3[24]), PiccUid(BANK3[12]), comBuffer(BIGRAM[128]), flashOpStr(BANK2[21]), 
		 -> lcdBuf(BANK2[9]), 

    rfid_comm_process_recharge@stpDec	PTR struct . size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), 

    rfid_comm_process_recharge@stpInc	PTR struct . size(1) Largest target is 18
		 -> cardIncBuf(BANK8[18]), 

    rfid_comm_process_read_header@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    create_card_key_b@cckey	PTR unsigned char  size(1) Largest target is 72
		 -> mainSystemData(BANK4[72]), 

    create_card_key_b@uid	PTR unsigned char  size(1) Largest target is 18
		 -> cardUidBlockBuf(BANK8[18]), 

    create_card_key_b@keyb	PTR unsigned char  size(1) Largest target is 6
		 -> userKeyB(BANK3[6]), 

    data_api_calibration_table_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_rt_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_calibration_table_data_init@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_read_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), uart1Buffer(ABS[80]), 

    data_api_write_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), mainSystemData(BANK4[72]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_clib_data@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_clib_data@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_clib_data@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_clib_data@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_command@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_command@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_single_register@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_single_register@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    getRegisterVal@tempData	PTR unsigned int  size(1) Largest target is 2
		 -> modbus_response_command@tempData(BANK0[2]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    key_process_up_down_variable_speed_ex@val	PTR int  size(1) Largest target is 8
		 -> uiAdjbuf(BANK2[8]), 

    ui_disp_str_num_ex@str	PTR unsigned char  size(2) Largest target is 5
		 -> STR_23(CODE[5]), 

    ui_disp_str_num@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), STR_11(CODE[6]), 
		 -> STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[4]), STR_6(CODE[7]), 
		 -> STR_5(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@s	PTR unsigned char  size(2) Largest target is 7
		 -> STR_23(CODE[5]), STR_14(CODE[6]), STR_13(CODE[6]), STR_12(CODE[6]), 
		 -> STR_11(CODE[6]), STR_10(CODE[5]), STR_9(CODE[4]), STR_8(CODE[4]), 
		 -> STR_6(CODE[7]), STR_5(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@d	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_head_hide@str	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_uint32_2_str@buf	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    my_uart1_send_poll@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _ui_key_waite_up_ex->_get_globle_ticker
    _ui_key_set_process->___awdiv
    _ui_key_set_process->_m_mem_cpy_len
    _ui_disp_menu->_lcd_clear_buffer
    _ui_disp_transfer_money->___lldiv
    _ui_disp_transfer_money->_lcd_clear_buffer
    _ui_disp_transfer_money->_ui_uint32_2_str
    _ui_disp_str_num_ex->___lwdiv
    _ui_disp_str_num_ex->___lwmod
    _ui_disp_str_num_ex->_lcd_clear_buffer
    _ui_disp_str_num_ex->_ui_mem_cpy
    _ui_disp_set_price->_lcd_clear_buffer
    _ui_disp_set_price->_ui_uint32_2_str
    _ui_disp_set_line->_lcd_clear_buffer
    _ui_disp_set_line->_ui_uint32_2_str
    _ui_disp_set_imd_flow_uint->_lcd_clear_buffer
    _ui_disp_set_calib->___awdiv
    _ui_disp_set_calib->___awmod
    _ui_disp_set_calib->_lcd_clear_buffer
    _ui_disp_set_calib->_ui_uint32_2_str
    _ui_disp_str_num->___lwdiv
    _ui_disp_str_num->___lwmod
    _ui_disp_str_num->_lcd_clear_buffer
    _ui_disp_str_num->_ui_mem_cpy
    _ui_disp_flow->___lldiv
    _ui_disp_flow->_lcd_clear_buffer
    _ui_disp_flow->_ui_uint32_2_str
    _ui_disp_totale_v->_lcd_clear_buffer
    _ui_disp_totale_v->_ui_uint32_2_str
    _ui_key_process_enter->___awdiv
    _ui_key_process_enter->_m_mem_cpy_len
    _ui_key_waite_up->_get_globle_ticker
    _ui_key_process_cancel->___awdiv
    _timer1_irq_callback->_valve_stop
    _ui_disp_balance_and_volume->_lcd_clear_buffer
    _ui_disp_balance_and_volume->_ui_uint32_2_str
    _m_math_pow->___lmul
    _ui_disp_flow_error->_lcd_clear_buffer
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_code->_lcd_disp_code_0
    _lcd_disp_code->_lcd_disp_code_1
    _lcd_disp_code->_lcd_disp_code_2
    _lcd_disp_code->_lcd_disp_code_3
    _lcd_disp_code->_lcd_disp_code_4
    _lcd_disp_code->_lcd_disp_code_5
    _lcd_disp_code->_lcd_disp_code_6
    _lcd_disp_code->_lcd_disp_code_7
    _lcd_clear_buffer->_m_mem_set
    _lcd_set_com_seg->___awdiv
    _rfid_comm_process_recharge->_m_mem_cpy_len
    _rfid_comm_process_read_header->_create_card_key_b
    _rfid_comm_process_read_header->_m_mem_cpy_len
    _pcd_mifare_transceive->_m_mem_cpy_len
    _data_api_rt_data_save->_data_api_write_eeprom
    _data_api_rt_data_save->_m_mem_cpy_len
    _picc_select->___awdiv
    _picc_select->_mfrc522_bal_read_reg
    _picc_select->_mfrc522_bal_write_reg
    ___bmul->___awdiv
    _pcd_comm_with_picc->_mfrc522_bal_read_fifo_len_ex
    _pcd_comm_with_picc->_mfrc522_bal_read_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg_len
    _mfrc522_hal_calculate_crc->_mfrc522_bal_read_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg_len
    _mfrc522_bal_write_reg_len->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_fifo_len_ex->_mfrc522_bal_write_read_via_spi
    _key_scan_call->_delay
    _in_app_vavle_on->_valve_on
    _modbus_response_process->_modbus_response_illgeal_function
    _modbus_response_write_single_register->_modbus_response_illgeal_function
    _modbus_response_write_clib_data->_modbus_response_illgeal_function
    _data_api_calibration_table_data_save->_data_api_write_eeprom
    _data_api_calibration_table_data_save->_m_mem_cpy_len
    _modbus_response_read_clib_data->_data_api_read_eeprom
    _modbus_response_read_clib_data->_modbus_response_illgeal_function
    _getRegisterVal->___lldiv
    _mfapi_pcd_init->_mfrc522_bal_read_reg
    _mfrc522_hal_init->_mfrc522_bal_write_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_write_reg
    _mfrc522_bal_write_reg->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_reg->_mfrc522_bal_write_read_via_spi
    _lcd_config->_lcd_disp_all
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _app_flow_rt_volume_cal_ex->___lldiv
    _app_flow_rt_balance_money_cal->___lldiv
    _app_flow_money_off->_in_app_vavle_off
    _in_app_vavle_off->_valve_off
    _app_flow_get_adcAverageValue->___lldiv
    _app_flow_adc_2_flow->___lldiv
    ___lldiv->___lmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _iic_start->_delay
    _iic_send_byte->_iic_waite_ack
    _iic_stop->_delay
    _iic_received_byte_if_ack->_iic_received_byte
    _data_api_system_data_init->_data_api_read_eeprom
    _data_api_system_data_init->_data_api_write_eeprom
    _data_api_system_data_init->_m_mem_cpy_len
    _data_api_calibration_table_data_init->_data_api_read_eeprom
    _data_api_calibration_table_data_init->_data_api_write_eeprom
    _data_api_calibration_table_data_init->_m_mem_cpy_len
    _data_api_write_eeprom->_DATAEE_WriteByte
    _data_api_read_eeprom->_DATAEE_ReadByte
    _crc_verify->_m_mem_cpy_len
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR

Critical Paths under _main in BANK0

    _ui_start_display->_ui_disp_str_num
    _ui_key_process->_ui_key_process_up_down
    _ui_key_set_process->_data_api_calibration_table_data_save
    _ui_key_process_up_down->_key_process_up_down_variable_speed_ex
    _key_process_up_down_variable_speed_ex->_ui_disp_menu
    _ui_disp_menu->_ui_disp_flow
    _ui_disp_transfer_money->_ui_uint32_2_str
    _ui_disp_str_num_ex->_lcd_disp_str
    _ui_disp_small_flow_how_care->_ui_disp_str_num
    _ui_disp_set_transferMoneyLimit->_ui_disp_str_num
    _ui_disp_set_price->_ui_uint32_2_str
    _ui_disp_set_line->_ui_uint32_2_str
    _ui_disp_set_imd_flow_uint->_lcd_disp_str
    _ui_disp_set_device_id->_ui_disp_str_num
    _ui_disp_set_calib->_ui_uint32_2_str
    _ui_disp_set_balanceWarning->_ui_disp_str_num
    _ui_disp_set_balanceOff->_ui_disp_str_num
    _ui_disp_modbus_id->_ui_disp_str_num
    _ui_disp_str_num->_lcd_disp_str
    _ui_disp_flow->_ui_uint32_2_str
    _ui_disp_clear_totale->_ui_disp_totale_v
    _ui_disp_totale_v->_ui_uint32_2_str
    _ui_disp_clear_balance->_ui_disp_balance_and_volume
    _ui_key_process_enter->___aldiv
    _ui_key_process_down->_data_api_calibration_table_data_save
    _ui_key_process_cancel->_data_api_calibration_table_data_save
    _rfid_comm_process->_rfid_comm_process_read_header
    _rfid_comm_process->_rfid_comm_process_recharge
    _ui_disp_balance_and_volume->_ui_uint32_2_str
    _ui_uint32_2_str->_m_math_pow
    _m_math_pow->___lmul
    _ui_disp_flow_error->_lcd_disp_str
    _lcd_disp_str->_lcd_disp_refresh
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_dp->_lcd_set_com_seg
    _lcd_disp_cln->_lcd_set_com_seg
    _lcd_set_com_seg->___bmul
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_inc->_picc_authenticate
    _rfid_comm_process_read_header->_mifare_write
    _mifare_write->_pcd_mifare_transceive
    _pcd_mifare_transceive->_pcd_comm_with_picc
    _data_api_flash_process->_data_api_calibration_table_data_save
    _data_api_rt_data_save->_crc_append
    _rfid_comm_process_read_dec->_picc_authenticate
    _picc_authenticate->_pcd_comm_with_picc
    _mifare_read->_pcd_comm_with_picc
    _picc_stop_cryptol->_mfrc522_bal_clr_bit_reg
    _picc_select->_pcd_comm_with_picc
    ___bmul->___awdiv
    _picc_halt_a->_pcd_comm_with_picc
    _mfapi_is_new_card_present->_picc_req_a_or_wakeup_a
    _picc_req_a_or_wakeup_a->_pcd_comm_with_picc
    _pcd_comm_with_picc->_mfrc522_hal_calculate_crc
    _mfrc522_hal_calculate_crc->_mfrc522_bal_set_bit_reg
    _modbus_response_process->_modbus_response_write_clib_data
    _modbus_response_write_single_register->_modbus_response_illgeal_function
    _modbus_response_write_clib_data->_data_api_calibration_table_data_save
    _data_api_calibration_table_data_save->_crc_append
    _data_api_calibration_table_data_save->_crc_verify
    _modbus_response_read_clib_data->_modbus_response_illgeal_function
    _modbus_response_illgeal_function->_crc_append
    _modbus_response_command->_getRegisterVal
    _getRegisterVal->___lldiv
    _mfapi_pcd_init->_mfrc522_hal_init
    _mfrc522_hal_init->_mfrc522_hal_set_antenna_gain
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_clr_bit_reg
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_set_bit_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _lcd_config->_lcd_disp_all
    _flow_sampling_process->_app_flow_get_adcAverageValue
    _app_flow_rt_volume_cal_ex->___lldiv
    _app_flow_rt_balance_money_cal->___lldiv
    _app_flow_get_adcAverageValue->___lldiv
    _app_flow_adc_2_flow->___lldiv
    ___lldiv->___lmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_received_byte_if_ack
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _data_api_system_data_init->_crc_append
    _data_api_system_data_init->_crc_verify
    _data_api_calibration_table_data_init->_crc_append
    _data_api_calibration_table_data_init->_crc_verify
    _crc_verify->_crc_sum
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rfid_comm_process
    _rfid_comm_process->_picc_select
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_header->_mifare_write

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_rfid_comm_process

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2506284
                                             37 BANK1      1     1      0
                                              2 BANK3      1     1      0
_data_api_calibration_table_data_ini
             _data_api_flash_process
          _data_api_system_data_init
                              _delay
                 _event_door_monitor
                _event_power_monitor
              _flow_sampling_process
                    _in_app_vavle_on
                      _m_system_init
                     _mfapi_pcd_init
            _modbus_response_process
            _my_uart1_received_ready
                  _rfid_comm_process
                _timer0_irq_callback
                _timer1_irq_callback
                       _ui_disp_menu
                     _ui_key_process
                   _ui_start_display
 ---------------------------------------------------------------------------------
 (1) _ui_start_display                                     3     3      0   32369
                                             13 BANK0      3     3      0
                       _lcd_disp_all
                       _lcd_disp_str
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (1) _ui_key_process                                       3     3      0 1221432
                                             53 BANK0      3     3      0
                      _key_scan_call
                       _ui_disp_menu
              _ui_key_process_cancel
                _ui_key_process_down
               _ui_key_process_enter
             _ui_key_process_up_down
                 _ui_key_set_process
                    _ui_key_waite_up
                 _ui_key_waite_up_ex
 ---------------------------------------------------------------------------------
 (2) _ui_key_waite_up_ex                                   4     2      2    2715
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (2) _ui_key_set_process                                   2     2      0   29413
                                             38 BANK0      2     2      0
                            ___awdiv
                             ___wmul
_data_api_calibration_table_data_sav
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_up_down                               2     2      0  560996
                                             51 BANK0      2     2      0
_key_process_up_down_variable_speed_
        _ui_key_process_up_down_main
 ---------------------------------------------------------------------------------
 (3) _ui_key_process_up_down_main                          2     2      0      31
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _key_process_up_down_variable_speed_ex               16    11      5  560461
                                             35 BANK0     16    11      5
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
                       _ui_disp_menu
 ---------------------------------------------------------------------------------
 (4) _ui_disp_menu                                         2     2      0  552850
                                             33 BANK0      2     2      0
                   _lcd_clear_buffer
                   _lcd_disp_refresh
                       _lcd_disp_str
         _ui_disp_balance_and_volume
              _ui_disp_clear_balance
               _ui_disp_clear_totale
                       _ui_disp_flow
                  _ui_disp_modbus_id
             _ui_disp_set_balanceOff
         _ui_disp_set_balanceWarning
                  _ui_disp_set_calib
              _ui_disp_set_device_id
          _ui_disp_set_imd_flow_uint
                   _ui_disp_set_line
                  _ui_disp_set_price
     _ui_disp_set_transferMoneyLimit
        _ui_disp_small_flow_how_care
                 _ui_disp_str_num_ex
                   _ui_disp_totale_v
             _ui_disp_transfer_money
 ---------------------------------------------------------------------------------
 (5) _ui_disp_transfer_money                               2     2      0   27227
                                             26 BANK0      2     2      0
                            ___lldiv
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_str_num_ex                                   6     2      4   19752
                                              7 BANK0      6     2      4
                            ___lwdiv
                            ___lwmod
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                         _ui_mem_cpy
 ---------------------------------------------------------------------------------
 (5) _ui_disp_small_flow_how_care                          2     2      0   21660
                                             13 BANK0      2     2      0
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_transferMoneyLimit                       0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_price                                    3     3      0   31218
                                             26 BANK0      3     3      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_line                                     4     4      0   29954
                                             26 BANK0      4     4      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_imd_flow_uint                            0     0      0   14629
                   _lcd_clear_buffer
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_device_id                                0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_calib                                    4     4      0   34587
                                             26 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lbmod
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceWarning                           0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceOff                               0     0      0   21660
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (5) _ui_disp_modbus_id                                    2     2      0   21660
                                             13 BANK0      2     2      0
                    _ui_disp_str_num
 ---------------------------------------------------------------------------------
 (2) _ui_disp_str_num                                      6     2      4   21660
                                              7 BANK0      6     2      4
                            ___lwdiv
                            ___lwmod
                   _lcd_clear_buffer
                       _lcd_disp_str
                          _m_mem_set
                         _ui_mem_cpy
 ---------------------------------------------------------------------------------
 (3) _ui_mem_cpy                                           5     3      2     388
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     161
                                              3 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     132
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (5) _ui_disp_flow                                         7     7      0   48994
                                             26 BANK0      7     7      0
                            ___lldiv
                             ___lmul
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_totale                                 0     0      0   45946
                   _ui_disp_totale_v
 ---------------------------------------------------------------------------------
 (5) _ui_disp_totale_v                                     3     3      0   45946
                                             26 BANK0      3     3      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_balance                                0     0      0   51983
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_enter                                 6     6      0   11718
                                             14 BANK0      6     6      0
                            ___aldiv
                            ___awdiv
                      _m_mem_cpy_len
                    _ui_key_waite_up
 ---------------------------------------------------------------------------------
 (2) _ui_key_waite_up                                      4     2      2    2594
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (3) _set_globle_ticker                                    2     0      2     301
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _get_globle_ticker                                    4     2      2      34
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_down                                  1     1      0   35536
                                             38 BANK0      1     1      0
_data_api_calibration_table_data_sav
              _data_api_rt_data_save
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_cancel                               11    11      0   23371
                                             38 BANK0     11    11      0
                            ___awdiv
                             ___wmul
_data_api_calibration_table_data_sav
 ---------------------------------------------------------------------------------
 (1) _timer1_irq_callback                                  1     1      0       0
                                              4 COMMON     1     1      0
                         _valve_stop
 ---------------------------------------------------------------------------------
 (2) _valve_stop                                           1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _timer0_irq_callback                                  1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rfid_comm_process                                    4     4      0  510650
                                             36 BANK1      1     1      0
                                              0 BANK3      2     2      0
                              _delay
                   _in_app_vavle_off
                    _in_app_vavle_on
                      _key_scan_call
                       _lcd_disp_str
          _mfapi_is_new_card_present
                        _picc_halt_a
                        _picc_select
                  _picc_stop_cryptol
         _rfid_comm_process_read_dec
      _rfid_comm_process_read_header
         _rfid_comm_process_read_inc
         _rfid_comm_process_recharge
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (6) _ui_disp_balance_and_volume                           3     3      0   51983
                                             26 BANK0      3     3      0
                            ___aldiv
                   _lcd_clear_buffer
                       _lcd_disp_cln
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                 _ui_disp_flow_error
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) _ui_uint32_2_str                                     10     5      5    5253
                                              7 COMMON     1     1      0
                                             17 BANK0      9     4      5
                            ___aldiv
                            ___almod
                         _m_math_pow
 ---------------------------------------------------------------------------------
 (7) _m_math_pow                                           9     4      5    1417
                                              8 BANK0      9     4      5
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___almod                                             11     3      8     613
                                              3 COMMON     3     3      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) _ui_head_hide                                         4     3      1    1298
                                              3 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (6) _ui_disp_flow_error                                   0     0      0   14629
                   _lcd_clear_buffer
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_str                                         5     3      2   10483
                                              2 BANK0      5     3      2
                      _lcd_disp_code
                   _lcd_disp_refresh
 ---------------------------------------------------------------------------------
 (4) _lcd_disp_refresh                                     1     1      0    6042
                                              1 BANK0      1     1      0
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _lcd_disp_code                                        2     1      1    2105
                                              5 COMMON     2     1      1
                    _lcd_disp_code_0
                    _lcd_disp_code_1
                    _lcd_disp_code_2
                    _lcd_disp_code_3
                    _lcd_disp_code_4
                    _lcd_disp_code_5
                    _lcd_disp_code_6
                    _lcd_disp_code_7
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_7                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_6                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_5                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_4                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_3                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_2                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_1                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code_0                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _lcd_clear_buffer                                     1     1      0    4146
                                              7 COMMON     1     1      0
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_dp                                          4     3      1    5892
                                             18 BANK0      4     3      1
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_disp_cln                                         3     3      0    5166
                                             18 BANK0      3     3      0
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_set_com_seg                                     10     8      2    5104
                                              8 BANK0     10     8      2
                            ___awdiv
                             ___bmul
                            ___lbmod
 ---------------------------------------------------------------------------------
 (8) ___lbmod                                              6     5      1     412
                                              3 COMMON     3     2      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_recharge                          11    11      0   97414
                                             77 BANK0      3     3      0
                                              4 BANK1      8     8      0
                         _crc_append
             _data_api_flash_process
                      _m_mem_cpy_len
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_inc                           4     4      0   57234
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_header                       10    10      0  137772
                                             77 BANK0      3     3      0
                                              4 BANK1      7     7      0
                         _crc_append
                         _crc_verify
                  _create_card_key_b
             _data_api_flash_process
                      _m_mem_cpy_len
                          _m_mem_set
                        _mifare_read
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _mifare_write                                         8     6      2   35206
                                             73 BANK0      4     2      2
                                              0 BANK1      4     4      0
              _pcd_mifare_transceive
 ---------------------------------------------------------------------------------
 (4) _pcd_mifare_transceive                               31    27      4   34307
                                             42 BANK0     31    27      4
                      _m_mem_cpy_len
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _data_api_flash_process                               1     1      0   31390
                                             38 BANK0      1     1      0
_data_api_calibration_table_data_sav
              _data_api_rt_data_save
 ---------------------------------------------------------------------------------
 (3) _data_api_rt_data_save                                5     5      0   10837
                                             19 BANK0      5     5      0
                         _crc_append
           _data_api_system_data_get
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _create_card_key_b                                    5     3      2     386
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_dec                           4     4      0   57234
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _picc_authenticate                                   22    18      4   21315
                                             42 BANK0     22    18      4
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _mifare_read                                          7     5      2   27446
                                             42 BANK0      7     5      2
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _picc_stop_cryptol                                    1     1      0    2707
                                              6 BANK0      1     1      0
            _mfrc522_bal_clr_bit_reg
 ---------------------------------------------------------------------------------
 (2) _picc_select                                         43    42      1   37715
                                             42 BANK0      7     6      1
                                              0 BANK1     36    36      0
                            ___awdiv
                             ___bmul
            _mfrc522_bal_clr_bit_reg
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               4     3      1     406
                                              4 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    2245
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _picc_halt_a                                          8     8      0   26612
                                             42 BANK0      8     8      0
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mfapi_is_new_card_present                            8     8      0   26739
                                             52 BANK0      8     8      0
                          _m_mem_set
             _picc_req_a_or_wakeup_a
 ---------------------------------------------------------------------------------
 (3) _picc_req_a_or_wakeup_a                              10     8      2   22378
                                             42 BANK0     10     8      2
            _mfrc522_bal_clr_bit_reg
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (4) _pcd_comm_with_picc                                  25    15     10   19129
                                             17 BANK0     25    15     10
       _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
          _mfrc522_hal_calculate_crc
 ---------------------------------------------------------------------------------
 (5) _mfrc522_hal_calculate_crc                           11     6      5    7222
                                              6 BANK0     11     6      5
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg_len                            6     3      3     635
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_read_fifo_len_ex                         8     4      4     706
                                              7 COMMON     1     1      0
                                              0 BANK0      7     3      4
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (3) _m_mem_set                                            4     0      4    4146
                                              3 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (3) _key_scan_call                                        1     1      0    2191
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) _in_app_vavle_on                                      2     2      0      62
                                              4 COMMON     2     2      0
                           _valve_on
 ---------------------------------------------------------------------------------
 (3) _valve_on                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _my_uart1_received_ready                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2   71988
                                             46 BANK0      6     4      2
                         _crc_verify
            _modbus_response_command
   _modbus_response_illgeal_function
     _modbus_response_read_clib_data
    _modbus_response_write_clib_data
_modbus_response_write_single_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_single_register                7     7      0    9068
                                             22 BANK0      7     7      0
                         _crc_append
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_clib_data                      8     8      0   29720
                                             38 BANK0      8     8      0
                         _crc_append
_data_api_calibration_table_data_sav
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _data_api_calibration_table_data_save                19    18      1   20553
                                             19 BANK0     19    18      1
                         _crc_append
                         _crc_verify
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_read_clib_data                      12    12      0   10308
                                             22 BANK0     10    10      0
                         _crc_append
               _data_api_read_eeprom
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _modbus_response_illgeal_function                     4     3      1    4746
                                              7 COMMON     1     1      0
                                             19 BANK0      3     2      1
                         _crc_append
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (2) _modbus_response_command                             12    12      0    9234
                                             32 BANK0     12    12      0
                         _crc_append
                     _getRegisterVal
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _my_uart1_send_poll                                   3     2      1     692
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _getRegisterVal                                      11     8      3    4441
                                             21 BANK0     11     8      3
                            ___aldiv
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             15     7      8     837
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (1) _mfapi_pcd_init                                       2     2      0   14150
                                              9 BANK0      2     2      0
               _mfrc522_bal_read_reg
                   _mfrc522_hal_init
 ---------------------------------------------------------------------------------
 (2) _mfrc522_hal_init                                     1     1      0   13844
                                              8 BANK0      1     1      0
                              _delay
              _mfrc522_bal_write_reg
             _mfrc522_hal_antenna_on
               _mfrc522_hal_reset_sf
       _mfrc522_hal_set_antenna_gain
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_set_antenna_gain                         2     2      0    5636
                                              6 BANK0      2     2      0
            _mfrc522_bal_clr_bit_reg
            _mfrc522_bal_set_bit_reg
       _mfrc522_hal_get_antenna_gain
 ---------------------------------------------------------------------------------
 (4) _mfrc522_hal_get_antenna_gain                         2     2      0     250
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_set_bit_reg                              4     3      1    2617
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_bal_clr_bit_reg                              4     3      1    2707
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_reset_sf                                 1     1      0    1914
                                              1 BANK0      1     1      0
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_antenna_on                               2     2      0    2189
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg                                2     1      1    1914
                                              7 COMMON     1     0      1
                                              0 BANK0      1     1      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_read_reg                                 3     3      0     210
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_write_read_via_spi                       4     4      0     142
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _m_system_init                                        0     0      0     372
                  _SYSTEM_Initialize
                           _lcd_init
                      _led_port_init
               _other_gpio_port_init
 ---------------------------------------------------------------------------------
 (2) _other_gpio_port_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _led_port_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0     130
                         _lcd_config
 ---------------------------------------------------------------------------------
 (3) _lcd_config                                           0     0      0     130
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (2) _lcd_disp_all                                         6     6      0     130
                                              3 COMMON     4     4      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     242
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_Initialize                                      0     0      0     121
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR1_SetInterruptHandler                             2     0      2     121
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0     121
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2     121
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _flow_sampling_process                                2     2      0   27606
                                             43 BANK0      2     2      0
        _adc_mcp3241_read_convert_16
       _adc_mcp3241_start_convert_16
                _app_flow_adc_2_flow
       _app_flow_get_adcAverageValue
                    _app_flow_lookup
                 _app_flow_money_off
             _app_flow_money_warning
      _app_flow_rt_balance_money_cal
          _app_flow_rt_volume_cal_ex
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_volume_cal_ex                            4     4      0    3569
                                             21 BANK0      4     4      0
                            ___lldiv
                            ___llmod
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___llmod                                             10     2      8     592
                                              3 COMMON     2     2      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_balance_money_cal                        8     8      0    2977
                                             21 BANK0      8     8      0
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_warning                               1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_off                                   1     1      0      62
                                              6 COMMON     1     1      0
                   _in_app_vavle_off
 ---------------------------------------------------------------------------------
 (2) _in_app_vavle_off                                     2     2      0      62
                                              4 COMMON     2     2      0
                          _valve_off
 ---------------------------------------------------------------------------------
 (3) _valve_off                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_lookup                                     17    15      2     406
                                              3 COMMON     3     1      2
                                              0 BANK0     14    14      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_get_adcAverageValue                        22    20      2    2671
                                             21 BANK0     22    20      2
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _app_flow_adc_2_flow                                 21    19      2    3796
                                             21 BANK0     21    19      2
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8    1076
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1901
                                              7 COMMON     1     1      0
                                              8 BANK0     13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_start_convert_16                         4     3      1    6966
                                              2 BANK0      4     3      1
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_read_convert_16                          7     5      2    7057
                                              2 BANK0      7     5      2
           _iic_received_byte_if_ack
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_start                                            0     0      0    2191
                              _delay
 ---------------------------------------------------------------------------------
 (3) _iic_send_byte                                        3     3      0    2358
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
                      _iic_waite_ack
 ---------------------------------------------------------------------------------
 (4) _iic_waite_ack                                        2     2      0    2256
                                              5 COMMON     2     2      0
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_stop                                             0     0      0    2191
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                2     0      2    2191
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _iic_received_byte_if_ack                             3     3      0     207
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                  _iic_received_byte
                       _iic_send_ack
 ---------------------------------------------------------------------------------
 (4) _iic_send_ack                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _iic_received_byte                                    3     3      0     108
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _event_power_monitor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _event_door_monitor                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _data_api_system_data_init                            2     2      0   20139
                                             19 BANK0      2     2      0
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
           _data_api_system_data_get
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _data_api_system_data_get                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _data_api_calibration_table_data_init                10    10      0   21025
                                             19 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
              _data_api_write_eeprom
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (4) _data_api_write_eeprom                                6     2      4    1495
                                              6 COMMON     2     2      0
                                              0 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     279
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _data_api_read_eeprom                                 6     2      4     977
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (4) _DATAEE_ReadByte                                      1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_verify                                          11     7      4    8439
                                              8 BANK0     11     7      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (5) _m_mem_cpy_len                                        6     1      5    6042
                                              3 COMMON     5     0      5
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_append                                          11     7      4    3142
                                              8 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (5) _crc_sum                                             12     8      4     731
                                              3 COMMON     4     0      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _INTERRUPT_InterruptManager                          1     1      0      23
                                              2 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _TMR0_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _EUSART1_Receive_ISR                                 2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _data_api_calibration_table_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_mem_cpy_len
   _data_api_flash_process
     _data_api_calibration_table_data_save
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_mem_cpy_len
     _data_api_rt_data_save
       _crc_append
         _crc_sum
       _data_api_system_data_get
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_mem_cpy_len
   _data_api_system_data_init
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_system_data_get
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_mem_cpy_len
   _delay
   _event_door_monitor
   _event_power_monitor
   _flow_sampling_process
     _adc_mcp3241_read_convert_16
       _iic_received_byte_if_ack
         _iic_received_byte
         _iic_send_ack
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _adc_mcp3241_start_convert_16
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _app_flow_adc_2_flow
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _app_flow_get_adcAverageValue
       ___lldiv
         ___lmul (ARG)
     _app_flow_lookup
     _app_flow_money_off
       _in_app_vavle_off
         _valve_off
     _app_flow_money_warning
     _app_flow_rt_balance_money_cal
       ___lldiv
         ___lmul (ARG)
       ___lmul
     _app_flow_rt_volume_cal_ex
       ___lldiv
         ___lmul (ARG)
       ___llmod
       ___lmul
   _in_app_vavle_on
     _valve_on
   _m_system_init
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
         _TMR1_StartTimer
       _WDT_Initialize
     _lcd_init
       _lcd_config
         _lcd_disp_all
     _led_port_init
     _other_gpio_port_init
   _mfapi_pcd_init
     _mfrc522_bal_read_reg
       _mfrc522_bal_write_read_via_spi
     _mfrc522_hal_init
       _delay
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_antenna_on
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_reset_sf
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_set_antenna_gain
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_get_antenna_gain
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_command
       _crc_append
         _crc_sum
       _getRegisterVal
         ___aldiv
         ___lldiv
           ___lmul (ARG)
         ___lmul
       _my_uart1_send_poll
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _my_uart1_send_poll
     _modbus_response_read_clib_data
       _crc_append
         _crc_sum
       _data_api_read_eeprom
         _DATAEE_ReadByte
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_write_clib_data
       _crc_append
         _crc_sum
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_write_single_register
       _crc_append
         _crc_sum
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
   _my_uart1_received_ready
   _rfid_comm_process
     _delay
     _in_app_vavle_off
       _valve_off
     _in_app_vavle_on
       _valve_on
     _key_scan_call
       _delay
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _mfapi_is_new_card_present
       _m_mem_set
       _picc_req_a_or_wakeup_a
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _picc_halt_a
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_select
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_read_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_stop_cryptol
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_dec
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_header
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _create_card_key_b
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
       _m_mem_cpy_len
       _m_mem_set
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_inc
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_recharge
       _crc_append
         _crc_sum
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_mem_cpy_len
       _m_mem_cpy_len
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _ui_disp_balance_and_volume
       ___aldiv
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
   _timer0_irq_callback
   _timer1_irq_callback
     _valve_stop
   _ui_disp_menu
     _lcd_clear_buffer
       _m_mem_set
     _lcd_disp_refresh
       _m_mem_cpy_len
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _ui_disp_balance_and_volume
       ___aldiv
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_clear_balance
       _ui_disp_balance_and_volume
         ___aldiv
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_clear_totale
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_flow
       ___lldiv
         ___lmul (ARG)
       ___lmul
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_modbus_id
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_balanceOff
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_balanceWarning
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_calib
       ___awdiv
       ___awmod
       ___lbmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_device_id
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_imd_flow_uint
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
     _ui_disp_set_line
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_price
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_transferMoneyLimit
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_small_flow_how_care
       _ui_disp_str_num
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_str_num_ex
       ___lwdiv
       ___lwmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_mem_cpy
     _ui_disp_totale_v
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_disp_flow_error
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_transfer_money
       ___lldiv
         ___lmul (ARG)
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
         ___almod
         _m_math_pow
           ___lmul
   _ui_key_process
     _key_scan_call
       _delay
     _ui_disp_menu
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_refresh
         _m_mem_cpy_len
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _ui_disp_balance_and_volume
         ___aldiv
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_clear_balance
         _ui_disp_balance_and_volume
           ___aldiv
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_cln
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_disp_flow_error
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_clear_totale
         _ui_disp_totale_v
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_disp_flow_error
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_flow
         ___lldiv
           ___lmul (ARG)
         ___lmul
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_modbus_id
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_balanceOff
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_balanceWarning
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_calib
         ___awdiv
         ___awmod
         ___lbmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_device_id
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_imd_flow_uint
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_disp_set_line
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_price
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_transferMoneyLimit
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_small_flow_how_care
         _ui_disp_str_num
           ___lwdiv
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_str_num_ex
         ___lwdiv
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_disp_flow_error
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_transfer_money
         ___lldiv
           ___lmul (ARG)
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
           ___almod
           _m_math_pow
             ___lmul
     _ui_key_process_cancel
       ___awdiv
       ___wmul
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
     _ui_key_process_down
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _data_api_rt_data_save
         _crc_append
           _crc_sum
         _data_api_system_data_get
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _m_mem_set
     _ui_key_process_enter
       ___aldiv
       ___awdiv
       _m_mem_cpy_len
       _ui_key_waite_up
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
     _ui_key_process_up_down
       _key_process_up_down_variable_speed_ex
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
         _ui_disp_menu
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _ui_disp_balance_and_volume
             ___aldiv
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_cln
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_clear_balance
             _ui_disp_balance_and_volume
               ___aldiv
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_cln
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_disp_flow_error
                 _lcd_clear_buffer
                   _m_mem_set
                 _lcd_disp_str
                   _lcd_disp_code
                     _lcd_disp_code_0
                     _lcd_disp_code_1
                     _lcd_disp_code_2
                     _lcd_disp_code_3
                     _lcd_disp_code_4
                     _lcd_disp_code_5
                     _lcd_disp_code_6
                     _lcd_disp_code_7
                   _lcd_disp_refresh
                     _m_mem_cpy_len
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_clear_totale
             _ui_disp_totale_v
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_disp_flow_error
                 _lcd_clear_buffer
                   _m_mem_set
                 _lcd_disp_str
                   _lcd_disp_code
                     _lcd_disp_code_0
                     _lcd_disp_code_1
                     _lcd_disp_code_2
                     _lcd_disp_code_3
                     _lcd_disp_code_4
                     _lcd_disp_code_5
                     _lcd_disp_code_6
                     _lcd_disp_code_7
                   _lcd_disp_refresh
                     _m_mem_cpy_len
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_flow
             ___lldiv
               ___lmul (ARG)
             ___lmul
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_modbus_id
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_balanceOff
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_balanceWarning
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_calib
             ___awdiv
             ___awmod
             ___lbmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_device_id
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_imd_flow_uint
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_disp_set_line
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_price
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_transferMoneyLimit
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_small_flow_how_care
             _ui_disp_str_num
               ___lwdiv
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_str_num_ex
             ___lwdiv
             ___lwmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_mem_cpy
           _ui_disp_totale_v
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_disp_flow_error
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_transfer_money
             ___lldiv
               ___lmul (ARG)
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
               ___almod
               _m_math_pow
                 ___lmul
       _ui_key_process_up_down_main
     _ui_key_set_process
       ___awdiv
       ___wmul
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_mem_cpy_len
       _m_mem_cpy_len
     _ui_key_waite_up
       _get_globle_ticker
       _key_scan_call
         _delay
       _set_globle_ticker
     _ui_key_waite_up_ex
       _get_globle_ticker
       _key_scan_call
         _delay
       _set_globle_ticker
   _ui_start_display
     _lcd_disp_all
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _ui_disp_str_num
       ___lwdiv
       ___lwmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_mem_cpy

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     26      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      3      37      11       68.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      48      13       90.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0      28      15       50.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               20      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     1A2      20        0.0%
BITBANK8             8      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8                8      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK10           50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK10              50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK11           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK11               4      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
DATA                 0      0     1A2      27        0.0%
BITBANK12           30      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12               0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Nov 25 20:41:54 2018

                   mfrc522_bal_set_bit_reg@bits 0022                         ?_picc_req_a_or_wakeup_a 004A  
                                ?_iic_waite_ack 0070             __end_of_ui_key_process_up_down_main 2013  
                   _ui_key_process_up_down_main 2000                                               pc 0002  
      key_process_up_down_variable_speed_ex@t32 0050                                ui_uint32_2_str@x 0031  
                                ___bmul@product 0026        key_process_up_down_variable_speed_ex@max 0045  
      key_process_up_down_variable_speed_ex@key 004C        key_process_up_down_variable_speed_ex@min 0043  
                                   __CFG_CP$OFF 0000        key_process_up_down_variable_speed_ex@val 0052  
                                  ___awdiv@sign 0021                             ___wmul@multiplicand 0075  
                       _mfrc522_bal_set_bit_reg 3D25                                _picc_select$3251 00CA  
                              _picc_select$3254 00CC                                _picc_select$3247 00D3  
                              _picc_select$3255 00CE                                _picc_select$3248 00D4  
               __end_of_mfrc522_bal_clr_bit_reg 3D25                                 _timer0ReloadVal 016F  
                __end_of_ui_key_process_up_down 1F07                            _data_api_read_eeprom 3E9B  
                                           l202 3E3A                                             l411 2E44  
                                           l261 33BB                                             l421 1504  
                                           l257 33A1                                             l426 15C8  
                                           l509 1FFF                                             l606 34D2  
                                           l391 37E0                                             l393 37F3  
                                           l385 37C6                                             l388 37D7  
                                           l911 29C2                                             l760 365E  
                                           l648 1F06                                             l665 094F  
                                           l685 12FA                                             l790 19AA  
                                           l598 343F                                             l778 0B77  
                                           l699 1659                                             l789 199F  
                    _flowCalibrationPointSingle 016B                                    __CFG_CPD$OFF 0000  
          __size_of_ui_disp_small_flow_how_care 0011                          ?_ui_disp_clear_balance 0070  
                               _timer1ReloadVal 016D                                 _ui_key_waite_up 342B  
                                           _min 0135                                             _sec 013E  
                                  ___awmod@sign 0021                      __size_of_picc_authenticate 0065  
                                  __CFG_BORV$LO 0000                                             wreg 0009  
                rfid_comm_process@valveCtrlflag 01D4                                    __CFG_IESO$ON 0000  
                     _app_flow_rt_volume_cal_ex 19FD                                    __CFG_FOSC$HS 0000  
                            ui_uint32_2_str@buf 0077                              ui_uint32_2_str@len 0035  
                             ??_app_flow_lookup 0020                             lcd_disp_code_0@code 0074  
                           lcd_disp_code_1@code 0074                             lcd_disp_code_2@code 0074  
                           lcd_disp_code_3@code 0074                             lcd_disp_code_4@code 0074  
                           lcd_disp_code_5@code 0074                             lcd_disp_code_6@code 0074  
                                 _led_port_init 3D6C                     mfrc522_hal_calculate_crc@t8 002E  
                           lcd_disp_code_7@code 0074                                    __CFG_LVP$OFF 0000  
    key_process_up_down_variable_speed_ex@speed 004E                                            l2100 0807  
                                          l1070 310F                                            l1047 0688  
                                          l2111 081E                                            l1065 3FD6  
                                          l2106 080D                                            l2026 2BC4  
                                          l2108 080E                                            l2132 3F89  
                                          l2036 2C0E                                            l1237 1DF5  
                                          l1352 2D41                                            l2155 3763  
                                          l2332 02B4                                            l2424 2B15  
                                          l2426 2B33                                            l2602 105B  
                                          l1814 308D                                            l2358 0395  
                                          l2703 3E87                                            l1840 331C  
                                          l1827 3315                                            l1836 331A  
                                          l1773 3E14                                            l1776 3E15  
                                          l1952 3D45                                            l1960 3C7E  
                                          l1874 3064                                            l1947 3D3C  
                                          l2771 2D53                                            l1965 3C87  
                                          l2758 2024                                            l2972 3ED4  
                                          STR_1 38D9                                            STR_2 391E  
                                          STR_3 38D0                                            STR_4 38A3  
                                          STR_5 3951                                            STR_6 3917  
                                          STR_7 38F4                                            STR_8 3944  
                                          STR_9 394D                                            _LATA 010C  
                                          _LATB 010D                                            _LATC 010E  
                                          _LATD 010F                                            _LATE 0110  
                                          _LATF 038C                                            _LATG 038D  
                                 _m_mem_cpy_len 3D9E                                            _TMR0 0015  
                                ??_lcd_disp_all 0073                                  ??_lcd_disp_cln 0032  
                                          _WPUB 020D                                            _WPUG 048D  
                                ??_lcd_disp_str 0024                                    __CFG_WRT$OFF 0000  
                                 __CFG_FCMEN$ON 0000                                            _pLCD 01A6  
                                          ___q7 013D                                            ___t8 00C9  
                  __end_of_LCDDigitalIndexTable 3829                       __size_of_lcd_disp_refresh 0011  
                                          _main 1000                                            _flow 00BC  
modbus_response_write_single_register@startAddr 0039                                            _menu 00C3  
                            ui_key_waite_up@now 0022                                            _hour 0134  
                                          fsr0h 0005                                            fsr1h 0007  
                                          indf0 0000                                            fsr0l 0004  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                                   __CFG_BOREN$ON 0000  
                        ??_mfrc522_bal_read_reg 0077                  ??_adc_mcp3241_start_convert_16 0023  
                             _rfid_comm_process 1D48                  __size_of_pcd_mifare_transceive 0082  
                                 _globlTickerms 012E                                  picc_select@uid 00E8  
                                          start 0037                                  ??_iic_send_ack 0073  
                        create_card_key_b@cckey 0074                   __end_of_pcd_mifare_transceive 2117  
                   __size_of_ui_disp_flow_error 000B                __size_of_my_uart1_received_ready 0009  
                     ??_modbus_response_command 0040                       data_api_write_eeprom@addr 0022  
              __end_of_iic_received_byte_if_ack 3BE2                      ??_TMR1_SetInterruptHandler 0075  
                __end_of_picc_req_a_or_wakeup_a 2A16                               ___bmul@multiplier 0027  
                            ?_rfid_comm_process 0070                                   __CFG_MCLRE$ON 0000  
                      __end_of_ui_start_display 3800                                ?_lcd_set_com_seg 0028  
                                         S17363 3851                                           S17355 387A  
                                         S17357 388A     key_process_up_down_variable_speed_ex@change 004D  
           modbus_response_read_clib_data@pmdbs 003C                 pcd_comm_with_picc@errorRegValue 0044  
                       app_flow_lookup@adcValue 0073                 ??_rfid_comm_process_read_header 00CE  
                     __size_of_DATAEE_WriteByte 001D                     ??_ui_disp_set_imd_flow_uint 0078  
                                 lcd_disp_all@i 0021                            getRegisterVal@result 003C  
                                 lcd_disp_all@x 0020                         __end_of_TMR0_Initialize 0800  
                     ??_modbus_response_process 0050                                    ?_mifare_read 004A  
                          _mfrc522_hal_reset_sf 3B11             mfapi_is_new_card_present@bufferATQA 0058  
                __size_of_OSCILLATOR_Initialize 0005                             ??_rfid_comm_process 00EE  
                 __end_of_OSCILLATOR_Initialize 3AEC                                           l13111 2DE2  
                                         l13007 1486                                           l12137 3D9E  
                                         l13113 2DF6                                           l13025 151D  
                                         l13017 14DB                                           l13203 2A79  
                                         l13051 15E1                                           l13043 159F  
                                         l13027 1525                                           l13035 1556  
                                         l13019 14E3                                           l13213 2AA7  
                                         l13205 2A87                                           l14005 209E  
                                         l12501 312F                                           l13053 15E9  
                                         l13061 161A                                           l13045 15A7  
                                         l13071 3B89                                           l13119 2DFC  
                                         l13153 2B5A                                           l13217 2AB2  
                                         l14041 2106                                           l14017 20C9  
                                         l14009 20A0                                           l12505 3133  
                                         l13155 2B5F                                           l13147 2B45  
                                         l14035 2101                                           l13171 2826  
                                         l12533 3371                                           l13085 374A  
                                         l13501 070E                                           l14045 210D  
                                         l14133 3439                                           l13317 3C9F  
                                         l13309 3C7A                                           l13181 2838  
                                         l13431 358F                                           l12711 2035  
                                         l15015 19B1                                           l13511 073A  
                                         l13503 072C                                           l12551 3C63  
                                         l14055 2115                                           l12607 3EC1  
                                         l13167 281F                                           l13415 300F  
                                         l14313 3E9D                                           l12537 337C  
                                         l15201 236A                                           l12721 2053  
                                         l14241 095A                                           l15121 2504  
                                         l15025 19C3                                           l12481 3BE2  
                                         l14321 3DE4                                           l14049 210F  
                                         l14145 3456                                           l13273 2328  
                                         l13193 2855                                           l13185 2844  
                                         l14243 0962                                           l15107 24CE  
                                         l15019 19BA                                           l15027 19D7  
                                         l13523 0752                                           l12547 3C5D  
                                         l12491 311B                                           l12627 370E  
                                         l13267 22EB                                           l13259 22CF  
                                         l13179 282C                                           l14219 200D  
                                         l15213 23AF                                           l15221 23EF  
                                         l12733 207E                                           l14245 0970  
                                         l13533 077C                                           l13461 06AC  
                                         l12573 2A2C                                           l14413 2AC7  
                                         l14405 2CC4                                           l12493 311F  
                                         l12653 2910                                           l12645 28F7  
                                         l12661 28EB                                           l12805 3093  
                                         l12629 372A                                           l12821 3F8E  
                                         l13189 284D                                           l16111 29B2  
                                         l15207 236F                                           l12719 2045  
                                         l14263 0A5B                                           l14255 09DD  
                                         l14247 0977                                           l13615 339D  
                                         l15063 2622                                           l13463 06B6  
                                         l12591 2A52                                           l12583 2A34  
                                         l12567 2A21                                           l14327 3DED  
                                         l12831 2CDF                                           l12495 3123  
                                         l12487 3113                                           l12663 292D  
                                         l12807 30B9                                           l13449 3EDB  
                                         l15233 03D0                                           l12737 208C  
                                         l12729 2073                                           l13561 07A2  
                                         l13553 0796                                           l13481 0709  
                                         l12585 2A40                                           l14417 2AC9  
                                         l12841 2D1F                                           l12833 2CEB  
                                         l12497 3127                                           l12489 3117  
                                         l12657 2923                                           l12761 2D8E  
                                         l13289 21AB                           ?_data_api_read_eeprom 0074  
                                         l14507 3336                                           l16131 2FBE  
                                         l14283 0B11                                           l14275 0AAF  
                                         l14259 0A27                                           l13627 33C3  
                                         l15075 2623                                           l15155 1B2F  
                                         l13803 13AC                                           l16051 2B7C  
                                         l13539 0780                                           l14531 29D7  
                                         l12595 2A5B                                           l14427 2AF2  
                                         l14435 2864                                           l12843 2D2C  
                                         l12835 2CF8                                           l12499 312B  
                                         l12755 2D68                          ?_ui_disp_set_device_id 0070  
                                         l15253 04C7                                           l15245 0452  
                                         l14277 0AB9                                           l14269 0A8F  
                                         l14293 0B5E                                           l15077 2655  
                                         l13805 13EF                                           l16061 2B9B  
                                         l13573 07E6                                           l13557 07A0  
                                         l13493 0722                                           l12837 2D05  
                                         l12757 2D76                                           l12765 2D99  
                                         l12749 2D60                                           l16221 1DC8  
                                         l17021 1C57                                           l17013 1C3F  
                                         l14613 34CC                                           l17101 2EE5  
                                         l15247 04B8                                           l15351 110D  
                                         l15335 10DA                                           l15159 1B37  
                                         l13823 143F                                           l16063 2BA0  
                                         l16055 2B8C                                           l15183 3F2B  
                                         l14551 2A14                                           l14543 2A09  
                                         l14527 29D5                                           l12599 2A63  
                                         l14439 2866                                           l15511 0EFB  
                                         l12679 186E                                           l12839 2D12  
                                         l12847 2D36                                           l12791 27A8  
                                         l16231 1DDC                                           l16223 1DCB  
                                         l16303 2BE4                                           l16311 2BF4  
                                         l14631 23F2                                           l17111 2EF7  
                                         l13921 3086                                           l15265 0574  
                                         l15257 04D4                                           l15345 10EF  
                                         l16153 2FFA                                           l14289 0B54  
                                         l13817 141A                                           l16057 2B91  
                                         l13569 07BE                                           l13577 07E8  
                                         l14393 2CA6                                           l14457 289F  
                                         l14449 2888                                           l15433 0DC0  
                                         l12769 2DA7                                           l16241 1DF8  
                                         l14721 0828                                           l17041 1E6E  
                                         l17033 1E2D                                           l14625 34EA  
                                         l17105 2EED                                           l17113 2F03  
                                         l16083 1C9E                                           l15291 069B  
                                         l15283 065E                                           l15267 057E  
                                         l15363 1143                                           l16059 2B96  
                                         l16067 2BA7                                           l12867 3F73  
                                         l14387 2C8A                                           l15531 0F77  
                                         l15523 0F42                                           l15443 0DDC  
                                         l14811 125D                                           l14803 1233  
                                         l17051 1EC1                                           l17043 1E7F  
                                         l17035 1E3D                                           l17107 2EF0  
                                         l15293 069C                                           l15357 112B  
                                         l16149 2FF4                                           l15701 00AB  
                                         l13845 18D6                                           l15541 0F9F  
                                         l15453 0E08                                           l15613 0C3A  
                                         l16237 1DED                                           l14733 0850  
                                         l14725 0831                                           l17053 1ED2  
                                         l17045 1E8F                                           l17037 1E4E  
                                         l17213 10B5                                           l16095 1D28  
                                         l13919 307E                                           l15375 11CB  
                                         l13791 135F                                           l14399 2CAB  
                                         l13855 1906                                           l15471 0E62  
                                         l15623 0C8F                                           l15607 0C12  
                                         l12799 30A8                                           l16319 2C04  
                                         l14655 2443                                           l14647 2426  
                                         l14639 2409                                           l14743 0888  
                                         l17047 1EA0                                           l17039 1E5E  
                                         l17207 10AC                                           l14569 3E80  
                                         l16089 1CEB                                           l16361 3BAD  
                                         l14593 37A9                                           l13793 13A7  
                                         l15801 01F0                                           l15721 00D6  
                                         l15545 0FEA                                           l15457 0E10  
                                         l16281 32FA                                           l14673 247D  
                                         l14681 248E                                           l14761 08FC  
                                         l14753 08CD                                           l14745 0896  
                                         l14729 083A                                           l12977 2E27  
                                         l17049 1EB0                                           l17057 1EE2  
                                         l17081 2EA9                                           l17217 10BC  
                                         l17161 103F                                           l17153 1033  
                                         l17145 1027                                           l14587 3783  
                                         l15467 0E59                                           l15627 0CBA  
                                         l15619 0C88                                           l16259 1E17  
                                         l14827 12A6                                           l14755 08DB  
                                         l14739 0878                                           l14923 171D  
                                         l14589 3791                                           l14597 37B4  
                                         l13789 13A1                                           l15741 0110  
                                         l15733 00F6                                           l15549 0FF2  
                                         l14845 12EF                                           l14749 08A6  
                                         l14773 0920                                           l14933 173A  
                                         l14909 16DE                                           l17093 2ECD  
                                         l17173 105C                                           l17157 1039  
                                         l15911 0378                                           l15903 0360  
                                         l15751 0139                                           l15735 00FE  
                                         l15719 00D3                                           l15479 0E78  
                                         l15655 0D59                                           l16295 2BD2  
                                         l14791 11EB                                           l14679 247F  
                                         l14767 090D                                           l14759 08F5  
                                         l14871 167B                                           l17079 2EA4  
                                         l17183 1071                                           l17175 105F  
                                         l17361 0B6A                                           l15809 01FF  
                                         l15745 0112                                           l17353 0926  
                                         l14849 1633                                           l17089 2EC2  
                                         l15915 0387                                           l15771 0190  
                                         l17187 1077                                           l15685 3427  
                                         l15781 01B5                                           l15749 0128  
                                         l15925 00B5                                           l15669 0DA1  
                                         l15589 0BA1                                           l16805 25D5  
                                         l14965 17BA                                           l14949 1784  
                                         l17197 1097                                           l17359 19CF  
                                         l15927 03A7                                           l15919 0389  
                                         l15839 02A4                                           l15871 01BF  
                                         l15767 017C                                           l15759 0152  
                                         l16751 354C                                           l16743 352E  
                                         l16911 1F63                                           l16903 1F5A  
                                         l14975 17D7                                           l14887 169E  
                                         l17199 109A                                           l15689 3429  
                                         l15873 0313                                           l15865 0305  
                                         l15849 02BA                                           l15857 02FF  
                                         l15785 01BE                                           l16745 353A  
                                         l14897 16BB                                           l14995 196C  
                                         l15883 0329                                           l15779 0191  
                                         l16755 3555                                           l16835 273F  
                                         l16931 1F90                                           l14979 17DE  
                                         l15893 0334                                           l15877 0319  
                                         l15869 030C                                           l16773 315D  
                                         l16941 1FA8                                           l16933 1F93  
                                         l14999 1976                                           l15895 0358  
                                         l16767 3145                                           l16855 34A8  
                                         l16951 1FB7                                           l16943 1FAB  
                                         l16935 1F96                                           l16927 1F74  
                                         l16919 1F6B                                           l16769 3151  
                                         l16777 3166                                           l16865 3477  
                                         l16953 1FBA                                           l16945 1FAE  
                                         l16937 1F99                                           l16955 1FBD  
                                         l16947 1FB1                                           l16891 1F3D  
                                         l16883 1F24                                           l16963 1FC6  
                                         l16875 1F17                                           l16957 1FC0  
                                         l16949 1FB4                                           l16959 1FC3  
                                         l16895 1F4A                                           l16887 1F30  
                                         l16993 1C08                                           l16977 1BBB  
                                         l16899 1F57                                           l16995 1C13  
                                         l16989 1BEA                                           l16997 1C16  
                               __end_of___aldiv 2095                  __size_of_flow_sampling_process 007A  
                               __end_of___almod 2DB0            mfrc522_bal_read_fifo_len_ex@rx_align 0023  
                                         ?_main 0070             mfapi_is_new_card_present@bufferSize 005B  
                               __end_of___awdiv 2A68                                           STR_10 3943  
                                         STR_11 392B                                           STR_12 3937  
                                         STR_20 38BE                                           STR_13 3931  
                                         STR_21 38B5                                           STR_14 393D  
                                         STR_22 38AC                                           STR_23 3948  
                                         STR_15 38E2                                           STR_16 38EB  
                                         STR_24 389A                                           STR_17 3906  
                                 __CFG_WDTE$OFF 0000                                           STR_18 38FD  
                                         STR_19 38C7                                 __end_of___awmod 285A  
                 __end_of_flow_sampling_process 3000                                 __end_of___lbmod 3EDA  
                               _TMR1_StartTimer 3ADC                                 __end_of___lldiv 2ABB  
                                         u11104 1873                                           u12000 3C9D  
                                         u11105 1872                                           u11145 2048  
                                         u11315 2792                                 ___awdiv@divisor 0073  
                                         u11165 2054                                           u13005 0B03  
                                         u11245 2D6B                                           u11094 1863  
                                         u12055 358B                                           u11175 2068  
                                         u11095 1862                                           _T1CON 0018  
                               __end_of___llmod 37BD                                           u11185 2074  
                                         u11265 2D84                                           u11275 2D8F  
                                         u14005 0534                                           u12085 06BD  
                                         u10815 337D                                           u14015 0658  
                                         u10825 3384                                           u14025 067E  
                                         u14105 111C                                           u14035 0696  
                                         u12515 139B                                           u10915 2A41  
                                         u14053 3FD1                                           u13405 3786  
                                         u14045 1A37                                           u10925 2A4B  
                                         u14135 35E0                                           u14063 3105  
                                         u10935 2A53                                           u11815 283E  
                                         u11905 2AA8                                           u13425 379F  
                                         u15105 2FA9                                           u12545 13E8  
                                         u14305 0FE8                                           u11825 2845  
                                         u11755 2B1B                                           u13435 37AA  
                                         u13515 1217                                           u16020 1FA5  
                                         u13365 3E88                                           u14325 0BB5  
                                         u10965 3EC4                                           u13375 3E8D  
                                         u14095 10FE                                           u10895 2A37  
                                         u14335 0BD2                                           _LCDRL 0795  
                                         u11865 2A7C                                           u14505 0123  
                                         u14530 016D                                           u13635 25FD  
                                         u14515 012D                                           u14355 0C36  
                                         u11795 282F                                           u13475 34E8  
                                         u14700 02E2                                           u14540 016E  
                                         u15260 1DDA                                           u11980 3C78  
                                         u11885 2A88                                           u13805 1B6C  
                                         u13565 195B                                           u14285 0F6E  
                                         u14373 0CAA                                           u16045 1BB3  
                                         u14710 02E3                                           u14630 0237  
                                         u11895 2A9C                                           u14295 0FC1  
                                         u14383 0D28                                           u14640 0238  
                                         u13905 238A                                           u13745 1AEE  
                                         u14625 0226                                           u13915 23AD  
                                         u13755 1B0B                                           u13675 24AF  
                                         u16075 1BDE                                           u14724 02F2  
                                         u13925 23E5                                           u14725 02F1  
                                         u16085 1BFC                                           u16350 105A  
                                         u13695 24DC                                           u14655 0257  
                                         u12985 0A19                                           u13785 1B40  
                                         u12995 0A81                                           u13795 1B4C  
                    pcd_comm_with_picc@checkCRC 003A                                           u13965 044A  
                                         u13885 2366                                           u15725 3531  
                                         u15815 3157                                           u13985 04C1  
                                         u15745 353B                                           u15825 315E  
                                         u13995 04CE                                           u15755 3545  
                                         u15765 354D                                 __end_of___lwdiv 355A  
                                         u15795 3148                                           i1l140 0028  
                                         i1l144 0032                                           i1l136 0010  
                                         i1l138 001C                                 __end_of___lwmod 316B  
              ??_modbus_response_read_clib_data 0036                 ?_modbus_response_read_clib_data 0070  
                               ___awdiv@counter 0020                                           _TMR1H 0017  
                                         _TMR1L 0016                                           _PORTB 000D  
                               ??_lcd_disp_code 0076                                           _TRISA 008C  
                                         _TRISB 008D                                           _TRISC 008E  
                                         _TRISD 008F                                           _TRISE 0090  
                                         _TRISF 030C                                           _TRISG 030D  
                       _pcd_comm_with_picc$3211 003F                               _adcSamplingBuffer 02A0  
                                   m_math_pow@x 0028                                     m_math_pow@y 002C  
             __size_of_TMR0_SetInterruptHandler 0006                modbus_response_command@startAddr 0044  
                           ___lmul@multiplicand 0024                       ?_TMR0_SetInterruptHandler 0073  
                                         _Event 00C7                            _EUSART1_Transmit_ISR 0003  
                                         ___q15 00BA                                           ___q31 00AC  
                                         ___t32 00B4                                           ___t16 0078  
                               __end_of_crc_sum 2B64                                __end_of_TMR0_ISR 363C  
                              __end_of_TMR1_ISR 3C48                                  ?_led_port_init 0070  
                              ?_ui_disp_str_num 0027                                 _DATAEE_ReadByte 3B4C  
                                         _delay 3B89                                           _fl_t8 013A  
                                  ?_picc_halt_a 0070                                           _rdLen 00C8  
                                _WDT_Initialize 3ADF                     __size_of_pcd_comm_with_picc 0146  
                              _lcd_clear_buffer 3B58                 mfrc522_hal_get_antenna_gain@ret 0023  
                                ?_m_mem_cpy_len 0073                         ?_ui_disp_set_balanceOff 0070  
                    __size_of_create_card_key_b 0028                                    ?_picc_select 004A  
                  ?_adc_mcp3241_read_convert_16 0022                         __end_of_TMR1_Initialize 3E60  
                        ??_ui_key_process_enter 002E                       __end_of_rfid_comm_process 1E21  
                       __size_of_mfapi_pcd_init 000B                              _event_door_monitor 3AF1  
                            crc_verify@expected 0031                                           status 0003  
               __size_of_mfrc522_hal_antenna_on 0018                rfid_comm_process_read_header@ret 006D  
              rfid_comm_process_read_header@stp 006E                                           wtemp0 007E  
                               ??_iic_send_byte 0077              __size_of_mfrc522_hal_calculate_crc 0070  
                  pcd_comm_with_picc@txLastBits 003D            __end_of_mfrc522_hal_get_antenna_gain 3BD2  
         __size_of_mfrc522_hal_get_antenna_gain 000F                    _mfrc522_hal_get_antenna_gain 3BC3  
                           _event_power_monitor 3BA5                           ui_disp_str_num_ex@num 0029  
                         ui_disp_str_num_ex@str 0027                     ??_mfapi_is_new_card_present 0054  
                               _systemTickerSec 0142                                 ??_iic_waite_ack 0075  
                             ?_mfrc522_hal_init 0070                                 __initialization 0039  
                             in_app_vavle_on@op 0075                      __end_of_my_uart1_send_poll 33C9  
                           ?_event_door_monitor 0070                       ??_mfrc522_bal_set_bit_reg 0023  
                    __end_of_EUSART1_Initialize 3BC3                                    __end_of_main 10CA  
                            ??_mfrc522_hal_init 0028                         __end_of_ui_key_waite_up 345C  
                 pcd_mifare_transceive@sendData 004A                           ?_mfrc522_hal_reset_sf 0070  
                          iic_received_byte@ret 0074                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 0035                        picc_select@useCascadeTag 00E2  
                                        ??_main 00EF                                  lcd_disp_dp@dec 0035  
            __size_of_data_api_system_data_init 004D                            ?_event_power_monitor 0070  
                   modbus_response_process@rbuf 0053                     modbus_response_process@rlen 004E  
                   modbus_response_process@resp 0051                                  __CFG_PLLEN$OFF 0000  
                                _mainSystemData 0220                           ?_EUSART1_Transmit_ISR 0070  
               __end_of_modbus_response_command 268F                          __end_of_WDT_Initialize 3AE3  
                                 ?_mifare_write 0069             __end_of_adc_mcp3241_read_convert_16 3602  
                   _adc_mcp3241_read_convert_16 35C9                            ??_event_door_monitor 0073  
                __end_of_ui_disp_set_balanceOff 348D                                          ?_delay 0073  
                      _data_api_system_data_get 3CA4                                ___llmod@dividend 0024  
                                        _EEADRL 0191                       _ui_disp_set_imd_flow_uint 3000  
                                        _EEDATL 0193                                          _EECON2 0196  
                           pcd_comm_with_picc@i 0046                                ___awdiv@dividend 0075  
                                        _APFCON 011D                                          _ANSELA 018C  
                                        _ANSELE 0190                                          _ANSELF 040C  
                                        _ANSELG 040D                                          _T1GCON 0019  
                                        _LCDCON 0791                                          _LCDSE0 0798  
                                        _LCDCST 0794                                          _LCDSE1 0799  
                                        _LCDSE2 079A                                          _LCDSE3 079B  
                                        _LCDSE4 079C                                          _LCDSE5 079D  
                                        _LCDREF 0793                 __end_of_modbus_response_process 2BBE  
                                        _RC1REG 0199                                          _RC1STA 019D  
                       ??_mfrc522_bal_write_reg 0078                ??_mfrc522_bal_write_read_via_spi 0073  
               ?_mfrc522_bal_write_read_via_spi 0070                                          _OSCCON 0099  
                  __size_of_timer0_irq_callback 002E                                          _TX1REG 019A  
                 ??_adc_mcp3241_read_convert_16 0024                                          _WDTCON 0097  
                                        _TX1STA 019E                                    m_mem_set@buf 0073  
                                  m_mem_set@len 0076                        ??_app_flow_money_warning 0073  
                             ?_ui_disp_set_line 0070                          __size_of_key_scan_call 0027  
                                __CFG_PWRTE$OFF 0000                              _ui_key_set_process 1630  
                   __size_of_ui_disp_str_num_ex 00B8               __end_of_mfrc522_hal_calculate_crc 2E20  
                 ?_mfrc522_hal_get_antenna_gain 0070                              ??_ui_disp_set_line 003A  
  __end_of_data_api_calibration_table_data_init 1D48   __size_of_data_api_calibration_table_data_init 00D6  
        ??_data_api_calibration_table_data_init 0033           ?_data_api_calibration_table_data_init 0070  
          _data_api_calibration_table_data_init 1C72                    _TMR1_DefaultInterruptHandler 0000  
  __end_of_data_api_calibration_table_data_save 147D   __size_of_data_api_calibration_table_data_save 0182  
        ??_data_api_calibration_table_data_save 0034           ?_data_api_calibration_table_data_save 0033  
          _data_api_calibration_table_data_save 12FB                                __end_of_hexTable 387A  
                          __size_of_lcd_disp_dp 0066            modbus_response_write_clib_data@pmdbs 004D  
                              __end_of_lcd_init 3AF1                            mifare_read@blockAddr 004F  
                              __end_of_iic_stop 3CF7      modbus_response_write_single_register@pmdbs 003B  
                                        ___bmul 3C5A                               ?_ui_disp_totale_v 0070  
                                        ___lmul 3369                         __end_of_TMR1_StartTimer 3ADF  
                                     ??___aldiv 0073                                       ??___almod 0073  
                                        ___wmul 3E7D                                       ??___awdiv 0077  
                                __CFG_STVREN$ON 0000                                       ??___awmod 0077  
                            _ui_key_waite_up_ex 34BE                                       ??___lbmod 0074  
                                        _fl_t16 0124                                          _fl_t32 00A4  
                                     ??___lldiv 0077                    __end_of_other_gpio_port_init 3B89  
                                        _lcdBuf 0158                                       ??___llmod 0073  
                                     ??___lwdiv 0077                     ?_ui_disp_balance_and_volume 0070  
                                     ??___lwmod 0077                             ?_ui_key_set_process 0070  
                           _app_flow_adc_2_flow 03BD                           EUSART1_Receive_ISR@t8 0071  
                            ??_ui_disp_totale_v 003A                                 _ui_uint32_2_str 2747  
                        ??_data_api_read_eeprom 0020                              _app_flow_money_off 30E6  
                              ?_TMR0_Initialize 0070                                          delay@t 0073  
                              ___awdiv@quotient 0022                                 ___awmod@divisor 0073  
                          __end_of_lcd_disp_all 3E7D                            __end_of_lcd_disp_cln 3E0A  
                        _mfrc522_hal_antenna_on 3D54                                 ___awmod@counter 0020  
                          __end_of_lcd_disp_str 2930                                       ??_crc_sum 0020  
                         ??_event_power_monitor 0073                                          main@tm 01D6  
              mfrc522_hal_set_antenna_gain@gain 0027                         __end_of_DATAEE_ReadByte 3B58  
                pcd_mifare_transceive@cmdBuffer 0053                 app_flow_get_adcAverageValue@max 0044  
                          _LCDDigitalIndexTable 3800                 app_flow_get_adcAverageValue@min 0041  
                       ??_ui_key_process_cancel 0046                 app_flow_get_adcAverageValue@ret 0046  
                         data_api_read_eeprom@i 0021               modbus_response_read_clib_data@buf 003F  
                      __size_of_lcd_disp_code_0 002E                        __size_of_lcd_disp_code_1 002E  
                      __size_of_lcd_disp_code_2 002E                        __size_of_lcd_disp_code_3 002E  
                      __size_of_lcd_disp_code_4 002E                        __size_of_lcd_disp_code_5 002E  
                      __size_of_lcd_disp_code_6 002E                        __size_of_lcd_disp_code_7 002E  
             modbus_response_read_clib_data@len 003D                             ?_ui_key_waite_up_ex 0020  
         __end_of_rfid_comm_process_read_header 1000          __size_of_rfid_comm_process_read_header 025D  
                 _rfid_comm_process_read_header 0DA3                  __size_of_data_api_write_eeprom 0021  
                          ui_key_waite_up_ex@tm 0020                                 _in_app_vavle_on 3F1D  
                 mfrc522_bal_read_fifo_len_ex@i 0026                                 ??_led_port_init 0073  
                                ??_mifare_write 006B                   __end_of_data_api_write_eeprom 3EFB  
                  __size_of_ui_key_process_down 009F          __end_of_ui_disp_set_transferMoneyLimit 2814  
       __size_of_ui_disp_set_transferMoneyLimit 0014                  _ui_disp_set_transferMoneyLimit 2800  
             __end_of_data_api_system_data_init 29C5                       _mfapi_is_new_card_present 33FA  
                           ?_app_flow_money_off 0070                            __end_of_iic_send_ack 3E26  
                              __end_of_valve_on 3B11                                    _cardWriteBuf 0432  
                               ?_WDT_Initialize 0070                                picc_select@count 00EB  
                              picc_select@index 00EC               __size_of_iic_received_byte_if_ack 0010  
                     ?_iic_received_byte_if_ack 0070                                 ??_m_mem_cpy_len 0020  
               __end_of_mfrc522_bal_set_bit_reg 3D3C                        data_api_write_eeprom@buf 0020  
                      data_api_write_eeprom@len 0023        TMR0_SetInterruptHandler@InterruptHandler 0073  
      TMR1_SetInterruptHandler@InterruptHandler 0073                 modbus_response_command@tempData 004A  
                          ??_ui_key_set_process 0046                            ?_app_flow_adc_2_flow 0035  
                   ??_mfrc522_bal_write_reg_len 0077        __end_of_modbus_response_illgeal_function 367B  
     __size_of_modbus_response_illgeal_function 003F               ?_modbus_response_illgeal_function 0033  
            ??_modbus_response_illgeal_function 0077                _modbus_response_illgeal_function 363C  
                                _firstPowerDown 0132                                ?_TMR1_Initialize 0070  
                             _SYSTEM_Initialize 3C48                                 ___lbmod@divisor 0073  
                    __size_of_rfid_comm_process 00D9                                _lcd_disp_refresh 3C03  
                       __end_of__initialization 009C                                 ___lbmod@counter 0021  
                         ui_key_set_process@ret 0047              __size_of_app_flow_rt_volume_cal_ex 00D0  
                     __size_of_in_app_vavle_off 002B                         _my_uart1_received_ready 3B1A  
                          ??_ui_key_waite_up_ex 0077                              ?_SYSTEM_Initialize 0070  
                   pcd_comm_with_picc@validBits 0038                               lcd_disp_code@code 0076  
                          ??_app_flow_money_off 0076                              ui_disp_str_num@num 0029  
                  ??_ui_disp_set_balanceWarning 0078                              ui_disp_str_num@str 0027  
                           ___bmul@multiplicand 0024                            create_card_key_b@uid 0073  
                              app_flow_lookup@i 0075                              getRegisterVal@addr 0035  
                                iic_send_byte@i 0021                              in_app_vavle_off@op 0075  
                                iic_send_byte@x 0020                                  __pcstackCOMMON 0070  
                                  __pidataBANK2 3AE3                                    __pidataBANK3 3B03  
                                  __pidataBANK4 2930                          ??_mfrc522_hal_reset_sf 0021  
                           ??_SYSTEM_Initialize 0076                      mfrc522_bal_write_reg_len@i 0024  
                           ui_disp_set_line@t16 003C                                       ?_TMR0_ISR 0070  
                                     ?_TMR1_ISR 0070                                   __end_of_delay 3B97  
                              _DATAEE_WriteByte 3E26                                 _app_flow_lookup 2357  
                              ?_ui_key_waite_up 0020                         ??_ui_disp_clear_balance 0078  
                        __size_of_m_system_init 0015                            __size_of_mifare_read 0053  
                        ??_EUSART1_Transmit_ISR 0070                                   _key_scan_call 3FD9  
                                    _cardDecBuf 0456                           _data_api_rt_data_save 187F  
                  __end_of_ui_disp_clear_totale 3C7E                                  _OPTION_REGbits 0095  
                                    _cardIncBuf 0444                  pcd_mifare_transceive@validBits 0066  
                   __end_of_EUSART1_Receive_ISR 3F66        modbus_response_write_single_register@len 0038  
                            __size_of_iic_start 0017                                         ??_delay 0075  
                             crc_append@message 0028                          getRegisterVal@tempAddr 003E  
                        getRegisterVal@tempData 0037                        ?_mfrc522_bal_clr_bit_reg 0022  
                         ??_app_flow_adc_2_flow 0037                       __end_of_SYSTEM_Initialize 3C5A  
                            __size_of_m_mem_set 0010             __size_of_ui_disp_set_balanceWarning 0031  
                       app_flow_adc_2_flow@flw1 0045                         app_flow_adc_2_flow@flw2 0041  
                               lcd_disp_dp@show 0032                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                                    __pbssBANK5 02A0                            __size_of_picc_halt_a 0038  
               mfrc522_bal_write_read_via_spi@i 0076                 mfrc522_bal_write_read_via_spi@x 0074  
                                _mfapi_pcd_init 3B36                              create_card_key_b@i 0077  
                       __size_of_ui_key_process 0077                    __size_of_timer1_irq_callback 005A  
           __end_of_ui_disp_small_flow_how_care 3C36                     _ui_disp_small_flow_how_care 3C25  
                               __CFG_VCAPEN$OFF 0000                            __size_of_picc_select 031D  
             __end_of_app_flow_rt_volume_cal_ex 1ACD                 __size_of_app_flow_money_warning 0027  
                modbus_response_command@tmpAddr 0042                         __end_of_ui_uint32_2_str 2800  
                                    __pmaintext 1000                   mfrc522_hal_calculate_crc@data 0026  
                    modbus_response_command@len 0048                                 lcd_disp_str@loc 0025  
                                       ?___bmul 0024                               ?_ui_start_display 0070  
                               lcd_disp_str@str 0022                __end_of_TMR0_SetInterruptHandler 3AFD  
                                       ?___lmul 0020                                         ?___wmul 0073  
               picc_req_a_or_wakeup_a@validBits 0053                                ?_TMR1_StartTimer 0070  
                                    ??_TMR0_ISR 0070                         ??_ui_disp_set_device_id 0078  
                      __end_of_lcd_clear_buffer 3B64                                      ??_TMR1_ISR 0070  
                     _mfrc522_bal_write_reg_len 3F66                 mfrc522_hal_calculate_crc@length 0028  
                               mfapi_pcd_init@v 002A                                      __pintentry 0004  
                       __end_of_in_app_vavle_on 3F41                              ??_ui_start_display 002D  
                ??_mfrc522_hal_get_antenna_gain 0022                               lcd_disp_str@index 0026  
               mfrc522_hal_calculate_crc@result 0029                                  ___lmul@product 0073  
                                    _crc_append 33C9                                  ?_key_scan_call 0070  
                              ?_DATAEE_ReadByte 0070                                      _crc_verify 355A  
                            __size_of_valve_off 0018                               _ui_disp_modbus_id 3C14  
                                       i1l11301 3625                                         i1l11321 3F60  
                                       i1l11315 3F47                                      _flashOpStr 0143  
                                    _lcd_config 3EFB                                         _SP1BRGH 019C  
                                       _SP1BRGL 019B                              ?_ui_disp_modbus_id 0070  
                                 ?_ui_head_hide 0073                                         _OSCTUNE 0098  
                                 _calibLocation 00C5           modbus_response_illgeal_function@pmdbs 0034  
                             _ui_disp_set_calib 2117                  ?_rfid_comm_process_read_header 0070  
                             ??_lcd_disp_code_0 0073                               ??_lcd_disp_code_1 0073  
                             ??_lcd_disp_code_2 0073                               ??_lcd_disp_code_3 0073  
                             ??_lcd_disp_code_4 0073                               ??_lcd_disp_code_5 0073  
                             ??_lcd_disp_code_6 0073                               ??_lcd_disp_code_7 0073  
                        __end_of_mfapi_pcd_init 3B41                                       ?_lcd_init 0070  
                                     ?_iic_stop 0070                               _ui_disp_set_price 2C18  
                     ??_my_uart1_received_ready 0073                              ?_ui_disp_set_calib 0070  
                          _other_gpio_port_init 3B7C                                   m_math_pow@ret 002D  
                           ??_ui_disp_modbus_id 002D                                      _m_math_pow 36F9  
                                 _m_system_init 3CCC                            DATAEE_WriteByte@bAdd 0074  
                            ?_ui_disp_set_price 0070                    ??_rfid_comm_process_read_dec 0060  
                    __end_of_ui_disp_flow_error 3B4C                    ??_rfid_comm_process_read_inc 0060  
                       __size_of_getRegisterVal 0228                                   ?_ui_disp_flow 0070  
                                 ?_ui_disp_menu 0070                    ??_rfid_comm_process_recharge 00CE  
                                  _deviceStatus 00C0           data_api_calibration_table_data_init@i 003C  
         data_api_calibration_table_data_save@i 0045                                         _PiccUid 01BE  
                       __end_of_app_flow_lookup 23F1                             ??_ui_disp_set_calib 003A  
            __size_of_ui_disp_set_imd_flow_uint 0017                         picc_select@cascadeLevel 00E3  
                        pcd_comm_with_picc@rbuf 0035                          pcd_comm_with_picc@tmp8 0049  
                        pcd_comm_with_picc@sbuf 0032                            __end_of_mifare_write 28A1  
                        pcd_comm_with_picc@rlen 0037                          pcd_comm_with_picc@slen 0034  
                 __size_of_mfrc522_bal_read_reg 0019           __end_of_app_flow_rt_balance_money_cal 22BE  
        __size_of_app_flow_rt_balance_money_cal 0094                   _app_flow_rt_balance_money_cal 222A  
                           ??_ui_disp_set_price 003A                           _pcd_mifare_transceive 2095  
                                     ?_valve_on 0070                           __size_of_lcd_disp_all 001D  
                         __size_of_lcd_disp_cln 001B                               _picc_stop_cryptol 3B23  
                         __size_of_lcd_disp_str 0048                                         ___aldiv 2013  
                             __end_of_iic_start 3D0E                                 __size_of___bmul 0012  
                                       ___almod 2D42                                         ___awdiv 2A16  
                         picc_select@bufferUsed 00D2                                 __size_of___lmul 0030  
                                       ___awmod 2814                                         ___lbmod 3EBA  
                                       ___lldiv 2A68                                 __size_of___wmul 001E  
                                       ___llmod 377A                                         ___lwdiv 3525  
                       mfrc522_bal_read_reg@reg 0020                                         ___lwmod 313E  
                                       _pLcdReg 0169                              ?_picc_stop_cryptol 0070  
                             __end_of_m_mem_set 3BF2                            __end_of_TablerxAlign 3917  
                      ??_ui_disp_transfer_money 003A                                      _piccResult 00BE  
                         __size_of_iic_send_ack 001C                       __end_of_ui_disp_modbus_id 3C25  
                           _timer0_irq_callback 32DB                      ??_data_api_system_data_get 0073  
                             _noKeyEventTimeOut 016C                                         __ptext1 37BD  
                                       __ptext2 2E96                                         __ptext3 34BE  
                                       __ptext4 1630                                         __ptext5 1E21  
                                       __ptext6 2000                                         __ptext7 1B9D  
                                       __ptext8 1F07                                         __ptext9 2199  
                        ?_data_api_rt_data_save 0070                                         _crc_sum 2B0E  
                      __size_of_lcd_set_com_seg 007D         __end_of_modbus_response_write_clib_data 2531  
      __size_of_modbus_response_write_clib_data 00A1               ??_modbus_response_write_clib_data 0046  
              ?_modbus_response_write_clib_data 0070                 _modbus_response_write_clib_data 2490  
                                     _T1CONbits 0018                          _app_flow_money_warning 3FB2  
                           lcd_set_com_seg@addr 002E                           _OSCILLATOR_Initialize 3AE7  
                           lcd_set_com_seg@bloc 0031            __end_of_adc_mcp3241_start_convert_16 3369  
         __size_of_adc_mcp3241_start_convert_16 0030                    _adc_mcp3241_start_convert_16 3339  
                            _my_uart1_send_poll 3399                             ??_picc_stop_cryptol 0026  
                              lcd_set_com_seg@p 0030                             lcd_set_com_seg@show 0029  
                              ___awmod@dividend 0075                       __end_of_ui_disp_set_calib 2199  
             __size_of_TMR1_SetInterruptHandler 0006                           _flow_sampling_process 2F86  
                    __end_of_pcd_comm_with_picc 07EA                       __size_of_mfrc522_hal_init 0079  
                              ___aldiv@dividend 0024                              _EUSART1_Initialize 3BB4  
                                     _LCDPSbits 0792                        ??_PIN_MANAGER_Initialize 0073  
                     ?_TMR1_SetInterruptHandler 0073                                  ??_ui_head_hide 0074  
           __size_of_rfid_comm_process_read_dec 003F             __size_of_rfid_comm_process_read_inc 003F  
                         __end_of_lcd_disp_code 313E                       __end_of_ui_disp_set_price 2C77  
           __size_of_rfid_comm_process_recharge 022B                           mifare_read@bufferSize 004B  
                      ??_data_api_flash_process 0046                                     ui_mem_cpy@d 0077  
                                   ui_mem_cpy@s 0073                      __size_of_SYSTEM_Initialize 0012  
                                       clrloop0 3B65                                      ??_lcd_init 0077  
                               ?_mfapi_pcd_init 0070                                      ??_iic_stop 0075  
                           ?_my_uart1_send_poll 0073                           ?_other_gpio_port_init 0070  
                          end_of_initialization 009C                             set_globle_ticker@tk 0073  
                                ?_m_system_init 0070                             ?_EUSART1_Initialize 0070  
                                ??_ui_disp_flow 003A                                  ??_ui_disp_menu 0041  
                          ?_timer0_irq_callback 0070              __size_of_mfapi_is_new_card_present 0031  
                                       init_ram 3B70                                    _lcd_disp_all 3E60  
                                  _lcd_disp_cln 3DEF                        ?_modbus_response_command 0070  
                __size_of_mfrc522_bal_write_reg 0011                                _in_app_vavle_off 30BB  
                         ui_key_waite_up_ex@now 0022                                         initloop 3B71  
                                  _lcd_disp_str 28E8                   __end_of_mfrc522_bal_write_reg 3C03  
                 __size_of_ui_key_process_enter 012E                        __size_of_ui_disp_str_num 00AC  
            __end_of_ui_disp_set_balanceWarning 34BE                      _ui_disp_set_balanceWarning 348D  
                             __end_of_valve_off 3D54                             _ui_key_process_down 23F1  
                               ___lldiv@divisor 0028                           __end_of_iic_send_byte 3339  
                     __end_of_picc_stop_cryptol 3B2C                            _ui_disp_clear_totale 3C6C  
                             picc_select@buffer 00D8                                 ___lldiv@counter 0034  
                              ?_ui_uint32_2_str 0031                                 ui_head_hide@loc 0073  
                                  _iic_send_ack 3E0A                                 ui_head_hide@ret 0075  
                               ui_head_hide@str 0076                                      _ui_mem_cpy 3F8C  
                      ?_modbus_response_process 004E                          mfrc522_bal_write_reg@x 0077  
                      ??_ui_key_process_up_down 0053                                      ??_valve_on 0073  
             __end_of_ui_disp_set_imd_flow_uint 3017                               picc_select@result 00EA  
                              ___aldiv@quotient 002A         modbus_response_read_clib_data@startAddr 003A  
                         __end_of_iic_waite_ack 3091                         ?_mfrc522_hal_antenna_on 0070  
                                    _valveTimer 0136                            ??_my_uart1_send_poll 0074  
               __end_of_my_uart1_received_ready 3B23                                      _rtVolume_L 00A0  
                          ??_EUSART1_Initialize 0073                                ?_in_app_vavle_on 0070  
                               ??_key_scan_call 0075                                      _valve_stop 3C7E  
                      picc_authenticate@command 005D                                     ?_crc_append 0028  
                            _uart1ReceivedCount 012C                              _uart1ReceivedTimer 0140  
                              ??_WDT_Initialize 0073                        __end_of_lcd_disp_refresh 3C14  
                      _TMR0_SetInterruptHandler 3AF7                                       _PORTAbits 000C  
                                     _PORTBbits 000D                                       _PORTCbits 000E  
                                     _PORTDbits 000F                       __size_of_ui_disp_set_line 0047  
                                   ?_crc_verify 0028                        picc_authenticate@waitIRQ 005E  
                         picc_select@selectDone 00D1                            ?_ui_key_process_down 0070  
                       _adcSamplingTimerOneTime 0126                  __size_of_ui_key_process_cancel 012B  
                                    crc_sum@crc 0026                                      crc_sum@buf 0073  
                                    crc_sum@len 0075                                     ?_lcd_config 0070  
                              ___lbmod@dividend 0020                   __end_of_ui_key_process_cancel 12FB  
                          rfid_comm_process@ret 01D5                                       _TRISAbits 008C  
              rfid_comm_process_recharge@stpDec 006F                                       _TRISBbits 008D  
                                     _TRISCbits 008E                                       _TRISDbits 008F  
              rfid_comm_process_recharge@stpInc 006E                            ui_disp_set_calib@loc 003D  
                                     _TRISFbits 030C                       __size_of_ui_disp_totale_v 0076  
                   __size_of_event_door_monitor 0006                      mfrc522_bal_set_bit_reg@reg 0025  
                    mfrc522_bal_set_bit_reg@tmp 0024                     iic_received_byte_if_ack@ack 0020  
                   iic_received_byte_if_ack@ret 0021                        __end_of_DATAEE_WriteByte 3E43  
                         ??_timer0_irq_callback 0073                                  _ui_key_process 2E96  
                                     _CardError 0137                                     ?_m_math_pow 0028  
                                   ___lbmod@rem 0022                        ??_picc_req_a_or_wakeup_a 004C  
                         picc_select@txLastBits 00E9                                 iic_send_ack@ack 0073  
                           __end_of_defaultKeyA 392B                      __end_of_ui_disp_str_num_ex 2747  
                    mfrc522_hal_calculate_crc@i 002F        modbus_response_write_clib_data@startAddr 004A  
                                 ??_lcd_disp_dp 0033               __end_of_mfapi_is_new_card_present 342B  
                      ?_mfrc522_bal_set_bit_reg 0022                           ?_ui_disp_clear_totale 0070  
                             mifare_read@buffer 004A                                ?_app_flow_lookup 0073  
                        ?_pcd_mifare_transceive 004A                           create_card_key_b@keyb 0076  
                __end_of_mfrc522_hal_antenna_on 3D6C                               mifare_read@result 0050  
                                 _systemTikerms 0130                              iic_received_byte@i 0075  
                    ?_mfrc522_hal_calculate_crc 0026                     __end_of_event_power_monitor 3BB4  
          __end_of_app_flow_get_adcAverageValue 11D0           __size_of_app_flow_get_adcAverageValue 0106  
                  _app_flow_get_adcAverageValue 10CA                                  __end_of___bmul 3C6C  
                      ui_key_process_cancel@ret 0050                    ?_ui_key_process_up_down_main 0070  
                                __end_of___lmul 3399                               ui_key_process@t16 0056  
                                __end_of___wmul 3E9B                     picc_req_a_or_wakeup_a@__cmd 0051  
                                    m_mem_set@x 0075                  ?_app_flow_rt_balance_money_cal 0070  
          __end_of_mfrc522_bal_read_fifo_len_ex 377A           __size_of_mfrc522_bal_read_fifo_len_ex 0042  
                  _mfrc522_bal_read_fifo_len_ex 3738                      __size_of_ui_disp_modbus_id 0011  
                             __size_of_TMR0_ISR 003A                               __size_of_TMR1_ISR 0012  
               __size_of_ui_disp_transfer_money 0091                                _adcSamplingTimer 0128  
                              _adcSamplingTimes 00BF                             _timer1_irq_callback 2BBE  
                        ?_OSCILLATOR_Initialize 0070                  __size_of_ui_disp_clear_balance 0013  
                 __size_of_data_api_read_eeprom 001F                   __end_of_ui_disp_clear_balance 3CA4  
                         ??_ui_key_process_down 0046                          ?_flow_sampling_process 0070  
                 adc_mcp3241_start_convert_16@b 0024                   adc_mcp3241_start_convert_16@g 0022  
                        data_api_write_eeprom@i 0077                               crc_verify@message 0028  
            __size_of_mfrc522_bal_write_reg_len 0026                      __size_of_ui_disp_set_calib 0082  
                           start_initialization 0039                       picc_authenticate@sendData 0051  
                      __size_of_TMR0_Initialize 0016                 __size_of_PIN_MANAGER_Initialize 0035  
                         __end_of_led_port_init 3D85                      ?_data_api_system_data_init 0070  
                    __size_of_ui_disp_set_price 005F                           _data_api_write_eeprom 3EDA  
                               _LCDDigitalTable 3829                          ??_other_gpio_port_init 0073  
                               ??_m_system_init 0077                    pcd_mifare_transceive@sendLen 004C  
               __size_of_data_api_flash_process 001B                          __end_of_ui_key_process 2F0D  
                             ??_lcd_set_com_seg 002A                    pcd_mifare_transceive@waitIRq 0065  
                         __end_of_m_mem_cpy_len 3DB9                     __size_of_ui_key_set_process 01D0  
            __end_of_rfid_comm_process_read_dec 36BA                      _rfid_comm_process_read_dec 367B  
                  data_api_system_data_init@sta 0034              __end_of_rfid_comm_process_read_inc 36F9  
                    _rfid_comm_process_read_inc 36BA                                  _getRegisterVal 0950  
            __end_of_rfid_comm_process_recharge 0DA3                      _rfid_comm_process_recharge 0B78  
              picc_req_a_or_wakeup_a@bufferATQA 004A                           __size_of_mifare_write 0047  
                          ?_timer1_irq_callback 0070                                     _calVolumeTs 01A2  
                           __size_of_crc_append 0031                                 ___llmod@divisor 0020  
              picc_req_a_or_wakeup_a@bufferSize 004B                                 ___llmod@counter 0074  
                   __size_of_ui_key_waite_up_ex 0032                             DATAEE_ReadByte@bAdd 0073  
                      pcd_comm_with_picc@status 0045                             __size_of_crc_verify 0037  
                    __size_of_picc_stop_cryptol 0009                     __size_of_app_flow_money_off 002B  
            pcd_mifare_transceive@acceptTimeout 004D                                 _cardReadingFlag 013B  
              __size_of_mfrc522_bal_clr_bit_reg 0017                        __size_of_TMR1_Initialize 001D  
                                   ?_ui_mem_cpy 0073                             __size_of_lcd_config 0022  
                          __end_of_ui_head_hide 30BB       modbus_response_write_single_register@rbuf 003C  
                         mfrc522_bal_read_reg@x 0021                                        ??___bmul 0025  
                                      ??___lmul 0073                 __size_of_ui_key_process_up_down 00E6  
                                      ??___wmul 0077                               ??_ui_disp_str_num 002B  
                           __end_of_lcd_disp_dp 2D42                             ui_start_display@dly 002F  
                             ?_lcd_clear_buffer 0070                                     __pdataBANK2 0169  
                                   __pdataBANK3 01CA                                     __pdataBANK4 0220  
                                 ??_mifare_read 004C                                     ?_valve_stop 0070  
                 app_flow_get_adcAverageValue@i 004A                   app_flow_get_adcAverageValue@j 0043  
                __size_of_ui_disp_set_device_id 0014                   __size_of_mfrc522_hal_reset_sf 0009  
              __end_of_data_api_system_data_get 3CB8                   __end_of_ui_disp_set_device_id 3CCC  
                            mifare_write@buffer 0069                   ?_app_flow_get_adcAverageValue 0035  
                               _lcd_disp_code_0 316B                                 _lcd_disp_code_1 3199  
                               _lcd_disp_code_2 31C7                                 _lcd_disp_code_3 31F5  
                 ??_ui_key_process_up_down_main 0073                                 _lcd_disp_code_4 3223  
                               _lcd_disp_code_5 3251                                 _lcd_disp_code_6 327F  
                               _lcd_disp_code_7 32AD                              ??_lcd_clear_buffer 0077  
                          __end_of_ui_disp_flow 2357                            __end_of_ui_disp_menu 2000  
                           __size_of_m_math_pow 003F                        ??_ui_disp_set_balanceOff 0078  
                 ?_mfrc522_bal_read_fifo_len_ex 0020                        _iic_received_byte_if_ack 3BD2  
                            mifare_write@result 00CD                        app_flow_adc_2_flow@index 0049  
          __end_of_mfrc522_hal_set_antenna_gain 3DD4           __size_of_mfrc522_hal_set_antenna_gain 001B  
                  _mfrc522_hal_set_antenna_gain 3DB9                     __end_of_app_flow_adc_2_flow 06A4  
                                   __pbssBIGRAM 2200                                 _cardUidBlockBuf 0420  
                                   __pbssCOMMON 0078                                _mfrc522_hal_init 2F0D  
                              lcd_disp_cln@show 0034                mfrc522_bal_write_read_via_spi@rb 0075  
                              lcd_disp_code@loc 0075                                       ___latbits 0003  
                      __size_of_ui_key_waite_up 0031                   __size_of_EUSART1_Transmit_ISR 0001  
                                 __pcstackBANK0 0020                                   __pcstackBANK1 00CA  
                                 __pcstackBANK3 01D4                                    _mifare_write 285A  
                     __size_of_ui_start_display 0043               __end_of_mfrc522_bal_write_reg_len 3F8C  
                                   _defaultKeyA 3925                                   ??_picc_halt_a 004A  
                               ?_ui_key_process 0070                          __end_of_getRegisterVal 0B78  
                                 ??_picc_select 004B                               _get_globle_ticker 3B97  
                             _set_globle_ticker 3B2C                          _ui_disp_transfer_money 2199  
                                  _TablerxAlign 390F                           ??_timer1_irq_callback 0074  
                  __size_of_EUSART1_Receive_ISR 0025                               __size_of_lcd_init 0005  
                             __size_of_iic_stop 0016                               picc_halt_a@buffer 004D  
                            ?_get_globle_ticker 0073                 __size_of_picc_req_a_or_wakeup_a 0051  
                            ?_set_globle_ticker 0073                          app_flow_adc_2_flow@ad1 0047  
                        app_flow_adc_2_flow@ad2 0043                          ??_ui_disp_clear_totale 0078  
       modbus_response_illgeal_function@errcode 0033                         picc_select@collisionPos 00E1  
                         _TMR0_InterruptHandler 01D0                                       __pnvBANK2 016D  
                                     __pnvBANK3 01D0                               picc_halt_a@result 0051  
                                _rtBalanceMoney 00A8                                ___lwdiv@dividend 0075  
                        _PIN_MANAGER_Initialize 34F0                      ?_app_flow_rt_volume_cal_ex 0070  
                                     _comBuffer 2200                             ??_get_globle_ticker 0075  
                           ??_set_globle_ticker 0075                          _data_api_flash_process 3DD4  
              __end_of_TMR1_SetInterruptHandler 3B03                     modbus_response_command@rbuf 0049  
                    picc_authenticate@blockAddr 004A                                        ?___aldiv 0020  
                                      ?___almod 0020                                        ?___awdiv 0073  
                                     __ptext100 2F0D                                       __ptext101 3DB9  
                                     __ptext110 3CCC                                       __ptext102 3BC3  
                                     __ptext111 3B7C                                       __ptext103 3D25  
                                     __ptext120 3AFD                                       __ptext112 3D6C  
                                     __ptext104 3D0E                                       __ptext121 07EA  
                                     __ptext113 3AEC                                       __ptext105 3B11  
                                     __ptext130 3FB2                                       __ptext122 3AF7  
                                     __ptext114 3EFB                                       __ptext106 3D54  
                                     __ptext131 30E6                                       __ptext123 34F0  
                                     __ptext115 3E60                                       __ptext107 3BF2  
                                     __ptext140 35C9                                       __ptext132 30BB  
                                     __ptext124 3AE7                                       __ptext116 3C48  
                                     __ptext108 3D85                                       __ptext141 3CF7  
                                     __ptext133 3D3C                                       __ptext125 3BB4  
                                     __ptext117 3ADF                                       __ptext109 0800  
                                     __ptext150 3AF1                                       __ptext142 3309  
                                     __ptext134 2357                                       __ptext126 2F86  
                                     __ptext118 3E43                                       __ptext151 2978  
                                     __ptext143 3068                                       __ptext135 10CA  
                                     __ptext127 19FD                                       __ptext119 3ADC  
                                     __ptext160 33C9                                       __ptext152 3CA4  
                                     __ptext144 3CE1                                       __ptext136 03BD  
                                     __ptext128 377A                                       __ptext161 2B0E  
                                     __ptext153 1C72                                       __ptext145 3B89  
                                     __ptext137 3369                                       __ptext129 222A  
                                     __ptext162 3E7D                                       __ptext154 3EDA  
                                     __ptext146 3BD2                                       __ptext138 2A68  
                                     __ptext155 3E26                                       __ptext147 3E0A  
                                     __ptext139 3339                                       __ptext164 3C36  
                                     __ptext156 3E9B                                       __ptext148 303F  
                                     __ptext165 3602                                       __ptext157 3B4C  
                                     __ptext149 3BA5                                       __ptext166 0003  
                                     __ptext158 355A                                       __ptext167 3F41  
                                     __ptext159 3D9E                                        ?___awmod 0073  
                                      ?___lbmod 0073                         ??_data_api_rt_data_save 0033  
                                      ?___lldiv 0028                                        ?___llmod 0020  
                 ui_key_process_up_down_main@up 0074                                        ?___lwdiv 0073  
                                      ?___lwmod 0073                              _ui_disp_flow_error 3B41  
                             __size_of_valve_on 0008                         ?_app_flow_money_warning 0070  
          app_flow_get_adcAverageValue@maxIndex 003F                    mfrc522_bal_write_reg_len@buf 0020  
                  mfrc522_bal_write_reg_len@len 0022                    mfrc522_bal_write_reg_len@reg 0023  
                 ui_disp_balance_and_volume@ret 003C                    ??_INTERRUPT_InterruptManager 0072  
          app_flow_get_adcAverageValue@minIndex 0040                                ___almod@dividend 0024  
                                     _iic_start 3CF7                                       __pswtext1 387A  
                                     __pswtext2 388A                                       __pswtext3 3851  
                                      ?_crc_sum 0073                                _ui_disp_set_line 28A1  
                      __end_of_in_app_vavle_off 30E6                         __end_of_LCDDigitalTable 3851  
                                      _BAUD1CON 019F                                       _m_mem_set 3BE2  
                                     _flowError 00C6                             ?_ui_disp_flow_error 0070  
                      __size_of_TMR1_StartTimer 0003                                ??_mfapi_pcd_init 0029  
                  __end_of_mfrc522_bal_read_reg 3D9E                             __end_of_mifare_read 2B0E  
                        ?_data_api_write_eeprom 0020                           pcd_comm_with_picc@cmd 0041  
                 ?_mfrc522_hal_set_antenna_gain 0070                                _ui_disp_totale_v 2E20  
                  picc_req_a_or_wakeup_a@status 0052                picc_select@currentLevelKnownBits 00ED  
                        _ui_key_process_up_down 1E21                       __end_of_get_globle_ticker 3BA5  
                     __end_of_set_globle_ticker 3B36                                ___lwdiv@quotient 0020  
                                __size_of_delay 000E                             __size_of_ui_mem_cpy 0026  
                                      _LCDDATA0 07A0                  adc_mcp3241_start_convert_16@t8 0025  
                               ?_getRegisterVal 0035                        __size_of_DATAEE_ReadByte 000C  
       key_process_up_down_variable_speed_ex@up 0047            __size_of_ui_key_process_up_down_main 0013  
                            lcd_set_com_seg@com 002F                              lcd_set_com_seg@seg 0028  
                              _calVolumeTimeSec 0141                                 ___aldiv@divisor 0020  
                           __size_of_valve_stop 0013                               ??_TMR0_Initialize 0075  
               mfapi_is_new_card_present@result 005A                                 ___aldiv@counter 0028  
                                ___wmul@product 0020                                        _LATAbits 010C  
                                      _LATBbits 010D                                        _LATCbits 010E  
                                     _sendCount 013F                             __end_of_picc_halt_a 35C9  
                                      _LATDbits 010F                                        _LATFbits 038C  
                            _pcd_comm_with_picc 06A4                               _iic_received_byte 303F  
                                     clear_ram0 3B64                                  m_mem_cpy_len@d 0073  
                                m_mem_cpy_len@s 0075                            ??_ui_disp_flow_error 0078  
                                      _PIE1bits 0091                                     _lcd_disp_dp 2CDC  
                   ?_ui_disp_set_balanceWarning 0070                             __end_of_picc_select 03BD  
                      _app_flow_adc_2_flow$4477 003D             __size_of_INTERRUPT_InterruptManager 0033  
                    ??_TMR0_SetInterruptHandler 0075                              ?_iic_received_byte 0070  
                                      _PIR1bits 0011                         __end_of_lcd_disp_code_0 3199  
                       __end_of_lcd_disp_code_1 31C7                         __end_of_lcd_disp_code_2 31F5  
                       __end_of_lcd_disp_code_3 3223                         __end_of_lcd_disp_code_4 3251  
                       __end_of_lcd_disp_code_5 327F                         __end_of_lcd_disp_code_6 32AD  
                       __end_of_lcd_disp_code_7 32DB                             ?_pcd_comm_with_picc 0031  
                                     _valve_off 3D3C                  __end_of_app_flow_money_warning 3FD9  
                      ui_key_process_up_down@up 0054                                        _TMR0_ISR 3602  
                                      _TMR1_ISR 3C36         data_api_calibration_table_data_init@sta 0039  
       data_api_calibration_table_data_init@stp 003A                                 ui_disp_flow@flw 003D  
                                  ??_crc_append 002C                    ??_ui_disp_balance_and_volume 003A  
              __size_of_modbus_response_command 00B2                                   _findCardTimer 01A0  
                           ??_iic_received_byte 0073                            picc_select@validBits 004A  
                        _picc_req_a_or_wakeup_a 29C5         data_api_calibration_table_data_save@loc 0044  
                                 ui_mem_cpy@len 0076                    __end_of_ui_key_process_enter 0950  
                             ??_TMR1_Initialize 0075         data_api_calibration_table_data_save@stp 0042  
                                    ?_iic_start 0070                               ___wmul@multiplier 0073  
                             ?_lcd_disp_refresh 0070                                    ??_crc_verify 002C  
               __size_of_ui_disp_set_balanceOff 0031                                      ?_m_mem_set 0073  
                     picc_select@valueOfCollReg 00D7                                    ??_lcd_config 0077  
              __size_of_modbus_response_process 005A                              ??_lcd_disp_refresh 0021  
                ??_app_flow_get_adcAverageValue 0037                        ?_my_uart1_received_ready 0070  
                         DATAEE_WriteByte@bData 0073                       pcd_comm_with_picc@rxAlign 0039  
                     pcd_comm_with_picc@waitIRQ 0031                  ??_mfrc522_bal_read_fifo_len_ex 0077  
                          ??_pcd_comm_with_picc 003B                               ___lmul@multiplier 0020  
                              crc_verify@crccal 002F                        data_api_read_eeprom@addr 0076  
                             ?_DATAEE_WriteByte 0073                                    ??_m_math_pow 0077  
                                      _KeyValue 00C1               __size_of_data_api_system_data_get 0014  
                             ??_ui_key_waite_up 0077                       __end_of_iic_received_byte 3068  
                     ?_data_api_system_data_get 0070                         ??_pcd_mifare_transceive 004E  
                      data_api_rt_data_save@stp 0036                           __size_of_ui_head_hide 002A  
                            ??_DATAEE_WriteByte 0074                              __end_of_crc_append 33FA  
                                    _EECON1bits 0195             __size_of_ui_disp_balance_and_volume 01B3  
                       _mfrc522_bal_clr_bit_reg 3D0E          __end_of_modbus_response_read_clib_data 1B9D  
       __size_of_modbus_response_read_clib_data 00D0                  _modbus_response_read_clib_data 1ACD  
                         _mfrc522_bal_write_reg 3BF2                              __end_of_crc_verify 3591  
            pcd_mifare_transceive@cmdBufferSize 0067                              __end_of_lcd_config 3F1D  
                   ??_mfrc522_hal_calculate_crc 002B                           __size_of_ui_disp_flow 0099  
                                    ?_valve_off 0070                           __size_of_ui_disp_menu 00F9  
                        __size_of_lcd_disp_code 002D                      ?_ui_disp_set_imd_flow_uint 0070  
                       ??_OSCILLATOR_Initialize 0073                                __size_of___aldiv 0082  
                   __size_of_my_uart1_send_poll 0030                                __size_of___almod 006E  
                              __size_of___awdiv 0052                              _ui_disp_str_num_ex 268F  
                              __size_of___awmod 0046                                __size_of___lbmod 0020  
                              __size_of___lldiv 0053                         ??_flow_sampling_process 004B  
                              __size_of___llmod 0043                     __size_of_EUSART1_Initialize 000F  
                                   _mifare_read 2ABB                                __size_of___lwdiv 0035  
                              __size_of___lwmod 002D                                 _lcd_set_com_seg 1802  
                      __size_of_ui_uint32_2_str 00B9                        _TMR1_SetInterruptHandler 3AFD  
                         __end_of_key_scan_call 4000                __size_of_mfrc522_bal_set_bit_reg 0017  
                                    _ANSELAbits 018C                                      _ANSELFbits 040C  
                            __end_of_m_math_pow 3738                                        _adcvalue 0122  
                         _TMR1_InterruptHandler 01D2                                __size_of_crc_sum 0056  
                    __end_of_event_door_monitor 3AF7                             ?_ui_disp_str_num_ex 0027  
                                 crc_append@crc 0031                          ui_disp_totale_v@decnum 003C  
                   __end_of_timer0_irq_callback 3309                        __size_of_in_app_vavle_on 0024  
                              _ui_start_display 37BD                          __size_of_iic_send_byte 0030  
                               ___lwdiv@divisor 0073                                 ___lwdiv@counter 0022  
                   ??_data_api_system_data_init 0033                      __size_of_get_globle_ticker 000E  
                                  _ui_head_hide 3091                      __size_of_set_globle_ticker 000A  
                                      __ptext10 268F                                        __ptext11 3C25  
                                      __ptext20 345C                                        __ptext12 2800  
                                      __ptext21 3C14                                        __ptext13 2C18  
                                      __ptext30 0822                                        __ptext22 2531  
                                      __ptext14 28A1                                        __ptext31 342B  
                                      __ptext23 3F8C                                        __ptext15 3000  
                                      __ptext40 147D                                        __ptext32 3B2C  
                                      __ptext24 313E                                        __ptext16 3CB8  
                                      __ptext41 2747                                        __ptext33 3B97  
                                      __ptext25 3525                                        __ptext17 2117  
                                      __ptext50 327F                                        __ptext42 36F9  
                                      __ptext34 23F1                                        __ptext26 22BE  
                                      __ptext18 2814                                        __ptext51 3251  
                                      __ptext43 2D42                                        __ptext35 11D0  
                                      __ptext27 3C6C                                        __ptext19 348D  
                                      __ptext60 1802                                        __ptext52 3223  
                                      __ptext44 3091                                        __ptext36 2BBE  
                                      __ptext28 2E20                                        __ptext61 3EBA  
                                      __ptext53 31F5                                        __ptext45 3B41  
                                      __ptext37 3C7E                                        __ptext29 3C91  
                                      __ptext70 367B                                        __ptext62 0B78  
                                      __ptext54 31C7                                        __ptext46 28E8  
                                      __ptext38 32DB                                        __ptext71 2C77  
                                      __ptext63 36BA                                        __ptext55 3199  
                                      __ptext47 3C03                                        __ptext39 1D48  
                                      __ptext80 06A4                                        __ptext72 2ABB  
                                      __ptext64 0DA3                                        __ptext56 316B  
                                      __ptext48 3111                                        __ptext81 2DB0  
                                      __ptext73 3B23                                        __ptext65 285A  
                                      __ptext57 3B58                                        __ptext49 32AD  
                                      __ptext90 193B                                        __ptext82 3F66  
                                      __ptext74 00A0                                        __ptext66 2095  
                                      __ptext58 2CDC                                        __ptext91 2490  
                                      __ptext83 3738                                        __ptext75 3C5A  
                                      __ptext67 3DD4                                        __ptext59 3DEF  
                                      __ptext92 12FB                                        __ptext84 3BE2  
                                      __ptext76 2A16                                        __ptext68 187F  
                                      __ptext93 1ACD                                        __ptext85 3FD9  
                                      __ptext77 3591                                        __ptext69 3017  
                                      __ptext94 363C                                        __ptext86 3F1D  
                                      __ptext78 33FA                                        __ptext95 25DD  
                                      __ptext87 3B09                                        __ptext79 29C5  
                                      __ptext96 3399                                        __ptext88 3B1A  
                             _picc_authenticate 2C77                                        __ptext97 0950  
                                      __ptext89 2B64                                        __ptext98 2013  
                                      __ptext99 3B36                                        _bkupMenu 00C2  
                                   _picc_halt_a 3591                           _ui_key_process_cancel 11D0  
                                      _hexTable 3869                                        _lcd_init 3AEC  
                     picc_req_a_or_wakeup_a@cmd 0050                 ??_app_flow_rt_balance_money_cal 0035  
                                      _iic_stop 3CE1                                 ___almod@divisor 0020  
                             ??_TMR1_StartTimer 0073                          __size_of_iic_waite_ack 0029  
                                   _picc_select 00A0                  ??_mfrc522_hal_set_antenna_gain 0026  
                            ?_picc_authenticate 004A                                 ___almod@counter 0074  
                   DATAEE_WriteByte@GIEBitValue 0075                                        _pcdPwrOn 0133  
                        mifare_write@bufferSize 006A                     ?_rfid_comm_process_read_dec 0070  
                   ?_rfid_comm_process_read_inc 0070                                        _uiAdjbuf 0161  
                  __end_of_data_api_read_eeprom 3EBA                     ?_rfid_comm_process_recharge 0070  
                               _ui_disp_str_num 2531                                        _opReason 00C4  
                                 __size_of_main 00CA                                    _ui_disp_flow 22BE  
                              _smallFlowNotCare 0139                                    _ui_disp_menu 1F07  
                        _ui_disp_set_balanceOff 345C                    ?_ui_disp_small_flow_how_care 0070  
                           picc_select@maxBytes 00D6                    _TMR0_DefaultInterruptHandler 0000  
                      mfrc522_hal_antenna_on@t8 0023                               ??_DATAEE_ReadByte 0073  
                          ??_ui_disp_str_num_ex 002B                                        _tmTemp16 0120  
                           ??_picc_authenticate 004E                      ?_mfapi_is_new_card_present 0070  
                                      _password 012A                        __end_of_mfrc522_hal_init 2F86  
                          _mfrc522_bal_read_reg 3D85                                      _RC1STAbits 019D  
                                  ??_ui_mem_cpy 0075                 pcd_comm_with_picc@controlBuffer 0042  
                    ??_iic_received_byte_if_ack 0076                                ?_lcd_disp_code_0 0070  
                              ?_lcd_disp_code_1 0070                                        _valve_on 3B09  
                              ?_lcd_disp_code_2 0070                                ?_lcd_disp_code_3 0070  
                              ?_lcd_disp_code_4 0070                                ?_lcd_disp_code_5 0070  
                              ?_lcd_disp_code_6 0070                                ?_lcd_disp_code_7 0070  
          __size_of_adc_mcp3241_read_convert_16 0039                             picc_select@uidIndex 00E4  
                      mfrc522_bal_write_reg@reg 0020                                        int$flags 007E  
                                      crc_sum@i 0024                                        crc_sum@j 0022  
                   __end_of_ui_key_process_down 2490   __end_of_modbus_response_write_single_register 19FD  
__size_of_modbus_response_write_single_register 00C2         ??_modbus_response_write_single_register 0036  
        ?_modbus_response_write_single_register 0070           _modbus_response_write_single_register 193B  
                                  ??_valve_stop 0073                                        _userKeyB 01CA  
            __end_of_INTERRUPT_InterruptManager 0037                      _INTERRUPT_InterruptManager 0004  
                      __size_of_app_flow_lookup 009A                   rfid_comm_process_read_dec@ret 0063  
                          get_globle_ticker@ret 0075                             _EUSART1_Receive_ISR 3F41  
                                   ??_iic_start 0075          __end_of_mfrc522_bal_write_read_via_spi 0822  
       __size_of_mfrc522_bal_write_read_via_spi 0022                  _mfrc522_bal_write_read_via_spi 0800  
                  mfapi_is_new_card_present@cmd 0057                         data_api_read_eeprom@buf 0074  
                                   ??_m_mem_set 0077                         data_api_read_eeprom@len 0077  
                                   _uart1Buffer 04A0                    __size_of_event_power_monitor 000F  
                      modbus_response_command@i 0047                                ??_ui_key_process 0055  
                 rfid_comm_process_read_inc@ret 0063                         _flowCalibrationLocation 013C  
                         mifare_write@cmdBuffer 00CB                                      _INTCONbits 000B  
                     __end_of_picc_authenticate 2CDC                           _ui_disp_clear_balance 3C91  
                     picc_select@responseBuffer 00E7                                m_mem_cpy_len@len 0077  
                     picc_select@responseLength 00E6              modbus_response_write_clib_data@t16 0048  
                          iic_waite_ack@timeout 0076                      __end_of_ui_key_set_process 1800  
                                __pstringtext10 38BE                                  __pstringtext11 38C7  
                                __pstringtext20 391E                                  __pstringtext12 38D0  
                                __pstringtext21 392B                                  __pstringtext13 38D9  
                                __pstringtext22 3931                                  __pstringtext14 38E2  
                                __pstringtext23 3937                                  __pstringtext15 38EB  
                     _mfrc522_hal_calculate_crc 2DB0                                  __pstringtext24 393D  
                                __pstringtext16 38F4                                  __pstringtext25 3943  
                                __pstringtext17 38FD                                  __pstringtext26 3948  
                                __pstringtext18 3906                                  __pstringtext27 394D  
                                __pstringtext19 3917                                  __pstringtext28 3951  
                                __pstringtext29 0000              modbus_response_write_clib_data@buf 004C  
                       ?_ui_disp_transfer_money 0070                                   _lcd_disp_code 3111  
                        picc_select@bytesToCopy 00E5                       __size_of_lcd_clear_buffer 000C  
               mfrc522_bal_read_fifo_len_ex@adr 0025                 mfrc522_bal_read_fifo_len_ex@buf 0020  
                  modbus_response_process@pmdbs 0052                 mfrc522_bal_read_fifo_len_ex@len 0022  
               mfrc522_bal_read_fifo_len_ex@reg 0024                         __size_of_WDT_Initialize 0004  
                         mifare_write@blockAddr 00CA                              __end_of_ui_mem_cpy 3FB2  
                  __end_of_mfrc522_hal_reset_sf 3B1A                   ?_adc_mcp3241_start_convert_16 0022  
                         __end_of_m_system_init 3CE1                                        intlevel1 0000  
                 __size_of_other_gpio_port_init 000D                      __end_of_ui_key_waite_up_ex 34F0  
                    __size_of_iic_received_byte 0029                            ?_EUSART1_Receive_ISR 0070  
                     ??_mfrc522_bal_clr_bit_reg 0023                                ___lwmod@dividend 0075  
                             _create_card_key_b 3017                                ___lldiv@dividend 002C  
                       ?_PIN_MANAGER_Initialize 0070                              __end_of_valve_stop 3C91  
                    __end_of_app_flow_money_off 3111                        __end_of_ui_disp_set_line 28E8  
                          _ui_key_process_enter 0822                               __CFG_CLKOUTEN$OFF 0000  
                        ?_mfrc522_bal_write_reg 0077                         ?_data_api_flash_process 0070  
                            ?_create_card_key_b 0073                    __end_of_EUSART1_Transmit_ISR 0004  
                         ?_mfrc522_bal_read_reg 0070                                 _adcAverageValue 00B8  
                adc_mcp3241_read_convert_16@t16 0027                   ??_ui_disp_small_flow_how_care 002D  
                                 _iic_send_byte 3309                  adc_mcp3241_read_convert_16@sta 0026  
              ??_ui_disp_set_transferMoneyLimit 0078                 ?_ui_disp_set_transferMoneyLimit 0070  
                     _data_api_system_data_init 2978                    modbus_response_command@pmdbs 0046  
                   ??_app_flow_rt_volume_cal_ex 0035                        __end_of_ui_disp_totale_v 2E96  
                       __end_of_lcd_set_com_seg 187F                              picc_select@rxAlign 00D5  
                          _uart1ReceivedTimeout 01A4                   rfid_comm_process_recharge@ret 006D  
                                   ??_valve_off 0073                          __size_of_led_port_init 0019  
            __end_of_ui_disp_balance_and_volume 1630                      _ui_disp_balance_and_volume 147D  
                       _modbus_response_command 25DD                             ??_create_card_key_b 0075  
                                 _iic_waite_ack 3068                          __size_of_m_mem_cpy_len 001B  
                __size_of_data_api_rt_data_save 00BC                   __end_of_data_api_rt_data_save 193B  
                                   _valveStatus 007A                                   __pstringtext1 3800  
                                 __pstringtext2 3829                                   __pstringtext3 3869  
                                 __pstringtext4 390F                                   __pstringtext5 3925  
                                 __pstringtext6 389A                                   __pstringtext7 38A3  
                                 __pstringtext8 38AC                                   __pstringtext9 38B5  
                       ??_data_api_write_eeprom 0076                                   _warningStatus 0138  
                                    _OPTION_REG 0095                           _ui_disp_set_device_id 3CB8  
                       _modbus_response_process 2B64                                     _rtVolume_m3 00B0  
                             ?_in_app_vavle_off 0070                         ?_ui_key_process_up_down 0070  
                                   crc_append@n 002A                              ui_disp_flow@decnum 003C  
    data_api_calibration_table_data_save@single 0033                                ___lldiv@quotient 0030  
                              ??_getRegisterVal 0038                       _Main_flowCalibrationTable 2374  
                               ___lwmod@divisor 0073                                 _TMR0_Initialize 07EA  
                   mfrc522_bal_clr_bit_reg@bits 0022                                 ___lwmod@counter 0020  
                __end_of_ui_disp_transfer_money 222A                    pcd_comm_with_picc@bitFraming 003E  
                            ??_in_app_vavle_off 0074                                    ___aldiv@sign 0029  
                        picc_select@uidComplete 00D0                          ?_ui_key_process_cancel 0070  
                   __end_of_timer1_irq_callback 2C18                                  ?_lcd_disp_code 0075  
                          picc_authenticate@key 004B                               ??_ui_uint32_2_str 0036  
                          picc_authenticate@uid 004D                         __end_of_ui_disp_str_num 25DD  
                         my_uart1_send_poll@buf 0075                           my_uart1_send_poll@len 0073  
                    ?_mfrc522_bal_write_reg_len 0020                       __end_of_create_card_key_b 303F  
                  __size_of_app_flow_adc_2_flow 02E7                           ??_EUSART1_Receive_ISR 0070  
                __end_of_PIN_MANAGER_Initialize 3525                      mfrc522_bal_clr_bit_reg@reg 0025  
                                  ___almod@sign 0075                      mfrc522_bal_clr_bit_reg@tmp 0024  
                             ??_in_app_vavle_on 0074                        ??_mfrc522_hal_antenna_on 0022  
                                 ?_lcd_disp_all 0070                                   ?_lcd_disp_cln 0070  
                  pcd_comm_with_picc@_validBits 0048                                   ?_lcd_disp_str 0022  
                __end_of_data_api_flash_process 3DEF                           ?_ui_key_process_enter 0070  
                            picc_authenticate@i 005F                                    ?_lcd_disp_dp 0032  
 __end_of_key_process_up_down_variable_speed_ex 1C72  __size_of_key_process_up_down_variable_speed_ex 00D5  
       ??_key_process_up_down_variable_speed_ex 0048          ?_key_process_up_down_variable_speed_ex 0043  
         _key_process_up_down_variable_speed_ex 1B9D                                     crc_verify@n 002A  
                   pcd_mifare_transceive@result 0068                                  ?_iic_send_byte 0070  
                               _TMR1_Initialize 3E43                   __size_of_ui_disp_clear_totale 0012  
                                 ?_iic_send_ack 0070                          flow_sampling_process@i 004C  
