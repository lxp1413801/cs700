

Microchip Technology PIC STD Macro Assembler V1.37 build -260352376 
                                                                                               Wed Mar 29 13:32:00 2017

Microchip Technology Omniscient Code Generator v1.37 (Standard mode) build 201603110536
     1                           	processor	16F1947
     2                           	opt	pw 120
     3                           	opt	sm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK3,global,class=CODE,delta=2
     7                           	psect	stringtext,global,class=STRCODE,delta=2
     8                           	psect	_Main_flowCalibrationTable_text,global,class=CODE,delta=2
     9                           	psect	_bkupSystemData_text,global,class=CODE,delta=2
    10                           	psect	_mainSystemData_text,global,class=CODE,delta=2
    11                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    20                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    21                           	psect	clrtext,global,class=CODE,delta=2
    22                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    23                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    24                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    26                           	psect	text1,local,class=CODE,merge=1,delta=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2
    28                           	psect	text22,local,class=CODE,merge=1,delta=2
    29                           	psect	text28,local,class=CODE,merge=1,delta=2
    30                           	psect	text29,local,class=CODE,merge=1,delta=2
    31                           	psect	text34,local,class=CODE,merge=1,delta=2
    32                           	psect	text35,local,class=CODE,merge=1,delta=2
    33                           	psect	text37,local,class=CODE,merge=1,delta=2
    34                           	psect	text38,local,class=CODE,merge=1,delta=2
    35                           	psect	text42,local,class=CODE,merge=1,delta=2
    36                           	psect	text46,local,class=CODE,merge=1,delta=2
    37                           	psect	swtext1,local,class=CONST,delta=2
    38                           	psect	swtext2,local,class=CONST,delta=2
    39                           	psect	text65,local,class=CODE,merge=1,delta=2
    40                           	psect	text76,local,class=CODE,merge=1,delta=2
    41                           	psect	text82,local,class=CODE,merge=1,delta=2
    42                           	psect	text87,local,class=CODE,merge=1,delta=2
    43                           	psect	text93,local,class=CODE,merge=1,delta=2
    44                           	psect	text105,local,class=CODE,merge=1,delta=2
    45                           	psect	text122,local,class=CODE,merge=1,delta=2
    46                           	psect	text123,local,class=CODE,merge=1,delta=2
    47                           	psect	text126,local,class=CODE,merge=1,delta=2
    48                           	psect	text131,local,class=CODE,merge=1,delta=2
    49                           	psect	text152,local,class=CODE,merge=1,delta=2
    50                           	psect	text154,local,class=CODE,merge=1,delta=2
    51                           	psect	text156,local,class=CODE,merge=1,delta=2
    52                           	psect	intentry,global,class=CODE,delta=2
    53                           	psect	text165,local,class=CODE,merge=1,delta=2
    54                           	psect	text166,local,class=CODE,merge=1,delta=2
    55                           	psect	text167,local,class=CODE,merge=1,delta=2
    56                           	psect	text168,local,class=CODE,merge=1,delta=2
    57                           	dabs	1,0x620,48
    58                           	dabs	1,0x5A0,80
    59                           	dabs	1,0x4A0,80,_uart1Buffer
    60                           	dabs	1,0x456,18,_cardDecBuf
    61                           	dabs	1,0x444,18,_cardIncBuf
    62                           	dabs	1,0x420,18,_cardUidBlockBuf
    63                           	dabs	1,0x432,18,_cardWriteBuf
    64                           	dabs	1,0x2370,0,_comBuffer
    65                           	dabs	1,0x7E,2
    66  0000                     	;# 
    67  0001                     	;# 
    68  0002                     	;# 
    69  0003                     	;# 
    70  0004                     	;# 
    71  0005                     	;# 
    72  0006                     	;# 
    73  0007                     	;# 
    74  0008                     	;# 
    75  0009                     	;# 
    76  000A                     	;# 
    77  000B                     	;# 
    78  000C                     	;# 
    79  000D                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0016                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001C                     	;# 
    96  001E                     	;# 
    97  001F                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  008F                     	;# 
   102  0090                     	;# 
   103  0091                     	;# 
   104  0092                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0110                     	;# 
   123  0111                     	;# 
   124  0112                     	;# 
   125  0113                     	;# 
   126  0114                     	;# 
   127  0115                     	;# 
   128  0116                     	;# 
   129  0117                     	;# 
   130  0118                     	;# 
   131  0119                     	;# 
   132  011A                     	;# 
   133  011B                     	;# 
   134  011D                     	;# 
   135  011E                     	;# 
   136  011F                     	;# 
   137  018C                     	;# 
   138  0190                     	;# 
   139  0191                     	;# 
   140  0191                     	;# 
   141  0192                     	;# 
   142  0193                     	;# 
   143  0193                     	;# 
   144  0193                     	;# 
   145  0194                     	;# 
   146  0195                     	;# 
   147  0196                     	;# 
   148  0199                     	;# 
   149  0199                     	;# 
   150  019A                     	;# 
   151  019A                     	;# 
   152  019B                     	;# 
   153  019B                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019C                     	;# 
   157  019C                     	;# 
   158  019D                     	;# 
   159  019D                     	;# 
   160  019E                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  019F                     	;# 
   164  020D                     	;# 
   165  0211                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0212                     	;# 
   169  0213                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0214                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0219                     	;# 
   181  021A                     	;# 
   182  021B                     	;# 
   183  021C                     	;# 
   184  021D                     	;# 
   185  021E                     	;# 
   186  021F                     	;# 
   187  028C                     	;# 
   188  028D                     	;# 
   189  0291                     	;# 
   190  0291                     	;# 
   191  0292                     	;# 
   192  0293                     	;# 
   193  0294                     	;# 
   194  0295                     	;# 
   195  0295                     	;# 
   196  0296                     	;# 
   197  0298                     	;# 
   198  0298                     	;# 
   199  0299                     	;# 
   200  029A                     	;# 
   201  029B                     	;# 
   202  029C                     	;# 
   203  029C                     	;# 
   204  029D                     	;# 
   205  029E                     	;# 
   206  029F                     	;# 
   207  030C                     	;# 
   208  030D                     	;# 
   209  0311                     	;# 
   210  0311                     	;# 
   211  0312                     	;# 
   212  0313                     	;# 
   213  0314                     	;# 
   214  0315                     	;# 
   215  0315                     	;# 
   216  0316                     	;# 
   217  0318                     	;# 
   218  0318                     	;# 
   219  0319                     	;# 
   220  031A                     	;# 
   221  031C                     	;# 
   222  031C                     	;# 
   223  031D                     	;# 
   224  031E                     	;# 
   225  038C                     	;# 
   226  038D                     	;# 
   227  0394                     	;# 
   228  0395                     	;# 
   229  0396                     	;# 
   230  040C                     	;# 
   231  040D                     	;# 
   232  0415                     	;# 
   233  0416                     	;# 
   234  0417                     	;# 
   235  041C                     	;# 
   236  041D                     	;# 
   237  041E                     	;# 
   238  048D                     	;# 
   239  0491                     	;# 
   240  0492                     	;# 
   241  0493                     	;# 
   242  0493                     	;# 
   243  0494                     	;# 
   244  0495                     	;# 
   245  0496                     	;# 
   246  0497                     	;# 
   247  0791                     	;# 
   248  0792                     	;# 
   249  0793                     	;# 
   250  0794                     	;# 
   251  0795                     	;# 
   252  0798                     	;# 
   253  0799                     	;# 
   254  079A                     	;# 
   255  079B                     	;# 
   256  079C                     	;# 
   257  079D                     	;# 
   258  07A0                     	;# 
   259  07A1                     	;# 
   260  07A2                     	;# 
   261  07A3                     	;# 
   262  07A4                     	;# 
   263  07A5                     	;# 
   264  07A6                     	;# 
   265  07A7                     	;# 
   266  07A8                     	;# 
   267  07A9                     	;# 
   268  07AA                     	;# 
   269  07AB                     	;# 
   270  07AC                     	;# 
   271  07AD                     	;# 
   272  07AE                     	;# 
   273  07AF                     	;# 
   274  07B0                     	;# 
   275  07B1                     	;# 
   276  07B2                     	;# 
   277  07B3                     	;# 
   278  07B4                     	;# 
   279  07B5                     	;# 
   280  07B6                     	;# 
   281  07B7                     	;# 
   282  0FE4                     	;# 
   283  0FE5                     	;# 
   284  0FE6                     	;# 
   285  0FE7                     	;# 
   286  0FE8                     	;# 
   287  0FE9                     	;# 
   288  0FEA                     	;# 
   289  0FEB                     	;# 
   290  0FED                     	;# 
   291  0FEE                     	;# 
   292  0FEF                     	;# 
   293  0000                     	;# 
   294  0001                     	;# 
   295  0002                     	;# 
   296  0003                     	;# 
   297  0004                     	;# 
   298  0005                     	;# 
   299  0006                     	;# 
   300  0007                     	;# 
   301  0008                     	;# 
   302  0009                     	;# 
   303  000A                     	;# 
   304  000B                     	;# 
   305  000C                     	;# 
   306  000D                     	;# 
   307  000E                     	;# 
   308  000F                     	;# 
   309  0010                     	;# 
   310  0011                     	;# 
   311  0012                     	;# 
   312  0013                     	;# 
   313  0014                     	;# 
   314  0015                     	;# 
   315  0016                     	;# 
   316  0016                     	;# 
   317  0017                     	;# 
   318  0018                     	;# 
   319  0019                     	;# 
   320  001A                     	;# 
   321  001B                     	;# 
   322  001C                     	;# 
   323  001E                     	;# 
   324  001F                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0094                     	;# 
   334  0095                     	;# 
   335  0096                     	;# 
   336  0097                     	;# 
   337  0098                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009B                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  010C                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  010F                     	;# 
   349  0110                     	;# 
   350  0111                     	;# 
   351  0112                     	;# 
   352  0113                     	;# 
   353  0114                     	;# 
   354  0115                     	;# 
   355  0116                     	;# 
   356  0117                     	;# 
   357  0118                     	;# 
   358  0119                     	;# 
   359  011A                     	;# 
   360  011B                     	;# 
   361  011D                     	;# 
   362  011E                     	;# 
   363  011F                     	;# 
   364  018C                     	;# 
   365  0190                     	;# 
   366  0191                     	;# 
   367  0191                     	;# 
   368  0192                     	;# 
   369  0193                     	;# 
   370  0193                     	;# 
   371  0193                     	;# 
   372  0194                     	;# 
   373  0195                     	;# 
   374  0196                     	;# 
   375  0199                     	;# 
   376  0199                     	;# 
   377  019A                     	;# 
   378  019A                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019B                     	;# 
   383  019C                     	;# 
   384  019C                     	;# 
   385  019D                     	;# 
   386  019D                     	;# 
   387  019E                     	;# 
   388  019E                     	;# 
   389  019F                     	;# 
   390  019F                     	;# 
   391  020D                     	;# 
   392  0211                     	;# 
   393  0211                     	;# 
   394  0212                     	;# 
   395  0212                     	;# 
   396  0213                     	;# 
   397  0213                     	;# 
   398  0214                     	;# 
   399  0214                     	;# 
   400  0215                     	;# 
   401  0215                     	;# 
   402  0215                     	;# 
   403  0216                     	;# 
   404  0216                     	;# 
   405  0217                     	;# 
   406  0217                     	;# 
   407  0219                     	;# 
   408  021A                     	;# 
   409  021B                     	;# 
   410  021C                     	;# 
   411  021D                     	;# 
   412  021E                     	;# 
   413  021F                     	;# 
   414  028C                     	;# 
   415  028D                     	;# 
   416  0291                     	;# 
   417  0291                     	;# 
   418  0292                     	;# 
   419  0293                     	;# 
   420  0294                     	;# 
   421  0295                     	;# 
   422  0295                     	;# 
   423  0296                     	;# 
   424  0298                     	;# 
   425  0298                     	;# 
   426  0299                     	;# 
   427  029A                     	;# 
   428  029B                     	;# 
   429  029C                     	;# 
   430  029C                     	;# 
   431  029D                     	;# 
   432  029E                     	;# 
   433  029F                     	;# 
   434  030C                     	;# 
   435  030D                     	;# 
   436  0311                     	;# 
   437  0311                     	;# 
   438  0312                     	;# 
   439  0313                     	;# 
   440  0314                     	;# 
   441  0315                     	;# 
   442  0315                     	;# 
   443  0316                     	;# 
   444  0318                     	;# 
   445  0318                     	;# 
   446  0319                     	;# 
   447  031A                     	;# 
   448  031C                     	;# 
   449  031C                     	;# 
   450  031D                     	;# 
   451  031E                     	;# 
   452  038C                     	;# 
   453  038D                     	;# 
   454  0394                     	;# 
   455  0395                     	;# 
   456  0396                     	;# 
   457  040C                     	;# 
   458  040D                     	;# 
   459  0415                     	;# 
   460  0416                     	;# 
   461  0417                     	;# 
   462  041C                     	;# 
   463  041D                     	;# 
   464  041E                     	;# 
   465  048D                     	;# 
   466  0491                     	;# 
   467  0492                     	;# 
   468  0493                     	;# 
   469  0493                     	;# 
   470  0494                     	;# 
   471  0495                     	;# 
   472  0496                     	;# 
   473  0497                     	;# 
   474  0791                     	;# 
   475  0792                     	;# 
   476  0793                     	;# 
   477  0794                     	;# 
   478  0795                     	;# 
   479  0798                     	;# 
   480  0799                     	;# 
   481  079A                     	;# 
   482  079B                     	;# 
   483  079C                     	;# 
   484  079D                     	;# 
   485  07A0                     	;# 
   486  07A1                     	;# 
   487  07A2                     	;# 
   488  07A3                     	;# 
   489  07A4                     	;# 
   490  07A5                     	;# 
   491  07A6                     	;# 
   492  07A7                     	;# 
   493  07A8                     	;# 
   494  07A9                     	;# 
   495  07AA                     	;# 
   496  07AB                     	;# 
   497  07AC                     	;# 
   498  07AD                     	;# 
   499  07AE                     	;# 
   500  07AF                     	;# 
   501  07B0                     	;# 
   502  07B1                     	;# 
   503  07B2                     	;# 
   504  07B3                     	;# 
   505  07B4                     	;# 
   506  07B5                     	;# 
   507  07B6                     	;# 
   508  07B7                     	;# 
   509  0FE4                     	;# 
   510  0FE5                     	;# 
   511  0FE6                     	;# 
   512  0FE7                     	;# 
   513  0FE8                     	;# 
   514  0FE9                     	;# 
   515  0FEA                     	;# 
   516  0FEB                     	;# 
   517  0FED                     	;# 
   518  0FEE                     	;# 
   519  0FEF                     	;# 
   520  0000                     	;# 
   521  0001                     	;# 
   522  0002                     	;# 
   523  0003                     	;# 
   524  0004                     	;# 
   525  0005                     	;# 
   526  0006                     	;# 
   527  0007                     	;# 
   528  0008                     	;# 
   529  0009                     	;# 
   530  000A                     	;# 
   531  000B                     	;# 
   532  000C                     	;# 
   533  000D                     	;# 
   534  000E                     	;# 
   535  000F                     	;# 
   536  0010                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0013                     	;# 
   540  0014                     	;# 
   541  0015                     	;# 
   542  0016                     	;# 
   543  0016                     	;# 
   544  0017                     	;# 
   545  0018                     	;# 
   546  0019                     	;# 
   547  001A                     	;# 
   548  001B                     	;# 
   549  001C                     	;# 
   550  001E                     	;# 
   551  001F                     	;# 
   552  008C                     	;# 
   553  008D                     	;# 
   554  008E                     	;# 
   555  008F                     	;# 
   556  0090                     	;# 
   557  0091                     	;# 
   558  0092                     	;# 
   559  0093                     	;# 
   560  0094                     	;# 
   561  0095                     	;# 
   562  0096                     	;# 
   563  0097                     	;# 
   564  0098                     	;# 
   565  0099                     	;# 
   566  009A                     	;# 
   567  009B                     	;# 
   568  009B                     	;# 
   569  009C                     	;# 
   570  009D                     	;# 
   571  009E                     	;# 
   572  010C                     	;# 
   573  010D                     	;# 
   574  010E                     	;# 
   575  010F                     	;# 
   576  0110                     	;# 
   577  0111                     	;# 
   578  0112                     	;# 
   579  0113                     	;# 
   580  0114                     	;# 
   581  0115                     	;# 
   582  0116                     	;# 
   583  0117                     	;# 
   584  0118                     	;# 
   585  0119                     	;# 
   586  011A                     	;# 
   587  011B                     	;# 
   588  011D                     	;# 
   589  011E                     	;# 
   590  011F                     	;# 
   591  018C                     	;# 
   592  0190                     	;# 
   593  0191                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0193                     	;# 
   597  0193                     	;# 
   598  0193                     	;# 
   599  0194                     	;# 
   600  0195                     	;# 
   601  0196                     	;# 
   602  0199                     	;# 
   603  0199                     	;# 
   604  019A                     	;# 
   605  019A                     	;# 
   606  019B                     	;# 
   607  019B                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019C                     	;# 
   611  019C                     	;# 
   612  019D                     	;# 
   613  019D                     	;# 
   614  019E                     	;# 
   615  019E                     	;# 
   616  019F                     	;# 
   617  019F                     	;# 
   618  020D                     	;# 
   619  0211                     	;# 
   620  0211                     	;# 
   621  0212                     	;# 
   622  0212                     	;# 
   623  0213                     	;# 
   624  0213                     	;# 
   625  0214                     	;# 
   626  0214                     	;# 
   627  0215                     	;# 
   628  0215                     	;# 
   629  0215                     	;# 
   630  0216                     	;# 
   631  0216                     	;# 
   632  0217                     	;# 
   633  0217                     	;# 
   634  0219                     	;# 
   635  021A                     	;# 
   636  021B                     	;# 
   637  021C                     	;# 
   638  021D                     	;# 
   639  021E                     	;# 
   640  021F                     	;# 
   641  028C                     	;# 
   642  028D                     	;# 
   643  0291                     	;# 
   644  0291                     	;# 
   645  0292                     	;# 
   646  0293                     	;# 
   647  0294                     	;# 
   648  0295                     	;# 
   649  0295                     	;# 
   650  0296                     	;# 
   651  0298                     	;# 
   652  0298                     	;# 
   653  0299                     	;# 
   654  029A                     	;# 
   655  029B                     	;# 
   656  029C                     	;# 
   657  029C                     	;# 
   658  029D                     	;# 
   659  029E                     	;# 
   660  029F                     	;# 
   661  030C                     	;# 
   662  030D                     	;# 
   663  0311                     	;# 
   664  0311                     	;# 
   665  0312                     	;# 
   666  0313                     	;# 
   667  0314                     	;# 
   668  0315                     	;# 
   669  0315                     	;# 
   670  0316                     	;# 
   671  0318                     	;# 
   672  0318                     	;# 
   673  0319                     	;# 
   674  031A                     	;# 
   675  031C                     	;# 
   676  031C                     	;# 
   677  031D                     	;# 
   678  031E                     	;# 
   679  038C                     	;# 
   680  038D                     	;# 
   681  0394                     	;# 
   682  0395                     	;# 
   683  0396                     	;# 
   684  040C                     	;# 
   685  040D                     	;# 
   686  0415                     	;# 
   687  0416                     	;# 
   688  0417                     	;# 
   689  041C                     	;# 
   690  041D                     	;# 
   691  041E                     	;# 
   692  048D                     	;# 
   693  0491                     	;# 
   694  0492                     	;# 
   695  0493                     	;# 
   696  0493                     	;# 
   697  0494                     	;# 
   698  0495                     	;# 
   699  0496                     	;# 
   700  0497                     	;# 
   701  0791                     	;# 
   702  0792                     	;# 
   703  0793                     	;# 
   704  0794                     	;# 
   705  0795                     	;# 
   706  0798                     	;# 
   707  0799                     	;# 
   708  079A                     	;# 
   709  079B                     	;# 
   710  079C                     	;# 
   711  079D                     	;# 
   712  07A0                     	;# 
   713  07A1                     	;# 
   714  07A2                     	;# 
   715  07A3                     	;# 
   716  07A4                     	;# 
   717  07A5                     	;# 
   718  07A6                     	;# 
   719  07A7                     	;# 
   720  07A8                     	;# 
   721  07A9                     	;# 
   722  07AA                     	;# 
   723  07AB                     	;# 
   724  07AC                     	;# 
   725  07AD                     	;# 
   726  07AE                     	;# 
   727  07AF                     	;# 
   728  07B0                     	;# 
   729  07B1                     	;# 
   730  07B2                     	;# 
   731  07B3                     	;# 
   732  07B4                     	;# 
   733  07B5                     	;# 
   734  07B6                     	;# 
   735  07B7                     	;# 
   736  0FE4                     	;# 
   737  0FE5                     	;# 
   738  0FE6                     	;# 
   739  0FE7                     	;# 
   740  0FE8                     	;# 
   741  0FE9                     	;# 
   742  0FEA                     	;# 
   743  0FEB                     	;# 
   744  0FED                     	;# 
   745  0FEE                     	;# 
   746  0FEF                     	;# 
   747  0000                     	;# 
   748  0001                     	;# 
   749  0002                     	;# 
   750  0003                     	;# 
   751  0004                     	;# 
   752  0005                     	;# 
   753  0006                     	;# 
   754  0007                     	;# 
   755  0008                     	;# 
   756  0009                     	;# 
   757  000A                     	;# 
   758  000B                     	;# 
   759  000C                     	;# 
   760  000D                     	;# 
   761  000E                     	;# 
   762  000F                     	;# 
   763  0010                     	;# 
   764  0011                     	;# 
   765  0012                     	;# 
   766  0013                     	;# 
   767  0014                     	;# 
   768  0015                     	;# 
   769  0016                     	;# 
   770  0016                     	;# 
   771  0017                     	;# 
   772  0018                     	;# 
   773  0019                     	;# 
   774  001A                     	;# 
   775  001B                     	;# 
   776  001C                     	;# 
   777  001E                     	;# 
   778  001F                     	;# 
   779  008C                     	;# 
   780  008D                     	;# 
   781  008E                     	;# 
   782  008F                     	;# 
   783  0090                     	;# 
   784  0091                     	;# 
   785  0092                     	;# 
   786  0093                     	;# 
   787  0094                     	;# 
   788  0095                     	;# 
   789  0096                     	;# 
   790  0097                     	;# 
   791  0098                     	;# 
   792  0099                     	;# 
   793  009A                     	;# 
   794  009B                     	;# 
   795  009B                     	;# 
   796  009C                     	;# 
   797  009D                     	;# 
   798  009E                     	;# 
   799  010C                     	;# 
   800  010D                     	;# 
   801  010E                     	;# 
   802  010F                     	;# 
   803  0110                     	;# 
   804  0111                     	;# 
   805  0112                     	;# 
   806  0113                     	;# 
   807  0114                     	;# 
   808  0115                     	;# 
   809  0116                     	;# 
   810  0117                     	;# 
   811  0118                     	;# 
   812  0119                     	;# 
   813  011A                     	;# 
   814  011B                     	;# 
   815  011D                     	;# 
   816  011E                     	;# 
   817  011F                     	;# 
   818  018C                     	;# 
   819  0190                     	;# 
   820  0191                     	;# 
   821  0191                     	;# 
   822  0192                     	;# 
   823  0193                     	;# 
   824  0193                     	;# 
   825  0193                     	;# 
   826  0194                     	;# 
   827  0195                     	;# 
   828  0196                     	;# 
   829  0199                     	;# 
   830  0199                     	;# 
   831  019A                     	;# 
   832  019A                     	;# 
   833  019B                     	;# 
   834  019B                     	;# 
   835  019B                     	;# 
   836  019B                     	;# 
   837  019C                     	;# 
   838  019C                     	;# 
   839  019D                     	;# 
   840  019D                     	;# 
   841  019E                     	;# 
   842  019E                     	;# 
   843  019F                     	;# 
   844  019F                     	;# 
   845  020D                     	;# 
   846  0211                     	;# 
   847  0211                     	;# 
   848  0212                     	;# 
   849  0212                     	;# 
   850  0213                     	;# 
   851  0213                     	;# 
   852  0214                     	;# 
   853  0214                     	;# 
   854  0215                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0216                     	;# 
   858  0216                     	;# 
   859  0217                     	;# 
   860  0217                     	;# 
   861  0219                     	;# 
   862  021A                     	;# 
   863  021B                     	;# 
   864  021C                     	;# 
   865  021D                     	;# 
   866  021E                     	;# 
   867  021F                     	;# 
   868  028C                     	;# 
   869  028D                     	;# 
   870  0291                     	;# 
   871  0291                     	;# 
   872  0292                     	;# 
   873  0293                     	;# 
   874  0294                     	;# 
   875  0295                     	;# 
   876  0295                     	;# 
   877  0296                     	;# 
   878  0298                     	;# 
   879  0298                     	;# 
   880  0299                     	;# 
   881  029A                     	;# 
   882  029B                     	;# 
   883  029C                     	;# 
   884  029C                     	;# 
   885  029D                     	;# 
   886  029E                     	;# 
   887  029F                     	;# 
   888  030C                     	;# 
   889  030D                     	;# 
   890  0311                     	;# 
   891  0311                     	;# 
   892  0312                     	;# 
   893  0313                     	;# 
   894  0314                     	;# 
   895  0315                     	;# 
   896  0315                     	;# 
   897  0316                     	;# 
   898  0318                     	;# 
   899  0318                     	;# 
   900  0319                     	;# 
   901  031A                     	;# 
   902  031C                     	;# 
   903  031C                     	;# 
   904  031D                     	;# 
   905  031E                     	;# 
   906  038C                     	;# 
   907  038D                     	;# 
   908  0394                     	;# 
   909  0395                     	;# 
   910  0396                     	;# 
   911  040C                     	;# 
   912  040D                     	;# 
   913  0415                     	;# 
   914  0416                     	;# 
   915  0417                     	;# 
   916  041C                     	;# 
   917  041D                     	;# 
   918  041E                     	;# 
   919  048D                     	;# 
   920  0491                     	;# 
   921  0492                     	;# 
   922  0493                     	;# 
   923  0493                     	;# 
   924  0494                     	;# 
   925  0495                     	;# 
   926  0496                     	;# 
   927  0497                     	;# 
   928  0791                     	;# 
   929  0792                     	;# 
   930  0793                     	;# 
   931  0794                     	;# 
   932  0795                     	;# 
   933  0798                     	;# 
   934  0799                     	;# 
   935  079A                     	;# 
   936  079B                     	;# 
   937  079C                     	;# 
   938  079D                     	;# 
   939  07A0                     	;# 
   940  07A1                     	;# 
   941  07A2                     	;# 
   942  07A3                     	;# 
   943  07A4                     	;# 
   944  07A5                     	;# 
   945  07A6                     	;# 
   946  07A7                     	;# 
   947  07A8                     	;# 
   948  07A9                     	;# 
   949  07AA                     	;# 
   950  07AB                     	;# 
   951  07AC                     	;# 
   952  07AD                     	;# 
   953  07AE                     	;# 
   954  07AF                     	;# 
   955  07B0                     	;# 
   956  07B1                     	;# 
   957  07B2                     	;# 
   958  07B3                     	;# 
   959  07B4                     	;# 
   960  07B5                     	;# 
   961  07B6                     	;# 
   962  07B7                     	;# 
   963  0FE4                     	;# 
   964  0FE5                     	;# 
   965  0FE6                     	;# 
   966  0FE7                     	;# 
   967  0FE8                     	;# 
   968  0FE9                     	;# 
   969  0FEA                     	;# 
   970  0FEB                     	;# 
   971  0FED                     	;# 
   972  0FEE                     	;# 
   973  0FEF                     	;# 
   974  0000                     	;# 
   975  0001                     	;# 
   976  0002                     	;# 
   977  0003                     	;# 
   978  0004                     	;# 
   979  0005                     	;# 
   980  0006                     	;# 
   981  0007                     	;# 
   982  0008                     	;# 
   983  0009                     	;# 
   984  000A                     	;# 
   985  000B                     	;# 
   986  000C                     	;# 
   987  000D                     	;# 
   988  000E                     	;# 
   989  000F                     	;# 
   990  0010                     	;# 
   991  0011                     	;# 
   992  0012                     	;# 
   993  0013                     	;# 
   994  0014                     	;# 
   995  0015                     	;# 
   996  0016                     	;# 
   997  0016                     	;# 
   998  0017                     	;# 
   999  0018                     	;# 
  1000  0019                     	;# 
  1001  001A                     	;# 
  1002  001B                     	;# 
  1003  001C                     	;# 
  1004  001E                     	;# 
  1005  001F                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  008F                     	;# 
  1010  0090                     	;# 
  1011  0091                     	;# 
  1012  0092                     	;# 
  1013  0093                     	;# 
  1014  0094                     	;# 
  1015  0095                     	;# 
  1016  0096                     	;# 
  1017  0097                     	;# 
  1018  0098                     	;# 
  1019  0099                     	;# 
  1020  009A                     	;# 
  1021  009B                     	;# 
  1022  009B                     	;# 
  1023  009C                     	;# 
  1024  009D                     	;# 
  1025  009E                     	;# 
  1026  010C                     	;# 
  1027  010D                     	;# 
  1028  010E                     	;# 
  1029  010F                     	;# 
  1030  0110                     	;# 
  1031  0111                     	;# 
  1032  0112                     	;# 
  1033  0113                     	;# 
  1034  0114                     	;# 
  1035  0115                     	;# 
  1036  0116                     	;# 
  1037  0117                     	;# 
  1038  0118                     	;# 
  1039  0119                     	;# 
  1040  011A                     	;# 
  1041  011B                     	;# 
  1042  011D                     	;# 
  1043  011E                     	;# 
  1044  011F                     	;# 
  1045  018C                     	;# 
  1046  0190                     	;# 
  1047  0191                     	;# 
  1048  0191                     	;# 
  1049  0192                     	;# 
  1050  0193                     	;# 
  1051  0193                     	;# 
  1052  0193                     	;# 
  1053  0194                     	;# 
  1054  0195                     	;# 
  1055  0196                     	;# 
  1056  0199                     	;# 
  1057  0199                     	;# 
  1058  019A                     	;# 
  1059  019A                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019D                     	;# 
  1067  019D                     	;# 
  1068  019E                     	;# 
  1069  019E                     	;# 
  1070  019F                     	;# 
  1071  019F                     	;# 
  1072  020D                     	;# 
  1073  0211                     	;# 
  1074  0211                     	;# 
  1075  0212                     	;# 
  1076  0212                     	;# 
  1077  0213                     	;# 
  1078  0213                     	;# 
  1079  0214                     	;# 
  1080  0214                     	;# 
  1081  0215                     	;# 
  1082  0215                     	;# 
  1083  0215                     	;# 
  1084  0216                     	;# 
  1085  0216                     	;# 
  1086  0217                     	;# 
  1087  0217                     	;# 
  1088  0219                     	;# 
  1089  021A                     	;# 
  1090  021B                     	;# 
  1091  021C                     	;# 
  1092  021D                     	;# 
  1093  021E                     	;# 
  1094  021F                     	;# 
  1095  028C                     	;# 
  1096  028D                     	;# 
  1097  0291                     	;# 
  1098  0291                     	;# 
  1099  0292                     	;# 
  1100  0293                     	;# 
  1101  0294                     	;# 
  1102  0295                     	;# 
  1103  0295                     	;# 
  1104  0296                     	;# 
  1105  0298                     	;# 
  1106  0298                     	;# 
  1107  0299                     	;# 
  1108  029A                     	;# 
  1109  029B                     	;# 
  1110  029C                     	;# 
  1111  029C                     	;# 
  1112  029D                     	;# 
  1113  029E                     	;# 
  1114  029F                     	;# 
  1115  030C                     	;# 
  1116  030D                     	;# 
  1117  0311                     	;# 
  1118  0311                     	;# 
  1119  0312                     	;# 
  1120  0313                     	;# 
  1121  0314                     	;# 
  1122  0315                     	;# 
  1123  0315                     	;# 
  1124  0316                     	;# 
  1125  0318                     	;# 
  1126  0318                     	;# 
  1127  0319                     	;# 
  1128  031A                     	;# 
  1129  031C                     	;# 
  1130  031C                     	;# 
  1131  031D                     	;# 
  1132  031E                     	;# 
  1133  038C                     	;# 
  1134  038D                     	;# 
  1135  0394                     	;# 
  1136  0395                     	;# 
  1137  0396                     	;# 
  1138  040C                     	;# 
  1139  040D                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  041C                     	;# 
  1144  041D                     	;# 
  1145  041E                     	;# 
  1146  048D                     	;# 
  1147  0491                     	;# 
  1148  0492                     	;# 
  1149  0493                     	;# 
  1150  0493                     	;# 
  1151  0494                     	;# 
  1152  0495                     	;# 
  1153  0496                     	;# 
  1154  0497                     	;# 
  1155  0791                     	;# 
  1156  0792                     	;# 
  1157  0793                     	;# 
  1158  0794                     	;# 
  1159  0795                     	;# 
  1160  0798                     	;# 
  1161  0799                     	;# 
  1162  079A                     	;# 
  1163  079B                     	;# 
  1164  079C                     	;# 
  1165  079D                     	;# 
  1166  07A0                     	;# 
  1167  07A1                     	;# 
  1168  07A2                     	;# 
  1169  07A3                     	;# 
  1170  07A4                     	;# 
  1171  07A5                     	;# 
  1172  07A6                     	;# 
  1173  07A7                     	;# 
  1174  07A8                     	;# 
  1175  07A9                     	;# 
  1176  07AA                     	;# 
  1177  07AB                     	;# 
  1178  07AC                     	;# 
  1179  07AD                     	;# 
  1180  07AE                     	;# 
  1181  07AF                     	;# 
  1182  07B0                     	;# 
  1183  07B1                     	;# 
  1184  07B2                     	;# 
  1185  07B3                     	;# 
  1186  07B4                     	;# 
  1187  07B5                     	;# 
  1188  07B6                     	;# 
  1189  07B7                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  000E                     	;# 
  1216  000F                     	;# 
  1217  0010                     	;# 
  1218  0011                     	;# 
  1219  0012                     	;# 
  1220  0013                     	;# 
  1221  0014                     	;# 
  1222  0015                     	;# 
  1223  0016                     	;# 
  1224  0016                     	;# 
  1225  0017                     	;# 
  1226  0018                     	;# 
  1227  0019                     	;# 
  1228  001A                     	;# 
  1229  001B                     	;# 
  1230  001C                     	;# 
  1231  001E                     	;# 
  1232  001F                     	;# 
  1233  008C                     	;# 
  1234  008D                     	;# 
  1235  008E                     	;# 
  1236  008F                     	;# 
  1237  0090                     	;# 
  1238  0091                     	;# 
  1239  0092                     	;# 
  1240  0093                     	;# 
  1241  0094                     	;# 
  1242  0095                     	;# 
  1243  0096                     	;# 
  1244  0097                     	;# 
  1245  0098                     	;# 
  1246  0099                     	;# 
  1247  009A                     	;# 
  1248  009B                     	;# 
  1249  009B                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009E                     	;# 
  1253  010C                     	;# 
  1254  010D                     	;# 
  1255  010E                     	;# 
  1256  010F                     	;# 
  1257  0110                     	;# 
  1258  0111                     	;# 
  1259  0112                     	;# 
  1260  0113                     	;# 
  1261  0114                     	;# 
  1262  0115                     	;# 
  1263  0116                     	;# 
  1264  0117                     	;# 
  1265  0118                     	;# 
  1266  0119                     	;# 
  1267  011A                     	;# 
  1268  011B                     	;# 
  1269  011D                     	;# 
  1270  011E                     	;# 
  1271  011F                     	;# 
  1272  018C                     	;# 
  1273  0190                     	;# 
  1274  0191                     	;# 
  1275  0191                     	;# 
  1276  0192                     	;# 
  1277  0193                     	;# 
  1278  0193                     	;# 
  1279  0193                     	;# 
  1280  0194                     	;# 
  1281  0195                     	;# 
  1282  0196                     	;# 
  1283  0199                     	;# 
  1284  0199                     	;# 
  1285  019A                     	;# 
  1286  019A                     	;# 
  1287  019B                     	;# 
  1288  019B                     	;# 
  1289  019B                     	;# 
  1290  019B                     	;# 
  1291  019C                     	;# 
  1292  019C                     	;# 
  1293  019D                     	;# 
  1294  019D                     	;# 
  1295  019E                     	;# 
  1296  019E                     	;# 
  1297  019F                     	;# 
  1298  019F                     	;# 
  1299  020D                     	;# 
  1300  0211                     	;# 
  1301  0211                     	;# 
  1302  0212                     	;# 
  1303  0212                     	;# 
  1304  0213                     	;# 
  1305  0213                     	;# 
  1306  0214                     	;# 
  1307  0214                     	;# 
  1308  0215                     	;# 
  1309  0215                     	;# 
  1310  0215                     	;# 
  1311  0216                     	;# 
  1312  0216                     	;# 
  1313  0217                     	;# 
  1314  0217                     	;# 
  1315  0219                     	;# 
  1316  021A                     	;# 
  1317  021B                     	;# 
  1318  021C                     	;# 
  1319  021D                     	;# 
  1320  021E                     	;# 
  1321  021F                     	;# 
  1322  028C                     	;# 
  1323  028D                     	;# 
  1324  0291                     	;# 
  1325  0291                     	;# 
  1326  0292                     	;# 
  1327  0293                     	;# 
  1328  0294                     	;# 
  1329  0295                     	;# 
  1330  0295                     	;# 
  1331  0296                     	;# 
  1332  0298                     	;# 
  1333  0298                     	;# 
  1334  0299                     	;# 
  1335  029A                     	;# 
  1336  029B                     	;# 
  1337  029C                     	;# 
  1338  029C                     	;# 
  1339  029D                     	;# 
  1340  029E                     	;# 
  1341  029F                     	;# 
  1342  030C                     	;# 
  1343  030D                     	;# 
  1344  0311                     	;# 
  1345  0311                     	;# 
  1346  0312                     	;# 
  1347  0313                     	;# 
  1348  0314                     	;# 
  1349  0315                     	;# 
  1350  0315                     	;# 
  1351  0316                     	;# 
  1352  0318                     	;# 
  1353  0318                     	;# 
  1354  0319                     	;# 
  1355  031A                     	;# 
  1356  031C                     	;# 
  1357  031C                     	;# 
  1358  031D                     	;# 
  1359  031E                     	;# 
  1360  038C                     	;# 
  1361  038D                     	;# 
  1362  0394                     	;# 
  1363  0395                     	;# 
  1364  0396                     	;# 
  1365  040C                     	;# 
  1366  040D                     	;# 
  1367  0415                     	;# 
  1368  0416                     	;# 
  1369  0417                     	;# 
  1370  041C                     	;# 
  1371  041D                     	;# 
  1372  041E                     	;# 
  1373  048D                     	;# 
  1374  0491                     	;# 
  1375  0492                     	;# 
  1376  0493                     	;# 
  1377  0493                     	;# 
  1378  0494                     	;# 
  1379  0495                     	;# 
  1380  0496                     	;# 
  1381  0497                     	;# 
  1382  0791                     	;# 
  1383  0792                     	;# 
  1384  0793                     	;# 
  1385  0794                     	;# 
  1386  0795                     	;# 
  1387  0798                     	;# 
  1388  0799                     	;# 
  1389  079A                     	;# 
  1390  079B                     	;# 
  1391  079C                     	;# 
  1392  079D                     	;# 
  1393  07A0                     	;# 
  1394  07A1                     	;# 
  1395  07A2                     	;# 
  1396  07A3                     	;# 
  1397  07A4                     	;# 
  1398  07A5                     	;# 
  1399  07A6                     	;# 
  1400  07A7                     	;# 
  1401  07A8                     	;# 
  1402  07A9                     	;# 
  1403  07AA                     	;# 
  1404  07AB                     	;# 
  1405  07AC                     	;# 
  1406  07AD                     	;# 
  1407  07AE                     	;# 
  1408  07AF                     	;# 
  1409  07B0                     	;# 
  1410  07B1                     	;# 
  1411  07B2                     	;# 
  1412  07B3                     	;# 
  1413  07B4                     	;# 
  1414  07B5                     	;# 
  1415  07B6                     	;# 
  1416  07B7                     	;# 
  1417  0FE4                     	;# 
  1418  0FE5                     	;# 
  1419  0FE6                     	;# 
  1420  0FE7                     	;# 
  1421  0FE8                     	;# 
  1422  0FE9                     	;# 
  1423  0FEA                     	;# 
  1424  0FEB                     	;# 
  1425  0FED                     	;# 
  1426  0FEE                     	;# 
  1427  0FEF                     	;# 
  1428  0000                     	;# 
  1429  0001                     	;# 
  1430  0002                     	;# 
  1431  0003                     	;# 
  1432  0004                     	;# 
  1433  0005                     	;# 
  1434  0006                     	;# 
  1435  0007                     	;# 
  1436  0008                     	;# 
  1437  0009                     	;# 
  1438  000A                     	;# 
  1439  000B                     	;# 
  1440  000C                     	;# 
  1441  000D                     	;# 
  1442  000E                     	;# 
  1443  000F                     	;# 
  1444  0010                     	;# 
  1445  0011                     	;# 
  1446  0012                     	;# 
  1447  0013                     	;# 
  1448  0014                     	;# 
  1449  0015                     	;# 
  1450  0016                     	;# 
  1451  0016                     	;# 
  1452  0017                     	;# 
  1453  0018                     	;# 
  1454  0019                     	;# 
  1455  001A                     	;# 
  1456  001B                     	;# 
  1457  001C                     	;# 
  1458  001E                     	;# 
  1459  001F                     	;# 
  1460  008C                     	;# 
  1461  008D                     	;# 
  1462  008E                     	;# 
  1463  008F                     	;# 
  1464  0090                     	;# 
  1465  0091                     	;# 
  1466  0092                     	;# 
  1467  0093                     	;# 
  1468  0094                     	;# 
  1469  0095                     	;# 
  1470  0096                     	;# 
  1471  0097                     	;# 
  1472  0098                     	;# 
  1473  0099                     	;# 
  1474  009A                     	;# 
  1475  009B                     	;# 
  1476  009B                     	;# 
  1477  009C                     	;# 
  1478  009D                     	;# 
  1479  009E                     	;# 
  1480  010C                     	;# 
  1481  010D                     	;# 
  1482  010E                     	;# 
  1483  010F                     	;# 
  1484  0110                     	;# 
  1485  0111                     	;# 
  1486  0112                     	;# 
  1487  0113                     	;# 
  1488  0114                     	;# 
  1489  0115                     	;# 
  1490  0116                     	;# 
  1491  0117                     	;# 
  1492  0118                     	;# 
  1493  0119                     	;# 
  1494  011A                     	;# 
  1495  011B                     	;# 
  1496  011D                     	;# 
  1497  011E                     	;# 
  1498  011F                     	;# 
  1499  018C                     	;# 
  1500  0190                     	;# 
  1501  0191                     	;# 
  1502  0191                     	;# 
  1503  0192                     	;# 
  1504  0193                     	;# 
  1505  0193                     	;# 
  1506  0193                     	;# 
  1507  0194                     	;# 
  1508  0195                     	;# 
  1509  0196                     	;# 
  1510  0199                     	;# 
  1511  0199                     	;# 
  1512  019A                     	;# 
  1513  019A                     	;# 
  1514  019B                     	;# 
  1515  019B                     	;# 
  1516  019B                     	;# 
  1517  019B                     	;# 
  1518  019C                     	;# 
  1519  019C                     	;# 
  1520  019D                     	;# 
  1521  019D                     	;# 
  1522  019E                     	;# 
  1523  019E                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  020D                     	;# 
  1527  0211                     	;# 
  1528  0211                     	;# 
  1529  0212                     	;# 
  1530  0212                     	;# 
  1531  0213                     	;# 
  1532  0213                     	;# 
  1533  0214                     	;# 
  1534  0214                     	;# 
  1535  0215                     	;# 
  1536  0215                     	;# 
  1537  0215                     	;# 
  1538  0216                     	;# 
  1539  0216                     	;# 
  1540  0217                     	;# 
  1541  0217                     	;# 
  1542  0219                     	;# 
  1543  021A                     	;# 
  1544  021B                     	;# 
  1545  021C                     	;# 
  1546  021D                     	;# 
  1547  021E                     	;# 
  1548  021F                     	;# 
  1549  028C                     	;# 
  1550  028D                     	;# 
  1551  0291                     	;# 
  1552  0291                     	;# 
  1553  0292                     	;# 
  1554  0293                     	;# 
  1555  0294                     	;# 
  1556  0295                     	;# 
  1557  0295                     	;# 
  1558  0296                     	;# 
  1559  0298                     	;# 
  1560  0298                     	;# 
  1561  0299                     	;# 
  1562  029A                     	;# 
  1563  029B                     	;# 
  1564  029C                     	;# 
  1565  029C                     	;# 
  1566  029D                     	;# 
  1567  029E                     	;# 
  1568  029F                     	;# 
  1569  030C                     	;# 
  1570  030D                     	;# 
  1571  0311                     	;# 
  1572  0311                     	;# 
  1573  0312                     	;# 
  1574  0313                     	;# 
  1575  0314                     	;# 
  1576  0315                     	;# 
  1577  0315                     	;# 
  1578  0316                     	;# 
  1579  0318                     	;# 
  1580  0318                     	;# 
  1581  0319                     	;# 
  1582  031A                     	;# 
  1583  031C                     	;# 
  1584  031C                     	;# 
  1585  031D                     	;# 
  1586  031E                     	;# 
  1587  038C                     	;# 
  1588  038D                     	;# 
  1589  0394                     	;# 
  1590  0395                     	;# 
  1591  0396                     	;# 
  1592  040C                     	;# 
  1593  040D                     	;# 
  1594  0415                     	;# 
  1595  0416                     	;# 
  1596  0417                     	;# 
  1597  041C                     	;# 
  1598  041D                     	;# 
  1599  041E                     	;# 
  1600  048D                     	;# 
  1601  0491                     	;# 
  1602  0492                     	;# 
  1603  0493                     	;# 
  1604  0493                     	;# 
  1605  0494                     	;# 
  1606  0495                     	;# 
  1607  0496                     	;# 
  1608  0497                     	;# 
  1609  0791                     	;# 
  1610  0792                     	;# 
  1611  0793                     	;# 
  1612  0794                     	;# 
  1613  0795                     	;# 
  1614  0798                     	;# 
  1615  0799                     	;# 
  1616  079A                     	;# 
  1617  079B                     	;# 
  1618  079C                     	;# 
  1619  079D                     	;# 
  1620  07A0                     	;# 
  1621  07A1                     	;# 
  1622  07A2                     	;# 
  1623  07A3                     	;# 
  1624  07A4                     	;# 
  1625  07A5                     	;# 
  1626  07A6                     	;# 
  1627  07A7                     	;# 
  1628  07A8                     	;# 
  1629  07A9                     	;# 
  1630  07AA                     	;# 
  1631  07AB                     	;# 
  1632  07AC                     	;# 
  1633  07AD                     	;# 
  1634  07AE                     	;# 
  1635  07AF                     	;# 
  1636  07B0                     	;# 
  1637  07B1                     	;# 
  1638  07B2                     	;# 
  1639  07B3                     	;# 
  1640  07B4                     	;# 
  1641  07B5                     	;# 
  1642  07B6                     	;# 
  1643  07B7                     	;# 
  1644  0FE4                     	;# 
  1645  0FE5                     	;# 
  1646  0FE6                     	;# 
  1647  0FE7                     	;# 
  1648  0FE8                     	;# 
  1649  0FE9                     	;# 
  1650  0FEA                     	;# 
  1651  0FEB                     	;# 
  1652  0FED                     	;# 
  1653  0FEE                     	;# 
  1654  0FEF                     	;# 
  1655  0000                     	;# 
  1656  0001                     	;# 
  1657  0002                     	;# 
  1658  0003                     	;# 
  1659  0004                     	;# 
  1660  0005                     	;# 
  1661  0006                     	;# 
  1662  0007                     	;# 
  1663  0008                     	;# 
  1664  0009                     	;# 
  1665  000A                     	;# 
  1666  000B                     	;# 
  1667  000C                     	;# 
  1668  000D                     	;# 
  1669  000E                     	;# 
  1670  000F                     	;# 
  1671  0010                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0014                     	;# 
  1676  0015                     	;# 
  1677  0016                     	;# 
  1678  0016                     	;# 
  1679  0017                     	;# 
  1680  0018                     	;# 
  1681  0019                     	;# 
  1682  001A                     	;# 
  1683  001B                     	;# 
  1684  001C                     	;# 
  1685  001E                     	;# 
  1686  001F                     	;# 
  1687  008C                     	;# 
  1688  008D                     	;# 
  1689  008E                     	;# 
  1690  008F                     	;# 
  1691  0090                     	;# 
  1692  0091                     	;# 
  1693  0092                     	;# 
  1694  0093                     	;# 
  1695  0094                     	;# 
  1696  0095                     	;# 
  1697  0096                     	;# 
  1698  0097                     	;# 
  1699  0098                     	;# 
  1700  0099                     	;# 
  1701  009A                     	;# 
  1702  009B                     	;# 
  1703  009B                     	;# 
  1704  009C                     	;# 
  1705  009D                     	;# 
  1706  009E                     	;# 
  1707  010C                     	;# 
  1708  010D                     	;# 
  1709  010E                     	;# 
  1710  010F                     	;# 
  1711  0110                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0113                     	;# 
  1715  0114                     	;# 
  1716  0115                     	;# 
  1717  0116                     	;# 
  1718  0117                     	;# 
  1719  0118                     	;# 
  1720  0119                     	;# 
  1721  011A                     	;# 
  1722  011B                     	;# 
  1723  011D                     	;# 
  1724  011E                     	;# 
  1725  011F                     	;# 
  1726  018C                     	;# 
  1727  0190                     	;# 
  1728  0191                     	;# 
  1729  0191                     	;# 
  1730  0192                     	;# 
  1731  0193                     	;# 
  1732  0193                     	;# 
  1733  0193                     	;# 
  1734  0194                     	;# 
  1735  0195                     	;# 
  1736  0196                     	;# 
  1737  0199                     	;# 
  1738  0199                     	;# 
  1739  019A                     	;# 
  1740  019A                     	;# 
  1741  019B                     	;# 
  1742  019B                     	;# 
  1743  019B                     	;# 
  1744  019B                     	;# 
  1745  019C                     	;# 
  1746  019C                     	;# 
  1747  019D                     	;# 
  1748  019D                     	;# 
  1749  019E                     	;# 
  1750  019E                     	;# 
  1751  019F                     	;# 
  1752  019F                     	;# 
  1753  020D                     	;# 
  1754  0211                     	;# 
  1755  0211                     	;# 
  1756  0212                     	;# 
  1757  0212                     	;# 
  1758  0213                     	;# 
  1759  0213                     	;# 
  1760  0214                     	;# 
  1761  0214                     	;# 
  1762  0215                     	;# 
  1763  0215                     	;# 
  1764  0215                     	;# 
  1765  0216                     	;# 
  1766  0216                     	;# 
  1767  0217                     	;# 
  1768  0217                     	;# 
  1769  0219                     	;# 
  1770  021A                     	;# 
  1771  021B                     	;# 
  1772  021C                     	;# 
  1773  021D                     	;# 
  1774  021E                     	;# 
  1775  021F                     	;# 
  1776  028C                     	;# 
  1777  028D                     	;# 
  1778  0291                     	;# 
  1779  0291                     	;# 
  1780  0292                     	;# 
  1781  0293                     	;# 
  1782  0294                     	;# 
  1783  0295                     	;# 
  1784  0295                     	;# 
  1785  0296                     	;# 
  1786  0298                     	;# 
  1787  0298                     	;# 
  1788  0299                     	;# 
  1789  029A                     	;# 
  1790  029B                     	;# 
  1791  029C                     	;# 
  1792  029C                     	;# 
  1793  029D                     	;# 
  1794  029E                     	;# 
  1795  029F                     	;# 
  1796  030C                     	;# 
  1797  030D                     	;# 
  1798  0311                     	;# 
  1799  0311                     	;# 
  1800  0312                     	;# 
  1801  0313                     	;# 
  1802  0314                     	;# 
  1803  0315                     	;# 
  1804  0315                     	;# 
  1805  0316                     	;# 
  1806  0318                     	;# 
  1807  0318                     	;# 
  1808  0319                     	;# 
  1809  031A                     	;# 
  1810  031C                     	;# 
  1811  031C                     	;# 
  1812  031D                     	;# 
  1813  031E                     	;# 
  1814  038C                     	;# 
  1815  038D                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  040C                     	;# 
  1820  040D                     	;# 
  1821  0415                     	;# 
  1822  0416                     	;# 
  1823  0417                     	;# 
  1824  041C                     	;# 
  1825  041D                     	;# 
  1826  041E                     	;# 
  1827  048D                     	;# 
  1828  0491                     	;# 
  1829  0492                     	;# 
  1830  0493                     	;# 
  1831  0493                     	;# 
  1832  0494                     	;# 
  1833  0495                     	;# 
  1834  0496                     	;# 
  1835  0497                     	;# 
  1836  0791                     	;# 
  1837  0792                     	;# 
  1838  0793                     	;# 
  1839  0794                     	;# 
  1840  0795                     	;# 
  1841  0798                     	;# 
  1842  0799                     	;# 
  1843  079A                     	;# 
  1844  079B                     	;# 
  1845  079C                     	;# 
  1846  079D                     	;# 
  1847  07A0                     	;# 
  1848  07A1                     	;# 
  1849  07A2                     	;# 
  1850  07A3                     	;# 
  1851  07A4                     	;# 
  1852  07A5                     	;# 
  1853  07A6                     	;# 
  1854  07A7                     	;# 
  1855  07A8                     	;# 
  1856  07A9                     	;# 
  1857  07AA                     	;# 
  1858  07AB                     	;# 
  1859  07AC                     	;# 
  1860  07AD                     	;# 
  1861  07AE                     	;# 
  1862  07AF                     	;# 
  1863  07B0                     	;# 
  1864  07B1                     	;# 
  1865  07B2                     	;# 
  1866  07B3                     	;# 
  1867  07B4                     	;# 
  1868  07B5                     	;# 
  1869  07B6                     	;# 
  1870  07B7                     	;# 
  1871  0FE4                     	;# 
  1872  0FE5                     	;# 
  1873  0FE6                     	;# 
  1874  0FE7                     	;# 
  1875  0FE8                     	;# 
  1876  0FE9                     	;# 
  1877  0FEA                     	;# 
  1878  0FEB                     	;# 
  1879  0FED                     	;# 
  1880  0FEE                     	;# 
  1881  0FEF                     	;# 
  1882  0000                     	;# 
  1883  0001                     	;# 
  1884  0002                     	;# 
  1885  0003                     	;# 
  1886  0004                     	;# 
  1887  0005                     	;# 
  1888  0006                     	;# 
  1889  0007                     	;# 
  1890  0008                     	;# 
  1891  0009                     	;# 
  1892  000A                     	;# 
  1893  000B                     	;# 
  1894  000C                     	;# 
  1895  000D                     	;# 
  1896  000E                     	;# 
  1897  000F                     	;# 
  1898  0010                     	;# 
  1899  0011                     	;# 
  1900  0012                     	;# 
  1901  0013                     	;# 
  1902  0014                     	;# 
  1903  0015                     	;# 
  1904  0016                     	;# 
  1905  0016                     	;# 
  1906  0017                     	;# 
  1907  0018                     	;# 
  1908  0019                     	;# 
  1909  001A                     	;# 
  1910  001B                     	;# 
  1911  001C                     	;# 
  1912  001E                     	;# 
  1913  001F                     	;# 
  1914  008C                     	;# 
  1915  008D                     	;# 
  1916  008E                     	;# 
  1917  008F                     	;# 
  1918  0090                     	;# 
  1919  0091                     	;# 
  1920  0092                     	;# 
  1921  0093                     	;# 
  1922  0094                     	;# 
  1923  0095                     	;# 
  1924  0096                     	;# 
  1925  0097                     	;# 
  1926  0098                     	;# 
  1927  0099                     	;# 
  1928  009A                     	;# 
  1929  009B                     	;# 
  1930  009B                     	;# 
  1931  009C                     	;# 
  1932  009D                     	;# 
  1933  009E                     	;# 
  1934  010C                     	;# 
  1935  010D                     	;# 
  1936  010E                     	;# 
  1937  010F                     	;# 
  1938  0110                     	;# 
  1939  0111                     	;# 
  1940  0112                     	;# 
  1941  0113                     	;# 
  1942  0114                     	;# 
  1943  0115                     	;# 
  1944  0116                     	;# 
  1945  0117                     	;# 
  1946  0118                     	;# 
  1947  0119                     	;# 
  1948  011A                     	;# 
  1949  011B                     	;# 
  1950  011D                     	;# 
  1951  011E                     	;# 
  1952  011F                     	;# 
  1953  018C                     	;# 
  1954  0190                     	;# 
  1955  0191                     	;# 
  1956  0191                     	;# 
  1957  0192                     	;# 
  1958  0193                     	;# 
  1959  0193                     	;# 
  1960  0193                     	;# 
  1961  0194                     	;# 
  1962  0195                     	;# 
  1963  0196                     	;# 
  1964  0199                     	;# 
  1965  0199                     	;# 
  1966  019A                     	;# 
  1967  019A                     	;# 
  1968  019B                     	;# 
  1969  019B                     	;# 
  1970  019B                     	;# 
  1971  019B                     	;# 
  1972  019C                     	;# 
  1973  019C                     	;# 
  1974  019D                     	;# 
  1975  019D                     	;# 
  1976  019E                     	;# 
  1977  019E                     	;# 
  1978  019F                     	;# 
  1979  019F                     	;# 
  1980  020D                     	;# 
  1981  0211                     	;# 
  1982  0211                     	;# 
  1983  0212                     	;# 
  1984  0212                     	;# 
  1985  0213                     	;# 
  1986  0213                     	;# 
  1987  0214                     	;# 
  1988  0214                     	;# 
  1989  0215                     	;# 
  1990  0215                     	;# 
  1991  0215                     	;# 
  1992  0216                     	;# 
  1993  0216                     	;# 
  1994  0217                     	;# 
  1995  0217                     	;# 
  1996  0219                     	;# 
  1997  021A                     	;# 
  1998  021B                     	;# 
  1999  021C                     	;# 
  2000  021D                     	;# 
  2001  021E                     	;# 
  2002  021F                     	;# 
  2003  028C                     	;# 
  2004  028D                     	;# 
  2005  0291                     	;# 
  2006  0291                     	;# 
  2007  0292                     	;# 
  2008  0293                     	;# 
  2009  0294                     	;# 
  2010  0295                     	;# 
  2011  0295                     	;# 
  2012  0296                     	;# 
  2013  0298                     	;# 
  2014  0298                     	;# 
  2015  0299                     	;# 
  2016  029A                     	;# 
  2017  029B                     	;# 
  2018  029C                     	;# 
  2019  029C                     	;# 
  2020  029D                     	;# 
  2021  029E                     	;# 
  2022  029F                     	;# 
  2023  030C                     	;# 
  2024  030D                     	;# 
  2025  0311                     	;# 
  2026  0311                     	;# 
  2027  0312                     	;# 
  2028  0313                     	;# 
  2029  0314                     	;# 
  2030  0315                     	;# 
  2031  0315                     	;# 
  2032  0316                     	;# 
  2033  0318                     	;# 
  2034  0318                     	;# 
  2035  0319                     	;# 
  2036  031A                     	;# 
  2037  031C                     	;# 
  2038  031C                     	;# 
  2039  031D                     	;# 
  2040  031E                     	;# 
  2041  038C                     	;# 
  2042  038D                     	;# 
  2043  0394                     	;# 
  2044  0395                     	;# 
  2045  0396                     	;# 
  2046  040C                     	;# 
  2047  040D                     	;# 
  2048  0415                     	;# 
  2049  0416                     	;# 
  2050  0417                     	;# 
  2051  041C                     	;# 
  2052  041D                     	;# 
  2053  041E                     	;# 
  2054  048D                     	;# 
  2055  0491                     	;# 
  2056  0492                     	;# 
  2057  0493                     	;# 
  2058  0493                     	;# 
  2059  0494                     	;# 
  2060  0495                     	;# 
  2061  0496                     	;# 
  2062  0497                     	;# 
  2063  0791                     	;# 
  2064  0792                     	;# 
  2065  0793                     	;# 
  2066  0794                     	;# 
  2067  0795                     	;# 
  2068  0798                     	;# 
  2069  0799                     	;# 
  2070  079A                     	;# 
  2071  079B                     	;# 
  2072  079C                     	;# 
  2073  079D                     	;# 
  2074  07A0                     	;# 
  2075  07A1                     	;# 
  2076  07A2                     	;# 
  2077  07A3                     	;# 
  2078  07A4                     	;# 
  2079  07A5                     	;# 
  2080  07A6                     	;# 
  2081  07A7                     	;# 
  2082  07A8                     	;# 
  2083  07A9                     	;# 
  2084  07AA                     	;# 
  2085  07AB                     	;# 
  2086  07AC                     	;# 
  2087  07AD                     	;# 
  2088  07AE                     	;# 
  2089  07AF                     	;# 
  2090  07B0                     	;# 
  2091  07B1                     	;# 
  2092  07B2                     	;# 
  2093  07B3                     	;# 
  2094  07B4                     	;# 
  2095  07B5                     	;# 
  2096  07B6                     	;# 
  2097  07B7                     	;# 
  2098  0FE4                     	;# 
  2099  0FE5                     	;# 
  2100  0FE6                     	;# 
  2101  0FE7                     	;# 
  2102  0FE8                     	;# 
  2103  0FE9                     	;# 
  2104  0FEA                     	;# 
  2105  0FEB                     	;# 
  2106  0FED                     	;# 
  2107  0FEE                     	;# 
  2108  0FEF                     	;# 
  2109  0000                     	;# 
  2110  0001                     	;# 
  2111  0002                     	;# 
  2112  0003                     	;# 
  2113  0004                     	;# 
  2114  0005                     	;# 
  2115  0006                     	;# 
  2116  0007                     	;# 
  2117  0008                     	;# 
  2118  0009                     	;# 
  2119  000A                     	;# 
  2120  000B                     	;# 
  2121  000C                     	;# 
  2122  000D                     	;# 
  2123  000E                     	;# 
  2124  000F                     	;# 
  2125  0010                     	;# 
  2126  0011                     	;# 
  2127  0012                     	;# 
  2128  0013                     	;# 
  2129  0014                     	;# 
  2130  0015                     	;# 
  2131  0016                     	;# 
  2132  0016                     	;# 
  2133  0017                     	;# 
  2134  0018                     	;# 
  2135  0019                     	;# 
  2136  001A                     	;# 
  2137  001B                     	;# 
  2138  001C                     	;# 
  2139  001E                     	;# 
  2140  001F                     	;# 
  2141  008C                     	;# 
  2142  008D                     	;# 
  2143  008E                     	;# 
  2144  008F                     	;# 
  2145  0090                     	;# 
  2146  0091                     	;# 
  2147  0092                     	;# 
  2148  0093                     	;# 
  2149  0094                     	;# 
  2150  0095                     	;# 
  2151  0096                     	;# 
  2152  0097                     	;# 
  2153  0098                     	;# 
  2154  0099                     	;# 
  2155  009A                     	;# 
  2156  009B                     	;# 
  2157  009B                     	;# 
  2158  009C                     	;# 
  2159  009D                     	;# 
  2160  009E                     	;# 
  2161  010C                     	;# 
  2162  010D                     	;# 
  2163  010E                     	;# 
  2164  010F                     	;# 
  2165  0110                     	;# 
  2166  0111                     	;# 
  2167  0112                     	;# 
  2168  0113                     	;# 
  2169  0114                     	;# 
  2170  0115                     	;# 
  2171  0116                     	;# 
  2172  0117                     	;# 
  2173  0118                     	;# 
  2174  0119                     	;# 
  2175  011A                     	;# 
  2176  011B                     	;# 
  2177  011D                     	;# 
  2178  011E                     	;# 
  2179  011F                     	;# 
  2180  018C                     	;# 
  2181  0190                     	;# 
  2182  0191                     	;# 
  2183  0191                     	;# 
  2184  0192                     	;# 
  2185  0193                     	;# 
  2186  0193                     	;# 
  2187  0193                     	;# 
  2188  0194                     	;# 
  2189  0195                     	;# 
  2190  0196                     	;# 
  2191  0199                     	;# 
  2192  0199                     	;# 
  2193  019A                     	;# 
  2194  019A                     	;# 
  2195  019B                     	;# 
  2196  019B                     	;# 
  2197  019B                     	;# 
  2198  019B                     	;# 
  2199  019C                     	;# 
  2200  019C                     	;# 
  2201  019D                     	;# 
  2202  019D                     	;# 
  2203  019E                     	;# 
  2204  019E                     	;# 
  2205  019F                     	;# 
  2206  019F                     	;# 
  2207  020D                     	;# 
  2208  0211                     	;# 
  2209  0211                     	;# 
  2210  0212                     	;# 
  2211  0212                     	;# 
  2212  0213                     	;# 
  2213  0213                     	;# 
  2214  0214                     	;# 
  2215  0214                     	;# 
  2216  0215                     	;# 
  2217  0215                     	;# 
  2218  0215                     	;# 
  2219  0216                     	;# 
  2220  0216                     	;# 
  2221  0217                     	;# 
  2222  0217                     	;# 
  2223  0219                     	;# 
  2224  021A                     	;# 
  2225  021B                     	;# 
  2226  021C                     	;# 
  2227  021D                     	;# 
  2228  021E                     	;# 
  2229  021F                     	;# 
  2230  028C                     	;# 
  2231  028D                     	;# 
  2232  0291                     	;# 
  2233  0291                     	;# 
  2234  0292                     	;# 
  2235  0293                     	;# 
  2236  0294                     	;# 
  2237  0295                     	;# 
  2238  0295                     	;# 
  2239  0296                     	;# 
  2240  0298                     	;# 
  2241  0298                     	;# 
  2242  0299                     	;# 
  2243  029A                     	;# 
  2244  029B                     	;# 
  2245  029C                     	;# 
  2246  029C                     	;# 
  2247  029D                     	;# 
  2248  029E                     	;# 
  2249  029F                     	;# 
  2250  030C                     	;# 
  2251  030D                     	;# 
  2252  0311                     	;# 
  2253  0311                     	;# 
  2254  0312                     	;# 
  2255  0313                     	;# 
  2256  0314                     	;# 
  2257  0315                     	;# 
  2258  0315                     	;# 
  2259  0316                     	;# 
  2260  0318                     	;# 
  2261  0318                     	;# 
  2262  0319                     	;# 
  2263  031A                     	;# 
  2264  031C                     	;# 
  2265  031C                     	;# 
  2266  031D                     	;# 
  2267  031E                     	;# 
  2268  038C                     	;# 
  2269  038D                     	;# 
  2270  0394                     	;# 
  2271  0395                     	;# 
  2272  0396                     	;# 
  2273  040C                     	;# 
  2274  040D                     	;# 
  2275  0415                     	;# 
  2276  0416                     	;# 
  2277  0417                     	;# 
  2278  041C                     	;# 
  2279  041D                     	;# 
  2280  041E                     	;# 
  2281  048D                     	;# 
  2282  0491                     	;# 
  2283  0492                     	;# 
  2284  0493                     	;# 
  2285  0493                     	;# 
  2286  0494                     	;# 
  2287  0495                     	;# 
  2288  0496                     	;# 
  2289  0497                     	;# 
  2290  0791                     	;# 
  2291  0792                     	;# 
  2292  0793                     	;# 
  2293  0794                     	;# 
  2294  0795                     	;# 
  2295  0798                     	;# 
  2296  0799                     	;# 
  2297  079A                     	;# 
  2298  079B                     	;# 
  2299  079C                     	;# 
  2300  079D                     	;# 
  2301  07A0                     	;# 
  2302  07A1                     	;# 
  2303  07A2                     	;# 
  2304  07A3                     	;# 
  2305  07A4                     	;# 
  2306  07A5                     	;# 
  2307  07A6                     	;# 
  2308  07A7                     	;# 
  2309  07A8                     	;# 
  2310  07A9                     	;# 
  2311  07AA                     	;# 
  2312  07AB                     	;# 
  2313  07AC                     	;# 
  2314  07AD                     	;# 
  2315  07AE                     	;# 
  2316  07AF                     	;# 
  2317  07B0                     	;# 
  2318  07B1                     	;# 
  2319  07B2                     	;# 
  2320  07B3                     	;# 
  2321  07B4                     	;# 
  2322  07B5                     	;# 
  2323  07B6                     	;# 
  2324  07B7                     	;# 
  2325  0FE4                     	;# 
  2326  0FE5                     	;# 
  2327  0FE6                     	;# 
  2328  0FE7                     	;# 
  2329  0FE8                     	;# 
  2330  0FE9                     	;# 
  2331  0FEA                     	;# 
  2332  0FEB                     	;# 
  2333  0FED                     	;# 
  2334  0FEE                     	;# 
  2335  0FEF                     	;# 
  2336  0000                     	;# 
  2337  0001                     	;# 
  2338  0002                     	;# 
  2339  0003                     	;# 
  2340  0004                     	;# 
  2341  0005                     	;# 
  2342  0006                     	;# 
  2343  0007                     	;# 
  2344  0008                     	;# 
  2345  0009                     	;# 
  2346  000A                     	;# 
  2347  000B                     	;# 
  2348  000C                     	;# 
  2349  000D                     	;# 
  2350  000E                     	;# 
  2351  000F                     	;# 
  2352  0010                     	;# 
  2353  0011                     	;# 
  2354  0012                     	;# 
  2355  0013                     	;# 
  2356  0014                     	;# 
  2357  0015                     	;# 
  2358  0016                     	;# 
  2359  0016                     	;# 
  2360  0017                     	;# 
  2361  0018                     	;# 
  2362  0019                     	;# 
  2363  001A                     	;# 
  2364  001B                     	;# 
  2365  001C                     	;# 
  2366  001E                     	;# 
  2367  001F                     	;# 
  2368  008C                     	;# 
  2369  008D                     	;# 
  2370  008E                     	;# 
  2371  008F                     	;# 
  2372  0090                     	;# 
  2373  0091                     	;# 
  2374  0092                     	;# 
  2375  0093                     	;# 
  2376  0094                     	;# 
  2377  0095                     	;# 
  2378  0096                     	;# 
  2379  0097                     	;# 
  2380  0098                     	;# 
  2381  0099                     	;# 
  2382  009A                     	;# 
  2383  009B                     	;# 
  2384  009B                     	;# 
  2385  009C                     	;# 
  2386  009D                     	;# 
  2387  009E                     	;# 
  2388  010C                     	;# 
  2389  010D                     	;# 
  2390  010E                     	;# 
  2391  010F                     	;# 
  2392  0110                     	;# 
  2393  0111                     	;# 
  2394  0112                     	;# 
  2395  0113                     	;# 
  2396  0114                     	;# 
  2397  0115                     	;# 
  2398  0116                     	;# 
  2399  0117                     	;# 
  2400  0118                     	;# 
  2401  0119                     	;# 
  2402  011A                     	;# 
  2403  011B                     	;# 
  2404  011D                     	;# 
  2405  011E                     	;# 
  2406  011F                     	;# 
  2407  018C                     	;# 
  2408  0190                     	;# 
  2409  0191                     	;# 
  2410  0191                     	;# 
  2411  0192                     	;# 
  2412  0193                     	;# 
  2413  0193                     	;# 
  2414  0193                     	;# 
  2415  0194                     	;# 
  2416  0195                     	;# 
  2417  0196                     	;# 
  2418  0199                     	;# 
  2419  0199                     	;# 
  2420  019A                     	;# 
  2421  019A                     	;# 
  2422  019B                     	;# 
  2423  019B                     	;# 
  2424  019B                     	;# 
  2425  019B                     	;# 
  2426  019C                     	;# 
  2427  019C                     	;# 
  2428  019D                     	;# 
  2429  019D                     	;# 
  2430  019E                     	;# 
  2431  019E                     	;# 
  2432  019F                     	;# 
  2433  019F                     	;# 
  2434  020D                     	;# 
  2435  0211                     	;# 
  2436  0211                     	;# 
  2437  0212                     	;# 
  2438  0212                     	;# 
  2439  0213                     	;# 
  2440  0213                     	;# 
  2441  0214                     	;# 
  2442  0214                     	;# 
  2443  0215                     	;# 
  2444  0215                     	;# 
  2445  0215                     	;# 
  2446  0216                     	;# 
  2447  0216                     	;# 
  2448  0217                     	;# 
  2449  0217                     	;# 
  2450  0219                     	;# 
  2451  021A                     	;# 
  2452  021B                     	;# 
  2453  021C                     	;# 
  2454  021D                     	;# 
  2455  021E                     	;# 
  2456  021F                     	;# 
  2457  028C                     	;# 
  2458  028D                     	;# 
  2459  0291                     	;# 
  2460  0291                     	;# 
  2461  0292                     	;# 
  2462  0293                     	;# 
  2463  0294                     	;# 
  2464  0295                     	;# 
  2465  0295                     	;# 
  2466  0296                     	;# 
  2467  0298                     	;# 
  2468  0298                     	;# 
  2469  0299                     	;# 
  2470  029A                     	;# 
  2471  029B                     	;# 
  2472  029C                     	;# 
  2473  029C                     	;# 
  2474  029D                     	;# 
  2475  029E                     	;# 
  2476  029F                     	;# 
  2477  030C                     	;# 
  2478  030D                     	;# 
  2479  0311                     	;# 
  2480  0311                     	;# 
  2481  0312                     	;# 
  2482  0313                     	;# 
  2483  0314                     	;# 
  2484  0315                     	;# 
  2485  0315                     	;# 
  2486  0316                     	;# 
  2487  0318                     	;# 
  2488  0318                     	;# 
  2489  0319                     	;# 
  2490  031A                     	;# 
  2491  031C                     	;# 
  2492  031C                     	;# 
  2493  031D                     	;# 
  2494  031E                     	;# 
  2495  038C                     	;# 
  2496  038D                     	;# 
  2497  0394                     	;# 
  2498  0395                     	;# 
  2499  0396                     	;# 
  2500  040C                     	;# 
  2501  040D                     	;# 
  2502  0415                     	;# 
  2503  0416                     	;# 
  2504  0417                     	;# 
  2505  041C                     	;# 
  2506  041D                     	;# 
  2507  041E                     	;# 
  2508  048D                     	;# 
  2509  0491                     	;# 
  2510  0492                     	;# 
  2511  0493                     	;# 
  2512  0493                     	;# 
  2513  0494                     	;# 
  2514  0495                     	;# 
  2515  0496                     	;# 
  2516  0497                     	;# 
  2517  0791                     	;# 
  2518  0792                     	;# 
  2519  0793                     	;# 
  2520  0794                     	;# 
  2521  0795                     	;# 
  2522  0798                     	;# 
  2523  0799                     	;# 
  2524  079A                     	;# 
  2525  079B                     	;# 
  2526  079C                     	;# 
  2527  079D                     	;# 
  2528  07A0                     	;# 
  2529  07A1                     	;# 
  2530  07A2                     	;# 
  2531  07A3                     	;# 
  2532  07A4                     	;# 
  2533  07A5                     	;# 
  2534  07A6                     	;# 
  2535  07A7                     	;# 
  2536  07A8                     	;# 
  2537  07A9                     	;# 
  2538  07AA                     	;# 
  2539  07AB                     	;# 
  2540  07AC                     	;# 
  2541  07AD                     	;# 
  2542  07AE                     	;# 
  2543  07AF                     	;# 
  2544  07B0                     	;# 
  2545  07B1                     	;# 
  2546  07B2                     	;# 
  2547  07B3                     	;# 
  2548  07B4                     	;# 
  2549  07B5                     	;# 
  2550  07B6                     	;# 
  2551  07B7                     	;# 
  2552  0FE4                     	;# 
  2553  0FE5                     	;# 
  2554  0FE6                     	;# 
  2555  0FE7                     	;# 
  2556  0FE8                     	;# 
  2557  0FE9                     	;# 
  2558  0FEA                     	;# 
  2559  0FEB                     	;# 
  2560  0FED                     	;# 
  2561  0FEE                     	;# 
  2562  0FEF                     	;# 
  2563  0000                     	;# 
  2564  0001                     	;# 
  2565  0002                     	;# 
  2566  0003                     	;# 
  2567  0004                     	;# 
  2568  0005                     	;# 
  2569  0006                     	;# 
  2570  0007                     	;# 
  2571  0008                     	;# 
  2572  0009                     	;# 
  2573  000A                     	;# 
  2574  000B                     	;# 
  2575  000C                     	;# 
  2576  000D                     	;# 
  2577  000E                     	;# 
  2578  000F                     	;# 
  2579  0010                     	;# 
  2580  0011                     	;# 
  2581  0012                     	;# 
  2582  0013                     	;# 
  2583  0014                     	;# 
  2584  0015                     	;# 
  2585  0016                     	;# 
  2586  0016                     	;# 
  2587  0017                     	;# 
  2588  0018                     	;# 
  2589  0019                     	;# 
  2590  001A                     	;# 
  2591  001B                     	;# 
  2592  001C                     	;# 
  2593  001E                     	;# 
  2594  001F                     	;# 
  2595  008C                     	;# 
  2596  008D                     	;# 
  2597  008E                     	;# 
  2598  008F                     	;# 
  2599  0090                     	;# 
  2600  0091                     	;# 
  2601  0092                     	;# 
  2602  0093                     	;# 
  2603  0094                     	;# 
  2604  0095                     	;# 
  2605  0096                     	;# 
  2606  0097                     	;# 
  2607  0098                     	;# 
  2608  0099                     	;# 
  2609  009A                     	;# 
  2610  009B                     	;# 
  2611  009B                     	;# 
  2612  009C                     	;# 
  2613  009D                     	;# 
  2614  009E                     	;# 
  2615  010C                     	;# 
  2616  010D                     	;# 
  2617  010E                     	;# 
  2618  010F                     	;# 
  2619  0110                     	;# 
  2620  0111                     	;# 
  2621  0112                     	;# 
  2622  0113                     	;# 
  2623  0114                     	;# 
  2624  0115                     	;# 
  2625  0116                     	;# 
  2626  0117                     	;# 
  2627  0118                     	;# 
  2628  0119                     	;# 
  2629  011A                     	;# 
  2630  011B                     	;# 
  2631  011D                     	;# 
  2632  011E                     	;# 
  2633  011F                     	;# 
  2634  018C                     	;# 
  2635  0190                     	;# 
  2636  0191                     	;# 
  2637  0191                     	;# 
  2638  0192                     	;# 
  2639  0193                     	;# 
  2640  0193                     	;# 
  2641  0193                     	;# 
  2642  0194                     	;# 
  2643  0195                     	;# 
  2644  0196                     	;# 
  2645  0199                     	;# 
  2646  0199                     	;# 
  2647  019A                     	;# 
  2648  019A                     	;# 
  2649  019B                     	;# 
  2650  019B                     	;# 
  2651  019B                     	;# 
  2652  019B                     	;# 
  2653  019C                     	;# 
  2654  019C                     	;# 
  2655  019D                     	;# 
  2656  019D                     	;# 
  2657  019E                     	;# 
  2658  019E                     	;# 
  2659  019F                     	;# 
  2660  019F                     	;# 
  2661  020D                     	;# 
  2662  0211                     	;# 
  2663  0211                     	;# 
  2664  0212                     	;# 
  2665  0212                     	;# 
  2666  0213                     	;# 
  2667  0213                     	;# 
  2668  0214                     	;# 
  2669  0214                     	;# 
  2670  0215                     	;# 
  2671  0215                     	;# 
  2672  0215                     	;# 
  2673  0216                     	;# 
  2674  0216                     	;# 
  2675  0217                     	;# 
  2676  0217                     	;# 
  2677  0219                     	;# 
  2678  021A                     	;# 
  2679  021B                     	;# 
  2680  021C                     	;# 
  2681  021D                     	;# 
  2682  021E                     	;# 
  2683  021F                     	;# 
  2684  028C                     	;# 
  2685  028D                     	;# 
  2686  0291                     	;# 
  2687  0291                     	;# 
  2688  0292                     	;# 
  2689  0293                     	;# 
  2690  0294                     	;# 
  2691  0295                     	;# 
  2692  0295                     	;# 
  2693  0296                     	;# 
  2694  0298                     	;# 
  2695  0298                     	;# 
  2696  0299                     	;# 
  2697  029A                     	;# 
  2698  029B                     	;# 
  2699  029C                     	;# 
  2700  029C                     	;# 
  2701  029D                     	;# 
  2702  029E                     	;# 
  2703  029F                     	;# 
  2704  030C                     	;# 
  2705  030D                     	;# 
  2706  0311                     	;# 
  2707  0311                     	;# 
  2708  0312                     	;# 
  2709  0313                     	;# 
  2710  0314                     	;# 
  2711  0315                     	;# 
  2712  0315                     	;# 
  2713  0316                     	;# 
  2714  0318                     	;# 
  2715  0318                     	;# 
  2716  0319                     	;# 
  2717  031A                     	;# 
  2718  031C                     	;# 
  2719  031C                     	;# 
  2720  031D                     	;# 
  2721  031E                     	;# 
  2722  038C                     	;# 
  2723  038D                     	;# 
  2724  0394                     	;# 
  2725  0395                     	;# 
  2726  0396                     	;# 
  2727  040C                     	;# 
  2728  040D                     	;# 
  2729  0415                     	;# 
  2730  0416                     	;# 
  2731  0417                     	;# 
  2732  041C                     	;# 
  2733  041D                     	;# 
  2734  041E                     	;# 
  2735  048D                     	;# 
  2736  0491                     	;# 
  2737  0492                     	;# 
  2738  0493                     	;# 
  2739  0493                     	;# 
  2740  0494                     	;# 
  2741  0495                     	;# 
  2742  0496                     	;# 
  2743  0497                     	;# 
  2744  0791                     	;# 
  2745  0792                     	;# 
  2746  0793                     	;# 
  2747  0794                     	;# 
  2748  0795                     	;# 
  2749  0798                     	;# 
  2750  0799                     	;# 
  2751  079A                     	;# 
  2752  079B                     	;# 
  2753  079C                     	;# 
  2754  079D                     	;# 
  2755  07A0                     	;# 
  2756  07A1                     	;# 
  2757  07A2                     	;# 
  2758  07A3                     	;# 
  2759  07A4                     	;# 
  2760  07A5                     	;# 
  2761  07A6                     	;# 
  2762  07A7                     	;# 
  2763  07A8                     	;# 
  2764  07A9                     	;# 
  2765  07AA                     	;# 
  2766  07AB                     	;# 
  2767  07AC                     	;# 
  2768  07AD                     	;# 
  2769  07AE                     	;# 
  2770  07AF                     	;# 
  2771  07B0                     	;# 
  2772  07B1                     	;# 
  2773  07B2                     	;# 
  2774  07B3                     	;# 
  2775  07B4                     	;# 
  2776  07B5                     	;# 
  2777  07B6                     	;# 
  2778  07B7                     	;# 
  2779  0FE4                     	;# 
  2780  0FE5                     	;# 
  2781  0FE6                     	;# 
  2782  0FE7                     	;# 
  2783  0FE8                     	;# 
  2784  0FE9                     	;# 
  2785  0FEA                     	;# 
  2786  0FEB                     	;# 
  2787  0FED                     	;# 
  2788  0FEE                     	;# 
  2789  0FEF                     	;# 
  2790  0000                     	;# 
  2791  0001                     	;# 
  2792  0002                     	;# 
  2793  0003                     	;# 
  2794  0004                     	;# 
  2795  0005                     	;# 
  2796  0006                     	;# 
  2797  0007                     	;# 
  2798  0008                     	;# 
  2799  0009                     	;# 
  2800  000A                     	;# 
  2801  000B                     	;# 
  2802  000C                     	;# 
  2803  000D                     	;# 
  2804  000E                     	;# 
  2805  000F                     	;# 
  2806  0010                     	;# 
  2807  0011                     	;# 
  2808  0012                     	;# 
  2809  0013                     	;# 
  2810  0014                     	;# 
  2811  0015                     	;# 
  2812  0016                     	;# 
  2813  0016                     	;# 
  2814  0017                     	;# 
  2815  0018                     	;# 
  2816  0019                     	;# 
  2817  001A                     	;# 
  2818  001B                     	;# 
  2819  001C                     	;# 
  2820  001E                     	;# 
  2821  001F                     	;# 
  2822  008C                     	;# 
  2823  008D                     	;# 
  2824  008E                     	;# 
  2825  008F                     	;# 
  2826  0090                     	;# 
  2827  0091                     	;# 
  2828  0092                     	;# 
  2829  0093                     	;# 
  2830  0094                     	;# 
  2831  0095                     	;# 
  2832  0096                     	;# 
  2833  0097                     	;# 
  2834  0098                     	;# 
  2835  0099                     	;# 
  2836  009A                     	;# 
  2837  009B                     	;# 
  2838  009B                     	;# 
  2839  009C                     	;# 
  2840  009D                     	;# 
  2841  009E                     	;# 
  2842  010C                     	;# 
  2843  010D                     	;# 
  2844  010E                     	;# 
  2845  010F                     	;# 
  2846  0110                     	;# 
  2847  0111                     	;# 
  2848  0112                     	;# 
  2849  0113                     	;# 
  2850  0114                     	;# 
  2851  0115                     	;# 
  2852  0116                     	;# 
  2853  0117                     	;# 
  2854  0118                     	;# 
  2855  0119                     	;# 
  2856  011A                     	;# 
  2857  011B                     	;# 
  2858  011D                     	;# 
  2859  011E                     	;# 
  2860  011F                     	;# 
  2861  018C                     	;# 
  2862  0190                     	;# 
  2863  0191                     	;# 
  2864  0191                     	;# 
  2865  0192                     	;# 
  2866  0193                     	;# 
  2867  0193                     	;# 
  2868  0193                     	;# 
  2869  0194                     	;# 
  2870  0195                     	;# 
  2871  0196                     	;# 
  2872  0199                     	;# 
  2873  0199                     	;# 
  2874  019A                     	;# 
  2875  019A                     	;# 
  2876  019B                     	;# 
  2877  019B                     	;# 
  2878  019B                     	;# 
  2879  019B                     	;# 
  2880  019C                     	;# 
  2881  019C                     	;# 
  2882  019D                     	;# 
  2883  019D                     	;# 
  2884  019E                     	;# 
  2885  019E                     	;# 
  2886  019F                     	;# 
  2887  019F                     	;# 
  2888  020D                     	;# 
  2889  0211                     	;# 
  2890  0211                     	;# 
  2891  0212                     	;# 
  2892  0212                     	;# 
  2893  0213                     	;# 
  2894  0213                     	;# 
  2895  0214                     	;# 
  2896  0214                     	;# 
  2897  0215                     	;# 
  2898  0215                     	;# 
  2899  0215                     	;# 
  2900  0216                     	;# 
  2901  0216                     	;# 
  2902  0217                     	;# 
  2903  0217                     	;# 
  2904  0219                     	;# 
  2905  021A                     	;# 
  2906  021B                     	;# 
  2907  021C                     	;# 
  2908  021D                     	;# 
  2909  021E                     	;# 
  2910  021F                     	;# 
  2911  028C                     	;# 
  2912  028D                     	;# 
  2913  0291                     	;# 
  2914  0291                     	;# 
  2915  0292                     	;# 
  2916  0293                     	;# 
  2917  0294                     	;# 
  2918  0295                     	;# 
  2919  0295                     	;# 
  2920  0296                     	;# 
  2921  0298                     	;# 
  2922  0298                     	;# 
  2923  0299                     	;# 
  2924  029A                     	;# 
  2925  029B                     	;# 
  2926  029C                     	;# 
  2927  029C                     	;# 
  2928  029D                     	;# 
  2929  029E                     	;# 
  2930  029F                     	;# 
  2931  030C                     	;# 
  2932  030D                     	;# 
  2933  0311                     	;# 
  2934  0311                     	;# 
  2935  0312                     	;# 
  2936  0313                     	;# 
  2937  0314                     	;# 
  2938  0315                     	;# 
  2939  0315                     	;# 
  2940  0316                     	;# 
  2941  0318                     	;# 
  2942  0318                     	;# 
  2943  0319                     	;# 
  2944  031A                     	;# 
  2945  031C                     	;# 
  2946  031C                     	;# 
  2947  031D                     	;# 
  2948  031E                     	;# 
  2949  038C                     	;# 
  2950  038D                     	;# 
  2951  0394                     	;# 
  2952  0395                     	;# 
  2953  0396                     	;# 
  2954  040C                     	;# 
  2955  040D                     	;# 
  2956  0415                     	;# 
  2957  0416                     	;# 
  2958  0417                     	;# 
  2959  041C                     	;# 
  2960  041D                     	;# 
  2961  041E                     	;# 
  2962  048D                     	;# 
  2963  0491                     	;# 
  2964  0492                     	;# 
  2965  0493                     	;# 
  2966  0493                     	;# 
  2967  0494                     	;# 
  2968  0495                     	;# 
  2969  0496                     	;# 
  2970  0497                     	;# 
  2971  0791                     	;# 
  2972  0792                     	;# 
  2973  0793                     	;# 
  2974  0794                     	;# 
  2975  0795                     	;# 
  2976  0798                     	;# 
  2977  0799                     	;# 
  2978  079A                     	;# 
  2979  079B                     	;# 
  2980  079C                     	;# 
  2981  079D                     	;# 
  2982  07A0                     	;# 
  2983  07A1                     	;# 
  2984  07A2                     	;# 
  2985  07A3                     	;# 
  2986  07A4                     	;# 
  2987  07A5                     	;# 
  2988  07A6                     	;# 
  2989  07A7                     	;# 
  2990  07A8                     	;# 
  2991  07A9                     	;# 
  2992  07AA                     	;# 
  2993  07AB                     	;# 
  2994  07AC                     	;# 
  2995  07AD                     	;# 
  2996  07AE                     	;# 
  2997  07AF                     	;# 
  2998  07B0                     	;# 
  2999  07B1                     	;# 
  3000  07B2                     	;# 
  3001  07B3                     	;# 
  3002  07B4                     	;# 
  3003  07B5                     	;# 
  3004  07B6                     	;# 
  3005  07B7                     	;# 
  3006  0FE4                     	;# 
  3007  0FE5                     	;# 
  3008  0FE6                     	;# 
  3009  0FE7                     	;# 
  3010  0FE8                     	;# 
  3011  0FE9                     	;# 
  3012  0FEA                     	;# 
  3013  0FEB                     	;# 
  3014  0FED                     	;# 
  3015  0FEE                     	;# 
  3016  0FEF                     	;# 
  3017  0000                     	;# 
  3018  0001                     	;# 
  3019  0002                     	;# 
  3020  0003                     	;# 
  3021  0004                     	;# 
  3022  0005                     	;# 
  3023  0006                     	;# 
  3024  0007                     	;# 
  3025  0008                     	;# 
  3026  0009                     	;# 
  3027  000A                     	;# 
  3028  000B                     	;# 
  3029  000C                     	;# 
  3030  000D                     	;# 
  3031  000E                     	;# 
  3032  000F                     	;# 
  3033  0010                     	;# 
  3034  0011                     	;# 
  3035  0012                     	;# 
  3036  0013                     	;# 
  3037  0014                     	;# 
  3038  0015                     	;# 
  3039  0016                     	;# 
  3040  0016                     	;# 
  3041  0017                     	;# 
  3042  0018                     	;# 
  3043  0019                     	;# 
  3044  001A                     	;# 
  3045  001B                     	;# 
  3046  001C                     	;# 
  3047  001E                     	;# 
  3048  001F                     	;# 
  3049  008C                     	;# 
  3050  008D                     	;# 
  3051  008E                     	;# 
  3052  008F                     	;# 
  3053  0090                     	;# 
  3054  0091                     	;# 
  3055  0092                     	;# 
  3056  0093                     	;# 
  3057  0094                     	;# 
  3058  0095                     	;# 
  3059  0096                     	;# 
  3060  0097                     	;# 
  3061  0098                     	;# 
  3062  0099                     	;# 
  3063  009A                     	;# 
  3064  009B                     	;# 
  3065  009B                     	;# 
  3066  009C                     	;# 
  3067  009D                     	;# 
  3068  009E                     	;# 
  3069  010C                     	;# 
  3070  010D                     	;# 
  3071  010E                     	;# 
  3072  010F                     	;# 
  3073  0110                     	;# 
  3074  0111                     	;# 
  3075  0112                     	;# 
  3076  0113                     	;# 
  3077  0114                     	;# 
  3078  0115                     	;# 
  3079  0116                     	;# 
  3080  0117                     	;# 
  3081  0118                     	;# 
  3082  0119                     	;# 
  3083  011A                     	;# 
  3084  011B                     	;# 
  3085  011D                     	;# 
  3086  011E                     	;# 
  3087  011F                     	;# 
  3088  018C                     	;# 
  3089  0190                     	;# 
  3090  0191                     	;# 
  3091  0191                     	;# 
  3092  0192                     	;# 
  3093  0193                     	;# 
  3094  0193                     	;# 
  3095  0193                     	;# 
  3096  0194                     	;# 
  3097  0195                     	;# 
  3098  0196                     	;# 
  3099  0199                     	;# 
  3100  0199                     	;# 
  3101  019A                     	;# 
  3102  019A                     	;# 
  3103  019B                     	;# 
  3104  019B                     	;# 
  3105  019B                     	;# 
  3106  019B                     	;# 
  3107  019C                     	;# 
  3108  019C                     	;# 
  3109  019D                     	;# 
  3110  019D                     	;# 
  3111  019E                     	;# 
  3112  019E                     	;# 
  3113  019F                     	;# 
  3114  019F                     	;# 
  3115  020D                     	;# 
  3116  0211                     	;# 
  3117  0211                     	;# 
  3118  0212                     	;# 
  3119  0212                     	;# 
  3120  0213                     	;# 
  3121  0213                     	;# 
  3122  0214                     	;# 
  3123  0214                     	;# 
  3124  0215                     	;# 
  3125  0215                     	;# 
  3126  0215                     	;# 
  3127  0216                     	;# 
  3128  0216                     	;# 
  3129  0217                     	;# 
  3130  0217                     	;# 
  3131  0219                     	;# 
  3132  021A                     	;# 
  3133  021B                     	;# 
  3134  021C                     	;# 
  3135  021D                     	;# 
  3136  021E                     	;# 
  3137  021F                     	;# 
  3138  028C                     	;# 
  3139  028D                     	;# 
  3140  0291                     	;# 
  3141  0291                     	;# 
  3142  0292                     	;# 
  3143  0293                     	;# 
  3144  0294                     	;# 
  3145  0295                     	;# 
  3146  0295                     	;# 
  3147  0296                     	;# 
  3148  0298                     	;# 
  3149  0298                     	;# 
  3150  0299                     	;# 
  3151  029A                     	;# 
  3152  029B                     	;# 
  3153  029C                     	;# 
  3154  029C                     	;# 
  3155  029D                     	;# 
  3156  029E                     	;# 
  3157  029F                     	;# 
  3158  030C                     	;# 
  3159  030D                     	;# 
  3160  0311                     	;# 
  3161  0311                     	;# 
  3162  0312                     	;# 
  3163  0313                     	;# 
  3164  0314                     	;# 
  3165  0315                     	;# 
  3166  0315                     	;# 
  3167  0316                     	;# 
  3168  0318                     	;# 
  3169  0318                     	;# 
  3170  0319                     	;# 
  3171  031A                     	;# 
  3172  031C                     	;# 
  3173  031C                     	;# 
  3174  031D                     	;# 
  3175  031E                     	;# 
  3176  038C                     	;# 
  3177  038D                     	;# 
  3178  0394                     	;# 
  3179  0395                     	;# 
  3180  0396                     	;# 
  3181  040C                     	;# 
  3182  040D                     	;# 
  3183  0415                     	;# 
  3184  0416                     	;# 
  3185  0417                     	;# 
  3186  041C                     	;# 
  3187  041D                     	;# 
  3188  041E                     	;# 
  3189  048D                     	;# 
  3190  0491                     	;# 
  3191  0492                     	;# 
  3192  0493                     	;# 
  3193  0493                     	;# 
  3194  0494                     	;# 
  3195  0495                     	;# 
  3196  0496                     	;# 
  3197  0497                     	;# 
  3198  0791                     	;# 
  3199  0792                     	;# 
  3200  0793                     	;# 
  3201  0794                     	;# 
  3202  0795                     	;# 
  3203  0798                     	;# 
  3204  0799                     	;# 
  3205  079A                     	;# 
  3206  079B                     	;# 
  3207  079C                     	;# 
  3208  079D                     	;# 
  3209  07A0                     	;# 
  3210  07A1                     	;# 
  3211  07A2                     	;# 
  3212  07A3                     	;# 
  3213  07A4                     	;# 
  3214  07A5                     	;# 
  3215  07A6                     	;# 
  3216  07A7                     	;# 
  3217  07A8                     	;# 
  3218  07A9                     	;# 
  3219  07AA                     	;# 
  3220  07AB                     	;# 
  3221  07AC                     	;# 
  3222  07AD                     	;# 
  3223  07AE                     	;# 
  3224  07AF                     	;# 
  3225  07B0                     	;# 
  3226  07B1                     	;# 
  3227  07B2                     	;# 
  3228  07B3                     	;# 
  3229  07B4                     	;# 
  3230  07B5                     	;# 
  3231  07B6                     	;# 
  3232  07B7                     	;# 
  3233  0FE4                     	;# 
  3234  0FE5                     	;# 
  3235  0FE6                     	;# 
  3236  0FE7                     	;# 
  3237  0FE8                     	;# 
  3238  0FE9                     	;# 
  3239  0FEA                     	;# 
  3240  0FEB                     	;# 
  3241  0FED                     	;# 
  3242  0FEE                     	;# 
  3243  0FEF                     	;# 
  3244  0000                     	;# 
  3245  0001                     	;# 
  3246  0002                     	;# 
  3247  0003                     	;# 
  3248  0004                     	;# 
  3249  0005                     	;# 
  3250  0006                     	;# 
  3251  0007                     	;# 
  3252  0008                     	;# 
  3253  0009                     	;# 
  3254  000A                     	;# 
  3255  000B                     	;# 
  3256  000C                     	;# 
  3257  000D                     	;# 
  3258  000E                     	;# 
  3259  000F                     	;# 
  3260  0010                     	;# 
  3261  0011                     	;# 
  3262  0012                     	;# 
  3263  0013                     	;# 
  3264  0014                     	;# 
  3265  0015                     	;# 
  3266  0016                     	;# 
  3267  0016                     	;# 
  3268  0017                     	;# 
  3269  0018                     	;# 
  3270  0019                     	;# 
  3271  001A                     	;# 
  3272  001B                     	;# 
  3273  001C                     	;# 
  3274  001E                     	;# 
  3275  001F                     	;# 
  3276  008C                     	;# 
  3277  008D                     	;# 
  3278  008E                     	;# 
  3279  008F                     	;# 
  3280  0090                     	;# 
  3281  0091                     	;# 
  3282  0092                     	;# 
  3283  0093                     	;# 
  3284  0094                     	;# 
  3285  0095                     	;# 
  3286  0096                     	;# 
  3287  0097                     	;# 
  3288  0098                     	;# 
  3289  0099                     	;# 
  3290  009A                     	;# 
  3291  009B                     	;# 
  3292  009B                     	;# 
  3293  009C                     	;# 
  3294  009D                     	;# 
  3295  009E                     	;# 
  3296  010C                     	;# 
  3297  010D                     	;# 
  3298  010E                     	;# 
  3299  010F                     	;# 
  3300  0110                     	;# 
  3301  0111                     	;# 
  3302  0112                     	;# 
  3303  0113                     	;# 
  3304  0114                     	;# 
  3305  0115                     	;# 
  3306  0116                     	;# 
  3307  0117                     	;# 
  3308  0118                     	;# 
  3309  0119                     	;# 
  3310  011A                     	;# 
  3311  011B                     	;# 
  3312  011D                     	;# 
  3313  011E                     	;# 
  3314  011F                     	;# 
  3315  018C                     	;# 
  3316  0190                     	;# 
  3317  0191                     	;# 
  3318  0191                     	;# 
  3319  0192                     	;# 
  3320  0193                     	;# 
  3321  0193                     	;# 
  3322  0193                     	;# 
  3323  0194                     	;# 
  3324  0195                     	;# 
  3325  0196                     	;# 
  3326  0199                     	;# 
  3327  0199                     	;# 
  3328  019A                     	;# 
  3329  019A                     	;# 
  3330  019B                     	;# 
  3331  019B                     	;# 
  3332  019B                     	;# 
  3333  019B                     	;# 
  3334  019C                     	;# 
  3335  019C                     	;# 
  3336  019D                     	;# 
  3337  019D                     	;# 
  3338  019E                     	;# 
  3339  019E                     	;# 
  3340  019F                     	;# 
  3341  019F                     	;# 
  3342  020D                     	;# 
  3343  0211                     	;# 
  3344  0211                     	;# 
  3345  0212                     	;# 
  3346  0212                     	;# 
  3347  0213                     	;# 
  3348  0213                     	;# 
  3349  0214                     	;# 
  3350  0214                     	;# 
  3351  0215                     	;# 
  3352  0215                     	;# 
  3353  0215                     	;# 
  3354  0216                     	;# 
  3355  0216                     	;# 
  3356  0217                     	;# 
  3357  0217                     	;# 
  3358  0219                     	;# 
  3359  021A                     	;# 
  3360  021B                     	;# 
  3361  021C                     	;# 
  3362  021D                     	;# 
  3363  021E                     	;# 
  3364  021F                     	;# 
  3365  028C                     	;# 
  3366  028D                     	;# 
  3367  0291                     	;# 
  3368  0291                     	;# 
  3369  0292                     	;# 
  3370  0293                     	;# 
  3371  0294                     	;# 
  3372  0295                     	;# 
  3373  0295                     	;# 
  3374  0296                     	;# 
  3375  0298                     	;# 
  3376  0298                     	;# 
  3377  0299                     	;# 
  3378  029A                     	;# 
  3379  029B                     	;# 
  3380  029C                     	;# 
  3381  029C                     	;# 
  3382  029D                     	;# 
  3383  029E                     	;# 
  3384  029F                     	;# 
  3385  030C                     	;# 
  3386  030D                     	;# 
  3387  0311                     	;# 
  3388  0311                     	;# 
  3389  0312                     	;# 
  3390  0313                     	;# 
  3391  0314                     	;# 
  3392  0315                     	;# 
  3393  0315                     	;# 
  3394  0316                     	;# 
  3395  0318                     	;# 
  3396  0318                     	;# 
  3397  0319                     	;# 
  3398  031A                     	;# 
  3399  031C                     	;# 
  3400  031C                     	;# 
  3401  031D                     	;# 
  3402  031E                     	;# 
  3403  038C                     	;# 
  3404  038D                     	;# 
  3405  0394                     	;# 
  3406  0395                     	;# 
  3407  0396                     	;# 
  3408  040C                     	;# 
  3409  040D                     	;# 
  3410  0415                     	;# 
  3411  0416                     	;# 
  3412  0417                     	;# 
  3413  041C                     	;# 
  3414  041D                     	;# 
  3415  041E                     	;# 
  3416  048D                     	;# 
  3417  0491                     	;# 
  3418  0492                     	;# 
  3419  0493                     	;# 
  3420  0493                     	;# 
  3421  0494                     	;# 
  3422  0495                     	;# 
  3423  0496                     	;# 
  3424  0497                     	;# 
  3425  0791                     	;# 
  3426  0792                     	;# 
  3427  0793                     	;# 
  3428  0794                     	;# 
  3429  0795                     	;# 
  3430  0798                     	;# 
  3431  0799                     	;# 
  3432  079A                     	;# 
  3433  079B                     	;# 
  3434  079C                     	;# 
  3435  079D                     	;# 
  3436  07A0                     	;# 
  3437  07A1                     	;# 
  3438  07A2                     	;# 
  3439  07A3                     	;# 
  3440  07A4                     	;# 
  3441  07A5                     	;# 
  3442  07A6                     	;# 
  3443  07A7                     	;# 
  3444  07A8                     	;# 
  3445  07A9                     	;# 
  3446  07AA                     	;# 
  3447  07AB                     	;# 
  3448  07AC                     	;# 
  3449  07AD                     	;# 
  3450  07AE                     	;# 
  3451  07AF                     	;# 
  3452  07B0                     	;# 
  3453  07B1                     	;# 
  3454  07B2                     	;# 
  3455  07B3                     	;# 
  3456  07B4                     	;# 
  3457  07B5                     	;# 
  3458  07B6                     	;# 
  3459  07B7                     	;# 
  3460  0FE4                     	;# 
  3461  0FE5                     	;# 
  3462  0FE6                     	;# 
  3463  0FE7                     	;# 
  3464  0FE8                     	;# 
  3465  0FE9                     	;# 
  3466  0FEA                     	;# 
  3467  0FEB                     	;# 
  3468  0FED                     	;# 
  3469  0FEE                     	;# 
  3470  0FEF                     	;# 
  3471  0000                     	;# 
  3472  0001                     	;# 
  3473  0002                     	;# 
  3474  0003                     	;# 
  3475  0004                     	;# 
  3476  0005                     	;# 
  3477  0006                     	;# 
  3478  0007                     	;# 
  3479  0008                     	;# 
  3480  0009                     	;# 
  3481  000A                     	;# 
  3482  000B                     	;# 
  3483  000C                     	;# 
  3484  000D                     	;# 
  3485  000E                     	;# 
  3486  000F                     	;# 
  3487  0010                     	;# 
  3488  0011                     	;# 
  3489  0012                     	;# 
  3490  0013                     	;# 
  3491  0014                     	;# 
  3492  0015                     	;# 
  3493  0016                     	;# 
  3494  0016                     	;# 
  3495  0017                     	;# 
  3496  0018                     	;# 
  3497  0019                     	;# 
  3498  001A                     	;# 
  3499  001B                     	;# 
  3500  001C                     	;# 
  3501  001E                     	;# 
  3502  001F                     	;# 
  3503  008C                     	;# 
  3504  008D                     	;# 
  3505  008E                     	;# 
  3506  008F                     	;# 
  3507  0090                     	;# 
  3508  0091                     	;# 
  3509  0092                     	;# 
  3510  0093                     	;# 
  3511  0094                     	;# 
  3512  0095                     	;# 
  3513  0096                     	;# 
  3514  0097                     	;# 
  3515  0098                     	;# 
  3516  0099                     	;# 
  3517  009A                     	;# 
  3518  009B                     	;# 
  3519  009B                     	;# 
  3520  009C                     	;# 
  3521  009D                     	;# 
  3522  009E                     	;# 
  3523  010C                     	;# 
  3524  010D                     	;# 
  3525  010E                     	;# 
  3526  010F                     	;# 
  3527  0110                     	;# 
  3528  0111                     	;# 
  3529  0112                     	;# 
  3530  0113                     	;# 
  3531  0114                     	;# 
  3532  0115                     	;# 
  3533  0116                     	;# 
  3534  0117                     	;# 
  3535  0118                     	;# 
  3536  0119                     	;# 
  3537  011A                     	;# 
  3538  011B                     	;# 
  3539  011D                     	;# 
  3540  011E                     	;# 
  3541  011F                     	;# 
  3542  018C                     	;# 
  3543  0190                     	;# 
  3544  0191                     	;# 
  3545  0191                     	;# 
  3546  0192                     	;# 
  3547  0193                     	;# 
  3548  0193                     	;# 
  3549  0193                     	;# 
  3550  0194                     	;# 
  3551  0195                     	;# 
  3552  0196                     	;# 
  3553  0199                     	;# 
  3554  0199                     	;# 
  3555  019A                     	;# 
  3556  019A                     	;# 
  3557  019B                     	;# 
  3558  019B                     	;# 
  3559  019B                     	;# 
  3560  019B                     	;# 
  3561  019C                     	;# 
  3562  019C                     	;# 
  3563  019D                     	;# 
  3564  019D                     	;# 
  3565  019E                     	;# 
  3566  019E                     	;# 
  3567  019F                     	;# 
  3568  019F                     	;# 
  3569  020D                     	;# 
  3570  0211                     	;# 
  3571  0211                     	;# 
  3572  0212                     	;# 
  3573  0212                     	;# 
  3574  0213                     	;# 
  3575  0213                     	;# 
  3576  0214                     	;# 
  3577  0214                     	;# 
  3578  0215                     	;# 
  3579  0215                     	;# 
  3580  0215                     	;# 
  3581  0216                     	;# 
  3582  0216                     	;# 
  3583  0217                     	;# 
  3584  0217                     	;# 
  3585  0219                     	;# 
  3586  021A                     	;# 
  3587  021B                     	;# 
  3588  021C                     	;# 
  3589  021D                     	;# 
  3590  021E                     	;# 
  3591  021F                     	;# 
  3592  028C                     	;# 
  3593  028D                     	;# 
  3594  0291                     	;# 
  3595  0291                     	;# 
  3596  0292                     	;# 
  3597  0293                     	;# 
  3598  0294                     	;# 
  3599  0295                     	;# 
  3600  0295                     	;# 
  3601  0296                     	;# 
  3602  0298                     	;# 
  3603  0298                     	;# 
  3604  0299                     	;# 
  3605  029A                     	;# 
  3606  029B                     	;# 
  3607  029C                     	;# 
  3608  029C                     	;# 
  3609  029D                     	;# 
  3610  029E                     	;# 
  3611  029F                     	;# 
  3612  030C                     	;# 
  3613  030D                     	;# 
  3614  0311                     	;# 
  3615  0311                     	;# 
  3616  0312                     	;# 
  3617  0313                     	;# 
  3618  0314                     	;# 
  3619  0315                     	;# 
  3620  0315                     	;# 
  3621  0316                     	;# 
  3622  0318                     	;# 
  3623  0318                     	;# 
  3624  0319                     	;# 
  3625  031A                     	;# 
  3626  031C                     	;# 
  3627  031C                     	;# 
  3628  031D                     	;# 
  3629  031E                     	;# 
  3630  038C                     	;# 
  3631  038D                     	;# 
  3632  0394                     	;# 
  3633  0395                     	;# 
  3634  0396                     	;# 
  3635  040C                     	;# 
  3636  040D                     	;# 
  3637  0415                     	;# 
  3638  0416                     	;# 
  3639  0417                     	;# 
  3640  041C                     	;# 
  3641  041D                     	;# 
  3642  041E                     	;# 
  3643  048D                     	;# 
  3644  0491                     	;# 
  3645  0492                     	;# 
  3646  0493                     	;# 
  3647  0493                     	;# 
  3648  0494                     	;# 
  3649  0495                     	;# 
  3650  0496                     	;# 
  3651  0497                     	;# 
  3652  0791                     	;# 
  3653  0792                     	;# 
  3654  0793                     	;# 
  3655  0794                     	;# 
  3656  0795                     	;# 
  3657  0798                     	;# 
  3658  0799                     	;# 
  3659  079A                     	;# 
  3660  079B                     	;# 
  3661  079C                     	;# 
  3662  079D                     	;# 
  3663  07A0                     	;# 
  3664  07A1                     	;# 
  3665  07A2                     	;# 
  3666  07A3                     	;# 
  3667  07A4                     	;# 
  3668  07A5                     	;# 
  3669  07A6                     	;# 
  3670  07A7                     	;# 
  3671  07A8                     	;# 
  3672  07A9                     	;# 
  3673  07AA                     	;# 
  3674  07AB                     	;# 
  3675  07AC                     	;# 
  3676  07AD                     	;# 
  3677  07AE                     	;# 
  3678  07AF                     	;# 
  3679  07B0                     	;# 
  3680  07B1                     	;# 
  3681  07B2                     	;# 
  3682  07B3                     	;# 
  3683  07B4                     	;# 
  3684  07B5                     	;# 
  3685  07B6                     	;# 
  3686  07B7                     	;# 
  3687  0FE4                     	;# 
  3688  0FE5                     	;# 
  3689  0FE6                     	;# 
  3690  0FE7                     	;# 
  3691  0FE8                     	;# 
  3692  0FE9                     	;# 
  3693  0FEA                     	;# 
  3694  0FEB                     	;# 
  3695  0FED                     	;# 
  3696  0FEE                     	;# 
  3697  0FEF                     	;# 
  3698  0000                     	;# 
  3699  0001                     	;# 
  3700  0002                     	;# 
  3701  0003                     	;# 
  3702  0004                     	;# 
  3703  0005                     	;# 
  3704  0006                     	;# 
  3705  0007                     	;# 
  3706  0008                     	;# 
  3707  0009                     	;# 
  3708  000A                     	;# 
  3709  000B                     	;# 
  3710  000C                     	;# 
  3711  000D                     	;# 
  3712  000E                     	;# 
  3713  000F                     	;# 
  3714  0010                     	;# 
  3715  0011                     	;# 
  3716  0012                     	;# 
  3717  0013                     	;# 
  3718  0014                     	;# 
  3719  0015                     	;# 
  3720  0016                     	;# 
  3721  0016                     	;# 
  3722  0017                     	;# 
  3723  0018                     	;# 
  3724  0019                     	;# 
  3725  001A                     	;# 
  3726  001B                     	;# 
  3727  001C                     	;# 
  3728  001E                     	;# 
  3729  001F                     	;# 
  3730  008C                     	;# 
  3731  008D                     	;# 
  3732  008E                     	;# 
  3733  008F                     	;# 
  3734  0090                     	;# 
  3735  0091                     	;# 
  3736  0092                     	;# 
  3737  0093                     	;# 
  3738  0094                     	;# 
  3739  0095                     	;# 
  3740  0096                     	;# 
  3741  0097                     	;# 
  3742  0098                     	;# 
  3743  0099                     	;# 
  3744  009A                     	;# 
  3745  009B                     	;# 
  3746  009B                     	;# 
  3747  009C                     	;# 
  3748  009D                     	;# 
  3749  009E                     	;# 
  3750  010C                     	;# 
  3751  010D                     	;# 
  3752  010E                     	;# 
  3753  010F                     	;# 
  3754  0110                     	;# 
  3755  0111                     	;# 
  3756  0112                     	;# 
  3757  0113                     	;# 
  3758  0114                     	;# 
  3759  0115                     	;# 
  3760  0116                     	;# 
  3761  0117                     	;# 
  3762  0118                     	;# 
  3763  0119                     	;# 
  3764  011A                     	;# 
  3765  011B                     	;# 
  3766  011D                     	;# 
  3767  011E                     	;# 
  3768  011F                     	;# 
  3769  018C                     	;# 
  3770  0190                     	;# 
  3771  0191                     	;# 
  3772  0191                     	;# 
  3773  0192                     	;# 
  3774  0193                     	;# 
  3775  0193                     	;# 
  3776  0193                     	;# 
  3777  0194                     	;# 
  3778  0195                     	;# 
  3779  0196                     	;# 
  3780  0199                     	;# 
  3781  0199                     	;# 
  3782  019A                     	;# 
  3783  019A                     	;# 
  3784  019B                     	;# 
  3785  019B                     	;# 
  3786  019B                     	;# 
  3787  019B                     	;# 
  3788  019C                     	;# 
  3789  019C                     	;# 
  3790  019D                     	;# 
  3791  019D                     	;# 
  3792  019E                     	;# 
  3793  019E                     	;# 
  3794  019F                     	;# 
  3795  019F                     	;# 
  3796  020D                     	;# 
  3797  0211                     	;# 
  3798  0211                     	;# 
  3799  0212                     	;# 
  3800  0212                     	;# 
  3801  0213                     	;# 
  3802  0213                     	;# 
  3803  0214                     	;# 
  3804  0214                     	;# 
  3805  0215                     	;# 
  3806  0215                     	;# 
  3807  0215                     	;# 
  3808  0216                     	;# 
  3809  0216                     	;# 
  3810  0217                     	;# 
  3811  0217                     	;# 
  3812  0219                     	;# 
  3813  021A                     	;# 
  3814  021B                     	;# 
  3815  021C                     	;# 
  3816  021D                     	;# 
  3817  021E                     	;# 
  3818  021F                     	;# 
  3819  028C                     	;# 
  3820  028D                     	;# 
  3821  0291                     	;# 
  3822  0291                     	;# 
  3823  0292                     	;# 
  3824  0293                     	;# 
  3825  0294                     	;# 
  3826  0295                     	;# 
  3827  0295                     	;# 
  3828  0296                     	;# 
  3829  0298                     	;# 
  3830  0298                     	;# 
  3831  0299                     	;# 
  3832  029A                     	;# 
  3833  029B                     	;# 
  3834  029C                     	;# 
  3835  029C                     	;# 
  3836  029D                     	;# 
  3837  029E                     	;# 
  3838  029F                     	;# 
  3839  030C                     	;# 
  3840  030D                     	;# 
  3841  0311                     	;# 
  3842  0311                     	;# 
  3843  0312                     	;# 
  3844  0313                     	;# 
  3845  0314                     	;# 
  3846  0315                     	;# 
  3847  0315                     	;# 
  3848  0316                     	;# 
  3849  0318                     	;# 
  3850  0318                     	;# 
  3851  0319                     	;# 
  3852  031A                     	;# 
  3853  031C                     	;# 
  3854  031C                     	;# 
  3855  031D                     	;# 
  3856  031E                     	;# 
  3857  038C                     	;# 
  3858  038D                     	;# 
  3859  0394                     	;# 
  3860  0395                     	;# 
  3861  0396                     	;# 
  3862  040C                     	;# 
  3863  040D                     	;# 
  3864  0415                     	;# 
  3865  0416                     	;# 
  3866  0417                     	;# 
  3867  041C                     	;# 
  3868  041D                     	;# 
  3869  041E                     	;# 
  3870  048D                     	;# 
  3871  0491                     	;# 
  3872  0492                     	;# 
  3873  0493                     	;# 
  3874  0493                     	;# 
  3875  0494                     	;# 
  3876  0495                     	;# 
  3877  0496                     	;# 
  3878  0497                     	;# 
  3879  0791                     	;# 
  3880  0792                     	;# 
  3881  0793                     	;# 
  3882  0794                     	;# 
  3883  0795                     	;# 
  3884  0798                     	;# 
  3885  0799                     	;# 
  3886  079A                     	;# 
  3887  079B                     	;# 
  3888  079C                     	;# 
  3889  079D                     	;# 
  3890  07A0                     	;# 
  3891  07A1                     	;# 
  3892  07A2                     	;# 
  3893  07A3                     	;# 
  3894  07A4                     	;# 
  3895  07A5                     	;# 
  3896  07A6                     	;# 
  3897  07A7                     	;# 
  3898  07A8                     	;# 
  3899  07A9                     	;# 
  3900  07AA                     	;# 
  3901  07AB                     	;# 
  3902  07AC                     	;# 
  3903  07AD                     	;# 
  3904  07AE                     	;# 
  3905  07AF                     	;# 
  3906  07B0                     	;# 
  3907  07B1                     	;# 
  3908  07B2                     	;# 
  3909  07B3                     	;# 
  3910  07B4                     	;# 
  3911  07B5                     	;# 
  3912  07B6                     	;# 
  3913  07B7                     	;# 
  3914  0FE4                     	;# 
  3915  0FE5                     	;# 
  3916  0FE6                     	;# 
  3917  0FE7                     	;# 
  3918  0FE8                     	;# 
  3919  0FE9                     	;# 
  3920  0FEA                     	;# 
  3921  0FEB                     	;# 
  3922  0FED                     	;# 
  3923  0FEE                     	;# 
  3924  0FEF                     	;# 
  3925  0000                     	;# 
  3926  0001                     	;# 
  3927  0002                     	;# 
  3928  0003                     	;# 
  3929  0004                     	;# 
  3930  0005                     	;# 
  3931  0006                     	;# 
  3932  0007                     	;# 
  3933  0008                     	;# 
  3934  0009                     	;# 
  3935  000A                     	;# 
  3936  000B                     	;# 
  3937  000C                     	;# 
  3938  000D                     	;# 
  3939  000E                     	;# 
  3940  000F                     	;# 
  3941  0010                     	;# 
  3942  0011                     	;# 
  3943  0012                     	;# 
  3944  0013                     	;# 
  3945  0014                     	;# 
  3946  0015                     	;# 
  3947  0016                     	;# 
  3948  0016                     	;# 
  3949  0017                     	;# 
  3950  0018                     	;# 
  3951  0019                     	;# 
  3952  001A                     	;# 
  3953  001B                     	;# 
  3954  001C                     	;# 
  3955  001E                     	;# 
  3956  001F                     	;# 
  3957  008C                     	;# 
  3958  008D                     	;# 
  3959  008E                     	;# 
  3960  008F                     	;# 
  3961  0090                     	;# 
  3962  0091                     	;# 
  3963  0092                     	;# 
  3964  0093                     	;# 
  3965  0094                     	;# 
  3966  0095                     	;# 
  3967  0096                     	;# 
  3968  0097                     	;# 
  3969  0098                     	;# 
  3970  0099                     	;# 
  3971  009A                     	;# 
  3972  009B                     	;# 
  3973  009B                     	;# 
  3974  009C                     	;# 
  3975  009D                     	;# 
  3976  009E                     	;# 
  3977  010C                     	;# 
  3978  010D                     	;# 
  3979  010E                     	;# 
  3980  010F                     	;# 
  3981  0110                     	;# 
  3982  0111                     	;# 
  3983  0112                     	;# 
  3984  0113                     	;# 
  3985  0114                     	;# 
  3986  0115                     	;# 
  3987  0116                     	;# 
  3988  0117                     	;# 
  3989  0118                     	;# 
  3990  0119                     	;# 
  3991  011A                     	;# 
  3992  011B                     	;# 
  3993  011D                     	;# 
  3994  011E                     	;# 
  3995  011F                     	;# 
  3996  018C                     	;# 
  3997  0190                     	;# 
  3998  0191                     	;# 
  3999  0191                     	;# 
  4000  0192                     	;# 
  4001  0193                     	;# 
  4002  0193                     	;# 
  4003  0193                     	;# 
  4004  0194                     	;# 
  4005  0195                     	;# 
  4006  0196                     	;# 
  4007  0199                     	;# 
  4008  0199                     	;# 
  4009  019A                     	;# 
  4010  019A                     	;# 
  4011  019B                     	;# 
  4012  019B                     	;# 
  4013  019B                     	;# 
  4014  019B                     	;# 
  4015  019C                     	;# 
  4016  019C                     	;# 
  4017  019D                     	;# 
  4018  019D                     	;# 
  4019  019E                     	;# 
  4020  019E                     	;# 
  4021  019F                     	;# 
  4022  019F                     	;# 
  4023  020D                     	;# 
  4024  0211                     	;# 
  4025  0211                     	;# 
  4026  0212                     	;# 
  4027  0212                     	;# 
  4028  0213                     	;# 
  4029  0213                     	;# 
  4030  0214                     	;# 
  4031  0214                     	;# 
  4032  0215                     	;# 
  4033  0215                     	;# 
  4034  0215                     	;# 
  4035  0216                     	;# 
  4036  0216                     	;# 
  4037  0217                     	;# 
  4038  0217                     	;# 
  4039  0219                     	;# 
  4040  021A                     	;# 
  4041  021B                     	;# 
  4042  021C                     	;# 
  4043  021D                     	;# 
  4044  021E                     	;# 
  4045  021F                     	;# 
  4046  028C                     	;# 
  4047  028D                     	;# 
  4048  0291                     	;# 
  4049  0291                     	;# 
  4050  0292                     	;# 
  4051  0293                     	;# 
  4052  0294                     	;# 
  4053  0295                     	;# 
  4054  0295                     	;# 
  4055  0296                     	;# 
  4056  0298                     	;# 
  4057  0298                     	;# 
  4058  0299                     	;# 
  4059  029A                     	;# 
  4060  029B                     	;# 
  4061  029C                     	;# 
  4062  029C                     	;# 
  4063  029D                     	;# 
  4064  029E                     	;# 
  4065  029F                     	;# 
  4066  030C                     	;# 
  4067  030D                     	;# 
  4068  0311                     	;# 
  4069  0311                     	;# 
  4070  0312                     	;# 
  4071  0313                     	;# 
  4072  0314                     	;# 
  4073  0315                     	;# 
  4074  0315                     	;# 
  4075  0316                     	;# 
  4076  0318                     	;# 
  4077  0318                     	;# 
  4078  0319                     	;# 
  4079  031A                     	;# 
  4080  031C                     	;# 
  4081  031C                     	;# 
  4082  031D                     	;# 
  4083  031E                     	;# 
  4084  038C                     	;# 
  4085  038D                     	;# 
  4086  0394                     	;# 
  4087  0395                     	;# 
  4088  0396                     	;# 
  4089  040C                     	;# 
  4090  040D                     	;# 
  4091  0415                     	;# 
  4092  0416                     	;# 
  4093  0417                     	;# 
  4094  041C                     	;# 
  4095  041D                     	;# 
  4096  041E                     	;# 
  4097  048D                     	;# 
  4098  0491                     	;# 
  4099  0492                     	;# 
  4100  0493                     	;# 
  4101  0493                     	;# 
  4102  0494                     	;# 
  4103  0495                     	;# 
  4104  0496                     	;# 
  4105  0497                     	;# 
  4106  0791                     	;# 
  4107  0792                     	;# 
  4108  0793                     	;# 
  4109  0794                     	;# 
  4110  0795                     	;# 
  4111  0798                     	;# 
  4112  0799                     	;# 
  4113  079A                     	;# 
  4114  079B                     	;# 
  4115  079C                     	;# 
  4116  079D                     	;# 
  4117  07A0                     	;# 
  4118  07A1                     	;# 
  4119  07A2                     	;# 
  4120  07A3                     	;# 
  4121  07A4                     	;# 
  4122  07A5                     	;# 
  4123  07A6                     	;# 
  4124  07A7                     	;# 
  4125  07A8                     	;# 
  4126  07A9                     	;# 
  4127  07AA                     	;# 
  4128  07AB                     	;# 
  4129  07AC                     	;# 
  4130  07AD                     	;# 
  4131  07AE                     	;# 
  4132  07AF                     	;# 
  4133  07B0                     	;# 
  4134  07B1                     	;# 
  4135  07B2                     	;# 
  4136  07B3                     	;# 
  4137  07B4                     	;# 
  4138  07B5                     	;# 
  4139  07B6                     	;# 
  4140  07B7                     	;# 
  4141  0FE4                     	;# 
  4142  0FE5                     	;# 
  4143  0FE6                     	;# 
  4144  0FE7                     	;# 
  4145  0FE8                     	;# 
  4146  0FE9                     	;# 
  4147  0FEA                     	;# 
  4148  0FEB                     	;# 
  4149  0FED                     	;# 
  4150  0FEE                     	;# 
  4151  0FEF                     	;# 
  4152  0000                     	;# 
  4153  0001                     	;# 
  4154  0002                     	;# 
  4155  0003                     	;# 
  4156  0004                     	;# 
  4157  0005                     	;# 
  4158  0006                     	;# 
  4159  0007                     	;# 
  4160  0008                     	;# 
  4161  0009                     	;# 
  4162  000A                     	;# 
  4163  000B                     	;# 
  4164  000C                     	;# 
  4165  000D                     	;# 
  4166  000E                     	;# 
  4167  000F                     	;# 
  4168  0010                     	;# 
  4169  0011                     	;# 
  4170  0012                     	;# 
  4171  0013                     	;# 
  4172  0014                     	;# 
  4173  0015                     	;# 
  4174  0016                     	;# 
  4175  0016                     	;# 
  4176  0017                     	;# 
  4177  0018                     	;# 
  4178  0019                     	;# 
  4179  001A                     	;# 
  4180  001B                     	;# 
  4181  001C                     	;# 
  4182  001E                     	;# 
  4183  001F                     	;# 
  4184  008C                     	;# 
  4185  008D                     	;# 
  4186  008E                     	;# 
  4187  008F                     	;# 
  4188  0090                     	;# 
  4189  0091                     	;# 
  4190  0092                     	;# 
  4191  0093                     	;# 
  4192  0094                     	;# 
  4193  0095                     	;# 
  4194  0096                     	;# 
  4195  0097                     	;# 
  4196  0098                     	;# 
  4197  0099                     	;# 
  4198  009A                     	;# 
  4199  009B                     	;# 
  4200  009B                     	;# 
  4201  009C                     	;# 
  4202  009D                     	;# 
  4203  009E                     	;# 
  4204  010C                     	;# 
  4205  010D                     	;# 
  4206  010E                     	;# 
  4207  010F                     	;# 
  4208  0110                     	;# 
  4209  0111                     	;# 
  4210  0112                     	;# 
  4211  0113                     	;# 
  4212  0114                     	;# 
  4213  0115                     	;# 
  4214  0116                     	;# 
  4215  0117                     	;# 
  4216  0118                     	;# 
  4217  0119                     	;# 
  4218  011A                     	;# 
  4219  011B                     	;# 
  4220  011D                     	;# 
  4221  011E                     	;# 
  4222  011F                     	;# 
  4223  018C                     	;# 
  4224  0190                     	;# 
  4225  0191                     	;# 
  4226  0191                     	;# 
  4227  0192                     	;# 
  4228  0193                     	;# 
  4229  0193                     	;# 
  4230  0193                     	;# 
  4231  0194                     	;# 
  4232  0195                     	;# 
  4233  0196                     	;# 
  4234  0199                     	;# 
  4235  0199                     	;# 
  4236  019A                     	;# 
  4237  019A                     	;# 
  4238  019B                     	;# 
  4239  019B                     	;# 
  4240  019B                     	;# 
  4241  019B                     	;# 
  4242  019C                     	;# 
  4243  019C                     	;# 
  4244  019D                     	;# 
  4245  019D                     	;# 
  4246  019E                     	;# 
  4247  019E                     	;# 
  4248  019F                     	;# 
  4249  019F                     	;# 
  4250  020D                     	;# 
  4251  0211                     	;# 
  4252  0211                     	;# 
  4253  0212                     	;# 
  4254  0212                     	;# 
  4255  0213                     	;# 
  4256  0213                     	;# 
  4257  0214                     	;# 
  4258  0214                     	;# 
  4259  0215                     	;# 
  4260  0215                     	;# 
  4261  0215                     	;# 
  4262  0216                     	;# 
  4263  0216                     	;# 
  4264  0217                     	;# 
  4265  0217                     	;# 
  4266  0219                     	;# 
  4267  021A                     	;# 
  4268  021B                     	;# 
  4269  021C                     	;# 
  4270  021D                     	;# 
  4271  021E                     	;# 
  4272  021F                     	;# 
  4273  028C                     	;# 
  4274  028D                     	;# 
  4275  0291                     	;# 
  4276  0291                     	;# 
  4277  0292                     	;# 
  4278  0293                     	;# 
  4279  0294                     	;# 
  4280  0295                     	;# 
  4281  0295                     	;# 
  4282  0296                     	;# 
  4283  0298                     	;# 
  4284  0298                     	;# 
  4285  0299                     	;# 
  4286  029A                     	;# 
  4287  029B                     	;# 
  4288  029C                     	;# 
  4289  029C                     	;# 
  4290  029D                     	;# 
  4291  029E                     	;# 
  4292  029F                     	;# 
  4293  030C                     	;# 
  4294  030D                     	;# 
  4295  0311                     	;# 
  4296  0311                     	;# 
  4297  0312                     	;# 
  4298  0313                     	;# 
  4299  0314                     	;# 
  4300  0315                     	;# 
  4301  0315                     	;# 
  4302  0316                     	;# 
  4303  0318                     	;# 
  4304  0318                     	;# 
  4305  0319                     	;# 
  4306  031A                     	;# 
  4307  031C                     	;# 
  4308  031C                     	;# 
  4309  031D                     	;# 
  4310  031E                     	;# 
  4311  038C                     	;# 
  4312  038D                     	;# 
  4313  0394                     	;# 
  4314  0395                     	;# 
  4315  0396                     	;# 
  4316  040C                     	;# 
  4317  040D                     	;# 
  4318  0415                     	;# 
  4319  0416                     	;# 
  4320  0417                     	;# 
  4321  041C                     	;# 
  4322  041D                     	;# 
  4323  041E                     	;# 
  4324  048D                     	;# 
  4325  0491                     	;# 
  4326  0492                     	;# 
  4327  0493                     	;# 
  4328  0493                     	;# 
  4329  0494                     	;# 
  4330  0495                     	;# 
  4331  0496                     	;# 
  4332  0497                     	;# 
  4333  0791                     	;# 
  4334  0792                     	;# 
  4335  0793                     	;# 
  4336  0794                     	;# 
  4337  0795                     	;# 
  4338  0798                     	;# 
  4339  0799                     	;# 
  4340  079A                     	;# 
  4341  079B                     	;# 
  4342  079C                     	;# 
  4343  079D                     	;# 
  4344  07A0                     	;# 
  4345  07A1                     	;# 
  4346  07A2                     	;# 
  4347  07A3                     	;# 
  4348  07A4                     	;# 
  4349  07A5                     	;# 
  4350  07A6                     	;# 
  4351  07A7                     	;# 
  4352  07A8                     	;# 
  4353  07A9                     	;# 
  4354  07AA                     	;# 
  4355  07AB                     	;# 
  4356  07AC                     	;# 
  4357  07AD                     	;# 
  4358  07AE                     	;# 
  4359  07AF                     	;# 
  4360  07B0                     	;# 
  4361  07B1                     	;# 
  4362  07B2                     	;# 
  4363  07B3                     	;# 
  4364  07B4                     	;# 
  4365  07B5                     	;# 
  4366  07B6                     	;# 
  4367  07B7                     	;# 
  4368  0FE4                     	;# 
  4369  0FE5                     	;# 
  4370  0FE6                     	;# 
  4371  0FE7                     	;# 
  4372  0FE8                     	;# 
  4373  0FE9                     	;# 
  4374  0FEA                     	;# 
  4375  0FEB                     	;# 
  4376  0FED                     	;# 
  4377  0FEE                     	;# 
  4378  0FEF                     	;# 
  4379  0000                     	;# 
  4380  0001                     	;# 
  4381  0002                     	;# 
  4382  0003                     	;# 
  4383  0004                     	;# 
  4384  0005                     	;# 
  4385  0006                     	;# 
  4386  0007                     	;# 
  4387  0008                     	;# 
  4388  0009                     	;# 
  4389  000A                     	;# 
  4390  000B                     	;# 
  4391  000C                     	;# 
  4392  000D                     	;# 
  4393  000E                     	;# 
  4394  000F                     	;# 
  4395  0010                     	;# 
  4396  0011                     	;# 
  4397  0012                     	;# 
  4398  0013                     	;# 
  4399  0014                     	;# 
  4400  0015                     	;# 
  4401  0016                     	;# 
  4402  0016                     	;# 
  4403  0017                     	;# 
  4404  0018                     	;# 
  4405  0019                     	;# 
  4406  001A                     	;# 
  4407  001B                     	;# 
  4408  001C                     	;# 
  4409  001E                     	;# 
  4410  001F                     	;# 
  4411  008C                     	;# 
  4412  008D                     	;# 
  4413  008E                     	;# 
  4414  008F                     	;# 
  4415  0090                     	;# 
  4416  0091                     	;# 
  4417  0092                     	;# 
  4418  0093                     	;# 
  4419  0094                     	;# 
  4420  0095                     	;# 
  4421  0096                     	;# 
  4422  0097                     	;# 
  4423  0098                     	;# 
  4424  0099                     	;# 
  4425  009A                     	;# 
  4426  009B                     	;# 
  4427  009B                     	;# 
  4428  009C                     	;# 
  4429  009D                     	;# 
  4430  009E                     	;# 
  4431  010C                     	;# 
  4432  010D                     	;# 
  4433  010E                     	;# 
  4434  010F                     	;# 
  4435  0110                     	;# 
  4436  0111                     	;# 
  4437  0112                     	;# 
  4438  0113                     	;# 
  4439  0114                     	;# 
  4440  0115                     	;# 
  4441  0116                     	;# 
  4442  0117                     	;# 
  4443  0118                     	;# 
  4444  0119                     	;# 
  4445  011A                     	;# 
  4446  011B                     	;# 
  4447  011D                     	;# 
  4448  011E                     	;# 
  4449  011F                     	;# 
  4450  018C                     	;# 
  4451  0190                     	;# 
  4452  0191                     	;# 
  4453  0191                     	;# 
  4454  0192                     	;# 
  4455  0193                     	;# 
  4456  0193                     	;# 
  4457  0193                     	;# 
  4458  0194                     	;# 
  4459  0195                     	;# 
  4460  0196                     	;# 
  4461  0199                     	;# 
  4462  0199                     	;# 
  4463  019A                     	;# 
  4464  019A                     	;# 
  4465  019B                     	;# 
  4466  019B                     	;# 
  4467  019B                     	;# 
  4468  019B                     	;# 
  4469  019C                     	;# 
  4470  019C                     	;# 
  4471  019D                     	;# 
  4472  019D                     	;# 
  4473  019E                     	;# 
  4474  019E                     	;# 
  4475  019F                     	;# 
  4476  019F                     	;# 
  4477  020D                     	;# 
  4478  0211                     	;# 
  4479  0211                     	;# 
  4480  0212                     	;# 
  4481  0212                     	;# 
  4482  0213                     	;# 
  4483  0213                     	;# 
  4484  0214                     	;# 
  4485  0214                     	;# 
  4486  0215                     	;# 
  4487  0215                     	;# 
  4488  0215                     	;# 
  4489  0216                     	;# 
  4490  0216                     	;# 
  4491  0217                     	;# 
  4492  0217                     	;# 
  4493  0219                     	;# 
  4494  021A                     	;# 
  4495  021B                     	;# 
  4496  021C                     	;# 
  4497  021D                     	;# 
  4498  021E                     	;# 
  4499  021F                     	;# 
  4500  028C                     	;# 
  4501  028D                     	;# 
  4502  0291                     	;# 
  4503  0291                     	;# 
  4504  0292                     	;# 
  4505  0293                     	;# 
  4506  0294                     	;# 
  4507  0295                     	;# 
  4508  0295                     	;# 
  4509  0296                     	;# 
  4510  0298                     	;# 
  4511  0298                     	;# 
  4512  0299                     	;# 
  4513  029A                     	;# 
  4514  029B                     	;# 
  4515  029C                     	;# 
  4516  029C                     	;# 
  4517  029D                     	;# 
  4518  029E                     	;# 
  4519  029F                     	;# 
  4520  030C                     	;# 
  4521  030D                     	;# 
  4522  0311                     	;# 
  4523  0311                     	;# 
  4524  0312                     	;# 
  4525  0313                     	;# 
  4526  0314                     	;# 
  4527  0315                     	;# 
  4528  0315                     	;# 
  4529  0316                     	;# 
  4530  0318                     	;# 
  4531  0318                     	;# 
  4532  0319                     	;# 
  4533  031A                     	;# 
  4534  031C                     	;# 
  4535  031C                     	;# 
  4536  031D                     	;# 
  4537  031E                     	;# 
  4538  038C                     	;# 
  4539  038D                     	;# 
  4540  0394                     	;# 
  4541  0395                     	;# 
  4542  0396                     	;# 
  4543  040C                     	;# 
  4544  040D                     	;# 
  4545  0415                     	;# 
  4546  0416                     	;# 
  4547  0417                     	;# 
  4548  041C                     	;# 
  4549  041D                     	;# 
  4550  041E                     	;# 
  4551  048D                     	;# 
  4552  0491                     	;# 
  4553  0492                     	;# 
  4554  0493                     	;# 
  4555  0493                     	;# 
  4556  0494                     	;# 
  4557  0495                     	;# 
  4558  0496                     	;# 
  4559  0497                     	;# 
  4560  0791                     	;# 
  4561  0792                     	;# 
  4562  0793                     	;# 
  4563  0794                     	;# 
  4564  0795                     	;# 
  4565  0798                     	;# 
  4566  0799                     	;# 
  4567  079A                     	;# 
  4568  079B                     	;# 
  4569  079C                     	;# 
  4570  079D                     	;# 
  4571  07A0                     	;# 
  4572  07A1                     	;# 
  4573  07A2                     	;# 
  4574  07A3                     	;# 
  4575  07A4                     	;# 
  4576  07A5                     	;# 
  4577  07A6                     	;# 
  4578  07A7                     	;# 
  4579  07A8                     	;# 
  4580  07A9                     	;# 
  4581  07AA                     	;# 
  4582  07AB                     	;# 
  4583  07AC                     	;# 
  4584  07AD                     	;# 
  4585  07AE                     	;# 
  4586  07AF                     	;# 
  4587  07B0                     	;# 
  4588  07B1                     	;# 
  4589  07B2                     	;# 
  4590  07B3                     	;# 
  4591  07B4                     	;# 
  4592  07B5                     	;# 
  4593  07B6                     	;# 
  4594  07B7                     	;# 
  4595  0FE4                     	;# 
  4596  0FE5                     	;# 
  4597  0FE6                     	;# 
  4598  0FE7                     	;# 
  4599  0FE8                     	;# 
  4600  0FE9                     	;# 
  4601  0FEA                     	;# 
  4602  0FEB                     	;# 
  4603  0FED                     	;# 
  4604  0FEE                     	;# 
  4605  0FEF                     	;# 
  4606  0000                     	;# 
  4607  0001                     	;# 
  4608  0002                     	;# 
  4609  0003                     	;# 
  4610  0004                     	;# 
  4611  0005                     	;# 
  4612  0006                     	;# 
  4613  0007                     	;# 
  4614  0008                     	;# 
  4615  0009                     	;# 
  4616  000A                     	;# 
  4617  000B                     	;# 
  4618  000C                     	;# 
  4619  000D                     	;# 
  4620  000E                     	;# 
  4621  000F                     	;# 
  4622  0010                     	;# 
  4623  0011                     	;# 
  4624  0012                     	;# 
  4625  0013                     	;# 
  4626  0014                     	;# 
  4627  0015                     	;# 
  4628  0016                     	;# 
  4629  0016                     	;# 
  4630  0017                     	;# 
  4631  0018                     	;# 
  4632  0019                     	;# 
  4633  001A                     	;# 
  4634  001B                     	;# 
  4635  001C                     	;# 
  4636  001E                     	;# 
  4637  001F                     	;# 
  4638  008C                     	;# 
  4639  008D                     	;# 
  4640  008E                     	;# 
  4641  008F                     	;# 
  4642  0090                     	;# 
  4643  0091                     	;# 
  4644  0092                     	;# 
  4645  0093                     	;# 
  4646  0094                     	;# 
  4647  0095                     	;# 
  4648  0096                     	;# 
  4649  0097                     	;# 
  4650  0098                     	;# 
  4651  0099                     	;# 
  4652  009A                     	;# 
  4653  009B                     	;# 
  4654  009B                     	;# 
  4655  009C                     	;# 
  4656  009D                     	;# 
  4657  009E                     	;# 
  4658  010C                     	;# 
  4659  010D                     	;# 
  4660  010E                     	;# 
  4661  010F                     	;# 
  4662  0110                     	;# 
  4663  0111                     	;# 
  4664  0112                     	;# 
  4665  0113                     	;# 
  4666  0114                     	;# 
  4667  0115                     	;# 
  4668  0116                     	;# 
  4669  0117                     	;# 
  4670  0118                     	;# 
  4671  0119                     	;# 
  4672  011A                     	;# 
  4673  011B                     	;# 
  4674  011D                     	;# 
  4675  011E                     	;# 
  4676  011F                     	;# 
  4677  018C                     	;# 
  4678  0190                     	;# 
  4679  0191                     	;# 
  4680  0191                     	;# 
  4681  0192                     	;# 
  4682  0193                     	;# 
  4683  0193                     	;# 
  4684  0193                     	;# 
  4685  0194                     	;# 
  4686  0195                     	;# 
  4687  0196                     	;# 
  4688  0199                     	;# 
  4689  0199                     	;# 
  4690  019A                     	;# 
  4691  019A                     	;# 
  4692  019B                     	;# 
  4693  019B                     	;# 
  4694  019B                     	;# 
  4695  019B                     	;# 
  4696  019C                     	;# 
  4697  019C                     	;# 
  4698  019D                     	;# 
  4699  019D                     	;# 
  4700  019E                     	;# 
  4701  019E                     	;# 
  4702  019F                     	;# 
  4703  019F                     	;# 
  4704  020D                     	;# 
  4705  0211                     	;# 
  4706  0211                     	;# 
  4707  0212                     	;# 
  4708  0212                     	;# 
  4709  0213                     	;# 
  4710  0213                     	;# 
  4711  0214                     	;# 
  4712  0214                     	;# 
  4713  0215                     	;# 
  4714  0215                     	;# 
  4715  0215                     	;# 
  4716  0216                     	;# 
  4717  0216                     	;# 
  4718  0217                     	;# 
  4719  0217                     	;# 
  4720  0219                     	;# 
  4721  021A                     	;# 
  4722  021B                     	;# 
  4723  021C                     	;# 
  4724  021D                     	;# 
  4725  021E                     	;# 
  4726  021F                     	;# 
  4727  028C                     	;# 
  4728  028D                     	;# 
  4729  0291                     	;# 
  4730  0291                     	;# 
  4731  0292                     	;# 
  4732  0293                     	;# 
  4733  0294                     	;# 
  4734  0295                     	;# 
  4735  0295                     	;# 
  4736  0296                     	;# 
  4737  0298                     	;# 
  4738  0298                     	;# 
  4739  0299                     	;# 
  4740  029A                     	;# 
  4741  029B                     	;# 
  4742  029C                     	;# 
  4743  029C                     	;# 
  4744  029D                     	;# 
  4745  029E                     	;# 
  4746  029F                     	;# 
  4747  030C                     	;# 
  4748  030D                     	;# 
  4749  0311                     	;# 
  4750  0311                     	;# 
  4751  0312                     	;# 
  4752  0313                     	;# 
  4753  0314                     	;# 
  4754  0315                     	;# 
  4755  0315                     	;# 
  4756  0316                     	;# 
  4757  0318                     	;# 
  4758  0318                     	;# 
  4759  0319                     	;# 
  4760  031A                     	;# 
  4761  031C                     	;# 
  4762  031C                     	;# 
  4763  031D                     	;# 
  4764  031E                     	;# 
  4765  038C                     	;# 
  4766  038D                     	;# 
  4767  0394                     	;# 
  4768  0395                     	;# 
  4769  0396                     	;# 
  4770  040C                     	;# 
  4771  040D                     	;# 
  4772  0415                     	;# 
  4773  0416                     	;# 
  4774  0417                     	;# 
  4775  041C                     	;# 
  4776  041D                     	;# 
  4777  041E                     	;# 
  4778  048D                     	;# 
  4779  0491                     	;# 
  4780  0492                     	;# 
  4781  0493                     	;# 
  4782  0493                     	;# 
  4783  0494                     	;# 
  4784  0495                     	;# 
  4785  0496                     	;# 
  4786  0497                     	;# 
  4787  0791                     	;# 
  4788  0792                     	;# 
  4789  0793                     	;# 
  4790  0794                     	;# 
  4791  0795                     	;# 
  4792  0798                     	;# 
  4793  0799                     	;# 
  4794  079A                     	;# 
  4795  079B                     	;# 
  4796  079C                     	;# 
  4797  079D                     	;# 
  4798  07A0                     	;# 
  4799  07A1                     	;# 
  4800  07A2                     	;# 
  4801  07A3                     	;# 
  4802  07A4                     	;# 
  4803  07A5                     	;# 
  4804  07A6                     	;# 
  4805  07A7                     	;# 
  4806  07A8                     	;# 
  4807  07A9                     	;# 
  4808  07AA                     	;# 
  4809  07AB                     	;# 
  4810  07AC                     	;# 
  4811  07AD                     	;# 
  4812  07AE                     	;# 
  4813  07AF                     	;# 
  4814  07B0                     	;# 
  4815  07B1                     	;# 
  4816  07B2                     	;# 
  4817  07B3                     	;# 
  4818  07B4                     	;# 
  4819  07B5                     	;# 
  4820  07B6                     	;# 
  4821  07B7                     	;# 
  4822  0FE4                     	;# 
  4823  0FE5                     	;# 
  4824  0FE6                     	;# 
  4825  0FE7                     	;# 
  4826  0FE8                     	;# 
  4827  0FE9                     	;# 
  4828  0FEA                     	;# 
  4829  0FEB                     	;# 
  4830  0FED                     	;# 
  4831  0FEE                     	;# 
  4832  0FEF                     	;# 
  4833  0000                     	;# 
  4834  0001                     	;# 
  4835  0002                     	;# 
  4836  0003                     	;# 
  4837  0004                     	;# 
  4838  0005                     	;# 
  4839  0006                     	;# 
  4840  0007                     	;# 
  4841  0008                     	;# 
  4842  0009                     	;# 
  4843  000A                     	;# 
  4844  000B                     	;# 
  4845  000C                     	;# 
  4846  000D                     	;# 
  4847  000E                     	;# 
  4848  000F                     	;# 
  4849  0010                     	;# 
  4850  0011                     	;# 
  4851  0012                     	;# 
  4852  0013                     	;# 
  4853  0014                     	;# 
  4854  0015                     	;# 
  4855  0016                     	;# 
  4856  0016                     	;# 
  4857  0017                     	;# 
  4858  0018                     	;# 
  4859  0019                     	;# 
  4860  001A                     	;# 
  4861  001B                     	;# 
  4862  001C                     	;# 
  4863  001E                     	;# 
  4864  001F                     	;# 
  4865  008C                     	;# 
  4866  008D                     	;# 
  4867  008E                     	;# 
  4868  008F                     	;# 
  4869  0090                     	;# 
  4870  0091                     	;# 
  4871  0092                     	;# 
  4872  0093                     	;# 
  4873  0094                     	;# 
  4874  0095                     	;# 
  4875  0096                     	;# 
  4876  0097                     	;# 
  4877  0098                     	;# 
  4878  0099                     	;# 
  4879  009A                     	;# 
  4880  009B                     	;# 
  4881  009B                     	;# 
  4882  009C                     	;# 
  4883  009D                     	;# 
  4884  009E                     	;# 
  4885  010C                     	;# 
  4886  010D                     	;# 
  4887  010E                     	;# 
  4888  010F                     	;# 
  4889  0110                     	;# 
  4890  0111                     	;# 
  4891  0112                     	;# 
  4892  0113                     	;# 
  4893  0114                     	;# 
  4894  0115                     	;# 
  4895  0116                     	;# 
  4896  0117                     	;# 
  4897  0118                     	;# 
  4898  0119                     	;# 
  4899  011A                     	;# 
  4900  011B                     	;# 
  4901  011D                     	;# 
  4902  011E                     	;# 
  4903  011F                     	;# 
  4904  018C                     	;# 
  4905  0190                     	;# 
  4906  0191                     	;# 
  4907  0191                     	;# 
  4908  0192                     	;# 
  4909  0193                     	;# 
  4910  0193                     	;# 
  4911  0193                     	;# 
  4912  0194                     	;# 
  4913  0195                     	;# 
  4914  0196                     	;# 
  4915  0199                     	;# 
  4916  0199                     	;# 
  4917  019A                     	;# 
  4918  019A                     	;# 
  4919  019B                     	;# 
  4920  019B                     	;# 
  4921  019B                     	;# 
  4922  019B                     	;# 
  4923  019C                     	;# 
  4924  019C                     	;# 
  4925  019D                     	;# 
  4926  019D                     	;# 
  4927  019E                     	;# 
  4928  019E                     	;# 
  4929  019F                     	;# 
  4930  019F                     	;# 
  4931  020D                     	;# 
  4932  0211                     	;# 
  4933  0211                     	;# 
  4934  0212                     	;# 
  4935  0212                     	;# 
  4936  0213                     	;# 
  4937  0213                     	;# 
  4938  0214                     	;# 
  4939  0214                     	;# 
  4940  0215                     	;# 
  4941  0215                     	;# 
  4942  0215                     	;# 
  4943  0216                     	;# 
  4944  0216                     	;# 
  4945  0217                     	;# 
  4946  0217                     	;# 
  4947  0219                     	;# 
  4948  021A                     	;# 
  4949  021B                     	;# 
  4950  021C                     	;# 
  4951  021D                     	;# 
  4952  021E                     	;# 
  4953  021F                     	;# 
  4954  028C                     	;# 
  4955  028D                     	;# 
  4956  0291                     	;# 
  4957  0291                     	;# 
  4958  0292                     	;# 
  4959  0293                     	;# 
  4960  0294                     	;# 
  4961  0295                     	;# 
  4962  0295                     	;# 
  4963  0296                     	;# 
  4964  0298                     	;# 
  4965  0298                     	;# 
  4966  0299                     	;# 
  4967  029A                     	;# 
  4968  029B                     	;# 
  4969  029C                     	;# 
  4970  029C                     	;# 
  4971  029D                     	;# 
  4972  029E                     	;# 
  4973  029F                     	;# 
  4974  030C                     	;# 
  4975  030D                     	;# 
  4976  0311                     	;# 
  4977  0311                     	;# 
  4978  0312                     	;# 
  4979  0313                     	;# 
  4980  0314                     	;# 
  4981  0315                     	;# 
  4982  0315                     	;# 
  4983  0316                     	;# 
  4984  0318                     	;# 
  4985  0318                     	;# 
  4986  0319                     	;# 
  4987  031A                     	;# 
  4988  031C                     	;# 
  4989  031C                     	;# 
  4990  031D                     	;# 
  4991  031E                     	;# 
  4992  038C                     	;# 
  4993  038D                     	;# 
  4994  0394                     	;# 
  4995  0395                     	;# 
  4996  0396                     	;# 
  4997  040C                     	;# 
  4998  040D                     	;# 
  4999  0415                     	;# 
  5000  0416                     	;# 
  5001  0417                     	;# 
  5002  041C                     	;# 
  5003  041D                     	;# 
  5004  041E                     	;# 
  5005  048D                     	;# 
  5006  0491                     	;# 
  5007  0492                     	;# 
  5008  0493                     	;# 
  5009  0493                     	;# 
  5010  0494                     	;# 
  5011  0495                     	;# 
  5012  0496                     	;# 
  5013  0497                     	;# 
  5014  0791                     	;# 
  5015  0792                     	;# 
  5016  0793                     	;# 
  5017  0794                     	;# 
  5018  0795                     	;# 
  5019  0798                     	;# 
  5020  0799                     	;# 
  5021  079A                     	;# 
  5022  079B                     	;# 
  5023  079C                     	;# 
  5024  079D                     	;# 
  5025  07A0                     	;# 
  5026  07A1                     	;# 
  5027  07A2                     	;# 
  5028  07A3                     	;# 
  5029  07A4                     	;# 
  5030  07A5                     	;# 
  5031  07A6                     	;# 
  5032  07A7                     	;# 
  5033  07A8                     	;# 
  5034  07A9                     	;# 
  5035  07AA                     	;# 
  5036  07AB                     	;# 
  5037  07AC                     	;# 
  5038  07AD                     	;# 
  5039  07AE                     	;# 
  5040  07AF                     	;# 
  5041  07B0                     	;# 
  5042  07B1                     	;# 
  5043  07B2                     	;# 
  5044  07B3                     	;# 
  5045  07B4                     	;# 
  5046  07B5                     	;# 
  5047  07B6                     	;# 
  5048  07B7                     	;# 
  5049  0FE4                     	;# 
  5050  0FE5                     	;# 
  5051  0FE6                     	;# 
  5052  0FE7                     	;# 
  5053  0FE8                     	;# 
  5054  0FE9                     	;# 
  5055  0FEA                     	;# 
  5056  0FEB                     	;# 
  5057  0FED                     	;# 
  5058  0FEE                     	;# 
  5059  0FEF                     	;# 
  5060  0000                     	;# 
  5061  0001                     	;# 
  5062  0002                     	;# 
  5063  0003                     	;# 
  5064  0004                     	;# 
  5065  0005                     	;# 
  5066  0006                     	;# 
  5067  0007                     	;# 
  5068  0008                     	;# 
  5069  0009                     	;# 
  5070  000A                     	;# 
  5071  000B                     	;# 
  5072  000C                     	;# 
  5073  000D                     	;# 
  5074  000E                     	;# 
  5075  000F                     	;# 
  5076  0010                     	;# 
  5077  0011                     	;# 
  5078  0012                     	;# 
  5079  0013                     	;# 
  5080  0014                     	;# 
  5081  0015                     	;# 
  5082  0016                     	;# 
  5083  0016                     	;# 
  5084  0017                     	;# 
  5085  0018                     	;# 
  5086  0019                     	;# 
  5087  001A                     	;# 
  5088  001B                     	;# 
  5089  001C                     	;# 
  5090  001E                     	;# 
  5091  001F                     	;# 
  5092  008C                     	;# 
  5093  008D                     	;# 
  5094  008E                     	;# 
  5095  008F                     	;# 
  5096  0090                     	;# 
  5097  0091                     	;# 
  5098  0092                     	;# 
  5099  0093                     	;# 
  5100  0094                     	;# 
  5101  0095                     	;# 
  5102  0096                     	;# 
  5103  0097                     	;# 
  5104  0098                     	;# 
  5105  0099                     	;# 
  5106  009A                     	;# 
  5107  009B                     	;# 
  5108  009B                     	;# 
  5109  009C                     	;# 
  5110  009D                     	;# 
  5111  009E                     	;# 
  5112  010C                     	;# 
  5113  010D                     	;# 
  5114  010E                     	;# 
  5115  010F                     	;# 
  5116  0110                     	;# 
  5117  0111                     	;# 
  5118  0112                     	;# 
  5119  0113                     	;# 
  5120  0114                     	;# 
  5121  0115                     	;# 
  5122  0116                     	;# 
  5123  0117                     	;# 
  5124  0118                     	;# 
  5125  0119                     	;# 
  5126  011A                     	;# 
  5127  011B                     	;# 
  5128  011D                     	;# 
  5129  011E                     	;# 
  5130  011F                     	;# 
  5131  018C                     	;# 
  5132  0190                     	;# 
  5133  0191                     	;# 
  5134  0191                     	;# 
  5135  0192                     	;# 
  5136  0193                     	;# 
  5137  0193                     	;# 
  5138  0193                     	;# 
  5139  0194                     	;# 
  5140  0195                     	;# 
  5141  0196                     	;# 
  5142  0199                     	;# 
  5143  0199                     	;# 
  5144  019A                     	;# 
  5145  019A                     	;# 
  5146  019B                     	;# 
  5147  019B                     	;# 
  5148  019B                     	;# 
  5149  019B                     	;# 
  5150  019C                     	;# 
  5151  019C                     	;# 
  5152  019D                     	;# 
  5153  019D                     	;# 
  5154  019E                     	;# 
  5155  019E                     	;# 
  5156  019F                     	;# 
  5157  019F                     	;# 
  5158  020D                     	;# 
  5159  0211                     	;# 
  5160  0211                     	;# 
  5161  0212                     	;# 
  5162  0212                     	;# 
  5163  0213                     	;# 
  5164  0213                     	;# 
  5165  0214                     	;# 
  5166  0214                     	;# 
  5167  0215                     	;# 
  5168  0215                     	;# 
  5169  0215                     	;# 
  5170  0216                     	;# 
  5171  0216                     	;# 
  5172  0217                     	;# 
  5173  0217                     	;# 
  5174  0219                     	;# 
  5175  021A                     	;# 
  5176  021B                     	;# 
  5177  021C                     	;# 
  5178  021D                     	;# 
  5179  021E                     	;# 
  5180  021F                     	;# 
  5181  028C                     	;# 
  5182  028D                     	;# 
  5183  0291                     	;# 
  5184  0291                     	;# 
  5185  0292                     	;# 
  5186  0293                     	;# 
  5187  0294                     	;# 
  5188  0295                     	;# 
  5189  0295                     	;# 
  5190  0296                     	;# 
  5191  0298                     	;# 
  5192  0298                     	;# 
  5193  0299                     	;# 
  5194  029A                     	;# 
  5195  029B                     	;# 
  5196  029C                     	;# 
  5197  029C                     	;# 
  5198  029D                     	;# 
  5199  029E                     	;# 
  5200  029F                     	;# 
  5201  030C                     	;# 
  5202  030D                     	;# 
  5203  0311                     	;# 
  5204  0311                     	;# 
  5205  0312                     	;# 
  5206  0313                     	;# 
  5207  0314                     	;# 
  5208  0315                     	;# 
  5209  0315                     	;# 
  5210  0316                     	;# 
  5211  0318                     	;# 
  5212  0318                     	;# 
  5213  0319                     	;# 
  5214  031A                     	;# 
  5215  031C                     	;# 
  5216  031C                     	;# 
  5217  031D                     	;# 
  5218  031E                     	;# 
  5219  038C                     	;# 
  5220  038D                     	;# 
  5221  0394                     	;# 
  5222  0395                     	;# 
  5223  0396                     	;# 
  5224  040C                     	;# 
  5225  040D                     	;# 
  5226  0415                     	;# 
  5227  0416                     	;# 
  5228  0417                     	;# 
  5229  041C                     	;# 
  5230  041D                     	;# 
  5231  041E                     	;# 
  5232  048D                     	;# 
  5233  0491                     	;# 
  5234  0492                     	;# 
  5235  0493                     	;# 
  5236  0493                     	;# 
  5237  0494                     	;# 
  5238  0495                     	;# 
  5239  0496                     	;# 
  5240  0497                     	;# 
  5241  0791                     	;# 
  5242  0792                     	;# 
  5243  0793                     	;# 
  5244  0794                     	;# 
  5245  0795                     	;# 
  5246  0798                     	;# 
  5247  0799                     	;# 
  5248  079A                     	;# 
  5249  079B                     	;# 
  5250  079C                     	;# 
  5251  079D                     	;# 
  5252  07A0                     	;# 
  5253  07A1                     	;# 
  5254  07A2                     	;# 
  5255  07A3                     	;# 
  5256  07A4                     	;# 
  5257  07A5                     	;# 
  5258  07A6                     	;# 
  5259  07A7                     	;# 
  5260  07A8                     	;# 
  5261  07A9                     	;# 
  5262  07AA                     	;# 
  5263  07AB                     	;# 
  5264  07AC                     	;# 
  5265  07AD                     	;# 
  5266  07AE                     	;# 
  5267  07AF                     	;# 
  5268  07B0                     	;# 
  5269  07B1                     	;# 
  5270  07B2                     	;# 
  5271  07B3                     	;# 
  5272  07B4                     	;# 
  5273  07B5                     	;# 
  5274  07B6                     	;# 
  5275  07B7                     	;# 
  5276  0FE4                     	;# 
  5277  0FE5                     	;# 
  5278  0FE6                     	;# 
  5279  0FE7                     	;# 
  5280  0FE8                     	;# 
  5281  0FE9                     	;# 
  5282  0FEA                     	;# 
  5283  0FEB                     	;# 
  5284  0FED                     	;# 
  5285  0FEE                     	;# 
  5286  0FEF                     	;# 
  5287  0000                     	;# 
  5288  0001                     	;# 
  5289  0002                     	;# 
  5290  0003                     	;# 
  5291  0004                     	;# 
  5292  0005                     	;# 
  5293  0006                     	;# 
  5294  0007                     	;# 
  5295  0008                     	;# 
  5296  0009                     	;# 
  5297  000A                     	;# 
  5298  000B                     	;# 
  5299  000C                     	;# 
  5300  000D                     	;# 
  5301  000E                     	;# 
  5302  000F                     	;# 
  5303  0010                     	;# 
  5304  0011                     	;# 
  5305  0012                     	;# 
  5306  0013                     	;# 
  5307  0014                     	;# 
  5308  0015                     	;# 
  5309  0016                     	;# 
  5310  0016                     	;# 
  5311  0017                     	;# 
  5312  0018                     	;# 
  5313  0019                     	;# 
  5314  001A                     	;# 
  5315  001B                     	;# 
  5316  001C                     	;# 
  5317  001E                     	;# 
  5318  001F                     	;# 
  5319  008C                     	;# 
  5320  008D                     	;# 
  5321  008E                     	;# 
  5322  008F                     	;# 
  5323  0090                     	;# 
  5324  0091                     	;# 
  5325  0092                     	;# 
  5326  0093                     	;# 
  5327  0094                     	;# 
  5328  0095                     	;# 
  5329  0096                     	;# 
  5330  0097                     	;# 
  5331  0098                     	;# 
  5332  0099                     	;# 
  5333  009A                     	;# 
  5334  009B                     	;# 
  5335  009B                     	;# 
  5336  009C                     	;# 
  5337  009D                     	;# 
  5338  009E                     	;# 
  5339  010C                     	;# 
  5340  010D                     	;# 
  5341  010E                     	;# 
  5342  010F                     	;# 
  5343  0110                     	;# 
  5344  0111                     	;# 
  5345  0112                     	;# 
  5346  0113                     	;# 
  5347  0114                     	;# 
  5348  0115                     	;# 
  5349  0116                     	;# 
  5350  0117                     	;# 
  5351  0118                     	;# 
  5352  0119                     	;# 
  5353  011A                     	;# 
  5354  011B                     	;# 
  5355  011D                     	;# 
  5356  011E                     	;# 
  5357  011F                     	;# 
  5358  018C                     	;# 
  5359  0190                     	;# 
  5360  0191                     	;# 
  5361  0191                     	;# 
  5362  0192                     	;# 
  5363  0193                     	;# 
  5364  0193                     	;# 
  5365  0193                     	;# 
  5366  0194                     	;# 
  5367  0195                     	;# 
  5368  0196                     	;# 
  5369  0199                     	;# 
  5370  0199                     	;# 
  5371  019A                     	;# 
  5372  019A                     	;# 
  5373  019B                     	;# 
  5374  019B                     	;# 
  5375  019B                     	;# 
  5376  019B                     	;# 
  5377  019C                     	;# 
  5378  019C                     	;# 
  5379  019D                     	;# 
  5380  019D                     	;# 
  5381  019E                     	;# 
  5382  019E                     	;# 
  5383  019F                     	;# 
  5384  019F                     	;# 
  5385  020D                     	;# 
  5386  0211                     	;# 
  5387  0211                     	;# 
  5388  0212                     	;# 
  5389  0212                     	;# 
  5390  0213                     	;# 
  5391  0213                     	;# 
  5392  0214                     	;# 
  5393  0214                     	;# 
  5394  0215                     	;# 
  5395  0215                     	;# 
  5396  0215                     	;# 
  5397  0216                     	;# 
  5398  0216                     	;# 
  5399  0217                     	;# 
  5400  0217                     	;# 
  5401  0219                     	;# 
  5402  021A                     	;# 
  5403  021B                     	;# 
  5404  021C                     	;# 
  5405  021D                     	;# 
  5406  021E                     	;# 
  5407  021F                     	;# 
  5408  028C                     	;# 
  5409  028D                     	;# 
  5410  0291                     	;# 
  5411  0291                     	;# 
  5412  0292                     	;# 
  5413  0293                     	;# 
  5414  0294                     	;# 
  5415  0295                     	;# 
  5416  0295                     	;# 
  5417  0296                     	;# 
  5418  0298                     	;# 
  5419  0298                     	;# 
  5420  0299                     	;# 
  5421  029A                     	;# 
  5422  029B                     	;# 
  5423  029C                     	;# 
  5424  029C                     	;# 
  5425  029D                     	;# 
  5426  029E                     	;# 
  5427  029F                     	;# 
  5428  030C                     	;# 
  5429  030D                     	;# 
  5430  0311                     	;# 
  5431  0311                     	;# 
  5432  0312                     	;# 
  5433  0313                     	;# 
  5434  0314                     	;# 
  5435  0315                     	;# 
  5436  0315                     	;# 
  5437  0316                     	;# 
  5438  0318                     	;# 
  5439  0318                     	;# 
  5440  0319                     	;# 
  5441  031A                     	;# 
  5442  031C                     	;# 
  5443  031C                     	;# 
  5444  031D                     	;# 
  5445  031E                     	;# 
  5446  038C                     	;# 
  5447  038D                     	;# 
  5448  0394                     	;# 
  5449  0395                     	;# 
  5450  0396                     	;# 
  5451  040C                     	;# 
  5452  040D                     	;# 
  5453  0415                     	;# 
  5454  0416                     	;# 
  5455  0417                     	;# 
  5456  041C                     	;# 
  5457  041D                     	;# 
  5458  041E                     	;# 
  5459  048D                     	;# 
  5460  0491                     	;# 
  5461  0492                     	;# 
  5462  0493                     	;# 
  5463  0493                     	;# 
  5464  0494                     	;# 
  5465  0495                     	;# 
  5466  0496                     	;# 
  5467  0497                     	;# 
  5468  0791                     	;# 
  5469  0792                     	;# 
  5470  0793                     	;# 
  5471  0794                     	;# 
  5472  0795                     	;# 
  5473  0798                     	;# 
  5474  0799                     	;# 
  5475  079A                     	;# 
  5476  079B                     	;# 
  5477  079C                     	;# 
  5478  079D                     	;# 
  5479  07A0                     	;# 
  5480  07A1                     	;# 
  5481  07A2                     	;# 
  5482  07A3                     	;# 
  5483  07A4                     	;# 
  5484  07A5                     	;# 
  5485  07A6                     	;# 
  5486  07A7                     	;# 
  5487  07A8                     	;# 
  5488  07A9                     	;# 
  5489  07AA                     	;# 
  5490  07AB                     	;# 
  5491  07AC                     	;# 
  5492  07AD                     	;# 
  5493  07AE                     	;# 
  5494  07AF                     	;# 
  5495  07B0                     	;# 
  5496  07B1                     	;# 
  5497  07B2                     	;# 
  5498  07B3                     	;# 
  5499  07B4                     	;# 
  5500  07B5                     	;# 
  5501  07B6                     	;# 
  5502  07B7                     	;# 
  5503  0FE4                     	;# 
  5504  0FE5                     	;# 
  5505  0FE6                     	;# 
  5506  0FE7                     	;# 
  5507  0FE8                     	;# 
  5508  0FE9                     	;# 
  5509  0FEA                     	;# 
  5510  0FEB                     	;# 
  5511  0FED                     	;# 
  5512  0FEE                     	;# 
  5513  0FEF                     	;# 
  5514  0000                     	;# 
  5515  0001                     	;# 
  5516  0002                     	;# 
  5517  0003                     	;# 
  5518  0004                     	;# 
  5519  0005                     	;# 
  5520  0006                     	;# 
  5521  0007                     	;# 
  5522  0008                     	;# 
  5523  0009                     	;# 
  5524  000A                     	;# 
  5525  000B                     	;# 
  5526  000C                     	;# 
  5527  000D                     	;# 
  5528  000E                     	;# 
  5529  000F                     	;# 
  5530  0010                     	;# 
  5531  0011                     	;# 
  5532  0012                     	;# 
  5533  0013                     	;# 
  5534  0014                     	;# 
  5535  0015                     	;# 
  5536  0016                     	;# 
  5537  0016                     	;# 
  5538  0017                     	;# 
  5539  0018                     	;# 
  5540  0019                     	;# 
  5541  001A                     	;# 
  5542  001B                     	;# 
  5543  001C                     	;# 
  5544  001E                     	;# 
  5545  001F                     	;# 
  5546  008C                     	;# 
  5547  008D                     	;# 
  5548  008E                     	;# 
  5549  008F                     	;# 
  5550  0090                     	;# 
  5551  0091                     	;# 
  5552  0092                     	;# 
  5553  0093                     	;# 
  5554  0094                     	;# 
  5555  0095                     	;# 
  5556  0096                     	;# 
  5557  0097                     	;# 
  5558  0098                     	;# 
  5559  0099                     	;# 
  5560  009A                     	;# 
  5561  009B                     	;# 
  5562  009B                     	;# 
  5563  009C                     	;# 
  5564  009D                     	;# 
  5565  009E                     	;# 
  5566  010C                     	;# 
  5567  010D                     	;# 
  5568  010E                     	;# 
  5569  010F                     	;# 
  5570  0110                     	;# 
  5571  0111                     	;# 
  5572  0112                     	;# 
  5573  0113                     	;# 
  5574  0114                     	;# 
  5575  0115                     	;# 
  5576  0116                     	;# 
  5577  0117                     	;# 
  5578  0118                     	;# 
  5579  0119                     	;# 
  5580  011A                     	;# 
  5581  011B                     	;# 
  5582  011D                     	;# 
  5583  011E                     	;# 
  5584  011F                     	;# 
  5585  018C                     	;# 
  5586  0190                     	;# 
  5587  0191                     	;# 
  5588  0191                     	;# 
  5589  0192                     	;# 
  5590  0193                     	;# 
  5591  0193                     	;# 
  5592  0193                     	;# 
  5593  0194                     	;# 
  5594  0195                     	;# 
  5595  0196                     	;# 
  5596  0199                     	;# 
  5597  0199                     	;# 
  5598  019A                     	;# 
  5599  019A                     	;# 
  5600  019B                     	;# 
  5601  019B                     	;# 
  5602  019B                     	;# 
  5603  019B                     	;# 
  5604  019C                     	;# 
  5605  019C                     	;# 
  5606  019D                     	;# 
  5607  019D                     	;# 
  5608  019E                     	;# 
  5609  019E                     	;# 
  5610  019F                     	;# 
  5611  019F                     	;# 
  5612  020D                     	;# 
  5613  0211                     	;# 
  5614  0211                     	;# 
  5615  0212                     	;# 
  5616  0212                     	;# 
  5617  0213                     	;# 
  5618  0213                     	;# 
  5619  0214                     	;# 
  5620  0214                     	;# 
  5621  0215                     	;# 
  5622  0215                     	;# 
  5623  0215                     	;# 
  5624  0216                     	;# 
  5625  0216                     	;# 
  5626  0217                     	;# 
  5627  0217                     	;# 
  5628  0219                     	;# 
  5629  021A                     	;# 
  5630  021B                     	;# 
  5631  021C                     	;# 
  5632  021D                     	;# 
  5633  021E                     	;# 
  5634  021F                     	;# 
  5635  028C                     	;# 
  5636  028D                     	;# 
  5637  0291                     	;# 
  5638  0291                     	;# 
  5639  0292                     	;# 
  5640  0293                     	;# 
  5641  0294                     	;# 
  5642  0295                     	;# 
  5643  0295                     	;# 
  5644  0296                     	;# 
  5645  0298                     	;# 
  5646  0298                     	;# 
  5647  0299                     	;# 
  5648  029A                     	;# 
  5649  029B                     	;# 
  5650  029C                     	;# 
  5651  029C                     	;# 
  5652  029D                     	;# 
  5653  029E                     	;# 
  5654  029F                     	;# 
  5655  030C                     	;# 
  5656  030D                     	;# 
  5657  0311                     	;# 
  5658  0311                     	;# 
  5659  0312                     	;# 
  5660  0313                     	;# 
  5661  0314                     	;# 
  5662  0315                     	;# 
  5663  0315                     	;# 
  5664  0316                     	;# 
  5665  0318                     	;# 
  5666  0318                     	;# 
  5667  0319                     	;# 
  5668  031A                     	;# 
  5669  031C                     	;# 
  5670  031C                     	;# 
  5671  031D                     	;# 
  5672  031E                     	;# 
  5673  038C                     	;# 
  5674  038D                     	;# 
  5675  0394                     	;# 
  5676  0395                     	;# 
  5677  0396                     	;# 
  5678  040C                     	;# 
  5679  040D                     	;# 
  5680  0415                     	;# 
  5681  0416                     	;# 
  5682  0417                     	;# 
  5683  041C                     	;# 
  5684  041D                     	;# 
  5685  041E                     	;# 
  5686  048D                     	;# 
  5687  0491                     	;# 
  5688  0492                     	;# 
  5689  0493                     	;# 
  5690  0493                     	;# 
  5691  0494                     	;# 
  5692  0495                     	;# 
  5693  0496                     	;# 
  5694  0497                     	;# 
  5695  0791                     	;# 
  5696  0792                     	;# 
  5697  0793                     	;# 
  5698  0794                     	;# 
  5699  0795                     	;# 
  5700  0798                     	;# 
  5701  0799                     	;# 
  5702  079A                     	;# 
  5703  079B                     	;# 
  5704  079C                     	;# 
  5705  079D                     	;# 
  5706  07A0                     	;# 
  5707  07A1                     	;# 
  5708  07A2                     	;# 
  5709  07A3                     	;# 
  5710  07A4                     	;# 
  5711  07A5                     	;# 
  5712  07A6                     	;# 
  5713  07A7                     	;# 
  5714  07A8                     	;# 
  5715  07A9                     	;# 
  5716  07AA                     	;# 
  5717  07AB                     	;# 
  5718  07AC                     	;# 
  5719  07AD                     	;# 
  5720  07AE                     	;# 
  5721  07AF                     	;# 
  5722  07B0                     	;# 
  5723  07B1                     	;# 
  5724  07B2                     	;# 
  5725  07B3                     	;# 
  5726  07B4                     	;# 
  5727  07B5                     	;# 
  5728  07B6                     	;# 
  5729  07B7                     	;# 
  5730  0FE4                     	;# 
  5731  0FE5                     	;# 
  5732  0FE6                     	;# 
  5733  0FE7                     	;# 
  5734  0FE8                     	;# 
  5735  0FE9                     	;# 
  5736  0FEA                     	;# 
  5737  0FEB                     	;# 
  5738  0FED                     	;# 
  5739  0FEE                     	;# 
  5740  0FEF                     	;# 
  5741  0000                     	;# 
  5742  0001                     	;# 
  5743  0002                     	;# 
  5744  0003                     	;# 
  5745  0004                     	;# 
  5746  0005                     	;# 
  5747  0006                     	;# 
  5748  0007                     	;# 
  5749  0008                     	;# 
  5750  0009                     	;# 
  5751  000A                     	;# 
  5752  000B                     	;# 
  5753  000C                     	;# 
  5754  000D                     	;# 
  5755  000E                     	;# 
  5756  000F                     	;# 
  5757  0010                     	;# 
  5758  0011                     	;# 
  5759  0012                     	;# 
  5760  0013                     	;# 
  5761  0014                     	;# 
  5762  0015                     	;# 
  5763  0016                     	;# 
  5764  0016                     	;# 
  5765  0017                     	;# 
  5766  0018                     	;# 
  5767  0019                     	;# 
  5768  001A                     	;# 
  5769  001B                     	;# 
  5770  001C                     	;# 
  5771  001E                     	;# 
  5772  001F                     	;# 
  5773  008C                     	;# 
  5774  008D                     	;# 
  5775  008E                     	;# 
  5776  008F                     	;# 
  5777  0090                     	;# 
  5778  0091                     	;# 
  5779  0092                     	;# 
  5780  0093                     	;# 
  5781  0094                     	;# 
  5782  0095                     	;# 
  5783  0096                     	;# 
  5784  0097                     	;# 
  5785  0098                     	;# 
  5786  0099                     	;# 
  5787  009A                     	;# 
  5788  009B                     	;# 
  5789  009B                     	;# 
  5790  009C                     	;# 
  5791  009D                     	;# 
  5792  009E                     	;# 
  5793  010C                     	;# 
  5794  010D                     	;# 
  5795  010E                     	;# 
  5796  010F                     	;# 
  5797  0110                     	;# 
  5798  0111                     	;# 
  5799  0112                     	;# 
  5800  0113                     	;# 
  5801  0114                     	;# 
  5802  0115                     	;# 
  5803  0116                     	;# 
  5804  0117                     	;# 
  5805  0118                     	;# 
  5806  0119                     	;# 
  5807  011A                     	;# 
  5808  011B                     	;# 
  5809  011D                     	;# 
  5810  011E                     	;# 
  5811  011F                     	;# 
  5812  018C                     	;# 
  5813  0190                     	;# 
  5814  0191                     	;# 
  5815  0191                     	;# 
  5816  0192                     	;# 
  5817  0193                     	;# 
  5818  0193                     	;# 
  5819  0193                     	;# 
  5820  0194                     	;# 
  5821  0195                     	;# 
  5822  0196                     	;# 
  5823  0199                     	;# 
  5824  0199                     	;# 
  5825  019A                     	;# 
  5826  019A                     	;# 
  5827  019B                     	;# 
  5828  019B                     	;# 
  5829  019B                     	;# 
  5830  019B                     	;# 
  5831  019C                     	;# 
  5832  019C                     	;# 
  5833  019D                     	;# 
  5834  019D                     	;# 
  5835  019E                     	;# 
  5836  019E                     	;# 
  5837  019F                     	;# 
  5838  019F                     	;# 
  5839  020D                     	;# 
  5840  0211                     	;# 
  5841  0211                     	;# 
  5842  0212                     	;# 
  5843  0212                     	;# 
  5844  0213                     	;# 
  5845  0213                     	;# 
  5846  0214                     	;# 
  5847  0214                     	;# 
  5848  0215                     	;# 
  5849  0215                     	;# 
  5850  0215                     	;# 
  5851  0216                     	;# 
  5852  0216                     	;# 
  5853  0217                     	;# 
  5854  0217                     	;# 
  5855  0219                     	;# 
  5856  021A                     	;# 
  5857  021B                     	;# 
  5858  021C                     	;# 
  5859  021D                     	;# 
  5860  021E                     	;# 
  5861  021F                     	;# 
  5862  028C                     	;# 
  5863  028D                     	;# 
  5864  0291                     	;# 
  5865  0291                     	;# 
  5866  0292                     	;# 
  5867  0293                     	;# 
  5868  0294                     	;# 
  5869  0295                     	;# 
  5870  0295                     	;# 
  5871  0296                     	;# 
  5872  0298                     	;# 
  5873  0298                     	;# 
  5874  0299                     	;# 
  5875  029A                     	;# 
  5876  029B                     	;# 
  5877  029C                     	;# 
  5878  029C                     	;# 
  5879  029D                     	;# 
  5880  029E                     	;# 
  5881  029F                     	;# 
  5882  030C                     	;# 
  5883  030D                     	;# 
  5884  0311                     	;# 
  5885  0311                     	;# 
  5886  0312                     	;# 
  5887  0313                     	;# 
  5888  0314                     	;# 
  5889  0315                     	;# 
  5890  0315                     	;# 
  5891  0316                     	;# 
  5892  0318                     	;# 
  5893  0318                     	;# 
  5894  0319                     	;# 
  5895  031A                     	;# 
  5896  031C                     	;# 
  5897  031C                     	;# 
  5898  031D                     	;# 
  5899  031E                     	;# 
  5900  038C                     	;# 
  5901  038D                     	;# 
  5902  0394                     	;# 
  5903  0395                     	;# 
  5904  0396                     	;# 
  5905  040C                     	;# 
  5906  040D                     	;# 
  5907  0415                     	;# 
  5908  0416                     	;# 
  5909  0417                     	;# 
  5910  041C                     	;# 
  5911  041D                     	;# 
  5912  041E                     	;# 
  5913  048D                     	;# 
  5914  0491                     	;# 
  5915  0492                     	;# 
  5916  0493                     	;# 
  5917  0493                     	;# 
  5918  0494                     	;# 
  5919  0495                     	;# 
  5920  0496                     	;# 
  5921  0497                     	;# 
  5922  0791                     	;# 
  5923  0792                     	;# 
  5924  0793                     	;# 
  5925  0794                     	;# 
  5926  0795                     	;# 
  5927  0798                     	;# 
  5928  0799                     	;# 
  5929  079A                     	;# 
  5930  079B                     	;# 
  5931  079C                     	;# 
  5932  079D                     	;# 
  5933  07A0                     	;# 
  5934  07A1                     	;# 
  5935  07A2                     	;# 
  5936  07A3                     	;# 
  5937  07A4                     	;# 
  5938  07A5                     	;# 
  5939  07A6                     	;# 
  5940  07A7                     	;# 
  5941  07A8                     	;# 
  5942  07A9                     	;# 
  5943  07AA                     	;# 
  5944  07AB                     	;# 
  5945  07AC                     	;# 
  5946  07AD                     	;# 
  5947  07AE                     	;# 
  5948  07AF                     	;# 
  5949  07B0                     	;# 
  5950  07B1                     	;# 
  5951  07B2                     	;# 
  5952  07B3                     	;# 
  5953  07B4                     	;# 
  5954  07B5                     	;# 
  5955  07B6                     	;# 
  5956  07B7                     	;# 
  5957  0FE4                     	;# 
  5958  0FE5                     	;# 
  5959  0FE6                     	;# 
  5960  0FE7                     	;# 
  5961  0FE8                     	;# 
  5962  0FE9                     	;# 
  5963  0FEA                     	;# 
  5964  0FEB                     	;# 
  5965  0FED                     	;# 
  5966  0FEE                     	;# 
  5967  0FEF                     	;# 
  5968  0000                     	;# 
  5969  0001                     	;# 
  5970  0002                     	;# 
  5971  0003                     	;# 
  5972  0004                     	;# 
  5973  0005                     	;# 
  5974  0006                     	;# 
  5975  0007                     	;# 
  5976  0008                     	;# 
  5977  0009                     	;# 
  5978  000A                     	;# 
  5979  000B                     	;# 
  5980  000C                     	;# 
  5981  000D                     	;# 
  5982  000E                     	;# 
  5983  000F                     	;# 
  5984  0010                     	;# 
  5985  0011                     	;# 
  5986  0012                     	;# 
  5987  0013                     	;# 
  5988  0014                     	;# 
  5989  0015                     	;# 
  5990  0016                     	;# 
  5991  0016                     	;# 
  5992  0017                     	;# 
  5993  0018                     	;# 
  5994  0019                     	;# 
  5995  001A                     	;# 
  5996  001B                     	;# 
  5997  001C                     	;# 
  5998  001E                     	;# 
  5999  001F                     	;# 
  6000  008C                     	;# 
  6001  008D                     	;# 
  6002  008E                     	;# 
  6003  008F                     	;# 
  6004  0090                     	;# 
  6005  0091                     	;# 
  6006  0092                     	;# 
  6007  0093                     	;# 
  6008  0094                     	;# 
  6009  0095                     	;# 
  6010  0096                     	;# 
  6011  0097                     	;# 
  6012  0098                     	;# 
  6013  0099                     	;# 
  6014  009A                     	;# 
  6015  009B                     	;# 
  6016  009B                     	;# 
  6017  009C                     	;# 
  6018  009D                     	;# 
  6019  009E                     	;# 
  6020  010C                     	;# 
  6021  010D                     	;# 
  6022  010E                     	;# 
  6023  010F                     	;# 
  6024  0110                     	;# 
  6025  0111                     	;# 
  6026  0112                     	;# 
  6027  0113                     	;# 
  6028  0114                     	;# 
  6029  0115                     	;# 
  6030  0116                     	;# 
  6031  0117                     	;# 
  6032  0118                     	;# 
  6033  0119                     	;# 
  6034  011A                     	;# 
  6035  011B                     	;# 
  6036  011D                     	;# 
  6037  011E                     	;# 
  6038  011F                     	;# 
  6039  018C                     	;# 
  6040  0190                     	;# 
  6041  0191                     	;# 
  6042  0191                     	;# 
  6043  0192                     	;# 
  6044  0193                     	;# 
  6045  0193                     	;# 
  6046  0193                     	;# 
  6047  0194                     	;# 
  6048  0195                     	;# 
  6049  0196                     	;# 
  6050  0199                     	;# 
  6051  0199                     	;# 
  6052  019A                     	;# 
  6053  019A                     	;# 
  6054  019B                     	;# 
  6055  019B                     	;# 
  6056  019B                     	;# 
  6057  019B                     	;# 
  6058  019C                     	;# 
  6059  019C                     	;# 
  6060  019D                     	;# 
  6061  019D                     	;# 
  6062  019E                     	;# 
  6063  019E                     	;# 
  6064  019F                     	;# 
  6065  019F                     	;# 
  6066  020D                     	;# 
  6067  0211                     	;# 
  6068  0211                     	;# 
  6069  0212                     	;# 
  6070  0212                     	;# 
  6071  0213                     	;# 
  6072  0213                     	;# 
  6073  0214                     	;# 
  6074  0214                     	;# 
  6075  0215                     	;# 
  6076  0215                     	;# 
  6077  0215                     	;# 
  6078  0216                     	;# 
  6079  0216                     	;# 
  6080  0217                     	;# 
  6081  0217                     	;# 
  6082  0219                     	;# 
  6083  021A                     	;# 
  6084  021B                     	;# 
  6085  021C                     	;# 
  6086  021D                     	;# 
  6087  021E                     	;# 
  6088  021F                     	;# 
  6089  028C                     	;# 
  6090  028D                     	;# 
  6091  0291                     	;# 
  6092  0291                     	;# 
  6093  0292                     	;# 
  6094  0293                     	;# 
  6095  0294                     	;# 
  6096  0295                     	;# 
  6097  0295                     	;# 
  6098  0296                     	;# 
  6099  0298                     	;# 
  6100  0298                     	;# 
  6101  0299                     	;# 
  6102  029A                     	;# 
  6103  029B                     	;# 
  6104  029C                     	;# 
  6105  029C                     	;# 
  6106  029D                     	;# 
  6107  029E                     	;# 
  6108  029F                     	;# 
  6109  030C                     	;# 
  6110  030D                     	;# 
  6111  0311                     	;# 
  6112  0311                     	;# 
  6113  0312                     	;# 
  6114  0313                     	;# 
  6115  0314                     	;# 
  6116  0315                     	;# 
  6117  0315                     	;# 
  6118  0316                     	;# 
  6119  0318                     	;# 
  6120  0318                     	;# 
  6121  0319                     	;# 
  6122  031A                     	;# 
  6123  031C                     	;# 
  6124  031C                     	;# 
  6125  031D                     	;# 
  6126  031E                     	;# 
  6127  038C                     	;# 
  6128  038D                     	;# 
  6129  0394                     	;# 
  6130  0395                     	;# 
  6131  0396                     	;# 
  6132  040C                     	;# 
  6133  040D                     	;# 
  6134  0415                     	;# 
  6135  0416                     	;# 
  6136  0417                     	;# 
  6137  041C                     	;# 
  6138  041D                     	;# 
  6139  041E                     	;# 
  6140  048D                     	;# 
  6141  0491                     	;# 
  6142  0492                     	;# 
  6143  0493                     	;# 
  6144  0493                     	;# 
  6145  0494                     	;# 
  6146  0495                     	;# 
  6147  0496                     	;# 
  6148  0497                     	;# 
  6149  0791                     	;# 
  6150  0792                     	;# 
  6151  0793                     	;# 
  6152  0794                     	;# 
  6153  0795                     	;# 
  6154  0798                     	;# 
  6155  0799                     	;# 
  6156  079A                     	;# 
  6157  079B                     	;# 
  6158  079C                     	;# 
  6159  079D                     	;# 
  6160  07A0                     	;# 
  6161  07A1                     	;# 
  6162  07A2                     	;# 
  6163  07A3                     	;# 
  6164  07A4                     	;# 
  6165  07A5                     	;# 
  6166  07A6                     	;# 
  6167  07A7                     	;# 
  6168  07A8                     	;# 
  6169  07A9                     	;# 
  6170  07AA                     	;# 
  6171  07AB                     	;# 
  6172  07AC                     	;# 
  6173  07AD                     	;# 
  6174  07AE                     	;# 
  6175  07AF                     	;# 
  6176  07B0                     	;# 
  6177  07B1                     	;# 
  6178  07B2                     	;# 
  6179  07B3                     	;# 
  6180  07B4                     	;# 
  6181  07B5                     	;# 
  6182  07B6                     	;# 
  6183  07B7                     	;# 
  6184  0FE4                     	;# 
  6185  0FE5                     	;# 
  6186  0FE6                     	;# 
  6187  0FE7                     	;# 
  6188  0FE8                     	;# 
  6189  0FE9                     	;# 
  6190  0FEA                     	;# 
  6191  0FEB                     	;# 
  6192  0FED                     	;# 
  6193  0FEE                     	;# 
  6194  0FEF                     	;# 
  6195  0000                     	;# 
  6196  0001                     	;# 
  6197  0002                     	;# 
  6198  0003                     	;# 
  6199  0004                     	;# 
  6200  0005                     	;# 
  6201  0006                     	;# 
  6202  0007                     	;# 
  6203  0008                     	;# 
  6204  0009                     	;# 
  6205  000A                     	;# 
  6206  000B                     	;# 
  6207  000C                     	;# 
  6208  000D                     	;# 
  6209  000E                     	;# 
  6210  000F                     	;# 
  6211  0010                     	;# 
  6212  0011                     	;# 
  6213  0012                     	;# 
  6214  0013                     	;# 
  6215  0014                     	;# 
  6216  0015                     	;# 
  6217  0016                     	;# 
  6218  0016                     	;# 
  6219  0017                     	;# 
  6220  0018                     	;# 
  6221  0019                     	;# 
  6222  001A                     	;# 
  6223  001B                     	;# 
  6224  001C                     	;# 
  6225  001E                     	;# 
  6226  001F                     	;# 
  6227  008C                     	;# 
  6228  008D                     	;# 
  6229  008E                     	;# 
  6230  008F                     	;# 
  6231  0090                     	;# 
  6232  0091                     	;# 
  6233  0092                     	;# 
  6234  0093                     	;# 
  6235  0094                     	;# 
  6236  0095                     	;# 
  6237  0096                     	;# 
  6238  0097                     	;# 
  6239  0098                     	;# 
  6240  0099                     	;# 
  6241  009A                     	;# 
  6242  009B                     	;# 
  6243  009B                     	;# 
  6244  009C                     	;# 
  6245  009D                     	;# 
  6246  009E                     	;# 
  6247  010C                     	;# 
  6248  010D                     	;# 
  6249  010E                     	;# 
  6250  010F                     	;# 
  6251  0110                     	;# 
  6252  0111                     	;# 
  6253  0112                     	;# 
  6254  0113                     	;# 
  6255  0114                     	;# 
  6256  0115                     	;# 
  6257  0116                     	;# 
  6258  0117                     	;# 
  6259  0118                     	;# 
  6260  0119                     	;# 
  6261  011A                     	;# 
  6262  011B                     	;# 
  6263  011D                     	;# 
  6264  011E                     	;# 
  6265  011F                     	;# 
  6266  018C                     	;# 
  6267  0190                     	;# 
  6268  0191                     	;# 
  6269  0191                     	;# 
  6270  0192                     	;# 
  6271  0193                     	;# 
  6272  0193                     	;# 
  6273  0193                     	;# 
  6274  0194                     	;# 
  6275  0195                     	;# 
  6276  0196                     	;# 
  6277  0199                     	;# 
  6278  0199                     	;# 
  6279  019A                     	;# 
  6280  019A                     	;# 
  6281  019B                     	;# 
  6282  019B                     	;# 
  6283  019B                     	;# 
  6284  019B                     	;# 
  6285  019C                     	;# 
  6286  019C                     	;# 
  6287  019D                     	;# 
  6288  019D                     	;# 
  6289  019E                     	;# 
  6290  019E                     	;# 
  6291  019F                     	;# 
  6292  019F                     	;# 
  6293  020D                     	;# 
  6294  0211                     	;# 
  6295  0211                     	;# 
  6296  0212                     	;# 
  6297  0212                     	;# 
  6298  0213                     	;# 
  6299  0213                     	;# 
  6300  0214                     	;# 
  6301  0214                     	;# 
  6302  0215                     	;# 
  6303  0215                     	;# 
  6304  0215                     	;# 
  6305  0216                     	;# 
  6306  0216                     	;# 
  6307  0217                     	;# 
  6308  0217                     	;# 
  6309  0219                     	;# 
  6310  021A                     	;# 
  6311  021B                     	;# 
  6312  021C                     	;# 
  6313  021D                     	;# 
  6314  021E                     	;# 
  6315  021F                     	;# 
  6316  028C                     	;# 
  6317  028D                     	;# 
  6318  0291                     	;# 
  6319  0291                     	;# 
  6320  0292                     	;# 
  6321  0293                     	;# 
  6322  0294                     	;# 
  6323  0295                     	;# 
  6324  0295                     	;# 
  6325  0296                     	;# 
  6326  0298                     	;# 
  6327  0298                     	;# 
  6328  0299                     	;# 
  6329  029A                     	;# 
  6330  029B                     	;# 
  6331  029C                     	;# 
  6332  029C                     	;# 
  6333  029D                     	;# 
  6334  029E                     	;# 
  6335  029F                     	;# 
  6336  030C                     	;# 
  6337  030D                     	;# 
  6338  0311                     	;# 
  6339  0311                     	;# 
  6340  0312                     	;# 
  6341  0313                     	;# 
  6342  0314                     	;# 
  6343  0315                     	;# 
  6344  0315                     	;# 
  6345  0316                     	;# 
  6346  0318                     	;# 
  6347  0318                     	;# 
  6348  0319                     	;# 
  6349  031A                     	;# 
  6350  031C                     	;# 
  6351  031C                     	;# 
  6352  031D                     	;# 
  6353  031E                     	;# 
  6354  038C                     	;# 
  6355  038D                     	;# 
  6356  0394                     	;# 
  6357  0395                     	;# 
  6358  0396                     	;# 
  6359  040C                     	;# 
  6360  040D                     	;# 
  6361  0415                     	;# 
  6362  0416                     	;# 
  6363  0417                     	;# 
  6364  041C                     	;# 
  6365  041D                     	;# 
  6366  041E                     	;# 
  6367  048D                     	;# 
  6368  0491                     	;# 
  6369  0492                     	;# 
  6370  0493                     	;# 
  6371  0493                     	;# 
  6372  0494                     	;# 
  6373  0495                     	;# 
  6374  0496                     	;# 
  6375  0497                     	;# 
  6376  0791                     	;# 
  6377  0792                     	;# 
  6378  0793                     	;# 
  6379  0794                     	;# 
  6380  0795                     	;# 
  6381  0798                     	;# 
  6382  0799                     	;# 
  6383  079A                     	;# 
  6384  079B                     	;# 
  6385  079C                     	;# 
  6386  079D                     	;# 
  6387  07A0                     	;# 
  6388  07A1                     	;# 
  6389  07A2                     	;# 
  6390  07A3                     	;# 
  6391  07A4                     	;# 
  6392  07A5                     	;# 
  6393  07A6                     	;# 
  6394  07A7                     	;# 
  6395  07A8                     	;# 
  6396  07A9                     	;# 
  6397  07AA                     	;# 
  6398  07AB                     	;# 
  6399  07AC                     	;# 
  6400  07AD                     	;# 
  6401  07AE                     	;# 
  6402  07AF                     	;# 
  6403  07B0                     	;# 
  6404  07B1                     	;# 
  6405  07B2                     	;# 
  6406  07B3                     	;# 
  6407  07B4                     	;# 
  6408  07B5                     	;# 
  6409  07B6                     	;# 
  6410  07B7                     	;# 
  6411  0FE4                     	;# 
  6412  0FE5                     	;# 
  6413  0FE6                     	;# 
  6414  0FE7                     	;# 
  6415  0FE8                     	;# 
  6416  0FE9                     	;# 
  6417  0FEA                     	;# 
  6418  0FEB                     	;# 
  6419  0FED                     	;# 
  6420  0FEE                     	;# 
  6421  0FEF                     	;# 
  6422  0000                     	;# 
  6423  0001                     	;# 
  6424  0002                     	;# 
  6425  0003                     	;# 
  6426  0004                     	;# 
  6427  0005                     	;# 
  6428  0006                     	;# 
  6429  0007                     	;# 
  6430  0008                     	;# 
  6431  0009                     	;# 
  6432  000A                     	;# 
  6433  000B                     	;# 
  6434  000C                     	;# 
  6435  000D                     	;# 
  6436  000E                     	;# 
  6437  000F                     	;# 
  6438  0010                     	;# 
  6439  0011                     	;# 
  6440  0012                     	;# 
  6441  0013                     	;# 
  6442  0014                     	;# 
  6443  0015                     	;# 
  6444  0016                     	;# 
  6445  0016                     	;# 
  6446  0017                     	;# 
  6447  0018                     	;# 
  6448  0019                     	;# 
  6449  001A                     	;# 
  6450  001B                     	;# 
  6451  001C                     	;# 
  6452  001E                     	;# 
  6453  001F                     	;# 
  6454  008C                     	;# 
  6455  008D                     	;# 
  6456  008E                     	;# 
  6457  008F                     	;# 
  6458  0090                     	;# 
  6459  0091                     	;# 
  6460  0092                     	;# 
  6461  0093                     	;# 
  6462  0094                     	;# 
  6463  0095                     	;# 
  6464  0096                     	;# 
  6465  0097                     	;# 
  6466  0098                     	;# 
  6467  0099                     	;# 
  6468  009A                     	;# 
  6469  009B                     	;# 
  6470  009B                     	;# 
  6471  009C                     	;# 
  6472  009D                     	;# 
  6473  009E                     	;# 
  6474  010C                     	;# 
  6475  010D                     	;# 
  6476  010E                     	;# 
  6477  010F                     	;# 
  6478  0110                     	;# 
  6479  0111                     	;# 
  6480  0112                     	;# 
  6481  0113                     	;# 
  6482  0114                     	;# 
  6483  0115                     	;# 
  6484  0116                     	;# 
  6485  0117                     	;# 
  6486  0118                     	;# 
  6487  0119                     	;# 
  6488  011A                     	;# 
  6489  011B                     	;# 
  6490  011D                     	;# 
  6491  011E                     	;# 
  6492  011F                     	;# 
  6493  018C                     	;# 
  6494  0190                     	;# 
  6495  0191                     	;# 
  6496  0191                     	;# 
  6497  0192                     	;# 
  6498  0193                     	;# 
  6499  0193                     	;# 
  6500  0193                     	;# 
  6501  0194                     	;# 
  6502  0195                     	;# 
  6503  0196                     	;# 
  6504  0199                     	;# 
  6505  0199                     	;# 
  6506  019A                     	;# 
  6507  019A                     	;# 
  6508  019B                     	;# 
  6509  019B                     	;# 
  6510  019B                     	;# 
  6511  019B                     	;# 
  6512  019C                     	;# 
  6513  019C                     	;# 
  6514  019D                     	;# 
  6515  019D                     	;# 
  6516  019E                     	;# 
  6517  019E                     	;# 
  6518  019F                     	;# 
  6519  019F                     	;# 
  6520  020D                     	;# 
  6521  0211                     	;# 
  6522  0211                     	;# 
  6523  0212                     	;# 
  6524  0212                     	;# 
  6525  0213                     	;# 
  6526  0213                     	;# 
  6527  0214                     	;# 
  6528  0214                     	;# 
  6529  0215                     	;# 
  6530  0215                     	;# 
  6531  0215                     	;# 
  6532  0216                     	;# 
  6533  0216                     	;# 
  6534  0217                     	;# 
  6535  0217                     	;# 
  6536  0219                     	;# 
  6537  021A                     	;# 
  6538  021B                     	;# 
  6539  021C                     	;# 
  6540  021D                     	;# 
  6541  021E                     	;# 
  6542  021F                     	;# 
  6543  028C                     	;# 
  6544  028D                     	;# 
  6545  0291                     	;# 
  6546  0291                     	;# 
  6547  0292                     	;# 
  6548  0293                     	;# 
  6549  0294                     	;# 
  6550  0295                     	;# 
  6551  0295                     	;# 
  6552  0296                     	;# 
  6553  0298                     	;# 
  6554  0298                     	;# 
  6555  0299                     	;# 
  6556  029A                     	;# 
  6557  029B                     	;# 
  6558  029C                     	;# 
  6559  029C                     	;# 
  6560  029D                     	;# 
  6561  029E                     	;# 
  6562  029F                     	;# 
  6563  030C                     	;# 
  6564  030D                     	;# 
  6565  0311                     	;# 
  6566  0311                     	;# 
  6567  0312                     	;# 
  6568  0313                     	;# 
  6569  0314                     	;# 
  6570  0315                     	;# 
  6571  0315                     	;# 
  6572  0316                     	;# 
  6573  0318                     	;# 
  6574  0318                     	;# 
  6575  0319                     	;# 
  6576  031A                     	;# 
  6577  031C                     	;# 
  6578  031C                     	;# 
  6579  031D                     	;# 
  6580  031E                     	;# 
  6581  038C                     	;# 
  6582  038D                     	;# 
  6583  0394                     	;# 
  6584  0395                     	;# 
  6585  0396                     	;# 
  6586  040C                     	;# 
  6587  040D                     	;# 
  6588  0415                     	;# 
  6589  0416                     	;# 
  6590  0417                     	;# 
  6591  041C                     	;# 
  6592  041D                     	;# 
  6593  041E                     	;# 
  6594  048D                     	;# 
  6595  0491                     	;# 
  6596  0492                     	;# 
  6597  0493                     	;# 
  6598  0493                     	;# 
  6599  0494                     	;# 
  6600  0495                     	;# 
  6601  0496                     	;# 
  6602  0497                     	;# 
  6603  0791                     	;# 
  6604  0792                     	;# 
  6605  0793                     	;# 
  6606  0794                     	;# 
  6607  0795                     	;# 
  6608  0798                     	;# 
  6609  0799                     	;# 
  6610  079A                     	;# 
  6611  079B                     	;# 
  6612  079C                     	;# 
  6613  079D                     	;# 
  6614  07A0                     	;# 
  6615  07A1                     	;# 
  6616  07A2                     	;# 
  6617  07A3                     	;# 
  6618  07A4                     	;# 
  6619  07A5                     	;# 
  6620  07A6                     	;# 
  6621  07A7                     	;# 
  6622  07A8                     	;# 
  6623  07A9                     	;# 
  6624  07AA                     	;# 
  6625  07AB                     	;# 
  6626  07AC                     	;# 
  6627  07AD                     	;# 
  6628  07AE                     	;# 
  6629  07AF                     	;# 
  6630  07B0                     	;# 
  6631  07B1                     	;# 
  6632  07B2                     	;# 
  6633  07B3                     	;# 
  6634  07B4                     	;# 
  6635  07B5                     	;# 
  6636  07B6                     	;# 
  6637  07B7                     	;# 
  6638  0FE4                     	;# 
  6639  0FE5                     	;# 
  6640  0FE6                     	;# 
  6641  0FE7                     	;# 
  6642  0FE8                     	;# 
  6643  0FE9                     	;# 
  6644  0FEA                     	;# 
  6645  0FEB                     	;# 
  6646  0FED                     	;# 
  6647  0FEE                     	;# 
  6648  0FEF                     	;# 
  6649  0000                     	;# 
  6650  0001                     	;# 
  6651  0002                     	;# 
  6652  0003                     	;# 
  6653  0004                     	;# 
  6654  0005                     	;# 
  6655  0006                     	;# 
  6656  0007                     	;# 
  6657  0008                     	;# 
  6658  0009                     	;# 
  6659  000A                     	;# 
  6660  000B                     	;# 
  6661  000C                     	;# 
  6662  000D                     	;# 
  6663  000E                     	;# 
  6664  000F                     	;# 
  6665  0010                     	;# 
  6666  0011                     	;# 
  6667  0012                     	;# 
  6668  0013                     	;# 
  6669  0014                     	;# 
  6670  0015                     	;# 
  6671  0016                     	;# 
  6672  0016                     	;# 
  6673  0017                     	;# 
  6674  0018                     	;# 
  6675  0019                     	;# 
  6676  001A                     	;# 
  6677  001B                     	;# 
  6678  001C                     	;# 
  6679  001E                     	;# 
  6680  001F                     	;# 
  6681  008C                     	;# 
  6682  008D                     	;# 
  6683  008E                     	;# 
  6684  008F                     	;# 
  6685  0090                     	;# 
  6686  0091                     	;# 
  6687  0092                     	;# 
  6688  0093                     	;# 
  6689  0094                     	;# 
  6690  0095                     	;# 
  6691  0096                     	;# 
  6692  0097                     	;# 
  6693  0098                     	;# 
  6694  0099                     	;# 
  6695  009A                     	;# 
  6696  009B                     	;# 
  6697  009B                     	;# 
  6698  009C                     	;# 
  6699  009D                     	;# 
  6700  009E                     	;# 
  6701  010C                     	;# 
  6702  010D                     	;# 
  6703  010E                     	;# 
  6704  010F                     	;# 
  6705  0110                     	;# 
  6706  0111                     	;# 
  6707  0112                     	;# 
  6708  0113                     	;# 
  6709  0114                     	;# 
  6710  0115                     	;# 
  6711  0116                     	;# 
  6712  0117                     	;# 
  6713  0118                     	;# 
  6714  0119                     	;# 
  6715  011A                     	;# 
  6716  011B                     	;# 
  6717  011D                     	;# 
  6718  011E                     	;# 
  6719  011F                     	;# 
  6720  018C                     	;# 
  6721  0190                     	;# 
  6722  0191                     	;# 
  6723  0191                     	;# 
  6724  0192                     	;# 
  6725  0193                     	;# 
  6726  0193                     	;# 
  6727  0193                     	;# 
  6728  0194                     	;# 
  6729  0195                     	;# 
  6730  0196                     	;# 
  6731  0199                     	;# 
  6732  0199                     	;# 
  6733  019A                     	;# 
  6734  019A                     	;# 
  6735  019B                     	;# 
  6736  019B                     	;# 
  6737  019B                     	;# 
  6738  019B                     	;# 
  6739  019C                     	;# 
  6740  019C                     	;# 
  6741  019D                     	;# 
  6742  019D                     	;# 
  6743  019E                     	;# 
  6744  019E                     	;# 
  6745  019F                     	;# 
  6746  019F                     	;# 
  6747  020D                     	;# 
  6748  0211                     	;# 
  6749  0211                     	;# 
  6750  0212                     	;# 
  6751  0212                     	;# 
  6752  0213                     	;# 
  6753  0213                     	;# 
  6754  0214                     	;# 
  6755  0214                     	;# 
  6756  0215                     	;# 
  6757  0215                     	;# 
  6758  0215                     	;# 
  6759  0216                     	;# 
  6760  0216                     	;# 
  6761  0217                     	;# 
  6762  0217                     	;# 
  6763  0219                     	;# 
  6764  021A                     	;# 
  6765  021B                     	;# 
  6766  021C                     	;# 
  6767  021D                     	;# 
  6768  021E                     	;# 
  6769  021F                     	;# 
  6770  028C                     	;# 
  6771  028D                     	;# 
  6772  0291                     	;# 
  6773  0291                     	;# 
  6774  0292                     	;# 
  6775  0293                     	;# 
  6776  0294                     	;# 
  6777  0295                     	;# 
  6778  0295                     	;# 
  6779  0296                     	;# 
  6780  0298                     	;# 
  6781  0298                     	;# 
  6782  0299                     	;# 
  6783  029A                     	;# 
  6784  029B                     	;# 
  6785  029C                     	;# 
  6786  029C                     	;# 
  6787  029D                     	;# 
  6788  029E                     	;# 
  6789  029F                     	;# 
  6790  030C                     	;# 
  6791  030D                     	;# 
  6792  0311                     	;# 
  6793  0311                     	;# 
  6794  0312                     	;# 
  6795  0313                     	;# 
  6796  0314                     	;# 
  6797  0315                     	;# 
  6798  0315                     	;# 
  6799  0316                     	;# 
  6800  0318                     	;# 
  6801  0318                     	;# 
  6802  0319                     	;# 
  6803  031A                     	;# 
  6804  031C                     	;# 
  6805  031C                     	;# 
  6806  031D                     	;# 
  6807  031E                     	;# 
  6808  038C                     	;# 
  6809  038D                     	;# 
  6810  0394                     	;# 
  6811  0395                     	;# 
  6812  0396                     	;# 
  6813  040C                     	;# 
  6814  040D                     	;# 
  6815  0415                     	;# 
  6816  0416                     	;# 
  6817  0417                     	;# 
  6818  041C                     	;# 
  6819  041D                     	;# 
  6820  041E                     	;# 
  6821  048D                     	;# 
  6822  0491                     	;# 
  6823  0492                     	;# 
  6824  0493                     	;# 
  6825  0493                     	;# 
  6826  0494                     	;# 
  6827  0495                     	;# 
  6828  0496                     	;# 
  6829  0497                     	;# 
  6830  0791                     	;# 
  6831  0792                     	;# 
  6832  0793                     	;# 
  6833  0794                     	;# 
  6834  0795                     	;# 
  6835  0798                     	;# 
  6836  0799                     	;# 
  6837  079A                     	;# 
  6838  079B                     	;# 
  6839  079C                     	;# 
  6840  079D                     	;# 
  6841  07A0                     	;# 
  6842  07A1                     	;# 
  6843  07A2                     	;# 
  6844  07A3                     	;# 
  6845  07A4                     	;# 
  6846  07A5                     	;# 
  6847  07A6                     	;# 
  6848  07A7                     	;# 
  6849  07A8                     	;# 
  6850  07A9                     	;# 
  6851  07AA                     	;# 
  6852  07AB                     	;# 
  6853  07AC                     	;# 
  6854  07AD                     	;# 
  6855  07AE                     	;# 
  6856  07AF                     	;# 
  6857  07B0                     	;# 
  6858  07B1                     	;# 
  6859  07B2                     	;# 
  6860  07B3                     	;# 
  6861  07B4                     	;# 
  6862  07B5                     	;# 
  6863  07B6                     	;# 
  6864  07B7                     	;# 
  6865  0FE4                     	;# 
  6866  0FE5                     	;# 
  6867  0FE6                     	;# 
  6868  0FE7                     	;# 
  6869  0FE8                     	;# 
  6870  0FE9                     	;# 
  6871  0FEA                     	;# 
  6872  0FEB                     	;# 
  6873  0FED                     	;# 
  6874  0FEE                     	;# 
  6875  0FEF                     	;_comBuffer
  6876                           
  6877 ;; Function _TMR1_DefaultInterruptHandler is unused but had its address taken
  6878  0000                     
  6879 ;; Function _TMR0_DefaultInterruptHandler is unused but had its address taken
  6880  0000                     
  6881                           	psect	idataBANK1
  6882  0000                     __pidataBANK1:	
  6883                           
  6884                           	psect	idataBANK2
  6885  0000                     __pidataBANK2:	
  6886                           
  6887                           	psect	idataBANK3
  6888  1802                     __pidataBANK3:	
  6889                           
  6890                           ;initializer for _userKeyB
  6891  1802  3474               	retlw	116
  6892  1803  3477               	retlw	119
  6893  1804  3464               	retlw	100
  6894  1805  346C               	retlw	108
  6895  1806  3462               	retlw	98
  6896  1807  3467               	retlw	103
  6897                           
  6898                           	psect	stringtext
  6899  2800                     __pstringtext:	
  6900  2800                     _auchCRCHi:	
  6901  2800  3400               	retlw	0
  6902  2801  34C1               	retlw	193
  6903  2802  3481               	retlw	129
  6904  2803  3440               	retlw	64
  6905  2804  3401               	retlw	1
  6906  2805  34C0               	retlw	192
  6907  2806  3480               	retlw	128
  6908  2807  3441               	retlw	65
  6909  2808  3401               	retlw	1
  6910  2809  34C0               	retlw	192
  6911  280A  3480               	retlw	128
  6912  280B  3441               	retlw	65
  6913  280C  3400               	retlw	0
  6914  280D  34C1               	retlw	193
  6915  280E  3481               	retlw	129
  6916  280F  3440               	retlw	64
  6917  2810  3401               	retlw	1
  6918  2811  34C0               	retlw	192
  6919  2812  3480               	retlw	128
  6920  2813  3441               	retlw	65
  6921  2814  3400               	retlw	0
  6922  2815  34C1               	retlw	193
  6923  2816  3481               	retlw	129
  6924  2817  3440               	retlw	64
  6925  2818  3400               	retlw	0
  6926  2819  34C1               	retlw	193
  6927  281A  3481               	retlw	129
  6928  281B  3440               	retlw	64
  6929  281C  3401               	retlw	1
  6930  281D  34C0               	retlw	192
  6931  281E  3480               	retlw	128
  6932  281F  3441               	retlw	65
  6933  2820  3401               	retlw	1
  6934  2821  34C0               	retlw	192
  6935  2822  3480               	retlw	128
  6936  2823  3441               	retlw	65
  6937  2824  3400               	retlw	0
  6938  2825  34C1               	retlw	193
  6939  2826  3481               	retlw	129
  6940  2827  3440               	retlw	64
  6941  2828  3400               	retlw	0
  6942  2829  34C1               	retlw	193
  6943  282A  3481               	retlw	129
  6944  282B  3440               	retlw	64
  6945  282C  3401               	retlw	1
  6946  282D  34C0               	retlw	192
  6947  282E  3480               	retlw	128
  6948  282F  3441               	retlw	65
  6949  2830  3400               	retlw	0
  6950  2831  34C1               	retlw	193
  6951  2832  3481               	retlw	129
  6952  2833  3440               	retlw	64
  6953  2834  3401               	retlw	1
  6954  2835  34C0               	retlw	192
  6955  2836  3480               	retlw	128
  6956  2837  3441               	retlw	65
  6957  2838  3401               	retlw	1
  6958  2839  34C0               	retlw	192
  6959  283A  3480               	retlw	128
  6960  283B  3441               	retlw	65
  6961  283C  3400               	retlw	0
  6962  283D  34C1               	retlw	193
  6963  283E  3481               	retlw	129
  6964  283F  3440               	retlw	64
  6965  2840  3401               	retlw	1
  6966  2841  34C0               	retlw	192
  6967  2842  3480               	retlw	128
  6968  2843  3441               	retlw	65
  6969  2844  3400               	retlw	0
  6970  2845  34C1               	retlw	193
  6971  2846  3481               	retlw	129
  6972  2847  3440               	retlw	64
  6973  2848  3400               	retlw	0
  6974  2849  34C1               	retlw	193
  6975  284A  3481               	retlw	129
  6976  284B  3440               	retlw	64
  6977  284C  3401               	retlw	1
  6978  284D  34C0               	retlw	192
  6979  284E  3480               	retlw	128
  6980  284F  3441               	retlw	65
  6981  2850  3400               	retlw	0
  6982  2851  34C1               	retlw	193
  6983  2852  3481               	retlw	129
  6984  2853  3440               	retlw	64
  6985  2854  3401               	retlw	1
  6986  2855  34C0               	retlw	192
  6987  2856  3480               	retlw	128
  6988  2857  3441               	retlw	65
  6989  2858  3401               	retlw	1
  6990  2859  34C0               	retlw	192
  6991  285A  3480               	retlw	128
  6992  285B  3441               	retlw	65
  6993  285C  3400               	retlw	0
  6994  285D  34C1               	retlw	193
  6995  285E  3481               	retlw	129
  6996  285F  3440               	retlw	64
  6997  2860  3400               	retlw	0
  6998  2861  34C1               	retlw	193
  6999  2862  3481               	retlw	129
  7000  2863  3440               	retlw	64
  7001  2864  3401               	retlw	1
  7002  2865  34C0               	retlw	192
  7003  2866  3480               	retlw	128
  7004  2867  3441               	retlw	65
  7005  2868  3401               	retlw	1
  7006  2869  34C0               	retlw	192
  7007  286A  3480               	retlw	128
  7008  286B  3441               	retlw	65
  7009  286C  3400               	retlw	0
  7010  286D  34C1               	retlw	193
  7011  286E  3481               	retlw	129
  7012  286F  3440               	retlw	64
  7013  2870  3401               	retlw	1
  7014  2871  34C0               	retlw	192
  7015  2872  3480               	retlw	128
  7016  2873  3441               	retlw	65
  7017  2874  3400               	retlw	0
  7018  2875  34C1               	retlw	193
  7019  2876  3481               	retlw	129
  7020  2877  3440               	retlw	64
  7021  2878  3400               	retlw	0
  7022  2879  34C1               	retlw	193
  7023  287A  3481               	retlw	129
  7024  287B  3440               	retlw	64
  7025  287C  3401               	retlw	1
  7026  287D  34C0               	retlw	192
  7027  287E  3480               	retlw	128
  7028  287F  3441               	retlw	65
  7029  2880  3401               	retlw	1
  7030  2881  34C0               	retlw	192
  7031  2882  3480               	retlw	128
  7032  2883  3441               	retlw	65
  7033  2884  3400               	retlw	0
  7034  2885  34C1               	retlw	193
  7035  2886  3481               	retlw	129
  7036  2887  3440               	retlw	64
  7037  2888  3400               	retlw	0
  7038  2889  34C1               	retlw	193
  7039  288A  3481               	retlw	129
  7040  288B  3440               	retlw	64
  7041  288C  3401               	retlw	1
  7042  288D  34C0               	retlw	192
  7043  288E  3480               	retlw	128
  7044  288F  3441               	retlw	65
  7045  2890  3400               	retlw	0
  7046  2891  34C1               	retlw	193
  7047  2892  3481               	retlw	129
  7048  2893  3440               	retlw	64
  7049  2894  3401               	retlw	1
  7050  2895  34C0               	retlw	192
  7051  2896  3480               	retlw	128
  7052  2897  3441               	retlw	65
  7053  2898  3401               	retlw	1
  7054  2899  34C0               	retlw	192
  7055  289A  3480               	retlw	128
  7056  289B  3441               	retlw	65
  7057  289C  3400               	retlw	0
  7058  289D  34C1               	retlw	193
  7059  289E  3481               	retlw	129
  7060  289F  3440               	retlw	64
  7061  28A0  3400               	retlw	0
  7062  28A1  34C1               	retlw	193
  7063  28A2  3481               	retlw	129
  7064  28A3  3440               	retlw	64
  7065  28A4  3401               	retlw	1
  7066  28A5  34C0               	retlw	192
  7067  28A6  3480               	retlw	128
  7068  28A7  3441               	retlw	65
  7069  28A8  3401               	retlw	1
  7070  28A9  34C0               	retlw	192
  7071  28AA  3480               	retlw	128
  7072  28AB  3441               	retlw	65
  7073  28AC  3400               	retlw	0
  7074  28AD  34C1               	retlw	193
  7075  28AE  3481               	retlw	129
  7076  28AF  3440               	retlw	64
  7077  28B0  3401               	retlw	1
  7078  28B1  34C0               	retlw	192
  7079  28B2  3480               	retlw	128
  7080  28B3  3441               	retlw	65
  7081  28B4  3400               	retlw	0
  7082  28B5  34C1               	retlw	193
  7083  28B6  3481               	retlw	129
  7084  28B7  3440               	retlw	64
  7085  28B8  3400               	retlw	0
  7086  28B9  34C1               	retlw	193
  7087  28BA  3481               	retlw	129
  7088  28BB  3440               	retlw	64
  7089  28BC  3401               	retlw	1
  7090  28BD  34C0               	retlw	192
  7091  28BE  3480               	retlw	128
  7092  28BF  3441               	retlw	65
  7093  28C0  3400               	retlw	0
  7094  28C1  34C1               	retlw	193
  7095  28C2  3481               	retlw	129
  7096  28C3  3440               	retlw	64
  7097  28C4  3401               	retlw	1
  7098  28C5  34C0               	retlw	192
  7099  28C6  3480               	retlw	128
  7100  28C7  3441               	retlw	65
  7101  28C8  3401               	retlw	1
  7102  28C9  34C0               	retlw	192
  7103  28CA  3480               	retlw	128
  7104  28CB  3441               	retlw	65
  7105  28CC  3400               	retlw	0
  7106  28CD  34C1               	retlw	193
  7107  28CE  3481               	retlw	129
  7108  28CF  3440               	retlw	64
  7109  28D0  3401               	retlw	1
  7110  28D1  34C0               	retlw	192
  7111  28D2  3480               	retlw	128
  7112  28D3  3441               	retlw	65
  7113  28D4  3400               	retlw	0
  7114  28D5  34C1               	retlw	193
  7115  28D6  3481               	retlw	129
  7116  28D7  3440               	retlw	64
  7117  28D8  3400               	retlw	0
  7118  28D9  34C1               	retlw	193
  7119  28DA  3481               	retlw	129
  7120  28DB  3440               	retlw	64
  7121  28DC  3401               	retlw	1
  7122  28DD  34C0               	retlw	192
  7123  28DE  3480               	retlw	128
  7124  28DF  3441               	retlw	65
  7125  28E0  3401               	retlw	1
  7126  28E1  34C0               	retlw	192
  7127  28E2  3480               	retlw	128
  7128  28E3  3441               	retlw	65
  7129  28E4  3400               	retlw	0
  7130  28E5  34C1               	retlw	193
  7131  28E6  3481               	retlw	129
  7132  28E7  3440               	retlw	64
  7133  28E8  3400               	retlw	0
  7134  28E9  34C1               	retlw	193
  7135  28EA  3481               	retlw	129
  7136  28EB  3440               	retlw	64
  7137  28EC  3401               	retlw	1
  7138  28ED  34C0               	retlw	192
  7139  28EE  3480               	retlw	128
  7140  28EF  3441               	retlw	65
  7141  28F0  3400               	retlw	0
  7142  28F1  34C1               	retlw	193
  7143  28F2  3481               	retlw	129
  7144  28F3  3440               	retlw	64
  7145  28F4  3401               	retlw	1
  7146  28F5  34C0               	retlw	192
  7147  28F6  3480               	retlw	128
  7148  28F7  3441               	retlw	65
  7149  28F8  3401               	retlw	1
  7150  28F9  34C0               	retlw	192
  7151  28FA  3480               	retlw	128
  7152  28FB  3441               	retlw	65
  7153  28FC  3400               	retlw	0
  7154  28FD  34C1               	retlw	193
  7155  28FE  3481               	retlw	129
  7156  28FF  3440               	retlw	64
  7157  2900                     __end_of_auchCRCHi:	
  7158  2900                     _auchCRCLo:	
  7159  2900  3400               	retlw	0
  7160  2901  34C0               	retlw	192
  7161  2902  34C1               	retlw	193
  7162  2903  3401               	retlw	1
  7163  2904  34C3               	retlw	195
  7164  2905  3403               	retlw	3
  7165  2906  3402               	retlw	2
  7166  2907  34C2               	retlw	194
  7167  2908  34C6               	retlw	198
  7168  2909  3406               	retlw	6
  7169  290A  3407               	retlw	7
  7170  290B  34C7               	retlw	199
  7171  290C  3405               	retlw	5
  7172  290D  34C5               	retlw	197
  7173  290E  34C4               	retlw	196
  7174  290F  3404               	retlw	4
  7175  2910  34CC               	retlw	204
  7176  2911  340C               	retlw	12
  7177  2912  340D               	retlw	13
  7178  2913  34CD               	retlw	205
  7179  2914  340F               	retlw	15
  7180  2915  34CF               	retlw	207
  7181  2916  34CE               	retlw	206
  7182  2917  340E               	retlw	14
  7183  2918  340A               	retlw	10
  7184  2919  34CA               	retlw	202
  7185  291A  34CB               	retlw	203
  7186  291B  340B               	retlw	11
  7187  291C  34C9               	retlw	201
  7188  291D  3409               	retlw	9
  7189  291E  3408               	retlw	8
  7190  291F  34C8               	retlw	200
  7191  2920  34D8               	retlw	216
  7192  2921  3418               	retlw	24
  7193  2922  3419               	retlw	25
  7194  2923  34D9               	retlw	217
  7195  2924  341B               	retlw	27
  7196  2925  34DB               	retlw	219
  7197  2926  34DA               	retlw	218
  7198  2927  341A               	retlw	26
  7199  2928  341E               	retlw	30
  7200  2929  34DE               	retlw	222
  7201  292A  34DF               	retlw	223
  7202  292B  341F               	retlw	31
  7203  292C  34DD               	retlw	221
  7204  292D  341D               	retlw	29
  7205  292E  341C               	retlw	28
  7206  292F  34DC               	retlw	220
  7207  2930  3414               	retlw	20
  7208  2931  34D4               	retlw	212
  7209  2932  34D5               	retlw	213
  7210  2933  3415               	retlw	21
  7211  2934  34D7               	retlw	215
  7212  2935  3417               	retlw	23
  7213  2936  3416               	retlw	22
  7214  2937  34D6               	retlw	214
  7215  2938  34D2               	retlw	210
  7216  2939  3412               	retlw	18
  7217  293A  3413               	retlw	19
  7218  293B  34D3               	retlw	211
  7219  293C  3411               	retlw	17
  7220  293D  34D1               	retlw	209
  7221  293E  34D0               	retlw	208
  7222  293F  3410               	retlw	16
  7223  2940  34F0               	retlw	240
  7224  2941  3430               	retlw	48
  7225  2942  3431               	retlw	49
  7226  2943  34F1               	retlw	241
  7227  2944  3433               	retlw	51
  7228  2945  34F3               	retlw	243
  7229  2946  34F2               	retlw	242
  7230  2947  3432               	retlw	50
  7231  2948  3436               	retlw	54
  7232  2949  34F6               	retlw	246
  7233  294A  34F7               	retlw	247
  7234  294B  3437               	retlw	55
  7235  294C  34F5               	retlw	245
  7236  294D  3435               	retlw	53
  7237  294E  3434               	retlw	52
  7238  294F  34F4               	retlw	244
  7239  2950  343C               	retlw	60
  7240  2951  34FC               	retlw	252
  7241  2952  34FD               	retlw	253
  7242  2953  343D               	retlw	61
  7243  2954  34FF               	retlw	255
  7244  2955  343F               	retlw	63
  7245  2956  343E               	retlw	62
  7246  2957  34FE               	retlw	254
  7247  2958  34FA               	retlw	250
  7248  2959  343A               	retlw	58
  7249  295A  343B               	retlw	59
  7250  295B  34FB               	retlw	251
  7251  295C  3439               	retlw	57
  7252  295D  34F9               	retlw	249
  7253  295E  34F8               	retlw	248
  7254  295F  3438               	retlw	56
  7255  2960  3428               	retlw	40
  7256  2961  34E8               	retlw	232
  7257  2962  34E9               	retlw	233
  7258  2963  3429               	retlw	41
  7259  2964  34EB               	retlw	235
  7260  2965  342B               	retlw	43
  7261  2966  342A               	retlw	42
  7262  2967  34EA               	retlw	234
  7263  2968  34EE               	retlw	238
  7264  2969  342E               	retlw	46
  7265  296A  342F               	retlw	47
  7266  296B  34EF               	retlw	239
  7267  296C  342D               	retlw	45
  7268  296D  34ED               	retlw	237
  7269  296E  34EC               	retlw	236
  7270  296F  342C               	retlw	44
  7271  2970  34E4               	retlw	228
  7272  2971  3424               	retlw	36
  7273  2972  3425               	retlw	37
  7274  2973  34E5               	retlw	229
  7275  2974  3427               	retlw	39
  7276  2975  34E7               	retlw	231
  7277  2976  34E6               	retlw	230
  7278  2977  3426               	retlw	38
  7279  2978  3422               	retlw	34
  7280  2979  34E2               	retlw	226
  7281  297A  34E3               	retlw	227
  7282  297B  3423               	retlw	35
  7283  297C  34E1               	retlw	225
  7284  297D  3421               	retlw	33
  7285  297E  3420               	retlw	32
  7286  297F  34E0               	retlw	224
  7287  2980  34A0               	retlw	160
  7288  2981  3460               	retlw	96
  7289  2982  3461               	retlw	97
  7290  2983  34A1               	retlw	161
  7291  2984  3463               	retlw	99
  7292  2985  34A3               	retlw	163
  7293  2986  34A2               	retlw	162
  7294  2987  3462               	retlw	98
  7295  2988  3466               	retlw	102
  7296  2989  34A6               	retlw	166
  7297  298A  34A7               	retlw	167
  7298  298B  3467               	retlw	103
  7299  298C  34A5               	retlw	165
  7300  298D  3465               	retlw	101
  7301  298E  3464               	retlw	100
  7302  298F  34A4               	retlw	164
  7303  2990  346C               	retlw	108
  7304  2991  34AC               	retlw	172
  7305  2992  34AD               	retlw	173
  7306  2993  346D               	retlw	109
  7307  2994  34AF               	retlw	175
  7308  2995  346F               	retlw	111
  7309  2996  346E               	retlw	110
  7310  2997  34AE               	retlw	174
  7311  2998  34AA               	retlw	170
  7312  2999  346A               	retlw	106
  7313  299A  346B               	retlw	107
  7314  299B  34AB               	retlw	171
  7315  299C  3469               	retlw	105
  7316  299D  34A9               	retlw	169
  7317  299E  34A8               	retlw	168
  7318  299F  3468               	retlw	104
  7319  29A0  3478               	retlw	120
  7320  29A1  34B8               	retlw	184
  7321  29A2  34B9               	retlw	185
  7322  29A3  3479               	retlw	121
  7323  29A4  34BB               	retlw	187
  7324  29A5  347B               	retlw	123
  7325  29A6  347A               	retlw	122
  7326  29A7  34BA               	retlw	186
  7327  29A8  34BE               	retlw	190
  7328  29A9  347E               	retlw	126
  7329  29AA  347F               	retlw	127
  7330  29AB  34BF               	retlw	191
  7331  29AC  347D               	retlw	125
  7332  29AD  34BD               	retlw	189
  7333  29AE  34BC               	retlw	188
  7334  29AF  347C               	retlw	124
  7335  29B0  34B4               	retlw	180
  7336  29B1  3474               	retlw	116
  7337  29B2  3475               	retlw	117
  7338  29B3  34B5               	retlw	181
  7339  29B4  3477               	retlw	119
  7340  29B5  34B7               	retlw	183
  7341  29B6  34B6               	retlw	182
  7342  29B7  3476               	retlw	118
  7343  29B8  3472               	retlw	114
  7344  29B9  34B2               	retlw	178
  7345  29BA  34B3               	retlw	179
  7346  29BB  3473               	retlw	115
  7347  29BC  34B1               	retlw	177
  7348  29BD  3471               	retlw	113
  7349  29BE  3470               	retlw	112
  7350  29BF  34B0               	retlw	176
  7351  29C0  3450               	retlw	80
  7352  29C1  3490               	retlw	144
  7353  29C2  3491               	retlw	145
  7354  29C3  3451               	retlw	81
  7355  29C4  3493               	retlw	147
  7356  29C5  3453               	retlw	83
  7357  29C6  3452               	retlw	82
  7358  29C7  3492               	retlw	146
  7359  29C8  3496               	retlw	150
  7360  29C9  3456               	retlw	86
  7361  29CA  3457               	retlw	87
  7362  29CB  3497               	retlw	151
  7363  29CC  3455               	retlw	85
  7364  29CD  3495               	retlw	149
  7365  29CE  3494               	retlw	148
  7366  29CF  3454               	retlw	84
  7367  29D0  349C               	retlw	156
  7368  29D1  345C               	retlw	92
  7369  29D2  345D               	retlw	93
  7370  29D3  349D               	retlw	157
  7371  29D4  345F               	retlw	95
  7372  29D5  349F               	retlw	159
  7373  29D6  349E               	retlw	158
  7374  29D7  345E               	retlw	94
  7375  29D8  345A               	retlw	90
  7376  29D9  349A               	retlw	154
  7377  29DA  349B               	retlw	155
  7378  29DB  345B               	retlw	91
  7379  29DC  3499               	retlw	153
  7380  29DD  3459               	retlw	89
  7381  29DE  3458               	retlw	88
  7382  29DF  3498               	retlw	152
  7383  29E0  3488               	retlw	136
  7384  29E1  3448               	retlw	72
  7385  29E2  3449               	retlw	73
  7386  29E3  3489               	retlw	137
  7387  29E4  344B               	retlw	75
  7388  29E5  348B               	retlw	139
  7389  29E6  348A               	retlw	138
  7390  29E7  344A               	retlw	74
  7391  29E8  344E               	retlw	78
  7392  29E9  348E               	retlw	142
  7393  29EA  348F               	retlw	143
  7394  29EB  344F               	retlw	79
  7395  29EC  348D               	retlw	141
  7396  29ED  344D               	retlw	77
  7397  29EE  344C               	retlw	76
  7398  29EF  348C               	retlw	140
  7399  29F0  3444               	retlw	68
  7400  29F1  3484               	retlw	132
  7401  29F2  3485               	retlw	133
  7402  29F3  3445               	retlw	69
  7403  29F4  3487               	retlw	135
  7404  29F5  3447               	retlw	71
  7405  29F6  3446               	retlw	70
  7406  29F7  3486               	retlw	134
  7407  29F8  3482               	retlw	130
  7408  29F9  3442               	retlw	66
  7409  29FA  3443               	retlw	67
  7410  29FB  3483               	retlw	131
  7411  29FC  3441               	retlw	65
  7412  29FD  3481               	retlw	129
  7413  29FE  3480               	retlw	128
  7414  29FF  3440               	retlw	64
  7415  2A00                     __end_of_auchCRCLo:	
  7416  2A00                     _LCDDigitalIndexTable:	
  7417  2A00  3430               	retlw	48
  7418  2A01  3431               	retlw	49
  7419  2A02  3432               	retlw	50
  7420  2A03  3433               	retlw	51
  7421  2A04  3434               	retlw	52
  7422  2A05  3435               	retlw	53
  7423  2A06  3436               	retlw	54
  7424  2A07  3437               	retlw	55
  7425  2A08  3438               	retlw	56
  7426  2A09  3439               	retlw	57
  7427  2A0A  3461               	retlw	97
  7428  2A0B  3462               	retlw	98
  7429  2A0C  3463               	retlw	99
  7430  2A0D  3464               	retlw	100
  7431  2A0E  3465               	retlw	101
  7432  2A0F  3466               	retlw	102
  7433  2A10  3467               	retlw	103
  7434  2A11  3468               	retlw	104
  7435  2A12  3469               	retlw	105
  7436  2A13  346A               	retlw	106
  7437  2A14  346B               	retlw	107
  7438  2A15  346C               	retlw	108
  7439  2A16  346D               	retlw	109
  7440  2A17  346E               	retlw	110
  7441  2A18  346F               	retlw	111
  7442  2A19  3470               	retlw	112
  7443  2A1A  3471               	retlw	113
  7444  2A1B  3472               	retlw	114
  7445  2A1C  3473               	retlw	115
  7446  2A1D  3474               	retlw	116
  7447  2A1E  3475               	retlw	117
  7448  2A1F  3476               	retlw	118
  7449  2A20  3477               	retlw	119
  7450  2A21  3478               	retlw	120
  7451  2A22  3479               	retlw	121
  7452  2A23  347A               	retlw	122
  7453  2A24  342E               	retlw	46
  7454  2A25  342D               	retlw	45
  7455  2A26  343A               	retlw	58
  7456  2A27  3420               	retlw	32
  7457  2A28  3400               	retlw	0
  7458  2A29                     __end_of_LCDDigitalIndexTable:	
  7459  2A29                     _LCDDigitalTable:	
  7460  2A29  343F               	retlw	63
  7461  2A2A  3430               	retlw	48
  7462  2A2B  345B               	retlw	91
  7463  2A2C  344F               	retlw	79
  7464  2A2D  3466               	retlw	102
  7465  2A2E  346D               	retlw	109
  7466  2A2F  347D               	retlw	125
  7467  2A30  3407               	retlw	7
  7468  2A31  347F               	retlw	127
  7469  2A32  346F               	retlw	111
  7470  2A33  3477               	retlw	119
  7471  2A34  347C               	retlw	124
  7472  2A35  3439               	retlw	57
  7473  2A36  345E               	retlw	94
  7474  2A37  3479               	retlw	121
  7475  2A38  3471               	retlw	113
  7476  2A39  346F               	retlw	111
  7477  2A3A  3476               	retlw	118
  7478  2A3B  3430               	retlw	48
  7479  2A3C  340E               	retlw	14
  7480  2A3D  3400               	retlw	0
  7481  2A3E  3438               	retlw	56
  7482  2A3F  3400               	retlw	0
  7483  2A40  3437               	retlw	55
  7484  2A41  343F               	retlw	63
  7485  2A42  3473               	retlw	115
  7486  2A43  3467               	retlw	103
  7487  2A44  3431               	retlw	49
  7488  2A45  346D               	retlw	109
  7489  2A46  3478               	retlw	120
  7490  2A47  343E               	retlw	62
  7491  2A48  3400               	retlw	0
  7492  2A49  3400               	retlw	0
  7493  2A4A  3400               	retlw	0
  7494  2A4B  346E               	retlw	110
  7495  2A4C  345B               	retlw	91
  7496  2A4D  3440               	retlw	64
  7497  2A4E  3440               	retlw	64
  7498  2A4F  3448               	retlw	72
  7499  2A50  3400               	retlw	0
  7500  2A51                     __end_of_LCDDigitalTable:	
  7501  2A51                     _hexTable:	
  7502  2A51  3430               	retlw	48
  7503  2A52  3431               	retlw	49
  7504  2A53  3432               	retlw	50
  7505  2A54  3433               	retlw	51
  7506  2A55  3434               	retlw	52
  7507  2A56  3435               	retlw	53
  7508  2A57  3436               	retlw	54
  7509  2A58  3437               	retlw	55
  7510  2A59  3438               	retlw	56
  7511  2A5A  3439               	retlw	57
  7512  2A5B  3461               	retlw	97
  7513  2A5C  3462               	retlw	98
  7514  2A5D  3463               	retlw	99
  7515  2A5E  3464               	retlw	100
  7516  2A5F  3465               	retlw	101
  7517  2A60  3466               	retlw	102
  7518  2A61  3400               	retlw	0
  7519  2A62                     __end_of_hexTable:	
  7520  2A62                     _TablerxAlign:	
  7521  2A62  34FF               	retlw	255
  7522  2A63  34FE               	retlw	254
  7523  2A64  34FC               	retlw	252
  7524  2A65  34F8               	retlw	248
  7525  2A66  34F0               	retlw	240
  7526  2A67  34E0               	retlw	224
  7527  2A68  34C0               	retlw	192
  7528  2A69  3480               	retlw	128
  7529  2A6A                     __end_of_TablerxAlign:	
  7530  3F80                     _Main_flowCalibrationTable_absaddr	set	16256
  7531  3E80                     _bkupSystemData_absaddr	set	16000
  7532  3F00                     _mainSystemData_absaddr	set	16128
  7533  2A6A                     _defaultKeyA:	
  7534  2A6A  34FF               	retlw	255
  7535  2A6B  34FF               	retlw	255
  7536  2A6C  34FF               	retlw	255
  7537  2A6D  34FF               	retlw	255
  7538  2A6E  34FF               	retlw	255
  7539  2A6F  34FF               	retlw	255
  7540  2A70                     __end_of_defaultKeyA:	
  7541  3F80                     _Main_flowCalibrationTable_absaddr	set	16256
  7542  2A70                     STR_16:	
  7543  2A70  342D               	retlw	45	;'-'
  7544  2A71  342D               	retlw	45	;'-'
  7545  2A72  3466               	retlw	102	;'f'
  7546  2A73  3475               	retlw	117	;'u'
  7547  2A74  346C               	retlw	108	;'l'
  7548  2A75  346C               	retlw	108	;'l'
  7549  2A76  342D               	retlw	45	;'-'
  7550  2A77  342D               	retlw	45	;'-'
  7551  2A78  3400               	retlw	0
  7552  2A79                     STR_1:	
  7553  2A79  3420               	retlw	32	;' '
  7554  2A7A  342D               	retlw	45	;'-'
  7555  2A7B  3468               	retlw	104	;'h'
  7556  2A7C  3465               	retlw	101	;'e'
  7557  2A7D  346C               	retlw	108	;'l'
  7558  2A7E  346C               	retlw	108	;'l'
  7559  2A7F  346F               	retlw	111	;'o'
  7560  2A80  342D               	retlw	45	;'-'
  7561  2A81  3400               	retlw	0
  7562  2A82                     STR_13:	
  7563  2A82  3463               	retlw	99	;'c'
  7564  2A83  3461               	retlw	97	;'a'
  7565  2A84  3472               	retlw	114	;'r'
  7566  2A85  3464               	retlw	100	;'d'
  7567  2A86  342D               	retlw	45	;'-'
  7568  2A87  3469               	retlw	105	;'i'
  7569  2A88  3464               	retlw	100	;'d'
  7570  2A89  3430               	retlw	48	;'0'
  7571  2A8A  3400               	retlw	0
  7572  2A8B                     STR_14:	
  7573  2A8B  3463               	retlw	99	;'c'
  7574  2A8C  3461               	retlw	97	;'a'
  7575  2A8D  3472               	retlw	114	;'r'
  7576  2A8E  3464               	retlw	100	;'d'
  7577  2A8F  342D               	retlw	45	;'-'
  7578  2A90  3469               	retlw	105	;'i'
  7579  2A91  3464               	retlw	100	;'d'
  7580  2A92  3439               	retlw	57	;'9'
  7581  2A93  3400               	retlw	0
  7582  2A94                     STR_5:	
  7583  2A94  3472               	retlw	114	;'r'
  7584  2A95  3465               	retlw	101	;'e'
  7585  2A96  3463               	retlw	99	;'c'
  7586  2A97  3468               	retlw	104	;'h'
  7587  2A98  3461               	retlw	97	;'a'
  7588  2A99  3472               	retlw	114	;'r'
  7589  2A9A  3467               	retlw	103	;'g'
  7590  2A9B  3465               	retlw	101	;'e'
  7591  2A9C  3400               	retlw	0
  7592  2A9D                     STR_4:	
  7593  2A9D  3420               	retlw	32	;' '
  7594  2A9E  3420               	retlw	32	;' '
  7595  2A9F  3420               	retlw	32	;' '
  7596  2AA0  3463               	retlw	99	;'c'
  7597  2AA1  3475               	retlw	117	;'u'
  7598  2AA2  342D               	retlw	45	;'-'
  7599  2AA3  3400               	retlw	0
  7600  2AA4                     STR_2:	
  7601  2AA4  3420               	retlw	32	;' '
  7602  2AA5  3463               	retlw	99	;'c'
  7603  2AA6  3473               	retlw	115	;'s'
  7604  2AA7  3437               	retlw	55	;'7'
  7605  2AA8  3430               	retlw	48	;'0'
  7606  2AA9  3430               	retlw	48	;'0'
  7607  2AAA  3400               	retlw	0
  7608  2AAB                     STR_9:	
  7609  2AAB  3464               	retlw	100	;'d'
  7610  2AAC  3431               	retlw	49	;'1'
  7611  2AAD  3420               	retlw	32	;' '
  7612  2AAE  3420               	retlw	32	;' '
  7613  2AAF  3420               	retlw	32	;' '
  7614  2AB0  3400               	retlw	0
  7615  2AB1                     STR_11:	
  7616  2AB1  3464               	retlw	100	;'d'
  7617  2AB2  3432               	retlw	50	;'2'
  7618  2AB3  3420               	retlw	32	;' '
  7619  2AB4  3420               	retlw	32	;' '
  7620  2AB5  3420               	retlw	32	;' '
  7621  2AB6  3400               	retlw	0
  7622  2AB7                     STR_10:	
  7623  2AB7  3464               	retlw	100	;'d'
  7624  2AB8  3431               	retlw	49	;'1'
  7625  2AB9  3420               	retlw	32	;' '
  7626  2ABA  3420               	retlw	32	;' '
  7627  2ABB  342D               	retlw	45	;'-'
  7628  2ABC  3400               	retlw	0
  7629  2ABD                     STR_12:	
  7630  2ABD  3464               	retlw	100	;'d'
  7631  2ABE  3432               	retlw	50	;'2'
  7632  2ABF  3420               	retlw	32	;' '
  7633  2AC0  3420               	retlw	32	;' '
  7634  2AC1  342D               	retlw	45	;'-'
  7635  2AC2  3400               	retlw	0
  7636  2AC3                     STR_6:	
  7637  2AC3  3461               	retlw	97	;'a'
  7638  2AC4  3464               	retlw	100	;'d'
  7639  2AC5  3464               	retlw	100	;'d'
  7640  2AC6  3472               	retlw	114	;'r'
  7641  2AC7  342D               	retlw	45	;'-'
  7642  2AC8  3400               	retlw	0
  7643  2AC9                     STR_15:	
  7644  2AC9  3470               	retlw	112	;'p'
  7645  2ACA  3473               	retlw	115	;'s'
  7646  2ACB  3464               	retlw	100	;'d'
  7647  2ACC  342D               	retlw	45	;'-'
  7648  2ACD  3400               	retlw	0
  7649  2ACE                     STR_7:	
  7650  2ACE  3464               	retlw	100	;'d'
  7651  2ACF  346A               	retlw	106	;'j'
  7652  2AD0  342D               	retlw	45	;'-'
  7653  2AD1  3400               	retlw	0
  7654  2AD2                     STR_8:	
  7655  2AD2  3473               	retlw	115	;'s'
  7656  2AD3  346A               	retlw	106	;'j'
  7657  2AD4  342D               	retlw	45	;'-'
  7658  2AD5  3400               	retlw	0
  7659  2AD6                     STR_3:	
  7660  2AD6  346C               	retlw	108	;'l'
  7661  2AD7  342D               	retlw	45	;'-'
  7662  2AD8  3400               	retlw	0
  7663                           
  7664                           ; #config settings
  7665  0000                     
  7666                           	psect	_Main_flowCalibrationTable_text
  7667  3F80                     __p_Main_flowCalibrationTable_text:	
  7668  3F80                     _Main_flowCalibrationTable:	
  7669  3F80  3400               	retlw	0
  7670  3F81  3400               	retlw	0
  7671  3F82  3400               	retlw	0
  7672  3F83  3400               	retlw	0
  7673  3F84  3400               	retlw	0
  7674  3F85  3400               	retlw	0
  7675  3F86  3400               	retlw	0
  7676  3F87  3400               	retlw	0
  7677  3F88  3400               	retlw	0
  7678  3F89  3400               	retlw	0
  7679  3F8A  3400               	retlw	0
  7680  3F8B  3400               	retlw	0
  7681  3F8C  3400               	retlw	0
  7682  3F8D  3400               	retlw	0
  7683  3F8E  3400               	retlw	0
  7684  3F8F  3400               	retlw	0
  7685  3F90  3400               	retlw	0
  7686  3F91  3400               	retlw	0
  7687  3F92  3400               	retlw	0
  7688  3F93  3400               	retlw	0
  7689  3F94  3400               	retlw	0
  7690  3F95  3400               	retlw	0
  7691  3F96  3400               	retlw	0
  7692  3F97  3400               	retlw	0
  7693  3F98  3400               	retlw	0
  7694  3F99  3400               	retlw	0
  7695  3F9A  3400               	retlw	0
  7696  3F9B  3400               	retlw	0
  7697  3F9C  3400               	retlw	0
  7698  3F9D  3400               	retlw	0
  7699  3F9E  3400               	retlw	0
  7700  3F9F  3400               	retlw	0
  7701  3FA0  3400               	retlw	0
  7702  3FA1  3400               	retlw	0
  7703  3FA2  3400               	retlw	0
  7704  3FA3  3400               	retlw	0
  7705  3FA4  3400               	retlw	0
  7706  3FA5  3400               	retlw	0
  7707  3FA6  3400               	retlw	0
  7708  3FA7  3400               	retlw	0
  7709  3FA8  3400               	retlw	0
  7710  3FA9  3400               	retlw	0
  7711  3FAA  3400               	retlw	0
  7712  3FAB  3400               	retlw	0
  7713  3FAC  3400               	retlw	0
  7714  3FAD  3400               	retlw	0
  7715  3FAE  3400               	retlw	0
  7716  3FAF  3400               	retlw	0
  7717  3FB0  3400               	retlw	0
  7718  3FB1  3400               	retlw	0
  7719  3FB2  3400               	retlw	0
  7720  3FB3  3400               	retlw	0
  7721  3FB4  3400               	retlw	0
  7722  3FB5  3400               	retlw	0
  7723  3FB6  3400               	retlw	0
  7724  3FB7  3400               	retlw	0
  7725  3FB8  3400               	retlw	0
  7726  3FB9  3400               	retlw	0
  7727  3FBA  3400               	retlw	0
  7728  3FBB  3400               	retlw	0
  7729  3FBC  3400               	retlw	0
  7730  3FBD  3400               	retlw	0
  7731  3FBE  3400               	retlw	0
  7732  3FBF  3400               	retlw	0
  7733  3FC0  3400               	retlw	0
  7734  3FC1  3400               	retlw	0
  7735  3FC2  3400               	retlw	0
  7736  3FC3  3400               	retlw	0
  7737  3FC4  3400               	retlw	0
  7738  3FC5  3400               	retlw	0
  7739  3FC6  3400               	retlw	0
  7740  3FC7  3400               	retlw	0
  7741  3FC8  3400               	retlw	0
  7742  3FC9  3400               	retlw	0
  7743  3FCA  3400               	retlw	0
  7744  3FCB  3400               	retlw	0
  7745  3FCC  3400               	retlw	0
  7746  3FCD  3400               	retlw	0
  7747  3FCE  3400               	retlw	0
  7748  3FCF  3400               	retlw	0
  7749  3FD0  3400               	retlw	0
  7750  3FD1  3400               	retlw	0
  7751  3FD2  3400               	retlw	0
  7752  3FD3  3400               	retlw	0
  7753  3FD4  3400               	retlw	0
  7754  3FD5  3400               	retlw	0
  7755  3FD6  3400               	retlw	0
  7756  3FD7  3400               	retlw	0
  7757  3FD8  3400               	retlw	0
  7758  3FD9  3400               	retlw	0
  7759  3FDA  3400               	retlw	0
  7760  3FDB  3400               	retlw	0
  7761  3FDC  3400               	retlw	0
  7762  3FDD  3400               	retlw	0
  7763  3FDE  3400               	retlw	0
  7764  3FDF  3400               	retlw	0
  7765  3FE0  3400               	retlw	0
  7766  3FE1  3400               	retlw	0
  7767  3FE2  3400               	retlw	0
  7768  3FE3  3400               	retlw	0
  7769  3FE4  3400               	retlw	0
  7770  3FE5  3400               	retlw	0
  7771  3FE6  3400               	retlw	0
  7772  3FE7  3400               	retlw	0
  7773  3FE8  3400               	retlw	0
  7774  3FE9  3400               	retlw	0
  7775  3FEA  3400               	retlw	0
  7776  3FEB  3400               	retlw	0
  7777  3FEC  3400               	retlw	0
  7778  3FED  3400               	retlw	0
  7779  3FEE  3400               	retlw	0
  7780  3FEF  3400               	retlw	0
  7781  3FF0  3400               	retlw	0
  7782  3FF1  3400               	retlw	0
  7783  3FF2  3400               	retlw	0
  7784  3FF3  3400               	retlw	0
  7785  3FF4  3400               	retlw	0
  7786  3FF5  3400               	retlw	0
  7787  3FF6  3400               	retlw	0
  7788  3FF7  3400               	retlw	0
  7789  3FF8  3400               	retlw	0
  7790  3FF9  3400               	retlw	0
  7791  3FFA  3400               	retlw	0
  7792  3FFB  3400               	retlw	0
  7793  3FFC                     __end_of_Main_flowCalibrationTable:	
  7794  3E80                     _bkupSystemData_absaddr	set	16000
  7795                           
  7796                           	psect	_bkupSystemData_text
  7797  3E80                     __p_bkupSystemData_text:	
  7798  3E80                     _bkupSystemData:	
  7799  3E80  34E1               	retlw	225
  7800  3E81  3410               	retlw	16
  7801  3E82  3400               	retlw	0
  7802  3E83  3400               	retlw	0
  7803  3E84  3400               	retlw	0
  7804  3E85  3400               	retlw	0
  7805  3E86  3400               	retlw	0
  7806  3E87  3400               	retlw	0
  7807  3E88  3441               	retlw	65
  7808  3E89  34FF               	retlw	255
  7809  3E8A  34B8               	retlw	184
  7810  3E8B  3422               	retlw	34
  7811  3E8C  3400               	retlw	0
  7812  3E8D  3400               	retlw	0
  7813  3E8E  3400               	retlw	0
  7814  3E8F  3400               	retlw	0
  7815  3E90  3400               	retlw	0
  7816  3E91  3400               	retlw	0
  7817  3E92  3464               	retlw	100
  7818  3E93  3400               	retlw	0
  7819  3E94  3432               	retlw	50
  7820  3E95  3400               	retlw	0
  7821  3E96  3428               	retlw	40
  7822  3E97  3400               	retlw	0
  7823  3E98  3400               	retlw	0
  7824  3E99  3400               	retlw	0
  7825  3E9A  34E8               	retlw	232
  7826  3E9B  3403               	retlw	3
  7827  3E9C  3400               	retlw	0
  7828  3E9D  3400               	retlw	0
  7829  3E9E  3400               	retlw	0
  7830  3E9F  3400               	retlw	0
  7831  3EA0  3400               	retlw	0
  7832  3EA1  3400               	retlw	0
  7833  3EA2  3400               	retlw	0
  7834  3EA3  3400               	retlw	0
  7835  3EA4  3464               	retlw	100
  7836  3EA5  3400               	retlw	0
  7837  3EA6  3400               	retlw	0
  7838  3EA7  3400               	retlw	0
  7839  3EA8  34B8               	retlw	184
  7840  3EA9  340B               	retlw	11
  7841  3EAA  3400               	retlw	0
  7842  3EAB  3400               	retlw	0
  7843  3EAC  3400               	retlw	0
  7844  3EAD  3400               	retlw	0
  7845  3EAE  3400               	retlw	0
  7846  3EAF  3400               	retlw	0
  7847  3EB0  3400               	retlw	0
  7848  3EB1  3400               	retlw	0
  7849  3EB2  3400               	retlw	0
  7850  3EB3  3400               	retlw	0
  7851  3EB4  3400               	retlw	0
  7852  3EB5  3400               	retlw	0
  7853  3EB6  3400               	retlw	0
  7854  3EB7  3400               	retlw	0
  7855  3EB8  3400               	retlw	0
  7856  3EB9  3405               	retlw	5
  7857  3EBA  3400               	retlw	0
  7858  3EBB  3401               	retlw	1
  7859  3EBC  3400               	retlw	0
  7860  3EBD  3401               	retlw	1
  7861  3EBE  3400               	retlw	0
  7862  3EBF  3400               	retlw	0
  7863  3EC0  3400               	retlw	0
  7864  3EC1  3400               	retlw	0
  7865  3EC2  3400               	retlw	0
  7866  3EC3  3400               	retlw	0
  7867  3EC4  3400               	retlw	0
  7868  3EC5  3400               	retlw	0
  7869  3EC6  3400               	retlw	0
  7870  3EC7  3400               	retlw	0
  7871  3EC8                     __end_of_bkupSystemData:	
  7872  3F00                     _mainSystemData_absaddr	set	16128
  7873                           
  7874                           	psect	_mainSystemData_text
  7875  3F00                     __p_mainSystemData_text:	
  7876  3F00                     _mainSystemData:	
  7877  3F00  3400               	retlw	0
  7878  3F01  3400               	retlw	0
  7879  3F02  3400               	retlw	0
  7880  3F03  3400               	retlw	0
  7881  3F04  3400               	retlw	0
  7882  3F05  3400               	retlw	0
  7883  3F06  3400               	retlw	0
  7884  3F07  3400               	retlw	0
  7885  3F08  3400               	retlw	0
  7886  3F09  3400               	retlw	0
  7887  3F0A  3400               	retlw	0
  7888  3F0B  3400               	retlw	0
  7889  3F0C  3400               	retlw	0
  7890  3F0D  3400               	retlw	0
  7891  3F0E  3400               	retlw	0
  7892  3F0F  3400               	retlw	0
  7893  3F10  3400               	retlw	0
  7894  3F11  3400               	retlw	0
  7895  3F12  3400               	retlw	0
  7896  3F13  3400               	retlw	0
  7897  3F14  3400               	retlw	0
  7898  3F15  3400               	retlw	0
  7899  3F16  3400               	retlw	0
  7900  3F17  3400               	retlw	0
  7901  3F18  3400               	retlw	0
  7902  3F19  3400               	retlw	0
  7903  3F1A  3400               	retlw	0
  7904  3F1B  3400               	retlw	0
  7905  3F1C  3400               	retlw	0
  7906  3F1D  3400               	retlw	0
  7907  3F1E  3400               	retlw	0
  7908  3F1F  3400               	retlw	0
  7909  3F20  3400               	retlw	0
  7910  3F21  3400               	retlw	0
  7911  3F22  3400               	retlw	0
  7912  3F23  3400               	retlw	0
  7913  3F24  3400               	retlw	0
  7914  3F25  3400               	retlw	0
  7915  3F26  3400               	retlw	0
  7916  3F27  3400               	retlw	0
  7917  3F28  3400               	retlw	0
  7918  3F29  3400               	retlw	0
  7919  3F2A  3400               	retlw	0
  7920  3F2B  3400               	retlw	0
  7921  3F2C  3400               	retlw	0
  7922  3F2D  3400               	retlw	0
  7923  3F2E  3400               	retlw	0
  7924  3F2F  3400               	retlw	0
  7925  3F30  3400               	retlw	0
  7926  3F31  3400               	retlw	0
  7927  3F32  3400               	retlw	0
  7928  3F33  3400               	retlw	0
  7929  3F34  3400               	retlw	0
  7930  3F35  3400               	retlw	0
  7931  3F36  3400               	retlw	0
  7932  3F37  3400               	retlw	0
  7933  3F38  3400               	retlw	0
  7934  3F39  3400               	retlw	0
  7935  3F3A  3400               	retlw	0
  7936  3F3B  3400               	retlw	0
  7937  3F3C  3400               	retlw	0
  7938  3F3D  3400               	retlw	0
  7939  3F3E  3400               	retlw	0
  7940  3F3F  3400               	retlw	0
  7941  3F40  3400               	retlw	0
  7942  3F41  3400               	retlw	0
  7943  3F42  3400               	retlw	0
  7944  3F43  3400               	retlw	0
  7945  3F44  3400               	retlw	0
  7946  3F45  3400               	retlw	0
  7947  3F46  3400               	retlw	0
  7948  3F47  3400               	retlw	0
  7949  3F48                     __end_of_mainSystemData:	
  7950                           
  7951                           	psect	nvBANK1
  7952  00ED                     __pnvBANK1:	
  7953  00ED                     _timer1ReloadVal:	
  7954  00ED                     	ds	2
  7955                           
  7956                           	psect	nvBANK3
  7957  01C2                     __pnvBANK3:	
  7958  01C2                     _TMR0_InterruptHandler:	
  7959  01C2                     	ds	2
  7960  01C4                     _TMR1_InterruptHandler:	
  7961  01C4                     	ds	2
  7962  01C6                     _timer0ReloadVal:	
  7963  01C6                     	ds	1
  7964  000B                     _INTCONbits	set	11
  7965  0011                     _PIR1bits	set	17
  7966  000C                     _PORTAbits	set	12
  7967  000D                     _PORTB	set	13
  7968  000D                     _PORTBbits	set	13
  7969  000E                     _PORTCbits	set	14
  7970  000F                     _PORTDbits	set	15
  7971  0018                     _T1CON	set	24
  7972  0018                     _T1CONbits	set	24
  7973  0019                     _T1GCON	set	25
  7974  0019                     _T1GCONbits	set	25
  7975  0015                     _TMR0	set	21
  7976  0017                     _TMR1H	set	23
  7977  0016                     _TMR1L	set	22
  7978  0095                     _OPTION_REG	set	149
  7979  0095                     _OPTION_REGbits	set	149
  7980  0099                     _OSCCON	set	153
  7981  0098                     _OSCTUNE	set	152
  7982  0091                     _PIE1bits	set	145
  7983  008C                     _TRISA	set	140
  7984  008C                     _TRISAbits	set	140
  7985  008D                     _TRISB	set	141
  7986  008D                     _TRISBbits	set	141
  7987  008E                     _TRISC	set	142
  7988  008E                     _TRISCbits	set	142
  7989  008F                     _TRISD	set	143
  7990  008F                     _TRISDbits	set	143
  7991  0090                     _TRISE	set	144
  7992  0097                     _WDTCON	set	151
  7993  011D                     _APFCON	set	285
  7994  010C                     _LATA	set	268
  7995  010C                     _LATAbits	set	268
  7996  010D                     _LATB	set	269
  7997  010D                     _LATBbits	set	269
  7998  010E                     _LATC	set	270
  7999  010E                     _LATCbits	set	270
  8000  010F                     _LATD	set	271
  8001  010F                     _LATDbits	set	271
  8002  0110                     _LATE	set	272
  8003  018C                     _ANSELA	set	396
  8004  018C                     _ANSELAbits	set	396
  8005  0190                     _ANSELE	set	400
  8006  019F                     _BAUD1CON	set	415
  8007  0192                     _EEADRH	set	402
  8008  0191                     _EEADRL	set	401
  8009  0195                     _EECON1bits	set	405
  8010  0196                     _EECON2	set	406
  8011  0194                     _EEDATH	set	404
  8012  0193                     _EEDATL	set	403
  8013  0199                     _RC1REG	set	409
  8014  019D                     _RC1STA	set	413
  8015  019D                     _RC1STAbits	set	413
  8016  019C                     _SP1BRGH	set	412
  8017  019B                     _SP1BRGL	set	411
  8018  019A                     _TX1REG	set	410
  8019  019E                     _TX1STA	set	414
  8020  020D                     _WPUB	set	525
  8021  030C                     _TRISF	set	780
  8022  030C                     _TRISFbits	set	780
  8023  030D                     _TRISG	set	781
  8024  038C                     _LATF	set	908
  8025  038C                     _LATFbits	set	908
  8026  038D                     _LATG	set	909
  8027  040C                     _ANSELF	set	1036
  8028  040C                     _ANSELFbits	set	1036
  8029  040D                     _ANSELG	set	1037
  8030  048D                     _WPUG	set	1165
  8031  0791                     _LCDCON	set	1937
  8032  0792                     _LCDPSbits	set	1938
  8033  0793                     _LCDREF	set	1939
  8034  0795                     _LCDRL	set	1941
  8035  0798                     _LCDSE0	set	1944
  8036  0799                     _LCDSE1	set	1945
  8037  079A                     _LCDSE2	set	1946
  8038  079B                     _LCDSE3	set	1947
  8039  079C                     _LCDSE4	set	1948
  8040  079D                     _LCDSE5	set	1949
  8041  07A0                     _LCDDATA0	set	1952
  8042                           
  8043                           	psect	bssCOMMON
  8044  0078                     __pbssCOMMON:	
  8045  0078                     _menu:	
  8046  0078                     	ds	1
  8047  0079                     ___t16:	
  8048  0079                     	ds	2
  8049                           
  8050                           	psect	bssBANK1
  8051  00A0                     __pbssBANK1:	
  8052  00A0                     ___t32:	
  8053  00A0                     	ds	4
  8054  00A4                     _fl_t32:	
  8055  00A4                     	ds	4
  8056  00A8                     ___q15:	
  8057  00A8                     	ds	2
  8058  00AA                     _adcAverageValue:	
  8059  00AA                     	ds	2
  8060  00AC                     _adcSamplingTimer:	
  8061  00AC                     	ds	2
  8062  00AE                     _adcvalue:	
  8063  00AE                     	ds	2
  8064  00B0                     _flow:	
  8065  00B0                     	ds	2
  8066  00B2                     _rtVolume_L:	
  8067  00B2                     	ds	2
  8068  00B4                     _rtVolume_m3:	
  8069  00B4                     	ds	2
  8070  00B6                     _Event:	
  8071  00B6                     	ds	1
  8072  00B7                     _KeyValue:	
  8073  00B7                     	ds	1
  8074  00B8                     _bkupMenu:	
  8075  00B8                     	ds	1
  8076  00B9                     _calibLocation:	
  8077  00B9                     	ds	1
  8078  00BA                     _deviceStatus:	
  8079  00BA                     	ds	1
  8080  00BB                     _piccResult:	
  8081  00BB                     	ds	1
  8082  00BC                     _valveStatus:	
  8083  00BC                     	ds	1
  8084  00BD                     _valveTimer:	
  8085  00BD                     	ds	1
  8086  00BE                     ___q31:	
  8087  00BE                     	ds	4
  8088  00C2                     _rtBalanceMoney:	
  8089  00C2                     	ds	4
  8090  00C6                     ___t8:	
  8091  00C6                     	ds	1
  8092  00C7                     _rdLen:	
  8093  00C7                     	ds	1
  8094                           
  8095                           	psect	dataBANK1
  8096  00EF                     __pdataBANK1:	
  8097  00EF                     _noKeyEventTimeOut:	
  8098  00EF                     	ds	1
  8099                           
  8100                           	psect	bssBANK2
  8101  0120                     __pbssBANK2:	
  8102  0120                     _fl_t16:	
  8103  0120                     	ds	2
  8104  0122                     _password:	
  8105  0122                     	ds	2
  8106  0124                     _tmTemp16:	
  8107  0124                     	ds	2
  8108  0126                     _uart1ReceivedCount:	
  8109  0126                     	ds	2
  8110  0128                     _CardError:	
  8111  0128                     	ds	1
  8112  0129                     _fl_t8:	
  8113  0129                     	ds	1
  8114  012A                     _flowCalibrationLocation:	
  8115  012A                     	ds	1
  8116  012B                     _smallFlowNotCare:	
  8117  012B                     	ds	1
  8118  012C                     _systemTickerSec:	
  8119  012C                     	ds	1
  8120  012D                     _uart1ReceivedTimer:	
  8121  012D                     	ds	1
  8122  012E                     _warningStatus:	
  8123  012E                     	ds	1
  8124  012F                     _pLCD:	
  8125  012F                     	ds	24
  8126  0147                     _flashOpStr:	
  8127  0147                     	ds	21
  8128  015C                     _lcdBuf:	
  8129  015C                     	ds	9
  8130  0165                     _uiAdjbuf:	
  8131  0165                     	ds	8
  8132                           
  8133                           	psect	dataBANK2
  8134  016D                     __pdataBANK2:	
  8135  016D                     _pLcdReg:	
  8136  016D                     	ds	2
  8137  016F                     _flowCalibrationPointSingle:	
  8138  016F                     	ds	1
  8139                           
  8140                           	psect	bssBANK3
  8141  01A0                     __pbssBANK3:	
  8142  01A0                     _adcSamplingBuffer:	
  8143  01A0                     	ds	8
  8144  01A8                     _findCardTimer:	
  8145  01A8                     	ds	2
  8146  01AA                     _globlTickerms:	
  8147  01AA                     	ds	2
  8148  01AC                     _systemTikerms:	
  8149  01AC                     	ds	2
  8150  01AE                     _uart1ReceivedTimeout:	
  8151  01AE                     	ds	2
  8152  01B0                     _PiccUid:	
  8153  01B0                     	ds	12
  8154                           
  8155                           	psect	dataBANK3
  8156  01BC                     __pdataBANK3:	
  8157  01BC                     _userKeyB:	
  8158  01BC                     	ds	6
  8159                           
  8160                           	psect	bssBANK4
  8161  0220                     __pbssBANK4:	
  8162  0220                     _flashBuffer:	
  8163  0220                     	ds	64
  8164                           
  8165                           	psect	clrtext
  8166  35A5                     clear_ram0:	
  8167                           ;	Called with FSR0 containing the base address, and
  8168                           ;	btemp/btemp+1 has the size to clear
  8169                           
  8170  35A5  0064               	clrwdt	;clear the watchdog before getting into this loop
  8171  35A6                     clrloop0:	
  8172  35A6  3001               	movlw	1
  8173  35A7  0180               	clrf	0	;clear RAM location pointed to by FSR
  8174  35A8  3101               	addfsr 0,1
  8175  35A9  02FE               	subwf	126,f
  8176  35AA  3000               	movlw	0
  8177  35AB  3BFF               	subwfb	127,f
  8178  35AC  087F               	movf	127,w
  8179  35AD  047E               	iorwf	126,w
  8180  35AE  1903               	btfsc	3,2
  8181  35AF  3400               	retlw	0	;all done for this memory range, return
  8182  35B0  2DA6               	goto	clrloop0	;have we reached the end yet?
  8183                           
  8184                           	psect	cstackBANK3
  8185  01C7                     __pcstackBANK3:	
  8186  01C7                     rfid_comm_process@ret:	
  8187                           
  8188                           ; 1 bytes @ 0x0
  8189  01C7                     	ds	1
  8190  01C8                     ??_main:	
  8191                           
  8192                           ; 1 bytes @ 0x1
  8193  01C8                     	ds	1
  8194                           
  8195                           	psect	cstackBANK1
  8196  00C8                     __pcstackBANK1:	
  8197  00C8                     mifare_write@blockAddr:	
  8198  00C8                     _picc_select$3210:	
  8199                           ; 1 bytes @ 0x0
  8200                           
  8201                           
  8202                           ; 2 bytes @ 0x0
  8203  00C8                     	ds	1
  8204  00C9                     mifare_write@cmdBuffer:	
  8205                           
  8206                           ; 2 bytes @ 0x1
  8207  00C9                     	ds	1
  8208  00CA                     _picc_select$3213:	
  8209                           
  8210                           ; 2 bytes @ 0x2
  8211  00CA                     	ds	1
  8212  00CB                     mifare_write@result:	
  8213                           
  8214                           ; 1 bytes @ 0x3
  8215  00CB                     	ds	1
  8216  00CC                     ??_rfid_comm_process_read_header:	
  8217  00CC                     ??_rfid_comm_process_recharge:	
  8218                           ; 1 bytes @ 0x4
  8219                           
  8220  00CC                     _picc_select$3214:	
  8221                           ; 1 bytes @ 0x4
  8222                           
  8223                           
  8224                           ; 2 bytes @ 0x4
  8225  00CC                     	ds	2
  8226  00CE                     picc_select@uidComplete:	
  8227                           
  8228                           ; 1 bytes @ 0x6
  8229  00CE                     	ds	1
  8230  00CF                     picc_select@selectDone:	
  8231                           
  8232                           ; 1 bytes @ 0x7
  8233  00CF                     	ds	1
  8234  00D0                     picc_select@bufferUsed:	
  8235                           
  8236                           ; 1 bytes @ 0x8
  8237  00D0                     	ds	1
  8238  00D1                     _picc_select$3206:	
  8239                           
  8240                           ; 1 bytes @ 0x9
  8241  00D1                     	ds	1
  8242  00D2                     _picc_select$3207:	
  8243                           
  8244                           ; 1 bytes @ 0xA
  8245  00D2                     	ds	1
  8246  00D3                     picc_select@rxAlign:	
  8247                           
  8248                           ; 1 bytes @ 0xB
  8249  00D3                     	ds	1
  8250  00D4                     picc_select@maxBytes:	
  8251                           
  8252                           ; 1 bytes @ 0xC
  8253  00D4                     	ds	1
  8254  00D5                     picc_select@valueOfCollReg:	
  8255                           
  8256                           ; 1 bytes @ 0xD
  8257  00D5                     	ds	1
  8258  00D6                     picc_select@buffer:	
  8259                           
  8260                           ; 9 bytes @ 0xE
  8261  00D6                     	ds	9
  8262  00DF                     picc_select@collisionPos:	
  8263                           
  8264                           ; 1 bytes @ 0x17
  8265  00DF                     	ds	1
  8266  00E0                     picc_select@useCascadeTag:	
  8267                           
  8268                           ; 1 bytes @ 0x18
  8269  00E0                     	ds	1
  8270  00E1                     picc_select@cascadeLevel:	
  8271                           
  8272                           ; 1 bytes @ 0x19
  8273  00E1                     	ds	1
  8274  00E2                     picc_select@uidIndex:	
  8275                           
  8276                           ; 1 bytes @ 0x1A
  8277  00E2                     	ds	1
  8278  00E3                     picc_select@bytesToCopy:	
  8279                           
  8280                           ; 1 bytes @ 0x1B
  8281  00E3                     	ds	1
  8282  00E4                     picc_select@responseLength:	
  8283                           
  8284                           ; 1 bytes @ 0x1C
  8285  00E4                     	ds	1
  8286  00E5                     picc_select@uid:	
  8287                           
  8288                           ; 1 bytes @ 0x1D
  8289  00E5                     	ds	1
  8290  00E6                     picc_select@responseBuffer:	
  8291                           
  8292                           ; 1 bytes @ 0x1E
  8293  00E6                     	ds	1
  8294  00E7                     picc_select@txLastBits:	
  8295                           
  8296                           ; 1 bytes @ 0x1F
  8297  00E7                     	ds	1
  8298  00E8                     picc_select@result:	
  8299                           
  8300                           ; 1 bytes @ 0x20
  8301  00E8                     	ds	1
  8302  00E9                     picc_select@count:	
  8303                           
  8304                           ; 1 bytes @ 0x21
  8305  00E9                     	ds	1
  8306  00EA                     picc_select@index:	
  8307                           
  8308                           ; 1 bytes @ 0x22
  8309  00EA                     	ds	1
  8310  00EB                     picc_select@currentLevelKnownBits:	
  8311                           
  8312                           ; 1 bytes @ 0x23
  8313  00EB                     	ds	1
  8314  00EC                     ??_rfid_comm_process:	
  8315                           
  8316                           ; 1 bytes @ 0x24
  8317  00EC                     	ds	1
  8318                           
  8319                           	psect	cstackCOMMON
  8320  0070                     __pcstackCOMMON:	
  8321  0070                     ?_PIN_MANAGER_Initialize:	
  8322  0070                     ?_OSCILLATOR_Initialize:	
  8323                           ; 1 bytes @ 0x0
  8324                           
  8325  0070                     ?_WDT_Initialize:	
  8326                           ; 1 bytes @ 0x0
  8327                           
  8328  0070                     ?_TMR1_Initialize:	
  8329                           ; 1 bytes @ 0x0
  8330                           
  8331  0070                     ?_TMR0_Initialize:	
  8332                           ; 1 bytes @ 0x0
  8333                           
  8334  0070                     ?_EUSART1_Initialize:	
  8335                           ; 1 bytes @ 0x0
  8336                           
  8337  0070                     ?_TMR1_StartTimer:	
  8338                           ; 1 bytes @ 0x0
  8339                           
  8340  0070                     ?_TMR0_ISR:	
  8341                           ; 1 bytes @ 0x0
  8342                           
  8343  0070                     ??_TMR0_ISR:	
  8344                           ; 1 bytes @ 0x0
  8345                           
  8346  0070                     ?_EUSART1_Transmit_ISR:	
  8347                           ; 1 bytes @ 0x0
  8348                           
  8349  0070                     ??_EUSART1_Transmit_ISR:	
  8350                           ; 1 bytes @ 0x0
  8351                           
  8352  0070                     ?_EUSART1_Receive_ISR:	
  8353                           ; 1 bytes @ 0x0
  8354                           
  8355  0070                     ??_EUSART1_Receive_ISR:	
  8356                           ; 1 bytes @ 0x0
  8357                           
  8358  0070                     ?_lcd_disp_all:	
  8359                           ; 1 bytes @ 0x0
  8360                           
  8361  0070                     ?_lcd_disp_refresh:	
  8362                           ; 1 bytes @ 0x0
  8363                           
  8364  0070                     ?_lcd_clear_buffer:	
  8365                           ; 1 bytes @ 0x0
  8366                           
  8367  0070                     ?_lcd_disp_cln:	
  8368                           ; 1 bytes @ 0x0
  8369                           
  8370  0070                     ?_key_scan_call:	
  8371                           ; 1 bytes @ 0x0
  8372                           
  8373  0070                     ?_data_api_flash_process:	
  8374                           ; 1 bytes @ 0x0
  8375                           
  8376  0070                     ?_valve_off:	
  8377                           ; 1 bytes @ 0x0
  8378                           
  8379  0070                     ?_valve_on:	
  8380                           ; 1 bytes @ 0x0
  8381                           
  8382  0070                     ?_mfapi_is_new_card_present:	
  8383                           ; 1 bytes @ 0x0
  8384                           
  8385  0070                     ?_picc_halt_a:	
  8386                           ; 1 bytes @ 0x0
  8387                           
  8388  0070                     ?_picc_stop_cryptol:	
  8389                           ; 1 bytes @ 0x0
  8390                           
  8391  0070                     ?_mfrc522_hal_init:	
  8392                           ; 1 bytes @ 0x0
  8393                           
  8394  0070                     ?_mfrc522_bal_read_reg:	
  8395                           ; 1 bytes @ 0x0
  8396                           
  8397  0070                     ?_mfrc522_hal_reset_sf:	
  8398                           ; 1 bytes @ 0x0
  8399                           
  8400  0070                     ?_mfrc522_hal_set_antenna_gain:	
  8401                           ; 1 bytes @ 0x0
  8402                           
  8403  0070                     ?_mfrc522_hal_antenna_on:	
  8404                           ; 1 bytes @ 0x0
  8405                           
  8406  0070                     ?_SYSTEM_Initialize:	
  8407                           ; 1 bytes @ 0x0
  8408                           
  8409  0070                     ?_TMR1_ISR:	
  8410                           ; 1 bytes @ 0x0
  8411                           
  8412  0070                     ??_TMR1_ISR:	
  8413                           ; 1 bytes @ 0x0
  8414                           
  8415  0070                     ?_INTERRUPT_InterruptManager:	
  8416                           ; 1 bytes @ 0x0
  8417                           
  8418  0070                     ?_DATAEE_ReadByte:	
  8419                           ; 1 bytes @ 0x0
  8420                           
  8421  0070                     ?_my_uart1_received_ready:	
  8422                           ; 1 bytes @ 0x0
  8423                           
  8424  0070                     ?_ui_disp_hello:	
  8425                           ; 1 bytes @ 0x0
  8426                           
  8427  0070                     ?_ui_start_display:	
  8428                           ; 1 bytes @ 0x0
  8429                           
  8430  0070                     ?_ui_disp_flow:	
  8431                           ; 1 bytes @ 0x0
  8432                           
  8433  0070                     ?_ui_disp_totale_v:	
  8434                           ; 1 bytes @ 0x0
  8435                           
  8436  0070                     ?_ui_disp_balance_and_volume:	
  8437                           ; 1 bytes @ 0x0
  8438                           
  8439  0070                     ?_ui_disp_clear_totale:	
  8440                           ; 1 bytes @ 0x0
  8441                           
  8442  0070                     ?_ui_disp_clear_balance:	
  8443                           ; 1 bytes @ 0x0
  8444                           
  8445  0070                     ?_ui_disp_set_line_reset:	
  8446                           ; 1 bytes @ 0x0
  8447                           
  8448  0070                     ?_ui_disp_set_line:	
  8449                           ; 1 bytes @ 0x0
  8450                           
  8451  0070                     ?_ui_disp_small_flow_how_care:	
  8452                           ; 1 bytes @ 0x0
  8453                           
  8454  0070                     ?_ui_disp_recharge:	
  8455                           ; 1 bytes @ 0x0
  8456                           
  8457  0070                     ?_ui_disp_modbus_id:	
  8458                           ; 1 bytes @ 0x0
  8459                           
  8460  0070                     ?_ui_disp_set_price:	
  8461                           ; 1 bytes @ 0x0
  8462                           
  8463  0070                     ?_ui_disp_set_transferMoneyLimit:	
  8464                           ; 1 bytes @ 0x0
  8465                           
  8466  0070                     ?_ui_disp_set_balanceWarning:	
  8467                           ; 1 bytes @ 0x0
  8468                           
  8469  0070                     ?_ui_disp_set_balanceOff:	
  8470                           ; 1 bytes @ 0x0
  8471                           
  8472  0070                     ?_ui_disp_clear_card_id:	
  8473                           ; 1 bytes @ 0x0
  8474                           
  8475  0070                     ?_ui_disp_set_calib:	
  8476                           ; 1 bytes @ 0x0
  8477                           
  8478  0070                     ?_ui_disp_menu:	
  8479                           ; 1 bytes @ 0x0
  8480                           
  8481  0070                     ?_ui_key_process_up_down_main:	
  8482                           ; 1 bytes @ 0x0
  8483                           
  8484  0070                     ?_ui_key_process_down:	
  8485                           ; 1 bytes @ 0x0
  8486                           
  8487  0070                     ?_ui_key_process_up_down:	
  8488                           ; 1 bytes @ 0x0
  8489                           
  8490  0070                     ?_ui_key_process_enter:	
  8491                           ; 1 bytes @ 0x0
  8492                           
  8493  0070                     ?_ui_key_process_cancel:	
  8494                           ; 1 bytes @ 0x0
  8495                           
  8496  0070                     ?_ui_key_set_process:	
  8497                           ; 1 bytes @ 0x0
  8498                           
  8499  0070                     ?_ui_key_process:	
  8500                           ; 1 bytes @ 0x0
  8501                           
  8502  0070                     ?_modbus_response_write_flash_sys:	
  8503                           ; 1 bytes @ 0x0
  8504                           
  8505  0070                     ?_modbus_response_write_flash_clib:	
  8506                           ; 1 bytes @ 0x0
  8507                           
  8508  0070                     ?_modbus_response_read_flash_data:	
  8509                           ; 1 bytes @ 0x0
  8510                           
  8511  0070                     ?_modbus_response_read_status_register:	
  8512                           ; 1 bytes @ 0x0
  8513                           
  8514  0070                     ?_modbus_response_write_status_register:	
  8515                           ; 1 bytes @ 0x0
  8516                           
  8517  0070                     ?_data_api_system_data_get:	
  8518                           ; 1 bytes @ 0x0
  8519                           
  8520  0070                     ?_data_api_calibration_table_data_init:	
  8521                           ; 1 bytes @ 0x0
  8522                           
  8523  0070                     ?_data_api_system_data_init:	
  8524                           ; 1 bytes @ 0x0
  8525                           
  8526  0070                     ?_data_api_rt_data_save:	
  8527                           ; 1 bytes @ 0x0
  8528                           
  8529  0070                     ?_in_app_vavle_off:	
  8530                           ; 1 bytes @ 0x0
  8531                           
  8532  0070                     ?_in_app_vavle_on:	
  8533                           ; 1 bytes @ 0x0
  8534                           
  8535  0070                     ?_app_flow_rt_volume_cal:	
  8536                           ; 1 bytes @ 0x0
  8537                           
  8538  0070                     ?_app_flow_rt_balance_money_cal:	
  8539                           ; 1 bytes @ 0x0
  8540                           
  8541  0070                     ?_app_flow_money_warning:	
  8542                           ; 1 bytes @ 0x0
  8543                           
  8544  0070                     ?_app_flow_money_off:	
  8545                           ; 1 bytes @ 0x0
  8546                           
  8547  0070                     ?_flow_sampling_process:	
  8548                           ; 1 bytes @ 0x0
  8549                           
  8550  0070                     ?_rfid_comm_process_read_header:	
  8551                           ; 1 bytes @ 0x0
  8552                           
  8553  0070                     ?_rfid_comm_process_read_inc:	
  8554                           ; 1 bytes @ 0x0
  8555                           
  8556  0070                     ?_rfid_comm_process_read_dec:	
  8557                           ; 1 bytes @ 0x0
  8558                           
  8559  0070                     ?_rfid_comm_process_recharge:	
  8560                           ; 1 bytes @ 0x0
  8561                           
  8562  0070                     ?_rfid_comm_process:	
  8563                           ; 1 bytes @ 0x0
  8564                           
  8565  0070                     ?_lcd_disp_code_0:	
  8566                           ; 1 bytes @ 0x0
  8567                           
  8568  0070                     ?_lcd_disp_code_1:	
  8569                           ; 1 bytes @ 0x0
  8570                           
  8571  0070                     ?_lcd_disp_code_2:	
  8572                           ; 1 bytes @ 0x0
  8573                           
  8574  0070                     ?_lcd_disp_code_3:	
  8575                           ; 1 bytes @ 0x0
  8576                           
  8577  0070                     ?_lcd_disp_code_4:	
  8578                           ; 1 bytes @ 0x0
  8579                           
  8580  0070                     ?_lcd_disp_code_5:	
  8581                           ; 1 bytes @ 0x0
  8582                           
  8583  0070                     ?_lcd_disp_code_6:	
  8584                           ; 1 bytes @ 0x0
  8585                           
  8586  0070                     ?_lcd_disp_code_7:	
  8587                           ; 1 bytes @ 0x0
  8588                           
  8589  0070                     ?_lcd_config:	
  8590                           ; 1 bytes @ 0x0
  8591                           
  8592  0070                     ?_lcd_init:	
  8593                           ; 1 bytes @ 0x0
  8594                           
  8595  0070                     ?_led_port_init:	
  8596                           ; 1 bytes @ 0x0
  8597                           
  8598  0070                     ?_iic_start:	
  8599                           ; 1 bytes @ 0x0
  8600                           
  8601  0070                     ?_iic_stop:	
  8602                           ; 1 bytes @ 0x0
  8603                           
  8604  0070                     ?_iic_send_ack:	
  8605                           ; 1 bytes @ 0x0
  8606                           
  8607  0070                     ?_iic_waite_ack:	
  8608                           ; 1 bytes @ 0x0
  8609                           
  8610  0070                     ?_iic_send_byte:	
  8611                           ; 1 bytes @ 0x0
  8612                           
  8613  0070                     ?_iic_received_byte:	
  8614                           ; 1 bytes @ 0x0
  8615                           
  8616  0070                     ?_iic_received_byte_if_ack:	
  8617                           ; 1 bytes @ 0x0
  8618                           
  8619  0070                     ?_other_gpio_port_init:	
  8620                           ; 1 bytes @ 0x0
  8621                           
  8622  0070                     ?_valve_stop:	
  8623                           ; 1 bytes @ 0x0
  8624                           
  8625  0070                     ?_timer0_irq_callback:	
  8626                           ; 1 bytes @ 0x0
  8627                           
  8628  0070                     ?_timer1_irq_callback:	
  8629                           ; 1 bytes @ 0x0
  8630                           
  8631  0070                     ?_mfapi_pcd_init:	
  8632                           ; 1 bytes @ 0x0
  8633                           
  8634  0070                     ?_mfrc522_bal_write_read_via_spi:	
  8635                           ; 1 bytes @ 0x0
  8636                           
  8637  0070                     ?_mfrc522_hal_get_antenna_gain:	
  8638                           ; 1 bytes @ 0x0
  8639                           
  8640  0070                     ?_m_system_init:	
  8641                           ; 1 bytes @ 0x0
  8642                           
  8643  0070                     ?_m_system_start_self_test:	
  8644                           ; 1 bytes @ 0x0
  8645                           
  8646  0070                     ?_main:	
  8647                           ; 1 bytes @ 0x0
  8648                           
  8649                           
  8650                           ; 1 bytes @ 0x0
  8651  0070                     	ds	1
  8652  0071                     EUSART1_Receive_ISR@t8:	
  8653                           
  8654                           ; 1 bytes @ 0x1
  8655  0071                     	ds	1
  8656  0072                     ??_INTERRUPT_InterruptManager:	
  8657                           
  8658                           ; 1 bytes @ 0x2
  8659  0072                     	ds	1
  8660  0073                     ??_PIN_MANAGER_Initialize:	
  8661  0073                     ??_OSCILLATOR_Initialize:	
  8662                           ; 1 bytes @ 0x3
  8663                           
  8664  0073                     ??_WDT_Initialize:	
  8665                           ; 1 bytes @ 0x3
  8666                           
  8667  0073                     ??_EUSART1_Initialize:	
  8668                           ; 1 bytes @ 0x3
  8669                           
  8670  0073                     ?_TMR1_SetInterruptHandler:	
  8671                           ; 1 bytes @ 0x3
  8672                           
  8673  0073                     ??_TMR1_StartTimer:	
  8674                           ; 1 bytes @ 0x3
  8675                           
  8676  0073                     ?_TMR0_SetInterruptHandler:	
  8677                           ; 1 bytes @ 0x3
  8678                           
  8679  0073                     ?_FLASH_EraseBlock:	
  8680                           ; 1 bytes @ 0x3
  8681                           
  8682  0073                     ??_lcd_disp_all:	
  8683                           ; 1 bytes @ 0x3
  8684                           
  8685  0073                     ?_delay:	
  8686                           ; 1 bytes @ 0x3
  8687                           
  8688  0073                     ?_m_mem_set:	
  8689                           ; 1 bytes @ 0x3
  8690                           
  8691  0073                     ?_set_globle_ticker:	
  8692                           ; 1 bytes @ 0x3
  8693                           
  8694  0073                     ?_m_mem_cpy_len:	
  8695                           ; 1 bytes @ 0x3
  8696                           
  8697  0073                     ??_valve_off:	
  8698                           ; 1 bytes @ 0x3
  8699                           
  8700  0073                     ??_valve_on:	
  8701                           ; 1 bytes @ 0x3
  8702                           
  8703  0073                     ?_DATAEE_WriteByte:	
  8704                           ; 1 bytes @ 0x3
  8705                           
  8706  0073                     ??_DATAEE_ReadByte:	
  8707                           ; 1 bytes @ 0x3
  8708                           
  8709  0073                     ?_my_uart1_send_poll:	
  8710                           ; 1 bytes @ 0x3
  8711                           
  8712  0073                     ??_my_uart1_received_ready:	
  8713                           ; 1 bytes @ 0x3
  8714                           
  8715  0073                     ?_ui_head_hide:	
  8716                           ; 1 bytes @ 0x3
  8717                           
  8718  0073                     ?_ui_mem_cpy:	
  8719                           ; 1 bytes @ 0x3
  8720                           
  8721  0073                     ??_ui_key_process_up_down_main:	
  8722                           ; 1 bytes @ 0x3
  8723                           
  8724  0073                     ??_data_api_system_data_get:	
  8725                           ; 1 bytes @ 0x3
  8726                           
  8727  0073                     ?_app_flow_lookup:	
  8728                           ; 1 bytes @ 0x3
  8729                           
  8730  0073                     ??_app_flow_money_warning:	
  8731                           ; 1 bytes @ 0x3
  8732                           
  8733  0073                     ?_create_card_key_b:	
  8734                           ; 1 bytes @ 0x3
  8735                           
  8736  0073                     ??_lcd_disp_code_0:	
  8737                           ; 1 bytes @ 0x3
  8738                           
  8739  0073                     ??_lcd_disp_code_1:	
  8740                           ; 1 bytes @ 0x3
  8741                           
  8742  0073                     ??_lcd_disp_code_2:	
  8743                           ; 1 bytes @ 0x3
  8744                           
  8745  0073                     ??_lcd_disp_code_3:	
  8746                           ; 1 bytes @ 0x3
  8747                           
  8748  0073                     ??_lcd_disp_code_4:	
  8749                           ; 1 bytes @ 0x3
  8750                           
  8751  0073                     ??_lcd_disp_code_5:	
  8752                           ; 1 bytes @ 0x3
  8753                           
  8754  0073                     ??_lcd_disp_code_6:	
  8755                           ; 1 bytes @ 0x3
  8756                           
  8757  0073                     ??_lcd_disp_code_7:	
  8758                           ; 1 bytes @ 0x3
  8759                           
  8760  0073                     ??_led_port_init:	
  8761                           ; 1 bytes @ 0x3
  8762                           
  8763  0073                     ??_iic_send_ack:	
  8764                           ; 1 bytes @ 0x3
  8765                           
  8766  0073                     ??_iic_received_byte:	
  8767                           ; 1 bytes @ 0x3
  8768                           
  8769  0073                     ??_other_gpio_port_init:	
  8770                           ; 1 bytes @ 0x3
  8771                           
  8772  0073                     ??_valve_stop:	
  8773                           ; 1 bytes @ 0x3
  8774                           
  8775  0073                     ??_timer0_irq_callback:	
  8776                           ; 1 bytes @ 0x3
  8777                           
  8778  0073                     ??_timer1_irq_callback:	
  8779                           ; 1 bytes @ 0x3
  8780                           
  8781  0073                     ??_mfrc522_bal_write_read_via_spi:	
  8782                           ; 1 bytes @ 0x3
  8783                           
  8784  0073                     ??___lmul:	
  8785                           ; 1 bytes @ 0x3
  8786                           
  8787  0073                     ??___almod:	
  8788                           ; 1 bytes @ 0x3
  8789                           
  8790  0073                     ?___lbmod:	
  8791                           ; 1 bytes @ 0x3
  8792                           
  8793  0073                     ??___lldiv:	
  8794                           ; 1 bytes @ 0x3
  8795                           
  8796  0073                     ?_get_globle_ticker:	
  8797                           ; 1 bytes @ 0x3
  8798                           
  8799  0073                     ?_FLASH_ReadWord:	
  8800                           ; 2 bytes @ 0x3
  8801                           
  8802  0073                     ?_crc_sum:	
  8803                           ; 2 bytes @ 0x3
  8804                           
  8805  0073                     ?___wmul:	
  8806                           ; 2 bytes @ 0x3
  8807                           
  8808  0073                     ?___awdiv:	
  8809                           ; 2 bytes @ 0x3
  8810                           
  8811  0073                     ?___awmod:	
  8812                           ; 2 bytes @ 0x3
  8813                           
  8814  0073                     ?___lwmod:	
  8815                           ; 2 bytes @ 0x3
  8816                           
  8817  0073                     DATAEE_WriteByte@bData:	
  8818                           ; 2 bytes @ 0x3
  8819                           
  8820  0073                     DATAEE_ReadByte@bAdd:	
  8821                           ; 1 bytes @ 0x3
  8822                           
  8823  0073                     ui_head_hide@loc:	
  8824                           ; 1 bytes @ 0x3
  8825                           
  8826  0073                     create_card_key_b@uid:	
  8827                           ; 1 bytes @ 0x3
  8828                           
  8829  0073                     iic_send_ack@ack:	
  8830                           ; 1 bytes @ 0x3
  8831                           
  8832  0073                     ___lbmod@divisor:	
  8833                           ; 1 bytes @ 0x3
  8834                           
  8835  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  8836                           ; 1 bytes @ 0x3
  8837                           
  8838  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  8839                           ; 2 bytes @ 0x3
  8840                           
  8841  0073                     FLASH_ReadWord@flashAddr:	
  8842                           ; 2 bytes @ 0x3
  8843                           
  8844  0073                     FLASH_EraseBlock@startAddr:	
  8845                           ; 2 bytes @ 0x3
  8846                           
  8847  0073                     my_uart1_send_poll@len:	
  8848                           ; 2 bytes @ 0x3
  8849                           
  8850  0073                     ui_mem_cpy@s:	
  8851                           ; 2 bytes @ 0x3
  8852                           
  8853  0073                     app_flow_lookup@adcValue:	
  8854                           ; 2 bytes @ 0x3
  8855                           
  8856  0073                     delay@t:	
  8857                           ; 2 bytes @ 0x3
  8858                           
  8859  0073                     m_mem_set@buf:	
  8860                           ; 2 bytes @ 0x3
  8861                           
  8862  0073                     m_mem_cpy_len@d:	
  8863                           ; 2 bytes @ 0x3
  8864                           
  8865  0073                     set_globle_ticker@tk:	
  8866                           ; 2 bytes @ 0x3
  8867                           
  8868  0073                     crc_sum@puchMsg:	
  8869                           ; 2 bytes @ 0x3
  8870                           
  8871  0073                     ___wmul@multiplier:	
  8872                           ; 2 bytes @ 0x3
  8873                           
  8874  0073                     ___awdiv@divisor:	
  8875                           ; 2 bytes @ 0x3
  8876                           
  8877  0073                     ___awmod@divisor:	
  8878                           ; 2 bytes @ 0x3
  8879                           
  8880  0073                     ___lwmod@divisor:	
  8881                           ; 2 bytes @ 0x3
  8882                           
  8883  0073                     ___lmul@product:	
  8884                           ; 2 bytes @ 0x3
  8885                           
  8886                           
  8887                           ; 4 bytes @ 0x3
  8888  0073                     	ds	1
  8889  0074                     ??_DATAEE_WriteByte:	
  8890  0074                     ??_ui_head_hide:	
  8891                           ; 1 bytes @ 0x4
  8892                           
  8893  0074                     ?_data_api_read_eeprom:	
  8894                           ; 1 bytes @ 0x4
  8895                           
  8896  0074                     ??_in_app_vavle_off:	
  8897                           ; 1 bytes @ 0x4
  8898                           
  8899  0074                     ??_in_app_vavle_on:	
  8900                           ; 1 bytes @ 0x4
  8901                           
  8902  0074                     ??_app_flow_money_off:	
  8903                           ; 1 bytes @ 0x4
  8904                           
  8905  0074                     ??___lbmod:	
  8906                           ; 1 bytes @ 0x4
  8907                           
  8908  0074                     DATAEE_WriteByte@bAdd:	
  8909                           ; 1 bytes @ 0x4
  8910                           
  8911  0074                     ui_key_process_up_down_main@up:	
  8912                           ; 1 bytes @ 0x4
  8913                           
  8914  0074                     lcd_disp_code_0@code:	
  8915                           ; 1 bytes @ 0x4
  8916                           
  8917  0074                     lcd_disp_code_1@code:	
  8918                           ; 1 bytes @ 0x4
  8919                           
  8920  0074                     lcd_disp_code_2@code:	
  8921                           ; 1 bytes @ 0x4
  8922                           
  8923  0074                     lcd_disp_code_3@code:	
  8924                           ; 1 bytes @ 0x4
  8925                           
  8926  0074                     lcd_disp_code_4@code:	
  8927                           ; 1 bytes @ 0x4
  8928                           
  8929  0074                     lcd_disp_code_5@code:	
  8930                           ; 1 bytes @ 0x4
  8931                           
  8932  0074                     lcd_disp_code_6@code:	
  8933                           ; 1 bytes @ 0x4
  8934                           
  8935  0074                     lcd_disp_code_7@code:	
  8936                           ; 1 bytes @ 0x4
  8937                           
  8938  0074                     iic_received_byte@ret:	
  8939                           ; 1 bytes @ 0x4
  8940                           
  8941  0074                     mfrc522_bal_write_read_via_spi@x:	
  8942                           ; 1 bytes @ 0x4
  8943                           
  8944  0074                     ___almod@counter:	
  8945                           ; 1 bytes @ 0x4
  8946                           
  8947  0074                     data_api_read_eeprom@buf:	
  8948                           ; 1 bytes @ 0x4
  8949                           
  8950  0074                     create_card_key_b@cckey:	
  8951                           ; 2 bytes @ 0x4
  8952                           
  8953                           
  8954                           ; 2 bytes @ 0x4
  8955  0074                     	ds	1
  8956  0075                     ??_TMR1_Initialize:	
  8957  0075                     ??_TMR0_Initialize:	
  8958                           ; 1 bytes @ 0x5
  8959                           
  8960  0075                     ??_TMR1_SetInterruptHandler:	
  8961                           ; 1 bytes @ 0x5
  8962                           
  8963  0075                     ??_TMR0_SetInterruptHandler:	
  8964                           ; 1 bytes @ 0x5
  8965                           
  8966  0075                     ??_FLASH_EraseBlock:	
  8967                           ; 1 bytes @ 0x5
  8968                           
  8969  0075                     ??_delay:	
  8970                           ; 1 bytes @ 0x5
  8971                           
  8972  0075                     ??_key_scan_call:	
  8973                           ; 1 bytes @ 0x5
  8974                           
  8975  0075                     ??_set_globle_ticker:	
  8976                           ; 1 bytes @ 0x5
  8977                           
  8978  0075                     ??_get_globle_ticker:	
  8979                           ; 1 bytes @ 0x5
  8980                           
  8981  0075                     ??_FLASH_ReadWord:	
  8982                           ; 1 bytes @ 0x5
  8983                           
  8984  0075                     ??_my_uart1_send_poll:	
  8985                           ; 1 bytes @ 0x5
  8986                           
  8987  0075                     ??_ui_mem_cpy:	
  8988                           ; 1 bytes @ 0x5
  8989                           
  8990  0075                     ?_lcd_disp_code:	
  8991                           ; 1 bytes @ 0x5
  8992                           
  8993  0075                     ??_iic_start:	
  8994                           ; 1 bytes @ 0x5
  8995                           
  8996  0075                     ??_iic_stop:	
  8997                           ; 1 bytes @ 0x5
  8998                           
  8999  0075                     ??_iic_waite_ack:	
  9000                           ; 1 bytes @ 0x5
  9001                           
  9002  0075                     FLASH_ReadWord@GIEBitValue:	
  9003                           ; 1 bytes @ 0x5
  9004                           
  9005  0075                     FLASH_EraseBlock@GIEBitValue:	
  9006                           ; 1 bytes @ 0x5
  9007                           
  9008  0075                     DATAEE_WriteByte@GIEBitValue:	
  9009                           ; 1 bytes @ 0x5
  9010                           
  9011  0075                     ui_head_hide@str:	
  9012                           ; 1 bytes @ 0x5
  9013                           
  9014  0075                     app_flow_lookup@i:	
  9015                           ; 1 bytes @ 0x5
  9016                           
  9017  0075                     m_mem_set@x:	
  9018                           ; 1 bytes @ 0x5
  9019                           
  9020  0075                     lcd_disp_code@loc:	
  9021                           ; 1 bytes @ 0x5
  9022                           
  9023  0075                     iic_received_byte@i:	
  9024                           ; 1 bytes @ 0x5
  9025                           
  9026  0075                     mfrc522_bal_write_read_via_spi@rb:	
  9027                           ; 1 bytes @ 0x5
  9028                           
  9029  0075                     ___almod@sign:	
  9030                           ; 1 bytes @ 0x5
  9031                           
  9032  0075                     m_mem_cpy_len@s:	
  9033                           ; 1 bytes @ 0x5
  9034                           
  9035  0075                     get_globle_ticker@ret:	
  9036                           ; 2 bytes @ 0x5
  9037                           
  9038  0075                     crc_sum@usDataLen:	
  9039                           ; 2 bytes @ 0x5
  9040                           
  9041  0075                     ___wmul@multiplicand:	
  9042                           ; 2 bytes @ 0x5
  9043                           
  9044  0075                     ___awdiv@dividend:	
  9045                           ; 2 bytes @ 0x5
  9046                           
  9047  0075                     ___awmod@dividend:	
  9048                           ; 2 bytes @ 0x5
  9049                           
  9050  0075                     ___lwmod@dividend:	
  9051                           ; 2 bytes @ 0x5
  9052                           
  9053                           
  9054                           ; 2 bytes @ 0x5
  9055  0075                     	ds	1
  9056  0076                     ??_SYSTEM_Initialize:	
  9057  0076                     ??_m_flash_erase:	
  9058                           ; 1 bytes @ 0x6
  9059                           
  9060  0076                     ??_m_flash_copy:	
  9061                           ; 1 bytes @ 0x6
  9062                           
  9063  0076                     ??_data_api_write_eeprom:	
  9064                           ; 1 bytes @ 0x6
  9065                           
  9066  0076                     ??_create_card_key_b:	
  9067                           ; 1 bytes @ 0x6
  9068                           
  9069  0076                     ??_lcd_disp_code:	
  9070                           ; 1 bytes @ 0x6
  9071                           
  9072  0076                     ??_iic_received_byte_if_ack:	
  9073                           ; 1 bytes @ 0x6
  9074                           
  9075  0076                     ui_mem_cpy@len:	
  9076                           ; 1 bytes @ 0x6
  9077                           
  9078  0076                     data_api_read_eeprom@addr:	
  9079                           ; 1 bytes @ 0x6
  9080                           
  9081  0076                     m_mem_set@len:	
  9082                           ; 1 bytes @ 0x6
  9083                           
  9084  0076                     lcd_disp_code@code:	
  9085                           ; 1 bytes @ 0x6
  9086                           
  9087  0076                     iic_waite_ack@timeout:	
  9088                           ; 1 bytes @ 0x6
  9089                           
  9090  0076                     mfrc522_bal_write_read_via_spi@i:	
  9091                           ; 1 bytes @ 0x6
  9092                           
  9093                           
  9094                           ; 1 bytes @ 0x6
  9095  0076                     	ds	1
  9096  0077                     ??_m_math_pow:	
  9097  0077                     ??_lcd_clear_buffer:	
  9098                           ; 1 bytes @ 0x7
  9099                           
  9100  0077                     ??_m_mem_set:	
  9101                           ; 1 bytes @ 0x7
  9102                           
  9103  0077                     ??_mfrc522_bal_read_reg:	
  9104                           ; 1 bytes @ 0x7
  9105                           
  9106  0077                     ??_ui_key_waite_up:	
  9107                           ; 1 bytes @ 0x7
  9108                           
  9109  0077                     ??_ui_key_process_down:	
  9110                           ; 1 bytes @ 0x7
  9111                           
  9112  0077                     ??_modbus_response_illgeal_function:	
  9113                           ; 1 bytes @ 0x7
  9114                           
  9115  0077                     ??_lcd_config:	
  9116                           ; 1 bytes @ 0x7
  9117                           
  9118  0077                     ??_lcd_init:	
  9119                           ; 1 bytes @ 0x7
  9120                           
  9121  0077                     ??_iic_send_byte:	
  9122                           ; 1 bytes @ 0x7
  9123                           
  9124  0077                     ?_mfrc522_bal_write_reg:	
  9125                           ; 1 bytes @ 0x7
  9126                           
  9127  0077                     ??_mfrc522_bal_write_reg_len:	
  9128                           ; 1 bytes @ 0x7
  9129                           
  9130  0077                     ??_mfrc522_bal_read_fifo_len_ex:	
  9131                           ; 1 bytes @ 0x7
  9132                           
  9133  0077                     ??_m_system_init:	
  9134                           ; 1 bytes @ 0x7
  9135                           
  9136  0077                     ??_m_system_start_self_test:	
  9137                           ; 1 bytes @ 0x7
  9138                           
  9139  0077                     ??___wmul:	
  9140                           ; 1 bytes @ 0x7
  9141                           
  9142  0077                     ??___aldiv:	
  9143                           ; 1 bytes @ 0x7
  9144                           
  9145  0077                     ??___awdiv:	
  9146                           ; 1 bytes @ 0x7
  9147                           
  9148  0077                     ??___awmod:	
  9149                           ; 1 bytes @ 0x7
  9150                           
  9151  0077                     ??___lwdiv:	
  9152                           ; 1 bytes @ 0x7
  9153                           
  9154  0077                     ??___lwmod:	
  9155                           ; 1 bytes @ 0x7
  9156                           
  9157  0077                     ui_mem_cpy@d:	
  9158                           ; 1 bytes @ 0x7
  9159                           
  9160  0077                     data_api_write_eeprom@i:	
  9161                           ; 1 bytes @ 0x7
  9162                           
  9163  0077                     data_api_read_eeprom@len:	
  9164                           ; 1 bytes @ 0x7
  9165                           
  9166  0077                     m_mem_cpy_len@len:	
  9167                           ; 1 bytes @ 0x7
  9168                           
  9169  0077                     mfrc522_bal_write_reg@x:	
  9170                           ; 1 bytes @ 0x7
  9171                           
  9172                           
  9173                           ; 1 bytes @ 0x7
  9174  0077                     	ds	1
  9175  0078                     ??_ui_disp_hello:	
  9176  0078                     ??_ui_disp_clear_totale:	
  9177                           ; 1 bytes @ 0x8
  9178                           
  9179  0078                     ??_ui_disp_clear_balance:	
  9180                           ; 1 bytes @ 0x8
  9181                           
  9182  0078                     ??_ui_disp_set_line_reset:	
  9183                           ; 1 bytes @ 0x8
  9184                           
  9185  0078                     ??_ui_disp_recharge:	
  9186                           ; 1 bytes @ 0x8
  9187                           
  9188  0078                     ??_ui_disp_set_price:	
  9189                           ; 1 bytes @ 0x8
  9190                           
  9191  0078                     ??_ui_disp_set_transferMoneyLimit:	
  9192                           ; 1 bytes @ 0x8
  9193                           
  9194  0078                     ??_ui_disp_set_balanceWarning:	
  9195                           ; 1 bytes @ 0x8
  9196                           
  9197  0078                     ??_ui_disp_set_balanceOff:	
  9198                           ; 1 bytes @ 0x8
  9199                           
  9200  0078                     ??_app_flow_rt_volume_cal:	
  9201                           ; 1 bytes @ 0x8
  9202                           
  9203  0078                     ??_mfrc522_bal_write_reg:	
  9204                           ; 1 bytes @ 0x8
  9205                           
  9206                           
  9207                           	psect	cstackBANK0
  9208  0020                     __pcstackBANK0:	
  9209                           ; 1 bytes @ 0x8
  9210                           
  9211  0020                     ?_FLASH_WriteBlock:	
  9212  0020                     ??_m_mem_cpy_len:	
  9213                           ; 1 bytes @ 0x0
  9214                           
  9215  0020                     ?_m_flash_erase:	
  9216                           ; 1 bytes @ 0x0
  9217                           
  9218  0020                     ?_data_api_write_eeprom:	
  9219                           ; 1 bytes @ 0x0
  9220                           
  9221  0020                     ??_data_api_read_eeprom:	
  9222                           ; 1 bytes @ 0x0
  9223                           
  9224  0020                     ??_app_flow_lookup:	
  9225                           ; 1 bytes @ 0x0
  9226                           
  9227  0020                     ?_mfrc522_bal_write_reg_len:	
  9228                           ; 1 bytes @ 0x0
  9229                           
  9230  0020                     ?_mfrc522_bal_read_fifo_len_ex:	
  9231                           ; 1 bytes @ 0x0
  9232                           
  9233  0020                     ??_crc_sum:	
  9234                           ; 1 bytes @ 0x0
  9235                           
  9236  0020                     ?_ui_key_waite_up:	
  9237                           ; 1 bytes @ 0x0
  9238                           
  9239  0020                     ?___lmul:	
  9240                           ; 2 bytes @ 0x0
  9241                           
  9242  0020                     ?___almod:	
  9243                           ; 4 bytes @ 0x0
  9244                           
  9245  0020                     ?___lldiv:	
  9246                           ; 4 bytes @ 0x0
  9247                           
  9248  0020                     create_card_key_b@keyb:	
  9249                           ; 4 bytes @ 0x0
  9250                           
  9251  0020                     lcd_disp_all@x:	
  9252                           ; 1 bytes @ 0x0
  9253                           
  9254  0020                     iic_send_byte@x:	
  9255                           ; 1 bytes @ 0x0
  9256                           
  9257  0020                     iic_received_byte_if_ack@ack:	
  9258                           ; 1 bytes @ 0x0
  9259                           
  9260  0020                     mfrc522_bal_write_reg@reg:	
  9261                           ; 1 bytes @ 0x0
  9262                           
  9263  0020                     mfrc522_bal_read_reg@reg:	
  9264                           ; 1 bytes @ 0x0
  9265                           
  9266  0020                     ___awdiv@counter:	
  9267                           ; 1 bytes @ 0x0
  9268                           
  9269  0020                     ___awmod@counter:	
  9270                           ; 1 bytes @ 0x0
  9271                           
  9272  0020                     ___lbmod@dividend:	
  9273                           ; 1 bytes @ 0x0
  9274                           
  9275  0020                     ___lwmod@counter:	
  9276                           ; 1 bytes @ 0x0
  9277                           
  9278  0020                     FLASH_WriteBlock@writeAddr:	
  9279                           ; 1 bytes @ 0x0
  9280                           
  9281  0020                     my_uart1_send_poll@i:	
  9282                           ; 2 bytes @ 0x0
  9283                           
  9284  0020                     m_flash_erase@addr:	
  9285                           ; 2 bytes @ 0x0
  9286                           
  9287  0020                     data_api_write_eeprom@buf:	
  9288                           ; 2 bytes @ 0x0
  9289                           
  9290  0020                     mfrc522_bal_write_reg_len@buf:	
  9291                           ; 2 bytes @ 0x0
  9292                           
  9293  0020                     mfrc522_bal_read_fifo_len_ex@buf:	
  9294                           ; 2 bytes @ 0x0
  9295                           
  9296  0020                     ___wmul@product:	
  9297                           ; 2 bytes @ 0x0
  9298                           
  9299  0020                     ___lmul@multiplier:	
  9300                           ; 2 bytes @ 0x0
  9301                           
  9302  0020                     ___almod@divisor:	
  9303                           ; 4 bytes @ 0x0
  9304                           
  9305  0020                     ___lldiv@divisor:	
  9306                           ; 4 bytes @ 0x0
  9307                           
  9308                           
  9309                           ; 4 bytes @ 0x0
  9310  0020                     	ds	1
  9311  0021                     ??_lcd_disp_refresh:	
  9312  0021                     data_api_read_eeprom@i:	
  9313                           ; 1 bytes @ 0x1
  9314                           
  9315  0021                     create_card_key_b@i:	
  9316                           ; 1 bytes @ 0x1
  9317                           
  9318  0021                     lcd_disp_all@i:	
  9319                           ; 1 bytes @ 0x1
  9320                           
  9321  0021                     iic_send_byte@i:	
  9322                           ; 1 bytes @ 0x1
  9323                           
  9324  0021                     iic_received_byte_if_ack@ret:	
  9325                           ; 1 bytes @ 0x1
  9326                           
  9327  0021                     mfrc522_bal_read_reg@x:	
  9328                           ; 1 bytes @ 0x1
  9329                           
  9330  0021                     ___awdiv@sign:	
  9331                           ; 1 bytes @ 0x1
  9332                           
  9333  0021                     ___awmod@sign:	
  9334                           ; 1 bytes @ 0x1
  9335                           
  9336  0021                     ___lbmod@counter:	
  9337                           ; 1 bytes @ 0x1
  9338                           
  9339                           
  9340                           ; 1 bytes @ 0x1
  9341  0021                     	ds	1
  9342  0022                     ?_lcd_disp_str:	
  9343  0022                     ?_adc_mcp3241_start_convert_16:	
  9344                           ; 1 bytes @ 0x2
  9345                           
  9346  0022                     ??_mfrc522_hal_reset_sf:	
  9347                           ; 1 bytes @ 0x2
  9348                           
  9349  0022                     ??_mfrc522_hal_antenna_on:	
  9350                           ; 1 bytes @ 0x2
  9351                           
  9352  0022                     ?_mfrc522_bal_set_bit_reg:	
  9353                           ; 1 bytes @ 0x2
  9354                           
  9355  0022                     ?_mfrc522_bal_clr_bit_reg:	
  9356                           ; 1 bytes @ 0x2
  9357                           
  9358  0022                     ??_mfrc522_hal_get_antenna_gain:	
  9359                           ; 1 bytes @ 0x2
  9360                           
  9361  0022                     ?_adc_mcp3241_read_convert_16:	
  9362                           ; 1 bytes @ 0x2
  9363                           
  9364  0022                     ?___lwdiv:	
  9365                           ; 2 bytes @ 0x2
  9366                           
  9367  0022                     FLASH_WriteBlock@flashWordArray:	
  9368                           ; 2 bytes @ 0x2
  9369                           
  9370  0022                     my_uart1_send_poll@buf:	
  9371                           ; 1 bytes @ 0x2
  9372                           
  9373  0022                     m_flash_erase@len:	
  9374                           ; 1 bytes @ 0x2
  9375                           
  9376  0022                     data_api_write_eeprom@addr:	
  9377                           ; 1 bytes @ 0x2
  9378                           
  9379  0022                     adc_mcp3241_start_convert_16@g:	
  9380                           ; 1 bytes @ 0x2
  9381                           
  9382  0022                     mfrc522_bal_write_reg_len@len:	
  9383                           ; 1 bytes @ 0x2
  9384                           
  9385  0022                     mfrc522_bal_read_fifo_len_ex@len:	
  9386                           ; 1 bytes @ 0x2
  9387                           
  9388  0022                     mfrc522_bal_set_bit_reg@bits:	
  9389                           ; 1 bytes @ 0x2
  9390                           
  9391  0022                     mfrc522_bal_clr_bit_reg@bits:	
  9392                           ; 1 bytes @ 0x2
  9393                           
  9394  0022                     ___lbmod@rem:	
  9395                           ; 1 bytes @ 0x2
  9396                           
  9397  0022                     ui_key_waite_up@now:	
  9398                           ; 1 bytes @ 0x2
  9399                           
  9400  0022                     lcd_disp_str@str:	
  9401                           ; 2 bytes @ 0x2
  9402                           
  9403  0022                     ___awdiv@quotient:	
  9404                           ; 2 bytes @ 0x2
  9405                           
  9406  0022                     ___lwdiv@divisor:	
  9407                           ; 2 bytes @ 0x2
  9408                           
  9409                           
  9410                           ; 2 bytes @ 0x2
  9411  0022                     	ds	1
  9412  0023                     ??_FLASH_WriteBlock:	
  9413  0023                     ??_adc_mcp3241_start_convert_16:	
  9414                           ; 1 bytes @ 0x3
  9415                           
  9416  0023                     ??_mfrc522_bal_set_bit_reg:	
  9417                           ; 1 bytes @ 0x3
  9418                           
  9419  0023                     ??_mfrc522_bal_clr_bit_reg:	
  9420                           ; 1 bytes @ 0x3
  9421                           
  9422  0023                     data_api_write_eeprom@len:	
  9423                           ; 1 bytes @ 0x3
  9424                           
  9425  0023                     mfrc522_bal_write_reg_len@reg:	
  9426                           ; 1 bytes @ 0x3
  9427                           
  9428  0023                     mfrc522_bal_read_fifo_len_ex@rx_align:	
  9429                           ; 1 bytes @ 0x3
  9430                           
  9431  0023                     mfrc522_hal_antenna_on@t8:	
  9432                           ; 1 bytes @ 0x3
  9433                           
  9434  0023                     mfrc522_hal_get_antenna_gain@ret:	
  9435                           ; 1 bytes @ 0x3
  9436                           
  9437                           
  9438                           ; 1 bytes @ 0x3
  9439  0023                     	ds	1
  9440  0024                     ??_lcd_disp_str:	
  9441  0024                     ??_adc_mcp3241_read_convert_16:	
  9442                           ; 1 bytes @ 0x4
  9443                           
  9444  0024                     ?___bmul:	
  9445                           ; 1 bytes @ 0x4
  9446                           
  9447  0024                     adc_mcp3241_start_convert_16@b:	
  9448                           ; 1 bytes @ 0x4
  9449                           
  9450  0024                     mfrc522_bal_write_reg_len@i:	
  9451                           ; 1 bytes @ 0x4
  9452                           
  9453  0024                     mfrc522_bal_read_fifo_len_ex@reg:	
  9454                           ; 1 bytes @ 0x4
  9455                           
  9456  0024                     mfrc522_bal_set_bit_reg@tmp:	
  9457                           ; 1 bytes @ 0x4
  9458                           
  9459  0024                     mfrc522_bal_clr_bit_reg@tmp:	
  9460                           ; 1 bytes @ 0x4
  9461                           
  9462  0024                     ___bmul@multiplicand:	
  9463                           ; 1 bytes @ 0x4
  9464                           
  9465  0024                     ___lwdiv@dividend:	
  9466                           ; 1 bytes @ 0x4
  9467                           
  9468  0024                     ___lmul@multiplicand:	
  9469                           ; 2 bytes @ 0x4
  9470                           
  9471  0024                     ___almod@dividend:	
  9472                           ; 4 bytes @ 0x4
  9473                           
  9474  0024                     ___lldiv@dividend:	
  9475                           ; 4 bytes @ 0x4
  9476                           
  9477                           
  9478                           ; 4 bytes @ 0x4
  9479  0024                     	ds	1
  9480  0025                     ??___bmul:	
  9481  0025                     lcd_disp_str@loc:	
  9482                           ; 1 bytes @ 0x5
  9483                           
  9484  0025                     adc_mcp3241_start_convert_16@t8:	
  9485                           ; 1 bytes @ 0x5
  9486                           
  9487  0025                     mfrc522_bal_read_fifo_len_ex@adr:	
  9488                           ; 1 bytes @ 0x5
  9489                           
  9490  0025                     mfrc522_bal_set_bit_reg@reg:	
  9491                           ; 1 bytes @ 0x5
  9492                           
  9493  0025                     mfrc522_bal_clr_bit_reg@reg:	
  9494                           ; 1 bytes @ 0x5
  9495                           
  9496  0025                     crc_sum@len:	
  9497                           ; 1 bytes @ 0x5
  9498                           
  9499                           
  9500                           ; 2 bytes @ 0x5
  9501  0025                     	ds	1
  9502  0026                     ??_picc_stop_cryptol:	
  9503  0026                     ??_mfrc522_hal_set_antenna_gain:	
  9504                           ; 1 bytes @ 0x6
  9505                           
  9506  0026                     ?_mfrc522_hal_calculate_crc:	
  9507                           ; 1 bytes @ 0x6
  9508                           
  9509  0026                     lcd_disp_str@index:	
  9510                           ; 1 bytes @ 0x6
  9511                           
  9512  0026                     adc_mcp3241_read_convert_16@sta:	
  9513                           ; 1 bytes @ 0x6
  9514                           
  9515  0026                     mfrc522_bal_read_fifo_len_ex@i:	
  9516                           ; 1 bytes @ 0x6
  9517                           
  9518  0026                     ___bmul@product:	
  9519                           ; 1 bytes @ 0x6
  9520                           
  9521  0026                     FLASH_WriteBlock@blockStartAddr:	
  9522                           ; 1 bytes @ 0x6
  9523                           
  9524  0026                     mfrc522_hal_calculate_crc@data:	
  9525                           ; 2 bytes @ 0x6
  9526                           
  9527  0026                     ___lwdiv@quotient:	
  9528                           ; 2 bytes @ 0x6
  9529                           
  9530                           
  9531                           ; 2 bytes @ 0x6
  9532  0026                     	ds	1
  9533  0027                     ??_ui_disp_clear_card_id:	
  9534  0027                     mfrc522_hal_set_antenna_gain@gain:	
  9535                           ; 1 bytes @ 0x7
  9536                           
  9537  0027                     ___bmul@multiplier:	
  9538                           ; 1 bytes @ 0x7
  9539                           
  9540  0027                     adc_mcp3241_read_convert_16@t16:	
  9541                           ; 1 bytes @ 0x7
  9542                           
  9543  0027                     crc_sum@uIndex:	
  9544                           ; 2 bytes @ 0x7
  9545                           
  9546                           
  9547                           ; 2 bytes @ 0x7
  9548  0027                     	ds	1
  9549  0028                     ??_mfrc522_hal_init:	
  9550  0028                     ?_lcd_set_com_seg:	
  9551                           ; 1 bytes @ 0x8
  9552                           
  9553  0028                     ?_m_math_pow:	
  9554                           ; 2 bytes @ 0x8
  9555                           
  9556  0028                     ?___aldiv:	
  9557                           ; 4 bytes @ 0x8
  9558                           
  9559  0028                     FLASH_WriteBlock@GIEBitValue:	
  9560                           ; 4 bytes @ 0x8
  9561                           
  9562  0028                     lcd_set_com_seg@seg:	
  9563                           ; 1 bytes @ 0x8
  9564                           
  9565  0028                     mfrc522_hal_calculate_crc@length:	
  9566                           ; 1 bytes @ 0x8
  9567                           
  9568  0028                     ___lwdiv@counter:	
  9569                           ; 1 bytes @ 0x8
  9570                           
  9571  0028                     m_math_pow@x:	
  9572                           ; 1 bytes @ 0x8
  9573                           
  9574  0028                     ___aldiv@divisor:	
  9575                           ; 4 bytes @ 0x8
  9576                           
  9577  0028                     ___lldiv@quotient:	
  9578                           ; 4 bytes @ 0x8
  9579                           
  9580                           
  9581                           ; 4 bytes @ 0x8
  9582  0028                     	ds	1
  9583  0029                     ?_ui_disp_str_num_s:	
  9584  0029                     ??_mfapi_pcd_init:	
  9585                           ; 1 bytes @ 0x9
  9586                           
  9587  0029                     FLASH_WriteBlock@i:	
  9588                           ; 1 bytes @ 0x9
  9589                           
  9590  0029                     lcd_set_com_seg@show:	
  9591                           ; 1 bytes @ 0x9
  9592                           
  9593  0029                     crc_sum@uchCRCHi:	
  9594                           ; 1 bytes @ 0x9
  9595                           
  9596  0029                     ui_disp_str_num_s@str:	
  9597                           ; 1 bytes @ 0x9
  9598                           
  9599  0029                     mfrc522_hal_calculate_crc@result:	
  9600                           ; 2 bytes @ 0x9
  9601                           
  9602                           
  9603                           ; 2 bytes @ 0x9
  9604  0029                     	ds	1
  9605  002A                     ?_m_flash_copy:	
  9606  002A                     ??_lcd_set_com_seg:	
  9607                           ; 1 bytes @ 0xA
  9608                           
  9609  002A                     mfapi_pcd_init@v:	
  9610                           ; 1 bytes @ 0xA
  9611                           
  9612  002A                     crc_sum@uchCRCLo:	
  9613                           ; 1 bytes @ 0xA
  9614                           
  9615  002A                     m_flash_copy@addr:	
  9616                           ; 1 bytes @ 0xA
  9617                           
  9618                           
  9619                           ; 2 bytes @ 0xA
  9620  002A                     	ds	1
  9621  002B                     ?_crc_append:	
  9622  002B                     ?_crc_verify:	
  9623                           ; 1 bytes @ 0xB
  9624                           
  9625  002B                     ??_mfrc522_hal_calculate_crc:	
  9626                           ; 1 bytes @ 0xB
  9627                           
  9628  002B                     ui_disp_str_num_s@num:	
  9629                           ; 1 bytes @ 0xB
  9630                           
  9631  002B                     crc_verify@message:	
  9632                           ; 2 bytes @ 0xB
  9633                           
  9634  002B                     crc_append@message:	
  9635                           ; 2 bytes @ 0xB
  9636                           
  9637                           
  9638                           ; 2 bytes @ 0xB
  9639  002B                     	ds	1
  9640  002C                     m_math_pow@y:	
  9641  002C                     ___lldiv@counter:	
  9642                           ; 1 bytes @ 0xC
  9643                           
  9644  002C                     m_flash_copy@buf:	
  9645                           ; 1 bytes @ 0xC
  9646                           
  9647  002C                     ___aldiv@dividend:	
  9648                           ; 2 bytes @ 0xC
  9649                           
  9650                           
  9651                           ; 4 bytes @ 0xC
  9652  002C                     	ds	1
  9653  002D                     ??_ui_disp_str_num_s:	
  9654  002D                     ?_app_flow_adc_2_flow:	
  9655                           ; 1 bytes @ 0xD
  9656                           
  9657  002D                     crc_verify@n:	
  9658                           ; 2 bytes @ 0xD
  9659                           
  9660  002D                     crc_append@n:	
  9661                           ; 2 bytes @ 0xD
  9662                           
  9663  002D                     m_math_pow@ret:	
  9664                           ; 2 bytes @ 0xD
  9665                           
  9666                           
  9667                           ; 4 bytes @ 0xD
  9668  002D                     	ds	1
  9669  002E                     m_flash_copy@len:	
  9670  002E                     lcd_set_com_seg@addr:	
  9671                           ; 1 bytes @ 0xE
  9672                           
  9673  002E                     mfrc522_hal_calculate_crc@t8:	
  9674                           ; 1 bytes @ 0xE
  9675                           
  9676                           
  9677                           ; 1 bytes @ 0xE
  9678  002E                     	ds	1
  9679  002F                     ??_crc_append:	
  9680  002F                     ??_crc_verify:	
  9681                           ; 1 bytes @ 0xF
  9682                           
  9683  002F                     ?_ui_disp_str_dly:	
  9684                           ; 1 bytes @ 0xF
  9685                           
  9686  002F                     ??_ui_disp_small_flow_how_care:	
  9687                           ; 1 bytes @ 0xF
  9688                           
  9689  002F                     ??_ui_disp_modbus_id:	
  9690                           ; 1 bytes @ 0xF
  9691                           
  9692  002F                     ??_app_flow_adc_2_flow:	
  9693                           ; 1 bytes @ 0xF
  9694                           
  9695  002F                     m_flash_copy@offset:	
  9696                           ; 1 bytes @ 0xF
  9697                           
  9698  002F                     lcd_set_com_seg@com:	
  9699                           ; 1 bytes @ 0xF
  9700                           
  9701  002F                     ui_disp_str_dly@str:	
  9702                           ; 1 bytes @ 0xF
  9703                           
  9704  002F                     mfrc522_hal_calculate_crc@i:	
  9705                           ; 2 bytes @ 0xF
  9706                           
  9707                           
  9708                           ; 2 bytes @ 0xF
  9709  002F                     	ds	1
  9710  0030                     m_flash_copy@wlen:	
  9711  0030                     lcd_set_com_seg@p:	
  9712                           ; 1 bytes @ 0x10
  9713                           
  9714  0030                     ___aldiv@counter:	
  9715                           ; 1 bytes @ 0x10
  9716                           
  9717                           
  9718                           ; 1 bytes @ 0x10
  9719  0030                     	ds	1
  9720  0031                     ?_pcd_comm_with_picc:	
  9721  0031                     ui_disp_str_dly@dly:	
  9722                           ; 1 bytes @ 0x11
  9723                           
  9724  0031                     lcd_set_com_seg@bloc:	
  9725                           ; 1 bytes @ 0x11
  9726                           
  9727  0031                     pcd_comm_with_picc@waitIRQ:	
  9728                           ; 1 bytes @ 0x11
  9729                           
  9730  0031                     ___aldiv@sign:	
  9731                           ; 1 bytes @ 0x11
  9732                           
  9733  0031                     m_flash_copy@startAddr:	
  9734                           ; 1 bytes @ 0x11
  9735                           
  9736                           
  9737                           ; 2 bytes @ 0x11
  9738  0031                     	ds	1
  9739  0032                     ?_lcd_disp_dp:	
  9740  0032                     ??_lcd_disp_cln:	
  9741                           ; 1 bytes @ 0x12
  9742                           
  9743  0032                     ??_ui_disp_str_dly:	
  9744                           ; 1 bytes @ 0x12
  9745                           
  9746  0032                     lcd_disp_dp@show:	
  9747                           ; 1 bytes @ 0x12
  9748                           
  9749  0032                     pcd_comm_with_picc@sbuf:	
  9750                           ; 1 bytes @ 0x12
  9751                           
  9752  0032                     crc_verify@crccal:	
  9753                           ; 2 bytes @ 0x12
  9754                           
  9755  0032                     ___aldiv@quotient:	
  9756                           ; 2 bytes @ 0x12
  9757                           
  9758                           
  9759                           ; 4 bytes @ 0x12
  9760  0032                     	ds	1
  9761  0033                     ??_lcd_disp_dp:	
  9762  0033                     m_flash_copy@i:	
  9763                           ; 1 bytes @ 0x13
  9764                           
  9765                           
  9766                           ; 1 bytes @ 0x13
  9767  0033                     	ds	1
  9768  0034                     ??_ui_start_display:	
  9769  0034                     lcd_disp_cln@show:	
  9770                           ; 1 bytes @ 0x14
  9771                           
  9772  0034                     pcd_comm_with_picc@slen:	
  9773                           ; 1 bytes @ 0x14
  9774                           
  9775  0034                     crc_verify@expected:	
  9776                           ; 1 bytes @ 0x14
  9777                           
  9778  0034                     crc_append@crc:	
  9779                           ; 2 bytes @ 0x14
  9780                           
  9781                           
  9782                           ; 2 bytes @ 0x14
  9783  0034                     	ds	1
  9784  0035                     lcd_disp_dp@dec:	
  9785  0035                     app_flow_adc_2_flow@fl2:	
  9786                           ; 1 bytes @ 0x15
  9787                           
  9788  0035                     pcd_comm_with_picc@rbuf:	
  9789                           ; 2 bytes @ 0x15
  9790                           
  9791                           
  9792                           ; 2 bytes @ 0x15
  9793  0035                     	ds	1
  9794  0036                     ?_data_api_calibration_table_data_save:	
  9795  0036                     ?_ui_uint32_2_str:	
  9796                           ; 1 bytes @ 0x16
  9797                           
  9798  0036                     ??_ui_key_process_enter:	
  9799                           ; 1 bytes @ 0x16
  9800                           
  9801  0036                     ?_modbus_response_illgeal_function:	
  9802                           ; 1 bytes @ 0x16
  9803                           
  9804  0036                     ??_data_api_calibration_table_data_init:	
  9805                           ; 1 bytes @ 0x16
  9806                           
  9807  0036                     ??_data_api_system_data_init:	
  9808                           ; 1 bytes @ 0x16
  9809                           
  9810  0036                     ??_data_api_rt_data_save:	
  9811                           ; 1 bytes @ 0x16
  9812                           
  9813  0036                     ??_app_flow_rt_balance_money_cal:	
  9814                           ; 1 bytes @ 0x16
  9815                           
  9816  0036                     modbus_response_illgeal_function@errcode:	
  9817                           ; 1 bytes @ 0x16
  9818                           
  9819  0036                     data_api_calibration_table_data_save@single:	
  9820                           ; 1 bytes @ 0x16
  9821                           
  9822  0036                     ui_uint32_2_str@x:	
  9823                           ; 1 bytes @ 0x16
  9824                           
  9825                           
  9826                           ; 4 bytes @ 0x16
  9827  0036                     	ds	1
  9828  0037                     ??_data_api_calibration_table_data_save:	
  9829  0037                     modbus_response_illgeal_function@pmdbs:	
  9830                           ; 1 bytes @ 0x17
  9831                           
  9832  0037                     data_api_system_data_init@sta:	
  9833                           ; 1 bytes @ 0x17
  9834                           
  9835  0037                     pcd_comm_with_picc@rlen:	
  9836                           ; 1 bytes @ 0x17
  9837                           
  9838  0037                     app_flow_adc_2_flow@fl1:	
  9839                           ; 1 bytes @ 0x17
  9840                           
  9841                           
  9842                           ; 2 bytes @ 0x17
  9843  0037                     	ds	1
  9844  0038                     modbus_response_illgeal_function@buf:	
  9845  0038                     pcd_comm_with_picc@validBits:	
  9846                           ; 1 bytes @ 0x18
  9847                           
  9848                           
  9849                           ; 1 bytes @ 0x18
  9850  0038                     	ds	1
  9851  0039                     ??_modbus_response_read_flash_data:	
  9852  0039                     ??_modbus_response_read_status_register:	
  9853                           ; 1 bytes @ 0x19
  9854                           
  9855  0039                     ??_modbus_response_write_status_register:	
  9856                           ; 1 bytes @ 0x19
  9857                           
  9858  0039                     pcd_comm_with_picc@rxAlign:	
  9859                           ; 1 bytes @ 0x19
  9860                           
  9861  0039                     app_flow_adc_2_flow@ad2:	
  9862                           ; 1 bytes @ 0x19
  9863                           
  9864                           
  9865                           ; 2 bytes @ 0x19
  9866  0039                     	ds	1
  9867  003A                     ui_uint32_2_str@len:	
  9868  003A                     pcd_comm_with_picc@checkCRC:	
  9869                           ; 1 bytes @ 0x1A
  9870                           
  9871  003A                     data_api_rt_data_save@stp:	
  9872                           ; 1 bytes @ 0x1A
  9873                           
  9874                           
  9875                           ; 2 bytes @ 0x1A
  9876  003A                     	ds	1
  9877  003B                     ??_ui_uint32_2_str:	
  9878  003B                     ??_pcd_comm_with_picc:	
  9879                           ; 1 bytes @ 0x1B
  9880                           
  9881  003B                     modbus_response_read_flash_data@startAddr:	
  9882                           ; 1 bytes @ 0x1B
  9883                           
  9884  003B                     modbus_response_read_status_register@startAddr:	
  9885                           ; 2 bytes @ 0x1B
  9886                           
  9887  003B                     modbus_response_write_status_register@startAddr:	
  9888                           ; 2 bytes @ 0x1B
  9889                           
  9890  003B                     app_flow_adc_2_flow@ad1:	
  9891                           ; 2 bytes @ 0x1B
  9892                           
  9893                           
  9894                           ; 2 bytes @ 0x1B
  9895  003B                     	ds	1
  9896  003C                     data_api_calibration_table_data_init@sta:	
  9897  003C                     data_api_calibration_table_data_save@i:	
  9898                           ; 1 bytes @ 0x1C
  9899                           
  9900                           
  9901                           ; 1 bytes @ 0x1C
  9902  003C                     	ds	1
  9903  003D                     modbus_response_read_flash_data@pmdbs:	
  9904  003D                     modbus_response_read_status_register@pmdbs:	
  9905                           ; 1 bytes @ 0x1D
  9906                           
  9907  003D                     modbus_response_write_status_register@len:	
  9908                           ; 1 bytes @ 0x1D
  9909                           
  9910  003D                     app_flow_adc_2_flow@index:	
  9911                           ; 1 bytes @ 0x1D
  9912                           
  9913  003D                     pcd_comm_with_picc@txLastBits:	
  9914                           ; 1 bytes @ 0x1D
  9915                           
  9916  003D                     data_api_calibration_table_data_init@stp:	
  9917                           ; 1 bytes @ 0x1D
  9918                           
  9919  003D                     data_api_calibration_table_data_save@stp:	
  9920                           ; 2 bytes @ 0x1D
  9921                           
  9922                           
  9923                           ; 2 bytes @ 0x1D
  9924  003D                     	ds	1
  9925  003E                     ??_flow_sampling_process:	
  9926  003E                     modbus_response_read_flash_data@buf:	
  9927                           ; 1 bytes @ 0x1E
  9928                           
  9929  003E                     modbus_response_read_status_register@buf:	
  9930                           ; 1 bytes @ 0x1E
  9931                           
  9932  003E                     modbus_response_write_status_register@buf:	
  9933                           ; 1 bytes @ 0x1E
  9934                           
  9935  003E                     pcd_comm_with_picc@bitFraming:	
  9936                           ; 1 bytes @ 0x1E
  9937                           
  9938                           
  9939                           ; 1 bytes @ 0x1E
  9940  003E                     	ds	1
  9941  003F                     ui_uint32_2_str@buf:	
  9942  003F                     modbus_response_read_flash_data@len:	
  9943                           ; 1 bytes @ 0x1F
  9944                           
  9945  003F                     modbus_response_read_status_register@len:	
  9946                           ; 1 bytes @ 0x1F
  9947                           
  9948  003F                     modbus_response_write_status_register@pmdbs:	
  9949                           ; 1 bytes @ 0x1F
  9950                           
  9951  003F                     data_api_calibration_table_data_init@i:	
  9952                           ; 1 bytes @ 0x1F
  9953                           
  9954  003F                     data_api_calibration_table_data_save@loc:	
  9955                           ; 1 bytes @ 0x1F
  9956                           
  9957  003F                     flow_sampling_process@i:	
  9958                           ; 1 bytes @ 0x1F
  9959                           
  9960  003F                     _pcd_comm_with_picc$3170:	
  9961                           ; 1 bytes @ 0x1F
  9962                           
  9963                           
  9964                           ; 2 bytes @ 0x1F
  9965  003F                     	ds	1
  9966  0040                     ??_data_api_flash_process:	
  9967  0040                     ??_ui_disp_flow:	
  9968                           ; 1 bytes @ 0x20
  9969                           
  9970  0040                     ??_ui_disp_totale_v:	
  9971                           ; 1 bytes @ 0x20
  9972                           
  9973  0040                     ??_ui_disp_balance_and_volume:	
  9974                           ; 1 bytes @ 0x20
  9975                           
  9976  0040                     ??_ui_disp_set_line:	
  9977                           ; 1 bytes @ 0x20
  9978                           
  9979  0040                     ??_ui_disp_set_calib:	
  9980                           ; 1 bytes @ 0x20
  9981                           
  9982  0040                     ??_ui_key_process_cancel:	
  9983                           ; 1 bytes @ 0x20
  9984                           
  9985  0040                     ??_ui_key_set_process:	
  9986                           ; 1 bytes @ 0x20
  9987                           
  9988                           
  9989                           ; 1 bytes @ 0x20
  9990  0040                     	ds	1
  9991  0041                     ??_modbus_response_write_flash_sys:	
  9992  0041                     ??_modbus_response_write_flash_clib:	
  9993                           ; 1 bytes @ 0x21
  9994                           
  9995  0041                     pcd_comm_with_picc@cmd:	
  9996                           ; 1 bytes @ 0x21
  9997                           
  9998                           
  9999                           ; 1 bytes @ 0x21
 10000  0041                     	ds	1
 10001  0042                     ui_disp_totale_v@decnum:	
 10002  0042                     pcd_comm_with_picc@controlBuffer:	
 10003                           ; 1 bytes @ 0x22
 10004                           
 10005  0042                     ui_disp_flow@flw:	
 10006                           ; 2 bytes @ 0x22
 10007                           
 10008  0042                     ui_disp_set_line@flw:	
 10009                           ; 4 bytes @ 0x22
 10010                           
 10011                           
 10012                           ; 4 bytes @ 0x22
 10013  0042                     	ds	1
 10014  0043                     ui_disp_set_calib@loc:	
 10015  0043                     modbus_response_write_flash_sys@startAddr:	
 10016                           ; 1 bytes @ 0x23
 10017                           
 10018  0043                     modbus_response_write_flash_clib@startAddr:	
 10019                           ; 2 bytes @ 0x23
 10020                           
 10021                           
 10022                           ; 2 bytes @ 0x23
 10023  0043                     	ds	1
 10024  0044                     pcd_comm_with_picc@errorRegValue:	
 10025                           
 10026                           ; 1 bytes @ 0x24
 10027  0044                     	ds	1
 10028  0045                     modbus_response_write_flash_sys@pmdbs:	
 10029  0045                     modbus_response_write_flash_clib@pmdbs:	
 10030                           ; 1 bytes @ 0x25
 10031                           
 10032  0045                     pcd_comm_with_picc@status:	
 10033                           ; 1 bytes @ 0x25
 10034                           
 10035                           
 10036                           ; 1 bytes @ 0x25
 10037  0045                     	ds	1
 10038  0046                     ui_disp_flow@decnum:	
 10039  0046                     ui_disp_set_line@decnum:	
 10040                           ; 1 bytes @ 0x26
 10041                           
 10042  0046                     modbus_response_write_flash_sys@buf:	
 10043                           ; 1 bytes @ 0x26
 10044                           
 10045  0046                     modbus_response_write_flash_clib@buf:	
 10046                           ; 1 bytes @ 0x26
 10047                           
 10048  0046                     pcd_comm_with_picc@i:	
 10049                           ; 1 bytes @ 0x26
 10050                           
 10051                           
 10052                           ; 2 bytes @ 0x26
 10053  0046                     	ds	1
 10054  0047                     ??_ui_disp_menu:	
 10055  0047                     modbus_response_write_flash_sys@len:	
 10056                           ; 1 bytes @ 0x27
 10057                           
 10058  0047                     modbus_response_write_flash_clib@len:	
 10059                           ; 1 bytes @ 0x27
 10060                           
 10061                           
 10062                           ; 1 bytes @ 0x27
 10063  0047                     	ds	1
 10064  0048                     ?_modbus_response_process:	
 10065  0048                     pcd_comm_with_picc@_validBits:	
 10066                           ; 1 bytes @ 0x28
 10067                           
 10068  0048                     modbus_response_process@rlen:	
 10069                           ; 1 bytes @ 0x28
 10070                           
 10071                           
 10072                           ; 2 bytes @ 0x28
 10073  0048                     	ds	1
 10074  0049                     ?_key_process_up_down_variable_speed_ex:	
 10075  0049                     pcd_comm_with_picc@tmp8:	
 10076                           ; 1 bytes @ 0x29
 10077                           
 10078  0049                     key_process_up_down_variable_speed_ex@min:	
 10079                           ; 1 bytes @ 0x29
 10080                           
 10081                           
 10082                           ; 2 bytes @ 0x29
 10083  0049                     	ds	1
 10084  004A                     ?_picc_authenticate:	
 10085  004A                     ?_mifare_read:	
 10086                           ; 1 bytes @ 0x2A
 10087                           
 10088  004A                     ?_picc_select:	
 10089                           ; 1 bytes @ 0x2A
 10090                           
 10091  004A                     ??_picc_halt_a:	
 10092                           ; 1 bytes @ 0x2A
 10093                           
 10094  004A                     ?_picc_req_a_or_wakeup_a:	
 10095                           ; 1 bytes @ 0x2A
 10096                           
 10097  004A                     ?_pcd_mifare_transceive:	
 10098                           ; 1 bytes @ 0x2A
 10099                           
 10100  004A                     ??_modbus_response_process:	
 10101                           ; 1 bytes @ 0x2A
 10102                           
 10103  004A                     picc_req_a_or_wakeup_a@bufferATQA:	
 10104                           ; 1 bytes @ 0x2A
 10105                           
 10106  004A                     picc_select@validBits:	
 10107                           ; 1 bytes @ 0x2A
 10108                           
 10109  004A                     picc_authenticate@blockAddr:	
 10110                           ; 1 bytes @ 0x2A
 10111                           
 10112  004A                     mifare_read@buffer:	
 10113                           ; 1 bytes @ 0x2A
 10114                           
 10115  004A                     pcd_mifare_transceive@sendData:	
 10116                           ; 1 bytes @ 0x2A
 10117                           
 10118                           
 10119                           ; 2 bytes @ 0x2A
 10120  004A                     	ds	1
 10121  004B                     ??_picc_select:	
 10122  004B                     modbus_response_process@resp:	
 10123                           ; 1 bytes @ 0x2B
 10124                           
 10125  004B                     picc_req_a_or_wakeup_a@bufferSize:	
 10126                           ; 1 bytes @ 0x2B
 10127                           
 10128  004B                     mifare_read@bufferSize:	
 10129                           ; 1 bytes @ 0x2B
 10130                           
 10131  004B                     key_process_up_down_variable_speed_ex@max:	
 10132                           ; 1 bytes @ 0x2B
 10133                           
 10134  004B                     picc_authenticate@key:	
 10135                           ; 2 bytes @ 0x2B
 10136                           
 10137                           
 10138                           ; 2 bytes @ 0x2B
 10139  004B                     	ds	1
 10140  004C                     ??_mifare_read:	
 10141  004C                     ??_picc_req_a_or_wakeup_a:	
 10142                           ; 1 bytes @ 0x2C
 10143                           
 10144  004C                     modbus_response_process@pmdbs:	
 10145                           ; 1 bytes @ 0x2C
 10146                           
 10147  004C                     pcd_mifare_transceive@sendLen:	
 10148                           ; 1 bytes @ 0x2C
 10149                           
 10150                           
 10151                           ; 1 bytes @ 0x2C
 10152  004C                     	ds	1
 10153  004D                     key_process_up_down_variable_speed_ex@up:	
 10154  004D                     modbus_response_process@rbuf:	
 10155                           ; 1 bytes @ 0x2D
 10156                           
 10157  004D                     picc_authenticate@uid:	
 10158                           ; 1 bytes @ 0x2D
 10159                           
 10160  004D                     pcd_mifare_transceive@acceptTimeout:	
 10161                           ; 1 bytes @ 0x2D
 10162                           
 10163  004D                     picc_halt_a@buffer:	
 10164                           ; 1 bytes @ 0x2D
 10165                           
 10166                           
 10167                           ; 4 bytes @ 0x2D
 10168  004D                     	ds	1
 10169  004E                     ??_picc_authenticate:	
 10170  004E                     ??_pcd_mifare_transceive:	
 10171                           ; 1 bytes @ 0x2E
 10172                           
 10173  004E                     ??_key_process_up_down_variable_speed_ex:	
 10174                           ; 1 bytes @ 0x2E
 10175                           
 10176                           
 10177                           ; 1 bytes @ 0x2E
 10178  004E                     	ds	1
 10179  004F                     mifare_read@blockAddr:	
 10180                           
 10181                           ; 1 bytes @ 0x2F
 10182  004F                     	ds	1
 10183  0050                     picc_req_a_or_wakeup_a@cmd:	
 10184  0050                     mifare_read@result:	
 10185                           ; 1 bytes @ 0x30
 10186                           
 10187                           
 10188                           ; 1 bytes @ 0x30
 10189  0050                     	ds	1
 10190  0051                     picc_req_a_or_wakeup_a@__cmd:	
 10191  0051                     picc_halt_a@result:	
 10192                           ; 1 bytes @ 0x31
 10193                           
 10194  0051                     picc_authenticate@sendData:	
 10195                           ; 1 bytes @ 0x31
 10196                           
 10197                           
 10198                           ; 12 bytes @ 0x31
 10199  0051                     	ds	1
 10200  0052                     key_process_up_down_variable_speed_ex@key:	
 10201  0052                     picc_req_a_or_wakeup_a@status:	
 10202                           ; 1 bytes @ 0x32
 10203                           
 10204                           
 10205                           ; 1 bytes @ 0x32
 10206  0052                     	ds	1
 10207  0053                     key_process_up_down_variable_speed_ex@change:	
 10208  0053                     picc_req_a_or_wakeup_a@validBits:	
 10209                           ; 1 bytes @ 0x33
 10210                           
 10211  0053                     pcd_mifare_transceive@cmdBuffer:	
 10212                           ; 1 bytes @ 0x33
 10213                           
 10214                           
 10215                           ; 18 bytes @ 0x33
 10216  0053                     	ds	1
 10217  0054                     ??_mfapi_is_new_card_present:	
 10218  0054                     key_process_up_down_variable_speed_ex@speed:	
 10219                           ; 1 bytes @ 0x34
 10220                           
 10221                           
 10222                           ; 2 bytes @ 0x34
 10223  0054                     	ds	2
 10224  0056                     key_process_up_down_variable_speed_ex@t32:	
 10225                           
 10226                           ; 2 bytes @ 0x36
 10227  0056                     	ds	1
 10228  0057                     mfapi_is_new_card_present@cmd:	
 10229                           
 10230                           ; 1 bytes @ 0x37
 10231  0057                     	ds	1
 10232  0058                     key_process_up_down_variable_speed_ex@val:	
 10233  0058                     mfapi_is_new_card_present@bufferATQA:	
 10234                           ; 1 bytes @ 0x38
 10235                           
 10236                           
 10237                           ; 2 bytes @ 0x38
 10238  0058                     	ds	1
 10239  0059                     ??_ui_key_process_up_down:	
 10240                           
 10241                           ; 1 bytes @ 0x39
 10242  0059                     	ds	1
 10243  005A                     ui_key_process_up_down@up:	
 10244  005A                     mfapi_is_new_card_present@result:	
 10245                           ; 1 bytes @ 0x3A
 10246                           
 10247                           
 10248                           ; 1 bytes @ 0x3A
 10249  005A                     	ds	1
 10250  005B                     ??_ui_key_process:	
 10251  005B                     mfapi_is_new_card_present@bufferSize:	
 10252                           ; 1 bytes @ 0x3B
 10253                           
 10254                           
 10255                           ; 1 bytes @ 0x3B
 10256  005B                     	ds	2
 10257  005D                     picc_authenticate@command:	
 10258                           
 10259                           ; 1 bytes @ 0x3D
 10260  005D                     	ds	1
 10261  005E                     picc_authenticate@waitIRQ:	
 10262                           
 10263                           ; 1 bytes @ 0x3E
 10264  005E                     	ds	1
 10265  005F                     picc_authenticate@i:	
 10266                           
 10267                           ; 1 bytes @ 0x3F
 10268  005F                     	ds	1
 10269  0060                     ??_rfid_comm_process_read_inc:	
 10270  0060                     ??_rfid_comm_process_read_dec:	
 10271                           ; 1 bytes @ 0x40
 10272                           
 10273                           
 10274                           ; 1 bytes @ 0x40
 10275  0060                     	ds	3
 10276  0063                     rfid_comm_process_read_inc@ret:	
 10277  0063                     rfid_comm_process_read_dec@ret:	
 10278                           ; 1 bytes @ 0x43
 10279                           
 10280                           
 10281                           ; 1 bytes @ 0x43
 10282  0063                     	ds	2
 10283  0065                     pcd_mifare_transceive@waitIRq:	
 10284                           
 10285                           ; 1 bytes @ 0x45
 10286  0065                     	ds	1
 10287  0066                     pcd_mifare_transceive@validBits:	
 10288                           
 10289                           ; 1 bytes @ 0x46
 10290  0066                     	ds	1
 10291  0067                     pcd_mifare_transceive@cmdBufferSize:	
 10292                           
 10293                           ; 1 bytes @ 0x47
 10294  0067                     	ds	1
 10295  0068                     pcd_mifare_transceive@result:	
 10296                           
 10297                           ; 1 bytes @ 0x48
 10298  0068                     	ds	1
 10299  0069                     ?_mifare_write:	
 10300  0069                     mifare_write@buffer:	
 10301                           ; 1 bytes @ 0x49
 10302                           
 10303                           
 10304                           ; 1 bytes @ 0x49
 10305  0069                     	ds	1
 10306  006A                     mifare_write@bufferSize:	
 10307                           
 10308                           ; 1 bytes @ 0x4A
 10309  006A                     	ds	1
 10310  006B                     ??_mifare_write:	
 10311                           
 10312                           ; 1 bytes @ 0x4B
 10313  006B                     	ds	2
 10314  006D                     rfid_comm_process_read_header@ret:	
 10315  006D                     rfid_comm_process_recharge@ret:	
 10316                           ; 1 bytes @ 0x4D
 10317                           
 10318                           
 10319                           ; 1 bytes @ 0x4D
 10320  006D                     	ds	1
 10321  006E                     rfid_comm_process_recharge@stpInc:	
 10322  006E                     rfid_comm_process_read_header@stp:	
 10323                           ; 1 bytes @ 0x4E
 10324                           
 10325                           
 10326                           ; 2 bytes @ 0x4E
 10327  006E                     	ds	1
 10328  006F                     rfid_comm_process_recharge@stpDec:	
 10329                           
 10330                           ; 1 bytes @ 0x4F
 10331  006F                     	ds	1
 10332                           
 10333                           	psect	text1
 10334  368D                     __ptext1:	
 10335 ;; *************** function _ui_start_display *****************
 10336 ;; Defined at:
 10337 ;;		line 95 in file "src/api/ui.c"
 10338 ;; Parameters:    Size  Location     Type
 10339 ;;		None
 10340 ;; Auto vars:     Size  Location     Type
 10341 ;;		None
 10342 ;; Return value:  Size  Location     Type
 10343 ;;                  1    wreg      void 
 10344 ;; Registers used:
 10345 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10346 ;; Tracked objects:
 10347 ;;		On entry : 0/0
 10348 ;;		On exit  : 0/0
 10349 ;;		Unchanged: 0/0
 10350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10353 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10355 ;;Total ram usage:        1 bytes
 10356 ;; Hardware stack levels used:    1
 10357 ;; Hardware stack levels required when called:    7
 10358 ;; This function calls:
 10359 ;;		_ui_disp_hello
 10360 ;;		_ui_disp_str_dly
 10361 ;; This function is called by:
 10362 ;;		_main
 10363 ;; This function uses a non-reentrant model
 10364 ;;
 10365                           
 10366                           
 10367                           ;psect for function _ui_start_display
 10368  368D                     _ui_start_display:	
 10369                           
 10370                           ;ui.c: 96: ui_disp_hello();
 10371                           
 10372                           ;incstack = 0
 10373                           ; Regs used in _ui_start_display: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10374  368D  2698               	fcall	_ui_disp_hello
 10375                           
 10376                           ;ui.c: 98: ui_disp_str_dly((uint8_t*) " cs700", 9);
 10377  368E  30A4               	movlw	low (STR_2| (0+32768))
 10378  368F  0020               	movlb	0	; select bank0
 10379  3690  00AF               	movwf	ui_disp_str_dly@str
 10380  3691  30AA               	movlw	high (STR_2| (0+32768))
 10381  3692  00B0               	movwf	ui_disp_str_dly@str+1
 10382  3693  3009               	movlw	9
 10383  3694  00B4               	movwf	??_ui_start_display
 10384  3695  00B1               	movwf	ui_disp_str_dly@dly
 10385  3696  3199  291B         	ljmp	l13813
 10386  3698                     __end_of_ui_start_display:	
 10387  3698                     __ptext3:	
 10388 ;; *************** function _ui_disp_hello *****************
 10389 ;; Defined at:
 10390 ;;		line 43 in file "src/api/ui.c"
 10391 ;; Parameters:    Size  Location     Type
 10392 ;;		None
 10393 ;; Auto vars:     Size  Location     Type
 10394 ;;		None
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  1    wreg      void 
 10397 ;; Registers used:
 10398 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 0/0
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10405 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10406 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10407 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10408 ;;Total ram usage:        0 bytes
 10409 ;; Hardware stack levels used:    1
 10410 ;; Hardware stack levels required when called:    5
 10411 ;; This function calls:
 10412 ;;		_delay
 10413 ;;		_lcd_disp_all
 10414 ;;		_lcd_disp_refresh
 10415 ;;		_lcd_disp_str
 10416 ;; This function is called by:
 10417 ;;		_ui_start_display
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _ui_disp_hello
 10423  3698                     _ui_disp_hello:	
 10424                           
 10425                           ;ui.c: 44: lcd_disp_all(0x00);;
 10426                           
 10427                           ;incstack = 0
 10428                           ; Regs used in _ui_disp_hello: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10429  3698  3000               	movlw	0
 10430  3699  319A  2227  31B6   	fcall	_lcd_disp_all
 10431                           
 10432                           ;ui.c: 45: lcd_disp_str((uint8_t*) " -hello-");
 10433  369C  3079               	movlw	low (STR_1| (0+32768))
 10434  369D  0020               	movlb	0	; select bank0
 10435  369E  00A2               	movwf	lcd_disp_str@str
 10436  369F  30AA               	movlw	high (STR_1| (0+32768))
 10437  36A0  00A3               	movwf	lcd_disp_str@str+1
 10438  36A1  319F  27BD  31B6   	fcall	_lcd_disp_str
 10439                           
 10440                           ;ui.c: 46: lcd_disp_refresh();
 10441  36A4  319E  269D  31B6   	fcall	_lcd_disp_refresh
 10442                           
 10443                           ;ui.c: 47: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c)
      +                          ; }while(0);;
 10444  36A7  304C               	movlw	76
 10445  36A8  00F3               	movwf	delay@t
 10446  36A9  3090               	movlw	144
 10447  36AA  00F4               	movwf	delay@t+1
 10448  36AB  319A  2219  31B6   	fcall	_delay
 10449  36AE  304C               	movlw	76
 10450  36AF  00F3               	movwf	delay@t
 10451  36B0  3090               	movlw	144
 10452  36B1  00F4               	movwf	delay@t+1
 10453  36B2  319A  2219  31B6   	fcall	_delay
 10454  36B5  304C               	movlw	76
 10455  36B6  00F3               	movwf	delay@t
 10456  36B7  3090               	movlw	144
 10457  36B8  00F4               	movwf	delay@t+1
 10458  36B9  319A  2219  31B6   	fcall	_delay
 10459  36BC  304C               	movlw	76
 10460  36BD  00F3               	movwf	delay@t
 10461  36BE  3090               	movlw	144
 10462  36BF  00F4               	movwf	delay@t+1
 10463  36C0  319A  2219         	fcall	_delay
 10464  36C2  304C               	movlw	76
 10465  36C3  00F3               	movwf	delay@t
 10466  36C4  3090               	movlw	144
 10467  36C5  00F4               	movwf	delay@t+1
 10468  36C6  319A  2A19         	ljmp	l12485
 10469  36C8                     __end_of_ui_disp_hello:	
 10470                           
 10471                           	psect	text5
 10472  2E58                     __ptext5:	
 10473 ;; *************** function _ui_key_set_process *****************
 10474 ;; Defined at:
 10475 ;;		line 504 in file "src/api/ui_key.c"
 10476 ;; Parameters:    Size  Location     Type
 10477 ;;		None
 10478 ;; Auto vars:     Size  Location     Type
 10479 ;;		None
 10480 ;; Return value:  Size  Location     Type
 10481 ;;                  1    wreg      void 
 10482 ;; Registers used:
 10483 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10484 ;; Tracked objects:
 10485 ;;		On entry : 0/0
 10486 ;;		On exit  : 0/0
 10487 ;;		Unchanged: 0/0
 10488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 10489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 10491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10492 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 10493 ;;Total ram usage:        1 bytes
 10494 ;; Hardware stack levels used:    1
 10495 ;; Hardware stack levels required when called:    6
 10496 ;; This function calls:
 10497 ;;		___awdiv
 10498 ;;		___wmul
 10499 ;;		_data_api_calibration_table_data_save
 10500 ;;		_m_mem_cpy_len
 10501 ;; This function is called by:
 10502 ;;		_ui_key_process
 10503 ;; This function uses a non-reentrant model
 10504 ;;
 10505                           
 10506                           
 10507                           ;psect for function _ui_key_set_process
 10508  2E58                     _ui_key_set_process:	
 10509                           
 10510                           ;ui_key.c: 506: switch(menu){
 10511                           
 10512                           ;incstack = 0
 10513                           ; Regs used in _ui_key_set_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10514  2E58  2FDF               	goto	l14135
 10515  2E59                     l14003:	
 10516                           ;ui_key.c: 507: case 0x40:
 10517                           
 10518                           
 10519                           ;ui_key.c: 508: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->flowRatio));
 10520  2E59  301A               	movlw	26
 10521  2E5A  0022               	movlb	2	; select bank2
 10522  2E5B  00C7               	movwf	_flashOpStr^(0+256)
 10523  2E5C  3002               	movlw	2
 10524  2E5D  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10525                           
 10526                           ;ui_key.c: 510: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10527  2E5E  0020               	movlb	0	; select bank0
 10528  2E5F  00C0               	movwf	??_ui_key_set_process
 10529  2E60  0022               	movlb	2	; select bank2
 10530  2E61  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10531                           
 10532                           ;ui_key.c: 511: flashOpStr.len=2;
 10533  2E62  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10534  2E63  304B               	movlw	low (_flashOpStr+4)
 10535  2E64  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10536                           
 10537                           ;ui_key.c: 512: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)uiAdjbuf ,2);
 10538  2E65  00F3               	movwf	m_mem_cpy_len@d
 10539  2E66  3001               	movlw	high (_flashOpStr+4)
 10540  2E67  00F4               	movwf	m_mem_cpy_len@d+1
 10541  2E68  3065               	movlw	low _uiAdjbuf
 10542  2E69  00F5               	movwf	m_mem_cpy_len@s
 10543  2E6A  3001               	movlw	high _uiAdjbuf
 10544  2E6B  00F6               	movwf	m_mem_cpy_len@s+1
 10545  2E6C  3002               	movlw	2
 10546  2E6D  0020               	movlb	0	; select bank0
 10547  2E6E  00C0               	movwf	??_ui_key_set_process
 10548  2E6F  00F7               	movwf	m_mem_cpy_len@len
 10549  2E70  3197  2778         	fcall	_m_mem_cpy_len
 10550                           
 10551                           ;ui_key.c: 513: menu=bkupMenu;break;
 10552  2E72  0021               	movlb	1	; select bank1
 10553  2E73  0838               	movf	_bkupMenu^(0+128),w
 10554  2E74  0020               	movlb	0	; select bank0
 10555  2E75  00C0               	movwf	??_ui_key_set_process
 10556  2E76  00F8               	movwf	_menu
 10557  2E77  0008               	return
 10558  2E78                     l700:	
 10559                           ;ui_key.c: 514: case 0x50:
 10560                           
 10561                           
 10562                           ;ui_key.c: 515: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 10563  2E78  0022               	movlb	2	; select bank2
 10564  2E79  3065               	movlw	low (_uiAdjbuf| (0+256))
 10565  2E7A  01DB               	clrf	(_flashOpStr^(0+256)+20)
 10566  2E7B  0ADB               	incf	(_flashOpStr^(0+256)+20),f
 10567                           
 10568                           ;ui_key.c: 516: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 10569  2E7C  0086               	movwf	6
 10570  2E7D  3001               	movlw	1	; select bank2/3
 10571  2E7E  0087               	movwf	7
 10572  2E7F  3F40               	moviw [0]fsr1
 10573  2E80  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10574  2E81  3F41               	moviw [1]fsr1
 10575  2E82  00CC               	movwf	((_flashOpStr+1)^(0+256)+4)
 10576                           
 10577                           ;ui_key.c: 517: data_api_calibration_table_data_save(calibLocation,0);
 10578  2E83  0020               	movlb	0	; select bank0
 10579  2E84  01B6               	clrf	data_api_calibration_table_data_save@single
 10580  2E85  0021               	movlb	1	; select bank1
 10581  2E86  0839               	movf	_calibLocation^(0+128),w
 10582  2E87  3190  20A0         	fcall	_data_api_calibration_table_data_save
 10583                           
 10584                           ;ui_key.c: 518: calibLocation=0;
 10585  2E89  0021               	movlb	1	; select bank1
 10586  2E8A  01B9               	clrf	_calibLocation^(0+128)
 10587                           
 10588                           ;ui_key.c: 519: menu=bkupMenu;break;
 10589  2E8B  0838               	movf	_bkupMenu^(0+128),w
 10590  2E8C  0020               	movlb	0	; select bank0
 10591  2E8D  00C0               	movwf	??_ui_key_set_process
 10592  2E8E  00F8               	movwf	_menu
 10593  2E8F  0008               	return
 10594  2E90                     l14021:	
 10595                           ;ui_key.c: 521: case 0x70:
 10596                           
 10597                           
 10598                           ;ui_key.c: 522: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->smallFlowNotCa
      +                          re));
 10599  2E90  3039               	movlw	57
 10600  2E91  0022               	movlb	2	; select bank2
 10601  2E92  00C7               	movwf	_flashOpStr^(0+256)
 10602  2E93  3001               	movlw	1
 10603  2E94  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10604                           
 10605                           ;ui_key.c: 524: flashOpStr.len=1;
 10606  2E95  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10607  2E96  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10608                           
 10609                           ;ui_key.c: 525: flashOpStr.buf[0]=uiAdjbuf[0];
 10610  2E97  0865               	movf	_uiAdjbuf^(0+256),w
 10611  2E98  0020               	movlb	0	; select bank0
 10612  2E99  00C0               	movwf	??_ui_key_set_process
 10613  2E9A  0022               	movlb	2	; select bank2
 10614  2E9B  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10615                           
 10616                           ;ui_key.c: 526: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10617  2E9C  3002               	movlw	2
 10618  2E9D  0020               	movlb	0	; select bank0
 10619  2E9E  00C0               	movwf	??_ui_key_set_process
 10620  2E9F  0022               	movlb	2	; select bank2
 10621  2EA0  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10622                           
 10623                           ;ui_key.c: 527: menu=bkupMenu;
 10624  2EA1  0021               	movlb	1	; select bank1
 10625  2EA2  0838               	movf	_bkupMenu^(0+128),w
 10626  2EA3  0020               	movlb	0	; select bank0
 10627  2EA4  00C0               	movwf	??_ui_key_set_process
 10628  2EA5  00F8               	movwf	_menu
 10629                           
 10630                           ;ui_key.c: 528: break;
 10631  2EA6  0008               	return
 10632  2EA7                     l14031:	
 10633                           ;ui_key.c: 529: case 0x80:
 10634                           
 10635                           
 10636                           ;ui_key.c: 530: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->price));
 10637  2EA7  3012               	movlw	18
 10638  2EA8  0022               	movlb	2	; select bank2
 10639  2EA9  00C7               	movwf	_flashOpStr^(0+256)
 10640  2EAA  3002               	movlw	2
 10641  2EAB  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10642                           
 10643                           ;ui_key.c: 532: flashOpStr.len=2;
 10644  2EAC  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10645  2EAD  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10646                           
 10647                           ;ui_key.c: 533: flashOpStr.buf[0]=uiAdjbuf[0];
 10648  2EAE  0865               	movf	_uiAdjbuf^(0+256),w
 10649  2EAF  0020               	movlb	0	; select bank0
 10650  2EB0  00C0               	movwf	??_ui_key_set_process
 10651  2EB1  0022               	movlb	2	; select bank2
 10652  2EB2  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10653                           
 10654                           ;ui_key.c: 534: flashOpStr.buf[1]=uiAdjbuf[1];
 10655  2EB3  0866               	movf	(_uiAdjbuf^(0+256)+1),w
 10656  2EB4  0020               	movlb	0	; select bank0
 10657  2EB5  00C0               	movwf	??_ui_key_set_process
 10658  2EB6  0022               	movlb	2	; select bank2
 10659  2EB7  00CC               	movwf	(_flashOpStr^(0+256)+5)
 10660                           
 10661                           ;ui_key.c: 535: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10662  2EB8  3002               	movlw	2
 10663  2EB9  0020               	movlb	0	; select bank0
 10664  2EBA  00C0               	movwf	??_ui_key_set_process
 10665  2EBB  0022               	movlb	2	; select bank2
 10666  2EBC  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10667                           
 10668                           ;ui_key.c: 536: menu=bkupMenu;
 10669  2EBD  0021               	movlb	1	; select bank1
 10670  2EBE  0838               	movf	_bkupMenu^(0+128),w
 10671  2EBF  0020               	movlb	0	; select bank0
 10672  2EC0  00C0               	movwf	??_ui_key_set_process
 10673  2EC1  00F8               	movwf	_menu
 10674                           
 10675                           ;ui_key.c: 537: break;
 10676  2EC2  0008               	return
 10677  2EC3                     l14043:	
 10678                           ;ui_key.c: 538: case 0x90:
 10679                           
 10680                           
 10681                           ;ui_key.c: 539: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->transferMoneyL
      +                          imit));
 10682  2EC3  3024               	movlw	36
 10683  2EC4  0022               	movlb	2	; select bank2
 10684  2EC5  00C7               	movwf	_flashOpStr^(0+256)
 10685  2EC6  3065               	movlw	low (_uiAdjbuf| (0+256))
 10686  2EC7  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10687                           
 10688                           ;ui_key.c: 541: __t16=*((uint16_t*)uiAdjbuf);
 10689  2EC8  0086               	movwf	6
 10690  2EC9  3001               	movlw	1	; select bank2/3
 10691  2ECA  0087               	movwf	7
 10692  2ECB  3F40               	moviw [0]fsr1
 10693  2ECC  00F9               	movwf	___t16
 10694  2ECD  3F41               	moviw [1]fsr1
 10695  2ECE  00FA               	movwf	___t16+1
 10696                           
 10697                           ;ui_key.c: 542: __t32=__t16*100;
 10698  2ECF  00F4               	movwf	___wmul@multiplier+1
 10699  2ED0  0879               	movf	___t16,w
 10700  2ED1  00F3               	movwf	___wmul@multiplier
 10701  2ED2  3064               	movlw	100
 10702  2ED3  00F5               	movwf	___wmul@multiplicand
 10703  2ED4  01F6               	clrf	___wmul@multiplicand+1
 10704  2ED5  3193  23EE  31AE   	fcall	___wmul
 10705  2ED8  0873               	movf	?___wmul,w
 10706  2ED9  0021               	movlb	1	; select bank1
 10707  2EDA  00A0               	movwf	___t32^(0+128)
 10708  2EDB  0874               	movf	?___wmul+1,w
 10709  2EDC  00A1               	movwf	(___t32^(0+128)+1)
 10710  2EDD  3065               	movlw	low (_uiAdjbuf| (0+256))
 10711  2EDE  01A2               	clrf	(___t32^(0+128)+2)
 10712  2EDF  01A3               	clrf	(___t32^(0+128)+3)
 10713                           
 10714                           ;ui_key.c: 543: *((uint32_t*)uiAdjbuf)=__t32;
 10715  2EE0  0086               	movwf	6
 10716  2EE1  3001               	movlw	1	; select bank2/3
 10717  2EE2  0087               	movwf	7
 10718  2EE3  0820               	movf	___t32^(0+128),w
 10719  2EE4  3FC0               	movwi [0]fsr1
 10720  2EE5  0821               	movf	(___t32+1)^(0+128),w
 10721  2EE6  3FC1               	movwi [1]fsr1
 10722  2EE7  0822               	movf	(___t32+2)^(0+128),w
 10723  2EE8  3FC2               	movwi [2]fsr1
 10724  2EE9  0823               	movf	(___t32+3)^(0+128),w
 10725  2EEA  3FC3               	movwi [3]fsr1
 10726                           
 10727                           ;ui_key.c: 544: flashOpStr.len=4;
 10728  2EEB  3004               	movlw	4
 10729  2EEC  0022               	movlb	2	; select bank2
 10730  2EED  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10731  2EEE  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10732                           
 10733                           ;ui_key.c: 545: flashOpStr.buf[0]=uiAdjbuf[0];
 10734  2EEF  0865               	movf	_uiAdjbuf^(0+256),w
 10735  2EF0  0020               	movlb	0	; select bank0
 10736  2EF1  00C0               	movwf	??_ui_key_set_process
 10737  2EF2  0022               	movlb	2	; select bank2
 10738  2EF3  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10739                           
 10740                           ;ui_key.c: 546: flashOpStr.buf[1]=uiAdjbuf[1];
 10741  2EF4  0866               	movf	(_uiAdjbuf^(0+256)+1),w
 10742  2EF5  0020               	movlb	0	; select bank0
 10743  2EF6  00C0               	movwf	??_ui_key_set_process
 10744  2EF7  0022               	movlb	2	; select bank2
 10745  2EF8  00CC               	movwf	(_flashOpStr^(0+256)+5)
 10746                           
 10747                           ;ui_key.c: 547: flashOpStr.buf[3]=uiAdjbuf[2];
 10748  2EF9  0867               	movf	(_uiAdjbuf^(0+256)+2),w
 10749  2EFA  0020               	movlb	0	; select bank0
 10750  2EFB  00C0               	movwf	??_ui_key_set_process
 10751  2EFC  0022               	movlb	2	; select bank2
 10752  2EFD  00CE               	movwf	(_flashOpStr^(0+256)+7)
 10753                           
 10754                           ;ui_key.c: 548: flashOpStr.buf[4]=uiAdjbuf[4];
 10755  2EFE  0869               	movf	(_uiAdjbuf^(0+256)+4),w
 10756  2EFF  0020               	movlb	0	; select bank0
 10757  2F00  00C0               	movwf	??_ui_key_set_process
 10758  2F01  0022               	movlb	2	; select bank2
 10759  2F02  00CF               	movwf	(_flashOpStr^(0+256)+8)
 10760                           
 10761                           ;ui_key.c: 549: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10762  2F03  3002               	movlw	2
 10763  2F04  0020               	movlb	0	; select bank0
 10764  2F05  00C0               	movwf	??_ui_key_set_process
 10765  2F06  0022               	movlb	2	; select bank2
 10766  2F07  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10767                           
 10768                           ;ui_key.c: 550: menu=bkupMenu;
 10769  2F08  0021               	movlb	1	; select bank1
 10770  2F09  0838               	movf	_bkupMenu^(0+128),w
 10771  2F0A  0020               	movlb	0	; select bank0
 10772  2F0B  00C0               	movwf	??_ui_key_set_process
 10773  2F0C  00F8               	movwf	_menu
 10774                           
 10775                           ;ui_key.c: 551: break;
 10776  2F0D  0008               	return
 10777  2F0E                     l14065:	
 10778                           ;ui_key.c: 553: case 0xa0:
 10779                           
 10780                           
 10781                           ;ui_key.c: 554: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->shortID));
 10782  2F0E  3009               	movlw	9
 10783  2F0F  0022               	movlb	2	; select bank2
 10784  2F10  00C7               	movwf	_flashOpStr^(0+256)
 10785  2F11  3002               	movlw	2
 10786  2F12  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10787                           
 10788                           ;ui_key.c: 556: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10789  2F13  0020               	movlb	0	; select bank0
 10790  2F14  00C0               	movwf	??_ui_key_set_process
 10791  2F15  0022               	movlb	2	; select bank2
 10792  2F16  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10793                           
 10794                           ;ui_key.c: 557: flashOpStr.len=1;
 10795  2F17  3001               	movlw	1
 10796  2F18  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10797  2F19  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10798                           
 10799                           ;ui_key.c: 559: flashOpStr.buf[0]=uiAdjbuf[0];
 10800  2F1A  0865               	movf	_uiAdjbuf^(0+256),w
 10801  2F1B  0020               	movlb	0	; select bank0
 10802  2F1C  00C0               	movwf	??_ui_key_set_process
 10803  2F1D  0022               	movlb	2	; select bank2
 10804  2F1E  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10805                           
 10806                           ;ui_key.c: 561: menu=bkupMenu;
 10807  2F1F  0021               	movlb	1	; select bank1
 10808  2F20  0838               	movf	_bkupMenu^(0+128),w
 10809  2F21  0020               	movlb	0	; select bank0
 10810  2F22  00C0               	movwf	??_ui_key_set_process
 10811  2F23  00F8               	movwf	_menu
 10812                           
 10813                           ;ui_key.c: 562: break;
 10814  2F24  0008               	return
 10815  2F25                     l14075:	
 10816                           ;ui_key.c: 563: case 0xb0:
 10817                           
 10818                           
 10819                           ;ui_key.c: 564: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceWarning
      +                          ));
 10820  2F25  3014               	movlw	20
 10821  2F26  0022               	movlb	2	; select bank2
 10822  2F27  00C7               	movwf	_flashOpStr^(0+256)
 10823  2F28  3002               	movlw	2
 10824  2F29  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10825                           
 10826                           ;ui_key.c: 566: flashOpStr.len=2;
 10827  2F2A  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10828  2F2B  3065               	movlw	low (_uiAdjbuf| (0+256))
 10829  2F2C  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10830                           
 10831                           ;ui_key.c: 567: __t16=*((uint16_t*)uiAdjbuf);
 10832  2F2D  0086               	movwf	6
 10833  2F2E  3001               	movlw	1	; select bank2/3
 10834  2F2F  0087               	movwf	7
 10835  2F30  3F40               	moviw [0]fsr1
 10836  2F31  00F9               	movwf	___t16
 10837  2F32  3F41               	moviw [1]fsr1
 10838  2F33  00FA               	movwf	___t16+1
 10839                           
 10840                           ;ui_key.c: 568: __t16*=100;
 10841  2F34  3064               	movlw	100
 10842  2F35  00F3               	movwf	___wmul@multiplier
 10843  2F36  01F4               	clrf	___wmul@multiplier+1
 10844  2F37  087A               	movf	___t16+1,w
 10845  2F38  00F6               	movwf	___wmul@multiplicand+1
 10846  2F39  0879               	movf	___t16,w
 10847  2F3A  00F5               	movwf	___wmul@multiplicand
 10848  2F3B  3193  23EE  31AE   	fcall	___wmul
 10849  2F3E  0874               	movf	?___wmul+1,w
 10850  2F3F  00FA               	movwf	___t16+1
 10851  2F40  0873               	movf	?___wmul,w
 10852  2F41  00F9               	movwf	___t16
 10853                           
 10854                           ;ui_key.c: 569: *((uint16_t*)flashOpStr.buf)=__t16;
 10855  2F42  087A               	movf	___t16+1,w
 10856  2F43  0022               	movlb	2	; select bank2
 10857  2F44  00CC               	movwf	((_flashOpStr+1)^(0+256)+4)
 10858  2F45  0879               	movf	___t16,w
 10859  2F46  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10860                           
 10861                           ;ui_key.c: 570: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10862  2F47  3002               	movlw	2
 10863  2F48  0020               	movlb	0	; select bank0
 10864  2F49  00C0               	movwf	??_ui_key_set_process
 10865  2F4A  0022               	movlb	2	; select bank2
 10866  2F4B  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10867                           
 10868                           ;ui_key.c: 571: flashOpStr.len=2;
 10869  2F4C  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10870  2F4D  3064               	movlw	100
 10871  2F4E  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10872                           
 10873                           ;ui_key.c: 572: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 10874  2F4F  00F3               	movwf	___awdiv@divisor
 10875  2F50  3014               	movlw	20
 10876  2F51  01F4               	clrf	___awdiv@divisor+1
 10877  2F52  0084               	movwf	4
 10878  2F53  30BF               	movlw	191
 10879  2F54  0085               	movwf	5
 10880  2F55  3F00               	moviw [0]fsr0
 10881  2F56  00F5               	movwf	___awdiv@dividend
 10882  2F57  3F01               	moviw [1]fsr0
 10883  2F58  00F6               	movwf	___awdiv@dividend+1
 10884  2F59  318E  26B4         	fcall	___awdiv
 10885  2F5B  3065               	movlw	low (_uiAdjbuf| (0+256))
 10886  2F5C  0086               	movwf	6
 10887  2F5D  3001               	movlw	1	; select bank2/3
 10888  2F5E  0087               	movwf	7
 10889  2F5F  0873               	movf	?___awdiv,w
 10890  2F60  3FC0               	movwi [0]fsr1
 10891  2F61  0874               	movf	?___awdiv+1,w
 10892  2F62  3FC1               	movwi [1]fsr1
 10893                           
 10894                           ;ui_key.c: 574: menu=0xb1;
 10895  2F63  30B1               	movlw	177
 10896  2F64  0020               	movlb	0	; select bank0
 10897  2F65  00C0               	movwf	??_ui_key_set_process
 10898  2F66  00F8               	movwf	_menu
 10899                           
 10900                           ;ui_key.c: 575: break;
 10901  2F67  0008               	return
 10902  2F68                     l14093:	
 10903                           ;ui_key.c: 576: case 0xb1:
 10904                           
 10905                           
 10906                           ;ui_key.c: 577: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->balanceOff));
 10907  2F68  3016               	movlw	22
 10908  2F69  0022               	movlb	2	; select bank2
 10909  2F6A  00C7               	movwf	_flashOpStr^(0+256)
 10910  2F6B  3002               	movlw	2
 10911  2F6C  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10912                           
 10913                           ;ui_key.c: 579: flashOpStr.len=2;
 10914  2F6D  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10915  2F6E  3065               	movlw	low (_uiAdjbuf| (0+256))
 10916  2F6F  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10917                           
 10918                           ;ui_key.c: 580: __t16=*((uint16_t*)uiAdjbuf);
 10919  2F70  0086               	movwf	6
 10920  2F71  3001               	movlw	1	; select bank2/3
 10921  2F72  0087               	movwf	7
 10922  2F73  3F40               	moviw [0]fsr1
 10923  2F74  00F9               	movwf	___t16
 10924  2F75  3F41               	moviw [1]fsr1
 10925  2F76  00FA               	movwf	___t16+1
 10926                           
 10927                           ;ui_key.c: 581: __t16*=100;
 10928  2F77  3064               	movlw	100
 10929  2F78  00F3               	movwf	___wmul@multiplier
 10930  2F79  01F4               	clrf	___wmul@multiplier+1
 10931  2F7A  087A               	movf	___t16+1,w
 10932  2F7B  00F6               	movwf	___wmul@multiplicand+1
 10933  2F7C  0879               	movf	___t16,w
 10934  2F7D  00F5               	movwf	___wmul@multiplicand
 10935  2F7E  3193  23EE         	fcall	___wmul
 10936  2F80  0874               	movf	?___wmul+1,w
 10937  2F81  00FA               	movwf	___t16+1
 10938  2F82  0873               	movf	?___wmul,w
 10939  2F83  00F9               	movwf	___t16
 10940                           
 10941                           ;ui_key.c: 582: *((uint16_t*)flashOpStr.buf)=__t16;
 10942  2F84  087A               	movf	___t16+1,w
 10943  2F85  0022               	movlb	2	; select bank2
 10944  2F86  00CC               	movwf	((_flashOpStr+1)^(0+256)+4)
 10945  2F87  0879               	movf	___t16,w
 10946  2F88  00CB               	movwf	(_flashOpStr^(0+256)+4)
 10947                           
 10948                           ;ui_key.c: 583: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10949  2F89  3002               	movlw	2
 10950  2F8A  0020               	movlb	0	; select bank0
 10951  2F8B  00C0               	movwf	??_ui_key_set_process
 10952  2F8C  0022               	movlb	2	; select bank2
 10953  2F8D  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10954                           
 10955                           ;ui_key.c: 584: flashOpStr.len=2;
 10956  2F8E  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10957  2F8F  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10958                           
 10959                           ;ui_key.c: 585: menu=bkupMenu;
 10960  2F90  0021               	movlb	1	; select bank1
 10961  2F91  0838               	movf	_bkupMenu^(0+128),w
 10962  2F92  0020               	movlb	0	; select bank0
 10963  2F93  00C0               	movwf	??_ui_key_set_process
 10964  2F94  00F8               	movwf	_menu
 10965                           
 10966                           ;ui_key.c: 586: break;
 10967  2F95  0008               	return
 10968  2F96                     l14109:	
 10969                           ;ui_key.c: 587: case 0xc0:
 10970                           
 10971                           
 10972                           ;ui_key.c: 588: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->BalanceMoney))
      +                          ;
 10973  2F96  302C               	movlw	44
 10974  2F97  0022               	movlb	2	; select bank2
 10975  2F98  00C7               	movwf	_flashOpStr^(0+256)
 10976  2F99  3002               	movlw	2
 10977  2F9A  01C8               	clrf	(_flashOpStr+1)^(0+256)
 10978                           
 10979                           ;ui_key.c: 590: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 10980  2F9B  0020               	movlb	0	; select bank0
 10981  2F9C  00C0               	movwf	??_ui_key_set_process
 10982  2F9D  0022               	movlb	2	; select bank2
 10983  2F9E  00DB               	movwf	(_flashOpStr^(0+256)+20)
 10984                           
 10985                           ;ui_key.c: 591: flashOpStr.len=4;
 10986  2F9F  3004               	movlw	4
 10987  2FA0  00C9               	movwf	(_flashOpStr^(0+256)+2)
 10988  2FA1  01CA               	clrf	(_flashOpStr^(0+256)+3)
 10989                           
 10990                           ;ui_key.c: 592: __q31=100;
 10991  2FA2  0021               	movlb	1	; select bank1
 10992  2FA3  3064               	movlw	100
 10993  2FA4  01C1               	clrf	(___q31+3)^(0+128)
 10994  2FA5  01C0               	clrf	(___q31+2)^(0+128)
 10995  2FA6  01BF               	clrf	(___q31+1)^(0+128)
 10996  2FA7  00BE               	movwf	___q31^(0+128)
 10997                           
 10998                           ;ui_key.c: 593: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)(&__q31) ,4);
 10999  2FA8  304B               	movlw	low (_flashOpStr+4)
 11000  2FA9  00F3               	movwf	m_mem_cpy_len@d
 11001  2FAA  3001               	movlw	high (_flashOpStr+4)
 11002  2FAB  00F4               	movwf	m_mem_cpy_len@d+1
 11003  2FAC  30BE               	movlw	low ___q31
 11004  2FAD  00F5               	movwf	m_mem_cpy_len@s
 11005  2FAE  3000               	movlw	high ___q31
 11006  2FAF  00F6               	movwf	m_mem_cpy_len@s+1
 11007  2FB0  3004               	movlw	4
 11008  2FB1  0020               	movlb	0	; select bank0
 11009  2FB2  00C0               	movwf	??_ui_key_set_process
 11010  2FB3  00F7               	movwf	m_mem_cpy_len@len
 11011  2FB4  3197  2778         	fcall	_m_mem_cpy_len
 11012                           
 11013                           ;ui_key.c: 595: menu=bkupMenu;
 11014  2FB6  0021               	movlb	1	; select bank1
 11015  2FB7  0838               	movf	_bkupMenu^(0+128),w
 11016  2FB8  0020               	movlb	0	; select bank0
 11017  2FB9  00C0               	movwf	??_ui_key_set_process
 11018  2FBA  00F8               	movwf	_menu
 11019                           
 11020                           ;ui_key.c: 596: break;
 11021  2FBB  0008               	return
 11022  2FBC                     l14121:	
 11023                           ;ui_key.c: 597: case 0xf0:
 11024                           
 11025                           
 11026                           ;ui_key.c: 598: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->flowRatio));
 11027  2FBC  301A               	movlw	26
 11028  2FBD  0022               	movlb	2	; select bank2
 11029  2FBE  00C7               	movwf	_flashOpStr^(0+256)
 11030  2FBF  3002               	movlw	2
 11031  2FC0  01C8               	clrf	(_flashOpStr+1)^(0+256)
 11032                           
 11033                           ;ui_key.c: 600: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 11034  2FC1  0020               	movlb	0	; select bank0
 11035  2FC2  00C0               	movwf	??_ui_key_set_process
 11036  2FC3  0022               	movlb	2	; select bank2
 11037  2FC4  00DB               	movwf	(_flashOpStr^(0+256)+20)
 11038                           
 11039                           ;ui_key.c: 601: flashOpStr.len=2;
 11040  2FC5  00C9               	movwf	(_flashOpStr^(0+256)+2)
 11041  2FC6  30E8               	movlw	232
 11042  2FC7  01CA               	clrf	(_flashOpStr^(0+256)+3)
 11043                           
 11044                           ;ui_key.c: 603: __t16=1000;
 11045  2FC8  00F9               	movwf	___t16
 11046  2FC9  3003               	movlw	3
 11047  2FCA  00FA               	movwf	___t16+1
 11048                           
 11049                           ;ui_key.c: 604: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)(&__t16) ,2);
 11050  2FCB  304B               	movlw	low (_flashOpStr+4)
 11051  2FCC  00F3               	movwf	m_mem_cpy_len@d
 11052  2FCD  3001               	movlw	high (_flashOpStr+4)
 11053  2FCE  00F4               	movwf	m_mem_cpy_len@d+1
 11054  2FCF  3079               	movlw	low ___t16
 11055  2FD0  00F5               	movwf	m_mem_cpy_len@s
 11056  2FD1  3000               	movlw	high ___t16
 11057  2FD2  00F6               	movwf	m_mem_cpy_len@s+1
 11058  2FD3  3002               	movlw	2
 11059  2FD4  0020               	movlb	0	; select bank0
 11060  2FD5  00C0               	movwf	??_ui_key_set_process
 11061  2FD6  00F7               	movwf	m_mem_cpy_len@len
 11062  2FD7  3197  2778         	fcall	_m_mem_cpy_len
 11063                           
 11064                           ;ui_key.c: 605: menu=bkupMenu;break;
 11065  2FD9  0021               	movlb	1	; select bank1
 11066  2FDA  0838               	movf	_bkupMenu^(0+128),w
 11067  2FDB  0020               	movlb	0	; select bank0
 11068  2FDC  00C0               	movwf	??_ui_key_set_process
 11069  2FDD  00F8               	movwf	_menu
 11070                           
 11071                           ;ui_key.c: 606: }
 11072  2FDE  0008               	return
 11073  2FDF                     l14135:	
 11074  2FDF  0878               	movf	_menu,w
 11075                           
 11076                           ; Switch size 1, requested type "space"
 11077                           ; Number of cases is 10, Range of values is 64 to 240
 11078                           ; switch strategies available:
 11079                           ; Name         Instructions Cycles
 11080                           ; simple_byte           31    16 (average)
 11081                           ; jumptable            263     9 (fixed)
 11082                           ;	Chosen strategy is simple_byte
 11083  2FE0  3A40               	xorlw	64	; case 64
 11084  2FE1  1903               	skipnz
 11085  2FE2  2E59               	goto	l14003
 11086  2FE3  3A10               	xorlw	16	; case 80
 11087  2FE4  1903               	skipnz
 11088  2FE5  2E78               	goto	l700
 11089  2FE6  3A20               	xorlw	32	; case 112
 11090  2FE7  1903               	skipnz
 11091  2FE8  2E90               	goto	l14021
 11092  2FE9  3AF0               	xorlw	240	; case 128
 11093  2FEA  1903               	skipnz
 11094  2FEB  2EA7               	goto	l14031
 11095  2FEC  3A10               	xorlw	16	; case 144
 11096  2FED  1903               	skipnz
 11097  2FEE  2EC3               	goto	l14043
 11098  2FEF  3A30               	xorlw	48	; case 160
 11099  2FF0  1903               	skipnz
 11100  2FF1  2F0E               	goto	l14065
 11101  2FF2  3A10               	xorlw	16	; case 176
 11102  2FF3  1903               	skipnz
 11103  2FF4  2F25               	goto	l14075
 11104  2FF5  3A01               	xorlw	1	; case 177
 11105  2FF6  1903               	skipnz
 11106  2FF7  2F68               	goto	l14093
 11107  2FF8  3A71               	xorlw	113	; case 192
 11108  2FF9  1903               	skipnz
 11109  2FFA  2F96               	goto	l14109
 11110  2FFB  3A30               	xorlw	48	; case 240
 11111  2FFC  1903               	skipnz
 11112  2FFD  2FBC               	goto	l14121
 11113  2FFE  2FFF               	goto	l709
 11114  2FFF                     l709:	
 11115  2FFF  0008               	return
 11116  3000                     __end_of_ui_key_set_process:	
 11117                           
 11118                           	psect	text22
 11119  3615                     __ptext22:	
 11120 ;; *************** function _ui_mem_cpy *****************
 11121 ;; Defined at:
 11122 ;;		line 50 in file "src/api/ui.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;  d               1    wreg     PTR unsigned char 
 11125 ;;		 -> lcdBuf(9), 
 11126 ;;  s               2    3[COMMON] PTR unsigned char 
 11127 ;;		 -> STR_15(5), STR_12(6), STR_11(6), STR_10(6), 
 11128 ;;		 -> STR_9(6), STR_8(4), STR_7(4), STR_6(6), 
 11129 ;;		 -> STR_4(7), STR_3(3), STR_2(7), 
 11130 ;; Auto vars:     Size  Location     Type
 11131 ;;  d               1    7[COMMON] PTR unsigned char 
 11132 ;;		 -> lcdBuf(9), 
 11133 ;;  len             1    6[COMMON] unsigned char 
 11134 ;; Return value:  Size  Location     Type
 11135 ;;                  1    wreg      void 
 11136 ;; Registers used:
 11137 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 11138 ;; Tracked objects:
 11139 ;;		On entry : 0/0
 11140 ;;		On exit  : 0/0
 11141 ;;		Unchanged: 0/0
 11142 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11143 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11144 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11145 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11146 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11147 ;;Total ram usage:        5 bytes
 11148 ;; Hardware stack levels used:    1
 11149 ;; Hardware stack levels required when called:    2
 11150 ;; This function calls:
 11151 ;;		Nothing
 11152 ;; This function is called by:
 11153 ;;		_ui_disp_str_num_s
 11154 ;; This function uses a non-reentrant model
 11155 ;;
 11156                           
 11157                           
 11158                           ;psect for function _ui_mem_cpy
 11159  3615                     _ui_mem_cpy:	
 11160                           
 11161                           ;incstack = 0
 11162                           ; Regs used in _ui_mem_cpy: [wreg-fsr1h+status,2+status,0+pclath]
 11163                           ;ui_mem_cpy@d stored from wreg
 11164  3615  00F7               	movwf	ui_mem_cpy@d
 11165                           
 11166                           ;ui.c: 51: uint8_t len = 0;
 11167  3616  01F6               	clrf	ui_mem_cpy@len
 11168  3617                     l8055:	
 11169                           ;ui.c: 52: while (*s != '\0' && len < 8) {
 11170                           
 11171  3617  0873               	movf	ui_mem_cpy@s,w
 11172  3618  0084               	movwf	4
 11173  3619  0874               	movf	ui_mem_cpy@s+1,w
 11174  361A  0085               	movwf	5
 11175  361B  0012               	moviw fsr0++
 11176  361C  1903               	btfsc	3,2
 11177  361D  0008               	return
 11178  361E  3008               	movlw	8
 11179  361F  0276               	subwf	ui_mem_cpy@len,w
 11180  3620  1803               	btfsc	3,0
 11181  3621  0008               	return
 11182                           
 11183                           ;ui.c: 53: *d++ = *s++;
 11184  3622  0873               	movf	ui_mem_cpy@s,w
 11185  3623  0084               	movwf	4
 11186  3624  0874               	movf	ui_mem_cpy@s+1,w
 11187  3625  0085               	movwf	5
 11188  3626  0800               	movf	0,w	;code access
 11189  3627  00F5               	movwf	??_ui_mem_cpy
 11190  3628  0877               	movf	ui_mem_cpy@d,w
 11191  3629  0086               	movwf	6
 11192  362A  3001               	movlw	1	; select bank2/3
 11193  362B  0087               	movwf	7
 11194  362C  0875               	movf	??_ui_mem_cpy,w
 11195  362D  0081               	movwf	1
 11196  362E  3001               	movlw	1
 11197  362F  07F3               	addwf	ui_mem_cpy@s,f
 11198  3630  3000               	movlw	0
 11199  3631  3DF4               	addwfc	ui_mem_cpy@s+1,f
 11200  3632  3001               	movlw	1
 11201  3633  00F5               	movwf	??_ui_mem_cpy
 11202  3634  07F7               	addwf	ui_mem_cpy@d,f
 11203                           
 11204                           ;ui.c: 54: len++;
 11205  3635  07F6               	addwf	ui_mem_cpy@len,f
 11206  3636  2E17               	goto	l8055
 11207  3637                     __end_of_ui_mem_cpy:	
 11208                           
 11209                           	psect	text28
 11210  2C62                     __ptext28:	
 11211 ;; *************** function _ui_key_process_enter *****************
 11212 ;; Defined at:
 11213 ;;		line 216 in file "src/api/ui_key.c"
 11214 ;; Parameters:    Size  Location     Type
 11215 ;;		None
 11216 ;; Auto vars:     Size  Location     Type
 11217 ;;		None
 11218 ;; Return value:  Size  Location     Type
 11219 ;;                  1    wreg      void 
 11220 ;; Registers used:
 11221 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11222 ;; Tracked objects:
 11223 ;;		On entry : 0/0
 11224 ;;		On exit  : 0/0
 11225 ;;		Unchanged: 0/0
 11226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11229 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 11230 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 11231 ;;Total ram usage:        6 bytes
 11232 ;; Hardware stack levels used:    1
 11233 ;; Hardware stack levels required when called:    5
 11234 ;; This function calls:
 11235 ;;		___aldiv
 11236 ;;		___awdiv
 11237 ;;		_m_mem_cpy_len
 11238 ;;		_ui_key_waite_up
 11239 ;; This function is called by:
 11240 ;;		_ui_key_process
 11241 ;; This function uses a non-reentrant model
 11242 ;;
 11243                           
 11244                           
 11245                           ;psect for function _ui_key_process_enter
 11246  2C62                     _ui_key_process_enter:	
 11247                           
 11248                           ;ui_key.c: 217: switch(menu ){
 11249                           
 11250                           ;incstack = 0
 11251                           ; Regs used in _ui_key_process_enter: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11252  2C62  2D4E               	goto	l13963
 11253  2C63                     l13913:	
 11254                           ;ui_key.c: 220: case 106:
 11255                           
 11256                           ;ui_key.c: 219: switch(password){
 11257                           
 11258                           ;ui_key.c: 218: case 0x10:
 11259                           
 11260                           
 11261                           ;ui_key.c: 221: ui_key_waite_up();
 11262  2C63  31A0  2009         	fcall	_ui_key_waite_up
 11263                           
 11264                           ;ui_key.c: 222: menu=0x20;break;
 11265  2C65  3020               	movlw	32
 11266  2C66  0020               	movlb	0	; select bank0
 11267  2C67  00B6               	movwf	??_ui_key_process_enter
 11268  2C68  00F8               	movwf	_menu
 11269  2C69  0008               	return
 11270  2C6A                     l13917:	
 11271                           ;ui_key.c: 223: case 6:
 11272                           
 11273                           
 11274                           ;ui_key.c: 224: ui_key_waite_up();
 11275  2C6A  31A0  2009         	fcall	_ui_key_waite_up
 11276                           
 11277                           ;ui_key.c: 225: menu=0x30;break;
 11278  2C6C  3030               	movlw	48
 11279  2C6D  0020               	movlb	0	; select bank0
 11280  2C6E  00B6               	movwf	??_ui_key_process_enter
 11281  2C6F  00F8               	movwf	_menu
 11282  2C70  0008               	return
 11283  2C71                     l13921:	
 11284                           ;ui_key.c: 226: case 109:
 11285                           
 11286                           
 11287                           ;ui_key.c: 227: m_mem_cpy_len(uiAdjbuf,(uint8_t*)(&mainSystemData.flowRatio),2);
 11288  2C71  3065               	movlw	low _uiAdjbuf
 11289  2C72  00F3               	movwf	m_mem_cpy_len@d
 11290  2C73  3001               	movlw	high _uiAdjbuf
 11291  2C74  00F4               	movwf	m_mem_cpy_len@d+1
 11292  2C75  301A               	movlw	26
 11293  2C76  00F5               	movwf	m_mem_cpy_len@s
 11294  2C77  30BF               	movlw	191
 11295  2C78  00F6               	movwf	m_mem_cpy_len@s+1
 11296  2C79  3002               	movlw	2
 11297  2C7A  0020               	movlb	0	; select bank0
 11298  2C7B  00B6               	movwf	??_ui_key_process_enter
 11299  2C7C  00F7               	movwf	m_mem_cpy_len@len
 11300  2C7D  3197  2778         	fcall	_m_mem_cpy_len
 11301                           
 11302                           ;ui_key.c: 228: menu=0x40;
 11303  2C7F  3040               	movlw	64
 11304  2C80  0020               	movlb	0	; select bank0
 11305  2C81  00B6               	movwf	??_ui_key_process_enter
 11306  2C82  00F8               	movwf	_menu
 11307                           
 11308                           ;ui_key.c: 229: break;
 11309  2C83  0008               	return
 11310  2C84                     l13925:	
 11311                           ;ui_key.c: 230: case 168:
 11312                           
 11313                           
 11314                           ;ui_key.c: 231: calibLocation=0;
 11315  2C84  0021               	movlb	1	; select bank1
 11316  2C85  01B9               	clrf	_calibLocation^(0+128)
 11317                           
 11318                           ;ui_key.c: 232: *((uint16_t*)uiAdjbuf) = Main_flowCalibrationTable.flowCalibrationArr[ca
      +                          libLocation].rtflowValue;
 11319  2C86  0839               	movf	_calibLocation^(0+128),w
 11320  2C87  0020               	movlb	0	; select bank0
 11321  2C88  00B6               	movwf	??_ui_key_process_enter
 11322  2C89  01B7               	clrf	??_ui_key_process_enter+1
 11323  2C8A  35B6               	lslf	??_ui_key_process_enter,f
 11324  2C8B  0DB7               	rlf	??_ui_key_process_enter+1,f
 11325  2C8C  35B6               	lslf	??_ui_key_process_enter,f
 11326  2C8D  0DB7               	rlf	??_ui_key_process_enter+1,f
 11327  2C8E  0836               	movf	??_ui_key_process_enter,w
 11328  2C8F  3E02               	addlw	2
 11329  2C90  00B8               	movwf	??_ui_key_process_enter+2
 11330  2C91  3000               	movlw	0
 11331  2C92  3D37               	addwfc	??_ui_key_process_enter+1,w
 11332  2C93  00B9               	movwf	??_ui_key_process_enter+3
 11333  2C94  3080               	movlw	128
 11334  2C95  00BA               	movwf	??_ui_key_process_enter+4
 11335  2C96  30BF               	movlw	191
 11336  2C97  00BB               	movwf	??_ui_key_process_enter+5
 11337  2C98  0838               	movf	??_ui_key_process_enter+2,w
 11338  2C99  073A               	addwf	??_ui_key_process_enter+4,w
 11339  2C9A  0086               	movwf	6
 11340  2C9B  0839               	movf	??_ui_key_process_enter+3,w
 11341  2C9C  3D3B               	addwfc	??_ui_key_process_enter+5,w
 11342  2C9D  0087               	movwf	7
 11343  2C9E  3065               	movlw	low (_uiAdjbuf| (0+256))
 11344  2C9F  0084               	movwf	4
 11345  2CA0  3001               	movlw	1	; select bank2/3
 11346  2CA1  0085               	movwf	5
 11347  2CA2  3F40               	moviw [0]fsr1
 11348  2CA3  3F80               	movwi [0]fsr0
 11349  2CA4  3F41               	moviw [1]fsr1
 11350  2CA5  3F81               	movwi [1]fsr0
 11351                           
 11352                           ;ui_key.c: 233: menu=0x50;break;
 11353  2CA6  3050               	movlw	80
 11354  2CA7  00B6               	movwf	??_ui_key_process_enter
 11355  2CA8  00F8               	movwf	_menu
 11356  2CA9  0008               	return
 11357  2CAA                     l13931:	
 11358                           ;ui_key.c: 234: case 4:
 11359                           
 11360                           
 11361                           ;ui_key.c: 235: menu=0xf0;break;
 11362  2CAA  30F0               	movlw	240
 11363  2CAB  0020               	movlb	0	; select bank0
 11364  2CAC  00B6               	movwf	??_ui_key_process_enter
 11365  2CAD  00F8               	movwf	_menu
 11366  2CAE  0008               	return
 11367  2CAF                     l13933:	
 11368                           ;ui_key.c: 237: case 133:
 11369                           
 11370                           
 11371                           ;ui_key.c: 238: uiAdjbuf[0]=mainSystemData.smallFlowNotCare;
 11372  2CAF  3039               	movlw	57
 11373  2CB0  0084               	movwf	4
 11374  2CB1  30BF               	movlw	191
 11375  2CB2  0085               	movwf	5
 11376  2CB3  0800               	movf	0,w	;code access
 11377  2CB4  0020               	movlb	0	; select bank0
 11378  2CB5  00B6               	movwf	??_ui_key_process_enter
 11379  2CB6  0022               	movlb	2	; select bank2
 11380  2CB7  00E5               	movwf	_uiAdjbuf^(0+256)
 11381                           
 11382                           ;ui_key.c: 239: menu=0x70;
 11383  2CB8  3070               	movlw	112
 11384  2CB9  0020               	movlb	0	; select bank0
 11385  2CBA  00B6               	movwf	??_ui_key_process_enter
 11386  2CBB  00F8               	movwf	_menu
 11387                           
 11388                           ;ui_key.c: 240: break;
 11389  2CBC  0008               	return
 11390  2CBD                     l13937:	
 11391                           ;ui_key.c: 241: case 9:
 11392                           
 11393                           
 11394                           ;ui_key.c: 242: *(uint16_t*)uiAdjbuf=mainSystemData.price;
 11395  2CBD  30BF               	movlw	191
 11396  2CBE  0186               	clrf	6
 11397  2CBF  0087               	movwf	7
 11398  2CC0  3065               	movlw	low (_uiAdjbuf| (0+256))
 11399  2CC1  3152               	addfsr 1,18
 11400  2CC2  0084               	movwf	4
 11401  2CC3  3001               	movlw	1	; select bank2/3
 11402  2CC4  0085               	movwf	5
 11403  2CC5  3F40               	moviw [0]fsr1
 11404  2CC6  3F80               	movwi [0]fsr0
 11405  2CC7  3F41               	moviw [1]fsr1
 11406  2CC8  3F81               	movwi [1]fsr0
 11407                           
 11408                           ;ui_key.c: 243: menu=0x80;
 11409  2CC9  3080               	movlw	128
 11410  2CCA  0020               	movlb	0	; select bank0
 11411  2CCB  00B6               	movwf	??_ui_key_process_enter
 11412  2CCC  00F8               	movwf	_menu
 11413                           
 11414                           ;ui_key.c: 244: break;
 11415  2CCD  0008               	return
 11416  2CCE                     l13941:	
 11417                           ;ui_key.c: 245: case 8:
 11418                           
 11419                           
 11420                           ;ui_key.c: 247: *(int16_t*)uiAdjbuf=(mainSystemData.transferMoneyLimit/100);
 11421  2CCE  0020               	movlb	0	; select bank0
 11422  2CCF  3064               	movlw	100
 11423  2CD0  01AB               	clrf	___aldiv@divisor+3
 11424  2CD1  01AA               	clrf	___aldiv@divisor+2
 11425  2CD2  01A9               	clrf	___aldiv@divisor+1
 11426  2CD3  00A8               	movwf	___aldiv@divisor
 11427  2CD4  3024               	movlw	36
 11428  2CD5  0084               	movwf	4
 11429  2CD6  30BF               	movlw	191
 11430  2CD7  0085               	movwf	5
 11431  2CD8  3F00               	moviw [0]fsr0
 11432  2CD9  00AC               	movwf	___aldiv@dividend
 11433  2CDA  3F01               	moviw [1]fsr0
 11434  2CDB  00AD               	movwf	___aldiv@dividend+1
 11435  2CDC  3F02               	moviw [2]fsr0
 11436  2CDD  00AE               	movwf	___aldiv@dividend+2
 11437  2CDE  3F03               	moviw [3]fsr0
 11438  2CDF  00AF               	movwf	___aldiv@dividend+3
 11439  2CE0  318A  22E0         	fcall	___aldiv
 11440  2CE2  3065               	movlw	low (_uiAdjbuf| (0+256))
 11441  2CE3  0086               	movwf	6
 11442  2CE4  3001               	movlw	1	; select bank2/3
 11443  2CE5  0087               	movwf	7
 11444  2CE6  0020               	movlb	0	; select bank0
 11445  2CE7  0828               	movf	?___aldiv,w
 11446  2CE8  3FC0               	movwi [0]fsr1
 11447  2CE9  0829               	movf	?___aldiv+1,w
 11448  2CEA  3FC1               	movwi [1]fsr1
 11449                           
 11450                           ;ui_key.c: 248: menu=0x90;
 11451  2CEB  3090               	movlw	144
 11452  2CEC  00B6               	movwf	??_ui_key_process_enter
 11453  2CED  00F8               	movwf	_menu
 11454                           
 11455                           ;ui_key.c: 249: break;
 11456  2CEE  0008               	return
 11457  2CEF                     l13945:	
 11458                           ;ui_key.c: 250: case 117:
 11459                           
 11460                           
 11461                           ;ui_key.c: 251: *(int16_t*)uiAdjbuf=(mainSystemData.balanceWarning/100);
 11462  2CEF  3064               	movlw	100
 11463  2CF0  00F3               	movwf	___awdiv@divisor
 11464  2CF1  3014               	movlw	20
 11465  2CF2  01F4               	clrf	___awdiv@divisor+1
 11466  2CF3  0084               	movwf	4
 11467  2CF4  30BF               	movlw	191
 11468  2CF5  0085               	movwf	5
 11469  2CF6  3F00               	moviw [0]fsr0
 11470  2CF7  00F5               	movwf	___awdiv@dividend
 11471  2CF8  3F01               	moviw [1]fsr0
 11472  2CF9  00F6               	movwf	___awdiv@dividend+1
 11473  2CFA  318E  26B4         	fcall	___awdiv
 11474  2CFC  3065               	movlw	low (_uiAdjbuf| (0+256))
 11475  2CFD  0086               	movwf	6
 11476  2CFE  3001               	movlw	1	; select bank2/3
 11477  2CFF  0087               	movwf	7
 11478  2D00  0873               	movf	?___awdiv,w
 11479  2D01  3FC0               	movwi [0]fsr1
 11480  2D02  0874               	movf	?___awdiv+1,w
 11481  2D03  3FC1               	movwi [1]fsr1
 11482                           
 11483                           ;ui_key.c: 252: menu=0xb0;
 11484  2D04  30B0               	movlw	176
 11485  2D05  0020               	movlb	0	; select bank0
 11486  2D06  00B6               	movwf	??_ui_key_process_enter
 11487  2D07  00F8               	movwf	_menu
 11488                           
 11489                           ;ui_key.c: 253: break;
 11490  2D08  0008               	return
 11491  2D09                     l13949:	
 11492                           ;ui_key.c: 255: case 13:
 11493                           
 11494                           
 11495                           ;ui_key.c: 256: uiAdjbuf[0]=mainSystemData.shortID;
 11496  2D09  3009               	movlw	9
 11497  2D0A  0084               	movwf	4
 11498  2D0B  30BF               	movlw	191
 11499  2D0C  0085               	movwf	5
 11500  2D0D  0800               	movf	0,w	;code access
 11501  2D0E  0020               	movlb	0	; select bank0
 11502  2D0F  00B6               	movwf	??_ui_key_process_enter
 11503  2D10  0022               	movlb	2	; select bank2
 11504  2D11  00E5               	movwf	_uiAdjbuf^(0+256)
 11505                           
 11506                           ;ui_key.c: 257: menu=0xa0;break;
 11507  2D12  30A0               	movlw	160
 11508  2D13  0020               	movlb	0	; select bank0
 11509  2D14  00B6               	movwf	??_ui_key_process_enter
 11510  2D15  00F8               	movwf	_menu
 11511  2D16  0008               	return
 11512  2D17                     l13953:	
 11513                           ;ui_key.c: 258: case 144:
 11514                           
 11515                           
 11516                           ;ui_key.c: 261: menu=0xc0;break;
 11517  2D17  30C0               	movlw	192
 11518  2D18  0020               	movlb	0	; select bank0
 11519  2D19  00B6               	movwf	??_ui_key_process_enter
 11520  2D1A  00F8               	movwf	_menu
 11521  2D1B  0008               	return
 11522  2D1C                     l13955:	
 11523                           ;ui_key.c: 262: case 100:
 11524                           
 11525                           
 11526                           ;ui_key.c: 263: menu=0xd0;break;
 11527  2D1C  30D0               	movlw	208
 11528  2D1D  0020               	movlb	0	; select bank0
 11529  2D1E  00B6               	movwf	??_ui_key_process_enter
 11530  2D1F  00F8               	movwf	_menu
 11531                           
 11532                           ;ui_key.c: 283: }
 11533                           
 11534                           ;ui_key.c: 282: default:break;
 11535  2D20  0008               	return
 11536  2D21                     l13959:	
 11537                           
 11538                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11539                           ; Switch size 1, requested type "space"
 11540                           ; Number of cases is 1, Range of values is 0 to 0
 11541                           ; switch strategies available:
 11542                           ; Name         Instructions Cycles
 11543                           ; simple_byte            4     3 (average)
 11544                           ; direct_byte            8     6 (fixed)
 11545                           ; jumptable            260     6 (fixed)
 11546                           ;	Chosen strategy is simple_byte
 11547  2D21  0022               	movlb	2	; select bank2
 11548  2D22  0823               	movf	(_password+1)^(0+256),w
 11549  2D23  3A00               	xorlw	0	; case 0
 11550  2D24  1903               	skipnz
 11551  2D25  2D27               	goto	l15565
 11552  2D26  2D53               	goto	l685
 11553  2D27                     l15565:	
 11554                           
 11555                           ; Switch size 1, requested type "space"
 11556                           ; Number of cases is 12, Range of values is 4 to 168
 11557                           ; switch strategies available:
 11558                           ; Name         Instructions Cycles
 11559                           ; simple_byte           37    19 (average)
 11560                           ; jumptable            263     9 (fixed)
 11561                           ;	Chosen strategy is simple_byte
 11562  2D27  0822               	movf	_password^(0+256),w
 11563  2D28  3A04               	xorlw	4	; case 4
 11564  2D29  1903               	skipnz
 11565  2D2A  2CAA               	goto	l13931
 11566  2D2B  3A02               	xorlw	2	; case 6
 11567  2D2C  1903               	skipnz
 11568  2D2D  2C6A               	goto	l13917
 11569  2D2E  3A0E               	xorlw	14	; case 8
 11570  2D2F  1903               	skipnz
 11571  2D30  2CCE               	goto	l13941
 11572  2D31  3A01               	xorlw	1	; case 9
 11573  2D32  1903               	skipnz
 11574  2D33  2CBD               	goto	l13937
 11575  2D34  3A04               	xorlw	4	; case 13
 11576  2D35  1903               	skipnz
 11577  2D36  2D09               	goto	l13949
 11578  2D37  3A69               	xorlw	105	; case 100
 11579  2D38  1903               	skipnz
 11580  2D39  2D1C               	goto	l13955
 11581  2D3A  3A0E               	xorlw	14	; case 106
 11582  2D3B  1903               	skipnz
 11583  2D3C  2C63               	goto	l13913
 11584  2D3D  3A07               	xorlw	7	; case 109
 11585  2D3E  1903               	skipnz
 11586  2D3F  2C71               	goto	l13921
 11587  2D40  3A18               	xorlw	24	; case 117
 11588  2D41  1903               	skipnz
 11589  2D42  2CEF               	goto	l13945
 11590  2D43  3AF0               	xorlw	240	; case 133
 11591  2D44  1903               	skipnz
 11592  2D45  2CAF               	goto	l13933
 11593  2D46  3A15               	xorlw	21	; case 144
 11594  2D47  1903               	skipnz
 11595  2D48  2D17               	goto	l13953
 11596  2D49  3A38               	xorlw	56	; case 168
 11597  2D4A  1903               	skipnz
 11598  2D4B  2C84               	goto	l13925
 11599  2D4C  2D53               	goto	l685
 11600                           
 11601                           ;ui_key.c: 385: }
 11602                           
 11603                           ;ui_key.c: 284: break;
 11604  2D4D  0008               	return
 11605  2D4E                     l13963:	
 11606  2D4E  0878               	movf	_menu,w
 11607                           
 11608                           ; Switch size 1, requested type "space"
 11609                           ; Number of cases is 1, Range of values is 16 to 16
 11610                           ; switch strategies available:
 11611                           ; Name         Instructions Cycles
 11612                           ; simple_byte            4     3 (average)
 11613                           ; direct_byte           11     9 (fixed)
 11614                           ; jumptable            263     9 (fixed)
 11615                           ;	Chosen strategy is simple_byte
 11616  2D4F  3A10               	xorlw	16	; case 16
 11617  2D50  1903               	skipnz
 11618  2D51  2D21               	goto	l13959
 11619  2D52  2D53               	goto	l685
 11620  2D53                     l685:	
 11621  2D53  0008               	return
 11622  2D54                     __end_of_ui_key_process_enter:	
 11623                           
 11624                           	psect	text29
 11625  2009                     __ptext29:	
 11626 ;; *************** function _ui_key_waite_up *****************
 11627 ;; Defined at:
 11628 ;;		line 15 in file "src/api/ui_key.c"
 11629 ;; Parameters:    Size  Location     Type
 11630 ;;		None
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  now             2    2[BANK0 ] unsigned int 
 11633 ;; Return value:  Size  Location     Type
 11634 ;;                  2    0[BANK0 ] unsigned int 
 11635 ;; Registers used:
 11636 ;;		wreg, status,2, status,0, pclath, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11642 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 11643 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 11644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11645 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 11646 ;;Total ram usage:        4 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    4
 11649 ;; This function calls:
 11650 ;;		_get_globle_ticker
 11651 ;;		_key_scan_call
 11652 ;;		_set_globle_ticker
 11653 ;; This function is called by:
 11654 ;;		_ui_key_process_enter
 11655 ;;		_ui_key_process
 11656 ;; This function uses a non-reentrant model
 11657 ;;
 11658                           
 11659                           
 11660                           ;psect for function _ui_key_waite_up
 11661  2009                     _ui_key_waite_up:	
 11662  2009                     l13453:	
 11663                           ;incstack = 0
 11664                           ; Regs used in _ui_key_waite_up: [wreg+status,2+status,0+pclath+cstack]
 11665                           
 11666                           
 11667                           ;ui_key.c: 17: uint16_t now=0;
 11668  2009  0020               	movlb	0	; select bank0
 11669  200A  01A2               	clrf	ui_key_waite_up@now
 11670  200B  01A3               	clrf	ui_key_waite_up@now+1
 11671                           
 11672                           ;ui_key.c: 20: key_scan_call();
 11673  200C  21DF  31A0         	fcall	_key_scan_call
 11674                           
 11675                           ;ui_key.c: 21: if (KeyValue == 0)return 0;
 11676  200E  0021               	movlb	1	; select bank1
 11677  200F  0837               	movf	_KeyValue^(0+128),w
 11678  2010  1D03               	btfss	3,2
 11679  2011  2816               	goto	l13463
 11680  2012  0020               	movlb	0	; select bank0
 11681  2013  01A0               	clrf	?_ui_key_waite_up
 11682  2014  01A1               	clrf	?_ui_key_waite_up+1
 11683  2015  0008               	return
 11684  2016                     l13463:	
 11685                           
 11686                           ;ui_key.c: 22: set_globle_ticker(0);
 11687  2016  01F3               	clrf	set_globle_ticker@tk
 11688  2017  01F4               	clrf	set_globle_ticker@tk+1
 11689  2018  2210  31A0         	fcall	_set_globle_ticker
 11690  201A                     l609:	
 11691                           ;ui_key.c: 23: do {
 11692                           
 11693                           
 11694                           ;ui_key.c: 24: key_scan_call();
 11695  201A  21DF  31A0         	fcall	_key_scan_call
 11696                           
 11697                           ;ui_key.c: 25: now = get_globle_ticker();
 11698  201C  2202  31A0         	fcall	_get_globle_ticker
 11699  201E  0874               	movf	?_get_globle_ticker+1,w
 11700  201F  0020               	movlb	0	; select bank0
 11701  2020  00A3               	movwf	ui_key_waite_up@now+1
 11702  2021  0873               	movf	?_get_globle_ticker,w
 11703  2022  00A2               	movwf	ui_key_waite_up@now
 11704                           
 11705                           ;ui_key.c: 26: if (KeyValue == 0)break;
 11706  2023  0021               	movlb	1	; select bank1
 11707  2024  0837               	movf	_KeyValue^(0+128),w
 11708  2025  1903               	btfsc	3,2
 11709  2026  282F               	goto	l13475
 11710                           
 11711                           ;ui_key.c: 27: if (now > 2000)break;
 11712  2027  3007               	movlw	7
 11713  2028  0020               	movlb	0	; select bank0
 11714  2029  0223               	subwf	ui_key_waite_up@now+1,w
 11715  202A  30D1               	movlw	209
 11716  202B  1903               	skipnz
 11717  202C  0222               	subwf	ui_key_waite_up@now,w
 11718  202D  1C03               	skipc
 11719  202E  281A               	goto	l609
 11720  202F                     l13475:	
 11721                           ;ui_key.c: 28: } while (1);
 11722                           
 11723                           
 11724                           ;ui_key.c: 29: return (uint16_t) (now );
 11725  202F  0020               	movlb	0	; select bank0
 11726  2030  0823               	movf	ui_key_waite_up@now+1,w
 11727  2031  00A1               	movwf	?_ui_key_waite_up+1
 11728  2032  0822               	movf	ui_key_waite_up@now,w
 11729  2033  00A0               	movwf	?_ui_key_waite_up
 11730  2034  0008               	return
 11731  2035                     __end_of_ui_key_waite_up:	
 11732  2035                     __ptext4:	
 11733 ;; *************** function _ui_key_process *****************
 11734 ;; Defined at:
 11735 ;;		line 609 in file "src/api/ui_key.c"
 11736 ;; Parameters:    Size  Location     Type
 11737 ;;		None
 11738 ;; Auto vars:     Size  Location     Type
 11739 ;;		None
 11740 ;; Return value:  Size  Location     Type
 11741 ;;                  1    wreg      void 
 11742 ;; Registers used:
 11743 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11744 ;; Tracked objects:
 11745 ;;		On entry : 0/0
 11746 ;;		On exit  : 0/0
 11747 ;;		Unchanged: 0/0
 11748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11752 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11753 ;;Total ram usage:        1 bytes
 11754 ;; Hardware stack levels used:    1
 11755 ;; Hardware stack levels required when called:   10
 11756 ;; This function calls:
 11757 ;;		_key_scan_call
 11758 ;;		_ui_disp_menu
 11759 ;;		_ui_key_process_cancel
 11760 ;;		_ui_key_process_down
 11761 ;;		_ui_key_process_enter
 11762 ;;		_ui_key_process_up_down
 11763 ;;		_ui_key_set_process
 11764 ;;		_ui_key_waite_up
 11765 ;; This function is called by:
 11766 ;;		_main
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           
 11771                           ;psect for function _ui_key_process
 11772  2035                     _ui_key_process:	
 11773                           
 11774                           ;ui_key.c: 610: key_scan_call();
 11775                           
 11776                           ;incstack = 0
 11777                           ; Regs used in _ui_key_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11778  2035  21DF  31A0         	fcall	_key_scan_call
 11779                           
 11780                           ;ui_key.c: 611: if(KeyValue)noKeyEventTimeOut=30;
 11781  2037  0021               	movlb	1	; select bank1
 11782  2038  0837               	movf	_KeyValue^(0+128),w
 11783  2039  1903               	btfsc	3,2
 11784  203A  2875               	goto	l15011
 11785  203B  301E               	movlw	30
 11786  203C  0020               	movlb	0	; select bank0
 11787  203D  00DB               	movwf	??_ui_key_process
 11788  203E  0021               	movlb	1	; select bank1
 11789  203F  00EF               	movwf	_noKeyEventTimeOut^(0+128)
 11790                           
 11791                           ;ui_key.c: 612: switch (KeyValue) {
 11792  2040  2875               	goto	l15011
 11793  2041                     l14987:	
 11794                           ;ui_key.c: 613: case (1<<2): ui_key_process_up_down(1);
 11795                           
 11796  2041  3001               	movlw	1
 11797  2042  2087  31A0         	fcall	_ui_key_process_up_down
 11798                           
 11799                           ;ui_key.c: 614: break;
 11800  2044  2880               	goto	l15013
 11801  2045                     l14989:	
 11802                           ;ui_key.c: 615: case (1<<1):
 11803                           
 11804                           
 11805                           ;ui_key.c: 616: if(!ui_key_process_down())
 11806  2045  2793  31A0         	fcall	_ui_key_process_down
 11807  2047  3A00               	xorlw	0
 11808  2048  1D03               	skipz
 11809  2049  2880               	goto	l15013
 11810                           
 11811                           ;ui_key.c: 617: ui_key_process_up_down(0);
 11812  204A  3000               	movlw	0
 11813  204B  2087  31A0         	fcall	_ui_key_process_up_down
 11814                           
 11815                           ;ui_key.c: 618: break;
 11816  204D  2880               	goto	l15013
 11817  204E                     l14993:	
 11818                           ;ui_key.c: 619: case (1<<0):
 11819                           
 11820                           
 11821                           ;ui_key.c: 620: __t16=ui_key_waite_up();
 11822  204E  2009  31A0         	fcall	_ui_key_waite_up
 11823  2050  0020               	movlb	0	; select bank0
 11824  2051  0821               	movf	?_ui_key_waite_up+1,w
 11825  2052  00FA               	movwf	___t16+1
 11826  2053  0820               	movf	?_ui_key_waite_up,w
 11827  2054  00F9               	movwf	___t16
 11828                           
 11829                           ;ui_key.c: 621: if(__t16>=2000){
 11830  2055  3007               	movlw	7
 11831  2056  027A               	subwf	___t16+1,w
 11832  2057  30D0               	movlw	208
 11833  2058  1903               	skipnz
 11834  2059  0279               	subwf	___t16,w
 11835  205A  1C03               	skipc
 11836  205B  286C               	goto	l15005
 11837                           
 11838                           ;ui_key.c: 622: if(KeyValue==((1<<0)+(1<<2))){
 11839  205C  3005               	movlw	5
 11840  205D  0021               	movlb	1	; select bank1
 11841  205E  0637               	xorwf	_KeyValue^(0+128),w
 11842  205F  1D03               	btfss	3,2
 11843  2060  2865               	goto	l15001
 11844                           
 11845                           ;ui_key.c: 623: ui_key_process_enter();
 11846  2061  31AC  2462  31A0   	fcall	_ui_key_process_enter
 11847                           
 11848                           ;ui_key.c: 624: }else if(KeyValue==((1<<0))){
 11849  2064  286F               	goto	l15007
 11850  2065                     l15001:	
 11851  2065  0021               	movlb	1	; select bank1
 11852  2066  0B37               	decfsz	_KeyValue^(0+128),w
 11853  2067  286F               	goto	l15007
 11854                           
 11855                           ;ui_key.c: 625: ui_key_set_process();
 11856  2068  31AE  2658  31A0   	fcall	_ui_key_set_process
 11857                           
 11858                           ;ui_key.c: 627: }
 11859                           ;ui_key.c: 629: }else{
 11860  206B  286F               	goto	l15007
 11861  206C                     l15005:	
 11862                           
 11863                           ;ui_key.c: 630: ui_key_process_cancel();
 11864  206C  31AA  22F4  31A0   	fcall	_ui_key_process_cancel
 11865  206F                     l15007:	
 11866                           
 11867                           ;ui_key.c: 632: }
 11868                           ;ui_key.c: 633: KeyValue=0x08;
 11869  206F  3008               	movlw	8
 11870  2070  0020               	movlb	0	; select bank0
 11871  2071  00DB               	movwf	??_ui_key_process
 11872  2072  0021               	movlb	1	; select bank1
 11873  2073  00B7               	movwf	_KeyValue^(0+128)
 11874                           
 11875                           ;ui_key.c: 636: }
 11876                           
 11877                           ;ui_key.c: 635: default:break;
 11878                           
 11879                           ;ui_key.c: 634: break;
 11880  2074  2880               	goto	l15013
 11881  2075                     l15011:	
 11882  2075  0837               	movf	_KeyValue^(0+128),w
 11883                           
 11884                           ; Switch size 1, requested type "space"
 11885                           ; Number of cases is 3, Range of values is 1 to 4
 11886                           ; switch strategies available:
 11887                           ; Name         Instructions Cycles
 11888                           ; simple_byte           10     6 (average)
 11889                           ; direct_byte           17     9 (fixed)
 11890                           ; jumptable            263     9 (fixed)
 11891                           ;	Chosen strategy is simple_byte
 11892  2076  3A01               	xorlw	1	; case 1
 11893  2077  1903               	skipnz
 11894  2078  284E               	goto	l14993
 11895  2079  3A03               	xorlw	3	; case 2
 11896  207A  1903               	skipnz
 11897  207B  2845               	goto	l14989
 11898  207C  3A06               	xorlw	6	; case 4
 11899  207D  1903               	skipnz
 11900  207E  2841               	goto	l14987
 11901  207F  2880               	goto	l15013
 11902  2080                     l15013:	
 11903                           
 11904                           ;ui_key.c: 638: if (KeyValue){
 11905  2080  0021               	movlb	1	; select bank1
 11906  2081  0837               	movf	_KeyValue^(0+128),w
 11907  2082  1903               	btfsc	3,2
 11908  2083  0008               	return
 11909                           
 11910                           ;ui_key.c: 639: ui_disp_menu();
 11911  2084  221A  31A0         	fcall	_ui_disp_menu
 11912                           
 11913                           ;ui_key.c: 640: ui_key_waite_up();
 11914  2086  2809               	ljmp	l13453
 11915  2087                     __end_of_ui_key_process:	
 11916  2087                     __ptext6:	
 11917 ;; *************** function _ui_key_process_up_down *****************
 11918 ;; Defined at:
 11919 ;;		line 116 in file "src/api/ui_key.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  up              1    wreg     unsigned char 
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;  up              1   58[BANK0 ] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  1    wreg      void 
 11926 ;; Registers used:
 11927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 11934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11935 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 11936 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 11937 ;;Total ram usage:        2 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    9
 11940 ;; This function calls:
 11941 ;;		_key_process_up_down_variable_speed_ex
 11942 ;;		_ui_key_process_up_down_main
 11943 ;; This function is called by:
 11944 ;;		_ui_key_process
 11945 ;; This function uses a non-reentrant model
 11946 ;;
 11947                           
 11948                           
 11949                           ;psect for function _ui_key_process_up_down
 11950  2087                     _ui_key_process_up_down:	
 11951                           
 11952                           ;incstack = 0
 11953                           ; Regs used in _ui_key_process_up_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11954                           ;ui_key_process_up_down@up stored from wreg
 11955  2087  0020               	movlb	0	; select bank0
 11956  2088  00DA               	movwf	ui_key_process_up_down@up
 11957                           
 11958                           ;ui_key.c: 117: if(menu<3){
 11959  2089  3003               	movlw	3
 11960  208A  0278               	subwf	_menu,w
 11961  208B  1803               	skipnc
 11962  208C  28FD               	goto	l13909
 11963                           
 11964                           ;ui_key.c: 118: ui_key_process_up_down_main(up);
 11965  208D  085A               	movf	ui_key_process_up_down@up,w
 11966  208E  2FE5               	ljmp	_ui_key_process_up_down_main
 11967  208F                     l13889:	
 11968                           ;ui_key.c: 123: case 0x10:
 11969                           
 11970                           ;ui_key.c: 120: }
 11971                           ;ui_key.c: 121: switch(menu){
 11972                           
 11973                           ;ui_key.c: 119: return;
 11974                           
 11975                           
 11976                           ;ui_key.c: 124: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 200, up);
 11977  208F  0020               	movlb	0	; select bank0
 11978  2090  30C8               	movlw	200
 11979  2091  01C9               	clrf	key_process_up_down_variable_speed_ex@min
 11980  2092  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 11981  2093  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 11982  2094  01CC               	clrf	key_process_up_down_variable_speed_ex@max+1
 11983  2095  085A               	movf	ui_key_process_up_down@up,w
 11984  2096  00D9               	movwf	??_ui_key_process_up_down
 11985  2097  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 11986  2098  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 11987  2099  291B               	ljmp	_key_process_up_down_variable_speed_ex
 11988  209A                     l13891:	
 11989                           ;ui_key.c: 126: case 0x40:
 11990                           
 11991                           ;ui_key.c: 125: break;
 11992                           
 11993                           
 11994                           ;ui_key.c: 127: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,500, 1555, up);
 11995  209A  30F4               	movlw	244
 11996  209B  0020               	movlb	0	; select bank0
 11997  209C  00C9               	movwf	key_process_up_down_variable_speed_ex@min
 11998  209D  3001               	movlw	1
 11999  209E  00CA               	movwf	key_process_up_down_variable_speed_ex@min+1
 12000  209F  3013               	movlw	19
 12001  20A0  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12002  20A1  3006               	movlw	6
 12003  20A2  00CC               	movwf	key_process_up_down_variable_speed_ex@max+1
 12004  20A3  085A               	movf	ui_key_process_up_down@up,w
 12005  20A4  00D9               	movwf	??_ui_key_process_up_down
 12006  20A5  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12007  20A6  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12008  20A7  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12009  20A8                     l13893:	
 12010                           ;ui_key.c: 129: case 0x50:
 12011                           
 12012                           ;ui_key.c: 128: break;
 12013                           
 12014                           
 12015                           ;ui_key.c: 130: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 3000, up);
 12016  20A8  0020               	movlb	0	; select bank0
 12017  20A9  30B8               	movlw	184
 12018  20AA  01C9               	clrf	key_process_up_down_variable_speed_ex@min
 12019  20AB  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 12020  20AC  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12021  20AD  300B               	movlw	11
 12022  20AE  00CC               	movwf	key_process_up_down_variable_speed_ex@max+1
 12023  20AF  085A               	movf	ui_key_process_up_down@up,w
 12024  20B0  00D9               	movwf	??_ui_key_process_up_down
 12025  20B1  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12026  20B2  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12027  20B3  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12028  20B4                     l13895:	
 12029                           ;ui_key.c: 132: case 0xa0:
 12030                           
 12031                           ;ui_key.c: 131: break;
 12032                           
 12033                           
 12034                           ;ui_key.c: 133: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 255, up);
 12035  20B4  0020               	movlb	0	; select bank0
 12036  20B5  30FF               	movlw	255
 12037  20B6  01C9               	clrf	key_process_up_down_variable_speed_ex@min
 12038  20B7  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 12039  20B8  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12040  20B9  01CC               	clrf	key_process_up_down_variable_speed_ex@max+1
 12041  20BA  085A               	movf	ui_key_process_up_down@up,w
 12042  20BB  00D9               	movwf	??_ui_key_process_up_down
 12043  20BC  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12044  20BD  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12045  20BE  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12046  20BF                     l13897:	
 12047                           ;ui_key.c: 135: case 0x70:
 12048                           
 12049                           ;ui_key.c: 134: break;
 12050                           
 12051                           
 12052                           ;ui_key.c: 136: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 20, up);
 12053  20BF  0020               	movlb	0	; select bank0
 12054  20C0  3014               	movlw	20
 12055  20C1  01C9               	clrf	key_process_up_down_variable_speed_ex@min
 12056  20C2  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 12057  20C3  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12058  20C4  01CC               	clrf	key_process_up_down_variable_speed_ex@max+1
 12059  20C5  085A               	movf	ui_key_process_up_down@up,w
 12060  20C6  00D9               	movwf	??_ui_key_process_up_down
 12061  20C7  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12062  20C8  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12063  20C9  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12064  20CA                     l13899:	
 12065                           ;ui_key.c: 138: case 0x80:
 12066                           
 12067                           ;ui_key.c: 137: break;
 12068                           
 12069                           
 12070                           ;ui_key.c: 139: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,10, 1000, up);
 12071  20CA  300A               	movlw	10
 12072  20CB  0020               	movlb	0	; select bank0
 12073  20CC  00C9               	movwf	key_process_up_down_variable_speed_ex@min
 12074  20CD  30E8               	movlw	232
 12075  20CE  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 12076  20CF  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12077  20D0  3003               	movlw	3
 12078  20D1  00CC               	movwf	key_process_up_down_variable_speed_ex@max+1
 12079  20D2  085A               	movf	ui_key_process_up_down@up,w
 12080  20D3  00D9               	movwf	??_ui_key_process_up_down
 12081  20D4  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12082  20D5  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12083  20D6  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12084  20D7                     l13901:	
 12085                           ;ui_key.c: 141: case 0x90:
 12086                           
 12087                           ;ui_key.c: 140: break;
 12088                           
 12089                           
 12090                           ;ui_key.c: 142: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,0, 1000, up);
 12091  20D7  0020               	movlb	0	; select bank0
 12092  20D8  30E8               	movlw	232
 12093  20D9  01C9               	clrf	key_process_up_down_variable_speed_ex@min
 12094  20DA  01CA               	clrf	key_process_up_down_variable_speed_ex@min+1
 12095  20DB  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12096  20DC  3003               	movlw	3
 12097  20DD  00CC               	movwf	key_process_up_down_variable_speed_ex@max+1
 12098  20DE  085A               	movf	ui_key_process_up_down@up,w
 12099  20DF  00D9               	movwf	??_ui_key_process_up_down
 12100  20E0  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12101  20E1  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12102  20E2  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12103  20E3                     l13903:	
 12104                           ;ui_key.c: 144: case 0xb0:
 12105                           
 12106                           ;ui_key.c: 143: break;
 12107                           
 12108                           
 12109                           ;ui_key.c: 145: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 12110  20E3  309C               	movlw	156
 12111  20E4  0020               	movlb	0	; select bank0
 12112  20E5  00C9               	movwf	key_process_up_down_variable_speed_ex@min
 12113  20E6  30FF               	movlw	255
 12114  20E7  00CA               	movwf	key_process_up_down_variable_speed_ex@min+1
 12115  20E8  3064               	movlw	100
 12116  20E9  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12117  20EA  01CC               	clrf	key_process_up_down_variable_speed_ex@max+1
 12118  20EB  085A               	movf	ui_key_process_up_down@up,w
 12119  20EC  00D9               	movwf	??_ui_key_process_up_down
 12120  20ED  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12121  20EE  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12122  20EF  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12123  20F0                     l13905:	
 12124                           ;ui_key.c: 147: case 0xb1:
 12125                           
 12126                           ;ui_key.c: 146: break;
 12127                           
 12128                           
 12129                           ;ui_key.c: 148: key_process_up_down_variable_speed_ex((int16_t*)uiAdjbuf,-100, 100, up);
 12130  20F0  309C               	movlw	156
 12131  20F1  0020               	movlb	0	; select bank0
 12132  20F2  00C9               	movwf	key_process_up_down_variable_speed_ex@min
 12133  20F3  30FF               	movlw	255
 12134  20F4  00CA               	movwf	key_process_up_down_variable_speed_ex@min+1
 12135  20F5  3064               	movlw	100
 12136  20F6  00CB               	movwf	key_process_up_down_variable_speed_ex@max
 12137  20F7  01CC               	clrf	key_process_up_down_variable_speed_ex@max+1
 12138  20F8  085A               	movf	ui_key_process_up_down@up,w
 12139  20F9  00D9               	movwf	??_ui_key_process_up_down
 12140  20FA  00CD               	movwf	key_process_up_down_variable_speed_ex@up
 12141  20FB  3065               	movlw	(low (_uiAdjbuf| (0+256)))& (0+255)
 12142  20FC  291B               	ljmp	_key_process_up_down_variable_speed_ex
 12143  20FD                     l13909:	
 12144                           ;ui_key.c: 213: }
 12145                           
 12146                           ;ui_key.c: 149: break;
 12147                           
 12148  20FD  0878               	movf	_menu,w
 12149                           
 12150                           ; Switch size 1, requested type "space"
 12151                           ; Number of cases is 9, Range of values is 16 to 177
 12152                           ; switch strategies available:
 12153                           ; Name         Instructions Cycles
 12154                           ; simple_byte           28    15 (average)
 12155                           ; jumptable            263     9 (fixed)
 12156                           ;	Chosen strategy is simple_byte
 12157  20FE  3A10               	xorlw	16	; case 16
 12158  20FF  1903               	skipnz
 12159  2100  288F               	goto	l13889
 12160  2101  3A50               	xorlw	80	; case 64
 12161  2102  1903               	skipnz
 12162  2103  289A               	goto	l13891
 12163  2104  3A10               	xorlw	16	; case 80
 12164  2105  1903               	skipnz
 12165  2106  28A8               	goto	l13893
 12166  2107  3A20               	xorlw	32	; case 112
 12167  2108  1903               	skipnz
 12168  2109  28BF               	goto	l13897
 12169  210A  3AF0               	xorlw	240	; case 128
 12170  210B  1903               	skipnz
 12171  210C  28CA               	goto	l13899
 12172  210D  3A10               	xorlw	16	; case 144
 12173  210E  1903               	skipnz
 12174  210F  28D7               	goto	l13901
 12175  2110  3A30               	xorlw	48	; case 160
 12176  2111  1903               	skipnz
 12177  2112  28B4               	goto	l13895
 12178  2113  3A10               	xorlw	16	; case 176
 12179  2114  1903               	skipnz
 12180  2115  28E3               	goto	l13903
 12181  2116  3A01               	xorlw	1	; case 177
 12182  2117  1903               	skipnz
 12183  2118  28F0               	goto	l13905
 12184  2119  291A               	goto	l653
 12185  211A                     l653:	
 12186  211A  0008               	return
 12187  211B                     __end_of_ui_key_process_up_down:	
 12188  211B                     __ptext8:	
 12189 ;; *************** function _key_process_up_down_variable_speed_ex *****************
 12190 ;; Defined at:
 12191 ;;		line 31 in file "src/api/ui_key.c"
 12192 ;; Parameters:    Size  Location     Type
 12193 ;;  val             1    wreg     PTR int 
 12194 ;;		 -> uiAdjbuf(8), 
 12195 ;;  min             2   41[BANK0 ] int 
 12196 ;;  max             2   43[BANK0 ] int 
 12197 ;;  up              1   45[BANK0 ] unsigned char 
 12198 ;; Auto vars:     Size  Location     Type
 12199 ;;  val             1   56[BANK0 ] PTR int 
 12200 ;;		 -> uiAdjbuf(8), 
 12201 ;;  t32             2   54[BANK0 ] unsigned int 
 12202 ;;  speed           2   52[BANK0 ] unsigned int 
 12203 ;;  change          1   51[BANK0 ] unsigned char 
 12204 ;;  key             1   50[BANK0 ] unsigned char 
 12205 ;; Return value:  Size  Location     Type
 12206 ;;                  1    wreg      void 
 12207 ;; Registers used:
 12208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12209 ;; Tracked objects:
 12210 ;;		On entry : 0/0
 12211 ;;		On exit  : 0/0
 12212 ;;		Unchanged: 0/0
 12213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12214 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 12215 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 12216 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 12217 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0
 12218 ;;Total ram usage:       16 bytes
 12219 ;; Hardware stack levels used:    1
 12220 ;; Hardware stack levels required when called:    8
 12221 ;; This function calls:
 12222 ;;		_get_globle_ticker
 12223 ;;		_key_scan_call
 12224 ;;		_set_globle_ticker
 12225 ;;		_ui_disp_menu
 12226 ;; This function is called by:
 12227 ;;		_ui_key_process_up_down
 12228 ;; This function uses a non-reentrant model
 12229 ;;
 12230                           
 12231                           
 12232                           ;psect for function _key_process_up_down_variable_speed_ex
 12233  211B                     _key_process_up_down_variable_speed_ex:	
 12234                           
 12235                           ;incstack = 0
 12236                           ; Regs used in _key_process_up_down_variable_speed_ex: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 12237                           ;key_process_up_down_variable_speed_ex@val stored from wreg
 12238  211B  0020               	movlb	0	; select bank0
 12239  211C  00D8               	movwf	key_process_up_down_variable_speed_ex@val
 12240                           
 12241                           ;ui_key.c: 33: bool change = 1;
 12242  211D  01D3               	clrf	key_process_up_down_variable_speed_ex@change
 12243  211E  0AD3               	incf	key_process_up_down_variable_speed_ex@change,f
 12244                           
 12245                           ;ui_key.c: 34: uint16_t speed = 0, t32;
 12246  211F  01D4               	clrf	key_process_up_down_variable_speed_ex@speed
 12247  2120  01D5               	clrf	key_process_up_down_variable_speed_ex@speed+1
 12248                           
 12249                           ;ui_key.c: 35: uint8_t key = KeyValue;
 12250  2121  0021               	movlb	1	; select bank1
 12251  2122  0837               	movf	_KeyValue^(0+128),w
 12252  2123  0020               	movlb	0	; select bank0
 12253  2124  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12254  2125  00D2               	movwf	key_process_up_down_variable_speed_ex@key
 12255                           
 12256                           ;ui_key.c: 36: if(min>=max)return;
 12257  2126  084A               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12258  2127  3A80               	xorlw	128
 12259  2128  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12260  2129  084C               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12261  212A  3A80               	xorlw	128
 12262  212B  024E               	subwf	??_key_process_up_down_variable_speed_ex,w
 12263  212C  1D03               	skipz
 12264  212D  2930               	goto	u12145
 12265  212E  084B               	movf	key_process_up_down_variable_speed_ex@max,w
 12266  212F  0249               	subwf	key_process_up_down_variable_speed_ex@min,w
 12267  2130                     u12145:	
 12268  2130  1803               	btfsc	3,0
 12269  2131  0008               	return
 12270                           
 12271                           ;ui_key.c: 37: set_globle_ticker(0);
 12272  2132  01F3               	clrf	set_globle_ticker@tk
 12273  2133  01F4               	clrf	set_globle_ticker@tk+1
 12274  2134  2210  31A0         	fcall	_set_globle_ticker
 12275  2136                     l13491:	
 12276                           ;ui_key.c: 38: do {
 12277                           
 12278                           
 12279                           ;ui_key.c: 39: if (change == 1) {
 12280  2136  0020               	movlb	0	; select bank0
 12281  2137  0B53               	decfsz	key_process_up_down_variable_speed_ex@change,w
 12282  2138  298D               	goto	l13511
 12283                           
 12284                           ;ui_key.c: 40: change = 0;
 12285  2139  01D3               	clrf	key_process_up_down_variable_speed_ex@change
 12286                           
 12287                           ;ui_key.c: 41: if (up) {
 12288  213A  084D               	movf	key_process_up_down_variable_speed_ex@up,w
 12289  213B  1903               	btfsc	3,2
 12290  213C  2963               	goto	l13503
 12291                           
 12292                           ;ui_key.c: 42: (*val) += 1;
 12293  213D  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12294  213E  0086               	movwf	6
 12295  213F  3001               	movlw	1	; select bank2/3
 12296  2140  0087               	movwf	7
 12297  2141  0781               	addwf	1,f
 12298  2142  3141               	addfsr 1,1
 12299  2143  1803               	skipnc
 12300  2144  0A81               	incf	1,f
 12301                           
 12302                           ;ui_key.c: 43: if (*val > max)*val = min;
 12303  2145  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12304  2146  0086               	movwf	6
 12305  2147  3001               	movlw	1	; select bank2/3
 12306  2148  0087               	movwf	7
 12307  2149  3F40               	moviw [0]fsr1
 12308  214A  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12309  214B  3F41               	moviw [1]fsr1
 12310  214C  00CF               	movwf	??_key_process_up_down_variable_speed_ex+1
 12311  214D  084C               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12312  214E  3A80               	xorlw	128
 12313  214F  00D0               	movwf	??_key_process_up_down_variable_speed_ex+2
 12314  2150  084F               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12315  2151  3A80               	xorlw	128
 12316  2152  0250               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12317  2153  1D03               	skipz
 12318  2154  2957               	goto	u12175
 12319  2155  084E               	movf	??_key_process_up_down_variable_speed_ex,w
 12320  2156  024B               	subwf	key_process_up_down_variable_speed_ex@max,w
 12321  2157                     u12175:	
 12322  2157  1803               	skipnc
 12323  2158  298B               	goto	l13509
 12324  2159  0020               	movlb	0	; select bank0
 12325  215A  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12326  215B  0086               	movwf	6
 12327  215C  3001               	movlw	1	; select bank2/3
 12328  215D  0087               	movwf	7
 12329  215E  0849               	movf	key_process_up_down_variable_speed_ex@min,w
 12330  215F  3FC0               	movwi [0]fsr1
 12331  2160  084A               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12332  2161  3FC1               	movwi [1]fsr1
 12333                           
 12334                           ;ui_key.c: 44: } else {
 12335  2162  298B               	goto	l13509
 12336  2163                     l13503:	
 12337                           
 12338                           ;ui_key.c: 45: if (*val <= min)*val = max;
 12339  2163  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12340  2164  0086               	movwf	6
 12341  2165  3001               	movlw	1	; select bank2/3
 12342  2166  0087               	movwf	7
 12343  2167  3F40               	moviw [0]fsr1
 12344  2168  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12345  2169  3F41               	moviw [1]fsr1
 12346  216A  00CF               	movwf	??_key_process_up_down_variable_speed_ex+1
 12347  216B  084A               	movf	key_process_up_down_variable_speed_ex@min+1,w
 12348  216C  3A80               	xorlw	128
 12349  216D  00D0               	movwf	??_key_process_up_down_variable_speed_ex+2
 12350  216E  084F               	movf	??_key_process_up_down_variable_speed_ex+1,w
 12351  216F  3A80               	xorlw	128
 12352  2170  0250               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12353  2171  1D03               	skipz
 12354  2172  2975               	goto	u12185
 12355  2173  084E               	movf	??_key_process_up_down_variable_speed_ex,w
 12356  2174  0249               	subwf	key_process_up_down_variable_speed_ex@min,w
 12357  2175                     u12185:	
 12358  2175  1C03               	skipc
 12359  2176  2981               	goto	l13507
 12360  2177  0020               	movlb	0	; select bank0
 12361  2178  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12362  2179  0086               	movwf	6
 12363  217A  3001               	movlw	1	; select bank2/3
 12364  217B  0087               	movwf	7
 12365  217C  084B               	movf	key_process_up_down_variable_speed_ex@max,w
 12366  217D  3FC0               	movwi [0]fsr1
 12367  217E  084C               	movf	key_process_up_down_variable_speed_ex@max+1,w
 12368  217F  3FC1               	movwi [1]fsr1
 12369  2180  298B               	goto	l13509
 12370  2181                     l13507:	
 12371                           
 12372                           ;ui_key.c: 46: else {
 12373                           ;ui_key.c: 47: (*val) -= 1;
 12374  2181  0020               	movlb	0	; select bank0
 12375  2182  0858               	movf	key_process_up_down_variable_speed_ex@val,w
 12376  2183  0086               	movwf	6
 12377  2184  3001               	movlw	1	; select bank2/3
 12378  2185  0087               	movwf	7
 12379  2186  30FF               	movlw	255
 12380  2187  0781               	addwf	1,f
 12381  2188  3141               	addfsr 1,1
 12382  2189  3D81               	addwfc	1,f
 12383  218A  317F               	addfsr 1,-1
 12384  218B                     l13509:	
 12385                           
 12386                           ;ui_key.c: 48: }
 12387                           ;ui_key.c: 49: }
 12388                           ;ui_key.c: 50: ui_disp_menu();
 12389  218B  221A  31A0         	fcall	_ui_disp_menu
 12390  218D                     l13511:	
 12391                           
 12392                           ;ui_key.c: 51: }
 12393                           ;ui_key.c: 52: key_scan_call();
 12394  218D  21DF  31A0         	fcall	_key_scan_call
 12395                           
 12396                           ;ui_key.c: 53: if (key != KeyValue)break;
 12397  218F  0020               	movlb	0	; select bank0
 12398  2190  0852               	movf	key_process_up_down_variable_speed_ex@key,w
 12399  2191  0021               	movlb	1	; select bank1
 12400  2192  0637               	xorwf	_KeyValue^(0+128),w
 12401  2193  1D03               	btfss	3,2
 12402  2194  0008               	return
 12403                           
 12404                           ;ui_key.c: 54: t32 = get_globle_ticker();
 12405  2195  2202  31A0         	fcall	_get_globle_ticker
 12406  2197  0874               	movf	?_get_globle_ticker+1,w
 12407  2198  0020               	movlb	0	; select bank0
 12408  2199  00D7               	movwf	key_process_up_down_variable_speed_ex@t32+1
 12409  219A  0873               	movf	?_get_globle_ticker,w
 12410  219B  00D6               	movwf	key_process_up_down_variable_speed_ex@t32
 12411                           
 12412                           ;ui_key.c: 55: if (t32 <= 1000) {
 12413  219C  3003               	movlw	3
 12414  219D  0257               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12415  219E  30E9               	movlw	233
 12416  219F  1903               	skipnz
 12417  21A0  0256               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12418  21A1  1803               	skipnc
 12419  21A2  29B4               	goto	l13527
 12420                           
 12421                           ;ui_key.c: 56: if (t32 - speed >= 200) {
 12422  21A3  0954               	comf	key_process_up_down_variable_speed_ex@speed,w
 12423  21A4  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12424  21A5  0955               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12425  21A6  00CF               	movwf	??_key_process_up_down_variable_speed_ex+1
 12426  21A7  0ACE               	incf	??_key_process_up_down_variable_speed_ex,f
 12427  21A8  1903               	skipnz
 12428  21A9  0ACF               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12429  21AA  0856               	movf	key_process_up_down_variable_speed_ex@t32,w
 12430  21AB  074E               	addwf	??_key_process_up_down_variable_speed_ex,w
 12431  21AC  00D0               	movwf	??_key_process_up_down_variable_speed_ex+2
 12432  21AD  0857               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12433  21AE  3D4F               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12434  21AF  00D1               	movwf	??_key_process_up_down_variable_speed_ex+3
 12435  21B0  3000               	movlw	0
 12436  21B1  0251               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12437  21B2  30C8               	movlw	200
 12438  21B3  29D4               	goto	L1
 12439  21B4                     l13527:	
 12440                           ;ui_key.c: 59: }
 12441                           ;ui_key.c: 60: } else if (t32 <= 2000) {
 12442                           
 12443                           ;ui_key.c: 58: change = 1;
 12444                           
 12445                           ;ui_key.c: 57: speed = t32;
 12446                           
 12447  21B4  3007               	movlw	7
 12448  21B5  0257               	subwf	key_process_up_down_variable_speed_ex@t32+1,w
 12449  21B6  30D1               	movlw	209
 12450  21B7  1903               	skipnz
 12451  21B8  0256               	subwf	key_process_up_down_variable_speed_ex@t32,w
 12452                           
 12453                           ;ui_key.c: 61: if (t32 - speed >= 100) {
 12454  21B9  0954               	comf	key_process_up_down_variable_speed_ex@speed,w
 12455  21BA  00CE               	movwf	??_key_process_up_down_variable_speed_ex
 12456  21BB  0955               	comf	key_process_up_down_variable_speed_ex@speed+1,w
 12457  21BC  00CF               	movwf	??_key_process_up_down_variable_speed_ex+1
 12458  21BD  0ACE               	incf	??_key_process_up_down_variable_speed_ex,f
 12459  21BE  1903               	skipnz
 12460  21BF  0ACF               	incf	??_key_process_up_down_variable_speed_ex+1,f
 12461  21C0  0856               	movf	key_process_up_down_variable_speed_ex@t32,w
 12462  21C1  1803               	skipnc
 12463  21C2  29CC               	goto	L2
 12464  21C3  074E               	addwf	??_key_process_up_down_variable_speed_ex,w
 12465  21C4  00D0               	movwf	??_key_process_up_down_variable_speed_ex+2
 12466  21C5  0857               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12467  21C6  3D4F               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12468  21C7  00D1               	movwf	??_key_process_up_down_variable_speed_ex+3
 12469  21C8  3000               	movlw	0
 12470  21C9  0251               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12471  21CA  3064               	movlw	100
 12472  21CB  29D4               	goto	L1
 12473  21CC                     L2:	
 12474                           ;ui_key.c: 66: if (t32 - speed >= 10) {
 12475                           
 12476                           ;ui_key.c: 64: }
 12477                           ;ui_key.c: 65: } else {
 12478                           
 12479                           ;ui_key.c: 63: change = 1;
 12480                           
 12481                           ;ui_key.c: 62: speed = t32;
 12482                           
 12483  21CC  074E               	addwf	??_key_process_up_down_variable_speed_ex,w
 12484  21CD  00D0               	movwf	??_key_process_up_down_variable_speed_ex+2
 12485  21CE  0857               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12486  21CF  3D4F               	addwfc	??_key_process_up_down_variable_speed_ex+1,w
 12487  21D0  00D1               	movwf	??_key_process_up_down_variable_speed_ex+3
 12488  21D1  3000               	movlw	0
 12489  21D2  0251               	subwf	??_key_process_up_down_variable_speed_ex+3,w
 12490  21D3  300A               	movlw	10
 12491  21D4                     L1:	
 12492  21D4  1903               	skipnz
 12493  21D5  0250               	subwf	??_key_process_up_down_variable_speed_ex+2,w
 12494  21D6  1C03               	skipc
 12495  21D7  2936               	goto	l13491
 12496                           
 12497                           ;ui_key.c: 67: speed = t32;
 12498  21D8  0857               	movf	key_process_up_down_variable_speed_ex@t32+1,w
 12499  21D9  00D5               	movwf	key_process_up_down_variable_speed_ex@speed+1
 12500  21DA  0856               	movf	key_process_up_down_variable_speed_ex@t32,w
 12501  21DB  00D4               	movwf	key_process_up_down_variable_speed_ex@speed
 12502                           
 12503                           ;ui_key.c: 68: change = 1;
 12504  21DC  01D3               	clrf	key_process_up_down_variable_speed_ex@change
 12505  21DD  0AD3               	incf	key_process_up_down_variable_speed_ex@change,f
 12506                           
 12507                           ;ui_key.c: 69: }
 12508                           ;ui_key.c: 70: }
 12509                           ;ui_key.c: 71: } while (1);
 12510  21DE  2936               	goto	l13491
 12511  21DF                     __end_of_key_process_up_down_variable_speed_ex:	
 12512  21DF                     __ptext31:	
 12513 ;; *************** function _key_scan_call *****************
 12514 ;; Defined at:
 12515 ;;		line 7 in file "src/driver/key.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;		None
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;		None
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      void 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 0/0
 12526 ;;		On exit  : 0/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12531 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12532 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12533 ;;Total ram usage:        1 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    3
 12536 ;; This function calls:
 12537 ;;		_delay
 12538 ;; This function is called by:
 12539 ;;		_ui_key_waite_up
 12540 ;;		_key_process_up_down_variable_speed_ex
 12541 ;;		_ui_key_process
 12542 ;; This function uses a non-reentrant model
 12543 ;;
 12544                           
 12545                           
 12546                           ;psect for function _key_scan_call
 12547  21DF                     _key_scan_call:	
 12548                           
 12549                           ;key.c: 9: KeyValue=0;
 12550                           
 12551                           ;incstack = 0
 12552                           ; Regs used in _key_scan_call: [wreg+status,2+status,0+pclath+cstack]
 12553  21DF  0021               	movlb	1	; select bank1
 12554  21E0  300E               	movlw	14
 12555  21E1  01B7               	clrf	_KeyValue^(0+128)
 12556                           
 12557                           ;key.c: 12: if((PORTB & 0x0e) != 0x0e){
 12558  21E2  0020               	movlb	0	; select bank0
 12559  21E3  050D               	andwf	13,w	;volatile
 12560  21E4  00F5               	movwf	??_key_scan_call
 12561  21E5  3A0E               	xorlw	14
 12562  21E6  1903               	btfsc	3,2
 12563  21E7  0008               	return
 12564                           
 12565                           ;key.c: 15: delay(1847);;
 12566  21E8  3037               	movlw	55
 12567  21E9  00F3               	movwf	delay@t
 12568  21EA  3007               	movlw	7
 12569  21EB  00F4               	movwf	delay@t+1
 12570  21EC  319A  2219  31A0   	fcall	_delay
 12571                           
 12572                           ;key.c: 16: if((PORTB & 0x0e)!=0x0e)
 12573  21EF  300E               	movlw	14
 12574  21F0  0020               	movlb	0	; select bank0
 12575  21F1  050D               	andwf	13,w	;volatile
 12576  21F2  00F5               	movwf	??_key_scan_call
 12577  21F3  3A0E               	xorlw	14
 12578  21F4  1903               	btfsc	3,2
 12579  21F5  0008               	return
 12580                           
 12581                           ;key.c: 17: {
 12582                           ;key.c: 18: KeyValue=(PORTB & 0x0e);
 12583  21F6  080D               	movf	13,w	;volatile
 12584  21F7  390E               	andlw	14
 12585  21F8  00F5               	movwf	??_key_scan_call
 12586  21F9  0021               	movlb	1	; select bank1
 12587  21FA  00B7               	movwf	_KeyValue^(0+128)
 12588  21FB  3007               	movlw	7
 12589                           
 12590                           ;key.c: 19: KeyValue>>=1;
 12591  21FC  1003               	clrc
 12592  21FD  0CB7               	rrf	_KeyValue^(0+128),f
 12593                           
 12594                           ;key.c: 20: KeyValue = ~KeyValue;
 12595  21FE  09B7               	comf	_KeyValue^(0+128),f
 12596                           
 12597                           ;key.c: 21: KeyValue &=0x07;
 12598  21FF  00F5               	movwf	??_key_scan_call
 12599  2200  05B7               	andwf	_KeyValue^(0+128),f
 12600  2201  0008               	return
 12601  2202                     __end_of_key_scan_call:	
 12602  2202                     __ptext32:	
 12603 ;; *************** function _get_globle_ticker *****************
 12604 ;; Defined at:
 12605 ;;		line 20 in file "src/driver/timer.c"
 12606 ;; Parameters:    Size  Location     Type
 12607 ;;		None
 12608 ;; Auto vars:     Size  Location     Type
 12609 ;;  ret             2    5[COMMON] unsigned int 
 12610 ;; Return value:  Size  Location     Type
 12611 ;;                  2    3[COMMON] unsigned int 
 12612 ;; Registers used:
 12613 ;;		wreg
 12614 ;; Tracked objects:
 12615 ;;		On entry : 0/0
 12616 ;;		On exit  : 0/0
 12617 ;;		Unchanged: 0/0
 12618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12619 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12620 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12622 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12623 ;;Total ram usage:        4 bytes
 12624 ;; Hardware stack levels used:    1
 12625 ;; Hardware stack levels required when called:    2
 12626 ;; This function calls:
 12627 ;;		Nothing
 12628 ;; This function is called by:
 12629 ;;		_ui_key_waite_up
 12630 ;;		_key_process_up_down_variable_speed_ex
 12631 ;; This function uses a non-reentrant model
 12632 ;;
 12633                           
 12634                           
 12635                           ;psect for function _get_globle_ticker
 12636  2202                     _get_globle_ticker:	
 12637                           
 12638                           ;incstack = 0
 12639                           ; Regs used in _get_globle_ticker: [wreg]
 12640                           ;timer.c: 22: uint16_t ret;
 12641                           ;timer.c: 23: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 12642  2202  130B               	bcf	11,6	;volatile
 12643  2203  138B               	bcf	11,7	;volatile
 12644                           
 12645                           ;timer.c: 24: ret=globlTickerms;
 12646  2204  0023               	movlb	3	; select bank3
 12647  2205  082B               	movf	(_globlTickerms+1)^(0+384),w
 12648  2206  00F6               	movwf	get_globle_ticker@ret+1
 12649  2207  082A               	movf	_globlTickerms^(0+384),w
 12650  2208  00F5               	movwf	get_globle_ticker@ret
 12651                           
 12652                           ;timer.c: 25: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 12653  2209  178B               	bsf	11,7	;volatile
 12654  220A  170B               	bsf	11,6	;volatile
 12655                           
 12656                           ;timer.c: 26: return ret;
 12657  220B  0876               	movf	get_globle_ticker@ret+1,w
 12658  220C  00F4               	movwf	?_get_globle_ticker+1
 12659  220D  0875               	movf	get_globle_ticker@ret,w
 12660  220E  00F3               	movwf	?_get_globle_ticker
 12661  220F  0008               	return
 12662  2210                     __end_of_get_globle_ticker:	
 12663  2210                     __ptext30:	
 12664 ;; *************** function _set_globle_ticker *****************
 12665 ;; Defined at:
 12666 ;;		line 14 in file "src/driver/timer.c"
 12667 ;; Parameters:    Size  Location     Type
 12668 ;;  tk              2    3[COMMON] unsigned int 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;		None
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      void 
 12673 ;; Registers used:
 12674 ;;		wreg
 12675 ;; Tracked objects:
 12676 ;;		On entry : 0/0
 12677 ;;		On exit  : 0/0
 12678 ;;		Unchanged: 0/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12680 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12683 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12684 ;;Total ram usage:        2 bytes
 12685 ;; Hardware stack levels used:    1
 12686 ;; Hardware stack levels required when called:    2
 12687 ;; This function calls:
 12688 ;;		Nothing
 12689 ;; This function is called by:
 12690 ;;		_ui_key_waite_up
 12691 ;;		_key_process_up_down_variable_speed_ex
 12692 ;; This function uses a non-reentrant model
 12693 ;;
 12694                           
 12695                           
 12696                           ;psect for function _set_globle_ticker
 12697  2210                     _set_globle_ticker:	
 12698                           
 12699                           ;incstack = 0
 12700                           ; Regs used in _set_globle_ticker: [wreg]
 12701                           ;timer.c: 16: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 12702  2210  130B               	bcf	11,6	;volatile
 12703  2211  138B               	bcf	11,7	;volatile
 12704                           
 12705                           ;timer.c: 17: globlTickerms=tk;
 12706  2212  0874               	movf	set_globle_ticker@tk+1,w
 12707  2213  0023               	movlb	3	; select bank3
 12708  2214  00AB               	movwf	(_globlTickerms+1)^(0+384)
 12709  2215  0873               	movf	set_globle_ticker@tk,w
 12710  2216  00AA               	movwf	_globlTickerms^(0+384)
 12711                           
 12712                           ;timer.c: 18: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 12713  2217  178B               	bsf	11,7	;volatile
 12714  2218  170B               	bsf	11,6	;volatile
 12715  2219  0008               	return
 12716  221A                     __end_of_set_globle_ticker:	
 12717  221A                     __ptext9:	
 12718 ;; *************** function _ui_disp_menu *****************
 12719 ;; Defined at:
 12720 ;;		line 433 in file "src/api/ui.c"
 12721 ;; Parameters:    Size  Location     Type
 12722 ;;		None
 12723 ;; Auto vars:     Size  Location     Type
 12724 ;;		None
 12725 ;; Return value:  Size  Location     Type
 12726 ;;                  1    wreg      void 
 12727 ;; Registers used:
 12728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12729 ;; Tracked objects:
 12730 ;;		On entry : 0/0
 12731 ;;		On exit  : 0/0
 12732 ;;		Unchanged: 0/0
 12733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12736 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 12738 ;;Total ram usage:        2 bytes
 12739 ;; Hardware stack levels used:    1
 12740 ;; Hardware stack levels required when called:    7
 12741 ;; This function calls:
 12742 ;;		_lcd_disp_refresh
 12743 ;;		_ui_disp_balance_and_volume
 12744 ;;		_ui_disp_clear_balance
 12745 ;;		_ui_disp_clear_card_id
 12746 ;;		_ui_disp_clear_totale
 12747 ;;		_ui_disp_flow
 12748 ;;		_ui_disp_modbus_id
 12749 ;;		_ui_disp_recharge
 12750 ;;		_ui_disp_set_balanceOff
 12751 ;;		_ui_disp_set_balanceWarning
 12752 ;;		_ui_disp_set_calib
 12753 ;;		_ui_disp_set_line
 12754 ;;		_ui_disp_set_line_reset
 12755 ;;		_ui_disp_set_price
 12756 ;;		_ui_disp_set_transferMoneyLimit
 12757 ;;		_ui_disp_small_flow_how_care
 12758 ;;		_ui_disp_str_num_s
 12759 ;;		_ui_disp_totale_v
 12760 ;; This function is called by:
 12761 ;;		_key_process_up_down_variable_speed_ex
 12762 ;;		_ui_key_process
 12763 ;;		_main
 12764 ;; This function uses a non-reentrant model
 12765 ;;
 12766                           
 12767                           
 12768                           ;psect for function _ui_disp_menu
 12769  221A                     _ui_disp_menu:	
 12770                           
 12771                           ;ui.c: 434: Event &= ~(uint8_t)(0x01<<3);
 12772                           
 12773                           ;incstack = 0
 12774                           ; Regs used in _ui_disp_menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12775  221A  30F7               	movlw	247
 12776  221B  0020               	movlb	0	; select bank0
 12777  221C  00C7               	movwf	??_ui_disp_menu
 12778  221D  0021               	movlb	1	; select bank1
 12779  221E  05B6               	andwf	_Event^(0+128),f
 12780                           
 12781                           ;ui.c: 493: }
 12782                           
 12783                           ;ui.c: 435: switch (menu )
 12784  221F  0878               	movf	_menu,w
 12785                           
 12786                           ; Switch size 1, requested type "space"
 12787                           ; Number of cases is 18, Range of values is 0 to 240
 12788                           ; switch strategies available:
 12789                           ; Name         Instructions Cycles
 12790                           ; simple_byte           55    28 (average)
 12791                           ; jumptable            260     6 (fixed)
 12792                           ;	Chosen strategy is simple_byte
 12793  2220  3A00               	xorlw	0	; case 0
 12794  2221  1903               	skipnz
 12795  2222  2A57               	goto	l13099
 12796  2223  3A01               	xorlw	1	; case 1
 12797  2224  1903               	skipnz
 12798  2225  2A5F               	goto	l13107
 12799  2226  3A03               	xorlw	3	; case 2
 12800  2227  1903               	skipnz
 12801  2228  2A66               	goto	l13115
 12802  2229  3A12               	xorlw	18	; case 16
 12803  222A  1903               	skipnz
 12804  222B  2A6F               	goto	l13123
 12805  222C  3A30               	xorlw	48	; case 32
 12806  222D  1903               	skipnz
 12807  222E  2A8B               	goto	l13129
 12808  222F  3A10               	xorlw	16	; case 48
 12809  2230  1903               	skipnz
 12810  2231  2A8C               	goto	l13131
 12811  2232  3A70               	xorlw	112	; case 64
 12812  2233  1903               	skipnz
 12813  2234  2A8D               	goto	l13133
 12814  2235  3A10               	xorlw	16	; case 80
 12815  2236  1903               	skipnz
 12816  2237  2A8E               	goto	l13135
 12817  2238  3A20               	xorlw	32	; case 112
 12818  2239  1903               	skipnz
 12819  223A  2A8F               	goto	l13137
 12820  223B  3AF0               	xorlw	240	; case 128
 12821  223C  1903               	skipnz
 12822  223D  2A90               	goto	l13139
 12823  223E  3A10               	xorlw	16	; case 144
 12824  223F  1903               	skipnz
 12825  2240  2A91               	goto	l13141
 12826  2241  3A30               	xorlw	48	; case 160
 12827  2242  1903               	skipnz
 12828  2243  2A92               	goto	l13143
 12829  2244  3A10               	xorlw	16	; case 176
 12830  2245  1903               	skipnz
 12831  2246  2A93               	goto	l13145
 12832  2247  3A01               	xorlw	1	; case 177
 12833  2248  1903               	skipnz
 12834  2249  2A94               	goto	l13147
 12835  224A  3A71               	xorlw	113	; case 192
 12836  224B  1903               	skipnz
 12837  224C  2A95               	goto	l13149
 12838  224D  3A10               	xorlw	16	; case 208
 12839  224E  1903               	skipnz
 12840  224F  2A97               	goto	l13153
 12841  2250  3A01               	xorlw	1	; case 209
 12842  2251  1903               	skipnz
 12843  2252  2A97               	goto	l13153
 12844  2253  3A21               	xorlw	33	; case 240
 12845  2254  1903               	skipnz
 12846  2255  2A96               	goto	l13151
 12847  2256  2A98               	goto	l564
 12848  2257                     l13099:	
 12849                           ;ui.c: 436: {
 12850                           ;ui.c: 437: case 0: {ui_disp_flow(); do { LATFbits.LATF1 = 1; } while(0);;do { LATAbits.
      +                          LATA3 = 0; } while(0);;do { LATFbits.LATF0 = 0; } while(0);;break;}
 12851                           
 12852  2257  246B               	fcall	_ui_disp_flow
 12853  2258  0027               	movlb	7	; select bank7
 12854  2259  148C               	bsf	12,1	;volatile
 12855  225A  0022               	movlb	2	; select bank2
 12856  225B  118C               	bcf	12,3	;volatile
 12857  225C  0027               	movlb	7	; select bank7
 12858  225D  100C               	bcf	12,0	;volatile
 12859  225E  0008               	return
 12860  225F                     l13107:	
 12861                           ;ui.c: 438: case 1: {ui_disp_totale_v(); do { LATAbits.LATA3 = 1; } while(0);;do { LATFb
      +                          its.LATF0 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12862                           
 12863  225F  24BD               	fcall	_ui_disp_totale_v
 12864  2260  0022               	movlb	2	; select bank2
 12865  2261  158C               	bsf	12,3	;volatile
 12866  2262  0027               	movlb	7	; select bank7
 12867  2263  100C               	bcf	12,0	;volatile
 12868  2264  108C               	bcf	12,1	;volatile
 12869  2265  0008               	return
 12870  2266                     l13115:	
 12871                           ;ui.c: 439: case 2: {ui_disp_balance_and_volume(); do { LATFbits.LATF0 = 1; } while(0);;
      +                          do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;break;}
 12872                           
 12873  2266  3188  20B9         	fcall	_ui_disp_balance_and_volume
 12874  2268  0027               	movlb	7	; select bank7
 12875  2269  140C               	bsf	12,0	;volatile
 12876  226A  0022               	movlb	2	; select bank2
 12877  226B  118C               	bcf	12,3	;volatile
 12878  226C  0027               	movlb	7	; select bank7
 12879  226D  108C               	bcf	12,1	;volatile
 12880  226E  0008               	return
 12881  226F                     l13123:	
 12882                           ;ui.c: 440: case 0x10: {
 12883                           
 12884                           
 12885                           ;ui.c: 441: password=(uint8_t)(*((uint16_t*)uiAdjbuf));
 12886  226F  0022               	movlb	2	; select bank2
 12887  2270  0865               	movf	_uiAdjbuf^(0+256),w
 12888  2271  0020               	movlb	0	; select bank0
 12889  2272  00C7               	movwf	??_ui_disp_menu
 12890  2273  01C8               	clrf	??_ui_disp_menu+1
 12891  2274  0022               	movlb	2	; select bank2
 12892  2275  00A2               	movwf	_password^(0+256)
 12893  2276  0020               	movlb	0	; select bank0
 12894  2277  0848               	movf	??_ui_disp_menu+1,w
 12895  2278  0022               	movlb	2	; select bank2
 12896  2279  00A3               	movwf	(_password+1)^(0+256)
 12897                           
 12898                           ;ui.c: 442: do{ ui_disp_str_num_s((uint8_t*)"psd-",password); lcd_disp_refresh(); }while
      +                          (0);;
 12899  227A  30C9               	movlw	low (STR_15| (0+32768))
 12900  227B  0020               	movlb	0	; select bank0
 12901  227C  00A9               	movwf	ui_disp_str_num_s@str
 12902  227D  30AA               	movlw	high (STR_15| (0+32768))
 12903  227E  00AA               	movwf	ui_disp_str_num_s@str+1
 12904  227F  0022               	movlb	2	; select bank2
 12905  2280  0823               	movf	(_password+1)^(0+256),w
 12906  2281  0020               	movlb	0	; select bank0
 12907  2282  00AC               	movwf	ui_disp_str_num_s@num+1
 12908  2283  0022               	movlb	2	; select bank2
 12909  2284  0822               	movf	_password^(0+256),w
 12910  2285  0020               	movlb	0	; select bank0
 12911  2286  00AB               	movwf	ui_disp_str_num_s@num
 12912  2287  319E  26AC         	fcall	_ui_disp_str_num_s
 12913  2289  319E  2E9D         	ljmp	l12089
 12914  228B                     l13129:	
 12915                           ;ui.c: 444: case 0x20: {ui_disp_clear_balance(); break; }
 12916                           
 12917                           ;ui.c: 443: break;}
 12918                           
 12919  228B  2A99               	ljmp	l12757
 12920  228C                     l13131:	
 12921                           ;ui.c: 445: case 0x30: {ui_disp_clear_totale(); break; }
 12922                           
 12923  228C  2ACB               	ljmp	l12749
 12924  228D                     l13133:	
 12925                           ;ui.c: 446: case 0x40: {ui_disp_set_line(); break; }
 12926                           
 12927  228D  2D90               	ljmp	l12767
 12928  228E                     l13135:	
 12929                           ;ui.c: 447: case 0x50: {ui_disp_set_calib();break;}
 12930                           
 12931  228E  2D22               	ljmp	l12845
 12932  228F                     l13137:	
 12933                           ;ui.c: 448: case 0x70: {ui_disp_small_flow_how_care();break;}
 12934                           
 12935  228F  2BA2               	ljmp	l12795
 12936  2290                     l13139:	
 12937                           ;ui.c: 450: case 0x80: {ui_disp_set_price();break;}
 12938                           
 12939  2290  2B71               	ljmp	l12801
 12940  2291                     l13141:	
 12941                           ;ui.c: 451: case 0x90: {ui_disp_set_transferMoneyLimit();break;}
 12942                           
 12943  2291  2B8C               	ljmp	l12809
 12944  2292                     l13143:	
 12945                           ;ui.c: 452: case 0xa0: {ui_disp_modbus_id(); break;}
 12946                           
 12947  2292  2ADC               	ljmp	l12799
 12948  2293                     l13145:	
 12949                           ;ui.c: 454: case 0xb0:{ui_disp_set_balanceWarning();break;};
 12950                           
 12951  2293  2B2A               	ljmp	l12815
 12952  2294                     l13147:	
 12953                           ;ui.c: 455: case 0xb1:{ui_disp_set_balanceOff();break;}
 12954                           
 12955  2294  2AF5               	ljmp	l12827
 12956  2295                     l13149:	
 12957                           ;ui.c: 457: case 0xc0: {ui_disp_recharge(); break;}
 12958                           
 12959  2295  2AEE               	ljmp	l12797
 12960  2296                     l13151:	
 12961                           ;ui.c: 459: case 0xf0: {ui_disp_set_line_reset(); break;}
 12962                           
 12963  2296  2B5F               	ljmp	l12765
 12964  2297                     l13153:	
 12965                           ;ui.c: 460: case 0xd0:
 12966                           
 12967                           
 12968                           ;ui.c: 461: case 0xd1:{ui_disp_clear_card_id();break;}
 12969  2297  2AAC               	ljmp	l12839
 12970  2298                     l564:	
 12971  2298  0008               	return
 12972  2299                     __end_of_ui_disp_menu:	
 12973  2299                     __ptext27:	
 12974 ;; *************** function _ui_disp_clear_balance *****************
 12975 ;; Defined at:
 12976 ;;		line 262 in file "src/api/ui.c"
 12977 ;; Parameters:    Size  Location     Type
 12978 ;;		None
 12979 ;; Auto vars:     Size  Location     Type
 12980 ;;		None
 12981 ;; Return value:  Size  Location     Type
 12982 ;;                  1    wreg      void 
 12983 ;; Registers used:
 12984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12985 ;; Tracked objects:
 12986 ;;		On entry : 0/0
 12987 ;;		On exit  : 0/0
 12988 ;;		Unchanged: 0/0
 12989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 12990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 12994 ;;Total ram usage:        0 bytes
 12995 ;; Hardware stack levels used:    1
 12996 ;; Hardware stack levels required when called:    6
 12997 ;; This function calls:
 12998 ;;		_ui_disp_balance_and_volume
 12999 ;; This function is called by:
 13000 ;;		_ui_disp_menu
 13001 ;; This function uses a non-reentrant model
 13002 ;;
 13003                           
 13004                           
 13005                           ;psect for function _ui_disp_clear_balance
 13006  2299                     _ui_disp_clear_balance:	
 13007  2299                     l12757:	
 13008                           ;incstack = 0
 13009                           ; Regs used in _ui_disp_clear_balance: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13010                           
 13011                           
 13012                           ;ui.c: 264: ui_disp_balance_and_volume();
 13013  2299  3188  20B9  31A0   	fcall	_ui_disp_balance_and_volume
 13014                           
 13015                           ;ui.c: 265: do { LATFbits.LATF0 = ~LATFbits.LATF0; } while(0);;
 13016  229C  1003               	clrc
 13017  229D  0027               	movlb	7	; select bank7
 13018  229E  1C0C               	btfss	12,0	;volatile
 13019  229F  1403               	setc
 13020  22A0  1C03               	btfss	3,0
 13021  22A1  2AA5               	goto	u11460
 13022  22A2  0027               	movlb	7	; select bank7
 13023  22A3  140C               	bsf	12,0	;volatile
 13024  22A4  2AA7               	goto	l12761
 13025  22A5                     u11460:	
 13026  22A5  0027               	movlb	7	; select bank7
 13027  22A6  100C               	bcf	12,0	;volatile
 13028  22A7                     l12761:	
 13029                           ;ui.c: 266: do { LATAbits.LATA3 = 0; } while(0);;
 13030                           
 13031  22A7  0022               	movlb	2	; select bank2
 13032  22A8  118C               	bcf	12,3	;volatile
 13033                           
 13034                           ;ui.c: 267: do { LATFbits.LATF1 = 0; } while(0);;
 13035  22A9  0027               	movlb	7	; select bank7
 13036  22AA  108C               	bcf	12,1	;volatile
 13037  22AB  0008               	return
 13038  22AC                     __end_of_ui_disp_clear_balance:	
 13039  22AC                     __ptext26:	
 13040 ;; *************** function _ui_disp_clear_card_id *****************
 13041 ;; Defined at:
 13042 ;;		line 415 in file "src/api/ui.c"
 13043 ;; Parameters:    Size  Location     Type
 13044 ;;		None
 13045 ;; Auto vars:     Size  Location     Type
 13046 ;;		None
 13047 ;; Return value:  Size  Location     Type
 13048 ;;                  1    wreg      void 
 13049 ;; Registers used:
 13050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13051 ;; Tracked objects:
 13052 ;;		On entry : 0/0
 13053 ;;		On exit  : 0/0
 13054 ;;		Unchanged: 0/0
 13055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13058 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13059 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 13060 ;;Total ram usage:        4 bytes
 13061 ;; Hardware stack levels used:    1
 13062 ;; Hardware stack levels required when called:    5
 13063 ;; This function calls:
 13064 ;;		_lcd_disp_str
 13065 ;; This function is called by:
 13066 ;;		_ui_disp_menu
 13067 ;; This function uses a non-reentrant model
 13068 ;;
 13069                           
 13070                           
 13071                           ;psect for function _ui_disp_clear_card_id
 13072  22AC                     _ui_disp_clear_card_id:	
 13073  22AC                     l12839:	
 13074                           ;incstack = 0
 13075                           ; Regs used in _ui_disp_clear_card_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13076                           
 13077                           
 13078                           ;ui.c: 416: if(mainSystemData.cardID==0)
 13079  22AC  3004               	movlw	4
 13080  22AD  0084               	movwf	4
 13081  22AE  30BF               	movlw	191
 13082  22AF  0085               	movwf	5
 13083  22B0  3F00               	moviw [0]fsr0
 13084  22B1  0020               	movlb	0	; select bank0
 13085  22B2  00A7               	movwf	??_ui_disp_clear_card_id
 13086  22B3  3F01               	moviw [1]fsr0
 13087  22B4  00A8               	movwf	??_ui_disp_clear_card_id+1
 13088  22B5  3F02               	moviw [2]fsr0
 13089  22B6  00A9               	movwf	??_ui_disp_clear_card_id+2
 13090  22B7  3F03               	moviw [3]fsr0
 13091  22B8  00AA               	movwf	??_ui_disp_clear_card_id+3
 13092  22B9  0429               	iorwf	??_ui_disp_clear_card_id+2,w
 13093  22BA  0428               	iorwf	??_ui_disp_clear_card_id+1,w
 13094  22BB  0427               	iorwf	??_ui_disp_clear_card_id,w
 13095  22BC  1D03               	skipz
 13096  22BD  2AC4               	goto	l12843
 13097                           
 13098                           ;ui.c: 417: lcd_disp_str((uint8_t*)"card-id0");
 13099  22BE  3082               	movlw	low (STR_13| (0+32768))
 13100  22BF  00A2               	movwf	lcd_disp_str@str
 13101  22C0  30AA               	movlw	high (STR_13| (0+32768))
 13102  22C1  00A3               	movwf	lcd_disp_str@str+1
 13103  22C2  319F  2FBD         	ljmp	l12289
 13104  22C4                     l12843:	
 13105                           
 13106                           ;ui.c: 418: else
 13107                           ;ui.c: 419: lcd_disp_str((uint8_t*)"card-id9");
 13108  22C4  308B               	movlw	low (STR_14| (0+32768))
 13109  22C5  0020               	movlb	0	; select bank0
 13110  22C6  00A2               	movwf	lcd_disp_str@str
 13111  22C7  30AA               	movlw	high (STR_14| (0+32768))
 13112  22C8  00A3               	movwf	lcd_disp_str@str+1
 13113  22C9  319F  2FBD         	ljmp	l12289
 13114  22CB                     __end_of_ui_disp_clear_card_id:	
 13115  22CB                     __ptext24:	
 13116 ;; *************** function _ui_disp_clear_totale *****************
 13117 ;; Defined at:
 13118 ;;		line 235 in file "src/api/ui.c"
 13119 ;; Parameters:    Size  Location     Type
 13120 ;;		None
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;		None
 13123 ;; Return value:  Size  Location     Type
 13124 ;;                  1    wreg      void 
 13125 ;; Registers used:
 13126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13136 ;;Total ram usage:        0 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    6
 13139 ;; This function calls:
 13140 ;;		_ui_disp_totale_v
 13141 ;; This function is called by:
 13142 ;;		_ui_disp_menu
 13143 ;; This function uses a non-reentrant model
 13144 ;;
 13145                           
 13146                           
 13147                           ;psect for function _ui_disp_clear_totale
 13148  22CB                     _ui_disp_clear_totale:	
 13149  22CB                     l12749:	
 13150                           ;incstack = 0
 13151                           ; Regs used in _ui_disp_clear_totale: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13152                           
 13153                           
 13154                           ;ui.c: 236: ui_disp_totale_v();
 13155  22CB  24BD  31A0         	fcall	_ui_disp_totale_v
 13156                           
 13157                           ;ui.c: 237: do { LATAbits.LATA3 = ~LATAbits.LATA3; } while(0);;
 13158  22CD  1003               	clrc
 13159  22CE  0022               	movlb	2	; select bank2
 13160  22CF  1D8C               	btfss	12,3	;volatile
 13161  22D0  1403               	setc
 13162  22D1  1C03               	btfss	3,0
 13163  22D2  2AD6               	goto	u11440
 13164  22D3  0022               	movlb	2	; select bank2
 13165  22D4  158C               	bsf	12,3	;volatile
 13166  22D5  2AD8               	goto	l12753
 13167  22D6                     u11440:	
 13168  22D6  0022               	movlb	2	; select bank2
 13169  22D7  118C               	bcf	12,3	;volatile
 13170  22D8                     l12753:	
 13171                           ;ui.c: 238: do { LATFbits.LATF0 = 0; } while(0);;
 13172                           
 13173  22D8  0027               	movlb	7	; select bank7
 13174  22D9  100C               	bcf	12,0	;volatile
 13175                           
 13176                           ;ui.c: 239: do { LATFbits.LATF1 = 0; } while(0);;
 13177  22DA  108C               	bcf	12,1	;volatile
 13178  22DB  0008               	return
 13179  22DC                     __end_of_ui_disp_clear_totale:	
 13180  22DC                     __ptext20:	
 13181 ;; *************** function _ui_disp_modbus_id *****************
 13182 ;; Defined at:
 13183 ;;		line 357 in file "src/api/ui.c"
 13184 ;; Parameters:    Size  Location     Type
 13185 ;;		None
 13186 ;; Auto vars:     Size  Location     Type
 13187 ;;		None
 13188 ;; Return value:  Size  Location     Type
 13189 ;;                  1    wreg      void 
 13190 ;; Registers used:
 13191 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13192 ;; Tracked objects:
 13193 ;;		On entry : 0/0
 13194 ;;		On exit  : 0/0
 13195 ;;		Unchanged: 0/0
 13196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13199 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13200 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13201 ;;Total ram usage:        2 bytes
 13202 ;; Hardware stack levels used:    1
 13203 ;; Hardware stack levels required when called:    6
 13204 ;; This function calls:
 13205 ;;		_lcd_disp_refresh
 13206 ;;		_ui_disp_str_num_s
 13207 ;; This function is called by:
 13208 ;;		_ui_disp_menu
 13209 ;; This function uses a non-reentrant model
 13210 ;;
 13211                           
 13212                           
 13213                           ;psect for function _ui_disp_modbus_id
 13214  22DC                     _ui_disp_modbus_id:	
 13215  22DC                     l12799:	
 13216                           ;incstack = 0
 13217                           ; Regs used in _ui_disp_modbus_id: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13218                           ;ui.c: 359: do{ ui_disp_str_num_s((uint8_t*)"addr-",uiAdjbuf[0]); lcd_disp_refresh(); }w
      +                          hile(0);;
 13219                           
 13220  22DC  30C3               	movlw	low (STR_6| (0+32768))
 13221  22DD  0020               	movlb	0	; select bank0
 13222  22DE  00A9               	movwf	ui_disp_str_num_s@str
 13223  22DF  30AA               	movlw	high (STR_6| (0+32768))
 13224  22E0  00AA               	movwf	ui_disp_str_num_s@str+1
 13225  22E1  0022               	movlb	2	; select bank2
 13226  22E2  0865               	movf	_uiAdjbuf^(0+256),w
 13227  22E3  0020               	movlb	0	; select bank0
 13228  22E4  00AF               	movwf	??_ui_disp_modbus_id
 13229  22E5  01B0               	clrf	??_ui_disp_modbus_id+1
 13230  22E6  00AB               	movwf	ui_disp_str_num_s@num
 13231  22E7  0830               	movf	??_ui_disp_modbus_id+1,w
 13232  22E8  00AC               	movwf	ui_disp_str_num_s@num+1
 13233  22E9  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13234  22EC  319E  2E9D         	ljmp	l12089
 13235  22EE                     __end_of_ui_disp_modbus_id:	
 13236  22EE                     __ptext19:	
 13237 ;; *************** function _ui_disp_recharge *****************
 13238 ;; Defined at:
 13239 ;;		line 350 in file "src/api/ui.c"
 13240 ;; Parameters:    Size  Location     Type
 13241 ;;		None
 13242 ;; Auto vars:     Size  Location     Type
 13243 ;;		None
 13244 ;; Return value:  Size  Location     Type
 13245 ;;                  1    wreg      void 
 13246 ;; Registers used:
 13247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13248 ;; Tracked objects:
 13249 ;;		On entry : 0/0
 13250 ;;		On exit  : 0/0
 13251 ;;		Unchanged: 0/0
 13252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13253 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13256 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13257 ;;Total ram usage:        0 bytes
 13258 ;; Hardware stack levels used:    1
 13259 ;; Hardware stack levels required when called:    5
 13260 ;; This function calls:
 13261 ;;		_lcd_disp_str
 13262 ;; This function is called by:
 13263 ;;		_ui_disp_menu
 13264 ;; This function uses a non-reentrant model
 13265 ;;
 13266                           
 13267                           
 13268                           ;psect for function _ui_disp_recharge
 13269  22EE                     _ui_disp_recharge:	
 13270  22EE                     l12797:	
 13271                           ;incstack = 0
 13272                           ; Regs used in _ui_disp_recharge: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13273                           
 13274                           
 13275                           ;ui.c: 355: lcd_disp_str((uint8_t*) "recharge");
 13276  22EE  3094               	movlw	low (STR_5| (0+32768))
 13277  22EF  0020               	movlb	0	; select bank0
 13278  22F0  00A2               	movwf	lcd_disp_str@str
 13279  22F1  30AA               	movlw	high (STR_5| (0+32768))
 13280  22F2  00A3               	movwf	lcd_disp_str@str+1
 13281  22F3  319F  2FBD         	ljmp	l12289
 13282  22F5                     __end_of_ui_disp_recharge:	
 13283  22F5                     __ptext18:	
 13284 ;; *************** function _ui_disp_set_balanceOff *****************
 13285 ;; Defined at:
 13286 ;;		line 404 in file "src/api/ui.c"
 13287 ;; Parameters:    Size  Location     Type
 13288 ;;		None
 13289 ;; Auto vars:     Size  Location     Type
 13290 ;;		None
 13291 ;; Return value:  Size  Location     Type
 13292 ;;                  1    wreg      void 
 13293 ;; Registers used:
 13294 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13295 ;; Tracked objects:
 13296 ;;		On entry : 0/0
 13297 ;;		On exit  : 0/0
 13298 ;;		Unchanged: 0/0
 13299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13304 ;;Total ram usage:        0 bytes
 13305 ;; Hardware stack levels used:    1
 13306 ;; Hardware stack levels required when called:    6
 13307 ;; This function calls:
 13308 ;;		_lcd_disp_refresh
 13309 ;;		_ui_disp_str_num_s
 13310 ;; This function is called by:
 13311 ;;		_ui_disp_menu
 13312 ;; This function uses a non-reentrant model
 13313 ;;
 13314                           
 13315                           
 13316                           ;psect for function _ui_disp_set_balanceOff
 13317  22F5                     _ui_disp_set_balanceOff:	
 13318  22F5                     l12827:	
 13319                           ;incstack = 0
 13320                           ; Regs used in _ui_disp_set_balanceOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13321                           
 13322                           
 13323                           ;ui.c: 405: __q15=*((int16_t*)(uiAdjbuf));
 13324  22F5  3065               	movlw	low (_uiAdjbuf| (0+256))
 13325  22F6  0086               	movwf	6
 13326  22F7  3001               	movlw	1	; select bank2/3
 13327  22F8  0087               	movwf	7
 13328  22F9  3F40               	moviw [0]fsr1
 13329  22FA  0021               	movlb	1	; select bank1
 13330  22FB  00A8               	movwf	___q15^(0+128)
 13331  22FC  3F41               	moviw [1]fsr1
 13332  22FD  00A9               	movwf	(___q15+1)^(0+128)
 13333                           
 13334                           ;ui.c: 407: if(__q15>=0){
 13335  22FE  1BA9               	btfsc	(___q15+1)^(0+128),7
 13336  22FF  2B12               	goto	l12833
 13337                           
 13338                           ;ui.c: 408: do{ ui_disp_str_num_s((uint8_t*)"d2   ",__q15); lcd_disp_refresh(); }while(0
      +                          );;
 13339  2300  30B1               	movlw	low (STR_11| (0+32768))
 13340  2301  0020               	movlb	0	; select bank0
 13341  2302  00A9               	movwf	ui_disp_str_num_s@str
 13342  2303  30AA               	movlw	high (STR_11| (0+32768))
 13343  2304  00AA               	movwf	ui_disp_str_num_s@str+1
 13344  2305  0021               	movlb	1	; select bank1
 13345  2306  0829               	movf	(___q15+1)^(0+128),w
 13346  2307  0020               	movlb	0	; select bank0
 13347  2308  00AC               	movwf	ui_disp_str_num_s@num+1
 13348  2309  0021               	movlb	1	; select bank1
 13349  230A  0828               	movf	___q15^(0+128),w
 13350  230B  0020               	movlb	0	; select bank0
 13351  230C  00AB               	movwf	ui_disp_str_num_s@num
 13352  230D  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13353  2310  319E  2E9D         	ljmp	l12089
 13354  2312                     l12833:	
 13355                           ;ui.c: 409: }else{
 13356                           
 13357                           
 13358                           ;ui.c: 410: __q15=0-__q15;
 13359  2312  0021               	movlb	1	; select bank1
 13360  2313  09A8               	comf	___q15^(0+128),f
 13361  2314  09A9               	comf	(___q15+1)^(0+128),f
 13362  2315  0AA8               	incf	___q15^(0+128),f
 13363  2316  1903               	skipnz
 13364  2317  0AA9               	incf	(___q15+1)^(0+128),f
 13365                           
 13366                           ;ui.c: 411: do{ ui_disp_str_num_s((uint8_t*)"d2  -",__q15); lcd_disp_refresh(); }while(0
      +                          );;
 13367  2318  30BD               	movlw	low (STR_12| (0+32768))
 13368  2319  0020               	movlb	0	; select bank0
 13369  231A  00A9               	movwf	ui_disp_str_num_s@str
 13370  231B  30AA               	movlw	high (STR_12| (0+32768))
 13371  231C  00AA               	movwf	ui_disp_str_num_s@str+1
 13372  231D  0021               	movlb	1	; select bank1
 13373  231E  0829               	movf	(___q15+1)^(0+128),w
 13374  231F  0020               	movlb	0	; select bank0
 13375  2320  00AC               	movwf	ui_disp_str_num_s@num+1
 13376  2321  0021               	movlb	1	; select bank1
 13377  2322  0828               	movf	___q15^(0+128),w
 13378  2323  0020               	movlb	0	; select bank0
 13379  2324  00AB               	movwf	ui_disp_str_num_s@num
 13380  2325  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13381  2328  319E  2E9D         	ljmp	l12089
 13382  232A                     __end_of_ui_disp_set_balanceOff:	
 13383  232A                     __ptext17:	
 13384 ;; *************** function _ui_disp_set_balanceWarning *****************
 13385 ;; Defined at:
 13386 ;;		line 393 in file "src/api/ui.c"
 13387 ;; Parameters:    Size  Location     Type
 13388 ;;		None
 13389 ;; Auto vars:     Size  Location     Type
 13390 ;;		None
 13391 ;; Return value:  Size  Location     Type
 13392 ;;                  1    wreg      void 
 13393 ;; Registers used:
 13394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13395 ;; Tracked objects:
 13396 ;;		On entry : 0/0
 13397 ;;		On exit  : 0/0
 13398 ;;		Unchanged: 0/0
 13399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13404 ;;Total ram usage:        0 bytes
 13405 ;; Hardware stack levels used:    1
 13406 ;; Hardware stack levels required when called:    6
 13407 ;; This function calls:
 13408 ;;		_lcd_disp_refresh
 13409 ;;		_ui_disp_str_num_s
 13410 ;; This function is called by:
 13411 ;;		_ui_disp_menu
 13412 ;; This function uses a non-reentrant model
 13413 ;;
 13414                           
 13415                           
 13416                           ;psect for function _ui_disp_set_balanceWarning
 13417  232A                     _ui_disp_set_balanceWarning:	
 13418  232A                     l12815:	
 13419                           ;incstack = 0
 13420                           ; Regs used in _ui_disp_set_balanceWarning: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13421                           
 13422                           
 13423                           ;ui.c: 394: __q15=*((int16_t*)(uiAdjbuf));
 13424  232A  3065               	movlw	low (_uiAdjbuf| (0+256))
 13425  232B  0086               	movwf	6
 13426  232C  3001               	movlw	1	; select bank2/3
 13427  232D  0087               	movwf	7
 13428  232E  3F40               	moviw [0]fsr1
 13429  232F  0021               	movlb	1	; select bank1
 13430  2330  00A8               	movwf	___q15^(0+128)
 13431  2331  3F41               	moviw [1]fsr1
 13432  2332  00A9               	movwf	(___q15+1)^(0+128)
 13433                           
 13434                           ;ui.c: 396: if(__q15>=0){
 13435  2333  1BA9               	btfsc	(___q15+1)^(0+128),7
 13436  2334  2B47               	goto	l12821
 13437                           
 13438                           ;ui.c: 397: do{ ui_disp_str_num_s((uint8_t*)"d1   ",__q15); lcd_disp_refresh(); }while(0
      +                          );;
 13439  2335  30AB               	movlw	low (STR_9| (0+32768))
 13440  2336  0020               	movlb	0	; select bank0
 13441  2337  00A9               	movwf	ui_disp_str_num_s@str
 13442  2338  30AA               	movlw	high (STR_9| (0+32768))
 13443  2339  00AA               	movwf	ui_disp_str_num_s@str+1
 13444  233A  0021               	movlb	1	; select bank1
 13445  233B  0829               	movf	(___q15+1)^(0+128),w
 13446  233C  0020               	movlb	0	; select bank0
 13447  233D  00AC               	movwf	ui_disp_str_num_s@num+1
 13448  233E  0021               	movlb	1	; select bank1
 13449  233F  0828               	movf	___q15^(0+128),w
 13450  2340  0020               	movlb	0	; select bank0
 13451  2341  00AB               	movwf	ui_disp_str_num_s@num
 13452  2342  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13453  2345  319E  2E9D         	ljmp	l12089
 13454  2347                     l12821:	
 13455                           ;ui.c: 398: }else{
 13456                           
 13457                           
 13458                           ;ui.c: 399: __q15=0-__q15;
 13459  2347  0021               	movlb	1	; select bank1
 13460  2348  09A8               	comf	___q15^(0+128),f
 13461  2349  09A9               	comf	(___q15+1)^(0+128),f
 13462  234A  0AA8               	incf	___q15^(0+128),f
 13463  234B  1903               	skipnz
 13464  234C  0AA9               	incf	(___q15+1)^(0+128),f
 13465                           
 13466                           ;ui.c: 400: do{ ui_disp_str_num_s((uint8_t*)"d1  -",__q15); lcd_disp_refresh(); }while(0
      +                          );;
 13467  234D  30B7               	movlw	low (STR_10| (0+32768))
 13468  234E  0020               	movlb	0	; select bank0
 13469  234F  00A9               	movwf	ui_disp_str_num_s@str
 13470  2350  30AA               	movlw	high (STR_10| (0+32768))
 13471  2351  00AA               	movwf	ui_disp_str_num_s@str+1
 13472  2352  0021               	movlb	1	; select bank1
 13473  2353  0829               	movf	(___q15+1)^(0+128),w
 13474  2354  0020               	movlb	0	; select bank0
 13475  2355  00AC               	movwf	ui_disp_str_num_s@num+1
 13476  2356  0021               	movlb	1	; select bank1
 13477  2357  0828               	movf	___q15^(0+128),w
 13478  2358  0020               	movlb	0	; select bank0
 13479  2359  00AB               	movwf	ui_disp_str_num_s@num
 13480  235A  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13481  235D  319E  2E9D         	ljmp	l12089
 13482  235F                     __end_of_ui_disp_set_balanceWarning:	
 13483  235F                     __ptext13:	
 13484 ;; *************** function _ui_disp_set_line_reset *****************
 13485 ;; Defined at:
 13486 ;;		line 269 in file "src/api/ui.c"
 13487 ;; Parameters:    Size  Location     Type
 13488 ;;		None
 13489 ;; Auto vars:     Size  Location     Type
 13490 ;;		None
 13491 ;; Return value:  Size  Location     Type
 13492 ;;                  1    wreg      void 
 13493 ;; Registers used:
 13494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13495 ;; Tracked objects:
 13496 ;;		On entry : 0/0
 13497 ;;		On exit  : 0/0
 13498 ;;		Unchanged: 0/0
 13499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13504 ;;Total ram usage:        0 bytes
 13505 ;; Hardware stack levels used:    1
 13506 ;; Hardware stack levels required when called:    6
 13507 ;; This function calls:
 13508 ;;		_lcd_disp_refresh
 13509 ;;		_ui_disp_str_num_s
 13510 ;; This function is called by:
 13511 ;;		_ui_disp_menu
 13512 ;; This function uses a non-reentrant model
 13513 ;;
 13514                           
 13515                           
 13516                           ;psect for function _ui_disp_set_line_reset
 13517  235F                     _ui_disp_set_line_reset:	
 13518  235F                     l12765:	
 13519                           ;incstack = 0
 13520                           ; Regs used in _ui_disp_set_line_reset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13521                           ;ui.c: 271: do{ ui_disp_str_num_s((uint8_t*)"l-",mainSystemData.flowRatio); lcd_disp_ref
      +                          resh(); }while(0);;
 13522                           
 13523  235F  30D6               	movlw	low (STR_3| (0+32768))
 13524  2360  0020               	movlb	0	; select bank0
 13525  2361  00A9               	movwf	ui_disp_str_num_s@str
 13526  2362  30AA               	movlw	high (STR_3| (0+32768))
 13527  2363  00AA               	movwf	ui_disp_str_num_s@str+1
 13528  2364  301A               	movlw	26
 13529  2365  0084               	movwf	4
 13530  2366  30BF               	movlw	191
 13531  2367  0085               	movwf	5
 13532  2368  3F00               	moviw [0]fsr0
 13533  2369  00AB               	movwf	ui_disp_str_num_s@num
 13534  236A  3F01               	moviw [1]fsr0
 13535  236B  00AC               	movwf	ui_disp_str_num_s@num+1
 13536  236C  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13537  236F  319E  2E9D         	ljmp	l12089
 13538  2371                     __end_of_ui_disp_set_line_reset:	
 13539  2371                     __ptext12:	
 13540 ;; *************** function _ui_disp_set_price *****************
 13541 ;; Defined at:
 13542 ;;		line 382 in file "src/api/ui.c"
 13543 ;; Parameters:    Size  Location     Type
 13544 ;;		None
 13545 ;; Auto vars:     Size  Location     Type
 13546 ;;		None
 13547 ;; Return value:  Size  Location     Type
 13548 ;;                  1    wreg      void 
 13549 ;; Registers used:
 13550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13551 ;; Tracked objects:
 13552 ;;		On entry : 0/0
 13553 ;;		On exit  : 0/0
 13554 ;;		Unchanged: 0/0
 13555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13560 ;;Total ram usage:        0 bytes
 13561 ;; Hardware stack levels used:    1
 13562 ;; Hardware stack levels required when called:    6
 13563 ;; This function calls:
 13564 ;;		_lcd_disp_dp
 13565 ;;		_lcd_disp_refresh
 13566 ;;		_ui_disp_str_num_s
 13567 ;; This function is called by:
 13568 ;;		_ui_disp_menu
 13569 ;; This function uses a non-reentrant model
 13570 ;;
 13571                           
 13572                           
 13573                           ;psect for function _ui_disp_set_price
 13574  2371                     _ui_disp_set_price:	
 13575  2371                     l12801:	
 13576                           ;incstack = 0
 13577                           ; Regs used in _ui_disp_set_price: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13578                           
 13579                           
 13580                           ;ui.c: 383: __t16=*((uint16_t*)(uiAdjbuf));
 13581  2371  3065               	movlw	low (_uiAdjbuf| (0+256))
 13582  2372  0086               	movwf	6
 13583  2373  3001               	movlw	1	; select bank2/3
 13584  2374  0087               	movwf	7
 13585  2375  3F40               	moviw [0]fsr1
 13586  2376  00F9               	movwf	___t16
 13587  2377  3F41               	moviw [1]fsr1
 13588  2378  00FA               	movwf	___t16+1
 13589                           
 13590                           ;ui.c: 385: ui_disp_str_num_s((uint8_t*)"dj-",__t16);
 13591  2379  30CE               	movlw	low (STR_7| (0+32768))
 13592  237A  0020               	movlb	0	; select bank0
 13593  237B  00A9               	movwf	ui_disp_str_num_s@str
 13594  237C  30AA               	movlw	high (STR_7| (0+32768))
 13595  237D  00AA               	movwf	ui_disp_str_num_s@str+1
 13596  237E  087A               	movf	___t16+1,w
 13597  237F  00AC               	movwf	ui_disp_str_num_s@num+1
 13598  2380  0879               	movf	___t16,w
 13599  2381  00AB               	movwf	ui_disp_str_num_s@num
 13600  2382  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13601                           
 13602                           ;ui.c: 386: lcd_disp_dp(2, 1);
 13603  2385  0020               	movlb	0	; select bank0
 13604  2386  3002               	movlw	2
 13605  2387  01B2               	clrf	lcd_disp_dp@show
 13606  2388  0AB2               	incf	lcd_disp_dp@show,f
 13607  2389  267A               	fcall	_lcd_disp_dp
 13608                           
 13609                           ;ui.c: 387: lcd_disp_refresh();
 13610  238A  319E  2E9D         	ljmp	l12089
 13611  238C                     __end_of_ui_disp_set_price:	
 13612  238C                     __ptext11:	
 13613 ;; *************** function _ui_disp_set_transferMoneyLimit *****************
 13614 ;; Defined at:
 13615 ;;		line 389 in file "src/api/ui.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;		None
 13618 ;; Auto vars:     Size  Location     Type
 13619 ;;		None
 13620 ;; Return value:  Size  Location     Type
 13621 ;;                  1    wreg      void 
 13622 ;; Registers used:
 13623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13624 ;; Tracked objects:
 13625 ;;		On entry : 0/0
 13626 ;;		On exit  : 0/0
 13627 ;;		Unchanged: 0/0
 13628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13632 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13633 ;;Total ram usage:        0 bytes
 13634 ;; Hardware stack levels used:    1
 13635 ;; Hardware stack levels required when called:    6
 13636 ;; This function calls:
 13637 ;;		_lcd_disp_refresh
 13638 ;;		_ui_disp_str_num_s
 13639 ;; This function is called by:
 13640 ;;		_ui_disp_menu
 13641 ;; This function uses a non-reentrant model
 13642 ;;
 13643                           
 13644                           
 13645                           ;psect for function _ui_disp_set_transferMoneyLimit
 13646  238C                     _ui_disp_set_transferMoneyLimit:	
 13647  238C                     l12809:	
 13648                           ;incstack = 0
 13649                           ; Regs used in _ui_disp_set_transferMoneyLimit: [wreg-fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 13650                           
 13651                           
 13652                           ;ui.c: 390: __t16=*((uint16_t*)(uiAdjbuf));
 13653  238C  3065               	movlw	low (_uiAdjbuf| (0+256))
 13654  238D  0086               	movwf	6
 13655  238E  3001               	movlw	1	; select bank2/3
 13656  238F  0087               	movwf	7
 13657  2390  3F40               	moviw [0]fsr1
 13658  2391  00F9               	movwf	___t16
 13659  2392  3F41               	moviw [1]fsr1
 13660  2393  00FA               	movwf	___t16+1
 13661                           
 13662                           ;ui.c: 391: do{ ui_disp_str_num_s((uint8_t*)"sj-",__t16); lcd_disp_refresh(); }while(0);
      +                          ;
 13663  2394  30D2               	movlw	low (STR_8| (0+32768))
 13664  2395  0020               	movlb	0	; select bank0
 13665  2396  00A9               	movwf	ui_disp_str_num_s@str
 13666  2397  30AA               	movlw	high (STR_8| (0+32768))
 13667  2398  00AA               	movwf	ui_disp_str_num_s@str+1
 13668  2399  087A               	movf	___t16+1,w
 13669  239A  00AC               	movwf	ui_disp_str_num_s@num+1
 13670  239B  0879               	movf	___t16,w
 13671  239C  00AB               	movwf	ui_disp_str_num_s@num
 13672  239D  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13673  23A0  319E  2E9D         	ljmp	l12089
 13674  23A2                     __end_of_ui_disp_set_transferMoneyLimit:	
 13675  23A2                     __ptext10:	
 13676 ;; *************** function _ui_disp_small_flow_how_care *****************
 13677 ;; Defined at:
 13678 ;;		line 297 in file "src/api/ui.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;		None
 13681 ;; Auto vars:     Size  Location     Type
 13682 ;;		None
 13683 ;; Return value:  Size  Location     Type
 13684 ;;                  1    wreg      void 
 13685 ;; Registers used:
 13686 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13687 ;; Tracked objects:
 13688 ;;		On entry : 0/0
 13689 ;;		On exit  : 0/0
 13690 ;;		Unchanged: 0/0
 13691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13693 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13695 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13696 ;;Total ram usage:        2 bytes
 13697 ;; Hardware stack levels used:    1
 13698 ;; Hardware stack levels required when called:    6
 13699 ;; This function calls:
 13700 ;;		_lcd_disp_refresh
 13701 ;;		_ui_disp_str_num_s
 13702 ;; This function is called by:
 13703 ;;		_ui_disp_menu
 13704 ;; This function uses a non-reentrant model
 13705 ;;
 13706                           
 13707                           
 13708                           ;psect for function _ui_disp_small_flow_how_care
 13709  23A2                     _ui_disp_small_flow_how_care:	
 13710  23A2                     l12795:	
 13711                           ;incstack = 0
 13712                           ; Regs used in _ui_disp_small_flow_how_care: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13713                           ;ui.c: 299: do{ ui_disp_str_num_s((uint8_t*)"   cu-",uiAdjbuf[0]); lcd_disp_refresh(); }
      +                          while(0);;
 13714                           
 13715  23A2  309D               	movlw	low (STR_4| (0+32768))
 13716  23A3  0020               	movlb	0	; select bank0
 13717  23A4  00A9               	movwf	ui_disp_str_num_s@str
 13718  23A5  30AA               	movlw	high (STR_4| (0+32768))
 13719  23A6  00AA               	movwf	ui_disp_str_num_s@str+1
 13720  23A7  0022               	movlb	2	; select bank2
 13721  23A8  0865               	movf	_uiAdjbuf^(0+256),w
 13722  23A9  0020               	movlb	0	; select bank0
 13723  23AA  00AF               	movwf	??_ui_disp_small_flow_how_care
 13724  23AB  01B0               	clrf	??_ui_disp_small_flow_how_care+1
 13725  23AC  00AB               	movwf	ui_disp_str_num_s@num
 13726  23AD  0830               	movf	??_ui_disp_small_flow_how_care+1,w
 13727  23AE  00AC               	movwf	ui_disp_str_num_s@num+1
 13728  23AF  319E  26AC  31A0   	fcall	_ui_disp_str_num_s
 13729  23B2  319E  2E9D         	ljmp	l12089
 13730  23B4                     __end_of_ui_disp_small_flow_how_care:	
 13731  23B4                     __ptext124:	
 13732 ;; *************** function _app_flow_rt_volume_cal *****************
 13733 ;; Defined at:
 13734 ;;		line 89 in file "src/app/flow.c"
 13735 ;; Parameters:    Size  Location     Type
 13736 ;;		None
 13737 ;; Auto vars:     Size  Location     Type
 13738 ;;		None
 13739 ;; Return value:  Size  Location     Type
 13740 ;;                  1    wreg      void 
 13741 ;; Registers used:
 13742 ;;		wreg, status,2, status,0, pclath, cstack
 13743 ;; Tracked objects:
 13744 ;;		On entry : 0/0
 13745 ;;		On exit  : 0/0
 13746 ;;		Unchanged: 0/0
 13747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13752 ;;Total ram usage:        0 bytes
 13753 ;; Hardware stack levels used:    1
 13754 ;; Hardware stack levels required when called:    3
 13755 ;; This function calls:
 13756 ;;		___lldiv
 13757 ;;		___lmul
 13758 ;;		___lwdiv
 13759 ;;		___lwmod
 13760 ;; This function is called by:
 13761 ;;		_flow_sampling_process
 13762 ;; This function uses a non-reentrant model
 13763 ;;
 13764                           
 13765                           
 13766                           ;psect for function _app_flow_rt_volume_cal
 13767  23B4                     _app_flow_rt_volume_cal:	
 13768                           
 13769                           ;incstack = 0
 13770                           ; Regs used in _app_flow_rt_volume_cal: [wreg+status,2+status,0+pclath+cstack]
 13771                           ;flow.c: 93: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 13772  23B4  130B               	bcf	11,6	;volatile
 13773  23B5  138B               	bcf	11,7	;volatile
 13774                           
 13775                           ;flow.c: 94: fl_t16 = adcSamplingTimer;
 13776  23B6  0021               	movlb	1	; select bank1
 13777  23B7  082D               	movf	(_adcSamplingTimer+1)^(0+128),w	;volatile
 13778  23B8  0022               	movlb	2	; select bank2
 13779  23B9  00A1               	movwf	(_fl_t16+1)^(0+256)	;volatile
 13780  23BA  0021               	movlb	1	; select bank1
 13781  23BB  082C               	movf	_adcSamplingTimer^(0+128),w	;volatile
 13782  23BC  0022               	movlb	2	; select bank2
 13783  23BD  00A0               	movwf	_fl_t16^(0+256)	;volatile
 13784                           
 13785                           ;flow.c: 95: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 13786  23BE  178B               	bsf	11,7	;volatile
 13787  23BF  170B               	bsf	11,6	;volatile
 13788                           
 13789                           ;flow.c: 96: fl_t32=flow;
 13790  23C0  0021               	movlb	1	; select bank1
 13791  23C1  0830               	movf	_flow^(0+128),w	;volatile
 13792  23C2  00A4               	movwf	_fl_t32^(0+128)	;volatile
 13793  23C3  0831               	movf	(_flow+1)^(0+128),w	;volatile
 13794  23C4  00A5               	movwf	(_fl_t32^(0+128)+1)	;volatile
 13795  23C5  01A6               	clrf	(_fl_t32^(0+128)+2)	;volatile
 13796  23C6  01A7               	clrf	(_fl_t32^(0+128)+3)	;volatile
 13797                           
 13798                           ;flow.c: 97: fl_t32 = fl_t32*fl_t16;
 13799  23C7  0022               	movlb	2	; select bank2
 13800  23C8  0820               	movf	_fl_t16^(0+256),w	;volatile
 13801  23C9  0020               	movlb	0	; select bank0
 13802  23CA  00A0               	movwf	___lmul@multiplier
 13803  23CB  0022               	movlb	2	; select bank2
 13804  23CC  0821               	movf	(_fl_t16+1)^(0+256),w	;volatile
 13805  23CD  0020               	movlb	0	; select bank0
 13806  23CE  00A1               	movwf	___lmul@multiplier+1
 13807  23CF  01A2               	clrf	___lmul@multiplier+2
 13808  23D0  01A3               	clrf	___lmul@multiplier+3
 13809  23D1  0021               	movlb	1	; select bank1
 13810  23D2  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 13811  23D3  0020               	movlb	0	; select bank0
 13812  23D4  00A7               	movwf	___lmul@multiplicand+3
 13813  23D5  0021               	movlb	1	; select bank1
 13814  23D6  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 13815  23D7  0020               	movlb	0	; select bank0
 13816  23D8  00A6               	movwf	___lmul@multiplicand+2
 13817  23D9  0021               	movlb	1	; select bank1
 13818  23DA  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 13819  23DB  0020               	movlb	0	; select bank0
 13820  23DC  00A5               	movwf	___lmul@multiplicand+1
 13821  23DD  0021               	movlb	1	; select bank1
 13822  23DE  0824               	movf	_fl_t32^(0+128),w	;volatile
 13823  23DF  0020               	movlb	0	; select bank0
 13824  23E0  00A4               	movwf	___lmul@multiplicand
 13825  23E1  318F  27D3  31A0   	fcall	___lmul
 13826  23E4  0020               	movlb	0	; select bank0
 13827  23E5  0823               	movf	?___lmul+3,w
 13828  23E6  0021               	movlb	1	; select bank1
 13829  23E7  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 13830  23E8  0020               	movlb	0	; select bank0
 13831  23E9  0822               	movf	?___lmul+2,w
 13832  23EA  0021               	movlb	1	; select bank1
 13833  23EB  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 13834  23EC  0020               	movlb	0	; select bank0
 13835  23ED  0821               	movf	?___lmul+1,w
 13836  23EE  0021               	movlb	1	; select bank1
 13837  23EF  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 13838  23F0  0020               	movlb	0	; select bank0
 13839  23F1  0820               	movf	?___lmul,w
 13840  23F2  0021               	movlb	1	; select bank1
 13841  23F3  00A4               	movwf	_fl_t32^(0+128)	;volatile
 13842                           
 13843                           ;flow.c: 98: fl_t32 /= 1000;
 13844  23F4  0020               	movlb	0	; select bank0
 13845  23F5  3003               	movlw	3
 13846  23F6  01A3               	clrf	___lldiv@divisor+3
 13847  23F7  01A2               	clrf	___lldiv@divisor+2
 13848  23F8  00A1               	movwf	___lldiv@divisor+1
 13849  23F9  30E8               	movlw	232
 13850  23FA  00A0               	movwf	___lldiv@divisor
 13851  23FB  0021               	movlb	1	; select bank1
 13852  23FC  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 13853  23FD  0020               	movlb	0	; select bank0
 13854  23FE  00A7               	movwf	___lldiv@dividend+3
 13855  23FF  0021               	movlb	1	; select bank1
 13856  2400  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 13857  2401  0020               	movlb	0	; select bank0
 13858  2402  00A6               	movwf	___lldiv@dividend+2
 13859  2403  0021               	movlb	1	; select bank1
 13860  2404  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 13861  2405  0020               	movlb	0	; select bank0
 13862  2406  00A5               	movwf	___lldiv@dividend+1
 13863  2407  0021               	movlb	1	; select bank1
 13864  2408  0824               	movf	_fl_t32^(0+128),w	;volatile
 13865  2409  0020               	movlb	0	; select bank0
 13866  240A  00A4               	movwf	___lldiv@dividend
 13867  240B  262C  31A0         	fcall	___lldiv
 13868  240D  0020               	movlb	0	; select bank0
 13869  240E  0823               	movf	?___lldiv+3,w
 13870  240F  0021               	movlb	1	; select bank1
 13871  2410  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 13872  2411  0020               	movlb	0	; select bank0
 13873  2412  0822               	movf	?___lldiv+2,w
 13874  2413  0021               	movlb	1	; select bank1
 13875  2414  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 13876  2415  0020               	movlb	0	; select bank0
 13877  2416  0821               	movf	?___lldiv+1,w
 13878  2417  0021               	movlb	1	; select bank1
 13879  2418  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 13880  2419  0020               	movlb	0	; select bank0
 13881  241A  0820               	movf	?___lldiv,w
 13882  241B  0021               	movlb	1	; select bank1
 13883  241C  00A4               	movwf	_fl_t32^(0+128)	;volatile
 13884                           
 13885                           ;flow.c: 99: rtVolume_L += (uint16_t)(fl_t32 / 60);
 13886  241D  0020               	movlb	0	; select bank0
 13887  241E  303C               	movlw	60
 13888  241F  01A3               	clrf	___lldiv@divisor+3
 13889  2420  01A2               	clrf	___lldiv@divisor+2
 13890  2421  01A1               	clrf	___lldiv@divisor+1
 13891  2422  00A0               	movwf	___lldiv@divisor
 13892  2423  0021               	movlb	1	; select bank1
 13893  2424  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 13894  2425  0020               	movlb	0	; select bank0
 13895  2426  00A7               	movwf	___lldiv@dividend+3
 13896  2427  0021               	movlb	1	; select bank1
 13897  2428  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 13898  2429  0020               	movlb	0	; select bank0
 13899  242A  00A6               	movwf	___lldiv@dividend+2
 13900  242B  0021               	movlb	1	; select bank1
 13901  242C  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 13902  242D  0020               	movlb	0	; select bank0
 13903  242E  00A5               	movwf	___lldiv@dividend+1
 13904  242F  0021               	movlb	1	; select bank1
 13905  2430  0824               	movf	_fl_t32^(0+128),w	;volatile
 13906  2431  0020               	movlb	0	; select bank0
 13907  2432  00A4               	movwf	___lldiv@dividend
 13908  2433  262C               	fcall	___lldiv
 13909  2434  0020               	movlb	0	; select bank0
 13910  2435  0820               	movf	?___lldiv,w
 13911  2436  0021               	movlb	1	; select bank1
 13912  2437  07B2               	addwf	_rtVolume_L^(0+128),f	;volatile
 13913  2438  0020               	movlb	0	; select bank0
 13914  2439  0821               	movf	?___lldiv+1,w
 13915  243A  0021               	movlb	1	; select bank1
 13916  243B  3DB3               	addwfc	(_rtVolume_L+1)^(0+128),f	;volatile
 13917                           
 13918                           ;flow.c: 101: rtVolume_m3 += (rtVolume_L / 1000);
 13919  243C  30E8               	movlw	232
 13920  243D  0020               	movlb	0	; select bank0
 13921  243E  00A2               	movwf	___lwdiv@divisor
 13922  243F  3003               	movlw	3
 13923  2440  00A3               	movwf	___lwdiv@divisor+1
 13924  2441  0021               	movlb	1	; select bank1
 13925  2442  0833               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 13926  2443  0020               	movlb	0	; select bank0
 13927  2444  00A5               	movwf	___lwdiv@dividend+1
 13928  2445  0021               	movlb	1	; select bank1
 13929  2446  0832               	movf	_rtVolume_L^(0+128),w	;volatile
 13930  2447  0020               	movlb	0	; select bank0
 13931  2448  00A4               	movwf	___lwdiv@dividend
 13932  2449  319F  2770  31A0   	fcall	___lwdiv
 13933  244C  0020               	movlb	0	; select bank0
 13934  244D  0822               	movf	?___lwdiv,w
 13935  244E  0021               	movlb	1	; select bank1
 13936  244F  07B4               	addwf	_rtVolume_m3^(0+128),f	;volatile
 13937  2450  0020               	movlb	0	; select bank0
 13938  2451  0823               	movf	?___lwdiv+1,w
 13939  2452  0021               	movlb	1	; select bank1
 13940  2453  3DB5               	addwfc	(_rtVolume_m3+1)^(0+128),f	;volatile
 13941                           
 13942                           ;flow.c: 102: rtVolume_L %= 1000;
 13943  2454  30E8               	movlw	232
 13944  2455  00F3               	movwf	___lwmod@divisor
 13945  2456  3003               	movlw	3
 13946  2457  00F4               	movwf	___lwmod@divisor+1
 13947  2458  0833               	movf	(_rtVolume_L+1)^(0+128),w	;volatile
 13948  2459  00F6               	movwf	___lwmod@dividend+1
 13949  245A  0832               	movf	_rtVolume_L^(0+128),w	;volatile
 13950  245B  00F5               	movwf	___lwmod@dividend
 13951  245C  319F  2744         	fcall	___lwmod
 13952  245E  0874               	movf	?___lwmod+1,w
 13953  245F  0021               	movlb	1	; select bank1
 13954  2460  00B3               	movwf	(_rtVolume_L+1)^(0+128)	;volatile
 13955  2461  0873               	movf	?___lwmod,w
 13956  2462  00B2               	movwf	_rtVolume_L^(0+128)	;volatile
 13957                           
 13958                           ;flow.c: 103: if(rtVolume_m3>1000){
 13959  2463  3003               	movlw	3
 13960  2464  0235               	subwf	(_rtVolume_m3+1)^(0+128),w	;volatile
 13961  2465  30E9               	movlw	233
 13962  2466  1903               	skipnz
 13963  2467  0234               	subwf	_rtVolume_m3^(0+128),w	;volatile
 13964  2468  1803               	btfsc	3,0
 13965                           
 13966                           ;flow.c: 104: Event |=(uint8_t)(0x01<<6);
 13967  2469  1736               	bsf	_Event^(0+128),6
 13968  246A  0008               	return
 13969  246B                     __end_of_app_flow_rt_volume_cal:	
 13970  246B                     __ptext23:	
 13971 ;; *************** function _ui_disp_flow *****************
 13972 ;; Defined at:
 13973 ;;		line 102 in file "src/api/ui.c"
 13974 ;; Parameters:    Size  Location     Type
 13975 ;;		None
 13976 ;; Auto vars:     Size  Location     Type
 13977 ;;  flw             4   34[BANK0 ] unsigned long 
 13978 ;;  decnum          1   38[BANK0 ] unsigned char 
 13979 ;; Return value:  Size  Location     Type
 13980 ;;                  1    wreg      void 
 13981 ;; Registers used:
 13982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13983 ;; Tracked objects:
 13984 ;;		On entry : 0/0
 13985 ;;		On exit  : 0/0
 13986 ;;		Unchanged: 0/0
 13987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 13988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 13989 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 13990 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 13991 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 13992 ;;Total ram usage:        7 bytes
 13993 ;; Hardware stack levels used:    1
 13994 ;; Hardware stack levels required when called:    5
 13995 ;; This function calls:
 13996 ;;		_lcd_clear_buffer
 13997 ;;		_lcd_disp_dp
 13998 ;;		_lcd_disp_str
 13999 ;;		_m_mem_set
 14000 ;;		_ui_head_hide
 14001 ;;		_ui_uint32_2_str
 14002 ;; This function is called by:
 14003 ;;		_ui_disp_menu
 14004 ;; This function uses a non-reentrant model
 14005 ;;
 14006                           
 14007                           
 14008                           ;psect for function _ui_disp_flow
 14009  246B                     _ui_disp_flow:	
 14010                           
 14011                           ;ui.c: 103: uint32_t flw = flow;
 14012                           
 14013                           ;incstack = 0
 14014                           ; Regs used in _ui_disp_flow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14015  246B  0021               	movlb	1	; select bank1
 14016  246C  0830               	movf	_flow^(0+128),w	;volatile
 14017  246D  0020               	movlb	0	; select bank0
 14018  246E  00C2               	movwf	ui_disp_flow@flw
 14019  246F  0021               	movlb	1	; select bank1
 14020  2470  0831               	movf	(_flow+1)^(0+128),w	;volatile
 14021  2471  0020               	movlb	0	; select bank0
 14022  2472  00C3               	movwf	ui_disp_flow@flw+1
 14023  2473  303D               	movlw	61
 14024  2474  01C4               	clrf	ui_disp_flow@flw+2
 14025  2475  01C5               	clrf	ui_disp_flow@flw+3
 14026                           
 14027                           ;ui.c: 104: uint8_t decnum = mainSystemData.imdFlowResolution;
 14028  2476  0084               	movwf	4
 14029  2477  30BF               	movlw	191
 14030  2478  0085               	movwf	5
 14031  2479  0800               	movf	0,w	;code access
 14032  247A  00C0               	movwf	??_ui_disp_flow
 14033  247B  00C6               	movwf	ui_disp_flow@decnum
 14034                           
 14035                           ;ui.c: 105: if (decnum > 3)decnum = 3;
 14036  247C  3004               	movlw	4
 14037  247D  0246               	subwf	ui_disp_flow@decnum,w
 14038  247E  1C03               	skipc
 14039  247F  2C83               	goto	l12735
 14040  2480  3003               	movlw	3
 14041  2481  00C0               	movwf	??_ui_disp_flow
 14042  2482  00C6               	movwf	ui_disp_flow@decnum
 14043  2483                     l12735:	
 14044                           
 14045                           ;ui.c: 107: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 14046  2483  305C               	movlw	low _lcdBuf
 14047  2484  00F3               	movwf	m_mem_set@buf
 14048  2485  3001               	movlw	high _lcdBuf
 14049  2486  00F4               	movwf	m_mem_set@buf+1
 14050  2487  3030               	movlw	48
 14051  2488  00C0               	movwf	??_ui_disp_flow
 14052  2489  00F5               	movwf	m_mem_set@x
 14053  248A  3009               	movlw	9
 14054  248B  00C1               	movwf	??_ui_disp_flow+1
 14055  248C  00F6               	movwf	m_mem_set@len
 14056  248D  319F  27A4  31A0   	fcall	_m_mem_set
 14057                           
 14058                           ;ui.c: 108: lcdBuf[8] = '\0';
 14059  2490  0022               	movlb	2	; select bank2
 14060  2491  01E4               	clrf	(_lcdBuf^(0+256)+8)
 14061                           
 14062                           ;ui.c: 110: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), flw, 8);
 14063  2492  0020               	movlb	0	; select bank0
 14064  2493  0845               	movf	ui_disp_flow@flw+3,w
 14065  2494  00B9               	movwf	ui_uint32_2_str@x+3
 14066  2495  0844               	movf	ui_disp_flow@flw+2,w
 14067  2496  00B8               	movwf	ui_uint32_2_str@x+2
 14068  2497  0843               	movf	ui_disp_flow@flw+1,w
 14069  2498  00B7               	movwf	ui_uint32_2_str@x+1
 14070  2499  0842               	movf	ui_disp_flow@flw,w
 14071  249A  00B6               	movwf	ui_uint32_2_str@x
 14072  249B  3008               	movlw	8
 14073  249C  00C0               	movwf	??_ui_disp_flow
 14074  249D  00BA               	movwf	ui_uint32_2_str@len
 14075  249E  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 14076  249F  318A  2236  31A0   	fcall	_ui_uint32_2_str
 14077                           
 14078                           ;ui.c: 111: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 14079  24A2  0020               	movlb	0	; select bank0
 14080  24A3  0846               	movf	ui_disp_flow@decnum,w
 14081  24A4  3E01               	addlw	1
 14082  24A5  3AFF               	xorlw	255
 14083  24A6  3E01               	addlw	1
 14084  24A7  3E08               	addlw	8
 14085  24A8  00C0               	movwf	??_ui_disp_flow
 14086  24A9  00F3               	movwf	ui_head_hide@loc
 14087  24AA  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 14088  24AB  318A  221E  31A0   	fcall	_ui_head_hide
 14089                           
 14090                           ;ui.c: 112: lcd_clear_buffer();
 14091  24AE  319F  27B4  31A0   	fcall	_lcd_clear_buffer
 14092                           
 14093                           ;ui.c: 113: lcd_disp_dp(decnum, 1);
 14094  24B1  0020               	movlb	0	; select bank0
 14095  24B2  01B2               	clrf	lcd_disp_dp@show
 14096  24B3  0AB2               	incf	lcd_disp_dp@show,f
 14097  24B4  0846               	movf	ui_disp_flow@decnum,w
 14098  24B5  267A               	fcall	_lcd_disp_dp
 14099                           
 14100                           ;ui.c: 114: lcd_disp_str(lcdBuf);
 14101  24B6  305C               	movlw	low _lcdBuf
 14102  24B7  0020               	movlb	0	; select bank0
 14103  24B8  00A2               	movwf	lcd_disp_str@str
 14104  24B9  3001               	movlw	high _lcdBuf
 14105  24BA  00A3               	movwf	lcd_disp_str@str+1
 14106  24BB  319F  2FBD         	ljmp	l12289
 14107  24BD                     __end_of_ui_disp_flow:	
 14108  24BD                     __ptext25:	
 14109 ;; *************** function _ui_disp_totale_v *****************
 14110 ;; Defined at:
 14111 ;;		line 118 in file "src/api/ui.c"
 14112 ;; Parameters:    Size  Location     Type
 14113 ;;		None
 14114 ;; Auto vars:     Size  Location     Type
 14115 ;;  decnum          1   34[BANK0 ] unsigned char 
 14116 ;; Return value:  Size  Location     Type
 14117 ;;                  1    wreg      void 
 14118 ;; Registers used:
 14119 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14120 ;; Tracked objects:
 14121 ;;		On entry : 0/0
 14122 ;;		On exit  : 0/0
 14123 ;;		Unchanged: 0/0
 14124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14126 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14127 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14129 ;;Total ram usage:        3 bytes
 14130 ;; Hardware stack levels used:    1
 14131 ;; Hardware stack levels required when called:    5
 14132 ;; This function calls:
 14133 ;;		_lcd_clear_buffer
 14134 ;;		_lcd_disp_dp
 14135 ;;		_lcd_disp_str
 14136 ;;		_m_mem_set
 14137 ;;		_ui_head_hide
 14138 ;;		_ui_uint32_2_str
 14139 ;; This function is called by:
 14140 ;;		_ui_disp_clear_totale
 14141 ;;		_ui_disp_menu
 14142 ;; This function uses a non-reentrant model
 14143 ;;
 14144                           
 14145                           
 14146                           ;psect for function _ui_disp_totale_v
 14147  24BD                     _ui_disp_totale_v:	
 14148                           
 14149                           ;ui.c: 119: uint8_t decnum = mainSystemData.volumeResolution;
 14150                           
 14151                           ;incstack = 0
 14152                           ; Regs used in _ui_disp_totale_v: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14153  24BD  303B               	movlw	59
 14154  24BE  0084               	movwf	4
 14155  24BF  30BF               	movlw	191
 14156  24C0  0085               	movwf	5
 14157  24C1  0800               	movf	0,w	;code access
 14158  24C2  0020               	movlb	0	; select bank0
 14159  24C3  00C0               	movwf	??_ui_disp_totale_v
 14160  24C4  00C2               	movwf	ui_disp_totale_v@decnum
 14161                           
 14162                           ;ui.c: 120: __t32=mainSystemData.totalConsumeVolume;
 14163  24C5  3030               	movlw	48
 14164  24C6  0084               	movwf	4
 14165  24C7  3F00               	moviw [0]fsr0
 14166  24C8  0021               	movlb	1	; select bank1
 14167  24C9  00A0               	movwf	___t32^(0+128)
 14168  24CA  3F01               	moviw [1]fsr0
 14169  24CB  00A1               	movwf	(___t32+1)^(0+128)
 14170  24CC  3F02               	moviw [2]fsr0
 14171  24CD  00A2               	movwf	(___t32+2)^(0+128)
 14172  24CE  3F03               	moviw [3]fsr0
 14173  24CF  00A3               	movwf	(___t32+3)^(0+128)
 14174                           
 14175                           ;ui.c: 121: if (decnum > 3)decnum = 3;
 14176  24D0  3004               	movlw	4
 14177  24D1  0020               	movlb	0	; select bank0
 14178  24D2  0242               	subwf	ui_disp_totale_v@decnum,w
 14179  24D3  1C03               	skipc
 14180  24D4  2CD8               	goto	l435
 14181  24D5  3003               	movlw	3
 14182  24D6  00C0               	movwf	??_ui_disp_totale_v
 14183  24D7  00C2               	movwf	ui_disp_totale_v@decnum
 14184  24D8                     l435:	
 14185                           
 14186                           ;ui.c: 122: __t32 += rtVolume_m3;
 14187  24D8  0021               	movlb	1	; select bank1
 14188  24D9  0834               	movf	_rtVolume_m3^(0+128),w	;volatile
 14189  24DA  07A0               	addwf	___t32^(0+128),f
 14190  24DB  0835               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 14191  24DC  3DA1               	addwfc	(___t32+1)^(0+128),f
 14192  24DD  3000               	movlw	0
 14193  24DE  3DA2               	addwfc	(___t32+2)^(0+128),f
 14194  24DF  3DA3               	addwfc	(___t32+3)^(0+128),f
 14195                           
 14196                           ;ui.c: 123: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 14197  24E0  305C               	movlw	low _lcdBuf
 14198  24E1  00F3               	movwf	m_mem_set@buf
 14199  24E2  3001               	movlw	high _lcdBuf
 14200  24E3  00F4               	movwf	m_mem_set@buf+1
 14201  24E4  3030               	movlw	48
 14202  24E5  0020               	movlb	0	; select bank0
 14203  24E6  00C0               	movwf	??_ui_disp_totale_v
 14204  24E7  00F5               	movwf	m_mem_set@x
 14205  24E8  3009               	movlw	9
 14206  24E9  00C1               	movwf	??_ui_disp_totale_v+1
 14207  24EA  00F6               	movwf	m_mem_set@len
 14208  24EB  319F  27A4  31A0   	fcall	_m_mem_set
 14209                           
 14210                           ;ui.c: 124: lcdBuf[8] = '\0';
 14211  24EE  0022               	movlb	2	; select bank2
 14212  24EF  01E4               	clrf	(_lcdBuf^(0+256)+8)
 14213                           
 14214                           ;ui.c: 125: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __t32, 8);
 14215  24F0  0021               	movlb	1	; select bank1
 14216  24F1  0823               	movf	(___t32+3)^(0+128),w
 14217  24F2  0020               	movlb	0	; select bank0
 14218  24F3  00B9               	movwf	ui_uint32_2_str@x+3
 14219  24F4  0021               	movlb	1	; select bank1
 14220  24F5  0822               	movf	(___t32+2)^(0+128),w
 14221  24F6  0020               	movlb	0	; select bank0
 14222  24F7  00B8               	movwf	ui_uint32_2_str@x+2
 14223  24F8  0021               	movlb	1	; select bank1
 14224  24F9  0821               	movf	(___t32+1)^(0+128),w
 14225  24FA  0020               	movlb	0	; select bank0
 14226  24FB  00B7               	movwf	ui_uint32_2_str@x+1
 14227  24FC  0021               	movlb	1	; select bank1
 14228  24FD  0820               	movf	___t32^(0+128),w
 14229  24FE  0020               	movlb	0	; select bank0
 14230  24FF  00B6               	movwf	ui_uint32_2_str@x
 14231  2500  3008               	movlw	8
 14232  2501  00C0               	movwf	??_ui_disp_totale_v
 14233  2502  00BA               	movwf	ui_uint32_2_str@len
 14234  2503  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 14235  2504  318A  2236  31A0   	fcall	_ui_uint32_2_str
 14236                           
 14237                           ;ui.c: 126: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 14238  2507  0020               	movlb	0	; select bank0
 14239  2508  0842               	movf	ui_disp_totale_v@decnum,w
 14240  2509  3E01               	addlw	1
 14241  250A  3AFF               	xorlw	255
 14242  250B  3E01               	addlw	1
 14243  250C  3E08               	addlw	8
 14244  250D  00C0               	movwf	??_ui_disp_totale_v
 14245  250E  00F3               	movwf	ui_head_hide@loc
 14246  250F  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 14247  2510  318A  221E  31A0   	fcall	_ui_head_hide
 14248                           
 14249                           ;ui.c: 127: lcd_clear_buffer();
 14250  2513  319F  27B4  31A0   	fcall	_lcd_clear_buffer
 14251                           
 14252                           ;ui.c: 128: lcd_disp_dp(decnum, 1);
 14253  2516  0020               	movlb	0	; select bank0
 14254  2517  01B2               	clrf	lcd_disp_dp@show
 14255  2518  0AB2               	incf	lcd_disp_dp@show,f
 14256  2519  0842               	movf	ui_disp_totale_v@decnum,w
 14257  251A  267A               	fcall	_lcd_disp_dp
 14258                           
 14259                           ;ui.c: 129: lcd_disp_str(lcdBuf);
 14260  251B  305C               	movlw	low _lcdBuf
 14261  251C  0020               	movlb	0	; select bank0
 14262  251D  00A2               	movwf	lcd_disp_str@str
 14263  251E  3001               	movlw	high _lcdBuf
 14264  251F  00A3               	movwf	lcd_disp_str@str+1
 14265  2520  319F  2FBD         	ljmp	l12289
 14266  2522                     __end_of_ui_disp_totale_v:	
 14267  2522                     __ptext15:	
 14268 ;; *************** function _ui_disp_set_calib *****************
 14269 ;; Defined at:
 14270 ;;		line 421 in file "src/api/ui.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;		None
 14273 ;; Auto vars:     Size  Location     Type
 14274 ;;  loc             1   35[BANK0 ] unsigned char 
 14275 ;; Return value:  Size  Location     Type
 14276 ;;                  1    wreg      void 
 14277 ;; Registers used:
 14278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14279 ;; Tracked objects:
 14280 ;;		On entry : 0/0
 14281 ;;		On exit  : 0/0
 14282 ;;		Unchanged: 0/0
 14283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14286 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 14287 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14288 ;;Total ram usage:        4 bytes
 14289 ;; Hardware stack levels used:    1
 14290 ;; Hardware stack levels required when called:    5
 14291 ;; This function calls:
 14292 ;;		___awdiv
 14293 ;;		___awmod
 14294 ;;		___lbmod
 14295 ;;		_lcd_clear_buffer
 14296 ;;		_lcd_disp_dp
 14297 ;;		_lcd_disp_str
 14298 ;;		_m_mem_set
 14299 ;;		_ui_head_hide
 14300 ;;		_ui_uint32_2_str
 14301 ;; This function is called by:
 14302 ;;		_ui_disp_menu
 14303 ;; This function uses a non-reentrant model
 14304 ;;
 14305                           
 14306                           
 14307                           ;psect for function _ui_disp_set_calib
 14308  2522                     _ui_disp_set_calib:	
 14309  2522                     l12845:	
 14310                           ;incstack = 0
 14311                           ; Regs used in _ui_disp_set_calib: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14312                           
 14313                           
 14314                           ;ui.c: 422: uint8_t loc=calibLocation;
 14315  2522  0021               	movlb	1	; select bank1
 14316  2523  0839               	movf	_calibLocation^(0+128),w
 14317  2524  0020               	movlb	0	; select bank0
 14318  2525  00C0               	movwf	??_ui_disp_set_calib
 14319  2526  00C3               	movwf	ui_disp_set_calib@loc
 14320                           
 14321                           ;ui.c: 423: m_mem_set(lcdBuf,'0',sizeof(lcdBuf));
 14322  2527  305C               	movlw	low _lcdBuf
 14323  2528  00F3               	movwf	m_mem_set@buf
 14324  2529  3001               	movlw	high _lcdBuf
 14325  252A  00F4               	movwf	m_mem_set@buf+1
 14326  252B  3030               	movlw	48
 14327  252C  00C0               	movwf	??_ui_disp_set_calib
 14328  252D  00F5               	movwf	m_mem_set@x
 14329  252E  3009               	movlw	9
 14330  252F  00C1               	movwf	??_ui_disp_set_calib+1
 14331  2530  00F6               	movwf	m_mem_set@len
 14332  2531  319F  27A4  31A0   	fcall	_m_mem_set
 14333                           
 14334                           ;ui.c: 424: loc%=100;
 14335  2534  3064               	movlw	100
 14336  2535  0020               	movlb	0	; select bank0
 14337  2536  00C0               	movwf	??_ui_disp_set_calib
 14338  2537  00F3               	movwf	___lbmod@divisor
 14339  2538  0843               	movf	ui_disp_set_calib@loc,w
 14340  2539  2730               	fcall	___lbmod
 14341  253A  0020               	movlb	0	; select bank0
 14342  253B  00C1               	movwf	??_ui_disp_set_calib+1
 14343  253C  00C3               	movwf	ui_disp_set_calib@loc
 14344                           
 14345                           ;ui.c: 425: lcdBuf[0]=loc/10 + '0';
 14346  253D  300A               	movlw	10
 14347  253E  00F3               	movwf	___awdiv@divisor
 14348  253F  01F4               	clrf	___awdiv@divisor+1
 14349  2540  0843               	movf	ui_disp_set_calib@loc,w
 14350  2541  00C0               	movwf	??_ui_disp_set_calib
 14351  2542  01C1               	clrf	??_ui_disp_set_calib+1
 14352  2543  00F5               	movwf	___awdiv@dividend
 14353  2544  0841               	movf	??_ui_disp_set_calib+1,w
 14354  2545  00F6               	movwf	___awdiv@dividend+1
 14355  2546  318E  26B4  31A0   	fcall	___awdiv
 14356  2549  0873               	movf	?___awdiv,w
 14357  254A  3E30               	addlw	48
 14358  254B  0020               	movlb	0	; select bank0
 14359  254C  00C2               	movwf	??_ui_disp_set_calib+2
 14360  254D  0022               	movlb	2	; select bank2
 14361  254E  00DC               	movwf	_lcdBuf^(0+256)
 14362                           
 14363                           ;ui.c: 426: lcdBuf[1]=loc%10 + '0';
 14364  254F  300A               	movlw	10
 14365  2550  00F3               	movwf	___awmod@divisor
 14366  2551  01F4               	clrf	___awmod@divisor+1
 14367  2552  0020               	movlb	0	; select bank0
 14368  2553  0843               	movf	ui_disp_set_calib@loc,w
 14369  2554  00C0               	movwf	??_ui_disp_set_calib
 14370  2555  01C1               	clrf	??_ui_disp_set_calib+1
 14371  2556  00F5               	movwf	___awmod@dividend
 14372  2557  0841               	movf	??_ui_disp_set_calib+1,w
 14373  2558  00F6               	movwf	___awmod@dividend+1
 14374  2559  274E               	fcall	___awmod
 14375  255A  0873               	movf	?___awmod,w
 14376  255B  3E30               	addlw	48
 14377  255C  0020               	movlb	0	; select bank0
 14378  255D  00C2               	movwf	??_ui_disp_set_calib+2
 14379  255E  0022               	movlb	2	; select bank2
 14380  255F  00DD               	movwf	(_lcdBuf^(0+256)+1)
 14381                           
 14382                           ;ui.c: 427: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), *((int16_t*)(uiAd
      +                          jbuf)), 4);
 14383  2560  3065               	movlw	low (_uiAdjbuf| (0+256))
 14384  2561  0086               	movwf	6
 14385  2562  3001               	movlw	1	; select bank2/3
 14386  2563  0087               	movwf	7
 14387  2564  3F40               	moviw [0]fsr1
 14388  2565  0020               	movlb	0	; select bank0
 14389  2566  00C0               	movwf	??_ui_disp_set_calib
 14390  2567  3F41               	moviw [1]fsr1
 14391  2568  00C1               	movwf	??_ui_disp_set_calib+1
 14392  2569  0840               	movf	??_ui_disp_set_calib,w
 14393  256A  00B6               	movwf	ui_uint32_2_str@x
 14394  256B  0841               	movf	??_ui_disp_set_calib+1,w
 14395  256C  00B7               	movwf	ui_uint32_2_str@x+1
 14396  256D  0D89               	rlf	9,f
 14397  256E  3B89               	subwfb	9,f
 14398  256F  0989               	comf	9,f
 14399  2570  00B8               	movwf	ui_uint32_2_str@x+2
 14400  2571  00B9               	movwf	ui_uint32_2_str@x+3
 14401  2572  3004               	movlw	4
 14402  2573  00C2               	movwf	??_ui_disp_set_calib+2
 14403  2574  00BA               	movwf	ui_uint32_2_str@len
 14404  2575  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 14405  2576  318A  2236  31A0   	fcall	_ui_uint32_2_str
 14406                           
 14407                           ;ui.c: 428: ui_head_hide(lcdBuf+2, 4);
 14408  2579  3004               	movlw	4
 14409  257A  0020               	movlb	0	; select bank0
 14410  257B  00C0               	movwf	??_ui_disp_set_calib
 14411  257C  00F3               	movwf	ui_head_hide@loc
 14412  257D  305E               	movlw	(low ((_lcdBuf| (0+256)+2)))& (0+255)
 14413  257E  318A  221E  31A0   	fcall	_ui_head_hide
 14414                           
 14415                           ;ui.c: 429: lcd_clear_buffer();
 14416  2581  319F  27B4  31A0   	fcall	_lcd_clear_buffer
 14417                           
 14418                           ;ui.c: 430: lcd_disp_dp(1, 1);
 14419  2584  0020               	movlb	0	; select bank0
 14420  2585  3001               	movlw	1
 14421  2586  01B2               	clrf	lcd_disp_dp@show
 14422  2587  0AB2               	incf	lcd_disp_dp@show,f
 14423  2588  267A               	fcall	_lcd_disp_dp
 14424                           
 14425                           ;ui.c: 431: lcd_disp_str(lcdBuf);
 14426  2589  305C               	movlw	low _lcdBuf
 14427  258A  0020               	movlb	0	; select bank0
 14428  258B  00A2               	movwf	lcd_disp_str@str
 14429  258C  3001               	movlw	high _lcdBuf
 14430  258D  00A3               	movwf	lcd_disp_str@str+1
 14431  258E  319F  2FBD         	ljmp	l12289
 14432  2590                     __end_of_ui_disp_set_calib:	
 14433  2590                     __ptext14:	
 14434 ;; *************** function _ui_disp_set_line *****************
 14435 ;; Defined at:
 14436 ;;		line 273 in file "src/api/ui.c"
 14437 ;; Parameters:    Size  Location     Type
 14438 ;;		None
 14439 ;; Auto vars:     Size  Location     Type
 14440 ;;  flw             4   34[BANK0 ] unsigned long 
 14441 ;;  decnum          1   38[BANK0 ] unsigned char 
 14442 ;; Return value:  Size  Location     Type
 14443 ;;                  1    wreg      void 
 14444 ;; Registers used:
 14445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14446 ;; Tracked objects:
 14447 ;;		On entry : 0/0
 14448 ;;		On exit  : 0/0
 14449 ;;		Unchanged: 0/0
 14450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14452 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14454 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 14455 ;;Total ram usage:        7 bytes
 14456 ;; Hardware stack levels used:    1
 14457 ;; Hardware stack levels required when called:    5
 14458 ;; This function calls:
 14459 ;;		___lldiv
 14460 ;;		___lmul
 14461 ;;		_lcd_clear_buffer
 14462 ;;		_lcd_disp_dp
 14463 ;;		_lcd_disp_str
 14464 ;;		_m_mem_set
 14465 ;;		_ui_head_hide
 14466 ;;		_ui_uint32_2_str
 14467 ;; This function is called by:
 14468 ;;		_ui_disp_menu
 14469 ;; This function uses a non-reentrant model
 14470 ;;
 14471                           
 14472                           
 14473                           ;psect for function _ui_disp_set_line
 14474  2590                     _ui_disp_set_line:	
 14475  2590                     l12767:	
 14476                           ;incstack = 0
 14477                           ; Regs used in _ui_disp_set_line: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14478                           
 14479                           
 14480                           ;ui.c: 274: uint32_t flw = flow;
 14481  2590  0021               	movlb	1	; select bank1
 14482  2591  0830               	movf	_flow^(0+128),w	;volatile
 14483  2592  0020               	movlb	0	; select bank0
 14484  2593  00C2               	movwf	ui_disp_set_line@flw
 14485  2594  0021               	movlb	1	; select bank1
 14486  2595  0831               	movf	(_flow+1)^(0+128),w	;volatile
 14487  2596  0020               	movlb	0	; select bank0
 14488  2597  00C3               	movwf	ui_disp_set_line@flw+1
 14489  2598  303D               	movlw	61
 14490  2599  01C4               	clrf	ui_disp_set_line@flw+2
 14491  259A  01C5               	clrf	ui_disp_set_line@flw+3
 14492                           
 14493                           ;ui.c: 275: uint8_t decnum = mainSystemData.imdFlowResolution;
 14494  259B  0084               	movwf	4
 14495  259C  30BF               	movlw	191
 14496  259D  0085               	movwf	5
 14497  259E  0800               	movf	0,w	;code access
 14498  259F  00C0               	movwf	??_ui_disp_set_line
 14499  25A0  00C6               	movwf	ui_disp_set_line@decnum
 14500                           
 14501                           ;ui.c: 276: if (decnum > 3)decnum = 3;
 14502  25A1  3004               	movlw	4
 14503  25A2  0246               	subwf	ui_disp_set_line@decnum,w
 14504  25A3  1C03               	skipc
 14505  25A4  2DA8               	goto	l12775
 14506  25A5  3003               	movlw	3
 14507  25A6  00C0               	movwf	??_ui_disp_set_line
 14508  25A7  00C6               	movwf	ui_disp_set_line@decnum
 14509  25A8                     l12775:	
 14510                           
 14511                           ;ui.c: 278: flw=flw * (*((uint16_t*)uiAdjbuf));
 14512  25A8  3065               	movlw	low (_uiAdjbuf| (0+256))
 14513  25A9  0086               	movwf	6
 14514  25AA  3001               	movlw	1	; select bank2/3
 14515  25AB  0087               	movwf	7
 14516  25AC  3F40               	moviw [0]fsr1
 14517  25AD  00C0               	movwf	??_ui_disp_set_line
 14518  25AE  3F41               	moviw [1]fsr1
 14519  25AF  00C1               	movwf	??_ui_disp_set_line+1
 14520  25B0  0840               	movf	??_ui_disp_set_line,w
 14521  25B1  00A0               	movwf	___lmul@multiplier
 14522  25B2  0841               	movf	??_ui_disp_set_line+1,w
 14523  25B3  00A1               	movwf	___lmul@multiplier+1
 14524  25B4  01A2               	clrf	___lmul@multiplier+2
 14525  25B5  01A3               	clrf	___lmul@multiplier+3
 14526  25B6  0845               	movf	ui_disp_set_line@flw+3,w
 14527  25B7  00A7               	movwf	___lmul@multiplicand+3
 14528  25B8  0844               	movf	ui_disp_set_line@flw+2,w
 14529  25B9  00A6               	movwf	___lmul@multiplicand+2
 14530  25BA  0843               	movf	ui_disp_set_line@flw+1,w
 14531  25BB  00A5               	movwf	___lmul@multiplicand+1
 14532  25BC  0842               	movf	ui_disp_set_line@flw,w
 14533  25BD  00A4               	movwf	___lmul@multiplicand
 14534  25BE  318F  27D3  31A0   	fcall	___lmul
 14535  25C1  0020               	movlb	0	; select bank0
 14536  25C2  0823               	movf	?___lmul+3,w
 14537  25C3  00C5               	movwf	ui_disp_set_line@flw+3
 14538  25C4  0822               	movf	?___lmul+2,w
 14539  25C5  00C4               	movwf	ui_disp_set_line@flw+2
 14540  25C6  0821               	movf	?___lmul+1,w
 14541  25C7  00C3               	movwf	ui_disp_set_line@flw+1
 14542  25C8  0820               	movf	?___lmul,w
 14543  25C9  00C2               	movwf	ui_disp_set_line@flw
 14544                           
 14545                           ;ui.c: 279: flw=flw/mainSystemData.flowRatio;
 14546  25CA  301A               	movlw	26
 14547  25CB  0084               	movwf	4
 14548  25CC  30BF               	movlw	191
 14549  25CD  0085               	movwf	5
 14550  25CE  3F00               	moviw [0]fsr0
 14551  25CF  00C0               	movwf	??_ui_disp_set_line
 14552  25D0  3F01               	moviw [1]fsr0
 14553  25D1  00C1               	movwf	??_ui_disp_set_line+1
 14554  25D2  0840               	movf	??_ui_disp_set_line,w
 14555  25D3  00A0               	movwf	___lldiv@divisor
 14556  25D4  0841               	movf	??_ui_disp_set_line+1,w
 14557  25D5  00A1               	movwf	___lldiv@divisor+1
 14558  25D6  0D89               	rlf	9,f
 14559  25D7  3B89               	subwfb	9,f
 14560  25D8  0989               	comf	9,f
 14561  25D9  00A2               	movwf	___lldiv@divisor+2
 14562  25DA  00A3               	movwf	___lldiv@divisor+3
 14563  25DB  0845               	movf	ui_disp_set_line@flw+3,w
 14564  25DC  00A7               	movwf	___lldiv@dividend+3
 14565  25DD  0844               	movf	ui_disp_set_line@flw+2,w
 14566  25DE  00A6               	movwf	___lldiv@dividend+2
 14567  25DF  0843               	movf	ui_disp_set_line@flw+1,w
 14568  25E0  00A5               	movwf	___lldiv@dividend+1
 14569  25E1  0842               	movf	ui_disp_set_line@flw,w
 14570  25E2  00A4               	movwf	___lldiv@dividend
 14571  25E3  262C               	fcall	___lldiv
 14572  25E4  0020               	movlb	0	; select bank0
 14573  25E5  0823               	movf	?___lldiv+3,w
 14574  25E6  00C5               	movwf	ui_disp_set_line@flw+3
 14575  25E7  0822               	movf	?___lldiv+2,w
 14576  25E8  00C4               	movwf	ui_disp_set_line@flw+2
 14577  25E9  0821               	movf	?___lldiv+1,w
 14578  25EA  00C3               	movwf	ui_disp_set_line@flw+1
 14579  25EB  0820               	movf	?___lldiv,w
 14580  25EC  00C2               	movwf	ui_disp_set_line@flw
 14581                           
 14582                           ;ui.c: 281: m_mem_set(lcdBuf, '0', sizeof (lcdBuf));
 14583  25ED  305C               	movlw	low _lcdBuf
 14584  25EE  00F3               	movwf	m_mem_set@buf
 14585  25EF  3001               	movlw	high _lcdBuf
 14586  25F0  00F4               	movwf	m_mem_set@buf+1
 14587  25F1  3030               	movlw	48
 14588  25F2  00C0               	movwf	??_ui_disp_set_line
 14589  25F3  00F5               	movwf	m_mem_set@x
 14590  25F4  3009               	movlw	9
 14591  25F5  00C1               	movwf	??_ui_disp_set_line+1
 14592  25F6  00F6               	movwf	m_mem_set@len
 14593  25F7  319F  27A4  31A0   	fcall	_m_mem_set
 14594                           
 14595                           ;ui.c: 282: lcdBuf[8] = '\0';
 14596  25FA  0022               	movlb	2	; select bank2
 14597  25FB  01E4               	clrf	(_lcdBuf^(0+256)+8)
 14598                           
 14599                           ;ui.c: 284: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), flw, 8 - 1);
 14600  25FC  0020               	movlb	0	; select bank0
 14601  25FD  0845               	movf	ui_disp_set_line@flw+3,w
 14602  25FE  00B9               	movwf	ui_uint32_2_str@x+3
 14603  25FF  0844               	movf	ui_disp_set_line@flw+2,w
 14604  2600  00B8               	movwf	ui_uint32_2_str@x+2
 14605  2601  0843               	movf	ui_disp_set_line@flw+1,w
 14606  2602  00B7               	movwf	ui_uint32_2_str@x+1
 14607  2603  0842               	movf	ui_disp_set_line@flw,w
 14608  2604  00B6               	movwf	ui_uint32_2_str@x
 14609  2605  3007               	movlw	7
 14610  2606  00C0               	movwf	??_ui_disp_set_line
 14611  2607  00BA               	movwf	ui_uint32_2_str@len
 14612  2608  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 14613  2609  318A  2236  31A0   	fcall	_ui_uint32_2_str
 14614                           
 14615                           ;ui.c: 285: ui_head_hide(lcdBuf, 8 - 1 - decnum);
 14616  260C  0020               	movlb	0	; select bank0
 14617  260D  0846               	movf	ui_disp_set_line@decnum,w
 14618  260E  3E01               	addlw	1
 14619  260F  3AFF               	xorlw	255
 14620  2610  3E01               	addlw	1
 14621  2611  3E08               	addlw	8
 14622  2612  00C0               	movwf	??_ui_disp_set_line
 14623  2613  00F3               	movwf	ui_head_hide@loc
 14624  2614  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 14625  2615  318A  221E  31A0   	fcall	_ui_head_hide
 14626                           
 14627                           ;ui.c: 287: lcdBuf[0] = 'l';
 14628  2618  306C               	movlw	108
 14629  2619  0020               	movlb	0	; select bank0
 14630  261A  00C0               	movwf	??_ui_disp_set_line
 14631  261B  0022               	movlb	2	; select bank2
 14632  261C  00DC               	movwf	_lcdBuf^(0+256)
 14633                           
 14634                           ;ui.c: 290: lcd_clear_buffer();
 14635  261D  319F  27B4  31A0   	fcall	_lcd_clear_buffer
 14636                           
 14637                           ;ui.c: 291: lcd_disp_dp(decnum, 1);
 14638  2620  0020               	movlb	0	; select bank0
 14639  2621  01B2               	clrf	lcd_disp_dp@show
 14640  2622  0AB2               	incf	lcd_disp_dp@show,f
 14641  2623  0846               	movf	ui_disp_set_line@decnum,w
 14642  2624  267A               	fcall	_lcd_disp_dp
 14643                           
 14644                           ;ui.c: 292: lcd_disp_str(lcdBuf);
 14645  2625  305C               	movlw	low _lcdBuf
 14646  2626  0020               	movlb	0	; select bank0
 14647  2627  00A2               	movwf	lcd_disp_str@str
 14648  2628  3001               	movlw	high _lcdBuf
 14649  2629  00A3               	movwf	lcd_disp_str@str+1
 14650  262A  319F  2FBD         	ljmp	l12289
 14651  262C                     __end_of_ui_disp_set_line:	
 14652  262C                     __ptext136:	
 14653 ;; *************** function ___lldiv *****************
 14654 ;; Defined at:
 14655 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\lldiv.c"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;  divisor         4    0[BANK0 ] unsigned long 
 14658 ;;  dividend        4    4[BANK0 ] unsigned long 
 14659 ;; Auto vars:     Size  Location     Type
 14660 ;;  quotient        4    8[BANK0 ] unsigned long 
 14661 ;;  counter         1   12[BANK0 ] unsigned char 
 14662 ;; Return value:  Size  Location     Type
 14663 ;;                  4    0[BANK0 ] unsigned long 
 14664 ;; Registers used:
 14665 ;;		wreg, status,2, status,0
 14666 ;; Tracked objects:
 14667 ;;		On entry : 0/0
 14668 ;;		On exit  : 0/0
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14671 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 14672 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 14673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 14674 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0
 14675 ;;Total ram usage:       14 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; Hardware stack levels required when called:    2
 14678 ;; This function calls:
 14679 ;;		Nothing
 14680 ;; This function is called by:
 14681 ;;		_ui_disp_set_line
 14682 ;;		_app_flow_adc_2_flow
 14683 ;;		_app_flow_rt_volume_cal
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687                           
 14688                           ;psect for function ___lldiv
 14689  262C                     ___lldiv:	
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 14693  262C  0020               	movlb	0	; select bank0
 14694  262D  01AB               	clrf	___lldiv@quotient+3
 14695  262E  01AA               	clrf	___lldiv@quotient+2
 14696  262F  01A9               	clrf	___lldiv@quotient+1
 14697  2630  01A8               	clrf	___lldiv@quotient
 14698  2631  0823               	movf	___lldiv@divisor+3,w
 14699  2632  0422               	iorwf	___lldiv@divisor+2,w
 14700  2633  0421               	iorwf	___lldiv@divisor+1,w
 14701  2634  0420               	iorwf	___lldiv@divisor,w
 14702  2635  1903               	skipnz
 14703  2636  2E71               	goto	l12723
 14704  2637  01AC               	clrf	___lldiv@counter
 14705  2638  0AAC               	incf	___lldiv@counter,f
 14706  2639                     l12709:	
 14707  2639  1BA3               	btfsc	___lldiv@divisor+3,7
 14708  263A  2E46               	goto	l12711
 14709  263B  3001               	movlw	1
 14710  263C                     u11375:	
 14711  263C  35A0               	lslf	___lldiv@divisor,f
 14712  263D  0DA1               	rlf	___lldiv@divisor+1,f
 14713  263E  0DA2               	rlf	___lldiv@divisor+2,f
 14714  263F  0DA3               	rlf	___lldiv@divisor+3,f
 14715  2640  0B89               	decfsz	9,f
 14716  2641  2E3C               	goto	u11375
 14717  2642  3001               	movlw	1
 14718  2643  00F3               	movwf	??___lldiv
 14719  2644  07AC               	addwf	___lldiv@counter,f
 14720  2645  2E39               	goto	l12709
 14721  2646                     l12711:	
 14722  2646  3001               	movlw	1
 14723  2647                     u11395:	
 14724  2647  35A8               	lslf	___lldiv@quotient,f
 14725  2648  0DA9               	rlf	___lldiv@quotient+1,f
 14726  2649  0DAA               	rlf	___lldiv@quotient+2,f
 14727  264A  0DAB               	rlf	___lldiv@quotient+3,f
 14728  264B  0B89               	decfsz	9,f
 14729  264C  2E47               	goto	u11395
 14730  264D  0823               	movf	___lldiv@divisor+3,w
 14731  264E  0227               	subwf	___lldiv@dividend+3,w
 14732  264F  1D03               	skipz
 14733  2650  2E5B               	goto	u11405
 14734  2651  0822               	movf	___lldiv@divisor+2,w
 14735  2652  0226               	subwf	___lldiv@dividend+2,w
 14736  2653  1D03               	skipz
 14737  2654  2E5B               	goto	u11405
 14738  2655  0821               	movf	___lldiv@divisor+1,w
 14739  2656  0225               	subwf	___lldiv@dividend+1,w
 14740  2657  1D03               	skipz
 14741  2658  2E5B               	goto	u11405
 14742  2659  0820               	movf	___lldiv@divisor,w
 14743  265A  0224               	subwf	___lldiv@dividend,w
 14744  265B                     u11405:	
 14745  265B  1C03               	skipc
 14746  265C  2E66               	goto	l12719
 14747  265D  0820               	movf	___lldiv@divisor,w
 14748  265E  02A4               	subwf	___lldiv@dividend,f
 14749  265F  0821               	movf	___lldiv@divisor+1,w
 14750  2660  3BA5               	subwfb	___lldiv@dividend+1,f
 14751  2661  0822               	movf	___lldiv@divisor+2,w
 14752  2662  3BA6               	subwfb	___lldiv@dividend+2,f
 14753  2663  0823               	movf	___lldiv@divisor+3,w
 14754  2664  3BA7               	subwfb	___lldiv@dividend+3,f
 14755  2665  1428               	bsf	___lldiv@quotient,0
 14756  2666                     l12719:	
 14757  2666  3001               	movlw	1
 14758  2667                     u11415:	
 14759  2667  36A3               	lsrf	___lldiv@divisor+3,f
 14760  2668  0CA2               	rrf	___lldiv@divisor+2,f
 14761  2669  0CA1               	rrf	___lldiv@divisor+1,f
 14762  266A  0CA0               	rrf	___lldiv@divisor,f
 14763  266B  0B89               	decfsz	9,f
 14764  266C  2E67               	goto	u11415
 14765  266D  3001               	movlw	1
 14766  266E  02AC               	subwf	___lldiv@counter,f
 14767  266F  1D03               	btfss	3,2
 14768  2670  2E46               	goto	l12711
 14769  2671                     l12723:	
 14770  2671  082B               	movf	___lldiv@quotient+3,w
 14771  2672  00A3               	movwf	?___lldiv+3
 14772  2673  082A               	movf	___lldiv@quotient+2,w
 14773  2674  00A2               	movwf	?___lldiv+2
 14774  2675  0829               	movf	___lldiv@quotient+1,w
 14775  2676  00A1               	movwf	?___lldiv+1
 14776  2677  0828               	movf	___lldiv@quotient,w
 14777  2678  00A0               	movwf	?___lldiv
 14778  2679  0008               	return
 14779  267A                     __end_of___lldiv:	
 14780  267A                     __ptext55:	
 14781 ;; *************** function _lcd_disp_dp *****************
 14782 ;; Defined at:
 14783 ;;		line 41 in file "src/driver/lcd.c"
 14784 ;; Parameters:    Size  Location     Type
 14785 ;;  dec             1    wreg     unsigned char 
 14786 ;;  show            1   18[BANK0 ] unsigned char 
 14787 ;; Auto vars:     Size  Location     Type
 14788 ;;  dec             1   21[BANK0 ] unsigned char 
 14789 ;; Return value:  Size  Location     Type
 14790 ;;                  1    wreg      void 
 14791 ;; Registers used:
 14792 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14793 ;; Tracked objects:
 14794 ;;		On entry : 0/0
 14795 ;;		On exit  : 0/0
 14796 ;;		Unchanged: 0/0
 14797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14798 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14799 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 14800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14801 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14802 ;;Total ram usage:        4 bytes
 14803 ;; Hardware stack levels used:    1
 14804 ;; Hardware stack levels required when called:    4
 14805 ;; This function calls:
 14806 ;;		_lcd_set_com_seg
 14807 ;; This function is called by:
 14808 ;;		_ui_disp_flow
 14809 ;;		_ui_disp_totale_v
 14810 ;;		_ui_disp_balance_and_volume
 14811 ;;		_ui_disp_set_line
 14812 ;;		_ui_disp_set_price
 14813 ;;		_ui_disp_set_calib
 14814 ;; This function uses a non-reentrant model
 14815 ;;
 14816                           
 14817                           
 14818                           ;psect for function _lcd_disp_dp
 14819  267A                     _lcd_disp_dp:	
 14820                           
 14821                           ;incstack = 0
 14822                           ; Regs used in _lcd_disp_dp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14823                           ;lcd_disp_dp@dec stored from wreg
 14824  267A  0020               	movlb	0	; select bank0
 14825  267B  00B5               	movwf	lcd_disp_dp@dec
 14826                           
 14827                           ;lcd.c: 53: }
 14828                           
 14829                           ;lcd.c: 52: default:break;
 14830                           
 14831                           ;lcd.c: 51: case 0:
 14832                           
 14833                           ;lcd.c: 43: switch(dec){
 14834  267C  0020               	movlb	0	; select bank0
 14835  267D  0835               	movf	lcd_disp_dp@dec,w
 14836                           
 14837                           ; Switch size 1, requested type "space"
 14838                           ; Number of cases is 8, Range of values is 0 to 7
 14839                           ; switch strategies available:
 14840                           ; Name         Instructions Cycles
 14841                           ; direct_byte           22     6 (fixed)
 14842                           ; simple_byte           25    13 (average)
 14843                           ; jumptable            260     6 (fixed)
 14844                           ;	Chosen strategy is direct_byte
 14845  267E  0084               	movwf	4
 14846  267F  3008               	movlw	8
 14847  2680  0204               	subwf	4,w
 14848  2681  1803               	skipnc
 14849  2682  0008               	return
 14850  2683  31B0               	movlp	high S15569
 14851  2684  3504               	lslf	4,w
 14852  2685  3E10               	addlw	low S15569
 14853  2686  0082               	movwf	2
 14854  2687                     l1288:	
 14855  2687  0008               	return
 14856  2688                     l12321:	
 14857                           ;lcd.c: 44: case 1:lcd_set_com_seg(3,24,show);break;
 14858                           
 14859  2688  3018               	movlw	24
 14860  2689  00B3               	movwf	??_lcd_disp_dp
 14861  268A  00A8               	movwf	lcd_set_com_seg@seg
 14862  268B  0832               	movf	lcd_disp_dp@show,w
 14863  268C  00B4               	movwf	??_lcd_disp_dp+1
 14864  268D  00A9               	movwf	lcd_set_com_seg@show
 14865  268E  3003               	movlw	3
 14866  268F  2EC4               	ljmp	_lcd_set_com_seg
 14867  2690                     l12323:	
 14868                           ;lcd.c: 45: case 2:lcd_set_com_seg(3,26,show);break;
 14869                           
 14870  2690  301A               	movlw	26
 14871  2691  0020               	movlb	0	; select bank0
 14872  2692  00B3               	movwf	??_lcd_disp_dp
 14873  2693  00A8               	movwf	lcd_set_com_seg@seg
 14874  2694  0832               	movf	lcd_disp_dp@show,w
 14875  2695  00B4               	movwf	??_lcd_disp_dp+1
 14876  2696  00A9               	movwf	lcd_set_com_seg@show
 14877  2697  3003               	movlw	3
 14878  2698  2EC4               	ljmp	_lcd_set_com_seg
 14879  2699                     l12325:	
 14880                           ;lcd.c: 46: case 3:lcd_set_com_seg(3,44,show);break;
 14881                           
 14882  2699  302C               	movlw	44
 14883  269A  0020               	movlb	0	; select bank0
 14884  269B  00B3               	movwf	??_lcd_disp_dp
 14885  269C  00A8               	movwf	lcd_set_com_seg@seg
 14886  269D  0832               	movf	lcd_disp_dp@show,w
 14887  269E  00B4               	movwf	??_lcd_disp_dp+1
 14888  269F  00A9               	movwf	lcd_set_com_seg@show
 14889  26A0  3003               	movlw	3
 14890  26A1  2EC4               	ljmp	_lcd_set_com_seg
 14891  26A2                     l12327:	
 14892                           ;lcd.c: 47: case 4:lcd_set_com_seg(3,21,show);break;
 14893                           
 14894  26A2  3015               	movlw	21
 14895  26A3  0020               	movlb	0	; select bank0
 14896  26A4  00B3               	movwf	??_lcd_disp_dp
 14897  26A5  00A8               	movwf	lcd_set_com_seg@seg
 14898  26A6  0832               	movf	lcd_disp_dp@show,w
 14899  26A7  00B4               	movwf	??_lcd_disp_dp+1
 14900  26A8  00A9               	movwf	lcd_set_com_seg@show
 14901  26A9  3003               	movlw	3
 14902  26AA  2EC4               	ljmp	_lcd_set_com_seg
 14903  26AB                     l12329:	
 14904                           ;lcd.c: 48: case 5:lcd_set_com_seg(3, 4,show);break;
 14905                           
 14906  26AB  3004               	movlw	4
 14907  26AC  0020               	movlb	0	; select bank0
 14908  26AD  00B3               	movwf	??_lcd_disp_dp
 14909  26AE  00A8               	movwf	lcd_set_com_seg@seg
 14910  26AF  0832               	movf	lcd_disp_dp@show,w
 14911  26B0  00B4               	movwf	??_lcd_disp_dp+1
 14912  26B1  00A9               	movwf	lcd_set_com_seg@show
 14913  26B2  3003               	movlw	3
 14914  26B3  2EC4               	ljmp	_lcd_set_com_seg
 14915  26B4                     l12331:	
 14916                           ;lcd.c: 49: case 6:lcd_set_com_seg(3, 2,show);break;
 14917                           
 14918  26B4  3002               	movlw	2
 14919  26B5  0020               	movlb	0	; select bank0
 14920  26B6  00B3               	movwf	??_lcd_disp_dp
 14921  26B7  00A8               	movwf	lcd_set_com_seg@seg
 14922  26B8  0832               	movf	lcd_disp_dp@show,w
 14923  26B9  00B4               	movwf	??_lcd_disp_dp+1
 14924  26BA  00A9               	movwf	lcd_set_com_seg@show
 14925  26BB  3003               	movlw	3
 14926  26BC  2EC4               	ljmp	_lcd_set_com_seg
 14927  26BD                     l12333:	
 14928                           ;lcd.c: 50: case 7:lcd_set_com_seg(3, 0,show);break;
 14929                           
 14930  26BD  0020               	movlb	0	; select bank0
 14931  26BE  01A8               	clrf	lcd_set_com_seg@seg
 14932  26BF  0832               	movf	lcd_disp_dp@show,w
 14933  26C0  00B3               	movwf	??_lcd_disp_dp
 14934  26C1  00A9               	movwf	lcd_set_com_seg@show
 14935  26C2  3003               	movlw	3
 14936  26C3  2EC4               	ljmp	_lcd_set_com_seg
 14937  26C4                     __end_of_lcd_disp_dp:	
 14938  26C4                     __ptext57:	
 14939 ;; *************** function _lcd_set_com_seg *****************
 14940 ;; Defined at:
 14941 ;;		line 25 in file "src/driver/lcd.c"
 14942 ;; Parameters:    Size  Location     Type
 14943 ;;  com             1    wreg     unsigned char 
 14944 ;;  seg             1    8[BANK0 ] unsigned char 
 14945 ;;  show            1    9[BANK0 ] unsigned char 
 14946 ;; Auto vars:     Size  Location     Type
 14947 ;;  com             1   15[BANK0 ] unsigned char 
 14948 ;;  bloc            1   17[BANK0 ] unsigned char 
 14949 ;;  p               1   16[BANK0 ] PTR unsigned char 
 14950 ;;		 -> pLCD(24), 
 14951 ;;  addr            1   14[BANK0 ] unsigned char 
 14952 ;; Return value:  Size  Location     Type
 14953 ;;                  2    8[BANK0 ] int 
 14954 ;; Registers used:
 14955 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14956 ;; Tracked objects:
 14957 ;;		On entry : 0/0
 14958 ;;		On exit  : 0/0
 14959 ;;		Unchanged: 0/0
 14960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 14961 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 14962 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 14964 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 14965 ;;Total ram usage:       10 bytes
 14966 ;; Hardware stack levels used:    1
 14967 ;; Hardware stack levels required when called:    3
 14968 ;; This function calls:
 14969 ;;		___awdiv
 14970 ;;		___bmul
 14971 ;;		___lbmod
 14972 ;; This function is called by:
 14973 ;;		_lcd_disp_dp
 14974 ;;		_lcd_disp_cln
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           
 14979                           ;psect for function _lcd_set_com_seg
 14980  26C4                     _lcd_set_com_seg:	
 14981                           
 14982                           ;incstack = 0
 14983                           ; Regs used in _lcd_set_com_seg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14984                           ;lcd_set_com_seg@com stored from wreg
 14985  26C4  0020               	movlb	0	; select bank0
 14986  26C5  00AF               	movwf	lcd_set_com_seg@com
 14987                           
 14988                           ;lcd.c: 27: uint8_t *p;
 14989                           ;lcd.c: 28: uint8_t addr,bloc;
 14990                           ;lcd.c: 29: if(seg>45 || com>3)return;
 14991  26C6  302E               	movlw	46
 14992  26C7  0228               	subwf	lcd_set_com_seg@seg,w
 14993  26C8  1803               	skipnc
 14994  26C9  0008               	return
 14995  26CA  3004               	movlw	4
 14996  26CB  022F               	subwf	lcd_set_com_seg@com,w
 14997  26CC  1803               	btfsc	3,0
 14998  26CD  0008               	return
 14999                           
 15000                           ;lcd.c: 30: addr=(seg/24)*12;
 15001  26CE  300C               	movlw	12
 15002  26CF  00AA               	movwf	??_lcd_set_com_seg
 15003  26D0  00A4               	movwf	___bmul@multiplicand
 15004  26D1  0828               	movf	lcd_set_com_seg@seg,w
 15005  26D2  00AB               	movwf	??_lcd_set_com_seg+1
 15006  26D3  01AC               	clrf	??_lcd_set_com_seg+2
 15007  26D4  00F5               	movwf	___awdiv@dividend
 15008  26D5  082C               	movf	??_lcd_set_com_seg+2,w
 15009  26D6  00F6               	movwf	___awdiv@dividend+1
 15010  26D7  3018               	movlw	24
 15011  26D8  00F3               	movwf	___awdiv@divisor
 15012  26D9  01F4               	clrf	___awdiv@divisor+1
 15013  26DA  318E  26B4  31A0   	fcall	___awdiv
 15014  26DD  0873               	movf	?___awdiv,w
 15015  26DE  318F  2704  31A0   	fcall	___bmul
 15016  26E1  0020               	movlb	0	; select bank0
 15017  26E2  00AD               	movwf	??_lcd_set_com_seg+3
 15018  26E3  00AE               	movwf	lcd_set_com_seg@addr
 15019                           
 15020                           ;lcd.c: 31: addr+=(com*3);
 15021  26E4  3003               	movlw	3
 15022  26E5  00AA               	movwf	??_lcd_set_com_seg
 15023  26E6  00A4               	movwf	___bmul@multiplicand
 15024  26E7  082F               	movf	lcd_set_com_seg@com,w
 15025  26E8  318F  2704  31A0   	fcall	___bmul
 15026  26EB  0020               	movlb	0	; select bank0
 15027  26EC  00AB               	movwf	??_lcd_set_com_seg+1
 15028  26ED  07AE               	addwf	lcd_set_com_seg@addr,f
 15029                           
 15030                           ;lcd.c: 32: seg%=24;
 15031  26EE  3018               	movlw	24
 15032  26EF  00AA               	movwf	??_lcd_set_com_seg
 15033  26F0  00F3               	movwf	___lbmod@divisor
 15034  26F1  0828               	movf	lcd_set_com_seg@seg,w
 15035  26F2  2730               	fcall	___lbmod
 15036  26F3  0020               	movlb	0	; select bank0
 15037  26F4  00AB               	movwf	??_lcd_set_com_seg+1
 15038  26F5  00A8               	movwf	lcd_set_com_seg@seg
 15039                           
 15040                           ;lcd.c: 33: addr+=(seg/8);
 15041  26F6  3008               	movlw	8
 15042  26F7  00F3               	movwf	___awdiv@divisor
 15043  26F8  01F4               	clrf	___awdiv@divisor+1
 15044  26F9  0828               	movf	lcd_set_com_seg@seg,w
 15045  26FA  00AA               	movwf	??_lcd_set_com_seg
 15046  26FB  01AB               	clrf	??_lcd_set_com_seg+1
 15047  26FC  00F5               	movwf	___awdiv@dividend
 15048  26FD  082B               	movf	??_lcd_set_com_seg+1,w
 15049  26FE  00F6               	movwf	___awdiv@dividend+1
 15050  26FF  318E  26B4  31A0   	fcall	___awdiv
 15051  2702  0873               	movf	?___awdiv,w
 15052  2703  0020               	movlb	0	; select bank0
 15053  2704  00AC               	movwf	??_lcd_set_com_seg+2
 15054  2705  07AE               	addwf	lcd_set_com_seg@addr,f
 15055                           
 15056                           ;lcd.c: 34: bloc=seg%8;
 15057  2706  0828               	movf	lcd_set_com_seg@seg,w
 15058  2707  3907               	andlw	7
 15059  2708  00AA               	movwf	??_lcd_set_com_seg
 15060  2709  00B1               	movwf	lcd_set_com_seg@bloc
 15061                           
 15062                           ;lcd.c: 35: p=pLCD+addr;
 15063  270A  082E               	movf	lcd_set_com_seg@addr,w
 15064  270B  3E2F               	addlw	(low (_pLCD| (0+256)))& (0+255)
 15065  270C  00AA               	movwf	??_lcd_set_com_seg
 15066  270D  00B0               	movwf	lcd_set_com_seg@p
 15067                           
 15068                           ;lcd.c: 36: if(show)
 15069  270E  0829               	movf	lcd_set_com_seg@show,w
 15070                           
 15071                           ;lcd.c: 37: *p |= (1<<bloc);
 15072  270F  3001               	movlw	1
 15073  2710  00AA               	movwf	??_lcd_set_com_seg
 15074  2711  1903               	btfsc	3,2
 15075  2712  2F21               	goto	L5
 15076  2713  0A31               	incf	lcd_set_com_seg@bloc,w
 15077  2714  2F16               	goto	u10684
 15078  2715                     u10685:	
 15079  2715  35AA               	lslf	??_lcd_set_com_seg,f
 15080  2716                     u10684:	
 15081  2716  0B89               	decfsz	9,f
 15082  2717  2F15               	goto	u10685
 15083  2718  082A               	movf	??_lcd_set_com_seg,w
 15084  2719  00AB               	movwf	??_lcd_set_com_seg+1
 15085  271A  0830               	movf	lcd_set_com_seg@p,w
 15086  271B  0086               	movwf	6
 15087  271C  3001               	movlw	1	; select bank2/3
 15088  271D  0087               	movwf	7
 15089  271E  082B               	movf	??_lcd_set_com_seg+1,w
 15090  271F  0481               	iorwf	1,f
 15091  2720  0008               	return
 15092  2721                     L5:	
 15093                           ;lcd.c: 38: else
 15094                           ;lcd.c: 39: *p &= ~(1<<bloc);
 15095                           
 15096  2721  0A31               	incf	lcd_set_com_seg@bloc,w
 15097  2722  2F24               	goto	u10694
 15098  2723                     u10695:	
 15099  2723  35AA               	lslf	??_lcd_set_com_seg,f
 15100  2724                     u10694:	
 15101  2724  0B89               	decfsz	9,f
 15102  2725  2F23               	goto	u10695
 15103  2726  082A               	movf	??_lcd_set_com_seg,w
 15104  2727  3AFF               	xorlw	255
 15105  2728  00AB               	movwf	??_lcd_set_com_seg+1
 15106  2729  0830               	movf	lcd_set_com_seg@p,w
 15107  272A  0086               	movwf	6
 15108  272B  3001               	movlw	1	; select bank2/3
 15109  272C  0087               	movwf	7
 15110  272D  082B               	movf	??_lcd_set_com_seg+1,w
 15111  272E  0581               	andwf	1,f
 15112  272F  0008               	return
 15113  2730                     __end_of_lcd_set_com_seg:	
 15114  2730                     __ptext58:	
 15115 ;; *************** function ___lbmod *****************
 15116 ;; Defined at:
 15117 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\lbmod.c"
 15118 ;; Parameters:    Size  Location     Type
 15119 ;;  dividend        1    wreg     unsigned char 
 15120 ;;  divisor         1    3[COMMON] unsigned char 
 15121 ;; Auto vars:     Size  Location     Type
 15122 ;;  dividend        1    0[BANK0 ] unsigned char 
 15123 ;;  rem             1    2[BANK0 ] unsigned char 
 15124 ;;  counter         1    1[BANK0 ] unsigned char 
 15125 ;; Return value:  Size  Location     Type
 15126 ;;                  1    wreg      unsigned char 
 15127 ;; Registers used:
 15128 ;;		wreg, status,2, status,0
 15129 ;; Tracked objects:
 15130 ;;		On entry : 0/0
 15131 ;;		On exit  : 0/0
 15132 ;;		Unchanged: 0/0
 15133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15134 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15135 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15136 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15137 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0
 15138 ;;Total ram usage:        6 bytes
 15139 ;; Hardware stack levels used:    1
 15140 ;; Hardware stack levels required when called:    2
 15141 ;; This function calls:
 15142 ;;		Nothing
 15143 ;; This function is called by:
 15144 ;;		_ui_disp_set_calib
 15145 ;;		_lcd_set_com_seg
 15146 ;; This function uses a non-reentrant model
 15147 ;;
 15148                           
 15149                           
 15150                           ;psect for function ___lbmod
 15151  2730                     ___lbmod:	
 15152                           
 15153                           ;incstack = 0
 15154                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 15155                           ;___lbmod@dividend stored from wreg
 15156  2730  0020               	movlb	0	; select bank0
 15157  2731  00A0               	movwf	___lbmod@dividend
 15158  2732  3008               	movlw	8
 15159  2733  00F4               	movwf	??___lbmod
 15160  2734  00A1               	movwf	___lbmod@counter
 15161  2735  01A2               	clrf	___lbmod@rem
 15162  2736                     l12061:	
 15163  2736  0820               	movf	___lbmod@dividend,w
 15164  2737  00F4               	movwf	??___lbmod
 15165  2738  3007               	movlw	7
 15166  2739                     u10595:	
 15167  2739  36F4               	lsrf	??___lbmod,f
 15168  273A  0B89               	decfsz	9,f
 15169  273B  2F39               	goto	u10595
 15170  273C  3522               	lslf	___lbmod@rem,w
 15171  273D  0474               	iorwf	??___lbmod,w
 15172  273E  00F5               	movwf	??___lbmod+1
 15173  273F  00A2               	movwf	___lbmod@rem
 15174  2740  1003               	clrc
 15175  2741  0DA0               	rlf	___lbmod@dividend,f
 15176  2742  0873               	movf	___lbmod@divisor,w
 15177  2743  0222               	subwf	___lbmod@rem,w
 15178  2744  1C03               	skipc
 15179  2745  2F48               	goto	l2876
 15180  2746  0873               	movf	___lbmod@divisor,w
 15181  2747  02A2               	subwf	___lbmod@rem,f
 15182  2748                     l2876:	
 15183  2748  3001               	movlw	1
 15184  2749  02A1               	subwf	___lbmod@counter,f
 15185  274A  1D03               	btfss	3,2
 15186  274B  2F36               	goto	l12061
 15187  274C  0822               	movf	___lbmod@rem,w
 15188  274D  0008               	return
 15189  274E                     __end_of___lbmod:	
 15190  274E                     __ptext16:	
 15191 ;; *************** function ___awmod *****************
 15192 ;; Defined at:
 15193 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\awmod.c"
 15194 ;; Parameters:    Size  Location     Type
 15195 ;;  divisor         2    3[COMMON] int 
 15196 ;;  dividend        2    5[COMMON] int 
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  sign            1    1[BANK0 ] unsigned char 
 15199 ;;  counter         1    0[BANK0 ] unsigned char 
 15200 ;; Return value:  Size  Location     Type
 15201 ;;                  2    3[COMMON] int 
 15202 ;; Registers used:
 15203 ;;		wreg, status,2, status,0
 15204 ;; Tracked objects:
 15205 ;;		On entry : 0/0
 15206 ;;		On exit  : 0/0
 15207 ;;		Unchanged: 0/0
 15208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15209 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15210 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15212 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0
 15213 ;;Total ram usage:        7 bytes
 15214 ;; Hardware stack levels used:    1
 15215 ;; Hardware stack levels required when called:    2
 15216 ;; This function calls:
 15217 ;;		Nothing
 15218 ;; This function is called by:
 15219 ;;		_ui_disp_set_calib
 15220 ;; This function uses a non-reentrant model
 15221 ;;
 15222                           
 15223                           
 15224                           ;psect for function ___awmod
 15225  274E                     ___awmod:	
 15226                           
 15227                           ;incstack = 0
 15228                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 15229  274E  0020               	movlb	0	; select bank0
 15230  274F  01A1               	clrf	___awmod@sign
 15231  2750  1FF6               	btfss	___awmod@dividend+1,7
 15232  2751  2F59               	goto	l12673
 15233  2752  09F5               	comf	___awmod@dividend,f
 15234  2753  09F6               	comf	___awmod@dividend+1,f
 15235  2754  0AF5               	incf	___awmod@dividend,f
 15236  2755  1903               	skipnz
 15237  2756  0AF6               	incf	___awmod@dividend+1,f
 15238  2757  01A1               	clrf	___awmod@sign
 15239  2758  0AA1               	incf	___awmod@sign,f
 15240  2759                     l12673:	
 15241  2759  1FF4               	btfss	___awmod@divisor+1,7
 15242  275A  2F60               	goto	l12677
 15243  275B  09F3               	comf	___awmod@divisor,f
 15244  275C  09F4               	comf	___awmod@divisor+1,f
 15245  275D  0AF3               	incf	___awmod@divisor,f
 15246  275E  1903               	skipnz
 15247  275F  0AF4               	incf	___awmod@divisor+1,f
 15248  2760                     l12677:	
 15249  2760  0873               	movf	___awmod@divisor,w
 15250  2761  0474               	iorwf	___awmod@divisor+1,w
 15251  2762  1903               	btfsc	3,2
 15252  2763  2F86               	goto	l12695
 15253  2764  01A0               	clrf	___awmod@counter
 15254  2765  0AA0               	incf	___awmod@counter,f
 15255  2766                     l12685:	
 15256  2766  1BF4               	btfsc	___awmod@divisor+1,7
 15257  2767  2F71               	goto	l12687
 15258  2768  3001               	movlw	1
 15259  2769                     u11305:	
 15260  2769  35F3               	lslf	___awmod@divisor,f
 15261  276A  0DF4               	rlf	___awmod@divisor+1,f
 15262  276B  0B89               	decfsz	9,f
 15263  276C  2F69               	goto	u11305
 15264  276D  3001               	movlw	1
 15265  276E  00F7               	movwf	??___awmod
 15266  276F  07A0               	addwf	___awmod@counter,f
 15267  2770  2F66               	goto	l12685
 15268  2771                     l12687:	
 15269  2771  0874               	movf	___awmod@divisor+1,w
 15270  2772  0276               	subwf	___awmod@dividend+1,w
 15271  2773  1D03               	skipz
 15272  2774  2F77               	goto	u11325
 15273  2775  0873               	movf	___awmod@divisor,w
 15274  2776  0275               	subwf	___awmod@dividend,w
 15275  2777                     u11325:	
 15276  2777  1C03               	skipc
 15277  2778  2F7D               	goto	l12691
 15278  2779  0873               	movf	___awmod@divisor,w
 15279  277A  02F5               	subwf	___awmod@dividend,f
 15280  277B  0874               	movf	___awmod@divisor+1,w
 15281  277C  3BF6               	subwfb	___awmod@dividend+1,f
 15282  277D                     l12691:	
 15283  277D  3001               	movlw	1
 15284  277E                     u11335:	
 15285  277E  36F4               	lsrf	___awmod@divisor+1,f
 15286  277F  0CF3               	rrf	___awmod@divisor,f
 15287  2780  0B89               	decfsz	9,f
 15288  2781  2F7E               	goto	u11335
 15289  2782  3001               	movlw	1
 15290  2783  02A0               	subwf	___awmod@counter,f
 15291  2784  1D03               	btfss	3,2
 15292  2785  2F71               	goto	l12687
 15293  2786                     l12695:	
 15294  2786  0821               	movf	___awmod@sign,w
 15295  2787  1903               	btfsc	3,2
 15296  2788  2F8E               	goto	l12699
 15297  2789  09F5               	comf	___awmod@dividend,f
 15298  278A  09F6               	comf	___awmod@dividend+1,f
 15299  278B  0AF5               	incf	___awmod@dividend,f
 15300  278C  1903               	skipnz
 15301  278D  0AF6               	incf	___awmod@dividend+1,f
 15302  278E                     l12699:	
 15303  278E  0876               	movf	___awmod@dividend+1,w
 15304  278F  00F4               	movwf	?___awmod+1
 15305  2790  0875               	movf	___awmod@dividend,w
 15306  2791  00F3               	movwf	?___awmod
 15307  2792  0008               	return
 15308  2793                     __end_of___awmod:	
 15309  2793                     __ptext33:	
 15310 ;; *************** function _ui_key_process_down *****************
 15311 ;; Defined at:
 15312 ;;		line 86 in file "src/api/ui_key.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;		None
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;		None
 15317 ;; Return value:  Size  Location     Type
 15318 ;;                  1    wreg      unsigned char 
 15319 ;; Registers used:
 15320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15321 ;; Tracked objects:
 15322 ;;		On entry : 0/0
 15323 ;;		On exit  : 0/0
 15324 ;;		Unchanged: 0/0
 15325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15328 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15329 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15330 ;;Total ram usage:        1 bytes
 15331 ;; Hardware stack levels used:    1
 15332 ;; Hardware stack levels required when called:    3
 15333 ;; This function calls:
 15334 ;;		_m_mem_set
 15335 ;; This function is called by:
 15336 ;;		_ui_key_process
 15337 ;; This function uses a non-reentrant model
 15338 ;;
 15339                           
 15340                           
 15341                           ;psect for function _ui_key_process_down
 15342  2793                     _ui_key_process_down:	
 15343                           
 15344                           ;ui_key.c: 87: switch(menu){
 15345                           
 15346                           ;incstack = 0
 15347                           ; Regs used in _ui_key_process_down: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15348  2793  2FD9               	goto	l13881
 15349  2794                     l13833:	
 15350                           ;ui_key.c: 88: case 0x20:
 15351                           
 15352                           
 15353                           ;ui_key.c: 89: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->BalanceMoney));
 15354  2794  302C               	movlw	44
 15355  2795  0022               	movlb	2	; select bank2
 15356  2796  00C7               	movwf	_flashOpStr^(0+256)
 15357  2797  3002               	movlw	2
 15358  2798  01C8               	clrf	(_flashOpStr+1)^(0+256)
 15359                           
 15360                           ;ui_key.c: 91: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 15361  2799  00F7               	movwf	??_ui_key_process_down
 15362  279A  00DB               	movwf	(_flashOpStr^(0+256)+20)
 15363                           
 15364                           ;ui_key.c: 92: flashOpStr.len=4;
 15365  279B  3004               	movlw	4
 15366  279C  00C9               	movwf	(_flashOpStr^(0+256)+2)
 15367  279D  304B               	movlw	low (_flashOpStr+4)
 15368  279E  01CA               	clrf	(_flashOpStr^(0+256)+3)
 15369                           
 15370                           ;ui_key.c: 93: m_mem_set(flashOpStr.buf,0,4);
 15371  279F  00F3               	movwf	m_mem_set@buf
 15372  27A0  3001               	movlw	high (_flashOpStr+4)
 15373  27A1  00F4               	movwf	m_mem_set@buf+1
 15374  27A2  3004               	movlw	4
 15375  27A3  01F5               	clrf	m_mem_set@x
 15376  27A4  00F7               	movwf	??_ui_key_process_down
 15377  27A5  00F6               	movwf	m_mem_set@len
 15378  27A6  319F  27A4         	fcall	_m_mem_set
 15379                           
 15380                           ;ui_key.c: 94: menu=bkupMenu; return 1;
 15381  27A8  0021               	movlb	1	; select bank1
 15382  27A9  0838               	movf	_bkupMenu^(0+128),w
 15383  27AA  00F7               	movwf	??_ui_key_process_down
 15384  27AB  00F8               	movwf	_menu
 15385  27AC  3401               	retlw	1
 15386  27AD                     l13847:	
 15387                           ;ui_key.c: 95: case 0x30:
 15388                           
 15389                           
 15390                           ;ui_key.c: 96: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->totalConsumeVol
      +                          ume));
 15391  27AD  3030               	movlw	48
 15392  27AE  0022               	movlb	2	; select bank2
 15393  27AF  00C7               	movwf	_flashOpStr^(0+256)
 15394  27B0  3002               	movlw	2
 15395  27B1  01C8               	clrf	(_flashOpStr+1)^(0+256)
 15396                           
 15397                           ;ui_key.c: 98: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 15398  27B2  00F7               	movwf	??_ui_key_process_down
 15399  27B3  00DB               	movwf	(_flashOpStr^(0+256)+20)
 15400                           
 15401                           ;ui_key.c: 99: flashOpStr.len=4;
 15402  27B4  3004               	movlw	4
 15403  27B5  00C9               	movwf	(_flashOpStr^(0+256)+2)
 15404  27B6  304B               	movlw	low (_flashOpStr+4)
 15405  27B7  01CA               	clrf	(_flashOpStr^(0+256)+3)
 15406                           
 15407                           ;ui_key.c: 100: m_mem_set(flashOpStr.buf,0,4);
 15408  27B8  00F3               	movwf	m_mem_set@buf
 15409  27B9  3001               	movlw	high (_flashOpStr+4)
 15410  27BA  00F4               	movwf	m_mem_set@buf+1
 15411  27BB  3004               	movlw	4
 15412  27BC  01F5               	clrf	m_mem_set@x
 15413  27BD  00F7               	movwf	??_ui_key_process_down
 15414  27BE  00F6               	movwf	m_mem_set@len
 15415  27BF  319F  27A4         	fcall	_m_mem_set
 15416                           
 15417                           ;ui_key.c: 101: menu=bkupMenu;return 1;
 15418  27C1  0021               	movlb	1	; select bank1
 15419  27C2  0838               	movf	_bkupMenu^(0+128),w
 15420  27C3  00F7               	movwf	??_ui_key_process_down
 15421  27C4  00F8               	movwf	_menu
 15422  27C5  3401               	retlw	1
 15423  27C6                     l13861:	
 15424                           ;ui_key.c: 102: case 0xd0:
 15425                           
 15426                           
 15427                           ;ui_key.c: 103: flashOpStr.flashAddr= ((uint16_t) (&((st_SystemData *)0)->cardID));
 15428  27C6  3004               	movlw	4
 15429  27C7  0022               	movlb	2	; select bank2
 15430  27C8  00C7               	movwf	_flashOpStr^(0+256)
 15431  27C9  3002               	movlw	2
 15432  27CA  01C8               	clrf	(_flashOpStr+1)^(0+256)
 15433                           
 15434                           ;ui_key.c: 105: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 15435  27CB  00F7               	movwf	??_ui_key_process_down
 15436  27CC  00DB               	movwf	(_flashOpStr^(0+256)+20)
 15437                           
 15438                           ;ui_key.c: 106: flashOpStr.len=4;
 15439  27CD  3004               	movlw	4
 15440  27CE  00C9               	movwf	(_flashOpStr^(0+256)+2)
 15441  27CF  30D1               	movlw	209
 15442  27D0  01CA               	clrf	(_flashOpStr^(0+256)+3)
 15443                           
 15444                           ;ui_key.c: 108: *((uint32_t*)(flashOpStr.buf))=0;
 15445  27D1  01CE               	clrf	((_flashOpStr+3)^(0+256)+4)
 15446  27D2  01CD               	clrf	((_flashOpStr+2)^(0+256)+4)
 15447  27D3  01CC               	clrf	((_flashOpStr+1)^(0+256)+4)
 15448  27D4  01CB               	clrf	(_flashOpStr^(0+256)+4)
 15449                           
 15450                           ;ui_key.c: 109: menu=0xd1; return 1;
 15451  27D5  00F7               	movwf	??_ui_key_process_down
 15452  27D6  00F8               	movwf	_menu
 15453  27D7  3401               	retlw	1
 15454  27D8                     l13875:	
 15455                           ;ui_key.c: 110: default:
 15456                           
 15457                           
 15458                           ;ui_key.c: 111: return 0;
 15459  27D8  3400               	retlw	0
 15460  27D9                     l13881:	
 15461                           ;ui_key.c: 113: }
 15462                           
 15463  27D9  0878               	movf	_menu,w
 15464                           
 15465                           ; Switch size 1, requested type "space"
 15466                           ; Number of cases is 3, Range of values is 32 to 208
 15467                           ; switch strategies available:
 15468                           ; Name         Instructions Cycles
 15469                           ; simple_byte           10     6 (average)
 15470                           ; jumptable            263     9 (fixed)
 15471                           ;	Chosen strategy is simple_byte
 15472  27DA  3A20               	xorlw	32	; case 32
 15473  27DB  1903               	skipnz
 15474  27DC  2F94               	goto	l13833
 15475  27DD  3A10               	xorlw	16	; case 48
 15476  27DE  1903               	skipnz
 15477  27DF  2FAD               	goto	l13847
 15478  27E0  3AE0               	xorlw	224	; case 208
 15479  27E1  1903               	skipnz
 15480  27E2  2FC6               	goto	l13861
 15481  27E3  2FD8               	goto	l13875
 15482  27E4  0008               	return
 15483  27E5                     __end_of_ui_key_process_down:	
 15484  27E5                     __ptext7:	
 15485 ;; *************** function _ui_key_process_up_down_main *****************
 15486 ;; Defined at:
 15487 ;;		line 73 in file "src/api/ui_key.c"
 15488 ;; Parameters:    Size  Location     Type
 15489 ;;  up              1    wreg     unsigned char 
 15490 ;; Auto vars:     Size  Location     Type
 15491 ;;  up              1    4[COMMON] unsigned char 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  1    wreg      void 
 15494 ;; Registers used:
 15495 ;;		wreg, status,2, status,0
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15502 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15505 ;;Total ram usage:        2 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    2
 15508 ;; This function calls:
 15509 ;;		Nothing
 15510 ;; This function is called by:
 15511 ;;		_ui_key_process_up_down
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           
 15516                           ;psect for function _ui_key_process_up_down_main
 15517  27E5                     _ui_key_process_up_down_main:	
 15518                           
 15519                           ;incstack = 0
 15520                           ; Regs used in _ui_key_process_up_down_main: [wreg+status,2+status,0]
 15521                           ;ui_key_process_up_down_main@up stored from wreg
 15522  27E5  00F4               	movwf	ui_key_process_up_down_main@up
 15523                           
 15524                           ;ui_key.c: 75: if(up){
 15525  27E6  0874               	movf	ui_key_process_up_down_main@up,w
 15526  27E7  1903               	btfsc	3,2
 15527  27E8  2FF2               	goto	l9395
 15528                           
 15529                           ;ui_key.c: 76: menu++;
 15530  27E9  3001               	movlw	1
 15531  27EA  00F3               	movwf	??_ui_key_process_up_down_main
 15532  27EB  07F8               	addwf	_menu,f
 15533                           
 15534                           ;ui_key.c: 77: if(menu>2)menu=0;
 15535  27EC  3003               	movlw	3
 15536  27ED  0278               	subwf	_menu,w
 15537  27EE  1C03               	skipc
 15538  27EF  2FFB               	goto	l9401
 15539  27F0  01F8               	clrf	_menu
 15540                           
 15541                           ;ui_key.c: 78: }else{
 15542  27F1  2FFB               	goto	l9401
 15543  27F2                     l9395:	
 15544                           
 15545                           ;ui_key.c: 79: if(menu==0)menu=2;
 15546  27F2  0878               	movf	_menu,w
 15547  27F3  1D03               	btfss	3,2
 15548  27F4  2FF9               	goto	l9399
 15549  27F5  3002               	movlw	2
 15550  27F6  00F3               	movwf	??_ui_key_process_up_down_main
 15551  27F7  00F8               	movwf	_menu
 15552  27F8  2FFB               	goto	l9401
 15553  27F9                     l9399:	
 15554                           
 15555                           ;ui_key.c: 80: else
 15556                           ;ui_key.c: 81: menu--;
 15557  27F9  3001               	movlw	1
 15558  27FA  02F8               	subwf	_menu,f
 15559  27FB                     l9401:	
 15560                           
 15561                           ;ui_key.c: 82: }
 15562                           ;ui_key.c: 83: bkupMenu=menu;
 15563  27FB  0878               	movf	_menu,w
 15564  27FC  00F3               	movwf	??_ui_key_process_up_down_main
 15565  27FD  0021               	movlb	1	; select bank1
 15566  27FE  00B8               	movwf	_bkupMenu^(0+128)
 15567  27FF  0008               	return
 15568  2800                     __end_of_ui_key_process_up_down_main:	
 15569                           
 15570                           	psect	text34
 15571  2AF4                     __ptext34:	
 15572 ;; *************** function _ui_key_process_cancel *****************
 15573 ;; Defined at:
 15574 ;;		line 388 in file "src/api/ui_key.c"
 15575 ;; Parameters:    Size  Location     Type
 15576 ;;		None
 15577 ;; Auto vars:     Size  Location     Type
 15578 ;;		None
 15579 ;; Return value:  Size  Location     Type
 15580 ;;                  1    wreg      void 
 15581 ;; Registers used:
 15582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15583 ;; Tracked objects:
 15584 ;;		On entry : 0/0
 15585 ;;		On exit  : 0/0
 15586 ;;		Unchanged: 0/0
 15587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15590 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 15591 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 15592 ;;Total ram usage:        8 bytes
 15593 ;; Hardware stack levels used:    1
 15594 ;; Hardware stack levels required when called:    6
 15595 ;; This function calls:
 15596 ;;		_data_api_calibration_table_data_save
 15597 ;; This function is called by:
 15598 ;;		_ui_key_process
 15599 ;; This function uses a non-reentrant model
 15600 ;;
 15601                           
 15602                           
 15603                           ;psect for function _ui_key_process_cancel
 15604  2AF4                     _ui_key_process_cancel:	
 15605                           
 15606                           ;ui_key.c: 389: if(menu<3){
 15607                           
 15608                           ;incstack = 0
 15609                           ; Regs used in _ui_key_process_cancel: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15610  2AF4  3003               	movlw	3
 15611  2AF5  0278               	subwf	_menu,w
 15612  2AF6  1803               	skipnc
 15613  2AF7  2B08               	goto	l13979
 15614                           
 15615                           ;ui_key.c: 390: uiAdjbuf[0]=0;
 15616  2AF8  0022               	movlb	2	; select bank2
 15617  2AF9  01E5               	clrf	_uiAdjbuf^(0+256)
 15618                           
 15619                           ;ui_key.c: 391: uiAdjbuf[1]=0;
 15620  2AFA  01E6               	clrf	(_uiAdjbuf^(0+256)+1)
 15621                           
 15622                           ;ui_key.c: 392: bkupMenu=menu;
 15623  2AFB  0878               	movf	_menu,w
 15624  2AFC  0020               	movlb	0	; select bank0
 15625  2AFD  00C0               	movwf	??_ui_key_process_cancel
 15626  2AFE  0021               	movlb	1	; select bank1
 15627  2AFF  00B8               	movwf	_bkupMenu^(0+128)
 15628                           
 15629                           ;ui_key.c: 393: password=0x00;
 15630  2B00  0022               	movlb	2	; select bank2
 15631  2B01  3010               	movlw	16
 15632  2B02  01A2               	clrf	_password^(0+256)
 15633  2B03  01A3               	clrf	(_password+1)^(0+256)
 15634                           
 15635                           ;ui_key.c: 394: menu=0x10;
 15636  2B04  0020               	movlb	0	; select bank0
 15637  2B05  00C0               	movwf	??_ui_key_process_cancel
 15638  2B06  00F8               	movwf	_menu
 15639                           
 15640                           ;ui_key.c: 395: }else if(menu==0x50){
 15641  2B07  0008               	return
 15642  2B08                     l13979:	
 15643  2B08  3050               	movlw	80
 15644  2B09  0678               	xorwf	_menu,w
 15645  2B0A  1D03               	btfss	3,2
 15646  2B0B  2B72               	goto	l13997
 15647                           
 15648                           ;ui_key.c: 396: if(*((uint16_t*)uiAdjbuf) != Main_flowCalibrationTable.flowCalibrationAr
      +                          r[calibLocation].rtflowValue){
 15649  2B0C  3065               	movlw	low (_uiAdjbuf| (0+256))
 15650  2B0D  0086               	movwf	6
 15651  2B0E  3001               	movlw	1	; select bank2/3
 15652  2B0F  0087               	movwf	7
 15653  2B10  3F40               	moviw [0]fsr1
 15654  2B11  0020               	movlb	0	; select bank0
 15655  2B12  00C0               	movwf	??_ui_key_process_cancel
 15656  2B13  3F41               	moviw [1]fsr1
 15657  2B14  00C1               	movwf	??_ui_key_process_cancel+1
 15658  2B15  0021               	movlb	1	; select bank1
 15659  2B16  0839               	movf	_calibLocation^(0+128),w
 15660  2B17  0020               	movlb	0	; select bank0
 15661  2B18  00C2               	movwf	??_ui_key_process_cancel+2
 15662  2B19  01C3               	clrf	??_ui_key_process_cancel+3
 15663  2B1A  35C2               	lslf	??_ui_key_process_cancel+2,f
 15664  2B1B  0DC3               	rlf	??_ui_key_process_cancel+3,f
 15665  2B1C  35C2               	lslf	??_ui_key_process_cancel+2,f
 15666  2B1D  0DC3               	rlf	??_ui_key_process_cancel+3,f
 15667  2B1E  0842               	movf	??_ui_key_process_cancel+2,w
 15668  2B1F  3E02               	addlw	2
 15669  2B20  00C4               	movwf	??_ui_key_process_cancel+4
 15670  2B21  3000               	movlw	0
 15671  2B22  3D43               	addwfc	??_ui_key_process_cancel+3,w
 15672  2B23  00C5               	movwf	??_ui_key_process_cancel+5
 15673  2B24  3080               	movlw	128
 15674  2B25  0744               	addwf	??_ui_key_process_cancel+4,w
 15675  2B26  0084               	movwf	4
 15676  2B27  30BF               	movlw	191
 15677  2B28  3D45               	addwfc	??_ui_key_process_cancel+5,w
 15678  2B29  0085               	movwf	5
 15679  2B2A  3F00               	moviw [0]fsr0
 15680  2B2B  00C6               	movwf	??_ui_key_process_cancel+6
 15681  2B2C  3F01               	moviw [1]fsr0
 15682  2B2D  00C7               	movwf	??_ui_key_process_cancel+7
 15683  2B2E  0641               	xorwf	??_ui_key_process_cancel+1,w
 15684  2B2F  1D03               	skipz
 15685  2B30  2B33               	goto	u12625
 15686  2B31  0840               	movf	??_ui_key_process_cancel,w
 15687  2B32  0646               	xorwf	??_ui_key_process_cancel+6,w
 15688  2B33                     u12625:	
 15689  2B33  1903               	skipnz
 15690  2B34  2B48               	goto	l13989
 15691                           
 15692                           ;ui_key.c: 397: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 15693  2B35  0022               	movlb	2	; select bank2
 15694  2B36  3065               	movlw	low (_uiAdjbuf| (0+256))
 15695  2B37  01DB               	clrf	(_flashOpStr^(0+256)+20)
 15696  2B38  0ADB               	incf	(_flashOpStr^(0+256)+20),f
 15697                           
 15698                           ;ui_key.c: 398: *((uint16_t*)(flashOpStr.buf))=*((uint16_t*)uiAdjbuf);
 15699  2B39  0086               	movwf	6
 15700  2B3A  3001               	movlw	1	; select bank2/3
 15701  2B3B  0087               	movwf	7
 15702  2B3C  3F40               	moviw [0]fsr1
 15703  2B3D  00CB               	movwf	(_flashOpStr^(0+256)+4)
 15704  2B3E  3F41               	moviw [1]fsr1
 15705  2B3F  00CC               	movwf	((_flashOpStr+1)^(0+256)+4)
 15706                           
 15707                           ;ui_key.c: 399: data_api_calibration_table_data_save(calibLocation,1);
 15708  2B40  0020               	movlb	0	; select bank0
 15709  2B41  01B6               	clrf	data_api_calibration_table_data_save@single
 15710  2B42  0AB6               	incf	data_api_calibration_table_data_save@single,f
 15711  2B43  0021               	movlb	1	; select bank1
 15712  2B44  0839               	movf	_calibLocation^(0+128),w
 15713  2B45  3190  20A0  31AA   	fcall	_data_api_calibration_table_data_save
 15714  2B48                     l13989:	
 15715                           
 15716                           ;ui_key.c: 400: }
 15717                           ;ui_key.c: 402: calibLocation++;
 15718  2B48  3001               	movlw	1
 15719  2B49  0020               	movlb	0	; select bank0
 15720  2B4A  00C0               	movwf	??_ui_key_process_cancel
 15721  2B4B  0021               	movlb	1	; select bank1
 15722  2B4C  07B9               	addwf	_calibLocation^(0+128),f
 15723                           
 15724                           ;ui_key.c: 403: if(calibLocation>=30)calibLocation=0;
 15725  2B4D  301E               	movlw	30
 15726  2B4E  0239               	subwf	_calibLocation^(0+128),w
 15727  2B4F  1803               	btfsc	3,0
 15728  2B50  01B9               	clrf	_calibLocation^(0+128)
 15729                           
 15730                           ;ui_key.c: 404: *(uint16_t*)uiAdjbuf = Main_flowCalibrationTable.flowCalibrationArr[cali
      +                          bLocation].rtflowValue;
 15731  2B51  0839               	movf	_calibLocation^(0+128),w
 15732  2B52  0020               	movlb	0	; select bank0
 15733  2B53  00C0               	movwf	??_ui_key_process_cancel
 15734  2B54  01C1               	clrf	??_ui_key_process_cancel+1
 15735  2B55  35C0               	lslf	??_ui_key_process_cancel,f
 15736  2B56  0DC1               	rlf	??_ui_key_process_cancel+1,f
 15737  2B57  35C0               	lslf	??_ui_key_process_cancel,f
 15738  2B58  0DC1               	rlf	??_ui_key_process_cancel+1,f
 15739  2B59  0840               	movf	??_ui_key_process_cancel,w
 15740  2B5A  3E02               	addlw	2
 15741  2B5B  00C2               	movwf	??_ui_key_process_cancel+2
 15742  2B5C  3000               	movlw	0
 15743  2B5D  3D41               	addwfc	??_ui_key_process_cancel+1,w
 15744  2B5E  00C3               	movwf	??_ui_key_process_cancel+3
 15745  2B5F  3080               	movlw	128
 15746  2B60  00C4               	movwf	??_ui_key_process_cancel+4
 15747  2B61  30BF               	movlw	191
 15748  2B62  00C5               	movwf	??_ui_key_process_cancel+5
 15749  2B63  0842               	movf	??_ui_key_process_cancel+2,w
 15750  2B64  0744               	addwf	??_ui_key_process_cancel+4,w
 15751  2B65  0086               	movwf	6
 15752  2B66  0843               	movf	??_ui_key_process_cancel+3,w
 15753  2B67  3D45               	addwfc	??_ui_key_process_cancel+5,w
 15754  2B68  0087               	movwf	7
 15755  2B69  3065               	movlw	low (_uiAdjbuf| (0+256))
 15756  2B6A  0084               	movwf	4
 15757  2B6B  3001               	movlw	1	; select bank2/3
 15758  2B6C  0085               	movwf	5
 15759  2B6D  3F40               	moviw [0]fsr1
 15760  2B6E  3F80               	movwi [0]fsr0
 15761  2B6F  3F41               	moviw [1]fsr1
 15762  2B70  3F81               	movwi [1]fsr0
 15763                           
 15764                           ;ui_key.c: 405: }
 15765  2B71  0008               	return
 15766  2B72                     l13997:	
 15767                           
 15768                           ;ui_key.c: 406: else{
 15769                           ;ui_key.c: 407: menu=bkupMenu;
 15770  2B72  0021               	movlb	1	; select bank1
 15771  2B73  0838               	movf	_bkupMenu^(0+128),w
 15772  2B74  0020               	movlb	0	; select bank0
 15773  2B75  00C0               	movwf	??_ui_key_process_cancel
 15774  2B76  00F8               	movwf	_menu
 15775                           
 15776                           ;ui_key.c: 408: password=0x00;
 15777  2B77  0022               	movlb	2	; select bank2
 15778  2B78  01A2               	clrf	_password^(0+256)
 15779  2B79  01A3               	clrf	(_password+1)^(0+256)
 15780  2B7A  0008               	return
 15781  2B7B                     __end_of_ui_key_process_cancel:	
 15782                           
 15783                           	psect	text35
 15784  365B                     __ptext35:	
 15785 ;; *************** function _timer1_irq_callback *****************
 15786 ;; Defined at:
 15787 ;;		line 98 in file "src/driver/timer.c"
 15788 ;; Parameters:    Size  Location     Type
 15789 ;;		None
 15790 ;; Auto vars:     Size  Location     Type
 15791 ;;		None
 15792 ;; Return value:  Size  Location     Type
 15793 ;;                  1    wreg      void 
 15794 ;; Registers used:
 15795 ;;		wreg, status,2, status,0, pclath, cstack
 15796 ;; Tracked objects:
 15797 ;;		On entry : 0/0
 15798 ;;		On exit  : 0/0
 15799 ;;		Unchanged: 0/0
 15800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15802 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15803 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15804 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15805 ;;Total ram usage:        1 bytes
 15806 ;; Hardware stack levels used:    1
 15807 ;; Hardware stack levels required when called:    3
 15808 ;; This function calls:
 15809 ;;		_valve_stop
 15810 ;; This function is called by:
 15811 ;;		_main
 15812 ;; This function uses a non-reentrant model
 15813 ;;
 15814                           
 15815                           
 15816                           ;psect for function _timer1_irq_callback
 15817  365B                     _timer1_irq_callback:	
 15818                           
 15819                           ;timer.c: 100: if(noKeyEventTimeOut)noKeyEventTimeOut--;
 15820                           
 15821                           ;incstack = 0
 15822                           ; Regs used in _timer1_irq_callback: [wreg+status,2+status,0+pclath+cstack]
 15823  365B  0021               	movlb	1	; select bank1
 15824  365C  086F               	movf	_noKeyEventTimeOut^(0+128),w
 15825  365D  1903               	btfsc	3,2
 15826  365E  2E61               	goto	l1952
 15827  365F  3001               	movlw	1
 15828  3660  02EF               	subwf	_noKeyEventTimeOut^(0+128),f
 15829  3661                     l1952:	
 15830                           
 15831                           ;timer.c: 101: Event &= ~ (uint8_t)(0x01<<5);
 15832  3661  30DF               	movlw	223
 15833  3662  00F3               	movwf	??_timer1_irq_callback
 15834  3663  05B6               	andwf	_Event^(0+128),f
 15835  3664  3004               	movlw	4
 15836                           
 15837                           ;timer.c: 102: Event |= (uint8_t)(0x01<<3);
 15838  3665  15B6               	bsf	_Event^(0+128),3
 15839                           
 15840                           ;timer.c: 105: do{ if(valveStatus== VALVE_CLOSEING || valveStatus==VALVE_OPENING){ valve
      +                          Timer++; if(valveStatus== VALVE_CLOSEING && valveTimer>=5){ valveStatus=VALVE_CLOSED; va
      +                          lve_stop(); } if(valveStatus== VALVE_OPENING && valveTimer>=10){ valveStatus=VALVE_OPENE
      +                          D
 15841  3666  063C               	xorwf	_valveStatus^(0+128),w
 15842  3667  1903               	btfsc	3,2
 15843  3668  2E6D               	goto	l11245
 15844  3669  3003               	movlw	3
 15845  366A  063C               	xorwf	_valveStatus^(0+128),w
 15846  366B  1D03               	btfss	3,2
 15847  366C  2E88               	goto	l11261
 15848  366D                     l11245:	
 15849  366D  3001               	movlw	1
 15850  366E  00F3               	movwf	??_timer1_irq_callback
 15851  366F  07BD               	addwf	_valveTimer^(0+128),f
 15852  3670  3004               	movlw	4
 15853  3671  063C               	xorwf	_valveStatus^(0+128),w
 15854  3672  1D03               	btfss	3,2
 15855  3673  2E7C               	goto	l11253
 15856  3674  3005               	movlw	5
 15857  3675  023D               	subwf	_valveTimer^(0+128),w
 15858  3676  1C03               	skipc
 15859  3677  2E7C               	goto	l11253
 15860  3678  01BC               	clrf	_valveStatus^(0+128)
 15861  3679  0ABC               	incf	_valveStatus^(0+128),f
 15862  367A  2689  31B6         	fcall	_valve_stop
 15863  367C                     l11253:	
 15864  367C  3003               	movlw	3
 15865  367D  0021               	movlb	1	; select bank1
 15866  367E  063C               	xorwf	_valveStatus^(0+128),w
 15867  367F  1D03               	btfss	3,2
 15868  3680  0008               	return
 15869  3681  300A               	movlw	10
 15870  3682  023D               	subwf	_valveTimer^(0+128),w
 15871  3683  1C03               	skipc
 15872  3684  0008               	return
 15873  3685  3002               	movlw	2
 15874  3686  00F3               	movwf	??_timer1_irq_callback
 15875  3687  00BC               	movwf	_valveStatus^(0+128)
 15876  3688                     l11261:	
 15877  3688  2E89               	ljmp	l1896
 15878  3689                     __end_of_timer1_irq_callback:	
 15879  3689                     __ptext36:	
 15880 ;; *************** function _valve_stop *****************
 15881 ;; Defined at:
 15882 ;;		line 28 in file "src/driver/other-gpio.c"
 15883 ;; Parameters:    Size  Location     Type
 15884 ;;		None
 15885 ;; Auto vars:     Size  Location     Type
 15886 ;;		None
 15887 ;; Return value:  Size  Location     Type
 15888 ;;                  1    wreg      void 
 15889 ;; Registers used:
 15890 ;;		None
 15891 ;; Tracked objects:
 15892 ;;		On entry : 0/0
 15893 ;;		On exit  : 0/0
 15894 ;;		Unchanged: 0/0
 15895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15899 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15900 ;;Total ram usage:        0 bytes
 15901 ;; Hardware stack levels used:    1
 15902 ;; Hardware stack levels required when called:    2
 15903 ;; This function calls:
 15904 ;;		Nothing
 15905 ;; This function is called by:
 15906 ;;		_timer1_irq_callback
 15907 ;; This function uses a non-reentrant model
 15908 ;;
 15909                           
 15910                           
 15911                           ;psect for function _valve_stop
 15912  3689                     _valve_stop:	
 15913  3689                     l1896:	
 15914                           ;incstack = 0
 15915                           ; Regs used in _valve_stop: []
 15916                           ;other-gpio.c: 30: do { LATDbits.LATD7 = 0; } while(0);
 15917                           
 15918  3689  0022               	movlb	2	; select bank2
 15919  368A  138F               	bcf	15,7	;volatile
 15920                           
 15921                           ;other-gpio.c: 31: do { LATBbits.LATB0 = 0; } while(0);
 15922  368B  100D               	bcf	13,0	;volatile
 15923  368C  0008               	return
 15924  368D                     __end_of_valve_stop:	
 15925                           
 15926                           	psect	text37
 15927  36C8                     __ptext37:	
 15928 ;; *************** function _timer0_irq_callback *****************
 15929 ;; Defined at:
 15930 ;;		line 29 in file "src/driver/timer.c"
 15931 ;; Parameters:    Size  Location     Type
 15932 ;;		None
 15933 ;; Auto vars:     Size  Location     Type
 15934 ;;		None
 15935 ;; Return value:  Size  Location     Type
 15936 ;;                  1    wreg      void 
 15937 ;; Registers used:
 15938 ;;		wreg, status,2, status,0
 15939 ;; Tracked objects:
 15940 ;;		On entry : 0/0
 15941 ;;		On exit  : 0/0
 15942 ;;		Unchanged: 0/0
 15943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 15944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 15948 ;;Total ram usage:        1 bytes
 15949 ;; Hardware stack levels used:    1
 15950 ;; Hardware stack levels required when called:    2
 15951 ;; This function calls:
 15952 ;;		Nothing
 15953 ;; This function is called by:
 15954 ;;		_main
 15955 ;; This function uses a non-reentrant model
 15956 ;;
 15957                           
 15958                           
 15959                           ;psect for function _timer0_irq_callback
 15960  36C8                     _timer0_irq_callback:	
 15961                           
 15962                           ;timer.c: 31: Event &= ~ (uint8_t)(0x01<<4);
 15963                           
 15964                           ;incstack = 0
 15965                           ; Regs used in _timer0_irq_callback: [wreg+status,2+status,0]
 15966  36C8  30EF               	movlw	239
 15967  36C9  00F3               	movwf	??_timer0_irq_callback
 15968  36CA  0021               	movlb	1	; select bank1
 15969  36CB  05B6               	andwf	_Event^(0+128),f
 15970                           
 15971                           ;timer.c: 32: tmTemp16=systemTikerms;
 15972  36CC  0023               	movlb	3	; select bank3
 15973  36CD  082D               	movf	(_systemTikerms+1)^(0+384),w
 15974  36CE  0022               	movlb	2	; select bank2
 15975  36CF  00A5               	movwf	(_tmTemp16+1)^(0+256)
 15976  36D0  0023               	movlb	3	; select bank3
 15977  36D1  082C               	movf	_systemTikerms^(0+384),w
 15978  36D2  0022               	movlb	2	; select bank2
 15979  36D3  00A4               	movwf	_tmTemp16^(0+256)
 15980                           
 15981                           ;timer.c: 33: systemTikerms=0;
 15982  36D4  0023               	movlb	3	; select bank3
 15983  36D5  01AC               	clrf	_systemTikerms^(0+384)
 15984  36D6  01AD               	clrf	(_systemTikerms+1)^(0+384)
 15985                           
 15986                           ;timer.c: 36: findCardTimer+=tmTemp16;
 15987  36D7  0022               	movlb	2	; select bank2
 15988  36D8  0824               	movf	_tmTemp16^(0+256),w
 15989  36D9  0023               	movlb	3	; select bank3
 15990  36DA  07A8               	addwf	_findCardTimer^(0+384),f
 15991  36DB  0022               	movlb	2	; select bank2
 15992  36DC  0825               	movf	(_tmTemp16+1)^(0+256),w
 15993  36DD  0023               	movlb	3	; select bank3
 15994  36DE  3DA9               	addwfc	(_findCardTimer+1)^(0+384),f
 15995                           
 15996                           ;timer.c: 47: if(findCardTimer>330){
 15997  36DF  3001               	movlw	1
 15998  36E0  0229               	subwf	(_findCardTimer+1)^(0+384),w
 15999  36E1  304B               	movlw	75
 16000  36E2  1903               	skipnz
 16001  36E3  0228               	subwf	_findCardTimer^(0+384),w
 16002  36E4  1C03               	skipc
 16003  36E5  2EEB               	goto	l11223
 16004                           
 16005                           ;timer.c: 48: Event |= (uint8_t)(0x01<<0);
 16006  36E6  0021               	movlb	1	; select bank1
 16007  36E7  1436               	bsf	_Event^(0+128),0
 16008                           
 16009                           ;timer.c: 49: findCardTimer=0;
 16010  36E8  0023               	movlb	3	; select bank3
 16011  36E9  01A8               	clrf	_findCardTimer^(0+384)
 16012  36EA  01A9               	clrf	(_findCardTimer+1)^(0+384)
 16013  36EB                     l11223:	
 16014                           
 16015                           ;timer.c: 50: }
 16016                           ;timer.c: 51: if(uart1ReceivedTimer){
 16017  36EB  0022               	movlb	2	; select bank2
 16018  36EC  082D               	movf	_uart1ReceivedTimer^(0+256),w
 16019  36ED  1903               	btfsc	3,2
 16020  36EE  2F01               	goto	l11231
 16021                           
 16022                           ;timer.c: 52: uart1ReceivedTimeout+=tmTemp16;
 16023  36EF  0824               	movf	_tmTemp16^(0+256),w
 16024  36F0  0023               	movlb	3	; select bank3
 16025  36F1  07AE               	addwf	_uart1ReceivedTimeout^(0+384),f
 16026  36F2  0022               	movlb	2	; select bank2
 16027  36F3  0825               	movf	(_tmTemp16+1)^(0+256),w
 16028  36F4  0023               	movlb	3	; select bank3
 16029  36F5  3DAF               	addwfc	(_uart1ReceivedTimeout+1)^(0+384),f
 16030                           
 16031                           ;timer.c: 53: if(uart1ReceivedTimeout>=200)
 16032  36F6  3000               	movlw	0
 16033  36F7  022F               	subwf	(_uart1ReceivedTimeout+1)^(0+384),w
 16034  36F8  30C8               	movlw	200
 16035  36F9  1903               	skipnz
 16036  36FA  022E               	subwf	_uart1ReceivedTimeout^(0+384),w
 16037  36FB  1C03               	skipc
 16038  36FC  2F01               	goto	l11231
 16039                           
 16040                           ;timer.c: 54: {
 16041                           ;timer.c: 55: uart1ReceivedTimer=0;
 16042  36FD  0022               	movlb	2	; select bank2
 16043  36FE  01AD               	clrf	_uart1ReceivedTimer^(0+256)
 16044                           
 16045                           ;timer.c: 56: Event |= (uint8_t)(0x01<<2);
 16046  36FF  0021               	movlb	1	; select bank1
 16047  3700  1536               	bsf	_Event^(0+128),2
 16048  3701                     l11231:	
 16049                           
 16050                           ;timer.c: 57: }
 16051                           ;timer.c: 58: }
 16052                           ;timer.c: 59: adcSamplingTimer+=tmTemp16;
 16053  3701  0022               	movlb	2	; select bank2
 16054  3702  0824               	movf	_tmTemp16^(0+256),w
 16055  3703  0021               	movlb	1	; select bank1
 16056  3704  07AC               	addwf	_adcSamplingTimer^(0+128),f	;volatile
 16057  3705  0022               	movlb	2	; select bank2
 16058  3706  0825               	movf	(_tmTemp16+1)^(0+256),w
 16059  3707  0021               	movlb	1	; select bank1
 16060  3708  3DAD               	addwfc	(_adcSamplingTimer+1)^(0+128),f	;volatile
 16061                           
 16062                           ;timer.c: 60: if(adcSamplingTimer>=(500)){
 16063  3709  3001               	movlw	1
 16064  370A  022D               	subwf	(_adcSamplingTimer+1)^(0+128),w	;volatile
 16065  370B  30F4               	movlw	244
 16066  370C  1903               	skipnz
 16067  370D  022C               	subwf	_adcSamplingTimer^(0+128),w	;volatile
 16068  370E  1803               	btfsc	3,0
 16069                           
 16070                           ;timer.c: 61: Event |= (uint8_t)(0x01<<1);
 16071  370F  14B6               	bsf	_Event^(0+128),1
 16072  3710  0008               	return
 16073  3711                     __end_of_timer0_irq_callback:	
 16074                           
 16075                           	psect	text38
 16076  0801                     __ptext38:	
 16077 ;; *************** function _rfid_comm_process *****************
 16078 ;; Defined at:
 16079 ;;		line 179 in file "src/app/rfid_demo.c"
 16080 ;; Parameters:    Size  Location     Type
 16081 ;;		None
 16082 ;; Auto vars:     Size  Location     Type
 16083 ;;  ret             1    0[BANK3 ] unsigned char 
 16084 ;;  result          1    0        enum E5489
 16085 ;; Return value:  Size  Location     Type
 16086 ;;                  1    wreg      unsigned char 
 16087 ;; Registers used:
 16088 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16089 ;; Tracked objects:
 16090 ;;		On entry : 0/0
 16091 ;;		On exit  : 0/0
 16092 ;;		Unchanged: 0/0
 16093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16095 ;;      Locals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 16096 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0
 16097 ;;      Totals:         0       0       1       0       1       0       0       0       0       0       0       0       
      +0
 16098 ;;Total ram usage:        2 bytes
 16099 ;; Hardware stack levels used:    1
 16100 ;; Hardware stack levels required when called:   10
 16101 ;; This function calls:
 16102 ;;		_delay
 16103 ;;		_lcd_disp_str
 16104 ;;		_mfapi_is_new_card_present
 16105 ;;		_picc_halt_a
 16106 ;;		_picc_select
 16107 ;;		_picc_stop_cryptol
 16108 ;;		_rfid_comm_process_read_dec
 16109 ;;		_rfid_comm_process_read_header
 16110 ;;		_rfid_comm_process_read_inc
 16111 ;;		_rfid_comm_process_recharge
 16112 ;;		_ui_disp_balance_and_volume
 16113 ;; This function is called by:
 16114 ;;		_main
 16115 ;; This function uses a non-reentrant model
 16116 ;;
 16117                           
 16118                           
 16119                           ;psect for function _rfid_comm_process
 16120  0801                     _rfid_comm_process:	
 16121                           
 16122                           ;rfid_demo.c: 181: uint8_t ret = 0;
 16123                           
 16124                           ;incstack = 0
 16125                           ; Regs used in _rfid_comm_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16126  0801  0023               	movlb	3	; select bank3
 16127  0802  01C7               	clrf	rfid_comm_process@ret^(0+384)
 16128                           
 16129                           ;rfid_demo.c: 185: CardError=NO_CARD;
 16130                           
 16131                           ;rfid_demo.c: 183: em_PcdStatusCode result;
 16132                           ;rfid_demo.c: 184: do {
 16133  0803  0022               	movlb	2	; select bank2
 16134  0804  01A8               	clrf	_CardError^(0+256)
 16135                           
 16136                           ;rfid_demo.c: 186: if (!(mfapi_is_new_card_present()))break;
 16137  0805  238C  3188         	fcall	_mfapi_is_new_card_present
 16138  0807  3A00               	xorlw	0
 16139  0808  1903               	btfsc	3,2
 16140  0809  28AC               	goto	l15233
 16141                           
 16142                           ;rfid_demo.c: 187: CardError=SELECT_CARD_ERROR;
 16143  080A  0022               	movlb	2	; select bank2
 16144  080B  01A8               	clrf	_CardError^(0+256)
 16145  080C  0AA8               	incf	_CardError^(0+256),f
 16146                           
 16147                           ;rfid_demo.c: 188: piccResult = picc_select(&PiccUid, 0);
 16148  080D  0020               	movlb	0	; select bank0
 16149  080E  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 16150  080F  01CA               	clrf	picc_select@validBits
 16151  0810  23F6  3188         	fcall	_picc_select
 16152  0812  0021               	movlb	1	; select bank1
 16153  0813  00EC               	movwf	??_rfid_comm_process^(0+128)
 16154  0814  00BB               	movwf	_piccResult^(0+128)
 16155                           
 16156                           ;rfid_demo.c: 189: if (piccResult != STATUS_OK)break;
 16157  0815  083B               	movf	_piccResult^(0+128),w
 16158  0816  1D03               	btfss	3,2
 16159  0817  28AC               	goto	l15233
 16160                           
 16161                           ;rfid_demo.c: 190: if (PiccUid.sak != 0x08) break;
 16162  0818  3008               	movlw	8
 16163  0819  0023               	movlb	3	; select bank3
 16164  081A  063B               	xorwf	(_PiccUid^(0+384)+11),w
 16165  081B  1D03               	btfss	3,2
 16166  081C  28AC               	goto	l15233
 16167                           
 16168                           ;rfid_demo.c: 191: CardError=READ_HEADER_ERROR;;
 16169  081D  3002               	movlw	2
 16170  081E  0021               	movlb	1	; select bank1
 16171  081F  00EC               	movwf	??_rfid_comm_process^(0+128)
 16172  0820  0022               	movlb	2	; select bank2
 16173  0821  00A8               	movwf	_CardError^(0+256)
 16174                           
 16175                           ;rfid_demo.c: 192: ret=rfid_comm_process_read_header();
 16176  0822  3195  254C  3188   	fcall	_rfid_comm_process_read_header
 16177  0825  0021               	movlb	1	; select bank1
 16178  0826  00EC               	movwf	??_rfid_comm_process^(0+128)
 16179  0827  0023               	movlb	3	; select bank3
 16180  0828  00C7               	movwf	rfid_comm_process@ret^(0+384)
 16181                           
 16182                           ;rfid_demo.c: 193: if(!ret)break;
 16183  0829  0847               	movf	rfid_comm_process@ret^(0+384),w
 16184  082A  1903               	btfsc	3,2
 16185  082B  28AC               	goto	l15233
 16186                           
 16187                           ;rfid_demo.c: 194: ret=rfid_comm_process_read_inc();
 16188  082C  2751  3188         	fcall	_rfid_comm_process_read_inc
 16189  082E  0021               	movlb	1	; select bank1
 16190  082F  00EC               	movwf	??_rfid_comm_process^(0+128)
 16191  0830  0023               	movlb	3	; select bank3
 16192  0831  00C7               	movwf	rfid_comm_process@ret^(0+384)
 16193                           
 16194                           ;rfid_demo.c: 195: if(!ret)break;
 16195  0832  0847               	movf	rfid_comm_process@ret^(0+384),w
 16196  0833  1903               	btfsc	3,2
 16197  0834  28AC               	goto	l15233
 16198                           
 16199                           ;rfid_demo.c: 196: ret=rfid_comm_process_read_dec();
 16200  0835  271B  3188         	fcall	_rfid_comm_process_read_dec
 16201  0837  0021               	movlb	1	; select bank1
 16202  0838  00EC               	movwf	??_rfid_comm_process^(0+128)
 16203  0839  0023               	movlb	3	; select bank3
 16204  083A  00C7               	movwf	rfid_comm_process@ret^(0+384)
 16205                           
 16206                           ;rfid_demo.c: 197: if(!ret)break;
 16207  083B  0847               	movf	rfid_comm_process@ret^(0+384),w
 16208  083C  1903               	btfsc	3,2
 16209  083D  28AC               	goto	l15233
 16210                           
 16211                           ;rfid_demo.c: 198: ui_disp_balance_and_volume();
 16212  083E  20B9  3188         	fcall	_ui_disp_balance_and_volume
 16213                           
 16214                           ;rfid_demo.c: 199: do { LATAbits.LATA2 = 1; } while(0);;do { LATFbits.LATF0 = 1; } while
      +                          (0);;do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF1 = 0; } while(0);;
 16215  0840  0022               	movlb	2	; select bank2
 16216  0841  150C               	bsf	12,2	;volatile
 16217  0842  0027               	movlb	7	; select bank7
 16218  0843  140C               	bsf	12,0	;volatile
 16219  0844  0022               	movlb	2	; select bank2
 16220  0845  118C               	bcf	12,3	;volatile
 16221  0846  0027               	movlb	7	; select bank7
 16222  0847  108C               	bcf	12,1	;volatile
 16223                           
 16224                           ;rfid_demo.c: 200: for(ret=0;ret<15;ret++){
 16225  0848  0023               	movlb	3	; select bank3
 16226  0849  300F               	movlw	15
 16227  084A  01C7               	clrf	rfid_comm_process@ret^(0+384)
 16228  084B  0247               	subwf	rfid_comm_process@ret^(0+384),w
 16229  084C  1803               	btfsc	3,0
 16230  084D  285E               	goto	l15203
 16231  084E                     l15197:	
 16232                           
 16233                           ;rfid_demo.c: 201: delay(0x904c);
 16234  084E  304C               	movlw	76
 16235  084F  00F3               	movwf	delay@t
 16236  0850  3090               	movlw	144
 16237  0851  00F4               	movwf	delay@t+1
 16238  0852  319A  2219  3188   	fcall	_delay
 16239  0855  3001               	movlw	1
 16240  0856  0021               	movlb	1	; select bank1
 16241  0857  00EC               	movwf	??_rfid_comm_process^(0+128)
 16242  0858  0023               	movlb	3	; select bank3
 16243  0859  07C7               	addwf	rfid_comm_process@ret^(0+384),f
 16244  085A  300F               	movlw	15
 16245  085B  0247               	subwf	rfid_comm_process@ret^(0+384),w
 16246  085C  1C03               	skipc
 16247  085D  284E               	goto	l15197
 16248  085E                     l15203:	
 16249                           
 16250                           ;rfid_demo.c: 202: }
 16251                           ;rfid_demo.c: 203: ret=rfid_comm_process_recharge();
 16252  085E  319A  2253  3188   	fcall	_rfid_comm_process_recharge
 16253  0861  0021               	movlb	1	; select bank1
 16254  0862  00EC               	movwf	??_rfid_comm_process^(0+128)
 16255  0863  0023               	movlb	3	; select bank3
 16256  0864  00C7               	movwf	rfid_comm_process@ret^(0+384)
 16257                           
 16258                           ;rfid_demo.c: 204: if(!ret){
 16259  0865  0847               	movf	rfid_comm_process@ret^(0+384),w
 16260  0866  1D03               	btfss	3,2
 16261  0867  2876               	goto	l15211
 16262                           
 16263                           ;rfid_demo.c: 205: if(CardError==RECHAERGE_OVERFLOW){
 16264  0868  3014               	movlw	20
 16265  0869  0022               	movlb	2	; select bank2
 16266  086A  0628               	xorwf	_CardError^(0+256),w
 16267  086B  1D03               	btfss	3,2
 16268  086C  2878               	goto	l15213
 16269                           
 16270                           ;rfid_demo.c: 206: lcd_disp_str((uint8_t*)("--full--"));
 16271  086D  3070               	movlw	low (STR_16| (0+32768))
 16272  086E  0020               	movlb	0	; select bank0
 16273  086F  00A2               	movwf	lcd_disp_str@str
 16274  0870  30AA               	movlw	high (STR_16| (0+32768))
 16275  0871  00A3               	movwf	lcd_disp_str@str+1
 16276  0872  319F  27BD  3188   	fcall	_lcd_disp_str
 16277                           
 16278                           ;rfid_demo.c: 207: }
 16279                           ;rfid_demo.c: 208: }else{
 16280  0875  2878               	goto	l15213
 16281  0876                     l15211:	
 16282                           
 16283                           ;rfid_demo.c: 209: ui_disp_balance_and_volume();
 16284  0876  20B9  3188         	fcall	_ui_disp_balance_and_volume
 16285  0878                     l15213:	
 16286                           
 16287                           ;rfid_demo.c: 210: }
 16288                           ;rfid_demo.c: 211: for(ret=0;ret<12;ret++)
 16289  0878  0023               	movlb	3	; select bank3
 16290  0879  300C               	movlw	12
 16291  087A  01C7               	clrf	rfid_comm_process@ret^(0+384)
 16292  087B  0247               	subwf	rfid_comm_process@ret^(0+384),w
 16293  087C  1803               	btfsc	3,0
 16294  087D  28A7               	goto	l15231
 16295                           
 16296                           ;rfid_demo.c: 212: {
 16297                           ;rfid_demo.c: 213: do { LATAbits.LATA2 = ~LATAbits.LATA2; } while(0);;
 16298  087E  1003               	clrc
 16299  087F                     L3:	
 16300  087F  0022               	movlb	2	; select bank2
 16301  0880  1D0C               	btfss	12,2	;volatile
 16302  0881  1403               	setc
 16303  0882  1C03               	btfss	3,0
 16304  0883  2887               	goto	u13890
 16305  0884  0022               	movlb	2	; select bank2
 16306  0885  150C               	bsf	12,2	;volatile
 16307  0886  2889               	goto	l15221
 16308  0887                     u13890:	
 16309  0887  0022               	movlb	2	; select bank2
 16310  0888  110C               	bcf	12,2	;volatile
 16311  0889                     l15221:	
 16312                           ;rfid_demo.c: 214: do{ delay(0x904c); delay(0x904c); delay(18470); }while(0);;
 16313                           
 16314  0889  304C               	movlw	76
 16315  088A  00F3               	movwf	delay@t
 16316  088B  3090               	movlw	144
 16317  088C  00F4               	movwf	delay@t+1
 16318  088D  319A  2219  3188   	fcall	_delay
 16319  0890  304C               	movlw	76
 16320  0891  00F3               	movwf	delay@t
 16321  0892  3090               	movlw	144
 16322  0893  00F4               	movwf	delay@t+1
 16323  0894  319A  2219  3188   	fcall	_delay
 16324  0897  3026               	movlw	38
 16325  0898  00F3               	movwf	delay@t
 16326  0899  3048               	movlw	72
 16327  089A  00F4               	movwf	delay@t+1
 16328  089B  319A  2219  3188   	fcall	_delay
 16329  089E  3001               	movlw	1
 16330  089F  0021               	movlb	1	; select bank1
 16331  08A0  00EC               	movwf	??_rfid_comm_process^(0+128)
 16332  08A1  0023               	movlb	3	; select bank3
 16333  08A2  07C7               	addwf	rfid_comm_process@ret^(0+384),f
 16334  08A3  300C               	movlw	12
 16335  08A4  0247               	subwf	rfid_comm_process@ret^(0+384),w
 16336  08A5  1C03               	skipc
 16337  08A6  287F               	goto	L3
 16338  08A7                     l15231:	
 16339                           
 16340                           ;rfid_demo.c: 215: }
 16341                           ;rfid_demo.c: 216: CardError=NO_ERROR;
 16342  08A7  3015               	movlw	21
 16343  08A8  0021               	movlb	1	; select bank1
 16344  08A9  00EC               	movwf	??_rfid_comm_process^(0+128)
 16345  08AA  0022               	movlb	2	; select bank2
 16346  08AB  00A8               	movwf	_CardError^(0+256)
 16347  08AC                     l15233:	
 16348                           ;rfid_demo.c: 218: } while (0);
 16349                           ;rfid_demo.c: 219: do{ picc_halt_a(); picc_stop_cryptol(); picc_halt_a(); }while(0);;
 16350                           
 16351  08AC  235C  3188         	fcall	_picc_halt_a
 16352  08AE  2715  3188         	fcall	_picc_stop_cryptol
 16353  08B0  235C               	fcall	_picc_halt_a
 16354                           
 16355                           ;rfid_demo.c: 226: findCardTimer=0;
 16356  08B1  0023               	movlb	3	; select bank3
 16357  08B2  30FE               	movlw	254
 16358  08B3  01A8               	clrf	_findCardTimer^(0+384)
 16359  08B4  01A9               	clrf	(_findCardTimer+1)^(0+384)
 16360                           
 16361                           ;rfid_demo.c: 227: Event &= ~(uint8_t)(0x01<<0);
 16362  08B5  0021               	movlb	1	; select bank1
 16363  08B6  00EC               	movwf	??_rfid_comm_process^(0+128)
 16364  08B7  05B6               	andwf	_Event^(0+128),f
 16365  08B8  0008               	return
 16366  08B9                     __end_of_rfid_comm_process:	
 16367                           ;rfid_demo.c: 228: return ret;
 16368                           ;	Return value of _rfid_comm_process is never used
 16369                           
 16370  08B9                     __ptext39:	
 16371 ;; *************** function _ui_disp_balance_and_volume *****************
 16372 ;; Defined at:
 16373 ;;		line 198 in file "src/api/ui.c"
 16374 ;; Parameters:    Size  Location     Type
 16375 ;;		None
 16376 ;; Auto vars:     Size  Location     Type
 16377 ;;		None
 16378 ;; Return value:  Size  Location     Type
 16379 ;;                  1    wreg      void 
 16380 ;; Registers used:
 16381 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16382 ;; Tracked objects:
 16383 ;;		On entry : 0/0
 16384 ;;		On exit  : 0/0
 16385 ;;		Unchanged: 0/0
 16386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16390 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 16391 ;;Total ram usage:        2 bytes
 16392 ;; Hardware stack levels used:    1
 16393 ;; Hardware stack levels required when called:    5
 16394 ;; This function calls:
 16395 ;;		___aldiv
 16396 ;;		_lcd_clear_buffer
 16397 ;;		_lcd_disp_cln
 16398 ;;		_lcd_disp_dp
 16399 ;;		_lcd_disp_str
 16400 ;;		_ui_head_hide
 16401 ;;		_ui_uint32_2_str
 16402 ;; This function is called by:
 16403 ;;		_ui_disp_clear_balance
 16404 ;;		_ui_disp_menu
 16405 ;;		_rfid_comm_process
 16406 ;; This function uses a non-reentrant model
 16407 ;;
 16408                           
 16409                           
 16410                           ;psect for function _ui_disp_balance_and_volume
 16411  08B9                     _ui_disp_balance_and_volume:	
 16412                           
 16413                           ;ui.c: 200: __q31=rtBalanceMoney;
 16414                           
 16415                           ;incstack = 0
 16416                           ; Regs used in _ui_disp_balance_and_volume: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16417  08B9  0021               	movlb	1	; select bank1
 16418  08BA  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 16419  08BB  00C1               	movwf	(___q31+3)^(0+128)
 16420  08BC  0844               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 16421  08BD  00C0               	movwf	(___q31+2)^(0+128)
 16422  08BE  0843               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 16423  08BF  00BF               	movwf	(___q31+1)^(0+128)
 16424  08C0  0842               	movf	_rtBalanceMoney^(0+128),w	;volatile
 16425  08C1  00BE               	movwf	___q31^(0+128)
 16426                           
 16427                           ;ui.c: 201: __q31/=100;
 16428  08C2  0020               	movlb	0	; select bank0
 16429  08C3  3064               	movlw	100
 16430  08C4  01AB               	clrf	___aldiv@divisor+3
 16431  08C5  01AA               	clrf	___aldiv@divisor+2
 16432  08C6  01A9               	clrf	___aldiv@divisor+1
 16433  08C7  00A8               	movwf	___aldiv@divisor
 16434  08C8  0021               	movlb	1	; select bank1
 16435  08C9  0841               	movf	(___q31+3)^(0+128),w
 16436  08CA  0020               	movlb	0	; select bank0
 16437  08CB  00AF               	movwf	___aldiv@dividend+3
 16438  08CC  0021               	movlb	1	; select bank1
 16439  08CD  0840               	movf	(___q31+2)^(0+128),w
 16440  08CE  0020               	movlb	0	; select bank0
 16441  08CF  00AE               	movwf	___aldiv@dividend+2
 16442  08D0  0021               	movlb	1	; select bank1
 16443  08D1  083F               	movf	(___q31+1)^(0+128),w
 16444  08D2  0020               	movlb	0	; select bank0
 16445  08D3  00AD               	movwf	___aldiv@dividend+1
 16446  08D4  0021               	movlb	1	; select bank1
 16447  08D5  083E               	movf	___q31^(0+128),w
 16448  08D6  0020               	movlb	0	; select bank0
 16449  08D7  00AC               	movwf	___aldiv@dividend
 16450  08D8  22E0  3188         	fcall	___aldiv
 16451  08DA  0020               	movlb	0	; select bank0
 16452  08DB  082B               	movf	?___aldiv+3,w
 16453  08DC  0021               	movlb	1	; select bank1
 16454  08DD  00C1               	movwf	(___q31+3)^(0+128)
 16455  08DE  0020               	movlb	0	; select bank0
 16456  08DF  082A               	movf	?___aldiv+2,w
 16457  08E0  0021               	movlb	1	; select bank1
 16458  08E1  00C0               	movwf	(___q31+2)^(0+128)
 16459  08E2  0020               	movlb	0	; select bank0
 16460  08E3  0829               	movf	?___aldiv+1,w
 16461  08E4  0021               	movlb	1	; select bank1
 16462  08E5  00BF               	movwf	(___q31+1)^(0+128)
 16463  08E6  0020               	movlb	0	; select bank0
 16464  08E7  0828               	movf	?___aldiv,w
 16465  08E8  0021               	movlb	1	; select bank1
 16466  08E9  00BE               	movwf	___q31^(0+128)
 16467                           
 16468                           ;ui.c: 202: if(__q31>=0){
 16469  08EA  1BC1               	btfsc	(___q31+3)^(0+128),7
 16470  08EB  291D               	goto	l439
 16471                           
 16472                           ;ui.c: 203: if(__q31>9999)__q31=9999;
 16473  08EC  1BC1               	btfsc	(___q31+3)^(0+128),7
 16474  08ED  2900               	goto	l12547
 16475  08EE  0841               	movf	(___q31+3)^(0+128),w
 16476  08EF  1D03               	btfss	3,2
 16477  08F0  28FA               	goto	l12545
 16478  08F1  0840               	movf	(___q31+2)^(0+128),w
 16479  08F2  1D03               	btfss	3,2
 16480  08F3  28FA               	goto	l12545
 16481  08F4  3010               	movlw	16
 16482  08F5  023E               	subwf	___q31^(0+128),w
 16483  08F6  3027               	movlw	39
 16484  08F7  3B3F               	subwfb	(___q31+1)^(0+128),w
 16485  08F8  1C03               	btfss	3,0
 16486  08F9  2900               	goto	l12547
 16487  08FA                     l12545:	
 16488  08FA  3027               	movlw	39
 16489  08FB  01C1               	clrf	(___q31+3)^(0+128)
 16490  08FC  01C0               	clrf	(___q31+2)^(0+128)
 16491  08FD  00BF               	movwf	(___q31+1)^(0+128)
 16492  08FE  300F               	movlw	15
 16493  08FF  00BE               	movwf	___q31^(0+128)
 16494  0900                     l12547:	
 16495                           
 16496                           ;ui.c: 204: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 4);
 16497  0900  0841               	movf	(___q31+3)^(0+128),w
 16498  0901  0020               	movlb	0	; select bank0
 16499  0902  00B9               	movwf	ui_uint32_2_str@x+3
 16500  0903  0021               	movlb	1	; select bank1
 16501  0904  0840               	movf	(___q31+2)^(0+128),w
 16502  0905  0020               	movlb	0	; select bank0
 16503  0906  00B8               	movwf	ui_uint32_2_str@x+2
 16504  0907  0021               	movlb	1	; select bank1
 16505  0908  083F               	movf	(___q31+1)^(0+128),w
 16506  0909  0020               	movlb	0	; select bank0
 16507  090A  00B7               	movwf	ui_uint32_2_str@x+1
 16508  090B  0021               	movlb	1	; select bank1
 16509  090C  083E               	movf	___q31^(0+128),w
 16510  090D  0020               	movlb	0	; select bank0
 16511  090E  00B6               	movwf	ui_uint32_2_str@x
 16512  090F  3004               	movlw	4
 16513  0910  00C0               	movwf	??_ui_disp_balance_and_volume
 16514  0911  00BA               	movwf	ui_uint32_2_str@len
 16515  0912  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 16516  0913  2236  3188         	fcall	_ui_uint32_2_str
 16517                           
 16518                           ;ui.c: 205: ui_head_hide(lcdBuf+4, 3);
 16519  0915  3003               	movlw	3
 16520  0916  0020               	movlb	0	; select bank0
 16521  0917  00C0               	movwf	??_ui_disp_balance_and_volume
 16522  0918  00F3               	movwf	ui_head_hide@loc
 16523  0919  3060               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 16524  091A  221E  3188         	fcall	_ui_head_hide
 16525                           
 16526                           ;ui.c: 206: }else{
 16527  091C  295D               	goto	l12561
 16528  091D                     l439:	
 16529                           
 16530                           ;ui.c: 207: __q31=0-__q31;
 16531  091D  09BE               	comf	___q31^(0+128),f
 16532  091E  09BF               	comf	(___q31+1)^(0+128),f
 16533  091F  09C0               	comf	(___q31+2)^(0+128),f
 16534  0920  09C1               	comf	(___q31+3)^(0+128),f
 16535  0921  0ABE               	incf	___q31^(0+128),f
 16536  0922  1903               	skipnz
 16537  0923  0ABF               	incf	(___q31+1)^(0+128),f
 16538  0924  1903               	skipnz
 16539  0925  0AC0               	incf	(___q31+2)^(0+128),f
 16540  0926  1903               	skipnz
 16541  0927  0AC1               	incf	(___q31+3)^(0+128),f
 16542                           
 16543                           ;ui.c: 208: if(__q31>999)__q31=999;
 16544  0928  1BC1               	btfsc	(___q31+3)^(0+128),7
 16545  0929  293C               	goto	l12555
 16546  092A  0841               	movf	(___q31+3)^(0+128),w
 16547  092B  1D03               	btfss	3,2
 16548  092C  2936               	goto	l12553
 16549  092D  0840               	movf	(___q31+2)^(0+128),w
 16550  092E  1D03               	btfss	3,2
 16551  092F  2936               	goto	l12553
 16552  0930  30E8               	movlw	232
 16553  0931  023E               	subwf	___q31^(0+128),w
 16554  0932  3003               	movlw	3
 16555  0933  3B3F               	subwfb	(___q31+1)^(0+128),w
 16556  0934  1C03               	btfss	3,0
 16557  0935  293C               	goto	l12555
 16558  0936                     l12553:	
 16559  0936  3003               	movlw	3
 16560  0937  01C1               	clrf	(___q31+3)^(0+128)
 16561  0938  01C0               	clrf	(___q31+2)^(0+128)
 16562  0939  00BF               	movwf	(___q31+1)^(0+128)
 16563  093A  30E7               	movlw	231
 16564  093B  00BE               	movwf	___q31^(0+128)
 16565  093C                     l12555:	
 16566                           
 16567                           ;ui.c: 209: ui_uint32_2_str((uint8_t*) (lcdBuf + sizeof (lcdBuf) - 2), __q31, 3);
 16568  093C  0841               	movf	(___q31+3)^(0+128),w
 16569  093D  0020               	movlb	0	; select bank0
 16570  093E  00B9               	movwf	ui_uint32_2_str@x+3
 16571  093F  0021               	movlb	1	; select bank1
 16572  0940  0840               	movf	(___q31+2)^(0+128),w
 16573  0941  0020               	movlb	0	; select bank0
 16574  0942  00B8               	movwf	ui_uint32_2_str@x+2
 16575  0943  0021               	movlb	1	; select bank1
 16576  0944  083F               	movf	(___q31+1)^(0+128),w
 16577  0945  0020               	movlb	0	; select bank0
 16578  0946  00B7               	movwf	ui_uint32_2_str@x+1
 16579  0947  0021               	movlb	1	; select bank1
 16580  0948  083E               	movf	___q31^(0+128),w
 16581  0949  0020               	movlb	0	; select bank0
 16582  094A  00B6               	movwf	ui_uint32_2_str@x
 16583  094B  3003               	movlw	3
 16584  094C  00C0               	movwf	??_ui_disp_balance_and_volume
 16585  094D  00BA               	movwf	ui_uint32_2_str@len
 16586  094E  3063               	movlw	(low ((_lcdBuf| (0+256)+7)))& (0+255)
 16587  094F  2236  3188         	fcall	_ui_uint32_2_str
 16588                           
 16589                           ;ui.c: 210: ui_head_hide(lcdBuf+4, 2);
 16590  0951  3002               	movlw	2
 16591  0952  0020               	movlb	0	; select bank0
 16592  0953  00C0               	movwf	??_ui_disp_balance_and_volume
 16593  0954  00F3               	movwf	ui_head_hide@loc
 16594  0955  3060               	movlw	(low ((_lcdBuf| (0+256)+4)))& (0+255)
 16595  0956  221E  3188         	fcall	_ui_head_hide
 16596                           
 16597                           ;ui.c: 211: lcdBuf[4]='-';
 16598  0958  302D               	movlw	45
 16599  0959  0020               	movlb	0	; select bank0
 16600  095A  00C0               	movwf	??_ui_disp_balance_and_volume
 16601  095B  0022               	movlb	2	; select bank2
 16602  095C  00E0               	movwf	(_lcdBuf^(0+256)+4)
 16603  095D                     l12561:	
 16604                           
 16605                           ;ui.c: 213: }
 16606                           ;ui.c: 215: __q31=rtBalanceMoney;
 16607  095D  0021               	movlb	1	; select bank1
 16608  095E  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 16609  095F  00C1               	movwf	(___q31+3)^(0+128)
 16610  0960  0844               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 16611  0961  00C0               	movwf	(___q31+2)^(0+128)
 16612  0962  0843               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 16613  0963  00BF               	movwf	(___q31+1)^(0+128)
 16614  0964  0842               	movf	_rtBalanceMoney^(0+128),w	;volatile
 16615  0965  00BE               	movwf	___q31^(0+128)
 16616                           
 16617                           ;ui.c: 216: __q31=__q31/mainSystemData.price;
 16618  0966  3012               	movlw	18
 16619  0967  0084               	movwf	4
 16620  0968  30BF               	movlw	191
 16621  0969  0085               	movwf	5
 16622  096A  3F00               	moviw [0]fsr0
 16623  096B  0020               	movlb	0	; select bank0
 16624  096C  00C0               	movwf	??_ui_disp_balance_and_volume
 16625  096D  3F01               	moviw [1]fsr0
 16626  096E  00C1               	movwf	??_ui_disp_balance_and_volume+1
 16627  096F  0840               	movf	??_ui_disp_balance_and_volume,w
 16628  0970  00A8               	movwf	___aldiv@divisor
 16629  0971  0841               	movf	??_ui_disp_balance_and_volume+1,w
 16630  0972  00A9               	movwf	___aldiv@divisor+1
 16631  0973  0D89               	rlf	9,f
 16632  0974  3B89               	subwfb	9,f
 16633  0975  0989               	comf	9,f
 16634  0976  00AA               	movwf	___aldiv@divisor+2
 16635  0977  00AB               	movwf	___aldiv@divisor+3
 16636  0978  0021               	movlb	1	; select bank1
 16637  0979  0841               	movf	(___q31+3)^(0+128),w
 16638  097A  0020               	movlb	0	; select bank0
 16639  097B  00AF               	movwf	___aldiv@dividend+3
 16640  097C  0021               	movlb	1	; select bank1
 16641  097D  0840               	movf	(___q31+2)^(0+128),w
 16642  097E  0020               	movlb	0	; select bank0
 16643  097F  00AE               	movwf	___aldiv@dividend+2
 16644  0980  0021               	movlb	1	; select bank1
 16645  0981  083F               	movf	(___q31+1)^(0+128),w
 16646  0982  0020               	movlb	0	; select bank0
 16647  0983  00AD               	movwf	___aldiv@dividend+1
 16648  0984  0021               	movlb	1	; select bank1
 16649  0985  083E               	movf	___q31^(0+128),w
 16650  0986  0020               	movlb	0	; select bank0
 16651  0987  00AC               	movwf	___aldiv@dividend
 16652  0988  22E0  3188         	fcall	___aldiv
 16653  098A  0020               	movlb	0	; select bank0
 16654  098B  082B               	movf	?___aldiv+3,w
 16655  098C  0021               	movlb	1	; select bank1
 16656  098D  00C1               	movwf	(___q31+3)^(0+128)
 16657  098E  0020               	movlb	0	; select bank0
 16658  098F  082A               	movf	?___aldiv+2,w
 16659  0990  0021               	movlb	1	; select bank1
 16660  0991  00C0               	movwf	(___q31+2)^(0+128)
 16661  0992  0020               	movlb	0	; select bank0
 16662  0993  0829               	movf	?___aldiv+1,w
 16663  0994  0021               	movlb	1	; select bank1
 16664  0995  00BF               	movwf	(___q31+1)^(0+128)
 16665  0996  0020               	movlb	0	; select bank0
 16666  0997  0828               	movf	?___aldiv,w
 16667  0998  0021               	movlb	1	; select bank1
 16668  0999  00BE               	movwf	___q31^(0+128)
 16669                           
 16670                           ;ui.c: 218: if(__q31>=0){
 16671  099A  1BC1               	btfsc	(___q31+3)^(0+128),7
 16672  099B  29CD               	goto	l443
 16673                           
 16674                           ;ui.c: 219: if(__q31>9999)__q31=9999;
 16675  099C  1BC1               	btfsc	(___q31+3)^(0+128),7
 16676  099D  29B0               	goto	l12571
 16677  099E  0841               	movf	(___q31+3)^(0+128),w
 16678  099F  1D03               	btfss	3,2
 16679  09A0  29AA               	goto	l12569
 16680  09A1  0840               	movf	(___q31+2)^(0+128),w
 16681  09A2  1D03               	btfss	3,2
 16682  09A3  29AA               	goto	l12569
 16683  09A4  3010               	movlw	16
 16684  09A5  023E               	subwf	___q31^(0+128),w
 16685  09A6  3027               	movlw	39
 16686  09A7  3B3F               	subwfb	(___q31+1)^(0+128),w
 16687  09A8  1C03               	btfss	3,0
 16688  09A9  29B0               	goto	l12571
 16689  09AA                     l12569:	
 16690  09AA  3027               	movlw	39
 16691  09AB  01C1               	clrf	(___q31+3)^(0+128)
 16692  09AC  01C0               	clrf	(___q31+2)^(0+128)
 16693  09AD  00BF               	movwf	(___q31+1)^(0+128)
 16694  09AE  300F               	movlw	15
 16695  09AF  00BE               	movwf	___q31^(0+128)
 16696  09B0                     l12571:	
 16697                           
 16698                           ;ui.c: 220: ui_uint32_2_str(lcdBuf + 3, __q31, 4);
 16699  09B0  0841               	movf	(___q31+3)^(0+128),w
 16700  09B1  0020               	movlb	0	; select bank0
 16701  09B2  00B9               	movwf	ui_uint32_2_str@x+3
 16702  09B3  0021               	movlb	1	; select bank1
 16703  09B4  0840               	movf	(___q31+2)^(0+128),w
 16704  09B5  0020               	movlb	0	; select bank0
 16705  09B6  00B8               	movwf	ui_uint32_2_str@x+2
 16706  09B7  0021               	movlb	1	; select bank1
 16707  09B8  083F               	movf	(___q31+1)^(0+128),w
 16708  09B9  0020               	movlb	0	; select bank0
 16709  09BA  00B7               	movwf	ui_uint32_2_str@x+1
 16710  09BB  0021               	movlb	1	; select bank1
 16711  09BC  083E               	movf	___q31^(0+128),w
 16712  09BD  0020               	movlb	0	; select bank0
 16713  09BE  00B6               	movwf	ui_uint32_2_str@x
 16714  09BF  3004               	movlw	4
 16715  09C0  00C0               	movwf	??_ui_disp_balance_and_volume
 16716  09C1  00BA               	movwf	ui_uint32_2_str@len
 16717  09C2  305F               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 16718  09C3  2236  3188         	fcall	_ui_uint32_2_str
 16719                           
 16720                           ;ui.c: 221: ui_head_hide(lcdBuf, 3);
 16721  09C5  3003               	movlw	3
 16722  09C6  0020               	movlb	0	; select bank0
 16723  09C7  00C0               	movwf	??_ui_disp_balance_and_volume
 16724  09C8  00F3               	movwf	ui_head_hide@loc
 16725  09C9  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 16726  09CA  221E  3188         	fcall	_ui_head_hide
 16727                           
 16728                           ;ui.c: 222: }else{
 16729  09CC  2A0C               	goto	l12585
 16730  09CD                     l443:	
 16731                           
 16732                           ;ui.c: 223: __q31=0-__q31;
 16733  09CD  09BE               	comf	___q31^(0+128),f
 16734  09CE  09BF               	comf	(___q31+1)^(0+128),f
 16735  09CF  09C0               	comf	(___q31+2)^(0+128),f
 16736  09D0  09C1               	comf	(___q31+3)^(0+128),f
 16737  09D1  0ABE               	incf	___q31^(0+128),f
 16738  09D2  1903               	skipnz
 16739  09D3  0ABF               	incf	(___q31+1)^(0+128),f
 16740  09D4  1903               	skipnz
 16741  09D5  0AC0               	incf	(___q31+2)^(0+128),f
 16742  09D6  1903               	skipnz
 16743  09D7  0AC1               	incf	(___q31+3)^(0+128),f
 16744                           
 16745                           ;ui.c: 224: if(__q31>999)__q31=999;
 16746  09D8  1BC1               	btfsc	(___q31+3)^(0+128),7
 16747  09D9  29EC               	goto	l12579
 16748  09DA  0841               	movf	(___q31+3)^(0+128),w
 16749  09DB  1D03               	btfss	3,2
 16750  09DC  29E6               	goto	l12577
 16751  09DD  0840               	movf	(___q31+2)^(0+128),w
 16752  09DE  1D03               	btfss	3,2
 16753  09DF  29E6               	goto	l12577
 16754  09E0  30E8               	movlw	232
 16755  09E1  023E               	subwf	___q31^(0+128),w
 16756  09E2  3003               	movlw	3
 16757  09E3  3B3F               	subwfb	(___q31+1)^(0+128),w
 16758  09E4  1C03               	btfss	3,0
 16759  09E5  29EC               	goto	l12579
 16760  09E6                     l12577:	
 16761  09E6  3003               	movlw	3
 16762  09E7  01C1               	clrf	(___q31+3)^(0+128)
 16763  09E8  01C0               	clrf	(___q31+2)^(0+128)
 16764  09E9  00BF               	movwf	(___q31+1)^(0+128)
 16765  09EA  30E7               	movlw	231
 16766  09EB  00BE               	movwf	___q31^(0+128)
 16767  09EC                     l12579:	
 16768                           
 16769                           ;ui.c: 225: ui_uint32_2_str(lcdBuf + 3, __q31, 3);
 16770  09EC  0841               	movf	(___q31+3)^(0+128),w
 16771  09ED  0020               	movlb	0	; select bank0
 16772  09EE  00B9               	movwf	ui_uint32_2_str@x+3
 16773  09EF  0021               	movlb	1	; select bank1
 16774  09F0  0840               	movf	(___q31+2)^(0+128),w
 16775  09F1  0020               	movlb	0	; select bank0
 16776  09F2  00B8               	movwf	ui_uint32_2_str@x+2
 16777  09F3  0021               	movlb	1	; select bank1
 16778  09F4  083F               	movf	(___q31+1)^(0+128),w
 16779  09F5  0020               	movlb	0	; select bank0
 16780  09F6  00B7               	movwf	ui_uint32_2_str@x+1
 16781  09F7  0021               	movlb	1	; select bank1
 16782  09F8  083E               	movf	___q31^(0+128),w
 16783  09F9  0020               	movlb	0	; select bank0
 16784  09FA  00B6               	movwf	ui_uint32_2_str@x
 16785  09FB  3003               	movlw	3
 16786  09FC  00C0               	movwf	??_ui_disp_balance_and_volume
 16787  09FD  00BA               	movwf	ui_uint32_2_str@len
 16788  09FE  305F               	movlw	(low ((_lcdBuf| (0+256)+3)))& (0+255)
 16789  09FF  2236  3188         	fcall	_ui_uint32_2_str
 16790                           
 16791                           ;ui.c: 226: ui_head_hide(lcdBuf, 2);
 16792  0A01  3002               	movlw	2
 16793  0A02  0020               	movlb	0	; select bank0
 16794  0A03  00C0               	movwf	??_ui_disp_balance_and_volume
 16795  0A04  00F3               	movwf	ui_head_hide@loc
 16796  0A05  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 16797  0A06  221E               	fcall	_ui_head_hide
 16798                           
 16799                           ;ui.c: 227: lcdBuf[0]='-';
 16800  0A07  302D               	movlw	45
 16801  0A08  0020               	movlb	0	; select bank0
 16802  0A09  00C0               	movwf	??_ui_disp_balance_and_volume
 16803  0A0A  0022               	movlb	2	; select bank2
 16804  0A0B  00DC               	movwf	_lcdBuf^(0+256)
 16805  0A0C                     l12585:	
 16806                           
 16807                           ;ui.c: 228: }
 16808                           ;ui.c: 229: lcd_clear_buffer();
 16809  0A0C  319F  27B4  3188   	fcall	_lcd_clear_buffer
 16810                           
 16811                           ;ui.c: 230: lcd_disp_cln(1);
 16812  0A0F  3001               	movlw	1
 16813  0A10  2787               	fcall	_lcd_disp_cln
 16814                           
 16815                           ;ui.c: 231: lcd_disp_dp(4,1);
 16816  0A11  0020               	movlb	0	; select bank0
 16817  0A12  3004               	movlw	4
 16818  0A13  01B2               	clrf	lcd_disp_dp@show
 16819  0A14  0AB2               	incf	lcd_disp_dp@show,f
 16820  0A15  31A6  267A         	fcall	_lcd_disp_dp
 16821                           
 16822                           ;ui.c: 232: lcd_disp_str(lcdBuf);
 16823  0A17  305C               	movlw	low _lcdBuf
 16824  0A18  0020               	movlb	0	; select bank0
 16825  0A19  00A2               	movwf	lcd_disp_str@str
 16826  0A1A  3001               	movlw	high _lcdBuf
 16827  0A1B  00A3               	movwf	lcd_disp_str@str+1
 16828  0A1C  319F  2FBD         	ljmp	l12289
 16829  0A1E                     __end_of_ui_disp_balance_and_volume:	
 16830  0A1E                     __ptext43:	
 16831 ;; *************** function _ui_head_hide *****************
 16832 ;; Defined at:
 16833 ;;		line 33 in file "src/api/ui.c"
 16834 ;; Parameters:    Size  Location     Type
 16835 ;;  str             1    wreg     PTR unsigned char 
 16836 ;;		 -> lcdBuf(9), 
 16837 ;;  loc             1    3[COMMON] unsigned char 
 16838 ;; Auto vars:     Size  Location     Type
 16839 ;;  str             1    5[COMMON] PTR unsigned char 
 16840 ;;		 -> lcdBuf(9), 
 16841 ;; Return value:  Size  Location     Type
 16842 ;;                  1    wreg      void 
 16843 ;; Registers used:
 16844 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 16845 ;; Tracked objects:
 16846 ;;		On entry : 0/0
 16847 ;;		On exit  : 0/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16851 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16852 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 16854 ;;Total ram usage:        3 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; Hardware stack levels required when called:    2
 16857 ;; This function calls:
 16858 ;;		Nothing
 16859 ;; This function is called by:
 16860 ;;		_ui_disp_flow
 16861 ;;		_ui_disp_totale_v
 16862 ;;		_ui_disp_balance_and_volume
 16863 ;;		_ui_disp_set_line
 16864 ;;		_ui_disp_set_calib
 16865 ;; This function uses a non-reentrant model
 16866 ;;
 16867                           
 16868                           
 16869                           ;psect for function _ui_head_hide
 16870  0A1E                     _ui_head_hide:	
 16871                           
 16872                           ;incstack = 0
 16873                           ; Regs used in _ui_head_hide: [wreg+fsr1l+fsr1h+status,2+status,0]
 16874                           ;ui_head_hide@str stored from wreg
 16875  0A1E  00F5               	movwf	ui_head_hide@str
 16876                           
 16877                           ;ui.c: 34: while (loc--) {
 16878  0A1F  2A31               	goto	l12287
 16879  0A20                     l12281:	
 16880                           
 16881                           ;ui.c: 35: if (*str == '0') {
 16882  0A20  0875               	movf	ui_head_hide@str,w
 16883  0A21  0086               	movwf	6
 16884  0A22  3001               	movlw	1	; select bank2/3
 16885  0A23  0087               	movwf	7
 16886  0A24  3030               	movlw	48
 16887  0A25  0601               	xorwf	1,w
 16888  0A26  1D03               	btfss	3,2
 16889  0A27  0008               	return
 16890                           
 16891                           ;ui.c: 36: *str++ = ' ';
 16892  0A28  3020               	movlw	32
 16893  0A29  00F4               	movwf	??_ui_head_hide
 16894  0A2A  0875               	movf	ui_head_hide@str,w
 16895  0A2B  0086               	movwf	6
 16896  0A2C  0874               	movf	??_ui_head_hide,w
 16897  0A2D  0081               	movwf	1
 16898  0A2E  3001               	movlw	1
 16899  0A2F  00F4               	movwf	??_ui_head_hide
 16900  0A30  07F5               	addwf	ui_head_hide@str,f
 16901  0A31                     l12287:	
 16902                           ;ui.c: 38: break;
 16903                           
 16904                           ;ui.c: 37: } else {
 16905                           
 16906  0A31  3001               	movlw	1
 16907  0A32  02F3               	subwf	ui_head_hide@loc,f
 16908  0A33  0F73               	incfsz	ui_head_hide@loc,w
 16909  0A34  2A20               	goto	l12281
 16910  0A35  0008               	return
 16911  0A36                     __end_of_ui_head_hide:	
 16912  0A36                     __ptext40:	
 16913 ;; *************** function _ui_uint32_2_str *****************
 16914 ;; Defined at:
 16915 ;;		line 22 in file "src/api/ui.c"
 16916 ;; Parameters:    Size  Location     Type
 16917 ;;  buf             1    wreg     PTR unsigned char 
 16918 ;;		 -> lcdBuf(9), 
 16919 ;;  x               4   22[BANK0 ] long 
 16920 ;;  len             1   26[BANK0 ] unsigned char 
 16921 ;; Auto vars:     Size  Location     Type
 16922 ;;  buf             1   31[BANK0 ] PTR unsigned char 
 16923 ;;		 -> lcdBuf(9), 
 16924 ;; Return value:  Size  Location     Type
 16925 ;;                  1    wreg      void 
 16926 ;; Registers used:
 16927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16928 ;; Tracked objects:
 16929 ;;		On entry : 0/0
 16930 ;;		On exit  : 0/0
 16931 ;;		Unchanged: 0/0
 16932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 16933 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 16934 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 16935 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 16936 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 16937 ;;Total ram usage:       10 bytes
 16938 ;; Hardware stack levels used:    1
 16939 ;; Hardware stack levels required when called:    4
 16940 ;; This function calls:
 16941 ;;		___aldiv
 16942 ;;		___almod
 16943 ;;		_m_math_pow
 16944 ;; This function is called by:
 16945 ;;		_ui_disp_flow
 16946 ;;		_ui_disp_totale_v
 16947 ;;		_ui_disp_balance_and_volume
 16948 ;;		_ui_disp_set_line
 16949 ;;		_ui_disp_set_calib
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           
 16954                           ;psect for function _ui_uint32_2_str
 16955  0A36                     _ui_uint32_2_str:	
 16956                           
 16957                           ;incstack = 0
 16958                           ; Regs used in _ui_uint32_2_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16959                           ;ui_uint32_2_str@buf stored from wreg
 16960  0A36  0020               	movlb	0	; select bank0
 16961  0A37  00BF               	movwf	ui_uint32_2_str@buf
 16962                           
 16963                           ;ui.c: 24: if (!len)return;
 16964  0A38  083A               	movf	ui_uint32_2_str@len,w
 16965  0A39  1903               	btfsc	3,2
 16966  0A3A  0008               	return
 16967                           
 16968                           ;ui.c: 25: __t32 = m_math_pow(10, len);
 16969  0A3B  300A               	movlw	10
 16970  0A3C  01AB               	clrf	m_math_pow@x+3
 16971  0A3D  01AA               	clrf	m_math_pow@x+2
 16972  0A3E  01A9               	clrf	m_math_pow@x+1
 16973  0A3F  00A8               	movwf	m_math_pow@x
 16974  0A40  083A               	movf	ui_uint32_2_str@len,w
 16975  0A41  00BB               	movwf	??_ui_uint32_2_str
 16976  0A42  00AC               	movwf	m_math_pow@y
 16977  0A43  279C  3188         	fcall	_m_math_pow
 16978  0A45  0020               	movlb	0	; select bank0
 16979  0A46  082B               	movf	?_m_math_pow+3,w
 16980  0A47  0021               	movlb	1	; select bank1
 16981  0A48  00A3               	movwf	(___t32+3)^(0+128)
 16982  0A49  0020               	movlb	0	; select bank0
 16983  0A4A  082A               	movf	?_m_math_pow+2,w
 16984  0A4B  0021               	movlb	1	; select bank1
 16985  0A4C  00A2               	movwf	(___t32+2)^(0+128)
 16986  0A4D  0020               	movlb	0	; select bank0
 16987  0A4E  0829               	movf	?_m_math_pow+1,w
 16988  0A4F  0021               	movlb	1	; select bank1
 16989  0A50  00A1               	movwf	(___t32+1)^(0+128)
 16990  0A51  0020               	movlb	0	; select bank0
 16991  0A52  0828               	movf	?_m_math_pow,w
 16992  0A53  0021               	movlb	1	; select bank1
 16993  0A54  00A0               	movwf	___t32^(0+128)
 16994                           
 16995                           ;ui.c: 26: if (x >= __t32 - 1)x = __t32 - 1;
 16996  0A55  30FF               	movlw	255
 16997  0A56  0020               	movlb	0	; select bank0
 16998  0A57  00BB               	movwf	??_ui_uint32_2_str
 16999  0A58  00BC               	movwf	??_ui_uint32_2_str+1
 17000  0A59  00BD               	movwf	??_ui_uint32_2_str+2
 17001  0A5A  00BE               	movwf	??_ui_uint32_2_str+3
 17002  0A5B  0021               	movlb	1	; select bank1
 17003  0A5C  0820               	movf	___t32^(0+128),w
 17004  0A5D  0020               	movlb	0	; select bank0
 17005  0A5E  07BB               	addwf	??_ui_uint32_2_str,f
 17006  0A5F  0021               	movlb	1	; select bank1
 17007  0A60  0821               	movf	(___t32+1)^(0+128),w
 17008  0A61  0020               	movlb	0	; select bank0
 17009  0A62  3DBC               	addwfc	??_ui_uint32_2_str+1,f
 17010  0A63  0021               	movlb	1	; select bank1
 17011  0A64  0822               	movf	(___t32+2)^(0+128),w
 17012  0A65  0020               	movlb	0	; select bank0
 17013  0A66  3DBD               	addwfc	??_ui_uint32_2_str+2,f
 17014  0A67  0021               	movlb	1	; select bank1
 17015  0A68  0823               	movf	(___t32+3)^(0+128),w
 17016  0A69  0020               	movlb	0	; select bank0
 17017  0A6A  3DBE               	addwfc	??_ui_uint32_2_str+3,f
 17018  0A6B  083E               	movf	??_ui_uint32_2_str+3,w
 17019  0A6C  0239               	subwf	ui_uint32_2_str@x+3,w
 17020  0A6D  1D03               	skipz
 17021  0A6E  2A79               	goto	u10905
 17022  0A6F  083D               	movf	??_ui_uint32_2_str+2,w
 17023  0A70  0238               	subwf	ui_uint32_2_str@x+2,w
 17024  0A71  1D03               	skipz
 17025  0A72  2A79               	goto	u10905
 17026  0A73  083C               	movf	??_ui_uint32_2_str+1,w
 17027  0A74  0237               	subwf	ui_uint32_2_str@x+1,w
 17028  0A75  1D03               	skipz
 17029  0A76  2A79               	goto	u10905
 17030  0A77  083B               	movf	??_ui_uint32_2_str,w
 17031  0A78  0236               	subwf	ui_uint32_2_str@x,w
 17032  0A79                     u10905:	
 17033  0A79  1C03               	skipc
 17034  0A7A  2ADB               	goto	l12277
 17035  0A7B  30FF               	movlw	255
 17036  0A7C  0021               	movlb	1	; select bank1
 17037  0A7D  0720               	addwf	___t32^(0+128),w
 17038  0A7E  0020               	movlb	0	; select bank0
 17039  0A7F  00B6               	movwf	ui_uint32_2_str@x
 17040  0A80  30FF               	movlw	255
 17041  0A81  0021               	movlb	1	; select bank1
 17042  0A82  3D21               	addwfc	(___t32+1)^(0+128),w
 17043  0A83  0020               	movlb	0	; select bank0
 17044  0A84  00B7               	movwf	ui_uint32_2_str@x+1
 17045  0A85  30FF               	movlw	255
 17046  0A86  0021               	movlb	1	; select bank1
 17047  0A87  3D22               	addwfc	(___t32+2)^(0+128),w
 17048  0A88  0020               	movlb	0	; select bank0
 17049  0A89  00B8               	movwf	ui_uint32_2_str@x+2
 17050  0A8A  30FF               	movlw	255
 17051  0A8B  0021               	movlb	1	; select bank1
 17052  0A8C  3D23               	addwfc	(___t32+3)^(0+128),w
 17053  0A8D  0020               	movlb	0	; select bank0
 17054  0A8E  00B9               	movwf	ui_uint32_2_str@x+3
 17055                           
 17056                           ;ui.c: 27: while (len--) {
 17057  0A8F  2ADB               	goto	l12277
 17058  0A90                     l12269:	
 17059                           
 17060                           ;ui.c: 28: __t32 = x % 10;
 17061  0A90  300A               	movlw	10
 17062  0A91  01A3               	clrf	___almod@divisor+3
 17063  0A92  01A2               	clrf	___almod@divisor+2
 17064  0A93  01A1               	clrf	___almod@divisor+1
 17065  0A94  00A0               	movwf	___almod@divisor
 17066  0A95  0839               	movf	ui_uint32_2_str@x+3,w
 17067  0A96  00A7               	movwf	___almod@dividend+3
 17068  0A97  0838               	movf	ui_uint32_2_str@x+2,w
 17069  0A98  00A6               	movwf	___almod@dividend+2
 17070  0A99  0837               	movf	ui_uint32_2_str@x+1,w
 17071  0A9A  00A5               	movwf	___almod@dividend+1
 17072  0A9B  0836               	movf	ui_uint32_2_str@x,w
 17073  0A9C  00A4               	movwf	___almod@dividend
 17074  0A9D  31B7  2711  3188   	fcall	___almod
 17075  0AA0  0020               	movlb	0	; select bank0
 17076  0AA1  0823               	movf	?___almod+3,w
 17077  0AA2  0021               	movlb	1	; select bank1
 17078  0AA3  00A3               	movwf	(___t32+3)^(0+128)
 17079  0AA4  0020               	movlb	0	; select bank0
 17080  0AA5  0822               	movf	?___almod+2,w
 17081  0AA6  0021               	movlb	1	; select bank1
 17082  0AA7  00A2               	movwf	(___t32+2)^(0+128)
 17083  0AA8  0020               	movlb	0	; select bank0
 17084  0AA9  0821               	movf	?___almod+1,w
 17085  0AAA  0021               	movlb	1	; select bank1
 17086  0AAB  00A1               	movwf	(___t32+1)^(0+128)
 17087  0AAC  0020               	movlb	0	; select bank0
 17088  0AAD  0820               	movf	?___almod,w
 17089  0AAE  0021               	movlb	1	; select bank1
 17090  0AAF  00A0               	movwf	___t32^(0+128)
 17091                           
 17092                           ;ui.c: 29: *buf-- = (uint8_t)hexTable[__t32];
 17093  0AB0  0821               	movf	(___t32+1)^(0+128),w
 17094  0AB1  0085               	movwf	5
 17095  0AB2  0820               	movf	___t32^(0+128),w
 17096  0AB3  0084               	movwf	4
 17097  0AB4  3051               	movlw	low (_hexTable| (0+32768))
 17098  0AB5  0784               	addwf	4,f
 17099  0AB6  30AA               	movlw	high (_hexTable| (0+32768))
 17100  0AB7  3D85               	addwfc	5,f
 17101  0AB8  0800               	movf	0,w	;code access
 17102  0AB9  0020               	movlb	0	; select bank0
 17103  0ABA  00BB               	movwf	??_ui_uint32_2_str
 17104  0ABB  083F               	movf	ui_uint32_2_str@buf,w
 17105  0ABC  0086               	movwf	6
 17106  0ABD  3001               	movlw	1	; select bank2/3
 17107  0ABE  0087               	movwf	7
 17108  0ABF  083B               	movf	??_ui_uint32_2_str,w
 17109  0AC0  0081               	movwf	1
 17110  0AC1  3001               	movlw	1
 17111  0AC2  02BF               	subwf	ui_uint32_2_str@buf,f
 17112                           
 17113                           ;ui.c: 30: x /= 10;
 17114  0AC3  300A               	movlw	10
 17115  0AC4  01AB               	clrf	___aldiv@divisor+3
 17116  0AC5  01AA               	clrf	___aldiv@divisor+2
 17117  0AC6  01A9               	clrf	___aldiv@divisor+1
 17118  0AC7  00A8               	movwf	___aldiv@divisor
 17119  0AC8  0839               	movf	ui_uint32_2_str@x+3,w
 17120  0AC9  00AF               	movwf	___aldiv@dividend+3
 17121  0ACA  0838               	movf	ui_uint32_2_str@x+2,w
 17122  0ACB  00AE               	movwf	___aldiv@dividend+2
 17123  0ACC  0837               	movf	ui_uint32_2_str@x+1,w
 17124  0ACD  00AD               	movwf	___aldiv@dividend+1
 17125  0ACE  0836               	movf	ui_uint32_2_str@x,w
 17126  0ACF  00AC               	movwf	___aldiv@dividend
 17127  0AD0  22E0  3188         	fcall	___aldiv
 17128  0AD2  0020               	movlb	0	; select bank0
 17129  0AD3  082B               	movf	?___aldiv+3,w
 17130  0AD4  00B9               	movwf	ui_uint32_2_str@x+3
 17131  0AD5  082A               	movf	?___aldiv+2,w
 17132  0AD6  00B8               	movwf	ui_uint32_2_str@x+2
 17133  0AD7  0829               	movf	?___aldiv+1,w
 17134  0AD8  00B7               	movwf	ui_uint32_2_str@x+1
 17135  0AD9  0828               	movf	?___aldiv,w
 17136  0ADA  00B6               	movwf	ui_uint32_2_str@x
 17137  0ADB                     l12277:	
 17138  0ADB  3001               	movlw	1
 17139  0ADC  02BA               	subwf	ui_uint32_2_str@len,f
 17140  0ADD  0F3A               	incfsz	ui_uint32_2_str@len,w
 17141  0ADE  2A90               	goto	l12269
 17142  0ADF  0008               	return
 17143  0AE0                     __end_of_ui_uint32_2_str:	
 17144  0AE0                     __ptext127:	
 17145 ;; *************** function ___aldiv *****************
 17146 ;; Defined at:
 17147 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\aldiv.c"
 17148 ;; Parameters:    Size  Location     Type
 17149 ;;  divisor         4    8[BANK0 ] long 
 17150 ;;  dividend        4   12[BANK0 ] long 
 17151 ;; Auto vars:     Size  Location     Type
 17152 ;;  quotient        4   18[BANK0 ] long 
 17153 ;;  sign            1   17[BANK0 ] unsigned char 
 17154 ;;  counter         1   16[BANK0 ] unsigned char 
 17155 ;; Return value:  Size  Location     Type
 17156 ;;                  4    8[BANK0 ] long 
 17157 ;; Registers used:
 17158 ;;		wreg, status,2, status,0
 17159 ;; Tracked objects:
 17160 ;;		On entry : 0/0
 17161 ;;		On exit  : 0/0
 17162 ;;		Unchanged: 0/0
 17163 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17164 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 17165 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 17166 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17167 ;;      Totals:         1      14       0       0       0       0       0       0       0       0       0       0       
      +0
 17168 ;;Total ram usage:       15 bytes
 17169 ;; Hardware stack levels used:    1
 17170 ;; Hardware stack levels required when called:    2
 17171 ;; This function calls:
 17172 ;;		Nothing
 17173 ;; This function is called by:
 17174 ;;		_ui_uint32_2_str
 17175 ;;		_ui_disp_balance_and_volume
 17176 ;;		_ui_key_process_enter
 17177 ;;		_app_flow_rt_balance_money_cal
 17178 ;; This function uses a non-reentrant model
 17179 ;;
 17180                           
 17181                           
 17182                           ;psect for function ___aldiv
 17183  0AE0                     ___aldiv:	
 17184                           
 17185                           ;incstack = 0
 17186                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 17187  0AE0  0020               	movlb	0	; select bank0
 17188  0AE1  01B1               	clrf	___aldiv@sign
 17189  0AE2  1FAB               	btfss	___aldiv@divisor+3,7
 17190  0AE3  2AF1               	goto	l2662
 17191  0AE4  09A8               	comf	___aldiv@divisor,f
 17192  0AE5  09A9               	comf	___aldiv@divisor+1,f
 17193  0AE6  09AA               	comf	___aldiv@divisor+2,f
 17194  0AE7  09AB               	comf	___aldiv@divisor+3,f
 17195  0AE8  0AA8               	incf	___aldiv@divisor,f
 17196  0AE9  1903               	skipnz
 17197  0AEA  0AA9               	incf	___aldiv@divisor+1,f
 17198  0AEB  1903               	skipnz
 17199  0AEC  0AAA               	incf	___aldiv@divisor+2,f
 17200  0AED  1903               	skipnz
 17201  0AEE  0AAB               	incf	___aldiv@divisor+3,f
 17202  0AEF  01B1               	clrf	___aldiv@sign
 17203  0AF0  0AB1               	incf	___aldiv@sign,f
 17204  0AF1                     l2662:	
 17205  0AF1  1FAF               	btfss	___aldiv@dividend+3,7
 17206  0AF2  2B01               	goto	l12171
 17207  0AF3  09AC               	comf	___aldiv@dividend,f
 17208  0AF4  09AD               	comf	___aldiv@dividend+1,f
 17209  0AF5  09AE               	comf	___aldiv@dividend+2,f
 17210  0AF6  09AF               	comf	___aldiv@dividend+3,f
 17211  0AF7  0AAC               	incf	___aldiv@dividend,f
 17212  0AF8  1903               	skipnz
 17213  0AF9  0AAD               	incf	___aldiv@dividend+1,f
 17214  0AFA  1903               	skipnz
 17215  0AFB  0AAE               	incf	___aldiv@dividend+2,f
 17216  0AFC  1903               	skipnz
 17217  0AFD  0AAF               	incf	___aldiv@dividend+3,f
 17218  0AFE  3001               	movlw	1
 17219  0AFF  00F7               	movwf	??___aldiv
 17220  0B00  06B1               	xorwf	___aldiv@sign,f
 17221  0B01                     l12171:	
 17222  0B01  01B5               	clrf	___aldiv@quotient+3
 17223  0B02  01B4               	clrf	___aldiv@quotient+2
 17224  0B03  01B3               	clrf	___aldiv@quotient+1
 17225  0B04  01B2               	clrf	___aldiv@quotient
 17226  0B05  082B               	movf	___aldiv@divisor+3,w
 17227  0B06  042A               	iorwf	___aldiv@divisor+2,w
 17228  0B07  0429               	iorwf	___aldiv@divisor+1,w
 17229  0B08  0428               	iorwf	___aldiv@divisor,w
 17230  0B09  1903               	skipnz
 17231  0B0A  2B45               	goto	l12193
 17232  0B0B  01B0               	clrf	___aldiv@counter
 17233  0B0C  0AB0               	incf	___aldiv@counter,f
 17234  0B0D                     l12179:	
 17235  0B0D  1BAB               	btfsc	___aldiv@divisor+3,7
 17236  0B0E  2B1A               	goto	l12181
 17237  0B0F  3001               	movlw	1
 17238  0B10                     u10735:	
 17239  0B10  35A8               	lslf	___aldiv@divisor,f
 17240  0B11  0DA9               	rlf	___aldiv@divisor+1,f
 17241  0B12  0DAA               	rlf	___aldiv@divisor+2,f
 17242  0B13  0DAB               	rlf	___aldiv@divisor+3,f
 17243  0B14  0B89               	decfsz	9,f
 17244  0B15  2B10               	goto	u10735
 17245  0B16  3001               	movlw	1
 17246  0B17  00F7               	movwf	??___aldiv
 17247  0B18  07B0               	addwf	___aldiv@counter,f
 17248  0B19  2B0D               	goto	l12179
 17249  0B1A                     l12181:	
 17250  0B1A  3001               	movlw	1
 17251  0B1B                     u10755:	
 17252  0B1B  35B2               	lslf	___aldiv@quotient,f
 17253  0B1C  0DB3               	rlf	___aldiv@quotient+1,f
 17254  0B1D  0DB4               	rlf	___aldiv@quotient+2,f
 17255  0B1E  0DB5               	rlf	___aldiv@quotient+3,f
 17256  0B1F  0B89               	decfsz	9,f
 17257  0B20  2B1B               	goto	u10755
 17258  0B21  082B               	movf	___aldiv@divisor+3,w
 17259  0B22  022F               	subwf	___aldiv@dividend+3,w
 17260  0B23  1D03               	skipz
 17261  0B24  2B2F               	goto	u10765
 17262  0B25  082A               	movf	___aldiv@divisor+2,w
 17263  0B26  022E               	subwf	___aldiv@dividend+2,w
 17264  0B27  1D03               	skipz
 17265  0B28  2B2F               	goto	u10765
 17266  0B29  0829               	movf	___aldiv@divisor+1,w
 17267  0B2A  022D               	subwf	___aldiv@dividend+1,w
 17268  0B2B  1D03               	skipz
 17269  0B2C  2B2F               	goto	u10765
 17270  0B2D  0828               	movf	___aldiv@divisor,w
 17271  0B2E  022C               	subwf	___aldiv@dividend,w
 17272  0B2F                     u10765:	
 17273  0B2F  1C03               	skipc
 17274  0B30  2B3A               	goto	l12189
 17275  0B31  0828               	movf	___aldiv@divisor,w
 17276  0B32  02AC               	subwf	___aldiv@dividend,f
 17277  0B33  0829               	movf	___aldiv@divisor+1,w
 17278  0B34  3BAD               	subwfb	___aldiv@dividend+1,f
 17279  0B35  082A               	movf	___aldiv@divisor+2,w
 17280  0B36  3BAE               	subwfb	___aldiv@dividend+2,f
 17281  0B37  082B               	movf	___aldiv@divisor+3,w
 17282  0B38  3BAF               	subwfb	___aldiv@dividend+3,f
 17283  0B39  1432               	bsf	___aldiv@quotient,0
 17284  0B3A                     l12189:	
 17285  0B3A  3001               	movlw	1
 17286  0B3B                     u10775:	
 17287  0B3B  36AB               	lsrf	___aldiv@divisor+3,f
 17288  0B3C  0CAA               	rrf	___aldiv@divisor+2,f
 17289  0B3D  0CA9               	rrf	___aldiv@divisor+1,f
 17290  0B3E  0CA8               	rrf	___aldiv@divisor,f
 17291  0B3F  0B89               	decfsz	9,f
 17292  0B40  2B3B               	goto	u10775
 17293  0B41  3001               	movlw	1
 17294  0B42  02B0               	subwf	___aldiv@counter,f
 17295  0B43  1D03               	btfss	3,2
 17296  0B44  2B1A               	goto	l12181
 17297  0B45                     l12193:	
 17298  0B45  0831               	movf	___aldiv@sign,w
 17299  0B46  1903               	btfsc	3,2
 17300  0B47  2B53               	goto	l12197
 17301  0B48  09B2               	comf	___aldiv@quotient,f
 17302  0B49  09B3               	comf	___aldiv@quotient+1,f
 17303  0B4A  09B4               	comf	___aldiv@quotient+2,f
 17304  0B4B  09B5               	comf	___aldiv@quotient+3,f
 17305  0B4C  0AB2               	incf	___aldiv@quotient,f
 17306  0B4D  1903               	skipnz
 17307  0B4E  0AB3               	incf	___aldiv@quotient+1,f
 17308  0B4F  1903               	skipnz
 17309  0B50  0AB4               	incf	___aldiv@quotient+2,f
 17310  0B51  1903               	skipnz
 17311  0B52  0AB5               	incf	___aldiv@quotient+3,f
 17312  0B53                     l12197:	
 17313  0B53  0835               	movf	___aldiv@quotient+3,w
 17314  0B54  00AB               	movwf	?___aldiv+3
 17315  0B55  0834               	movf	___aldiv@quotient+2,w
 17316  0B56  00AA               	movwf	?___aldiv+2
 17317  0B57  0833               	movf	___aldiv@quotient+1,w
 17318  0B58  00A9               	movwf	?___aldiv+1
 17319  0B59  0832               	movf	___aldiv@quotient,w
 17320  0B5A  00A8               	movwf	?___aldiv
 17321  0B5B  0008               	return
 17322  0B5C                     __end_of___aldiv:	
 17323  0B5C                     __ptext73:	
 17324 ;; *************** function _picc_halt_a *****************
 17325 ;; Defined at:
 17326 ;;		line 272 in file "src/nfc/pal/mfrc522_picc.c"
 17327 ;; Parameters:    Size  Location     Type
 17328 ;;		None
 17329 ;; Auto vars:     Size  Location     Type
 17330 ;;  buffer          4   45[BANK0 ] unsigned char [4]
 17331 ;;  result          1   49[BANK0 ] enum E5268
 17332 ;; Return value:  Size  Location     Type
 17333 ;;                  1    wreg      enum E5489
 17334 ;; Registers used:
 17335 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17336 ;; Tracked objects:
 17337 ;;		On entry : 0/0
 17338 ;;		On exit  : 0/0
 17339 ;;		Unchanged: 0/0
 17340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17342 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 17343 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 17344 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 17345 ;;Total ram usage:        8 bytes
 17346 ;; Hardware stack levels used:    1
 17347 ;; Hardware stack levels required when called:    7
 17348 ;; This function calls:
 17349 ;;		_mfrc522_hal_calculate_crc
 17350 ;;		_pcd_comm_with_picc
 17351 ;; This function is called by:
 17352 ;;		_rfid_comm_process
 17353 ;; This function uses a non-reentrant model
 17354 ;;
 17355                           
 17356                           
 17357                           ;psect for function _picc_halt_a
 17358  0B5C                     _picc_halt_a:	
 17359                           
 17360                           ;mfrc522_picc.c: 273: em_PcdStatusCode result;
 17361                           ;mfrc522_picc.c: 274: uint8_t buffer[4];
 17362                           ;mfrc522_picc.c: 276: buffer[0] = PICC_CMD_HLTA;
 17363                           
 17364                           ;incstack = 0
 17365                           ; Regs used in _picc_halt_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17366  0B5C  3050               	movlw	80
 17367  0B5D  0020               	movlb	0	; select bank0
 17368  0B5E  00CA               	movwf	??_picc_halt_a
 17369  0B5F  00CD               	movwf	picc_halt_a@buffer
 17370  0B60  304D               	movlw	low picc_halt_a@buffer
 17371                           
 17372                           ;mfrc522_picc.c: 277: buffer[1] = 0;
 17373  0B61  01CE               	clrf	picc_halt_a@buffer+1
 17374                           
 17375                           ;mfrc522_picc.c: 278: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 17376  0B62  00A6               	movwf	mfrc522_hal_calculate_crc@data
 17377  0B63  3000               	movlw	high picc_halt_a@buffer
 17378  0B64  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 17379  0B65  3002               	movlw	2
 17380  0B66  00CA               	movwf	??_picc_halt_a
 17381  0B67  00A8               	movwf	mfrc522_hal_calculate_crc@length
 17382  0B68  304F               	movlw	low (picc_halt_a@buffer+2)
 17383  0B69  00A9               	movwf	mfrc522_hal_calculate_crc@result
 17384  0B6A  3000               	movlw	high (picc_halt_a@buffer+2)
 17385  0B6B  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 17386  0B6C  319D  255A  3188   	fcall	_mfrc522_hal_calculate_crc
 17387  0B6F  0020               	movlb	0	; select bank0
 17388  0B70  00CB               	movwf	??_picc_halt_a+1
 17389  0B71  00D1               	movwf	picc_halt_a@result
 17390                           
 17391                           ;mfrc522_picc.c: 279: if (result != STATUS_OK)return result;
 17392  0B72  0851               	movf	picc_halt_a@result,w
 17393  0B73  1D03               	btfss	3,2
 17394  0B74  0008               	return
 17395                           
 17396                           ;mfrc522_picc.c: 282: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, sizeof (bu
      +                          ffer), (0), (0), (0), 0, 0);
 17397                           
 17398                           ;	Return value of _picc_halt_a is never used
 17399  0B75  3030               	movlw	48
 17400  0B76  00CA               	movwf	??_picc_halt_a
 17401  0B77  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 17402  0B78  304D               	movlw	low picc_halt_a@buffer
 17403  0B79  00B2               	movwf	pcd_comm_with_picc@sbuf
 17404  0B7A  3000               	movlw	high picc_halt_a@buffer
 17405  0B7B  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 17406  0B7C  3004               	movlw	4
 17407  0B7D  00CB               	movwf	??_picc_halt_a+1
 17408  0B7E  00B4               	movwf	pcd_comm_with_picc@slen
 17409  0B7F  300C               	movlw	12
 17410  0B80  01B5               	clrf	pcd_comm_with_picc@rbuf
 17411  0B81  01B6               	clrf	pcd_comm_with_picc@rbuf+1
 17412  0B82  01B7               	clrf	pcd_comm_with_picc@rlen
 17413  0B83  01B8               	clrf	pcd_comm_with_picc@validBits
 17414  0B84  01B9               	clrf	pcd_comm_with_picc@rxAlign
 17415  0B85  01BA               	clrf	pcd_comm_with_picc@checkCRC
 17416  0B86  3198  2008         	fcall	_pcd_comm_with_picc
 17417  0B88  0020               	movlb	0	; select bank0
 17418  0B89  00CC               	movwf	??_picc_halt_a+2
 17419  0B8A  00D1               	movwf	picc_halt_a@result
 17420                           
 17421                           ;	Return value of _picc_halt_a is never used
 17422                           
 17423                           ;	Return value of _picc_halt_a is never used
 17424  0B8B  0008               	return
 17425  0B8C                     __end_of_picc_halt_a:	
 17426                           ;mfrc522_picc.c: 285: return result;
 17427                           ;	Return value of _picc_halt_a is never used
 17428                           
 17429  0B8C                     __ptext74:	
 17430 ;; *************** function _mfapi_is_new_card_present *****************
 17431 ;; Defined at:
 17432 ;;		line 76 in file "src/nfc/apl/mfrc522_apl.c"
 17433 ;; Parameters:    Size  Location     Type
 17434 ;;		None
 17435 ;; Auto vars:     Size  Location     Type
 17436 ;;  bufferATQA      2   56[BANK0 ] unsigned char [2]
 17437 ;;  bufferSize      1   59[BANK0 ] unsigned char 
 17438 ;;  result          1   58[BANK0 ] enum E5268
 17439 ;;  cmd             1   55[BANK0 ] unsigned char 
 17440 ;; Return value:  Size  Location     Type
 17441 ;;                  1    wreg      unsigned char 
 17442 ;; Registers used:
 17443 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17444 ;; Tracked objects:
 17445 ;;		On entry : 0/0
 17446 ;;		On exit  : 0/0
 17447 ;;		Unchanged: 0/0
 17448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 17450 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 17451 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 17452 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 17453 ;;Total ram usage:        8 bytes
 17454 ;; Hardware stack levels used:    1
 17455 ;; Hardware stack levels required when called:    8
 17456 ;; This function calls:
 17457 ;;		_m_mem_set
 17458 ;;		_picc_req_a_or_wakeup_a
 17459 ;; This function is called by:
 17460 ;;		_rfid_comm_process
 17461 ;; This function uses a non-reentrant model
 17462 ;;
 17463                           
 17464                           
 17465                           ;psect for function _mfapi_is_new_card_present
 17466  0B8C                     _mfapi_is_new_card_present:	
 17467                           
 17468                           ;mfrc522_apl.c: 77: uint8_t cmd;
 17469                           ;mfrc522_apl.c: 78: uint8_t bufferATQA[2];
 17470                           ;mfrc522_apl.c: 79: uint8_t bufferSize = sizeof (bufferATQA);
 17471                           
 17472                           ;incstack = 0
 17473                           ; Regs used in _mfapi_is_new_card_present: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17474  0B8C  3002               	movlw	2
 17475  0B8D  0020               	movlb	0	; select bank0
 17476  0B8E  00D4               	movwf	??_mfapi_is_new_card_present
 17477  0B8F  00DB               	movwf	mfapi_is_new_card_present@bufferSize
 17478                           
 17479                           ;mfrc522_apl.c: 80: em_PcdStatusCode result;
 17480                           ;mfrc522_apl.c: 81: m_mem_set((uint8_t*) (&PiccUid), 0, sizeof (PiccUid));
 17481  0B90  30B0               	movlw	low _PiccUid
 17482  0B91  00F3               	movwf	m_mem_set@buf
 17483  0B92  3001               	movlw	high _PiccUid
 17484  0B93  00F4               	movwf	m_mem_set@buf+1
 17485  0B94  300C               	movlw	12
 17486  0B95  01F5               	clrf	m_mem_set@x
 17487  0B96  00D4               	movwf	??_mfapi_is_new_card_present
 17488  0B97  00F6               	movwf	m_mem_set@len
 17489  0B98  319F  27A4  3188   	fcall	_m_mem_set
 17490                           
 17491                           ;mfrc522_apl.c: 82: ;
 17492                           ;mfrc522_apl.c: 83: cmd = PICC_CMD_REQA;
 17493  0B9B  3026               	movlw	38
 17494  0B9C  0020               	movlb	0	; select bank0
 17495  0B9D  00D4               	movwf	??_mfapi_is_new_card_present
 17496  0B9E  00D7               	movwf	mfapi_is_new_card_present@cmd
 17497                           
 17498                           ;mfrc522_apl.c: 84: result = picc_req_a_or_wakeup_a(cmd, bufferATQA, &bufferSize);
 17499  0B9F  3058               	movlw	(low (mfapi_is_new_card_present@bufferATQA| 0))& (0+255)
 17500  0BA0  00D4               	movwf	??_mfapi_is_new_card_present
 17501  0BA1  00CA               	movwf	picc_req_a_or_wakeup_a@bufferATQA
 17502  0BA2  305B               	movlw	(low (mfapi_is_new_card_present@bufferSize| 0))& (0+255)
 17503  0BA3  00D5               	movwf	??_mfapi_is_new_card_present+1
 17504  0BA4  00CB               	movwf	picc_req_a_or_wakeup_a@bufferSize
 17505  0BA5  0857               	movf	mfapi_is_new_card_present@cmd,w
 17506  0BA6  23B3  3188         	fcall	_picc_req_a_or_wakeup_a
 17507  0BA8  0020               	movlb	0	; select bank0
 17508  0BA9  00D6               	movwf	??_mfapi_is_new_card_present+2
 17509  0BAA  00DA               	movwf	mfapi_is_new_card_present@result
 17510                           
 17511                           ;mfrc522_apl.c: 85: if (result == STATUS_OK || result == STATUS_COLLISION) {
 17512  0BAB  085A               	movf	mfapi_is_new_card_present@result,w
 17513  0BAC  1903               	btfsc	3,2
 17514  0BAD  3401               	retlw	1
 17515  0BAE  3002               	movlw	2
 17516  0BAF  065A               	xorwf	mfapi_is_new_card_present@result,w
 17517  0BB0  1903               	btfsc	3,2
 17518                           
 17519                           ;mfrc522_apl.c: 86: return 1;
 17520  0BB1  3401               	retlw	1
 17521                           
 17522                           ;mfrc522_apl.c: 87: }
 17523                           ;mfrc522_apl.c: 88: return 0;
 17524  0BB2  3400               	retlw	0
 17525  0BB3                     __end_of_mfapi_is_new_card_present:	
 17526  0BB3                     __ptext75:	
 17527 ;; *************** function _picc_req_a_or_wakeup_a *****************
 17528 ;; Defined at:
 17529 ;;		line 108 in file "src/nfc/pal/mfrc522_picc.c"
 17530 ;; Parameters:    Size  Location     Type
 17531 ;;  cmd             1    wreg     unsigned char 
 17532 ;;  bufferATQA      1   42[BANK0 ] PTR unsigned char 
 17533 ;;		 -> mfapi_is_new_card_present@bufferATQA(2), 
 17534 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 17535 ;;		 -> mfapi_is_new_card_present@bufferSize(1), 
 17536 ;; Auto vars:     Size  Location     Type
 17537 ;;  cmd             1   48[BANK0 ] unsigned char 
 17538 ;;  validBits       1   51[BANK0 ] unsigned char 
 17539 ;;  status          1   50[BANK0 ] enum E5268
 17540 ;;  __cmd           1   49[BANK0 ] unsigned char 
 17541 ;; Return value:  Size  Location     Type
 17542 ;;                  1    wreg      enum E5268
 17543 ;; Registers used:
 17544 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17545 ;; Tracked objects:
 17546 ;;		On entry : 0/0
 17547 ;;		On exit  : 0/0
 17548 ;;		Unchanged: 0/0
 17549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17550 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 17551 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 17552 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 17553 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 17554 ;;Total ram usage:       10 bytes
 17555 ;; Hardware stack levels used:    1
 17556 ;; Hardware stack levels required when called:    7
 17557 ;; This function calls:
 17558 ;;		_mfrc522_bal_clr_bit_reg
 17559 ;;		_pcd_comm_with_picc
 17560 ;; This function is called by:
 17561 ;;		_mfapi_is_new_card_present
 17562 ;; This function uses a non-reentrant model
 17563 ;;
 17564                           
 17565                           
 17566                           ;psect for function _picc_req_a_or_wakeup_a
 17567  0BB3                     _picc_req_a_or_wakeup_a:	
 17568                           
 17569                           ;incstack = 0
 17570                           ; Regs used in _picc_req_a_or_wakeup_a: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17571                           ;picc_req_a_or_wakeup_a@cmd stored from wreg
 17572  0BB3  0020               	movlb	0	; select bank0
 17573  0BB4  00D0               	movwf	picc_req_a_or_wakeup_a@cmd
 17574                           
 17575                           ;mfrc522_picc.c: 109: uint8_t validBits;
 17576                           ;mfrc522_picc.c: 110: em_PcdStatusCode status;
 17577                           ;mfrc522_picc.c: 111: uint8_t __cmd=cmd;
 17578  0BB5  00CC               	movwf	??_picc_req_a_or_wakeup_a
 17579  0BB6  00D1               	movwf	picc_req_a_or_wakeup_a@__cmd
 17580                           
 17581                           ;mfrc522_picc.c: 113: if (bufferATQA == (0) || *bufferSize < 2) {
 17582  0BB7  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 17583  0BB8  1903               	btfsc	3,2
 17584  0BB9  3404               	retlw	4
 17585  0BBA  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 17586  0BBB  0086               	movwf	6
 17587  0BBC  3002               	movlw	2
 17588  0BBD  0187               	clrf	7
 17589  0BBE  0201               	subwf	1,w
 17590  0BBF  1C03               	btfss	3,0
 17591                           
 17592                           ;mfrc522_picc.c: 114: return STATUS_NO_ROOM;
 17593  0BC0  3404               	retlw	4
 17594                           
 17595                           ;mfrc522_picc.c: 115: }
 17596                           ;mfrc522_picc.c: 116: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 17597  0BC1  3080               	movlw	128
 17598  0BC2  00CC               	movwf	??_picc_req_a_or_wakeup_a
 17599  0BC3  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 17600  0BC4  300E               	movlw	14
 17601  0BC5  319E  2646  3188   	fcall	_mfrc522_bal_clr_bit_reg
 17602                           
 17603                           ;mfrc522_picc.c: 117: validBits = 7;
 17604  0BC8  3007               	movlw	7
 17605  0BC9  0020               	movlb	0	; select bank0
 17606  0BCA  00CC               	movwf	??_picc_req_a_or_wakeup_a
 17607  0BCB  00D3               	movwf	picc_req_a_or_wakeup_a@validBits
 17608                           
 17609                           ;mfrc522_picc.c: 120: status=pcd_comm_with_picc(PCD_Transceive,0x30,&__cmd, 1, bufferATQ
      +                          A, bufferSize, &validBits, 0, 0);
 17610  0BCC  3030               	movlw	48
 17611  0BCD  00CC               	movwf	??_picc_req_a_or_wakeup_a
 17612  0BCE  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 17613  0BCF  3051               	movlw	low picc_req_a_or_wakeup_a@__cmd
 17614  0BD0  00B2               	movwf	pcd_comm_with_picc@sbuf
 17615  0BD1  3000               	movlw	high picc_req_a_or_wakeup_a@__cmd
 17616  0BD2  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 17617  0BD3  01B4               	clrf	pcd_comm_with_picc@slen
 17618  0BD4  0AB4               	incf	pcd_comm_with_picc@slen,f
 17619  0BD5  084A               	movf	picc_req_a_or_wakeup_a@bufferATQA,w
 17620  0BD6  00B5               	movwf	pcd_comm_with_picc@rbuf
 17621  0BD7  01B6               	clrf	pcd_comm_with_picc@rbuf+1
 17622  0BD8  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 17623  0BD9  00CD               	movwf	??_picc_req_a_or_wakeup_a+1
 17624  0BDA  00B7               	movwf	pcd_comm_with_picc@rlen
 17625  0BDB  3053               	movlw	(low (picc_req_a_or_wakeup_a@validBits| 0))& (0+255)
 17626  0BDC  00CE               	movwf	??_picc_req_a_or_wakeup_a+2
 17627  0BDD  00B8               	movwf	pcd_comm_with_picc@validBits
 17628  0BDE  300C               	movlw	12
 17629  0BDF  01B9               	clrf	pcd_comm_with_picc@rxAlign
 17630  0BE0  01BA               	clrf	pcd_comm_with_picc@checkCRC
 17631  0BE1  3198  2008  3188   	fcall	_pcd_comm_with_picc
 17632  0BE4  0020               	movlb	0	; select bank0
 17633  0BE5  00CF               	movwf	??_picc_req_a_or_wakeup_a+3
 17634  0BE6  00D2               	movwf	picc_req_a_or_wakeup_a@status
 17635                           
 17636                           ;mfrc522_picc.c: 121: if (status != STATUS_OK) return status;
 17637  0BE7  0852               	movf	picc_req_a_or_wakeup_a@status,w
 17638  0BE8  1903               	btfsc	3,2
 17639  0BE9  2BEC               	goto	l13757
 17640  0BEA  0852               	movf	picc_req_a_or_wakeup_a@status,w
 17641  0BEB  0008               	return
 17642  0BEC                     l13757:	
 17643                           
 17644                           ;mfrc522_picc.c: 122: if (*bufferSize != 2 || validBits != 0) return STATUS_ERROR;
 17645  0BEC  084B               	movf	picc_req_a_or_wakeup_a@bufferSize,w
 17646  0BED  0086               	movwf	6
 17647  0BEE  3002               	movlw	2
 17648  0BEF  0187               	clrf	7
 17649  0BF0  0601               	xorwf	1,w
 17650  0BF1  1903               	btfsc	3,2
 17651  0BF2  0853               	movf	picc_req_a_or_wakeup_a@validBits,w
 17652  0BF3  1D03               	btfss	3,2
 17653  0BF4  3401               	retlw	1
 17654                           
 17655                           ;mfrc522_picc.c: 123: return STATUS_OK;
 17656  0BF5  3400               	retlw	0
 17657  0BF6                     __end_of_picc_req_a_or_wakeup_a:	
 17658  0BF6                     __ptext70:	
 17659 ;; *************** function _picc_select *****************
 17660 ;; Defined at:
 17661 ;;		line 126 in file "src/nfc/pal/mfrc522_picc.c"
 17662 ;; Parameters:    Size  Location     Type
 17663 ;;  uid             1    wreg     PTR struct __PICC_UID
 17664 ;;		 -> PiccUid(12), 
 17665 ;;  validBits       1   42[BANK0 ] unsigned char 
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;  uid             1   29[BANK1 ] PTR struct __PICC_UID
 17668 ;;		 -> PiccUid(12), 
 17669 ;;  collisionPos    1   23[BANK1 ] unsigned char 
 17670 ;;  valueOfCollR    1   13[BANK1 ] unsigned char 
 17671 ;;  maxBytes        1   12[BANK1 ] unsigned char 
 17672 ;;  bytesToCopy     1   27[BANK1 ] unsigned char 
 17673 ;;  buffer          9   14[BANK1 ] unsigned char [9]
 17674 ;;  currentLevel    1   35[BANK1 ] unsigned char 
 17675 ;;  index           1   34[BANK1 ] unsigned char 
 17676 ;;  count           1   33[BANK1 ] unsigned char 
 17677 ;;  result          1   32[BANK1 ] enum E5268
 17678 ;;  txLastBits      1   31[BANK1 ] unsigned char 
 17679 ;;  responseBuff    1   30[BANK1 ] PTR unsigned char 
 17680 ;;		 -> picc_select@buffer(9), 
 17681 ;;  responseLeng    1   28[BANK1 ] unsigned char 
 17682 ;;  uidIndex        1   26[BANK1 ] unsigned char 
 17683 ;;  cascadeLevel    1   25[BANK1 ] unsigned char 
 17684 ;;  useCascadeTa    1   24[BANK1 ] unsigned char 
 17685 ;;  rxAlign         1   11[BANK1 ] unsigned char 
 17686 ;;  bufferUsed      1    8[BANK1 ] unsigned char 
 17687 ;;  selectDone      1    7[BANK1 ] unsigned char 
 17688 ;;  uidComplete     1    6[BANK1 ] unsigned char 
 17689 ;; Return value:  Size  Location     Type
 17690 ;;                  1    wreg      enum E5489
 17691 ;; Registers used:
 17692 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17693 ;; Tracked objects:
 17694 ;;		On entry : 0/0
 17695 ;;		On exit  : 0/0
 17696 ;;		Unchanged: 0/0
 17697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 17698 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 17699 ;;      Locals:         0       0      36       0       0       0       0       0       0       0       0       0       
      +0
 17700 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 17701 ;;      Totals:         0       7      36       0       0       0       0       0       0       0       0       0       
      +0
 17702 ;;Total ram usage:       43 bytes
 17703 ;; Hardware stack levels used:    1
 17704 ;; Hardware stack levels required when called:    7
 17705 ;; This function calls:
 17706 ;;		___awdiv
 17707 ;;		___bmul
 17708 ;;		_mfrc522_bal_clr_bit_reg
 17709 ;;		_mfrc522_bal_read_reg
 17710 ;;		_mfrc522_bal_write_reg
 17711 ;;		_mfrc522_hal_calculate_crc
 17712 ;;		_pcd_comm_with_picc
 17713 ;; This function is called by:
 17714 ;;		_rfid_comm_process
 17715 ;; This function uses a non-reentrant model
 17716 ;;
 17717                           
 17718                           
 17719                           ;psect for function _picc_select
 17720  0BF6                     _picc_select:	
 17721                           
 17722                           ;incstack = 0
 17723                           ; Regs used in _picc_select: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17724                           ;picc_select@uid stored from wreg
 17725  0BF6  0021               	movlb	1	; select bank1
 17726  0BF7  00E5               	movwf	picc_select@uid^(0+128)
 17727  0BF8  3051               	movlw	81
 17728                           
 17729                           ;mfrc522_picc.c: 127: bool uidComplete;
 17730                           ;mfrc522_picc.c: 128: bool selectDone;
 17731                           ;mfrc522_picc.c: 129: bool useCascadeTag;
 17732                           ;mfrc522_picc.c: 130: uint8_t cascadeLevel = 1;
 17733  0BF9  01E1               	clrf	picc_select@cascadeLevel^(0+128)
 17734  0BFA  0AE1               	incf	picc_select@cascadeLevel^(0+128),f
 17735                           
 17736                           ;mfrc522_picc.c: 131: em_PcdStatusCode result;
 17737                           ;mfrc522_picc.c: 132: uint8_t count;
 17738                           ;mfrc522_picc.c: 133: uint8_t index;
 17739                           ;mfrc522_picc.c: 134: uint8_t uidIndex;
 17740                           ;mfrc522_picc.c: 135: uint8_t currentLevelKnownBits;
 17741                           ;mfrc522_picc.c: 136: uint8_t buffer[9];
 17742                           ;mfrc522_picc.c: 137: uint8_t bufferUsed;
 17743                           ;mfrc522_picc.c: 138: uint8_t rxAlign;
 17744                           ;mfrc522_picc.c: 139: uint8_t txLastBits;
 17745                           ;mfrc522_picc.c: 140: uint8_t *responseBuffer;
 17746                           ;mfrc522_picc.c: 141: uint8_t responseLength;
 17747                           ;mfrc522_picc.c: 144: if (validBits > 80) return STATUS_INVALID;
 17748  0BFB  0020               	movlb	0	; select bank0
 17749  0BFC  024A               	subwf	picc_select@validBits,w
 17750  0BFD  1803               	btfsc	3,0
 17751  0BFE  3406               	retlw	6
 17752                           
 17753                           ;mfrc522_picc.c: 145: mfrc522_bal_clr_bit_reg(CollReg, 0x80);
 17754  0BFF  3080               	movlw	128
 17755  0C00  00CB               	movwf	??_picc_select
 17756  0C01  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 17757  0C02  300E               	movlw	14
 17758  0C03  319E  2646  3188   	fcall	_mfrc522_bal_clr_bit_reg
 17759                           
 17760                           ;mfrc522_picc.c: 146: uidComplete = 0;
 17761  0C06  0021               	movlb	1	; select bank1
 17762  0C07  01CE               	clrf	picc_select@uidComplete^(0+128)
 17763  0C08                     l14939:	
 17764                           ;mfrc522_picc.c: 147: while (!uidComplete) {
 17765                           
 17766  0C08  0021               	movlb	1	; select bank1
 17767  0C09  084E               	movf	picc_select@uidComplete^(0+128),w
 17768  0C0A  1D03               	btfss	3,2
 17769  0C0B  2EA1               	goto	l14941
 17770                           
 17771                           ;mfrc522_picc.c: 148: if (cascadeLevel == 1) {
 17772  0C0C  0B61               	decfsz	picc_select@cascadeLevel^(0+128),w
 17773  0C0D  2C27               	goto	l14735
 17774                           
 17775                           ;mfrc522_picc.c: 149: buffer[0] = PICC_CMD_SEL_CL1;
 17776  0C0E  3093               	movlw	147
 17777  0C0F  0020               	movlb	0	; select bank0
 17778  0C10  00CB               	movwf	??_picc_select
 17779  0C11  0021               	movlb	1	; select bank1
 17780  0C12  00D6               	movwf	picc_select@buffer^(0+128)
 17781                           
 17782                           ;mfrc522_picc.c: 150: uidIndex = 0;
 17783  0C13  01E2               	clrf	picc_select@uidIndex^(0+128)
 17784                           
 17785                           ;mfrc522_picc.c: 151: useCascadeTag = validBits && uid->size > 4;
 17786  0C14  01D1               	clrf	_picc_select$3206^(0+128)
 17787  0C15  0020               	movlb	0	; select bank0
 17788  0C16  084A               	movf	picc_select@validBits,w
 17789  0C17  1903               	btfsc	3,2
 17790  0C18  2C24               	goto	l14733
 17791  0C19  0021               	movlb	1	; select bank1
 17792  0C1A  0865               	movf	picc_select@uid^(0+128),w
 17793  0C1B  0086               	movwf	6
 17794  0C1C  3001               	movlw	1	; select bank2/3
 17795  0C1D  0087               	movwf	7
 17796  0C1E  3005               	movlw	5
 17797  0C1F  0201               	subwf	1,w
 17798  0C20  1C03               	skipc
 17799  0C21  2C24               	goto	l14733
 17800  0C22  01D1               	clrf	_picc_select$3206^(0+128)
 17801  0C23  0AD1               	incf	_picc_select$3206^(0+128),f
 17802  0C24                     l14733:	
 17803  0C24  0021               	movlb	1	; select bank1
 17804  0C25  0851               	movf	_picc_select$3206^(0+128),w
 17805  0C26  2C47               	goto	L7
 17806  0C27                     l14735:	
 17807                           ;mfrc522_picc.c: 152: } else if (cascadeLevel == 2) {
 17808                           
 17809  0C27  3002               	movlw	2
 17810  0C28  0661               	xorwf	picc_select@cascadeLevel^(0+128),w
 17811  0C29  1D03               	btfss	3,2
 17812  0C2A  2C4C               	goto	l14749
 17813                           
 17814                           ;mfrc522_picc.c: 153: buffer[0] = PICC_CMD_SEL_CL2;
 17815  0C2B  3095               	movlw	149
 17816  0C2C  0020               	movlb	0	; select bank0
 17817  0C2D  00CB               	movwf	??_picc_select
 17818  0C2E  0021               	movlb	1	; select bank1
 17819  0C2F  00D6               	movwf	picc_select@buffer^(0+128)
 17820                           
 17821                           ;mfrc522_picc.c: 154: uidIndex = 3;
 17822  0C30  3003               	movlw	3
 17823  0C31  0020               	movlb	0	; select bank0
 17824  0C32  00CB               	movwf	??_picc_select
 17825  0C33  0021               	movlb	1	; select bank1
 17826  0C34  00E2               	movwf	picc_select@uidIndex^(0+128)
 17827                           
 17828                           ;mfrc522_picc.c: 155: useCascadeTag = validBits && uid->size > 7;
 17829  0C35  01D2               	clrf	_picc_select$3207^(0+128)
 17830  0C36  0020               	movlb	0	; select bank0
 17831  0C37  084A               	movf	picc_select@validBits,w
 17832  0C38  1903               	btfsc	3,2
 17833  0C39  2C45               	goto	l14747
 17834  0C3A  0021               	movlb	1	; select bank1
 17835  0C3B  0865               	movf	picc_select@uid^(0+128),w
 17836  0C3C  0086               	movwf	6
 17837  0C3D  3001               	movlw	1	; select bank2/3
 17838  0C3E  0087               	movwf	7
 17839  0C3F  3008               	movlw	8
 17840  0C40  0201               	subwf	1,w
 17841  0C41  1C03               	skipc
 17842  0C42  2C45               	goto	l14747
 17843  0C43  01D2               	clrf	_picc_select$3207^(0+128)
 17844  0C44  0AD2               	incf	_picc_select$3207^(0+128),f
 17845  0C45                     l14747:	
 17846  0C45  0021               	movlb	1	; select bank1
 17847  0C46  0852               	movf	_picc_select$3207^(0+128),w
 17848  0C47                     L7:	
 17849  0C47  0020               	movlb	0	; select bank0
 17850  0C48  00CB               	movwf	??_picc_select
 17851  0C49  0021               	movlb	1	; select bank1
 17852  0C4A  00E0               	movwf	picc_select@useCascadeTag^(0+128)
 17853                           
 17854                           ;mfrc522_picc.c: 156: } else if (cascadeLevel == 3) {
 17855  0C4B  2C5B               	goto	l14759
 17856  0C4C                     l14749:	
 17857  0C4C  3003               	movlw	3
 17858  0C4D  0661               	xorwf	picc_select@cascadeLevel^(0+128),w
 17859  0C4E  1D03               	btfss	3,2
 17860  0C4F  3405               	retlw	5
 17861                           
 17862                           ;mfrc522_picc.c: 157: buffer[0] = PICC_CMD_SEL_CL3;
 17863  0C50  3097               	movlw	151
 17864  0C51  0020               	movlb	0	; select bank0
 17865  0C52  00CB               	movwf	??_picc_select
 17866  0C53  0021               	movlb	1	; select bank1
 17867  0C54  00D6               	movwf	picc_select@buffer^(0+128)
 17868                           
 17869                           ;mfrc522_picc.c: 158: uidIndex = 6;
 17870  0C55  3006               	movlw	6
 17871  0C56  0020               	movlb	0	; select bank0
 17872  0C57  00CB               	movwf	??_picc_select
 17873  0C58  0021               	movlb	1	; select bank1
 17874  0C59  00E2               	movwf	picc_select@uidIndex^(0+128)
 17875                           
 17876                           ;mfrc522_picc.c: 159: useCascadeTag = 0;
 17877  0C5A  01E0               	clrf	picc_select@useCascadeTag^(0+128)
 17878  0C5B                     l14759:	
 17879                           ;mfrc522_picc.c: 161: return STATUS_INTERNAL_ERROR;
 17880                           
 17881                           ;mfrc522_picc.c: 160: } else {
 17882                           
 17883                           
 17884                           ;mfrc522_picc.c: 162: }
 17885                           ;mfrc522_picc.c: 164: if (validBits < (8 * uidIndex)) {
 17886  0C5B  0862               	movf	picc_select@uidIndex^(0+128),w
 17887  0C5C  0020               	movlb	0	; select bank0
 17888  0C5D  00CB               	movwf	??_picc_select
 17889  0C5E  01CC               	clrf	??_picc_select+1
 17890  0C5F  35CB               	lslf	??_picc_select,f
 17891  0C60  0DCC               	rlf	??_picc_select+1,f
 17892  0C61  35CB               	lslf	??_picc_select,f
 17893  0C62  0DCC               	rlf	??_picc_select+1,f
 17894  0C63  35CB               	lslf	??_picc_select,f
 17895  0C64  0DCC               	rlf	??_picc_select+1,f
 17896  0C65  084C               	movf	??_picc_select+1,w
 17897  0C66  3A80               	xorlw	128
 17898  0C67  3C80               	sublw	128
 17899  0C68  1D03               	skipz
 17900  0C69  2C6C               	goto	u13245
 17901  0C6A  084B               	movf	??_picc_select,w
 17902  0C6B  024A               	subwf	picc_select@validBits,w
 17903  0C6C                     u13245:	
 17904  0C6C  1803               	skipnc
 17905  0C6D  2C71               	goto	l14763
 17906                           
 17907                           ;mfrc522_picc.c: 165: currentLevelKnownBits = 0;
 17908  0C6E  0021               	movlb	1	; select bank1
 17909  0C6F  01EB               	clrf	picc_select@currentLevelKnownBits^(0+128)
 17910                           
 17911                           ;mfrc522_picc.c: 166: } else {
 17912  0C70  2C81               	goto	l14765
 17913  0C71                     l14763:	
 17914                           
 17915                           ;mfrc522_picc.c: 167: currentLevelKnownBits = validBits - (8 * uidIndex);
 17916  0C71  0021               	movlb	1	; select bank1
 17917  0C72  0862               	movf	picc_select@uidIndex^(0+128),w
 17918  0C73  0020               	movlb	0	; select bank0
 17919  0C74  00CB               	movwf	??_picc_select
 17920  0C75  3002               	movlw	2
 17921  0C76                     u13255:	
 17922  0C76  35CB               	lslf	??_picc_select,f
 17923  0C77  3EFF               	addlw	-1
 17924  0C78  1D03               	skipz
 17925  0C79  2C76               	goto	u13255
 17926  0C7A  354B               	lslf	??_picc_select,w
 17927  0C7B  3AFF               	xorlw	255
 17928  0C7C  3E01               	addlw	1
 17929  0C7D  074A               	addwf	picc_select@validBits,w
 17930  0C7E  00CC               	movwf	??_picc_select+1
 17931  0C7F  0021               	movlb	1	; select bank1
 17932  0C80  00EB               	movwf	picc_select@currentLevelKnownBits^(0+128)
 17933  0C81                     l14765:	
 17934                           
 17935                           ;mfrc522_picc.c: 168: }
 17936                           ;mfrc522_picc.c: 169: index = 2;
 17937  0C81  3002               	movlw	2
 17938  0C82  0020               	movlb	0	; select bank0
 17939  0C83  00CB               	movwf	??_picc_select
 17940  0C84  0021               	movlb	1	; select bank1
 17941  0C85  00EA               	movwf	picc_select@index^(0+128)
 17942                           
 17943                           ;mfrc522_picc.c: 170: if (useCascadeTag) {
 17944  0C86  0860               	movf	picc_select@useCascadeTag^(0+128),w
 17945  0C87  1903               	btfsc	3,2
 17946  0C88  2C98               	goto	l14773
 17947                           
 17948                           ;mfrc522_picc.c: 171: buffer[index++] = PICC_CMD_CT;
 17949  0C89  3088               	movlw	136
 17950  0C8A  0020               	movlb	0	; select bank0
 17951  0C8B  00CB               	movwf	??_picc_select
 17952  0C8C  0021               	movlb	1	; select bank1
 17953  0C8D  086A               	movf	picc_select@index^(0+128),w
 17954  0C8E  3ED6               	addlw	(low (picc_select@buffer| 0))& (0+255)
 17955  0C8F  0086               	movwf	6
 17956  0C90  0187               	clrf	7
 17957  0C91  0020               	movlb	0	; select bank0
 17958  0C92  084B               	movf	??_picc_select,w
 17959  0C93  0081               	movwf	1
 17960  0C94  3001               	movlw	1
 17961  0C95  00CB               	movwf	??_picc_select
 17962  0C96  0021               	movlb	1	; select bank1
 17963  0C97  07EA               	addwf	picc_select@index^(0+128),f
 17964  0C98                     l14773:	
 17965                           
 17966                           ;mfrc522_picc.c: 172: }
 17967                           ;mfrc522_picc.c: 173: uint8_t bytesToCopy;
 17968                           ;mfrc522_picc.c: 174: bytesToCopy = currentLevelKnownBits / 8 + (currentLevelKnownBits %
      +                           8 ? 1 : 0);
 17969  0C98  3008               	movlw	8
 17970  0C99  00F3               	movwf	___awdiv@divisor
 17971  0C9A  01F4               	clrf	___awdiv@divisor+1
 17972  0C9B  086B               	movf	picc_select@currentLevelKnownBits^(0+128),w
 17973  0C9C  0020               	movlb	0	; select bank0
 17974  0C9D  00CB               	movwf	??_picc_select
 17975  0C9E  01CC               	clrf	??_picc_select+1
 17976  0C9F  00F5               	movwf	___awdiv@dividend
 17977  0CA0  084C               	movf	??_picc_select+1,w
 17978  0CA1  00F6               	movwf	___awdiv@dividend+1
 17979  0CA2  26B4  3188         	fcall	___awdiv
 17980  0CA4  0873               	movf	?___awdiv,w
 17981  0CA5  0020               	movlb	0	; select bank0
 17982  0CA6  00CD               	movwf	??_picc_select+2
 17983  0CA7  0874               	movf	?___awdiv+1,w
 17984  0CA8  00CE               	movwf	??_picc_select+3
 17985  0CA9  0021               	movlb	1	; select bank1
 17986  0CAA  086B               	movf	picc_select@currentLevelKnownBits^(0+128),w
 17987  0CAB  3907               	andlw	7
 17988  0CAC  1903               	btfsc	3,2
 17989  0CAD  2CB0               	goto	u13270
 17990  0CAE  3001               	movlw	1
 17991  0CAF  2CB1               	goto	u13280
 17992  0CB0                     u13270:	
 17993  0CB0  3000               	movlw	0
 17994  0CB1                     u13280:	
 17995  0CB1  0020               	movlb	0	; select bank0
 17996  0CB2  074D               	addwf	??_picc_select+2,w
 17997  0CB3  00CF               	movwf	??_picc_select+4
 17998  0CB4  0021               	movlb	1	; select bank1
 17999  0CB5  00E3               	movwf	picc_select@bytesToCopy^(0+128)
 18000                           
 18001                           ;mfrc522_picc.c: 175: if (bytesToCopy) {
 18002  0CB6  0863               	movf	picc_select@bytesToCopy^(0+128),w
 18003  0CB7  1903               	btfsc	3,2
 18004  0CB8  2CEF               	goto	l14795
 18005                           
 18006                           ;mfrc522_picc.c: 176: uint8_t maxBytes = useCascadeTag ? 3 : 4;
 18007  0CB9  0860               	movf	picc_select@useCascadeTag^(0+128),w
 18008  0CBA  1D03               	btfss	3,2
 18009  0CBB  2CBE               	goto	l14781
 18010  0CBC  3004               	movlw	4
 18011  0CBD  2CBF               	goto	L8
 18012  0CBE                     l14781:	
 18013  0CBE  3003               	movlw	3
 18014  0CBF                     L8:	
 18015  0CBF  00C8               	movwf	_picc_select$3210^(0+128)
 18016  0CC0  01C9               	clrf	(_picc_select$3210^(0+128)+1)
 18017  0CC1  0020               	movlb	0	; select bank0
 18018  0CC2  00CB               	movwf	??_picc_select
 18019  0CC3  0021               	movlb	1	; select bank1
 18020  0CC4  00D4               	movwf	picc_select@maxBytes^(0+128)
 18021                           
 18022                           ;mfrc522_picc.c: 177: if (bytesToCopy > maxBytes) {
 18023  0CC5  0863               	movf	picc_select@bytesToCopy^(0+128),w
 18024  0CC6  0254               	subwf	picc_select@maxBytes^(0+128),w
 18025  0CC7  1803               	skipnc
 18026  0CC8  2CCE               	goto	l14785
 18027                           
 18028                           ;mfrc522_picc.c: 178: bytesToCopy = maxBytes;
 18029  0CC9  0854               	movf	picc_select@maxBytes^(0+128),w
 18030  0CCA  0020               	movlb	0	; select bank0
 18031  0CCB  00CB               	movwf	??_picc_select
 18032  0CCC  0021               	movlb	1	; select bank1
 18033  0CCD  00E3               	movwf	picc_select@bytesToCopy^(0+128)
 18034  0CCE                     l14785:	
 18035                           
 18036                           ;mfrc522_picc.c: 179: }
 18037                           ;mfrc522_picc.c: 180: for (count = 0; count < bytesToCopy; count++) {
 18038  0CCE  01E9               	clrf	picc_select@count^(0+128)
 18039  0CCF                     l14793:	
 18040  0CCF  0863               	movf	picc_select@bytesToCopy^(0+128),w
 18041  0CD0  0269               	subwf	picc_select@count^(0+128),w
 18042  0CD1  1803               	btfsc	3,0
 18043  0CD2  2CEF               	goto	l14795
 18044                           
 18045                           ;mfrc522_picc.c: 181: buffer[index++] = uid->uidByte[uidIndex + count];
 18046  0CD3  0862               	movf	picc_select@uidIndex^(0+128),w
 18047  0CD4  0769               	addwf	picc_select@count^(0+128),w
 18048  0CD5  3E01               	addlw	1
 18049  0CD6  0765               	addwf	picc_select@uid^(0+128),w
 18050  0CD7  0020               	movlb	0	; select bank0
 18051  0CD8  00CB               	movwf	??_picc_select
 18052  0CD9  0086               	movwf	6
 18053  0CDA  3001               	movlw	1	; select bank2/3
 18054  0CDB  0087               	movwf	7
 18055  0CDC  0801               	movf	1,w
 18056  0CDD  00CC               	movwf	??_picc_select+1
 18057  0CDE  0021               	movlb	1	; select bank1
 18058  0CDF  086A               	movf	picc_select@index^(0+128),w
 18059  0CE0  3ED6               	addlw	(low (picc_select@buffer| 0))& (0+255)
 18060  0CE1  0086               	movwf	6
 18061  0CE2  0187               	clrf	7
 18062  0CE3  0020               	movlb	0	; select bank0
 18063  0CE4  084C               	movf	??_picc_select+1,w
 18064  0CE5  0081               	movwf	1
 18065  0CE6  3001               	movlw	1
 18066  0CE7  00CB               	movwf	??_picc_select
 18067  0CE8  0021               	movlb	1	; select bank1
 18068  0CE9  07EA               	addwf	picc_select@index^(0+128),f
 18069  0CEA  0020               	movlb	0	; select bank0
 18070  0CEB  00CB               	movwf	??_picc_select
 18071  0CEC  0021               	movlb	1	; select bank1
 18072  0CED  07E9               	addwf	picc_select@count^(0+128),f
 18073  0CEE  2CCF               	goto	l14793
 18074  0CEF                     l14795:	
 18075                           
 18076                           ;mfrc522_picc.c: 182: }
 18077                           ;mfrc522_picc.c: 183: }
 18078                           ;mfrc522_picc.c: 184: if (useCascadeTag) {
 18079  0CEF  0860               	movf	picc_select@useCascadeTag^(0+128),w
 18080  0CF0  1903               	btfsc	3,2
 18081  0CF1  2CF7               	goto	l14799
 18082                           
 18083                           ;mfrc522_picc.c: 185: currentLevelKnownBits += 8;
 18084  0CF2  3008               	movlw	8
 18085  0CF3  0020               	movlb	0	; select bank0
 18086  0CF4  00CB               	movwf	??_picc_select
 18087  0CF5  0021               	movlb	1	; select bank1
 18088  0CF6  07EB               	addwf	picc_select@currentLevelKnownBits^(0+128),f
 18089  0CF7                     l14799:	
 18090                           
 18091                           ;mfrc522_picc.c: 186: }
 18092                           ;mfrc522_picc.c: 188: selectDone = 0;
 18093  0CF7  01CF               	clrf	picc_select@selectDone^(0+128)
 18094  0CF8                     l14885:	
 18095                           ;mfrc522_picc.c: 189: while (!selectDone) {
 18096                           
 18097  0CF8  0021               	movlb	1	; select bank1
 18098  0CF9  084F               	movf	picc_select@selectDone^(0+128),w
 18099  0CFA  1D03               	btfss	3,2
 18100  0CFB  2E20               	goto	l14887
 18101                           
 18102                           ;mfrc522_picc.c: 190: if (currentLevelKnownBits >= 32) {
 18103  0CFC  3020               	movlw	32
 18104  0CFD  026B               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 18105  0CFE  1C03               	skipc
 18106  0CFF  2D32               	goto	l14823
 18107                           
 18108                           ;mfrc522_picc.c: 192: buffer[1] = 0x70;
 18109  0D00  3070               	movlw	112
 18110  0D01  0020               	movlb	0	; select bank0
 18111  0D02  00CB               	movwf	??_picc_select
 18112  0D03  0021               	movlb	1	; select bank1
 18113  0D04  00D7               	movwf	(picc_select@buffer^(0+128)+1)
 18114                           
 18115                           ;mfrc522_picc.c: 193: buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5];
 18116  0D05  0858               	movf	(picc_select@buffer^(0+128)+2),w
 18117  0D06  0659               	xorwf	(picc_select@buffer^(0+128)+3),w
 18118  0D07  065A               	xorwf	(picc_select@buffer^(0+128)+4),w
 18119  0D08  065B               	xorwf	(picc_select@buffer^(0+128)+5),w
 18120  0D09  0020               	movlb	0	; select bank0
 18121  0D0A  00CB               	movwf	??_picc_select
 18122  0D0B  0021               	movlb	1	; select bank1
 18123  0D0C  00DC               	movwf	(picc_select@buffer^(0+128)+6)
 18124                           
 18125                           ;mfrc522_picc.c: 194: result = mfrc522_hal_calculate_crc(buffer, 7, &buffer[7]);
 18126  0D0D  30D6               	movlw	low picc_select@buffer
 18127  0D0E  0020               	movlb	0	; select bank0
 18128  0D0F  00A6               	movwf	mfrc522_hal_calculate_crc@data
 18129  0D10  3000               	movlw	high picc_select@buffer
 18130  0D11  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 18131  0D12  3007               	movlw	7
 18132  0D13  00CB               	movwf	??_picc_select
 18133  0D14  00A8               	movwf	mfrc522_hal_calculate_crc@length
 18134  0D15  30DD               	movlw	low (picc_select@buffer+7)
 18135  0D16  00A9               	movwf	mfrc522_hal_calculate_crc@result
 18136  0D17  3000               	movlw	high (picc_select@buffer+7)
 18137  0D18  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 18138  0D19  319D  255A  3188   	fcall	_mfrc522_hal_calculate_crc
 18139  0D1C  0020               	movlb	0	; select bank0
 18140  0D1D  00CC               	movwf	??_picc_select+1
 18141  0D1E  0021               	movlb	1	; select bank1
 18142  0D1F  00E8               	movwf	picc_select@result^(0+128)
 18143                           
 18144                           ;mfrc522_picc.c: 195: if (result != STATUS_OK) {
 18145  0D20  0868               	movf	picc_select@result^(0+128),w
 18146  0D21  1903               	btfsc	3,2
 18147  0D22  2D25               	goto	l14815
 18148                           
 18149                           ;mfrc522_picc.c: 196: return result;
 18150  0D23  0868               	movf	picc_select@result^(0+128),w
 18151  0D24  0008               	return
 18152  0D25                     l14815:	
 18153  0D25  3009               	movlw	9
 18154                           
 18155                           ;mfrc522_picc.c: 197: }
 18156                           ;mfrc522_picc.c: 198: txLastBits = 0;
 18157  0D26  01E7               	clrf	picc_select@txLastBits^(0+128)
 18158                           
 18159                           ;mfrc522_picc.c: 199: bufferUsed = 9;
 18160  0D27  0020               	movlb	0	; select bank0
 18161  0D28  00CB               	movwf	??_picc_select
 18162  0D29  0021               	movlb	1	; select bank1
 18163  0D2A  00D0               	movwf	picc_select@bufferUsed^(0+128)
 18164                           
 18165                           ;mfrc522_picc.c: 201: responseBuffer = &buffer[6];
 18166  0D2B  30DC               	movlw	(low ((picc_select@buffer| 0+6)))& (0+255)
 18167  0D2C  0020               	movlb	0	; select bank0
 18168  0D2D  00CB               	movwf	??_picc_select
 18169  0D2E  0021               	movlb	1	; select bank1
 18170  0D2F  00E6               	movwf	picc_select@responseBuffer^(0+128)
 18171                           
 18172                           ;mfrc522_picc.c: 202: responseLength = 3;
 18173  0D30  3003               	movlw	3
 18174  0D31  2D70               	goto	L9
 18175  0D32                     l14823:	
 18176                           ;mfrc522_picc.c: 203: } else {
 18177                           
 18178                           
 18179                           ;mfrc522_picc.c: 204: txLastBits = currentLevelKnownBits % 8;
 18180  0D32  086B               	movf	picc_select@currentLevelKnownBits^(0+128),w
 18181  0D33  3907               	andlw	7
 18182  0D34  0020               	movlb	0	; select bank0
 18183  0D35  00CB               	movwf	??_picc_select
 18184  0D36  0021               	movlb	1	; select bank1
 18185  0D37  00E7               	movwf	picc_select@txLastBits^(0+128)
 18186                           
 18187                           ;mfrc522_picc.c: 205: count = currentLevelKnownBits / 8;
 18188  0D38  3008               	movlw	8
 18189  0D39  00F3               	movwf	___awdiv@divisor
 18190  0D3A  01F4               	clrf	___awdiv@divisor+1
 18191  0D3B  086B               	movf	picc_select@currentLevelKnownBits^(0+128),w
 18192  0D3C  0020               	movlb	0	; select bank0
 18193  0D3D  00CB               	movwf	??_picc_select
 18194  0D3E  01CC               	clrf	??_picc_select+1
 18195  0D3F  00F5               	movwf	___awdiv@dividend
 18196  0D40  084C               	movf	??_picc_select+1,w
 18197  0D41  00F6               	movwf	___awdiv@dividend+1
 18198  0D42  26B4  3188         	fcall	___awdiv
 18199  0D44  0873               	movf	?___awdiv,w
 18200  0D45  0020               	movlb	0	; select bank0
 18201  0D46  00CD               	movwf	??_picc_select+2
 18202  0D47  0021               	movlb	1	; select bank1
 18203  0D48  00E9               	movwf	picc_select@count^(0+128)
 18204                           
 18205                           ;mfrc522_picc.c: 206: index = 2 + count;
 18206  0D49  3E02               	addlw	2
 18207  0D4A  0020               	movlb	0	; select bank0
 18208  0D4B  00CB               	movwf	??_picc_select
 18209  0D4C  0021               	movlb	1	; select bank1
 18210  0D4D  00EA               	movwf	picc_select@index^(0+128)
 18211                           
 18212                           ;mfrc522_picc.c: 207: buffer[1] = (index << 4) + txLastBits;
 18213  0D4E  0020               	movlb	0	; select bank0
 18214  0D4F  00CB               	movwf	??_picc_select
 18215  0D50  3003               	movlw	3
 18216  0D51                     u13365:	
 18217  0D51  35CB               	lslf	??_picc_select,f
 18218  0D52  3EFF               	addlw	-1
 18219  0D53  1D03               	skipz
 18220  0D54  2D51               	goto	u13365
 18221  0D55  354B               	lslf	??_picc_select,w
 18222  0D56  0021               	movlb	1	; select bank1
 18223  0D57  0767               	addwf	picc_select@txLastBits^(0+128),w
 18224  0D58  0020               	movlb	0	; select bank0
 18225  0D59  00CC               	movwf	??_picc_select+1
 18226  0D5A  0021               	movlb	1	; select bank1
 18227  0D5B  00D7               	movwf	(picc_select@buffer^(0+128)+1)
 18228                           
 18229                           ;mfrc522_picc.c: 208: bufferUsed = index + (txLastBits ? 1 : 0);
 18230  0D5C  0867               	movf	picc_select@txLastBits^(0+128),w
 18231  0D5D  1903               	btfsc	3,2
 18232  0D5E  2D61               	goto	u13370
 18233  0D5F  3001               	movlw	1
 18234  0D60  2D62               	goto	u13380
 18235  0D61                     u13370:	
 18236  0D61  3000               	movlw	0
 18237  0D62                     u13380:	
 18238  0D62  076A               	addwf	picc_select@index^(0+128),w
 18239  0D63  0020               	movlb	0	; select bank0
 18240  0D64  00CB               	movwf	??_picc_select
 18241  0D65  0021               	movlb	1	; select bank1
 18242  0D66  00D0               	movwf	picc_select@bufferUsed^(0+128)
 18243                           
 18244                           ;mfrc522_picc.c: 209: responseBuffer = &buffer[index];
 18245  0D67  086A               	movf	picc_select@index^(0+128),w
 18246  0D68  3ED6               	addlw	(low (picc_select@buffer| 0))& (0+255)
 18247  0D69  0020               	movlb	0	; select bank0
 18248  0D6A  00CB               	movwf	??_picc_select
 18249  0D6B  0021               	movlb	1	; select bank1
 18250  0D6C  00E6               	movwf	picc_select@responseBuffer^(0+128)
 18251                           
 18252                           ;mfrc522_picc.c: 210: responseLength = sizeof (buffer) - index;
 18253  0D6D  036A               	decf	picc_select@index^(0+128),w
 18254  0D6E  3AFF               	xorlw	255
 18255  0D6F  3E09               	addlw	9
 18256  0D70                     L9:	
 18257  0D70  0020               	movlb	0	; select bank0
 18258  0D71  00CB               	movwf	??_picc_select
 18259  0D72  0021               	movlb	1	; select bank1
 18260  0D73  00E4               	movwf	picc_select@responseLength^(0+128)
 18261                           
 18262                           ;mfrc522_picc.c: 211: }
 18263                           ;mfrc522_picc.c: 213: rxAlign = txLastBits;
 18264  0D74  0867               	movf	picc_select@txLastBits^(0+128),w
 18265  0D75  0020               	movlb	0	; select bank0
 18266  0D76  00CB               	movwf	??_picc_select
 18267  0D77  0021               	movlb	1	; select bank1
 18268  0D78  00D3               	movwf	picc_select@rxAlign^(0+128)
 18269                           
 18270                           ;mfrc522_picc.c: 214: mfrc522_bal_write_reg(BitFramingReg, (rxAlign << 4) + txLastBits);
 18271  0D79  0020               	movlb	0	; select bank0
 18272  0D7A  00CB               	movwf	??_picc_select
 18273  0D7B  3003               	movlw	3
 18274  0D7C                     u13395:	
 18275  0D7C  35CB               	lslf	??_picc_select,f
 18276  0D7D  3EFF               	addlw	-1
 18277  0D7E  1D03               	skipz
 18278  0D7F  2D7C               	goto	u13395
 18279  0D80  354B               	lslf	??_picc_select,w
 18280  0D81  0021               	movlb	1	; select bank1
 18281  0D82  0767               	addwf	picc_select@txLastBits^(0+128),w
 18282  0D83  0020               	movlb	0	; select bank0
 18283  0D84  00CC               	movwf	??_picc_select+1
 18284  0D85  00F7               	movwf	mfrc522_bal_write_reg@x
 18285  0D86  300D               	movlw	13
 18286  0D87  3199  21B7  3188   	fcall	_mfrc522_bal_write_reg
 18287                           
 18288                           ;mfrc522_picc.c: 217: result = pcd_comm_with_picc(PCD_Transceive,0x30,buffer, bufferUsed
      +                          , responseBuffer, &responseLength, &txLastBits, rxAlign, 0);
 18289  0D8A  3030               	movlw	48
 18290  0D8B  0020               	movlb	0	; select bank0
 18291  0D8C  00CB               	movwf	??_picc_select
 18292  0D8D  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 18293  0D8E  30D6               	movlw	low picc_select@buffer
 18294  0D8F  00B2               	movwf	pcd_comm_with_picc@sbuf
 18295  0D90  3000               	movlw	high picc_select@buffer
 18296  0D91  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 18297  0D92  0021               	movlb	1	; select bank1
 18298  0D93  0850               	movf	picc_select@bufferUsed^(0+128),w
 18299  0D94  0020               	movlb	0	; select bank0
 18300  0D95  00CC               	movwf	??_picc_select+1
 18301  0D96  00B4               	movwf	pcd_comm_with_picc@slen
 18302  0D97  0021               	movlb	1	; select bank1
 18303  0D98  0866               	movf	picc_select@responseBuffer^(0+128),w
 18304  0D99  0020               	movlb	0	; select bank0
 18305  0D9A  00B5               	movwf	pcd_comm_with_picc@rbuf
 18306  0D9B  30E4               	movlw	(low (picc_select@responseLength| 0))& (0+255)
 18307  0D9C  01B6               	clrf	pcd_comm_with_picc@rbuf+1
 18308  0D9D  00CD               	movwf	??_picc_select+2
 18309  0D9E  00B7               	movwf	pcd_comm_with_picc@rlen
 18310  0D9F  30E7               	movlw	(low (picc_select@txLastBits| 0))& (0+255)
 18311  0DA0  00CE               	movwf	??_picc_select+3
 18312  0DA1  00B8               	movwf	pcd_comm_with_picc@validBits
 18313  0DA2  0021               	movlb	1	; select bank1
 18314  0DA3  0853               	movf	picc_select@rxAlign^(0+128),w
 18315  0DA4  0020               	movlb	0	; select bank0
 18316  0DA5  00CF               	movwf	??_picc_select+4
 18317  0DA6  00B9               	movwf	pcd_comm_with_picc@rxAlign
 18318  0DA7  300C               	movlw	12
 18319  0DA8  01BA               	clrf	pcd_comm_with_picc@checkCRC
 18320  0DA9  3198  2008  3188   	fcall	_pcd_comm_with_picc
 18321  0DAC  0020               	movlb	0	; select bank0
 18322  0DAD  00D0               	movwf	??_picc_select+5
 18323  0DAE  0021               	movlb	1	; select bank1
 18324  0DAF  00E8               	movwf	picc_select@result^(0+128)
 18325                           
 18326                           ;mfrc522_picc.c: 218: if (result == STATUS_COLLISION) {
 18327  0DB0  3A02               	xorlw	2
 18328  0DB1  1D03               	btfss	3,2
 18329  0DB2  2E0D               	goto	l14871
 18330                           
 18331                           ;mfrc522_picc.c: 219: uint8_t valueOfCollReg = mfrc522_bal_read_reg(CollReg);
 18332  0DB3  300E               	movlw	14
 18333  0DB4  319D  25B9  3188   	fcall	_mfrc522_bal_read_reg
 18334  0DB7  0020               	movlb	0	; select bank0
 18335  0DB8  00CB               	movwf	??_picc_select
 18336  0DB9  0021               	movlb	1	; select bank1
 18337  0DBA  00D5               	movwf	picc_select@valueOfCollReg^(0+128)
 18338                           
 18339                           ;mfrc522_picc.c: 220: if (valueOfCollReg & 0x20) {
 18340  0DBB  1AD5               	btfsc	picc_select@valueOfCollReg^(0+128),5
 18341                           
 18342                           ;mfrc522_picc.c: 221: return STATUS_COLLISION;
 18343  0DBC  3402               	retlw	2
 18344                           
 18345                           ;mfrc522_picc.c: 222: }
 18346                           ;mfrc522_picc.c: 223: uint8_t collisionPos = valueOfCollReg & 0x1F;
 18347  0DBD  0855               	movf	picc_select@valueOfCollReg^(0+128),w
 18348  0DBE  391F               	andlw	31
 18349  0DBF  0020               	movlb	0	; select bank0
 18350  0DC0  00CB               	movwf	??_picc_select
 18351  0DC1  0021               	movlb	1	; select bank1
 18352  0DC2  00DF               	movwf	picc_select@collisionPos^(0+128)
 18353                           
 18354                           ;mfrc522_picc.c: 224: if (collisionPos == 0) {
 18355  0DC3  085F               	movf	picc_select@collisionPos^(0+128),w
 18356  0DC4  1D03               	btfss	3,2
 18357  0DC5  2DCB               	goto	l2258
 18358                           
 18359                           ;mfrc522_picc.c: 225: collisionPos = 32;
 18360  0DC6  3020               	movlw	32
 18361  0DC7  0020               	movlb	0	; select bank0
 18362  0DC8  00CB               	movwf	??_picc_select
 18363  0DC9  0021               	movlb	1	; select bank1
 18364  0DCA  00DF               	movwf	picc_select@collisionPos^(0+128)
 18365  0DCB                     l2258:	
 18366                           
 18367                           ;mfrc522_picc.c: 226: }
 18368                           ;mfrc522_picc.c: 227: if (collisionPos <= currentLevelKnownBits) {
 18369  0DCB  085F               	movf	picc_select@collisionPos^(0+128),w
 18370  0DCC  026B               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 18371  0DCD  1803               	btfsc	3,0
 18372                           
 18373                           ;mfrc522_picc.c: 228: return STATUS_INTERNAL_ERROR;
 18374  0DCE  3405               	retlw	5
 18375                           
 18376                           ;mfrc522_picc.c: 229: }
 18377                           ;mfrc522_picc.c: 230: currentLevelKnownBits = collisionPos;
 18378  0DCF  085F               	movf	picc_select@collisionPos^(0+128),w
 18379  0DD0  0020               	movlb	0	; select bank0
 18380  0DD1  00CB               	movwf	??_picc_select
 18381  0DD2  0021               	movlb	1	; select bank1
 18382  0DD3  00EB               	movwf	picc_select@currentLevelKnownBits^(0+128)
 18383                           
 18384                           ;mfrc522_picc.c: 231: count = (currentLevelKnownBits - 1) % 8;
 18385  0DD4  3EFF               	addlw	255
 18386  0DD5  3907               	andlw	7
 18387  0DD6  0020               	movlb	0	; select bank0
 18388  0DD7  00CB               	movwf	??_picc_select
 18389  0DD8  0021               	movlb	1	; select bank1
 18390  0DD9  00E9               	movwf	picc_select@count^(0+128)
 18391                           
 18392                           ;mfrc522_picc.c: 232: index = 1 + (currentLevelKnownBits / 8) + (count ? 1 : 0);
 18393  0DDA  3008               	movlw	8
 18394  0DDB  00F3               	movwf	___awdiv@divisor
 18395  0DDC  01F4               	clrf	___awdiv@divisor+1
 18396  0DDD  086B               	movf	picc_select@currentLevelKnownBits^(0+128),w
 18397  0DDE  0020               	movlb	0	; select bank0
 18398  0DDF  00CB               	movwf	??_picc_select
 18399  0DE0  01CC               	clrf	??_picc_select+1
 18400  0DE1  00F5               	movwf	___awdiv@dividend
 18401  0DE2  084C               	movf	??_picc_select+1,w
 18402  0DE3  00F6               	movwf	___awdiv@dividend+1
 18403  0DE4  26B4  3188         	fcall	___awdiv
 18404  0DE6  0873               	movf	?___awdiv,w
 18405  0DE7  0020               	movlb	0	; select bank0
 18406  0DE8  00CD               	movwf	??_picc_select+2
 18407  0DE9  0874               	movf	?___awdiv+1,w
 18408  0DEA  00CE               	movwf	??_picc_select+3
 18409  0DEB  0021               	movlb	1	; select bank1
 18410  0DEC  0869               	movf	picc_select@count^(0+128),w
 18411  0DED  1903               	btfsc	3,2
 18412  0DEE  2DF1               	goto	u13440
 18413  0DEF  3001               	movlw	1
 18414  0DF0  2DF2               	goto	u13450
 18415  0DF1                     u13440:	
 18416  0DF1  3000               	movlw	0
 18417  0DF2                     u13450:	
 18418  0DF2  0020               	movlb	0	; select bank0
 18419  0DF3  074D               	addwf	??_picc_select+2,w
 18420  0DF4  3E01               	addlw	1
 18421  0DF5  00CF               	movwf	??_picc_select+4
 18422  0DF6  0021               	movlb	1	; select bank1
 18423  0DF7  00EA               	movwf	picc_select@index^(0+128)
 18424                           
 18425                           ;mfrc522_picc.c: 233: buffer[index] |= (1 << count);
 18426  0DF8  3001               	movlw	1
 18427  0DF9  0020               	movlb	0	; select bank0
 18428  0DFA  00CB               	movwf	??_picc_select
 18429  0DFB  0021               	movlb	1	; select bank1
 18430  0DFC  0A69               	incf	picc_select@count^(0+128),w
 18431  0DFD  0020               	movlb	0	; select bank0
 18432  0DFE  2E00               	goto	u13464
 18433  0DFF                     u13465:	
 18434  0DFF  35CB               	lslf	??_picc_select,f
 18435  0E00                     u13464:	
 18436  0E00  0B89               	decfsz	9,f
 18437  0E01  2DFF               	goto	u13465
 18438  0E02  084B               	movf	??_picc_select,w
 18439  0E03  00CC               	movwf	??_picc_select+1
 18440  0E04  0021               	movlb	1	; select bank1
 18441  0E05  086A               	movf	picc_select@index^(0+128),w
 18442  0E06  3ED6               	addlw	(low (picc_select@buffer| 0))& (0+255)
 18443  0E07  0086               	movwf	6
 18444  0E08  0187               	clrf	7
 18445  0E09  0020               	movlb	0	; select bank0
 18446  0E0A  084C               	movf	??_picc_select+1,w
 18447  0E0B  0481               	iorwf	1,f
 18448                           
 18449                           ;mfrc522_picc.c: 234: } else if (result != STATUS_OK) {
 18450  0E0C  2CF8               	goto	l14885
 18451  0E0D                     l14871:	
 18452  0E0D  0021               	movlb	1	; select bank1
 18453  0E0E  0868               	movf	picc_select@result^(0+128),w
 18454  0E0F  1903               	btfsc	3,2
 18455  0E10  2E13               	goto	l14879
 18456                           
 18457                           ;mfrc522_picc.c: 235: return result;
 18458  0E11  0868               	movf	picc_select@result^(0+128),w
 18459  0E12  0008               	return
 18460  0E13                     l14879:	
 18461                           ;mfrc522_picc.c: 236: } else {
 18462                           
 18463                           
 18464                           ;mfrc522_picc.c: 237: if (currentLevelKnownBits >= 32) {
 18465  0E13  3020               	movlw	32
 18466  0E14  026B               	subwf	picc_select@currentLevelKnownBits^(0+128),w
 18467  0E15  1C03               	skipc
 18468  0E16  2E1A               	goto	l14883
 18469                           
 18470                           ;mfrc522_picc.c: 238: selectDone = 1;
 18471  0E17  01CF               	clrf	picc_select@selectDone^(0+128)
 18472  0E18  0ACF               	incf	picc_select@selectDone^(0+128),f
 18473                           
 18474                           ;mfrc522_picc.c: 239: } else {
 18475  0E19  2CF8               	goto	l14885
 18476  0E1A                     l14883:	
 18477                           
 18478                           ;mfrc522_picc.c: 240: currentLevelKnownBits = 32;
 18479  0E1A  3020               	movlw	32
 18480  0E1B  0020               	movlb	0	; select bank0
 18481  0E1C  00CB               	movwf	??_picc_select
 18482  0E1D  0021               	movlb	1	; select bank1
 18483  0E1E  00EB               	movwf	picc_select@currentLevelKnownBits^(0+128)
 18484  0E1F  2CF8               	goto	l14885
 18485  0E20                     l14887:	
 18486                           
 18487                           ;mfrc522_picc.c: 241: }
 18488                           ;mfrc522_picc.c: 242: }
 18489                           ;mfrc522_picc.c: 243: }
 18490                           ;mfrc522_picc.c: 244: index = (buffer[2] == PICC_CMD_CT) ? 3 : 2;
 18491  0E20  3088               	movlw	136
 18492  0E21  0658               	xorwf	(picc_select@buffer^(0+128)+2),w
 18493  0E22  1903               	btfsc	3,2
 18494  0E23  2E26               	goto	l14891
 18495  0E24  3002               	movlw	2
 18496  0E25  2E27               	goto	L10
 18497  0E26                     l14891:	
 18498  0E26  3003               	movlw	3
 18499  0E27                     L10:	
 18500  0E27  00CA               	movwf	_picc_select$3213^(0+128)
 18501  0E28  01CB               	clrf	(_picc_select$3213^(0+128)+1)
 18502  0E29  0020               	movlb	0	; select bank0
 18503  0E2A  00CB               	movwf	??_picc_select
 18504  0E2B  0021               	movlb	1	; select bank1
 18505  0E2C  00EA               	movwf	picc_select@index^(0+128)
 18506                           
 18507                           ;mfrc522_picc.c: 245: bytesToCopy = (buffer[2] == PICC_CMD_CT) ? 3 : 4;
 18508  0E2D  3088               	movlw	136
 18509  0E2E  0658               	xorwf	(picc_select@buffer^(0+128)+2),w
 18510  0E2F  1903               	btfsc	3,2
 18511  0E30  2E33               	goto	l14897
 18512  0E31  3004               	movlw	4
 18513  0E32  2E34               	goto	L11
 18514  0E33                     l14897:	
 18515  0E33  3003               	movlw	3
 18516  0E34                     L11:	
 18517  0E34  00CC               	movwf	_picc_select$3214^(0+128)
 18518  0E35  01CD               	clrf	(_picc_select$3214^(0+128)+1)
 18519  0E36  0020               	movlb	0	; select bank0
 18520  0E37  00CB               	movwf	??_picc_select
 18521  0E38  0021               	movlb	1	; select bank1
 18522  0E39  00E3               	movwf	picc_select@bytesToCopy^(0+128)
 18523                           
 18524                           ;mfrc522_picc.c: 246: for (count = 0; count < bytesToCopy; count++) {
 18525  0E3A  01E9               	clrf	picc_select@count^(0+128)
 18526  0E3B                     l14907:	
 18527  0E3B  0863               	movf	picc_select@bytesToCopy^(0+128),w
 18528  0E3C  0269               	subwf	picc_select@count^(0+128),w
 18529  0E3D  1803               	btfsc	3,0
 18530  0E3E  2E5B               	goto	l14909
 18531                           
 18532                           ;mfrc522_picc.c: 247: uid->uidByte[uidIndex + count] = buffer[index++];
 18533  0E3F  086A               	movf	picc_select@index^(0+128),w
 18534  0E40  3ED6               	addlw	(low (picc_select@buffer| 0))& (0+255)
 18535  0E41  0086               	movwf	6
 18536  0E42  0187               	clrf	7
 18537  0E43  0801               	movf	1,w
 18538  0E44  0020               	movlb	0	; select bank0
 18539  0E45  00CB               	movwf	??_picc_select
 18540  0E46  0021               	movlb	1	; select bank1
 18541  0E47  0862               	movf	picc_select@uidIndex^(0+128),w
 18542  0E48  0769               	addwf	picc_select@count^(0+128),w
 18543  0E49  3E01               	addlw	1
 18544  0E4A  0765               	addwf	picc_select@uid^(0+128),w
 18545  0E4B  0020               	movlb	0	; select bank0
 18546  0E4C  00CC               	movwf	??_picc_select+1
 18547  0E4D  0086               	movwf	6
 18548  0E4E  3001               	movlw	1	; select bank2/3
 18549  0E4F  0087               	movwf	7
 18550  0E50  084B               	movf	??_picc_select,w
 18551  0E51  0081               	movwf	1
 18552  0E52  3001               	movlw	1
 18553  0E53  00CB               	movwf	??_picc_select
 18554  0E54  0021               	movlb	1	; select bank1
 18555  0E55  07EA               	addwf	picc_select@index^(0+128),f
 18556  0E56  0020               	movlb	0	; select bank0
 18557  0E57  00CB               	movwf	??_picc_select
 18558  0E58  0021               	movlb	1	; select bank1
 18559  0E59  07E9               	addwf	picc_select@count^(0+128),f
 18560  0E5A  2E3B               	goto	l14907
 18561  0E5B                     l14909:	
 18562                           
 18563                           ;mfrc522_picc.c: 248: }
 18564                           ;mfrc522_picc.c: 249: if (responseLength != 3 || txLastBits != 0) {
 18565  0E5B  3003               	movlw	3
 18566  0E5C  0664               	xorwf	picc_select@responseLength^(0+128),w
 18567  0E5D  1903               	btfsc	3,2
 18568  0E5E  0867               	movf	picc_select@txLastBits^(0+128),w
 18569  0E5F  1D03               	btfss	3,2
 18570                           
 18571                           ;mfrc522_picc.c: 250: return STATUS_ERROR;
 18572  0E60  3401               	retlw	1
 18573                           
 18574                           ;mfrc522_picc.c: 251: }
 18575                           ;mfrc522_picc.c: 252: result = mfrc522_hal_calculate_crc(responseBuffer, 1, &buffer[2]);
 18576  0E61  0866               	movf	picc_select@responseBuffer^(0+128),w
 18577  0E62  0020               	movlb	0	; select bank0
 18578  0E63  00A6               	movwf	mfrc522_hal_calculate_crc@data
 18579  0E64  30D8               	movlw	low (picc_select@buffer+2)
 18580  0E65  01A7               	clrf	mfrc522_hal_calculate_crc@data+1
 18581  0E66  01A8               	clrf	mfrc522_hal_calculate_crc@length
 18582  0E67  0AA8               	incf	mfrc522_hal_calculate_crc@length,f
 18583  0E68  00A9               	movwf	mfrc522_hal_calculate_crc@result
 18584  0E69  3000               	movlw	high (picc_select@buffer+2)
 18585  0E6A  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 18586  0E6B  319D  255A  3188   	fcall	_mfrc522_hal_calculate_crc
 18587  0E6E  0020               	movlb	0	; select bank0
 18588  0E6F  00CB               	movwf	??_picc_select
 18589  0E70  0021               	movlb	1	; select bank1
 18590  0E71  00E8               	movwf	picc_select@result^(0+128)
 18591                           
 18592                           ;mfrc522_picc.c: 253: if (result != STATUS_OK) {
 18593  0E72  0868               	movf	picc_select@result^(0+128),w
 18594  0E73  1903               	btfsc	3,2
 18595  0E74  2E77               	goto	l14925
 18596                           
 18597                           ;mfrc522_picc.c: 254: return result;
 18598  0E75  0868               	movf	picc_select@result^(0+128),w
 18599  0E76  0008               	return
 18600  0E77                     l14925:	
 18601                           
 18602                           ;mfrc522_picc.c: 255: }
 18603                           ;mfrc522_picc.c: 256: if ((buffer[2] != responseBuffer[1]) || (buffer[3] != responseBuff
      +                          er[2])) {
 18604  0E77  0A66               	incf	picc_select@responseBuffer^(0+128),w
 18605  0E78  0086               	movwf	6
 18606  0E79  0187               	clrf	7
 18607  0E7A  0858               	movf	(picc_select@buffer^(0+128)+2),w
 18608  0E7B  0601               	xorwf	1,w
 18609  0E7C  1D03               	skipz
 18610  0E7D  3407               	retlw	7
 18611  0E7E  0866               	movf	picc_select@responseBuffer^(0+128),w
 18612  0E7F  3E02               	addlw	2
 18613  0E80  0086               	movwf	6
 18614  0E81  0859               	movf	(picc_select@buffer^(0+128)+3),w
 18615  0E82  0601               	xorwf	1,w
 18616  0E83  1D03               	btfss	3,2
 18617                           
 18618                           ;mfrc522_picc.c: 257: return STATUS_CRC_WRONG;
 18619  0E84  3407               	retlw	7
 18620                           
 18621                           ;mfrc522_picc.c: 258: }
 18622                           ;mfrc522_picc.c: 259: if (responseBuffer[0] & 0x04) {
 18623  0E85  0866               	movf	picc_select@responseBuffer^(0+128),w
 18624  0E86  0086               	movwf	6
 18625  0E87  1D01               	btfss	1,2
 18626  0E88  2E8F               	goto	l2284
 18627                           
 18628                           ;mfrc522_picc.c: 260: cascadeLevel++;
 18629  0E89  3001               	movlw	1
 18630  0E8A  0020               	movlb	0	; select bank0
 18631  0E8B  00CB               	movwf	??_picc_select
 18632  0E8C  0021               	movlb	1	; select bank1
 18633  0E8D  07E1               	addwf	picc_select@cascadeLevel^(0+128),f
 18634                           
 18635                           ;mfrc522_picc.c: 261: } else {
 18636  0E8E  2C08               	goto	l14939
 18637  0E8F                     l2284:	
 18638                           
 18639                           ;mfrc522_picc.c: 262: uidComplete = 1;
 18640  0E8F  01CE               	clrf	picc_select@uidComplete^(0+128)
 18641  0E90  0ACE               	incf	picc_select@uidComplete^(0+128),f
 18642                           
 18643                           ;mfrc522_picc.c: 264: uid->sak = responseBuffer[0];
 18644  0E91  0866               	movf	picc_select@responseBuffer^(0+128),w
 18645  0E92  0086               	movwf	6
 18646  0E93  0187               	clrf	7
 18647  0E94  0801               	movf	1,w
 18648  0E95  0020               	movlb	0	; select bank0
 18649  0E96  00CB               	movwf	??_picc_select
 18650  0E97  0021               	movlb	1	; select bank1
 18651  0E98  0865               	movf	picc_select@uid^(0+128),w
 18652  0E99  3E0B               	addlw	11
 18653  0E9A  0086               	movwf	6
 18654  0E9B  3001               	movlw	1	; select bank2/3
 18655  0E9C  0087               	movwf	7
 18656  0E9D  0020               	movlb	0	; select bank0
 18657  0E9E  084B               	movf	??_picc_select,w
 18658  0E9F  0081               	movwf	1
 18659  0EA0  2C08               	goto	l14939
 18660  0EA1                     l14941:	
 18661                           
 18662                           ;mfrc522_picc.c: 266: }
 18663                           ;mfrc522_picc.c: 267: }
 18664                           ;mfrc522_picc.c: 268: uid->size = 3 * cascadeLevel + 1;
 18665  0EA1  3003               	movlw	3
 18666  0EA2  0020               	movlb	0	; select bank0
 18667  0EA3  00CB               	movwf	??_picc_select
 18668  0EA4  00A4               	movwf	___bmul@multiplicand
 18669  0EA5  0021               	movlb	1	; select bank1
 18670  0EA6  0861               	movf	picc_select@cascadeLevel^(0+128),w
 18671  0EA7  2704               	fcall	___bmul
 18672  0EA8  3E01               	addlw	1
 18673  0EA9  0020               	movlb	0	; select bank0
 18674  0EAA  00CC               	movwf	??_picc_select+1
 18675  0EAB  0021               	movlb	1	; select bank1
 18676  0EAC  0865               	movf	picc_select@uid^(0+128),w
 18677  0EAD  0086               	movwf	6
 18678  0EAE  3001               	movlw	1	; select bank2/3
 18679  0EAF  0087               	movwf	7
 18680  0EB0  0020               	movlb	0	; select bank0
 18681  0EB1  084C               	movf	??_picc_select+1,w
 18682  0EB2  0081               	movwf	1
 18683                           
 18684                           ;mfrc522_picc.c: 269: return STATUS_OK;
 18685  0EB3  3400               	retlw	0
 18686  0EB4                     __end_of_picc_select:	
 18687  0EB4                     __ptext72:	
 18688 ;; *************** function ___awdiv *****************
 18689 ;; Defined at:
 18690 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\awdiv.c"
 18691 ;; Parameters:    Size  Location     Type
 18692 ;;  divisor         2    3[COMMON] int 
 18693 ;;  dividend        2    5[COMMON] int 
 18694 ;; Auto vars:     Size  Location     Type
 18695 ;;  quotient        2    2[BANK0 ] int 
 18696 ;;  sign            1    1[BANK0 ] unsigned char 
 18697 ;;  counter         1    0[BANK0 ] unsigned char 
 18698 ;; Return value:  Size  Location     Type
 18699 ;;                  2    3[COMMON] int 
 18700 ;; Registers used:
 18701 ;;		wreg, status,2, status,0
 18702 ;; Tracked objects:
 18703 ;;		On entry : 0/0
 18704 ;;		On exit  : 0/0
 18705 ;;		Unchanged: 0/0
 18706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18707 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18708 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18709 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18710 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18711 ;;Total ram usage:        9 bytes
 18712 ;; Hardware stack levels used:    1
 18713 ;; Hardware stack levels required when called:    2
 18714 ;; This function calls:
 18715 ;;		Nothing
 18716 ;; This function is called by:
 18717 ;;		_ui_disp_set_calib
 18718 ;;		_ui_key_process_enter
 18719 ;;		_ui_key_set_process
 18720 ;;		_lcd_set_com_seg
 18721 ;;		_picc_select
 18722 ;; This function uses a non-reentrant model
 18723 ;;
 18724                           
 18725                           
 18726                           ;psect for function ___awdiv
 18727  0EB4                     ___awdiv:	
 18728                           
 18729                           ;incstack = 0
 18730                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18731  0EB4  0020               	movlb	0	; select bank0
 18732  0EB5  01A1               	clrf	___awdiv@sign
 18733  0EB6  1FF4               	btfss	___awdiv@divisor+1,7
 18734  0EB7  2EBF               	goto	l12021
 18735  0EB8  09F3               	comf	___awdiv@divisor,f
 18736  0EB9  09F4               	comf	___awdiv@divisor+1,f
 18737  0EBA  0AF3               	incf	___awdiv@divisor,f
 18738  0EBB  1903               	skipnz
 18739  0EBC  0AF4               	incf	___awdiv@divisor+1,f
 18740  0EBD  01A1               	clrf	___awdiv@sign
 18741  0EBE  0AA1               	incf	___awdiv@sign,f
 18742  0EBF                     l12021:	
 18743  0EBF  1FF6               	btfss	___awdiv@dividend+1,7
 18744  0EC0  2EC9               	goto	l12027
 18745  0EC1  09F5               	comf	___awdiv@dividend,f
 18746  0EC2  09F6               	comf	___awdiv@dividend+1,f
 18747  0EC3  0AF5               	incf	___awdiv@dividend,f
 18748  0EC4  1903               	skipnz
 18749  0EC5  0AF6               	incf	___awdiv@dividend+1,f
 18750  0EC6  3001               	movlw	1
 18751  0EC7  00F7               	movwf	??___awdiv
 18752  0EC8  06A1               	xorwf	___awdiv@sign,f
 18753  0EC9                     l12027:	
 18754  0EC9  01A2               	clrf	___awdiv@quotient
 18755  0ECA  01A3               	clrf	___awdiv@quotient+1
 18756  0ECB  0873               	movf	___awdiv@divisor,w
 18757  0ECC  0474               	iorwf	___awdiv@divisor+1,w
 18758  0ECD  1903               	btfsc	3,2
 18759  0ECE  2EF7               	goto	l12049
 18760  0ECF  01A0               	clrf	___awdiv@counter
 18761  0ED0  0AA0               	incf	___awdiv@counter,f
 18762  0ED1                     l12037:	
 18763  0ED1  1BF4               	btfsc	___awdiv@divisor+1,7
 18764  0ED2  2EDC               	goto	l12039
 18765  0ED3  3001               	movlw	1
 18766  0ED4                     u10525:	
 18767  0ED4  35F3               	lslf	___awdiv@divisor,f
 18768  0ED5  0DF4               	rlf	___awdiv@divisor+1,f
 18769  0ED6  0B89               	decfsz	9,f
 18770  0ED7  2ED4               	goto	u10525
 18771  0ED8  3001               	movlw	1
 18772  0ED9  00F7               	movwf	??___awdiv
 18773  0EDA  07A0               	addwf	___awdiv@counter,f
 18774  0EDB  2ED1               	goto	l12037
 18775  0EDC                     l12039:	
 18776  0EDC  3001               	movlw	1
 18777  0EDD                     u10545:	
 18778  0EDD  35A2               	lslf	___awdiv@quotient,f
 18779  0EDE  0DA3               	rlf	___awdiv@quotient+1,f
 18780  0EDF  0B89               	decfsz	9,f
 18781  0EE0  2EDD               	goto	u10545
 18782  0EE1  0874               	movf	___awdiv@divisor+1,w
 18783  0EE2  0276               	subwf	___awdiv@dividend+1,w
 18784  0EE3  1D03               	skipz
 18785  0EE4  2EE7               	goto	u10555
 18786  0EE5  0873               	movf	___awdiv@divisor,w
 18787  0EE6  0275               	subwf	___awdiv@dividend,w
 18788  0EE7                     u10555:	
 18789  0EE7  1C03               	skipc
 18790  0EE8  2EEE               	goto	l12045
 18791  0EE9  0873               	movf	___awdiv@divisor,w
 18792  0EEA  02F5               	subwf	___awdiv@dividend,f
 18793  0EEB  0874               	movf	___awdiv@divisor+1,w
 18794  0EEC  3BF6               	subwfb	___awdiv@dividend+1,f
 18795  0EED  1422               	bsf	___awdiv@quotient,0
 18796  0EEE                     l12045:	
 18797  0EEE  3001               	movlw	1
 18798  0EEF                     u10565:	
 18799  0EEF  36F4               	lsrf	___awdiv@divisor+1,f
 18800  0EF0  0CF3               	rrf	___awdiv@divisor,f
 18801  0EF1  0B89               	decfsz	9,f
 18802  0EF2  2EEF               	goto	u10565
 18803  0EF3  3001               	movlw	1
 18804  0EF4  02A0               	subwf	___awdiv@counter,f
 18805  0EF5  1D03               	btfss	3,2
 18806  0EF6  2EDC               	goto	l12039
 18807  0EF7                     l12049:	
 18808  0EF7  0821               	movf	___awdiv@sign,w
 18809  0EF8  1903               	btfsc	3,2
 18810  0EF9  2EFF               	goto	l12053
 18811  0EFA  09A2               	comf	___awdiv@quotient,f
 18812  0EFB  09A3               	comf	___awdiv@quotient+1,f
 18813  0EFC  0AA2               	incf	___awdiv@quotient,f
 18814  0EFD  1903               	skipnz
 18815  0EFE  0AA3               	incf	___awdiv@quotient+1,f
 18816  0EFF                     l12053:	
 18817  0EFF  0823               	movf	___awdiv@quotient+1,w
 18818  0F00  00F4               	movwf	?___awdiv+1
 18819  0F01  0822               	movf	___awdiv@quotient,w
 18820  0F02  00F3               	movwf	?___awdiv
 18821  0F03  0008               	return
 18822  0F04                     __end_of___awdiv:	
 18823  0F04                     __ptext71:	
 18824 ;; *************** function ___bmul *****************
 18825 ;; Defined at:
 18826 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\Umul8.c"
 18827 ;; Parameters:    Size  Location     Type
 18828 ;;  multiplier      1    wreg     unsigned char 
 18829 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 18830 ;; Auto vars:     Size  Location     Type
 18831 ;;  multiplier      1    7[BANK0 ] unsigned char 
 18832 ;;  product         1    6[BANK0 ] unsigned char 
 18833 ;; Return value:  Size  Location     Type
 18834 ;;                  1    wreg      unsigned char 
 18835 ;; Registers used:
 18836 ;;		wreg, status,2, status,0
 18837 ;; Tracked objects:
 18838 ;;		On entry : 0/0
 18839 ;;		On exit  : 0/0
 18840 ;;		Unchanged: 0/0
 18841 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18842 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18843 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 18844 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18845 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18846 ;;Total ram usage:        4 bytes
 18847 ;; Hardware stack levels used:    1
 18848 ;; Hardware stack levels required when called:    2
 18849 ;; This function calls:
 18850 ;;		Nothing
 18851 ;; This function is called by:
 18852 ;;		_lcd_set_com_seg
 18853 ;;		_picc_select
 18854 ;; This function uses a non-reentrant model
 18855 ;;
 18856                           
 18857                           
 18858                           ;psect for function ___bmul
 18859  0F04                     ___bmul:	
 18860                           
 18861                           ;incstack = 0
 18862                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 18863                           ;___bmul@multiplier stored from wreg
 18864  0F04  0020               	movlb	0	; select bank0
 18865  0F05  00A7               	movwf	___bmul@multiplier
 18866  0F06  01A6               	clrf	___bmul@product
 18867  0F07                     l12001:	
 18868  0F07  1C27               	btfss	___bmul@multiplier,0
 18869  0F08  2F0C               	goto	l12005
 18870  0F09  0824               	movf	___bmul@multiplicand,w
 18871  0F0A  00A5               	movwf	??___bmul
 18872  0F0B  07A6               	addwf	___bmul@product,f
 18873  0F0C                     l12005:	
 18874  0F0C  1003               	clrc
 18875  0F0D  0DA4               	rlf	___bmul@multiplicand,f
 18876  0F0E  1003               	clrc
 18877  0F0F  0CA7               	rrf	___bmul@multiplier,f
 18878  0F10  0827               	movf	___bmul@multiplier,w
 18879  0F11  1D03               	btfss	3,2
 18880  0F12  2F07               	goto	l12001
 18881  0F13  0826               	movf	___bmul@product,w
 18882  0F14  0008               	return
 18883  0F15                     __end_of___bmul:	
 18884  0F15                     __ptext69:	
 18885 ;; *************** function _picc_stop_cryptol *****************
 18886 ;; Defined at:
 18887 ;;		line 308 in file "src/nfc/pal/mfrc522_picc.c"
 18888 ;; Parameters:    Size  Location     Type
 18889 ;;		None
 18890 ;; Auto vars:     Size  Location     Type
 18891 ;;		None
 18892 ;; Return value:  Size  Location     Type
 18893 ;;                  1    wreg      void 
 18894 ;; Registers used:
 18895 ;;		wreg, status,2, status,0, pclath, cstack
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : 0/0
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18904 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18905 ;;Total ram usage:        1 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; Hardware stack levels required when called:    5
 18908 ;; This function calls:
 18909 ;;		_mfrc522_bal_clr_bit_reg
 18910 ;; This function is called by:
 18911 ;;		_rfid_comm_process
 18912 ;; This function uses a non-reentrant model
 18913 ;;
 18914                           
 18915                           
 18916                           ;psect for function _picc_stop_cryptol
 18917  0F15                     _picc_stop_cryptol:	
 18918                           
 18919                           ;mfrc522_picc.c: 309: mfrc522_bal_clr_bit_reg(Status2Reg, 0x08);
 18920                           
 18921                           ;incstack = 0
 18922                           ; Regs used in _picc_stop_cryptol: [wreg+status,2+status,0+pclath+cstack]
 18923  0F15  3008               	movlw	8
 18924  0F16  0020               	movlb	0	; select bank0
 18925  0F17  00A6               	movwf	??_picc_stop_cryptol
 18926  0F18  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 18927  0F19  319E  2E46         	ljmp	_mfrc522_bal_clr_bit_reg
 18928  0F1B                     __end_of_picc_stop_cryptol:	
 18929  0F1B                     __ptext66:	
 18930 ;; *************** function _rfid_comm_process_read_dec *****************
 18931 ;; Defined at:
 18932 ;;		line 115 in file "src/app/rfid_demo.c"
 18933 ;; Parameters:    Size  Location     Type
 18934 ;;		None
 18935 ;; Auto vars:     Size  Location     Type
 18936 ;;  ret             1   67[BANK0 ] unsigned char 
 18937 ;; Return value:  Size  Location     Type
 18938 ;;                  1    wreg      unsigned char 
 18939 ;; Registers used:
 18940 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18941 ;; Tracked objects:
 18942 ;;		On entry : 0/0
 18943 ;;		On exit  : 0/0
 18944 ;;		Unchanged: 0/0
 18945 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 18946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 18947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 18948 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 18949 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 18950 ;;Total ram usage:        4 bytes
 18951 ;; Hardware stack levels used:    1
 18952 ;; Hardware stack levels required when called:    8
 18953 ;; This function calls:
 18954 ;;		_crc_verify
 18955 ;;		_mifare_read
 18956 ;;		_picc_authenticate
 18957 ;; This function is called by:
 18958 ;;		_rfid_comm_process
 18959 ;; This function uses a non-reentrant model
 18960 ;;
 18961                           
 18962                           
 18963                           ;psect for function _rfid_comm_process_read_dec
 18964  0F1B                     _rfid_comm_process_read_dec:	
 18965                           
 18966                           ;rfid_demo.c: 117: uint8_t ret;
 18967                           ;rfid_demo.c: 119: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 18968                           
 18969                           ;incstack = 0
 18970                           ; Regs used in _rfid_comm_process_read_dec: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18971  0F1B  300F               	movlw	15
 18972  0F1C  0020               	movlb	0	; select bank0
 18973  0F1D  00E0               	movwf	??_rfid_comm_process_read_dec
 18974  0F1E  00CA               	movwf	picc_authenticate@blockAddr
 18975  0F1F  30BC               	movlw	low _userKeyB
 18976  0F20  00CB               	movwf	picc_authenticate@key
 18977  0F21  3001               	movlw	high _userKeyB
 18978  0F22  00CC               	movwf	picc_authenticate@key+1
 18979  0F23  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 18980  0F24  00E1               	movwf	??_rfid_comm_process_read_dec+1
 18981  0F25  00CD               	movwf	picc_authenticate@uid
 18982  0F26  3061               	movlw	97
 18983  0F27  319C  245B  3188   	fcall	_picc_authenticate
 18984  0F2A  0020               	movlb	0	; select bank0
 18985  0F2B  00E2               	movwf	??_rfid_comm_process_read_dec+2
 18986  0F2C  0021               	movlb	1	; select bank1
 18987  0F2D  00BB               	movwf	_piccResult^(0+128)
 18988                           
 18989                           ;rfid_demo.c: 120: rdLen=18;
 18990  0F2E  3012               	movlw	18
 18991  0F2F  0020               	movlb	0	; select bank0
 18992  0F30  00E0               	movwf	??_rfid_comm_process_read_dec
 18993  0F31  0021               	movlb	1	; select bank1
 18994  0F32  00C7               	movwf	_rdLen^(0+128)
 18995                           
 18996                           ;rfid_demo.c: 121: piccResult = mifare_read(12, cardDecBuf, &rdLen);
 18997  0F33  3056               	movlw	86
 18998  0F34  0020               	movlb	0	; select bank0
 18999  0F35  00E0               	movwf	??_rfid_comm_process_read_dec
 19000  0F36  00CA               	movwf	mifare_read@buffer
 19001  0F37  30C7               	movlw	(low (_rdLen| 0))& (0+255)
 19002  0F38  00E1               	movwf	??_rfid_comm_process_read_dec+1
 19003  0F39  00CB               	movwf	mifare_read@bufferSize
 19004  0F3A  300C               	movlw	12
 19005  0F3B  3197  27A9  3188   	fcall	_mifare_read
 19006  0F3E  0020               	movlb	0	; select bank0
 19007  0F3F  00E2               	movwf	??_rfid_comm_process_read_dec+2
 19008  0F40  0021               	movlb	1	; select bank1
 19009  0F41  00BB               	movwf	_piccResult^(0+128)
 19010                           
 19011                           ;rfid_demo.c: 122: ret=crc_verify(cardDecBuf,sizeof(st_cardValueStrucrtDef));
 19012  0F42  3056               	movlw	86
 19013  0F43  0020               	movlb	0	; select bank0
 19014  0F44  00AB               	movwf	crc_verify@message
 19015  0F45  3004               	movlw	4
 19016  0F46  00AC               	movwf	crc_verify@message+1
 19017  0F47  3008               	movlw	8
 19018  0F48  00AD               	movwf	crc_verify@n
 19019  0F49  3000               	movlw	0
 19020  0F4A  01AE               	clrf	crc_verify@n+1
 19021  0F4B  3193  23BD         	fcall	_crc_verify
 19022  0F4D  0020               	movlb	0	; select bank0
 19023  0F4E  00E0               	movwf	??_rfid_comm_process_read_dec
 19024  0F4F  00E3               	movwf	rfid_comm_process_read_dec@ret
 19025                           
 19026                           ;rfid_demo.c: 123: return ret;
 19027  0F50  0008               	return
 19028  0F51                     __end_of_rfid_comm_process_read_dec:	
 19029  0F51                     __ptext61:	
 19030 ;; *************** function _rfid_comm_process_read_inc *****************
 19031 ;; Defined at:
 19032 ;;		line 105 in file "src/app/rfid_demo.c"
 19033 ;; Parameters:    Size  Location     Type
 19034 ;;		None
 19035 ;; Auto vars:     Size  Location     Type
 19036 ;;  ret             1   67[BANK0 ] unsigned char 
 19037 ;; Return value:  Size  Location     Type
 19038 ;;                  1    wreg      unsigned char 
 19039 ;; Registers used:
 19040 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19041 ;; Tracked objects:
 19042 ;;		On entry : 0/0
 19043 ;;		On exit  : 0/0
 19044 ;;		Unchanged: 0/0
 19045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19047 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19048 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19049 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 19050 ;;Total ram usage:        4 bytes
 19051 ;; Hardware stack levels used:    1
 19052 ;; Hardware stack levels required when called:    8
 19053 ;; This function calls:
 19054 ;;		_crc_verify
 19055 ;;		_mifare_read
 19056 ;;		_picc_authenticate
 19057 ;; This function is called by:
 19058 ;;		_rfid_comm_process
 19059 ;; This function uses a non-reentrant model
 19060 ;;
 19061                           
 19062                           
 19063                           ;psect for function _rfid_comm_process_read_inc
 19064  0F51                     _rfid_comm_process_read_inc:	
 19065                           
 19066                           ;rfid_demo.c: 107: uint8_t ret;
 19067                           ;rfid_demo.c: 109: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 11, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 19068                           
 19069                           ;incstack = 0
 19070                           ; Regs used in _rfid_comm_process_read_inc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19071  0F51  300B               	movlw	11
 19072  0F52  0020               	movlb	0	; select bank0
 19073  0F53  00E0               	movwf	??_rfid_comm_process_read_inc
 19074  0F54  00CA               	movwf	picc_authenticate@blockAddr
 19075  0F55  30BC               	movlw	low _userKeyB
 19076  0F56  00CB               	movwf	picc_authenticate@key
 19077  0F57  3001               	movlw	high _userKeyB
 19078  0F58  00CC               	movwf	picc_authenticate@key+1
 19079  0F59  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 19080  0F5A  00E1               	movwf	??_rfid_comm_process_read_inc+1
 19081  0F5B  00CD               	movwf	picc_authenticate@uid
 19082  0F5C  3061               	movlw	97
 19083  0F5D  319C  245B  3188   	fcall	_picc_authenticate
 19084  0F60  0020               	movlb	0	; select bank0
 19085  0F61  00E2               	movwf	??_rfid_comm_process_read_inc+2
 19086  0F62  0021               	movlb	1	; select bank1
 19087  0F63  00BB               	movwf	_piccResult^(0+128)
 19088                           
 19089                           ;rfid_demo.c: 110: __t8=18;
 19090  0F64  3012               	movlw	18
 19091  0F65  0020               	movlb	0	; select bank0
 19092  0F66  00E0               	movwf	??_rfid_comm_process_read_inc
 19093  0F67  0021               	movlb	1	; select bank1
 19094  0F68  00C6               	movwf	___t8^(0+128)
 19095                           
 19096                           ;rfid_demo.c: 111: piccResult = mifare_read(8, cardIncBuf, &__t8);
 19097  0F69  3044               	movlw	68
 19098  0F6A  0020               	movlb	0	; select bank0
 19099  0F6B  00E0               	movwf	??_rfid_comm_process_read_inc
 19100  0F6C  00CA               	movwf	mifare_read@buffer
 19101  0F6D  30C6               	movlw	(low (___t8| 0))& (0+255)
 19102  0F6E  00E1               	movwf	??_rfid_comm_process_read_inc+1
 19103  0F6F  00CB               	movwf	mifare_read@bufferSize
 19104  0F70  3008               	movlw	8
 19105  0F71  3197  27A9  3188   	fcall	_mifare_read
 19106  0F74  0020               	movlb	0	; select bank0
 19107  0F75  00E2               	movwf	??_rfid_comm_process_read_inc+2
 19108  0F76  0021               	movlb	1	; select bank1
 19109  0F77  00BB               	movwf	_piccResult^(0+128)
 19110                           
 19111                           ;rfid_demo.c: 112: ret=crc_verify(cardIncBuf,sizeof(st_cardValueStrucrtDef));
 19112  0F78  3044               	movlw	68
 19113  0F79  0020               	movlb	0	; select bank0
 19114  0F7A  00AB               	movwf	crc_verify@message
 19115  0F7B  3004               	movlw	4
 19116  0F7C  00AC               	movwf	crc_verify@message+1
 19117  0F7D  3008               	movlw	8
 19118  0F7E  00AD               	movwf	crc_verify@n
 19119  0F7F  3000               	movlw	0
 19120  0F80  01AE               	clrf	crc_verify@n+1
 19121  0F81  3193  23BD         	fcall	_crc_verify
 19122  0F83  0020               	movlb	0	; select bank0
 19123  0F84  00E0               	movwf	??_rfid_comm_process_read_inc
 19124  0F85  00E3               	movwf	rfid_comm_process_read_inc@ret
 19125                           
 19126                           ;rfid_demo.c: 113: return ret;
 19127  0F86  0008               	return
 19128  0F87                     __end_of_rfid_comm_process_read_inc:	
 19129  0F87                     __ptext56:	
 19130 ;; *************** function _lcd_disp_cln *****************
 19131 ;; Defined at:
 19132 ;;		line 55 in file "src/driver/lcd.c"
 19133 ;; Parameters:    Size  Location     Type
 19134 ;;  show            1    wreg     unsigned char 
 19135 ;; Auto vars:     Size  Location     Type
 19136 ;;  show            1   20[BANK0 ] unsigned char 
 19137 ;; Return value:  Size  Location     Type
 19138 ;;                  1    wreg      void 
 19139 ;; Registers used:
 19140 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19141 ;; Tracked objects:
 19142 ;;		On entry : 0/0
 19143 ;;		On exit  : 0/0
 19144 ;;		Unchanged: 0/0
 19145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 19148 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 19149 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 19150 ;;Total ram usage:        3 bytes
 19151 ;; Hardware stack levels used:    1
 19152 ;; Hardware stack levels required when called:    4
 19153 ;; This function calls:
 19154 ;;		_lcd_set_com_seg
 19155 ;; This function is called by:
 19156 ;;		_ui_disp_balance_and_volume
 19157 ;; This function uses a non-reentrant model
 19158 ;;
 19159                           
 19160                           
 19161                           ;psect for function _lcd_disp_cln
 19162  0F87                     _lcd_disp_cln:	
 19163                           
 19164                           ;incstack = 0
 19165                           ; Regs used in _lcd_disp_cln: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19166                           ;lcd_disp_cln@show stored from wreg
 19167  0F87  0020               	movlb	0	; select bank0
 19168  0F88  00B4               	movwf	lcd_disp_cln@show
 19169                           
 19170                           ;lcd.c: 58: lcd_set_com_seg(0, 42,show);
 19171  0F89  302A               	movlw	42
 19172  0F8A  00B2               	movwf	??_lcd_disp_cln
 19173  0F8B  00A8               	movwf	lcd_set_com_seg@seg
 19174  0F8C  0834               	movf	lcd_disp_cln@show,w
 19175  0F8D  00B3               	movwf	??_lcd_disp_cln+1
 19176  0F8E  00A9               	movwf	lcd_set_com_seg@show
 19177  0F8F  3000               	movlw	0
 19178  0F90  31A6  26C4         	fcall	_lcd_set_com_seg
 19179                           
 19180                           ;lcd.c: 59: lcd_set_com_seg(1, 42,show);
 19181  0F92  302A               	movlw	42
 19182  0F93  0020               	movlb	0	; select bank0
 19183  0F94  00B2               	movwf	??_lcd_disp_cln
 19184  0F95  00A8               	movwf	lcd_set_com_seg@seg
 19185  0F96  0834               	movf	lcd_disp_cln@show,w
 19186  0F97  00B3               	movwf	??_lcd_disp_cln+1
 19187  0F98  00A9               	movwf	lcd_set_com_seg@show
 19188  0F99  3001               	movlw	1
 19189  0F9A  31A6  2EC4         	ljmp	_lcd_set_com_seg
 19190  0F9C                     __end_of_lcd_disp_cln:	
 19191  0F9C                     __ptext41:	
 19192 ;; *************** function _m_math_pow *****************
 19193 ;; Defined at:
 19194 ;;		line 113 in file "src/depend/m_string.c"
 19195 ;; Parameters:    Size  Location     Type
 19196 ;;  x               4    8[BANK0 ] long 
 19197 ;;  y               1   12[BANK0 ] unsigned char 
 19198 ;; Auto vars:     Size  Location     Type
 19199 ;;  ret             4   13[BANK0 ] long 
 19200 ;; Return value:  Size  Location     Type
 19201 ;;                  4    8[BANK0 ] long 
 19202 ;; Registers used:
 19203 ;;		wreg, status,2, status,0, pclath, cstack
 19204 ;; Tracked objects:
 19205 ;;		On entry : 0/0
 19206 ;;		On exit  : 0/0
 19207 ;;		Unchanged: 0/0
 19208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19209 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 19210 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 19211 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19212 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0
 19213 ;;Total ram usage:        9 bytes
 19214 ;; Hardware stack levels used:    1
 19215 ;; Hardware stack levels required when called:    3
 19216 ;; This function calls:
 19217 ;;		___lmul
 19218 ;; This function is called by:
 19219 ;;		_ui_uint32_2_str
 19220 ;; This function uses a non-reentrant model
 19221 ;;
 19222                           
 19223                           
 19224                           ;psect for function _m_math_pow
 19225  0F9C                     _m_math_pow:	
 19226                           
 19227                           ;m_string.c: 115: int32_t ret=1;
 19228                           
 19229                           ;incstack = 0
 19230                           ; Regs used in _m_math_pow: [wreg+status,2+status,0+pclath+cstack]
 19231  0F9C  0020               	movlb	0	; select bank0
 19232  0F9D  3001               	movlw	1
 19233  0F9E  01B0               	clrf	m_math_pow@ret+3
 19234  0F9F  01AF               	clrf	m_math_pow@ret+2
 19235  0FA0  01AE               	clrf	m_math_pow@ret+1
 19236  0FA1  00AD               	movwf	m_math_pow@ret
 19237                           
 19238                           ;m_string.c: 116: if(y==0)return 1;
 19239  0FA2  082C               	movf	m_math_pow@y,w
 19240  0FA3  3001               	movlw	1
 19241  0FA4  1D03               	btfss	3,2
 19242  0FA5  2FC7               	goto	L4
 19243  0FA6  01AB               	clrf	?_m_math_pow+3
 19244  0FA7  01AA               	clrf	?_m_math_pow+2
 19245  0FA8  01A9               	clrf	?_m_math_pow+1
 19246  0FA9  00A8               	movwf	?_m_math_pow
 19247  0FAA  0008               	return
 19248  0FAB                     l12081:	
 19249                           ;m_string.c: 117: while(y--)
 19250                           
 19251                           
 19252                           ;m_string.c: 118: {
 19253                           ;m_string.c: 119: ret*=x;
 19254  0FAB  082B               	movf	m_math_pow@x+3,w
 19255  0FAC  00A3               	movwf	___lmul@multiplier+3
 19256  0FAD  082A               	movf	m_math_pow@x+2,w
 19257  0FAE  00A2               	movwf	___lmul@multiplier+2
 19258  0FAF  0829               	movf	m_math_pow@x+1,w
 19259  0FB0  00A1               	movwf	___lmul@multiplier+1
 19260  0FB1  0828               	movf	m_math_pow@x,w
 19261  0FB2  00A0               	movwf	___lmul@multiplier
 19262  0FB3  0830               	movf	m_math_pow@ret+3,w
 19263  0FB4  00A7               	movwf	___lmul@multiplicand+3
 19264  0FB5  082F               	movf	m_math_pow@ret+2,w
 19265  0FB6  00A6               	movwf	___lmul@multiplicand+2
 19266  0FB7  082E               	movf	m_math_pow@ret+1,w
 19267  0FB8  00A5               	movwf	___lmul@multiplicand+1
 19268  0FB9  082D               	movf	m_math_pow@ret,w
 19269  0FBA  00A4               	movwf	___lmul@multiplicand
 19270  0FBB  27D3  3188         	fcall	___lmul
 19271  0FBD  0020               	movlb	0	; select bank0
 19272  0FBE  0823               	movf	?___lmul+3,w
 19273  0FBF  00B0               	movwf	m_math_pow@ret+3
 19274  0FC0  0822               	movf	?___lmul+2,w
 19275  0FC1  00AF               	movwf	m_math_pow@ret+2
 19276  0FC2  0821               	movf	?___lmul+1,w
 19277  0FC3  00AE               	movwf	m_math_pow@ret+1
 19278  0FC4  0820               	movf	?___lmul,w
 19279  0FC5  00AD               	movwf	m_math_pow@ret
 19280  0FC6  3001               	movlw	1
 19281  0FC7                     L4:	
 19282  0FC7  02AC               	subwf	m_math_pow@y,f
 19283  0FC8  0F2C               	incfsz	m_math_pow@y,w
 19284  0FC9  2FAB               	goto	l12081
 19285                           
 19286                           ;m_string.c: 120: }
 19287                           ;m_string.c: 121: return ret;
 19288  0FCA  0830               	movf	m_math_pow@ret+3,w
 19289  0FCB  00AB               	movwf	?_m_math_pow+3
 19290  0FCC  082F               	movf	m_math_pow@ret+2,w
 19291  0FCD  00AA               	movwf	?_m_math_pow+2
 19292  0FCE  082E               	movf	m_math_pow@ret+1,w
 19293  0FCF  00A9               	movwf	?_m_math_pow+1
 19294  0FD0  082D               	movf	m_math_pow@ret,w
 19295  0FD1  00A8               	movwf	?_m_math_pow
 19296  0FD2  0008               	return
 19297  0FD3                     __end_of_m_math_pow:	
 19298  0FD3                     __ptext135:	
 19299 ;; *************** function ___lmul *****************
 19300 ;; Defined at:
 19301 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\Umul32.c"
 19302 ;; Parameters:    Size  Location     Type
 19303 ;;  multiplier      4    0[BANK0 ] unsigned long 
 19304 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 19305 ;; Auto vars:     Size  Location     Type
 19306 ;;  product         4    3[COMMON] unsigned long 
 19307 ;; Return value:  Size  Location     Type
 19308 ;;                  4    0[BANK0 ] unsigned long 
 19309 ;; Registers used:
 19310 ;;		wreg, status,2, status,0
 19311 ;; Tracked objects:
 19312 ;;		On entry : 0/0
 19313 ;;		On exit  : 0/0
 19314 ;;		Unchanged: 0/0
 19315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19316 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 19317 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19319 ;;      Totals:         4       8       0       0       0       0       0       0       0       0       0       0       
      +0
 19320 ;;Total ram usage:       12 bytes
 19321 ;; Hardware stack levels used:    1
 19322 ;; Hardware stack levels required when called:    2
 19323 ;; This function calls:
 19324 ;;		Nothing
 19325 ;; This function is called by:
 19326 ;;		_ui_disp_set_line
 19327 ;;		_app_flow_adc_2_flow
 19328 ;;		_app_flow_rt_volume_cal
 19329 ;;		_app_flow_rt_balance_money_cal
 19330 ;;		_m_math_pow
 19331 ;; This function uses a non-reentrant model
 19332 ;;
 19333                           
 19334                           
 19335                           ;psect for function ___lmul
 19336  0FD3                     ___lmul:	
 19337                           
 19338                           ;incstack = 0
 19339                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 19340  0FD3  3000               	movlw	0
 19341  0FD4  00F6               	movwf	___lmul@product+3
 19342  0FD5  00F5               	movwf	___lmul@product+2
 19343  0FD6  00F4               	movwf	___lmul@product+1
 19344  0FD7  00F3               	movwf	___lmul@product
 19345  0FD8                     l11987:	
 19346  0FD8  0020               	movlb	0	; select bank0
 19347  0FD9  1C20               	btfss	___lmul@multiplier,0
 19348  0FDA  2FE3               	goto	l11991
 19349  0FDB  0824               	movf	___lmul@multiplicand,w
 19350  0FDC  07F3               	addwf	___lmul@product,f
 19351  0FDD  0825               	movf	___lmul@multiplicand+1,w
 19352  0FDE  3DF4               	addwfc	___lmul@product+1,f
 19353  0FDF  0826               	movf	___lmul@multiplicand+2,w
 19354  0FE0  3DF5               	addwfc	___lmul@product+2,f
 19355  0FE1  0827               	movf	___lmul@multiplicand+3,w
 19356  0FE2  3DF6               	addwfc	___lmul@product+3,f
 19357  0FE3                     l11991:	
 19358  0FE3  3001               	movlw	1
 19359  0FE4                     u10445:	
 19360  0FE4  35A4               	lslf	___lmul@multiplicand,f
 19361  0FE5  0DA5               	rlf	___lmul@multiplicand+1,f
 19362  0FE6  0DA6               	rlf	___lmul@multiplicand+2,f
 19363  0FE7  0DA7               	rlf	___lmul@multiplicand+3,f
 19364  0FE8  0B89               	decfsz	9,f
 19365  0FE9  2FE4               	goto	u10445
 19366  0FEA  3001               	movlw	1
 19367  0FEB                     u10455:	
 19368  0FEB  36A3               	lsrf	___lmul@multiplier+3,f
 19369  0FEC  0CA2               	rrf	___lmul@multiplier+2,f
 19370  0FED  0CA1               	rrf	___lmul@multiplier+1,f
 19371  0FEE  0CA0               	rrf	___lmul@multiplier,f
 19372  0FEF  0B89               	decfsz	9,f
 19373  0FF0  2FEB               	goto	u10455
 19374  0FF1  0823               	movf	___lmul@multiplier+3,w
 19375  0FF2  0422               	iorwf	___lmul@multiplier+2,w
 19376  0FF3  0421               	iorwf	___lmul@multiplier+1,w
 19377  0FF4  0420               	iorwf	___lmul@multiplier,w
 19378  0FF5  1D03               	skipz
 19379  0FF6  2FD8               	goto	l11987
 19380  0FF7  0876               	movf	___lmul@product+3,w
 19381  0FF8  00A3               	movwf	?___lmul+3
 19382  0FF9  0875               	movf	___lmul@product+2,w
 19383  0FFA  00A2               	movwf	?___lmul+2
 19384  0FFB  0874               	movf	___lmul@product+1,w
 19385  0FFC  00A1               	movwf	?___lmul+1
 19386  0FFD  0873               	movf	___lmul@product,w
 19387  0FFE  00A0               	movwf	?___lmul
 19388  0FFF  0008               	return
 19389  1000                     __end_of___lmul:	
 19390                           
 19391                           	psect	text42
 19392  3711                     __ptext42:	
 19393 ;; *************** function ___almod *****************
 19394 ;; Defined at:
 19395 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\almod.c"
 19396 ;; Parameters:    Size  Location     Type
 19397 ;;  divisor         4    0[BANK0 ] long 
 19398 ;;  dividend        4    4[BANK0 ] long 
 19399 ;; Auto vars:     Size  Location     Type
 19400 ;;  sign            1    5[COMMON] unsigned char 
 19401 ;;  counter         1    4[COMMON] unsigned char 
 19402 ;; Return value:  Size  Location     Type
 19403 ;;                  4    0[BANK0 ] long 
 19404 ;; Registers used:
 19405 ;;		wreg, status,2, status,0
 19406 ;; Tracked objects:
 19407 ;;		On entry : 0/0
 19408 ;;		On exit  : 0/0
 19409 ;;		Unchanged: 0/0
 19410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19411 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 19412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19414 ;;      Totals:         3       8       0       0       0       0       0       0       0       0       0       0       
      +0
 19415 ;;Total ram usage:       11 bytes
 19416 ;; Hardware stack levels used:    1
 19417 ;; Hardware stack levels required when called:    2
 19418 ;; This function calls:
 19419 ;;		Nothing
 19420 ;; This function is called by:
 19421 ;;		_ui_uint32_2_str
 19422 ;; This function uses a non-reentrant model
 19423 ;;
 19424                           
 19425                           
 19426                           ;psect for function ___almod
 19427  3711                     ___almod:	
 19428                           
 19429                           ;incstack = 0
 19430                           ; Regs used in ___almod: [wreg+status,2+status,0]
 19431  3711  01F5               	clrf	___almod@sign
 19432  3712  0020               	movlb	0	; select bank0
 19433  3713  1FA7               	btfss	___almod@dividend+3,7
 19434  3714  2F22               	goto	l2675
 19435  3715  09A4               	comf	___almod@dividend,f
 19436  3716  09A5               	comf	___almod@dividend+1,f
 19437  3717  09A6               	comf	___almod@dividend+2,f
 19438  3718  09A7               	comf	___almod@dividend+3,f
 19439  3719  0AA4               	incf	___almod@dividend,f
 19440  371A  1903               	skipnz
 19441  371B  0AA5               	incf	___almod@dividend+1,f
 19442  371C  1903               	skipnz
 19443  371D  0AA6               	incf	___almod@dividend+2,f
 19444  371E  1903               	skipnz
 19445  371F  0AA7               	incf	___almod@dividend+3,f
 19446  3720  01F5               	clrf	___almod@sign
 19447  3721  0AF5               	incf	___almod@sign,f
 19448  3722                     l2675:	
 19449  3722  1FA3               	btfss	___almod@divisor+3,7
 19450  3723  2F2F               	goto	l12209
 19451  3724  09A0               	comf	___almod@divisor,f
 19452  3725  09A1               	comf	___almod@divisor+1,f
 19453  3726  09A2               	comf	___almod@divisor+2,f
 19454  3727  09A3               	comf	___almod@divisor+3,f
 19455  3728  0AA0               	incf	___almod@divisor,f
 19456  3729  1903               	skipnz
 19457  372A  0AA1               	incf	___almod@divisor+1,f
 19458  372B  1903               	skipnz
 19459  372C  0AA2               	incf	___almod@divisor+2,f
 19460  372D  1903               	skipnz
 19461  372E  0AA3               	incf	___almod@divisor+3,f
 19462  372F                     l12209:	
 19463  372F  0823               	movf	___almod@divisor+3,w
 19464  3730  0422               	iorwf	___almod@divisor+2,w
 19465  3731  0421               	iorwf	___almod@divisor+1,w
 19466  3732  0420               	iorwf	___almod@divisor,w
 19467  3733  1903               	skipnz
 19468  3734  2F67               	goto	l12225
 19469  3735  01F4               	clrf	___almod@counter
 19470  3736  0AF4               	incf	___almod@counter,f
 19471  3737                     l12215:	
 19472  3737  1BA3               	btfsc	___almod@divisor+3,7
 19473  3738  2F44               	goto	l12217
 19474  3739  3001               	movlw	1
 19475  373A                     u10835:	
 19476  373A  35A0               	lslf	___almod@divisor,f
 19477  373B  0DA1               	rlf	___almod@divisor+1,f
 19478  373C  0DA2               	rlf	___almod@divisor+2,f
 19479  373D  0DA3               	rlf	___almod@divisor+3,f
 19480  373E  0B89               	decfsz	9,f
 19481  373F  2F3A               	goto	u10835
 19482  3740  3001               	movlw	1
 19483  3741  00F3               	movwf	??___almod
 19484  3742  07F4               	addwf	___almod@counter,f
 19485  3743  2F37               	goto	l12215
 19486  3744                     l12217:	
 19487  3744  0823               	movf	___almod@divisor+3,w
 19488  3745  0227               	subwf	___almod@dividend+3,w
 19489  3746  1D03               	skipz
 19490  3747  2F52               	goto	u10855
 19491  3748  0822               	movf	___almod@divisor+2,w
 19492  3749  0226               	subwf	___almod@dividend+2,w
 19493  374A  1D03               	skipz
 19494  374B  2F52               	goto	u10855
 19495  374C  0821               	movf	___almod@divisor+1,w
 19496  374D  0225               	subwf	___almod@dividend+1,w
 19497  374E  1D03               	skipz
 19498  374F  2F52               	goto	u10855
 19499  3750  0820               	movf	___almod@divisor,w
 19500  3751  0224               	subwf	___almod@dividend,w
 19501  3752                     u10855:	
 19502  3752  1C03               	skipc
 19503  3753  2F5C               	goto	l12221
 19504  3754  0820               	movf	___almod@divisor,w
 19505  3755  02A4               	subwf	___almod@dividend,f
 19506  3756  0821               	movf	___almod@divisor+1,w
 19507  3757  3BA5               	subwfb	___almod@dividend+1,f
 19508  3758  0822               	movf	___almod@divisor+2,w
 19509  3759  3BA6               	subwfb	___almod@dividend+2,f
 19510  375A  0823               	movf	___almod@divisor+3,w
 19511  375B  3BA7               	subwfb	___almod@dividend+3,f
 19512  375C                     l12221:	
 19513  375C  3001               	movlw	1
 19514  375D                     u10865:	
 19515  375D  36A3               	lsrf	___almod@divisor+3,f
 19516  375E  0CA2               	rrf	___almod@divisor+2,f
 19517  375F  0CA1               	rrf	___almod@divisor+1,f
 19518  3760  0CA0               	rrf	___almod@divisor,f
 19519  3761  0B89               	decfsz	9,f
 19520  3762  2F5D               	goto	u10865
 19521  3763  3001               	movlw	1
 19522  3764  02F4               	subwf	___almod@counter,f
 19523  3765  1D03               	btfss	3,2
 19524  3766  2F44               	goto	l12217
 19525  3767                     l12225:	
 19526  3767  0875               	movf	___almod@sign,w
 19527  3768  1903               	btfsc	3,2
 19528  3769  2F75               	goto	l12229
 19529  376A  09A4               	comf	___almod@dividend,f
 19530  376B  09A5               	comf	___almod@dividend+1,f
 19531  376C  09A6               	comf	___almod@dividend+2,f
 19532  376D  09A7               	comf	___almod@dividend+3,f
 19533  376E  0AA4               	incf	___almod@dividend,f
 19534  376F  1903               	skipnz
 19535  3770  0AA5               	incf	___almod@dividend+1,f
 19536  3771  1903               	skipnz
 19537  3772  0AA6               	incf	___almod@dividend+2,f
 19538  3773  1903               	skipnz
 19539  3774  0AA7               	incf	___almod@dividend+3,f
 19540  3775                     l12229:	
 19541  3775  0827               	movf	___almod@dividend+3,w
 19542  3776  00A3               	movwf	?___almod+3
 19543  3777  0826               	movf	___almod@dividend+2,w
 19544  3778  00A2               	movwf	?___almod+2
 19545  3779  0825               	movf	___almod@dividend+1,w
 19546  377A  00A1               	movwf	?___almod+1
 19547  377B  0824               	movf	___almod@dividend,w
 19548  377C  00A0               	movwf	?___almod
 19549  377D  0008               	return
 19550  377E                     __end_of___almod:	
 19551                           
 19552                           	psect	text46
 19553  2D54                     __ptext46:	
 19554 ;; *************** function _lcd_disp_code *****************
 19555 ;; Defined at:
 19556 ;;		line 157 in file "src/driver/lcd.c"
 19557 ;; Parameters:    Size  Location     Type
 19558 ;;  code            1    wreg     unsigned char 
 19559 ;;  loc             1    5[COMMON] unsigned char 
 19560 ;; Auto vars:     Size  Location     Type
 19561 ;;  code            1    6[COMMON] unsigned char 
 19562 ;; Return value:  Size  Location     Type
 19563 ;;                  1    wreg      void 
 19564 ;; Registers used:
 19565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19571 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19574 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19575 ;;Total ram usage:        2 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    3
 19578 ;; This function calls:
 19579 ;;		_lcd_disp_code_0
 19580 ;;		_lcd_disp_code_1
 19581 ;;		_lcd_disp_code_2
 19582 ;;		_lcd_disp_code_3
 19583 ;;		_lcd_disp_code_4
 19584 ;;		_lcd_disp_code_5
 19585 ;;		_lcd_disp_code_6
 19586 ;;		_lcd_disp_code_7
 19587 ;; This function is called by:
 19588 ;;		_lcd_disp_str
 19589 ;; This function uses a non-reentrant model
 19590 ;;
 19591                           
 19592                           
 19593                           ;psect for function _lcd_disp_code
 19594  2D54                     _lcd_disp_code:	
 19595                           
 19596                           ;incstack = 0
 19597                           ; Regs used in _lcd_disp_code: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 19598                           ;lcd_disp_code@code stored from wreg
 19599  2D54  00F6               	movwf	lcd_disp_code@code
 19600                           
 19601                           ;lcd.c: 169: }
 19602                           
 19603                           ;lcd.c: 168: default:break;
 19604                           
 19605                           ;lcd.c: 159: switch(loc){
 19606  2D55  0875               	movf	lcd_disp_code@loc,w
 19607                           
 19608                           ; Switch size 1, requested type "space"
 19609                           ; Number of cases is 8, Range of values is 0 to 7
 19610                           ; switch strategies available:
 19611                           ; Name         Instructions Cycles
 19612                           ; direct_byte           22     6 (fixed)
 19613                           ; simple_byte           25    13 (average)
 19614                           ; jumptable            260     6 (fixed)
 19615                           ;	Chosen strategy is direct_byte
 19616  2D56  0084               	movwf	4
 19617  2D57  3008               	movlw	8
 19618  2D58  0204               	subwf	4,w
 19619  2D59  1803               	skipnc
 19620  2D5A  0008               	return
 19621  2D5B  31B0               	movlp	high S15567
 19622  2D5C  3504               	lslf	4,w
 19623  2D5D  3E00               	addlw	low S15567
 19624  2D5E  0082               	movwf	2
 19625  2D5F  0008               	return
 19626  2D60                     l12117:	
 19627                           ;lcd.c: 160: case 0:lcd_disp_code_0(code);break;
 19628                           
 19629  2D60  0876               	movf	lcd_disp_code@code,w
 19630  2D61  2D70               	ljmp	_lcd_disp_code_0
 19631  2D62                     l12119:	
 19632                           ;lcd.c: 161: case 1:lcd_disp_code_1(code);break;
 19633                           
 19634  2D62  0876               	movf	lcd_disp_code@code,w
 19635  2D63  2D8D               	ljmp	_lcd_disp_code_1
 19636  2D64                     l12121:	
 19637                           ;lcd.c: 162: case 2:lcd_disp_code_2(code);break;
 19638                           
 19639  2D64  0876               	movf	lcd_disp_code@code,w
 19640  2D65  2DAA               	ljmp	_lcd_disp_code_2
 19641  2D66                     l12123:	
 19642                           ;lcd.c: 163: case 3:lcd_disp_code_3(code);break;
 19643                           
 19644  2D66  0876               	movf	lcd_disp_code@code,w
 19645  2D67  2DC7               	ljmp	_lcd_disp_code_3
 19646  2D68                     l12125:	
 19647                           ;lcd.c: 164: case 4:lcd_disp_code_4(code);break;
 19648                           
 19649  2D68  0876               	movf	lcd_disp_code@code,w
 19650  2D69  2DE4               	ljmp	_lcd_disp_code_4
 19651  2D6A                     l12127:	
 19652                           ;lcd.c: 165: case 5:lcd_disp_code_5(code);break;
 19653                           
 19654  2D6A  0876               	movf	lcd_disp_code@code,w
 19655  2D6B  2E01               	ljmp	_lcd_disp_code_5
 19656  2D6C                     l12129:	
 19657                           ;lcd.c: 166: case 6:lcd_disp_code_6(code);break;
 19658                           
 19659  2D6C  0876               	movf	lcd_disp_code@code,w
 19660  2D6D  2E1E               	ljmp	_lcd_disp_code_6
 19661  2D6E                     l12131:	
 19662                           ;lcd.c: 167: case 7:lcd_disp_code_7(code);break;
 19663                           
 19664  2D6E  0876               	movf	lcd_disp_code@code,w
 19665  2D6F  2E3B               	ljmp	_lcd_disp_code_7
 19666  2D70                     __end_of_lcd_disp_code:	
 19667  2D70                     __ptext54:	
 19668 ;; *************** function _lcd_disp_code_0 *****************
 19669 ;; Defined at:
 19670 ;;		line 61 in file "src/driver/lcd.c"
 19671 ;; Parameters:    Size  Location     Type
 19672 ;;  code            1    wreg     unsigned char 
 19673 ;; Auto vars:     Size  Location     Type
 19674 ;;  code            1    4[COMMON] unsigned char 
 19675 ;; Return value:  Size  Location     Type
 19676 ;;                  1    wreg      void 
 19677 ;; Registers used:
 19678 ;;		wreg, status,2, status,0
 19679 ;; Tracked objects:
 19680 ;;		On entry : 0/0
 19681 ;;		On exit  : 0/0
 19682 ;;		Unchanged: 0/0
 19683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19685 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19686 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19687 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19688 ;;Total ram usage:        2 bytes
 19689 ;; Hardware stack levels used:    1
 19690 ;; Hardware stack levels required when called:    2
 19691 ;; This function calls:
 19692 ;;		Nothing
 19693 ;; This function is called by:
 19694 ;;		_lcd_disp_code
 19695 ;; This function uses a non-reentrant model
 19696 ;;
 19697                           
 19698                           
 19699                           ;psect for function _lcd_disp_code_0
 19700  2D70                     _lcd_disp_code_0:	
 19701                           
 19702                           ;incstack = 0
 19703                           ; Regs used in _lcd_disp_code_0: [wreg+status,2+status,0]
 19704                           ;lcd_disp_code_0@code stored from wreg
 19705  2D70  00F4               	movwf	lcd_disp_code_0@code
 19706                           
 19707                           ;lcd.c: 63: do{ pLCD[12] &= ~(1<<7); if(code&0x20){ pLCD[12] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19708  2D71  307F               	movlw	127
 19709  2D72  00F3               	movwf	??_lcd_disp_code_0
 19710  2D73  0022               	movlb	2	; select bank2
 19711  2D74  05BB               	andwf	(_pLCD^(0+256)+12),f
 19712  2D75  1AF4               	btfsc	lcd_disp_code_0@code,5
 19713  2D76  17BB               	bsf	(_pLCD^(0+256)+12),7
 19714                           
 19715                           ;lcd.c: 64: do{ pLCD[15] &= ~(1<<7); if(code&0x40){ pLCD[15] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19716  2D77  00F3               	movwf	??_lcd_disp_code_0
 19717  2D78  05BE               	andwf	(_pLCD^(0+256)+15),f
 19718  2D79  1B74               	btfsc	lcd_disp_code_0@code,6
 19719  2D7A  17BE               	bsf	(_pLCD^(0+256)+15),7
 19720                           
 19721                           ;lcd.c: 65: do{ pLCD[18] &= ~(1<<7); if(code&0x10){ pLCD[18] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19722  2D7B  05C1               	andwf	(_pLCD^(0+256)+18),f
 19723  2D7C  1A74               	btfsc	lcd_disp_code_0@code,4
 19724  2D7D  17C1               	bsf	(_pLCD^(0+256)+18),7
 19725                           
 19726                           ;lcd.c: 66: do{ pLCD[21] &= ~(1<<7); if(code&0x08){ pLCD[21] |= (1<<7); }}while(0); exte
      +                          rn void lcd_disp_m(uint8_t loc,uint8_t m);;
 19727  2D7E  05C4               	andwf	(_pLCD^(0+256)+21),f
 19728  2D7F  19F4               	btfsc	lcd_disp_code_0@code,3
 19729  2D80  17C4               	bsf	(_pLCD^(0+256)+21),7
 19730                           
 19731                           ;lcd.c: 68: do{ pLCD[0] &= ~(1<<0); if(code&0x01){ pLCD[0] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19732  2D81  30FE               	movlw	254
 19733  2D82  00F3               	movwf	??_lcd_disp_code_0
 19734  2D83  05AF               	andwf	_pLCD^(0+256),f
 19735  2D84  1874               	btfsc	lcd_disp_code_0@code,0
 19736  2D85  142F               	bsf	_pLCD^(0+256),0
 19737                           
 19738                           ;lcd.c: 69: do{ pLCD[3] &= ~(1<<0); if(code&0x02){ pLCD[3] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19739  2D86  05B2               	andwf	(_pLCD^(0+256)+3),f
 19740  2D87  18F4               	btfsc	lcd_disp_code_0@code,1
 19741  2D88  1432               	bsf	(_pLCD^(0+256)+3),0
 19742                           
 19743                           ;lcd.c: 70: do{ pLCD[6] &= ~(1<<0); if(code&0x04){ pLCD[6] |= (1<<0); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19744  2D89  05B5               	andwf	(_pLCD^(0+256)+6),f
 19745  2D8A  1974               	btfsc	lcd_disp_code_0@code,2
 19746  2D8B  1435               	bsf	(_pLCD^(0+256)+6),0
 19747  2D8C  0008               	return
 19748  2D8D                     __end_of_lcd_disp_code_0:	
 19749  2D8D                     __ptext53:	
 19750 ;; *************** function _lcd_disp_code_1 *****************
 19751 ;; Defined at:
 19752 ;;		line 73 in file "src/driver/lcd.c"
 19753 ;; Parameters:    Size  Location     Type
 19754 ;;  code            1    wreg     unsigned char 
 19755 ;; Auto vars:     Size  Location     Type
 19756 ;;  code            1    4[COMMON] unsigned char 
 19757 ;; Return value:  Size  Location     Type
 19758 ;;                  1    wreg      void 
 19759 ;; Registers used:
 19760 ;;		wreg, status,2, status,0
 19761 ;; Tracked objects:
 19762 ;;		On entry : 0/0
 19763 ;;		On exit  : 0/0
 19764 ;;		Unchanged: 0/0
 19765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19767 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19768 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19769 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19770 ;;Total ram usage:        2 bytes
 19771 ;; Hardware stack levels used:    1
 19772 ;; Hardware stack levels required when called:    2
 19773 ;; This function calls:
 19774 ;;		Nothing
 19775 ;; This function is called by:
 19776 ;;		_lcd_disp_code
 19777 ;; This function uses a non-reentrant model
 19778 ;;
 19779                           
 19780                           
 19781                           ;psect for function _lcd_disp_code_1
 19782  2D8D                     _lcd_disp_code_1:	
 19783                           
 19784                           ;incstack = 0
 19785                           ; Regs used in _lcd_disp_code_1: [wreg+status,2+status,0]
 19786                           ;lcd_disp_code_1@code stored from wreg
 19787  2D8D  00F4               	movwf	lcd_disp_code_1@code
 19788                           
 19789                           ;lcd.c: 75: do{ pLCD[0] &= ~(1<<1); if(code&0x20){ pLCD[0] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19790  2D8E  30FD               	movlw	253
 19791  2D8F  00F3               	movwf	??_lcd_disp_code_1
 19792  2D90  0022               	movlb	2	; select bank2
 19793  2D91  05AF               	andwf	_pLCD^(0+256),f
 19794  2D92  1AF4               	btfsc	lcd_disp_code_1@code,5
 19795  2D93  14AF               	bsf	_pLCD^(0+256),1
 19796                           
 19797                           ;lcd.c: 76: do{ pLCD[3] &= ~(1<<1); if(code&0x40){ pLCD[3] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19798  2D94  00F3               	movwf	??_lcd_disp_code_1
 19799  2D95  05B2               	andwf	(_pLCD^(0+256)+3),f
 19800  2D96  1B74               	btfsc	lcd_disp_code_1@code,6
 19801  2D97  14B2               	bsf	(_pLCD^(0+256)+3),1
 19802                           
 19803                           ;lcd.c: 77: do{ pLCD[6] &= ~(1<<1); if(code&0x10){ pLCD[6] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19804  2D98  05B5               	andwf	(_pLCD^(0+256)+6),f
 19805  2D99  1A74               	btfsc	lcd_disp_code_1@code,4
 19806  2D9A  14B5               	bsf	(_pLCD^(0+256)+6),1
 19807                           
 19808                           ;lcd.c: 78: do{ pLCD[9] &= ~(1<<1); if(code&0x08){ pLCD[9] |= (1<<1); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19809  2D9B  05B8               	andwf	(_pLCD^(0+256)+9),f
 19810  2D9C  19F4               	btfsc	lcd_disp_code_1@code,3
 19811  2D9D  14B8               	bsf	(_pLCD^(0+256)+9),1
 19812                           
 19813                           ;lcd.c: 80: do{ pLCD[0] &= ~(1<<2); if(code&0x01){ pLCD[0] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19814  2D9E  30FB               	movlw	251
 19815  2D9F  00F3               	movwf	??_lcd_disp_code_1
 19816  2DA0  05AF               	andwf	_pLCD^(0+256),f
 19817  2DA1  1874               	btfsc	lcd_disp_code_1@code,0
 19818  2DA2  152F               	bsf	_pLCD^(0+256),2
 19819                           
 19820                           ;lcd.c: 81: do{ pLCD[3] &= ~(1<<2); if(code&0x02){ pLCD[3] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19821  2DA3  05B2               	andwf	(_pLCD^(0+256)+3),f
 19822  2DA4  18F4               	btfsc	lcd_disp_code_1@code,1
 19823  2DA5  1532               	bsf	(_pLCD^(0+256)+3),2
 19824                           
 19825                           ;lcd.c: 82: do{ pLCD[6] &= ~(1<<2); if(code&0x04){ pLCD[6] |= (1<<2); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19826  2DA6  05B5               	andwf	(_pLCD^(0+256)+6),f
 19827  2DA7  1974               	btfsc	lcd_disp_code_1@code,2
 19828  2DA8  1535               	bsf	(_pLCD^(0+256)+6),2
 19829  2DA9  0008               	return
 19830  2DAA                     __end_of_lcd_disp_code_1:	
 19831  2DAA                     __ptext52:	
 19832 ;; *************** function _lcd_disp_code_2 *****************
 19833 ;; Defined at:
 19834 ;;		line 85 in file "src/driver/lcd.c"
 19835 ;; Parameters:    Size  Location     Type
 19836 ;;  code            1    wreg     unsigned char 
 19837 ;; Auto vars:     Size  Location     Type
 19838 ;;  code            1    4[COMMON] unsigned char 
 19839 ;; Return value:  Size  Location     Type
 19840 ;;                  1    wreg      void 
 19841 ;; Registers used:
 19842 ;;		wreg, status,2, status,0
 19843 ;; Tracked objects:
 19844 ;;		On entry : 0/0
 19845 ;;		On exit  : 0/0
 19846 ;;		Unchanged: 0/0
 19847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19849 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19850 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19851 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19852 ;;Total ram usage:        2 bytes
 19853 ;; Hardware stack levels used:    1
 19854 ;; Hardware stack levels required when called:    2
 19855 ;; This function calls:
 19856 ;;		Nothing
 19857 ;; This function is called by:
 19858 ;;		_lcd_disp_code
 19859 ;; This function uses a non-reentrant model
 19860 ;;
 19861                           
 19862                           
 19863                           ;psect for function _lcd_disp_code_2
 19864  2DAA                     _lcd_disp_code_2:	
 19865                           
 19866                           ;incstack = 0
 19867                           ; Regs used in _lcd_disp_code_2: [wreg+status,2+status,0]
 19868                           ;lcd_disp_code_2@code stored from wreg
 19869  2DAA  00F4               	movwf	lcd_disp_code_2@code
 19870                           
 19871                           ;lcd.c: 87: do{ pLCD[0] &= ~(1<<3); if(code&0x20){ pLCD[0] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19872  2DAB  30F7               	movlw	247
 19873  2DAC  00F3               	movwf	??_lcd_disp_code_2
 19874  2DAD  0022               	movlb	2	; select bank2
 19875  2DAE  05AF               	andwf	_pLCD^(0+256),f
 19876  2DAF  1AF4               	btfsc	lcd_disp_code_2@code,5
 19877  2DB0  15AF               	bsf	_pLCD^(0+256),3
 19878                           
 19879                           ;lcd.c: 88: do{ pLCD[3] &= ~(1<<3); if(code&0x40){ pLCD[3] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19880  2DB1  00F3               	movwf	??_lcd_disp_code_2
 19881  2DB2  05B2               	andwf	(_pLCD^(0+256)+3),f
 19882  2DB3  1B74               	btfsc	lcd_disp_code_2@code,6
 19883  2DB4  15B2               	bsf	(_pLCD^(0+256)+3),3
 19884                           
 19885                           ;lcd.c: 89: do{ pLCD[6] &= ~(1<<3); if(code&0x10){ pLCD[6] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19886  2DB5  05B5               	andwf	(_pLCD^(0+256)+6),f
 19887  2DB6  1A74               	btfsc	lcd_disp_code_2@code,4
 19888  2DB7  15B5               	bsf	(_pLCD^(0+256)+6),3
 19889                           
 19890                           ;lcd.c: 90: do{ pLCD[9] &= ~(1<<3); if(code&0x08){ pLCD[9] |= (1<<3); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19891  2DB8  05B8               	andwf	(_pLCD^(0+256)+9),f
 19892  2DB9  19F4               	btfsc	lcd_disp_code_2@code,3
 19893  2DBA  15B8               	bsf	(_pLCD^(0+256)+9),3
 19894                           
 19895                           ;lcd.c: 92: do{ pLCD[0] &= ~(1<<4); if(code&0x01){ pLCD[0] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19896  2DBB  30EF               	movlw	239
 19897  2DBC  00F3               	movwf	??_lcd_disp_code_2
 19898  2DBD  05AF               	andwf	_pLCD^(0+256),f
 19899  2DBE  1874               	btfsc	lcd_disp_code_2@code,0
 19900  2DBF  162F               	bsf	_pLCD^(0+256),4
 19901                           
 19902                           ;lcd.c: 93: do{ pLCD[3] &= ~(1<<4); if(code&0x02){ pLCD[3] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19903  2DC0  05B2               	andwf	(_pLCD^(0+256)+3),f
 19904  2DC1  18F4               	btfsc	lcd_disp_code_2@code,1
 19905  2DC2  1632               	bsf	(_pLCD^(0+256)+3),4
 19906                           
 19907                           ;lcd.c: 94: do{ pLCD[6] &= ~(1<<4); if(code&0x04){ pLCD[6] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19908  2DC3  05B5               	andwf	(_pLCD^(0+256)+6),f
 19909  2DC4  1974               	btfsc	lcd_disp_code_2@code,2
 19910  2DC5  1635               	bsf	(_pLCD^(0+256)+6),4
 19911  2DC6  0008               	return
 19912  2DC7                     __end_of_lcd_disp_code_2:	
 19913  2DC7                     __ptext51:	
 19914 ;; *************** function _lcd_disp_code_3 *****************
 19915 ;; Defined at:
 19916 ;;		line 97 in file "src/driver/lcd.c"
 19917 ;; Parameters:    Size  Location     Type
 19918 ;;  code            1    wreg     unsigned char 
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;  code            1    4[COMMON] unsigned char 
 19921 ;; Return value:  Size  Location     Type
 19922 ;;                  1    wreg      void 
 19923 ;; Registers used:
 19924 ;;		wreg, status,2, status,0
 19925 ;; Tracked objects:
 19926 ;;		On entry : 0/0
 19927 ;;		On exit  : 0/0
 19928 ;;		Unchanged: 0/0
 19929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 19930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19932 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19933 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 19934 ;;Total ram usage:        2 bytes
 19935 ;; Hardware stack levels used:    1
 19936 ;; Hardware stack levels required when called:    2
 19937 ;; This function calls:
 19938 ;;		Nothing
 19939 ;; This function is called by:
 19940 ;;		_lcd_disp_code
 19941 ;; This function uses a non-reentrant model
 19942 ;;
 19943                           
 19944                           
 19945                           ;psect for function _lcd_disp_code_3
 19946  2DC7                     _lcd_disp_code_3:	
 19947                           
 19948                           ;incstack = 0
 19949                           ; Regs used in _lcd_disp_code_3: [wreg+status,2+status,0]
 19950                           ;lcd_disp_code_3@code stored from wreg
 19951  2DC7  00F4               	movwf	lcd_disp_code_3@code
 19952                           
 19953                           ;lcd.c: 99: do{ pLCD[2] &= ~(1<<4); if(code&0x20){ pLCD[2] |= (1<<4); }}while(0); extern
      +                           void lcd_disp_m(uint8_t loc,uint8_t m);;
 19954  2DC8  30EF               	movlw	239
 19955  2DC9  00F3               	movwf	??_lcd_disp_code_3
 19956  2DCA  0022               	movlb	2	; select bank2
 19957  2DCB  05B1               	andwf	(_pLCD^(0+256)+2),f
 19958  2DCC  1AF4               	btfsc	lcd_disp_code_3@code,5
 19959  2DCD  1631               	bsf	(_pLCD^(0+256)+2),4
 19960                           
 19961                           ;lcd.c: 100: do{ pLCD[5] &= ~(1<<4); if(code&0x40){ pLCD[5] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19962  2DCE  00F3               	movwf	??_lcd_disp_code_3
 19963  2DCF  05B4               	andwf	(_pLCD^(0+256)+5),f
 19964  2DD0  1B74               	btfsc	lcd_disp_code_3@code,6
 19965  2DD1  1634               	bsf	(_pLCD^(0+256)+5),4
 19966                           
 19967                           ;lcd.c: 101: do{ pLCD[8] &= ~(1<<4); if(code&0x10){ pLCD[8] |= (1<<4); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19968  2DD2  05B7               	andwf	(_pLCD^(0+256)+8),f
 19969  2DD3  1A74               	btfsc	lcd_disp_code_3@code,4
 19970  2DD4  1637               	bsf	(_pLCD^(0+256)+8),4
 19971                           
 19972                           ;lcd.c: 102: do{ pLCD[11] &= ~(1<<4); if(code&0x08){ pLCD[11] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 19973  2DD5  05BA               	andwf	(_pLCD^(0+256)+11),f
 19974  2DD6  19F4               	btfsc	lcd_disp_code_3@code,3
 19975  2DD7  163A               	bsf	(_pLCD^(0+256)+11),4
 19976                           
 19977                           ;lcd.c: 104: do{ pLCD[2] &= ~(1<<5); if(code&0x01){ pLCD[2] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19978  2DD8  30DF               	movlw	223
 19979  2DD9  00F3               	movwf	??_lcd_disp_code_3
 19980  2DDA  05B1               	andwf	(_pLCD^(0+256)+2),f
 19981  2DDB  1874               	btfsc	lcd_disp_code_3@code,0
 19982  2DDC  16B1               	bsf	(_pLCD^(0+256)+2),5
 19983                           
 19984                           ;lcd.c: 105: do{ pLCD[5] &= ~(1<<5); if(code&0x02){ pLCD[5] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19985  2DDD  05B4               	andwf	(_pLCD^(0+256)+5),f
 19986  2DDE  18F4               	btfsc	lcd_disp_code_3@code,1
 19987  2DDF  16B4               	bsf	(_pLCD^(0+256)+5),5
 19988                           
 19989                           ;lcd.c: 106: do{ pLCD[8] &= ~(1<<5); if(code&0x04){ pLCD[8] |= (1<<5); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 19990  2DE0  05B7               	andwf	(_pLCD^(0+256)+8),f
 19991  2DE1  1974               	btfsc	lcd_disp_code_3@code,2
 19992  2DE2  16B7               	bsf	(_pLCD^(0+256)+8),5
 19993  2DE3  0008               	return
 19994  2DE4                     __end_of_lcd_disp_code_3:	
 19995  2DE4                     __ptext50:	
 19996 ;; *************** function _lcd_disp_code_4 *****************
 19997 ;; Defined at:
 19998 ;;		line 109 in file "src/driver/lcd.c"
 19999 ;; Parameters:    Size  Location     Type
 20000 ;;  code            1    wreg     unsigned char 
 20001 ;; Auto vars:     Size  Location     Type
 20002 ;;  code            1    4[COMMON] unsigned char 
 20003 ;; Return value:  Size  Location     Type
 20004 ;;                  1    wreg      void 
 20005 ;; Registers used:
 20006 ;;		wreg, status,2, status,0
 20007 ;; Tracked objects:
 20008 ;;		On entry : 0/0
 20009 ;;		On exit  : 0/0
 20010 ;;		Unchanged: 0/0
 20011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20013 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20016 ;;Total ram usage:        2 bytes
 20017 ;; Hardware stack levels used:    1
 20018 ;; Hardware stack levels required when called:    2
 20019 ;; This function calls:
 20020 ;;		Nothing
 20021 ;; This function is called by:
 20022 ;;		_lcd_disp_code
 20023 ;; This function uses a non-reentrant model
 20024 ;;
 20025                           
 20026                           
 20027                           ;psect for function _lcd_disp_code_4
 20028  2DE4                     _lcd_disp_code_4:	
 20029                           
 20030                           ;incstack = 0
 20031                           ; Regs used in _lcd_disp_code_4: [wreg+status,2+status,0]
 20032                           ;lcd_disp_code_4@code stored from wreg
 20033  2DE4  00F4               	movwf	lcd_disp_code_4@code
 20034                           
 20035                           ;lcd.c: 111: do{ pLCD[14] &= ~(1<<3); if(code&0x20){ pLCD[14] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20036  2DE5  30F7               	movlw	247
 20037  2DE6  00F3               	movwf	??_lcd_disp_code_4
 20038  2DE7  0022               	movlb	2	; select bank2
 20039  2DE8  05BD               	andwf	(_pLCD^(0+256)+14),f
 20040  2DE9  1AF4               	btfsc	lcd_disp_code_4@code,5
 20041  2DEA  15BD               	bsf	(_pLCD^(0+256)+14),3
 20042                           
 20043                           ;lcd.c: 112: do{ pLCD[17] &= ~(1<<3); if(code&0x40){ pLCD[17] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20044  2DEB  00F3               	movwf	??_lcd_disp_code_4
 20045  2DEC  05C0               	andwf	(_pLCD^(0+256)+17),f
 20046  2DED  1B74               	btfsc	lcd_disp_code_4@code,6
 20047  2DEE  15C0               	bsf	(_pLCD^(0+256)+17),3
 20048                           
 20049                           ;lcd.c: 113: do{ pLCD[20] &= ~(1<<3); if(code&0x10){ pLCD[20] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20050  2DEF  05C3               	andwf	(_pLCD^(0+256)+20),f
 20051  2DF0  1A74               	btfsc	lcd_disp_code_4@code,4
 20052  2DF1  15C3               	bsf	(_pLCD^(0+256)+20),3
 20053                           
 20054                           ;lcd.c: 114: do{ pLCD[23] &= ~(1<<3); if(code&0x08){ pLCD[23] |= (1<<3); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20055  2DF2  05C6               	andwf	(_pLCD^(0+256)+23),f
 20056  2DF3  19F4               	btfsc	lcd_disp_code_4@code,3
 20057  2DF4  15C6               	bsf	(_pLCD^(0+256)+23),3
 20058                           
 20059                           ;lcd.c: 116: do{ pLCD[14] &= ~(1<<4); if(code&0x01){ pLCD[14] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20060  2DF5  30EF               	movlw	239
 20061  2DF6  00F3               	movwf	??_lcd_disp_code_4
 20062  2DF7  05BD               	andwf	(_pLCD^(0+256)+14),f
 20063  2DF8  1874               	btfsc	lcd_disp_code_4@code,0
 20064  2DF9  163D               	bsf	(_pLCD^(0+256)+14),4
 20065                           
 20066                           ;lcd.c: 117: do{ pLCD[17] &= ~(1<<4); if(code&0x02){ pLCD[17] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20067  2DFA  05C0               	andwf	(_pLCD^(0+256)+17),f
 20068  2DFB  18F4               	btfsc	lcd_disp_code_4@code,1
 20069  2DFC  1640               	bsf	(_pLCD^(0+256)+17),4
 20070                           
 20071                           ;lcd.c: 118: do{ pLCD[20] &= ~(1<<4); if(code&0x04){ pLCD[20] |= (1<<4); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20072  2DFD  05C3               	andwf	(_pLCD^(0+256)+20),f
 20073  2DFE  1974               	btfsc	lcd_disp_code_4@code,2
 20074  2DFF  1643               	bsf	(_pLCD^(0+256)+20),4
 20075  2E00  0008               	return
 20076  2E01                     __end_of_lcd_disp_code_4:	
 20077  2E01                     __ptext49:	
 20078 ;; *************** function _lcd_disp_code_5 *****************
 20079 ;; Defined at:
 20080 ;;		line 121 in file "src/driver/lcd.c"
 20081 ;; Parameters:    Size  Location     Type
 20082 ;;  code            1    wreg     unsigned char 
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;  code            1    4[COMMON] unsigned char 
 20085 ;; Return value:  Size  Location     Type
 20086 ;;                  1    wreg      void 
 20087 ;; Registers used:
 20088 ;;		wreg, status,2, status,0
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20095 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20098 ;;Total ram usage:        2 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; Hardware stack levels required when called:    2
 20101 ;; This function calls:
 20102 ;;		Nothing
 20103 ;; This function is called by:
 20104 ;;		_lcd_disp_code
 20105 ;; This function uses a non-reentrant model
 20106 ;;
 20107                           
 20108                           
 20109                           ;psect for function _lcd_disp_code_5
 20110  2E01                     _lcd_disp_code_5:	
 20111                           
 20112                           ;incstack = 0
 20113                           ; Regs used in _lcd_disp_code_5: [wreg+status,2+status,0]
 20114                           ;lcd_disp_code_5@code stored from wreg
 20115  2E01  00F4               	movwf	lcd_disp_code_5@code
 20116                           
 20117                           ;lcd.c: 123: do{ pLCD[14] &= ~(1<<5); if(code&0x20){ pLCD[14] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20118  2E02  30DF               	movlw	223
 20119  2E03  00F3               	movwf	??_lcd_disp_code_5
 20120  2E04  0022               	movlb	2	; select bank2
 20121  2E05  05BD               	andwf	(_pLCD^(0+256)+14),f
 20122  2E06  1AF4               	btfsc	lcd_disp_code_5@code,5
 20123  2E07  16BD               	bsf	(_pLCD^(0+256)+14),5
 20124                           
 20125                           ;lcd.c: 124: do{ pLCD[17] &= ~(1<<5); if(code&0x40){ pLCD[17] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20126  2E08  00F3               	movwf	??_lcd_disp_code_5
 20127  2E09  05C0               	andwf	(_pLCD^(0+256)+17),f
 20128  2E0A  1B74               	btfsc	lcd_disp_code_5@code,6
 20129  2E0B  16C0               	bsf	(_pLCD^(0+256)+17),5
 20130                           
 20131                           ;lcd.c: 125: do{ pLCD[20] &= ~(1<<5); if(code&0x10){ pLCD[20] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20132  2E0C  05C3               	andwf	(_pLCD^(0+256)+20),f
 20133  2E0D  1A74               	btfsc	lcd_disp_code_5@code,4
 20134  2E0E  16C3               	bsf	(_pLCD^(0+256)+20),5
 20135                           
 20136                           ;lcd.c: 126: do{ pLCD[23] &= ~(1<<5); if(code&0x08){ pLCD[23] |= (1<<5); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20137  2E0F  05C6               	andwf	(_pLCD^(0+256)+23),f
 20138  2E10  19F4               	btfsc	lcd_disp_code_5@code,3
 20139  2E11  16C6               	bsf	(_pLCD^(0+256)+23),5
 20140                           
 20141                           ;lcd.c: 128: do{ pLCD[12] &= ~(1<<2); if(code&0x01){ pLCD[12] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20142  2E12  30FB               	movlw	251
 20143  2E13  00F3               	movwf	??_lcd_disp_code_5
 20144  2E14  05BB               	andwf	(_pLCD^(0+256)+12),f
 20145  2E15  1874               	btfsc	lcd_disp_code_5@code,0
 20146  2E16  153B               	bsf	(_pLCD^(0+256)+12),2
 20147                           
 20148                           ;lcd.c: 129: do{ pLCD[15] &= ~(1<<2); if(code&0x02){ pLCD[15] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20149  2E17  05BE               	andwf	(_pLCD^(0+256)+15),f
 20150  2E18  18F4               	btfsc	lcd_disp_code_5@code,1
 20151  2E19  153E               	bsf	(_pLCD^(0+256)+15),2
 20152                           
 20153                           ;lcd.c: 130: do{ pLCD[18] &= ~(1<<2); if(code&0x04){ pLCD[18] |= (1<<2); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20154  2E1A  05C1               	andwf	(_pLCD^(0+256)+18),f
 20155  2E1B  1974               	btfsc	lcd_disp_code_5@code,2
 20156  2E1C  1541               	bsf	(_pLCD^(0+256)+18),2
 20157  2E1D  0008               	return
 20158  2E1E                     __end_of_lcd_disp_code_5:	
 20159  2E1E                     __ptext48:	
 20160 ;; *************** function _lcd_disp_code_6 *****************
 20161 ;; Defined at:
 20162 ;;		line 133 in file "src/driver/lcd.c"
 20163 ;; Parameters:    Size  Location     Type
 20164 ;;  code            1    wreg     unsigned char 
 20165 ;; Auto vars:     Size  Location     Type
 20166 ;;  code            1    4[COMMON] unsigned char 
 20167 ;; Return value:  Size  Location     Type
 20168 ;;                  1    wreg      void 
 20169 ;; Registers used:
 20170 ;;		wreg, status,2, status,0
 20171 ;; Tracked objects:
 20172 ;;		On entry : 0/0
 20173 ;;		On exit  : 0/0
 20174 ;;		Unchanged: 0/0
 20175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20176 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20177 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20178 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20179 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20180 ;;Total ram usage:        2 bytes
 20181 ;; Hardware stack levels used:    1
 20182 ;; Hardware stack levels required when called:    2
 20183 ;; This function calls:
 20184 ;;		Nothing
 20185 ;; This function is called by:
 20186 ;;		_lcd_disp_code
 20187 ;; This function uses a non-reentrant model
 20188 ;;
 20189                           
 20190                           
 20191                           ;psect for function _lcd_disp_code_6
 20192  2E1E                     _lcd_disp_code_6:	
 20193                           
 20194                           ;incstack = 0
 20195                           ; Regs used in _lcd_disp_code_6: [wreg+status,2+status,0]
 20196                           ;lcd_disp_code_6@code stored from wreg
 20197  2E1E  00F4               	movwf	lcd_disp_code_6@code
 20198                           
 20199                           ;lcd.c: 135: do{ pLCD[12] &= ~(1<<1); if(code&0x20){ pLCD[12] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20200  2E1F  30FD               	movlw	253
 20201  2E20  00F3               	movwf	??_lcd_disp_code_6
 20202  2E21  0022               	movlb	2	; select bank2
 20203  2E22  05BB               	andwf	(_pLCD^(0+256)+12),f
 20204  2E23  1AF4               	btfsc	lcd_disp_code_6@code,5
 20205  2E24  14BB               	bsf	(_pLCD^(0+256)+12),1
 20206                           
 20207                           ;lcd.c: 136: do{ pLCD[15] &= ~(1<<1); if(code&0x40){ pLCD[15] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20208  2E25  00F3               	movwf	??_lcd_disp_code_6
 20209  2E26  05BE               	andwf	(_pLCD^(0+256)+15),f
 20210  2E27  1B74               	btfsc	lcd_disp_code_6@code,6
 20211  2E28  14BE               	bsf	(_pLCD^(0+256)+15),1
 20212                           
 20213                           ;lcd.c: 137: do{ pLCD[18] &= ~(1<<1); if(code&0x10){ pLCD[18] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20214  2E29  05C1               	andwf	(_pLCD^(0+256)+18),f
 20215  2E2A  1A74               	btfsc	lcd_disp_code_6@code,4
 20216  2E2B  14C1               	bsf	(_pLCD^(0+256)+18),1
 20217                           
 20218                           ;lcd.c: 138: do{ pLCD[21] &= ~(1<<1); if(code&0x08){ pLCD[21] |= (1<<1); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20219  2E2C  05C4               	andwf	(_pLCD^(0+256)+21),f
 20220  2E2D  19F4               	btfsc	lcd_disp_code_6@code,3
 20221  2E2E  14C4               	bsf	(_pLCD^(0+256)+21),1
 20222                           
 20223                           ;lcd.c: 140: do{ pLCD[12] &= ~(1<<0); if(code&0x01){ pLCD[12] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20224  2E2F  30FE               	movlw	254
 20225  2E30  00F3               	movwf	??_lcd_disp_code_6
 20226  2E31  05BB               	andwf	(_pLCD^(0+256)+12),f
 20227  2E32  1874               	btfsc	lcd_disp_code_6@code,0
 20228  2E33  143B               	bsf	(_pLCD^(0+256)+12),0
 20229                           
 20230                           ;lcd.c: 141: do{ pLCD[15] &= ~(1<<0); if(code&0x02){ pLCD[15] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20231  2E34  05BE               	andwf	(_pLCD^(0+256)+15),f
 20232  2E35  18F4               	btfsc	lcd_disp_code_6@code,1
 20233  2E36  143E               	bsf	(_pLCD^(0+256)+15),0
 20234                           
 20235                           ;lcd.c: 142: do{ pLCD[18] &= ~(1<<0); if(code&0x04){ pLCD[18] |= (1<<0); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20236  2E37  05C1               	andwf	(_pLCD^(0+256)+18),f
 20237  2E38  1974               	btfsc	lcd_disp_code_6@code,2
 20238  2E39  1441               	bsf	(_pLCD^(0+256)+18),0
 20239  2E3A  0008               	return
 20240  2E3B                     __end_of_lcd_disp_code_6:	
 20241  2E3B                     __ptext47:	
 20242 ;; *************** function _lcd_disp_code_7 *****************
 20243 ;; Defined at:
 20244 ;;		line 145 in file "src/driver/lcd.c"
 20245 ;; Parameters:    Size  Location     Type
 20246 ;;  code            1    wreg     unsigned char 
 20247 ;; Auto vars:     Size  Location     Type
 20248 ;;  code            1    4[COMMON] unsigned char 
 20249 ;; Return value:  Size  Location     Type
 20250 ;;                  1    wreg      void 
 20251 ;; Registers used:
 20252 ;;		wreg, status,2, status,0
 20253 ;; Tracked objects:
 20254 ;;		On entry : 0/0
 20255 ;;		On exit  : 0/0
 20256 ;;		Unchanged: 0/0
 20257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20259 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20260 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20261 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20262 ;;Total ram usage:        2 bytes
 20263 ;; Hardware stack levels used:    1
 20264 ;; Hardware stack levels required when called:    2
 20265 ;; This function calls:
 20266 ;;		Nothing
 20267 ;; This function is called by:
 20268 ;;		_lcd_disp_code
 20269 ;; This function uses a non-reentrant model
 20270 ;;
 20271                           
 20272                           
 20273                           ;psect for function _lcd_disp_code_7
 20274  2E3B                     _lcd_disp_code_7:	
 20275                           
 20276                           ;incstack = 0
 20277                           ; Regs used in _lcd_disp_code_7: [wreg+status,2+status,0]
 20278                           ;lcd_disp_code_7@code stored from wreg
 20279  2E3B  00F4               	movwf	lcd_disp_code_7@code
 20280                           
 20281                           ;lcd.c: 147: do{ pLCD[2] &= ~(1<<7); if(code&0x20){ pLCD[2] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20282  2E3C  307F               	movlw	127
 20283  2E3D  00F3               	movwf	??_lcd_disp_code_7
 20284  2E3E  0022               	movlb	2	; select bank2
 20285  2E3F  05B1               	andwf	(_pLCD^(0+256)+2),f
 20286  2E40  1AF4               	btfsc	lcd_disp_code_7@code,5
 20287  2E41  17B1               	bsf	(_pLCD^(0+256)+2),7
 20288                           
 20289                           ;lcd.c: 148: do{ pLCD[5] &= ~(1<<7); if(code&0x40){ pLCD[5] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20290  2E42  00F3               	movwf	??_lcd_disp_code_7
 20291  2E43  05B4               	andwf	(_pLCD^(0+256)+5),f
 20292  2E44  1B74               	btfsc	lcd_disp_code_7@code,6
 20293  2E45  17B4               	bsf	(_pLCD^(0+256)+5),7
 20294                           
 20295                           ;lcd.c: 149: do{ pLCD[8] &= ~(1<<7); if(code&0x10){ pLCD[8] |= (1<<7); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20296  2E46  05B7               	andwf	(_pLCD^(0+256)+8),f
 20297  2E47  1A74               	btfsc	lcd_disp_code_7@code,4
 20298  2E48  17B7               	bsf	(_pLCD^(0+256)+8),7
 20299                           
 20300                           ;lcd.c: 150: do{ pLCD[11] &= ~(1<<7); if(code&0x08){ pLCD[11] |= (1<<7); }}while(0); ext
      +                          ern void lcd_disp_m(uint8_t loc,uint8_t m);;
 20301  2E49  05BA               	andwf	(_pLCD^(0+256)+11),f
 20302  2E4A  19F4               	btfsc	lcd_disp_code_7@code,3
 20303  2E4B  17BA               	bsf	(_pLCD^(0+256)+11),7
 20304                           
 20305                           ;lcd.c: 152: do{ pLCD[2] &= ~(1<<6); if(code&0x01){ pLCD[2] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20306  2E4C  30BF               	movlw	191
 20307  2E4D  00F3               	movwf	??_lcd_disp_code_7
 20308  2E4E  05B1               	andwf	(_pLCD^(0+256)+2),f
 20309  2E4F  1874               	btfsc	lcd_disp_code_7@code,0
 20310  2E50  1731               	bsf	(_pLCD^(0+256)+2),6
 20311                           
 20312                           ;lcd.c: 153: do{ pLCD[5] &= ~(1<<6); if(code&0x02){ pLCD[5] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20313  2E51  05B4               	andwf	(_pLCD^(0+256)+5),f
 20314  2E52  18F4               	btfsc	lcd_disp_code_7@code,1
 20315  2E53  1734               	bsf	(_pLCD^(0+256)+5),6
 20316                           
 20317                           ;lcd.c: 154: do{ pLCD[8] &= ~(1<<6); if(code&0x04){ pLCD[8] |= (1<<6); }}while(0); exter
      +                          n void lcd_disp_m(uint8_t loc,uint8_t m);;
 20318  2E54  05B7               	andwf	(_pLCD^(0+256)+8),f
 20319  2E55  1974               	btfsc	lcd_disp_code_7@code,2
 20320  2E56  1737               	bsf	(_pLCD^(0+256)+8),6
 20321  2E57  0008               	return
 20322  2E58                     __end_of_lcd_disp_code_7:	
 20323                           
 20324                           	psect	swtext1
 20325  3000                     __pswtext1:	
 20326  3000                     S15567:	
 20327  3000  31AD  2D60         	ljmp	l12117
 20328  3002  31AD  2D62         	ljmp	l12119
 20329  3004  31AD  2D64         	ljmp	l12121
 20330  3006  31AD  2D66         	ljmp	l12123
 20331  3008  31AD  2D68         	ljmp	l12125
 20332  300A  31AD  2D6A         	ljmp	l12127
 20333  300C  31AD  2D6C         	ljmp	l12129
 20334  300E  31AD  2D6E         	ljmp	l12131
 20335                           
 20336                           	psect	swtext2
 20337  3010                     __pswtext2:	
 20338  3010                     S15569:	
 20339  3010  31A6  2E87         	ljmp	l1288
 20340  3012  31A6  2E88         	ljmp	l12321
 20341  3014  31A6  2E90         	ljmp	l12323
 20342  3016  31A6  2E99         	ljmp	l12325
 20343  3018  31A6  2EA2         	ljmp	l12327
 20344  301A  31A6  2EAB         	ljmp	l12329
 20345  301C  31A6  2EB4         	ljmp	l12331
 20346  301E  31A6  2EBD         	ljmp	l12333
 20347                           
 20348                           	psect	text65
 20349  07D0                     __ptext65:	
 20350 ;; *************** function _create_card_key_b *****************
 20351 ;; Defined at:
 20352 ;;		line 32 in file "src/app/rfid_demo.c"
 20353 ;; Parameters:    Size  Location     Type
 20354 ;;  keyb            1    wreg     PTR unsigned char 
 20355 ;;		 -> userKeyB(6), 
 20356 ;;  uid             1    3[COMMON] PTR unsigned char 
 20357 ;;		 -> cardUidBlockBuf(18), 
 20358 ;;  cckey           2    4[COMMON] PTR unsigned char 
 20359 ;;		 -> mainSystemData.cardKeyCreateKey(6), mainSystemData(72), 
 20360 ;; Auto vars:     Size  Location     Type
 20361 ;;  keyb            1    0[BANK0 ] PTR unsigned char 
 20362 ;;		 -> userKeyB(6), 
 20363 ;;  i               1    1[BANK0 ] unsigned char 
 20364 ;; Return value:  Size  Location     Type
 20365 ;;                  1    wreg      void 
 20366 ;; Registers used:
 20367 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 20368 ;; Tracked objects:
 20369 ;;		On entry : 0/0
 20370 ;;		On exit  : 0/0
 20371 ;;		Unchanged: 0/0
 20372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20373 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20375 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20376 ;;      Totals:         5       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20377 ;;Total ram usage:        7 bytes
 20378 ;; Hardware stack levels used:    1
 20379 ;; Hardware stack levels required when called:    2
 20380 ;; This function calls:
 20381 ;;		Nothing
 20382 ;; This function is called by:
 20383 ;;		_rfid_comm_process_read_header
 20384 ;; This function uses a non-reentrant model
 20385 ;;
 20386                           
 20387                           
 20388                           ;psect for function _create_card_key_b
 20389  07D0                     _create_card_key_b:	
 20390                           
 20391                           ;incstack = 0
 20392                           ; Regs used in _create_card_key_b: [wreg-fsr1h+status,2+status,0+pclath]
 20393                           ;create_card_key_b@keyb stored from wreg
 20394  07D0  0020               	movlb	0	; select bank0
 20395  07D1  00A0               	movwf	create_card_key_b@keyb
 20396                           
 20397                           ;rfid_demo.c: 33: uint8_t i;
 20398                           ;rfid_demo.c: 34: for(i=0;i<6;i++){
 20399  07D2  01A1               	clrf	create_card_key_b@i
 20400  07D3                     L6:	
 20401  07D3  3006               	movlw	6
 20402  07D4  0221               	subwf	create_card_key_b@i,w
 20403  07D5  1803               	btfsc	3,0
 20404  07D6  0008               	return
 20405                           
 20406                           ;rfid_demo.c: 35: *keyb=*uid ^ *cckey;
 20407  07D7  0874               	movf	create_card_key_b@cckey,w
 20408  07D8  0084               	movwf	4
 20409  07D9  0875               	movf	create_card_key_b@cckey+1,w
 20410  07DA  0085               	movwf	5
 20411  07DB  0800               	movf	0,w	;code access
 20412  07DC  00F6               	movwf	??_create_card_key_b
 20413  07DD  0873               	movf	create_card_key_b@uid,w
 20414  07DE  0086               	movwf	6
 20415  07DF  3004               	movlw	4	; select bank8/9
 20416  07E0  0087               	movwf	7
 20417  07E1  0801               	movf	1,w
 20418  07E2  0676               	xorwf	??_create_card_key_b,w
 20419  07E3  00F7               	movwf	??_create_card_key_b+1
 20420  07E4  0820               	movf	create_card_key_b@keyb,w
 20421  07E5  0086               	movwf	6
 20422  07E6  3001               	movlw	1	; select bank2/3
 20423  07E7  0087               	movwf	7
 20424  07E8  0877               	movf	??_create_card_key_b+1,w
 20425  07E9  0081               	movwf	1
 20426                           
 20427                           ;rfid_demo.c: 36: keyb++;
 20428  07EA  3001               	movlw	1
 20429  07EB  00F6               	movwf	??_create_card_key_b
 20430  07EC  07A0               	addwf	create_card_key_b@keyb,f
 20431                           
 20432                           ;rfid_demo.c: 37: uid++;
 20433  07ED  07F3               	addwf	create_card_key_b@uid,f
 20434                           
 20435                           ;rfid_demo.c: 38: cckey++;
 20436  07EE  07F4               	addwf	create_card_key_b@cckey,f
 20437  07EF  3000               	movlw	0
 20438  07F0  3DF5               	addwfc	create_card_key_b@cckey+1,f
 20439  07F1  3001               	movlw	1
 20440  07F2  00F6               	movwf	??_create_card_key_b
 20441  07F3  07A1               	addwf	create_card_key_b@i,f
 20442  07F4  2FD3               	goto	L6
 20443  07F5                     __end_of_create_card_key_b:	
 20444                           
 20445                           	psect	text76
 20446  1808                     __ptext76:	
 20447 ;; *************** function _pcd_comm_with_picc *****************
 20448 ;; Defined at:
 20449 ;;		line 35 in file "src/nfc/pal/mfrc522_picc.c"
 20450 ;; Parameters:    Size  Location     Type
 20451 ;;  cmd             1    wreg     unsigned char 
 20452 ;;  waitIRQ         1   17[BANK0 ] unsigned char 
 20453 ;;  sbuf            2   18[BANK0 ] PTR unsigned char 
 20454 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 20455 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), 
 20456 ;;		 -> cardUidBlockBuf(18), 
 20457 ;;  slen            1   20[BANK0 ] unsigned char 
 20458 ;;  rbuf            2   21[BANK0 ] PTR unsigned char 
 20459 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 20460 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 20461 ;;  rlen            1   23[BANK0 ] PTR unsigned char 
 20462 ;;		 -> pcd_mifare_transceive@cmdBufferSize(1), picc_select@responseLength(1), mfapi_is_new_card_present@bufferSize(1), 
      +rdLen(1), 
 20463 ;;		 -> __t8(1), NULL(0), 
 20464 ;;  validBits       1   24[BANK0 ] PTR unsigned char 
 20465 ;;		 -> pcd_mifare_transceive@validBits(1), picc_select@txLastBits(1), picc_req_a_or_wakeup_a@validBits(1), NULL(0), 
 20466 ;;  rxAlign         1   25[BANK0 ] unsigned char 
 20467 ;;  checkCRC        1   26[BANK0 ] unsigned char 
 20468 ;; Auto vars:     Size  Location     Type
 20469 ;;  cmd             1   33[BANK0 ] unsigned char 
 20470 ;;  controlBuffe    2   34[BANK0 ] unsigned char [2]
 20471 ;;  status          1   37[BANK0 ] enum E5268
 20472 ;;  i               2   38[BANK0 ] unsigned int 
 20473 ;;  tmp8            1   41[BANK0 ] unsigned char 
 20474 ;;  _validBits      1   40[BANK0 ] unsigned char 
 20475 ;;  errorRegValu    1   36[BANK0 ] unsigned char 
 20476 ;;  bitFraming      1   30[BANK0 ] unsigned char 
 20477 ;;  txLastBits      1   29[BANK0 ] unsigned char 
 20478 ;; Return value:  Size  Location     Type
 20479 ;;                  1    wreg      enum E5268
 20480 ;; Registers used:
 20481 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20482 ;; Tracked objects:
 20483 ;;		On entry : 0/0
 20484 ;;		On exit  : 0/0
 20485 ;;		Unchanged: 0/0
 20486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20487 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 20488 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0
 20489 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20490 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0
 20491 ;;Total ram usage:       25 bytes
 20492 ;; Hardware stack levels used:    1
 20493 ;; Hardware stack levels required when called:    6
 20494 ;; This function calls:
 20495 ;;		_mfrc522_bal_read_fifo_len_ex
 20496 ;;		_mfrc522_bal_read_reg
 20497 ;;		_mfrc522_bal_set_bit_reg
 20498 ;;		_mfrc522_bal_write_reg
 20499 ;;		_mfrc522_bal_write_reg_len
 20500 ;;		_mfrc522_hal_calculate_crc
 20501 ;; This function is called by:
 20502 ;;		_picc_req_a_or_wakeup_a
 20503 ;;		_picc_select
 20504 ;;		_picc_halt_a
 20505 ;;		_picc_authenticate
 20506 ;;		_mifare_read
 20507 ;;		_pcd_mifare_transceive
 20508 ;; This function uses a non-reentrant model
 20509 ;;
 20510                           
 20511                           
 20512                           ;psect for function _pcd_comm_with_picc
 20513  1808                     _pcd_comm_with_picc:	
 20514                           
 20515                           ;incstack = 0
 20516                           ; Regs used in _pcd_comm_with_picc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20517                           ;pcd_comm_with_picc@cmd stored from wreg
 20518  1808  0020               	movlb	0	; select bank0
 20519  1809  00C1               	movwf	pcd_comm_with_picc@cmd
 20520                           
 20521                           ;mfrc522_picc.c: 47: uint8_t tmp8, _validBits;
 20522                           ;mfrc522_picc.c: 48: uint16_t i;
 20523                           ;mfrc522_picc.c: 50: uint8_t txLastBits = validBits ? (*validBits) : 0;
 20524  180A  0838               	movf	pcd_comm_with_picc@validBits,w
 20525  180B  1D03               	btfss	3,2
 20526  180C  2810               	goto	l12955
 20527  180D  01BF               	clrf	_pcd_comm_with_picc$3170
 20528  180E  01C0               	clrf	_pcd_comm_with_picc$3170+1
 20529  180F  2819               	goto	l12957
 20530  1810                     l12955:	
 20531  1810  0838               	movf	pcd_comm_with_picc@validBits,w
 20532  1811  0086               	movwf	6
 20533  1812  0187               	clrf	7
 20534  1813  0801               	movf	1,w
 20535  1814  00BB               	movwf	??_pcd_comm_with_picc
 20536  1815  01BC               	clrf	??_pcd_comm_with_picc+1
 20537  1816  00BF               	movwf	_pcd_comm_with_picc$3170
 20538  1817  083C               	movf	??_pcd_comm_with_picc+1,w
 20539  1818  00C0               	movwf	_pcd_comm_with_picc$3170+1
 20540  1819                     l12957:	
 20541  1819  083F               	movf	_pcd_comm_with_picc$3170,w
 20542  181A  00BB               	movwf	??_pcd_comm_with_picc
 20543  181B  00BD               	movwf	pcd_comm_with_picc@txLastBits
 20544                           
 20545                           ;mfrc522_picc.c: 51: uint8_t bitFraming = (rxAlign << 4) + txLastBits;
 20546  181C  0839               	movf	pcd_comm_with_picc@rxAlign,w
 20547  181D  00BB               	movwf	??_pcd_comm_with_picc
 20548  181E  3003               	movlw	3
 20549  181F                     u11615:	
 20550  181F  35BB               	lslf	??_pcd_comm_with_picc,f
 20551  1820  3EFF               	addlw	-1
 20552  1821  1D03               	skipz
 20553  1822  281F               	goto	u11615
 20554  1823  353B               	lslf	??_pcd_comm_with_picc,w
 20555  1824  073D               	addwf	pcd_comm_with_picc@txLastBits,w
 20556  1825  00BC               	movwf	??_pcd_comm_with_picc+1
 20557  1826  00BE               	movwf	pcd_comm_with_picc@bitFraming
 20558  1827  3001               	movlw	1
 20559                           
 20560                           ;mfrc522_picc.c: 53: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 20561  1828  01F7               	clrf	mfrc522_bal_write_reg@x
 20562  1829  21B7  3198         	fcall	_mfrc522_bal_write_reg
 20563                           
 20564                           ;mfrc522_picc.c: 54: mfrc522_bal_write_reg(ComIrqReg, 0x7F);
 20565  182B  307F               	movlw	127
 20566  182C  0020               	movlb	0	; select bank0
 20567  182D  00BB               	movwf	??_pcd_comm_with_picc
 20568  182E  00F7               	movwf	mfrc522_bal_write_reg@x
 20569  182F  3004               	movlw	4
 20570  1830  21B7  3198         	fcall	_mfrc522_bal_write_reg
 20571                           
 20572                           ;mfrc522_picc.c: 55: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 20573  1832  3080               	movlw	128
 20574  1833  0020               	movlb	0	; select bank0
 20575  1834  00BB               	movwf	??_pcd_comm_with_picc
 20576  1835  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 20577  1836  300A               	movlw	10
 20578  1837  25F0  3198         	fcall	_mfrc522_bal_set_bit_reg
 20579                           
 20580                           ;mfrc522_picc.c: 56: mfrc522_bal_write_reg_len(FIFODataReg, sbuf, slen);
 20581  1839  0020               	movlb	0	; select bank0
 20582  183A  0833               	movf	pcd_comm_with_picc@sbuf+1,w
 20583  183B  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 20584  183C  0832               	movf	pcd_comm_with_picc@sbuf,w
 20585  183D  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 20586  183E  0834               	movf	pcd_comm_with_picc@slen,w
 20587  183F  00BB               	movwf	??_pcd_comm_with_picc
 20588  1840  00A2               	movwf	mfrc522_bal_write_reg_len@len
 20589  1841  3009               	movlw	9
 20590  1842  2600  3198         	fcall	_mfrc522_bal_write_reg_len
 20591                           
 20592                           ;mfrc522_picc.c: 57: mfrc522_bal_write_reg(BitFramingReg, bitFraming);
 20593  1844  0020               	movlb	0	; select bank0
 20594  1845  083E               	movf	pcd_comm_with_picc@bitFraming,w
 20595  1846  00BB               	movwf	??_pcd_comm_with_picc
 20596  1847  00F7               	movwf	mfrc522_bal_write_reg@x
 20597  1848  300D               	movlw	13
 20598  1849  21B7  3198         	fcall	_mfrc522_bal_write_reg
 20599                           
 20600                           ;mfrc522_picc.c: 58: mfrc522_bal_write_reg(CommandReg, cmd);
 20601  184B  0020               	movlb	0	; select bank0
 20602  184C  0841               	movf	pcd_comm_with_picc@cmd,w
 20603  184D  00BB               	movwf	??_pcd_comm_with_picc
 20604  184E  00F7               	movwf	mfrc522_bal_write_reg@x
 20605  184F  3001               	movlw	1
 20606  1850  21B7  3198         	fcall	_mfrc522_bal_write_reg
 20607                           
 20608                           ;mfrc522_picc.c: 59: if (cmd == PCD_Transceive) {
 20609  1852  300C               	movlw	12
 20610  1853  0020               	movlb	0	; select bank0
 20611  1854  0641               	xorwf	pcd_comm_with_picc@cmd,w
 20612  1855  1D03               	btfss	3,2
 20613  1856  285D               	goto	l12975
 20614                           
 20615                           ;mfrc522_picc.c: 60: mfrc522_bal_set_bit_reg(BitFramingReg, 0x80);
 20616  1857  3080               	movlw	128
 20617  1858  00BB               	movwf	??_pcd_comm_with_picc
 20618  1859  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 20619  185A  300D               	movlw	13
 20620  185B  25F0  3198         	fcall	_mfrc522_bal_set_bit_reg
 20621  185D                     l12975:	
 20622                           
 20623                           ;mfrc522_picc.c: 61: }
 20624                           ;mfrc522_picc.c: 63: i = 2000;
 20625  185D  30D0               	movlw	208
 20626  185E  0020               	movlb	0	; select bank0
 20627  185F  00C6               	movwf	pcd_comm_with_picc@i
 20628  1860  3007               	movlw	7
 20629  1861  00C7               	movwf	pcd_comm_with_picc@i+1
 20630  1862                     l12995:	
 20631                           ;mfrc522_picc.c: 64: while (i) {
 20632                           
 20633  1862  0846               	movf	pcd_comm_with_picc@i,w
 20634  1863  0447               	iorwf	pcd_comm_with_picc@i+1,w
 20635  1864  1903               	btfsc	3,2
 20636  1865  287A               	goto	l12997
 20637                           
 20638                           ;mfrc522_picc.c: 65: tmp8 = mfrc522_bal_read_reg(ComIrqReg);
 20639  1866  3004               	movlw	4
 20640  1867  25B9  3198         	fcall	_mfrc522_bal_read_reg
 20641  1869  0020               	movlb	0	; select bank0
 20642  186A  00BB               	movwf	??_pcd_comm_with_picc
 20643  186B  00C9               	movwf	pcd_comm_with_picc@tmp8
 20644                           
 20645                           ;mfrc522_picc.c: 66: if (tmp8 & waitIRQ) break;
 20646  186C  0531               	andwf	pcd_comm_with_picc@waitIRQ,w
 20647  186D  1D03               	btfss	3,2
 20648  186E  287A               	goto	l12997
 20649                           
 20650                           ;mfrc522_picc.c: 67: if (tmp8 & 0x01) return STATUS_TIMEOUT;
 20651  186F  1849               	btfsc	pcd_comm_with_picc@tmp8,0
 20652  1870  3403               	retlw	3
 20653                           
 20654                           ;mfrc522_picc.c: 68: i--;
 20655  1871  3001               	movlw	1
 20656  1872  02C6               	subwf	pcd_comm_with_picc@i,f
 20657  1873  3000               	movlw	0
 20658  1874  3BC7               	subwfb	pcd_comm_with_picc@i+1,f
 20659                           
 20660                           ;mfrc522_picc.c: 69: if(i==0)return STATUS_TIMEOUT;
 20661  1875  0846               	movf	pcd_comm_with_picc@i,w
 20662  1876  0447               	iorwf	pcd_comm_with_picc@i+1,w
 20663  1877  1903               	btfsc	3,2
 20664  1878  3403               	retlw	3
 20665  1879  2862               	goto	l12995
 20666  187A                     l12997:	
 20667                           
 20668                           ;mfrc522_picc.c: 70: }
 20669                           ;mfrc522_picc.c: 71: uint8_t errorRegValue = mfrc522_bal_read_reg(ErrorReg);
 20670  187A  3006               	movlw	6
 20671  187B  25B9  3198         	fcall	_mfrc522_bal_read_reg
 20672  187D  0020               	movlb	0	; select bank0
 20673  187E  00BB               	movwf	??_pcd_comm_with_picc
 20674  187F  00C4               	movwf	pcd_comm_with_picc@errorRegValue
 20675                           
 20676                           ;mfrc522_picc.c: 72: if (errorRegValue & 0x13)return STATUS_ERROR;
 20677  1880  3913               	andlw	19
 20678  1881  1D03               	btfss	3,2
 20679  1882  3401               	retlw	1
 20680                           
 20681                           ;mfrc522_picc.c: 73: if ((rbuf != (0))&& (rlen != (0))) {
 20682  1883  0835               	movf	pcd_comm_with_picc@rbuf,w
 20683  1884  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 20684  1885  1903               	btfsc	3,2
 20685  1886  28BB               	goto	l13027
 20686  1887  0837               	movf	pcd_comm_with_picc@rlen,w
 20687  1888  1903               	btfsc	3,2
 20688  1889  28BB               	goto	l13027
 20689                           
 20690                           ;mfrc522_picc.c: 74: tmp8 = mfrc522_bal_read_reg(FIFOLevelReg);
 20691  188A  300A               	movlw	10
 20692  188B  25B9  3198         	fcall	_mfrc522_bal_read_reg
 20693  188D  0020               	movlb	0	; select bank0
 20694  188E  00BB               	movwf	??_pcd_comm_with_picc
 20695  188F  00C9               	movwf	pcd_comm_with_picc@tmp8
 20696                           
 20697                           ;mfrc522_picc.c: 75: if (tmp8 > *rlen) return STATUS_NO_ROOM;
 20698  1890  0837               	movf	pcd_comm_with_picc@rlen,w
 20699  1891  0086               	movwf	6
 20700  1892  0187               	clrf	7
 20701  1893  0849               	movf	pcd_comm_with_picc@tmp8,w
 20702  1894  0201               	subwf	1,w
 20703  1895  1C03               	btfss	3,0
 20704  1896  3404               	retlw	4
 20705                           
 20706                           ;mfrc522_picc.c: 76: *rlen = tmp8;
 20707  1897  0849               	movf	pcd_comm_with_picc@tmp8,w
 20708  1898  00BB               	movwf	??_pcd_comm_with_picc
 20709  1899  0837               	movf	pcd_comm_with_picc@rlen,w
 20710  189A  0086               	movwf	6
 20711  189B  083B               	movf	??_pcd_comm_with_picc,w
 20712  189C  0081               	movwf	1
 20713                           
 20714                           ;mfrc522_picc.c: 77: mfrc522_bal_read_fifo_len_ex(FIFODataReg, rbuf, tmp8, rxAlign);
 20715  189D  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 20716  189E  00A1               	movwf	mfrc522_bal_read_fifo_len_ex@buf+1
 20717  189F  0835               	movf	pcd_comm_with_picc@rbuf,w
 20718  18A0  00A0               	movwf	mfrc522_bal_read_fifo_len_ex@buf
 20719  18A1  0849               	movf	pcd_comm_with_picc@tmp8,w
 20720  18A2  00BB               	movwf	??_pcd_comm_with_picc
 20721  18A3  00A2               	movwf	mfrc522_bal_read_fifo_len_ex@len
 20722  18A4  0839               	movf	pcd_comm_with_picc@rxAlign,w
 20723  18A5  00BC               	movwf	??_pcd_comm_with_picc+1
 20724  18A6  00A3               	movwf	mfrc522_bal_read_fifo_len_ex@rx_align
 20725  18A7  3009               	movlw	9
 20726  18A8  2662  3198         	fcall	_mfrc522_bal_read_fifo_len_ex
 20727                           
 20728                           ;mfrc522_picc.c: 78: _validBits = mfrc522_bal_read_reg(ControlReg) & 0x07;
 20729  18AA  300C               	movlw	12
 20730  18AB  25B9  3198         	fcall	_mfrc522_bal_read_reg
 20731  18AD  3907               	andlw	7
 20732  18AE  0020               	movlb	0	; select bank0
 20733  18AF  00BB               	movwf	??_pcd_comm_with_picc
 20734  18B0  00C8               	movwf	pcd_comm_with_picc@_validBits
 20735                           
 20736                           ;mfrc522_picc.c: 80: if (validBits != (0)) {
 20737  18B1  0838               	movf	pcd_comm_with_picc@validBits,w
 20738  18B2  1903               	btfsc	3,2
 20739  18B3  28BB               	goto	l13027
 20740                           
 20741                           ;mfrc522_picc.c: 81: *validBits = _validBits;
 20742  18B4  0848               	movf	pcd_comm_with_picc@_validBits,w
 20743  18B5  00BB               	movwf	??_pcd_comm_with_picc
 20744  18B6  0838               	movf	pcd_comm_with_picc@validBits,w
 20745  18B7  0086               	movwf	6
 20746  18B8  0187               	clrf	7
 20747  18B9  083B               	movf	??_pcd_comm_with_picc,w
 20748  18BA  0081               	movwf	1
 20749  18BB                     l13027:	
 20750                           
 20751                           ;mfrc522_picc.c: 82: }
 20752                           ;mfrc522_picc.c: 83: }
 20753                           ;mfrc522_picc.c: 84: if (errorRegValue & 0x08) return STATUS_COLLISION;
 20754  18BB  19C4               	btfsc	pcd_comm_with_picc@errorRegValue,3
 20755  18BC  3402               	retlw	2
 20756                           
 20757                           ;mfrc522_picc.c: 85: if ((rbuf != (0)) && (rlen != (0)) && checkCRC) {
 20758  18BD  0835               	movf	pcd_comm_with_picc@rbuf,w
 20759  18BE  0436               	iorwf	pcd_comm_with_picc@rbuf+1,w
 20760  18BF  1903               	btfsc	3,2
 20761  18C0  3400               	retlw	0
 20762  18C1  0837               	movf	pcd_comm_with_picc@rlen,w
 20763  18C2  1903               	btfsc	3,2
 20764  18C3  3400               	retlw	0
 20765  18C4  083A               	movf	pcd_comm_with_picc@checkCRC,w
 20766  18C5  1903               	btfsc	3,2
 20767  18C6  3400               	retlw	0
 20768                           
 20769                           ;mfrc522_picc.c: 86: if (*rlen == 1 && _validBits == 4) return STATUS_MIFARE_NACK;
 20770  18C7  0837               	movf	pcd_comm_with_picc@rlen,w
 20771  18C8  0086               	movwf	6
 20772  18C9  0187               	clrf	7
 20773  18CA  0B01               	decfsz	1,w
 20774  18CB  28D0               	goto	l13047
 20775  18CC  3004               	movlw	4
 20776  18CD  0648               	xorwf	pcd_comm_with_picc@_validBits,w
 20777  18CE  1903               	btfsc	3,2
 20778  18CF  34FF               	retlw	255
 20779  18D0                     l13047:	
 20780                           
 20781                           ;mfrc522_picc.c: 87: if (*rlen < 2 || _validBits != 0) return STATUS_CRC_WRONG;
 20782  18D0  0837               	movf	pcd_comm_with_picc@rlen,w
 20783  18D1  0086               	movwf	6
 20784  18D2  3002               	movlw	2
 20785  18D3  0187               	clrf	7
 20786  18D4  0201               	subwf	1,w
 20787  18D5  1C03               	skipc
 20788  18D6  3407               	retlw	7
 20789  18D7  0848               	movf	pcd_comm_with_picc@_validBits,w
 20790  18D8  1D03               	btfss	3,2
 20791  18D9  3407               	retlw	7
 20792                           
 20793                           ;mfrc522_picc.c: 88: uint8_t controlBuffer[2];
 20794                           ;mfrc522_picc.c: 89: em_PcdStatusCode status = mfrc522_hal_calculate_crc(rbuf, *rlen - 2
      +                          , controlBuffer);
 20795  18DA  0836               	movf	pcd_comm_with_picc@rbuf+1,w
 20796  18DB  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 20797  18DC  0835               	movf	pcd_comm_with_picc@rbuf,w
 20798  18DD  00A6               	movwf	mfrc522_hal_calculate_crc@data
 20799  18DE  0837               	movf	pcd_comm_with_picc@rlen,w
 20800  18DF  0086               	movwf	6
 20801  18E0  0801               	movf	1,w
 20802  18E1  3EFE               	addlw	254
 20803  18E2  00BB               	movwf	??_pcd_comm_with_picc
 20804  18E3  00A8               	movwf	mfrc522_hal_calculate_crc@length
 20805  18E4  3042               	movlw	low pcd_comm_with_picc@controlBuffer
 20806  18E5  00A9               	movwf	mfrc522_hal_calculate_crc@result
 20807  18E6  3000               	movlw	high pcd_comm_with_picc@controlBuffer
 20808  18E7  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 20809  18E8  255A  3198         	fcall	_mfrc522_hal_calculate_crc
 20810  18EA  0020               	movlb	0	; select bank0
 20811  18EB  00BC               	movwf	??_pcd_comm_with_picc+1
 20812  18EC  00C5               	movwf	pcd_comm_with_picc@status
 20813                           
 20814                           ;mfrc522_picc.c: 90: if (status != STATUS_OK) return status;
 20815  18ED  0845               	movf	pcd_comm_with_picc@status,w
 20816  18EE  1903               	btfsc	3,2
 20817  18EF  28F2               	goto	l13063
 20818  18F0  0845               	movf	pcd_comm_with_picc@status,w
 20819  18F1  0008               	return
 20820  18F2                     l13063:	
 20821                           
 20822                           ;mfrc522_picc.c: 92: if ((rbuf[*rlen - 2] != controlBuffer[0]) || (rbuf[*rlen - 1] != co
      +                          ntrolBuffer[1])) {
 20823  18F2  0837               	movf	pcd_comm_with_picc@rlen,w
 20824  18F3  0086               	movwf	6
 20825  18F4  0187               	clrf	7
 20826  18F5  0801               	movf	1,w
 20827  18F6  3EFE               	addlw	254
 20828  18F7  00BB               	movwf	??_pcd_comm_with_picc
 20829  18F8  30FF               	movlw	255
 20830  18F9  1803               	skipnc
 20831  18FA  3000               	movlw	0
 20832  18FB  00BC               	movwf	??_pcd_comm_with_picc+1
 20833  18FC  083B               	movf	??_pcd_comm_with_picc,w
 20834  18FD  0735               	addwf	pcd_comm_with_picc@rbuf,w
 20835  18FE  0086               	movwf	6
 20836  18FF  083C               	movf	??_pcd_comm_with_picc+1,w
 20837  1900  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 20838  1901  0087               	movwf	7
 20839  1902  0801               	movf	1,w
 20840  1903  0642               	xorwf	pcd_comm_with_picc@controlBuffer,w
 20841  1904  1D03               	skipz
 20842  1905  3407               	retlw	7
 20843  1906  0837               	movf	pcd_comm_with_picc@rlen,w
 20844  1907  0086               	movwf	6
 20845  1908  0187               	clrf	7
 20846  1909  0801               	movf	1,w
 20847  190A  3EFF               	addlw	255
 20848  190B  00BB               	movwf	??_pcd_comm_with_picc
 20849  190C  30FF               	movlw	255
 20850  190D  1803               	skipnc
 20851  190E  3000               	movlw	0
 20852  190F  00BC               	movwf	??_pcd_comm_with_picc+1
 20853  1910  083B               	movf	??_pcd_comm_with_picc,w
 20854  1911  0735               	addwf	pcd_comm_with_picc@rbuf,w
 20855  1912  0086               	movwf	6
 20856  1913  083C               	movf	??_pcd_comm_with_picc+1,w
 20857  1914  3D36               	addwfc	pcd_comm_with_picc@rbuf+1,w
 20858  1915  0087               	movwf	7
 20859  1916  0801               	movf	1,w
 20860  1917  0643               	xorwf	pcd_comm_with_picc@controlBuffer+1,w
 20861  1918  1D03               	btfss	3,2
 20862                           
 20863                           ;mfrc522_picc.c: 93: return STATUS_CRC_WRONG;
 20864  1919  3407               	retlw	7
 20865                           
 20866                           ;mfrc522_picc.c: 94: }
 20867                           ;mfrc522_picc.c: 95: }
 20868                           ;mfrc522_picc.c: 96: return STATUS_OK;
 20869  191A  3400               	retlw	0
 20870  191B                     __end_of_pcd_comm_with_picc:	
 20871  191B                     __ptext2:	
 20872 ;; *************** function _ui_disp_str_dly *****************
 20873 ;; Defined at:
 20874 ;;		line 82 in file "src/api/ui.c"
 20875 ;; Parameters:    Size  Location     Type
 20876 ;;  str             2   15[BANK0 ] PTR unsigned char 
 20877 ;;		 -> STR_2(7), 
 20878 ;;  dly             1   17[BANK0 ] unsigned char 
 20879 ;; Auto vars:     Size  Location     Type
 20880 ;;		None
 20881 ;; Return value:  Size  Location     Type
 20882 ;;                  1    wreg      void 
 20883 ;; Registers used:
 20884 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20885 ;; Tracked objects:
 20886 ;;		On entry : 0/0
 20887 ;;		On exit  : 0/0
 20888 ;;		Unchanged: 0/0
 20889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20890 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 20891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20892 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 20893 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 20894 ;;Total ram usage:        5 bytes
 20895 ;; Hardware stack levels used:    1
 20896 ;; Hardware stack levels required when called:    6
 20897 ;; This function calls:
 20898 ;;		_delay
 20899 ;;		_lcd_disp_all
 20900 ;;		_lcd_disp_refresh
 20901 ;;		_ui_disp_str_num_s
 20902 ;; This function is called by:
 20903 ;;		_ui_start_display
 20904 ;; This function uses a non-reentrant model
 20905 ;;
 20906                           
 20907                           
 20908                           ;psect for function _ui_disp_str_dly
 20909  191B                     _ui_disp_str_dly:	
 20910  191B                     l13813:	
 20911                           ;incstack = 0
 20912                           ; Regs used in _ui_disp_str_dly: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20913                           
 20914                           
 20915                           ;ui.c: 83: lcd_disp_all(0x00);;
 20916  191B  3000               	movlw	0
 20917  191C  2227  3198         	fcall	_lcd_disp_all
 20918  191E                     l13829:	
 20919                           ;ui.c: 84: while (dly) {
 20920                           
 20921  191E  0020               	movlb	0	; select bank0
 20922  191F  0831               	movf	ui_disp_str_dly@dly,w
 20923  1920  1903               	btfsc	3,2
 20924  1921  0008               	return
 20925                           
 20926                           ;ui.c: 85: do{ ui_disp_str_num_s(str,dly); lcd_disp_refresh(); }while(0);;
 20927  1922  0020               	movlb	0	; select bank0
 20928  1923  0830               	movf	ui_disp_str_dly@str+1,w
 20929  1924  00AA               	movwf	ui_disp_str_num_s@str+1
 20930  1925  082F               	movf	ui_disp_str_dly@str,w
 20931  1926  00A9               	movwf	ui_disp_str_num_s@str
 20932  1927  0831               	movf	ui_disp_str_dly@dly,w
 20933  1928  00B2               	movwf	??_ui_disp_str_dly
 20934  1929  01B3               	clrf	??_ui_disp_str_dly+1
 20935  192A  00AB               	movwf	ui_disp_str_num_s@num
 20936  192B  0833               	movf	??_ui_disp_str_dly+1,w
 20937  192C  00AC               	movwf	ui_disp_str_num_s@num+1
 20938  192D  26AC  3198         	fcall	_ui_disp_str_num_s
 20939  192F  269D  3198         	fcall	_lcd_disp_refresh
 20940                           
 20941                           ;ui.c: 86: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c)
      +                          ; }while(0);;
 20942  1931  304C               	movlw	76
 20943  1932  00F3               	movwf	delay@t
 20944  1933  3090               	movlw	144
 20945  1934  00F4               	movwf	delay@t+1
 20946  1935  2219  3198         	fcall	_delay
 20947  1937  304C               	movlw	76
 20948  1938  00F3               	movwf	delay@t
 20949  1939  3090               	movlw	144
 20950  193A  00F4               	movwf	delay@t+1
 20951  193B  2219  3198         	fcall	_delay
 20952  193D  304C               	movlw	76
 20953  193E  00F3               	movwf	delay@t
 20954  193F  3090               	movlw	144
 20955  1940  00F4               	movwf	delay@t+1
 20956  1941  2219  3198         	fcall	_delay
 20957  1943  304C               	movlw	76
 20958  1944  00F3               	movwf	delay@t
 20959  1945  3090               	movlw	144
 20960  1946  00F4               	movwf	delay@t+1
 20961  1947  2219  3198         	fcall	_delay
 20962  1949  304C               	movlw	76
 20963  194A  00F3               	movwf	delay@t
 20964  194B  3090               	movlw	144
 20965  194C  00F4               	movwf	delay@t+1
 20966  194D  2219  3198         	fcall	_delay
 20967                           
 20968                           ;ui.c: 87: dly--;
 20969  194F  3001               	movlw	1
 20970  1950  0020               	movlb	0	; select bank0
 20971  1951  02B1               	subwf	ui_disp_str_dly@dly,f
 20972  1952  291E               	goto	l13829
 20973  1953                     __end_of_ui_disp_str_dly:	
 20974  1953                     __ptext94:	
 20975 ;; *************** function _mfrc522_hal_init *****************
 20976 ;; Defined at:
 20977 ;;		line 99 in file "src/nfc/hal/mfrc522_hal.c"
 20978 ;; Parameters:    Size  Location     Type
 20979 ;;		None
 20980 ;; Auto vars:     Size  Location     Type
 20981 ;;		None
 20982 ;; Return value:  Size  Location     Type
 20983 ;;                  1    wreg      void 
 20984 ;; Registers used:
 20985 ;;		wreg, status,2, status,0, pclath, cstack
 20986 ;; Tracked objects:
 20987 ;;		On entry : 0/0
 20988 ;;		On exit  : 0/0
 20989 ;;		Unchanged: 0/0
 20990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 20991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 20993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20994 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 20995 ;;Total ram usage:        1 bytes
 20996 ;; Hardware stack levels used:    1
 20997 ;; Hardware stack levels required when called:    6
 20998 ;; This function calls:
 20999 ;;		_delay
 21000 ;;		_mfrc522_bal_write_reg
 21001 ;;		_mfrc522_hal_antenna_on
 21002 ;;		_mfrc522_hal_reset_sf
 21003 ;;		_mfrc522_hal_set_antenna_gain
 21004 ;; This function is called by:
 21005 ;;		_mfapi_pcd_init
 21006 ;; This function uses a non-reentrant model
 21007 ;;
 21008                           
 21009                           
 21010                           ;psect for function _mfrc522_hal_init
 21011  1953                     _mfrc522_hal_init:	
 21012                           
 21013                           ;incstack = 0
 21014                           ; Regs used in _mfrc522_hal_init: [wreg+status,2+status,0+pclath+cstack]
 21015                           ;mfrc522_hal.c: 102: do{ do { TRISBbits.TRISB5 = 0; } while(0); do { TRISCbits.TRISC2 = 
      +                          0; } while(0); do { TRISCbits.TRISC3 = 0; } while(0); do { TRISCbits.TRISC4 = 0; } while
      +                          (0); do { TRISCbits.TRISC5 = 1; } while(0); do { LATBbits.LATB5 = 1; } while(0); do { LA
      +                          TCbits.
 21016  1953  0021               	movlb	1	; select bank1
 21017  1954  128D               	bcf	13,5	;volatile
 21018  1955  110E               	bcf	14,2	;volatile
 21019  1956  118E               	bcf	14,3	;volatile
 21020  1957  120E               	bcf	14,4	;volatile
 21021  1958  168E               	bsf	14,5	;volatile
 21022  1959  0022               	movlb	2	; select bank2
 21023  195A  168D               	bsf	13,5	;volatile
 21024  195B  150E               	bsf	14,2	;volatile
 21025  195C  158E               	bsf	14,3	;volatile
 21026  195D  168E               	bsf	14,5	;volatile
 21027                           
 21028                           ;mfrc522_hal.c: 104: ;;
 21029                           ;mfrc522_hal.c: 105: delay(1847);
 21030  195E  3037               	movlw	55
 21031  195F  00F3               	movwf	delay@t
 21032  1960  3007               	movlw	7
 21033  1961  00F4               	movwf	delay@t+1
 21034  1962  2219  3198         	fcall	_delay
 21035                           
 21036                           ;mfrc522_hal.c: 107: do { LATBbits.LATB5 = 0; } while(0);;;;
 21037  1964  0022               	movlb	2	; select bank2
 21038  1965  128D               	bcf	13,5	;volatile
 21039                           
 21040                           ;mfrc522_hal.c: 108: delay(1847);
 21041  1966  3037               	movlw	55
 21042  1967  00F3               	movwf	delay@t
 21043  1968  3007               	movlw	7
 21044  1969  00F4               	movwf	delay@t+1
 21045  196A  2219  3198         	fcall	_delay
 21046                           
 21047                           ;mfrc522_hal.c: 109: do { LATBbits.LATB5 = 1; } while(0);;;;
 21048  196C  0022               	movlb	2	; select bank2
 21049  196D  168D               	bsf	13,5	;volatile
 21050                           
 21051                           ;mfrc522_hal.c: 111: delay(1847);
 21052  196E  3037               	movlw	55
 21053  196F  00F3               	movwf	delay@t
 21054  1970  3007               	movlw	7
 21055  1971  00F4               	movwf	delay@t+1
 21056  1972  2219  3198         	fcall	_delay
 21057                           
 21058                           ;mfrc522_hal.c: 112: mfrc522_hal_reset_sf();
 21059  1974  2623  3198         	fcall	_mfrc522_hal_reset_sf
 21060                           
 21061                           ;mfrc522_hal.c: 113: delay(1847);
 21062  1976  3037               	movlw	55
 21063  1977  00F3               	movwf	delay@t
 21064  1978  3007               	movlw	7
 21065  1979  00F4               	movwf	delay@t+1
 21066  197A  2219  3198         	fcall	_delay
 21067                           
 21068                           ;mfrc522_hal.c: 116: mfrc522_bal_write_reg(TModeReg, 0x80);
 21069  197C  3080               	movlw	128
 21070  197D  0020               	movlb	0	; select bank0
 21071  197E  00A8               	movwf	??_mfrc522_hal_init
 21072  197F  00F7               	movwf	mfrc522_bal_write_reg@x
 21073  1980  302A               	movlw	42
 21074  1981  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21075                           
 21076                           ;mfrc522_hal.c: 117: mfrc522_bal_write_reg(TPrescalerReg, 0xA9);
 21077  1983  30A9               	movlw	169
 21078  1984  0020               	movlb	0	; select bank0
 21079  1985  00A8               	movwf	??_mfrc522_hal_init
 21080  1986  00F7               	movwf	mfrc522_bal_write_reg@x
 21081  1987  302B               	movlw	43
 21082  1988  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21083                           
 21084                           ;mfrc522_hal.c: 118: mfrc522_bal_write_reg(TReloadRegH, 0x04);
 21085  198A  3004               	movlw	4
 21086  198B  0020               	movlb	0	; select bank0
 21087  198C  00A8               	movwf	??_mfrc522_hal_init
 21088  198D  00F7               	movwf	mfrc522_bal_write_reg@x
 21089  198E  302C               	movlw	44
 21090  198F  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21091                           
 21092                           ;mfrc522_hal.c: 119: mfrc522_bal_write_reg(TReloadRegL, 0xE8);
 21093  1991  30E8               	movlw	232
 21094  1992  0020               	movlb	0	; select bank0
 21095  1993  00A8               	movwf	??_mfrc522_hal_init
 21096  1994  00F7               	movwf	mfrc522_bal_write_reg@x
 21097  1995  302D               	movlw	45
 21098  1996  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21099                           
 21100                           ;mfrc522_hal.c: 120: mfrc522_bal_write_reg(TxASKReg, 0x40);
 21101  1998  3040               	movlw	64
 21102  1999  0020               	movlb	0	; select bank0
 21103  199A  00A8               	movwf	??_mfrc522_hal_init
 21104  199B  00F7               	movwf	mfrc522_bal_write_reg@x
 21105  199C  3015               	movlw	21
 21106  199D  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21107                           
 21108                           ;mfrc522_hal.c: 121: mfrc522_bal_write_reg(ModeReg, 0x3D);
 21109  199F  303D               	movlw	61
 21110  19A0  0020               	movlb	0	; select bank0
 21111  19A1  00A8               	movwf	??_mfrc522_hal_init
 21112  19A2  0828               	movf	??_mfrc522_hal_init,w
 21113  19A3  00F7               	movwf	mfrc522_bal_write_reg@x
 21114  19A4  3011               	movlw	17
 21115  19A5  21B7  3198         	fcall	_mfrc522_bal_write_reg
 21116                           
 21117                           ;mfrc522_hal.c: 122: delay(1847);
 21118  19A7  3037               	movlw	55
 21119  19A8  00F3               	movwf	delay@t
 21120  19A9  3007               	movlw	7
 21121  19AA  00F4               	movwf	delay@t+1
 21122  19AB  2219  3198         	fcall	_delay
 21123                           
 21124                           ;mfrc522_hal.c: 123: mfrc522_hal_set_antenna_gain(RxGain_max);
 21125  19AD  3070               	movlw	112
 21126  19AE  2631  3198         	fcall	_mfrc522_hal_set_antenna_gain
 21127                           
 21128                           ;mfrc522_hal.c: 124: mfrc522_hal_antenna_on();
 21129  19B0  2242  3198         	fcall	_mfrc522_hal_antenna_on
 21130                           
 21131                           ;mfrc522_hal.c: 125: delay(1847);
 21132  19B2  3037               	movlw	55
 21133  19B3  00F3               	movwf	delay@t
 21134  19B4  3007               	movlw	7
 21135  19B5  00F4               	movwf	delay@t+1
 21136  19B6  2A19               	ljmp	l12485
 21137  19B7                     __end_of_mfrc522_hal_init:	
 21138  19B7                     __ptext101:	
 21139 ;; *************** function _mfrc522_bal_write_reg *****************
 21140 ;; Defined at:
 21141 ;;		line 47 in file "src/nfc/bal/mfrc522_bal.c"
 21142 ;; Parameters:    Size  Location     Type
 21143 ;;  reg             1    wreg     unsigned char 
 21144 ;;  x               1    7[COMMON] unsigned char 
 21145 ;; Auto vars:     Size  Location     Type
 21146 ;;  reg             1    0[BANK0 ] unsigned char 
 21147 ;; Return value:  Size  Location     Type
 21148 ;;                  1    wreg      void 
 21149 ;; Registers used:
 21150 ;;		wreg, status,2, status,0, pclath, cstack
 21151 ;; Tracked objects:
 21152 ;;		On entry : 0/0
 21153 ;;		On exit  : 0/0
 21154 ;;		Unchanged: 0/0
 21155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21156 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21159 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21160 ;;Total ram usage:        2 bytes
 21161 ;; Hardware stack levels used:    1
 21162 ;; Hardware stack levels required when called:    3
 21163 ;; This function calls:
 21164 ;;		_mfrc522_bal_write_read_via_spi
 21165 ;; This function is called by:
 21166 ;;		_mfrc522_bal_set_bit_reg
 21167 ;;		_mfrc522_bal_clr_bit_reg
 21168 ;;		_mfrc522_hal_calculate_crc
 21169 ;;		_mfrc522_hal_init
 21170 ;;		_mfrc522_hal_reset_sf
 21171 ;;		_mfrc522_hal_antenna_on
 21172 ;;		_pcd_comm_with_picc
 21173 ;;		_picc_select
 21174 ;; This function uses a non-reentrant model
 21175 ;;
 21176                           
 21177                           
 21178                           ;psect for function _mfrc522_bal_write_reg
 21179  19B7                     _mfrc522_bal_write_reg:	
 21180                           
 21181                           ;incstack = 0
 21182                           ; Regs used in _mfrc522_bal_write_reg: [wreg+status,2+status,0+pclath+cstack]
 21183                           ;mfrc522_bal_write_reg@reg stored from wreg
 21184  19B7  0020               	movlb	0	; select bank0
 21185  19B8  00A0               	movwf	mfrc522_bal_write_reg@reg
 21186                           
 21187                           ;mfrc522_bal.c: 49: do { LATCbits.LATC2 = 0; } while(0);;
 21188  19B9  0022               	movlb	2	; select bank2
 21189  19BA  110E               	bcf	14,2	;volatile
 21190                           
 21191                           ;mfrc522_bal.c: 51: do { LATCbits.LATC3 = 0; } while(0);;
 21192  19BB  118E               	bcf	14,3	;volatile
 21193                           
 21194                           ;mfrc522_bal.c: 52: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 21195  19BC  0020               	movlb	0	; select bank0
 21196  19BD  3520               	lslf	mfrc522_bal_write_reg@reg,w
 21197  19BE  397E               	andlw	126
 21198  19BF  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 21199                           
 21200                           ;mfrc522_bal.c: 53: mfrc522_bal_write_read_via_spi(x);
 21201  19C1  0877               	movf	mfrc522_bal_write_reg@x,w
 21202  19C2  25CF               	fcall	_mfrc522_bal_write_read_via_spi
 21203                           
 21204                           ;mfrc522_bal.c: 54: do { LATCbits.LATC2 = 1; } while(0);;
 21205  19C3  0022               	movlb	2	; select bank2
 21206  19C4  150E               	bsf	14,2	;volatile
 21207  19C5  0008               	return
 21208  19C6                     __end_of_mfrc522_bal_write_reg:	
 21209  19C6                     __ptext104:	
 21210 ;; *************** function _m_system_start_self_test *****************
 21211 ;; Defined at:
 21212 ;;		line 19 in file "main.c"
 21213 ;; Parameters:    Size  Location     Type
 21214 ;;		None
 21215 ;; Auto vars:     Size  Location     Type
 21216 ;;		None
 21217 ;; Return value:  Size  Location     Type
 21218 ;;                  1    wreg      void 
 21219 ;; Registers used:
 21220 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21221 ;; Tracked objects:
 21222 ;;		On entry : 0/0
 21223 ;;		On exit  : 0/0
 21224 ;;		Unchanged: 0/0
 21225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21229 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21230 ;;Total ram usage:        0 bytes
 21231 ;; Hardware stack levels used:    1
 21232 ;; Hardware stack levels required when called:    3
 21233 ;; This function calls:
 21234 ;;		_delay
 21235 ;;		_lcd_disp_all
 21236 ;; This function is called by:
 21237 ;;		_main
 21238 ;; This function uses a non-reentrant model
 21239 ;;
 21240                           
 21241                           
 21242                           ;psect for function _m_system_start_self_test
 21243  19C6                     _m_system_start_self_test:	
 21244                           
 21245                           ;main.c: 23: lcd_disp_all(0x00);;
 21246                           
 21247                           ;incstack = 0
 21248                           ; Regs used in _m_system_start_self_test: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cst
      +                          ack]
 21249  19C6  3000               	movlw	0
 21250  19C7  2227  3198         	fcall	_lcd_disp_all
 21251                           
 21252                           ;main.c: 24: do{ do { LATAbits.LATA3 = 1; } while(0);;do { LATFbits.LATF0 = 1; } while(0
      +                          );;do { LATFbits.LATF1 = 1; } while(0);; do { LATAbits.LATA2 = 1; } while(0);;do { LATAb
      +                          its.LATA0 = 1; } while(0);;}while(0);;
 21253  19C9  0022               	movlb	2	; select bank2
 21254  19CA  158C               	bsf	12,3	;volatile
 21255  19CB  0027               	movlb	7	; select bank7
 21256  19CC  140C               	bsf	12,0	;volatile
 21257  19CD  148C               	bsf	12,1	;volatile
 21258  19CE  0022               	movlb	2	; select bank2
 21259  19CF  150C               	bsf	12,2	;volatile
 21260  19D0  140C               	bsf	12,0	;volatile
 21261                           
 21262                           ;main.c: 26: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 21263  19D1  304C               	movlw	76
 21264  19D2  00F3               	movwf	delay@t
 21265  19D3  3090               	movlw	144
 21266  19D4  00F4               	movwf	delay@t+1
 21267  19D5  2219  3198         	fcall	_delay
 21268  19D7  304C               	movlw	76
 21269  19D8  00F3               	movwf	delay@t
 21270  19D9  3090               	movlw	144
 21271  19DA  00F4               	movwf	delay@t+1
 21272  19DB  2219  3198         	fcall	_delay
 21273  19DD  304C               	movlw	76
 21274  19DE  00F3               	movwf	delay@t
 21275  19DF  3090               	movlw	144
 21276  19E0  00F4               	movwf	delay@t+1
 21277  19E1  2219  3198         	fcall	_delay
 21278  19E3  304C               	movlw	76
 21279  19E4  00F3               	movwf	delay@t
 21280  19E5  3090               	movlw	144
 21281  19E6  00F4               	movwf	delay@t+1
 21282  19E7  2219  3198         	fcall	_delay
 21283  19E9  304C               	movlw	76
 21284  19EA  00F3               	movwf	delay@t
 21285  19EB  3090               	movlw	144
 21286  19EC  00F4               	movwf	delay@t+1
 21287  19ED  2219  3198         	fcall	_delay
 21288                           
 21289                           ;main.c: 27: lcd_disp_all(0xff);;
 21290  19EF  30FF               	movlw	255
 21291  19F0  2227  3198         	fcall	_lcd_disp_all
 21292                           
 21293                           ;main.c: 29: do{ delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904c); delay(0x904
      +                          c); }while(0);;
 21294  19F2  304C               	movlw	76
 21295  19F3  00F3               	movwf	delay@t
 21296  19F4  3090               	movlw	144
 21297  19F5  00F4               	movwf	delay@t+1
 21298  19F6  2219  3198         	fcall	_delay
 21299  19F8  304C               	movlw	76
 21300  19F9  00F3               	movwf	delay@t
 21301  19FA  3090               	movlw	144
 21302  19FB  00F4               	movwf	delay@t+1
 21303  19FC  2219  3198         	fcall	_delay
 21304  19FE  304C               	movlw	76
 21305  19FF  00F3               	movwf	delay@t
 21306  1A00  3090               	movlw	144
 21307  1A01  00F4               	movwf	delay@t+1
 21308  1A02  2219  3198         	fcall	_delay
 21309  1A04  304C               	movlw	76
 21310  1A05  00F3               	movwf	delay@t
 21311  1A06  3090               	movlw	144
 21312  1A07  00F4               	movwf	delay@t+1
 21313  1A08  2219  3198         	fcall	_delay
 21314  1A0A  304C               	movlw	76
 21315  1A0B  00F3               	movwf	delay@t
 21316  1A0C  3090               	movlw	144
 21317  1A0D  00F4               	movwf	delay@t+1
 21318  1A0E  2219               	fcall	_delay
 21319                           
 21320                           ;main.c: 30: do{ do { LATAbits.LATA3 = 0; } while(0);;do { LATFbits.LATF0 = 0; } while(0
      +                          );;do { LATFbits.LATF1 = 0; } while(0);; do { LATAbits.LATA2 = 0; } while(0);;do { LATAb
      +                          its.LATA0 = 0; } while(0);;}while(0);;
 21321  1A0F  0022               	movlb	2	; select bank2
 21322  1A10  118C               	bcf	12,3	;volatile
 21323  1A11  0027               	movlb	7	; select bank7
 21324  1A12  100C               	bcf	12,0	;volatile
 21325  1A13  108C               	bcf	12,1	;volatile
 21326  1A14  0022               	movlb	2	; select bank2
 21327  1A15  110C               	bcf	12,2	;volatile
 21328  1A16  100C               	bcf	12,0	;volatile
 21329                           
 21330                           ;main.c: 31: do { LATAbits.LATA1 = 1; } while(0);;
 21331  1A17  148C               	bsf	12,1	;volatile
 21332  1A18  0008               	return
 21333  1A19                     __end_of_m_system_start_self_test:	
 21334  1A19                     __ptext143:	
 21335 ;; *************** function _delay *****************
 21336 ;; Defined at:
 21337 ;;		line 5 in file "src/depend/delay.c"
 21338 ;; Parameters:    Size  Location     Type
 21339 ;;  t               2    3[COMMON] unsigned int 
 21340 ;; Auto vars:     Size  Location     Type
 21341 ;;		None
 21342 ;; Return value:  Size  Location     Type
 21343 ;;                  1    wreg      void 
 21344 ;; Registers used:
 21345 ;;		wreg, status,2, status,0
 21346 ;; Tracked objects:
 21347 ;;		On entry : 0/0
 21348 ;;		On exit  : 0/0
 21349 ;;		Unchanged: 0/0
 21350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21351 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21354 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21355 ;;Total ram usage:        2 bytes
 21356 ;; Hardware stack levels used:    1
 21357 ;; Hardware stack levels required when called:    2
 21358 ;; This function calls:
 21359 ;;		Nothing
 21360 ;; This function is called by:
 21361 ;;		_ui_disp_hello
 21362 ;;		_ui_disp_str_dly
 21363 ;;		_rfid_comm_process
 21364 ;;		_key_scan_call
 21365 ;;		_iic_start
 21366 ;;		_iic_stop
 21367 ;;		_mfrc522_hal_init
 21368 ;;		_m_system_start_self_test
 21369 ;;		_led_all_test
 21370 ;; This function uses a non-reentrant model
 21371 ;;
 21372                           
 21373                           
 21374                           ;psect for function _delay
 21375  1A19                     _delay:	
 21376  1A19                     l12485:	
 21377                           ;incstack = 0
 21378                           ; Regs used in _delay: [wreg+status,2+status,0]
 21379                           
 21380  1A19                     l12487:	
 21381                           ;delay.c: 7: while(t--)
 21382                           
 21383  1A19  3001               	movlw	1
 21384  1A1A  02F3               	subwf	delay@t,f
 21385  1A1B  3000               	movlw	0
 21386  1A1C  3BF4               	subwfb	delay@t+1,f
 21387  1A1D  0F73               	incfsz	delay@t,w
 21388  1A1E  2A22               	goto	l1172
 21389  1A1F  0A74               	incf	delay@t+1,w
 21390  1A20  1903               	btfsc	3,2
 21391  1A21  0008               	return
 21392  1A22                     l1172:	
 21393                           
 21394                           ;delay.c: 8: {
 21395                           ;delay.c: 9: __nop();
 21396  1A22  0000               	nop
 21397                           
 21398                           ;delay.c: 10: __nop();
 21399  1A23  0000               	nop
 21400                           
 21401                           ;delay.c: 11: __nop();
 21402  1A24  0000               	nop
 21403                           
 21404                           ;delay.c: 12: __nop();
 21405  1A25  0000               	nop
 21406  1A26  2A19               	goto	l12487
 21407  1A27                     __end_of_delay:	
 21408  1A27                     __ptext110:	
 21409 ;; *************** function _lcd_disp_all *****************
 21410 ;; Defined at:
 21411 ;;		line 194 in file "src/driver/lcd.c"
 21412 ;; Parameters:    Size  Location     Type
 21413 ;;  x               1    wreg     unsigned char 
 21414 ;; Auto vars:     Size  Location     Type
 21415 ;;  x               1    0[BANK0 ] unsigned char 
 21416 ;;  i               1    1[BANK0 ] unsigned char 
 21417 ;; Return value:  Size  Location     Type
 21418 ;;                  1    wreg      void 
 21419 ;; Registers used:
 21420 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 21421 ;; Tracked objects:
 21422 ;;		On entry : 0/0
 21423 ;;		On exit  : 0/0
 21424 ;;		Unchanged: 0/0
 21425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21427 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 21428 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21429 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 21430 ;;Total ram usage:        6 bytes
 21431 ;; Hardware stack levels used:    1
 21432 ;; Hardware stack levels required when called:    2
 21433 ;; This function calls:
 21434 ;;		Nothing
 21435 ;; This function is called by:
 21436 ;;		_ui_disp_hello
 21437 ;;		_ui_disp_str_dly
 21438 ;;		_lcd_config
 21439 ;;		_m_system_start_self_test
 21440 ;; This function uses a non-reentrant model
 21441 ;;
 21442                           
 21443                           
 21444                           ;psect for function _lcd_disp_all
 21445  1A27                     _lcd_disp_all:	
 21446                           
 21447                           ;incstack = 0
 21448                           ; Regs used in _lcd_disp_all: [wreg+fsr1l+fsr1h+status,2+status,0]
 21449                           ;lcd_disp_all@x stored from wreg
 21450  1A27  0020               	movlb	0	; select bank0
 21451  1A28  00A0               	movwf	lcd_disp_all@x
 21452                           
 21453                           ;lcd.c: 196: uint8_t i;
 21454                           ;lcd.c: 197: for(i=0;i<24;i++)
 21455  1A29  01A1               	clrf	lcd_disp_all@i
 21456  1A2A                     L12:	
 21457  1A2A  3018               	movlw	24
 21458  1A2B  0221               	subwf	lcd_disp_all@i,w
 21459  1A2C  1803               	btfsc	3,0
 21460  1A2D  0008               	return
 21461                           
 21462                           ;lcd.c: 198: {
 21463                           ;lcd.c: 199: pLcdReg[i]=x;
 21464  1A2E  0821               	movf	lcd_disp_all@i,w
 21465  1A2F  00F3               	movwf	??_lcd_disp_all
 21466  1A30  01F4               	clrf	??_lcd_disp_all+1
 21467  1A31  0022               	movlb	2	; select bank2
 21468  1A32  076D               	addwf	_pLcdReg^(0+256),w
 21469  1A33  00F5               	movwf	??_lcd_disp_all+2
 21470  1A34  0874               	movf	??_lcd_disp_all+1,w
 21471  1A35  3D6E               	addwfc	(_pLcdReg+1)^(0+256),w
 21472  1A36  00F6               	movwf	??_lcd_disp_all+3
 21473  1A37  0875               	movf	??_lcd_disp_all+2,w
 21474  1A38  0086               	movwf	6
 21475  1A39  0876               	movf	??_lcd_disp_all+3,w
 21476  1A3A  0087               	movwf	7
 21477  1A3B  0020               	movlb	0	; select bank0
 21478  1A3C  0820               	movf	lcd_disp_all@x,w
 21479  1A3D  0081               	movwf	1
 21480  1A3E  3001               	movlw	1
 21481  1A3F  00F3               	movwf	??_lcd_disp_all
 21482  1A40  07A1               	addwf	lcd_disp_all@i,f
 21483  1A41  2A2A               	goto	L12
 21484  1A42                     __end_of_lcd_disp_all:	
 21485  1A42                     __ptext100:	
 21486 ;; *************** function _mfrc522_hal_antenna_on *****************
 21487 ;; Defined at:
 21488 ;;		line 137 in file "src/nfc/hal/mfrc522_hal.c"
 21489 ;; Parameters:    Size  Location     Type
 21490 ;;		None
 21491 ;; Auto vars:     Size  Location     Type
 21492 ;;  t8              1    3[BANK0 ] unsigned char 
 21493 ;; Return value:  Size  Location     Type
 21494 ;;                  1    wreg      void 
 21495 ;; Registers used:
 21496 ;;		wreg, status,2, status,0, pclath, cstack
 21497 ;; Tracked objects:
 21498 ;;		On entry : 0/0
 21499 ;;		On exit  : 0/0
 21500 ;;		Unchanged: 0/0
 21501 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21502 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21503 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21504 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 21505 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 21506 ;;Total ram usage:        2 bytes
 21507 ;; Hardware stack levels used:    1
 21508 ;; Hardware stack levels required when called:    4
 21509 ;; This function calls:
 21510 ;;		_mfrc522_bal_read_reg
 21511 ;;		_mfrc522_bal_write_reg
 21512 ;; This function is called by:
 21513 ;;		_mfrc522_hal_init
 21514 ;; This function uses a non-reentrant model
 21515 ;;
 21516                           
 21517                           
 21518                           ;psect for function _mfrc522_hal_antenna_on
 21519  1A42                     _mfrc522_hal_antenna_on:	
 21520                           
 21521                           ;mfrc522_hal.c: 139: uint8_t t8;
 21522                           ;mfrc522_hal.c: 140: t8= mfrc522_bal_read_reg(TxControlReg);
 21523                           
 21524                           ;incstack = 0
 21525                           ; Regs used in _mfrc522_hal_antenna_on: [wreg+status,2+status,0+pclath+cstack]
 21526  1A42  3014               	movlw	20
 21527  1A43  25B9  3198         	fcall	_mfrc522_bal_read_reg
 21528  1A45  0020               	movlb	0	; select bank0
 21529  1A46  00A2               	movwf	??_mfrc522_hal_antenna_on
 21530  1A47  00A3               	movwf	mfrc522_hal_antenna_on@t8
 21531                           
 21532                           ;mfrc522_hal.c: 141: if((t8&0x03)!=0x03)
 21533  1A48  3903               	andlw	3
 21534  1A49  00A2               	movwf	??_mfrc522_hal_antenna_on
 21535  1A4A  3A03               	xorlw	3
 21536  1A4B  1903               	btfsc	3,2
 21537  1A4C  0008               	return
 21538                           
 21539                           ;mfrc522_hal.c: 142: {
 21540                           ;mfrc522_hal.c: 143: mfrc522_bal_write_reg(TxControlReg, t8 | 0x03);
 21541  1A4D  0823               	movf	mfrc522_hal_antenna_on@t8,w
 21542  1A4E  3803               	iorlw	3
 21543  1A4F  00A2               	movwf	??_mfrc522_hal_antenna_on
 21544  1A50  00F7               	movwf	mfrc522_bal_write_reg@x
 21545  1A51  3014               	movlw	20
 21546  1A52  29B7               	ljmp	_mfrc522_bal_write_reg
 21547  1A53                     __end_of_mfrc522_hal_antenna_on:	
 21548  1A53                     __ptext60:	
 21549 ;; *************** function _rfid_comm_process_recharge *****************
 21550 ;; Defined at:
 21551 ;;		line 125 in file "src/app/rfid_demo.c"
 21552 ;; Parameters:    Size  Location     Type
 21553 ;;		None
 21554 ;; Auto vars:     Size  Location     Type
 21555 ;;  stpDec          1   79[BANK0 ] PTR struct .
 21556 ;;		 -> cardDecBuf(18), 
 21557 ;;  stpInc          1   78[BANK0 ] PTR struct .
 21558 ;;		 -> cardIncBuf(18), 
 21559 ;;  ret             1   77[BANK0 ] unsigned char 
 21560 ;; Return value:  Size  Location     Type
 21561 ;;                  1    wreg      unsigned char 
 21562 ;; Registers used:
 21563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21564 ;; Tracked objects:
 21565 ;;		On entry : 0/0
 21566 ;;		On exit  : 0/0
 21567 ;;		Unchanged: 0/0
 21568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 21569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 21570 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 21571 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0
 21572 ;;      Totals:         0       3       8       0       0       0       0       0       0       0       0       0       
      +0
 21573 ;;Total ram usage:       11 bytes
 21574 ;; Hardware stack levels used:    1
 21575 ;; Hardware stack levels required when called:    9
 21576 ;; This function calls:
 21577 ;;		_crc_append
 21578 ;;		_data_api_flash_process
 21579 ;;		_m_mem_cpy_len
 21580 ;;		_mifare_write
 21581 ;;		_picc_authenticate
 21582 ;; This function is called by:
 21583 ;;		_rfid_comm_process
 21584 ;; This function uses a non-reentrant model
 21585 ;;
 21586                           
 21587                           
 21588                           ;psect for function _rfid_comm_process_recharge
 21589  1A53                     _rfid_comm_process_recharge:	
 21590                           
 21591                           ;rfid_demo.c: 127: st_cardValueStrucrtDef* stpInc,*stpDec;
 21592                           ;rfid_demo.c: 129: uint8_t ret;
 21593                           ;rfid_demo.c: 130: stpInc=(st_cardValueStrucrtDef*)cardIncBuf;
 21594                           
 21595                           ;incstack = 0
 21596                           ; Regs used in _rfid_comm_process_recharge: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21597  1A53  3044               	movlw	68
 21598  1A54  0021               	movlb	1	; select bank1
 21599  1A55  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21600  1A56  0020               	movlb	0	; select bank0
 21601  1A57  00EE               	movwf	rfid_comm_process_recharge@stpInc
 21602                           
 21603                           ;rfid_demo.c: 131: stpDec=(st_cardValueStrucrtDef*)cardDecBuf;
 21604  1A58  3056               	movlw	86
 21605  1A59  0021               	movlb	1	; select bank1
 21606  1A5A  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21607  1A5B  0020               	movlb	0	; select bank0
 21608  1A5C  00EF               	movwf	rfid_comm_process_recharge@stpDec
 21609                           
 21610                           ;rfid_demo.c: 132: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 21611  1A5D  300F               	movlw	15
 21612  1A5E  0021               	movlb	1	; select bank1
 21613  1A5F  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21614  1A60  0020               	movlb	0	; select bank0
 21615  1A61  00CA               	movwf	picc_authenticate@blockAddr
 21616  1A62  30BC               	movlw	low _userKeyB
 21617  1A63  00CB               	movwf	picc_authenticate@key
 21618  1A64  3001               	movlw	high _userKeyB
 21619  1A65  00CC               	movwf	picc_authenticate@key+1
 21620  1A66  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 21621  1A67  0021               	movlb	1	; select bank1
 21622  1A68  00CD               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21623  1A69  0020               	movlb	0	; select bank0
 21624  1A6A  00CD               	movwf	picc_authenticate@uid
 21625  1A6B  3061               	movlw	97
 21626  1A6C  245B  3198         	fcall	_picc_authenticate
 21627  1A6E  0021               	movlb	1	; select bank1
 21628  1A6F  00CE               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21629  1A70  00BB               	movwf	_piccResult^(0+128)
 21630                           
 21631                           ;rfid_demo.c: 133: if(stpDec->Times < mainSystemData.payTimes)
 21632  1A71  3020               	movlw	32
 21633  1A72  0084               	movwf	4
 21634  1A73  30BF               	movlw	191
 21635  1A74  0085               	movwf	5
 21636  1A75  3F00               	moviw [0]fsr0
 21637  1A76  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21638  1A77  3F01               	moviw [1]fsr0
 21639  1A78  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21640  1A79  0020               	movlb	0	; select bank0
 21641  1A7A  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21642  1A7B  3E04               	addlw	4
 21643  1A7C  0086               	movwf	6
 21644  1A7D  3004               	movlw	4	; select bank8/9
 21645  1A7E  0087               	movwf	7
 21646  1A7F  3F40               	moviw [0]fsr1
 21647  1A80  0021               	movlb	1	; select bank1
 21648  1A81  00CE               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21649  1A82  3F41               	moviw [1]fsr1
 21650  1A83  00CF               	movwf	((??_rfid_comm_process_recharge+2)^(0+128)+1)
 21651  1A84  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21652  1A85  024F               	subwf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21653  1A86  1D03               	skipz
 21654  1A87  2A8A               	goto	u13085
 21655  1A88  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 21656  1A89  024E               	subwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21657  1A8A                     u13085:	
 21658  1A8A  1803               	skipnc
 21659  1A8B  2AD1               	goto	l14625
 21660                           
 21661                           ;rfid_demo.c: 134: {
 21662                           ;rfid_demo.c: 135: stpDec->Value=mainSystemData.transferMoney;
 21663  1A8C  300C               	movlw	12
 21664  1A8D  0084               	movwf	4
 21665  1A8E  30BF               	movlw	191
 21666  1A8F  0085               	movwf	5
 21667  1A90  3F00               	moviw [0]fsr0
 21668  1A91  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21669  1A92  3F01               	moviw [1]fsr0
 21670  1A93  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21671  1A94  3F02               	moviw [2]fsr0
 21672  1A95  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21673  1A96  3F03               	moviw [3]fsr0
 21674  1A97  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21675  1A98  0020               	movlb	0	; select bank0
 21676  1A99  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21677  1A9A  0086               	movwf	6
 21678  1A9B  3004               	movlw	4	; select bank8/9
 21679  1A9C  0087               	movwf	7
 21680  1A9D  0021               	movlb	1	; select bank1
 21681  1A9E  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 21682  1A9F  3FC0               	movwi [0]fsr1
 21683  1AA0  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21684  1AA1  3FC1               	movwi [1]fsr1
 21685  1AA2  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21686  1AA3  3FC2               	movwi [2]fsr1
 21687  1AA4  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21688  1AA5  3FC3               	movwi [3]fsr1
 21689                           
 21690                           ;rfid_demo.c: 136: stpDec->Times=mainSystemData.payTimes;
 21691  1AA6  3020               	movlw	32
 21692  1AA7  0086               	movwf	6
 21693  1AA8  30BF               	movlw	191
 21694  1AA9  0087               	movwf	7
 21695  1AAA  0020               	movlb	0	; select bank0
 21696  1AAB  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21697  1AAC  3E04               	addlw	4
 21698  1AAD  0084               	movwf	4
 21699  1AAE  3004               	movlw	4	; select bank8/9
 21700  1AAF  0085               	movwf	5
 21701  1AB0  3F40               	moviw [0]fsr1
 21702  1AB1  3F80               	movwi [0]fsr0
 21703  1AB2  3F41               	moviw [1]fsr1
 21704  1AB3  3F81               	movwi [1]fsr0
 21705                           
 21706                           ;rfid_demo.c: 137: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 21707  1AB4  3056               	movlw	86
 21708  1AB5  00AB               	movwf	crc_append@message
 21709  1AB6  3004               	movlw	4
 21710  1AB7  00AC               	movwf	crc_append@message+1
 21711  1AB8  3006               	movlw	6
 21712  1AB9  00AD               	movwf	crc_append@n
 21713  1ABA  01AE               	clrf	crc_append@n+1
 21714  1ABB  3194  2455  3198   	fcall	_crc_append
 21715                           
 21716                           ;rfid_demo.c: 138: piccResult = mifare_write(12, cardDecBuf,16);
 21717  1ABE  3056               	movlw	86
 21718  1ABF  0021               	movlb	1	; select bank1
 21719  1AC0  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21720  1AC1  0020               	movlb	0	; select bank0
 21721  1AC2  00E9               	movwf	mifare_write@buffer
 21722  1AC3  3010               	movlw	16
 21723  1AC4  0021               	movlb	1	; select bank1
 21724  1AC5  00CD               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 21725  1AC6  0020               	movlb	0	; select bank0
 21726  1AC7  00EA               	movwf	mifare_write@bufferSize
 21727  1AC8  300C               	movlw	12
 21728  1AC9  24B4  3198         	fcall	_mifare_write
 21729  1ACB  0021               	movlb	1	; select bank1
 21730  1ACC  00CE               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 21731  1ACD  00BB               	movwf	_piccResult^(0+128)
 21732                           
 21733                           ;rfid_demo.c: 139: if(piccResult!=STATUS_OK){
 21734  1ACE  083B               	movf	_piccResult^(0+128),w
 21735  1ACF  1D03               	btfss	3,2
 21736                           
 21737                           ;rfid_demo.c: 140: return 0;
 21738  1AD0  3400               	retlw	0
 21739  1AD1                     l14625:	
 21740                           
 21741                           ;rfid_demo.c: 141: }
 21742                           ;rfid_demo.c: 142: }
 21743                           ;rfid_demo.c: 143: __q31=stpInc->Value;
 21744  1AD1  0020               	movlb	0	; select bank0
 21745  1AD2  086E               	movf	rfid_comm_process_recharge@stpInc,w
 21746  1AD3  0086               	movwf	6
 21747  1AD4  3004               	movlw	4	; select bank8/9
 21748  1AD5  0087               	movwf	7
 21749  1AD6  3F40               	moviw [0]fsr1
 21750  1AD7  0021               	movlb	1	; select bank1
 21751  1AD8  00BE               	movwf	___q31^(0+128)
 21752  1AD9  3F41               	moviw [1]fsr1
 21753  1ADA  00BF               	movwf	(___q31+1)^(0+128)
 21754  1ADB  3F42               	moviw [2]fsr1
 21755  1ADC  00C0               	movwf	(___q31+2)^(0+128)
 21756  1ADD  3F43               	moviw [3]fsr1
 21757  1ADE  00C1               	movwf	(___q31+3)^(0+128)
 21758                           
 21759                           ;rfid_demo.c: 144: __q31=__q31-stpDec->Value;
 21760  1ADF  083E               	movf	___q31^(0+128),w
 21761  1AE0  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21762  1AE1  083F               	movf	(___q31+1)^(0+128),w
 21763  1AE2  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21764  1AE3  0840               	movf	(___q31+2)^(0+128),w
 21765  1AE4  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21766  1AE5  0841               	movf	(___q31+3)^(0+128),w
 21767  1AE6  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21768  1AE7  0020               	movlb	0	; select bank0
 21769  1AE8  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21770  1AE9  0086               	movwf	6
 21771  1AEA  3F40               	moviw [0]fsr1
 21772  1AEB  0021               	movlb	1	; select bank1
 21773  1AEC  00D0               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 21774  1AED  3F41               	moviw [1]fsr1
 21775  1AEE  00D1               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 21776  1AEF  3F42               	moviw [2]fsr1
 21777  1AF0  00D2               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 21778  1AF1  3F43               	moviw [3]fsr1
 21779  1AF2  00D3               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 21780  1AF3  09D0               	comf	(??_rfid_comm_process_recharge+4)^(0+128),f
 21781  1AF4  09D1               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 21782  1AF5  09D2               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 21783  1AF6  09D3               	comf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 21784  1AF7  0AD0               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 21785  1AF8  1903               	skipnz
 21786  1AF9  0AD1               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 21787  1AFA  1903               	skipnz
 21788  1AFB  0AD2               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 21789  1AFC  1903               	skipnz
 21790  1AFD  0AD3               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 21791  1AFE  0850               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 21792  1AFF  07CC               	addwf	??_rfid_comm_process_recharge^(0+128),f
 21793  1B00  0851               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 21794  1B01  3DCD               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 21795  1B02  0852               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 21796  1B03  3DCE               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 21797  1B04  0853               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 21798  1B05  3DCF               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 21799  1B06  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21800  1B07  00C1               	movwf	(___q31+3)^(0+128)
 21801  1B08  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21802  1B09  00C0               	movwf	(___q31+2)^(0+128)
 21803  1B0A  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21804  1B0B  00BF               	movwf	(___q31+1)^(0+128)
 21805  1B0C  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 21806  1B0D  00BE               	movwf	___q31^(0+128)
 21807                           
 21808                           ;rfid_demo.c: 145: if(__q31<=0){
 21809  1B0E  1BC1               	btfsc	(___q31+3)^(0+128),7
 21810  1B0F  2B1D               	goto	l14631
 21811  1B10  0841               	movf	(___q31+3)^(0+128),w
 21812  1B11  1D03               	btfss	3,2
 21813  1B12  2B22               	goto	l14635
 21814  1B13  0840               	movf	(___q31+2)^(0+128),w
 21815  1B14  1D03               	btfss	3,2
 21816  1B15  2B22               	goto	l14635
 21817  1B16  083F               	movf	(___q31+1)^(0+128),w
 21818  1B17  1D03               	btfss	3,2
 21819  1B18  2B22               	goto	l14635
 21820  1B19  3001               	movlw	1
 21821  1B1A  023E               	subwf	___q31^(0+128),w
 21822  1B1B  1803               	btfsc	3,0
 21823  1B1C  2B22               	goto	l14635
 21824  1B1D                     l14631:	
 21825                           
 21826                           ;rfid_demo.c: 146: CardError=CARD_NO_BALANCE;
 21827  1B1D  300E               	movlw	14
 21828  1B1E  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21829  1B1F  0022               	movlb	2	; select bank2
 21830  1B20  00A8               	movwf	_CardError^(0+256)
 21831                           
 21832                           ;rfid_demo.c: 147: return 0;
 21833  1B21  3400               	retlw	0
 21834  1B22                     l14635:	
 21835                           
 21836                           ;rfid_demo.c: 148: }
 21837                           ;rfid_demo.c: 149: if(__q31>mainSystemData.transferMoneyLimit){
 21838  1B22  3024               	movlw	36
 21839  1B23  0084               	movwf	4
 21840  1B24  30BF               	movlw	191
 21841  1B25  0085               	movwf	5
 21842  1B26  3F00               	moviw [0]fsr0
 21843  1B27  0021               	movlb	1	; select bank1
 21844  1B28  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21845  1B29  3F01               	moviw [1]fsr0
 21846  1B2A  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21847  1B2B  3F02               	moviw [2]fsr0
 21848  1B2C  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21849  1B2D  3F03               	moviw [3]fsr0
 21850  1B2E  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21851  1B2F  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21852  1B30  3A80               	xorlw	128
 21853  1B31  00D0               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 21854  1B32  0841               	movf	(___q31+3)^(0+128),w
 21855  1B33  3A80               	xorlw	128
 21856  1B34  0250               	subwf	(??_rfid_comm_process_recharge+4)^(0+128),w
 21857  1B35  1D03               	skipz
 21858  1B36  2B41               	goto	u13113
 21859  1B37  0840               	movf	(___q31+2)^(0+128),w
 21860  1B38  024E               	subwf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21861  1B39  1D03               	skipz
 21862  1B3A  2B41               	goto	u13113
 21863  1B3B  083F               	movf	(___q31+1)^(0+128),w
 21864  1B3C  024D               	subwf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21865  1B3D  1D03               	skipz
 21866  1B3E  2B41               	goto	u13113
 21867  1B3F  083E               	movf	___q31^(0+128),w
 21868  1B40  024C               	subwf	??_rfid_comm_process_recharge^(0+128),w
 21869  1B41                     u13113:	
 21870  1B41  1803               	skipnc
 21871  1B42  2B4F               	goto	l14639
 21872                           
 21873                           ;rfid_demo.c: 150: __q31=mainSystemData.transferMoneyLimit;
 21874  1B43  3024               	movlw	36
 21875  1B44  0084               	movwf	4
 21876  1B45  30BF               	movlw	191
 21877  1B46  0085               	movwf	5
 21878  1B47  3F00               	moviw [0]fsr0
 21879  1B48  00BE               	movwf	___q31^(0+128)
 21880  1B49  3F01               	moviw [1]fsr0
 21881  1B4A  00BF               	movwf	(___q31+1)^(0+128)
 21882  1B4B  3F02               	moviw [2]fsr0
 21883  1B4C  00C0               	movwf	(___q31+2)^(0+128)
 21884  1B4D  3F03               	moviw [3]fsr0
 21885  1B4E  00C1               	movwf	(___q31+3)^(0+128)
 21886  1B4F                     l14639:	
 21887                           
 21888                           ;rfid_demo.c: 151: }
 21889                           ;rfid_demo.c: 152: stpDec->Value += __q31;
 21890  1B4F  0020               	movlb	0	; select bank0
 21891  1B50  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21892  1B51  0086               	movwf	6
 21893  1B52  3004               	movlw	4	; select bank8/9
 21894  1B53  0087               	movwf	7
 21895  1B54  0021               	movlb	1	; select bank1
 21896  1B55  083E               	movf	___q31^(0+128),w
 21897  1B56  0781               	addwf	1,f
 21898  1B57  3141               	addfsr 1,1
 21899  1B58  083F               	movf	(___q31+1)^(0+128),w
 21900  1B59  3D81               	addwfc	1,f
 21901  1B5A  3141               	addfsr 1,1
 21902  1B5B  0840               	movf	(___q31+2)^(0+128),w
 21903  1B5C  3D81               	addwfc	1,f
 21904  1B5D  3141               	addfsr 1,1
 21905  1B5E  0841               	movf	(___q31+3)^(0+128),w
 21906  1B5F  3D81               	addwfc	1,f
 21907                           
 21908                           ;rfid_demo.c: 153: stpDec->Times+=1;
 21909  1B60  0020               	movlb	0	; select bank0
 21910  1B61  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21911  1B62  3E04               	addlw	4
 21912  1B63  0086               	movwf	6
 21913  1B64  3004               	movlw	4	; select bank8/9
 21914  1B65  0087               	movwf	7
 21915  1B66  3001               	movlw	1
 21916  1B67  0781               	addwf	1,f
 21917  1B68  3141               	addfsr 1,1
 21918  1B69  1803               	skipnc
 21919  1B6A  0A81               	incf	1,f
 21920                           
 21921                           ;rfid_demo.c: 154: __t16=stpDec->Times,
 21922                           ;rfid_demo.c: 155: crc_append(cardDecBuf,sizeof(st_cardValueStrucrtDef)-2);
 21923  1B6B  086F               	movf	rfid_comm_process_recharge@stpDec,w
 21924  1B6C  3E04               	addlw	4
 21925  1B6D  0086               	movwf	6
 21926  1B6E  3004               	movlw	4	; select bank8/9
 21927  1B6F  0087               	movwf	7
 21928  1B70  3F40               	moviw [0]fsr1
 21929  1B71  00F9               	movwf	___t16
 21930  1B72  3F41               	moviw [1]fsr1
 21931  1B73  00FA               	movwf	___t16+1
 21932  1B74  3056               	movlw	86
 21933  1B75  00AB               	movwf	crc_append@message
 21934  1B76  3004               	movlw	4
 21935  1B77  00AC               	movwf	crc_append@message+1
 21936  1B78  3006               	movlw	6
 21937  1B79  00AD               	movwf	crc_append@n
 21938  1B7A  01AE               	clrf	crc_append@n+1
 21939  1B7B  3194  2455  3198   	fcall	_crc_append
 21940                           
 21941                           ;rfid_demo.c: 158: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->transferMone
      +                          y));
 21942  1B7E  300C               	movlw	12
 21943  1B7F  0022               	movlb	2	; select bank2
 21944  1B80  00C7               	movwf	_flashOpStr^(0+256)
 21945  1B81  3002               	movlw	2
 21946  1B82  01C8               	clrf	(_flashOpStr+1)^(0+256)
 21947                           
 21948                           ;rfid_demo.c: 159: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 21949  1B83  0021               	movlb	1	; select bank1
 21950  1B84  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21951  1B85  0022               	movlb	2	; select bank2
 21952  1B86  00DB               	movwf	(_flashOpStr^(0+256)+20)
 21953                           
 21954                           ;rfid_demo.c: 160: flashOpStr.len=6;
 21955  1B87  3006               	movlw	6
 21956  1B88  00C9               	movwf	(_flashOpStr^(0+256)+2)
 21957  1B89  01CA               	clrf	(_flashOpStr^(0+256)+3)
 21958                           
 21959                           ;rfid_demo.c: 161: rtBalanceMoney=rtBalanceMoney+__q31;
 21960  1B8A  0021               	movlb	1	; select bank1
 21961  1B8B  0842               	movf	_rtBalanceMoney^(0+128),w	;volatile
 21962  1B8C  073E               	addwf	___q31^(0+128),w
 21963  1B8D  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21964  1B8E  0843               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 21965  1B8F  3D3F               	addwfc	(___q31+1)^(0+128),w
 21966  1B90  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21967  1B91  0844               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 21968  1B92  3D40               	addwfc	(___q31+2)^(0+128),w
 21969  1B93  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21970  1B94  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21971  1B95  3D41               	addwfc	(___q31+3)^(0+128),w
 21972  1B96  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21973  1B97  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21974  1B98  00C5               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 21975  1B99  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 21976  1B9A  00C4               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 21977  1B9B  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 21978  1B9C  00C3               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 21979  1B9D  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 21980  1B9E  00C2               	movwf	_rtBalanceMoney^(0+128)	;volatile
 21981                           
 21982                           ;rfid_demo.c: 162: if(rtBalanceMoney>=mainSystemData.maxBalanceLimit){
 21983  1B9F  3028               	movlw	40
 21984  1BA0  0084               	movwf	4
 21985  1BA1  30BF               	movlw	191
 21986  1BA2  0085               	movwf	5
 21987  1BA3  3F00               	moviw [0]fsr0
 21988  1BA4  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 21989  1BA5  3F01               	moviw [1]fsr0
 21990  1BA6  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 21991  1BA7  3F02               	moviw [2]fsr0
 21992  1BA8  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 21993  1BA9  3F03               	moviw [3]fsr0
 21994  1BAA  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 21995  1BAB  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 21996  1BAC  3A80               	xorlw	128
 21997  1BAD  00D0               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 21998  1BAE  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 21999  1BAF  3A80               	xorlw	128
 22000  1BB0  0250               	subwf	(??_rfid_comm_process_recharge+4)^(0+128),w
 22001  1BB1  1D03               	skipz
 22002  1BB2  2BBD               	goto	u13123
 22003  1BB3  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 22004  1BB4  0244               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 22005  1BB5  1D03               	skipz
 22006  1BB6  2BBD               	goto	u13123
 22007  1BB7  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 22008  1BB8  0243               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 22009  1BB9  1D03               	skipz
 22010  1BBA  2BBD               	goto	u13123
 22011  1BBB  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 22012  1BBC  0242               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 22013  1BBD                     u13123:	
 22014  1BBD  1C03               	skipc
 22015  1BBE  2BEB               	goto	l14665
 22016                           
 22017                           ;rfid_demo.c: 163: rtBalanceMoney=rtBalanceMoney-__q31;
 22018  1BBF  0842               	movf	_rtBalanceMoney^(0+128),w	;volatile
 22019  1BC0  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22020  1BC1  0843               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 22021  1BC2  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 22022  1BC3  0844               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 22023  1BC4  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 22024  1BC5  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 22025  1BC6  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 22026  1BC7  093E               	comf	___q31^(0+128),w
 22027  1BC8  00D0               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 22028  1BC9  093F               	comf	(___q31+1)^(0+128),w
 22029  1BCA  00D1               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 22030  1BCB  0940               	comf	(___q31+2)^(0+128),w
 22031  1BCC  00D2               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 22032  1BCD  0941               	comf	(___q31+3)^(0+128),w
 22033  1BCE  00D3               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 22034  1BCF  0AD0               	incf	(??_rfid_comm_process_recharge+4)^(0+128),f
 22035  1BD0  1903               	skipnz
 22036  1BD1  0AD1               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+1),f
 22037  1BD2  1903               	skipnz
 22038  1BD3  0AD2               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+2),f
 22039  1BD4  1903               	skipnz
 22040  1BD5  0AD3               	incf	((??_rfid_comm_process_recharge+4)^(0+128)+3),f
 22041  1BD6  0850               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 22042  1BD7  07CC               	addwf	??_rfid_comm_process_recharge^(0+128),f
 22043  1BD8  0851               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 22044  1BD9  3DCD               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 22045  1BDA  0852               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 22046  1BDB  3DCE               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 22047  1BDC  0853               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 22048  1BDD  3DCF               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 22049  1BDE  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 22050  1BDF  00C5               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 22051  1BE0  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 22052  1BE1  00C4               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 22053  1BE2  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 22054  1BE3  00C3               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 22055  1BE4  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 22056  1BE5  00C2               	movwf	_rtBalanceMoney^(0+128)	;volatile
 22057                           
 22058                           ;rfid_demo.c: 164: CardError=RECHAERGE_OVERFLOW;
 22059  1BE6  3014               	movlw	20
 22060  1BE7  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22061  1BE8  0022               	movlb	2	; select bank2
 22062  1BE9  00A8               	movwf	_CardError^(0+256)
 22063                           
 22064                           ;rfid_demo.c: 165: return 0;
 22065  1BEA  3400               	retlw	0
 22066  1BEB                     l14665:	
 22067                           
 22068                           ;rfid_demo.c: 166: };
 22069                           ;rfid_demo.c: 167: __q31=mainSystemData.transferMoney+__q31;
 22070  1BEB  0021               	movlb	1	; select bank1
 22071  1BEC  083E               	movf	___q31^(0+128),w
 22072  1BED  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22073  1BEE  083F               	movf	(___q31+1)^(0+128),w
 22074  1BEF  00CD               	movwf	(??_rfid_comm_process_recharge^(0+128)+1)
 22075  1BF0  0840               	movf	(___q31+2)^(0+128),w
 22076  1BF1  00CE               	movwf	(??_rfid_comm_process_recharge^(0+128)+2)
 22077  1BF2  0841               	movf	(___q31+3)^(0+128),w
 22078  1BF3  00CF               	movwf	(??_rfid_comm_process_recharge^(0+128)+3)
 22079  1BF4  300C               	movlw	12
 22080  1BF5  0084               	movwf	4
 22081  1BF6  30BF               	movlw	191
 22082  1BF7  0085               	movwf	5
 22083  1BF8  3F00               	moviw [0]fsr0
 22084  1BF9  00D0               	movwf	(??_rfid_comm_process_recharge+4)^(0+128)
 22085  1BFA  3F01               	moviw [1]fsr0
 22086  1BFB  00D1               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+1)
 22087  1BFC  3F02               	moviw [2]fsr0
 22088  1BFD  00D2               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+2)
 22089  1BFE  3F03               	moviw [3]fsr0
 22090  1BFF  00D3               	movwf	((??_rfid_comm_process_recharge+4)^(0+128)+3)
 22091  1C00  0850               	movf	(??_rfid_comm_process_recharge+4)^(0+128),w
 22092  1C01  07CC               	addwf	??_rfid_comm_process_recharge^(0+128),f
 22093  1C02  0851               	movf	(??_rfid_comm_process_recharge+5)^(0+128),w
 22094  1C03  3DCD               	addwfc	(??_rfid_comm_process_recharge^(0+128)+1),f
 22095  1C04  0852               	movf	(??_rfid_comm_process_recharge+6)^(0+128),w
 22096  1C05  3DCE               	addwfc	(??_rfid_comm_process_recharge^(0+128)+2),f
 22097  1C06  0853               	movf	(??_rfid_comm_process_recharge+7)^(0+128),w
 22098  1C07  3DCF               	addwfc	(??_rfid_comm_process_recharge^(0+128)+3),f
 22099  1C08  084F               	movf	(??_rfid_comm_process_recharge+3)^(0+128),w
 22100  1C09  00C1               	movwf	(___q31+3)^(0+128)
 22101  1C0A  084E               	movf	(??_rfid_comm_process_recharge+2)^(0+128),w
 22102  1C0B  00C0               	movwf	(___q31+2)^(0+128)
 22103  1C0C  084D               	movf	(??_rfid_comm_process_recharge+1)^(0+128),w
 22104  1C0D  00BF               	movwf	(___q31+1)^(0+128)
 22105  1C0E  084C               	movf	??_rfid_comm_process_recharge^(0+128),w
 22106  1C0F  00BE               	movwf	___q31^(0+128)
 22107                           
 22108                           ;rfid_demo.c: 168: m_mem_cpy_len((uint8_t*)(&flashOpStr.buf[0]),(uint8_t*)(&(__q31)),4);
 22109  1C10  304B               	movlw	low (_flashOpStr+4)
 22110  1C11  00F3               	movwf	m_mem_cpy_len@d
 22111  1C12  3001               	movlw	high (_flashOpStr+4)
 22112  1C13  00F4               	movwf	m_mem_cpy_len@d+1
 22113  1C14  30BE               	movlw	low ___q31
 22114  1C15  00F5               	movwf	m_mem_cpy_len@s
 22115  1C16  3000               	movlw	high ___q31
 22116  1C17  00F6               	movwf	m_mem_cpy_len@s+1
 22117  1C18  3004               	movlw	4
 22118  1C19  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22119  1C1A  00F7               	movwf	m_mem_cpy_len@len
 22120  1C1B  3197  2778  3198   	fcall	_m_mem_cpy_len
 22121                           
 22122                           ;rfid_demo.c: 169: m_mem_cpy_len((uint8_t*)(&flashOpStr.buf[4]),(uint8_t*)(&(__t16)),2);
 22123  1C1E  304F               	movlw	low (_flashOpStr+8)
 22124  1C1F  00F3               	movwf	m_mem_cpy_len@d
 22125  1C20  3001               	movlw	high (_flashOpStr+8)
 22126  1C21  00F4               	movwf	m_mem_cpy_len@d+1
 22127  1C22  3079               	movlw	low ___t16
 22128  1C23  00F5               	movwf	m_mem_cpy_len@s
 22129  1C24  3000               	movlw	high ___t16
 22130  1C25  00F6               	movwf	m_mem_cpy_len@s+1
 22131  1C26  3002               	movlw	2
 22132  1C27  0021               	movlb	1	; select bank1
 22133  1C28  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22134  1C29  00F7               	movwf	m_mem_cpy_len@len
 22135  1C2A  3197  2778  3198   	fcall	_m_mem_cpy_len
 22136                           
 22137                           ;rfid_demo.c: 170: ret=data_api_flash_process();
 22138  1C2D  3197  2793  3198   	fcall	_data_api_flash_process
 22139  1C30  0021               	movlb	1	; select bank1
 22140  1C31  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22141  1C32  0020               	movlb	0	; select bank0
 22142  1C33  00ED               	movwf	rfid_comm_process_recharge@ret
 22143                           
 22144                           ;rfid_demo.c: 171: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_B, 15, (st_Mifare
      +                          Key*) userKeyB, &PiccUid);
 22145  1C34  300F               	movlw	15
 22146  1C35  0021               	movlb	1	; select bank1
 22147  1C36  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22148  1C37  0020               	movlb	0	; select bank0
 22149  1C38  00CA               	movwf	picc_authenticate@blockAddr
 22150  1C39  30BC               	movlw	low _userKeyB
 22151  1C3A  00CB               	movwf	picc_authenticate@key
 22152  1C3B  3001               	movlw	high _userKeyB
 22153  1C3C  00CC               	movwf	picc_authenticate@key+1
 22154  1C3D  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 22155  1C3E  0021               	movlb	1	; select bank1
 22156  1C3F  00CD               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 22157  1C40  0020               	movlb	0	; select bank0
 22158  1C41  00CD               	movwf	picc_authenticate@uid
 22159  1C42  3061               	movlw	97
 22160  1C43  245B  3198         	fcall	_picc_authenticate
 22161  1C45  0021               	movlb	1	; select bank1
 22162  1C46  00CE               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 22163  1C47  00BB               	movwf	_piccResult^(0+128)
 22164                           
 22165                           ;rfid_demo.c: 172: piccResult = mifare_write(12, cardDecBuf, 16);
 22166  1C48  3056               	movlw	86
 22167  1C49  00CC               	movwf	??_rfid_comm_process_recharge^(0+128)
 22168  1C4A  0020               	movlb	0	; select bank0
 22169  1C4B  00E9               	movwf	mifare_write@buffer
 22170  1C4C  3010               	movlw	16
 22171  1C4D  0021               	movlb	1	; select bank1
 22172  1C4E  00CD               	movwf	(??_rfid_comm_process_recharge+1)^(0+128)
 22173  1C4F  0020               	movlb	0	; select bank0
 22174  1C50  00EA               	movwf	mifare_write@bufferSize
 22175  1C51  300C               	movlw	12
 22176  1C52  24B4  3198         	fcall	_mifare_write
 22177  1C54  0021               	movlb	1	; select bank1
 22178  1C55  00CE               	movwf	(??_rfid_comm_process_recharge+2)^(0+128)
 22179  1C56  00BB               	movwf	_piccResult^(0+128)
 22180                           
 22181                           ;rfid_demo.c: 173: if(piccResult!=STATUS_OK){
 22182  1C57  083B               	movf	_piccResult^(0+128),w
 22183  1C58  1D03               	btfss	3,2
 22184                           
 22185                           ;rfid_demo.c: 174: return 0;
 22186  1C59  3400               	retlw	0
 22187                           
 22188                           ;rfid_demo.c: 175: }
 22189                           ;rfid_demo.c: 176: return 1;
 22190  1C5A  3401               	retlw	1
 22191  1C5B                     __end_of_rfid_comm_process_recharge:	
 22192  1C5B                     __ptext67:	
 22193 ;; *************** function _picc_authenticate *****************
 22194 ;; Defined at:
 22195 ;;		line 288 in file "src/nfc/pal/mfrc522_picc.c"
 22196 ;; Parameters:    Size  Location     Type
 22197 ;;  command         1    wreg     unsigned char 
 22198 ;;  blockAddr       1   42[BANK0 ] unsigned char 
 22199 ;;  key             2   43[BANK0 ] PTR struct .
 22200 ;;		 -> userKeyB(6), defaultKeyA(6), 
 22201 ;;  uid             1   45[BANK0 ] PTR struct __PICC_UID
 22202 ;;		 -> PiccUid(12), 
 22203 ;; Auto vars:     Size  Location     Type
 22204 ;;  command         1   61[BANK0 ] unsigned char 
 22205 ;;  sendData       12   49[BANK0 ] unsigned char [12]
 22206 ;;  i               1   63[BANK0 ] unsigned char 
 22207 ;;  waitIRQ         1   62[BANK0 ] unsigned char 
 22208 ;; Return value:  Size  Location     Type
 22209 ;;                  1    wreg      enum E5489
 22210 ;; Registers used:
 22211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22212 ;; Tracked objects:
 22213 ;;		On entry : 0/0
 22214 ;;		On exit  : 0/0
 22215 ;;		Unchanged: 0/0
 22216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22217 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 22218 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0
 22219 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 22220 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 22221 ;;Total ram usage:       22 bytes
 22222 ;; Hardware stack levels used:    1
 22223 ;; Hardware stack levels required when called:    7
 22224 ;; This function calls:
 22225 ;;		_pcd_comm_with_picc
 22226 ;; This function is called by:
 22227 ;;		_rfid_comm_process_read_header
 22228 ;;		_rfid_comm_process_read_inc
 22229 ;;		_rfid_comm_process_read_dec
 22230 ;;		_rfid_comm_process_recharge
 22231 ;; This function uses a non-reentrant model
 22232 ;;
 22233                           
 22234                           
 22235                           ;psect for function _picc_authenticate
 22236  1C5B                     _picc_authenticate:	
 22237                           
 22238                           ;incstack = 0
 22239                           ; Regs used in _picc_authenticate: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22240                           ;picc_authenticate@command stored from wreg
 22241  1C5B  0020               	movlb	0	; select bank0
 22242  1C5C  00DD               	movwf	picc_authenticate@command
 22243                           
 22244                           ;mfrc522_picc.c: 289: uint8_t waitIRQ = 0x10;
 22245  1C5D  3010               	movlw	16
 22246  1C5E  00CE               	movwf	??_picc_authenticate
 22247  1C5F  00DE               	movwf	picc_authenticate@waitIRQ
 22248                           
 22249                           ;mfrc522_picc.c: 290: uint8_t i;
 22250                           ;mfrc522_picc.c: 291: uint8_t sendData[12];
 22251                           ;mfrc522_picc.c: 292: sendData[0] = command;
 22252  1C60  085D               	movf	picc_authenticate@command,w
 22253  1C61  00CE               	movwf	??_picc_authenticate
 22254  1C62  00D1               	movwf	picc_authenticate@sendData
 22255                           
 22256                           ;mfrc522_picc.c: 293: sendData[1] = blockAddr;
 22257  1C63  084A               	movf	picc_authenticate@blockAddr,w
 22258  1C64  00CE               	movwf	??_picc_authenticate
 22259  1C65  00D2               	movwf	picc_authenticate@sendData+1
 22260  1C66  3006               	movlw	6
 22261                           
 22262                           ;mfrc522_picc.c: 294: for (i = 0; i < MF_KEY_SIZE; i++) {
 22263  1C67  01DF               	clrf	picc_authenticate@i
 22264  1C68  025F               	subwf	picc_authenticate@i,w
 22265  1C69  1803               	btfsc	3,0
 22266  1C6A  2C86               	goto	l13609
 22267  1C6B                     l13603:	
 22268                           
 22269                           ;mfrc522_picc.c: 295: sendData[2 + i] = key->keyByte[i];
 22270  1C6B  084C               	movf	picc_authenticate@key+1,w
 22271  1C6C  00CF               	movwf	??_picc_authenticate+1
 22272  1C6D  084B               	movf	picc_authenticate@key,w
 22273  1C6E  00CE               	movwf	??_picc_authenticate
 22274  1C6F  085F               	movf	picc_authenticate@i,w
 22275  1C70  074E               	addwf	??_picc_authenticate,w
 22276  1C71  0084               	movwf	4
 22277  1C72  084F               	movf	??_picc_authenticate+1,w
 22278  1C73  1803               	skipnc
 22279  1C74  0A4F               	incf	??_picc_authenticate+1,w
 22280  1C75  0085               	movwf	5
 22281  1C76  0800               	movf	0,w	;code access
 22282  1C77  00D0               	movwf	??_picc_authenticate+2
 22283  1C78  085F               	movf	picc_authenticate@i,w
 22284  1C79  3E02               	addlw	2
 22285  1C7A  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 22286  1C7B  0086               	movwf	6
 22287  1C7C  0187               	clrf	7
 22288  1C7D  0850               	movf	??_picc_authenticate+2,w
 22289  1C7E  0081               	movwf	1
 22290  1C7F  3001               	movlw	1
 22291  1C80  00CE               	movwf	??_picc_authenticate
 22292  1C81  07DF               	addwf	picc_authenticate@i,f
 22293  1C82  3006               	movlw	6
 22294  1C83  025F               	subwf	picc_authenticate@i,w
 22295  1C84  1C03               	skipc
 22296  1C85  2C6B               	goto	l13603
 22297  1C86                     l13609:	
 22298  1C86  3004               	movlw	4
 22299                           
 22300                           ;mfrc522_picc.c: 296: }
 22301                           ;mfrc522_picc.c: 297: for (i = 0; i < 4; i++) {
 22302  1C87  01DF               	clrf	picc_authenticate@i
 22303  1C88  025F               	subwf	picc_authenticate@i,w
 22304  1C89  1803               	btfsc	3,0
 22305  1C8A  2CA2               	goto	l13621
 22306  1C8B                     l13615:	
 22307                           
 22308                           ;mfrc522_picc.c: 298: sendData[8 + i] = uid->uidByte[i];
 22309  1C8B  085F               	movf	picc_authenticate@i,w
 22310  1C8C  3E01               	addlw	1
 22311  1C8D  074D               	addwf	picc_authenticate@uid,w
 22312  1C8E  00CE               	movwf	??_picc_authenticate
 22313  1C8F  0086               	movwf	6
 22314  1C90  3001               	movlw	1	; select bank2/3
 22315  1C91  0087               	movwf	7
 22316  1C92  0801               	movf	1,w
 22317  1C93  00CF               	movwf	??_picc_authenticate+1
 22318  1C94  085F               	movf	picc_authenticate@i,w
 22319  1C95  3E08               	addlw	8
 22320  1C96  3E51               	addlw	(low (picc_authenticate@sendData| 0))& (0+255)
 22321  1C97  0086               	movwf	6
 22322  1C98  0187               	clrf	7
 22323  1C99  084F               	movf	??_picc_authenticate+1,w
 22324  1C9A  0081               	movwf	1
 22325  1C9B  3001               	movlw	1
 22326  1C9C  00CE               	movwf	??_picc_authenticate
 22327  1C9D  07DF               	addwf	picc_authenticate@i,f
 22328  1C9E  3004               	movlw	4
 22329  1C9F  025F               	subwf	picc_authenticate@i,w
 22330  1CA0  1C03               	skipc
 22331  1CA1  2C8B               	goto	l13615
 22332  1CA2                     l13621:	
 22333                           
 22334                           ;mfrc522_picc.c: 299: }
 22335                           ;mfrc522_picc.c: 300: return pcd_comm_with_picc(PCD_MFAuthent, waitIRQ, &sendData[0], si
      +                          zeof (sendData), (0), (0), (0), 0, 0);
 22336  1CA2  085E               	movf	picc_authenticate@waitIRQ,w
 22337  1CA3  00CE               	movwf	??_picc_authenticate
 22338  1CA4  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 22339  1CA5  3051               	movlw	low picc_authenticate@sendData
 22340  1CA6  00B2               	movwf	pcd_comm_with_picc@sbuf
 22341  1CA7  3000               	movlw	high picc_authenticate@sendData
 22342  1CA8  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 22343  1CA9  300C               	movlw	12
 22344  1CAA  00CF               	movwf	??_picc_authenticate+1
 22345  1CAB  00B4               	movwf	pcd_comm_with_picc@slen
 22346  1CAC  300E               	movlw	14
 22347  1CAD  01B5               	clrf	pcd_comm_with_picc@rbuf
 22348  1CAE  01B6               	clrf	pcd_comm_with_picc@rbuf+1
 22349  1CAF  01B7               	clrf	pcd_comm_with_picc@rlen
 22350  1CB0  01B8               	clrf	pcd_comm_with_picc@validBits
 22351  1CB1  01B9               	clrf	pcd_comm_with_picc@rxAlign
 22352  1CB2  01BA               	clrf	pcd_comm_with_picc@checkCRC
 22353  1CB3  2808               	ljmp	_pcd_comm_with_picc
 22354  1CB4                     __end_of_picc_authenticate:	
 22355  1CB4                     __ptext63:	
 22356 ;; *************** function _mifare_write *****************
 22357 ;; Defined at:
 22358 ;;		line 57 in file "src/nfc/pal/mfrc522_mifare.c"
 22359 ;; Parameters:    Size  Location     Type
 22360 ;;  blockAddr       1    wreg     unsigned char 
 22361 ;;  buffer          1   73[BANK0 ] PTR unsigned char 
 22362 ;;		 -> cardDecBuf(18), cardWriteBuf(18), 
 22363 ;;  bufferSize      1   74[BANK0 ] unsigned char 
 22364 ;; Auto vars:     Size  Location     Type
 22365 ;;  blockAddr       1    0[BANK1 ] unsigned char 
 22366 ;;  cmdBuffer       2    1[BANK1 ] unsigned char [2]
 22367 ;;  result          1    3[BANK1 ] enum E5268
 22368 ;; Return value:  Size  Location     Type
 22369 ;;                  1    wreg      enum E5489
 22370 ;; Registers used:
 22371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22372 ;; Tracked objects:
 22373 ;;		On entry : 0/0
 22374 ;;		On exit  : 0/0
 22375 ;;		Unchanged: 0/0
 22376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22377 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22378 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0
 22379 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22380 ;;      Totals:         0       4       4       0       0       0       0       0       0       0       0       0       
      +0
 22381 ;;Total ram usage:        8 bytes
 22382 ;; Hardware stack levels used:    1
 22383 ;; Hardware stack levels required when called:    8
 22384 ;; This function calls:
 22385 ;;		_pcd_mifare_transceive
 22386 ;; This function is called by:
 22387 ;;		_rfid_comm_process_read_header
 22388 ;;		_rfid_comm_process_recharge
 22389 ;; This function uses a non-reentrant model
 22390 ;;
 22391                           
 22392                           
 22393                           ;psect for function _mifare_write
 22394  1CB4                     _mifare_write:	
 22395                           
 22396                           ;incstack = 0
 22397                           ; Regs used in _mifare_write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22398                           ;mifare_write@blockAddr stored from wreg
 22399  1CB4  0021               	movlb	1	; select bank1
 22400  1CB5  00C8               	movwf	mifare_write@blockAddr^(0+128)
 22401                           
 22402                           ;mfrc522_mifare.c: 64: em_PcdStatusCode result;
 22403                           ;mfrc522_mifare.c: 65: if (buffer == (0) || bufferSize < 16)
 22404  1CB6  0020               	movlb	0	; select bank0
 22405  1CB7  0869               	movf	mifare_write@buffer,w
 22406  1CB8  1903               	btfsc	3,2
 22407  1CB9  3406               	retlw	6
 22408  1CBA  3010               	movlw	16
 22409  1CBB  026A               	subwf	mifare_write@bufferSize,w
 22410  1CBC  1C03               	btfss	3,0
 22411                           
 22412                           ;mfrc522_mifare.c: 66: {
 22413                           ;mfrc522_mifare.c: 67: return STATUS_INVALID;
 22414  1CBD  3406               	retlw	6
 22415                           
 22416                           ;mfrc522_mifare.c: 68: }
 22417                           ;mfrc522_mifare.c: 69: uint8_t cmdBuffer[2];
 22418                           ;mfrc522_mifare.c: 70: cmdBuffer[0] = PICC_CMD_MF_WRITE;
 22419  1CBE  30A0               	movlw	160
 22420  1CBF  00EB               	movwf	??_mifare_write
 22421  1CC0  0021               	movlb	1	; select bank1
 22422  1CC1  00C9               	movwf	mifare_write@cmdBuffer^(0+128)
 22423                           
 22424                           ;mfrc522_mifare.c: 71: cmdBuffer[1] = blockAddr;
 22425  1CC2  0848               	movf	mifare_write@blockAddr^(0+128),w
 22426  1CC3  0020               	movlb	0	; select bank0
 22427  1CC4  00EB               	movwf	??_mifare_write
 22428  1CC5  0021               	movlb	1	; select bank1
 22429  1CC6  00CA               	movwf	(mifare_write@cmdBuffer^(0+128)+1)
 22430                           
 22431                           ;mfrc522_mifare.c: 72: result = pcd_mifare_transceive(cmdBuffer, 2,0);
 22432  1CC7  30C9               	movlw	low mifare_write@cmdBuffer
 22433  1CC8  0020               	movlb	0	; select bank0
 22434  1CC9  00CA               	movwf	pcd_mifare_transceive@sendData
 22435  1CCA  3000               	movlw	high mifare_write@cmdBuffer
 22436  1CCB  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22437  1CCC  3002               	movlw	2
 22438  1CCD  00EB               	movwf	??_mifare_write
 22439  1CCE  00CC               	movwf	pcd_mifare_transceive@sendLen
 22440  1CCF  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22441  1CD0  24EF  3198         	fcall	_pcd_mifare_transceive
 22442  1CD2  0020               	movlb	0	; select bank0
 22443  1CD3  00EC               	movwf	??_mifare_write+1
 22444  1CD4  0021               	movlb	1	; select bank1
 22445  1CD5  00CB               	movwf	mifare_write@result^(0+128)
 22446                           
 22447                           ;mfrc522_mifare.c: 73: if (result != STATUS_OK)
 22448  1CD6  084B               	movf	mifare_write@result^(0+128),w
 22449  1CD7  1903               	btfsc	3,2
 22450  1CD8  2CDB               	goto	l13665
 22451                           
 22452                           ;mfrc522_mifare.c: 74: {
 22453                           ;mfrc522_mifare.c: 75: return result;
 22454  1CD9  084B               	movf	mifare_write@result^(0+128),w
 22455  1CDA  0008               	return
 22456  1CDB                     l13665:	
 22457                           
 22458                           ;mfrc522_mifare.c: 76: }
 22459                           ;mfrc522_mifare.c: 77: result = pcd_mifare_transceive(buffer, bufferSize,0);
 22460  1CDB  0020               	movlb	0	; select bank0
 22461  1CDC  0869               	movf	mifare_write@buffer,w
 22462  1CDD  00CA               	movwf	pcd_mifare_transceive@sendData
 22463  1CDE  3004               	movlw	4
 22464  1CDF  00CB               	movwf	pcd_mifare_transceive@sendData+1
 22465  1CE0  086A               	movf	mifare_write@bufferSize,w
 22466  1CE1  00EB               	movwf	??_mifare_write
 22467  1CE2  00CC               	movwf	pcd_mifare_transceive@sendLen
 22468  1CE3  01CD               	clrf	pcd_mifare_transceive@acceptTimeout
 22469  1CE4  24EF  3198         	fcall	_pcd_mifare_transceive
 22470  1CE6  0020               	movlb	0	; select bank0
 22471  1CE7  00EC               	movwf	??_mifare_write+1
 22472  1CE8  0021               	movlb	1	; select bank1
 22473  1CE9  00CB               	movwf	mifare_write@result^(0+128)
 22474                           
 22475                           ;mfrc522_mifare.c: 78: if (result != STATUS_OK)
 22476  1CEA  084B               	movf	mifare_write@result^(0+128),w
 22477  1CEB  1903               	btfsc	3,2
 22478  1CEC  3400               	retlw	0
 22479                           
 22480                           ;mfrc522_mifare.c: 79: {
 22481                           ;mfrc522_mifare.c: 80: return result;
 22482  1CED  084B               	movf	mifare_write@result^(0+128),w
 22483  1CEE  0008               	return
 22484  1CEF                     __end_of_mifare_write:	
 22485                           ;mfrc522_mifare.c: 81: }
 22486                           ;mfrc522_mifare.c: 82: return STATUS_OK;
 22487                           
 22488  1CEF                     __ptext64:	
 22489 ;; *************** function _pcd_mifare_transceive *****************
 22490 ;; Defined at:
 22491 ;;		line 127 in file "src/nfc/pal/mfrc522_mifare.c"
 22492 ;; Parameters:    Size  Location     Type
 22493 ;;  sendData        2   42[BANK0 ] PTR unsigned char 
 22494 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), cardDecBuf(18), 
 22495 ;;		 -> cardWriteBuf(18), 
 22496 ;;  sendLen         1   44[BANK0 ] unsigned char 
 22497 ;;  acceptTimeou    1   45[BANK0 ] unsigned char 
 22498 ;; Auto vars:     Size  Location     Type
 22499 ;;  cmdBuffer      18   51[BANK0 ] unsigned char [18]
 22500 ;;  result          1   72[BANK0 ] enum E5268
 22501 ;;  cmdBufferSiz    1   71[BANK0 ] unsigned char 
 22502 ;;  validBits       1   70[BANK0 ] unsigned char 
 22503 ;;  waitIRq         1   69[BANK0 ] unsigned char 
 22504 ;; Return value:  Size  Location     Type
 22505 ;;                  1    wreg      enum E5268
 22506 ;; Registers used:
 22507 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22508 ;; Tracked objects:
 22509 ;;		On entry : 0/0
 22510 ;;		On exit  : 0/0
 22511 ;;		Unchanged: 0/0
 22512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22513 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 22514 ;;      Locals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0
 22515 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22516 ;;      Totals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0
 22517 ;;Total ram usage:       31 bytes
 22518 ;; Hardware stack levels used:    1
 22519 ;; Hardware stack levels required when called:    7
 22520 ;; This function calls:
 22521 ;;		_m_mem_cpy_len
 22522 ;;		_mfrc522_hal_calculate_crc
 22523 ;;		_pcd_comm_with_picc
 22524 ;; This function is called by:
 22525 ;;		_mifare_write
 22526 ;;		_mifare_two_Step_helper
 22527 ;; This function uses a non-reentrant model
 22528 ;;
 22529                           
 22530                           
 22531                           ;psect for function _pcd_mifare_transceive
 22532  1CEF                     _pcd_mifare_transceive:	
 22533                           
 22534                           ;mfrc522_mifare.c: 134: em_PcdStatusCode result;
 22535                           ;mfrc522_mifare.c: 135: uint8_t cmdBuffer[18];
 22536                           ;mfrc522_mifare.c: 138: if (sendData == (0) || sendLen > 16)
 22537                           
 22538                           ;incstack = 0
 22539                           ; Regs used in _pcd_mifare_transceive: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22540  1CEF  0020               	movlb	0	; select bank0
 22541  1CF0  084A               	movf	pcd_mifare_transceive@sendData,w
 22542  1CF1  044B               	iorwf	pcd_mifare_transceive@sendData+1,w
 22543  1CF2  1903               	btfsc	3,2
 22544  1CF3  3406               	retlw	6
 22545  1CF4  3011               	movlw	17
 22546  1CF5  024C               	subwf	pcd_mifare_transceive@sendLen,w
 22547  1CF6  1803               	btfsc	3,0
 22548                           
 22549                           ;mfrc522_mifare.c: 139: {
 22550                           ;mfrc522_mifare.c: 140: return STATUS_INVALID;
 22551  1CF7  3406               	retlw	6
 22552                           
 22553                           ;mfrc522_mifare.c: 141: }
 22554                           ;mfrc522_mifare.c: 144: m_mem_cpy_len(cmdBuffer, sendData, sendLen);
 22555  1CF8  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22556  1CF9  00F3               	movwf	m_mem_cpy_len@d
 22557  1CFA  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22558  1CFB  00F4               	movwf	m_mem_cpy_len@d+1
 22559  1CFC  084B               	movf	pcd_mifare_transceive@sendData+1,w
 22560  1CFD  00F6               	movwf	m_mem_cpy_len@s+1
 22561  1CFE  084A               	movf	pcd_mifare_transceive@sendData,w
 22562  1CFF  00F5               	movwf	m_mem_cpy_len@s
 22563  1D00  084C               	movf	pcd_mifare_transceive@sendLen,w
 22564  1D01  00CE               	movwf	??_pcd_mifare_transceive
 22565  1D02  00F7               	movwf	m_mem_cpy_len@len
 22566  1D03  3197  2778  3198   	fcall	_m_mem_cpy_len
 22567                           
 22568                           ;mfrc522_mifare.c: 145: result = mfrc522_hal_calculate_crc(cmdBuffer, sendLen, &cmdBuffe
      +                          r[sendLen]);
 22569  1D06  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22570  1D07  0020               	movlb	0	; select bank0
 22571  1D08  00A6               	movwf	mfrc522_hal_calculate_crc@data
 22572  1D09  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22573  1D0A  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 22574  1D0B  084C               	movf	pcd_mifare_transceive@sendLen,w
 22575  1D0C  00CE               	movwf	??_pcd_mifare_transceive
 22576  1D0D  00A8               	movwf	mfrc522_hal_calculate_crc@length
 22577  1D0E  084C               	movf	pcd_mifare_transceive@sendLen,w
 22578  1D0F  3E53               	addlw	(low (pcd_mifare_transceive@cmdBuffer| 0))& (0+255)
 22579  1D10  00A9               	movwf	mfrc522_hal_calculate_crc@result
 22580  1D11  3000               	movlw	0
 22581  1D12  01AA               	clrf	mfrc522_hal_calculate_crc@result+1
 22582  1D13  255A  3198         	fcall	_mfrc522_hal_calculate_crc
 22583  1D15  0020               	movlb	0	; select bank0
 22584  1D16  00CF               	movwf	??_pcd_mifare_transceive+1
 22585  1D17  00E8               	movwf	pcd_mifare_transceive@result
 22586                           
 22587                           ;mfrc522_mifare.c: 146: if (result != STATUS_OK)
 22588  1D18  0868               	movf	pcd_mifare_transceive@result,w
 22589  1D19  1903               	btfsc	3,2
 22590  1D1A  2D1D               	goto	l13397
 22591                           
 22592                           ;mfrc522_mifare.c: 147: {
 22593                           ;mfrc522_mifare.c: 148: return result;
 22594  1D1B  0868               	movf	pcd_mifare_transceive@result,w
 22595  1D1C  0008               	return
 22596  1D1D                     l13397:	
 22597                           
 22598                           ;mfrc522_mifare.c: 149: }
 22599                           ;mfrc522_mifare.c: 150: sendLen += 2;
 22600  1D1D  3002               	movlw	2
 22601  1D1E  00CE               	movwf	??_pcd_mifare_transceive
 22602  1D1F  07CC               	addwf	pcd_mifare_transceive@sendLen,f
 22603                           
 22604                           ;mfrc522_mifare.c: 153: uint8_t waitIRq = 0x30;
 22605  1D20  3030               	movlw	48
 22606  1D21  00CE               	movwf	??_pcd_mifare_transceive
 22607  1D22  00E5               	movwf	pcd_mifare_transceive@waitIRq
 22608                           
 22609                           ;mfrc522_mifare.c: 154: uint8_t cmdBufferSize = sizeof(cmdBuffer);
 22610  1D23  3012               	movlw	18
 22611  1D24  00CE               	movwf	??_pcd_mifare_transceive
 22612  1D25  00E7               	movwf	pcd_mifare_transceive@cmdBufferSize
 22613                           
 22614                           ;mfrc522_mifare.c: 155: uint8_t validBits = 0;
 22615  1D26  01E6               	clrf	pcd_mifare_transceive@validBits
 22616                           
 22617                           ;mfrc522_mifare.c: 156: result = pcd_comm_with_picc(PCD_Transceive, waitIRq, cmdBuffer, 
      +                          sendLen, cmdBuffer, &cmdBufferSize, &validBits,0,0);
 22618  1D27  0865               	movf	pcd_mifare_transceive@waitIRq,w
 22619  1D28  00CE               	movwf	??_pcd_mifare_transceive
 22620  1D29  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 22621  1D2A  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22622  1D2B  00B2               	movwf	pcd_comm_with_picc@sbuf
 22623  1D2C  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22624  1D2D  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 22625  1D2E  084C               	movf	pcd_mifare_transceive@sendLen,w
 22626  1D2F  00CF               	movwf	??_pcd_mifare_transceive+1
 22627  1D30  00B4               	movwf	pcd_comm_with_picc@slen
 22628  1D31  3053               	movlw	low pcd_mifare_transceive@cmdBuffer
 22629  1D32  00B5               	movwf	pcd_comm_with_picc@rbuf
 22630  1D33  3000               	movlw	high pcd_mifare_transceive@cmdBuffer
 22631  1D34  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 22632  1D35  3067               	movlw	(low (pcd_mifare_transceive@cmdBufferSize| 0))& (0+255)
 22633  1D36  00D0               	movwf	??_pcd_mifare_transceive+2
 22634  1D37  00B7               	movwf	pcd_comm_with_picc@rlen
 22635  1D38  3066               	movlw	(low (pcd_mifare_transceive@validBits| 0))& (0+255)
 22636  1D39  00D1               	movwf	??_pcd_mifare_transceive+3
 22637  1D3A  00B8               	movwf	pcd_comm_with_picc@validBits
 22638  1D3B  300C               	movlw	12
 22639  1D3C  01B9               	clrf	pcd_comm_with_picc@rxAlign
 22640  1D3D  01BA               	clrf	pcd_comm_with_picc@checkCRC
 22641  1D3E  2008  3198         	fcall	_pcd_comm_with_picc
 22642  1D40  0020               	movlb	0	; select bank0
 22643  1D41  00D2               	movwf	??_pcd_mifare_transceive+4
 22644  1D42  00E8               	movwf	pcd_mifare_transceive@result
 22645                           
 22646                           ;mfrc522_mifare.c: 157: if (acceptTimeout && result == STATUS_TIMEOUT)
 22647  1D43  084D               	movf	pcd_mifare_transceive@acceptTimeout,w
 22648  1D44  1903               	btfsc	3,2
 22649  1D45  2D4A               	goto	l13415
 22650  1D46  3003               	movlw	3
 22651  1D47  0668               	xorwf	pcd_mifare_transceive@result,w
 22652  1D48  1903               	btfsc	3,2
 22653                           
 22654                           ;mfrc522_mifare.c: 158: {
 22655                           ;mfrc522_mifare.c: 159: return STATUS_OK;
 22656  1D49  3400               	retlw	0
 22657  1D4A                     l13415:	
 22658                           
 22659                           ;mfrc522_mifare.c: 160: }
 22660                           ;mfrc522_mifare.c: 161: if (result != STATUS_OK)
 22661  1D4A  0868               	movf	pcd_mifare_transceive@result,w
 22662  1D4B  1903               	btfsc	3,2
 22663  1D4C  2D4F               	goto	l13421
 22664                           
 22665                           ;mfrc522_mifare.c: 162: {
 22666                           ;mfrc522_mifare.c: 163: return result;
 22667  1D4D  0868               	movf	pcd_mifare_transceive@result,w
 22668  1D4E  0008               	return
 22669  1D4F                     l13421:	
 22670                           
 22671                           ;mfrc522_mifare.c: 164: }
 22672                           ;mfrc522_mifare.c: 166: if (cmdBufferSize != 1 || validBits != 4)
 22673  1D4F  0B67               	decfsz	pcd_mifare_transceive@cmdBufferSize,w
 22674  1D50  3401               	retlw	1
 22675  1D51  3004               	movlw	4
 22676  1D52  0666               	xorwf	pcd_mifare_transceive@validBits,w
 22677  1D53  1D03               	btfss	3,2
 22678                           
 22679                           ;mfrc522_mifare.c: 167: {
 22680                           ;mfrc522_mifare.c: 168: return STATUS_ERROR;
 22681  1D54  3401               	retlw	1
 22682                           
 22683                           ;mfrc522_mifare.c: 169: }
 22684                           ;mfrc522_mifare.c: 170: if (cmdBuffer[0] != MF_ACK)
 22685  1D55  300A               	movlw	10
 22686  1D56  0653               	xorwf	pcd_mifare_transceive@cmdBuffer,w
 22687  1D57  1D03               	btfss	3,2
 22688                           
 22689                           ;mfrc522_mifare.c: 171: {
 22690                           ;mfrc522_mifare.c: 172: return STATUS_MIFARE_NACK;
 22691  1D58  34FF               	retlw	255
 22692                           
 22693                           ;mfrc522_mifare.c: 173: }
 22694                           ;mfrc522_mifare.c: 174: return STATUS_OK;
 22695  1D59  3400               	retlw	0
 22696  1D5A                     __end_of_pcd_mifare_transceive:	
 22697  1D5A                     __ptext77:	
 22698 ;; *************** function _mfrc522_hal_calculate_crc *****************
 22699 ;; Defined at:
 22700 ;;		line 68 in file "src/nfc/hal/mfrc522_hal.c"
 22701 ;; Parameters:    Size  Location     Type
 22702 ;;  data            2    6[BANK0 ] PTR unsigned char 
 22703 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), mfapi_is_new_card_present@buf
      +ferATQA(2), 
 22704 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 22705 ;;		 -> NULL(0), 
 22706 ;;  length          1    8[BANK0 ] unsigned char 
 22707 ;;  result          2    9[BANK0 ] PTR unsigned char 
 22708 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_halt_a@buffer(4), picc_select@buffer(9), pcd_comm_with_picc@controlBuf
      +fer(2), 
 22709 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 22710 ;; Auto vars:     Size  Location     Type
 22711 ;;  i               2   15[BANK0 ] unsigned int 
 22712 ;;  t8              1   14[BANK0 ] unsigned char 
 22713 ;; Return value:  Size  Location     Type
 22714 ;;                  1    wreg      enum E5268
 22715 ;; Registers used:
 22716 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22717 ;; Tracked objects:
 22718 ;;		On entry : 0/0
 22719 ;;		On exit  : 0/0
 22720 ;;		Unchanged: 0/0
 22721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22722 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 22723 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 22724 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 22725 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 22726 ;;Total ram usage:       11 bytes
 22727 ;; Hardware stack levels used:    1
 22728 ;; Hardware stack levels required when called:    5
 22729 ;; This function calls:
 22730 ;;		_mfrc522_bal_read_reg
 22731 ;;		_mfrc522_bal_set_bit_reg
 22732 ;;		_mfrc522_bal_write_reg
 22733 ;;		_mfrc522_bal_write_reg_len
 22734 ;; This function is called by:
 22735 ;;		_pcd_comm_with_picc
 22736 ;;		_picc_select
 22737 ;;		_picc_halt_a
 22738 ;;		_mifare_read
 22739 ;;		_pcd_mifare_transceive
 22740 ;; This function uses a non-reentrant model
 22741 ;;
 22742                           
 22743                           
 22744                           ;psect for function _mfrc522_hal_calculate_crc
 22745  1D5A                     _mfrc522_hal_calculate_crc:	
 22746                           
 22747                           ;mfrc522_hal.c: 70: uint16_t i = 1847;
 22748                           
 22749                           ;incstack = 0
 22750                           ; Regs used in _mfrc522_hal_calculate_crc: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 22751  1D5A  3037               	movlw	55
 22752  1D5B  0020               	movlb	0	; select bank0
 22753  1D5C  00AF               	movwf	mfrc522_hal_calculate_crc@i
 22754  1D5D  3007               	movlw	7
 22755  1D5E  00B0               	movwf	mfrc522_hal_calculate_crc@i+1
 22756  1D5F  3001               	movlw	1
 22757                           
 22758                           ;mfrc522_hal.c: 71: uint8_t t8;
 22759                           ;mfrc522_hal.c: 72: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 22760  1D60  01F7               	clrf	mfrc522_bal_write_reg@x
 22761  1D61  21B7  3198         	fcall	_mfrc522_bal_write_reg
 22762                           
 22763                           ;mfrc522_hal.c: 73: mfrc522_bal_write_reg(DivIrqReg, 0x04);
 22764  1D63  3004               	movlw	4
 22765  1D64  0020               	movlb	0	; select bank0
 22766  1D65  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22767  1D66  00F7               	movwf	mfrc522_bal_write_reg@x
 22768  1D67  3005               	movlw	5
 22769  1D68  21B7  3198         	fcall	_mfrc522_bal_write_reg
 22770                           
 22771                           ;mfrc522_hal.c: 74: mfrc522_bal_set_bit_reg(FIFOLevelReg, 0x80);
 22772  1D6A  3080               	movlw	128
 22773  1D6B  0020               	movlb	0	; select bank0
 22774  1D6C  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22775  1D6D  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 22776  1D6E  300A               	movlw	10
 22777  1D6F  25F0  3198         	fcall	_mfrc522_bal_set_bit_reg
 22778                           
 22779                           ;mfrc522_hal.c: 75: mfrc522_bal_write_reg_len(FIFODataReg,data,length);
 22780  1D71  0020               	movlb	0	; select bank0
 22781  1D72  0827               	movf	mfrc522_hal_calculate_crc@data+1,w
 22782  1D73  00A1               	movwf	mfrc522_bal_write_reg_len@buf+1
 22783  1D74  0826               	movf	mfrc522_hal_calculate_crc@data,w
 22784  1D75  00A0               	movwf	mfrc522_bal_write_reg_len@buf
 22785  1D76  0828               	movf	mfrc522_hal_calculate_crc@length,w
 22786  1D77  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22787  1D78  00A2               	movwf	mfrc522_bal_write_reg_len@len
 22788  1D79  3009               	movlw	9
 22789  1D7A  2600  3198         	fcall	_mfrc522_bal_write_reg_len
 22790                           
 22791                           ;mfrc522_hal.c: 76: mfrc522_bal_write_reg(CommandReg, PCD_CalcCRC);
 22792  1D7C  3003               	movlw	3
 22793  1D7D  0020               	movlb	0	; select bank0
 22794  1D7E  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22795  1D7F  00F7               	movwf	mfrc522_bal_write_reg@x
 22796  1D80  3001               	movlw	1
 22797  1D81  21B7  3198         	fcall	_mfrc522_bal_write_reg
 22798  1D83                     l12631:	
 22799                           ;mfrc522_hal.c: 77: while(i)
 22800                           
 22801  1D83  0020               	movlb	0	; select bank0
 22802  1D84  082F               	movf	mfrc522_hal_calculate_crc@i,w
 22803  1D85  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 22804  1D86  1903               	btfsc	3,2
 22805  1D87  2D95               	goto	l12633
 22806                           
 22807                           ;mfrc522_hal.c: 78: {
 22808                           ;mfrc522_hal.c: 79: i--;
 22809  1D88  3001               	movlw	1
 22810  1D89  0020               	movlb	0	; select bank0
 22811  1D8A  02AF               	subwf	mfrc522_hal_calculate_crc@i,f
 22812  1D8B  3000               	movlw	0
 22813  1D8C  3BB0               	subwfb	mfrc522_hal_calculate_crc@i+1,f
 22814                           
 22815                           ;mfrc522_hal.c: 80: t8 = mfrc522_bal_read_reg(DivIrqReg);
 22816  1D8D  3005               	movlw	5
 22817  1D8E  25B9  3198         	fcall	_mfrc522_bal_read_reg
 22818  1D90  0020               	movlb	0	; select bank0
 22819  1D91  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22820  1D92  00AE               	movwf	mfrc522_hal_calculate_crc@t8
 22821                           
 22822                           ;mfrc522_hal.c: 81: if (t8 & 0x04)break;
 22823  1D93  1D2E               	btfss	mfrc522_hal_calculate_crc@t8,2
 22824  1D94  2D83               	goto	l12631
 22825  1D95                     l12633:	
 22826                           
 22827                           ;mfrc522_hal.c: 82: }
 22828                           ;mfrc522_hal.c: 83: if(i==0)return STATUS_TIMEOUT;
 22829  1D95  082F               	movf	mfrc522_hal_calculate_crc@i,w
 22830  1D96  0430               	iorwf	mfrc522_hal_calculate_crc@i+1,w
 22831  1D97  1903               	btfsc	3,2
 22832  1D98  3403               	retlw	3
 22833  1D99  3001               	movlw	1
 22834                           
 22835                           ;mfrc522_hal.c: 84: mfrc522_bal_write_reg(CommandReg, PCD_Idle);
 22836  1D9A  01F7               	clrf	mfrc522_bal_write_reg@x
 22837  1D9B  21B7  3198         	fcall	_mfrc522_bal_write_reg
 22838                           
 22839                           ;mfrc522_hal.c: 85: result[0] = mfrc522_bal_read_reg(CRCResultRegL);
 22840  1D9D  3022               	movlw	34
 22841  1D9E  25B9  3198         	fcall	_mfrc522_bal_read_reg
 22842  1DA0  0020               	movlb	0	; select bank0
 22843  1DA1  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22844  1DA2  0829               	movf	mfrc522_hal_calculate_crc@result,w
 22845  1DA3  0086               	movwf	6
 22846  1DA4  082A               	movf	mfrc522_hal_calculate_crc@result+1,w
 22847  1DA5  0087               	movwf	7
 22848  1DA6  082B               	movf	??_mfrc522_hal_calculate_crc,w
 22849  1DA7  0081               	movwf	1
 22850                           
 22851                           ;mfrc522_hal.c: 86: result[1] = mfrc522_bal_read_reg(CRCResultRegH);
 22852  1DA8  3021               	movlw	33
 22853  1DA9  25B9               	fcall	_mfrc522_bal_read_reg
 22854  1DAA  0020               	movlb	0	; select bank0
 22855  1DAB  00AB               	movwf	??_mfrc522_hal_calculate_crc
 22856  1DAC  0829               	movf	mfrc522_hal_calculate_crc@result,w
 22857  1DAD  3E01               	addlw	1
 22858  1DAE  00AC               	movwf	??_mfrc522_hal_calculate_crc+1
 22859  1DAF  3000               	movlw	0
 22860  1DB0  3D2A               	addwfc	mfrc522_hal_calculate_crc@result+1,w
 22861  1DB1  00AD               	movwf	??_mfrc522_hal_calculate_crc+2
 22862  1DB2  082C               	movf	??_mfrc522_hal_calculate_crc+1,w
 22863  1DB3  0086               	movwf	6
 22864  1DB4  082D               	movf	??_mfrc522_hal_calculate_crc+2,w
 22865  1DB5  0087               	movwf	7
 22866  1DB6  082B               	movf	??_mfrc522_hal_calculate_crc,w
 22867  1DB7  0081               	movwf	1
 22868                           
 22869                           ;mfrc522_hal.c: 87: return STATUS_OK;
 22870  1DB8  3400               	retlw	0
 22871  1DB9                     __end_of_mfrc522_hal_calculate_crc:	
 22872  1DB9                     __ptext102:	
 22873 ;; *************** function _mfrc522_bal_read_reg *****************
 22874 ;; Defined at:
 22875 ;;		line 75 in file "src/nfc/bal/mfrc522_bal.c"
 22876 ;; Parameters:    Size  Location     Type
 22877 ;;  reg             1    wreg     unsigned char 
 22878 ;; Auto vars:     Size  Location     Type
 22879 ;;  reg             1    0[BANK0 ] unsigned char 
 22880 ;;  x               1    1[BANK0 ] unsigned char 
 22881 ;; Return value:  Size  Location     Type
 22882 ;;                  1    wreg      unsigned char 
 22883 ;; Registers used:
 22884 ;;		wreg, status,2, status,0, pclath, cstack
 22885 ;; Tracked objects:
 22886 ;;		On entry : 0/0
 22887 ;;		On exit  : 0/0
 22888 ;;		Unchanged: 0/0
 22889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22891 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22892 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22893 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 22894 ;;Total ram usage:        3 bytes
 22895 ;; Hardware stack levels used:    1
 22896 ;; Hardware stack levels required when called:    3
 22897 ;; This function calls:
 22898 ;;		_mfrc522_bal_write_read_via_spi
 22899 ;; This function is called by:
 22900 ;;		_mfapi_pcd_init
 22901 ;;		_mfrc522_bal_set_bit_reg
 22902 ;;		_mfrc522_bal_clr_bit_reg
 22903 ;;		_mfrc522_hal_calculate_crc
 22904 ;;		_mfrc522_hal_reset_sf
 22905 ;;		_mfrc522_hal_antenna_on
 22906 ;;		_mfrc522_hal_get_antenna_gain
 22907 ;;		_pcd_comm_with_picc
 22908 ;;		_picc_select
 22909 ;; This function uses a non-reentrant model
 22910 ;;
 22911                           
 22912                           
 22913                           ;psect for function _mfrc522_bal_read_reg
 22914  1DB9                     _mfrc522_bal_read_reg:	
 22915                           
 22916                           ;incstack = 0
 22917                           ; Regs used in _mfrc522_bal_read_reg: [wreg+status,2+status,0+pclath+cstack]
 22918                           ;mfrc522_bal_read_reg@reg stored from wreg
 22919  1DB9  0020               	movlb	0	; select bank0
 22920  1DBA  00A0               	movwf	mfrc522_bal_read_reg@reg
 22921                           
 22922                           ;mfrc522_bal.c: 77: uint8_t x=0;
 22923  1DBB  01A1               	clrf	mfrc522_bal_read_reg@x
 22924                           
 22925                           ;mfrc522_bal.c: 78: do { LATCbits.LATC2 = 0; } while(0);;
 22926  1DBC  0022               	movlb	2	; select bank2
 22927  1DBD  110E               	bcf	14,2	;volatile
 22928                           
 22929                           ;mfrc522_bal.c: 79: do { LATCbits.LATC3 = 0; } while(0);;
 22930  1DBE  118E               	bcf	14,3	;volatile
 22931                           
 22932                           ;mfrc522_bal.c: 80: mfrc522_bal_write_read_via_spi(((reg<<1) & 0x7e) | 0x80);
 22933  1DBF  0020               	movlb	0	; select bank0
 22934  1DC0  3520               	lslf	mfrc522_bal_read_reg@reg,w
 22935  1DC1  397E               	andlw	126
 22936  1DC2  3880               	iorlw	128
 22937  1DC3  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 22938                           
 22939                           ;mfrc522_bal.c: 81: x=mfrc522_bal_write_read_via_spi(0x00);
 22940  1DC5  3000               	movlw	0
 22941  1DC6  25CF               	fcall	_mfrc522_bal_write_read_via_spi
 22942  1DC7  00F7               	movwf	??_mfrc522_bal_read_reg
 22943  1DC8  0020               	movlb	0	; select bank0
 22944  1DC9  00A1               	movwf	mfrc522_bal_read_reg@x
 22945                           
 22946                           ;mfrc522_bal.c: 82: do { LATCbits.LATC2 = 1; } while(0);;
 22947  1DCA  0022               	movlb	2	; select bank2
 22948  1DCB  150E               	bsf	14,2	;volatile
 22949                           
 22950                           ;mfrc522_bal.c: 83: return x;
 22951  1DCC  0020               	movlb	0	; select bank0
 22952  1DCD  0821               	movf	mfrc522_bal_read_reg@x,w
 22953  1DCE  0008               	return
 22954  1DCF                     __end_of_mfrc522_bal_read_reg:	
 22955  1DCF                     __ptext103:	
 22956 ;; *************** function _mfrc522_bal_write_read_via_spi *****************
 22957 ;; Defined at:
 22958 ;;		line 19 in file "src/nfc/bal/mfrc522_bal.c"
 22959 ;; Parameters:    Size  Location     Type
 22960 ;;  x               1    wreg     unsigned char 
 22961 ;; Auto vars:     Size  Location     Type
 22962 ;;  x               1    4[COMMON] unsigned char 
 22963 ;;  i               1    6[COMMON] unsigned char 
 22964 ;;  rb              1    5[COMMON] unsigned char 
 22965 ;; Return value:  Size  Location     Type
 22966 ;;                  1    wreg      unsigned char 
 22967 ;; Registers used:
 22968 ;;		wreg, status,2, status,0
 22969 ;; Tracked objects:
 22970 ;;		On entry : 0/0
 22971 ;;		On exit  : 0/0
 22972 ;;		Unchanged: 0/0
 22973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 22974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22975 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22976 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22977 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 22978 ;;Total ram usage:        4 bytes
 22979 ;; Hardware stack levels used:    1
 22980 ;; Hardware stack levels required when called:    2
 22981 ;; This function calls:
 22982 ;;		Nothing
 22983 ;; This function is called by:
 22984 ;;		_mfrc522_bal_write_reg
 22985 ;;		_mfrc522_bal_write_reg_len
 22986 ;;		_mfrc522_bal_read_reg
 22987 ;;		_mfrc522_bal_read_fifo_len_ex
 22988 ;; This function uses a non-reentrant model
 22989 ;;
 22990                           
 22991                           
 22992                           ;psect for function _mfrc522_bal_write_read_via_spi
 22993  1DCF                     _mfrc522_bal_write_read_via_spi:	
 22994                           
 22995                           ;incstack = 0
 22996                           ; Regs used in _mfrc522_bal_write_read_via_spi: [wreg+status,2+status,0]
 22997                           ;mfrc522_bal_write_read_via_spi@x stored from wreg
 22998  1DCF  00F4               	movwf	mfrc522_bal_write_read_via_spi@x
 22999  1DD0  3008               	movlw	8
 23000                           
 23001                           ;mfrc522_bal.c: 21: uint8_t i;
 23002                           ;mfrc522_bal.c: 22: uint8_t rb=0;
 23003  1DD1  01F5               	clrf	mfrc522_bal_write_read_via_spi@rb
 23004                           
 23005                           ;mfrc522_bal.c: 23: for(i=0;i<8;i++)
 23006  1DD2  01F6               	clrf	mfrc522_bal_write_read_via_spi@i
 23007  1DD3  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 23008  1DD4  1803               	btfsc	3,0
 23009  1DD5  2DEC               	goto	l2032
 23010  1DD6                     l2021:	
 23011                           ;mfrc522_bal.c: 24: {
 23012                           ;mfrc522_bal.c: 25: do { LATCbits.LATC3 = 0; } while(0);;
 23013                           
 23014  1DD6  0022               	movlb	2	; select bank2
 23015  1DD7  118E               	bcf	14,3	;volatile
 23016                           
 23017                           ;mfrc522_bal.c: 27: if(x&0x80){
 23018  1DD8  1FF4               	btfss	mfrc522_bal_write_read_via_spi@x,7
 23019  1DD9  2DDC               	goto	l2027
 23020                           
 23021                           ;mfrc522_bal.c: 28: do { LATCbits.LATC4 = 1; } while(0);;
 23022  1DDA  160E               	bsf	14,4	;volatile
 23023                           
 23024                           ;mfrc522_bal.c: 29: }
 23025  1DDB  2DDD               	goto	l2029
 23026  1DDC                     l2027:	
 23027                           ;mfrc522_bal.c: 30: else{
 23028                           ;mfrc522_bal.c: 31: do { LATCbits.LATC4 = 0; } while(0);;
 23029                           
 23030  1DDC  120E               	bcf	14,4	;volatile
 23031  1DDD                     l2029:	
 23032                           ;mfrc522_bal.c: 32: }
 23033                           ;mfrc522_bal.c: 33: do { LATCbits.LATC3 = 1; } while(0);;
 23034                           
 23035  1DDD  158E               	bsf	14,3	;volatile
 23036                           
 23037                           ;mfrc522_bal.c: 34: x<<=1;
 23038  1DDE  1003               	clrc
 23039  1DDF  0DF4               	rlf	mfrc522_bal_write_read_via_spi@x,f
 23040                           
 23041                           ;mfrc522_bal.c: 36: rb<<=1;
 23042  1DE0  1003               	clrc
 23043  1DE1  0DF5               	rlf	mfrc522_bal_write_read_via_spi@rb,f
 23044                           
 23045                           ;mfrc522_bal.c: 37: if(PORTCbits.RC5)
 23046  1DE2  0020               	movlb	0	; select bank0
 23047  1DE3  1A8E               	btfsc	14,5	;volatile
 23048                           
 23049                           ;mfrc522_bal.c: 38: rb|=1;
 23050  1DE4  1475               	bsf	mfrc522_bal_write_read_via_spi@rb,0
 23051  1DE5  3001               	movlw	1
 23052  1DE6  00F3               	movwf	??_mfrc522_bal_write_read_via_spi
 23053  1DE7  07F6               	addwf	mfrc522_bal_write_read_via_spi@i,f
 23054  1DE8  3008               	movlw	8
 23055  1DE9  0276               	subwf	mfrc522_bal_write_read_via_spi@i,w
 23056  1DEA  1C03               	skipc
 23057  1DEB  2DD6               	goto	l2021
 23058  1DEC                     l2032:	
 23059                           ;mfrc522_bal.c: 39: }
 23060                           ;mfrc522_bal.c: 40: do { LATCbits.LATC3 = 0; } while(0);;
 23061                           
 23062  1DEC  0022               	movlb	2	; select bank2
 23063  1DED  118E               	bcf	14,3	;volatile
 23064                           
 23065                           ;mfrc522_bal.c: 41: return rb;
 23066  1DEE  0875               	movf	mfrc522_bal_write_read_via_spi@rb,w
 23067  1DEF  0008               	return
 23068  1DF0                     __end_of_mfrc522_bal_write_read_via_spi:	
 23069  1DF0                     __ptext97:	
 23070 ;; *************** function _mfrc522_bal_set_bit_reg *****************
 23071 ;; Defined at:
 23072 ;;		line 134 in file "src/nfc/bal/mfrc522_bal.c"
 23073 ;; Parameters:    Size  Location     Type
 23074 ;;  reg             1    wreg     unsigned char 
 23075 ;;  bits            1    2[BANK0 ] unsigned char 
 23076 ;; Auto vars:     Size  Location     Type
 23077 ;;  reg             1    5[BANK0 ] unsigned char 
 23078 ;;  tmp             1    4[BANK0 ] unsigned char 
 23079 ;; Return value:  Size  Location     Type
 23080 ;;                  1    wreg      void 
 23081 ;; Registers used:
 23082 ;;		wreg, status,2, status,0, pclath, cstack
 23083 ;; Tracked objects:
 23084 ;;		On entry : 0/0
 23085 ;;		On exit  : 0/0
 23086 ;;		Unchanged: 0/0
 23087 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23088 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23089 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23090 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23091 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23092 ;;Total ram usage:        4 bytes
 23093 ;; Hardware stack levels used:    1
 23094 ;; Hardware stack levels required when called:    4
 23095 ;; This function calls:
 23096 ;;		_mfrc522_bal_read_reg
 23097 ;;		_mfrc522_bal_write_reg
 23098 ;; This function is called by:
 23099 ;;		_mfrc522_hal_calculate_crc
 23100 ;;		_mfrc522_hal_set_antenna_gain
 23101 ;;		_pcd_comm_with_picc
 23102 ;; This function uses a non-reentrant model
 23103 ;;
 23104                           
 23105                           
 23106                           ;psect for function _mfrc522_bal_set_bit_reg
 23107  1DF0                     _mfrc522_bal_set_bit_reg:	
 23108                           
 23109                           ;incstack = 0
 23110                           ; Regs used in _mfrc522_bal_set_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 23111                           ;mfrc522_bal_set_bit_reg@reg stored from wreg
 23112  1DF0  0020               	movlb	0	; select bank0
 23113  1DF1  00A5               	movwf	mfrc522_bal_set_bit_reg@reg
 23114                           
 23115                           ;mfrc522_bal.c: 136: uint8_t tmp = 0x0;
 23116  1DF2  01A4               	clrf	mfrc522_bal_set_bit_reg@tmp
 23117                           
 23118                           ;mfrc522_bal.c: 137: tmp = mfrc522_bal_read_reg(reg);
 23119  1DF3  25B9  3198         	fcall	_mfrc522_bal_read_reg
 23120  1DF5  0020               	movlb	0	; select bank0
 23121  1DF6  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 23122  1DF7  00A4               	movwf	mfrc522_bal_set_bit_reg@tmp
 23123                           
 23124                           ;mfrc522_bal.c: 138: tmp|=bits;
 23125  1DF8  0822               	movf	mfrc522_bal_set_bit_reg@bits,w
 23126  1DF9  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 23127  1DFA  04A4               	iorwf	mfrc522_bal_set_bit_reg@tmp,f
 23128                           
 23129                           ;mfrc522_bal.c: 139: mfrc522_bal_write_reg(reg,tmp);
 23130  1DFB  0824               	movf	mfrc522_bal_set_bit_reg@tmp,w
 23131  1DFC  00A3               	movwf	??_mfrc522_bal_set_bit_reg
 23132  1DFD  00F7               	movwf	mfrc522_bal_write_reg@x
 23133  1DFE  0825               	movf	mfrc522_bal_set_bit_reg@reg,w
 23134  1DFF  29B7               	ljmp	_mfrc522_bal_write_reg
 23135  1E00                     __end_of_mfrc522_bal_set_bit_reg:	
 23136  1E00                     __ptext78:	
 23137 ;; *************** function _mfrc522_bal_write_reg_len *****************
 23138 ;; Defined at:
 23139 ;;		line 59 in file "src/nfc/bal/mfrc522_bal.c"
 23140 ;; Parameters:    Size  Location     Type
 23141 ;;  reg             1    wreg     unsigned char 
 23142 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 23143 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_authenticate@sendData(12), picc_halt_a@buffer(4), picc_select@buffer(9
      +), 
 23144 ;;		 -> picc_req_a_or_wakeup_a@__cmd(1), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(18), cardIncBuf(18), 
 23145 ;;		 -> cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 23146 ;;  len             1    2[BANK0 ] unsigned char 
 23147 ;; Auto vars:     Size  Location     Type
 23148 ;;  reg             1    3[BANK0 ] unsigned char 
 23149 ;;  i               1    4[BANK0 ] unsigned char 
 23150 ;; Return value:  Size  Location     Type
 23151 ;;                  1    wreg      void 
 23152 ;; Registers used:
 23153 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23154 ;; Tracked objects:
 23155 ;;		On entry : 0/0
 23156 ;;		On exit  : 0/0
 23157 ;;		Unchanged: 0/0
 23158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23159 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23160 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23161 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23162 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0
 23163 ;;Total ram usage:        6 bytes
 23164 ;; Hardware stack levels used:    1
 23165 ;; Hardware stack levels required when called:    3
 23166 ;; This function calls:
 23167 ;;		_mfrc522_bal_write_read_via_spi
 23168 ;; This function is called by:
 23169 ;;		_mfrc522_hal_calculate_crc
 23170 ;;		_pcd_comm_with_picc
 23171 ;; This function uses a non-reentrant model
 23172 ;;
 23173                           
 23174                           
 23175                           ;psect for function _mfrc522_bal_write_reg_len
 23176  1E00                     _mfrc522_bal_write_reg_len:	
 23177                           
 23178                           ;incstack = 0
 23179                           ; Regs used in _mfrc522_bal_write_reg_len: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 23180                           ;mfrc522_bal_write_reg_len@reg stored from wreg
 23181  1E00  0020               	movlb	0	; select bank0
 23182  1E01  00A3               	movwf	mfrc522_bal_write_reg_len@reg
 23183                           
 23184                           ;mfrc522_bal.c: 61: uint8_t i;
 23185                           ;mfrc522_bal.c: 62: do { LATCbits.LATC2 = 0; } while(0);;
 23186  1E02  0022               	movlb	2	; select bank2
 23187  1E03  110E               	bcf	14,2	;volatile
 23188                           
 23189                           ;mfrc522_bal.c: 63: do { LATCbits.LATC3 = 0; } while(0);;
 23190  1E04  118E               	bcf	14,3	;volatile
 23191                           
 23192                           ;mfrc522_bal.c: 64: mfrc522_bal_write_read_via_spi((reg<<1) & 0x7e);
 23193  1E05  0020               	movlb	0	; select bank0
 23194  1E06  3523               	lslf	mfrc522_bal_write_reg_len@reg,w
 23195  1E07  397E               	andlw	126
 23196  1E08  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 23197                           
 23198                           ;mfrc522_bal.c: 65: for(i=0;i<len;i++)
 23199  1E0A  0020               	movlb	0	; select bank0
 23200  1E0B  01A4               	clrf	mfrc522_bal_write_reg_len@i
 23201  1E0C                     l12357:	
 23202  1E0C  0822               	movf	mfrc522_bal_write_reg_len@len,w
 23203  1E0D  0224               	subwf	mfrc522_bal_write_reg_len@i,w
 23204  1E0E  1803               	btfsc	3,0
 23205  1E0F  2E20               	goto	l2053
 23206                           
 23207                           ;mfrc522_bal.c: 66: {
 23208                           ;mfrc522_bal.c: 67: mfrc522_bal_write_read_via_spi(*buf++);
 23209  1E10  0820               	movf	mfrc522_bal_write_reg_len@buf,w
 23210  1E11  0086               	movwf	6
 23211  1E12  0821               	movf	mfrc522_bal_write_reg_len@buf+1,w
 23212  1E13  0087               	movwf	7
 23213  1E14  0801               	movf	1,w
 23214  1E15  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 23215  1E17  3001               	movlw	1
 23216  1E18  0020               	movlb	0	; select bank0
 23217  1E19  07A0               	addwf	mfrc522_bal_write_reg_len@buf,f
 23218  1E1A  3000               	movlw	0
 23219  1E1B  3DA1               	addwfc	mfrc522_bal_write_reg_len@buf+1,f
 23220  1E1C  3001               	movlw	1
 23221  1E1D  00F7               	movwf	??_mfrc522_bal_write_reg_len
 23222  1E1E  07A4               	addwf	mfrc522_bal_write_reg_len@i,f
 23223  1E1F  2E0C               	goto	l12357
 23224  1E20                     l2053:	
 23225                           ;mfrc522_bal.c: 68: }
 23226                           ;mfrc522_bal.c: 69: do { LATCbits.LATC2 = 1; } while(0);;
 23227                           
 23228  1E20  0022               	movlb	2	; select bank2
 23229  1E21  150E               	bsf	14,2	;volatile
 23230  1E22  0008               	return
 23231  1E23                     __end_of_mfrc522_bal_write_reg_len:	
 23232  1E23                     __ptext99:	
 23233 ;; *************** function _mfrc522_hal_reset_sf *****************
 23234 ;; Defined at:
 23235 ;;		line 128 in file "src/nfc/hal/mfrc522_hal.c"
 23236 ;; Parameters:    Size  Location     Type
 23237 ;;		None
 23238 ;; Auto vars:     Size  Location     Type
 23239 ;;		None
 23240 ;; Return value:  Size  Location     Type
 23241 ;;                  1    wreg      void 
 23242 ;; Registers used:
 23243 ;;		wreg, status,2, status,0, pclath, cstack
 23244 ;; Tracked objects:
 23245 ;;		On entry : 0/0
 23246 ;;		On exit  : 0/0
 23247 ;;		Unchanged: 0/0
 23248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23251 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23252 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23253 ;;Total ram usage:        1 bytes
 23254 ;; Hardware stack levels used:    1
 23255 ;; Hardware stack levels required when called:    4
 23256 ;; This function calls:
 23257 ;;		_mfrc522_bal_read_reg
 23258 ;;		_mfrc522_bal_write_reg
 23259 ;; This function is called by:
 23260 ;;		_mfrc522_hal_init
 23261 ;; This function uses a non-reentrant model
 23262 ;;
 23263                           
 23264                           
 23265                           ;psect for function _mfrc522_hal_reset_sf
 23266  1E23                     _mfrc522_hal_reset_sf:	
 23267                           
 23268                           ;mfrc522_hal.c: 130: mfrc522_bal_write_reg(CommandReg, PCD_SoftReset);
 23269                           
 23270                           ;incstack = 0
 23271                           ; Regs used in _mfrc522_hal_reset_sf: [wreg+status,2+status,0+pclath+cstack]
 23272  1E23  300F               	movlw	15
 23273  1E24  0020               	movlb	0	; select bank0
 23274  1E25  00A2               	movwf	??_mfrc522_hal_reset_sf
 23275  1E26  00F7               	movwf	mfrc522_bal_write_reg@x
 23276  1E27  3001               	movlw	1
 23277  1E28  21B7  3198         	fcall	_mfrc522_bal_write_reg
 23278  1E2A                     l13771:	
 23279                           ;mfrc522_hal.c: 133: {
 23280                           
 23281                           ;mfrc522_hal.c: 131: ;;
 23282                           ;mfrc522_hal.c: 132: while (mfrc522_bal_read_reg(CommandReg) & (1<<4))
 23283                           
 23284  1E2A  3001               	movlw	1
 23285  1E2B  25B9  3198         	fcall	_mfrc522_bal_read_reg
 23286  1E2D  3910               	andlw	16
 23287  1E2E  1903               	btfsc	3,2
 23288  1E2F  0008               	return
 23289  1E30  2E2A               	goto	l13771
 23290  1E31                     __end_of_mfrc522_hal_reset_sf:	
 23291  1E31                     __ptext95:	
 23292 ;; *************** function _mfrc522_hal_set_antenna_gain *****************
 23293 ;; Defined at:
 23294 ;;		line 159 in file "src/nfc/hal/mfrc522_hal.c"
 23295 ;; Parameters:    Size  Location     Type
 23296 ;;  gain            1    wreg     unsigned char 
 23297 ;; Auto vars:     Size  Location     Type
 23298 ;;  gain            1    7[BANK0 ] unsigned char 
 23299 ;; Return value:  Size  Location     Type
 23300 ;;                  1    wreg      void 
 23301 ;; Registers used:
 23302 ;;		wreg, status,2, status,0, pclath, cstack
 23303 ;; Tracked objects:
 23304 ;;		On entry : 0/0
 23305 ;;		On exit  : 0/0
 23306 ;;		Unchanged: 0/0
 23307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23310 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23311 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23312 ;;Total ram usage:        2 bytes
 23313 ;; Hardware stack levels used:    1
 23314 ;; Hardware stack levels required when called:    5
 23315 ;; This function calls:
 23316 ;;		_mfrc522_bal_clr_bit_reg
 23317 ;;		_mfrc522_bal_set_bit_reg
 23318 ;;		_mfrc522_hal_get_antenna_gain
 23319 ;; This function is called by:
 23320 ;;		_mfrc522_hal_init
 23321 ;; This function uses a non-reentrant model
 23322 ;;
 23323                           
 23324                           
 23325                           ;psect for function _mfrc522_hal_set_antenna_gain
 23326  1E31                     _mfrc522_hal_set_antenna_gain:	
 23327                           
 23328                           ;incstack = 0
 23329                           ; Regs used in _mfrc522_hal_set_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 23330                           ;mfrc522_hal_set_antenna_gain@gain stored from wreg
 23331  1E31  0020               	movlb	0	; select bank0
 23332  1E32  00A7               	movwf	mfrc522_hal_set_antenna_gain@gain
 23333                           
 23334                           ;mfrc522_hal.c: 161: if (mfrc522_hal_get_antenna_gain() != gain)
 23335  1E33  2656  3198         	fcall	_mfrc522_hal_get_antenna_gain
 23336  1E35  0020               	movlb	0	; select bank0
 23337  1E36  0627               	xorwf	mfrc522_hal_set_antenna_gain@gain,w
 23338  1E37  1903               	skipnz
 23339  1E38  0008               	return
 23340                           
 23341                           ;mfrc522_hal.c: 162: {
 23342                           ;mfrc522_hal.c: 163: mfrc522_bal_clr_bit_reg(RFCfgReg, (0x07<<4));
 23343  1E39  3070               	movlw	112
 23344  1E3A  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 23345  1E3B  00A2               	movwf	mfrc522_bal_clr_bit_reg@bits
 23346  1E3C  3026               	movlw	38
 23347  1E3D  2646  3198         	fcall	_mfrc522_bal_clr_bit_reg
 23348                           
 23349                           ;mfrc522_hal.c: 164: mfrc522_bal_set_bit_reg(RFCfgReg, gain & (0x07<<4));
 23350  1E3F  0020               	movlb	0	; select bank0
 23351  1E40  0827               	movf	mfrc522_hal_set_antenna_gain@gain,w
 23352  1E41  3970               	andlw	112
 23353  1E42  00A6               	movwf	??_mfrc522_hal_set_antenna_gain
 23354  1E43  00A2               	movwf	mfrc522_bal_set_bit_reg@bits
 23355  1E44  3026               	movlw	38
 23356  1E45  2DF0               	ljmp	_mfrc522_bal_set_bit_reg
 23357  1E46                     __end_of_mfrc522_hal_set_antenna_gain:	
 23358  1E46                     __ptext98:	
 23359 ;; *************** function _mfrc522_bal_clr_bit_reg *****************
 23360 ;; Defined at:
 23361 ;;		line 144 in file "src/nfc/bal/mfrc522_bal.c"
 23362 ;; Parameters:    Size  Location     Type
 23363 ;;  reg             1    wreg     unsigned char 
 23364 ;;  bits            1    2[BANK0 ] unsigned char 
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;  reg             1    5[BANK0 ] unsigned char 
 23367 ;;  tmp             1    4[BANK0 ] unsigned char 
 23368 ;; Return value:  Size  Location     Type
 23369 ;;                  1    wreg      void 
 23370 ;; Registers used:
 23371 ;;		wreg, status,2, status,0, pclath, cstack
 23372 ;; Tracked objects:
 23373 ;;		On entry : 0/0
 23374 ;;		On exit  : 0/0
 23375 ;;		Unchanged: 0/0
 23376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23377 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23378 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23380 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23381 ;;Total ram usage:        4 bytes
 23382 ;; Hardware stack levels used:    1
 23383 ;; Hardware stack levels required when called:    4
 23384 ;; This function calls:
 23385 ;;		_mfrc522_bal_read_reg
 23386 ;;		_mfrc522_bal_write_reg
 23387 ;; This function is called by:
 23388 ;;		_mfrc522_hal_set_antenna_gain
 23389 ;;		_picc_req_a_or_wakeup_a
 23390 ;;		_picc_select
 23391 ;;		_picc_stop_cryptol
 23392 ;;		_mfrc522_hal_antenna_off
 23393 ;; This function uses a non-reentrant model
 23394 ;;
 23395                           
 23396                           
 23397                           ;psect for function _mfrc522_bal_clr_bit_reg
 23398  1E46                     _mfrc522_bal_clr_bit_reg:	
 23399                           
 23400                           ;incstack = 0
 23401                           ; Regs used in _mfrc522_bal_clr_bit_reg: [wreg+status,2+status,0+pclath+cstack]
 23402                           ;mfrc522_bal_clr_bit_reg@reg stored from wreg
 23403  1E46  0020               	movlb	0	; select bank0
 23404  1E47  00A5               	movwf	mfrc522_bal_clr_bit_reg@reg
 23405                           
 23406                           ;mfrc522_bal.c: 146: uint8_t tmp = 0x0;
 23407  1E48  01A4               	clrf	mfrc522_bal_clr_bit_reg@tmp
 23408                           
 23409                           ;mfrc522_bal.c: 147: tmp = mfrc522_bal_read_reg(reg);
 23410  1E49  25B9  3198         	fcall	_mfrc522_bal_read_reg
 23411  1E4B  0020               	movlb	0	; select bank0
 23412  1E4C  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 23413  1E4D  00A4               	movwf	mfrc522_bal_clr_bit_reg@tmp
 23414                           
 23415                           ;mfrc522_bal.c: 148: tmp &= ~bits;
 23416  1E4E  0922               	comf	mfrc522_bal_clr_bit_reg@bits,w
 23417  1E4F  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 23418  1E50  05A4               	andwf	mfrc522_bal_clr_bit_reg@tmp,f
 23419                           
 23420                           ;mfrc522_bal.c: 149: mfrc522_bal_write_reg(reg,tmp);
 23421  1E51  0824               	movf	mfrc522_bal_clr_bit_reg@tmp,w
 23422  1E52  00A3               	movwf	??_mfrc522_bal_clr_bit_reg
 23423  1E53  00F7               	movwf	mfrc522_bal_write_reg@x
 23424  1E54  0825               	movf	mfrc522_bal_clr_bit_reg@reg,w
 23425  1E55  29B7               	ljmp	_mfrc522_bal_write_reg
 23426  1E56                     __end_of_mfrc522_bal_clr_bit_reg:	
 23427  1E56                     __ptext96:	
 23428 ;; *************** function _mfrc522_hal_get_antenna_gain *****************
 23429 ;; Defined at:
 23430 ;;		line 151 in file "src/nfc/hal/mfrc522_hal.c"
 23431 ;; Parameters:    Size  Location     Type
 23432 ;;		None
 23433 ;; Auto vars:     Size  Location     Type
 23434 ;;  ret             1    3[BANK0 ] unsigned char 
 23435 ;; Return value:  Size  Location     Type
 23436 ;;                  1    wreg      unsigned char 
 23437 ;; Registers used:
 23438 ;;		wreg, status,2, status,0, pclath, cstack
 23439 ;; Tracked objects:
 23440 ;;		On entry : 0/0
 23441 ;;		On exit  : 0/0
 23442 ;;		Unchanged: 0/0
 23443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23446 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23447 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23448 ;;Total ram usage:        2 bytes
 23449 ;; Hardware stack levels used:    1
 23450 ;; Hardware stack levels required when called:    4
 23451 ;; This function calls:
 23452 ;;		_mfrc522_bal_read_reg
 23453 ;; This function is called by:
 23454 ;;		_mfrc522_hal_set_antenna_gain
 23455 ;; This function uses a non-reentrant model
 23456 ;;
 23457                           
 23458                           
 23459                           ;psect for function _mfrc522_hal_get_antenna_gain
 23460  1E56                     _mfrc522_hal_get_antenna_gain:	
 23461                           
 23462                           ;mfrc522_hal.c: 153: uint8_t ret=0;
 23463                           
 23464                           ;incstack = 0
 23465                           ; Regs used in _mfrc522_hal_get_antenna_gain: [wreg+status,2+status,0+pclath+cstack]
 23466  1E56  0020               	movlb	0	; select bank0
 23467  1E57  3026               	movlw	38
 23468  1E58  01A3               	clrf	mfrc522_hal_get_antenna_gain@ret
 23469                           
 23470                           ;mfrc522_hal.c: 154: ret=mfrc522_bal_read_reg(RFCfgReg);
 23471  1E59  25B9               	fcall	_mfrc522_bal_read_reg
 23472  1E5A  0020               	movlb	0	; select bank0
 23473  1E5B  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 23474  1E5C  00A3               	movwf	mfrc522_hal_get_antenna_gain@ret
 23475                           
 23476                           ;mfrc522_hal.c: 155: ret &= (0x07<<4);
 23477  1E5D  3070               	movlw	112
 23478  1E5E  00A2               	movwf	??_mfrc522_hal_get_antenna_gain
 23479  1E5F  05A3               	andwf	mfrc522_hal_get_antenna_gain@ret,f
 23480                           
 23481                           ;mfrc522_hal.c: 156: return ret;
 23482  1E60  0823               	movf	mfrc522_hal_get_antenna_gain@ret,w
 23483  1E61  0008               	return
 23484  1E62                     __end_of_mfrc522_hal_get_antenna_gain:	
 23485  1E62                     __ptext79:	
 23486 ;; *************** function _mfrc522_bal_read_fifo_len_ex *****************
 23487 ;; Defined at:
 23488 ;;		line 115 in file "src/nfc/bal/mfrc522_bal.c"
 23489 ;; Parameters:    Size  Location     Type
 23490 ;;  reg             1    wreg     unsigned char 
 23491 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 23492 ;;		 -> pcd_mifare_transceive@cmdBuffer(18), picc_select@buffer(9), mfapi_is_new_card_present@bufferATQA(2), cardDecBuf(
      +18), 
 23493 ;;		 -> cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), NULL(0), 
 23494 ;;  len             1    2[BANK0 ] unsigned char 
 23495 ;;  rx_align        1    3[BANK0 ] unsigned char 
 23496 ;; Auto vars:     Size  Location     Type
 23497 ;;  reg             1    4[BANK0 ] unsigned char 
 23498 ;;  i               1    6[BANK0 ] unsigned char 
 23499 ;;  adr             1    5[BANK0 ] unsigned char 
 23500 ;; Return value:  Size  Location     Type
 23501 ;;                  1    wreg      void 
 23502 ;; Registers used:
 23503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23504 ;; Tracked objects:
 23505 ;;		On entry : 0/0
 23506 ;;		On exit  : 0/0
 23507 ;;		Unchanged: 0/0
 23508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23509 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23510 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 23511 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23512 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0
 23513 ;;Total ram usage:        8 bytes
 23514 ;; Hardware stack levels used:    1
 23515 ;; Hardware stack levels required when called:    3
 23516 ;; This function calls:
 23517 ;;		_mfrc522_bal_write_read_via_spi
 23518 ;; This function is called by:
 23519 ;;		_pcd_comm_with_picc
 23520 ;; This function uses a non-reentrant model
 23521 ;;
 23522                           
 23523                           
 23524                           ;psect for function _mfrc522_bal_read_fifo_len_ex
 23525  1E62                     _mfrc522_bal_read_fifo_len_ex:	
 23526                           
 23527                           ;incstack = 0
 23528                           ; Regs used in _mfrc522_bal_read_fifo_len_ex: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 23529                           ;mfrc522_bal_read_fifo_len_ex@reg stored from wreg
 23530  1E62  0020               	movlb	0	; select bank0
 23531  1E63  00A4               	movwf	mfrc522_bal_read_fifo_len_ex@reg
 23532                           
 23533                           ;mfrc522_bal.c: 117: uint8_t adr;
 23534                           ;mfrc522_bal.c: 118: uint8_t i;
 23535                           ;mfrc522_bal.c: 119: do { LATCbits.LATC2 = 0; } while(0);;
 23536  1E64  0022               	movlb	2	; select bank2
 23537  1E65  110E               	bcf	14,2	;volatile
 23538                           
 23539                           ;mfrc522_bal.c: 120: do { LATCbits.LATC3 = 0; } while(0);;
 23540  1E66  118E               	bcf	14,3	;volatile
 23541                           
 23542                           ;mfrc522_bal.c: 121: adr=((reg<<1) & 0x7e) | 0x80;
 23543  1E67  0020               	movlb	0	; select bank0
 23544  1E68  3524               	lslf	mfrc522_bal_read_fifo_len_ex@reg,w
 23545  1E69  397E               	andlw	126
 23546  1E6A  3880               	iorlw	128
 23547  1E6B  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 23548  1E6C  00A5               	movwf	mfrc522_bal_read_fifo_len_ex@adr
 23549                           
 23550                           ;mfrc522_bal.c: 122: mfrc522_bal_write_read_via_spi(adr);
 23551  1E6D  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 23552                           
 23553                           ;mfrc522_bal.c: 123: for(i=0;i<len;i++)
 23554  1E6F  0020               	movlb	0	; select bank0
 23555  1E70  01A6               	clrf	mfrc522_bal_read_fifo_len_ex@i
 23556  1E71                     l12605:	
 23557  1E71  0822               	movf	mfrc522_bal_read_fifo_len_ex@len,w
 23558  1E72  0226               	subwf	mfrc522_bal_read_fifo_len_ex@i,w
 23559  1E73  1803               	btfsc	3,0
 23560  1E74  2E88               	goto	l2080
 23561                           
 23562                           ;mfrc522_bal.c: 124: {
 23563                           ;mfrc522_bal.c: 125: *buf++=mfrc522_bal_write_read_via_spi(adr);
 23564  1E75  0825               	movf	mfrc522_bal_read_fifo_len_ex@adr,w
 23565  1E76  25CF  3198         	fcall	_mfrc522_bal_write_read_via_spi
 23566  1E78  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 23567  1E79  0020               	movlb	0	; select bank0
 23568  1E7A  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 23569  1E7B  0086               	movwf	6
 23570  1E7C  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 23571  1E7D  0087               	movwf	7
 23572  1E7E  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 23573  1E7F  0081               	movwf	1
 23574  1E80  3001               	movlw	1
 23575  1E81  07A0               	addwf	mfrc522_bal_read_fifo_len_ex@buf,f
 23576  1E82  3000               	movlw	0
 23577  1E83  3DA1               	addwfc	mfrc522_bal_read_fifo_len_ex@buf+1,f
 23578  1E84  3001               	movlw	1
 23579  1E85  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 23580  1E86  07A6               	addwf	mfrc522_bal_read_fifo_len_ex@i,f
 23581  1E87  2E71               	goto	l12605
 23582  1E88                     l2080:	
 23583                           ;mfrc522_bal.c: 126: }
 23584                           ;mfrc522_bal.c: 127: do { LATCbits.LATC2 = 1; } while(0);;
 23585                           
 23586  1E88  0022               	movlb	2	; select bank2
 23587  1E89  150E               	bsf	14,2	;volatile
 23588                           
 23589                           ;mfrc522_bal.c: 128: i=TablerxAlign[rx_align];
 23590  1E8A  0020               	movlb	0	; select bank0
 23591  1E8B  0823               	movf	mfrc522_bal_read_fifo_len_ex@rx_align,w
 23592  1E8C  3E62               	addlw	low (_TablerxAlign| (0+32768))
 23593  1E8D  0084               	movwf	4
 23594  1E8E  30AA               	movlw	high (_TablerxAlign| (0+32768))
 23595  1E8F  1803               	skipnc
 23596  1E90  3E01               	addlw	1
 23597  1E91  0085               	movwf	5
 23598  1E92  0800               	movf	0,w	;code access
 23599  1E93  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 23600  1E94  00A6               	movwf	mfrc522_bal_read_fifo_len_ex@i
 23601                           
 23602                           ;mfrc522_bal.c: 129: buf[0] &= i;
 23603  1E95  00F7               	movwf	??_mfrc522_bal_read_fifo_len_ex
 23604  1E96  0820               	movf	mfrc522_bal_read_fifo_len_ex@buf,w
 23605  1E97  0086               	movwf	6
 23606  1E98  0821               	movf	mfrc522_bal_read_fifo_len_ex@buf+1,w
 23607  1E99  0087               	movwf	7
 23608  1E9A  0877               	movf	??_mfrc522_bal_read_fifo_len_ex,w
 23609  1E9B  0581               	andwf	1,f
 23610  1E9C  0008               	return
 23611  1E9D                     __end_of_mfrc522_bal_read_fifo_len_ex:	
 23612  1E9D                     __ptext45:	
 23613 ;; *************** function _lcd_disp_refresh *****************
 23614 ;; Defined at:
 23615 ;;		line 202 in file "src/driver/lcd.c"
 23616 ;; Parameters:    Size  Location     Type
 23617 ;;		None
 23618 ;; Auto vars:     Size  Location     Type
 23619 ;;		None
 23620 ;; Return value:  Size  Location     Type
 23621 ;;                  1    wreg      void 
 23622 ;; Registers used:
 23623 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23624 ;; Tracked objects:
 23625 ;;		On entry : 0/0
 23626 ;;		On exit  : 0/0
 23627 ;;		Unchanged: 0/0
 23628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23629 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23631 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23632 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23633 ;;Total ram usage:        1 bytes
 23634 ;; Hardware stack levels used:    1
 23635 ;; Hardware stack levels required when called:    3
 23636 ;; This function calls:
 23637 ;;		_m_mem_cpy_len
 23638 ;; This function is called by:
 23639 ;;		_ui_disp_hello
 23640 ;;		_ui_disp_str_num_s
 23641 ;;		_ui_disp_str_dly
 23642 ;;		_ui_disp_set_line_reset
 23643 ;;		_ui_disp_small_flow_how_care
 23644 ;;		_ui_disp_modbus_id
 23645 ;;		_ui_disp_set_price
 23646 ;;		_ui_disp_set_transferMoneyLimit
 23647 ;;		_ui_disp_set_balanceWarning
 23648 ;;		_ui_disp_set_balanceOff
 23649 ;;		_ui_disp_menu
 23650 ;;		_lcd_disp_str
 23651 ;; This function uses a non-reentrant model
 23652 ;;
 23653                           
 23654                           
 23655                           ;psect for function _lcd_disp_refresh
 23656  1E9D                     _lcd_disp_refresh:	
 23657  1E9D                     l12089:	
 23658                           ;incstack = 0
 23659                           ; Regs used in _lcd_disp_refresh: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23660                           
 23661                           
 23662                           ;lcd.c: 204: m_mem_cpy_len(pLcdReg,pLCD,24);
 23663  1E9D  0022               	movlb	2	; select bank2
 23664  1E9E  086E               	movf	(_pLcdReg+1)^(0+256),w
 23665  1E9F  00F4               	movwf	m_mem_cpy_len@d+1
 23666  1EA0  086D               	movf	_pLcdReg^(0+256),w
 23667  1EA1  00F3               	movwf	m_mem_cpy_len@d
 23668  1EA2  302F               	movlw	low _pLCD
 23669  1EA3  00F5               	movwf	m_mem_cpy_len@s
 23670  1EA4  3001               	movlw	high _pLCD
 23671  1EA5  00F6               	movwf	m_mem_cpy_len@s+1
 23672  1EA6  3018               	movlw	24
 23673  1EA7  0020               	movlb	0	; select bank0
 23674  1EA8  00A1               	movwf	??_lcd_disp_refresh
 23675  1EA9  00F7               	movwf	m_mem_cpy_len@len
 23676  1EAA  3197  2F78         	ljmp	l11617
 23677  1EAC                     __end_of_lcd_disp_refresh:	
 23678  1EAC                     __ptext21:	
 23679 ;; *************** function _ui_disp_str_num_s *****************
 23680 ;; Defined at:
 23681 ;;		line 58 in file "src/api/ui.c"
 23682 ;; Parameters:    Size  Location     Type
 23683 ;;  str             2    9[BANK0 ] PTR unsigned char 
 23684 ;;		 -> STR_15(5), STR_12(6), STR_11(6), STR_10(6), 
 23685 ;;		 -> STR_9(6), STR_8(4), STR_7(4), STR_6(6), 
 23686 ;;		 -> STR_4(7), STR_3(3), STR_2(7), 
 23687 ;;  num             2   11[BANK0 ] unsigned int 
 23688 ;; Auto vars:     Size  Location     Type
 23689 ;;		None
 23690 ;; Return value:  Size  Location     Type
 23691 ;;                  1    wreg      void 
 23692 ;; Registers used:
 23693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23694 ;; Tracked objects:
 23695 ;;		On entry : 0/0
 23696 ;;		On exit  : 0/0
 23697 ;;		Unchanged: 0/0
 23698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23699 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 23700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23701 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 23702 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 23703 ;;Total ram usage:        6 bytes
 23704 ;; Hardware stack levels used:    1
 23705 ;; Hardware stack levels required when called:    5
 23706 ;; This function calls:
 23707 ;;		___lwdiv
 23708 ;;		___lwmod
 23709 ;;		_lcd_clear_buffer
 23710 ;;		_lcd_disp_refresh
 23711 ;;		_lcd_disp_str
 23712 ;;		_m_mem_set
 23713 ;;		_ui_mem_cpy
 23714 ;; This function is called by:
 23715 ;;		_ui_disp_str_dly
 23716 ;;		_ui_disp_set_line_reset
 23717 ;;		_ui_disp_small_flow_how_care
 23718 ;;		_ui_disp_modbus_id
 23719 ;;		_ui_disp_set_price
 23720 ;;		_ui_disp_set_transferMoneyLimit
 23721 ;;		_ui_disp_set_balanceWarning
 23722 ;;		_ui_disp_set_balanceOff
 23723 ;;		_ui_disp_menu
 23724 ;; This function uses a non-reentrant model
 23725 ;;
 23726                           
 23727                           
 23728                           ;psect for function _ui_disp_str_num_s
 23729  1EAC                     _ui_disp_str_num_s:	
 23730                           
 23731                           ;ui.c: 60: lcd_clear_buffer();
 23732                           
 23733                           ;incstack = 0
 23734                           ; Regs used in _ui_disp_str_num_s: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23735  1EAC  27B4  3198         	fcall	_lcd_clear_buffer
 23736                           
 23737                           ;ui.c: 61: m_mem_set(lcdBuf, ' ', 8);
 23738  1EAE  305C               	movlw	low _lcdBuf
 23739  1EAF  00F3               	movwf	m_mem_set@buf
 23740  1EB0  3001               	movlw	high _lcdBuf
 23741  1EB1  00F4               	movwf	m_mem_set@buf+1
 23742  1EB2  3020               	movlw	32
 23743  1EB3  0020               	movlb	0	; select bank0
 23744  1EB4  00AD               	movwf	??_ui_disp_str_num_s
 23745  1EB5  00F5               	movwf	m_mem_set@x
 23746  1EB6  3008               	movlw	8
 23747  1EB7  00AE               	movwf	??_ui_disp_str_num_s+1
 23748  1EB8  00F6               	movwf	m_mem_set@len
 23749  1EB9  27A4               	fcall	_m_mem_set
 23750                           
 23751                           ;ui.c: 62: lcdBuf[8] = '\0';
 23752  1EBA  0022               	movlb	2	; select bank2
 23753  1EBB  01E4               	clrf	(_lcdBuf^(0+256)+8)
 23754                           
 23755                           ;ui.c: 63: ui_mem_cpy(lcdBuf, str);
 23756  1EBC  0020               	movlb	0	; select bank0
 23757  1EBD  082A               	movf	ui_disp_str_num_s@str+1,w
 23758  1EBE  00F4               	movwf	ui_mem_cpy@s+1
 23759  1EBF  0829               	movf	ui_disp_str_num_s@str,w
 23760  1EC0  00F3               	movwf	ui_mem_cpy@s
 23761  1EC1  305C               	movlw	(low (_lcdBuf| (0+256)))& (0+255)
 23762  1EC2  31B6  2615  3198   	fcall	_ui_mem_cpy
 23763                           
 23764                           ;ui.c: 64: __t16 = num;
 23765  1EC5  0020               	movlb	0	; select bank0
 23766  1EC6  082C               	movf	ui_disp_str_num_s@num+1,w
 23767  1EC7  00FA               	movwf	___t16+1
 23768  1EC8  082B               	movf	ui_disp_str_num_s@num,w
 23769  1EC9  00F9               	movwf	___t16
 23770                           
 23771                           ;ui.c: 65: lcdBuf[7] = '0' + (uint8_t)(__t16 % 10);
 23772  1ECA  300A               	movlw	10
 23773  1ECB  00F3               	movwf	___lwmod@divisor
 23774  1ECC  01F4               	clrf	___lwmod@divisor+1
 23775  1ECD  087A               	movf	___t16+1,w
 23776  1ECE  00F6               	movwf	___lwmod@dividend+1
 23777  1ECF  0879               	movf	___t16,w
 23778  1ED0  00F5               	movwf	___lwmod@dividend
 23779  1ED1  2744  3198         	fcall	___lwmod
 23780  1ED3  0873               	movf	?___lwmod,w
 23781  1ED4  3E30               	addlw	48
 23782  1ED5  0020               	movlb	0	; select bank0
 23783  1ED6  00AD               	movwf	??_ui_disp_str_num_s
 23784  1ED7  0022               	movlb	2	; select bank2
 23785  1ED8  00E3               	movwf	(_lcdBuf^(0+256)+7)
 23786                           
 23787                           ;ui.c: 66: __t16 /= 10;
 23788  1ED9  300A               	movlw	10
 23789  1EDA  0020               	movlb	0	; select bank0
 23790  1EDB  00A2               	movwf	___lwdiv@divisor
 23791  1EDC  01A3               	clrf	___lwdiv@divisor+1
 23792  1EDD  087A               	movf	___t16+1,w
 23793  1EDE  00A5               	movwf	___lwdiv@dividend+1
 23794  1EDF  0879               	movf	___t16,w
 23795  1EE0  00A4               	movwf	___lwdiv@dividend
 23796  1EE1  2770  3198         	fcall	___lwdiv
 23797  1EE3  0020               	movlb	0	; select bank0
 23798  1EE4  0823               	movf	?___lwdiv+1,w
 23799  1EE5  00FA               	movwf	___t16+1
 23800  1EE6  0822               	movf	?___lwdiv,w
 23801  1EE7  00F9               	movwf	___t16
 23802                           
 23803                           ;ui.c: 67: if (__t16 > 0) {
 23804  1EE8  047A               	iorwf	___t16+1,w
 23805  1EE9  1903               	btfsc	3,2
 23806  1EEA  2F3C               	goto	l12513
 23807                           
 23808                           ;ui.c: 68: lcdBuf[6] = '0' + (uint8_t)(__t16 % 10);
 23809  1EEB  300A               	movlw	10
 23810  1EEC  00F3               	movwf	___lwmod@divisor
 23811  1EED  01F4               	clrf	___lwmod@divisor+1
 23812  1EEE  087A               	movf	___t16+1,w
 23813  1EEF  00F6               	movwf	___lwmod@dividend+1
 23814  1EF0  0879               	movf	___t16,w
 23815  1EF1  00F5               	movwf	___lwmod@dividend
 23816  1EF2  2744  3198         	fcall	___lwmod
 23817  1EF4  0873               	movf	?___lwmod,w
 23818  1EF5  3E30               	addlw	48
 23819  1EF6  0020               	movlb	0	; select bank0
 23820  1EF7  00AD               	movwf	??_ui_disp_str_num_s
 23821  1EF8  0022               	movlb	2	; select bank2
 23822  1EF9  00E2               	movwf	(_lcdBuf^(0+256)+6)
 23823                           
 23824                           ;ui.c: 69: __t16 /= 10;
 23825  1EFA  300A               	movlw	10
 23826  1EFB  0020               	movlb	0	; select bank0
 23827  1EFC  00A2               	movwf	___lwdiv@divisor
 23828  1EFD  01A3               	clrf	___lwdiv@divisor+1
 23829  1EFE  087A               	movf	___t16+1,w
 23830  1EFF  00A5               	movwf	___lwdiv@dividend+1
 23831  1F00  0879               	movf	___t16,w
 23832  1F01  00A4               	movwf	___lwdiv@dividend
 23833  1F02  2770  3198         	fcall	___lwdiv
 23834  1F04  0020               	movlb	0	; select bank0
 23835  1F05  0823               	movf	?___lwdiv+1,w
 23836  1F06  00FA               	movwf	___t16+1
 23837  1F07  0822               	movf	?___lwdiv,w
 23838  1F08  00F9               	movwf	___t16
 23839                           
 23840                           ;ui.c: 70: if (__t16 > 0) {
 23841  1F09  047A               	iorwf	___t16+1,w
 23842  1F0A  1903               	btfsc	3,2
 23843  1F0B  2F3C               	goto	l12513
 23844                           
 23845                           ;ui.c: 71: lcdBuf[5] = '0' + (uint8_t)(__t16 % 10);
 23846  1F0C  300A               	movlw	10
 23847  1F0D  00F3               	movwf	___lwmod@divisor
 23848  1F0E  01F4               	clrf	___lwmod@divisor+1
 23849  1F0F  087A               	movf	___t16+1,w
 23850  1F10  00F6               	movwf	___lwmod@dividend+1
 23851  1F11  0879               	movf	___t16,w
 23852  1F12  00F5               	movwf	___lwmod@dividend
 23853  1F13  2744  3198         	fcall	___lwmod
 23854  1F15  0873               	movf	?___lwmod,w
 23855  1F16  3E30               	addlw	48
 23856  1F17  0020               	movlb	0	; select bank0
 23857  1F18  00AD               	movwf	??_ui_disp_str_num_s
 23858  1F19  0022               	movlb	2	; select bank2
 23859  1F1A  00E1               	movwf	(_lcdBuf^(0+256)+5)
 23860                           
 23861                           ;ui.c: 72: __t16 /= 10;
 23862  1F1B  300A               	movlw	10
 23863  1F1C  0020               	movlb	0	; select bank0
 23864  1F1D  00A2               	movwf	___lwdiv@divisor
 23865  1F1E  01A3               	clrf	___lwdiv@divisor+1
 23866  1F1F  087A               	movf	___t16+1,w
 23867  1F20  00A5               	movwf	___lwdiv@dividend+1
 23868  1F21  0879               	movf	___t16,w
 23869  1F22  00A4               	movwf	___lwdiv@dividend
 23870  1F23  2770  3198         	fcall	___lwdiv
 23871  1F25  0020               	movlb	0	; select bank0
 23872  1F26  0823               	movf	?___lwdiv+1,w
 23873  1F27  00FA               	movwf	___t16+1
 23874  1F28  0822               	movf	?___lwdiv,w
 23875  1F29  00F9               	movwf	___t16
 23876                           
 23877                           ;ui.c: 73: if (__t16 > 0) {
 23878  1F2A  047A               	iorwf	___t16+1,w
 23879  1F2B  1903               	btfsc	3,2
 23880  1F2C  2F3C               	goto	l12513
 23881                           
 23882                           ;ui.c: 74: lcdBuf[4] = '0' + (uint8_t)(__t16 % 10);
 23883  1F2D  300A               	movlw	10
 23884  1F2E  00F3               	movwf	___lwmod@divisor
 23885  1F2F  01F4               	clrf	___lwmod@divisor+1
 23886  1F30  087A               	movf	___t16+1,w
 23887  1F31  00F6               	movwf	___lwmod@dividend+1
 23888  1F32  0879               	movf	___t16,w
 23889  1F33  00F5               	movwf	___lwmod@dividend
 23890  1F34  2744  3198         	fcall	___lwmod
 23891  1F36  0873               	movf	?___lwmod,w
 23892  1F37  3E30               	addlw	48
 23893  1F38  0020               	movlb	0	; select bank0
 23894  1F39  00AD               	movwf	??_ui_disp_str_num_s
 23895  1F3A  0022               	movlb	2	; select bank2
 23896  1F3B  00E0               	movwf	(_lcdBuf^(0+256)+4)
 23897  1F3C                     l12513:	
 23898                           
 23899                           ;ui.c: 75: }
 23900                           ;ui.c: 76: }
 23901                           ;ui.c: 77: }
 23902                           ;ui.c: 78: lcd_disp_str(lcdBuf);
 23903  1F3C  305C               	movlw	low _lcdBuf
 23904  1F3D  0020               	movlb	0	; select bank0
 23905  1F3E  00A2               	movwf	lcd_disp_str@str
 23906  1F3F  3001               	movlw	high _lcdBuf
 23907  1F40  00A3               	movwf	lcd_disp_str@str+1
 23908  1F41  27BD  3198         	fcall	_lcd_disp_str
 23909                           
 23910                           ;ui.c: 79: lcd_disp_refresh();
 23911  1F43  2E9D               	ljmp	l12089
 23912  1F44                     __end_of_ui_disp_str_num_s:	
 23913  1F44                     __ptext125:	
 23914 ;; *************** function ___lwmod *****************
 23915 ;; Defined at:
 23916 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\lwmod.c"
 23917 ;; Parameters:    Size  Location     Type
 23918 ;;  divisor         2    3[COMMON] unsigned int 
 23919 ;;  dividend        2    5[COMMON] unsigned int 
 23920 ;; Auto vars:     Size  Location     Type
 23921 ;;  counter         1    0[BANK0 ] unsigned char 
 23922 ;; Return value:  Size  Location     Type
 23923 ;;                  2    3[COMMON] unsigned int 
 23924 ;; Registers used:
 23925 ;;		wreg, status,2, status,0
 23926 ;; Tracked objects:
 23927 ;;		On entry : 0/0
 23928 ;;		On exit  : 0/0
 23929 ;;		Unchanged: 0/0
 23930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 23931 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23932 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23933 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 23934 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 23935 ;;Total ram usage:        6 bytes
 23936 ;; Hardware stack levels used:    1
 23937 ;; Hardware stack levels required when called:    2
 23938 ;; This function calls:
 23939 ;;		Nothing
 23940 ;; This function is called by:
 23941 ;;		_ui_disp_str_num_s
 23942 ;;		_app_flow_rt_volume_cal
 23943 ;; This function uses a non-reentrant model
 23944 ;;
 23945                           
 23946                           
 23947                           ;psect for function ___lwmod
 23948  1F44                     ___lwmod:	
 23949                           
 23950                           ;incstack = 0
 23951                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 23952  1F44  0873               	movf	___lwmod@divisor,w
 23953  1F45  0474               	iorwf	___lwmod@divisor+1,w
 23954  1F46  1903               	btfsc	3,2
 23955  1F47  2F6B               	goto	l12385
 23956  1F48  0020               	movlb	0	; select bank0
 23957  1F49  01A0               	clrf	___lwmod@counter
 23958  1F4A  0AA0               	incf	___lwmod@counter,f
 23959  1F4B                     l12375:	
 23960  1F4B  1BF4               	btfsc	___lwmod@divisor+1,7
 23961  1F4C  2F56               	goto	l12377
 23962  1F4D  3001               	movlw	1
 23963  1F4E                     u11015:	
 23964  1F4E  35F3               	lslf	___lwmod@divisor,f
 23965  1F4F  0DF4               	rlf	___lwmod@divisor+1,f
 23966  1F50  0B89               	decfsz	9,f
 23967  1F51  2F4E               	goto	u11015
 23968  1F52  3001               	movlw	1
 23969  1F53  00F7               	movwf	??___lwmod
 23970  1F54  07A0               	addwf	___lwmod@counter,f
 23971  1F55  2F4B               	goto	l12375
 23972  1F56                     l12377:	
 23973  1F56  0874               	movf	___lwmod@divisor+1,w
 23974  1F57  0276               	subwf	___lwmod@dividend+1,w
 23975  1F58  1D03               	skipz
 23976  1F59  2F5C               	goto	u11035
 23977  1F5A  0873               	movf	___lwmod@divisor,w
 23978  1F5B  0275               	subwf	___lwmod@dividend,w
 23979  1F5C                     u11035:	
 23980  1F5C  1C03               	skipc
 23981  1F5D  2F62               	goto	l12381
 23982  1F5E  0873               	movf	___lwmod@divisor,w
 23983  1F5F  02F5               	subwf	___lwmod@dividend,f
 23984  1F60  0874               	movf	___lwmod@divisor+1,w
 23985  1F61  3BF6               	subwfb	___lwmod@dividend+1,f
 23986  1F62                     l12381:	
 23987  1F62  3001               	movlw	1
 23988  1F63                     u11045:	
 23989  1F63  36F4               	lsrf	___lwmod@divisor+1,f
 23990  1F64  0CF3               	rrf	___lwmod@divisor,f
 23991  1F65  0B89               	decfsz	9,f
 23992  1F66  2F63               	goto	u11045
 23993  1F67  3001               	movlw	1
 23994  1F68  02A0               	subwf	___lwmod@counter,f
 23995  1F69  1D03               	btfss	3,2
 23996  1F6A  2F56               	goto	l12377
 23997  1F6B                     l12385:	
 23998  1F6B  0876               	movf	___lwmod@dividend+1,w
 23999  1F6C  00F4               	movwf	?___lwmod+1
 24000  1F6D  0875               	movf	___lwmod@dividend,w
 24001  1F6E  00F3               	movwf	?___lwmod
 24002  1F6F  0008               	return
 24003  1F70                     __end_of___lwmod:	
 24004  1F70                     __ptext134:	
 24005 ;; *************** function ___lwdiv *****************
 24006 ;; Defined at:
 24007 ;;		line 6 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\lwdiv.c"
 24008 ;; Parameters:    Size  Location     Type
 24009 ;;  divisor         2    2[BANK0 ] unsigned int 
 24010 ;;  dividend        2    4[BANK0 ] unsigned int 
 24011 ;; Auto vars:     Size  Location     Type
 24012 ;;  quotient        2    6[BANK0 ] unsigned int 
 24013 ;;  counter         1    8[BANK0 ] unsigned char 
 24014 ;; Return value:  Size  Location     Type
 24015 ;;                  2    2[BANK0 ] unsigned int 
 24016 ;; Registers used:
 24017 ;;		wreg, status,2, status,0
 24018 ;; Tracked objects:
 24019 ;;		On entry : 0/0
 24020 ;;		On exit  : 0/0
 24021 ;;		Unchanged: 0/0
 24022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24023 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 24024 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24025 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24026 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0
 24027 ;;Total ram usage:        8 bytes
 24028 ;; Hardware stack levels used:    1
 24029 ;; Hardware stack levels required when called:    2
 24030 ;; This function calls:
 24031 ;;		Nothing
 24032 ;; This function is called by:
 24033 ;;		_ui_disp_str_num_s
 24034 ;;		_app_flow_adc_2_flow
 24035 ;;		_app_flow_rt_volume_cal
 24036 ;; This function uses a non-reentrant model
 24037 ;;
 24038                           
 24039                           
 24040                           ;psect for function ___lwdiv
 24041  1F70                     ___lwdiv:	
 24042                           
 24043                           ;incstack = 0
 24044                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 24045  1F70  0020               	movlb	0	; select bank0
 24046  1F71  01A6               	clrf	___lwdiv@quotient
 24047  1F72  01A7               	clrf	___lwdiv@quotient+1
 24048  1F73  0822               	movf	___lwdiv@divisor,w
 24049  1F74  0423               	iorwf	___lwdiv@divisor+1,w
 24050  1F75  1903               	btfsc	3,2
 24051  1F76  2F9F               	goto	l8131
 24052  1F77  01A8               	clrf	___lwdiv@counter
 24053  1F78  0AA8               	incf	___lwdiv@counter,f
 24054  1F79                     l8119:	
 24055  1F79  1BA3               	btfsc	___lwdiv@divisor+1,7
 24056  1F7A  2F84               	goto	l8121
 24057  1F7B  3001               	movlw	1
 24058  1F7C                     u6195:	
 24059  1F7C  35A2               	lslf	___lwdiv@divisor,f
 24060  1F7D  0DA3               	rlf	___lwdiv@divisor+1,f
 24061  1F7E  0B89               	decfsz	9,f
 24062  1F7F  2F7C               	goto	u6195
 24063  1F80  3001               	movlw	1
 24064  1F81  00F7               	movwf	??___lwdiv
 24065  1F82  07A8               	addwf	___lwdiv@counter,f
 24066  1F83  2F79               	goto	l8119
 24067  1F84                     l8121:	
 24068  1F84  3001               	movlw	1
 24069  1F85                     u6215:	
 24070  1F85  35A6               	lslf	___lwdiv@quotient,f
 24071  1F86  0DA7               	rlf	___lwdiv@quotient+1,f
 24072  1F87  0B89               	decfsz	9,f
 24073  1F88  2F85               	goto	u6215
 24074  1F89  0823               	movf	___lwdiv@divisor+1,w
 24075  1F8A  0225               	subwf	___lwdiv@dividend+1,w
 24076  1F8B  1D03               	skipz
 24077  1F8C  2F8F               	goto	u6225
 24078  1F8D  0822               	movf	___lwdiv@divisor,w
 24079  1F8E  0224               	subwf	___lwdiv@dividend,w
 24080  1F8F                     u6225:	
 24081  1F8F  1C03               	skipc
 24082  1F90  2F96               	goto	l8127
 24083  1F91  0822               	movf	___lwdiv@divisor,w
 24084  1F92  02A4               	subwf	___lwdiv@dividend,f
 24085  1F93  0823               	movf	___lwdiv@divisor+1,w
 24086  1F94  3BA5               	subwfb	___lwdiv@dividend+1,f
 24087  1F95  1426               	bsf	___lwdiv@quotient,0
 24088  1F96                     l8127:	
 24089  1F96  3001               	movlw	1
 24090  1F97                     u6235:	
 24091  1F97  36A3               	lsrf	___lwdiv@divisor+1,f
 24092  1F98  0CA2               	rrf	___lwdiv@divisor,f
 24093  1F99  0B89               	decfsz	9,f
 24094  1F9A  2F97               	goto	u6235
 24095  1F9B  3001               	movlw	1
 24096  1F9C  02A8               	subwf	___lwdiv@counter,f
 24097  1F9D  1D03               	btfss	3,2
 24098  1F9E  2F84               	goto	l8121
 24099  1F9F                     l8131:	
 24100  1F9F  0827               	movf	___lwdiv@quotient+1,w
 24101  1FA0  00A3               	movwf	?___lwdiv+1
 24102  1FA1  0826               	movf	___lwdiv@quotient,w
 24103  1FA2  00A2               	movwf	?___lwdiv
 24104  1FA3  0008               	return
 24105  1FA4                     __end_of___lwdiv:	
 24106  1FA4                     __ptext80:	
 24107 ;; *************** function _m_mem_set *****************
 24108 ;; Defined at:
 24109 ;;		line 32 in file "src/depend/m_string.c"
 24110 ;; Parameters:    Size  Location     Type
 24111 ;;  buf             2    3[COMMON] PTR unsigned char 
 24112 ;;		 -> pLCD(24), PiccUid(12), comBuffer(128), flashOpStr(21), 
 24113 ;;		 -> lcdBuf(9), 
 24114 ;;  x               1    5[COMMON] unsigned char 
 24115 ;;  len             1    6[COMMON] unsigned char 
 24116 ;; Auto vars:     Size  Location     Type
 24117 ;;		None
 24118 ;; Return value:  Size  Location     Type
 24119 ;;                  1    wreg      void 
 24120 ;; Registers used:
 24121 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 24122 ;; Tracked objects:
 24123 ;;		On entry : 0/0
 24124 ;;		On exit  : 0/0
 24125 ;;		Unchanged: 0/0
 24126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24127 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24130 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24131 ;;Total ram usage:        4 bytes
 24132 ;; Hardware stack levels used:    1
 24133 ;; Hardware stack levels required when called:    2
 24134 ;; This function calls:
 24135 ;;		Nothing
 24136 ;; This function is called by:
 24137 ;;		_ui_disp_str_num_s
 24138 ;;		_ui_disp_flow
 24139 ;;		_ui_disp_totale_v
 24140 ;;		_ui_disp_set_line
 24141 ;;		_ui_disp_set_calib
 24142 ;;		_ui_key_process_down
 24143 ;;		_rfid_comm_process_read_header
 24144 ;;		_lcd_clear_buffer
 24145 ;;		_mfapi_is_new_card_present
 24146 ;; This function uses a non-reentrant model
 24147 ;;
 24148                           
 24149                           
 24150                           ;psect for function _m_mem_set
 24151  1FA4                     _m_mem_set:	
 24152  1FA4                     l12091:	
 24153                           ;incstack = 0
 24154                           ; Regs used in _m_mem_set: [wreg+fsr1l+fsr1h+status,2+status,0]
 24155                           
 24156                           
 24157                           ;m_string.c: 34: while(len--)
 24158  1FA4  2FAF               	goto	l12097
 24159  1FA5                     l12093:	
 24160                           
 24161                           ;m_string.c: 35: {
 24162                           ;m_string.c: 36: *buf++=x;
 24163  1FA5  0873               	movf	m_mem_set@buf,w
 24164  1FA6  0086               	movwf	6
 24165  1FA7  0874               	movf	m_mem_set@buf+1,w
 24166  1FA8  0087               	movwf	7
 24167  1FA9  0875               	movf	m_mem_set@x,w
 24168  1FAA  0081               	movwf	1
 24169  1FAB  3001               	movlw	1
 24170  1FAC  07F3               	addwf	m_mem_set@buf,f
 24171  1FAD  3000               	movlw	0
 24172  1FAE  3DF4               	addwfc	m_mem_set@buf+1,f
 24173  1FAF                     l12097:	
 24174  1FAF  3001               	movlw	1
 24175  1FB0  02F6               	subwf	m_mem_set@len,f
 24176  1FB1  0F76               	incfsz	m_mem_set@len,w
 24177  1FB2  2FA5               	goto	l12093
 24178  1FB3  0008               	return
 24179  1FB4                     __end_of_m_mem_set:	
 24180  1FB4                     __ptext59:	
 24181 ;; *************** function _lcd_clear_buffer *****************
 24182 ;; Defined at:
 24183 ;;		line 207 in file "src/driver/lcd.c"
 24184 ;; Parameters:    Size  Location     Type
 24185 ;;		None
 24186 ;; Auto vars:     Size  Location     Type
 24187 ;;		None
 24188 ;; Return value:  Size  Location     Type
 24189 ;;                  1    wreg      void 
 24190 ;; Registers used:
 24191 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24192 ;; Tracked objects:
 24193 ;;		On entry : 0/0
 24194 ;;		On exit  : 0/0
 24195 ;;		Unchanged: 0/0
 24196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24199 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24200 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24201 ;;Total ram usage:        1 bytes
 24202 ;; Hardware stack levels used:    1
 24203 ;; Hardware stack levels required when called:    3
 24204 ;; This function calls:
 24205 ;;		_m_mem_set
 24206 ;; This function is called by:
 24207 ;;		_ui_disp_str_num_s
 24208 ;;		_ui_disp_flow
 24209 ;;		_ui_disp_totale_v
 24210 ;;		_ui_disp_balance_and_volume
 24211 ;;		_ui_disp_set_line
 24212 ;;		_ui_disp_set_calib
 24213 ;; This function uses a non-reentrant model
 24214 ;;
 24215                           
 24216                           
 24217                           ;psect for function _lcd_clear_buffer
 24218  1FB4                     _lcd_clear_buffer:	
 24219                           
 24220                           ;lcd.c: 209: m_mem_set(pLCD,0,24);
 24221                           
 24222                           ;incstack = 0
 24223                           ; Regs used in _lcd_clear_buffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 24224  1FB4  302F               	movlw	low _pLCD
 24225  1FB5  00F3               	movwf	m_mem_set@buf
 24226  1FB6  3001               	movlw	high _pLCD
 24227  1FB7  00F4               	movwf	m_mem_set@buf+1
 24228  1FB8  3018               	movlw	24
 24229  1FB9  01F5               	clrf	m_mem_set@x
 24230  1FBA  00F7               	movwf	??_lcd_clear_buffer
 24231  1FBB  00F6               	movwf	m_mem_set@len
 24232  1FBC  2FA4               	ljmp	l12091
 24233  1FBD                     __end_of_lcd_clear_buffer:	
 24234  1FBD                     __ptext44:	
 24235 ;; *************** function _lcd_disp_str *****************
 24236 ;; Defined at:
 24237 ;;		line 180 in file "src/driver/lcd.c"
 24238 ;; Parameters:    Size  Location     Type
 24239 ;;  str             2    2[BANK0 ] PTR unsigned char 
 24240 ;;		 -> STR_16(9), STR_14(9), STR_13(9), STR_5(9), 
 24241 ;;		 -> lcdBuf(9), STR_1(9), 
 24242 ;; Auto vars:     Size  Location     Type
 24243 ;;  index           1    6[BANK0 ] unsigned char 
 24244 ;;  loc             1    5[BANK0 ] unsigned char 
 24245 ;; Return value:  Size  Location     Type
 24246 ;;                  1    wreg      void 
 24247 ;; Registers used:
 24248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24249 ;; Tracked objects:
 24250 ;;		On entry : 0/0
 24251 ;;		On exit  : 0/0
 24252 ;;		Unchanged: 0/0
 24253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24254 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24255 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24256 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24257 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24258 ;;Total ram usage:        5 bytes
 24259 ;; Hardware stack levels used:    1
 24260 ;; Hardware stack levels required when called:    4
 24261 ;; This function calls:
 24262 ;;		_lcd_disp_code
 24263 ;;		_lcd_disp_refresh
 24264 ;; This function is called by:
 24265 ;;		_ui_disp_hello
 24266 ;;		_ui_disp_str_num_s
 24267 ;;		_ui_disp_flow
 24268 ;;		_ui_disp_totale_v
 24269 ;;		_ui_disp_balance_and_volume
 24270 ;;		_ui_disp_set_line
 24271 ;;		_ui_disp_recharge
 24272 ;;		_ui_disp_clear_card_id
 24273 ;;		_ui_disp_set_calib
 24274 ;;		_rfid_comm_process
 24275 ;; This function uses a non-reentrant model
 24276 ;;
 24277                           
 24278                           
 24279                           ;psect for function _lcd_disp_str
 24280  1FBD                     _lcd_disp_str:	
 24281  1FBD                     l12289:	
 24282                           ;incstack = 0
 24283                           ; Regs used in _lcd_disp_str: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24284                           
 24285                           
 24286                           ;lcd.c: 182: uint8_t loc=0;
 24287  1FBD  0020               	movlb	0	; select bank0
 24288  1FBE  01A5               	clrf	lcd_disp_str@loc
 24289                           
 24290                           ;lcd.c: 183: uint8_t index=0;
 24291  1FBF  01A6               	clrf	lcd_disp_str@index
 24292  1FC0                     l12313:	
 24293                           ;lcd.c: 184: while(*str!='\0'){
 24294                           
 24295  1FC0  0822               	movf	lcd_disp_str@str,w
 24296  1FC1  0084               	movwf	4
 24297  1FC2  0823               	movf	lcd_disp_str@str+1,w
 24298  1FC3  0085               	movwf	5
 24299  1FC4  0012               	moviw fsr0++
 24300  1FC5  1903               	btfsc	3,2
 24301  1FC6  2FFF               	goto	l12315
 24302  1FC7  3028               	movlw	40
 24303                           
 24304                           ;lcd.c: 185: for(index=0;index<40;index++){
 24305  1FC8  01A6               	clrf	lcd_disp_str@index
 24306  1FC9  0226               	subwf	lcd_disp_str@index,w
 24307  1FCA  1803               	btfsc	3,0
 24308  1FCB  2FE4               	goto	l12305
 24309  1FCC                     l12297:	
 24310                           
 24311                           ;lcd.c: 186: if(*str==LCDDigitalIndexTable[index])break;
 24312  1FCC  0826               	movf	lcd_disp_str@index,w
 24313  1FCD  3E00               	addlw	low (_LCDDigitalIndexTable| (0+32768))
 24314  1FCE  0084               	movwf	4
 24315  1FCF  30AA               	movlw	high (_LCDDigitalIndexTable| (0+32768))
 24316  1FD0  1803               	skipnc
 24317  1FD1  3E01               	addlw	1
 24318  1FD2  0085               	movwf	5
 24319  1FD3  0800               	movf	0,w	;code access
 24320  1FD4  00A4               	movwf	??_lcd_disp_str
 24321  1FD5  0822               	movf	lcd_disp_str@str,w
 24322  1FD6  0084               	movwf	4
 24323  1FD7  0823               	movf	lcd_disp_str@str+1,w
 24324  1FD8  0085               	movwf	5
 24325  1FD9  0800               	movf	0,w	;code access
 24326  1FDA  0624               	xorwf	??_lcd_disp_str,w
 24327  1FDB  1903               	btfsc	3,2
 24328  1FDC  2FE4               	goto	l12305
 24329  1FDD  3001               	movlw	1
 24330  1FDE  00A4               	movwf	??_lcd_disp_str
 24331  1FDF  07A6               	addwf	lcd_disp_str@index,f
 24332  1FE0  3028               	movlw	40
 24333  1FE1  0226               	subwf	lcd_disp_str@index,w
 24334  1FE2  1C03               	skipc
 24335  1FE3  2FCC               	goto	l12297
 24336  1FE4                     l12305:	
 24337                           
 24338                           ;lcd.c: 187: }
 24339                           ;lcd.c: 188: if(index<40)lcd_disp_code(LCDDigitalTable[index],loc);
 24340  1FE4  3028               	movlw	40
 24341  1FE5  0226               	subwf	lcd_disp_str@index,w
 24342  1FE6  1803               	skipnc
 24343  1FE7  2FF6               	goto	l12309
 24344  1FE8  0825               	movf	lcd_disp_str@loc,w
 24345  1FE9  00A4               	movwf	??_lcd_disp_str
 24346  1FEA  00F5               	movwf	lcd_disp_code@loc
 24347  1FEB  0826               	movf	lcd_disp_str@index,w
 24348  1FEC  3E29               	addlw	low (_LCDDigitalTable| (0+32768))
 24349  1FED  0084               	movwf	4
 24350  1FEE  30AA               	movlw	high (_LCDDigitalTable| (0+32768))
 24351  1FEF  1803               	skipnc
 24352  1FF0  3E01               	addlw	1
 24353  1FF1  0085               	movwf	5
 24354  1FF2  0800               	movf	0,w	;code access
 24355  1FF3  31AD  2554  3198   	fcall	_lcd_disp_code
 24356  1FF6                     l12309:	
 24357                           
 24358                           ;lcd.c: 189: str++;
 24359  1FF6  3001               	movlw	1
 24360  1FF7  0020               	movlb	0	; select bank0
 24361  1FF8  07A2               	addwf	lcd_disp_str@str,f
 24362  1FF9  3000               	movlw	0
 24363  1FFA  3DA3               	addwfc	lcd_disp_str@str+1,f
 24364                           
 24365                           ;lcd.c: 190: loc++;
 24366  1FFB  3001               	movlw	1
 24367  1FFC  00A4               	movwf	??_lcd_disp_str
 24368  1FFD  07A5               	addwf	lcd_disp_str@loc,f
 24369  1FFE  2FC0               	goto	l12313
 24370  1FFF                     l12315:	
 24371                           
 24372                           ;lcd.c: 191: }
 24373                           ;lcd.c: 192: lcd_disp_refresh();
 24374  1FFF  2E9D               	ljmp	l12089
 24375  2000                     __end_of_lcd_disp_str:	
 24376                           
 24377                           	psect	text82
 24378  042F                     __ptext82:	
 24379 ;; *************** function _modbus_response_process *****************
 24380 ;; Defined at:
 24381 ;;		line 138 in file "src/api/modbus.c"
 24382 ;; Parameters:    Size  Location     Type
 24383 ;;  rbuf            1    wreg     PTR unsigned char 
 24384 ;;		 -> uart1Buffer(80), 
 24385 ;;  rlen            2   40[BANK0 ] unsigned int 
 24386 ;; Auto vars:     Size  Location     Type
 24387 ;;  rbuf            1   45[BANK0 ] PTR unsigned char 
 24388 ;;		 -> uart1Buffer(80), 
 24389 ;;  pmdbs           1   44[BANK0 ] PTR struct .
 24390 ;;		 -> uart1Buffer(80), 
 24391 ;;  resp            1   43[BANK0 ] unsigned char 
 24392 ;; Return value:  Size  Location     Type
 24393 ;;                  1    wreg      void 
 24394 ;; Registers used:
 24395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24396 ;; Tracked objects:
 24397 ;;		On entry : 0/0
 24398 ;;		On exit  : 0/0
 24399 ;;		Unchanged: 0/0
 24400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24401 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24402 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 24403 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 24404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 24405 ;;Total ram usage:        6 bytes
 24406 ;; Hardware stack levels used:    1
 24407 ;; Hardware stack levels required when called:    8
 24408 ;; This function calls:
 24409 ;;		_crc_verify
 24410 ;;		_modbus_response_illgeal_function
 24411 ;;		_modbus_response_read_flash_data
 24412 ;;		_modbus_response_read_status_register
 24413 ;;		_modbus_response_write_flash_clib
 24414 ;;		_modbus_response_write_flash_sys
 24415 ;;		_modbus_response_write_status_register
 24416 ;; This function is called by:
 24417 ;;		_main
 24418 ;; This function uses a non-reentrant model
 24419 ;;
 24420                           
 24421                           
 24422                           ;psect for function _modbus_response_process
 24423  042F                     _modbus_response_process:	
 24424                           
 24425                           ;incstack = 0
 24426                           ; Regs used in _modbus_response_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24427                           ;modbus_response_process@rbuf stored from wreg
 24428  042F  0020               	movlb	0	; select bank0
 24429  0430  00CD               	movwf	modbus_response_process@rbuf
 24430                           
 24431                           ;modbus.c: 139: uint8_t resp=0;
 24432  0431  01CB               	clrf	modbus_response_process@resp
 24433                           
 24434                           ;modbus.c: 140: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)rbuf;
 24435  0432  00CA               	movwf	??_modbus_response_process
 24436  0433  00CC               	movwf	modbus_response_process@pmdbs
 24437                           
 24438                           ;modbus.c: 141: if(!(pmdbs->addr ==0xff || pmdbs->addr==mainSystemData.shortID || pmdbs-
      +                          >addr!=0x00))return;
 24439  0434  0086               	movwf	6
 24440  0435  3004               	movlw	4	; select bank8/9
 24441  0436  0087               	movwf	7
 24442  0437  0A01               	incf	1,w
 24443  0438  1903               	btfsc	3,2
 24444  0439  2C4B               	goto	l15031
 24445  043A  3009               	movlw	9
 24446  043B  0084               	movwf	4
 24447  043C  30BF               	movlw	191
 24448  043D  0085               	movwf	5
 24449  043E  0800               	movf	0,w	;code access
 24450  043F  00CA               	movwf	??_modbus_response_process
 24451  0440  084C               	movf	modbus_response_process@pmdbs,w
 24452  0441  0086               	movwf	6
 24453  0442  0801               	movf	1,w
 24454  0443  064A               	xorwf	??_modbus_response_process,w
 24455  0444  1903               	skipnz
 24456  0445  2C4B               	goto	l15031
 24457  0446  084C               	movf	modbus_response_process@pmdbs,w
 24458  0447  0086               	movwf	6
 24459  0448  0801               	movf	1,w
 24460  0449  1903               	btfsc	3,2
 24461  044A  0008               	return
 24462  044B                     l15031:	
 24463                           
 24464                           ;modbus.c: 142: if(!(crc_verify(rbuf,rlen-2)))return ;
 24465  044B  084D               	movf	modbus_response_process@rbuf,w
 24466  044C  00AB               	movwf	crc_verify@message
 24467  044D  3004               	movlw	4
 24468  044E  00AC               	movwf	crc_verify@message+1
 24469  044F  0848               	movf	modbus_response_process@rlen,w
 24470  0450  3EFE               	addlw	254
 24471  0451  00AD               	movwf	crc_verify@n
 24472  0452  30FF               	movlw	255
 24473  0453  3D49               	addwfc	modbus_response_process@rlen+1,w
 24474  0454  00AE               	movwf	crc_verify@n+1
 24475  0455  3193  23BD  3184   	fcall	_crc_verify
 24476  0458  3A00               	xorlw	0
 24477  0459  1903               	btfsc	3,2
 24478  045A  0008               	return
 24479                           
 24480                           ;modbus.c: 163: }
 24481  045B  0020               	movlb	0	; select bank0
 24482  045C  0A4C               	incf	modbus_response_process@pmdbs,w
 24483  045D  0086               	movwf	6
 24484  045E  3004               	movlw	4	; select bank8/9
 24485  045F  0087               	movwf	7
 24486  0460  0801               	movf	1,w
 24487                           
 24488                           ; Switch size 1, requested type "space"
 24489                           ; Number of cases is 6, Range of values is 100 to 105
 24490                           ; switch strategies available:
 24491                           ; Name         Instructions Cycles
 24492                           ; simple_byte           19    10 (average)
 24493                           ; direct_byte           21     9 (fixed)
 24494                           ; jumptable            263     9 (fixed)
 24495                           ;	Chosen strategy is simple_byte
 24496  0461  3A64               	xorlw	100	; case 100
 24497  0462  1903               	skipnz
 24498  0463  2C75               	goto	l15035
 24499  0464  3A01               	xorlw	1	; case 101
 24500  0465  1903               	skipnz
 24501  0466  2C78               	goto	l15037
 24502  0467  3A03               	xorlw	3	; case 102
 24503  0468  1903               	skipnz
 24504  0469  2C7B               	goto	l15039
 24505  046A  3A01               	xorlw	1	; case 103
 24506  046B  1903               	skipnz
 24507  046C  2C7B               	goto	l15039
 24508  046D  3A0F               	xorlw	15	; case 104
 24509  046E  1903               	skipnz
 24510  046F  2C7E               	goto	l15041
 24511  0470  3A01               	xorlw	1	; case 105
 24512  0471  1903               	skipnz
 24513  0472  2C81               	goto	l15043
 24514  0473  2C84               	goto	l15045
 24515  0474  0008               	return
 24516  0475                     l15035:	
 24517                           ;modbus.c: 145: case 100:
 24518                           
 24519                           ;modbus.c: 144: switch(pmdbs->func){
 24520                           
 24521                           
 24522                           ;modbus.c: 146: modbus_response_write_flash_sys(rbuf);
 24523  0475  0020               	movlb	0	; select bank0
 24524  0476  084D               	movf	modbus_response_process@rbuf,w
 24525  0477  2D0C               	ljmp	_modbus_response_write_flash_sys
 24526  0478                     l15037:	
 24527                           ;modbus.c: 148: case 101:
 24528                           
 24529                           ;modbus.c: 147: break;
 24530                           
 24531                           
 24532                           ;modbus.c: 149: modbus_response_write_flash_clib(rbuf);
 24533  0478  0020               	movlb	0	; select bank0
 24534  0479  084D               	movf	modbus_response_process@rbuf,w
 24535  047A  2C89               	ljmp	_modbus_response_write_flash_clib
 24536  047B                     l15039:	
 24537                           ;modbus.c: 151: case 102:
 24538                           
 24539                           ;modbus.c: 150: break;
 24540                           
 24541                           
 24542                           ;modbus.c: 152: case 103:
 24543                           ;modbus.c: 153: modbus_response_read_flash_data(rbuf);
 24544  047B  0020               	movlb	0	; select bank0
 24545  047C  084D               	movf	modbus_response_process@rbuf,w
 24546  047D  2E87               	ljmp	_modbus_response_read_flash_data
 24547  047E                     l15041:	
 24548                           ;modbus.c: 155: case 104:
 24549                           
 24550                           ;modbus.c: 154: break;
 24551                           
 24552                           
 24553                           ;modbus.c: 156: modbus_response_read_status_register(rbuf);
 24554  047E  0020               	movlb	0	; select bank0
 24555  047F  084D               	movf	modbus_response_process@rbuf,w
 24556  0480  2D92               	ljmp	_modbus_response_read_status_register
 24557  0481                     l15043:	
 24558                           ;modbus.c: 158: case 105:
 24559                           
 24560                           ;modbus.c: 157: break;
 24561                           
 24562                           
 24563                           ;modbus.c: 159: modbus_response_write_status_register(rbuf);
 24564  0481  0020               	movlb	0	; select bank0
 24565  0482  084D               	movf	modbus_response_process@rbuf,w
 24566  0483  2EFC               	ljmp	_modbus_response_write_status_register
 24567  0484                     l15045:	
 24568                           ;modbus.c: 161: default:
 24569                           
 24570                           ;modbus.c: 160: break;
 24571                           
 24572                           
 24573                           ;modbus.c: 162: modbus_response_illgeal_function(rbuf,0x01);break;
 24574  0484  0020               	movlb	0	; select bank0
 24575  0485  01B6               	clrf	modbus_response_illgeal_function@errcode
 24576  0486  0AB6               	incf	modbus_response_illgeal_function@errcode,f
 24577  0487  084D               	movf	modbus_response_process@rbuf,w
 24578  0488  2E51               	ljmp	_modbus_response_illgeal_function
 24579  0489                     __end_of_modbus_response_process:	
 24580  0489                     __ptext85:	
 24581 ;; *************** function _modbus_response_write_flash_clib *****************
 24582 ;; Defined at:
 24583 ;;		line 42 in file "src/api/modbus.c"
 24584 ;; Parameters:    Size  Location     Type
 24585 ;;  buf             1    wreg     PTR unsigned char 
 24586 ;;		 -> uart1Buffer(80), 
 24587 ;; Auto vars:     Size  Location     Type
 24588 ;;  buf             1   38[BANK0 ] PTR unsigned char 
 24589 ;;		 -> uart1Buffer(80), 
 24590 ;;  startAddr       2   35[BANK0 ] unsigned int 
 24591 ;;  len             1   39[BANK0 ] unsigned char 
 24592 ;;  pmdbs           1   37[BANK0 ] PTR struct .
 24593 ;;		 -> uart1Buffer(80), 
 24594 ;; Return value:  Size  Location     Type
 24595 ;;                  1    wreg      void 
 24596 ;; Registers used:
 24597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24598 ;; Tracked objects:
 24599 ;;		On entry : 0/0
 24600 ;;		On exit  : 0/0
 24601 ;;		Unchanged: 0/0
 24602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24604 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24605 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24606 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 24607 ;;Total ram usage:        7 bytes
 24608 ;; Hardware stack levels used:    1
 24609 ;; Hardware stack levels required when called:    7
 24610 ;; This function calls:
 24611 ;;		_data_api_flash_process
 24612 ;;		_m_mem_cpy_len
 24613 ;;		_modbus_response_illgeal_function
 24614 ;; This function is called by:
 24615 ;;		_modbus_response_process
 24616 ;; This function uses a non-reentrant model
 24617 ;;
 24618                           
 24619                           
 24620                           ;psect for function _modbus_response_write_flash_clib
 24621  0489                     _modbus_response_write_flash_clib:	
 24622                           
 24623                           ;incstack = 0
 24624                           ; Regs used in _modbus_response_write_flash_clib: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 24625                           ;modbus_response_write_flash_clib@buf stored from wreg
 24626  0489  0020               	movlb	0	; select bank0
 24627  048A  00C6               	movwf	modbus_response_write_flash_clib@buf
 24628                           
 24629                           ;modbus.c: 43: uint16_t startAddr=0;
 24630  048B  01C3               	clrf	modbus_response_write_flash_clib@startAddr
 24631  048C  01C4               	clrf	modbus_response_write_flash_clib@startAddr+1
 24632                           
 24633                           ;modbus.c: 44: uint8_t len=0;
 24634  048D  01C7               	clrf	modbus_response_write_flash_clib@len
 24635                           
 24636                           ;modbus.c: 45: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 24637  048E  00C1               	movwf	??_modbus_response_write_flash_clib
 24638  048F  00C5               	movwf	modbus_response_write_flash_clib@pmdbs
 24639                           
 24640                           ;modbus.c: 46: startAddr=pmdbs->addr_hi;
 24641  0490  3E02               	addlw	2
 24642  0491  0086               	movwf	6
 24643  0492  3004               	movlw	4	; select bank8/9
 24644  0493  0087               	movwf	7
 24645  0494  0801               	movf	1,w
 24646  0495  00C1               	movwf	??_modbus_response_write_flash_clib
 24647  0496  01C2               	clrf	??_modbus_response_write_flash_clib+1
 24648  0497  00C3               	movwf	modbus_response_write_flash_clib@startAddr
 24649  0498  0842               	movf	??_modbus_response_write_flash_clib+1,w
 24650  0499  00C4               	movwf	modbus_response_write_flash_clib@startAddr+1
 24651                           
 24652                           ;modbus.c: 47: startAddr<<=8;
 24653  049A  3008               	movlw	8
 24654  049B                     u12685:	
 24655  049B  35C3               	lslf	modbus_response_write_flash_clib@startAddr,f
 24656  049C  0DC4               	rlf	modbus_response_write_flash_clib@startAddr+1,f
 24657  049D  0B89               	decfsz	9,f
 24658  049E  2C9B               	goto	u12685
 24659                           
 24660                           ;modbus.c: 48: startAddr |= pmdbs->addr_lo;
 24661  049F  0845               	movf	modbus_response_write_flash_clib@pmdbs,w
 24662  04A0  3E03               	addlw	3
 24663  04A1  0086               	movwf	6
 24664  04A2  3004               	movlw	4	; select bank8/9
 24665  04A3  0087               	movwf	7
 24666  04A4  0801               	movf	1,w
 24667  04A5  00C1               	movwf	??_modbus_response_write_flash_clib
 24668  04A6  01C2               	clrf	??_modbus_response_write_flash_clib+1
 24669  04A7  04C3               	iorwf	modbus_response_write_flash_clib@startAddr,f
 24670  04A8  0842               	movf	??_modbus_response_write_flash_clib+1,w
 24671  04A9  04C4               	iorwf	modbus_response_write_flash_clib@startAddr+1,f
 24672                           
 24673                           ;modbus.c: 49: len=pmdbs->len_hi;
 24674  04AA  0845               	movf	modbus_response_write_flash_clib@pmdbs,w
 24675  04AB  0086               	movwf	6
 24676  04AC  3F44               	moviw [4]fsr1
 24677  04AD  00C7               	movwf	modbus_response_write_flash_clib@len
 24678                           
 24679                           ;modbus.c: 50: len<<=8;
 24680  04AE  01C7               	clrf	modbus_response_write_flash_clib@len
 24681                           
 24682                           ;modbus.c: 51: len = pmdbs->len_lo;
 24683  04AF  0845               	movf	modbus_response_write_flash_clib@pmdbs,w
 24684  04B0  0086               	movwf	6
 24685  04B1  3F45               	moviw [5]fsr1
 24686  04B2  00C7               	movwf	modbus_response_write_flash_clib@len
 24687                           
 24688                           ;modbus.c: 52: if(startAddr< (0x4000-0x80) || startAddr+len > 16384 || len >16){
 24689  04B3  303F               	movlw	63
 24690  04B4  0244               	subwf	modbus_response_write_flash_clib@startAddr+1,w
 24691  04B5  3080               	movlw	128
 24692  04B6  1903               	skipnz
 24693  04B7  0243               	subwf	modbus_response_write_flash_clib@startAddr,w
 24694  04B8  1C03               	skipc
 24695  04B9  2CCC               	goto	l14195
 24696  04BA  0847               	movf	modbus_response_write_flash_clib@len,w
 24697  04BB  0743               	addwf	modbus_response_write_flash_clib@startAddr,w
 24698  04BC  00C1               	movwf	??_modbus_response_write_flash_clib
 24699  04BD  0844               	movf	modbus_response_write_flash_clib@startAddr+1,w
 24700  04BE  1803               	skipnc
 24701  04BF  0A44               	incf	modbus_response_write_flash_clib@startAddr+1,w
 24702  04C0  00C2               	movwf	??_modbus_response_write_flash_clib+1
 24703  04C1  3040               	movlw	64
 24704  04C2  0242               	subwf	??_modbus_response_write_flash_clib+1,w
 24705  04C3  3001               	movlw	1
 24706  04C4  1903               	skipnz
 24707  04C5  0241               	subwf	??_modbus_response_write_flash_clib,w
 24708  04C6  1803               	skipnc
 24709  04C7  2CCC               	goto	l14195
 24710  04C8  3011               	movlw	17
 24711  04C9  0247               	subwf	modbus_response_write_flash_clib@len,w
 24712  04CA  1C03               	skipc
 24713  04CB  2CD1               	goto	l14199
 24714  04CC                     l14195:	
 24715                           
 24716                           ;modbus.c: 54: modbus_response_illgeal_function(buf,0x02);
 24717  04CC  3002               	movlw	2
 24718  04CD  00C1               	movwf	??_modbus_response_write_flash_clib
 24719  04CE  00B6               	movwf	modbus_response_illgeal_function@errcode
 24720  04CF  0846               	movf	modbus_response_write_flash_clib@buf,w
 24721  04D0  2E51               	ljmp	_modbus_response_illgeal_function
 24722  04D1                     l14199:	
 24723                           ;modbus.c: 55: return;
 24724                           
 24725                           
 24726                           ;modbus.c: 56: }
 24727                           ;modbus.c: 57: m_mem_cpy_len(comBuffer,buf+5,len);
 24728  04D1  3070               	movlw	112
 24729  04D2  00F3               	movwf	m_mem_cpy_len@d
 24730  04D3  3023               	movlw	35
 24731  04D4  00F4               	movwf	m_mem_cpy_len@d+1
 24732  04D5  0020               	movlb	0	; select bank0
 24733  04D6  0846               	movf	modbus_response_write_flash_clib@buf,w
 24734  04D7  3E05               	addlw	5
 24735  04D8  00F5               	movwf	m_mem_cpy_len@s
 24736  04D9  3004               	movlw	4
 24737  04DA  00F6               	movwf	m_mem_cpy_len@s+1
 24738  04DB  0847               	movf	modbus_response_write_flash_clib@len,w
 24739  04DC  00C1               	movwf	??_modbus_response_write_flash_clib
 24740  04DD  00F7               	movwf	m_mem_cpy_len@len
 24741  04DE  3197  2778  3184   	fcall	_m_mem_cpy_len
 24742                           
 24743                           ;modbus.c: 58: flashOpStr.flashAddr=startAddr;
 24744  04E1  0020               	movlb	0	; select bank0
 24745  04E2  0844               	movf	modbus_response_write_flash_clib@startAddr+1,w
 24746  04E3  0022               	movlb	2	; select bank2
 24747  04E4  00C8               	movwf	(_flashOpStr+1)^(0+256)
 24748  04E5  0020               	movlb	0	; select bank0
 24749  04E6  0843               	movf	modbus_response_write_flash_clib@startAddr,w
 24750  04E7  0022               	movlb	2	; select bank2
 24751  04E8  00C7               	movwf	_flashOpStr^(0+256)
 24752                           
 24753                           ;modbus.c: 59: flashOpStr.op=emFLASH_WRITE_main_CALIB_DATA;
 24754  04E9  01DB               	clrf	(_flashOpStr^(0+256)+20)
 24755  04EA  0ADB               	incf	(_flashOpStr^(0+256)+20),f
 24756                           
 24757                           ;modbus.c: 60: flashOpStr.len=len;
 24758  04EB  0020               	movlb	0	; select bank0
 24759  04EC  0847               	movf	modbus_response_write_flash_clib@len,w
 24760  04ED  00C1               	movwf	??_modbus_response_write_flash_clib
 24761  04EE  01C2               	clrf	??_modbus_response_write_flash_clib+1
 24762  04EF  0022               	movlb	2	; select bank2
 24763  04F0  00C9               	movwf	(_flashOpStr^(0+256)+2)
 24764  04F1  0020               	movlb	0	; select bank0
 24765  04F2  0842               	movf	??_modbus_response_write_flash_clib+1,w
 24766  04F3  0022               	movlb	2	; select bank2
 24767  04F4  00CA               	movwf	((_flashOpStr+1)^(0+256)+2)
 24768                           
 24769                           ;modbus.c: 61: m_mem_cpy_len(comBuffer,buf+5,len);
 24770  04F5  3070               	movlw	112
 24771  04F6  00F3               	movwf	m_mem_cpy_len@d
 24772  04F7  3023               	movlw	35
 24773  04F8  00F4               	movwf	m_mem_cpy_len@d+1
 24774  04F9  0020               	movlb	0	; select bank0
 24775  04FA  0846               	movf	modbus_response_write_flash_clib@buf,w
 24776  04FB  3E05               	addlw	5
 24777  04FC  00F5               	movwf	m_mem_cpy_len@s
 24778  04FD  3004               	movlw	4
 24779  04FE  00F6               	movwf	m_mem_cpy_len@s+1
 24780  04FF  0847               	movf	modbus_response_write_flash_clib@len,w
 24781  0500  00C1               	movwf	??_modbus_response_write_flash_clib
 24782  0501  00F7               	movwf	m_mem_cpy_len@len
 24783  0502  3197  2778  3184   	fcall	_m_mem_cpy_len
 24784                           
 24785                           ;modbus.c: 62: data_api_flash_process();
 24786  0505  3197  2793  3184   	fcall	_data_api_flash_process
 24787                           
 24788                           ;modbus.c: 63: modbus_response_illgeal_function(buf,0);
 24789  0508  0020               	movlb	0	; select bank0
 24790  0509  01B6               	clrf	modbus_response_illgeal_function@errcode
 24791  050A  0846               	movf	modbus_response_write_flash_clib@buf,w
 24792  050B  2E51               	ljmp	_modbus_response_illgeal_function
 24793  050C                     __end_of_modbus_response_write_flash_clib:	
 24794  050C                     __ptext84:	
 24795 ;; *************** function _modbus_response_write_flash_sys *****************
 24796 ;; Defined at:
 24797 ;;		line 18 in file "src/api/modbus.c"
 24798 ;; Parameters:    Size  Location     Type
 24799 ;;  buf             1    wreg     PTR unsigned char 
 24800 ;;		 -> uart1Buffer(80), 
 24801 ;; Auto vars:     Size  Location     Type
 24802 ;;  buf             1   38[BANK0 ] PTR unsigned char 
 24803 ;;		 -> uart1Buffer(80), 
 24804 ;;  startAddr       2   35[BANK0 ] unsigned int 
 24805 ;;  len             1   39[BANK0 ] unsigned char 
 24806 ;;  pmdbs           1   37[BANK0 ] PTR struct .
 24807 ;;		 -> uart1Buffer(80), 
 24808 ;; Return value:  Size  Location     Type
 24809 ;;                  1    wreg      void 
 24810 ;; Registers used:
 24811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24812 ;; Tracked objects:
 24813 ;;		On entry : 0/0
 24814 ;;		On exit  : 0/0
 24815 ;;		Unchanged: 0/0
 24816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 24817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 24818 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 24819 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 24820 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 24821 ;;Total ram usage:        7 bytes
 24822 ;; Hardware stack levels used:    1
 24823 ;; Hardware stack levels required when called:    7
 24824 ;; This function calls:
 24825 ;;		_data_api_flash_process
 24826 ;;		_m_mem_cpy_len
 24827 ;;		_modbus_response_illgeal_function
 24828 ;; This function is called by:
 24829 ;;		_modbus_response_process
 24830 ;; This function uses a non-reentrant model
 24831 ;;
 24832                           
 24833                           
 24834                           ;psect for function _modbus_response_write_flash_sys
 24835  050C                     _modbus_response_write_flash_sys:	
 24836                           
 24837                           ;incstack = 0
 24838                           ; Regs used in _modbus_response_write_flash_sys: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 24839                           ;modbus_response_write_flash_sys@buf stored from wreg
 24840  050C  0020               	movlb	0	; select bank0
 24841  050D  00C6               	movwf	modbus_response_write_flash_sys@buf
 24842                           
 24843                           ;modbus.c: 19: uint16_t startAddr=0;
 24844  050E  01C3               	clrf	modbus_response_write_flash_sys@startAddr
 24845  050F  01C4               	clrf	modbus_response_write_flash_sys@startAddr+1
 24846                           
 24847                           ;modbus.c: 20: uint8_t len=0;
 24848  0510  01C7               	clrf	modbus_response_write_flash_sys@len
 24849                           
 24850                           ;modbus.c: 21: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 24851  0511  00C1               	movwf	??_modbus_response_write_flash_sys
 24852  0512  00C5               	movwf	modbus_response_write_flash_sys@pmdbs
 24853                           
 24854                           ;modbus.c: 22: startAddr=pmdbs->addr_hi;
 24855  0513  3E02               	addlw	2
 24856  0514  0086               	movwf	6
 24857  0515  3004               	movlw	4	; select bank8/9
 24858  0516  0087               	movwf	7
 24859  0517  0801               	movf	1,w
 24860  0518  00C1               	movwf	??_modbus_response_write_flash_sys
 24861  0519  01C2               	clrf	??_modbus_response_write_flash_sys+1
 24862  051A  00C3               	movwf	modbus_response_write_flash_sys@startAddr
 24863  051B  0842               	movf	??_modbus_response_write_flash_sys+1,w
 24864  051C  00C4               	movwf	modbus_response_write_flash_sys@startAddr+1
 24865                           
 24866                           ;modbus.c: 23: startAddr<<=8;
 24867  051D  3008               	movlw	8
 24868  051E                     u12645:	
 24869  051E  35C3               	lslf	modbus_response_write_flash_sys@startAddr,f
 24870  051F  0DC4               	rlf	modbus_response_write_flash_sys@startAddr+1,f
 24871  0520  0B89               	decfsz	9,f
 24872  0521  2D1E               	goto	u12645
 24873                           
 24874                           ;modbus.c: 24: startAddr |= pmdbs->addr_lo;
 24875  0522  0845               	movf	modbus_response_write_flash_sys@pmdbs,w
 24876  0523  3E03               	addlw	3
 24877  0524  0086               	movwf	6
 24878  0525  3004               	movlw	4	; select bank8/9
 24879  0526  0087               	movwf	7
 24880  0527  0801               	movf	1,w
 24881  0528  00C1               	movwf	??_modbus_response_write_flash_sys
 24882  0529  01C2               	clrf	??_modbus_response_write_flash_sys+1
 24883  052A  04C3               	iorwf	modbus_response_write_flash_sys@startAddr,f
 24884  052B  0842               	movf	??_modbus_response_write_flash_sys+1,w
 24885  052C  04C4               	iorwf	modbus_response_write_flash_sys@startAddr+1,f
 24886                           
 24887                           ;modbus.c: 25: len=pmdbs->len_hi;
 24888  052D  0845               	movf	modbus_response_write_flash_sys@pmdbs,w
 24889  052E  0086               	movwf	6
 24890  052F  3F44               	moviw [4]fsr1
 24891  0530  00C7               	movwf	modbus_response_write_flash_sys@len
 24892                           
 24893                           ;modbus.c: 26: len<<=8;
 24894  0531  01C7               	clrf	modbus_response_write_flash_sys@len
 24895                           
 24896                           ;modbus.c: 27: len = pmdbs->len_lo;
 24897  0532  0845               	movf	modbus_response_write_flash_sys@pmdbs,w
 24898  0533  0086               	movwf	6
 24899  0534  3F45               	moviw [5]fsr1
 24900  0535  00C7               	movwf	modbus_response_write_flash_sys@len
 24901                           
 24902                           ;modbus.c: 28: if(startAddr< (0x4000-0x80) || startAddr+len > 16384 || len >16){
 24903  0536  303F               	movlw	63
 24904  0537  0244               	subwf	modbus_response_write_flash_sys@startAddr+1,w
 24905  0538  3080               	movlw	128
 24906  0539  1903               	skipnz
 24907  053A  0243               	subwf	modbus_response_write_flash_sys@startAddr,w
 24908  053B  1C03               	skipc
 24909  053C  2D4F               	goto	l14157
 24910  053D  0847               	movf	modbus_response_write_flash_sys@len,w
 24911  053E  0743               	addwf	modbus_response_write_flash_sys@startAddr,w
 24912  053F  00C1               	movwf	??_modbus_response_write_flash_sys
 24913  0540  0844               	movf	modbus_response_write_flash_sys@startAddr+1,w
 24914  0541  1803               	skipnc
 24915  0542  0A44               	incf	modbus_response_write_flash_sys@startAddr+1,w
 24916  0543  00C2               	movwf	??_modbus_response_write_flash_sys+1
 24917  0544  3040               	movlw	64
 24918  0545  0242               	subwf	??_modbus_response_write_flash_sys+1,w
 24919  0546  3001               	movlw	1
 24920  0547  1903               	skipnz
 24921  0548  0241               	subwf	??_modbus_response_write_flash_sys,w
 24922  0549  1803               	skipnc
 24923  054A  2D4F               	goto	l14157
 24924  054B  3011               	movlw	17
 24925  054C  0247               	subwf	modbus_response_write_flash_sys@len,w
 24926  054D  1C03               	skipc
 24927  054E  2D54               	goto	l14161
 24928  054F                     l14157:	
 24929                           
 24930                           ;modbus.c: 30: modbus_response_illgeal_function(buf,0x02);
 24931  054F  3002               	movlw	2
 24932  0550  00C1               	movwf	??_modbus_response_write_flash_sys
 24933  0551  00B6               	movwf	modbus_response_illgeal_function@errcode
 24934  0552  0846               	movf	modbus_response_write_flash_sys@buf,w
 24935  0553  2E51               	ljmp	_modbus_response_illgeal_function
 24936  0554                     l14161:	
 24937                           ;modbus.c: 31: return;
 24938                           
 24939                           
 24940                           ;modbus.c: 32: }
 24941                           ;modbus.c: 33: m_mem_cpy_len(comBuffer,buf+5,len);
 24942  0554  3070               	movlw	112
 24943  0555  00F3               	movwf	m_mem_cpy_len@d
 24944  0556  3023               	movlw	35
 24945  0557  00F4               	movwf	m_mem_cpy_len@d+1
 24946  0558  0020               	movlb	0	; select bank0
 24947  0559  0846               	movf	modbus_response_write_flash_sys@buf,w
 24948  055A  3E05               	addlw	5
 24949  055B  00F5               	movwf	m_mem_cpy_len@s
 24950  055C  3004               	movlw	4
 24951  055D  00F6               	movwf	m_mem_cpy_len@s+1
 24952  055E  0847               	movf	modbus_response_write_flash_sys@len,w
 24953  055F  00C1               	movwf	??_modbus_response_write_flash_sys
 24954  0560  00F7               	movwf	m_mem_cpy_len@len
 24955  0561  3197  2778  3184   	fcall	_m_mem_cpy_len
 24956                           
 24957                           ;modbus.c: 34: flashOpStr.flashAddr=startAddr;
 24958  0564  0020               	movlb	0	; select bank0
 24959  0565  0844               	movf	modbus_response_write_flash_sys@startAddr+1,w
 24960  0566  0022               	movlb	2	; select bank2
 24961  0567  00C8               	movwf	(_flashOpStr+1)^(0+256)
 24962  0568  0020               	movlb	0	; select bank0
 24963  0569  0843               	movf	modbus_response_write_flash_sys@startAddr,w
 24964  056A  0022               	movlb	2	; select bank2
 24965  056B  00C7               	movwf	_flashOpStr^(0+256)
 24966                           
 24967                           ;modbus.c: 35: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 24968  056C  3002               	movlw	2
 24969  056D  0020               	movlb	0	; select bank0
 24970  056E  00C1               	movwf	??_modbus_response_write_flash_sys
 24971  056F  0022               	movlb	2	; select bank2
 24972  0570  00DB               	movwf	(_flashOpStr^(0+256)+20)
 24973                           
 24974                           ;modbus.c: 36: flashOpStr.len=len;
 24975  0571  0020               	movlb	0	; select bank0
 24976  0572  0847               	movf	modbus_response_write_flash_sys@len,w
 24977  0573  00C1               	movwf	??_modbus_response_write_flash_sys
 24978  0574  01C2               	clrf	??_modbus_response_write_flash_sys+1
 24979  0575  0022               	movlb	2	; select bank2
 24980  0576  00C9               	movwf	(_flashOpStr^(0+256)+2)
 24981  0577  0020               	movlb	0	; select bank0
 24982  0578  0842               	movf	??_modbus_response_write_flash_sys+1,w
 24983  0579  0022               	movlb	2	; select bank2
 24984  057A  00CA               	movwf	((_flashOpStr+1)^(0+256)+2)
 24985                           
 24986                           ;modbus.c: 37: m_mem_cpy_len(comBuffer,buf+5,len);
 24987  057B  3070               	movlw	112
 24988  057C  00F3               	movwf	m_mem_cpy_len@d
 24989  057D  3023               	movlw	35
 24990  057E  00F4               	movwf	m_mem_cpy_len@d+1
 24991  057F  0020               	movlb	0	; select bank0
 24992  0580  0846               	movf	modbus_response_write_flash_sys@buf,w
 24993  0581  3E05               	addlw	5
 24994  0582  00F5               	movwf	m_mem_cpy_len@s
 24995  0583  3004               	movlw	4
 24996  0584  00F6               	movwf	m_mem_cpy_len@s+1
 24997  0585  0847               	movf	modbus_response_write_flash_sys@len,w
 24998  0586  00C1               	movwf	??_modbus_response_write_flash_sys
 24999  0587  00F7               	movwf	m_mem_cpy_len@len
 25000  0588  3197  2778  3184   	fcall	_m_mem_cpy_len
 25001                           
 25002                           ;modbus.c: 38: data_api_flash_process();
 25003  058B  3197  2793  3184   	fcall	_data_api_flash_process
 25004                           
 25005                           ;modbus.c: 39: modbus_response_illgeal_function(buf,0);
 25006  058E  0020               	movlb	0	; select bank0
 25007  058F  01B6               	clrf	modbus_response_illgeal_function@errcode
 25008  0590  0846               	movf	modbus_response_write_flash_sys@buf,w
 25009  0591  2E51               	ljmp	_modbus_response_illgeal_function
 25010  0592                     __end_of_modbus_response_write_flash_sys:	
 25011  0592                     __ptext89:	
 25012 ;; *************** function _modbus_response_read_status_register *****************
 25013 ;; Defined at:
 25014 ;;		line 87 in file "src/api/modbus.c"
 25015 ;; Parameters:    Size  Location     Type
 25016 ;;  buf             1    wreg     PTR unsigned char 
 25017 ;;		 -> uart1Buffer(80), 
 25018 ;; Auto vars:     Size  Location     Type
 25019 ;;  buf             1   30[BANK0 ] PTR unsigned char 
 25020 ;;		 -> uart1Buffer(80), 
 25021 ;;  startAddr       2   27[BANK0 ] unsigned int 
 25022 ;;  len             1   31[BANK0 ] unsigned char 
 25023 ;;  pmdbs           1   29[BANK0 ] PTR struct .
 25024 ;;		 -> uart1Buffer(80), 
 25025 ;; Return value:  Size  Location     Type
 25026 ;;                  1    wreg      void 
 25027 ;; Registers used:
 25028 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25029 ;; Tracked objects:
 25030 ;;		On entry : 0/0
 25031 ;;		On exit  : 0/0
 25032 ;;		Unchanged: 0/0
 25033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25035 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25037 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 25038 ;;Total ram usage:        7 bytes
 25039 ;; Hardware stack levels used:    1
 25040 ;; Hardware stack levels required when called:    5
 25041 ;; This function calls:
 25042 ;;		_crc_append
 25043 ;;		_m_mem_cpy_len
 25044 ;;		_modbus_response_illgeal_function
 25045 ;;		_my_uart1_send_poll
 25046 ;; This function is called by:
 25047 ;;		_modbus_response_process
 25048 ;; This function uses a non-reentrant model
 25049 ;;
 25050                           
 25051                           
 25052                           ;psect for function _modbus_response_read_status_register
 25053  0592                     _modbus_response_read_status_register:	
 25054                           
 25055                           ;incstack = 0
 25056                           ; Regs used in _modbus_response_read_status_register: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 25057                           ;modbus_response_read_status_register@buf stored from wreg
 25058  0592  0020               	movlb	0	; select bank0
 25059  0593  00BE               	movwf	modbus_response_read_status_register@buf
 25060                           
 25061                           ;modbus.c: 89: uint16_t startAddr=0;
 25062  0594  01BB               	clrf	modbus_response_read_status_register@startAddr
 25063  0595  01BC               	clrf	modbus_response_read_status_register@startAddr+1
 25064                           
 25065                           ;modbus.c: 90: uint8_t len=0;
 25066  0596  01BF               	clrf	modbus_response_read_status_register@len
 25067                           
 25068                           ;modbus.c: 91: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 25069  0597  00B9               	movwf	??_modbus_response_read_status_register
 25070  0598  00BD               	movwf	modbus_response_read_status_register@pmdbs
 25071                           
 25072                           ;modbus.c: 92: startAddr=pmdbs->addr_hi;
 25073  0599  3E02               	addlw	2
 25074  059A  0086               	movwf	6
 25075  059B  3004               	movlw	4	; select bank8/9
 25076  059C  0087               	movwf	7
 25077  059D  0801               	movf	1,w
 25078  059E  00B9               	movwf	??_modbus_response_read_status_register
 25079  059F  01BA               	clrf	??_modbus_response_read_status_register+1
 25080  05A0  00BB               	movwf	modbus_response_read_status_register@startAddr
 25081  05A1  083A               	movf	??_modbus_response_read_status_register+1,w
 25082  05A2  00BC               	movwf	modbus_response_read_status_register@startAddr+1
 25083                           
 25084                           ;modbus.c: 93: startAddr<<=8;
 25085  05A3  3008               	movlw	8
 25086  05A4                     u12765:	
 25087  05A4  35BB               	lslf	modbus_response_read_status_register@startAddr,f
 25088  05A5  0DBC               	rlf	modbus_response_read_status_register@startAddr+1,f
 25089  05A6  0B89               	decfsz	9,f
 25090  05A7  2DA4               	goto	u12765
 25091                           
 25092                           ;modbus.c: 94: startAddr |= pmdbs->addr_lo;
 25093  05A8  083D               	movf	modbus_response_read_status_register@pmdbs,w
 25094  05A9  3E03               	addlw	3
 25095  05AA  0086               	movwf	6
 25096  05AB  3004               	movlw	4	; select bank8/9
 25097  05AC  0087               	movwf	7
 25098  05AD  0801               	movf	1,w
 25099  05AE  00B9               	movwf	??_modbus_response_read_status_register
 25100  05AF  01BA               	clrf	??_modbus_response_read_status_register+1
 25101  05B0  04BB               	iorwf	modbus_response_read_status_register@startAddr,f
 25102  05B1  083A               	movf	??_modbus_response_read_status_register+1,w
 25103  05B2  04BC               	iorwf	modbus_response_read_status_register@startAddr+1,f
 25104                           
 25105                           ;modbus.c: 95: len=pmdbs->len_hi;
 25106  05B3  083D               	movf	modbus_response_read_status_register@pmdbs,w
 25107  05B4  0086               	movwf	6
 25108  05B5  3F44               	moviw [4]fsr1
 25109  05B6  00BF               	movwf	modbus_response_read_status_register@len
 25110                           
 25111                           ;modbus.c: 96: len<<=8;
 25112  05B7  01BF               	clrf	modbus_response_read_status_register@len
 25113                           
 25114                           ;modbus.c: 97: len = pmdbs->len_lo;
 25115  05B8  083D               	movf	modbus_response_read_status_register@pmdbs,w
 25116  05B9  0086               	movwf	6
 25117  05BA  3F45               	moviw [5]fsr1
 25118  05BB  00BF               	movwf	modbus_response_read_status_register@len
 25119                           
 25120                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 25121                           ; Switch size 1, requested type "space"
 25122                           ; Number of cases is 1, Range of values is 224 to 224
 25123                           ; switch strategies available:
 25124                           ; Name         Instructions Cycles
 25125                           ; simple_byte            4     3 (average)
 25126                           ; direct_byte           11     9 (fixed)
 25127                           ; jumptable            263     9 (fixed)
 25128                           ;	Chosen strategy is simple_byte
 25129                           
 25130                           ;modbus.c: 117: }
 25131                           
 25132                           ;modbus.c: 116: break;
 25133                           
 25134                           ;modbus.c: 115: default:
 25135                           
 25136                           ;modbus.c: 114: return;
 25137                           
 25138                           ;modbus.c: 98: switch(startAddr){
 25139  05BC  0020               	movlb	0	; select bank0
 25140  05BD  083C               	movf	modbus_response_read_status_register@startAddr+1,w
 25141  05BE  3AE0               	xorlw	224	; case 224
 25142  05BF  1903               	skipnz
 25143  05C0  2E1C               	goto	l15571
 25144  05C1  2E24               	goto	l14287
 25145  05C2                     l14253:	
 25146                           ;modbus.c: 99: case (0xe000):
 25147                           
 25148                           
 25149                           ;modbus.c: 100: if(len!=4)break;
 25150  05C2  3004               	movlw	4
 25151  05C3  063F               	xorwf	modbus_response_read_status_register@len,w
 25152  05C4  1D03               	btfss	3,2
 25153  05C5  2E24               	goto	l14287
 25154                           
 25155                           ;modbus.c: 101: m_mem_cpy_len(buf+5,(uint8_t*)(&rtBalanceMoney),4);
 25156  05C6  083E               	movf	modbus_response_read_status_register@buf,w
 25157  05C7  3E05               	addlw	5
 25158  05C8  00F3               	movwf	m_mem_cpy_len@d
 25159  05C9  3004               	movlw	4
 25160  05CA  00F4               	movwf	m_mem_cpy_len@d+1
 25161  05CB  30C2               	movlw	low _rtBalanceMoney
 25162  05CC  00F5               	movwf	m_mem_cpy_len@s
 25163  05CD  3000               	movlw	high _rtBalanceMoney
 25164  05CE  00F6               	movwf	m_mem_cpy_len@s+1
 25165  05CF  3004               	movlw	4
 25166  05D0  00B9               	movwf	??_modbus_response_read_status_register
 25167  05D1  00F7               	movwf	m_mem_cpy_len@len
 25168  05D2  3197  2778  3184   	fcall	_m_mem_cpy_len
 25169                           
 25170                           ;modbus.c: 102: len+=5;
 25171  05D5  3005               	movlw	5
 25172  05D6  0020               	movlb	0	; select bank0
 25173  05D7  00B9               	movwf	??_modbus_response_read_status_register
 25174  05D8  07BF               	addwf	modbus_response_read_status_register@len,f
 25175                           
 25176                           ;modbus.c: 103: crc_append(buf,len);
 25177  05D9  083E               	movf	modbus_response_read_status_register@buf,w
 25178  05DA  00AB               	movwf	crc_append@message
 25179  05DB  3004               	movlw	4
 25180  05DC  00AC               	movwf	crc_append@message+1
 25181  05DD  083F               	movf	modbus_response_read_status_register@len,w
 25182  05DE  00B9               	movwf	??_modbus_response_read_status_register
 25183  05DF  01BA               	clrf	??_modbus_response_read_status_register+1
 25184  05E0  00AD               	movwf	crc_append@n
 25185  05E1  083A               	movf	??_modbus_response_read_status_register+1,w
 25186  05E2  00AE               	movwf	crc_append@n+1
 25187  05E3  3194  2455  3184   	fcall	_crc_append
 25188                           
 25189                           ;modbus.c: 104: len+=2;
 25190  05E6  3002               	movlw	2
 25191  05E7  0020               	movlb	0	; select bank0
 25192  05E8  00B9               	movwf	??_modbus_response_read_status_register
 25193  05E9  07BF               	addwf	modbus_response_read_status_register@len,f
 25194                           
 25195                           ;modbus.c: 105: my_uart1_send_poll(buf,len);
 25196  05EA  083F               	movf	modbus_response_read_status_register@len,w
 25197  05EB  00B9               	movwf	??_modbus_response_read_status_register
 25198  05EC  01BA               	clrf	??_modbus_response_read_status_register+1
 25199  05ED  00F3               	movwf	my_uart1_send_poll@len
 25200  05EE  083A               	movf	??_modbus_response_read_status_register+1,w
 25201  05EF  00F4               	movwf	my_uart1_send_poll@len+1
 25202  05F0  083E               	movf	modbus_response_read_status_register@buf,w
 25203  05F1  2E2A               	ljmp	_my_uart1_send_poll
 25204  05F2                     l14267:	
 25205                           ;modbus.c: 107: case (0xe000+5):
 25206                           
 25207                           ;modbus.c: 106: return;
 25208                           
 25209                           
 25210                           ;modbus.c: 108: if(len!=1)break;
 25211  05F2  0020               	movlb	0	; select bank0
 25212  05F3  0B3F               	decfsz	modbus_response_read_status_register@len,w
 25213  05F4  2E24               	goto	l14287
 25214                           
 25215                           ;modbus.c: 109: buf[5]=deviceStatus.byte;
 25216  05F5  0021               	movlb	1	; select bank1
 25217  05F6  083A               	movf	_deviceStatus^(0+128),w
 25218  05F7  0020               	movlb	0	; select bank0
 25219  05F8  00B9               	movwf	??_modbus_response_read_status_register
 25220  05F9  083E               	movf	modbus_response_read_status_register@buf,w
 25221  05FA  3E05               	addlw	5
 25222  05FB  0086               	movwf	6
 25223  05FC  3004               	movlw	4	; select bank8/9
 25224  05FD  0087               	movwf	7
 25225  05FE  0839               	movf	??_modbus_response_read_status_register,w
 25226  05FF  0081               	movwf	1
 25227                           
 25228                           ;modbus.c: 110: len+=5;
 25229  0600  3005               	movlw	5
 25230  0601  00B9               	movwf	??_modbus_response_read_status_register
 25231  0602  07BF               	addwf	modbus_response_read_status_register@len,f
 25232                           
 25233                           ;modbus.c: 111: crc_append(buf,len);
 25234  0603  083E               	movf	modbus_response_read_status_register@buf,w
 25235  0604  00AB               	movwf	crc_append@message
 25236  0605  3004               	movlw	4
 25237  0606  00AC               	movwf	crc_append@message+1
 25238  0607  083F               	movf	modbus_response_read_status_register@len,w
 25239  0608  00B9               	movwf	??_modbus_response_read_status_register
 25240  0609  01BA               	clrf	??_modbus_response_read_status_register+1
 25241  060A  00AD               	movwf	crc_append@n
 25242  060B  083A               	movf	??_modbus_response_read_status_register+1,w
 25243  060C  00AE               	movwf	crc_append@n+1
 25244  060D  3194  2455  3184   	fcall	_crc_append
 25245                           
 25246                           ;modbus.c: 112: len+=2;
 25247  0610  3002               	movlw	2
 25248  0611  0020               	movlb	0	; select bank0
 25249  0612  00B9               	movwf	??_modbus_response_read_status_register
 25250  0613  07BF               	addwf	modbus_response_read_status_register@len,f
 25251                           
 25252                           ;modbus.c: 113: my_uart1_send_poll(buf,len);
 25253  0614  083F               	movf	modbus_response_read_status_register@len,w
 25254  0615  00B9               	movwf	??_modbus_response_read_status_register
 25255  0616  01BA               	clrf	??_modbus_response_read_status_register+1
 25256  0617  00F3               	movwf	my_uart1_send_poll@len
 25257  0618  083A               	movf	??_modbus_response_read_status_register+1,w
 25258  0619  00F4               	movwf	my_uart1_send_poll@len+1
 25259  061A  083E               	movf	modbus_response_read_status_register@buf,w
 25260  061B  2E2A               	ljmp	_my_uart1_send_poll
 25261  061C                     l15571:	
 25262                           
 25263                           ; Switch size 1, requested type "space"
 25264                           ; Number of cases is 2, Range of values is 0 to 5
 25265                           ; switch strategies available:
 25266                           ; Name         Instructions Cycles
 25267                           ; simple_byte            7     4 (average)
 25268                           ; direct_byte           18     6 (fixed)
 25269                           ; jumptable            260     6 (fixed)
 25270                           ;	Chosen strategy is simple_byte
 25271  061C  083B               	movf	modbus_response_read_status_register@startAddr,w
 25272  061D  3A00               	xorlw	0	; case 0
 25273  061E  1903               	skipnz
 25274  061F  2DC2               	goto	l14253
 25275  0620  3A05               	xorlw	5	; case 5
 25276  0621  1903               	skipnz
 25277  0622  2DF2               	goto	l14267
 25278  0623  2E24               	goto	l14287
 25279  0624                     l14287:	
 25280                           
 25281                           ;modbus.c: 118: modbus_response_illgeal_function(buf,0x02);
 25282  0624  3002               	movlw	2
 25283  0625  0020               	movlb	0	; select bank0
 25284  0626  00B9               	movwf	??_modbus_response_read_status_register
 25285  0627  00B6               	movwf	modbus_response_illgeal_function@errcode
 25286  0628  083E               	movf	modbus_response_read_status_register@buf,w
 25287  0629  2E51               	ljmp	_modbus_response_illgeal_function
 25288  062A                     __end_of_modbus_response_read_status_register:	
 25289  062A                     __ptext92:	
 25290 ;; *************** function _my_uart1_send_poll *****************
 25291 ;; Defined at:
 25292 ;;		line 208 in file "mcc_generated_files/eusart1.c"
 25293 ;; Parameters:    Size  Location     Type
 25294 ;;  buf             1    wreg     PTR unsigned char 
 25295 ;;		 -> uart1Buffer(80), 
 25296 ;;  len             2    3[COMMON] unsigned int 
 25297 ;; Auto vars:     Size  Location     Type
 25298 ;;  buf             1    2[BANK0 ] PTR unsigned char 
 25299 ;;		 -> uart1Buffer(80), 
 25300 ;;  i               2    0[BANK0 ] unsigned int 
 25301 ;; Return value:  Size  Location     Type
 25302 ;;                  1    wreg      void 
 25303 ;; Registers used:
 25304 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 25305 ;; Tracked objects:
 25306 ;;		On entry : 0/0
 25307 ;;		On exit  : 0/0
 25308 ;;		Unchanged: 0/0
 25309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25310 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25311 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25312 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25313 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25314 ;;Total ram usage:        6 bytes
 25315 ;; Hardware stack levels used:    1
 25316 ;; Hardware stack levels required when called:    2
 25317 ;; This function calls:
 25318 ;;		Nothing
 25319 ;; This function is called by:
 25320 ;;		_modbus_response_illgeal_function
 25321 ;;		_modbus_response_read_flash_data
 25322 ;;		_modbus_response_read_status_register
 25323 ;; This function uses a non-reentrant model
 25324 ;;
 25325                           
 25326                           
 25327                           ;psect for function _my_uart1_send_poll
 25328  062A                     _my_uart1_send_poll:	
 25329                           
 25330                           ;incstack = 0
 25331                           ; Regs used in _my_uart1_send_poll: [wreg+fsr1l+fsr1h+status,2+status,0]
 25332                           ;my_uart1_send_poll@buf stored from wreg
 25333  062A  0020               	movlb	0	; select bank0
 25334  062B  00A2               	movwf	my_uart1_send_poll@buf
 25335                           
 25336                           ;eusart1.c: 210: uint16_t i;
 25337                           ;eusart1.c: 211: do{do { LATAbits.LATA4 = 1; } while(0);}while(0);;
 25338  062C  0022               	movlb	2	; select bank2
 25339  062D  160C               	bsf	12,4	;volatile
 25340                           
 25341                           ;eusart1.c: 212: if(PIR1bits.TXIF)PIR1bits.TXIF=0;
 25342  062E  0020               	movlb	0	; select bank0
 25343  062F  1A11               	btfsc	17,4	;volatile
 25344  0630  1211               	bcf	17,4	;volatile
 25345                           
 25346                           ;eusart1.c: 213: for(i=0;i<len;i++)
 25347  0631  01A0               	clrf	my_uart1_send_poll@i
 25348  0632  01A1               	clrf	my_uart1_send_poll@i+1
 25349  0633                     l303:	
 25350  0633  0874               	movf	my_uart1_send_poll@len+1,w
 25351  0634  0221               	subwf	my_uart1_send_poll@i+1,w
 25352  0635  1D03               	skipz
 25353  0636  2E39               	goto	u11855
 25354  0637  0873               	movf	my_uart1_send_poll@len,w
 25355  0638  0220               	subwf	my_uart1_send_poll@i,w
 25356  0639                     u11855:	
 25357  0639  1803               	btfsc	3,0
 25358  063A  2E4E               	goto	l310
 25359                           
 25360                           ;eusart1.c: 214: {
 25361                           ;eusart1.c: 216: TX1REG=*buf;
 25362  063B  0822               	movf	my_uart1_send_poll@buf,w
 25363  063C  0086               	movwf	6
 25364  063D  3004               	movlw	4	; select bank8/9
 25365  063E  0087               	movwf	7
 25366  063F  0801               	movf	1,w
 25367  0640  0023               	movlb	3	; select bank3
 25368  0641  009A               	movwf	26	;volatile
 25369                           
 25370                           ;eusart1.c: 217: buf++;
 25371  0642  3001               	movlw	1
 25372  0643  00F5               	movwf	??_my_uart1_send_poll
 25373  0644  0020               	movlb	0	; select bank0
 25374  0645  07A2               	addwf	my_uart1_send_poll@buf,f
 25375  0646                     l305:	
 25376                           ;eusart1.c: 218: while(!(PIR1bits.TXIF));
 25377                           
 25378  0646  1E11               	btfss	17,4	;volatile
 25379  0647  2E46               	goto	l305
 25380                           
 25381                           ;eusart1.c: 219: PIR1bits.TXIF=0;
 25382  0648  1211               	bcf	17,4	;volatile
 25383  0649  3001               	movlw	1
 25384  064A  07A0               	addwf	my_uart1_send_poll@i,f
 25385  064B  3000               	movlw	0
 25386  064C  3DA1               	addwfc	my_uart1_send_poll@i+1,f
 25387  064D  2E33               	goto	l303
 25388  064E                     l310:	
 25389                           ;eusart1.c: 220: }
 25390                           ;eusart1.c: 221: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 25391                           
 25392  064E  0022               	movlb	2	; select bank2
 25393  064F  120C               	bcf	12,4	;volatile
 25394  0650  0008               	return
 25395  0651                     __end_of_my_uart1_send_poll:	
 25396  0651                     __ptext91:	
 25397 ;; *************** function _modbus_response_illgeal_function *****************
 25398 ;; Defined at:
 25399 ;;		line 6 in file "src/api/modbus.c"
 25400 ;; Parameters:    Size  Location     Type
 25401 ;;  buf             1    wreg     PTR unsigned char 
 25402 ;;		 -> uart1Buffer(80), 
 25403 ;;  errcode         1   22[BANK0 ] unsigned char 
 25404 ;; Auto vars:     Size  Location     Type
 25405 ;;  buf             1   24[BANK0 ] PTR unsigned char 
 25406 ;;		 -> uart1Buffer(80), 
 25407 ;;  pmdbs           1   23[BANK0 ] PTR struct .
 25408 ;;		 -> uart1Buffer(80), 
 25409 ;; Return value:  Size  Location     Type
 25410 ;;                  1    wreg      void 
 25411 ;; Registers used:
 25412 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25413 ;; Tracked objects:
 25414 ;;		On entry : 0/0
 25415 ;;		On exit  : 0/0
 25416 ;;		Unchanged: 0/0
 25417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25418 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 25419 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25421 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0
 25422 ;;Total ram usage:        4 bytes
 25423 ;; Hardware stack levels used:    1
 25424 ;; Hardware stack levels required when called:    4
 25425 ;; This function calls:
 25426 ;;		_crc_append
 25427 ;;		_my_uart1_send_poll
 25428 ;; This function is called by:
 25429 ;;		_modbus_response_write_flash_sys
 25430 ;;		_modbus_response_write_flash_clib
 25431 ;;		_modbus_response_read_flash_data
 25432 ;;		_modbus_response_read_status_register
 25433 ;;		_modbus_response_write_status_register
 25434 ;;		_modbus_response_process
 25435 ;; This function uses a non-reentrant model
 25436 ;;
 25437                           
 25438                           
 25439                           ;psect for function _modbus_response_illgeal_function
 25440  0651                     _modbus_response_illgeal_function:	
 25441                           
 25442                           ;incstack = 0
 25443                           ; Regs used in _modbus_response_illgeal_function: [wreg-fsr1h+status,2+status,0+pclath+c
      +                          stack]
 25444                           ;modbus_response_illgeal_function@buf stored from wreg
 25445  0651  0020               	movlb	0	; select bank0
 25446  0652  00B8               	movwf	modbus_response_illgeal_function@buf
 25447                           
 25448                           ;modbus.c: 8: st_modbusErrRespStructDef* pmdbs=(st_modbusErrRespStructDef*)buf;
 25449  0653  00F7               	movwf	??_modbus_response_illgeal_function
 25450  0654  00B7               	movwf	modbus_response_illgeal_function@pmdbs
 25451                           
 25452                           ;modbus.c: 9: if(pmdbs->addr==0x00)return;
 25453  0655  0086               	movwf	6
 25454  0656  3004               	movlw	4	; select bank8/9
 25455  0657  0087               	movwf	7
 25456  0658  0801               	movf	1,w
 25457  0659  1903               	btfsc	3,2
 25458  065A  0008               	return
 25459                           
 25460                           ;modbus.c: 10: pmdbs->addr=mainSystemData.shortID;
 25461  065B  3009               	movlw	9
 25462  065C  0084               	movwf	4
 25463  065D  30BF               	movlw	191
 25464  065E  0085               	movwf	5
 25465  065F  0800               	movf	0,w	;code access
 25466  0660  00F7               	movwf	??_modbus_response_illgeal_function
 25467  0661  0837               	movf	modbus_response_illgeal_function@pmdbs,w
 25468  0662  0086               	movwf	6
 25469  0663  0877               	movf	??_modbus_response_illgeal_function,w
 25470  0664  0081               	movwf	1
 25471                           
 25472                           ;modbus.c: 11: if(errcode){
 25473  0665  0836               	movf	modbus_response_illgeal_function@errcode,w
 25474  0666  1903               	btfsc	3,2
 25475  0667  2E6E               	goto	l751
 25476                           
 25477                           ;modbus.c: 12: pmdbs->func+=0x80;
 25478  0668  3080               	movlw	128
 25479  0669  00F7               	movwf	??_modbus_response_illgeal_function
 25480  066A  0A37               	incf	modbus_response_illgeal_function@pmdbs,w
 25481  066B  0086               	movwf	6
 25482  066C  0877               	movf	??_modbus_response_illgeal_function,w
 25483  066D  0781               	addwf	1,f
 25484  066E                     l751:	
 25485                           
 25486                           ;modbus.c: 13: }
 25487                           ;modbus.c: 14: pmdbs->errcord=errcode;
 25488  066E  0836               	movf	modbus_response_illgeal_function@errcode,w
 25489  066F  00F7               	movwf	??_modbus_response_illgeal_function
 25490  0670  0837               	movf	modbus_response_illgeal_function@pmdbs,w
 25491  0671  3E02               	addlw	2
 25492  0672  0086               	movwf	6
 25493  0673  3004               	movlw	4	; select bank8/9
 25494  0674  0087               	movwf	7
 25495  0675  0877               	movf	??_modbus_response_illgeal_function,w
 25496  0676  0081               	movwf	1
 25497                           
 25498                           ;modbus.c: 15: crc_append(buf,3);
 25499  0677  0838               	movf	modbus_response_illgeal_function@buf,w
 25500  0678  00AB               	movwf	crc_append@message
 25501  0679  3004               	movlw	4
 25502  067A  00AC               	movwf	crc_append@message+1
 25503  067B  3003               	movlw	3
 25504  067C  00AD               	movwf	crc_append@n
 25505  067D  01AE               	clrf	crc_append@n+1
 25506  067E  3194  2455  3184   	fcall	_crc_append
 25507                           
 25508                           ;modbus.c: 16: my_uart1_send_poll(buf,5);
 25509  0681  3005               	movlw	5
 25510  0682  00F3               	movwf	my_uart1_send_poll@len
 25511  0683  01F4               	clrf	my_uart1_send_poll@len+1
 25512  0684  0020               	movlb	0	; select bank0
 25513  0685  0838               	movf	modbus_response_illgeal_function@buf,w
 25514  0686  2E2A               	ljmp	_my_uart1_send_poll
 25515  0687                     __end_of_modbus_response_illgeal_function:	
 25516  0687                     __ptext90:	
 25517 ;; *************** function _modbus_response_read_flash_data *****************
 25518 ;; Defined at:
 25519 ;;		line 65 in file "src/api/modbus.c"
 25520 ;; Parameters:    Size  Location     Type
 25521 ;;  buf             1    wreg     PTR unsigned char 
 25522 ;;		 -> uart1Buffer(80), 
 25523 ;; Auto vars:     Size  Location     Type
 25524 ;;  buf             1   30[BANK0 ] PTR unsigned char 
 25525 ;;		 -> uart1Buffer(80), 
 25526 ;;  startAddr       2   27[BANK0 ] unsigned int 
 25527 ;;  len             1   31[BANK0 ] unsigned char 
 25528 ;;  pmdbs           1   29[BANK0 ] PTR struct .
 25529 ;;		 -> uart1Buffer(80), 
 25530 ;; Return value:  Size  Location     Type
 25531 ;;                  1    wreg      void 
 25532 ;; Registers used:
 25533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25534 ;; Tracked objects:
 25535 ;;		On entry : 0/0
 25536 ;;		On exit  : 0/0
 25537 ;;		Unchanged: 0/0
 25538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25540 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25541 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25542 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 25543 ;;Total ram usage:        7 bytes
 25544 ;; Hardware stack levels used:    1
 25545 ;; Hardware stack levels required when called:    5
 25546 ;; This function calls:
 25547 ;;		_crc_append
 25548 ;;		_m_mem_cpy_len
 25549 ;;		_modbus_response_illgeal_function
 25550 ;;		_my_uart1_send_poll
 25551 ;; This function is called by:
 25552 ;;		_modbus_response_process
 25553 ;; This function uses a non-reentrant model
 25554 ;;
 25555                           
 25556                           
 25557                           ;psect for function _modbus_response_read_flash_data
 25558  0687                     _modbus_response_read_flash_data:	
 25559                           
 25560                           ;incstack = 0
 25561                           ; Regs used in _modbus_response_read_flash_data: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 25562                           ;modbus_response_read_flash_data@buf stored from wreg
 25563  0687  0020               	movlb	0	; select bank0
 25564  0688  00BE               	movwf	modbus_response_read_flash_data@buf
 25565                           
 25566                           ;modbus.c: 67: uint16_t startAddr=0;
 25567  0689  01BB               	clrf	modbus_response_read_flash_data@startAddr
 25568  068A  01BC               	clrf	modbus_response_read_flash_data@startAddr+1
 25569                           
 25570                           ;modbus.c: 68: uint8_t len=0;
 25571  068B  01BF               	clrf	modbus_response_read_flash_data@len
 25572                           
 25573                           ;modbus.c: 69: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 25574  068C  00B9               	movwf	??_modbus_response_read_flash_data
 25575  068D  00BD               	movwf	modbus_response_read_flash_data@pmdbs
 25576                           
 25577                           ;modbus.c: 70: startAddr=pmdbs->addr_hi;
 25578  068E  3E02               	addlw	2
 25579  068F  0086               	movwf	6
 25580  0690  3004               	movlw	4	; select bank8/9
 25581  0691  0087               	movwf	7
 25582  0692  0801               	movf	1,w
 25583  0693  00B9               	movwf	??_modbus_response_read_flash_data
 25584  0694  01BA               	clrf	??_modbus_response_read_flash_data+1
 25585  0695  00BB               	movwf	modbus_response_read_flash_data@startAddr
 25586  0696  083A               	movf	??_modbus_response_read_flash_data+1,w
 25587  0697  00BC               	movwf	modbus_response_read_flash_data@startAddr+1
 25588                           
 25589                           ;modbus.c: 71: startAddr<<=8;
 25590  0698  3008               	movlw	8
 25591  0699                     u12725:	
 25592  0699  35BB               	lslf	modbus_response_read_flash_data@startAddr,f
 25593  069A  0DBC               	rlf	modbus_response_read_flash_data@startAddr+1,f
 25594  069B  0B89               	decfsz	9,f
 25595  069C  2E99               	goto	u12725
 25596                           
 25597                           ;modbus.c: 72: startAddr |= pmdbs->addr_lo;
 25598  069D  083D               	movf	modbus_response_read_flash_data@pmdbs,w
 25599  069E  3E03               	addlw	3
 25600  069F  0086               	movwf	6
 25601  06A0  3004               	movlw	4	; select bank8/9
 25602  06A1  0087               	movwf	7
 25603  06A2  0801               	movf	1,w
 25604  06A3  00B9               	movwf	??_modbus_response_read_flash_data
 25605  06A4  01BA               	clrf	??_modbus_response_read_flash_data+1
 25606  06A5  04BB               	iorwf	modbus_response_read_flash_data@startAddr,f
 25607  06A6  083A               	movf	??_modbus_response_read_flash_data+1,w
 25608  06A7  04BC               	iorwf	modbus_response_read_flash_data@startAddr+1,f
 25609                           
 25610                           ;modbus.c: 73: len=pmdbs->len_hi;
 25611  06A8  083D               	movf	modbus_response_read_flash_data@pmdbs,w
 25612  06A9  0086               	movwf	6
 25613  06AA  3F44               	moviw [4]fsr1
 25614  06AB  00BF               	movwf	modbus_response_read_flash_data@len
 25615                           
 25616                           ;modbus.c: 74: len<<=8;
 25617  06AC  01BF               	clrf	modbus_response_read_flash_data@len
 25618                           
 25619                           ;modbus.c: 75: len = pmdbs->len_lo;
 25620  06AD  083D               	movf	modbus_response_read_flash_data@pmdbs,w
 25621  06AE  0086               	movwf	6
 25622  06AF  3F45               	moviw [5]fsr1
 25623  06B0  00BF               	movwf	modbus_response_read_flash_data@len
 25624                           
 25625                           ;modbus.c: 76: if(startAddr< (0x4000-0x80) || startAddr+len > 16384 || len >64){
 25626  06B1  303F               	movlw	63
 25627  06B2  023C               	subwf	modbus_response_read_flash_data@startAddr+1,w
 25628  06B3  3080               	movlw	128
 25629  06B4  1903               	skipnz
 25630  06B5  023B               	subwf	modbus_response_read_flash_data@startAddr,w
 25631  06B6  1C03               	skipc
 25632  06B7  2ECA               	goto	l14227
 25633  06B8  083F               	movf	modbus_response_read_flash_data@len,w
 25634  06B9  073B               	addwf	modbus_response_read_flash_data@startAddr,w
 25635  06BA  00B9               	movwf	??_modbus_response_read_flash_data
 25636  06BB  083C               	movf	modbus_response_read_flash_data@startAddr+1,w
 25637  06BC  1803               	skipnc
 25638  06BD  0A3C               	incf	modbus_response_read_flash_data@startAddr+1,w
 25639  06BE  00BA               	movwf	??_modbus_response_read_flash_data+1
 25640  06BF  3040               	movlw	64
 25641  06C0  023A               	subwf	??_modbus_response_read_flash_data+1,w
 25642  06C1  3001               	movlw	1
 25643  06C2  1903               	skipnz
 25644  06C3  0239               	subwf	??_modbus_response_read_flash_data,w
 25645  06C4  1803               	skipnc
 25646  06C5  2ECA               	goto	l14227
 25647  06C6  3041               	movlw	65
 25648  06C7  023F               	subwf	modbus_response_read_flash_data@len,w
 25649  06C8  1C03               	skipc
 25650  06C9  2ECF               	goto	l14231
 25651  06CA                     l14227:	
 25652                           
 25653                           ;modbus.c: 78: modbus_response_illgeal_function(buf,0x02);
 25654  06CA  3002               	movlw	2
 25655  06CB  00B9               	movwf	??_modbus_response_read_flash_data
 25656  06CC  00B6               	movwf	modbus_response_illgeal_function@errcode
 25657  06CD  083E               	movf	modbus_response_read_flash_data@buf,w
 25658  06CE  2E51               	ljmp	_modbus_response_illgeal_function
 25659  06CF                     l14231:	
 25660                           ;modbus.c: 79: return;
 25661                           
 25662                           
 25663                           ;modbus.c: 80: }
 25664                           ;modbus.c: 81: m_mem_cpy_len(buf+5,(uint8_t*)startAddr,len);
 25665  06CF  0020               	movlb	0	; select bank0
 25666  06D0  083E               	movf	modbus_response_read_flash_data@buf,w
 25667  06D1  3E05               	addlw	5
 25668  06D2  00F3               	movwf	m_mem_cpy_len@d
 25669  06D3  3004               	movlw	4
 25670  06D4  00F4               	movwf	m_mem_cpy_len@d+1
 25671  06D5  083C               	movf	modbus_response_read_flash_data@startAddr+1,w
 25672  06D6  00F6               	movwf	m_mem_cpy_len@s+1
 25673  06D7  083B               	movf	modbus_response_read_flash_data@startAddr,w
 25674  06D8  00F5               	movwf	m_mem_cpy_len@s
 25675  06D9  083F               	movf	modbus_response_read_flash_data@len,w
 25676  06DA  00B9               	movwf	??_modbus_response_read_flash_data
 25677  06DB  00F7               	movwf	m_mem_cpy_len@len
 25678  06DC  3197  2778  3184   	fcall	_m_mem_cpy_len
 25679                           
 25680                           ;modbus.c: 82: len+=5;
 25681  06DF  3005               	movlw	5
 25682  06E0  0020               	movlb	0	; select bank0
 25683  06E1  00B9               	movwf	??_modbus_response_read_flash_data
 25684  06E2  07BF               	addwf	modbus_response_read_flash_data@len,f
 25685                           
 25686                           ;modbus.c: 83: crc_append(buf,len);
 25687  06E3  083E               	movf	modbus_response_read_flash_data@buf,w
 25688  06E4  00AB               	movwf	crc_append@message
 25689  06E5  3004               	movlw	4
 25690  06E6  00AC               	movwf	crc_append@message+1
 25691  06E7  083F               	movf	modbus_response_read_flash_data@len,w
 25692  06E8  00B9               	movwf	??_modbus_response_read_flash_data
 25693  06E9  01BA               	clrf	??_modbus_response_read_flash_data+1
 25694  06EA  00AD               	movwf	crc_append@n
 25695  06EB  083A               	movf	??_modbus_response_read_flash_data+1,w
 25696  06EC  00AE               	movwf	crc_append@n+1
 25697  06ED  3194  2455  3184   	fcall	_crc_append
 25698                           
 25699                           ;modbus.c: 84: len+=2;
 25700  06F0  3002               	movlw	2
 25701  06F1  0020               	movlb	0	; select bank0
 25702  06F2  00B9               	movwf	??_modbus_response_read_flash_data
 25703  06F3  07BF               	addwf	modbus_response_read_flash_data@len,f
 25704                           
 25705                           ;modbus.c: 85: my_uart1_send_poll(buf,len);
 25706  06F4  083F               	movf	modbus_response_read_flash_data@len,w
 25707  06F5  00B9               	movwf	??_modbus_response_read_flash_data
 25708  06F6  01BA               	clrf	??_modbus_response_read_flash_data+1
 25709  06F7  00F3               	movwf	my_uart1_send_poll@len
 25710  06F8  083A               	movf	??_modbus_response_read_flash_data+1,w
 25711  06F9  00F4               	movwf	my_uart1_send_poll@len+1
 25712  06FA  083E               	movf	modbus_response_read_flash_data@buf,w
 25713  06FB  2E2A               	ljmp	_my_uart1_send_poll
 25714  06FC                     __end_of_modbus_response_read_flash_data:	
 25715  06FC                     __ptext83:	
 25716 ;; *************** function _modbus_response_write_status_register *****************
 25717 ;; Defined at:
 25718 ;;		line 120 in file "src/api/modbus.c"
 25719 ;; Parameters:    Size  Location     Type
 25720 ;;  buf             1    wreg     PTR unsigned char 
 25721 ;;		 -> uart1Buffer(80), 
 25722 ;; Auto vars:     Size  Location     Type
 25723 ;;  buf             1   30[BANK0 ] PTR unsigned char 
 25724 ;;		 -> uart1Buffer(80), 
 25725 ;;  startAddr       2   27[BANK0 ] unsigned int 
 25726 ;;  pmdbs           1   31[BANK0 ] PTR struct .
 25727 ;;		 -> uart1Buffer(80), 
 25728 ;;  len             1   29[BANK0 ] unsigned char 
 25729 ;; Return value:  Size  Location     Type
 25730 ;;                  1    wreg      void 
 25731 ;; Registers used:
 25732 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25733 ;; Tracked objects:
 25734 ;;		On entry : 0/0
 25735 ;;		On exit  : 0/0
 25736 ;;		Unchanged: 0/0
 25737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25739 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 25740 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25741 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 25742 ;;Total ram usage:        7 bytes
 25743 ;; Hardware stack levels used:    1
 25744 ;; Hardware stack levels required when called:    5
 25745 ;; This function calls:
 25746 ;;		_modbus_response_illgeal_function
 25747 ;; This function is called by:
 25748 ;;		_modbus_response_process
 25749 ;; This function uses a non-reentrant model
 25750 ;;
 25751                           
 25752                           
 25753                           ;psect for function _modbus_response_write_status_register
 25754  06FC                     _modbus_response_write_status_register:	
 25755                           
 25756                           ;incstack = 0
 25757                           ; Regs used in _modbus_response_write_status_register: [wreg-fsr1h+status,2+status,0+pcl
      +                          ath+cstack]
 25758                           ;modbus_response_write_status_register@buf stored from wreg
 25759  06FC  0020               	movlb	0	; select bank0
 25760  06FD  00BE               	movwf	modbus_response_write_status_register@buf
 25761                           
 25762                           ;modbus.c: 121: uint16_t startAddr=0;
 25763  06FE  01BB               	clrf	modbus_response_write_status_register@startAddr
 25764  06FF  01BC               	clrf	modbus_response_write_status_register@startAddr+1
 25765                           
 25766                           ;modbus.c: 122: uint8_t len=0;
 25767  0700  01BD               	clrf	modbus_response_write_status_register@len
 25768                           
 25769                           ;modbus.c: 123: st_modbusComReqStructDef* pmdbs=(st_modbusComReqStructDef*)buf;
 25770  0701  00B9               	movwf	??_modbus_response_write_status_register
 25771  0702  00BF               	movwf	modbus_response_write_status_register@pmdbs
 25772                           
 25773                           ;modbus.c: 124: startAddr=pmdbs->addr_hi;
 25774  0703  3E02               	addlw	2
 25775  0704  0086               	movwf	6
 25776  0705  3004               	movlw	4	; select bank8/9
 25777  0706  0087               	movwf	7
 25778  0707  0801               	movf	1,w
 25779  0708  00B9               	movwf	??_modbus_response_write_status_register
 25780  0709  01BA               	clrf	??_modbus_response_write_status_register+1
 25781  070A  00BB               	movwf	modbus_response_write_status_register@startAddr
 25782  070B  083A               	movf	??_modbus_response_write_status_register+1,w
 25783  070C  00BC               	movwf	modbus_response_write_status_register@startAddr+1
 25784                           
 25785                           ;modbus.c: 125: startAddr<<=8;
 25786  070D  3008               	movlw	8
 25787  070E                     u12795:	
 25788  070E  35BB               	lslf	modbus_response_write_status_register@startAddr,f
 25789  070F  0DBC               	rlf	modbus_response_write_status_register@startAddr+1,f
 25790  0710  0B89               	decfsz	9,f
 25791  0711  2F0E               	goto	u12795
 25792                           
 25793                           ;modbus.c: 126: startAddr |= pmdbs->addr_lo;
 25794  0712  083F               	movf	modbus_response_write_status_register@pmdbs,w
 25795  0713  3E03               	addlw	3
 25796  0714  0086               	movwf	6
 25797  0715  3004               	movlw	4	; select bank8/9
 25798  0716  0087               	movwf	7
 25799  0717  0801               	movf	1,w
 25800  0718  00B9               	movwf	??_modbus_response_write_status_register
 25801  0719  01BA               	clrf	??_modbus_response_write_status_register+1
 25802  071A  04BB               	iorwf	modbus_response_write_status_register@startAddr,f
 25803  071B  083A               	movf	??_modbus_response_write_status_register+1,w
 25804  071C  04BC               	iorwf	modbus_response_write_status_register@startAddr+1,f
 25805                           
 25806                           ;modbus.c: 127: len=pmdbs->len_hi;
 25807  071D  083F               	movf	modbus_response_write_status_register@pmdbs,w
 25808  071E  0086               	movwf	6
 25809  071F  3F44               	moviw [4]fsr1
 25810  0720  00BD               	movwf	modbus_response_write_status_register@len
 25811                           
 25812                           ;modbus.c: 128: len<<=8;
 25813  0721  01BD               	clrf	modbus_response_write_status_register@len
 25814                           
 25815                           ;modbus.c: 129: len = pmdbs->len_lo;
 25816  0722  083F               	movf	modbus_response_write_status_register@pmdbs,w
 25817  0723  0086               	movwf	6
 25818  0724  3F45               	moviw [5]fsr1
 25819  0725  00BD               	movwf	modbus_response_write_status_register@len
 25820                           
 25821                           ;modbus.c: 130: if(startAddr != 0xe000+5 || len!=1 ){
 25822  0726  3005               	movlw	5
 25823  0727  063B               	xorwf	modbus_response_write_status_register@startAddr,w
 25824  0728  30E0               	movlw	224
 25825  0729  1903               	skipnz
 25826  072A  063C               	xorwf	modbus_response_write_status_register@startAddr+1,w
 25827  072B  1903               	btfsc	3,2
 25828  072C  033D               	decf	modbus_response_write_status_register@len,w
 25829  072D  1903               	btfsc	3,2
 25830  072E  2F34               	goto	l14315
 25831                           
 25832                           ;modbus.c: 131: modbus_response_illgeal_function(buf,0x02);
 25833  072F  3002               	movlw	2
 25834  0730  00B9               	movwf	??_modbus_response_write_status_register
 25835  0731  00B6               	movwf	modbus_response_illgeal_function@errcode
 25836  0732  083E               	movf	modbus_response_write_status_register@buf,w
 25837  0733  2E51               	ljmp	_modbus_response_illgeal_function
 25838  0734                     l14315:	
 25839                           ;modbus.c: 132: return;
 25840                           
 25841                           
 25842                           ;modbus.c: 133: }
 25843                           ;modbus.c: 134: deviceStatus.byte=buf[5];
 25844  0734  0020               	movlb	0	; select bank0
 25845  0735  083E               	movf	modbus_response_write_status_register@buf,w
 25846  0736  0086               	movwf	6
 25847  0737  3004               	movlw	4	; select bank8/9
 25848  0738  0087               	movwf	7
 25849  0739  3F45               	moviw [5]fsr1
 25850  073A  0021               	movlb	1	; select bank1
 25851  073B  00BA               	movwf	_deviceStatus^(0+128)
 25852                           
 25853                           ;modbus.c: 135: modbus_response_illgeal_function(buf,0);
 25854  073C  0020               	movlb	0	; select bank0
 25855  073D  01B6               	clrf	modbus_response_illgeal_function@errcode
 25856  073E  083E               	movf	modbus_response_write_status_register@buf,w
 25857  073F  2E51               	ljmp	_modbus_response_illgeal_function
 25858  0740                     __end_of_modbus_response_write_status_register:	
 25859                           
 25860                           	psect	text87
 25861  1001                     __ptext87:	
 25862 ;; *************** function _data_api_rt_data_save *****************
 25863 ;; Defined at:
 25864 ;;		line 183 in file "src/app/appdata.c"
 25865 ;; Parameters:    Size  Location     Type
 25866 ;;		None
 25867 ;; Auto vars:     Size  Location     Type
 25868 ;;  stp             2   26[BANK0 ] PTR struct .
 25869 ;;		 -> comBuffer(128), 
 25870 ;; Return value:  Size  Location     Type
 25871 ;;                  1    wreg      unsigned char 
 25872 ;; Registers used:
 25873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25874 ;; Tracked objects:
 25875 ;;		On entry : 0/0
 25876 ;;		On exit  : 0/0
 25877 ;;		Unchanged: 0/0
 25878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 25879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 25880 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 25881 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 25882 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 25883 ;;Total ram usage:        6 bytes
 25884 ;; Hardware stack levels used:    1
 25885 ;; Hardware stack levels required when called:    5
 25886 ;; This function calls:
 25887 ;;		_crc_append
 25888 ;;		_crc_verify
 25889 ;;		_data_api_system_data_get
 25890 ;;		_data_api_write_eeprom
 25891 ;;		_m_flash_copy
 25892 ;;		_m_mem_cpy_len
 25893 ;; This function is called by:
 25894 ;;		_data_api_flash_process
 25895 ;;		_main
 25896 ;; This function uses a non-reentrant model
 25897 ;;
 25898                           
 25899                           
 25900                           ;psect for function _data_api_rt_data_save
 25901  1001                     _data_api_rt_data_save:	
 25902                           
 25903                           ;appdata.c: 184: st_SystemData* stp=(st_SystemData*)comBuffer;
 25904                           
 25905                           ;incstack = 0
 25906                           ; Regs used in _data_api_rt_data_save: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25907  1001  3070               	movlw	112
 25908  1002  0020               	movlb	0	; select bank0
 25909  1003  00BA               	movwf	data_api_rt_data_save@stp
 25910  1004  3023               	movlw	35
 25911  1005  00BB               	movwf	data_api_rt_data_save@stp+1
 25912                           
 25913                           ;appdata.c: 185: m_mem_cpy_len(comBuffer,(uint8_t*)(&mainSystemData),sizeof(st_SystemDat
      +                          a));
 25914  1006  3070               	movlw	112
 25915  1007  00F3               	movwf	m_mem_cpy_len@d
 25916  1008  3023               	movlw	35
 25917  1009  00F4               	movwf	m_mem_cpy_len@d+1
 25918  100A  30BF               	movlw	191
 25919  100B  01F5               	clrf	m_mem_cpy_len@s
 25920  100C  00F6               	movwf	m_mem_cpy_len@s+1
 25921  100D  3048               	movlw	72
 25922  100E  00B6               	movwf	??_data_api_rt_data_save
 25923  100F  00F7               	movwf	m_mem_cpy_len@len
 25924  1010  2778  3190         	fcall	_m_mem_cpy_len
 25925                           
 25926                           ;appdata.c: 187: stp->totalConsumeVolume+=rtVolume_m3;
 25927  1012  0021               	movlb	1	; select bank1
 25928  1013  0834               	movf	_rtVolume_m3^(0+128),w	;volatile
 25929  1014  0020               	movlb	0	; select bank0
 25930  1015  00B6               	movwf	??_data_api_rt_data_save
 25931  1016  0021               	movlb	1	; select bank1
 25932  1017  0835               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 25933  1018  0020               	movlb	0	; select bank0
 25934  1019  00B7               	movwf	??_data_api_rt_data_save+1
 25935  101A  01B8               	clrf	??_data_api_rt_data_save+2
 25936  101B  01B9               	clrf	??_data_api_rt_data_save+3
 25937  101C  083A               	movf	data_api_rt_data_save@stp,w
 25938  101D  3E30               	addlw	48
 25939  101E  0086               	movwf	6
 25940  101F  3000               	movlw	0
 25941  1020  3D3B               	addwfc	data_api_rt_data_save@stp+1,w
 25942  1021  0087               	movwf	7
 25943  1022  0836               	movf	??_data_api_rt_data_save,w
 25944  1023  0781               	addwf	1,f
 25945  1024  3141               	addfsr 1,1
 25946  1025  0837               	movf	??_data_api_rt_data_save+1,w
 25947  1026  3D81               	addwfc	1,f
 25948  1027  3141               	addfsr 1,1
 25949  1028  0838               	movf	??_data_api_rt_data_save+2,w
 25950  1029  3D81               	addwfc	1,f
 25951  102A  3141               	addfsr 1,1
 25952  102B  0839               	movf	??_data_api_rt_data_save+3,w
 25953  102C  3D81               	addwfc	1,f
 25954                           
 25955                           ;appdata.c: 188: stp->BalanceMoney=rtBalanceMoney;
 25956  102D  083A               	movf	data_api_rt_data_save@stp,w
 25957  102E  3E2C               	addlw	44
 25958  102F  0086               	movwf	6
 25959  1030  3000               	movlw	0
 25960  1031  3D3B               	addwfc	data_api_rt_data_save@stp+1,w
 25961  1032  0087               	movwf	7
 25962  1033  0021               	movlb	1	; select bank1
 25963  1034  0842               	movf	_rtBalanceMoney^(0+128),w	;volatile
 25964  1035  3FC0               	movwi [0]fsr1
 25965  1036  0843               	movf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 25966  1037  3FC1               	movwi [1]fsr1
 25967  1038  0844               	movf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 25968  1039  3FC2               	movwi [2]fsr1
 25969  103A  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 25970  103B  3FC3               	movwi [3]fsr1
 25971                           
 25972                           ;appdata.c: 189: stp->status.byte=deviceStatus.byte;
 25973  103C  0020               	movlb	0	; select bank0
 25974  103D  083A               	movf	data_api_rt_data_save@stp,w
 25975  103E  3E3E               	addlw	62
 25976  103F  00B6               	movwf	??_data_api_rt_data_save
 25977  1040  3000               	movlw	0
 25978  1041  3D3B               	addwfc	data_api_rt_data_save@stp+1,w
 25979  1042  00B7               	movwf	??_data_api_rt_data_save+1
 25980  1043  0836               	movf	??_data_api_rt_data_save,w
 25981  1044  0086               	movwf	6
 25982  1045  0837               	movf	??_data_api_rt_data_save+1,w
 25983  1046  0087               	movwf	7
 25984  1047  0021               	movlb	1	; select bank1
 25985  1048  083A               	movf	_deviceStatus^(0+128),w
 25986  1049  0081               	movwf	1
 25987                           
 25988                           ;appdata.c: 190: if(flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA){
 25989  104A  3002               	movlw	2
 25990  104B  0022               	movlb	2	; select bank2
 25991  104C  065B               	xorwf	(_flashOpStr^(0+256)+20),w
 25992  104D  1D03               	btfss	3,2
 25993  104E  286A               	goto	l13245
 25994                           
 25995                           ;appdata.c: 191: flashOpStr.op=enFLASH_NOTHING;
 25996  104F  01DB               	clrf	(_flashOpStr^(0+256)+20)
 25997                           
 25998                           ;appdata.c: 192: __t16=flashOpStr.flashAddr;
 25999  1050  0848               	movf	(_flashOpStr+1)^(0+256),w
 26000  1051  00FA               	movwf	___t16+1
 26001  1052  0847               	movf	_flashOpStr^(0+256),w
 26002  1053  00F9               	movwf	___t16
 26003                           
 26004                           ;appdata.c: 193: m_mem_cpy_len(comBuffer+__t16,flashOpStr.buf,flashOpStr.len);
 26005  1054  3070               	movlw	112
 26006  1055  0020               	movlb	0	; select bank0
 26007  1056  00B6               	movwf	??_data_api_rt_data_save
 26008  1057  3023               	movlw	35
 26009  1058  00B7               	movwf	??_data_api_rt_data_save+1
 26010  1059  0879               	movf	___t16,w
 26011  105A  0736               	addwf	??_data_api_rt_data_save,w
 26012  105B  00F3               	movwf	m_mem_cpy_len@d
 26013  105C  087A               	movf	___t16+1,w
 26014  105D  3D37               	addwfc	??_data_api_rt_data_save+1,w
 26015  105E  00F4               	movwf	m_mem_cpy_len@d+1
 26016  105F  304B               	movlw	low (_flashOpStr+4)
 26017  1060  00F5               	movwf	m_mem_cpy_len@s
 26018  1061  3001               	movlw	high (_flashOpStr+4)
 26019  1062  00F6               	movwf	m_mem_cpy_len@s+1
 26020  1063  0022               	movlb	2	; select bank2
 26021  1064  0849               	movf	(_flashOpStr^(0+256)+2),w
 26022  1065  0020               	movlb	0	; select bank0
 26023  1066  00B8               	movwf	??_data_api_rt_data_save+2
 26024  1067  00F7               	movwf	m_mem_cpy_len@len
 26025  1068  2778  3190         	fcall	_m_mem_cpy_len
 26026  106A                     l13245:	
 26027                           
 26028                           ;appdata.c: 194: }
 26029                           ;appdata.c: 196: crc_append(comBuffer,sizeof(st_SystemData)-2);
 26030  106A  3070               	movlw	112
 26031  106B  0020               	movlb	0	; select bank0
 26032  106C  00AB               	movwf	crc_append@message
 26033  106D  3023               	movlw	35
 26034  106E  00AC               	movwf	crc_append@message+1
 26035  106F  3046               	movlw	70
 26036  1070  00AD               	movwf	crc_append@n
 26037  1071  01AE               	clrf	crc_append@n+1
 26038  1072  2455  3190         	fcall	_crc_append
 26039                           
 26040                           ;appdata.c: 197: m_flash_copy((0x4000-0x100),
 26041                           ;appdata.c: 198: comBuffer, sizeof (st_SystemData));
 26042  1074  0020               	movlb	0	; select bank0
 26043  1075  303F               	movlw	63
 26044  1076  01AA               	clrf	m_flash_copy@addr
 26045  1077  00AB               	movwf	m_flash_copy@addr+1
 26046  1078  3070               	movlw	112
 26047  1079  00AC               	movwf	m_flash_copy@buf
 26048  107A  3023               	movlw	35
 26049  107B  00AD               	movwf	m_flash_copy@buf+1
 26050  107C  3048               	movlw	72
 26051  107D  00B6               	movwf	??_data_api_rt_data_save
 26052  107E  00AE               	movwf	m_flash_copy@len
 26053  107F  24C6  3190         	fcall	_m_flash_copy
 26054                           
 26055                           ;appdata.c: 199: data_api_write_eeprom(comBuffer,0x00,sizeof(st_SystemData));
 26056  1081  3070               	movlw	112
 26057  1082  0020               	movlb	0	; select bank0
 26058  1083  00A0               	movwf	data_api_write_eeprom@buf
 26059  1084  3023               	movlw	35
 26060  1085  00A1               	movwf	data_api_write_eeprom@buf+1
 26061  1086  3048               	movlw	72
 26062  1087  01A2               	clrf	data_api_write_eeprom@addr
 26063  1088  00B6               	movwf	??_data_api_rt_data_save
 26064  1089  00A3               	movwf	data_api_write_eeprom@len
 26065  108A  24AA  3190         	fcall	_data_api_write_eeprom
 26066                           
 26067                           ;appdata.c: 200: __t8=crc_verify((uint8_t*)(&bkupSystemData),sizeof (st_SystemData));
 26068  108C  3080               	movlw	128
 26069  108D  0020               	movlb	0	; select bank0
 26070  108E  00AB               	movwf	crc_verify@message
 26071  108F  30BE               	movlw	190
 26072  1090  00AC               	movwf	crc_verify@message+1
 26073  1091  3048               	movlw	72
 26074  1092  00AD               	movwf	crc_verify@n
 26075  1093  3000               	movlw	0
 26076  1094  01AE               	clrf	crc_verify@n+1
 26077  1095  23BD  3190         	fcall	_crc_verify
 26078  1097  0020               	movlb	0	; select bank0
 26079  1098  00B6               	movwf	??_data_api_rt_data_save
 26080  1099  0021               	movlb	1	; select bank1
 26081  109A  00C6               	movwf	___t8^(0+128)
 26082                           
 26083                           ;appdata.c: 201: data_api_system_data_get();
 26084  109B  27F1               	fcall	_data_api_system_data_get
 26085                           
 26086                           ;appdata.c: 202: rtVolume_m3=0;
 26087  109C  0021               	movlb	1	; select bank1
 26088  109D  01B4               	clrf	_rtVolume_m3^(0+128)	;volatile
 26089  109E  01B5               	clrf	(_rtVolume_m3+1)^(0+128)	;volatile
 26090                           
 26091                           ;appdata.c: 205: return 0;
 26092                           ;	Return value of _data_api_rt_data_save is never used
 26093  109F  0008               	return
 26094  10A0                     __end_of_data_api_rt_data_save:	
 26095                           ;appdata.c: 206: }
 26096                           ;appdata.c: 207: return 1;
 26097                           ;	Return value of _data_api_rt_data_save is never used
 26098                           
 26099  10A0                     __ptext88:	
 26100 ;; *************** function _data_api_calibration_table_data_save *****************
 26101 ;; Defined at:
 26102 ;;		line 209 in file "src/app/appdata.c"
 26103 ;; Parameters:    Size  Location     Type
 26104 ;;  loc             1    wreg     unsigned char 
 26105 ;;  single          1   22[BANK0 ] unsigned char 
 26106 ;; Auto vars:     Size  Location     Type
 26107 ;;  loc             1   31[BANK0 ] unsigned char 
 26108 ;;  stp             2   29[BANK0 ] PTR struct .
 26109 ;;		 -> comBuffer(128), 
 26110 ;;  i               1   28[BANK0 ] unsigned char 
 26111 ;; Return value:  Size  Location     Type
 26112 ;;                  1    wreg      unsigned char 
 26113 ;; Registers used:
 26114 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26115 ;; Tracked objects:
 26116 ;;		On entry : 0/0
 26117 ;;		On exit  : 0/0
 26118 ;;		Unchanged: 0/0
 26119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26120 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 26121 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 26122 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 26123 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 26124 ;;Total ram usage:       10 bytes
 26125 ;; Hardware stack levels used:    1
 26126 ;; Hardware stack levels required when called:    5
 26127 ;; This function calls:
 26128 ;;		_crc_append
 26129 ;;		_crc_verify
 26130 ;;		_data_api_write_eeprom
 26131 ;;		_m_flash_copy
 26132 ;;		_m_mem_cpy_len
 26133 ;; This function is called by:
 26134 ;;		_ui_key_process_cancel
 26135 ;;		_ui_key_set_process
 26136 ;;		_data_api_flash_process
 26137 ;; This function uses a non-reentrant model
 26138 ;;
 26139                           
 26140                           
 26141                           ;psect for function _data_api_calibration_table_data_save
 26142  10A0                     _data_api_calibration_table_data_save:	
 26143                           
 26144                           ;incstack = 0
 26145                           ; Regs used in _data_api_calibration_table_data_save: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 26146                           ;data_api_calibration_table_data_save@loc stored from wreg
 26147  10A0  0020               	movlb	0	; select bank0
 26148  10A1  00BF               	movwf	data_api_calibration_table_data_save@loc
 26149                           
 26150                           ;appdata.c: 210: uint8_t i;
 26151                           ;appdata.c: 211: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 26152  10A2  3070               	movlw	112
 26153  10A3  00BD               	movwf	data_api_calibration_table_data_save@stp
 26154  10A4  3023               	movlw	35
 26155  10A5  00BE               	movwf	data_api_calibration_table_data_save@stp+1
 26156                           
 26157                           ;appdata.c: 212: m_mem_cpy_len(comBuffer,(uint8_t*)(&Main_flowCalibrationTable),sizeof (
      +                          st_flowCalibrationTable));
 26158  10A6  3070               	movlw	112
 26159  10A7  00F3               	movwf	m_mem_cpy_len@d
 26160  10A8  3023               	movlw	35
 26161  10A9  00F4               	movwf	m_mem_cpy_len@d+1
 26162  10AA  3080               	movlw	128
 26163  10AB  00F5               	movwf	m_mem_cpy_len@s
 26164  10AC  30BF               	movlw	191
 26165  10AD  00F6               	movwf	m_mem_cpy_len@s+1
 26166  10AE  307C               	movlw	124
 26167  10AF  00B7               	movwf	??_data_api_calibration_table_data_save
 26168  10B0  00F7               	movwf	m_mem_cpy_len@len
 26169  10B1  2778  3190         	fcall	_m_mem_cpy_len
 26170                           
 26171                           ;appdata.c: 213: stp->flowCalibrationArr[loc].adcValue=adcAverageValue;
 26172  10B3  0020               	movlb	0	; select bank0
 26173  10B4  083F               	movf	data_api_calibration_table_data_save@loc,w
 26174  10B5  00B7               	movwf	??_data_api_calibration_table_data_save
 26175  10B6  01B8               	clrf	??_data_api_calibration_table_data_save+1
 26176  10B7  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26177  10B8  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26178  10B9  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26179  10BA  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26180  10BB  0837               	movf	??_data_api_calibration_table_data_save,w
 26181  10BC  073D               	addwf	data_api_calibration_table_data_save@stp,w
 26182  10BD  0086               	movwf	6
 26183  10BE  0838               	movf	??_data_api_calibration_table_data_save+1,w
 26184  10BF  3D3E               	addwfc	data_api_calibration_table_data_save@stp+1,w
 26185  10C0  0087               	movwf	7
 26186  10C1  0021               	movlb	1	; select bank1
 26187  10C2  082A               	movf	_adcAverageValue^(0+128),w	;volatile
 26188  10C3  3FC0               	movwi [0]fsr1
 26189  10C4  082B               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 26190  10C5  3FC1               	movwi [1]fsr1
 26191                           
 26192                           ;appdata.c: 214: stp->flowCalibrationArr[loc].rtflowValue=*((uint16_t*)(flashOpStr.buf))
      +                          ;
 26193  10C6  0020               	movlb	0	; select bank0
 26194  10C7  083F               	movf	data_api_calibration_table_data_save@loc,w
 26195  10C8  00B7               	movwf	??_data_api_calibration_table_data_save
 26196  10C9  01B8               	clrf	??_data_api_calibration_table_data_save+1
 26197  10CA  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26198  10CB  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26199  10CC  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26200  10CD  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26201  10CE  0837               	movf	??_data_api_calibration_table_data_save,w
 26202  10CF  073D               	addwf	data_api_calibration_table_data_save@stp,w
 26203  10D0  00B9               	movwf	??_data_api_calibration_table_data_save+2
 26204  10D1  0838               	movf	??_data_api_calibration_table_data_save+1,w
 26205  10D2  3D3E               	addwfc	data_api_calibration_table_data_save@stp+1,w
 26206  10D3  00BA               	movwf	??_data_api_calibration_table_data_save+3
 26207  10D4  0839               	movf	??_data_api_calibration_table_data_save+2,w
 26208  10D5  0086               	movwf	6
 26209  10D6  083A               	movf	??_data_api_calibration_table_data_save+3,w
 26210  10D7  0087               	movwf	7
 26211  10D8  3142               	addfsr 1,2
 26212  10D9  0022               	movlb	2	; select bank2
 26213  10DA  084B               	movf	(_flashOpStr^(0+256)+4),w
 26214  10DB  3FC0               	movwi [0]fsr1
 26215  10DC  084C               	movf	((_flashOpStr+1)^(0+256)+4),w
 26216  10DD  3FC1               	movwi [1]fsr1
 26217                           
 26218                           ;appdata.c: 215: m_mem_cpy_len(flashOpStr.buf,comBuffer+loc*sizeof(st_CalibrationPoint),
      +                          4);
 26219  10DE  304B               	movlw	low (_flashOpStr+4)
 26220  10DF  00F3               	movwf	m_mem_cpy_len@d
 26221  10E0  3001               	movlw	high (_flashOpStr+4)
 26222  10E1  00F4               	movwf	m_mem_cpy_len@d+1
 26223  10E2  0020               	movlb	0	; select bank0
 26224  10E3  083F               	movf	data_api_calibration_table_data_save@loc,w
 26225  10E4  00B7               	movwf	??_data_api_calibration_table_data_save
 26226  10E5  3070               	movlw	112
 26227  10E6  01B8               	clrf	??_data_api_calibration_table_data_save+1
 26228  10E7  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26229  10E8  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26230  10E9  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26231  10EA  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26232  10EB  00B9               	movwf	??_data_api_calibration_table_data_save+2
 26233  10EC  3023               	movlw	35
 26234  10ED  00BA               	movwf	??_data_api_calibration_table_data_save+3
 26235  10EE  0837               	movf	??_data_api_calibration_table_data_save,w
 26236  10EF  0739               	addwf	??_data_api_calibration_table_data_save+2,w
 26237  10F0  00F5               	movwf	m_mem_cpy_len@s
 26238  10F1  0838               	movf	??_data_api_calibration_table_data_save+1,w
 26239  10F2  3D3A               	addwfc	??_data_api_calibration_table_data_save+3,w
 26240  10F3  00F6               	movwf	m_mem_cpy_len@s+1
 26241  10F4  3004               	movlw	4
 26242  10F5  00BB               	movwf	??_data_api_calibration_table_data_save+4
 26243  10F6  00F7               	movwf	m_mem_cpy_len@len
 26244  10F7  2778  3190         	fcall	_m_mem_cpy_len
 26245                           
 26246                           ;appdata.c: 216: if(!single && loc>1){
 26247  10F9  0020               	movlb	0	; select bank0
 26248  10FA  0836               	movf	data_api_calibration_table_data_save@single,w
 26249  10FB  1D03               	btfss	3,2
 26250  10FC  2947               	goto	l13217
 26251  10FD  3002               	movlw	2
 26252  10FE  023F               	subwf	data_api_calibration_table_data_save@loc,w
 26253  10FF  1C03               	skipc
 26254  1100  2947               	goto	l13217
 26255                           
 26256                           ;appdata.c: 217: stp->maxFlow=stp->flowCalibrationArr[loc].rtflowValue;
 26257  1101  083F               	movf	data_api_calibration_table_data_save@loc,w
 26258  1102  00B7               	movwf	??_data_api_calibration_table_data_save
 26259  1103  01B8               	clrf	??_data_api_calibration_table_data_save+1
 26260  1104  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26261  1105  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26262  1106  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26263  1107  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26264  1108  0837               	movf	??_data_api_calibration_table_data_save,w
 26265  1109  073D               	addwf	data_api_calibration_table_data_save@stp,w
 26266  110A  00B9               	movwf	??_data_api_calibration_table_data_save+2
 26267  110B  0838               	movf	??_data_api_calibration_table_data_save+1,w
 26268  110C  3D3E               	addwfc	data_api_calibration_table_data_save@stp+1,w
 26269  110D  00BA               	movwf	??_data_api_calibration_table_data_save+3
 26270  110E  0839               	movf	??_data_api_calibration_table_data_save+2,w
 26271  110F  0086               	movwf	6
 26272  1110  083A               	movf	??_data_api_calibration_table_data_save+3,w
 26273  1111  0087               	movwf	7
 26274  1112  3142               	addfsr 1,2
 26275  1113  083D               	movf	data_api_calibration_table_data_save@stp,w
 26276  1114  3E78               	addlw	120
 26277  1115  0084               	movwf	4
 26278  1116  3000               	movlw	0
 26279  1117  3D3E               	addwfc	data_api_calibration_table_data_save@stp+1,w
 26280  1118  0085               	movwf	5
 26281  1119  3F40               	moviw [0]fsr1
 26282  111A  3F80               	movwi [0]fsr0
 26283  111B  3F41               	moviw [1]fsr1
 26284  111C  3F81               	movwi [1]fsr0
 26285                           
 26286                           ;appdata.c: 218: for(i=loc+1;i<30;i++){
 26287  111D  083F               	movf	data_api_calibration_table_data_save@loc,w
 26288  111E  3E01               	addlw	1
 26289  111F  00B7               	movwf	??_data_api_calibration_table_data_save
 26290  1120  00BC               	movwf	data_api_calibration_table_data_save@i
 26291  1121  301E               	movlw	30
 26292  1122  023C               	subwf	data_api_calibration_table_data_save@i,w
 26293  1123  1803               	btfsc	3,0
 26294  1124  2947               	goto	l13217
 26295  1125                     l13211:	
 26296                           
 26297                           ;appdata.c: 219: m_mem_cpy_len(comBuffer+i*sizeof(st_CalibrationPoint),flashOpStr.buf,4)
      +                          ;
 26298  1125  083C               	movf	data_api_calibration_table_data_save@i,w
 26299  1126  00B7               	movwf	??_data_api_calibration_table_data_save
 26300  1127  3070               	movlw	112
 26301  1128  01B8               	clrf	??_data_api_calibration_table_data_save+1
 26302  1129  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26303  112A  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26304  112B  35B7               	lslf	??_data_api_calibration_table_data_save,f
 26305  112C  0DB8               	rlf	??_data_api_calibration_table_data_save+1,f
 26306  112D  00B9               	movwf	??_data_api_calibration_table_data_save+2
 26307  112E  3023               	movlw	35
 26308  112F  00BA               	movwf	??_data_api_calibration_table_data_save+3
 26309  1130  0837               	movf	??_data_api_calibration_table_data_save,w
 26310  1131  0739               	addwf	??_data_api_calibration_table_data_save+2,w
 26311  1132  00F3               	movwf	m_mem_cpy_len@d
 26312  1133  0838               	movf	??_data_api_calibration_table_data_save+1,w
 26313  1134  3D3A               	addwfc	??_data_api_calibration_table_data_save+3,w
 26314  1135  00F4               	movwf	m_mem_cpy_len@d+1
 26315  1136  304B               	movlw	low (_flashOpStr+4)
 26316  1137  00F5               	movwf	m_mem_cpy_len@s
 26317  1138  3001               	movlw	high (_flashOpStr+4)
 26318  1139  00F6               	movwf	m_mem_cpy_len@s+1
 26319  113A  3004               	movlw	4
 26320  113B  00BB               	movwf	??_data_api_calibration_table_data_save+4
 26321  113C  00F7               	movwf	m_mem_cpy_len@len
 26322  113D  2778  3190         	fcall	_m_mem_cpy_len
 26323  113F  3001               	movlw	1
 26324  1140  0020               	movlb	0	; select bank0
 26325  1141  00B7               	movwf	??_data_api_calibration_table_data_save
 26326  1142  07BC               	addwf	data_api_calibration_table_data_save@i,f
 26327  1143  301E               	movlw	30
 26328  1144  023C               	subwf	data_api_calibration_table_data_save@i,w
 26329  1145  1C03               	skipc
 26330  1146  2925               	goto	l13211
 26331  1147                     l13217:	
 26332                           
 26333                           ;appdata.c: 220: }
 26334                           ;appdata.c: 221: }
 26335                           ;appdata.c: 222: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 26336  1147  3070               	movlw	112
 26337  1148  00AB               	movwf	crc_append@message
 26338  1149  3023               	movlw	35
 26339  114A  00AC               	movwf	crc_append@message+1
 26340  114B  307A               	movlw	122
 26341  114C  00AD               	movwf	crc_append@n
 26342  114D  01AE               	clrf	crc_append@n+1
 26343  114E  2455  3190         	fcall	_crc_append
 26344                           
 26345                           ;appdata.c: 223: m_flash_copy((0x4000-0x80),comBuffer, sizeof (st_flowCalibrationTable))
      +                          ;
 26346  1150  3080               	movlw	128
 26347  1151  0020               	movlb	0	; select bank0
 26348  1152  00AA               	movwf	m_flash_copy@addr
 26349  1153  303F               	movlw	63
 26350  1154  00AB               	movwf	m_flash_copy@addr+1
 26351  1155  3070               	movlw	112
 26352  1156  00AC               	movwf	m_flash_copy@buf
 26353  1157  3023               	movlw	35
 26354  1158  00AD               	movwf	m_flash_copy@buf+1
 26355  1159  307C               	movlw	124
 26356  115A  00B7               	movwf	??_data_api_calibration_table_data_save
 26357  115B  00AE               	movwf	m_flash_copy@len
 26358  115C  24C6  3190         	fcall	_m_flash_copy
 26359                           
 26360                           ;appdata.c: 224: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 26361  115E  3070               	movlw	112
 26362  115F  0020               	movlb	0	; select bank0
 26363  1160  00A0               	movwf	data_api_write_eeprom@buf
 26364  1161  3023               	movlw	35
 26365  1162  00A1               	movwf	data_api_write_eeprom@buf+1
 26366  1163  3080               	movlw	128
 26367  1164  00B7               	movwf	??_data_api_calibration_table_data_save
 26368  1165  00A2               	movwf	data_api_write_eeprom@addr
 26369  1166  307C               	movlw	124
 26370  1167  00B8               	movwf	??_data_api_calibration_table_data_save+1
 26371  1168  00A3               	movwf	data_api_write_eeprom@len
 26372  1169  24AA  3190         	fcall	_data_api_write_eeprom
 26373                           
 26374                           ;appdata.c: 225: i=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowCal
      +                          ibrationTable) );
 26375  116B  3080               	movlw	128
 26376  116C  0020               	movlb	0	; select bank0
 26377  116D  00AB               	movwf	crc_verify@message
 26378  116E  30BF               	movlw	191
 26379  116F  00AC               	movwf	crc_verify@message+1
 26380  1170  307C               	movlw	124
 26381  1171  00AD               	movwf	crc_verify@n
 26382  1172  3000               	movlw	0
 26383  1173  01AE               	clrf	crc_verify@n+1
 26384  1174  23BD               	fcall	_crc_verify
 26385  1175  0020               	movlb	0	; select bank0
 26386  1176  00B7               	movwf	??_data_api_calibration_table_data_save
 26387  1177  00BC               	movwf	data_api_calibration_table_data_save@i
 26388                           
 26389                           ;appdata.c: 226: flashOpStr.op = enFLASH_NOTHING;
 26390  1178  0022               	movlb	2	; select bank2
 26391  1179  01DB               	clrf	(_flashOpStr^(0+256)+20)
 26392  117A  0008               	return
 26393  117B                     __end_of_data_api_calibration_table_data_save:	
 26394                           ;appdata.c: 227: return i;
 26395                           ;	Return value of _data_api_calibration_table_data_save is never used
 26396                           
 26397  117B                     __ptext147:	
 26398 ;; *************** function _data_api_system_data_init *****************
 26399 ;; Defined at:
 26400 ;;		line 162 in file "src/app/appdata.c"
 26401 ;; Parameters:    Size  Location     Type
 26402 ;;		None
 26403 ;; Auto vars:     Size  Location     Type
 26404 ;;  sta             1   23[BANK0 ] unsigned char 
 26405 ;; Return value:  Size  Location     Type
 26406 ;;                  1    wreg      unsigned char 
 26407 ;; Registers used:
 26408 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26409 ;; Tracked objects:
 26410 ;;		On entry : 0/0
 26411 ;;		On exit  : 0/0
 26412 ;;		Unchanged: 0/0
 26413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 26416 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 26417 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 26418 ;;Total ram usage:        2 bytes
 26419 ;; Hardware stack levels used:    1
 26420 ;; Hardware stack levels required when called:    5
 26421 ;; This function calls:
 26422 ;;		_crc_append
 26423 ;;		_crc_verify
 26424 ;;		_data_api_read_eeprom
 26425 ;;		_data_api_system_data_get
 26426 ;;		_data_api_write_eeprom
 26427 ;;		_m_flash_copy
 26428 ;;		_m_flash_erase
 26429 ;;		_m_mem_cpy_len
 26430 ;; This function is called by:
 26431 ;;		_main
 26432 ;; This function uses a non-reentrant model
 26433 ;;
 26434                           
 26435                           
 26436                           ;psect for function _data_api_system_data_init
 26437  117B                     _data_api_system_data_init:	
 26438                           
 26439                           ;appdata.c: 163: uint8_t sta = 0;
 26440                           
 26441                           ;incstack = 0
 26442                           ; Regs used in _data_api_system_data_init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26443  117B  0020               	movlb	0	; select bank0
 26444  117C  30BF               	movlw	191
 26445  117D  01B7               	clrf	data_api_system_data_init@sta
 26446                           
 26447                           ;appdata.c: 165: sta=crc_verify((uint8_t*)(&mainSystemData),sizeof (st_SystemData));
 26448  117E  01AB               	clrf	crc_verify@message
 26449  117F  00AC               	movwf	crc_verify@message+1
 26450  1180  3048               	movlw	72
 26451  1181  00AD               	movwf	crc_verify@n
 26452  1182  3000               	movlw	0
 26453  1183  01AE               	clrf	crc_verify@n+1
 26454  1184  23BD  3190         	fcall	_crc_verify
 26455  1186  0020               	movlb	0	; select bank0
 26456  1187  00B6               	movwf	??_data_api_system_data_init
 26457  1188  00B7               	movwf	data_api_system_data_init@sta
 26458                           
 26459                           ;appdata.c: 166: if (!sta){
 26460  1189  0837               	movf	data_api_system_data_init@sta,w
 26461  118A  1D03               	btfss	3,2
 26462  118B  29EC               	goto	l15111
 26463                           
 26464                           ;appdata.c: 167: data_api_read_eeprom(comBuffer,0x00,sizeof (st_SystemData));
 26465  118C  3070               	movlw	112
 26466  118D  00F4               	movwf	data_api_read_eeprom@buf
 26467  118E  3023               	movlw	35
 26468  118F  00F5               	movwf	data_api_read_eeprom@buf+1
 26469  1190  3048               	movlw	72
 26470  1191  01F6               	clrf	data_api_read_eeprom@addr
 26471  1192  00B6               	movwf	??_data_api_system_data_init
 26472  1193  00F7               	movwf	data_api_read_eeprom@len
 26473  1194  2485  3190         	fcall	_data_api_read_eeprom
 26474                           
 26475                           ;appdata.c: 168: sta=crc_verify(comBuffer,sizeof (st_SystemData));
 26476  1196  3070               	movlw	112
 26477  1197  0020               	movlb	0	; select bank0
 26478  1198  00AB               	movwf	crc_verify@message
 26479  1199  3023               	movlw	35
 26480  119A  00AC               	movwf	crc_verify@message+1
 26481  119B  3048               	movlw	72
 26482  119C  00AD               	movwf	crc_verify@n
 26483  119D  3000               	movlw	0
 26484  119E  01AE               	clrf	crc_verify@n+1
 26485  119F  23BD  3190         	fcall	_crc_verify
 26486  11A1  0020               	movlb	0	; select bank0
 26487  11A2  00B6               	movwf	??_data_api_system_data_init
 26488  11A3  00B7               	movwf	data_api_system_data_init@sta
 26489                           
 26490                           ;appdata.c: 170: if(!sta){
 26491  11A4  0837               	movf	data_api_system_data_init@sta,w
 26492  11A5  1D03               	btfss	3,2
 26493  11A6  29C9               	goto	l15105
 26494                           
 26495                           ;appdata.c: 171: m_mem_cpy_len(comBuffer,(uint8_t*)(&bkupSystemData),sizeof (st_SystemDa
      +                          ta)-2);
 26496  11A7  3070               	movlw	112
 26497  11A8  00F3               	movwf	m_mem_cpy_len@d
 26498  11A9  3023               	movlw	35
 26499  11AA  00F4               	movwf	m_mem_cpy_len@d+1
 26500  11AB  3080               	movlw	128
 26501  11AC  00F5               	movwf	m_mem_cpy_len@s
 26502  11AD  30BE               	movlw	190
 26503  11AE  00F6               	movwf	m_mem_cpy_len@s+1
 26504  11AF  3046               	movlw	70
 26505  11B0  00B6               	movwf	??_data_api_system_data_init
 26506  11B1  00F7               	movwf	m_mem_cpy_len@len
 26507  11B2  2778  3190         	fcall	_m_mem_cpy_len
 26508                           
 26509                           ;appdata.c: 172: crc_append(comBuffer,sizeof (st_SystemData)-2);
 26510  11B4  3070               	movlw	112
 26511  11B5  0020               	movlb	0	; select bank0
 26512  11B6  00AB               	movwf	crc_append@message
 26513  11B7  3023               	movlw	35
 26514  11B8  00AC               	movwf	crc_append@message+1
 26515  11B9  3046               	movlw	70
 26516  11BA  00AD               	movwf	crc_append@n
 26517  11BB  01AE               	clrf	crc_append@n+1
 26518  11BC  2455  3190         	fcall	_crc_append
 26519                           
 26520                           ;appdata.c: 173: data_api_write_eeprom(comBuffer,0x00,sizeof(st_SystemData));
 26521  11BE  3070               	movlw	112
 26522  11BF  0020               	movlb	0	; select bank0
 26523  11C0  00A0               	movwf	data_api_write_eeprom@buf
 26524  11C1  3023               	movlw	35
 26525  11C2  00A1               	movwf	data_api_write_eeprom@buf+1
 26526  11C3  3048               	movlw	72
 26527  11C4  01A2               	clrf	data_api_write_eeprom@addr
 26528  11C5  00B6               	movwf	??_data_api_system_data_init
 26529  11C6  00A3               	movwf	data_api_write_eeprom@len
 26530  11C7  24AA  3190         	fcall	_data_api_write_eeprom
 26531  11C9                     l15105:	
 26532                           
 26533                           ;appdata.c: 174: }
 26534                           ;appdata.c: 175: m_flash_erase((0x4000-0x100), sizeof (st_SystemData));
 26535  11C9  0020               	movlb	0	; select bank0
 26536  11CA  303F               	movlw	63
 26537  11CB  01A0               	clrf	m_flash_erase@addr
 26538  11CC  00A1               	movwf	m_flash_erase@addr+1
 26539  11CD  3048               	movlw	72
 26540  11CE  00B6               	movwf	??_data_api_system_data_init
 26541  11CF  00A2               	movwf	m_flash_erase@len
 26542  11D0  2532  3190         	fcall	_m_flash_erase
 26543                           
 26544                           ;appdata.c: 176: m_flash_copy((0x4000-0x100),comBuffer, sizeof (st_SystemData));
 26545  11D2  0020               	movlb	0	; select bank0
 26546  11D3  303F               	movlw	63
 26547  11D4  01AA               	clrf	m_flash_copy@addr
 26548  11D5  00AB               	movwf	m_flash_copy@addr+1
 26549  11D6  3070               	movlw	112
 26550  11D7  00AC               	movwf	m_flash_copy@buf
 26551  11D8  3023               	movlw	35
 26552  11D9  00AD               	movwf	m_flash_copy@buf+1
 26553  11DA  3048               	movlw	72
 26554  11DB  00B6               	movwf	??_data_api_system_data_init
 26555  11DC  00AE               	movwf	m_flash_copy@len
 26556  11DD  24C6  3190         	fcall	_m_flash_copy
 26557                           
 26558                           ;appdata.c: 177: sta=crc_verify((uint8_t*)(&mainSystemData),sizeof (st_SystemData));
 26559  11DF  0020               	movlb	0	; select bank0
 26560  11E0  30BF               	movlw	191
 26561  11E1  01AB               	clrf	crc_verify@message
 26562  11E2  00AC               	movwf	crc_verify@message+1
 26563  11E3  3048               	movlw	72
 26564  11E4  00AD               	movwf	crc_verify@n
 26565  11E5  3000               	movlw	0
 26566  11E6  01AE               	clrf	crc_verify@n+1
 26567  11E7  23BD  3190         	fcall	_crc_verify
 26568  11E9  0020               	movlb	0	; select bank0
 26569  11EA  00B6               	movwf	??_data_api_system_data_init
 26570  11EB  00B7               	movwf	data_api_system_data_init@sta
 26571  11EC                     l15111:	
 26572                           
 26573                           ;appdata.c: 178: }
 26574                           ;appdata.c: 180: data_api_system_data_get();
 26575  11EC  2FF1               	ljmp	l12931
 26576  11ED                     __end_of_data_api_system_data_init:	
 26577                           ;appdata.c: 181: return sta;
 26578                           ;	Return value of _data_api_system_data_init is never used
 26579                           
 26580  11ED                     start_initialization:	
 26581  11ED                     __initialization:		;BIGRAM
 26582                           
 26583                           ; Clear objects allocated to BIGRAM
 26584  11ED  3070               	movlw	low (0+9072)
 26585  11EE  0084               	movwf	4
 26586  11EF  3023               	movlw	high (0+9072)
 26587  11F0  0085               	movwf	5
 26588  11F1  3080               	movlw	128
 26589  11F2  00FE               	movwf	btemp
 26590  11F3  3000               	movlw	0
 26591  11F4  00FF               	movwf	btemp+1
 26592  11F5  31B5  25A5  3190   	fcall	clear_ram0
 26593                           
 26594                           ; Clear objects allocated to COMMON
 26595  11F8  01F8               	clrf	__pbssCOMMON& (0+127)
 26596  11F9  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
 26597  11FA  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
 26598                           
 26599                           ; Clear objects allocated to BANK1
 26600  11FB  30A0               	movlw	low __pbssBANK1
 26601  11FC  0084               	movwf	4
 26602  11FD  3000               	movlw	high __pbssBANK1
 26603  11FE  0085               	movwf	5
 26604  11FF  3028               	movlw	40
 26605  1200  00FE               	movwf	btemp
 26606  1201  3000               	movlw	0
 26607  1202  00FF               	movwf	btemp+1
 26608  1203  31B5  25A5  3190   	fcall	clear_ram0
 26609                           
 26610                           ; Clear objects allocated to BANK2
 26611  1206  3020               	movlw	low __pbssBANK2
 26612  1207  0084               	movwf	4
 26613  1208  3001               	movlw	high __pbssBANK2
 26614  1209  0085               	movwf	5
 26615  120A  304D               	movlw	77
 26616  120B  00FE               	movwf	btemp
 26617  120C  3000               	movlw	0
 26618  120D  00FF               	movwf	btemp+1
 26619  120E  31B5  25A5  3190   	fcall	clear_ram0
 26620                           
 26621                           ; Clear objects allocated to BANK3
 26622  1211  30A0               	movlw	low __pbssBANK3
 26623  1212  0084               	movwf	4
 26624  1213  3001               	movlw	high __pbssBANK3
 26625  1214  0085               	movwf	5
 26626  1215  301C               	movlw	28
 26627  1216  00FE               	movwf	btemp
 26628  1217  3000               	movlw	0
 26629  1218  00FF               	movwf	btemp+1
 26630  1219  31B5  25A5  3190   	fcall	clear_ram0
 26631                           
 26632                           ; Clear objects allocated to BANK4
 26633  121C  3020               	movlw	low __pbssBANK4
 26634  121D  0084               	movwf	4
 26635  121E  3002               	movlw	high __pbssBANK4
 26636  121F  0085               	movwf	5
 26637  1220  3040               	movlw	64
 26638  1221  00FE               	movwf	btemp
 26639  1222  3000               	movlw	0
 26640  1223  00FF               	movwf	btemp+1
 26641  1224  31B5  25A5  3190   	fcall	clear_ram0
 26642                           
 26643                           ; Initialize objects allocated to BANK1
 26644  1227  0021               	movlb	1	; select bank1
 26645                           
 26646                           ;initializer for _noKeyEventTimeOut
 26647  1228  301E               	movlw	30
 26648  1229  00EF               	movwf	__pdataBANK1& (0+127)
 26649                           
 26650                           ; Initialize objects allocated to BANK2
 26651  122A  0022               	movlb	2	; select bank2
 26652                           
 26653                           ;initializer for _pLcdReg
 26654  122B  30A0               	movlw	160
 26655  122C  00ED               	movwf	__pdataBANK2& (0+127)
 26656  122D  3007               	movlw	7
 26657  122E  00EE               	movwf	(__pdataBANK2+1)& (0+127)
 26658                           
 26659                           ;initializer for _flowCalibrationPointSingle
 26660  122F  3001               	movlw	1
 26661  1230  00EF               	movwf	(__pdataBANK2+2)& (0+127)
 26662                           
 26663                           ; Initialize objects allocated to BANK3
 26664  1231  3002               	movlw	low __pidataBANK3
 26665  1232  0084               	movwf	4
 26666  1233  3098               	movlw	(high __pidataBANK3)| (0+128)
 26667  1234  0085               	movwf	5
 26668  1235  0023               	movlb	3	; select bank3
 26669  1236  0012               	moviw fsr0++
 26670  1237  00BC               	movwf	__pdataBANK3& (0+127)
 26671  1238  0012               	moviw fsr0++
 26672  1239  00BD               	movwf	(__pdataBANK3+1)& (0+127)
 26673  123A  0012               	moviw fsr0++
 26674  123B  00BE               	movwf	(__pdataBANK3+2)& (0+127)
 26675  123C  0012               	moviw fsr0++
 26676  123D  00BF               	movwf	(__pdataBANK3+3)& (0+127)
 26677  123E  0012               	moviw fsr0++
 26678  123F  00C0               	movwf	(__pdataBANK3+4)& (0+127)
 26679  1240  0012               	moviw fsr0++
 26680  1241  00C1               	movwf	(__pdataBANK3+5)& (0+127)
 26681  1242                     end_of_initialization:	
 26682                           ;End of C runtime variable initialization code
 26683                           
 26684  1242                     __end_of__initialization:	
 26685  1242  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
 26686  1243  0020               	movlb	0
 26687  1244  2A45               	ljmp	_main	;jump to C main() function
 26688  1245                     __pmaintext:	
 26689 ;;
 26690 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
 26691 ;;
 26692 ;; *************** function _main *****************
 26693 ;; Defined at:
 26694 ;;		line 39 in file "main.c"
 26695 ;; Parameters:    Size  Location     Type
 26696 ;;		None
 26697 ;; Auto vars:     Size  Location     Type
 26698 ;;		None
 26699 ;; Return value:  Size  Location     Type
 26700 ;;                  1    wreg      void 
 26701 ;; Registers used:
 26702 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 26703 ;; Tracked objects:
 26704 ;;		On entry : B1F/0
 26705 ;;		On exit  : 0/0
 26706 ;;		Unchanged: 0/0
 26707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 26708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 26710 ;;      Temps:          0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 26711 ;;      Totals:         0       0       0       0       1       0       0       0       0       0       0       0       
      +0
 26712 ;;Total ram usage:        1 bytes
 26713 ;; Hardware stack levels required when called:   11
 26714 ;; This function calls:
 26715 ;;		_data_api_calibration_table_data_init
 26716 ;;		_data_api_flash_process
 26717 ;;		_data_api_rt_data_save
 26718 ;;		_data_api_system_data_init
 26719 ;;		_flow_sampling_process
 26720 ;;		_in_app_vavle_on
 26721 ;;		_m_system_init
 26722 ;;		_m_system_start_self_test
 26723 ;;		_mfapi_pcd_init
 26724 ;;		_modbus_response_process
 26725 ;;		_my_uart1_received_ready
 26726 ;;		_rfid_comm_process
 26727 ;;		_timer0_irq_callback
 26728 ;;		_timer1_irq_callback
 26729 ;;		_ui_disp_menu
 26730 ;;		_ui_key_process
 26731 ;;		_ui_start_display
 26732 ;; This function is called by:
 26733 ;;		Startup code after reset
 26734 ;; This function uses a non-reentrant model
 26735 ;;
 26736                           
 26737                           
 26738                           ;psect for function _main
 26739  1245                     _main:	
 26740                           
 26741                           ;main.c: 44: m_system_init();
 26742                           
 26743                           ;incstack = 0
 26744                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 26745  1245  31AB  237B  3190   	fcall	_m_system_init
 26746                           
 26747                           ;main.c: 47: m_system_start_self_test();
 26748  1248  3199  21C6  3190   	fcall	_m_system_start_self_test
 26749                           
 26750                           ;main.c: 48: ui_start_display();
 26751  124B  31B6  268D  3190   	fcall	_ui_start_display
 26752                           
 26753                           ;main.c: 49: do{PIE1bits.RC1IE = 0;}while(0);;
 26754  124E  0021               	movlb	1	; select bank1
 26755  124F  1291               	bcf	17,5	;volatile
 26756                           
 26757                           ;main.c: 51: data_api_system_data_init();
 26758  1250  217B  3190         	fcall	_data_api_system_data_init
 26759                           
 26760                           ;main.c: 52: data_api_calibration_table_data_init();
 26761  1252  22E0               	fcall	_data_api_calibration_table_data_init
 26762                           
 26763                           ;main.c: 54: mfapi_pcd_init();
 26764  1253  3187  27F5  3190   	fcall	_mfapi_pcd_init
 26765                           
 26766                           ;main.c: 56: my_uart1_received_ready();
 26767  1256  22D7  3190         	fcall	_my_uart1_received_ready
 26768  1258                     l15405:	
 26769                           ;main.c: 57: while (1){
 26770                           
 26771                           
 26772                           ;main.c: 58: if(!PORTBbits.RB4){
 26773  1258  0020               	movlb	0	; select bank0
 26774  1259  1A0D               	btfsc	13,4	;volatile
 26775  125A  2A5D               	goto	l2494
 26776                           
 26777                           ;main.c: 60: deviceStatus.bits.doorOpen=1;
 26778  125B  0021               	movlb	1	; select bank1
 26779  125C  153A               	bsf	_deviceStatus^(0+128),2
 26780  125D                     l2494:	
 26781                           
 26782                           ;main.c: 61: }
 26783                           ;main.c: 62: if(PORTAbits.RA5){
 26784  125D  0020               	movlb	0	; select bank0
 26785  125E  1E8C               	btfss	12,5	;volatile
 26786  125F  2A66               	goto	l2495
 26787                           
 26788                           ;main.c: 64: deviceStatus.bits.acPowerDown=1;
 26789  1260  0021               	movlb	1	; select bank1
 26790  1261  15BA               	bsf	_deviceStatus^(0+128),3
 26791                           
 26792                           ;main.c: 65: Event |= (uint8_t)(0x01<<6);
 26793  1262  1736               	bsf	_Event^(0+128),6
 26794                           
 26795                           ;main.c: 66: do { LATAbits.LATA1 = 0; } while(0);;
 26796  1263  0022               	movlb	2	; select bank2
 26797  1264  108C               	bcf	12,1	;volatile
 26798                           
 26799                           ;main.c: 67: }else{
 26800  1265  2A6A               	goto	l2498
 26801  1266                     l2495:	
 26802                           
 26803                           ;main.c: 68: deviceStatus.bits.acPowerDown=0;
 26804  1266  0021               	movlb	1	; select bank1
 26805  1267  11BA               	bcf	_deviceStatus^(0+128),3
 26806                           
 26807                           ;main.c: 69: do { LATAbits.LATA1 = 1; } while(0);;
 26808  1268  0022               	movlb	2	; select bank2
 26809  1269  148C               	bsf	12,1	;volatile
 26810  126A                     l2498:	
 26811                           
 26812                           ;main.c: 70: }
 26813                           ;main.c: 71: if(Event & (uint8_t)(0x01<<4)){timer0_irq_callback();}
 26814  126A  0021               	movlb	1	; select bank1
 26815  126B  1E36               	btfss	_Event^(0+128),4
 26816  126C  2A70               	goto	l15413
 26817  126D  31B6  26C8  3190   	fcall	_timer0_irq_callback
 26818  1270                     l15413:	
 26819                           
 26820                           ;main.c: 72: if(Event & (uint8_t)(0x01<<5)){timer1_irq_callback();}
 26821  1270  0021               	movlb	1	; select bank1
 26822  1271  1EB6               	btfss	_Event^(0+128),5
 26823  1272  2A76               	goto	l15417
 26824  1273  31B6  265B  3190   	fcall	_timer1_irq_callback
 26825  1276                     l15417:	
 26826                           
 26827                           ;main.c: 73: if(Event & (uint8_t)(0x01<<0)){
 26828  1276  0021               	movlb	1	; select bank1
 26829  1277  1C36               	btfss	_Event^(0+128),0
 26830  1278  2A7C               	goto	l15421
 26831                           
 26832                           ;main.c: 74: rfid_comm_process();
 26833  1279  3188  2001  3190   	fcall	_rfid_comm_process
 26834  127C                     l15421:	
 26835                           
 26836                           ;main.c: 77: }
 26837                           ;main.c: 78: if(Event & (uint8_t)(0x01<<1)){
 26838  127C  0021               	movlb	1	; select bank1
 26839  127D  1CB6               	btfss	_Event^(0+128),1
 26840  127E  2A82               	goto	l15425
 26841                           
 26842                           ;main.c: 80: flow_sampling_process();
 26843  127F  3180  2039  3190   	fcall	_flow_sampling_process
 26844  1282                     l15425:	
 26845                           
 26846                           ;main.c: 81: }
 26847                           ;main.c: 82: if(Event & (uint8_t)(0x01<<6)){
 26848  1282  0021               	movlb	1	; select bank1
 26849  1283  1F36               	btfss	_Event^(0+128),6
 26850  1284  2A8C               	goto	l15431
 26851                           
 26852                           ;main.c: 84: data_api_rt_data_save();
 26853  1285  2001  3190         	fcall	_data_api_rt_data_save
 26854                           
 26855                           ;main.c: 85: Event &= ~(uint8_t)(0x01<<6);
 26856  1287  30BF               	movlw	191
 26857  1288  0023               	movlb	3	; select bank3
 26858  1289  00C8               	movwf	??_main^(0+384)
 26859  128A  0021               	movlb	1	; select bank1
 26860  128B  05B6               	andwf	_Event^(0+128),f
 26861  128C                     l15431:	
 26862                           
 26863                           ;main.c: 87: }
 26864                           ;main.c: 88: if(Event & (uint8_t)(0x01<<3)){
 26865  128C  1DB6               	btfss	_Event^(0+128),3
 26866  128D  2A9E               	goto	l2506
 26867                           
 26868                           ;main.c: 90: ui_disp_menu();
 26869  128E  31A2  221A  3190   	fcall	_ui_disp_menu
 26870                           
 26871                           ;main.c: 91: if(warningStatus.bits.moneyLowWarning){
 26872  1291  0022               	movlb	2	; select bank2
 26873  1292  1E2E               	btfss	_warningStatus^(0+256),4
 26874  1293  2A9D               	goto	l2511
 26875                           
 26876                           ;main.c: 92: do { LATAbits.LATA2 = ~LATAbits.LATA2; } while(0);;
 26877  1294  1003               	clrc
 26878  1295  1D0C               	btfss	12,2	;volatile
 26879  1296  1403               	setc
 26880  1297  1C03               	btfss	3,0
 26881  1298  2A9C               	goto	u14070
 26882  1299  0022               	movlb	2	; select bank2
 26883  129A  150C               	bsf	12,2	;volatile
 26884  129B  2A9E               	goto	l2506
 26885  129C                     u14070:	
 26886  129C  0022               	movlb	2	; select bank2
 26887  129D                     l2511:	
 26888                           ;main.c: 94: do { LATAbits.LATA2 = 0; } while(0);;
 26889                           
 26890                           ;main.c: 93: }else{
 26891                           
 26892  129D  110C               	bcf	12,2	;volatile
 26893  129E                     l2506:	
 26894                           
 26895                           ;main.c: 95: }
 26896                           ;main.c: 97: }
 26897                           ;main.c: 99: if(Event & (uint8_t)(0x01<<2)){
 26898  129E  0021               	movlb	1	; select bank1
 26899  129F  1D36               	btfss	_Event^(0+128),2
 26900  12A0  2AB6               	goto	l15445
 26901                           
 26902                           ;main.c: 101: do{PIE1bits.RC1IE = 0;}while(0);
 26903  12A1  1291               	bcf	17,5	;volatile
 26904                           
 26905                           ;main.c: 102: modbus_response_process(uart1Buffer,uart1ReceivedCount);
 26906  12A2  0022               	movlb	2	; select bank2
 26907  12A3  0827               	movf	(_uart1ReceivedCount+1)^(0+256),w
 26908  12A4  0020               	movlb	0	; select bank0
 26909  12A5  00C9               	movwf	modbus_response_process@rlen+1
 26910  12A6  0022               	movlb	2	; select bank2
 26911  12A7  0826               	movf	_uart1ReceivedCount^(0+256),w
 26912  12A8  0020               	movlb	0	; select bank0
 26913  12A9  00C8               	movwf	modbus_response_process@rlen
 26914  12AA  30A0               	movlw	160
 26915  12AB  3184  242F  3190   	fcall	_modbus_response_process
 26916                           
 26917                           ;main.c: 103: Event &= ~(uint8_t)(0x01<<2);
 26918  12AE  30FB               	movlw	251
 26919  12AF  0023               	movlb	3	; select bank3
 26920  12B0  00C8               	movwf	??_main^(0+384)
 26921  12B1  0021               	movlb	1	; select bank1
 26922  12B2  05B6               	andwf	_Event^(0+128),f
 26923                           
 26924                           ;main.c: 104: my_uart1_received_ready();
 26925  12B3  22D7  3190         	fcall	_my_uart1_received_ready
 26926                           
 26927                           ;main.c: 106: }
 26928  12B5  2AB9               	goto	l15447
 26929  12B6                     l15445:	
 26930                           
 26931                           ;main.c: 107: else {
 26932                           ;main.c: 109: ui_key_process();
 26933  12B6  31A0  2035  3190   	fcall	_ui_key_process
 26934  12B9                     l15447:	
 26935                           
 26936                           ;main.c: 111: }
 26937                           ;main.c: 113: if(flashOpStr.op!=enFLASH_NOTHING){
 26938  12B9  0022               	movlb	2	; select bank2
 26939  12BA  085B               	movf	(_flashOpStr^(0+256)+20),w
 26940  12BB  1903               	btfsc	3,2
 26941  12BC  2AC1               	goto	l15453
 26942                           
 26943                           ;main.c: 115: data_api_flash_process();
 26944  12BD  2793  3190         	fcall	_data_api_flash_process
 26945                           
 26946                           ;main.c: 116: flashOpStr.op = enFLASH_NOTHING;
 26947  12BF  0022               	movlb	2	; select bank2
 26948  12C0  01DB               	clrf	(_flashOpStr^(0+256)+20)
 26949  12C1                     l15453:	
 26950                           
 26951                           ;main.c: 118: }
 26952                           ;main.c: 120: if(deviceStatus.byte==0 && valveStatus==VALVE_CLOSED){
 26953  12C1  0021               	movlb	1	; select bank1
 26954  12C2  083A               	movf	_deviceStatus^(0+128),w
 26955  12C3  1D03               	btfss	3,2
 26956  12C4  2AC9               	goto	l15459
 26957  12C5  0B3C               	decfsz	_valveStatus^(0+128),w
 26958  12C6  2AC9               	goto	l15459
 26959                           
 26960                           ;main.c: 121: in_app_vavle_on();
 26961  12C7  27FA  3190         	fcall	_in_app_vavle_on
 26962  12C9                     l15459:	
 26963                           
 26964                           ;main.c: 122: }
 26965                           ;main.c: 123: if(noKeyEventTimeOut==0 ){
 26966  12C9  0021               	movlb	1	; select bank1
 26967  12CA  086F               	movf	_noKeyEventTimeOut^(0+128),w
 26968  12CB  1D03               	btfss	3,2
 26969  12CC  2A58               	goto	l15405
 26970                           
 26971                           ;main.c: 124: if(menu!=0x50){
 26972  12CD  3050               	movlw	80
 26973  12CE  0678               	xorwf	_menu,w
 26974  12CF  1903               	btfsc	3,2
 26975  12D0  2A58               	goto	l15405
 26976                           
 26977                           ;main.c: 125: menu=bkupMenu;
 26978  12D1  0838               	movf	_bkupMenu^(0+128),w
 26979  12D2  0023               	movlb	3	; select bank3
 26980  12D3  00C8               	movwf	??_main^(0+384)
 26981  12D4  0848               	movf	??_main^(0+384),w
 26982  12D5  00F8               	movwf	_menu
 26983  12D6  2A58               	goto	l15405
 26984  12D7                     __end_of_main:	
 26985  12D7                     __ptext81:	
 26986 ;; *************** function _my_uart1_received_ready *****************
 26987 ;; Defined at:
 26988 ;;		line 223 in file "mcc_generated_files/eusart1.c"
 26989 ;; Parameters:    Size  Location     Type
 26990 ;;		None
 26991 ;; Auto vars:     Size  Location     Type
 26992 ;;		None
 26993 ;; Return value:  Size  Location     Type
 26994 ;;                  1    wreg      void 
 26995 ;; Registers used:
 26996 ;;		status,2
 26997 ;; Tracked objects:
 26998 ;;		On entry : 0/0
 26999 ;;		On exit  : 0/0
 27000 ;;		Unchanged: 0/0
 27001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27005 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27006 ;;Total ram usage:        0 bytes
 27007 ;; Hardware stack levels used:    1
 27008 ;; Hardware stack levels required when called:    2
 27009 ;; This function calls:
 27010 ;;		Nothing
 27011 ;; This function is called by:
 27012 ;;		_main
 27013 ;; This function uses a non-reentrant model
 27014 ;;
 27015                           
 27016                           
 27017                           ;psect for function _my_uart1_received_ready
 27018  12D7                     _my_uart1_received_ready:	
 27019                           
 27020                           ;eusart1.c: 226: PIE1bits.RC1IE = 0;
 27021                           
 27022                           ;incstack = 0
 27023                           ; Regs used in _my_uart1_received_ready: [status,2]
 27024  12D7  0021               	movlb	1	; select bank1
 27025  12D8  1291               	bcf	17,5	;volatile
 27026                           
 27027                           ;eusart1.c: 227: do{do { LATAbits.LATA4 = 0; } while(0);}while(0);;
 27028  12D9  0022               	movlb	2	; select bank2
 27029  12DA  120C               	bcf	12,4	;volatile
 27030                           
 27031                           ;eusart1.c: 228: uart1ReceivedCount=0;
 27032  12DB  01A6               	clrf	_uart1ReceivedCount^(0+256)
 27033  12DC  01A7               	clrf	(_uart1ReceivedCount+1)^(0+256)
 27034                           
 27035                           ;eusart1.c: 229: PIE1bits.RC1IE = 1;
 27036  12DD  0021               	movlb	1	; select bank1
 27037  12DE  1691               	bsf	17,5	;volatile
 27038  12DF  0008               	return
 27039  12E0                     __end_of_my_uart1_received_ready:	
 27040  12E0                     __ptext149:	
 27041 ;; *************** function _data_api_calibration_table_data_init *****************
 27042 ;; Defined at:
 27043 ;;		line 140 in file "src/app/appdata.c"
 27044 ;; Parameters:    Size  Location     Type
 27045 ;;		None
 27046 ;; Auto vars:     Size  Location     Type
 27047 ;;  stp             2   29[BANK0 ] PTR struct .
 27048 ;;		 -> comBuffer(128), 
 27049 ;;  i               1   31[BANK0 ] unsigned char 
 27050 ;;  sta             1   28[BANK0 ] unsigned char 
 27051 ;; Return value:  Size  Location     Type
 27052 ;;                  1    wreg      unsigned char 
 27053 ;; Registers used:
 27054 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27055 ;; Tracked objects:
 27056 ;;		On entry : 0/0
 27057 ;;		On exit  : 0/0
 27058 ;;		Unchanged: 0/0
 27059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27060 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27061 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27062 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27063 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 27064 ;;Total ram usage:       10 bytes
 27065 ;; Hardware stack levels used:    1
 27066 ;; Hardware stack levels required when called:    5
 27067 ;; This function calls:
 27068 ;;		___wmul
 27069 ;;		_crc_append
 27070 ;;		_crc_verify
 27071 ;;		_data_api_read_eeprom
 27072 ;;		_data_api_write_eeprom
 27073 ;;		_m_flash_copy
 27074 ;;		_m_flash_erase
 27075 ;; This function is called by:
 27076 ;;		_main
 27077 ;; This function uses a non-reentrant model
 27078 ;;
 27079                           
 27080                           
 27081                           ;psect for function _data_api_calibration_table_data_init
 27082  12E0                     _data_api_calibration_table_data_init:	
 27083                           
 27084                           ;appdata.c: 141: uint8_t i,sta;
 27085                           ;appdata.c: 142: st_flowCalibrationTable* stp=( st_flowCalibrationTable*)comBuffer;
 27086                           
 27087                           ;incstack = 0
 27088                           ; Regs used in _data_api_calibration_table_data_init: [wreg-fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 27089  12E0  3070               	movlw	112
 27090  12E1  0020               	movlb	0	; select bank0
 27091  12E2  00BD               	movwf	data_api_calibration_table_data_init@stp
 27092  12E3  3023               	movlw	35
 27093  12E4  00BE               	movwf	data_api_calibration_table_data_init@stp+1
 27094                           
 27095                           ;appdata.c: 143: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable),sizeof (st_flowCa
      +                          librationTable));
 27096  12E5  3080               	movlw	128
 27097  12E6  00AB               	movwf	crc_verify@message
 27098  12E7  30BF               	movlw	191
 27099  12E8  00AC               	movwf	crc_verify@message+1
 27100  12E9  307C               	movlw	124
 27101  12EA  00AD               	movwf	crc_verify@n
 27102  12EB  3000               	movlw	0
 27103  12EC  01AE               	clrf	crc_verify@n+1
 27104  12ED  23BD  3190         	fcall	_crc_verify
 27105  12EF  0020               	movlb	0	; select bank0
 27106  12F0  00B6               	movwf	??_data_api_calibration_table_data_init
 27107  12F1  00BC               	movwf	data_api_calibration_table_data_init@sta
 27108                           
 27109                           ;appdata.c: 144: if(!sta){
 27110  12F2  083C               	movf	data_api_calibration_table_data_init@sta,w
 27111  12F3  1D03               	btfss	3,2
 27112  12F4  0008               	return
 27113                           
 27114                           ;appdata.c: 145: data_api_read_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 27115  12F5  3070               	movlw	112
 27116  12F6  00F4               	movwf	data_api_read_eeprom@buf
 27117  12F7  3023               	movlw	35
 27118  12F8  00F5               	movwf	data_api_read_eeprom@buf+1
 27119  12F9  3080               	movlw	128
 27120  12FA  00B6               	movwf	??_data_api_calibration_table_data_init
 27121  12FB  00F6               	movwf	data_api_read_eeprom@addr
 27122  12FC  307C               	movlw	124
 27123  12FD  00B7               	movwf	??_data_api_calibration_table_data_init+1
 27124  12FE  00F7               	movwf	data_api_read_eeprom@len
 27125  12FF  2485  3190         	fcall	_data_api_read_eeprom
 27126                           
 27127                           ;appdata.c: 146: sta=crc_verify(comBuffer,sizeof (st_flowCalibrationTable));
 27128  1301  3070               	movlw	112
 27129  1302  0020               	movlb	0	; select bank0
 27130  1303  00AB               	movwf	crc_verify@message
 27131  1304  3023               	movlw	35
 27132  1305  00AC               	movwf	crc_verify@message+1
 27133  1306  307C               	movlw	124
 27134  1307  00AD               	movwf	crc_verify@n
 27135  1308  3000               	movlw	0
 27136  1309  01AE               	clrf	crc_verify@n+1
 27137  130A  23BD  3190         	fcall	_crc_verify
 27138  130C  0020               	movlb	0	; select bank0
 27139  130D  00B6               	movwf	??_data_api_calibration_table_data_init
 27140  130E  00BC               	movwf	data_api_calibration_table_data_init@sta
 27141                           
 27142                           ;appdata.c: 147: if(!sta){
 27143  130F  083C               	movf	data_api_calibration_table_data_init@sta,w
 27144  1310  1D03               	btfss	3,2
 27145  1311  2B97               	goto	l15081
 27146  1312  301E               	movlw	30
 27147                           
 27148                           ;appdata.c: 148: for(i=0;i<30;i++){
 27149  1313  01BF               	clrf	data_api_calibration_table_data_init@i
 27150  1314  023F               	subwf	data_api_calibration_table_data_init@i,w
 27151  1315  1803               	btfsc	3,0
 27152  1316  2B5F               	goto	l15075
 27153  1317                     l15069:	
 27154                           
 27155                           ;appdata.c: 149: stp->flowCalibrationArr[i].adcValue=2000*(i+1);
 27156  1317  083F               	movf	data_api_calibration_table_data_init@i,w
 27157  1318  3E01               	addlw	1
 27158  1319  00F3               	movwf	___wmul@multiplier
 27159  131A  3000               	movlw	0
 27160  131B  1803               	skipnc
 27161  131C  3001               	movlw	1
 27162  131D  00F4               	movwf	___wmul@multiplier+1
 27163  131E  30D0               	movlw	208
 27164  131F  00F5               	movwf	___wmul@multiplicand
 27165  1320  3007               	movlw	7
 27166  1321  00F6               	movwf	___wmul@multiplicand+1
 27167  1322  23EE  3190         	fcall	___wmul
 27168  1324  0020               	movlb	0	; select bank0
 27169  1325  083F               	movf	data_api_calibration_table_data_init@i,w
 27170  1326  00B6               	movwf	??_data_api_calibration_table_data_init
 27171  1327  01B7               	clrf	??_data_api_calibration_table_data_init+1
 27172  1328  35B6               	lslf	??_data_api_calibration_table_data_init,f
 27173  1329  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 27174  132A  35B6               	lslf	??_data_api_calibration_table_data_init,f
 27175  132B  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 27176  132C  0836               	movf	??_data_api_calibration_table_data_init,w
 27177  132D  073D               	addwf	data_api_calibration_table_data_init@stp,w
 27178  132E  0086               	movwf	6
 27179  132F  0837               	movf	??_data_api_calibration_table_data_init+1,w
 27180  1330  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 27181  1331  0087               	movwf	7
 27182  1332  0873               	movf	?___wmul,w
 27183  1333  3FC0               	movwi [0]fsr1
 27184  1334  0874               	movf	?___wmul+1,w
 27185  1335  3FC1               	movwi [1]fsr1
 27186                           
 27187                           ;appdata.c: 150: stp->flowCalibrationArr[i].rtflowValue=100*i;
 27188  1336  083F               	movf	data_api_calibration_table_data_init@i,w
 27189  1337  00B6               	movwf	??_data_api_calibration_table_data_init
 27190  1338  01B7               	clrf	??_data_api_calibration_table_data_init+1
 27191  1339  00F3               	movwf	___wmul@multiplier
 27192  133A  0837               	movf	??_data_api_calibration_table_data_init+1,w
 27193  133B  00F4               	movwf	___wmul@multiplier+1
 27194  133C  3064               	movlw	100
 27195  133D  00F5               	movwf	___wmul@multiplicand
 27196  133E  01F6               	clrf	___wmul@multiplicand+1
 27197  133F  23EE  3190         	fcall	___wmul
 27198  1341  0020               	movlb	0	; select bank0
 27199  1342  083F               	movf	data_api_calibration_table_data_init@i,w
 27200  1343  00B8               	movwf	??_data_api_calibration_table_data_init+2
 27201  1344  01B9               	clrf	??_data_api_calibration_table_data_init+3
 27202  1345  35B8               	lslf	??_data_api_calibration_table_data_init+2,f
 27203  1346  0DB9               	rlf	??_data_api_calibration_table_data_init+3,f
 27204  1347  35B8               	lslf	??_data_api_calibration_table_data_init+2,f
 27205  1348  0DB9               	rlf	??_data_api_calibration_table_data_init+3,f
 27206  1349  0838               	movf	??_data_api_calibration_table_data_init+2,w
 27207  134A  073D               	addwf	data_api_calibration_table_data_init@stp,w
 27208  134B  00BA               	movwf	??_data_api_calibration_table_data_init+4
 27209  134C  0839               	movf	??_data_api_calibration_table_data_init+3,w
 27210  134D  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 27211  134E  00BB               	movwf	??_data_api_calibration_table_data_init+5
 27212  134F  083A               	movf	??_data_api_calibration_table_data_init+4,w
 27213  1350  0086               	movwf	6
 27214  1351  083B               	movf	??_data_api_calibration_table_data_init+5,w
 27215  1352  0087               	movwf	7
 27216  1353  3142               	addfsr 1,2
 27217  1354  0873               	movf	?___wmul,w
 27218  1355  3FC0               	movwi [0]fsr1
 27219  1356  0874               	movf	?___wmul+1,w
 27220  1357  3FC1               	movwi [1]fsr1
 27221  1358  3001               	movlw	1
 27222  1359  00B6               	movwf	??_data_api_calibration_table_data_init
 27223  135A  07BF               	addwf	data_api_calibration_table_data_init@i,f
 27224  135B  301E               	movlw	30
 27225  135C  023F               	subwf	data_api_calibration_table_data_init@i,w
 27226  135D  1C03               	skipc
 27227  135E  2B17               	goto	l15069
 27228  135F                     l15075:	
 27229                           
 27230                           ;appdata.c: 151: }
 27231                           ;appdata.c: 152: stp->maxFlow=stp->flowCalibrationArr[i-1].rtflowValue;
 27232  135F  083F               	movf	data_api_calibration_table_data_init@i,w
 27233  1360  00B6               	movwf	??_data_api_calibration_table_data_init
 27234  1361  01B7               	clrf	??_data_api_calibration_table_data_init+1
 27235  1362  35B6               	lslf	??_data_api_calibration_table_data_init,f
 27236  1363  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 27237  1364  35B6               	lslf	??_data_api_calibration_table_data_init,f
 27238  1365  0DB7               	rlf	??_data_api_calibration_table_data_init+1,f
 27239  1366  0836               	movf	??_data_api_calibration_table_data_init,w
 27240  1367  3EFC               	addlw	252
 27241  1368  00B8               	movwf	??_data_api_calibration_table_data_init+2
 27242  1369  30FF               	movlw	255
 27243  136A  3D37               	addwfc	??_data_api_calibration_table_data_init+1,w
 27244  136B  00B9               	movwf	??_data_api_calibration_table_data_init+3
 27245  136C  0838               	movf	??_data_api_calibration_table_data_init+2,w
 27246  136D  073D               	addwf	data_api_calibration_table_data_init@stp,w
 27247  136E  00BA               	movwf	??_data_api_calibration_table_data_init+4
 27248  136F  0839               	movf	??_data_api_calibration_table_data_init+3,w
 27249  1370  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 27250  1371  00BB               	movwf	??_data_api_calibration_table_data_init+5
 27251  1372  083A               	movf	??_data_api_calibration_table_data_init+4,w
 27252  1373  0086               	movwf	6
 27253  1374  083B               	movf	??_data_api_calibration_table_data_init+5,w
 27254  1375  0087               	movwf	7
 27255  1376  3142               	addfsr 1,2
 27256  1377  083D               	movf	data_api_calibration_table_data_init@stp,w
 27257  1378  3E78               	addlw	120
 27258  1379  0084               	movwf	4
 27259  137A  3000               	movlw	0
 27260  137B  3D3E               	addwfc	data_api_calibration_table_data_init@stp+1,w
 27261  137C  0085               	movwf	5
 27262  137D  3F40               	moviw [0]fsr1
 27263  137E  3F80               	movwi [0]fsr0
 27264  137F  3F41               	moviw [1]fsr1
 27265  1380  3F81               	movwi [1]fsr0
 27266                           
 27267                           ;appdata.c: 153: crc_append(comBuffer,sizeof (st_flowCalibrationTable)-2);
 27268  1381  3070               	movlw	112
 27269  1382  00AB               	movwf	crc_append@message
 27270  1383  3023               	movlw	35
 27271  1384  00AC               	movwf	crc_append@message+1
 27272  1385  307A               	movlw	122
 27273  1386  00AD               	movwf	crc_append@n
 27274  1387  01AE               	clrf	crc_append@n+1
 27275  1388  2455  3190         	fcall	_crc_append
 27276                           
 27277                           ;appdata.c: 154: data_api_write_eeprom(comBuffer,0x80,sizeof(st_flowCalibrationTable));
 27278  138A  3070               	movlw	112
 27279  138B  0020               	movlb	0	; select bank0
 27280  138C  00A0               	movwf	data_api_write_eeprom@buf
 27281  138D  3023               	movlw	35
 27282  138E  00A1               	movwf	data_api_write_eeprom@buf+1
 27283  138F  3080               	movlw	128
 27284  1390  00B6               	movwf	??_data_api_calibration_table_data_init
 27285  1391  00A2               	movwf	data_api_write_eeprom@addr
 27286  1392  307C               	movlw	124
 27287  1393  00B7               	movwf	??_data_api_calibration_table_data_init+1
 27288  1394  00A3               	movwf	data_api_write_eeprom@len
 27289  1395  24AA  3190         	fcall	_data_api_write_eeprom
 27290  1397                     l15081:	
 27291                           
 27292                           ;appdata.c: 155: }
 27293                           ;appdata.c: 156: m_flash_erase((0x4000-0x80), sizeof (st_SystemData));
 27294  1397  3080               	movlw	128
 27295  1398  0020               	movlb	0	; select bank0
 27296  1399  00A0               	movwf	m_flash_erase@addr
 27297  139A  303F               	movlw	63
 27298  139B  00A1               	movwf	m_flash_erase@addr+1
 27299  139C  3048               	movlw	72
 27300  139D  00B6               	movwf	??_data_api_calibration_table_data_init
 27301  139E  00A2               	movwf	m_flash_erase@len
 27302  139F  2532  3190         	fcall	_m_flash_erase
 27303                           
 27304                           ;appdata.c: 157: m_flash_copy((0x4000-0x80),comBuffer,sizeof(st_flowCalibrationTable));
 27305  13A1  3080               	movlw	128
 27306  13A2  0020               	movlb	0	; select bank0
 27307  13A3  00AA               	movwf	m_flash_copy@addr
 27308  13A4  303F               	movlw	63
 27309  13A5  00AB               	movwf	m_flash_copy@addr+1
 27310  13A6  3070               	movlw	112
 27311  13A7  00AC               	movwf	m_flash_copy@buf
 27312  13A8  3023               	movlw	35
 27313  13A9  00AD               	movwf	m_flash_copy@buf+1
 27314  13AA  307C               	movlw	124
 27315  13AB  00B6               	movwf	??_data_api_calibration_table_data_init
 27316  13AC  00AE               	movwf	m_flash_copy@len
 27317  13AD  24C6  3190         	fcall	_m_flash_copy
 27318                           
 27319                           ;appdata.c: 158: sta=crc_verify((uint8_t*)(&Main_flowCalibrationTable), sizeof (st_flowC
      +                          alibrationTable) );
 27320  13AF  3080               	movlw	128
 27321  13B0  0020               	movlb	0	; select bank0
 27322  13B1  00AB               	movwf	crc_verify@message
 27323  13B2  30BF               	movlw	191
 27324  13B3  00AC               	movwf	crc_verify@message+1
 27325  13B4  307C               	movlw	124
 27326  13B5  00AD               	movwf	crc_verify@n
 27327  13B6  3000               	movlw	0
 27328  13B7  01AE               	clrf	crc_verify@n+1
 27329  13B8  23BD               	fcall	_crc_verify
 27330  13B9  0020               	movlb	0	; select bank0
 27331  13BA  00B6               	movwf	??_data_api_calibration_table_data_init
 27332  13BB  00BC               	movwf	data_api_calibration_table_data_init@sta
 27333  13BC  0008               	return
 27334  13BD                     __end_of_data_api_calibration_table_data_init:	
 27335                           ;appdata.c: 159: }
 27336                           ;appdata.c: 160: return sta;
 27337                           ;	Return value of _data_api_calibration_table_data_init is never used
 27338                           
 27339  13BD                     __ptext159:	
 27340 ;; *************** function _crc_verify *****************
 27341 ;; Defined at:
 27342 ;;		line 77 in file "src/protocol/crc16_sf.c"
 27343 ;; Parameters:    Size  Location     Type
 27344 ;;  message         2   11[BANK0 ] PTR unsigned char 
 27345 ;;		 -> cardDecBuf(18), cardIncBuf(18), bkupSystemData(72), comBuffer(128), 
 27346 ;;		 -> Main_flowCalibrationTable(124), mainSystemData(72), uart1Buffer(80), 
 27347 ;;  n               2   13[BANK0 ] unsigned int 
 27348 ;; Auto vars:     Size  Location     Type
 27349 ;;  expected        2   20[BANK0 ] unsigned int 
 27350 ;;  crccal          2   18[BANK0 ] unsigned int 
 27351 ;; Return value:  Size  Location     Type
 27352 ;;                  1    wreg      unsigned char 
 27353 ;; Registers used:
 27354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27355 ;; Tracked objects:
 27356 ;;		On entry : 0/0
 27357 ;;		On exit  : 0/0
 27358 ;;		Unchanged: 0/0
 27359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27360 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27361 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27362 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 27363 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 27364 ;;Total ram usage:       11 bytes
 27365 ;; Hardware stack levels used:    1
 27366 ;; Hardware stack levels required when called:    3
 27367 ;; This function calls:
 27368 ;;		_crc_sum
 27369 ;;		_m_mem_cpy_len
 27370 ;; This function is called by:
 27371 ;;		_modbus_response_process
 27372 ;;		_data_api_calibration_table_data_init
 27373 ;;		_data_api_system_data_init
 27374 ;;		_data_api_rt_data_save
 27375 ;;		_data_api_calibration_table_data_save
 27376 ;;		_rfid_comm_process_read_header
 27377 ;;		_rfid_comm_process_read_inc
 27378 ;;		_rfid_comm_process_read_dec
 27379 ;; This function uses a non-reentrant model
 27380 ;;
 27381                           
 27382                           
 27383                           ;psect for function _crc_verify
 27384  13BD                     _crc_verify:	
 27385                           
 27386                           ;crc16_sf.c: 79: uint16_t expected,crccal;
 27387                           ;crc16_sf.c: 82: m_mem_cpy_len((uint8_t*)(&expected),(message+n-2),2);
 27388                           
 27389                           ;incstack = 0
 27390                           ; Regs used in _crc_verify: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27391  13BD  3034               	movlw	low crc_verify@expected
 27392  13BE  00F3               	movwf	m_mem_cpy_len@d
 27393  13BF  3000               	movlw	high crc_verify@expected
 27394  13C0  00F4               	movwf	m_mem_cpy_len@d+1
 27395  13C1  0020               	movlb	0	; select bank0
 27396  13C2  082D               	movf	crc_verify@n,w
 27397  13C3  072B               	addwf	crc_verify@message,w
 27398  13C4  00AF               	movwf	??_crc_verify
 27399  13C5  082E               	movf	crc_verify@n+1,w
 27400  13C6  3D2C               	addwfc	crc_verify@message+1,w
 27401  13C7  00B0               	movwf	??_crc_verify+1
 27402  13C8  082F               	movf	??_crc_verify,w
 27403  13C9  3EFE               	addlw	254
 27404  13CA  00F5               	movwf	m_mem_cpy_len@s
 27405  13CB  30FF               	movlw	255
 27406  13CC  3D30               	addwfc	??_crc_verify+1,w
 27407  13CD  00F6               	movwf	m_mem_cpy_len@s+1
 27408  13CE  3002               	movlw	2
 27409  13CF  00B1               	movwf	??_crc_verify+2
 27410  13D0  00F7               	movwf	m_mem_cpy_len@len
 27411  13D1  2778  3190         	fcall	_m_mem_cpy_len
 27412                           
 27413                           ;crc16_sf.c: 83: crccal=crc_sum(message,n - 2);
 27414  13D3  0020               	movlb	0	; select bank0
 27415  13D4  082C               	movf	crc_verify@message+1,w
 27416  13D5  00F4               	movwf	crc_sum@puchMsg+1
 27417  13D6  082B               	movf	crc_verify@message,w
 27418  13D7  00F3               	movwf	crc_sum@puchMsg
 27419  13D8  082D               	movf	crc_verify@n,w
 27420  13D9  3EFE               	addlw	254
 27421  13DA  00F5               	movwf	crc_sum@usDataLen
 27422  13DB  30FF               	movlw	255
 27423  13DC  3D2E               	addwfc	crc_verify@n+1,w
 27424  13DD  00F6               	movwf	crc_sum@usDataLen+1
 27425  13DE  240C  3190         	fcall	_crc_sum
 27426  13E0  0874               	movf	?_crc_sum+1,w
 27427  13E1  0020               	movlb	0	; select bank0
 27428  13E2  00B3               	movwf	crc_verify@crccal+1
 27429  13E3  0873               	movf	?_crc_sum,w
 27430  13E4  00B2               	movwf	crc_verify@crccal
 27431                           
 27432                           ;crc16_sf.c: 84: if(expected!=crccal)return 0;
 27433  13E5  0833               	movf	crc_verify@crccal+1,w
 27434  13E6  0635               	xorwf	crc_verify@expected+1,w
 27435  13E7  1D03               	skipz
 27436  13E8  2BEB               	goto	u11525
 27437  13E9  0832               	movf	crc_verify@crccal,w
 27438  13EA  0634               	xorwf	crc_verify@expected,w
 27439  13EB                     u11525:	
 27440  13EB  1D03               	btfss	3,2
 27441  13EC  3400               	retlw	0
 27442                           
 27443                           ;crc16_sf.c: 85: return 1;
 27444  13ED  3401               	retlw	1
 27445  13EE                     __end_of_crc_verify:	
 27446  13EE                     __ptext163:	
 27447 ;; *************** function ___wmul *****************
 27448 ;; Defined at:
 27449 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v1.37\sources\common\Umul16.c"
 27450 ;; Parameters:    Size  Location     Type
 27451 ;;  multiplier      2    3[COMMON] unsigned int 
 27452 ;;  multiplicand    2    5[COMMON] unsigned int 
 27453 ;; Auto vars:     Size  Location     Type
 27454 ;;  product         2    0[BANK0 ] unsigned int 
 27455 ;; Return value:  Size  Location     Type
 27456 ;;                  2    3[COMMON] unsigned int 
 27457 ;; Registers used:
 27458 ;;		wreg, status,2, status,0
 27459 ;; Tracked objects:
 27460 ;;		On entry : 0/0
 27461 ;;		On exit  : 0/0
 27462 ;;		Unchanged: 0/0
 27463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27464 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27465 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27467 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27468 ;;Total ram usage:        6 bytes
 27469 ;; Hardware stack levels used:    1
 27470 ;; Hardware stack levels required when called:    2
 27471 ;; This function calls:
 27472 ;;		Nothing
 27473 ;; This function is called by:
 27474 ;;		_ui_key_set_process
 27475 ;;		_data_api_calibration_table_data_init
 27476 ;;		_app_flow_adc_2_flow
 27477 ;; This function uses a non-reentrant model
 27478 ;;
 27479                           
 27480                           
 27481                           ;psect for function ___wmul
 27482  13EE                     ___wmul:	
 27483                           
 27484                           ;incstack = 0
 27485                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 27486  13EE  0020               	movlb	0	; select bank0
 27487  13EF  01A0               	clrf	___wmul@product
 27488  13F0  01A1               	clrf	___wmul@product+1
 27489  13F1                     l13785:	
 27490  13F1  1C73               	btfss	___wmul@multiplier,0
 27491  13F2  2BF8               	goto	l2607
 27492  13F3  0875               	movf	___wmul@multiplicand,w
 27493  13F4  0020               	movlb	0	; select bank0
 27494  13F5  07A0               	addwf	___wmul@product,f
 27495  13F6  0876               	movf	___wmul@multiplicand+1,w
 27496  13F7  3DA1               	addwfc	___wmul@product+1,f
 27497  13F8                     l2607:	
 27498  13F8  3001               	movlw	1
 27499  13F9                     u12555:	
 27500  13F9  35F5               	lslf	___wmul@multiplicand,f
 27501  13FA  0DF6               	rlf	___wmul@multiplicand+1,f
 27502  13FB  0B89               	decfsz	9,f
 27503  13FC  2BF9               	goto	u12555
 27504  13FD  3001               	movlw	1
 27505  13FE                     u12565:	
 27506  13FE  36F4               	lsrf	___wmul@multiplier+1,f
 27507  13FF  0CF3               	rrf	___wmul@multiplier,f
 27508  1400  0B89               	decfsz	9,f
 27509  1401  2BFE               	goto	u12565
 27510  1402  0873               	movf	___wmul@multiplier,w
 27511  1403  0474               	iorwf	___wmul@multiplier+1,w
 27512  1404  1D03               	btfss	3,2
 27513  1405  2BF1               	goto	l13785
 27514  1406  0020               	movlb	0	; select bank0
 27515  1407  0821               	movf	___wmul@product+1,w
 27516  1408  00F4               	movwf	?___wmul+1
 27517  1409  0820               	movf	___wmul@product,w
 27518  140A  00F3               	movwf	?___wmul
 27519  140B  0008               	return
 27520  140C                     __end_of___wmul:	
 27521  140C                     __ptext162:	
 27522 ;; *************** function _crc_sum *****************
 27523 ;; Defined at:
 27524 ;;		line 62 in file "src/protocol/crc16_sf.c"
 27525 ;; Parameters:    Size  Location     Type
 27526 ;;  puchMsg         2    3[COMMON] PTR unsigned char 
 27527 ;;		 -> cardDecBuf(18), cardIncBuf(18), bkupSystemData(72), comBuffer(128), 
 27528 ;;		 -> Main_flowCalibrationTable(124), mainSystemData(72), uart1Buffer(80), 
 27529 ;;  usDataLen       2    5[COMMON] unsigned int 
 27530 ;; Auto vars:     Size  Location     Type
 27531 ;;  uIndex          2    7[BANK0 ] unsigned int 
 27532 ;;  len             2    5[BANK0 ] unsigned int 
 27533 ;;  uchCRCLo        1   10[BANK0 ] unsigned char 
 27534 ;;  uchCRCHi        1    9[BANK0 ] unsigned char 
 27535 ;; Return value:  Size  Location     Type
 27536 ;;                  2    3[COMMON] unsigned int 
 27537 ;; Registers used:
 27538 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 27539 ;; Tracked objects:
 27540 ;;		On entry : 0/0
 27541 ;;		On exit  : 0/0
 27542 ;;		Unchanged: 0/0
 27543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27544 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27545 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 27546 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 27547 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0
 27548 ;;Total ram usage:       15 bytes
 27549 ;; Hardware stack levels used:    1
 27550 ;; Hardware stack levels required when called:    2
 27551 ;; This function calls:
 27552 ;;		Nothing
 27553 ;; This function is called by:
 27554 ;;		_crc_verify
 27555 ;;		_crc_append
 27556 ;; This function uses a non-reentrant model
 27557 ;;
 27558                           
 27559                           
 27560                           ;psect for function _crc_sum
 27561  140C                     _crc_sum:	
 27562                           
 27563                           ;crc16_sf.c: 64: uint16_t len;
 27564                           ;crc16_sf.c: 65: len=usDataLen;
 27565                           
 27566                           ;incstack = 0
 27567                           ; Regs used in _crc_sum: [wreg-fsr0h+status,2+status,0+pclath]
 27568  140C  0876               	movf	crc_sum@usDataLen+1,w
 27569  140D  0020               	movlb	0	; select bank0
 27570  140E  00A6               	movwf	crc_sum@len+1
 27571  140F  0875               	movf	crc_sum@usDataLen,w
 27572  1410  00A5               	movwf	crc_sum@len
 27573                           
 27574                           ;crc16_sf.c: 66: uint8_t uchCRCHi = 0xFF ;
 27575  1411  30FF               	movlw	255
 27576  1412  00A0               	movwf	??_crc_sum
 27577  1413  00A9               	movwf	crc_sum@uchCRCHi
 27578                           
 27579                           ;crc16_sf.c: 67: uint8_t uchCRCLo = 0xFF ;
 27580  1414  00A0               	movwf	??_crc_sum
 27581  1415  00AA               	movwf	crc_sum@uchCRCLo
 27582  1416                     l12659:	
 27583                           ;crc16_sf.c: 68: uint16_t uIndex ;
 27584                           ;crc16_sf.c: 69: while (len--)
 27585                           
 27586  1416  3001               	movlw	1
 27587  1417  02A5               	subwf	crc_sum@len,f
 27588  1418  3000               	movlw	0
 27589  1419  3BA6               	subwfb	crc_sum@len+1,f
 27590  141A  0F25               	incfsz	crc_sum@len,w
 27591  141B  2C1F               	goto	l12651
 27592  141C  0A26               	incf	crc_sum@len+1,w
 27593  141D  1903               	btfsc	3,2
 27594  141E  2C46               	goto	l12661
 27595  141F                     l12651:	
 27596                           
 27597                           ;crc16_sf.c: 70: {
 27598                           ;crc16_sf.c: 71: uIndex = (uchCRCLo ^ *puchMsg++) ;
 27599  141F  0873               	movf	crc_sum@puchMsg,w
 27600  1420  0084               	movwf	4
 27601  1421  0874               	movf	crc_sum@puchMsg+1,w
 27602  1422  0085               	movwf	5
 27603  1423  0800               	movf	0,w	;code access
 27604  1424  062A               	xorwf	crc_sum@uchCRCLo,w
 27605  1425  00A0               	movwf	??_crc_sum
 27606  1426  01A1               	clrf	??_crc_sum+1
 27607  1427  00A7               	movwf	crc_sum@uIndex
 27608  1428  0821               	movf	??_crc_sum+1,w
 27609  1429  00A8               	movwf	crc_sum@uIndex+1
 27610  142A  3001               	movlw	1
 27611  142B  07F3               	addwf	crc_sum@puchMsg,f
 27612  142C  3000               	movlw	0
 27613  142D  3DF4               	addwfc	crc_sum@puchMsg+1,f
 27614                           
 27615                           ;crc16_sf.c: 72: uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 27616  142E  0828               	movf	crc_sum@uIndex+1,w
 27617  142F  0085               	movwf	5
 27618  1430  0827               	movf	crc_sum@uIndex,w
 27619  1431  0084               	movwf	4
 27620  1432  3000               	movlw	low (_auchCRCHi| (0+32768))
 27621  1433  0784               	addwf	4,f
 27622  1434  30A8               	movlw	high (_auchCRCHi| (0+32768))
 27623  1435  3D85               	addwfc	5,f
 27624  1436  0800               	movf	0,w	;code access
 27625  1437  0629               	xorwf	crc_sum@uchCRCHi,w
 27626  1438  00A0               	movwf	??_crc_sum
 27627  1439  00AA               	movwf	crc_sum@uchCRCLo
 27628                           
 27629                           ;crc16_sf.c: 73: uchCRCHi = auchCRCLo[uIndex] ;
 27630  143A  0828               	movf	crc_sum@uIndex+1,w
 27631  143B  0085               	movwf	5
 27632  143C  0827               	movf	crc_sum@uIndex,w
 27633  143D  0084               	movwf	4
 27634  143E  3000               	movlw	low (_auchCRCLo| (0+32768))
 27635  143F  0784               	addwf	4,f
 27636  1440  30A9               	movlw	high (_auchCRCLo| (0+32768))
 27637  1441  3D85               	addwfc	5,f
 27638  1442  0800               	movf	0,w	;code access
 27639  1443  00A0               	movwf	??_crc_sum
 27640  1444  00A9               	movwf	crc_sum@uchCRCHi
 27641  1445  2C16               	goto	l12659
 27642  1446                     l12661:	
 27643                           
 27644                           ;crc16_sf.c: 74: }
 27645                           ;crc16_sf.c: 75: return (uchCRCHi << 8 | uchCRCLo) ;
 27646  1446  082A               	movf	crc_sum@uchCRCLo,w
 27647  1447  00A0               	movwf	??_crc_sum
 27648  1448  01A1               	clrf	??_crc_sum+1
 27649  1449  0829               	movf	crc_sum@uchCRCHi,w
 27650  144A  00A2               	movwf	??_crc_sum+2
 27651  144B  01A3               	clrf	??_crc_sum+3
 27652  144C  00A3               	movwf	??_crc_sum+3
 27653  144D  01A2               	clrf	??_crc_sum+2
 27654  144E  0820               	movf	??_crc_sum,w
 27655  144F  0422               	iorwf	??_crc_sum+2,w
 27656  1450  00F3               	movwf	?_crc_sum
 27657  1451  0821               	movf	??_crc_sum+1,w
 27658  1452  0423               	iorwf	??_crc_sum+3,w
 27659  1453  00F4               	movwf	?_crc_sum+1
 27660  1454  0008               	return
 27661  1455                     __end_of_crc_sum:	
 27662  1455                     __ptext161:	
 27663 ;; *************** function _crc_append *****************
 27664 ;; Defined at:
 27665 ;;		line 87 in file "src/protocol/crc16_sf.c"
 27666 ;; Parameters:    Size  Location     Type
 27667 ;;  message         2   11[BANK0 ] PTR unsigned char 
 27668 ;;		 -> cardDecBuf(18), comBuffer(128), uart1Buffer(80), 
 27669 ;;  n               2   13[BANK0 ] unsigned int 
 27670 ;; Auto vars:     Size  Location     Type
 27671 ;;  crc             2   20[BANK0 ] unsigned int 
 27672 ;; Return value:  Size  Location     Type
 27673 ;;                  1    wreg      void 
 27674 ;; Registers used:
 27675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27676 ;; Tracked objects:
 27677 ;;		On entry : 0/0
 27678 ;;		On exit  : 0/0
 27679 ;;		Unchanged: 0/0
 27680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27681 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27682 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27683 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 27684 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0
 27685 ;;Total ram usage:       11 bytes
 27686 ;; Hardware stack levels used:    1
 27687 ;; Hardware stack levels required when called:    3
 27688 ;; This function calls:
 27689 ;;		_crc_sum
 27690 ;; This function is called by:
 27691 ;;		_modbus_response_illgeal_function
 27692 ;;		_modbus_response_read_flash_data
 27693 ;;		_modbus_response_read_status_register
 27694 ;;		_data_api_calibration_table_data_init
 27695 ;;		_data_api_system_data_init
 27696 ;;		_data_api_rt_data_save
 27697 ;;		_data_api_calibration_table_data_save
 27698 ;;		_rfid_comm_process_read_header
 27699 ;;		_rfid_comm_process_recharge
 27700 ;; This function uses a non-reentrant model
 27701 ;;
 27702                           
 27703                           
 27704                           ;psect for function _crc_append
 27705  1455                     _crc_append:	
 27706                           
 27707                           ;crc16_sf.c: 89: uint16_t crc;
 27708                           ;crc16_sf.c: 90: crc = crc_sum(message, n);
 27709                           
 27710                           ;incstack = 0
 27711                           ; Regs used in _crc_append: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 27712  1455  0020               	movlb	0	; select bank0
 27713  1456  082C               	movf	crc_append@message+1,w
 27714  1457  00F4               	movwf	crc_sum@puchMsg+1
 27715  1458  082B               	movf	crc_append@message,w
 27716  1459  00F3               	movwf	crc_sum@puchMsg
 27717  145A  082E               	movf	crc_append@n+1,w
 27718  145B  00F6               	movwf	crc_sum@usDataLen+1
 27719  145C  082D               	movf	crc_append@n,w
 27720  145D  00F5               	movwf	crc_sum@usDataLen
 27721  145E  240C               	fcall	_crc_sum
 27722  145F  0874               	movf	?_crc_sum+1,w
 27723  1460  0020               	movlb	0	; select bank0
 27724  1461  00B5               	movwf	crc_append@crc+1
 27725  1462  0873               	movf	?_crc_sum,w
 27726  1463  00B4               	movwf	crc_append@crc
 27727                           
 27728                           ;crc16_sf.c: 91: message[n] = (uint8_t)(crc & 0xff);
 27729  1464  082D               	movf	crc_append@n,w
 27730  1465  072B               	addwf	crc_append@message,w
 27731  1466  00AF               	movwf	??_crc_append
 27732  1467  082E               	movf	crc_append@n+1,w
 27733  1468  3D2C               	addwfc	crc_append@message+1,w
 27734  1469  00B0               	movwf	??_crc_append+1
 27735  146A  082F               	movf	??_crc_append,w
 27736  146B  0086               	movwf	6
 27737  146C  0830               	movf	??_crc_append+1,w
 27738  146D  0087               	movwf	7
 27739  146E  0834               	movf	crc_append@crc,w
 27740  146F  0081               	movwf	1
 27741                           
 27742                           ;crc16_sf.c: 92: message[n+1] = (uint8_t)((crc >> 8) & 0xff);
 27743  1470  0835               	movf	crc_append@crc+1,w
 27744  1471  00AF               	movwf	??_crc_append
 27745  1472  082D               	movf	crc_append@n,w
 27746  1473  3E01               	addlw	1
 27747  1474  00B0               	movwf	??_crc_append+1
 27748  1475  3000               	movlw	0
 27749  1476  3D2E               	addwfc	crc_append@n+1,w
 27750  1477  00B1               	movwf	??_crc_append+2
 27751  1478  0830               	movf	??_crc_append+1,w
 27752  1479  072B               	addwf	crc_append@message,w
 27753  147A  00B2               	movwf	??_crc_append+3
 27754  147B  0831               	movf	??_crc_append+2,w
 27755  147C  3D2C               	addwfc	crc_append@message+1,w
 27756  147D  00B3               	movwf	??_crc_append+4
 27757  147E  0832               	movf	??_crc_append+3,w
 27758  147F  0086               	movwf	6
 27759  1480  0833               	movf	??_crc_append+4,w
 27760  1481  0087               	movwf	7
 27761  1482  082F               	movf	??_crc_append,w
 27762  1483  0081               	movwf	1
 27763  1484  0008               	return
 27764  1485                     __end_of_crc_append:	
 27765  1485                     __ptext157:	
 27766 ;; *************** function _data_api_read_eeprom *****************
 27767 ;; Defined at:
 27768 ;;		line 132 in file "src/app/appdata.c"
 27769 ;; Parameters:    Size  Location     Type
 27770 ;;  buf             2    4[COMMON] PTR unsigned char 
 27771 ;;		 -> comBuffer(128), 
 27772 ;;  addr            1    6[COMMON] unsigned char 
 27773 ;;  len             1    7[COMMON] unsigned char 
 27774 ;; Auto vars:     Size  Location     Type
 27775 ;;  i               1    1[BANK0 ] unsigned char 
 27776 ;; Return value:  Size  Location     Type
 27777 ;;                  1    wreg      void 
 27778 ;; Registers used:
 27779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27780 ;; Tracked objects:
 27781 ;;		On entry : 0/0
 27782 ;;		On exit  : 0/0
 27783 ;;		Unchanged: 0/0
 27784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27785 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27786 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 27787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 27788 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0
 27789 ;;Total ram usage:        6 bytes
 27790 ;; Hardware stack levels used:    1
 27791 ;; Hardware stack levels required when called:    3
 27792 ;; This function calls:
 27793 ;;		_DATAEE_ReadByte
 27794 ;; This function is called by:
 27795 ;;		_data_api_calibration_table_data_init
 27796 ;;		_data_api_system_data_init
 27797 ;; This function uses a non-reentrant model
 27798 ;;
 27799                           
 27800                           
 27801                           ;psect for function _data_api_read_eeprom
 27802  1485                     _data_api_read_eeprom:	
 27803                           
 27804                           ;appdata.c: 133: uint8_t i;
 27805                           ;appdata.c: 134: for(i=0;i<len;i++){
 27806                           
 27807                           ;incstack = 0
 27808                           ; Regs used in _data_api_read_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 27809  1485  0020               	movlb	0	; select bank0
 27810  1486  01A1               	clrf	data_api_read_eeprom@i
 27811  1487                     l14343:	
 27812  1487  0877               	movf	data_api_read_eeprom@len,w
 27813  1488  0221               	subwf	data_api_read_eeprom@i,w
 27814  1489  1803               	btfsc	3,0
 27815  148A  0008               	return
 27816                           
 27817                           ;appdata.c: 135: *buf=DATAEE_ReadByte(addr);
 27818  148B  0876               	movf	data_api_read_eeprom@addr,w
 27819  148C  249F  3190         	fcall	_DATAEE_ReadByte
 27820  148E  0020               	movlb	0	; select bank0
 27821  148F  00A0               	movwf	??_data_api_read_eeprom
 27822  1490  0874               	movf	data_api_read_eeprom@buf,w
 27823  1491  0086               	movwf	6
 27824  1492  0875               	movf	data_api_read_eeprom@buf+1,w
 27825  1493  0087               	movwf	7
 27826  1494  0820               	movf	??_data_api_read_eeprom,w
 27827  1495  0081               	movwf	1
 27828                           
 27829                           ;appdata.c: 136: buf++;
 27830  1496  3001               	movlw	1
 27831  1497  07F4               	addwf	data_api_read_eeprom@buf,f
 27832  1498  3000               	movlw	0
 27833  1499  3DF5               	addwfc	data_api_read_eeprom@buf+1,f
 27834                           
 27835                           ;appdata.c: 137: addr++;
 27836  149A  3001               	movlw	1
 27837  149B  00A0               	movwf	??_data_api_read_eeprom
 27838  149C  07F6               	addwf	data_api_read_eeprom@addr,f
 27839  149D  07A1               	addwf	data_api_read_eeprom@i,f
 27840  149E  2C87               	goto	l14343
 27841  149F                     __end_of_data_api_read_eeprom:	
 27842  149F                     __ptext158:	
 27843 ;; *************** function _DATAEE_ReadByte *****************
 27844 ;; Defined at:
 27845 ;;		line 204 in file "mcc_generated_files/memory.c"
 27846 ;; Parameters:    Size  Location     Type
 27847 ;;  bAdd            1    wreg     unsigned char 
 27848 ;; Auto vars:     Size  Location     Type
 27849 ;;  bAdd            1    3[COMMON] unsigned char 
 27850 ;; Return value:  Size  Location     Type
 27851 ;;                  1    wreg      unsigned char 
 27852 ;; Registers used:
 27853 ;;		wreg
 27854 ;; Tracked objects:
 27855 ;;		On entry : 0/0
 27856 ;;		On exit  : 0/0
 27857 ;;		Unchanged: 0/0
 27858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27860 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27862 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27863 ;;Total ram usage:        1 bytes
 27864 ;; Hardware stack levels used:    1
 27865 ;; Hardware stack levels required when called:    2
 27866 ;; This function calls:
 27867 ;;		Nothing
 27868 ;; This function is called by:
 27869 ;;		_data_api_read_eeprom
 27870 ;; This function uses a non-reentrant model
 27871 ;;
 27872                           
 27873                           
 27874                           ;psect for function _DATAEE_ReadByte
 27875  149F                     _DATAEE_ReadByte:	
 27876                           
 27877                           ;incstack = 0
 27878                           ; Regs used in _DATAEE_ReadByte: [wreg]
 27879                           ;DATAEE_ReadByte@bAdd stored from wreg
 27880  149F  00F3               	movwf	DATAEE_ReadByte@bAdd
 27881                           
 27882                           ;memory.c: 206: EEADRL = (bAdd & 0x0ff);
 27883  14A0  0023               	movlb	3	; select bank3
 27884  14A1  0091               	movwf	17	;volatile
 27885                           
 27886                           ;memory.c: 207: EECON1bits.CFGS = 0;
 27887  14A2  1315               	bcf	21,6	;volsfr
 27888                           
 27889                           ;memory.c: 208: EECON1bits.EEPGD = 0;
 27890  14A3  1395               	bcf	21,7	;volsfr
 27891                           
 27892                           ;memory.c: 209: EECON1bits.RD = 1;
 27893  14A4  1415               	bsf	21,0	;volsfr
 27894                           
 27895                           ;memory.c: 210: __nop();
 27896  14A5  0000               	nop
 27897                           
 27898                           ;memory.c: 211: __nop();
 27899  14A6  0000               	nop
 27900                           
 27901                           ;memory.c: 213: return (EEDATL);
 27902  14A7  0023               	movlb	3	; select bank3
 27903  14A8  0813               	movf	19,w	;volatile
 27904  14A9  0008               	return
 27905  14AA                     __end_of_DATAEE_ReadByte:	
 27906  14AA                     __ptext155:	
 27907 ;; *************** function _data_api_write_eeprom *****************
 27908 ;; Defined at:
 27909 ;;		line 116 in file "src/app/appdata.c"
 27910 ;; Parameters:    Size  Location     Type
 27911 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 27912 ;;		 -> comBuffer(128), 
 27913 ;;  addr            1    2[BANK0 ] unsigned char 
 27914 ;;  len             1    3[BANK0 ] unsigned char 
 27915 ;; Auto vars:     Size  Location     Type
 27916 ;;  i               1    7[COMMON] unsigned char 
 27917 ;; Return value:  Size  Location     Type
 27918 ;;                  1    wreg      void 
 27919 ;; Registers used:
 27920 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 27921 ;; Tracked objects:
 27922 ;;		On entry : 0/0
 27923 ;;		On exit  : 0/0
 27924 ;;		Unchanged: 0/0
 27925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 27926 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27928 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 27929 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0
 27930 ;;Total ram usage:        6 bytes
 27931 ;; Hardware stack levels used:    1
 27932 ;; Hardware stack levels required when called:    3
 27933 ;; This function calls:
 27934 ;;		_DATAEE_WriteByte
 27935 ;; This function is called by:
 27936 ;;		_data_api_calibration_table_data_init
 27937 ;;		_data_api_system_data_init
 27938 ;;		_data_api_rt_data_save
 27939 ;;		_data_api_calibration_table_data_save
 27940 ;; This function uses a non-reentrant model
 27941 ;;
 27942                           
 27943                           
 27944                           ;psect for function _data_api_write_eeprom
 27945  14AA                     _data_api_write_eeprom:	
 27946                           
 27947                           ;appdata.c: 117: uint8_t i;
 27948                           ;appdata.c: 118: for(i=0;i<len;i++){
 27949                           
 27950                           ;incstack = 0
 27951                           ; Regs used in _data_api_write_eeprom: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 27952  14AA  01F7               	clrf	data_api_write_eeprom@i
 27953  14AB                     l12943:	
 27954  14AB  0020               	movlb	0	; select bank0
 27955  14AC  0823               	movf	data_api_write_eeprom@len,w
 27956  14AD  0277               	subwf	data_api_write_eeprom@i,w
 27957  14AE  1803               	btfsc	3,0
 27958  14AF  0008               	return
 27959                           
 27960                           ;appdata.c: 119: DATAEE_WriteByte(addr,*buf);
 27961  14B0  0020               	movlb	0	; select bank0
 27962  14B1  0820               	movf	data_api_write_eeprom@buf,w
 27963  14B2  0086               	movwf	6
 27964  14B3  0821               	movf	data_api_write_eeprom@buf+1,w
 27965  14B4  0087               	movwf	7
 27966  14B5  0801               	movf	1,w
 27967  14B6  00F6               	movwf	??_data_api_write_eeprom
 27968  14B7  00F3               	movwf	DATAEE_WriteByte@bData
 27969  14B8  0822               	movf	data_api_write_eeprom@addr,w
 27970  14B9  31B5  25F9  3190   	fcall	_DATAEE_WriteByte
 27971                           
 27972                           ;appdata.c: 120: buf++;
 27973  14BC  3001               	movlw	1
 27974  14BD  0020               	movlb	0	; select bank0
 27975  14BE  07A0               	addwf	data_api_write_eeprom@buf,f
 27976  14BF  3000               	movlw	0
 27977  14C0  3DA1               	addwfc	data_api_write_eeprom@buf+1,f
 27978                           
 27979                           ;appdata.c: 121: addr++;
 27980  14C1  3001               	movlw	1
 27981  14C2  00F6               	movwf	??_data_api_write_eeprom
 27982  14C3  07A2               	addwf	data_api_write_eeprom@addr,f
 27983  14C4  07F7               	addwf	data_api_write_eeprom@i,f
 27984  14C5  2CAB               	goto	l12943
 27985  14C6                     __end_of_data_api_write_eeprom:	
 27986  14C6                     __ptext151:	
 27987 ;; *************** function _m_flash_copy *****************
 27988 ;; Defined at:
 27989 ;;		line 84 in file "src/app/appdata.c"
 27990 ;; Parameters:    Size  Location     Type
 27991 ;;  addr            2   10[BANK0 ] unsigned int 
 27992 ;;  buf             2   12[BANK0 ] PTR const unsigned char 
 27993 ;;		 -> comBuffer(128), 
 27994 ;;  len             1   14[BANK0 ] unsigned char 
 27995 ;; Auto vars:     Size  Location     Type
 27996 ;;  startAddr       2   17[BANK0 ] unsigned int 
 27997 ;;  i               1   19[BANK0 ] unsigned char 
 27998 ;;  wlen            1   16[BANK0 ] unsigned char 
 27999 ;;  offset          1   15[BANK0 ] unsigned char 
 28000 ;; Return value:  Size  Location     Type
 28001 ;;                  1    wreg      unsigned char 
 28002 ;; Registers used:
 28003 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28004 ;; Tracked objects:
 28005 ;;		On entry : 0/0
 28006 ;;		On exit  : 0/0
 28007 ;;		Unchanged: 0/0
 28008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28009 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 28010 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0
 28011 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28012 ;;      Totals:         2      10       0       0       0       0       0       0       0       0       0       0       
      +0
 28013 ;;Total ram usage:       12 bytes
 28014 ;; Hardware stack levels used:    1
 28015 ;; Hardware stack levels required when called:    4
 28016 ;; This function calls:
 28017 ;;		_FLASH_ReadWord
 28018 ;;		_FLASH_WriteBlock
 28019 ;; This function is called by:
 28020 ;;		_data_api_calibration_table_data_init
 28021 ;;		_data_api_system_data_init
 28022 ;;		_data_api_rt_data_save
 28023 ;;		_data_api_calibration_table_data_save
 28024 ;; This function uses a non-reentrant model
 28025 ;;
 28026                           
 28027                           
 28028                           ;psect for function _m_flash_copy
 28029  14C6                     _m_flash_copy:	
 28030                           
 28031                           ;appdata.c: 85: uint8_t i;
 28032                           ;appdata.c: 86: uint16_t startAddr;
 28033                           ;appdata.c: 87: uint8_t offset;
 28034                           ;appdata.c: 88: uint8_t wlen;
 28035                           ;appdata.c: 89: startAddr = addr;
 28036                           
 28037                           ;incstack = 0
 28038                           ; Regs used in _m_flash_copy: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 28039  14C6  0020               	movlb	0	; select bank0
 28040  14C7  082B               	movf	m_flash_copy@addr+1,w
 28041  14C8  00B2               	movwf	m_flash_copy@startAddr+1
 28042  14C9  082A               	movf	m_flash_copy@addr,w
 28043  14CA  00B1               	movwf	m_flash_copy@startAddr
 28044  14CB                     l12929:	
 28045                           ;appdata.c: 90: while (len) {
 28046                           
 28047  14CB  082E               	movf	m_flash_copy@len,w
 28048  14CC  1903               	btfsc	3,2
 28049  14CD  0008               	return
 28050                           
 28051                           ;appdata.c: 91: offset = (uint8_t) (startAddr & (32 - 1));
 28052  14CE  0831               	movf	m_flash_copy@startAddr,w
 28053  14CF  391F               	andlw	31
 28054  14D0  00F6               	movwf	??_m_flash_copy
 28055  14D1  00AF               	movwf	m_flash_copy@offset
 28056                           
 28057                           ;appdata.c: 92: startAddr = startAddr & ~(32 - 1);
 28058  14D2  30E0               	movlw	224
 28059  14D3  0531               	andwf	m_flash_copy@startAddr,w
 28060  14D4  00B1               	movwf	m_flash_copy@startAddr
 28061  14D5  3020               	movlw	32
 28062                           
 28063                           ;appdata.c: 93: for (i = 0; i < 32; i++) {
 28064  14D6  01B3               	clrf	m_flash_copy@i
 28065  14D7  0233               	subwf	m_flash_copy@i,w
 28066  14D8  1803               	btfsc	3,0
 28067  14D9  2CF5               	goto	l12901
 28068  14DA                     l12895:	
 28069                           
 28070                           ;appdata.c: 95: flashBuffer[i] = FLASH_ReadWord((startAddr + i));
 28071  14DA  0833               	movf	m_flash_copy@i,w
 28072  14DB  0731               	addwf	m_flash_copy@startAddr,w
 28073  14DC  00F3               	movwf	FLASH_ReadWord@flashAddr
 28074  14DD  0832               	movf	m_flash_copy@startAddr+1,w
 28075  14DE  1803               	skipnc
 28076  14DF  0A32               	incf	m_flash_copy@startAddr+1,w
 28077  14E0  00F4               	movwf	FLASH_ReadWord@flashAddr+1
 28078  14E1  31AA  22DA  3190   	fcall	_FLASH_ReadWord
 28079  14E4  0020               	movlb	0	; select bank0
 28080  14E5  3533               	lslf	m_flash_copy@i,w
 28081  14E6  3E20               	addlw	(low (_flashBuffer| (0+512)))& (0+255)
 28082  14E7  0086               	movwf	6
 28083  14E8  3002               	movlw	2	; select bank4/5
 28084  14E9  0087               	movwf	7
 28085  14EA  0873               	movf	?_FLASH_ReadWord,w
 28086  14EB  3FC0               	movwi [0]fsr1
 28087  14EC  0874               	movf	?_FLASH_ReadWord+1,w
 28088  14ED  3FC1               	movwi [1]fsr1
 28089  14EE  3001               	movlw	1
 28090  14EF  00F6               	movwf	??_m_flash_copy
 28091  14F0  07B3               	addwf	m_flash_copy@i,f
 28092  14F1  3020               	movlw	32
 28093  14F2  0233               	subwf	m_flash_copy@i,w
 28094  14F3  1C03               	skipc
 28095  14F4  2CDA               	goto	l12895
 28096  14F5                     l12901:	
 28097                           
 28098                           ;appdata.c: 96: }
 28099                           ;appdata.c: 97: wlen = 0;
 28100  14F5  01B0               	clrf	m_flash_copy@wlen
 28101                           
 28102                           ;appdata.c: 98: for (i = offset; i < 32; i++) {
 28103  14F6  082F               	movf	m_flash_copy@offset,w
 28104  14F7  00F6               	movwf	??_m_flash_copy
 28105  14F8  00B3               	movwf	m_flash_copy@i
 28106  14F9  3020               	movlw	32
 28107  14FA  0233               	subwf	m_flash_copy@i,w
 28108  14FB  1803               	btfsc	3,0
 28109  14FC  2D1F               	goto	l12923
 28110  14FD                     l12909:	
 28111                           
 28112                           ;appdata.c: 99: flashBuffer[i] = (uint16_t) (*buf);
 28113  14FD  082C               	movf	m_flash_copy@buf,w
 28114  14FE  0086               	movwf	6
 28115  14FF  082D               	movf	m_flash_copy@buf+1,w
 28116  1500  0087               	movwf	7
 28117  1501  0801               	movf	1,w
 28118  1502  00F6               	movwf	??_m_flash_copy
 28119  1503  01F7               	clrf	??_m_flash_copy+1
 28120  1504  3533               	lslf	m_flash_copy@i,w
 28121  1505  3E20               	addlw	(low (_flashBuffer| (0+512)))& (0+255)
 28122  1506  0086               	movwf	6
 28123  1507  3002               	movlw	2	; select bank4/5
 28124  1508  0087               	movwf	7
 28125  1509  0876               	movf	??_m_flash_copy,w
 28126  150A  3FC0               	movwi [0]fsr1
 28127  150B  0877               	movf	??_m_flash_copy+1,w
 28128  150C  3FC1               	movwi [1]fsr1
 28129                           
 28130                           ;appdata.c: 100: buf++;
 28131  150D  3001               	movlw	1
 28132  150E  07AC               	addwf	m_flash_copy@buf,f
 28133  150F  3000               	movlw	0
 28134  1510  3DAD               	addwfc	m_flash_copy@buf+1,f
 28135                           
 28136                           ;appdata.c: 101: wlen++;
 28137  1511  3001               	movlw	1
 28138  1512  00F6               	movwf	??_m_flash_copy
 28139  1513  07B0               	addwf	m_flash_copy@wlen,f
 28140                           
 28141                           ;appdata.c: 102: if (wlen >= len)break;
 28142  1514  082E               	movf	m_flash_copy@len,w
 28143  1515  0230               	subwf	m_flash_copy@wlen,w
 28144  1516  1803               	btfsc	3,0
 28145  1517  2D1F               	goto	l12923
 28146  1518  3001               	movlw	1
 28147  1519  00F6               	movwf	??_m_flash_copy
 28148  151A  07B3               	addwf	m_flash_copy@i,f
 28149  151B  3020               	movlw	32
 28150  151C  0233               	subwf	m_flash_copy@i,w
 28151  151D  1C03               	skipc
 28152  151E  2CFD               	goto	l12909
 28153  151F                     l12923:	
 28154                           
 28155                           ;appdata.c: 103: }
 28156                           ;appdata.c: 104: FLASH_WriteBlock(startAddr, flashBuffer);
 28157  151F  0832               	movf	m_flash_copy@startAddr+1,w
 28158  1520  00A1               	movwf	FLASH_WriteBlock@writeAddr+1
 28159  1521  0831               	movf	m_flash_copy@startAddr,w
 28160  1522  00A0               	movwf	FLASH_WriteBlock@writeAddr
 28161  1523  3020               	movlw	(low (_flashBuffer| (0+512)))& (0+255)
 28162  1524  00F6               	movwf	??_m_flash_copy
 28163  1525  00A2               	movwf	FLASH_WriteBlock@flashWordArray
 28164  1526  31B7  277E  3190   	fcall	_FLASH_WriteBlock
 28165                           
 28166                           ;appdata.c: 105: len -= wlen;
 28167  1529  0020               	movlb	0	; select bank0
 28168  152A  0830               	movf	m_flash_copy@wlen,w
 28169  152B  02AE               	subwf	m_flash_copy@len,f
 28170                           
 28171                           ;appdata.c: 106: startAddr += wlen;
 28172  152C  00F6               	movwf	??_m_flash_copy
 28173  152D  01F7               	clrf	??_m_flash_copy+1
 28174  152E  07B1               	addwf	m_flash_copy@startAddr,f
 28175  152F  0877               	movf	??_m_flash_copy+1,w
 28176  1530  3DB2               	addwfc	m_flash_copy@startAddr+1,f
 28177  1531  2CCB               	goto	l12929
 28178  1532                     __end_of_m_flash_copy:	
 28179                           ;appdata.c: 107: }
 28180                           ;appdata.c: 108: return 1;
 28181                           ;	Return value of _m_flash_copy is never used
 28182                           
 28183  1532                     __ptext150:	
 28184 ;; *************** function _m_flash_erase *****************
 28185 ;; Defined at:
 28186 ;;		line 73 in file "src/app/appdata.c"
 28187 ;; Parameters:    Size  Location     Type
 28188 ;;  addr            2    0[BANK0 ] unsigned int 
 28189 ;;  len             1    2[BANK0 ] unsigned char 
 28190 ;; Auto vars:     Size  Location     Type
 28191 ;;		None
 28192 ;; Return value:  Size  Location     Type
 28193 ;;                  1    wreg      unsigned char 
 28194 ;; Registers used:
 28195 ;;		wreg, status,2, status,0, pclath, cstack
 28196 ;; Tracked objects:
 28197 ;;		On entry : 0/0
 28198 ;;		On exit  : 0/0
 28199 ;;		Unchanged: 0/0
 28200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28201 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28204 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28205 ;;Total ram usage:        3 bytes
 28206 ;; Hardware stack levels used:    1
 28207 ;; Hardware stack levels required when called:    3
 28208 ;; This function calls:
 28209 ;;		_FLASH_EraseBlock
 28210 ;; This function is called by:
 28211 ;;		_data_api_calibration_table_data_init
 28212 ;;		_data_api_system_data_init
 28213 ;; This function uses a non-reentrant model
 28214 ;;
 28215                           
 28216                           
 28217                           ;psect for function _m_flash_erase
 28218  1532                     _m_flash_erase:	
 28219  1532                     l14331:	
 28220                           ;appdata.c: 74: while (len) {
 28221                           
 28222                           ;incstack = 0
 28223                           ; Regs used in _m_flash_erase: [wreg+status,2+status,0+pclath+cstack]
 28224                           
 28225  1532  0020               	movlb	0	; select bank0
 28226  1533  0822               	movf	m_flash_erase@len,w
 28227  1534  1903               	btfsc	3,2
 28228  1535  0008               	return
 28229                           
 28230                           ;appdata.c: 75: FLASH_EraseBlock(addr);
 28231  1536  0020               	movlb	0	; select bank0
 28232  1537  0821               	movf	m_flash_erase@addr+1,w
 28233  1538  00F4               	movwf	FLASH_EraseBlock@startAddr+1
 28234  1539  0820               	movf	m_flash_erase@addr,w
 28235  153A  00F3               	movwf	FLASH_EraseBlock@startAddr
 28236  153B  31B7  27E3  3190   	fcall	_FLASH_EraseBlock
 28237                           
 28238                           ;appdata.c: 76: addr += 32;
 28239  153E  3020               	movlw	32
 28240  153F  0020               	movlb	0	; select bank0
 28241  1540  07A0               	addwf	m_flash_erase@addr,f
 28242  1541  3000               	movlw	0
 28243  1542  3DA1               	addwfc	m_flash_erase@addr+1,f
 28244                           
 28245                           ;appdata.c: 77: if (len >= 32) {
 28246  1543  3020               	movlw	32
 28247  1544  0222               	subwf	m_flash_erase@len,w
 28248  1545  1C03               	skipc
 28249  1546  2D4A               	goto	l14329
 28250                           
 28251                           ;appdata.c: 78: len -= 32;
 28252  1547  3020               	movlw	32
 28253  1548  02A2               	subwf	m_flash_erase@len,f
 28254                           
 28255                           ;appdata.c: 79: } else
 28256  1549  2D32               	goto	l14331
 28257  154A                     l14329:	
 28258                           
 28259                           ;appdata.c: 80: len = 0;
 28260  154A  01A2               	clrf	m_flash_erase@len
 28261  154B  2D32               	goto	l14331
 28262  154C                     __end_of_m_flash_erase:	
 28263                           ;appdata.c: 81: }
 28264                           ;appdata.c: 82: return 1;
 28265                           ;	Return value of _m_flash_erase is never used
 28266                           
 28267  154C                     __ptext62:	
 28268 ;; *************** function _rfid_comm_process_read_header *****************
 28269 ;; Defined at:
 28270 ;;		line 41 in file "src/app/rfid_demo.c"
 28271 ;; Parameters:    Size  Location     Type
 28272 ;;		None
 28273 ;; Auto vars:     Size  Location     Type
 28274 ;;  stp             2   78[BANK0 ] PTR struct .
 28275 ;;		 -> comBuffer(128), 
 28276 ;;  ret             1   77[BANK0 ] unsigned char 
 28277 ;; Return value:  Size  Location     Type
 28278 ;;                  1    wreg      unsigned char 
 28279 ;; Registers used:
 28280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 28281 ;; Tracked objects:
 28282 ;;		On entry : 0/0
 28283 ;;		On exit  : 0/0
 28284 ;;		Unchanged: 0/0
 28285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28287 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 28288 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0
 28289 ;;      Totals:         0       3       8       0       0       0       0       0       0       0       0       0       
      +0
 28290 ;;Total ram usage:       11 bytes
 28291 ;; Hardware stack levels used:    1
 28292 ;; Hardware stack levels required when called:    9
 28293 ;; This function calls:
 28294 ;;		_crc_append
 28295 ;;		_crc_verify
 28296 ;;		_create_card_key_b
 28297 ;;		_data_api_flash_process
 28298 ;;		_m_mem_cpy_len
 28299 ;;		_m_mem_set
 28300 ;;		_mifare_read
 28301 ;;		_mifare_write
 28302 ;;		_picc_authenticate
 28303 ;; This function is called by:
 28304 ;;		_rfid_comm_process
 28305 ;; This function uses a non-reentrant model
 28306 ;;
 28307                           
 28308                           
 28309                           ;psect for function _rfid_comm_process_read_header
 28310  154C                     _rfid_comm_process_read_header:	
 28311                           
 28312                           ;rfid_demo.c: 43: uint8_t ret;
 28313                           ;rfid_demo.c: 44: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 3, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 28314                           
 28315                           ;incstack = 0
 28316                           ; Regs used in _rfid_comm_process_read_header: [wreg-fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 28317  154C  3003               	movlw	3
 28318  154D  0021               	movlb	1	; select bank1
 28319  154E  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28320  154F  0020               	movlb	0	; select bank0
 28321  1550  00CA               	movwf	picc_authenticate@blockAddr
 28322  1551  306A               	movlw	low (_defaultKeyA| (0+32768))
 28323  1552  00CB               	movwf	picc_authenticate@key
 28324  1553  30AA               	movlw	high (_defaultKeyA| (0+32768))
 28325  1554  00CC               	movwf	picc_authenticate@key+1
 28326  1555  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 28327  1556  0021               	movlb	1	; select bank1
 28328  1557  00CD               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 28329  1558  0020               	movlb	0	; select bank0
 28330  1559  00CD               	movwf	picc_authenticate@uid
 28331  155A  3060               	movlw	96
 28332  155B  319C  245B  3190   	fcall	_picc_authenticate
 28333  155E  0021               	movlb	1	; select bank1
 28334  155F  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28335  1560  00BB               	movwf	_piccResult^(0+128)
 28336                           
 28337                           ;rfid_demo.c: 45: if (piccResult != STATUS_OK)return 0;
 28338  1561  083B               	movf	_piccResult^(0+128),w
 28339  1562  1D03               	btfss	3,2
 28340  1563  3400               	retlw	0
 28341                           
 28342                           ;rfid_demo.c: 46: rdLen=18;
 28343  1564  3012               	movlw	18
 28344  1565  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28345  1566  00C7               	movwf	_rdLen^(0+128)
 28346                           
 28347                           ;rfid_demo.c: 47: piccResult = mifare_read(0, cardUidBlockBuf, &rdLen);
 28348  1567  3020               	movlw	32
 28349  1568  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28350  1569  0020               	movlb	0	; select bank0
 28351  156A  00CA               	movwf	mifare_read@buffer
 28352  156B  30C7               	movlw	(low (_rdLen| 0))& (0+255)
 28353  156C  0021               	movlb	1	; select bank1
 28354  156D  00CD               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 28355  156E  0020               	movlb	0	; select bank0
 28356  156F  00CB               	movwf	mifare_read@bufferSize
 28357  1570  3000               	movlw	0
 28358  1571  27A9  3190         	fcall	_mifare_read
 28359  1573  0021               	movlb	1	; select bank1
 28360  1574  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28361  1575  00BB               	movwf	_piccResult^(0+128)
 28362                           
 28363                           ;rfid_demo.c: 48: if (piccResult != STATUS_OK) return 0;
 28364  1576  083B               	movf	_piccResult^(0+128),w
 28365  1577  1D03               	btfss	3,2
 28366  1578  3400               	retlw	0
 28367                           
 28368                           ;rfid_demo.c: 50: m_mem_cpy_len(comBuffer,cardUidBlockBuf,18);
 28369  1579  3070               	movlw	112
 28370  157A  00F3               	movwf	m_mem_cpy_len@d
 28371  157B  3023               	movlw	35
 28372  157C  00F4               	movwf	m_mem_cpy_len@d+1
 28373  157D  3020               	movlw	32
 28374  157E  00F5               	movwf	m_mem_cpy_len@s
 28375  157F  3004               	movlw	4
 28376  1580  00F6               	movwf	m_mem_cpy_len@s+1
 28377  1581  3012               	movlw	18
 28378  1582  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28379  1583  00F7               	movwf	m_mem_cpy_len@len
 28380  1584  2778               	fcall	_m_mem_cpy_len
 28381                           
 28382                           ;rfid_demo.c: 52: piccResult = picc_authenticate(PICC_CMD_MF_AUTH_KEY_A, 7, (st_MifareKe
      +                          y*) defaultKeyA, &PiccUid);
 28383  1585  3007               	movlw	7
 28384  1586  0021               	movlb	1	; select bank1
 28385  1587  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28386  1588  0020               	movlb	0	; select bank0
 28387  1589  00CA               	movwf	picc_authenticate@blockAddr
 28388  158A  306A               	movlw	low (_defaultKeyA| (0+32768))
 28389  158B  00CB               	movwf	picc_authenticate@key
 28390  158C  30AA               	movlw	high (_defaultKeyA| (0+32768))
 28391  158D  00CC               	movwf	picc_authenticate@key+1
 28392  158E  30B0               	movlw	(low (_PiccUid| (0+256)))& (0+255)
 28393  158F  0021               	movlb	1	; select bank1
 28394  1590  00CD               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 28395  1591  0020               	movlb	0	; select bank0
 28396  1592  00CD               	movwf	picc_authenticate@uid
 28397  1593  3060               	movlw	96
 28398  1594  319C  245B  3190   	fcall	_picc_authenticate
 28399  1597  0021               	movlb	1	; select bank1
 28400  1598  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28401  1599  00BB               	movwf	_piccResult^(0+128)
 28402                           
 28403                           ;rfid_demo.c: 53: if(piccResult!=STATUS_OK)return 0;
 28404  159A  083B               	movf	_piccResult^(0+128),w
 28405  159B  1D03               	btfss	3,2
 28406  159C  3400               	retlw	0
 28407                           
 28408                           ;rfid_demo.c: 54: for(__t8=4;__t8<7;__t8++){
 28409  159D  3004               	movlw	4
 28410  159E  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28411  159F  00C6               	movwf	___t8^(0+128)
 28412  15A0  3007               	movlw	7
 28413  15A1  0246               	subwf	___t8^(0+128),w
 28414  15A2  1803               	btfsc	3,0
 28415  15A3  2DED               	goto	l14501
 28416  15A4                     l14487:	
 28417                           
 28418                           ;rfid_demo.c: 55: rdLen=18;
 28419  15A4  3012               	movlw	18
 28420  15A5  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28421  15A6  00C7               	movwf	_rdLen^(0+128)
 28422                           
 28423                           ;rfid_demo.c: 56: piccResult = mifare_read(__t8, cardWriteBuf, &rdLen);
 28424  15A7  3032               	movlw	50
 28425  15A8  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28426  15A9  0020               	movlb	0	; select bank0
 28427  15AA  00CA               	movwf	mifare_read@buffer
 28428  15AB  30C7               	movlw	(low (_rdLen| 0))& (0+255)
 28429  15AC  0021               	movlb	1	; select bank1
 28430  15AD  00CD               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 28431  15AE  0020               	movlb	0	; select bank0
 28432  15AF  00CB               	movwf	mifare_read@bufferSize
 28433  15B0  0021               	movlb	1	; select bank1
 28434  15B1  0846               	movf	___t8^(0+128),w
 28435  15B2  27A9  3190         	fcall	_mifare_read
 28436  15B4  0021               	movlb	1	; select bank1
 28437  15B5  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28438  15B6  00BB               	movwf	_piccResult^(0+128)
 28439                           
 28440                           ;rfid_demo.c: 57: m_mem_cpy_len(comBuffer+(__t8-4)*16,cardWriteBuf,16);
 28441  15B7  0846               	movf	___t8^(0+128),w
 28442  15B8  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28443  15B9  30F0               	movlw	240
 28444  15BA  01CD               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 28445  15BB  0ECC               	swapf	??_rfid_comm_process_read_header^(0+128),f
 28446  15BC  0ECD               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28447  15BD  05CD               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28448  15BE  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28449  15BF  390F               	andlw	15
 28450  15C0  04CD               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28451  15C1  30F0               	movlw	240
 28452  15C2  05CC               	andwf	??_rfid_comm_process_read_header^(0+128),f
 28453  15C3  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28454  15C4  3EC0               	addlw	192
 28455  15C5  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28456  15C6  30FF               	movlw	255
 28457  15C7  3D4D               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 28458  15C8  00CF               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 28459  15C9  3070               	movlw	112
 28460  15CA  00D0               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 28461  15CB  3023               	movlw	35
 28462  15CC  00D1               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 28463  15CD  084E               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28464  15CE  0750               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 28465  15CF  00F3               	movwf	m_mem_cpy_len@d
 28466  15D0  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28467  15D1  3D51               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 28468  15D2  00F4               	movwf	m_mem_cpy_len@d+1
 28469  15D3  3032               	movlw	50
 28470  15D4  00F5               	movwf	m_mem_cpy_len@s
 28471  15D5  3004               	movlw	4
 28472  15D6  00F6               	movwf	m_mem_cpy_len@s+1
 28473  15D7  3010               	movlw	16
 28474  15D8  00D2               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 28475  15D9  00F7               	movwf	m_mem_cpy_len@len
 28476  15DA  2778  3190         	fcall	_m_mem_cpy_len
 28477                           
 28478                           ;rfid_demo.c: 58: if(piccResult!=STATUS_OK){ CardError=READ_HEADER_ERROR; break;}
 28479  15DC  0021               	movlb	1	; select bank1
 28480  15DD  083B               	movf	_piccResult^(0+128),w
 28481  15DE  1903               	btfsc	3,2
 28482  15DF  2DE5               	goto	l14497
 28483  15E0  3002               	movlw	2
 28484  15E1  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28485  15E2  0022               	movlb	2	; select bank2
 28486  15E3  00A8               	movwf	_CardError^(0+256)
 28487  15E4  2DED               	goto	l14501
 28488  15E5                     l14497:	
 28489  15E5  3001               	movlw	1
 28490  15E6  0021               	movlb	1	; select bank1
 28491  15E7  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28492  15E8  07C6               	addwf	___t8^(0+128),f
 28493  15E9  3007               	movlw	7
 28494  15EA  0246               	subwf	___t8^(0+128),w
 28495  15EB  1C03               	skipc
 28496  15EC  2DA4               	goto	l14487
 28497  15ED                     l14501:	
 28498                           
 28499                           ;rfid_demo.c: 59: }
 28500                           ;rfid_demo.c: 60: ret=crc_verify(comBuffer,sizeof(st_cardHeaderDef));
 28501  15ED  3070               	movlw	112
 28502  15EE  0020               	movlb	0	; select bank0
 28503  15EF  00AB               	movwf	crc_verify@message
 28504  15F0  3023               	movlw	35
 28505  15F1  00AC               	movwf	crc_verify@message+1
 28506  15F2  3030               	movlw	48
 28507  15F3  00AD               	movwf	crc_verify@n
 28508  15F4  3000               	movlw	0
 28509  15F5  01AE               	clrf	crc_verify@n+1
 28510  15F6  23BD  3190         	fcall	_crc_verify
 28511  15F8  0021               	movlb	1	; select bank1
 28512  15F9  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28513  15FA  0020               	movlb	0	; select bank0
 28514  15FB  00ED               	movwf	rfid_comm_process_read_header@ret
 28515                           
 28516                           ;rfid_demo.c: 61: if(!ret)return 0;
 28517  15FC  086D               	movf	rfid_comm_process_read_header@ret,w
 28518  15FD  1903               	btfsc	3,2
 28519  15FE  3400               	retlw	0
 28520                           
 28521                           ;rfid_demo.c: 63: st_cardHeaderDef* stp=(st_cardHeaderDef*)comBuffer;
 28522  15FF  3070               	movlw	112
 28523  1600  00EE               	movwf	rfid_comm_process_read_header@stp
 28524  1601  3023               	movlw	35
 28525  1602  00EF               	movwf	rfid_comm_process_read_header@stp+1
 28526                           
 28527                           ;rfid_demo.c: 64: if(stp->keyUpdate ==0xff ){
 28528  1603  086E               	movf	rfid_comm_process_read_header@stp,w
 28529  1604  0086               	movwf	6
 28530  1605  086F               	movf	rfid_comm_process_read_header@stp+1,w
 28531  1606  0087               	movwf	7
 28532  1607  314C               	addfsr 1,12
 28533  1608  0F01               	incfsz	1,w
 28534  1609  2EB2               	goto	l14549
 28535                           
 28536                           ;rfid_demo.c: 65: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 28537  160A  3002               	movlw	2
 28538  160B  0021               	movlb	1	; select bank1
 28539  160C  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28540  160D  0022               	movlb	2	; select bank2
 28541  160E  00DB               	movwf	(_flashOpStr^(0+256)+20)
 28542                           
 28543                           ;rfid_demo.c: 66: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardKeyCreate
      +                          Key[0]));
 28544  160F  3040               	movlw	64
 28545  1610  00C7               	movwf	_flashOpStr^(0+256)
 28546  1611  3006               	movlw	6
 28547  1612  01C8               	clrf	(_flashOpStr+1)^(0+256)
 28548                           
 28549                           ;rfid_demo.c: 67: flashOpStr.len=6;
 28550  1613  00C9               	movwf	(_flashOpStr^(0+256)+2)
 28551  1614  304B               	movlw	low (_flashOpStr+4)
 28552  1615  01CA               	clrf	(_flashOpStr^(0+256)+3)
 28553                           
 28554                           ;rfid_demo.c: 68: m_mem_cpy_len(flashOpStr.buf,(uint8_t*)(stp->cardkeyBcreatKey),6);
 28555  1616  00F3               	movwf	m_mem_cpy_len@d
 28556  1617  3001               	movlw	high (_flashOpStr+4)
 28557  1618  00F4               	movwf	m_mem_cpy_len@d+1
 28558  1619  0020               	movlb	0	; select bank0
 28559  161A  086E               	movf	rfid_comm_process_read_header@stp,w
 28560  161B  3E20               	addlw	32
 28561  161C  00F5               	movwf	m_mem_cpy_len@s
 28562  161D  3000               	movlw	0
 28563  161E  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 28564  161F  00F6               	movwf	m_mem_cpy_len@s+1
 28565  1620  3006               	movlw	6
 28566  1621  0021               	movlb	1	; select bank1
 28567  1622  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28568  1623  00F7               	movwf	m_mem_cpy_len@len
 28569  1624  2778  3190         	fcall	_m_mem_cpy_len
 28570                           
 28571                           ;rfid_demo.c: 69: m_mem_cpy_len(comBuffer+80,comBuffer,48);
 28572  1626  30C0               	movlw	192
 28573  1627  00F3               	movwf	m_mem_cpy_len@d
 28574  1628  3023               	movlw	35
 28575  1629  00F4               	movwf	m_mem_cpy_len@d+1
 28576  162A  3070               	movlw	112
 28577  162B  00F5               	movwf	m_mem_cpy_len@s
 28578  162C  3023               	movlw	35
 28579  162D  00F6               	movwf	m_mem_cpy_len@s+1
 28580  162E  3030               	movlw	48
 28581  162F  0021               	movlb	1	; select bank1
 28582  1630  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28583  1631  00F7               	movwf	m_mem_cpy_len@len
 28584  1632  2778  3190         	fcall	_m_mem_cpy_len
 28585                           
 28586                           ;rfid_demo.c: 70: ret=data_api_flash_process();
 28587  1634  2793  3190         	fcall	_data_api_flash_process
 28588  1636  0021               	movlb	1	; select bank1
 28589  1637  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28590  1638  0020               	movlb	0	; select bank0
 28591  1639  00ED               	movwf	rfid_comm_process_read_header@ret
 28592                           
 28593                           ;rfid_demo.c: 71: m_mem_cpy_len(comBuffer,comBuffer+80,48);
 28594  163A  3070               	movlw	112
 28595  163B  00F3               	movwf	m_mem_cpy_len@d
 28596  163C  3023               	movlw	35
 28597  163D  00F4               	movwf	m_mem_cpy_len@d+1
 28598  163E  30C0               	movlw	192
 28599  163F  00F5               	movwf	m_mem_cpy_len@s
 28600  1640  3023               	movlw	35
 28601  1641  00F6               	movwf	m_mem_cpy_len@s+1
 28602  1642  3030               	movlw	48
 28603  1643  0021               	movlb	1	; select bank1
 28604  1644  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28605  1645  00F7               	movwf	m_mem_cpy_len@len
 28606  1646  2778  3190         	fcall	_m_mem_cpy_len
 28607                           
 28608                           ;rfid_demo.c: 72: if(ret){
 28609  1648  0020               	movlb	0	; select bank0
 28610  1649  086D               	movf	rfid_comm_process_read_header@ret,w
 28611  164A  1903               	btfsc	3,2
 28612  164B  2EB2               	goto	l14549
 28613                           
 28614                           ;rfid_demo.c: 73: stp->keyUpdate=0;
 28615  164C  086E               	movf	rfid_comm_process_read_header@stp,w
 28616  164D  0086               	movwf	6
 28617  164E  086F               	movf	rfid_comm_process_read_header@stp+1,w
 28618  164F  0087               	movwf	7
 28619  1650  314C               	addfsr 1,12
 28620  1651  0181               	clrf	1
 28621                           
 28622                           ;rfid_demo.c: 74: m_mem_set(stp->cardkeyBcreatKey,0,6);
 28623  1652  086E               	movf	rfid_comm_process_read_header@stp,w
 28624  1653  3E20               	addlw	32
 28625  1654  00F3               	movwf	m_mem_set@buf
 28626  1655  3000               	movlw	0
 28627  1656  3D6F               	addwfc	rfid_comm_process_read_header@stp+1,w
 28628  1657  00F4               	movwf	m_mem_set@buf+1
 28629  1658  3006               	movlw	6
 28630  1659  01F5               	clrf	m_mem_set@x
 28631  165A  0021               	movlb	1	; select bank1
 28632  165B  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28633  165C  00F6               	movwf	m_mem_set@len
 28634  165D  319F  27A4  3190   	fcall	_m_mem_set
 28635                           
 28636                           ;rfid_demo.c: 75: crc_append(comBuffer,sizeof(st_cardHeaderDef)-2);
 28637  1660  3070               	movlw	112
 28638  1661  0020               	movlb	0	; select bank0
 28639  1662  00AB               	movwf	crc_append@message
 28640  1663  3023               	movlw	35
 28641  1664  00AC               	movwf	crc_append@message+1
 28642  1665  302E               	movlw	46
 28643  1666  00AD               	movwf	crc_append@n
 28644  1667  01AE               	clrf	crc_append@n+1
 28645  1668  2455  3190         	fcall	_crc_append
 28646                           
 28647                           ;rfid_demo.c: 77: for(__t8=4;__t8<7;__t8++){
 28648  166A  3004               	movlw	4
 28649  166B  0021               	movlb	1	; select bank1
 28650  166C  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28651  166D  00C6               	movwf	___t8^(0+128)
 28652  166E  3007               	movlw	7
 28653  166F  0246               	subwf	___t8^(0+128),w
 28654  1670  1803               	btfsc	3,0
 28655  1671  2EB2               	goto	l14549
 28656  1672                     l14539:	
 28657                           
 28658                           ;rfid_demo.c: 78: m_mem_cpy_len(cardWriteBuf,comBuffer+(__t8-4)*16,16);
 28659  1672  3032               	movlw	50
 28660  1673  00F3               	movwf	m_mem_cpy_len@d
 28661  1674  3004               	movlw	4
 28662  1675  00F4               	movwf	m_mem_cpy_len@d+1
 28663  1676  0846               	movf	___t8^(0+128),w
 28664  1677  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28665  1678  30F0               	movlw	240
 28666  1679  01CD               	clrf	(??_rfid_comm_process_read_header^(0+128)+1)
 28667  167A  0ECC               	swapf	??_rfid_comm_process_read_header^(0+128),f
 28668  167B  0ECD               	swapf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28669  167C  05CD               	andwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28670  167D  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28671  167E  390F               	andlw	15
 28672  167F  04CD               	iorwf	(??_rfid_comm_process_read_header^(0+128)+1),f
 28673  1680  30F0               	movlw	240
 28674  1681  05CC               	andwf	??_rfid_comm_process_read_header^(0+128),f
 28675  1682  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28676  1683  3EC0               	addlw	192
 28677  1684  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28678  1685  30FF               	movlw	255
 28679  1686  3D4D               	addwfc	(??_rfid_comm_process_read_header+1)^(0+128),w
 28680  1687  00CF               	movwf	(??_rfid_comm_process_read_header+3)^(0+128)
 28681  1688  3070               	movlw	112
 28682  1689  00D0               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 28683  168A  3023               	movlw	35
 28684  168B  00D1               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 28685  168C  084E               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28686  168D  0750               	addwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 28687  168E  00F5               	movwf	m_mem_cpy_len@s
 28688  168F  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28689  1690  3D51               	addwfc	(??_rfid_comm_process_read_header+5)^(0+128),w
 28690  1691  00F6               	movwf	m_mem_cpy_len@s+1
 28691  1692  3010               	movlw	16
 28692  1693  00D2               	movwf	(??_rfid_comm_process_read_header+6)^(0+128)
 28693  1694  00F7               	movwf	m_mem_cpy_len@len
 28694  1695  2778               	fcall	_m_mem_cpy_len
 28695                           
 28696                           ;rfid_demo.c: 79: piccResult = mifare_write(__t8, cardWriteBuf, 16);
 28697  1696  3032               	movlw	50
 28698  1697  0021               	movlb	1	; select bank1
 28699  1698  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28700  1699  0020               	movlb	0	; select bank0
 28701  169A  00E9               	movwf	mifare_write@buffer
 28702  169B  3010               	movlw	16
 28703  169C  0021               	movlb	1	; select bank1
 28704  169D  00CD               	movwf	(??_rfid_comm_process_read_header+1)^(0+128)
 28705  169E  0020               	movlb	0	; select bank0
 28706  169F  00EA               	movwf	mifare_write@bufferSize
 28707  16A0  0021               	movlb	1	; select bank1
 28708  16A1  0846               	movf	___t8^(0+128),w
 28709  16A2  319C  24B4  3190   	fcall	_mifare_write
 28710  16A5  0021               	movlb	1	; select bank1
 28711  16A6  00CE               	movwf	(??_rfid_comm_process_read_header+2)^(0+128)
 28712  16A7  00BB               	movwf	_piccResult^(0+128)
 28713                           
 28714                           ;rfid_demo.c: 80: if(piccResult!=STATUS_OK)break;
 28715  16A8  083B               	movf	_piccResult^(0+128),w
 28716  16A9  1D03               	btfss	3,2
 28717  16AA  2EB2               	goto	l14549
 28718  16AB  3001               	movlw	1
 28719  16AC  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28720  16AD  07C6               	addwf	___t8^(0+128),f
 28721  16AE  3007               	movlw	7
 28722  16AF  0246               	subwf	___t8^(0+128),w
 28723  16B0  1C03               	skipc
 28724  16B1  2E72               	goto	l14539
 28725  16B2                     l14549:	
 28726                           
 28727                           ;rfid_demo.c: 81: }
 28728                           ;rfid_demo.c: 82: }
 28729                           ;rfid_demo.c: 83: }
 28730                           ;rfid_demo.c: 84: if( mainSystemData.cardID==0)
 28731  16B2  3004               	movlw	4
 28732  16B3  0084               	movwf	4
 28733  16B4  30BF               	movlw	191
 28734  16B5  0085               	movwf	5
 28735  16B6  3F00               	moviw [0]fsr0
 28736  16B7  0021               	movlb	1	; select bank1
 28737  16B8  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28738  16B9  3F01               	moviw [1]fsr0
 28739  16BA  00CD               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 28740  16BB  3F02               	moviw [2]fsr0
 28741  16BC  00CE               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 28742  16BD  3F03               	moviw [3]fsr0
 28743  16BE  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 28744  16BF  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28745  16C0  044E               	iorwf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28746  16C1  044D               	iorwf	(??_rfid_comm_process_read_header+1)^(0+128),w
 28747  16C2  044C               	iorwf	??_rfid_comm_process_read_header^(0+128),w
 28748  16C3  1D03               	skipz
 28749  16C4  2F14               	goto	l14567
 28750                           
 28751                           ;rfid_demo.c: 85: {
 28752                           ;rfid_demo.c: 86: if(!(stp->deviceID==mainSystemData.deviceID)){
 28753  16C5  30BF               	movlw	191
 28754  16C6  0184               	clrf	4
 28755  16C7  0085               	movwf	5
 28756  16C8  3F00               	moviw [0]fsr0
 28757  16C9  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28758  16CA  3F01               	moviw [1]fsr0
 28759  16CB  00CD               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 28760  16CC  3F02               	moviw [2]fsr0
 28761  16CD  00CE               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 28762  16CE  3F03               	moviw [3]fsr0
 28763  16CF  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 28764  16D0  0020               	movlb	0	; select bank0
 28765  16D1  086E               	movf	rfid_comm_process_read_header@stp,w
 28766  16D2  0086               	movwf	6
 28767  16D3  086F               	movf	rfid_comm_process_read_header@stp+1,w
 28768  16D4  0087               	movwf	7
 28769  16D5  3148               	addfsr 1,8
 28770  16D6  3F40               	moviw [0]fsr1
 28771  16D7  0021               	movlb	1	; select bank1
 28772  16D8  00D0               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 28773  16D9  3F41               	moviw [1]fsr1
 28774  16DA  00D1               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 28775  16DB  3F42               	moviw [2]fsr1
 28776  16DC  00D2               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+2)
 28777  16DD  3F43               	moviw [3]fsr1
 28778  16DE  00D3               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+3)
 28779  16DF  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28780  16E0  0653               	xorwf	(??_rfid_comm_process_read_header+7)^(0+128),w
 28781  16E1  1D03               	skipz
 28782  16E2  2EED               	goto	u13055
 28783  16E3  084E               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28784  16E4  0652               	xorwf	(??_rfid_comm_process_read_header+6)^(0+128),w
 28785  16E5  1D03               	skipz
 28786  16E6  2EED               	goto	u13055
 28787  16E7  084D               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 28788  16E8  0651               	xorwf	(??_rfid_comm_process_read_header+5)^(0+128),w
 28789  16E9  1D03               	skipz
 28790  16EA  2EED               	goto	u13055
 28791  16EB  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28792  16EC  0650               	xorwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 28793  16ED                     u13055:	
 28794  16ED  1903               	skipnz
 28795  16EE  2EF4               	goto	l14557
 28796                           
 28797                           ;rfid_demo.c: 87: CardError=CARD_NOT_IS_MINE;
 28798  16EF  3003               	movlw	3
 28799  16F0  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28800  16F1  0022               	movlb	2	; select bank2
 28801  16F2  00A8               	movwf	_CardError^(0+256)
 28802                           
 28803                           ;rfid_demo.c: 88: return 0;
 28804  16F3  3400               	retlw	0
 28805  16F4                     l14557:	
 28806                           
 28807                           ;rfid_demo.c: 89: }
 28808                           ;rfid_demo.c: 90: flashOpStr.flashAddr=((uint16_t) (&((st_SystemData *)0)->cardID));
 28809  16F4  3004               	movlw	4
 28810  16F5  0022               	movlb	2	; select bank2
 28811  16F6  00C7               	movwf	_flashOpStr^(0+256)
 28812  16F7  3002               	movlw	2
 28813  16F8  01C8               	clrf	(_flashOpStr+1)^(0+256)
 28814                           
 28815                           ;rfid_demo.c: 91: flashOpStr.op=emFLASH_WRITE_main_SYSTEM_DATA;
 28816  16F9  0021               	movlb	1	; select bank1
 28817  16FA  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28818  16FB  0022               	movlb	2	; select bank2
 28819  16FC  00DB               	movwf	(_flashOpStr^(0+256)+20)
 28820                           
 28821                           ;rfid_demo.c: 92: flashOpStr.len=4;
 28822  16FD  3004               	movlw	4
 28823  16FE  00C9               	movwf	(_flashOpStr^(0+256)+2)
 28824  16FF  304B               	movlw	low (_flashOpStr+4)
 28825  1700  01CA               	clrf	(_flashOpStr^(0+256)+3)
 28826                           
 28827                           ;rfid_demo.c: 93: m_mem_cpy_len(flashOpStr.buf,cardUidBlockBuf,4);
 28828  1701  00F3               	movwf	m_mem_cpy_len@d
 28829  1702  3001               	movlw	high (_flashOpStr+4)
 28830  1703  00F4               	movwf	m_mem_cpy_len@d+1
 28831  1704  3020               	movlw	32
 28832  1705  00F5               	movwf	m_mem_cpy_len@s
 28833  1706  3004               	movlw	4
 28834  1707  00F6               	movwf	m_mem_cpy_len@s+1
 28835  1708  0021               	movlb	1	; select bank1
 28836  1709  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28837  170A  00F7               	movwf	m_mem_cpy_len@len
 28838  170B  2778  3190         	fcall	_m_mem_cpy_len
 28839                           
 28840                           ;rfid_demo.c: 94: ret=data_api_flash_process();
 28841  170D  2793  3190         	fcall	_data_api_flash_process
 28842  170F  0021               	movlb	1	; select bank1
 28843  1710  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28844  1711  0020               	movlb	0	; select bank0
 28845  1712  00ED               	movwf	rfid_comm_process_read_header@ret
 28846                           
 28847                           ;rfid_demo.c: 96: }else if(mainSystemData.cardID!=*((uint32_t*)cardUidBlockBuf) || mainS
      +                          ystemData.deviceID != stp->deviceID){
 28848  1713  2F6C               	goto	l14575
 28849  1714                     l14567:	
 28850  1714  3020               	movlw	32
 28851  1715  0086               	movwf	6
 28852  1716  3004               	movlw	4	; select bank8/9
 28853  1717  0087               	movwf	7
 28854  1718  3F40               	moviw [0]fsr1
 28855  1719  0021               	movlb	1	; select bank1
 28856  171A  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28857  171B  3F41               	moviw [1]fsr1
 28858  171C  00CD               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 28859  171D  3F42               	moviw [2]fsr1
 28860  171E  00CE               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 28861  171F  3F43               	moviw [3]fsr1
 28862  1720  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 28863  1721  3004               	movlw	4
 28864  1722  0084               	movwf	4
 28865  1723  30BF               	movlw	191
 28866  1724  0085               	movwf	5
 28867  1725  3F00               	moviw [0]fsr0
 28868  1726  00D0               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 28869  1727  3F01               	moviw [1]fsr0
 28870  1728  00D1               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 28871  1729  3F02               	moviw [2]fsr0
 28872  172A  00D2               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+2)
 28873  172B  3F03               	moviw [3]fsr0
 28874  172C  00D3               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+3)
 28875  172D  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28876  172E  0653               	xorwf	(??_rfid_comm_process_read_header+7)^(0+128),w
 28877  172F  1D03               	skipz
 28878  1730  2F3B               	goto	u13065
 28879  1731  084E               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28880  1732  0652               	xorwf	(??_rfid_comm_process_read_header+6)^(0+128),w
 28881  1733  1D03               	skipz
 28882  1734  2F3B               	goto	u13065
 28883  1735  084D               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 28884  1736  0651               	xorwf	(??_rfid_comm_process_read_header+5)^(0+128),w
 28885  1737  1D03               	skipz
 28886  1738  2F3B               	goto	u13065
 28887  1739  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28888  173A  0650               	xorwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 28889  173B                     u13065:	
 28890  173B  1D03               	skipz
 28891  173C  2F67               	goto	l14571
 28892  173D  30BF               	movlw	191
 28893  173E  0184               	clrf	4
 28894  173F  0085               	movwf	5
 28895  1740  3F00               	moviw [0]fsr0
 28896  1741  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28897  1742  3F01               	moviw [1]fsr0
 28898  1743  00CD               	movwf	(??_rfid_comm_process_read_header^(0+128)+1)
 28899  1744  3F02               	moviw [2]fsr0
 28900  1745  00CE               	movwf	(??_rfid_comm_process_read_header^(0+128)+2)
 28901  1746  3F03               	moviw [3]fsr0
 28902  1747  00CF               	movwf	(??_rfid_comm_process_read_header^(0+128)+3)
 28903  1748  0020               	movlb	0	; select bank0
 28904  1749  086E               	movf	rfid_comm_process_read_header@stp,w
 28905  174A  0086               	movwf	6
 28906  174B  086F               	movf	rfid_comm_process_read_header@stp+1,w
 28907  174C  0087               	movwf	7
 28908  174D  3148               	addfsr 1,8
 28909  174E  3F40               	moviw [0]fsr1
 28910  174F  0021               	movlb	1	; select bank1
 28911  1750  00D0               	movwf	(??_rfid_comm_process_read_header+4)^(0+128)
 28912  1751  3F41               	moviw [1]fsr1
 28913  1752  00D1               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+1)
 28914  1753  3F42               	moviw [2]fsr1
 28915  1754  00D2               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+2)
 28916  1755  3F43               	moviw [3]fsr1
 28917  1756  00D3               	movwf	((??_rfid_comm_process_read_header+4)^(0+128)+3)
 28918  1757  084F               	movf	(??_rfid_comm_process_read_header+3)^(0+128),w
 28919  1758  0653               	xorwf	(??_rfid_comm_process_read_header+7)^(0+128),w
 28920  1759  1D03               	skipz
 28921  175A  2F65               	goto	u13075
 28922  175B  084E               	movf	(??_rfid_comm_process_read_header+2)^(0+128),w
 28923  175C  0652               	xorwf	(??_rfid_comm_process_read_header+6)^(0+128),w
 28924  175D  1D03               	skipz
 28925  175E  2F65               	goto	u13075
 28926  175F  084D               	movf	(??_rfid_comm_process_read_header+1)^(0+128),w
 28927  1760  0651               	xorwf	(??_rfid_comm_process_read_header+5)^(0+128),w
 28928  1761  1D03               	skipz
 28929  1762  2F65               	goto	u13075
 28930  1763  084C               	movf	??_rfid_comm_process_read_header^(0+128),w
 28931  1764  0650               	xorwf	(??_rfid_comm_process_read_header+4)^(0+128),w
 28932  1765                     u13075:	
 28933  1765  1903               	skipnz
 28934  1766  2F6C               	goto	l14575
 28935  1767                     l14571:	
 28936                           
 28937                           ;rfid_demo.c: 98: CardError=CARD_NOT_IS_MINE;
 28938  1767  3003               	movlw	3
 28939  1768  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28940  1769  0022               	movlb	2	; select bank2
 28941  176A  00A8               	movwf	_CardError^(0+256)
 28942                           
 28943                           ;rfid_demo.c: 99: return 0;
 28944  176B  3400               	retlw	0
 28945  176C                     l14575:	
 28946                           
 28947                           ;rfid_demo.c: 100: }
 28948                           ;rfid_demo.c: 101: create_card_key_b(userKeyB,cardUidBlockBuf,(uint8_t*)mainSystemData.c
      +                          ardKeyCreateKey);
 28949  176C  3020               	movlw	32
 28950  176D  0021               	movlb	1	; select bank1
 28951  176E  00CC               	movwf	??_rfid_comm_process_read_header^(0+128)
 28952  176F  00F3               	movwf	create_card_key_b@uid
 28953  1770  3040               	movlw	64
 28954  1771  00F4               	movwf	create_card_key_b@cckey
 28955  1772  30BF               	movlw	191
 28956  1773  00F5               	movwf	create_card_key_b@cckey+1
 28957  1774  30BC               	movlw	(low (_userKeyB| (0+256)))& (0+255)
 28958  1775  3187  27D0         	fcall	_create_card_key_b
 28959                           
 28960                           ;rfid_demo.c: 102: return 1;
 28961  1777  3401               	retlw	1
 28962  1778                     __end_of_rfid_comm_process_read_header:	
 28963  1778                     __ptext160:	
 28964 ;; *************** function _m_mem_cpy_len *****************
 28965 ;; Defined at:
 28966 ;;		line 47 in file "src/depend/m_string.c"
 28967 ;; Parameters:    Size  Location     Type
 28968 ;;  d               2    3[COMMON] PTR unsigned char 
 28969 ;;		 -> crc_verify@expected(2), pcd_mifare_transceive@cmdBuffer(18), LCDDATA0(1), cardWriteBuf(18), 
 28970 ;;		 -> comBuffer(128), flashOpStr.buf(16), flashOpStr(21), uiAdjbuf(8), 
 28971 ;;		 -> uart1Buffer(80), 
 28972 ;;  s               2    5[COMMON] PTR unsigned char 
 28973 ;;		 -> mifare_write@cmdBuffer(2), mifare_two_Step_helper@data(4), mifare_two_Step_helper@cmdBuffer(2), pLCD(24), 
 28974 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 28975 ;;		 -> bkupSystemData(72), RAM(4096), comBuffer(128), Main_flowCalibrationTable(124), 
 28976 ;;		 -> flashOpStr(21), uiAdjbuf(8), mainSystemData.flowRatio(2), rtBalanceMoney(4), 
 28977 ;;		 -> __q31(4), mainSystemData(72), __t16(2), uart1Buffer(80), 
 28978 ;;  len             1    7[COMMON] unsigned char 
 28979 ;; Auto vars:     Size  Location     Type
 28980 ;;		None
 28981 ;; Return value:  Size  Location     Type
 28982 ;;                  1    wreg      void 
 28983 ;; Registers used:
 28984 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 28985 ;; Tracked objects:
 28986 ;;		On entry : 0/0
 28987 ;;		On exit  : 0/0
 28988 ;;		Unchanged: 0/0
 28989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 28990 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 28992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 28993 ;;      Totals:         5       1       0       0       0       0       0       0       0       0       0       0       
      +0
 28994 ;;Total ram usage:        6 bytes
 28995 ;; Hardware stack levels used:    1
 28996 ;; Hardware stack levels required when called:    2
 28997 ;; This function calls:
 28998 ;;		Nothing
 28999 ;; This function is called by:
 29000 ;;		_ui_key_process_enter
 29001 ;;		_ui_key_set_process
 29002 ;;		_modbus_response_write_flash_sys
 29003 ;;		_modbus_response_write_flash_clib
 29004 ;;		_modbus_response_read_flash_data
 29005 ;;		_modbus_response_read_status_register
 29006 ;;		_data_api_system_data_init
 29007 ;;		_data_api_rt_data_save
 29008 ;;		_data_api_calibration_table_data_save
 29009 ;;		_rfid_comm_process_read_header
 29010 ;;		_rfid_comm_process_recharge
 29011 ;;		_lcd_disp_refresh
 29012 ;;		_pcd_mifare_transceive
 29013 ;;		_crc_verify
 29014 ;; This function uses a non-reentrant model
 29015 ;;
 29016                           
 29017                           
 29018                           ;psect for function _m_mem_cpy_len
 29019  1778                     _m_mem_cpy_len:	
 29020  1778                     l11617:	
 29021                           ;incstack = 0
 29022                           ; Regs used in _m_mem_cpy_len: [wreg-fsr1h+status,2+status,0+pclath]
 29023                           
 29024  1778                     l11627:	
 29025                           ;m_string.c: 50: while(len)
 29026                           
 29027  1778  0877               	movf	m_mem_cpy_len@len,w
 29028  1779  1903               	btfsc	3,2
 29029  177A  0008               	return
 29030                           
 29031                           ;m_string.c: 51: {
 29032                           ;m_string.c: 52: *d++=*s++;
 29033  177B  0875               	movf	m_mem_cpy_len@s,w
 29034  177C  0084               	movwf	4
 29035  177D  0876               	movf	m_mem_cpy_len@s+1,w
 29036  177E  0085               	movwf	5
 29037  177F  0800               	movf	0,w	;code access
 29038  1780  0020               	movlb	0	; select bank0
 29039  1781  00A0               	movwf	??_m_mem_cpy_len
 29040  1782  0873               	movf	m_mem_cpy_len@d,w
 29041  1783  0086               	movwf	6
 29042  1784  0874               	movf	m_mem_cpy_len@d+1,w
 29043  1785  0087               	movwf	7
 29044  1786  0820               	movf	??_m_mem_cpy_len,w
 29045  1787  0081               	movwf	1
 29046  1788  3001               	movlw	1
 29047  1789  07F5               	addwf	m_mem_cpy_len@s,f
 29048  178A  3000               	movlw	0
 29049  178B  3DF6               	addwfc	m_mem_cpy_len@s+1,f
 29050  178C  3001               	movlw	1
 29051  178D  07F3               	addwf	m_mem_cpy_len@d,f
 29052  178E  3000               	movlw	0
 29053  178F  3DF4               	addwfc	m_mem_cpy_len@d+1,f
 29054                           
 29055                           ;m_string.c: 53: len--;
 29056  1790  3001               	movlw	1
 29057  1791  02F7               	subwf	m_mem_cpy_len@len,f
 29058  1792  2F78               	goto	l11627
 29059  1793                     __end_of_m_mem_cpy_len:	
 29060  1793                     __ptext86:	
 29061 ;; *************** function _data_api_flash_process *****************
 29062 ;; Defined at:
 29063 ;;		line 230 in file "src/app/appdata.c"
 29064 ;; Parameters:    Size  Location     Type
 29065 ;;		None
 29066 ;; Auto vars:     Size  Location     Type
 29067 ;;		None
 29068 ;; Return value:  Size  Location     Type
 29069 ;;                  1    wreg      unsigned char 
 29070 ;; Registers used:
 29071 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29072 ;; Tracked objects:
 29073 ;;		On entry : 0/0
 29074 ;;		On exit  : 0/0
 29075 ;;		Unchanged: 0/0
 29076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29079 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29080 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29081 ;;Total ram usage:        1 bytes
 29082 ;; Hardware stack levels used:    1
 29083 ;; Hardware stack levels required when called:    6
 29084 ;; This function calls:
 29085 ;;		_data_api_calibration_table_data_save
 29086 ;;		_data_api_rt_data_save
 29087 ;; This function is called by:
 29088 ;;		_modbus_response_write_flash_sys
 29089 ;;		_modbus_response_write_flash_clib
 29090 ;;		_rfid_comm_process_read_header
 29091 ;;		_rfid_comm_process_recharge
 29092 ;;		_main
 29093 ;; This function uses a non-reentrant model
 29094 ;;
 29095                           
 29096                           
 29097                           ;psect for function _data_api_flash_process
 29098  1793                     _data_api_flash_process:	
 29099                           
 29100                           ;appdata.c: 231: if (flashOpStr.op == enFLASH_NOTHING)return 0;
 29101                           
 29102                           ;incstack = 0
 29103                           ; Regs used in _data_api_flash_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29104  1793  0022               	movlb	2	; select bank2
 29105  1794  085B               	movf	(_flashOpStr^(0+256)+20),w
 29106  1795  1903               	btfsc	3,2
 29107  1796  3400               	retlw	0
 29108                           
 29109                           ;appdata.c: 232: if (flashOpStr.op == emFLASH_WRITE_main_CALIB_DATA) {
 29110  1797  0B5B               	decfsz	(_flashOpStr^(0+256)+20),w
 29111  1798  2FA3               	goto	l13569
 29112                           
 29113                           ;appdata.c: 233: data_api_calibration_table_data_save(flowCalibrationLocation,flowCalibr
      +                          ationPointSingle);
 29114  1799  086F               	movf	_flowCalibrationPointSingle^(0+256),w
 29115  179A  0020               	movlb	0	; select bank0
 29116  179B  00C0               	movwf	??_data_api_flash_process
 29117  179C  00B6               	movwf	data_api_calibration_table_data_save@single
 29118  179D  0022               	movlb	2	; select bank2
 29119  179E  082A               	movf	_flowCalibrationLocation^(0+256),w
 29120  179F  20A0  3190         	fcall	_data_api_calibration_table_data_save
 29121                           
 29122                           ;appdata.c: 234: flashOpStr.op=enFLASH_NOTHING;
 29123  17A1  0022               	movlb	2	; select bank2
 29124  17A2  01DB               	clrf	(_flashOpStr^(0+256)+20)
 29125  17A3                     l13569:	
 29126                           
 29127                           ;appdata.c: 235: }
 29128                           ;appdata.c: 236: if (flashOpStr.op == emFLASH_WRITE_main_SYSTEM_DATA) {
 29129  17A3  3002               	movlw	2
 29130  17A4  065B               	xorwf	(_flashOpStr^(0+256)+20),w
 29131  17A5  1D03               	btfss	3,2
 29132  17A6  3401               	retlw	1
 29133                           
 29134                           ;appdata.c: 237: data_api_rt_data_save();
 29135  17A7  2001               	fcall	_data_api_rt_data_save
 29136                           
 29137                           ;appdata.c: 238: }
 29138                           ;appdata.c: 239: return 1;
 29139  17A8  3401               	retlw	1
 29140  17A9                     __end_of_data_api_flash_process:	
 29141  17A9                     __ptext68:	
 29142 ;; *************** function _mifare_read *****************
 29143 ;; Defined at:
 29144 ;;		line 35 in file "src/nfc/pal/mfrc522_mifare.c"
 29145 ;; Parameters:    Size  Location     Type
 29146 ;;  blockAddr       1    wreg     unsigned char 
 29147 ;;  buffer          1   42[BANK0 ] PTR unsigned char 
 29148 ;;		 -> cardDecBuf(18), cardIncBuf(18), cardWriteBuf(18), cardUidBlockBuf(18), 
 29149 ;;  bufferSize      1   43[BANK0 ] PTR unsigned char 
 29150 ;;		 -> rdLen(1), __t8(1), 
 29151 ;; Auto vars:     Size  Location     Type
 29152 ;;  blockAddr       1   47[BANK0 ] unsigned char 
 29153 ;;  result          1   48[BANK0 ] enum E5268
 29154 ;; Return value:  Size  Location     Type
 29155 ;;                  1    wreg      enum E5489
 29156 ;; Registers used:
 29157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29158 ;; Tracked objects:
 29159 ;;		On entry : 0/0
 29160 ;;		On exit  : 0/0
 29161 ;;		Unchanged: 0/0
 29162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29163 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29164 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29165 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 29166 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 29167 ;;Total ram usage:        7 bytes
 29168 ;; Hardware stack levels used:    1
 29169 ;; Hardware stack levels required when called:    7
 29170 ;; This function calls:
 29171 ;;		_mfrc522_hal_calculate_crc
 29172 ;;		_pcd_comm_with_picc
 29173 ;; This function is called by:
 29174 ;;		_rfid_comm_process_read_header
 29175 ;;		_rfid_comm_process_read_inc
 29176 ;;		_rfid_comm_process_read_dec
 29177 ;; This function uses a non-reentrant model
 29178 ;;
 29179                           
 29180                           
 29181                           ;psect for function _mifare_read
 29182  17A9                     _mifare_read:	
 29183                           
 29184                           ;incstack = 0
 29185                           ; Regs used in _mifare_read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 29186                           ;mifare_read@blockAddr stored from wreg
 29187  17A9  0020               	movlb	0	; select bank0
 29188  17AA  00CF               	movwf	mifare_read@blockAddr
 29189                           
 29190                           ;mfrc522_mifare.c: 42: em_PcdStatusCode result;
 29191                           ;mfrc522_mifare.c: 43: if (buffer == (0) || *bufferSize < 18)
 29192  17AB  084A               	movf	mifare_read@buffer,w
 29193  17AC  1903               	btfsc	3,2
 29194  17AD  3404               	retlw	4
 29195  17AE  084B               	movf	mifare_read@bufferSize,w
 29196  17AF  0086               	movwf	6
 29197  17B0  3012               	movlw	18
 29198  17B1  0187               	clrf	7
 29199  17B2  0201               	subwf	1,w
 29200  17B3  1C03               	btfss	3,0
 29201                           
 29202                           ;mfrc522_mifare.c: 44: {
 29203                           ;mfrc522_mifare.c: 45: return STATUS_NO_ROOM;
 29204  17B4  3404               	retlw	4
 29205                           
 29206                           ;mfrc522_mifare.c: 46: }
 29207                           ;mfrc522_mifare.c: 47: buffer[0] = PICC_CMD_MF_READ;
 29208  17B5  3030               	movlw	48
 29209  17B6  00CC               	movwf	??_mifare_read
 29210  17B7  084A               	movf	mifare_read@buffer,w
 29211  17B8  0086               	movwf	6
 29212  17B9  3004               	movlw	4	; select bank8/9
 29213  17BA  0087               	movwf	7
 29214  17BB  084C               	movf	??_mifare_read,w
 29215  17BC  0081               	movwf	1
 29216                           
 29217                           ;mfrc522_mifare.c: 48: buffer[1] = blockAddr;
 29218  17BD  084F               	movf	mifare_read@blockAddr,w
 29219  17BE  00CC               	movwf	??_mifare_read
 29220  17BF  0A4A               	incf	mifare_read@buffer,w
 29221  17C0  0086               	movwf	6
 29222  17C1  084C               	movf	??_mifare_read,w
 29223  17C2  0081               	movwf	1
 29224                           
 29225                           ;mfrc522_mifare.c: 49: result = mfrc522_hal_calculate_crc(buffer, 2, &buffer[2]);
 29226  17C3  084A               	movf	mifare_read@buffer,w
 29227  17C4  00A6               	movwf	mfrc522_hal_calculate_crc@data
 29228  17C5  3004               	movlw	4
 29229  17C6  00A7               	movwf	mfrc522_hal_calculate_crc@data+1
 29230  17C7  3002               	movlw	2
 29231  17C8  00CC               	movwf	??_mifare_read
 29232  17C9  00A8               	movwf	mfrc522_hal_calculate_crc@length
 29233  17CA  084A               	movf	mifare_read@buffer,w
 29234  17CB  3E02               	addlw	2
 29235  17CC  00A9               	movwf	mfrc522_hal_calculate_crc@result
 29236  17CD  3004               	movlw	4
 29237  17CE  00AA               	movwf	mfrc522_hal_calculate_crc@result+1
 29238  17CF  319D  255A  3190   	fcall	_mfrc522_hal_calculate_crc
 29239  17D2  0020               	movlb	0	; select bank0
 29240  17D3  00CD               	movwf	??_mifare_read+1
 29241  17D4  00D0               	movwf	mifare_read@result
 29242                           
 29243                           ;mfrc522_mifare.c: 50: if (result != STATUS_OK) {
 29244  17D5  0850               	movf	mifare_read@result,w
 29245  17D6  1903               	btfsc	3,2
 29246  17D7  2FDA               	goto	l13643
 29247                           
 29248                           ;mfrc522_mifare.c: 51: return result;
 29249  17D8  0850               	movf	mifare_read@result,w
 29250  17D9  0008               	return
 29251  17DA                     l13643:	
 29252                           
 29253                           ;mfrc522_mifare.c: 52: }
 29254                           ;mfrc522_mifare.c: 54: return pcd_comm_with_picc(PCD_Transceive,0x30,buffer, 4, buffer, 
      +                          bufferSize, (0), 0, 1);
 29255  17DA  3030               	movlw	48
 29256  17DB  00CC               	movwf	??_mifare_read
 29257  17DC  00B1               	movwf	pcd_comm_with_picc@waitIRQ
 29258  17DD  084A               	movf	mifare_read@buffer,w
 29259  17DE  00B2               	movwf	pcd_comm_with_picc@sbuf
 29260  17DF  3004               	movlw	4
 29261  17E0  00B3               	movwf	pcd_comm_with_picc@sbuf+1
 29262  17E1  00CD               	movwf	??_mifare_read+1
 29263  17E2  00B4               	movwf	pcd_comm_with_picc@slen
 29264  17E3  084A               	movf	mifare_read@buffer,w
 29265  17E4  00B5               	movwf	pcd_comm_with_picc@rbuf
 29266  17E5  3004               	movlw	4
 29267  17E6  00B6               	movwf	pcd_comm_with_picc@rbuf+1
 29268  17E7  084B               	movf	mifare_read@bufferSize,w
 29269  17E8  00CE               	movwf	??_mifare_read+2
 29270  17E9  00B7               	movwf	pcd_comm_with_picc@rlen
 29271  17EA  300C               	movlw	12
 29272  17EB  01B8               	clrf	pcd_comm_with_picc@validBits
 29273  17EC  01B9               	clrf	pcd_comm_with_picc@rxAlign
 29274  17ED  01BA               	clrf	pcd_comm_with_picc@checkCRC
 29275  17EE  0ABA               	incf	pcd_comm_with_picc@checkCRC,f
 29276  17EF  3198  2808         	ljmp	_pcd_comm_with_picc
 29277  17F1                     __end_of_mifare_read:	
 29278  17F1                     __ptext148:	
 29279 ;; *************** function _data_api_system_data_get *****************
 29280 ;; Defined at:
 29281 ;;		line 111 in file "src/app/appdata.c"
 29282 ;; Parameters:    Size  Location     Type
 29283 ;;		None
 29284 ;; Auto vars:     Size  Location     Type
 29285 ;;		None
 29286 ;; Return value:  Size  Location     Type
 29287 ;;                  1    wreg      void 
 29288 ;; Registers used:
 29289 ;;		wreg, fsr0l, fsr0h, pclath
 29290 ;; Tracked objects:
 29291 ;;		On entry : 0/0
 29292 ;;		On exit  : 0/0
 29293 ;;		Unchanged: 0/0
 29294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29297 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29298 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29299 ;;Total ram usage:        1 bytes
 29300 ;; Hardware stack levels used:    1
 29301 ;; Hardware stack levels required when called:    2
 29302 ;; This function calls:
 29303 ;;		Nothing
 29304 ;; This function is called by:
 29305 ;;		_data_api_system_data_init
 29306 ;;		_data_api_rt_data_save
 29307 ;; This function uses a non-reentrant model
 29308 ;;
 29309                           
 29310                           
 29311                           ;psect for function _data_api_system_data_get
 29312  17F1                     _data_api_system_data_get:	
 29313  17F1                     l12931:	
 29314                           ;incstack = 0
 29315                           ; Regs used in _data_api_system_data_get: [wreg-fsr0h+pclath]
 29316                           
 29317                           
 29318                           ;appdata.c: 112: deviceStatus.byte=mainSystemData.status.byte;
 29319  17F1  303E               	movlw	62
 29320  17F2  0084               	movwf	4
 29321  17F3  30BF               	movlw	191
 29322  17F4  0085               	movwf	5
 29323  17F5  0800               	movf	0,w	;code access
 29324  17F6  00F3               	movwf	??_data_api_system_data_get
 29325  17F7  0021               	movlb	1	; select bank1
 29326  17F8  00BA               	movwf	_deviceStatus^(0+128)
 29327  17F9  0008               	return
 29328  17FA                     __end_of_data_api_system_data_get:	
 29329  17FA                     __ptext121:	
 29330 ;; *************** function _in_app_vavle_on *****************
 29331 ;; Defined at:
 29332 ;;		line 28 in file "src/app/flow.c"
 29333 ;; Parameters:    Size  Location     Type
 29334 ;;		None
 29335 ;; Auto vars:     Size  Location     Type
 29336 ;;		None
 29337 ;; Return value:  Size  Location     Type
 29338 ;;                  1    wreg      void 
 29339 ;; Registers used:
 29340 ;;		wreg, status,2, status,0, pclath, cstack
 29341 ;; Tracked objects:
 29342 ;;		On entry : 0/0
 29343 ;;		On exit  : 0/0
 29344 ;;		Unchanged: 0/0
 29345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29350 ;;Total ram usage:        0 bytes
 29351 ;; Hardware stack levels used:    1
 29352 ;; Hardware stack levels required when called:    3
 29353 ;; This function calls:
 29354 ;;		_valve_on
 29355 ;; This function is called by:
 29356 ;;		_main
 29357 ;; This function uses a non-reentrant model
 29358 ;;
 29359                           
 29360                           
 29361                           ;psect for function _in_app_vavle_on
 29362  17FA                     _in_app_vavle_on:	
 29363                           
 29364                           ;flow.c: 29: Event |= (uint8_t)(0x01<<6);
 29365                           
 29366                           ;incstack = 0
 29367                           ; Regs used in _in_app_vavle_on: [wreg+status,2+status,0+pclath+cstack]
 29368  17FA  0021               	movlb	1	; select bank1
 29369  17FB  1736               	bsf	_Event^(0+128),6
 29370                           
 29371                           ;flow.c: 30: if(deviceStatus.bits.acPowerDown)return;
 29372  17FC  19BA               	btfsc	_deviceStatus^(0+128),3
 29373  17FD  0008               	return
 29374                           
 29375                           ;flow.c: 31: valve_on();
 29376  17FE  31B5  2DE6         	ljmp	l10215
 29377  1800                     __end_of_in_app_vavle_on:	
 29378                           
 29379                           	psect	text93
 29380  07F5                     __ptext93:	
 29381 ;; *************** function _mfapi_pcd_init *****************
 29382 ;; Defined at:
 29383 ;;		line 63 in file "src/nfc/apl/mfrc522_apl.c"
 29384 ;; Parameters:    Size  Location     Type
 29385 ;;		None
 29386 ;; Auto vars:     Size  Location     Type
 29387 ;;  v               1   10[BANK0 ] unsigned char 
 29388 ;; Return value:  Size  Location     Type
 29389 ;;                  1    wreg      unsigned char 
 29390 ;; Registers used:
 29391 ;;		wreg, status,2, status,0, pclath, cstack
 29392 ;; Tracked objects:
 29393 ;;		On entry : 0/0
 29394 ;;		On exit  : 0/0
 29395 ;;		Unchanged: 0/0
 29396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 29400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 29401 ;;Total ram usage:        2 bytes
 29402 ;; Hardware stack levels used:    1
 29403 ;; Hardware stack levels required when called:    7
 29404 ;; This function calls:
 29405 ;;		_mfrc522_bal_read_reg
 29406 ;;		_mfrc522_hal_init
 29407 ;; This function is called by:
 29408 ;;		_main
 29409 ;; This function uses a non-reentrant model
 29410 ;;
 29411                           
 29412                           
 29413                           ;psect for function _mfapi_pcd_init
 29414  07F5                     _mfapi_pcd_init:	
 29415                           
 29416                           ;mfrc522_apl.c: 64: uint8_t v;
 29417                           ;mfrc522_apl.c: 65: mfrc522_hal_init();
 29418                           
 29419                           ;incstack = 0
 29420                           ; Regs used in _mfapi_pcd_init: [wreg+status,2+status,0+pclath+cstack]
 29421  07F5  3199  2153  3187   	fcall	_mfrc522_hal_init
 29422                           
 29423                           ;mfrc522_apl.c: 69: v = mfrc522_bal_read_reg(VersionReg);
 29424  07F8  3037               	movlw	55
 29425  07F9  319D  25B9         	fcall	_mfrc522_bal_read_reg
 29426  07FB  0020               	movlb	0	; select bank0
 29427  07FC  00A9               	movwf	??_mfapi_pcd_init
 29428  07FD  00AA               	movwf	mfapi_pcd_init@v
 29429                           
 29430                           ;mfrc522_apl.c: 71: return 0;
 29431                           ;	Return value of _mfapi_pcd_init is never used
 29432  07FE  0008               	return
 29433  07FF                     __end_of_mfapi_pcd_init:	
 29434                           ;mfrc522_apl.c: 72: }
 29435                           ;mfrc522_apl.c: 73: return 1;
 29436                           ;	Return value of _mfapi_pcd_init is never used
 29437                           
 29438                           
 29439                           	psect	text105
 29440  2B7B                     __ptext105:	
 29441 ;; *************** function _m_system_init *****************
 29442 ;; Defined at:
 29443 ;;		line 3 in file "main.c"
 29444 ;; Parameters:    Size  Location     Type
 29445 ;;		None
 29446 ;; Auto vars:     Size  Location     Type
 29447 ;;		None
 29448 ;; Return value:  Size  Location     Type
 29449 ;;                  1    wreg      void 
 29450 ;; Registers used:
 29451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 29452 ;; Tracked objects:
 29453 ;;		On entry : 0/0
 29454 ;;		On exit  : 0/0
 29455 ;;		Unchanged: 0/0
 29456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29461 ;;Total ram usage:        0 bytes
 29462 ;; Hardware stack levels used:    1
 29463 ;; Hardware stack levels required when called:    5
 29464 ;; This function calls:
 29465 ;;		_SYSTEM_Initialize
 29466 ;;		_lcd_init
 29467 ;;		_led_port_init
 29468 ;;		_other_gpio_port_init
 29469 ;; This function is called by:
 29470 ;;		_main
 29471 ;; This function uses a non-reentrant model
 29472 ;;
 29473                           
 29474                           
 29475                           ;psect for function _m_system_init
 29476  2B7B                     _m_system_init:	
 29477                           
 29478                           ;main.c: 5: SYSTEM_Initialize();
 29479                           
 29480                           ;incstack = 0
 29481                           ; Regs used in _m_system_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 29482  2B7B  238C  31AB         	fcall	_SYSTEM_Initialize
 29483                           
 29484                           ;main.c: 9: do{ do { TRISBbits.TRISB1 = 1; } while(0); do { TRISBbits.TRISB2 = 1; } whil
      +                          e(0); do { TRISBbits.TRISB3 = 1; } while(0); }while(0);;
 29485  2B7D  0021               	movlb	1	; select bank1
 29486  2B7E  148D               	bsf	13,1	;volatile
 29487  2B7F  150D               	bsf	13,2	;volatile
 29488  2B80  158D               	bsf	13,3	;volatile
 29489                           
 29490                           ;main.c: 10: led_port_init();
 29491  2B81  23EC  31AB         	fcall	_led_port_init
 29492                           
 29493                           ;main.c: 11: other_gpio_port_init();
 29494  2B83  2405  31AB         	fcall	_other_gpio_port_init
 29495                           
 29496                           ;main.c: 13: lcd_init();
 29497  2B85  243D               	fcall	_lcd_init
 29498                           
 29499                           ;main.c: 14: do{LCDCON=0x8F;}while(0);;
 29500  2B86  308F               	movlw	143
 29501  2B87  002F               	movlb	15	; select bank15
 29502  2B88  0091               	movwf	17	;volatile
 29503                           
 29504                           ;main.c: 17: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 29505  2B89  178B               	bsf	11,7	;volatile
 29506  2B8A  170B               	bsf	11,6	;volatile
 29507  2B8B  0008               	return
 29508  2B8C                     __end_of_m_system_init:	
 29509  2B8C                     __ptext111:	
 29510 ;; *************** function _SYSTEM_Initialize *****************
 29511 ;; Defined at:
 29512 ;;		line 70 in file "mcc_generated_files/mcc.c"
 29513 ;; Parameters:    Size  Location     Type
 29514 ;;		None
 29515 ;; Auto vars:     Size  Location     Type
 29516 ;;		None
 29517 ;; Return value:  Size  Location     Type
 29518 ;;                  1    wreg      void 
 29519 ;; Registers used:
 29520 ;;		wreg, status,2, status,0, pclath, cstack
 29521 ;; Tracked objects:
 29522 ;;		On entry : 0/0
 29523 ;;		On exit  : 0/0
 29524 ;;		Unchanged: 0/0
 29525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29530 ;;Total ram usage:        0 bytes
 29531 ;; Hardware stack levels used:    1
 29532 ;; Hardware stack levels required when called:    4
 29533 ;; This function calls:
 29534 ;;		_EUSART1_Initialize
 29535 ;;		_OSCILLATOR_Initialize
 29536 ;;		_PIN_MANAGER_Initialize
 29537 ;;		_TMR0_Initialize
 29538 ;;		_TMR1_Initialize
 29539 ;;		_WDT_Initialize
 29540 ;; This function is called by:
 29541 ;;		_m_system_init
 29542 ;; This function uses a non-reentrant model
 29543 ;;
 29544                           
 29545                           
 29546                           ;psect for function _SYSTEM_Initialize
 29547  2B8C                     _SYSTEM_Initialize:	
 29548                           
 29549                           ;mcc.c: 73: PIN_MANAGER_Initialize();
 29550                           
 29551                           ;incstack = 0
 29552                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
 29553  2B8C  239C  31AB         	fcall	_PIN_MANAGER_Initialize
 29554                           
 29555                           ;mcc.c: 74: OSCILLATOR_Initialize();
 29556  2B8E  2397  31AB         	fcall	_OSCILLATOR_Initialize
 29557                           
 29558                           ;mcc.c: 75: WDT_Initialize();
 29559  2B90  23E8  31AB         	fcall	_WDT_Initialize
 29560                           
 29561                           ;mcc.c: 76: TMR1_Initialize();
 29562  2B92  23CF  31AB         	fcall	_TMR1_Initialize
 29563                           
 29564                           ;mcc.c: 77: TMR0_Initialize();
 29565  2B94  241E  31AB         	fcall	_TMR0_Initialize
 29566                           
 29567                           ;mcc.c: 78: EUSART1_Initialize();
 29568  2B96  2C0F               	ljmp	l9281
 29569  2B97                     __end_of_SYSTEM_Initialize:	
 29570  2B97                     __ptext119:	
 29571 ;; *************** function _OSCILLATOR_Initialize *****************
 29572 ;; Defined at:
 29573 ;;		line 81 in file "mcc_generated_files/mcc.c"
 29574 ;; Parameters:    Size  Location     Type
 29575 ;;		None
 29576 ;; Auto vars:     Size  Location     Type
 29577 ;;		None
 29578 ;; Return value:  Size  Location     Type
 29579 ;;                  1    wreg      void 
 29580 ;; Registers used:
 29581 ;;		wreg, status,2
 29582 ;; Tracked objects:
 29583 ;;		On entry : 0/0
 29584 ;;		On exit  : 0/0
 29585 ;;		Unchanged: 0/0
 29586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29591 ;;Total ram usage:        0 bytes
 29592 ;; Hardware stack levels used:    1
 29593 ;; Hardware stack levels required when called:    2
 29594 ;; This function calls:
 29595 ;;		Nothing
 29596 ;; This function is called by:
 29597 ;;		_SYSTEM_Initialize
 29598 ;; This function uses a non-reentrant model
 29599 ;;
 29600                           
 29601                           
 29602                           ;psect for function _OSCILLATOR_Initialize
 29603  2B97                     _OSCILLATOR_Initialize:	
 29604                           
 29605                           ;mcc.c: 84: OSCCON = 0x78;
 29606                           
 29607                           ;incstack = 0
 29608                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 29609  2B97  3078               	movlw	120
 29610  2B98  0021               	movlb	1	; select bank1
 29611  2B99  0099               	movwf	25	;volatile
 29612                           
 29613                           ;mcc.c: 86: OSCTUNE = 0x00;
 29614  2B9A  0198               	clrf	24	;volatile
 29615  2B9B  0008               	return
 29616  2B9C                     __end_of_OSCILLATOR_Initialize:	
 29617  2B9C                     __ptext118:	
 29618 ;; *************** function _PIN_MANAGER_Initialize *****************
 29619 ;; Defined at:
 29620 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 29621 ;; Parameters:    Size  Location     Type
 29622 ;;		None
 29623 ;; Auto vars:     Size  Location     Type
 29624 ;;		None
 29625 ;; Return value:  Size  Location     Type
 29626 ;;                  1    wreg      void 
 29627 ;; Registers used:
 29628 ;;		wreg, status,2
 29629 ;; Tracked objects:
 29630 ;;		On entry : 0/0
 29631 ;;		On exit  : 0/0
 29632 ;;		Unchanged: 0/0
 29633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29635 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29637 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29638 ;;Total ram usage:        0 bytes
 29639 ;; Hardware stack levels used:    1
 29640 ;; Hardware stack levels required when called:    2
 29641 ;; This function calls:
 29642 ;;		Nothing
 29643 ;; This function is called by:
 29644 ;;		_SYSTEM_Initialize
 29645 ;; This function uses a non-reentrant model
 29646 ;;
 29647                           
 29648                           
 29649                           ;psect for function _PIN_MANAGER_Initialize
 29650  2B9C                     _PIN_MANAGER_Initialize:	
 29651                           
 29652                           ;pin_manager.c: 56: LATE = 0x00;
 29653                           
 29654                           ;incstack = 0
 29655                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 29656  2B9C  0022               	movlb	2	; select bank2
 29657  2B9D  0190               	clrf	16	;volatile
 29658                           
 29659                           ;pin_manager.c: 57: LATD = 0x02;
 29660  2B9E  3002               	movlw	2
 29661  2B9F  008F               	movwf	15	;volatile
 29662                           
 29663                           ;pin_manager.c: 58: LATA = 0x00;
 29664  2BA0  018C               	clrf	12	;volatile
 29665                           
 29666                           ;pin_manager.c: 59: LATF = 0x00;
 29667  2BA1  0027               	movlb	7	; select bank7
 29668  2BA2  018C               	clrf	12	;volatile
 29669                           
 29670                           ;pin_manager.c: 60: LATB = 0x00;
 29671  2BA3  0022               	movlb	2	; select bank2
 29672  2BA4  018D               	clrf	13	;volatile
 29673                           
 29674                           ;pin_manager.c: 61: LATG = 0x00;
 29675  2BA5  0027               	movlb	7	; select bank7
 29676  2BA6  018D               	clrf	13	;volatile
 29677                           
 29678                           ;pin_manager.c: 62: LATC = 0x00;
 29679  2BA7  0022               	movlb	2	; select bank2
 29680  2BA8  018E               	clrf	14	;volatile
 29681                           
 29682                           ;pin_manager.c: 67: TRISE = 0xDF;
 29683  2BA9  30DF               	movlw	223
 29684  2BAA  0021               	movlb	1	; select bank1
 29685  2BAB  0090               	movwf	16	;volatile
 29686                           
 29687                           ;pin_manager.c: 68: TRISF = 0xFF;
 29688  2BAC  30FF               	movlw	255
 29689  2BAD  0026               	movlb	6	; select bank6
 29690  2BAE  008C               	movwf	12	;volatile
 29691                           
 29692                           ;pin_manager.c: 69: TRISA = 0xFF;
 29693  2BAF  0021               	movlb	1	; select bank1
 29694  2BB0  008C               	movwf	12	;volatile
 29695                           
 29696                           ;pin_manager.c: 70: TRISG = 0x3F;
 29697  2BB1  303F               	movlw	63
 29698  2BB2  0026               	movlb	6	; select bank6
 29699  2BB3  008D               	movwf	13	;volatile
 29700                           
 29701                           ;pin_manager.c: 71: TRISB = 0xFF;
 29702  2BB4  30FF               	movlw	255
 29703  2BB5  0021               	movlb	1	; select bank1
 29704  2BB6  008D               	movwf	13	;volatile
 29705                           
 29706                           ;pin_manager.c: 72: TRISC = 0xFF;
 29707  2BB7  008E               	movwf	14	;volatile
 29708                           
 29709                           ;pin_manager.c: 73: TRISD = 0xFD;
 29710  2BB8  30FD               	movlw	253
 29711  2BB9  008F               	movwf	15	;volatile
 29712                           
 29713                           ;pin_manager.c: 78: ANSELE = 0x00;
 29714  2BBA  0023               	movlb	3	; select bank3
 29715  2BBB  0190               	clrf	16	;volatile
 29716                           
 29717                           ;pin_manager.c: 79: ANSELG = 0x1C;
 29718  2BBC  301C               	movlw	28
 29719  2BBD  0028               	movlb	8	; select bank8
 29720  2BBE  008D               	movwf	13	;volatile
 29721                           
 29722                           ;pin_manager.c: 80: ANSELF = 0xFF;
 29723  2BBF  30FF               	movlw	255
 29724  2BC0  008C               	movwf	12	;volatile
 29725                           
 29726                           ;pin_manager.c: 81: ANSELA = 0x2F;
 29727  2BC1  302F               	movlw	47
 29728  2BC2  0023               	movlb	3	; select bank3
 29729  2BC3  008C               	movwf	12	;volatile
 29730                           
 29731                           ;pin_manager.c: 86: WPUB = 0xFF;
 29732  2BC4  30FF               	movlw	255
 29733  2BC5  0024               	movlb	4	; select bank4
 29734  2BC6  008D               	movwf	13	;volatile
 29735                           
 29736                           ;pin_manager.c: 87: WPUG = 0x20;
 29737  2BC7  3020               	movlw	32
 29738  2BC8  0029               	movlb	9	; select bank9
 29739  2BC9  008D               	movwf	13	;volatile
 29740                           
 29741                           ;pin_manager.c: 88: OPTION_REGbits.nWPUEN = 0;
 29742  2BCA  0021               	movlb	1	; select bank1
 29743  2BCB  1395               	bcf	21,7	;volatile
 29744                           
 29745                           ;pin_manager.c: 94: APFCON = 0x00;
 29746  2BCC  0022               	movlb	2	; select bank2
 29747  2BCD  019D               	clrf	29	;volatile
 29748  2BCE  0008               	return
 29749  2BCF                     __end_of_PIN_MANAGER_Initialize:	
 29750  2BCF                     __ptext113:	
 29751 ;; *************** function _TMR1_Initialize *****************
 29752 ;; Defined at:
 29753 ;;		line 64 in file "mcc_generated_files/tmr1.c"
 29754 ;; Parameters:    Size  Location     Type
 29755 ;;		None
 29756 ;; Auto vars:     Size  Location     Type
 29757 ;;		None
 29758 ;; Return value:  Size  Location     Type
 29759 ;;                  1    wreg      void 
 29760 ;; Registers used:
 29761 ;;		wreg, status,2, status,0, pclath, cstack
 29762 ;; Tracked objects:
 29763 ;;		On entry : 0/0
 29764 ;;		On exit  : 0/0
 29765 ;;		Unchanged: 0/0
 29766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29771 ;;Total ram usage:        0 bytes
 29772 ;; Hardware stack levels used:    1
 29773 ;; Hardware stack levels required when called:    3
 29774 ;; This function calls:
 29775 ;;		_TMR1_SetInterruptHandler
 29776 ;;		_TMR1_StartTimer
 29777 ;; This function is called by:
 29778 ;;		_SYSTEM_Initialize
 29779 ;; This function uses a non-reentrant model
 29780 ;;
 29781                           
 29782                           
 29783                           ;psect for function _TMR1_Initialize
 29784  2BCF                     _TMR1_Initialize:	
 29785                           
 29786                           ;tmr1.c: 69: T1CON = 0x8C;
 29787                           
 29788                           ;incstack = 0
 29789                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
 29790  2BCF  308C               	movlw	140
 29791  2BD0  0020               	movlb	0	; select bank0
 29792  2BD1  0098               	movwf	24	;volatile
 29793                           
 29794                           ;tmr1.c: 72: T1GCON = 0x01;
 29795  2BD2  3001               	movlw	1
 29796  2BD3  0099               	movwf	25	;volatile
 29797                           
 29798                           ;tmr1.c: 75: TMR1H = 0x80;
 29799  2BD4  3080               	movlw	128
 29800  2BD5  0097               	movwf	23	;volatile
 29801                           
 29802                           ;tmr1.c: 78: TMR1L = 0x00;
 29803  2BD6  0196               	clrf	22	;volatile
 29804                           
 29805                           ;tmr1.c: 81: timer1ReloadVal=(TMR1H << 8) | TMR1L;
 29806  2BD7  0817               	movf	23,w	;volatile
 29807  2BD8  0021               	movlb	1	; select bank1
 29808  2BD9  00EE               	movwf	(_timer1ReloadVal+1)^(0+128)	;volatile
 29809  2BDA  0020               	movlb	0	; select bank0
 29810  2BDB  0816               	movf	22,w	;volatile
 29811  2BDC  0021               	movlb	1	; select bank1
 29812  2BDD  00ED               	movwf	_timer1ReloadVal^(0+128)	;volatile
 29813                           
 29814                           ;tmr1.c: 84: PIR1bits.TMR1IF = 0;
 29815  2BDE  0020               	movlb	0	; select bank0
 29816  2BDF  1011               	bcf	17,0	;volatile
 29817                           
 29818                           ;tmr1.c: 87: PIE1bits.TMR1IE = 1;
 29819  2BE0  0021               	movlb	1	; select bank1
 29820  2BE1  1411               	bsf	17,0	;volatile
 29821                           
 29822                           ;tmr1.c: 90: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
 29823  2BE2  3000               	movlw	0
 29824  2BE3  01F3               	clrf	TMR1_SetInterruptHandler@InterruptHandler
 29825  2BE4  01F4               	clrf	TMR1_SetInterruptHandler@InterruptHandler+1
 29826  2BE5  2434  31AB         	fcall	_TMR1_SetInterruptHandler
 29827                           
 29828                           ;tmr1.c: 93: TMR1_StartTimer();
 29829  2BE7  2C3A               	ljmp	l8845
 29830  2BE8                     __end_of_TMR1_Initialize:	
 29831  2BE8                     __ptext112:	
 29832 ;; *************** function _WDT_Initialize *****************
 29833 ;; Defined at:
 29834 ;;		line 91 in file "mcc_generated_files/mcc.c"
 29835 ;; Parameters:    Size  Location     Type
 29836 ;;		None
 29837 ;; Auto vars:     Size  Location     Type
 29838 ;;		None
 29839 ;; Return value:  Size  Location     Type
 29840 ;;                  1    wreg      void 
 29841 ;; Registers used:
 29842 ;;		wreg
 29843 ;; Tracked objects:
 29844 ;;		On entry : 0/0
 29845 ;;		On exit  : 0/0
 29846 ;;		Unchanged: 0/0
 29847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29852 ;;Total ram usage:        0 bytes
 29853 ;; Hardware stack levels used:    1
 29854 ;; Hardware stack levels required when called:    2
 29855 ;; This function calls:
 29856 ;;		Nothing
 29857 ;; This function is called by:
 29858 ;;		_SYSTEM_Initialize
 29859 ;; This function uses a non-reentrant model
 29860 ;;
 29861                           
 29862                           
 29863                           ;psect for function _WDT_Initialize
 29864  2BE8                     _WDT_Initialize:	
 29865                           
 29866                           ;mcc.c: 94: WDTCON = 0x16;
 29867                           
 29868                           ;incstack = 0
 29869                           ; Regs used in _WDT_Initialize: [wreg]
 29870  2BE8  3016               	movlw	22
 29871  2BE9  0021               	movlb	1	; select bank1
 29872  2BEA  0097               	movwf	23	;volatile
 29873  2BEB  0008               	return
 29874  2BEC                     __end_of_WDT_Initialize:	
 29875  2BEC                     __ptext107:	
 29876 ;; *************** function _led_port_init *****************
 29877 ;; Defined at:
 29878 ;;		line 4 in file "src/driver/led.c"
 29879 ;; Parameters:    Size  Location     Type
 29880 ;;		None
 29881 ;; Auto vars:     Size  Location     Type
 29882 ;;		None
 29883 ;; Return value:  Size  Location     Type
 29884 ;;                  1    wreg      void 
 29885 ;; Registers used:
 29886 ;;		None
 29887 ;; Tracked objects:
 29888 ;;		On entry : 0/0
 29889 ;;		On exit  : 0/0
 29890 ;;		Unchanged: 0/0
 29891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29896 ;;Total ram usage:        0 bytes
 29897 ;; Hardware stack levels used:    1
 29898 ;; Hardware stack levels required when called:    2
 29899 ;; This function calls:
 29900 ;;		Nothing
 29901 ;; This function is called by:
 29902 ;;		_m_system_init
 29903 ;; This function uses a non-reentrant model
 29904 ;;
 29905                           
 29906                           
 29907                           ;psect for function _led_port_init
 29908  2BEC                     _led_port_init:	
 29909                           
 29910                           ;incstack = 0
 29911                           ; Regs used in _led_port_init: []
 29912                           ;led.c: 6: do{ do { ANSELAbits.ANSA3 = 0; } while(0); do { TRISAbits.TRISA3 = 0; } while
      +                          (0); }while(0);;
 29913  2BEC  0023               	movlb	3	; select bank3
 29914  2BED  118C               	bcf	12,3	;volatile
 29915  2BEE  0021               	movlb	1	; select bank1
 29916  2BEF  118C               	bcf	12,3	;volatile
 29917                           
 29918                           ;led.c: 7: do{ do { ANSELFbits.ANSF0 = 0; } while(0); do { TRISFbits.TRISF0 = 0; } while
      +                          (0); }while(0);;
 29919  2BF0  0028               	movlb	8	; select bank8
 29920  2BF1  100C               	bcf	12,0	;volatile
 29921  2BF2  0026               	movlb	6	; select bank6
 29922  2BF3  100C               	bcf	12,0	;volatile
 29923                           
 29924                           ;led.c: 8: do{ do { ANSELFbits.ANSF1 = 0; } while(0); do { TRISFbits.TRISF1 = 0; } while
      +                          (0); }while(0);;
 29925  2BF4  0028               	movlb	8	; select bank8
 29926  2BF5  108C               	bcf	12,1	;volatile
 29927  2BF6  0026               	movlb	6	; select bank6
 29928  2BF7  108C               	bcf	12,1	;volatile
 29929                           
 29930                           ;led.c: 9: do{ do { ANSELAbits.ANSA2 = 0; } while(0); do { TRISAbits.TRISA2 = 0; } while
      +                          (0); }while(0);;
 29931  2BF8  0023               	movlb	3	; select bank3
 29932  2BF9  110C               	bcf	12,2	;volatile
 29933  2BFA  0021               	movlb	1	; select bank1
 29934  2BFB  110C               	bcf	12,2	;volatile
 29935                           
 29936                           ;led.c: 10: do{ do { ANSELAbits.ANSA0 = 0; } while(0); do { TRISAbits.TRISA0 = 0; } whil
      +                          e(0); }while(0);;
 29937  2BFC  0023               	movlb	3	; select bank3
 29938  2BFD  100C               	bcf	12,0	;volatile
 29939  2BFE  0021               	movlb	1	; select bank1
 29940  2BFF  100C               	bcf	12,0	;volatile
 29941                           
 29942                           ;led.c: 11: do{ do { ANSELAbits.ANSA1 = 0; } while(0); do { TRISAbits.TRISA1 = 0; } whil
      +                          e(0); }while(0);;
 29943  2C00  0023               	movlb	3	; select bank3
 29944  2C01  108C               	bcf	12,1	;volatile
 29945  2C02  0021               	movlb	1	; select bank1
 29946  2C03  108C               	bcf	12,1	;volatile
 29947  2C04  0008               	return
 29948  2C05                     __end_of_led_port_init:	
 29949  2C05                     __ptext106:	
 29950 ;; *************** function _other_gpio_port_init *****************
 29951 ;; Defined at:
 29952 ;;		line 5 in file "src/driver/other-gpio.c"
 29953 ;; Parameters:    Size  Location     Type
 29954 ;;		None
 29955 ;; Auto vars:     Size  Location     Type
 29956 ;;		None
 29957 ;; Return value:  Size  Location     Type
 29958 ;;                  1    wreg      void 
 29959 ;; Registers used:
 29960 ;;		None
 29961 ;; Tracked objects:
 29962 ;;		On entry : 0/0
 29963 ;;		On exit  : 0/0
 29964 ;;		Unchanged: 0/0
 29965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 29966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 29970 ;;Total ram usage:        0 bytes
 29971 ;; Hardware stack levels used:    1
 29972 ;; Hardware stack levels required when called:    2
 29973 ;; This function calls:
 29974 ;;		Nothing
 29975 ;; This function is called by:
 29976 ;;		_m_system_init
 29977 ;; This function uses a non-reentrant model
 29978 ;;
 29979                           
 29980                           
 29981                           ;psect for function _other_gpio_port_init
 29982  2C05                     _other_gpio_port_init:	
 29983                           
 29984                           ;incstack = 0
 29985                           ; Regs used in _other_gpio_port_init: []
 29986                           ;other-gpio.c: 7: do{ do{do { TRISAbits.TRISA4 = 0; } while(0);}while(0);; do{ do { TRIS
      +                          Abits.TRISA5 = 1; } while(0);}while(0);; do{ do { TRISBbits.TRISB4 = 1; } while(0);}whil
      +                          e(0);; do{ do { TRISBbits.TRISB0 = 0; } while(0); }while(0);; do { LATDbits.LATD7 = 0; }
      +                           whi
 29987  2C05  0021               	movlb	1	; select bank1
 29988  2C06  120C               	bcf	12,4	;volatile
 29989  2C07  168C               	bsf	12,5	;volatile
 29990  2C08  160D               	bsf	13,4	;volatile
 29991  2C09  100D               	bcf	13,0	;volatile
 29992  2C0A  0022               	movlb	2	; select bank2
 29993  2C0B  138F               	bcf	15,7	;volatile
 29994  2C0C  0021               	movlb	1	; select bank1
 29995  2C0D  138F               	bcf	15,7	;volatile
 29996  2C0E  0008               	return
 29997  2C0F                     __end_of_other_gpio_port_init:	
 29998  2C0F                     __ptext120:	
 29999 ;; *************** function _EUSART1_Initialize *****************
 30000 ;; Defined at:
 30001 ;;		line 83 in file "mcc_generated_files/eusart1.c"
 30002 ;; Parameters:    Size  Location     Type
 30003 ;;		None
 30004 ;; Auto vars:     Size  Location     Type
 30005 ;;		None
 30006 ;; Return value:  Size  Location     Type
 30007 ;;                  1    wreg      void 
 30008 ;; Registers used:
 30009 ;;		wreg
 30010 ;; Tracked objects:
 30011 ;;		On entry : 0/0
 30012 ;;		On exit  : 0/0
 30013 ;;		Unchanged: 0/0
 30014 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30019 ;;Total ram usage:        0 bytes
 30020 ;; Hardware stack levels used:    1
 30021 ;; Hardware stack levels required when called:    2
 30022 ;; This function calls:
 30023 ;;		Nothing
 30024 ;; This function is called by:
 30025 ;;		_SYSTEM_Initialize
 30026 ;; This function uses a non-reentrant model
 30027 ;;
 30028                           
 30029                           
 30030                           ;psect for function _EUSART1_Initialize
 30031  2C0F                     _EUSART1_Initialize:	
 30032  2C0F                     l9281:	
 30033                           ;incstack = 0
 30034                           ; Regs used in _EUSART1_Initialize: [wreg]
 30035                           
 30036                           
 30037                           ;eusart1.c: 86: PIE1bits.RC1IE = 0;
 30038  2C0F  0021               	movlb	1	; select bank1
 30039  2C10  1291               	bcf	17,5	;volatile
 30040                           
 30041                           ;eusart1.c: 87: PIE1bits.TX1IE = 0;
 30042  2C11  1211               	bcf	17,4	;volatile
 30043                           
 30044                           ;eusart1.c: 92: BAUD1CON = 0x08;
 30045  2C12  3008               	movlw	8
 30046  2C13  0023               	movlb	3	; select bank3
 30047  2C14  009F               	movwf	31	;volatile
 30048                           
 30049                           ;eusart1.c: 95: RC1STA = 0xD0;
 30050  2C15  30D0               	movlw	208
 30051  2C16  009D               	movwf	29	;volatile
 30052                           
 30053                           ;eusart1.c: 98: TX1STA = 0x64;
 30054  2C17  3064               	movlw	100
 30055  2C18  009E               	movwf	30	;volatile
 30056                           
 30057                           ;eusart1.c: 101: SP1BRGL = 0x1F;
 30058  2C19  301F               	movlw	31
 30059  2C1A  009B               	movwf	27	;volatile
 30060                           
 30061                           ;eusart1.c: 104: SP1BRGH = 0x01;
 30062  2C1B  3001               	movlw	1
 30063  2C1C  009C               	movwf	28	;volatile
 30064  2C1D  0008               	return
 30065  2C1E                     __end_of_EUSART1_Initialize:	
 30066  2C1E                     __ptext116:	
 30067 ;; *************** function _TMR0_Initialize *****************
 30068 ;; Defined at:
 30069 ;;		line 64 in file "mcc_generated_files/tmr0.c"
 30070 ;; Parameters:    Size  Location     Type
 30071 ;;		None
 30072 ;; Auto vars:     Size  Location     Type
 30073 ;;		None
 30074 ;; Return value:  Size  Location     Type
 30075 ;;                  1    wreg      void 
 30076 ;; Registers used:
 30077 ;;		wreg, status,2, status,0, pclath, cstack
 30078 ;; Tracked objects:
 30079 ;;		On entry : 0/0
 30080 ;;		On exit  : 0/0
 30081 ;;		Unchanged: 0/0
 30082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30084 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30086 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30087 ;;Total ram usage:        1 bytes
 30088 ;; Hardware stack levels used:    1
 30089 ;; Hardware stack levels required when called:    3
 30090 ;; This function calls:
 30091 ;;		_TMR0_SetInterruptHandler
 30092 ;; This function is called by:
 30093 ;;		_SYSTEM_Initialize
 30094 ;; This function uses a non-reentrant model
 30095 ;;
 30096                           
 30097                           
 30098                           ;psect for function _TMR0_Initialize
 30099  2C1E                     _TMR0_Initialize:	
 30100                           
 30101                           ;tmr0.c: 69: OPTION_REG = (OPTION_REG & 0xC0) | 0xC7 & 0x3F;
 30102                           
 30103                           ;incstack = 0
 30104                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
 30105  2C1E  0021               	movlb	1	; select bank1
 30106  2C1F  0815               	movf	21,w	;volatile
 30107  2C20  39C0               	andlw	192
 30108  2C21  3807               	iorlw	7
 30109  2C22  0095               	movwf	21	;volatile
 30110                           
 30111                           ;tmr0.c: 72: TMR0 = 0x94;
 30112  2C23  3094               	movlw	148
 30113  2C24  0020               	movlb	0	; select bank0
 30114  2C25  0095               	movwf	21	;volatile
 30115                           
 30116                           ;tmr0.c: 75: timer0ReloadVal= 148;
 30117  2C26  00F5               	movwf	??_TMR0_Initialize
 30118  2C27  0023               	movlb	3	; select bank3
 30119  2C28  00C6               	movwf	_timer0ReloadVal^(0+384)	;volatile
 30120                           
 30121                           ;tmr0.c: 78: INTCONbits.TMR0IF = 0;
 30122  2C29  110B               	bcf	11,2	;volatile
 30123                           
 30124                           ;tmr0.c: 81: INTCONbits.TMR0IE = 1;
 30125  2C2A  168B               	bsf	11,5	;volatile
 30126                           
 30127                           ;tmr0.c: 84: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
 30128  2C2B  01F3               	clrf	TMR0_SetInterruptHandler@InterruptHandler
 30129  2C2C  01F4               	clrf	TMR0_SetInterruptHandler@InterruptHandler+1
 30130  2C2D  2C2E               	ljmp	l8847
 30131  2C2E                     __end_of_TMR0_Initialize:	
 30132  2C2E                     __ptext117:	
 30133 ;; *************** function _TMR0_SetInterruptHandler *****************
 30134 ;; Defined at:
 30135 ;;		line 138 in file "mcc_generated_files/tmr0.c"
 30136 ;; Parameters:    Size  Location     Type
 30137 ;;  InterruptHan    2    3[COMMON] PTR void 
 30138 ;;		 -> TMR0_DefaultInterruptHandler(1), 
 30139 ;; Auto vars:     Size  Location     Type
 30140 ;;		None
 30141 ;; Return value:  Size  Location     Type
 30142 ;;                  1    wreg      void 
 30143 ;; Registers used:
 30144 ;;		wreg
 30145 ;; Tracked objects:
 30146 ;;		On entry : 0/0
 30147 ;;		On exit  : 0/0
 30148 ;;		Unchanged: 0/0
 30149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30150 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30153 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30154 ;;Total ram usage:        2 bytes
 30155 ;; Hardware stack levels used:    1
 30156 ;; Hardware stack levels required when called:    2
 30157 ;; This function calls:
 30158 ;;		Nothing
 30159 ;; This function is called by:
 30160 ;;		_TMR0_Initialize
 30161 ;; This function uses a non-reentrant model
 30162 ;;
 30163                           
 30164                           
 30165                           ;psect for function _TMR0_SetInterruptHandler
 30166  2C2E                     _TMR0_SetInterruptHandler:	
 30167  2C2E                     l8847:	
 30168                           ;incstack = 0
 30169                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
 30170                           
 30171                           
 30172                           ;tmr0.c: 139: TMR0_InterruptHandler = InterruptHandler;
 30173  2C2E  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
 30174  2C2F  0023               	movlb	3	; select bank3
 30175  2C30  00C3               	movwf	(_TMR0_InterruptHandler+1)^(0+384)
 30176  2C31  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
 30177  2C32  00C2               	movwf	_TMR0_InterruptHandler^(0+384)
 30178  2C33  0008               	return
 30179  2C34                     __end_of_TMR0_SetInterruptHandler:	
 30180  2C34                     __ptext115:	
 30181 ;; *************** function _TMR1_SetInterruptHandler *****************
 30182 ;; Defined at:
 30183 ;;		line 175 in file "mcc_generated_files/tmr1.c"
 30184 ;; Parameters:    Size  Location     Type
 30185 ;;  InterruptHan    2    3[COMMON] PTR void 
 30186 ;;		 -> TMR1_DefaultInterruptHandler(1), 
 30187 ;; Auto vars:     Size  Location     Type
 30188 ;;		None
 30189 ;; Return value:  Size  Location     Type
 30190 ;;                  1    wreg      void 
 30191 ;; Registers used:
 30192 ;;		wreg
 30193 ;; Tracked objects:
 30194 ;;		On entry : 0/0
 30195 ;;		On exit  : 0/0
 30196 ;;		Unchanged: 0/0
 30197 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30198 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30199 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30201 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30202 ;;Total ram usage:        2 bytes
 30203 ;; Hardware stack levels used:    1
 30204 ;; Hardware stack levels required when called:    2
 30205 ;; This function calls:
 30206 ;;		Nothing
 30207 ;; This function is called by:
 30208 ;;		_TMR1_Initialize
 30209 ;; This function uses a non-reentrant model
 30210 ;;
 30211                           
 30212                           
 30213                           ;psect for function _TMR1_SetInterruptHandler
 30214  2C34                     _TMR1_SetInterruptHandler:	
 30215                           
 30216                           ;tmr1.c: 176: TMR1_InterruptHandler = InterruptHandler;
 30217                           
 30218                           ;incstack = 0
 30219                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
 30220  2C34  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
 30221  2C35  0023               	movlb	3	; select bank3
 30222  2C36  00C5               	movwf	(_TMR1_InterruptHandler+1)^(0+384)
 30223  2C37  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
 30224  2C38  00C4               	movwf	_TMR1_InterruptHandler^(0+384)
 30225  2C39  0008               	return
 30226  2C3A                     __end_of_TMR1_SetInterruptHandler:	
 30227  2C3A                     __ptext114:	
 30228 ;; *************** function _TMR1_StartTimer *****************
 30229 ;; Defined at:
 30230 ;;		line 96 in file "mcc_generated_files/tmr1.c"
 30231 ;; Parameters:    Size  Location     Type
 30232 ;;		None
 30233 ;; Auto vars:     Size  Location     Type
 30234 ;;		None
 30235 ;; Return value:  Size  Location     Type
 30236 ;;                  1    wreg      void 
 30237 ;; Registers used:
 30238 ;;		None
 30239 ;; Tracked objects:
 30240 ;;		On entry : 0/0
 30241 ;;		On exit  : 0/0
 30242 ;;		Unchanged: 0/0
 30243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30248 ;;Total ram usage:        0 bytes
 30249 ;; Hardware stack levels used:    1
 30250 ;; Hardware stack levels required when called:    2
 30251 ;; This function calls:
 30252 ;;		Nothing
 30253 ;; This function is called by:
 30254 ;;		_TMR1_Initialize
 30255 ;; This function uses a non-reentrant model
 30256 ;;
 30257                           
 30258                           
 30259                           ;psect for function _TMR1_StartTimer
 30260  2C3A                     _TMR1_StartTimer:	
 30261  2C3A                     l8845:	
 30262                           ;incstack = 0
 30263                           ; Regs used in _TMR1_StartTimer: []
 30264                           
 30265                           
 30266                           ;tmr1.c: 99: T1CONbits.TMR1ON = 1;
 30267  2C3A  0020               	movlb	0	; select bank0
 30268  2C3B  1418               	bsf	24,0	;volatile
 30269  2C3C  0008               	return
 30270  2C3D                     __end_of_TMR1_StartTimer:	
 30271  2C3D                     __ptext108:	
 30272 ;; *************** function _lcd_init *****************
 30273 ;; Defined at:
 30274 ;;		line 250 in file "src/driver/lcd.c"
 30275 ;; Parameters:    Size  Location     Type
 30276 ;;		None
 30277 ;; Auto vars:     Size  Location     Type
 30278 ;;		None
 30279 ;; Return value:  Size  Location     Type
 30280 ;;                  1    wreg      void 
 30281 ;; Registers used:
 30282 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30283 ;; Tracked objects:
 30284 ;;		On entry : 0/0
 30285 ;;		On exit  : 0/0
 30286 ;;		Unchanged: 0/0
 30287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30292 ;;Total ram usage:        0 bytes
 30293 ;; Hardware stack levels used:    1
 30294 ;; Hardware stack levels required when called:    4
 30295 ;; This function calls:
 30296 ;;		_lcd_config
 30297 ;; This function is called by:
 30298 ;;		_m_system_init
 30299 ;; This function uses a non-reentrant model
 30300 ;;
 30301                           
 30302                           
 30303                           ;psect for function _lcd_init
 30304  2C3D                     _lcd_init:	
 30305                           
 30306                           ;lcd.c: 253: lcd_config();
 30307                           
 30308                           ;incstack = 0
 30309                           ; Regs used in _lcd_init: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30310  2C3D  2441               	fcall	_lcd_config
 30311                           
 30312                           ;lcd.c: 254: do { LATAbits.LATA1 = 1; } while(0);;
 30313  2C3E  0022               	movlb	2	; select bank2
 30314  2C3F  148C               	bsf	12,1	;volatile
 30315  2C40  0008               	return
 30316  2C41                     __end_of_lcd_init:	
 30317  2C41                     __ptext109:	
 30318 ;; *************** function _lcd_config *****************
 30319 ;; Defined at:
 30320 ;;		line 211 in file "src/driver/lcd.c"
 30321 ;; Parameters:    Size  Location     Type
 30322 ;;		None
 30323 ;; Auto vars:     Size  Location     Type
 30324 ;;		None
 30325 ;; Return value:  Size  Location     Type
 30326 ;;                  1    wreg      void 
 30327 ;; Registers used:
 30328 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30329 ;; Tracked objects:
 30330 ;;		On entry : 0/0
 30331 ;;		On exit  : 0/0
 30332 ;;		Unchanged: 0/0
 30333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30334 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30337 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30338 ;;Total ram usage:        0 bytes
 30339 ;; Hardware stack levels used:    1
 30340 ;; Hardware stack levels required when called:    3
 30341 ;; This function calls:
 30342 ;;		_lcd_disp_all
 30343 ;; This function is called by:
 30344 ;;		_lcd_init
 30345 ;; This function uses a non-reentrant model
 30346 ;;
 30347                           
 30348                           
 30349                           ;psect for function _lcd_config
 30350  2C41                     _lcd_config:	
 30351                           
 30352                           ;lcd.c: 215: LCDPSbits.WFT = 0;
 30353                           
 30354                           ;incstack = 0
 30355                           ; Regs used in _lcd_config: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 30356  2C41  002F               	movlb	15	; select bank15
 30357  2C42  1392               	bcf	18,7	;volatile
 30358                           
 30359                           ;lcd.c: 216: LCDPSbits.BIASMD = 0;
 30360  2C43  1312               	bcf	18,6	;volatile
 30361                           
 30362                           ;lcd.c: 217: LCDPSbits.LP=0x07;
 30363  2C44  0812               	movf	18,w	;volatile
 30364  2C45  39F0               	andlw	-16
 30365  2C46  3807               	iorlw	7
 30366  2C47  0092               	movwf	18	;volatile
 30367                           
 30368                           ;lcd.c: 225: LCDSE0 = 0x1f;
 30369  2C48  301F               	movlw	31
 30370  2C49  0098               	movwf	24	;volatile
 30371                           
 30372                           ;lcd.c: 226: LCDSE1 = 0x00;
 30373  2C4A  0199               	clrf	25	;volatile
 30374                           
 30375                           ;lcd.c: 227: LCDSE2 = 0xf0;
 30376  2C4B  30F0               	movlw	240
 30377  2C4C  009A               	movwf	26	;volatile
 30378                           
 30379                           ;lcd.c: 228: LCDSE3 = 0x87;
 30380  2C4D  3087               	movlw	135
 30381  2C4E  009B               	movwf	27	;volatile
 30382                           
 30383                           ;lcd.c: 229: LCDSE4 = 0x00;
 30384  2C4F  019C               	clrf	28	;volatile
 30385                           
 30386                           ;lcd.c: 230: LCDSE5 = 0b00111100;
 30387  2C50  303C               	movlw	60
 30388  2C51  009D               	movwf	29	;volatile
 30389                           
 30390                           ;lcd.c: 234: lcd_disp_all(0x00);;
 30391  2C52  3000               	movlw	0
 30392  2C53  319A  2227  31AB   	fcall	_lcd_disp_all
 30393                           
 30394                           ;lcd.c: 240: LCDRL=0xFF;
 30395  2C56  30FF               	movlw	255
 30396  2C57  002F               	movlb	15	; select bank15
 30397  2C58  0095               	movwf	21	;volatile
 30398                           
 30399                           ;lcd.c: 241: LCDREF= 0x80 ;
 30400  2C59  3080               	movlw	128
 30401  2C5A  0093               	movwf	19	;volatile
 30402                           
 30403                           ;lcd.c: 247: lcd_disp_all(0x00);;
 30404  2C5B  3000               	movlw	0
 30405  2C5C  319A  2227         	fcall	_lcd_disp_all
 30406                           
 30407                           ;lcd.c: 248: do{LCDCON=0x8F;}while(0);;
 30408  2C5E  308F               	movlw	143
 30409  2C5F  002F               	movlb	15	; select bank15
 30410  2C60  0091               	movwf	17	;volatile
 30411  2C61  0008               	return
 30412  2C62                     __end_of_lcd_config:	
 30413                           
 30414                           	psect	text122
 30415  35E6                     __ptext122:	
 30416 ;; *************** function _valve_on *****************
 30417 ;; Defined at:
 30418 ;;		line 9 in file "src/driver/other-gpio.c"
 30419 ;; Parameters:    Size  Location     Type
 30420 ;;		None
 30421 ;; Auto vars:     Size  Location     Type
 30422 ;;		None
 30423 ;; Return value:  Size  Location     Type
 30424 ;;                  1    wreg      void 
 30425 ;; Registers used:
 30426 ;;		wreg, status,2, status,0
 30427 ;; Tracked objects:
 30428 ;;		On entry : 0/0
 30429 ;;		On exit  : 0/0
 30430 ;;		Unchanged: 0/0
 30431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30435 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30436 ;;Total ram usage:        1 bytes
 30437 ;; Hardware stack levels used:    1
 30438 ;; Hardware stack levels required when called:    2
 30439 ;; This function calls:
 30440 ;;		Nothing
 30441 ;; This function is called by:
 30442 ;;		_in_app_vavle_on
 30443 ;; This function uses a non-reentrant model
 30444 ;;
 30445                           
 30446                           
 30447                           ;psect for function _valve_on
 30448  35E6                     _valve_on:	
 30449  35E6                     l10215:	
 30450                           ;incstack = 0
 30451                           ; Regs used in _valve_on: [wreg+status,2+status,0]
 30452                           
 30453                           
 30454                           ;other-gpio.c: 11: if(valveStatus== VALVE_CLOSEING || valveStatus==VALVE_OPENING)return;
 30455  35E6  3004               	movlw	4
 30456  35E7  0021               	movlb	1	; select bank1
 30457  35E8  063C               	xorwf	_valveStatus^(0+128),w
 30458  35E9  1903               	btfsc	3,2
 30459  35EA  0008               	return
 30460  35EB  3003               	movlw	3
 30461  35EC  063C               	xorwf	_valveStatus^(0+128),w
 30462  35ED  1903               	btfsc	3,2
 30463  35EE  0008               	return
 30464                           
 30465                           ;other-gpio.c: 12: do { LATDbits.LATD7 = 0; } while(0);
 30466  35EF  0022               	movlb	2	; select bank2
 30467  35F0  138F               	bcf	15,7	;volatile
 30468                           
 30469                           ;other-gpio.c: 13: do { LATBbits.LATB0 = 0; } while(0);
 30470  35F1  100D               	bcf	13,0	;volatile
 30471                           
 30472                           ;other-gpio.c: 14: do { LATDbits.LATD7 = 1; } while(0);
 30473  35F2  178F               	bsf	15,7	;volatile
 30474                           
 30475                           ;other-gpio.c: 15: valveStatus=VALVE_OPENING;
 30476  35F3  3003               	movlw	3
 30477  35F4  00F3               	movwf	??_valve_on
 30478  35F5  0021               	movlb	1	; select bank1
 30479  35F6  00BC               	movwf	_valveStatus^(0+128)
 30480                           
 30481                           ;other-gpio.c: 16: valveTimer=0;
 30482  35F7  01BD               	clrf	_valveTimer^(0+128)
 30483  35F8  0008               	return
 30484  35F9                     __end_of_valve_on:	
 30485                           
 30486                           	psect	text123
 30487  0039                     __ptext123:	
 30488 ;; *************** function _flow_sampling_process *****************
 30489 ;; Defined at:
 30490 ;;		line 137 in file "src/app/flow.c"
 30491 ;; Parameters:    Size  Location     Type
 30492 ;;		None
 30493 ;; Auto vars:     Size  Location     Type
 30494 ;;  i               1   31[BANK0 ] unsigned char 
 30495 ;; Return value:  Size  Location     Type
 30496 ;;                  1    wreg      void 
 30497 ;; Registers used:
 30498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30499 ;; Tracked objects:
 30500 ;;		On entry : 0/0
 30501 ;;		On exit  : 0/0
 30502 ;;		Unchanged: 0/0
 30503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30508 ;;Total ram usage:        2 bytes
 30509 ;; Hardware stack levels used:    1
 30510 ;; Hardware stack levels required when called:    7
 30511 ;; This function calls:
 30512 ;;		_adc_mcp3241_read_convert_16
 30513 ;;		_adc_mcp3241_start_convert_16
 30514 ;;		_app_flow_adc_2_flow
 30515 ;;		_app_flow_lookup
 30516 ;;		_app_flow_money_off
 30517 ;;		_app_flow_money_warning
 30518 ;;		_app_flow_rt_balance_money_cal
 30519 ;;		_app_flow_rt_volume_cal
 30520 ;; This function is called by:
 30521 ;;		_main
 30522 ;; This function uses a non-reentrant model
 30523 ;;
 30524                           
 30525                           
 30526                           ;psect for function _flow_sampling_process
 30527  0039                     _flow_sampling_process:	
 30528                           
 30529                           ;flow.c: 138: uint8_t i;
 30530                           ;flow.c: 139: Event &= ~(uint8_t)(0x01<<1);
 30531                           
 30532                           ;incstack = 0
 30533                           ; Regs used in _flow_sampling_process: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 30534  0039  30FD               	movlw	253
 30535  003A  0020               	movlb	0	; select bank0
 30536  003B  00BE               	movwf	??_flow_sampling_process
 30537  003C  0021               	movlb	1	; select bank1
 30538  003D  05B6               	andwf	_Event^(0+128),f
 30539                           
 30540                           ;flow.c: 140: adcvalue = adc_mcp3241_read_convert_16(&i);
 30541  003E  303F               	movlw	(low (flow_sampling_process@i| 0))& (0+255)
 30542  003F  2079  3180         	fcall	_adc_mcp3241_read_convert_16
 30543  0041  0020               	movlb	0	; select bank0
 30544  0042  0823               	movf	?_adc_mcp3241_read_convert_16+1,w
 30545  0043  0021               	movlb	1	; select bank1
 30546  0044  00AF               	movwf	(_adcvalue+1)^(0+128)	;volatile
 30547  0045  0020               	movlb	0	; select bank0
 30548  0046  0822               	movf	?_adc_mcp3241_read_convert_16,w
 30549  0047  0021               	movlb	1	; select bank1
 30550  0048  00AE               	movwf	_adcvalue^(0+128)	;volatile
 30551                           
 30552                           ;flow.c: 141: __nop();
 30553  0049  0000               	nop
 30554                           
 30555                           ;flow.c: 142: if ((i & 0x80) == 0) {
 30556  004A  0020               	movlb	0	; select bank0
 30557  004B  1BBF               	btfsc	flow_sampling_process@i,7
 30558  004C  2855               	goto	l15129
 30559                           
 30560                           ;flow.c: 143: __nop();
 30561  004D  0000               	nop
 30562                           
 30563                           ;flow.c: 145: adcAverageValue=adcvalue;
 30564  004E  0021               	movlb	1	; select bank1
 30565  004F  082F               	movf	(_adcvalue+1)^(0+128),w	;volatile
 30566  0050  00AB               	movwf	(_adcAverageValue+1)^(0+128)	;volatile
 30567  0051  082E               	movf	_adcvalue^(0+128),w	;volatile
 30568  0052  00AA               	movwf	_adcAverageValue^(0+128)	;volatile
 30569                           
 30570                           ;flow.c: 146: __nop();
 30571  0053  0000               	nop
 30572                           
 30573                           ;flow.c: 147: } else {
 30574  0054  2858               	goto	l15131
 30575  0055                     l15129:	
 30576                           
 30577                           ;flow.c: 148: adcvalue=0;
 30578  0055  0021               	movlb	1	; select bank1
 30579  0056  01AE               	clrf	_adcvalue^(0+128)	;volatile
 30580  0057  01AF               	clrf	(_adcvalue+1)^(0+128)	;volatile
 30581  0058                     l15131:	
 30582                           
 30583                           ;flow.c: 149: }
 30584                           ;flow.c: 150: i = app_flow_lookup(adcvalue);
 30585  0058  0021               	movlb	1	; select bank1
 30586  0059  082F               	movf	(_adcvalue+1)^(0+128),w	;volatile
 30587  005A  00F4               	movwf	app_flow_lookup@adcValue+1
 30588  005B  082E               	movf	_adcvalue^(0+128),w	;volatile
 30589  005C  00F3               	movwf	app_flow_lookup@adcValue
 30590  005D  234C  3180         	fcall	_app_flow_lookup
 30591  005F  0020               	movlb	0	; select bank0
 30592  0060  00BE               	movwf	??_flow_sampling_process
 30593  0061  00BF               	movwf	flow_sampling_process@i
 30594                           
 30595                           ;flow.c: 151: flow = app_flow_adc_2_flow(i);
 30596  0062  21A0               	fcall	_app_flow_adc_2_flow
 30597  0063  0020               	movlb	0	; select bank0
 30598  0064  082E               	movf	?_app_flow_adc_2_flow+1,w
 30599  0065  0021               	movlb	1	; select bank1
 30600  0066  00B1               	movwf	(_flow+1)^(0+128)	;volatile
 30601  0067  0020               	movlb	0	; select bank0
 30602  0068  082D               	movf	?_app_flow_adc_2_flow,w
 30603  0069  0021               	movlb	1	; select bank1
 30604  006A  00B0               	movwf	_flow^(0+128)	;volatile
 30605                           
 30606                           ;flow.c: 152: app_flow_rt_volume_cal();
 30607  006B  31A3  23B4  3180   	fcall	_app_flow_rt_volume_cal
 30608                           
 30609                           ;flow.c: 153: app_flow_rt_balance_money_cal();
 30610  006E  3187  2740  3180   	fcall	_app_flow_rt_balance_money_cal
 30611                           
 30612                           ;flow.c: 156: app_flow_money_warning();
 30613  0071  23FD  3180         	fcall	_app_flow_money_warning
 30614                           
 30615                           ;flow.c: 157: app_flow_money_off();
 30616  0073  23D0  3180         	fcall	_app_flow_money_off
 30617                           
 30618                           ;flow.c: 159: adc_mcp3241_start_convert_16(2, 0);
 30619  0075  0020               	movlb	0	; select bank0
 30620  0076  3002               	movlw	2
 30621  0077  01A2               	clrf	adc_mcp3241_start_convert_16@g
 30622  0078  28B7               	ljmp	_adc_mcp3241_start_convert_16
 30623  0079                     __end_of_flow_sampling_process:	
 30624  0079                     __ptext138:	
 30625 ;; *************** function _adc_mcp3241_read_convert_16 *****************
 30626 ;; Defined at:
 30627 ;;		line 27 in file "src/driver/adc-mcp3421.c"
 30628 ;; Parameters:    Size  Location     Type
 30629 ;;  sta             1    wreg     PTR unsigned char 
 30630 ;;		 -> flow_sampling_process@i(1), 
 30631 ;; Auto vars:     Size  Location     Type
 30632 ;;  sta             1    6[BANK0 ] PTR unsigned char 
 30633 ;;		 -> flow_sampling_process@i(1), 
 30634 ;;  t16             2    7[BANK0 ] volatile unsigned int 
 30635 ;; Return value:  Size  Location     Type
 30636 ;;                  2    2[BANK0 ] unsigned int 
 30637 ;; Registers used:
 30638 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 30639 ;; Tracked objects:
 30640 ;;		On entry : 0/0
 30641 ;;		On exit  : 0/0
 30642 ;;		Unchanged: 0/0
 30643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30644 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30645 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 30646 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30647 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0
 30648 ;;Total ram usage:        7 bytes
 30649 ;; Hardware stack levels used:    1
 30650 ;; Hardware stack levels required when called:    6
 30651 ;; This function calls:
 30652 ;;		_iic_received_byte_if_ack
 30653 ;;		_iic_send_byte
 30654 ;;		_iic_start
 30655 ;;		_iic_stop
 30656 ;; This function is called by:
 30657 ;;		_flow_sampling_process
 30658 ;; This function uses a non-reentrant model
 30659 ;;
 30660                           
 30661                           
 30662                           ;psect for function _adc_mcp3241_read_convert_16
 30663  0079                     _adc_mcp3241_read_convert_16:	
 30664                           
 30665                           ;incstack = 0
 30666                           ; Regs used in _adc_mcp3241_read_convert_16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 30667                           ;adc_mcp3241_read_convert_16@sta stored from wreg
 30668  0079  0020               	movlb	0	; select bank0
 30669  007A  00A6               	movwf	adc_mcp3241_read_convert_16@sta
 30670                           
 30671                           ;adc-mcp3421.c: 29: volatile uint16_t t16=0;
 30672  007B  01A7               	clrf	adc_mcp3241_read_convert_16@t16	;volatile
 30673  007C  01A8               	clrf	adc_mcp3241_read_convert_16@t16+1	;volatile
 30674                           
 30675                           ;adc-mcp3421.c: 30: iic_start();
 30676  007D  210C  3180         	fcall	_iic_start
 30677                           
 30678                           ;adc-mcp3421.c: 31: iic_send_byte((0xd0) | 0x01);
 30679  007F  30D1               	movlw	209
 30680  0080  20DF  3180         	fcall	_iic_send_byte
 30681                           
 30682                           ;adc-mcp3421.c: 32: t16 |= iic_received_byte_if_ack(IIC_ACK);
 30683  0082  3000               	movlw	0
 30684  0083  20AA  3180         	fcall	_iic_received_byte_if_ack
 30685  0085  0020               	movlb	0	; select bank0
 30686  0086  00A4               	movwf	??_adc_mcp3241_read_convert_16
 30687  0087  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 30688  0088  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 30689  0089  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 30690  008A  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 30691                           
 30692                           ;adc-mcp3421.c: 33: t16 <<=8;
 30693  008B  3008               	movlw	8
 30694  008C                     u12905:	
 30695  008C  35A7               	lslf	adc_mcp3241_read_convert_16@t16,f	;volatile
 30696  008D  0DA8               	rlf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 30697  008E  0B89               	decfsz	9,f
 30698  008F  288C               	goto	u12905
 30699                           
 30700                           ;adc-mcp3421.c: 34: t16 |= iic_received_byte_if_ack(IIC_ACK);
 30701  0090  3000               	movlw	0
 30702  0091  20AA  3180         	fcall	_iic_received_byte_if_ack
 30703  0093  0020               	movlb	0	; select bank0
 30704  0094  00A4               	movwf	??_adc_mcp3241_read_convert_16
 30705  0095  01A5               	clrf	??_adc_mcp3241_read_convert_16+1
 30706  0096  04A7               	iorwf	adc_mcp3241_read_convert_16@t16,f	;volatile
 30707  0097  0825               	movf	??_adc_mcp3241_read_convert_16+1,w
 30708  0098  04A8               	iorwf	adc_mcp3241_read_convert_16@t16+1,f	;volatile
 30709                           
 30710                           ;adc-mcp3421.c: 35: *sta=iic_received_byte_if_ack(IIC_NACK);
 30711  0099  3001               	movlw	1
 30712  009A  20AA  3180         	fcall	_iic_received_byte_if_ack
 30713  009C  0020               	movlb	0	; select bank0
 30714  009D  00A4               	movwf	??_adc_mcp3241_read_convert_16
 30715  009E  0826               	movf	adc_mcp3241_read_convert_16@sta,w
 30716  009F  0086               	movwf	6
 30717  00A0  0187               	clrf	7
 30718  00A1  0824               	movf	??_adc_mcp3241_read_convert_16,w
 30719  00A2  0081               	movwf	1
 30720                           
 30721                           ;adc-mcp3421.c: 36: iic_stop();
 30722  00A3  214A               	fcall	_iic_stop
 30723                           
 30724                           ;adc-mcp3421.c: 38: return t16;
 30725  00A4  0020               	movlb	0	; select bank0
 30726  00A5  0828               	movf	adc_mcp3241_read_convert_16@t16+1,w	;volatile
 30727  00A6  00A3               	movwf	?_adc_mcp3241_read_convert_16+1
 30728  00A7  0827               	movf	adc_mcp3241_read_convert_16@t16,w	;volatile
 30729  00A8  00A2               	movwf	?_adc_mcp3241_read_convert_16
 30730  00A9  0008               	return
 30731  00AA                     __end_of_adc_mcp3241_read_convert_16:	
 30732  00AA                     __ptext144:	
 30733 ;; *************** function _iic_received_byte_if_ack *****************
 30734 ;; Defined at:
 30735 ;;		line 133 in file "src/driver/i2c.c"
 30736 ;; Parameters:    Size  Location     Type
 30737 ;;  ack             1    wreg     unsigned char 
 30738 ;; Auto vars:     Size  Location     Type
 30739 ;;  ack             1    0[BANK0 ] unsigned char 
 30740 ;;  ret             1    1[BANK0 ] unsigned char 
 30741 ;; Return value:  Size  Location     Type
 30742 ;;                  1    wreg      unsigned char 
 30743 ;; Registers used:
 30744 ;;		wreg, status,2, status,0, pclath, cstack
 30745 ;; Tracked objects:
 30746 ;;		On entry : 0/0
 30747 ;;		On exit  : 0/0
 30748 ;;		Unchanged: 0/0
 30749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30752 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30753 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30754 ;;Total ram usage:        3 bytes
 30755 ;; Hardware stack levels used:    1
 30756 ;; Hardware stack levels required when called:    3
 30757 ;; This function calls:
 30758 ;;		_iic_received_byte
 30759 ;;		_iic_send_ack
 30760 ;; This function is called by:
 30761 ;;		_adc_mcp3241_read_convert_16
 30762 ;;		_iic_read_byte
 30763 ;; This function uses a non-reentrant model
 30764 ;;
 30765                           
 30766                           
 30767                           ;psect for function _iic_received_byte_if_ack
 30768  00AA                     _iic_received_byte_if_ack:	
 30769                           
 30770                           ;incstack = 0
 30771                           ; Regs used in _iic_received_byte_if_ack: [wreg+status,2+status,0+pclath+cstack]
 30772                           ;iic_received_byte_if_ack@ack stored from wreg
 30773  00AA  0020               	movlb	0	; select bank0
 30774  00AB  00A0               	movwf	iic_received_byte_if_ack@ack
 30775                           
 30776                           ;i2c.c: 135: uint8_t ret=0;
 30777  00AC  01A1               	clrf	iic_received_byte_if_ack@ret
 30778                           
 30779                           ;i2c.c: 136: ret=iic_received_byte();
 30780  00AD  2122  3180         	fcall	_iic_received_byte
 30781  00AF  00F6               	movwf	??_iic_received_byte_if_ack
 30782  00B0  0020               	movlb	0	; select bank0
 30783  00B1  00A1               	movwf	iic_received_byte_if_ack@ret
 30784                           
 30785                           ;i2c.c: 137: iic_send_ack(ack);
 30786  00B2  0820               	movf	iic_received_byte_if_ack@ack,w
 30787  00B3  215F               	fcall	_iic_send_ack
 30788                           
 30789                           ;i2c.c: 138: return ret;
 30790  00B4  0020               	movlb	0	; select bank0
 30791  00B5  0821               	movf	iic_received_byte_if_ack@ret,w
 30792  00B6  0008               	return
 30793  00B7                     __end_of_iic_received_byte_if_ack:	
 30794  00B7                     __ptext137:	
 30795 ;; *************** function _adc_mcp3241_start_convert_16 *****************
 30796 ;; Defined at:
 30797 ;;		line 11 in file "src/driver/adc-mcp3421.c"
 30798 ;; Parameters:    Size  Location     Type
 30799 ;;  b               1    wreg     unsigned char 
 30800 ;;  g               1    2[BANK0 ] unsigned char 
 30801 ;; Auto vars:     Size  Location     Type
 30802 ;;  b               1    4[BANK0 ] unsigned char 
 30803 ;;  t8              1    5[BANK0 ] unsigned char 
 30804 ;; Return value:  Size  Location     Type
 30805 ;;                  1    wreg      void 
 30806 ;; Registers used:
 30807 ;;		wreg, status,2, status,0, pclath, cstack
 30808 ;; Tracked objects:
 30809 ;;		On entry : 0/0
 30810 ;;		On exit  : 0/0
 30811 ;;		Unchanged: 0/0
 30812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30813 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30814 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30815 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0
 30816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 30817 ;;Total ram usage:        4 bytes
 30818 ;; Hardware stack levels used:    1
 30819 ;; Hardware stack levels required when called:    6
 30820 ;; This function calls:
 30821 ;;		_iic_send_byte
 30822 ;;		_iic_start
 30823 ;;		_iic_stop
 30824 ;; This function is called by:
 30825 ;;		_flow_sampling_process
 30826 ;; This function uses a non-reentrant model
 30827 ;;
 30828                           
 30829                           
 30830                           ;psect for function _adc_mcp3241_start_convert_16
 30831  00B7                     _adc_mcp3241_start_convert_16:	
 30832                           
 30833                           ;incstack = 0
 30834                           ; Regs used in _adc_mcp3241_start_convert_16: [wreg+status,2+status,0+pclath+cstack]
 30835                           ;adc_mcp3241_start_convert_16@b stored from wreg
 30836  00B7  0020               	movlb	0	; select bank0
 30837  00B8  00A4               	movwf	adc_mcp3241_start_convert_16@b
 30838                           
 30839                           ;adc-mcp3421.c: 13: uint8_t t8=b;
 30840  00B9  00A3               	movwf	??_adc_mcp3241_start_convert_16
 30841  00BA  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 30842                           
 30843                           ;adc-mcp3421.c: 14: do{do { TRISDbits.TRISD6 = 0; } while(0);}while(0);;
 30844  00BB  0021               	movlb	1	; select bank1
 30845  00BC  130F               	bcf	15,6	;volatile
 30846                           
 30847                           ;adc-mcp3421.c: 15: iic_start();
 30848  00BD  210C  3180         	fcall	_iic_start
 30849                           
 30850                           ;adc-mcp3421.c: 17: iic_send_byte((0xd0));
 30851  00BF  30D0               	movlw	208
 30852  00C0  20DF  3180         	fcall	_iic_send_byte
 30853                           
 30854                           ;adc-mcp3421.c: 18: if(t8>=2)t8=2;
 30855  00C2  3002               	movlw	2
 30856  00C3  0020               	movlb	0	; select bank0
 30857  00C4  0225               	subwf	adc_mcp3241_start_convert_16@t8,w
 30858  00C5  1C03               	skipc
 30859  00C6  28CB               	goto	L15
 30860  00C7  3002               	movlw	2
 30861  00C8  00A3               	movwf	??_adc_mcp3241_start_convert_16
 30862  00C9  00A5               	movwf	adc_mcp3241_start_convert_16@t8
 30863                           
 30864                           ;adc-mcp3421.c: 19: t8<<=2;
 30865  00CA  1003               	clrc
 30866  00CB                     L15:	
 30867  00CB  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 30868  00CC  1003               	clrc
 30869  00CD  0DA5               	rlf	adc_mcp3241_start_convert_16@t8,f
 30870                           
 30871                           ;adc-mcp3421.c: 20: t8 |= (g & 0x03);
 30872  00CE  0822               	movf	adc_mcp3241_start_convert_16@g,w
 30873  00CF  3903               	andlw	3
 30874  00D0  00A3               	movwf	??_adc_mcp3241_start_convert_16
 30875  00D1  04A5               	iorwf	adc_mcp3241_start_convert_16@t8,f
 30876                           
 30877                           ;adc-mcp3421.c: 21: iic_send_byte(0x80 | t8);
 30878  00D2  0825               	movf	adc_mcp3241_start_convert_16@t8,w
 30879  00D3  3880               	iorlw	128
 30880  00D4  20DF  3180         	fcall	_iic_send_byte
 30881                           
 30882                           ;adc-mcp3421.c: 22: iic_stop();
 30883  00D6  214A               	fcall	_iic_stop
 30884                           
 30885                           ;adc-mcp3421.c: 23: do{ (INTCONbits.PEIE = 0); (INTCONbits.GIE = 0); }while(0);;
 30886  00D7  130B               	bcf	11,6	;volatile
 30887  00D8  138B               	bcf	11,7	;volatile
 30888                           
 30889                           ;adc-mcp3421.c: 24: adcSamplingTimer=0;
 30890  00D9  0021               	movlb	1	; select bank1
 30891  00DA  01AC               	clrf	_adcSamplingTimer^(0+128)	;volatile
 30892  00DB  01AD               	clrf	(_adcSamplingTimer+1)^(0+128)	;volatile
 30893                           
 30894                           ;adc-mcp3421.c: 25: do{ (INTCONbits.GIE = 1); (INTCONbits.PEIE = 1); }while(0);;
 30895  00DC  178B               	bsf	11,7	;volatile
 30896  00DD  170B               	bsf	11,6	;volatile
 30897  00DE  0008               	return
 30898  00DF                     __end_of_adc_mcp3241_start_convert_16:	
 30899  00DF                     __ptext140:	
 30900 ;; *************** function _iic_send_byte *****************
 30901 ;; Defined at:
 30902 ;;		line 91 in file "src/driver/i2c.c"
 30903 ;; Parameters:    Size  Location     Type
 30904 ;;  x               1    wreg     unsigned char 
 30905 ;; Auto vars:     Size  Location     Type
 30906 ;;  x               1    0[BANK0 ] unsigned char 
 30907 ;;  i               1    1[BANK0 ] unsigned char 
 30908 ;; Return value:  Size  Location     Type
 30909 ;;                  1    wreg      unsigned char 
 30910 ;; Registers used:
 30911 ;;		wreg, status,2, status,0, pclath, cstack
 30912 ;; Tracked objects:
 30913 ;;		On entry : 0/0
 30914 ;;		On exit  : 0/0
 30915 ;;		Unchanged: 0/0
 30916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 30917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30918 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30919 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 30920 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0
 30921 ;;Total ram usage:        3 bytes
 30922 ;; Hardware stack levels used:    1
 30923 ;; Hardware stack levels required when called:    5
 30924 ;; This function calls:
 30925 ;;		_iic_waite_ack
 30926 ;; This function is called by:
 30927 ;;		_adc_mcp3241_start_convert_16
 30928 ;;		_adc_mcp3241_read_convert_16
 30929 ;;		_iic_read_byte
 30930 ;;		_iic_write_byte
 30931 ;;		_iic_write_n_byte
 30932 ;; This function uses a non-reentrant model
 30933 ;;
 30934                           
 30935                           
 30936                           ;psect for function _iic_send_byte
 30937  00DF                     _iic_send_byte:	
 30938                           
 30939                           ;incstack = 0
 30940                           ; Regs used in _iic_send_byte: [wreg+status,2+status,0+pclath+cstack]
 30941                           ;iic_send_byte@x stored from wreg
 30942  00DF  0020               	movlb	0	; select bank0
 30943  00E0  00A0               	movwf	iic_send_byte@x
 30944                           
 30945                           ;i2c.c: 93: uint8_t i;
 30946                           ;i2c.c: 95: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 30947  00E1  0021               	movlb	1	; select bank1
 30948  00E2  128F               	bcf	15,5	;volatile
 30949                           
 30950                           ;i2c.c: 96: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 30951  00E3  0022               	movlb	2	; select bank2
 30952  00E4  130F               	bcf	15,6	;volatile
 30953                           
 30954                           ;i2c.c: 97: for(i=0;i<8;i++)
 30955  00E5  0020               	movlb	0	; select bank0
 30956  00E6  3008               	movlw	8
 30957  00E7  01A1               	clrf	iic_send_byte@i
 30958  00E8  0221               	subwf	iic_send_byte@i,w
 30959  00E9  1803               	btfsc	3,0
 30960  00EA  290B               	goto	l13721
 30961  00EB                     l1763:	
 30962                           
 30963                           ;i2c.c: 98: {
 30964                           ;i2c.c: 99: if(x&0x80){
 30965  00EB  1FA0               	btfss	iic_send_byte@x,7
 30966  00EC  28F0               	goto	l1772
 30967                           
 30968                           ;i2c.c: 100: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 30969  00ED  0022               	movlb	2	; select bank2
 30970  00EE  168F               	bsf	15,5	;volatile
 30971                           
 30972                           ;i2c.c: 101: }
 30973  00EF  28F2               	goto	l1776
 30974  00F0                     l1772:	
 30975                           ;i2c.c: 102: else{
 30976                           ;i2c.c: 103: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 30977                           
 30978  00F0  0022               	movlb	2	; select bank2
 30979  00F1  128F               	bcf	15,5	;volatile
 30980  00F2                     l1776:	
 30981                           ;i2c.c: 104: }
 30982                           ;i2c.c: 105: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 30983                           
 30984  00F2  170F               	bsf	15,6	;volatile
 30985                           
 30986                           ;i2c.c: 106: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 30987  00F3  0000               	nop
 30988  00F4  0000               	nop
 30989  00F5  0000               	nop
 30990  00F6  0000               	nop
 30991  00F7  0000               	nop
 30992  00F8  0000               	nop
 30993                           
 30994                           ;i2c.c: 107: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 30995  00F9  0022               	movlb	2	; select bank2
 30996  00FA  130F               	bcf	15,6	;volatile
 30997                           
 30998                           ;i2c.c: 108: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 30999  00FB  0000               	nop
 31000  00FC  0000               	nop
 31001  00FD  0000               	nop
 31002  00FE  0000               	nop
 31003  00FF  0000               	nop
 31004  0100  0000               	nop
 31005                           
 31006                           ;i2c.c: 109: x<<=1;
 31007  0101  1003               	clrc
 31008  0102  0020               	movlb	0	; select bank0
 31009  0103  3001               	movlw	1
 31010  0104  0DA0               	rlf	iic_send_byte@x,f
 31011  0105  00F7               	movwf	??_iic_send_byte
 31012  0106  07A1               	addwf	iic_send_byte@i,f
 31013  0107  3008               	movlw	8
 31014  0108  0221               	subwf	iic_send_byte@i,w
 31015  0109  1C03               	skipc
 31016  010A  28EB               	goto	l1763
 31017  010B                     l13721:	
 31018                           
 31019                           ;i2c.c: 110: }
 31020                           ;i2c.c: 111: return iic_waite_ack();
 31021                           ;	Return value of _iic_send_byte is never used
 31022  010B  297B               	ljmp	l13263
 31023  010C                     __end_of_iic_send_byte:	
 31024  010C                     __ptext139:	
 31025 ;; *************** function _iic_start *****************
 31026 ;; Defined at:
 31027 ;;		line 29 in file "src/driver/i2c.c"
 31028 ;; Parameters:    Size  Location     Type
 31029 ;;		None
 31030 ;; Auto vars:     Size  Location     Type
 31031 ;;		None
 31032 ;; Return value:  Size  Location     Type
 31033 ;;                  1    wreg      void 
 31034 ;; Registers used:
 31035 ;;		wreg, status,2, status,0, pclath, cstack
 31036 ;; Tracked objects:
 31037 ;;		On entry : 0/0
 31038 ;;		On exit  : 0/0
 31039 ;;		Unchanged: 0/0
 31040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31045 ;;Total ram usage:        0 bytes
 31046 ;; Hardware stack levels used:    1
 31047 ;; Hardware stack levels required when called:    3
 31048 ;; This function calls:
 31049 ;;		_delay
 31050 ;; This function is called by:
 31051 ;;		_adc_mcp3241_start_convert_16
 31052 ;;		_adc_mcp3241_read_convert_16
 31053 ;;		_iic_read_byte
 31054 ;;		_iic_write_byte
 31055 ;;		_iic_write_n_byte
 31056 ;; This function uses a non-reentrant model
 31057 ;;
 31058                           
 31059                           
 31060                           ;psect for function _iic_start
 31061  010C                     _iic_start:	
 31062                           
 31063                           ;incstack = 0
 31064                           ; Regs used in _iic_start: [wreg+status,2+status,0+pclath+cstack]
 31065                           ;i2c.c: 31: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 31066  010C  0021               	movlb	1	; select bank1
 31067  010D  128F               	bcf	15,5	;volatile
 31068                           
 31069                           ;i2c.c: 32: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 31070  010E  0022               	movlb	2	; select bank2
 31071  010F  168F               	bsf	15,5	;volatile
 31072                           
 31073                           ;i2c.c: 33: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 31074  0110  170F               	bsf	15,6	;volatile
 31075                           
 31076                           ;i2c.c: 34: delay(2);
 31077  0111  3002               	movlw	2
 31078  0112  00F3               	movwf	delay@t
 31079  0113  01F4               	clrf	delay@t+1
 31080  0114  319A  2219  3180   	fcall	_delay
 31081                           
 31082                           ;i2c.c: 35: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 31083  0117  0022               	movlb	2	; select bank2
 31084  0118  128F               	bcf	15,5	;volatile
 31085                           
 31086                           ;i2c.c: 36: delay(2);
 31087  0119  3002               	movlw	2
 31088  011A  00F3               	movwf	delay@t
 31089  011B  3000               	movlw	0
 31090  011C  01F4               	clrf	delay@t+1
 31091  011D  319A  2219         	fcall	_delay
 31092                           
 31093                           ;i2c.c: 37: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31094  011F  0022               	movlb	2	; select bank2
 31095  0120  130F               	bcf	15,6	;volatile
 31096  0121  0008               	return
 31097  0122                     __end_of_iic_start:	
 31098  0122                     __ptext146:	
 31099 ;; *************** function _iic_received_byte *****************
 31100 ;; Defined at:
 31101 ;;		line 114 in file "src/driver/i2c.c"
 31102 ;; Parameters:    Size  Location     Type
 31103 ;;		None
 31104 ;; Auto vars:     Size  Location     Type
 31105 ;;  i               1    5[COMMON] unsigned char 
 31106 ;;  ret             1    4[COMMON] unsigned char 
 31107 ;; Return value:  Size  Location     Type
 31108 ;;                  1    wreg      unsigned char 
 31109 ;; Registers used:
 31110 ;;		wreg, status,2, status,0
 31111 ;; Tracked objects:
 31112 ;;		On entry : 0/0
 31113 ;;		On exit  : 0/0
 31114 ;;		Unchanged: 0/0
 31115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31117 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31118 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31119 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31120 ;;Total ram usage:        3 bytes
 31121 ;; Hardware stack levels used:    1
 31122 ;; Hardware stack levels required when called:    2
 31123 ;; This function calls:
 31124 ;;		Nothing
 31125 ;; This function is called by:
 31126 ;;		_iic_received_byte_if_ack
 31127 ;; This function uses a non-reentrant model
 31128 ;;
 31129                           
 31130                           
 31131                           ;psect for function _iic_received_byte
 31132  0122                     _iic_received_byte:	
 31133                           
 31134                           ;i2c.c: 116: uint8_t i;
 31135                           ;i2c.c: 117: uint8_t ret=0;
 31136                           
 31137                           ;incstack = 0
 31138                           ; Regs used in _iic_received_byte: [wreg+status,2+status,0]
 31139  0122  01F4               	clrf	iic_received_byte@ret
 31140                           
 31141                           ;i2c.c: 118: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 31142  0123  0021               	movlb	1	; select bank1
 31143  0124  168F               	bsf	15,5	;volatile
 31144  0125  3008               	movlw	8
 31145                           
 31146                           ;i2c.c: 119: for(i=0;i<8;i++)
 31147  0126  01F5               	clrf	iic_received_byte@i
 31148  0127  0275               	subwf	iic_received_byte@i,w
 31149  0128  1803               	btfsc	3,0
 31150  0129  2946               	goto	l1810
 31151                           
 31152                           ;i2c.c: 120: {
 31153                           ;i2c.c: 121: ret<<=1;
 31154  012A  1003               	clrc
 31155  012B                     L16:	
 31156  012B  0DF4               	rlf	iic_received_byte@ret,f
 31157                           
 31158                           ;i2c.c: 122: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31159  012C  0022               	movlb	2	; select bank2
 31160  012D  130F               	bcf	15,6	;volatile
 31161                           
 31162                           ;i2c.c: 123: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31163  012E  0000               	nop
 31164  012F  0000               	nop
 31165  0130  0000               	nop
 31166  0131  0000               	nop
 31167  0132  0000               	nop
 31168  0133  0000               	nop
 31169                           
 31170                           ;i2c.c: 124: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 31171  0134  0022               	movlb	2	; select bank2
 31172  0135  170F               	bsf	15,6	;volatile
 31173                           
 31174                           ;i2c.c: 125: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31175  0136  0000               	nop
 31176  0137  0000               	nop
 31177  0138  0000               	nop
 31178  0139  0000               	nop
 31179  013A  0000               	nop
 31180  013B  0000               	nop
 31181                           
 31182                           ;i2c.c: 126: if(PORTDbits.RD5){
 31183  013C  0020               	movlb	0	; select bank0
 31184  013D  1A8F               	btfsc	15,5	;volatile
 31185                           
 31186                           ;i2c.c: 127: ret|=1;
 31187  013E  1474               	bsf	iic_received_byte@ret,0
 31188  013F  3001               	movlw	1
 31189  0140  00F3               	movwf	??_iic_received_byte
 31190  0141  07F5               	addwf	iic_received_byte@i,f
 31191  0142  3008               	movlw	8
 31192  0143  0275               	subwf	iic_received_byte@i,w
 31193  0144  1C03               	skipc
 31194  0145  292B               	goto	L16
 31195  0146                     l1810:	
 31196                           ;i2c.c: 128: }
 31197                           ;i2c.c: 129: }
 31198                           ;i2c.c: 130: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31199                           
 31200  0146  0022               	movlb	2	; select bank2
 31201  0147  130F               	bcf	15,6	;volatile
 31202                           
 31203                           ;i2c.c: 131: return ret;
 31204  0148  0874               	movf	iic_received_byte@ret,w
 31205  0149  0008               	return
 31206  014A                     __end_of_iic_received_byte:	
 31207  014A                     __ptext142:	
 31208 ;; *************** function _iic_stop *****************
 31209 ;; Defined at:
 31210 ;;		line 41 in file "src/driver/i2c.c"
 31211 ;; Parameters:    Size  Location     Type
 31212 ;;		None
 31213 ;; Auto vars:     Size  Location     Type
 31214 ;;		None
 31215 ;; Return value:  Size  Location     Type
 31216 ;;                  1    wreg      void 
 31217 ;; Registers used:
 31218 ;;		wreg, status,2, status,0, pclath, cstack
 31219 ;; Tracked objects:
 31220 ;;		On entry : 0/0
 31221 ;;		On exit  : 0/0
 31222 ;;		Unchanged: 0/0
 31223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31228 ;;Total ram usage:        0 bytes
 31229 ;; Hardware stack levels used:    1
 31230 ;; Hardware stack levels required when called:    3
 31231 ;; This function calls:
 31232 ;;		_delay
 31233 ;; This function is called by:
 31234 ;;		_iic_waite_ack
 31235 ;;		_adc_mcp3241_start_convert_16
 31236 ;;		_adc_mcp3241_read_convert_16
 31237 ;;		_iic_read_byte
 31238 ;;		_iic_write_byte
 31239 ;;		_iic_write_n_byte
 31240 ;; This function uses a non-reentrant model
 31241 ;;
 31242                           
 31243                           
 31244                           ;psect for function _iic_stop
 31245  014A                     _iic_stop:	
 31246                           
 31247                           ;incstack = 0
 31248                           ; Regs used in _iic_stop: [wreg+status,2+status,0+pclath+cstack]
 31249                           ;i2c.c: 43: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 31250  014A  0021               	movlb	1	; select bank1
 31251  014B  128F               	bcf	15,5	;volatile
 31252                           
 31253                           ;i2c.c: 44: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 31254  014C  0022               	movlb	2	; select bank2
 31255  014D  128F               	bcf	15,5	;volatile
 31256                           
 31257                           ;i2c.c: 45: delay(2);
 31258  014E  3002               	movlw	2
 31259  014F  00F3               	movwf	delay@t
 31260  0150  01F4               	clrf	delay@t+1
 31261  0151  319A  2219  3180   	fcall	_delay
 31262                           
 31263                           ;i2c.c: 46: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 31264  0154  0022               	movlb	2	; select bank2
 31265  0155  170F               	bsf	15,6	;volatile
 31266                           
 31267                           ;i2c.c: 47: delay(2);
 31268  0156  3002               	movlw	2
 31269  0157  00F3               	movwf	delay@t
 31270  0158  3000               	movlw	0
 31271  0159  01F4               	clrf	delay@t+1
 31272  015A  319A  2219         	fcall	_delay
 31273                           
 31274                           ;i2c.c: 48: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 31275  015C  0022               	movlb	2	; select bank2
 31276  015D  168F               	bsf	15,5	;volatile
 31277  015E  0008               	return
 31278  015F                     __end_of_iic_stop:	
 31279  015F                     __ptext145:	
 31280 ;; *************** function _iic_send_ack *****************
 31281 ;; Defined at:
 31282 ;;		line 52 in file "src/driver/i2c.c"
 31283 ;; Parameters:    Size  Location     Type
 31284 ;;  ack             1    wreg     char 
 31285 ;; Auto vars:     Size  Location     Type
 31286 ;;  ack             1    3[COMMON] char 
 31287 ;; Return value:  Size  Location     Type
 31288 ;;                  1    wreg      void 
 31289 ;; Registers used:
 31290 ;;		wreg, status,2, status,0
 31291 ;; Tracked objects:
 31292 ;;		On entry : 0/0
 31293 ;;		On exit  : 0/0
 31294 ;;		Unchanged: 0/0
 31295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31297 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31299 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31300 ;;Total ram usage:        1 bytes
 31301 ;; Hardware stack levels used:    1
 31302 ;; Hardware stack levels required when called:    2
 31303 ;; This function calls:
 31304 ;;		Nothing
 31305 ;; This function is called by:
 31306 ;;		_iic_received_byte_if_ack
 31307 ;; This function uses a non-reentrant model
 31308 ;;
 31309                           
 31310                           
 31311                           ;psect for function _iic_send_ack
 31312  015F                     _iic_send_ack:	
 31313                           
 31314                           ;incstack = 0
 31315                           ; Regs used in _iic_send_ack: [wreg+status,2+status,0]
 31316                           ;iic_send_ack@ack stored from wreg
 31317  015F  00F3               	movwf	iic_send_ack@ack
 31318                           
 31319                           ;i2c.c: 54: do{do { TRISDbits.TRISD5 = 0; } while(0);}while(0);;
 31320  0160  0021               	movlb	1	; select bank1
 31321  0161  128F               	bcf	15,5	;volatile
 31322                           
 31323                           ;i2c.c: 55: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31324  0162  0022               	movlb	2	; select bank2
 31325  0163  130F               	bcf	15,6	;volatile
 31326                           
 31327                           ;i2c.c: 56: if(ack)
 31328  0164  0873               	movf	iic_send_ack@ack,w
 31329  0165  1903               	btfsc	3,2
 31330  0166  2969               	goto	l1709
 31331                           
 31332                           ;i2c.c: 57: {
 31333                           ;i2c.c: 58: do{do { LATDbits.LATD5 = 1; } while(0);}while(0);;
 31334  0167  168F               	bsf	15,5	;volatile
 31335                           
 31336                           ;i2c.c: 59: }
 31337  0168  296A               	goto	l1712
 31338  0169                     l1709:	
 31339                           ;i2c.c: 60: else
 31340                           ;i2c.c: 61: {
 31341                           ;i2c.c: 62: do{do { LATDbits.LATD5 = 0; } while(0);}while(0);;
 31342                           
 31343  0169  128F               	bcf	15,5	;volatile
 31344  016A                     l1712:	
 31345                           ;i2c.c: 63: }
 31346                           ;i2c.c: 64: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31347                           
 31348  016A  0000               	nop
 31349  016B  0000               	nop
 31350  016C  0000               	nop
 31351  016D  0000               	nop
 31352  016E  0000               	nop
 31353  016F  0000               	nop
 31354                           
 31355                           ;i2c.c: 65: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 31356  0170  0022               	movlb	2	; select bank2
 31357  0171  170F               	bsf	15,6	;volatile
 31358                           
 31359                           ;i2c.c: 66: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31360  0172  0000               	nop
 31361  0173  0000               	nop
 31362  0174  0000               	nop
 31363  0175  0000               	nop
 31364  0176  0000               	nop
 31365  0177  0000               	nop
 31366                           
 31367                           ;i2c.c: 67: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31368  0178  0022               	movlb	2	; select bank2
 31369  0179  130F               	bcf	15,6	;volatile
 31370  017A  0008               	return
 31371  017B                     __end_of_iic_send_ack:	
 31372  017B                     __ptext141:	
 31373 ;; *************** function _iic_waite_ack *****************
 31374 ;; Defined at:
 31375 ;;		line 70 in file "src/driver/i2c.c"
 31376 ;; Parameters:    Size  Location     Type
 31377 ;;		None
 31378 ;; Auto vars:     Size  Location     Type
 31379 ;;  timeout         1    6[COMMON] unsigned char 
 31380 ;; Return value:  Size  Location     Type
 31381 ;;                  1    wreg      unsigned char 
 31382 ;; Registers used:
 31383 ;;		wreg, status,2, status,0, pclath, cstack
 31384 ;; Tracked objects:
 31385 ;;		On entry : 0/0
 31386 ;;		On exit  : 0/0
 31387 ;;		Unchanged: 0/0
 31388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31390 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31391 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31392 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 31393 ;;Total ram usage:        2 bytes
 31394 ;; Hardware stack levels used:    1
 31395 ;; Hardware stack levels required when called:    4
 31396 ;; This function calls:
 31397 ;;		_iic_stop
 31398 ;; This function is called by:
 31399 ;;		_iic_send_byte
 31400 ;; This function uses a non-reentrant model
 31401 ;;
 31402                           
 31403                           
 31404                           ;psect for function _iic_waite_ack
 31405  017B                     _iic_waite_ack:	
 31406  017B                     l13263:	
 31407                           ;incstack = 0
 31408                           ; Regs used in _iic_waite_ack: [wreg+status,2+status,0+pclath+cstack]
 31409                           
 31410                           
 31411                           ;i2c.c: 72: uint8_t timeout=200;
 31412  017B  30C8               	movlw	200
 31413  017C  00F5               	movwf	??_iic_waite_ack
 31414  017D  00F6               	movwf	iic_waite_ack@timeout
 31415                           
 31416                           ;i2c.c: 73: do{do { TRISDbits.TRISD5 = 1; } while(0);}while(0);;
 31417  017E  0021               	movlb	1	; select bank1
 31418  017F  168F               	bsf	15,5	;volatile
 31419                           
 31420                           ;i2c.c: 74: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31421  0180  0022               	movlb	2	; select bank2
 31422  0181  130F               	bcf	15,6	;volatile
 31423                           
 31424                           ;i2c.c: 75: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31425  0182  0000               	nop
 31426  0183  0000               	nop
 31427  0184  0000               	nop
 31428  0185  0000               	nop
 31429  0186  0000               	nop
 31430  0187  0000               	nop
 31431                           
 31432                           ;i2c.c: 76: do{do { LATDbits.LATD6 = 1; } while(0);}while(0);;
 31433  0188  0022               	movlb	2	; select bank2
 31434  0189  170F               	bsf	15,6	;volatile
 31435                           
 31436                           ;i2c.c: 77: do{ __nop();__nop();__nop();__nop();__nop();__nop(); }while(0);;
 31437  018A  0000               	nop
 31438  018B  0000               	nop
 31439  018C  0000               	nop
 31440  018D  0000               	nop
 31441  018E  0000               	nop
 31442  018F  0000               	nop
 31443                           
 31444                           ;i2c.c: 78: while(timeout--)
 31445  0190  2994               	goto	l13297
 31446  0191                     l1744:	
 31447                           
 31448                           ;i2c.c: 79: {
 31449                           ;i2c.c: 80: if(!PORTDbits.RD5)break;
 31450  0191  0020               	movlb	0	; select bank0
 31451  0192  1E8F               	btfss	15,5	;volatile
 31452  0193  2998               	goto	l13299
 31453  0194                     l13297:	
 31454  0194  3001               	movlw	1
 31455  0195  02F6               	subwf	iic_waite_ack@timeout,f
 31456  0196  0F76               	incfsz	iic_waite_ack@timeout,w
 31457  0197  2991               	goto	l1744
 31458  0198                     l13299:	
 31459                           
 31460                           ;i2c.c: 81: }
 31461                           ;i2c.c: 82: if(!timeout)
 31462  0198  0876               	movf	iic_waite_ack@timeout,w
 31463  0199  1D03               	btfss	3,2
 31464  019A  299D               	goto	l1750
 31465                           
 31466                           ;i2c.c: 83: {
 31467                           ;i2c.c: 84: iic_stop();
 31468  019B  214A               	fcall	_iic_stop
 31469                           
 31470                           ;i2c.c: 85: return 0;
 31471  019C  3400               	retlw	0
 31472  019D                     l1750:	
 31473                           ;i2c.c: 86: }
 31474                           ;i2c.c: 87: do{do { LATDbits.LATD6 = 0; } while(0);}while(0);;
 31475                           
 31476  019D  0022               	movlb	2	; select bank2
 31477  019E  130F               	bcf	15,6	;volatile
 31478                           
 31479                           ;i2c.c: 88: return 1;
 31480  019F  3401               	retlw	1
 31481  01A0                     __end_of_iic_waite_ack:	
 31482  01A0                     __ptext133:	
 31483 ;; *************** function _app_flow_adc_2_flow *****************
 31484 ;; Defined at:
 31485 ;;		line 67 in file "src/app/flow.c"
 31486 ;; Parameters:    Size  Location     Type
 31487 ;;  index           1    wreg     unsigned char 
 31488 ;; Auto vars:     Size  Location     Type
 31489 ;;  index           1   29[BANK0 ] unsigned char 
 31490 ;;  ad1             2   27[BANK0 ] unsigned int 
 31491 ;;  ad2             2   25[BANK0 ] unsigned int 
 31492 ;;  fl1             2   23[BANK0 ] unsigned int 
 31493 ;;  fl2             2   21[BANK0 ] unsigned int 
 31494 ;; Return value:  Size  Location     Type
 31495 ;;                  2   13[BANK0 ] unsigned int 
 31496 ;; Registers used:
 31497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 31498 ;; Tracked objects:
 31499 ;;		On entry : 0/0
 31500 ;;		On exit  : 0/0
 31501 ;;		Unchanged: 0/0
 31502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 31503 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0
 31504 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0
 31505 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0
 31506 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0
 31507 ;;Total ram usage:       17 bytes
 31508 ;; Hardware stack levels used:    1
 31509 ;; Hardware stack levels required when called:    3
 31510 ;; This function calls:
 31511 ;;		___lldiv
 31512 ;;		___lmul
 31513 ;;		___lwdiv
 31514 ;;		___wmul
 31515 ;; This function is called by:
 31516 ;;		_flow_sampling_process
 31517 ;; This function uses a non-reentrant model
 31518 ;;
 31519                           
 31520                           
 31521                           ;psect for function _app_flow_adc_2_flow
 31522  01A0                     _app_flow_adc_2_flow:	
 31523                           
 31524                           ;incstack = 0
 31525                           ; Regs used in _app_flow_adc_2_flow: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 31526                           ;app_flow_adc_2_flow@index stored from wreg
 31527  01A0  0020               	movlb	0	; select bank0
 31528  01A1  00BD               	movwf	app_flow_adc_2_flow@index
 31529                           
 31530                           ;flow.c: 69: uint16_t fl1 = 0, fl2 = 0;
 31531  01A2  01B7               	clrf	app_flow_adc_2_flow@fl1
 31532  01A3  01B8               	clrf	app_flow_adc_2_flow@fl1+1
 31533  01A4  01B5               	clrf	app_flow_adc_2_flow@fl2
 31534  01A5  01B6               	clrf	app_flow_adc_2_flow@fl2+1
 31535                           
 31536                           ;flow.c: 70: uint16_t ad1 = 0, ad2 = 0;
 31537  01A6  01BB               	clrf	app_flow_adc_2_flow@ad1
 31538  01A7  01BC               	clrf	app_flow_adc_2_flow@ad1+1
 31539  01A8  01B9               	clrf	app_flow_adc_2_flow@ad2
 31540  01A9  01BA               	clrf	app_flow_adc_2_flow@ad2+1
 31541                           
 31542                           ;flow.c: 71: if (index == 0)return 0;
 31543  01AA  083D               	movf	app_flow_adc_2_flow@index,w
 31544  01AB  1D03               	btfss	3,2
 31545  01AC  29B0               	goto	l14353
 31546  01AD  01AD               	clrf	?_app_flow_adc_2_flow
 31547  01AE  01AE               	clrf	?_app_flow_adc_2_flow+1
 31548  01AF  0008               	return
 31549  01B0                     l14353:	
 31550                           
 31551                           ;flow.c: 72: if (index < 30 - 1) {
 31552  01B0  301D               	movlw	29
 31553  01B1  023D               	subwf	app_flow_adc_2_flow@index,w
 31554  01B2  1803               	skipnc
 31555  01B3  2A62               	goto	l14365
 31556                           
 31557                           ;flow.c: 73: fl1 = Main_flowCalibrationTable.flowCalibrationArr[index].rtflowValue;
 31558  01B4  083D               	movf	app_flow_adc_2_flow@index,w
 31559  01B5  00AF               	movwf	??_app_flow_adc_2_flow
 31560  01B6  01B0               	clrf	??_app_flow_adc_2_flow+1
 31561  01B7  35AF               	lslf	??_app_flow_adc_2_flow,f
 31562  01B8  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31563  01B9  35AF               	lslf	??_app_flow_adc_2_flow,f
 31564  01BA  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31565  01BB  082F               	movf	??_app_flow_adc_2_flow,w
 31566  01BC  3E02               	addlw	2
 31567  01BD  00B1               	movwf	??_app_flow_adc_2_flow+2
 31568  01BE  3000               	movlw	0
 31569  01BF  3D30               	addwfc	??_app_flow_adc_2_flow+1,w
 31570  01C0  00B2               	movwf	??_app_flow_adc_2_flow+3
 31571  01C1  3080               	movlw	128
 31572  01C2  0731               	addwf	??_app_flow_adc_2_flow+2,w
 31573  01C3  0084               	movwf	4
 31574  01C4  30BF               	movlw	191
 31575  01C5  3D32               	addwfc	??_app_flow_adc_2_flow+3,w
 31576  01C6  0085               	movwf	5
 31577  01C7  3F00               	moviw [0]fsr0
 31578  01C8  00B7               	movwf	app_flow_adc_2_flow@fl1
 31579  01C9  3F01               	moviw [1]fsr0
 31580  01CA  00B8               	movwf	app_flow_adc_2_flow@fl1+1
 31581                           
 31582                           ;flow.c: 74: fl2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].rtflowValue;
 31583  01CB  083D               	movf	app_flow_adc_2_flow@index,w
 31584  01CC  00AF               	movwf	??_app_flow_adc_2_flow
 31585  01CD  01B0               	clrf	??_app_flow_adc_2_flow+1
 31586  01CE  35AF               	lslf	??_app_flow_adc_2_flow,f
 31587  01CF  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31588  01D0  35AF               	lslf	??_app_flow_adc_2_flow,f
 31589  01D1  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31590  01D2  082F               	movf	??_app_flow_adc_2_flow,w
 31591  01D3  3E06               	addlw	6
 31592  01D4  00B1               	movwf	??_app_flow_adc_2_flow+2
 31593  01D5  3000               	movlw	0
 31594  01D6  3D30               	addwfc	??_app_flow_adc_2_flow+1,w
 31595  01D7  00B2               	movwf	??_app_flow_adc_2_flow+3
 31596  01D8  3080               	movlw	128
 31597  01D9  0731               	addwf	??_app_flow_adc_2_flow+2,w
 31598  01DA  0084               	movwf	4
 31599  01DB  30BF               	movlw	191
 31600  01DC  3D32               	addwfc	??_app_flow_adc_2_flow+3,w
 31601  01DD  0085               	movwf	5
 31602  01DE  3F00               	moviw [0]fsr0
 31603  01DF  00B5               	movwf	app_flow_adc_2_flow@fl2
 31604  01E0  3F01               	moviw [1]fsr0
 31605  01E1  00B6               	movwf	app_flow_adc_2_flow@fl2+1
 31606                           
 31607                           ;flow.c: 75: ad1 = Main_flowCalibrationTable.flowCalibrationArr[index].adcValue;
 31608  01E2  083D               	movf	app_flow_adc_2_flow@index,w
 31609  01E3  00AF               	movwf	??_app_flow_adc_2_flow
 31610  01E4  3080               	movlw	128
 31611  01E5  01B0               	clrf	??_app_flow_adc_2_flow+1
 31612  01E6  35AF               	lslf	??_app_flow_adc_2_flow,f
 31613  01E7  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31614  01E8  35AF               	lslf	??_app_flow_adc_2_flow,f
 31615  01E9  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31616  01EA  072F               	addwf	??_app_flow_adc_2_flow,w
 31617  01EB  0084               	movwf	4
 31618  01EC  30BF               	movlw	191
 31619  01ED  3D30               	addwfc	??_app_flow_adc_2_flow+1,w
 31620  01EE  0085               	movwf	5
 31621  01EF  3F00               	moviw [0]fsr0
 31622  01F0  00BB               	movwf	app_flow_adc_2_flow@ad1
 31623  01F1  3F01               	moviw [1]fsr0
 31624  01F2  00BC               	movwf	app_flow_adc_2_flow@ad1+1
 31625                           
 31626                           ;flow.c: 76: ad2 = Main_flowCalibrationTable.flowCalibrationArr[index + 1].adcValue;
 31627  01F3  083D               	movf	app_flow_adc_2_flow@index,w
 31628  01F4  00AF               	movwf	??_app_flow_adc_2_flow
 31629  01F5  01B0               	clrf	??_app_flow_adc_2_flow+1
 31630  01F6  35AF               	lslf	??_app_flow_adc_2_flow,f
 31631  01F7  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31632  01F8  35AF               	lslf	??_app_flow_adc_2_flow,f
 31633  01F9  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31634  01FA  082F               	movf	??_app_flow_adc_2_flow,w
 31635  01FB  3E04               	addlw	4
 31636  01FC  00B1               	movwf	??_app_flow_adc_2_flow+2
 31637  01FD  3000               	movlw	0
 31638  01FE  3D30               	addwfc	??_app_flow_adc_2_flow+1,w
 31639  01FF  00B2               	movwf	??_app_flow_adc_2_flow+3
 31640  0200  3080               	movlw	128
 31641  0201  0731               	addwf	??_app_flow_adc_2_flow+2,w
 31642  0202  0084               	movwf	4
 31643  0203  30BF               	movlw	191
 31644  0204  3D32               	addwfc	??_app_flow_adc_2_flow+3,w
 31645  0205  0085               	movwf	5
 31646  0206  3F00               	moviw [0]fsr0
 31647  0207  00B9               	movwf	app_flow_adc_2_flow@ad2
 31648  0208  3F01               	moviw [1]fsr0
 31649  0209  00BA               	movwf	app_flow_adc_2_flow@ad2+1
 31650                           
 31651                           ;flow.c: 77: if(ad2 == ad1)return (Main_flowCalibrationTable.maxFlow *2 );
 31652  020A  063C               	xorwf	app_flow_adc_2_flow@ad1+1,w
 31653  020B  1D03               	skipz
 31654  020C  2A0F               	goto	u12875
 31655  020D  083B               	movf	app_flow_adc_2_flow@ad1,w
 31656  020E  0639               	xorwf	app_flow_adc_2_flow@ad2,w
 31657  020F                     u12875:	
 31658  020F  1D03               	skipz
 31659  0210  2A20               	goto	l14363
 31660  0211  30F8               	movlw	248
 31661  0212  0084               	movwf	4
 31662  0213  30BF               	movlw	191
 31663  0214  0085               	movwf	5
 31664  0215  3F00               	moviw [0]fsr0
 31665  0216  00AF               	movwf	??_app_flow_adc_2_flow
 31666  0217  3F01               	moviw [1]fsr0
 31667  0218  00B0               	movwf	??_app_flow_adc_2_flow+1
 31668  0219  35AF               	lslf	??_app_flow_adc_2_flow,f
 31669  021A  0DB0               	rlf	??_app_flow_adc_2_flow+1,f
 31670  021B  082F               	movf	??_app_flow_adc_2_flow,w
 31671  021C  00AD               	movwf	?_app_flow_adc_2_flow
 31672  021D  0830               	movf	??_app_flow_adc_2_flow+1,w
 31673  021E  00AE               	movwf	?_app_flow_adc_2_flow+1
 31674  021F  0008               	return
 31675  0220                     l14363:	
 31676                           
 31677                           ;flow.c: 78: fl_t32 = fl1 + (fl2 - fl1)*(adcAverageValue - ad1) / (ad2 - ad1);
 31678  0220  093B               	comf	app_flow_adc_2_flow@ad1,w
 31679  0221  00AF               	movwf	??_app_flow_adc_2_flow
 31680  0222  093C               	comf	app_flow_adc_2_flow@ad1+1,w
 31681  0223  00B0               	movwf	??_app_flow_adc_2_flow+1
 31682  0224  0AAF               	incf	??_app_flow_adc_2_flow,f
 31683  0225  1903               	skipnz
 31684  0226  0AB0               	incf	??_app_flow_adc_2_flow+1,f
 31685  0227  0839               	movf	app_flow_adc_2_flow@ad2,w
 31686  0228  072F               	addwf	??_app_flow_adc_2_flow,w
 31687  0229  00A2               	movwf	___lwdiv@divisor
 31688  022A  083A               	movf	app_flow_adc_2_flow@ad2+1,w
 31689  022B  3D30               	addwfc	??_app_flow_adc_2_flow+1,w
 31690  022C  00A3               	movwf	___lwdiv@divisor+1
 31691  022D  0937               	comf	app_flow_adc_2_flow@fl1,w
 31692  022E  00B1               	movwf	??_app_flow_adc_2_flow+2
 31693  022F  0938               	comf	app_flow_adc_2_flow@fl1+1,w
 31694  0230  00B2               	movwf	??_app_flow_adc_2_flow+3
 31695  0231  0AB1               	incf	??_app_flow_adc_2_flow+2,f
 31696  0232  1903               	skipnz
 31697  0233  0AB2               	incf	??_app_flow_adc_2_flow+3,f
 31698  0234  0835               	movf	app_flow_adc_2_flow@fl2,w
 31699  0235  0731               	addwf	??_app_flow_adc_2_flow+2,w
 31700  0236  00F3               	movwf	___wmul@multiplier
 31701  0237  0836               	movf	app_flow_adc_2_flow@fl2+1,w
 31702  0238  3D32               	addwfc	??_app_flow_adc_2_flow+3,w
 31703  0239  00F4               	movwf	___wmul@multiplier+1
 31704  023A  093B               	comf	app_flow_adc_2_flow@ad1,w
 31705  023B  00B3               	movwf	??_app_flow_adc_2_flow+4
 31706  023C  093C               	comf	app_flow_adc_2_flow@ad1+1,w
 31707  023D  00B4               	movwf	??_app_flow_adc_2_flow+5
 31708  023E  0AB3               	incf	??_app_flow_adc_2_flow+4,f
 31709  023F  1903               	skipnz
 31710  0240  0AB4               	incf	??_app_flow_adc_2_flow+5,f
 31711  0241  0021               	movlb	1	; select bank1
 31712  0242  082A               	movf	_adcAverageValue^(0+128),w	;volatile
 31713  0243  0020               	movlb	0	; select bank0
 31714  0244  0733               	addwf	??_app_flow_adc_2_flow+4,w
 31715  0245  00F5               	movwf	___wmul@multiplicand
 31716  0246  0021               	movlb	1	; select bank1
 31717  0247  082B               	movf	(_adcAverageValue+1)^(0+128),w	;volatile
 31718  0248  0020               	movlb	0	; select bank0
 31719  0249  3D34               	addwfc	??_app_flow_adc_2_flow+5,w
 31720  024A  00F6               	movwf	___wmul@multiplicand+1
 31721  024B  3193  23EE  3180   	fcall	___wmul
 31722  024E  0874               	movf	?___wmul+1,w
 31723  024F  0020               	movlb	0	; select bank0
 31724  0250  00A5               	movwf	___lwdiv@dividend+1
 31725  0251  0873               	movf	?___wmul,w
 31726  0252  00A4               	movwf	___lwdiv@dividend
 31727  0253  319F  2770  3180   	fcall	___lwdiv
 31728  0256  0020               	movlb	0	; select bank0
 31729  0257  0837               	movf	app_flow_adc_2_flow@fl1,w
 31730  0258  0722               	addwf	?___lwdiv,w
 31731  0259  0021               	movlb	1	; select bank1
 31732  025A  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31733  025B  0020               	movlb	0	; select bank0
 31734  025C  0838               	movf	app_flow_adc_2_flow@fl1+1,w
 31735  025D  3D23               	addwfc	?___lwdiv+1,w
 31736  025E  0021               	movlb	1	; select bank1
 31737  025F  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 31738  0260  01A6               	clrf	(_fl_t32+2)^(0+128)	;volatile
 31739  0261  01A7               	clrf	(_fl_t32+3)^(0+128)	;volatile
 31740  0262                     l14365:	
 31741                           
 31742                           ;flow.c: 79: }
 31743                           ;flow.c: 80: fl_t32 = fl_t32 * mainSystemData.flowRatio;
 31744  0262  301A               	movlw	26
 31745  0263  0084               	movwf	4
 31746  0264  30BF               	movlw	191
 31747  0265  0085               	movwf	5
 31748  0266  3F00               	moviw [0]fsr0
 31749  0267  0020               	movlb	0	; select bank0
 31750  0268  00AF               	movwf	??_app_flow_adc_2_flow
 31751  0269  3F01               	moviw [1]fsr0
 31752  026A  00B0               	movwf	??_app_flow_adc_2_flow+1
 31753  026B  082F               	movf	??_app_flow_adc_2_flow,w
 31754  026C  00A0               	movwf	___lmul@multiplier
 31755  026D  0830               	movf	??_app_flow_adc_2_flow+1,w
 31756  026E  00A1               	movwf	___lmul@multiplier+1
 31757  026F  0D89               	rlf	9,f
 31758  0270  3B89               	subwfb	9,f
 31759  0271  0989               	comf	9,f
 31760  0272  00A2               	movwf	___lmul@multiplier+2
 31761  0273  00A3               	movwf	___lmul@multiplier+3
 31762  0274  0021               	movlb	1	; select bank1
 31763  0275  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 31764  0276  0020               	movlb	0	; select bank0
 31765  0277  00A7               	movwf	___lmul@multiplicand+3
 31766  0278  0021               	movlb	1	; select bank1
 31767  0279  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 31768  027A  0020               	movlb	0	; select bank0
 31769  027B  00A6               	movwf	___lmul@multiplicand+2
 31770  027C  0021               	movlb	1	; select bank1
 31771  027D  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 31772  027E  0020               	movlb	0	; select bank0
 31773  027F  00A5               	movwf	___lmul@multiplicand+1
 31774  0280  0021               	movlb	1	; select bank1
 31775  0281  0824               	movf	_fl_t32^(0+128),w	;volatile
 31776  0282  0020               	movlb	0	; select bank0
 31777  0283  00A4               	movwf	___lmul@multiplicand
 31778  0284  318F  27D3  3180   	fcall	___lmul
 31779  0287  0020               	movlb	0	; select bank0
 31780  0288  0823               	movf	?___lmul+3,w
 31781  0289  0021               	movlb	1	; select bank1
 31782  028A  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 31783  028B  0020               	movlb	0	; select bank0
 31784  028C  0822               	movf	?___lmul+2,w
 31785  028D  0021               	movlb	1	; select bank1
 31786  028E  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 31787  028F  0020               	movlb	0	; select bank0
 31788  0290  0821               	movf	?___lmul+1,w
 31789  0291  0021               	movlb	1	; select bank1
 31790  0292  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 31791  0293  0020               	movlb	0	; select bank0
 31792  0294  0820               	movf	?___lmul,w
 31793  0295  0021               	movlb	1	; select bank1
 31794  0296  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31795                           
 31796                           ;flow.c: 81: fl_t32 /= 1000;
 31797  0297  0020               	movlb	0	; select bank0
 31798  0298  3003               	movlw	3
 31799  0299  01A3               	clrf	___lldiv@divisor+3
 31800  029A  01A2               	clrf	___lldiv@divisor+2
 31801  029B  00A1               	movwf	___lldiv@divisor+1
 31802  029C  30E8               	movlw	232
 31803  029D  00A0               	movwf	___lldiv@divisor
 31804  029E  0021               	movlb	1	; select bank1
 31805  029F  0827               	movf	(_fl_t32+3)^(0+128),w	;volatile
 31806  02A0  0020               	movlb	0	; select bank0
 31807  02A1  00A7               	movwf	___lldiv@dividend+3
 31808  02A2  0021               	movlb	1	; select bank1
 31809  02A3  0826               	movf	(_fl_t32+2)^(0+128),w	;volatile
 31810  02A4  0020               	movlb	0	; select bank0
 31811  02A5  00A6               	movwf	___lldiv@dividend+2
 31812  02A6  0021               	movlb	1	; select bank1
 31813  02A7  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 31814  02A8  0020               	movlb	0	; select bank0
 31815  02A9  00A5               	movwf	___lldiv@dividend+1
 31816  02AA  0021               	movlb	1	; select bank1
 31817  02AB  0824               	movf	_fl_t32^(0+128),w	;volatile
 31818  02AC  0020               	movlb	0	; select bank0
 31819  02AD  00A4               	movwf	___lldiv@dividend
 31820  02AE  31A6  262C  3180   	fcall	___lldiv
 31821  02B1  0020               	movlb	0	; select bank0
 31822  02B2  0823               	movf	?___lldiv+3,w
 31823  02B3  0021               	movlb	1	; select bank1
 31824  02B4  00A7               	movwf	(_fl_t32+3)^(0+128)	;volatile
 31825  02B5  0020               	movlb	0	; select bank0
 31826  02B6  0822               	movf	?___lldiv+2,w
 31827  02B7  0021               	movlb	1	; select bank1
 31828  02B8  00A6               	movwf	(_fl_t32+2)^(0+128)	;volatile
 31829  02B9  0020               	movlb	0	; select bank0
 31830  02BA  0821               	movf	?___lldiv+1,w
 31831  02BB  0021               	movlb	1	; select bank1
 31832  02BC  00A5               	movwf	(_fl_t32+1)^(0+128)	;volatile
 31833  02BD  0020               	movlb	0	; select bank0
 31834  02BE  0820               	movf	?___lldiv,w
 31835  02BF  0021               	movlb	1	; select bank1
 31836  02C0  00A4               	movwf	_fl_t32^(0+128)	;volatile
 31837                           
 31838                           ;flow.c: 82: __t32=Main_flowCalibrationTable.maxFlow;
 31839  02C1  30F8               	movlw	248
 31840  02C2  0084               	movwf	4
 31841  02C3  30BF               	movlw	191
 31842  02C4  0085               	movwf	5
 31843  02C5  3F00               	moviw [0]fsr0
 31844  02C6  0020               	movlb	0	; select bank0
 31845  02C7  00AF               	movwf	??_app_flow_adc_2_flow
 31846  02C8  3F01               	moviw [1]fsr0
 31847  02C9  00B0               	movwf	??_app_flow_adc_2_flow+1
 31848  02CA  082F               	movf	??_app_flow_adc_2_flow,w
 31849  02CB  0021               	movlb	1	; select bank1
 31850  02CC  00A0               	movwf	___t32^(0+128)
 31851  02CD  0020               	movlb	0	; select bank0
 31852  02CE  0830               	movf	??_app_flow_adc_2_flow+1,w
 31853  02CF  0021               	movlb	1	; select bank1
 31854  02D0  00A1               	movwf	(___t32^(0+128)+1)
 31855  02D1  3039               	movlw	57
 31856  02D2  01A2               	clrf	(___t32^(0+128)+2)
 31857  02D3  01A3               	clrf	(___t32^(0+128)+3)
 31858                           
 31859                           ;flow.c: 83: __t32 =__t32 * mainSystemData.smallFlowNotCare ;
 31860  02D4  0084               	movwf	4
 31861  02D5  0800               	movf	0,w	;code access
 31862  02D6  0020               	movlb	0	; select bank0
 31863  02D7  00AF               	movwf	??_app_flow_adc_2_flow
 31864  02D8  01B0               	clrf	??_app_flow_adc_2_flow+1
 31865  02D9  01B1               	clrf	??_app_flow_adc_2_flow+2
 31866  02DA  01B2               	clrf	??_app_flow_adc_2_flow+3
 31867  02DB  0832               	movf	??_app_flow_adc_2_flow+3,w
 31868  02DC  00A3               	movwf	___lmul@multiplier+3
 31869  02DD  0831               	movf	??_app_flow_adc_2_flow+2,w
 31870  02DE  00A2               	movwf	___lmul@multiplier+2
 31871  02DF  0830               	movf	??_app_flow_adc_2_flow+1,w
 31872  02E0  00A1               	movwf	___lmul@multiplier+1
 31873  02E1  082F               	movf	??_app_flow_adc_2_flow,w
 31874  02E2  00A0               	movwf	___lmul@multiplier
 31875  02E3  0021               	movlb	1	; select bank1
 31876  02E4  0823               	movf	(___t32+3)^(0+128),w
 31877  02E5  0020               	movlb	0	; select bank0
 31878  02E6  00A7               	movwf	___lmul@multiplicand+3
 31879  02E7  0021               	movlb	1	; select bank1
 31880  02E8  0822               	movf	(___t32+2)^(0+128),w
 31881  02E9  0020               	movlb	0	; select bank0
 31882  02EA  00A6               	movwf	___lmul@multiplicand+2
 31883  02EB  0021               	movlb	1	; select bank1
 31884  02EC  0821               	movf	(___t32+1)^(0+128),w
 31885  02ED  0020               	movlb	0	; select bank0
 31886  02EE  00A5               	movwf	___lmul@multiplicand+1
 31887  02EF  0021               	movlb	1	; select bank1
 31888  02F0  0820               	movf	___t32^(0+128),w
 31889  02F1  0020               	movlb	0	; select bank0
 31890  02F2  00A4               	movwf	___lmul@multiplicand
 31891  02F3  318F  27D3  3180   	fcall	___lmul
 31892  02F6  0020               	movlb	0	; select bank0
 31893  02F7  0823               	movf	?___lmul+3,w
 31894  02F8  0021               	movlb	1	; select bank1
 31895  02F9  00A3               	movwf	(___t32+3)^(0+128)
 31896  02FA  0020               	movlb	0	; select bank0
 31897  02FB  0822               	movf	?___lmul+2,w
 31898  02FC  0021               	movlb	1	; select bank1
 31899  02FD  00A2               	movwf	(___t32+2)^(0+128)
 31900  02FE  0020               	movlb	0	; select bank0
 31901  02FF  0821               	movf	?___lmul+1,w
 31902  0300  0021               	movlb	1	; select bank1
 31903  0301  00A1               	movwf	(___t32+1)^(0+128)
 31904  0302  0020               	movlb	0	; select bank0
 31905  0303  0820               	movf	?___lmul,w
 31906  0304  0021               	movlb	1	; select bank1
 31907  0305  00A0               	movwf	___t32^(0+128)
 31908                           
 31909                           ;flow.c: 84: __t32 = __t32 /100;
 31910  0306  0020               	movlb	0	; select bank0
 31911  0307  3064               	movlw	100
 31912  0308  01A3               	clrf	___lldiv@divisor+3
 31913  0309  01A2               	clrf	___lldiv@divisor+2
 31914  030A  01A1               	clrf	___lldiv@divisor+1
 31915  030B  00A0               	movwf	___lldiv@divisor
 31916  030C  0021               	movlb	1	; select bank1
 31917  030D  0823               	movf	(___t32+3)^(0+128),w
 31918  030E  0020               	movlb	0	; select bank0
 31919  030F  00A7               	movwf	___lldiv@dividend+3
 31920  0310  0021               	movlb	1	; select bank1
 31921  0311  0822               	movf	(___t32+2)^(0+128),w
 31922  0312  0020               	movlb	0	; select bank0
 31923  0313  00A6               	movwf	___lldiv@dividend+2
 31924  0314  0021               	movlb	1	; select bank1
 31925  0315  0821               	movf	(___t32+1)^(0+128),w
 31926  0316  0020               	movlb	0	; select bank0
 31927  0317  00A5               	movwf	___lldiv@dividend+1
 31928  0318  0021               	movlb	1	; select bank1
 31929  0319  0820               	movf	___t32^(0+128),w
 31930  031A  0020               	movlb	0	; select bank0
 31931  031B  00A4               	movwf	___lldiv@dividend
 31932  031C  31A6  262C  3180   	fcall	___lldiv
 31933  031F  0020               	movlb	0	; select bank0
 31934  0320  0823               	movf	?___lldiv+3,w
 31935  0321  0021               	movlb	1	; select bank1
 31936  0322  00A3               	movwf	(___t32+3)^(0+128)
 31937  0323  0020               	movlb	0	; select bank0
 31938  0324  0822               	movf	?___lldiv+2,w
 31939  0325  0021               	movlb	1	; select bank1
 31940  0326  00A2               	movwf	(___t32+2)^(0+128)
 31941  0327  0020               	movlb	0	; select bank0
 31942  0328  0821               	movf	?___lldiv+1,w
 31943  0329  0021               	movlb	1	; select bank1
 31944  032A  00A1               	movwf	(___t32+1)^(0+128)
 31945  032B  0020               	movlb	0	; select bank0
 31946  032C  0820               	movf	?___lldiv,w
 31947  032D  0021               	movlb	1	; select bank1
 31948  032E  00A0               	movwf	___t32^(0+128)
 31949                           
 31950                           ;flow.c: 85: if(fl_t32<__t32)return 0;
 31951  032F  0823               	movf	(___t32+3)^(0+128),w
 31952  0330  0227               	subwf	(_fl_t32+3)^(0+128),w	;volatile
 31953  0331  1D03               	skipz
 31954  0332  2B3D               	goto	u12885
 31955  0333  0822               	movf	(___t32+2)^(0+128),w
 31956  0334  0226               	subwf	(_fl_t32+2)^(0+128),w	;volatile
 31957  0335  1D03               	skipz
 31958  0336  2B3D               	goto	u12885
 31959  0337  0821               	movf	(___t32+1)^(0+128),w
 31960  0338  0225               	subwf	(_fl_t32+1)^(0+128),w	;volatile
 31961  0339  1D03               	skipz
 31962  033A  2B3D               	goto	u12885
 31963  033B  0820               	movf	___t32^(0+128),w
 31964  033C  0224               	subwf	_fl_t32^(0+128),w	;volatile
 31965  033D                     u12885:	
 31966  033D  1803               	skipnc
 31967  033E  2B43               	goto	l14381
 31968  033F  0020               	movlb	0	; select bank0
 31969  0340  01AD               	clrf	?_app_flow_adc_2_flow
 31970  0341  01AE               	clrf	?_app_flow_adc_2_flow+1
 31971  0342  0008               	return
 31972  0343                     l14381:	
 31973                           
 31974                           ;flow.c: 86: return (uint16_t)fl_t32;
 31975  0343  0021               	movlb	1	; select bank1
 31976  0344  0825               	movf	(_fl_t32+1)^(0+128),w	;volatile
 31977  0345  0020               	movlb	0	; select bank0
 31978  0346  00AE               	movwf	?_app_flow_adc_2_flow+1
 31979  0347  0021               	movlb	1	; select bank1
 31980  0348  0824               	movf	_fl_t32^(0+128),w	;volatile
 31981  0349  0020               	movlb	0	; select bank0
 31982  034A  00AD               	movwf	?_app_flow_adc_2_flow
 31983  034B  0008               	return
 31984  034C                     __end_of_app_flow_adc_2_flow:	
 31985  034C                     __ptext132:	
 31986 ;; *************** function _app_flow_lookup *****************
 31987 ;; Defined at:
 31988 ;;		line 51 in file "src/app/flow.c"
 31989 ;; Parameters:    Size  Location     Type
 31990 ;;  adcValue        2    3[COMMON] unsigned int 
 31991 ;; Auto vars:     Size  Location     Type
 31992 ;;  i               1    5[COMMON] unsigned char 
 31993 ;; Return value:  Size  Location     Type
 31994 ;;                  1    wreg      unsigned char 
 31995 ;; Registers used:
 31996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 31997 ;; Tracked objects:
 31998 ;;		On entry : 0/0
 31999 ;;		On exit  : 0/0
 32000 ;;		Unchanged: 0/0
 32001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32003 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32004 ;;      Temps:          0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 32005 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0
 32006 ;;Total ram usage:       13 bytes
 32007 ;; Hardware stack levels used:    1
 32008 ;; Hardware stack levels required when called:    2
 32009 ;; This function calls:
 32010 ;;		Nothing
 32011 ;; This function is called by:
 32012 ;;		_flow_sampling_process
 32013 ;; This function uses a non-reentrant model
 32014 ;;
 32015                           
 32016                           
 32017                           ;psect for function _app_flow_lookup
 32018  034C                     _app_flow_lookup:	
 32019                           
 32020                           ;flow.c: 52: uint8_t i;
 32021                           ;flow.c: 53: if (adcValue <= Main_flowCalibrationTable.flowCalibrationArr[0].adcValue)re
      +                          turn 0;
 32022                           
 32023                           ;incstack = 0
 32024                           ; Regs used in _app_flow_lookup: [wreg-fsr0h+status,2+status,0+pclath]
 32025  034C  3080               	movlw	128
 32026  034D  0084               	movwf	4
 32027  034E  30BF               	movlw	191
 32028  034F  0085               	movwf	5
 32029  0350  3F00               	moviw [0]fsr0
 32030  0351  0020               	movlb	0	; select bank0
 32031  0352  00A0               	movwf	??_app_flow_lookup
 32032  0353  3F01               	moviw [1]fsr0
 32033  0354  00A1               	movwf	??_app_flow_lookup+1
 32034  0355  0874               	movf	app_flow_lookup@adcValue+1,w
 32035  0356  0221               	subwf	??_app_flow_lookup+1,w
 32036  0357  1D03               	skipz
 32037  0358  2B5B               	goto	u8185
 32038  0359  0873               	movf	app_flow_lookup@adcValue,w
 32039  035A  0220               	subwf	??_app_flow_lookup,w
 32040  035B                     u8185:	
 32041  035B  1803               	btfsc	3,0
 32042  035C  3400               	retlw	0
 32043  035D  301D               	movlw	29
 32044                           
 32045                           ;flow.c: 54: for (i = 0; i < 30-1; i++) {
 32046  035E  01F5               	clrf	app_flow_lookup@i
 32047  035F  0275               	subwf	app_flow_lookup@i,w
 32048  0360  1803               	btfsc	3,0
 32049  0361  2BCE               	goto	l10249
 32050  0362                     l10235:	
 32051                           
 32052                           ;flow.c: 55: if (adcValue >= Main_flowCalibrationTable.flowCalibrationArr[i].adcValue &&
 32053                           ;flow.c: 56: adcValue < Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue)bre
      +                          ak;
 32054  0362  0875               	movf	app_flow_lookup@i,w
 32055  0363  00A0               	movwf	??_app_flow_lookup
 32056  0364  3080               	movlw	128
 32057  0365  01A1               	clrf	??_app_flow_lookup+1
 32058  0366  35A0               	lslf	??_app_flow_lookup,f
 32059  0367  0DA1               	rlf	??_app_flow_lookup+1,f
 32060  0368  35A0               	lslf	??_app_flow_lookup,f
 32061  0369  0DA1               	rlf	??_app_flow_lookup+1,f
 32062  036A  0720               	addwf	??_app_flow_lookup,w
 32063  036B  0084               	movwf	4
 32064  036C  30BF               	movlw	191
 32065  036D  3D21               	addwfc	??_app_flow_lookup+1,w
 32066  036E  0085               	movwf	5
 32067  036F  3F00               	moviw [0]fsr0
 32068  0370  00A2               	movwf	??_app_flow_lookup+2
 32069  0371  3F01               	moviw [1]fsr0
 32070  0372  00A3               	movwf	??_app_flow_lookup+3
 32071  0373  0274               	subwf	app_flow_lookup@adcValue+1,w
 32072  0374  1D03               	skipz
 32073  0375  2B78               	goto	u8205
 32074  0376  0822               	movf	??_app_flow_lookup+2,w
 32075  0377  0273               	subwf	app_flow_lookup@adcValue,w
 32076  0378                     u8205:	
 32077  0378  0875               	movf	app_flow_lookup@i,w
 32078  0379  00A0               	movwf	??_app_flow_lookup
 32079  037A  01A1               	clrf	??_app_flow_lookup+1
 32080  037B  1C03               	skipc
 32081  037C  2B9B               	goto	L13
 32082  037D  35A0               	lslf	??_app_flow_lookup,f
 32083  037E  0DA1               	rlf	??_app_flow_lookup+1,f
 32084  037F  35A0               	lslf	??_app_flow_lookup,f
 32085  0380  0DA1               	rlf	??_app_flow_lookup+1,f
 32086  0381  0820               	movf	??_app_flow_lookup,w
 32087  0382  3E04               	addlw	4
 32088  0383  00A2               	movwf	??_app_flow_lookup+2
 32089  0384  3000               	movlw	0
 32090  0385  3D21               	addwfc	??_app_flow_lookup+1,w
 32091  0386  00A3               	movwf	??_app_flow_lookup+3
 32092  0387  3080               	movlw	128
 32093  0388  0722               	addwf	??_app_flow_lookup+2,w
 32094  0389  0084               	movwf	4
 32095  038A  30BF               	movlw	191
 32096  038B  3D23               	addwfc	??_app_flow_lookup+3,w
 32097  038C  0085               	movwf	5
 32098  038D  3F00               	moviw [0]fsr0
 32099  038E  00A4               	movwf	??_app_flow_lookup+4
 32100  038F  3F01               	moviw [1]fsr0
 32101  0390  00A5               	movwf	??_app_flow_lookup+5
 32102  0391  0274               	subwf	app_flow_lookup@adcValue+1,w
 32103  0392  1D03               	skipz
 32104  0393  2B96               	goto	u8215
 32105  0394  0824               	movf	??_app_flow_lookup+4,w
 32106  0395  0273               	subwf	app_flow_lookup@adcValue,w
 32107  0396                     u8215:	
 32108                           
 32109                           ;flow.c: 57: if(Main_flowCalibrationTable.flowCalibrationArr[i].adcValue ==
 32110                           ;flow.c: 58: Main_flowCalibrationTable.flowCalibrationArr[i + 1].adcValue){
 32111  0396  0875               	movf	app_flow_lookup@i,w
 32112  0397  1C03               	btfss	3,0
 32113  0398  0008               	return
 32114  0399  00A0               	movwf	??_app_flow_lookup
 32115  039A  01A1               	clrf	??_app_flow_lookup+1
 32116  039B                     L13:	
 32117  039B  35A0               	lslf	??_app_flow_lookup,f
 32118  039C  0DA1               	rlf	??_app_flow_lookup+1,f
 32119  039D  35A0               	lslf	??_app_flow_lookup,f
 32120  039E  0DA1               	rlf	??_app_flow_lookup+1,f
 32121  039F  0820               	movf	??_app_flow_lookup,w
 32122  03A0  3E04               	addlw	4
 32123  03A1  00A2               	movwf	??_app_flow_lookup+2
 32124  03A2  3000               	movlw	0
 32125  03A3  3D21               	addwfc	??_app_flow_lookup+1,w
 32126  03A4  00A3               	movwf	??_app_flow_lookup+3
 32127  03A5  3080               	movlw	128
 32128  03A6  0722               	addwf	??_app_flow_lookup+2,w
 32129  03A7  0084               	movwf	4
 32130  03A8  30BF               	movlw	191
 32131  03A9  3D23               	addwfc	??_app_flow_lookup+3,w
 32132  03AA  0085               	movwf	5
 32133  03AB  3F00               	moviw [0]fsr0
 32134  03AC  00A4               	movwf	??_app_flow_lookup+4
 32135  03AD  3F01               	moviw [1]fsr0
 32136  03AE  00A5               	movwf	??_app_flow_lookup+5
 32137  03AF  0875               	movf	app_flow_lookup@i,w
 32138  03B0  00A6               	movwf	??_app_flow_lookup+6
 32139  03B1  3080               	movlw	128
 32140  03B2  01A7               	clrf	??_app_flow_lookup+7
 32141  03B3  35A6               	lslf	??_app_flow_lookup+6,f
 32142  03B4  0DA7               	rlf	??_app_flow_lookup+7,f
 32143  03B5  35A6               	lslf	??_app_flow_lookup+6,f
 32144  03B6  0DA7               	rlf	??_app_flow_lookup+7,f
 32145  03B7  0726               	addwf	??_app_flow_lookup+6,w
 32146  03B8  0084               	movwf	4
 32147  03B9  30BF               	movlw	191
 32148  03BA  3D27               	addwfc	??_app_flow_lookup+7,w
 32149  03BB  0085               	movwf	5
 32150  03BC  3F00               	moviw [0]fsr0
 32151  03BD  00A8               	movwf	??_app_flow_lookup+8
 32152  03BE  3F01               	moviw [1]fsr0
 32153  03BF  00A9               	movwf	??_app_flow_lookup+9
 32154  03C0  0625               	xorwf	??_app_flow_lookup+5,w
 32155  03C1  1D03               	skipz
 32156  03C2  2BC5               	goto	u8225
 32157  03C3  0824               	movf	??_app_flow_lookup+4,w
 32158  03C4  0628               	xorwf	??_app_flow_lookup+8,w
 32159  03C5                     u8225:	
 32160  03C5  1903               	btfsc	3,2
 32161  03C6  2BCE               	goto	l10249
 32162                           
 32163                           ;flow.c: 60: break;
 32164  03C7  3001               	movlw	1
 32165  03C8  00A0               	movwf	??_app_flow_lookup
 32166  03C9  07F5               	addwf	app_flow_lookup@i,f
 32167  03CA  301D               	movlw	29
 32168  03CB  0275               	subwf	app_flow_lookup@i,w
 32169  03CC  1C03               	skipc
 32170  03CD  2B62               	goto	l10235
 32171  03CE                     l10249:	
 32172                           
 32173                           ;flow.c: 61: }
 32174                           ;flow.c: 62: }
 32175                           ;flow.c: 63: return i;
 32176  03CE  0875               	movf	app_flow_lookup@i,w
 32177  03CF  0008               	return
 32178  03D0                     __end_of_app_flow_lookup:	
 32179  03D0                     __ptext129:	
 32180 ;; *************** function _app_flow_money_off *****************
 32181 ;; Defined at:
 32182 ;;		line 125 in file "src/app/flow.c"
 32183 ;; Parameters:    Size  Location     Type
 32184 ;;		None
 32185 ;; Auto vars:     Size  Location     Type
 32186 ;;		None
 32187 ;; Return value:  Size  Location     Type
 32188 ;;                  1    wreg      void 
 32189 ;; Registers used:
 32190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 32191 ;; Tracked objects:
 32192 ;;		On entry : 0/0
 32193 ;;		On exit  : 0/0
 32194 ;;		Unchanged: 0/0
 32195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32199 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32200 ;;Total ram usage:        2 bytes
 32201 ;; Hardware stack levels used:    1
 32202 ;; Hardware stack levels required when called:    4
 32203 ;; This function calls:
 32204 ;;		_in_app_vavle_off
 32205 ;; This function is called by:
 32206 ;;		_flow_sampling_process
 32207 ;; This function uses a non-reentrant model
 32208 ;;
 32209                           
 32210                           
 32211                           ;psect for function _app_flow_money_off
 32212  03D0                     _app_flow_money_off:	
 32213                           
 32214                           ;flow.c: 126: __q31=(int32_t)(mainSystemData.balanceOff);
 32215                           
 32216                           ;incstack = 0
 32217                           ; Regs used in _app_flow_money_off: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 32218  03D0  3016               	movlw	22
 32219  03D1  0084               	movwf	4
 32220  03D2  30BF               	movlw	191
 32221  03D3  0085               	movwf	5
 32222  03D4  3F00               	moviw [0]fsr0
 32223  03D5  00F4               	movwf	??_app_flow_money_off
 32224  03D6  3F01               	moviw [1]fsr0
 32225  03D7  00F5               	movwf	??_app_flow_money_off+1
 32226  03D8  0874               	movf	??_app_flow_money_off,w
 32227  03D9  0021               	movlb	1	; select bank1
 32228  03DA  00BE               	movwf	___q31^(0+128)
 32229  03DB  0875               	movf	??_app_flow_money_off+1,w
 32230  03DC  00BF               	movwf	(___q31+1)^(0+128)
 32231  03DD  0D89               	rlf	9,f
 32232  03DE  3B89               	subwfb	9,f
 32233  03DF  0989               	comf	9,f
 32234  03E0  00C0               	movwf	(___q31+2)^(0+128)
 32235  03E1  00C1               	movwf	(___q31+3)^(0+128)
 32236                           
 32237                           ;flow.c: 127: if (rtBalanceMoney < __q31) {
 32238  03E2  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32239  03E3  3A80               	xorlw	128
 32240  03E4  00F4               	movwf	??_app_flow_money_off
 32241  03E5  0841               	movf	(___q31+3)^(0+128),w
 32242  03E6  3A80               	xorlw	128
 32243  03E7  0274               	subwf	??_app_flow_money_off,w
 32244  03E8  1D03               	skipz
 32245  03E9  2BF4               	goto	u8303
 32246  03EA  0840               	movf	(___q31+2)^(0+128),w
 32247  03EB  0244               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32248  03EC  1D03               	skipz
 32249  03ED  2BF4               	goto	u8303
 32250  03EE  083F               	movf	(___q31+1)^(0+128),w
 32251  03EF  0243               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32252  03F0  1D03               	skipz
 32253  03F1  2BF4               	goto	u8303
 32254  03F2  083E               	movf	___q31^(0+128),w
 32255  03F3  0242               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32256  03F4                     u8303:	
 32257  03F4  1803               	skipnc
 32258  03F5  2BFB               	goto	l1014
 32259                           
 32260                           ;flow.c: 128: warningStatus.bits.moneyLowWarning = 1;
 32261  03F6  0022               	movlb	2	; select bank2
 32262  03F7  162E               	bsf	_warningStatus^(0+256),4
 32263                           
 32264                           ;flow.c: 130: deviceStatus.bits.noEnough=1;
 32265  03F8  0021               	movlb	1	; select bank1
 32266  03F9  14BA               	bsf	_deviceStatus^(0+128),1
 32267                           
 32268                           ;flow.c: 131: in_app_vavle_off();
 32269  03FA  2C29               	ljmp	l9439
 32270  03FB                     l1014:	
 32271                           ;flow.c: 132: } else {
 32272                           
 32273                           
 32274                           ;flow.c: 133: deviceStatus.bits.noEnough=0;
 32275  03FB  10BA               	bcf	_deviceStatus^(0+128),1
 32276  03FC  0008               	return
 32277  03FD                     __end_of_app_flow_money_off:	
 32278  03FD                     __ptext128:	
 32279 ;; *************** function _app_flow_money_warning *****************
 32280 ;; Defined at:
 32281 ;;		line 116 in file "src/app/flow.c"
 32282 ;; Parameters:    Size  Location     Type
 32283 ;;		None
 32284 ;; Auto vars:     Size  Location     Type
 32285 ;;		None
 32286 ;; Return value:  Size  Location     Type
 32287 ;;                  1    wreg      void 
 32288 ;; Registers used:
 32289 ;;		wreg, fsr0l, fsr0h, pclath
 32290 ;; Tracked objects:
 32291 ;;		On entry : 0/0
 32292 ;;		On exit  : 0/0
 32293 ;;		Unchanged: 0/0
 32294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32297 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32298 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32299 ;;Total ram usage:        2 bytes
 32300 ;; Hardware stack levels used:    1
 32301 ;; Hardware stack levels required when called:    2
 32302 ;; This function calls:
 32303 ;;		Nothing
 32304 ;; This function is called by:
 32305 ;;		_flow_sampling_process
 32306 ;; This function uses a non-reentrant model
 32307 ;;
 32308                           
 32309                           
 32310                           ;psect for function _app_flow_money_warning
 32311  03FD                     _app_flow_money_warning:	
 32312                           
 32313                           ;flow.c: 117: __q31=(int32_t)(mainSystemData.balanceWarning);
 32314                           
 32315                           ;incstack = 0
 32316                           ; Regs used in _app_flow_money_warning: [wreg-fsr0h+pclath]
 32317  03FD  3014               	movlw	20
 32318  03FE  0084               	movwf	4
 32319  03FF  30BF               	movlw	191
 32320  0400  0085               	movwf	5
 32321  0401  3F00               	moviw [0]fsr0
 32322  0402  00F3               	movwf	??_app_flow_money_warning
 32323  0403  3F01               	moviw [1]fsr0
 32324  0404  00F4               	movwf	??_app_flow_money_warning+1
 32325  0405  0873               	movf	??_app_flow_money_warning,w
 32326  0406  0021               	movlb	1	; select bank1
 32327  0407  00BE               	movwf	___q31^(0+128)
 32328  0408  0874               	movf	??_app_flow_money_warning+1,w
 32329  0409  00BF               	movwf	(___q31+1)^(0+128)
 32330  040A  0D89               	rlf	9,f
 32331  040B  3B89               	subwfb	9,f
 32332  040C  0989               	comf	9,f
 32333  040D  00C0               	movwf	(___q31+2)^(0+128)
 32334  040E  00C1               	movwf	(___q31+3)^(0+128)
 32335                           
 32336                           ;flow.c: 118: if (rtBalanceMoney < __q31) {
 32337  040F  0845               	movf	(_rtBalanceMoney+3)^(0+128),w	;volatile
 32338  0410  3A80               	xorlw	128
 32339  0411  00F3               	movwf	??_app_flow_money_warning
 32340  0412  0841               	movf	(___q31+3)^(0+128),w
 32341  0413  3A80               	xorlw	128
 32342  0414  0273               	subwf	??_app_flow_money_warning,w
 32343  0415  1D03               	skipz
 32344  0416  2C21               	goto	u8293
 32345  0417  0840               	movf	(___q31+2)^(0+128),w
 32346  0418  0244               	subwf	(_rtBalanceMoney+2)^(0+128),w	;volatile
 32347  0419  1D03               	skipz
 32348  041A  2C21               	goto	u8293
 32349  041B  083F               	movf	(___q31+1)^(0+128),w
 32350  041C  0243               	subwf	(_rtBalanceMoney+1)^(0+128),w	;volatile
 32351  041D  1D03               	skipz
 32352  041E  2C21               	goto	u8293
 32353  041F  083E               	movf	___q31^(0+128),w
 32354  0420  0242               	subwf	_rtBalanceMoney^(0+128),w	;volatile
 32355  0421                     u8293:	
 32356  0421  1803               	skipnc
 32357  0422  2C26               	goto	l1009
 32358                           
 32359                           ;flow.c: 119: warningStatus.bits.moneyLowWarning = 1;
 32360  0423  0022               	movlb	2	; select bank2
 32361  0424  162E               	bsf	_warningStatus^(0+256),4
 32362                           
 32363                           ;flow.c: 120: } else {
 32364  0425  0008               	return
 32365  0426                     l1009:	
 32366                           
 32367                           ;flow.c: 121: warningStatus.bits.moneyLowWarning = 0;
 32368  0426  0022               	movlb	2	; select bank2
 32369  0427  122E               	bcf	_warningStatus^(0+256),4
 32370  0428  0008               	return
 32371  0429                     __end_of_app_flow_money_warning:	
 32372  0429                     __ptext130:	
 32373 ;; *************** function _in_app_vavle_off *****************
 32374 ;; Defined at:
 32375 ;;		line 23 in file "src/app/flow.c"
 32376 ;; Parameters:    Size  Location     Type
 32377 ;;		None
 32378 ;; Auto vars:     Size  Location     Type
 32379 ;;		None
 32380 ;; Return value:  Size  Location     Type
 32381 ;;                  1    wreg      void 
 32382 ;; Registers used:
 32383 ;;		wreg, status,2, status,0, pclath, cstack
 32384 ;; Tracked objects:
 32385 ;;		On entry : 0/0
 32386 ;;		On exit  : 0/0
 32387 ;;		Unchanged: 0/0
 32388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32393 ;;Total ram usage:        0 bytes
 32394 ;; Hardware stack levels used:    1
 32395 ;; Hardware stack levels required when called:    3
 32396 ;; This function calls:
 32397 ;;		_valve_off
 32398 ;; This function is called by:
 32399 ;;		_app_flow_money_off
 32400 ;; This function uses a non-reentrant model
 32401 ;;
 32402                           
 32403                           
 32404                           ;psect for function _in_app_vavle_off
 32405  0429                     _in_app_vavle_off:	
 32406  0429                     l9439:	
 32407                           ;incstack = 0
 32408                           ; Regs used in _in_app_vavle_off: [wreg+status,2+status,0+pclath+cstack]
 32409                           
 32410                           
 32411                           ;flow.c: 24: Event |= (uint8_t)(0x01<<6);
 32412  0429  0021               	movlb	1	; select bank1
 32413  042A  1736               	bsf	_Event^(0+128),6
 32414                           
 32415                           ;flow.c: 25: if(deviceStatus.bits.acPowerDown)return;
 32416  042B  19BA               	btfsc	_deviceStatus^(0+128),3
 32417  042C  0008               	return
 32418                           
 32419                           ;flow.c: 26: valve_off();
 32420  042D  31B5  2DD3         	ljmp	l9035
 32421  042F                     __end_of_in_app_vavle_off:	
 32422                           
 32423                           	psect	text126
 32424  0740                     __ptext126:	
 32425 ;; *************** function _app_flow_rt_balance_money_cal *****************
 32426 ;; Defined at:
 32427 ;;		line 108 in file "src/app/flow.c"
 32428 ;; Parameters:    Size  Location     Type
 32429 ;;		None
 32430 ;; Auto vars:     Size  Location     Type
 32431 ;;		None
 32432 ;; Return value:  Size  Location     Type
 32433 ;;                  1    wreg      void 
 32434 ;; Registers used:
 32435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 32436 ;; Tracked objects:
 32437 ;;		On entry : 0/0
 32438 ;;		On exit  : 0/0
 32439 ;;		Unchanged: 0/0
 32440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32443 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32444 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0
 32445 ;;Total ram usage:        8 bytes
 32446 ;; Hardware stack levels used:    1
 32447 ;; Hardware stack levels required when called:    3
 32448 ;; This function calls:
 32449 ;;		___aldiv
 32450 ;;		___lmul
 32451 ;; This function is called by:
 32452 ;;		_flow_sampling_process
 32453 ;; This function uses a non-reentrant model
 32454 ;;
 32455                           
 32456                           
 32457                           ;psect for function _app_flow_rt_balance_money_cal
 32458  0740                     _app_flow_rt_balance_money_cal:	
 32459                           
 32460                           ;flow.c: 110: __q31 = mainSystemData.price;
 32461                           
 32462                           ;incstack = 0
 32463                           ; Regs used in _app_flow_rt_balance_money_cal: [wreg-fsr0h+status,2+status,0+pclath+csta
      +                          ck]
 32464  0740  3012               	movlw	18
 32465  0741  0084               	movwf	4
 32466  0742  30BF               	movlw	191
 32467  0743  0085               	movwf	5
 32468  0744  3F00               	moviw [0]fsr0
 32469  0745  0020               	movlb	0	; select bank0
 32470  0746  00B6               	movwf	??_app_flow_rt_balance_money_cal
 32471  0747  3F01               	moviw [1]fsr0
 32472  0748  00B7               	movwf	??_app_flow_rt_balance_money_cal+1
 32473  0749  0836               	movf	??_app_flow_rt_balance_money_cal,w
 32474  074A  0021               	movlb	1	; select bank1
 32475  074B  00BE               	movwf	___q31^(0+128)
 32476  074C  0020               	movlb	0	; select bank0
 32477  074D  0837               	movf	??_app_flow_rt_balance_money_cal+1,w
 32478  074E  0021               	movlb	1	; select bank1
 32479  074F  00BF               	movwf	(___q31+1)^(0+128)
 32480  0750  0D89               	rlf	9,f
 32481  0751  3B89               	subwfb	9,f
 32482  0752  0989               	comf	9,f
 32483  0753  00C0               	movwf	(___q31+2)^(0+128)
 32484  0754  00C1               	movwf	(___q31+3)^(0+128)
 32485                           
 32486                           ;flow.c: 112: __q31 = (__q31 * rtVolume_m3 / 10);
 32487  0755  0020               	movlb	0	; select bank0
 32488  0756  300A               	movlw	10
 32489  0757  01AB               	clrf	___aldiv@divisor+3
 32490  0758  01AA               	clrf	___aldiv@divisor+2
 32491  0759  01A9               	clrf	___aldiv@divisor+1
 32492  075A  00A8               	movwf	___aldiv@divisor
 32493  075B  0021               	movlb	1	; select bank1
 32494  075C  0834               	movf	_rtVolume_m3^(0+128),w	;volatile
 32495  075D  0020               	movlb	0	; select bank0
 32496  075E  00A0               	movwf	___lmul@multiplier
 32497  075F  0021               	movlb	1	; select bank1
 32498  0760  0835               	movf	(_rtVolume_m3+1)^(0+128),w	;volatile
 32499  0761  0020               	movlb	0	; select bank0
 32500  0762  00A1               	movwf	___lmul@multiplier+1
 32501  0763  01A2               	clrf	___lmul@multiplier+2
 32502  0764  01A3               	clrf	___lmul@multiplier+3
 32503  0765  0021               	movlb	1	; select bank1
 32504  0766  0841               	movf	(___q31+3)^(0+128),w
 32505  0767  0020               	movlb	0	; select bank0
 32506  0768  00A7               	movwf	___lmul@multiplicand+3
 32507  0769  0021               	movlb	1	; select bank1
 32508  076A  0840               	movf	(___q31+2)^(0+128),w
 32509  076B  0020               	movlb	0	; select bank0
 32510  076C  00A6               	movwf	___lmul@multiplicand+2
 32511  076D  0021               	movlb	1	; select bank1
 32512  076E  083F               	movf	(___q31+1)^(0+128),w
 32513  076F  0020               	movlb	0	; select bank0
 32514  0770  00A5               	movwf	___lmul@multiplicand+1
 32515  0771  0021               	movlb	1	; select bank1
 32516  0772  083E               	movf	___q31^(0+128),w
 32517  0773  0020               	movlb	0	; select bank0
 32518  0774  00A4               	movwf	___lmul@multiplicand
 32519  0775  318F  27D3  3187   	fcall	___lmul
 32520  0778  0020               	movlb	0	; select bank0
 32521  0779  0823               	movf	?___lmul+3,w
 32522  077A  00AF               	movwf	___aldiv@dividend+3
 32523  077B  0822               	movf	?___lmul+2,w
 32524  077C  00AE               	movwf	___aldiv@dividend+2
 32525  077D  0821               	movf	?___lmul+1,w
 32526  077E  00AD               	movwf	___aldiv@dividend+1
 32527  077F  0820               	movf	?___lmul,w
 32528  0780  00AC               	movwf	___aldiv@dividend
 32529  0781  318A  22E0  3187   	fcall	___aldiv
 32530  0784  0020               	movlb	0	; select bank0
 32531  0785  082B               	movf	?___aldiv+3,w
 32532  0786  0021               	movlb	1	; select bank1
 32533  0787  00C1               	movwf	(___q31+3)^(0+128)
 32534  0788  0020               	movlb	0	; select bank0
 32535  0789  082A               	movf	?___aldiv+2,w
 32536  078A  0021               	movlb	1	; select bank1
 32537  078B  00C0               	movwf	(___q31+2)^(0+128)
 32538  078C  0020               	movlb	0	; select bank0
 32539  078D  0829               	movf	?___aldiv+1,w
 32540  078E  0021               	movlb	1	; select bank1
 32541  078F  00BF               	movwf	(___q31+1)^(0+128)
 32542  0790  0020               	movlb	0	; select bank0
 32543  0791  0828               	movf	?___aldiv,w
 32544  0792  0021               	movlb	1	; select bank1
 32545  0793  00BE               	movwf	___q31^(0+128)
 32546                           
 32547                           ;flow.c: 113: rtBalanceMoney = mainSystemData.BalanceMoney - __q31;
 32548  0794  302C               	movlw	44
 32549  0795  0084               	movwf	4
 32550  0796  30BF               	movlw	191
 32551  0797  0085               	movwf	5
 32552  0798  3F00               	moviw [0]fsr0
 32553  0799  0020               	movlb	0	; select bank0
 32554  079A  00B6               	movwf	??_app_flow_rt_balance_money_cal
 32555  079B  3F01               	moviw [1]fsr0
 32556  079C  00B7               	movwf	??_app_flow_rt_balance_money_cal+1
 32557  079D  3F02               	moviw [2]fsr0
 32558  079E  00B8               	movwf	??_app_flow_rt_balance_money_cal+2
 32559  079F  3F03               	moviw [3]fsr0
 32560  07A0  00B9               	movwf	??_app_flow_rt_balance_money_cal+3
 32561  07A1  0021               	movlb	1	; select bank1
 32562  07A2  093E               	comf	___q31^(0+128),w
 32563  07A3  0020               	movlb	0	; select bank0
 32564  07A4  00BA               	movwf	??_app_flow_rt_balance_money_cal+4
 32565  07A5  0021               	movlb	1	; select bank1
 32566  07A6  093F               	comf	(___q31+1)^(0+128),w
 32567  07A7  0020               	movlb	0	; select bank0
 32568  07A8  00BB               	movwf	??_app_flow_rt_balance_money_cal+5
 32569  07A9  0021               	movlb	1	; select bank1
 32570  07AA  0940               	comf	(___q31+2)^(0+128),w
 32571  07AB  0020               	movlb	0	; select bank0
 32572  07AC  00BC               	movwf	??_app_flow_rt_balance_money_cal+6
 32573  07AD  0021               	movlb	1	; select bank1
 32574  07AE  0941               	comf	(___q31+3)^(0+128),w
 32575  07AF  0020               	movlb	0	; select bank0
 32576  07B0  00BD               	movwf	??_app_flow_rt_balance_money_cal+7
 32577  07B1  0ABA               	incf	??_app_flow_rt_balance_money_cal+4,f
 32578  07B2  1903               	skipnz
 32579  07B3  0ABB               	incf	??_app_flow_rt_balance_money_cal+5,f
 32580  07B4  1903               	skipnz
 32581  07B5  0ABC               	incf	??_app_flow_rt_balance_money_cal+6,f
 32582  07B6  1903               	skipnz
 32583  07B7  0ABD               	incf	??_app_flow_rt_balance_money_cal+7,f
 32584  07B8  083A               	movf	??_app_flow_rt_balance_money_cal+4,w
 32585  07B9  07B6               	addwf	??_app_flow_rt_balance_money_cal,f
 32586  07BA  083B               	movf	??_app_flow_rt_balance_money_cal+5,w
 32587  07BB  3DB7               	addwfc	??_app_flow_rt_balance_money_cal+1,f
 32588  07BC  083C               	movf	??_app_flow_rt_balance_money_cal+6,w
 32589  07BD  3DB8               	addwfc	??_app_flow_rt_balance_money_cal+2,f
 32590  07BE  083D               	movf	??_app_flow_rt_balance_money_cal+7,w
 32591  07BF  3DB9               	addwfc	??_app_flow_rt_balance_money_cal+3,f
 32592  07C0  0839               	movf	??_app_flow_rt_balance_money_cal+3,w
 32593  07C1  0021               	movlb	1	; select bank1
 32594  07C2  00C5               	movwf	(_rtBalanceMoney+3)^(0+128)	;volatile
 32595  07C3  0020               	movlb	0	; select bank0
 32596  07C4  0838               	movf	??_app_flow_rt_balance_money_cal+2,w
 32597  07C5  0021               	movlb	1	; select bank1
 32598  07C6  00C4               	movwf	(_rtBalanceMoney+2)^(0+128)	;volatile
 32599  07C7  0020               	movlb	0	; select bank0
 32600  07C8  0837               	movf	??_app_flow_rt_balance_money_cal+1,w
 32601  07C9  0021               	movlb	1	; select bank1
 32602  07CA  00C3               	movwf	(_rtBalanceMoney+1)^(0+128)	;volatile
 32603  07CB  0020               	movlb	0	; select bank0
 32604  07CC  0836               	movf	??_app_flow_rt_balance_money_cal,w
 32605  07CD  0021               	movlb	1	; select bank1
 32606  07CE  00C2               	movwf	_rtBalanceMoney^(0+128)	;volatile
 32607  07CF  0008               	return
 32608  07D0                     __end_of_app_flow_rt_balance_money_cal:	
 32609                           
 32610                           	psect	text131
 32611  35D3                     __ptext131:	
 32612 ;; *************** function _valve_off *****************
 32613 ;; Defined at:
 32614 ;;		line 18 in file "src/driver/other-gpio.c"
 32615 ;; Parameters:    Size  Location     Type
 32616 ;;		None
 32617 ;; Auto vars:     Size  Location     Type
 32618 ;;		None
 32619 ;; Return value:  Size  Location     Type
 32620 ;;                  1    wreg      void 
 32621 ;; Registers used:
 32622 ;;		wreg, status,2, status,0
 32623 ;; Tracked objects:
 32624 ;;		On entry : 0/0
 32625 ;;		On exit  : 0/0
 32626 ;;		Unchanged: 0/0
 32627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32631 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32632 ;;Total ram usage:        1 bytes
 32633 ;; Hardware stack levels used:    1
 32634 ;; Hardware stack levels required when called:    2
 32635 ;; This function calls:
 32636 ;;		Nothing
 32637 ;; This function is called by:
 32638 ;;		_in_app_vavle_off
 32639 ;; This function uses a non-reentrant model
 32640 ;;
 32641                           
 32642                           
 32643                           ;psect for function _valve_off
 32644  35D3                     _valve_off:	
 32645  35D3                     l9035:	
 32646                           ;incstack = 0
 32647                           ; Regs used in _valve_off: [wreg+status,2+status,0]
 32648                           
 32649                           
 32650                           ;other-gpio.c: 20: if(valveStatus== VALVE_CLOSEING || valveStatus==VALVE_OPENING)return;
 32651  35D3  3004               	movlw	4
 32652  35D4  0021               	movlb	1	; select bank1
 32653  35D5  063C               	xorwf	_valveStatus^(0+128),w
 32654  35D6  1903               	btfsc	3,2
 32655  35D7  0008               	return
 32656  35D8  3003               	movlw	3
 32657  35D9  063C               	xorwf	_valveStatus^(0+128),w
 32658  35DA  1903               	btfsc	3,2
 32659  35DB  0008               	return
 32660                           
 32661                           ;other-gpio.c: 22: do { LATDbits.LATD7 = 0; } while(0);
 32662  35DC  0022               	movlb	2	; select bank2
 32663  35DD  138F               	bcf	15,7	;volatile
 32664                           
 32665                           ;other-gpio.c: 23: do { LATBbits.LATB0 = 1; } while(0);
 32666  35DE  140D               	bsf	13,0	;volatile
 32667                           
 32668                           ;other-gpio.c: 24: do { LATDbits.LATD7 = 1; } while(0);
 32669  35DF  178F               	bsf	15,7	;volatile
 32670                           
 32671                           ;other-gpio.c: 25: valveStatus=VALVE_CLOSEING;
 32672  35E0  3004               	movlw	4
 32673  35E1  00F3               	movwf	??_valve_off
 32674  35E2  0021               	movlb	1	; select bank1
 32675  35E3  00BC               	movwf	_valveStatus^(0+128)
 32676                           
 32677                           ;other-gpio.c: 26: valveTimer=0;
 32678  35E4  01BD               	clrf	_valveTimer^(0+128)
 32679  35E5  0008               	return
 32680  35E6                     __end_of_valve_off:	
 32681                           
 32682                           	psect	text152
 32683  377E                     __ptext152:	
 32684 ;; *************** function _FLASH_WriteBlock *****************
 32685 ;; Defined at:
 32686 ;;		line 94 in file "mcc_generated_files/memory.c"
 32687 ;; Parameters:    Size  Location     Type
 32688 ;;  writeAddr       2    0[BANK0 ] unsigned int 
 32689 ;;  flashWordArr    1    2[BANK0 ] PTR unsigned int 
 32690 ;;		 -> flashBuffer(64), 
 32691 ;; Auto vars:     Size  Location     Type
 32692 ;;  blockStartAd    2    6[BANK0 ] unsigned int 
 32693 ;;  i               1    9[BANK0 ] unsigned char 
 32694 ;;  GIEBitValue     1    8[BANK0 ] unsigned char 
 32695 ;; Return value:  Size  Location     Type
 32696 ;;                  1    wreg      char 
 32697 ;; Registers used:
 32698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 32699 ;; Tracked objects:
 32700 ;;		On entry : 0/0
 32701 ;;		On exit  : 0/0
 32702 ;;		Unchanged: 0/0
 32703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32704 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 32705 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0
 32706 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0
 32707 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0
 32708 ;;Total ram usage:       10 bytes
 32709 ;; Hardware stack levels used:    1
 32710 ;; Hardware stack levels required when called:    3
 32711 ;; This function calls:
 32712 ;;		_FLASH_EraseBlock
 32713 ;; This function is called by:
 32714 ;;		_m_flash_copy
 32715 ;;		_FLASH_WriteWord
 32716 ;; This function uses a non-reentrant model
 32717 ;;
 32718                           
 32719                           
 32720                           ;psect for function _FLASH_WriteBlock
 32721  377E                     _FLASH_WriteBlock:	
 32722                           
 32723                           ;memory.c: 96: uint16_t blockStartAddr = (uint16_t )(writeAddr & ((16384-1) ^ (32-1)));
 32724                           
 32725                           ;incstack = 0
 32726                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 32727  377E  30E0               	movlw	224
 32728  377F  0020               	movlb	0	; select bank0
 32729  3780  0520               	andwf	FLASH_WriteBlock@writeAddr,w
 32730  3781  00A6               	movwf	FLASH_WriteBlock@blockStartAddr
 32731  3782  303F               	movlw	63
 32732  3783  0521               	andwf	FLASH_WriteBlock@writeAddr+1,w
 32733  3784  00A7               	movwf	FLASH_WriteBlock@blockStartAddr+1
 32734                           
 32735                           ;memory.c: 97: uint8_t GIEBitValue = INTCONbits.GIE;
 32736  3785  3000               	movlw	0
 32737  3786  1B8B               	btfsc	11,7	;volatile
 32738  3787  3001               	movlw	1
 32739  3788  00A8               	movwf	FLASH_WriteBlock@GIEBitValue
 32740                           
 32741                           ;memory.c: 98: uint8_t i;
 32742                           ;memory.c: 101: if( writeAddr != blockStartAddr )
 32743  3789  0827               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 32744  378A  0621               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 32745  378B  1D03               	skipz
 32746  378C  2F8F               	goto	u11065
 32747  378D  0826               	movf	FLASH_WriteBlock@blockStartAddr,w
 32748  378E  0620               	xorwf	FLASH_WriteBlock@writeAddr,w
 32749  378F                     u11065:	
 32750  378F  1D03               	btfss	3,2
 32751  3790  0008               	return
 32752                           
 32753                           ;memory.c: 104: }
 32754                           ;memory.c: 106: INTCONbits.GIE = 0;
 32755                           
 32756                           ;memory.c: 102: {
 32757                           ;memory.c: 103: return -1;
 32758                           ;	Return value of _FLASH_WriteBlock is never used
 32759  3791  138B               	bcf	11,7	;volatile
 32760                           
 32761                           ;memory.c: 109: FLASH_EraseBlock(writeAddr);
 32762  3792  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 32763  3793  00F4               	movwf	FLASH_EraseBlock@startAddr+1
 32764  3794  0820               	movf	FLASH_WriteBlock@writeAddr,w
 32765  3795  00F3               	movwf	FLASH_EraseBlock@startAddr
 32766  3796  27E3  31B7         	fcall	_FLASH_EraseBlock
 32767                           
 32768                           ;memory.c: 112: EECON1bits.EEPGD = 1;
 32769  3798  0023               	movlb	3	; select bank3
 32770  3799  1795               	bsf	21,7	;volsfr
 32771                           
 32772                           ;memory.c: 113: EECON1bits.CFGS = 0;
 32773  379A  1315               	bcf	21,6	;volsfr
 32774                           
 32775                           ;memory.c: 114: EECON1bits.WREN = 1;
 32776  379B  1515               	bsf	21,2	;volsfr
 32777                           
 32778                           ;memory.c: 115: EECON1bits.LWLO = 1;
 32779  379C  1695               	bsf	21,5	;volsfr
 32780                           
 32781                           ;memory.c: 117: for (i=0; i<32; i++)
 32782  379D  0020               	movlb	0	; select bank0
 32783  379E  3020               	movlw	32
 32784  379F  01A9               	clrf	FLASH_WriteBlock@i
 32785  37A0  0229               	subwf	FLASH_WriteBlock@i,w
 32786  37A1  1803               	btfsc	3,0
 32787  37A2  2FDA               	goto	l246
 32788  37A3                     l12437:	
 32789                           
 32790                           ;memory.c: 118: {
 32791                           ;memory.c: 120: EEADRL = (writeAddr & 0xFF);
 32792  37A3  0820               	movf	FLASH_WriteBlock@writeAddr,w
 32793  37A4  0023               	movlb	3	; select bank3
 32794  37A5  0091               	movwf	17	;volatile
 32795                           
 32796                           ;memory.c: 122: EEADRH = ((writeAddr & 0xFF00) >> 8);
 32797  37A6  0020               	movlb	0	; select bank0
 32798  37A7  0821               	movf	FLASH_WriteBlock@writeAddr+1,w
 32799  37A8  0023               	movlb	3	; select bank3
 32800  37A9  0092               	movwf	18	;volatile
 32801                           
 32802                           ;memory.c: 125: EEDATL = flashWordArray[i];
 32803  37AA  0020               	movlb	0	; select bank0
 32804  37AB  3529               	lslf	FLASH_WriteBlock@i,w
 32805  37AC  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 32806  37AD  00A3               	movwf	??_FLASH_WriteBlock
 32807  37AE  0086               	movwf	6
 32808  37AF  3002               	movlw	2	; select bank4/5
 32809  37B0  0087               	movwf	7
 32810  37B1  0801               	movf	1,w
 32811  37B2  0023               	movlb	3	; select bank3
 32812  37B3  0093               	movwf	19	;volatile
 32813                           
 32814                           ;memory.c: 126: EEDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 32815  37B4  0020               	movlb	0	; select bank0
 32816  37B5  3529               	lslf	FLASH_WriteBlock@i,w
 32817  37B6  0722               	addwf	FLASH_WriteBlock@flashWordArray,w
 32818  37B7  00A3               	movwf	??_FLASH_WriteBlock
 32819  37B8  0086               	movwf	6
 32820  37B9  3F40               	moviw [0]fsr1
 32821  37BA  00A4               	movwf	??_FLASH_WriteBlock+1
 32822  37BB  3F41               	moviw [1]fsr1
 32823  37BC  00A5               	movwf	??_FLASH_WriteBlock+2
 32824  37BD  0023               	movlb	3	; select bank3
 32825  37BE  0094               	movwf	20	;volatile
 32826                           
 32827                           ;memory.c: 128: if(i == (32-1))
 32828  37BF  301F               	movlw	31
 32829  37C0  0020               	movlb	0	; select bank0
 32830  37C1  0629               	xorwf	FLASH_WriteBlock@i,w
 32831  37C2  1D03               	btfss	3,2
 32832  37C3  2FC6               	goto	l12449
 32833                           
 32834                           ;memory.c: 129: {
 32835                           ;memory.c: 131: EECON1bits.LWLO = 0;
 32836  37C4  0023               	movlb	3	; select bank3
 32837  37C5  1295               	bcf	21,5	;volsfr
 32838  37C6                     l12449:	
 32839                           
 32840                           ;memory.c: 132: }
 32841                           ;memory.c: 134: EECON2 = 0x55;
 32842  37C6  3055               	movlw	85
 32843  37C7  0023               	movlb	3	; select bank3
 32844  37C8  0096               	movwf	22	;volsfr
 32845                           
 32846                           ;memory.c: 135: EECON2 = 0xAA;
 32847  37C9  30AA               	movlw	170
 32848  37CA  0096               	movwf	22	;volsfr
 32849                           
 32850                           ;memory.c: 136: EECON1bits.WR = 1;
 32851  37CB  1495               	bsf	21,1	;volsfr
 32852                           
 32853                           ;memory.c: 137: __nop();
 32854  37CC  0000               	nop
 32855                           
 32856                           ;memory.c: 138: __nop();
 32857  37CD  0000               	nop
 32858                           
 32859                           ;memory.c: 140: writeAddr++;
 32860  37CE  3001               	movlw	1
 32861  37CF  0020               	movlb	0	; select bank0
 32862  37D0  07A0               	addwf	FLASH_WriteBlock@writeAddr,f
 32863  37D1  3000               	movlw	0
 32864  37D2  3DA1               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 32865  37D3  3001               	movlw	1
 32866  37D4  00A3               	movwf	??_FLASH_WriteBlock
 32867  37D5  07A9               	addwf	FLASH_WriteBlock@i,f
 32868  37D6  3020               	movlw	32
 32869  37D7  0229               	subwf	FLASH_WriteBlock@i,w
 32870  37D8  1C03               	skipc
 32871  37D9  2FA3               	goto	l12437
 32872  37DA                     l246:	
 32873                           
 32874                           ;memory.c: 141: }
 32875                           ;memory.c: 143: EECON1bits.WREN = 0;
 32876  37DA  0023               	movlb	3	; select bank3
 32877  37DB  1115               	bcf	21,2	;volsfr
 32878                           
 32879                           ;memory.c: 144: INTCONbits.GIE = GIEBitValue;
 32880  37DC  0020               	movlb	0	; select bank0
 32881  37DD  0C28               	rrf	FLASH_WriteBlock@GIEBitValue,w
 32882  37DE  1C03               	skipc
 32883  37DF  138B               	bcf	11,7	;volatile
 32884  37E0  1803               	skipnc
 32885  37E1  178B               	bsf	11,7	;volatile
 32886  37E2  0008               	return
 32887  37E3                     __end_of_FLASH_WriteBlock:	
 32888                           ;memory.c: 146: return 0;
 32889                           ;	Return value of _FLASH_WriteBlock is never used
 32890                           
 32891  37E3                     __ptext153:	
 32892 ;; *************** function _FLASH_EraseBlock *****************
 32893 ;; Defined at:
 32894 ;;		line 149 in file "mcc_generated_files/memory.c"
 32895 ;; Parameters:    Size  Location     Type
 32896 ;;  startAddr       2    3[COMMON] unsigned int 
 32897 ;; Auto vars:     Size  Location     Type
 32898 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 32899 ;; Return value:  Size  Location     Type
 32900 ;;                  1    wreg      void 
 32901 ;; Registers used:
 32902 ;;		wreg, status,2, status,0
 32903 ;; Tracked objects:
 32904 ;;		On entry : 0/0
 32905 ;;		On exit  : 0/0
 32906 ;;		Unchanged: 0/0
 32907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 32908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 32912 ;;Total ram usage:        3 bytes
 32913 ;; Hardware stack levels used:    1
 32914 ;; Hardware stack levels required when called:    2
 32915 ;; This function calls:
 32916 ;;		Nothing
 32917 ;; This function is called by:
 32918 ;;		_FLASH_WriteBlock
 32919 ;;		_m_flash_erase
 32920 ;; This function uses a non-reentrant model
 32921 ;;
 32922                           
 32923                           
 32924                           ;psect for function _FLASH_EraseBlock
 32925  37E3                     _FLASH_EraseBlock:	
 32926                           
 32927                           ;memory.c: 151: uint8_t GIEBitValue = INTCONbits.GIE;
 32928                           
 32929                           ;incstack = 0
 32930                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 32931  37E3  3000               	movlw	0
 32932  37E4  1B8B               	btfsc	11,7	;volatile
 32933  37E5  3001               	movlw	1
 32934  37E6  00F5               	movwf	FLASH_EraseBlock@GIEBitValue
 32935                           
 32936                           ;memory.c: 153: INTCONbits.GIE = 0;
 32937  37E7  138B               	bcf	11,7	;volatile
 32938                           
 32939                           ;memory.c: 155: EEADRL = (startAddr & 0xFF);
 32940  37E8  0873               	movf	FLASH_EraseBlock@startAddr,w
 32941  37E9  0023               	movlb	3	; select bank3
 32942  37EA  0091               	movwf	17	;volatile
 32943                           
 32944                           ;memory.c: 157: EEADRH = ((startAddr & 0xFF00) >> 8);
 32945  37EB  0874               	movf	FLASH_EraseBlock@startAddr+1,w
 32946  37EC  0092               	movwf	18	;volatile
 32947                           
 32948                           ;memory.c: 160: EECON1bits.CFGS = 0;
 32949  37ED  1315               	bcf	21,6	;volsfr
 32950                           
 32951                           ;memory.c: 161: EECON1bits.EEPGD = 1;
 32952  37EE  1795               	bsf	21,7	;volsfr
 32953                           
 32954                           ;memory.c: 162: EECON1bits.FREE = 1;
 32955  37EF  1615               	bsf	21,4	;volsfr
 32956                           
 32957                           ;memory.c: 163: EECON1bits.WREN = 1;
 32958  37F0  1515               	bsf	21,2	;volsfr
 32959                           
 32960                           ;memory.c: 166: EECON2 = 0x55;
 32961  37F1  3055               	movlw	85
 32962  37F2  0096               	movwf	22	;volsfr
 32963                           
 32964                           ;memory.c: 167: EECON2 = 0xAA;
 32965  37F3  30AA               	movlw	170
 32966  37F4  0096               	movwf	22	;volsfr
 32967                           
 32968                           ;memory.c: 168: EECON1bits.WR = 1;
 32969  37F5  1495               	bsf	21,1	;volsfr
 32970                           
 32971                           ;memory.c: 169: __nop();
 32972  37F6  0000               	nop
 32973                           
 32974                           ;memory.c: 170: __nop();
 32975  37F7  0000               	nop
 32976                           
 32977                           ;memory.c: 172: EECON1bits.WREN = 0;
 32978  37F8  0023               	movlb	3	; select bank3
 32979  37F9  1115               	bcf	21,2	;volsfr
 32980                           
 32981                           ;memory.c: 173: INTCONbits.GIE = GIEBitValue;
 32982  37FA  0C75               	rrf	FLASH_EraseBlock@GIEBitValue,w
 32983  37FB  1C03               	skipc
 32984  37FC  138B               	bcf	11,7	;volatile
 32985  37FD  1803               	skipnc
 32986  37FE  178B               	bsf	11,7	;volatile
 32987  37FF  0008               	return
 32988  3800                     __end_of_FLASH_EraseBlock:	
 32989                           
 32990                           	psect	text154
 32991  2ADA                     __ptext154:	
 32992 ;; *************** function _FLASH_ReadWord *****************
 32993 ;; Defined at:
 32994 ;;		line 57 in file "mcc_generated_files/memory.c"
 32995 ;; Parameters:    Size  Location     Type
 32996 ;;  flashAddr       2    3[COMMON] unsigned int 
 32997 ;; Auto vars:     Size  Location     Type
 32998 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 32999 ;; Return value:  Size  Location     Type
 33000 ;;                  2    3[COMMON] unsigned int 
 33001 ;; Registers used:
 33002 ;;		wreg, status,2, status,0
 33003 ;; Tracked objects:
 33004 ;;		On entry : 0/0
 33005 ;;		On exit  : 0/0
 33006 ;;		Unchanged: 0/0
 33007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33008 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33009 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33011 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33012 ;;Total ram usage:        3 bytes
 33013 ;; Hardware stack levels used:    1
 33014 ;; Hardware stack levels required when called:    2
 33015 ;; This function calls:
 33016 ;;		Nothing
 33017 ;; This function is called by:
 33018 ;;		_m_flash_copy
 33019 ;;		_FLASH_WriteWord
 33020 ;; This function uses a non-reentrant model
 33021 ;;
 33022                           
 33023                           
 33024                           ;psect for function _FLASH_ReadWord
 33025  2ADA                     _FLASH_ReadWord:	
 33026                           
 33027                           ;memory.c: 59: uint8_t GIEBitValue = INTCONbits.GIE;
 33028                           
 33029                           ;incstack = 0
 33030                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 33031  2ADA  3000               	movlw	0
 33032  2ADB  1B8B               	btfsc	11,7	;volatile
 33033  2ADC  3001               	movlw	1
 33034  2ADD  00F5               	movwf	FLASH_ReadWord@GIEBitValue
 33035                           
 33036                           ;memory.c: 61: INTCONbits.GIE = 0;
 33037  2ADE  138B               	bcf	11,7	;volatile
 33038                           
 33039                           ;memory.c: 62: EEADRL = (flashAddr & 0x00FF);
 33040  2ADF  0873               	movf	FLASH_ReadWord@flashAddr,w
 33041  2AE0  0023               	movlb	3	; select bank3
 33042  2AE1  0091               	movwf	17	;volatile
 33043                           
 33044                           ;memory.c: 63: EEADRH = ((flashAddr & 0xFF00) >> 8);
 33045  2AE2  0874               	movf	FLASH_ReadWord@flashAddr+1,w
 33046  2AE3  0092               	movwf	18	;volatile
 33047                           
 33048                           ;memory.c: 65: EECON1bits.CFGS = 0;
 33049  2AE4  1315               	bcf	21,6	;volsfr
 33050                           
 33051                           ;memory.c: 66: EECON1bits.EEPGD = 1;
 33052  2AE5  1795               	bsf	21,7	;volsfr
 33053                           
 33054                           ;memory.c: 67: EECON1bits.RD = 1;
 33055  2AE6  1415               	bsf	21,0	;volsfr
 33056                           
 33057                           ;memory.c: 68: __nop();
 33058  2AE7  0000               	nop
 33059                           
 33060                           ;memory.c: 69: __nop();
 33061  2AE8  0000               	nop
 33062                           
 33063                           ;memory.c: 70: INTCONbits.GIE = GIEBitValue;
 33064  2AE9  0C75               	rrf	FLASH_ReadWord@GIEBitValue,w
 33065  2AEA  1C03               	skipc
 33066  2AEB  138B               	bcf	11,7	;volatile
 33067  2AEC  1803               	skipnc
 33068  2AED  178B               	bsf	11,7	;volatile
 33069                           
 33070                           ;memory.c: 72: return ((EEDATH << 8) | EEDATL);
 33071  2AEE  0023               	movlb	3	; select bank3
 33072  2AEF  0814               	movf	20,w	;volatile
 33073  2AF0  00F4               	movwf	?_FLASH_ReadWord+1
 33074  2AF1  0813               	movf	19,w	;volatile
 33075  2AF2  00F3               	movwf	?_FLASH_ReadWord
 33076  2AF3  0008               	return
 33077  2AF4                     __end_of_FLASH_ReadWord:	
 33078                           
 33079                           	psect	text156
 33080  35F9                     __ptext156:	
 33081 ;; *************** function _DATAEE_WriteByte *****************
 33082 ;; Defined at:
 33083 ;;		line 180 in file "mcc_generated_files/memory.c"
 33084 ;; Parameters:    Size  Location     Type
 33085 ;;  bAdd            1    wreg     unsigned char 
 33086 ;;  bData           1    3[COMMON] unsigned char 
 33087 ;; Auto vars:     Size  Location     Type
 33088 ;;  bAdd            1    4[COMMON] unsigned char 
 33089 ;;  GIEBitValue     1    5[COMMON] unsigned char 
 33090 ;; Return value:  Size  Location     Type
 33091 ;;                  1    wreg      void 
 33092 ;; Registers used:
 33093 ;;		wreg, status,2, status,0
 33094 ;; Tracked objects:
 33095 ;;		On entry : 0/0
 33096 ;;		On exit  : 0/0
 33097 ;;		Unchanged: 0/0
 33098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33099 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33100 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33102 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33103 ;;Total ram usage:        3 bytes
 33104 ;; Hardware stack levels used:    1
 33105 ;; Hardware stack levels required when called:    2
 33106 ;; This function calls:
 33107 ;;		Nothing
 33108 ;; This function is called by:
 33109 ;;		_data_api_write_eeprom
 33110 ;;		_data_api_write_eeprom_clr
 33111 ;; This function uses a non-reentrant model
 33112 ;;
 33113                           
 33114                           
 33115                           ;psect for function _DATAEE_WriteByte
 33116  35F9                     _DATAEE_WriteByte:	
 33117                           
 33118                           ;incstack = 0
 33119                           ; Regs used in _DATAEE_WriteByte: [wreg+status,2+status,0]
 33120                           ;DATAEE_WriteByte@bAdd stored from wreg
 33121  35F9  00F4               	movwf	DATAEE_WriteByte@bAdd
 33122                           
 33123                           ;memory.c: 182: uint8_t GIEBitValue = 0;
 33124  35FA  01F5               	clrf	DATAEE_WriteByte@GIEBitValue
 33125                           
 33126                           ;memory.c: 184: EEADRL = (bAdd & 0x0ff);
 33127  35FB  0023               	movlb	3	; select bank3
 33128  35FC  0091               	movwf	17	;volatile
 33129                           
 33130                           ;memory.c: 185: EEDATL = bData;
 33131  35FD  0873               	movf	DATAEE_WriteByte@bData,w
 33132  35FE  0093               	movwf	19	;volatile
 33133                           
 33134                           ;memory.c: 186: EECON1bits.EEPGD = 0;
 33135  35FF  1395               	bcf	21,7	;volsfr
 33136                           
 33137                           ;memory.c: 187: EECON1bits.CFGS = 0;
 33138  3600  1315               	bcf	21,6	;volsfr
 33139                           
 33140                           ;memory.c: 188: EECON1bits.WREN = 1;
 33141  3601  1515               	bsf	21,2	;volsfr
 33142                           
 33143                           ;memory.c: 190: GIEBitValue = INTCONbits.GIE;
 33144  3602  3000               	movlw	0
 33145  3603  1B8B               	btfsc	11,7	;volatile
 33146  3604  3001               	movlw	1
 33147  3605  00F5               	movwf	DATAEE_WriteByte@GIEBitValue
 33148                           
 33149                           ;memory.c: 191: INTCONbits.GIE = 0;
 33150  3606  138B               	bcf	11,7	;volatile
 33151                           
 33152                           ;memory.c: 192: EECON2 = 0x55;
 33153  3607  3055               	movlw	85
 33154  3608  0096               	movwf	22	;volsfr
 33155                           
 33156                           ;memory.c: 193: EECON2 = 0xAA;
 33157  3609  30AA               	movlw	170
 33158  360A  0096               	movwf	22	;volsfr
 33159                           
 33160                           ;memory.c: 194: EECON1bits.WR = 1;
 33161  360B  1495               	bsf	21,1	;volsfr
 33162  360C                     l253:	
 33163                           ;memory.c: 197: {
 33164                           
 33165                           ;memory.c: 196: while (EECON1bits.WR)
 33166                           
 33167  360C  1895               	btfsc	21,1	;volsfr
 33168  360D  2E0C               	goto	l253
 33169                           
 33170                           ;memory.c: 198: }
 33171                           ;memory.c: 200: EECON1bits.WREN = 0;
 33172  360E  1115               	bcf	21,2	;volsfr
 33173                           
 33174                           ;memory.c: 201: INTCONbits.GIE = GIEBitValue;
 33175  360F  0C75               	rrf	DATAEE_WriteByte@GIEBitValue,w
 33176  3610  1C03               	skipc
 33177  3611  138B               	bcf	11,7	;volatile
 33178  3612  1803               	skipnc
 33179  3613  178B               	bsf	11,7	;volatile
 33180  3614  0008               	return
 33181  3615                     __end_of_DATAEE_WriteByte:	
 33182                           
 33183                           	psect	intentry
 33184  0004                     __pintentry:	
 33185 ;; *************** function _INTERRUPT_InterruptManager *****************
 33186 ;; Defined at:
 33187 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 33188 ;; Parameters:    Size  Location     Type
 33189 ;;		None
 33190 ;; Auto vars:     Size  Location     Type
 33191 ;;		None
 33192 ;; Return value:  Size  Location     Type
 33193 ;;                  1    wreg      void 
 33194 ;; Registers used:
 33195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 33196 ;; Tracked objects:
 33197 ;;		On entry : 0/0
 33198 ;;		On exit  : 0/0
 33199 ;;		Unchanged: 0/0
 33200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33204 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33205 ;;Total ram usage:        1 bytes
 33206 ;; Hardware stack levels used:    1
 33207 ;; Hardware stack levels required when called:    1
 33208 ;; This function calls:
 33209 ;;		_EUSART1_Receive_ISR
 33210 ;;		_EUSART1_Transmit_ISR
 33211 ;;		_TMR0_ISR
 33212 ;;		_TMR1_ISR
 33213 ;; This function is called by:
 33214 ;;		Interrupt level 1
 33215 ;; This function uses a non-reentrant model
 33216 ;;
 33217                           
 33218  0004                     _INTERRUPT_InterruptManager:	
 33219                           
 33220                           ;incstack = 0
 33221                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 33222  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 33223  0005  3180               	pagesel	$
 33224  0006  0020               	movlb	0	; select bank0
 33225  0007  087F               	movf	127,w
 33226  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 33227                           
 33228                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 33229  0009  1A8B               	btfsc	11,5	;volatile
 33230  000A  1D0B               	btfss	11,2	;volatile
 33231  000B  2810               	goto	i1l159
 33232                           
 33233                           ;interrupt_manager.c: 56: {
 33234                           ;interrupt_manager.c: 57: TMR0_ISR();
 33235  000C  31B5  25B1  3180   	fcall	_TMR0_ISR
 33236                           
 33237                           ;interrupt_manager.c: 58: }
 33238  000F  2832               	goto	i1l167
 33239  0010                     i1l159:	
 33240                           
 33241                           ;interrupt_manager.c: 59: else if(INTCONbits.PEIE == 1 && PIE1bits.TX1IE == 1 && PIR1bit
      +                          s.TX1IF == 1)
 33242  0010  1F0B               	btfss	11,6	;volatile
 33243  0011  281C               	goto	i1l161
 33244  0012  0021               	movlb	1	; select bank1
 33245  0013  1E11               	btfss	17,4	;volatile
 33246  0014  281C               	goto	i1l161
 33247  0015  0020               	movlb	0	; select bank0
 33248  0016  1E11               	btfss	17,4	;volatile
 33249  0017  281C               	goto	i1l161
 33250                           
 33251                           ;interrupt_manager.c: 60: {
 33252                           ;interrupt_manager.c: 61: EUSART1_Transmit_ISR();
 33253  0018  31A0  2006  3180   	fcall	_EUSART1_Transmit_ISR
 33254                           
 33255                           ;interrupt_manager.c: 62: }
 33256  001B  2832               	goto	i1l167
 33257  001C                     i1l161:	
 33258                           
 33259                           ;interrupt_manager.c: 63: else if(INTCONbits.PEIE == 1 && PIE1bits.RC1IE == 1 && PIR1bit
      +                          s.RC1IF == 1)
 33260  001C  1F0B               	btfss	11,6	;volatile
 33261  001D  2828               	goto	i1l163
 33262  001E  0021               	movlb	1	; select bank1
 33263  001F  1E91               	btfss	17,5	;volatile
 33264  0020  2828               	goto	i1l163
 33265  0021  0020               	movlb	0	; select bank0
 33266  0022  1E91               	btfss	17,5	;volatile
 33267  0023  2828               	goto	i1l163
 33268                           
 33269                           ;interrupt_manager.c: 64: {
 33270                           ;interrupt_manager.c: 65: EUSART1_Receive_ISR();
 33271  0024  31B6  2637  3180   	fcall	_EUSART1_Receive_ISR
 33272                           
 33273                           ;interrupt_manager.c: 66: }
 33274  0027  2832               	goto	i1l167
 33275  0028                     i1l163:	
 33276                           
 33277                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1 && PIE1bits.TMR1IE == 1 && PIR1bi
      +                          ts.TMR1IF == 1)
 33278  0028  1F0B               	btfss	11,6	;volatile
 33279  0029  2832               	goto	i1l167
 33280  002A  0021               	movlb	1	; select bank1
 33281  002B  1C11               	btfss	17,0	;volatile
 33282  002C  2832               	goto	i1l167
 33283  002D  0020               	movlb	0	; select bank0
 33284  002E  1C11               	btfss	17,0	;volatile
 33285  002F  2832               	goto	i1l167
 33286                           
 33287                           ;interrupt_manager.c: 68: {
 33288                           ;interrupt_manager.c: 69: TMR1_ISR();
 33289  0030  31B5  25C2         	fcall	_TMR1_ISR
 33290  0032                     i1l167:	
 33291                           ;interrupt_manager.c: 71: else
 33292                           ;interrupt_manager.c: 72: {
 33293                           
 33294                           ;interrupt_manager.c: 70: }
 33295                           
 33296  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 33297  0033  0020               	movlb	0	; select bank0
 33298  0034  00FF               	movwf	127
 33299  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 33300  0036  0009               	retfie
 33301  0037                     __end_of_INTERRUPT_InterruptManager:	
 33302                           
 33303                           	psect	text165
 33304  35C2                     __ptext165:	
 33305 ;; *************** function _TMR1_ISR *****************
 33306 ;; Defined at:
 33307 ;;		line 156 in file "mcc_generated_files/tmr1.c"
 33308 ;; Parameters:    Size  Location     Type
 33309 ;;		None
 33310 ;; Auto vars:     Size  Location     Type
 33311 ;;		None
 33312 ;; Return value:  Size  Location     Type
 33313 ;;                  1    wreg      void 
 33314 ;; Registers used:
 33315 ;;		wreg, status,2, status,0
 33316 ;; Tracked objects:
 33317 ;;		On entry : 0/0
 33318 ;;		On exit  : 0/0
 33319 ;;		Unchanged: 0/0
 33320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33323 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33324 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33325 ;;Total ram usage:        1 bytes
 33326 ;; Hardware stack levels used:    1
 33327 ;; This function calls:
 33328 ;;		Nothing
 33329 ;; This function is called by:
 33330 ;;		_INTERRUPT_InterruptManager
 33331 ;; This function uses a non-reentrant model
 33332 ;;
 33333                           
 33334                           
 33335                           ;psect for function _TMR1_ISR
 33336  35C2                     _TMR1_ISR:	
 33337                           
 33338                           ;tmr1.c: 160: PIR1bits.TMR1IF = 0;
 33339                           
 33340                           ;incstack = 0
 33341                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0]
 33342  35C2  0020               	movlb	0	; select bank0
 33343  35C3  1011               	bcf	17,0	;volatile
 33344                           
 33345                           ;tmr1.c: 162: TMR1H = (timer1ReloadVal >> 8);
 33346  35C4  0021               	movlb	1	; select bank1
 33347  35C5  086E               	movf	(_timer1ReloadVal+1)^(0+128),w	;volatile
 33348  35C6  0020               	movlb	0	; select bank0
 33349  35C7  0097               	movwf	23	;volatile
 33350                           
 33351                           ;tmr1.c: 163: TMR1L = timer1ReloadVal;
 33352  35C8  0021               	movlb	1	; select bank1
 33353  35C9  086D               	movf	_timer1ReloadVal^(0+128),w	;volatile
 33354  35CA  0020               	movlb	0	; select bank0
 33355  35CB  0096               	movwf	22	;volatile
 33356                           
 33357                           ;tmr1.c: 169: systemTickerSec++;
 33358  35CC  3001               	movlw	1
 33359  35CD  00F0               	movwf	??_TMR1_ISR
 33360  35CE  0022               	movlb	2	; select bank2
 33361  35CF  07AC               	addwf	_systemTickerSec^(0+256),f
 33362                           
 33363                           ;tmr1.c: 170: Event |= (uint8_t)(0x01<<5);
 33364  35D0  0021               	movlb	1	; select bank1
 33365  35D1  16B6               	bsf	_Event^(0+128),5
 33366  35D2  0008               	return
 33367  35D3                     __end_of_TMR1_ISR:	
 33368                           
 33369                           	psect	text166
 33370  35B1                     __ptext166:	
 33371 ;; *************** function _TMR0_ISR *****************
 33372 ;; Defined at:
 33373 ;;		line 109 in file "mcc_generated_files/tmr0.c"
 33374 ;; Parameters:    Size  Location     Type
 33375 ;;		None
 33376 ;; Auto vars:     Size  Location     Type
 33377 ;;		None
 33378 ;; Return value:  Size  Location     Type
 33379 ;;                  1    wreg      void 
 33380 ;; Registers used:
 33381 ;;		wreg
 33382 ;; Tracked objects:
 33383 ;;		On entry : 0/0
 33384 ;;		On exit  : 0/0
 33385 ;;		Unchanged: 0/0
 33386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33387 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33388 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33390 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33391 ;;Total ram usage:        0 bytes
 33392 ;; Hardware stack levels used:    1
 33393 ;; This function calls:
 33394 ;;		Nothing
 33395 ;; This function is called by:
 33396 ;;		_INTERRUPT_InterruptManager
 33397 ;; This function uses a non-reentrant model
 33398 ;;
 33399                           
 33400                           
 33401                           ;psect for function _TMR0_ISR
 33402  35B1                     _TMR0_ISR:	
 33403                           
 33404                           ;tmr0.c: 113: INTCONbits.TMR0IF = 0;
 33405                           
 33406                           ;incstack = 0
 33407                           ; Regs used in _TMR0_ISR: [wreg]
 33408  35B1  110B               	bcf	11,2	;volatile
 33409                           
 33410                           ;tmr0.c: 115: TMR0 = timer0ReloadVal;
 33411  35B2  0023               	movlb	3	; select bank3
 33412  35B3  0846               	movf	_timer0ReloadVal^(0+384),w	;volatile
 33413  35B4  0020               	movlb	0	; select bank0
 33414  35B5  0095               	movwf	21	;volatile
 33415                           
 33416                           ;tmr0.c: 120: systemTikerms+=10;
 33417  35B6  300A               	movlw	10
 33418  35B7  0023               	movlb	3	; select bank3
 33419  35B8  07AC               	addwf	_systemTikerms^(0+384),f
 33420  35B9  3000               	movlw	0
 33421  35BA  3DAD               	addwfc	(_systemTikerms+1)^(0+384),f
 33422                           
 33423                           ;tmr0.c: 121: globlTickerms+=10;
 33424  35BB  300A               	movlw	10
 33425  35BC  07AA               	addwf	_globlTickerms^(0+384),f
 33426  35BD  3000               	movlw	0
 33427  35BE  3DAB               	addwfc	(_globlTickerms+1)^(0+384),f
 33428                           
 33429                           ;tmr0.c: 122: Event |= (uint8_t)(0x01<<4);
 33430  35BF  0021               	movlb	1	; select bank1
 33431  35C0  1636               	bsf	_Event^(0+128),4
 33432  35C1  0008               	return
 33433  35C2                     __end_of_TMR0_ISR:	
 33434                           
 33435                           	psect	text167
 33436  2006                     __ptext167:	
 33437 ;; *************** function _EUSART1_Transmit_ISR *****************
 33438 ;; Defined at:
 33439 ;;		line 165 in file "mcc_generated_files/eusart1.c"
 33440 ;; Parameters:    Size  Location     Type
 33441 ;;		None
 33442 ;; Auto vars:     Size  Location     Type
 33443 ;;		None
 33444 ;; Return value:  Size  Location     Type
 33445 ;;                  1    wreg      void 
 33446 ;; Registers used:
 33447 ;;		None
 33448 ;; Tracked objects:
 33449 ;;		On entry : 0/0
 33450 ;;		On exit  : 0/0
 33451 ;;		Unchanged: 0/0
 33452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33453 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33454 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33455 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33456 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33457 ;;Total ram usage:        0 bytes
 33458 ;; Hardware stack levels used:    1
 33459 ;; This function calls:
 33460 ;;		Nothing
 33461 ;; This function is called by:
 33462 ;;		_INTERRUPT_InterruptManager
 33463 ;; This function uses a non-reentrant model
 33464 ;;
 33465                           
 33466                           
 33467                           ;psect for function _EUSART1_Transmit_ISR
 33468  2006                     _EUSART1_Transmit_ISR:	
 33469                           
 33470                           ;eusart1.c: 183: PIE1bits.TX1IE = 0;
 33471                           
 33472                           ;incstack = 0
 33473                           ; Regs used in _EUSART1_Transmit_ISR: []
 33474  2006  0021               	movlb	1	; select bank1
 33475  2007  1211               	bcf	17,4	;volatile
 33476  2008  0008               	return
 33477  2009                     __end_of_EUSART1_Transmit_ISR:	
 33478                           
 33479                           	psect	text168
 33480  3637                     __ptext168:	
 33481 ;; *************** function _EUSART1_Receive_ISR *****************
 33482 ;; Defined at:
 33483 ;;		line 232 in file "mcc_generated_files/eusart1.c"
 33484 ;; Parameters:    Size  Location     Type
 33485 ;;		None
 33486 ;; Auto vars:     Size  Location     Type
 33487 ;;  t8              1    1[COMMON] unsigned char 
 33488 ;; Return value:  Size  Location     Type
 33489 ;;                  1    wreg      void 
 33490 ;; Registers used:
 33491 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 33492 ;; Tracked objects:
 33493 ;;		On entry : 0/0
 33494 ;;		On exit  : 0/0
 33495 ;;		Unchanged: 0/0
 33496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8  BANK10  BANK11  BANK1
      +2
 33497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33500 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0
 33501 ;;Total ram usage:        2 bytes
 33502 ;; Hardware stack levels used:    1
 33503 ;; This function calls:
 33504 ;;		Nothing
 33505 ;; This function is called by:
 33506 ;;		_INTERRUPT_InterruptManager
 33507 ;; This function uses a non-reentrant model
 33508 ;;
 33509                           
 33510                           
 33511                           ;psect for function _EUSART1_Receive_ISR
 33512  3637                     _EUSART1_Receive_ISR:	
 33513                           
 33514                           ;eusart1.c: 234: uint8_t t8;
 33515                           ;eusart1.c: 235: if(1 == RC1STAbits.OERR)
 33516                           
 33517                           ;incstack = 0
 33518                           ; Regs used in _EUSART1_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 33519  3637  0023               	movlb	3	; select bank3
 33520  3638  1C9D               	btfss	29,1	;volatile
 33521  3639  2E3D               	goto	i1l10921
 33522                           
 33523                           ;eusart1.c: 236: {
 33524                           ;eusart1.c: 239: RC1STAbits.CREN = 0;
 33525  363A  121D               	bcf	29,4	;volatile
 33526                           
 33527                           ;eusart1.c: 240: RC1STAbits.CREN = 1;
 33528  363B  161D               	bsf	29,4	;volatile
 33529                           
 33530                           ;eusart1.c: 242: }
 33531  363C  0008               	return
 33532  363D                     i1l10921:	
 33533                           
 33534                           ;eusart1.c: 243: else{
 33535                           ;eusart1.c: 244: t8=RC1REG;
 33536  363D  0819               	movf	25,w	;volatile
 33537  363E  00F0               	movwf	??_EUSART1_Receive_ISR
 33538  363F  00F1               	movwf	EUSART1_Receive_ISR@t8
 33539                           
 33540                           ;eusart1.c: 245: if(uart1ReceivedCount<80)
 33541  3640  3000               	movlw	0
 33542  3641  0022               	movlb	2	; select bank2
 33543  3642  0227               	subwf	(_uart1ReceivedCount+1)^(0+256),w
 33544  3643  3050               	movlw	80
 33545  3644  1903               	skipnz
 33546  3645  0226               	subwf	_uart1ReceivedCount^(0+256),w
 33547  3646  1803               	skipnc
 33548  3647  2E55               	goto	i1l10927
 33549                           
 33550                           ;eusart1.c: 246: {
 33551                           ;eusart1.c: 247: uart1Buffer[uart1ReceivedCount]=t8;
 33552  3648  0871               	movf	EUSART1_Receive_ISR@t8,w
 33553  3649  00F0               	movwf	??_EUSART1_Receive_ISR
 33554  364A  0826               	movf	_uart1ReceivedCount^(0+256),w
 33555  364B  3EA0               	addlw	160
 33556  364C  0086               	movwf	6
 33557  364D  3004               	movlw	4	; select bank9/10
 33558  364E  0087               	movwf	7
 33559  364F  0870               	movf	??_EUSART1_Receive_ISR,w
 33560  3650  0081               	movwf	1
 33561                           
 33562                           ;eusart1.c: 248: uart1ReceivedCount++;
 33563  3651  3001               	movlw	1
 33564  3652  07A6               	addwf	_uart1ReceivedCount^(0+256),f
 33565  3653  3000               	movlw	0
 33566  3654  3DA7               	addwfc	(_uart1ReceivedCount+1)^(0+256),f
 33567  3655                     i1l10927:	
 33568                           
 33569                           ;eusart1.c: 249: }
 33570                           ;eusart1.c: 250: uart1ReceivedTimer=1;
 33571  3655  01AD               	clrf	_uart1ReceivedTimer^(0+256)
 33572  3656  0AAD               	incf	_uart1ReceivedTimer^(0+256),f
 33573                           
 33574                           ;eusart1.c: 251: uart1ReceivedTimeout=0;
 33575  3657  0023               	movlb	3	; select bank3
 33576  3658  01AE               	clrf	_uart1ReceivedTimeout^(0+384)
 33577  3659  01AF               	clrf	(_uart1ReceivedTimeout+1)^(0+384)
 33578  365A  0008               	return
 33579  365B                     __end_of_EUSART1_Receive_ISR:	
 33580  007E                     btemp	set	126	;btemp
 33581  007E                     int$flags	set	126
 33582  007E                     wtemp	set	126
 33583  007E                     wtemp0	set	126
 33584  0080                     wtemp1	set	128
 33585  0082                     wtemp2	set	130
 33586  0084                     wtemp3	set	132
 33587  0086                     wtemp4	set	134
 33588  0088                     wtemp5	set	136
 33589  007F                     wtemp6	set	127
 33590  007E                     ttemp	set	126
 33591  007E                     ttemp0	set	126
 33592  0081                     ttemp1	set	129
 33593  0084                     ttemp2	set	132
 33594  0087                     ttemp3	set	135
 33595  007F                     ttemp4	set	127
 33596  007E                     ltemp	set	126
 33597  007E                     ltemp0	set	126
 33598  0082                     ltemp1	set	130
 33599  0086                     ltemp2	set	134
 33600  0080                     ltemp3	set	128


Data Sizes:
    Strings     105
    Constant    624
    Data        10
    BSS         212
    Persistent  7
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     80      80
    BANK1            80     37      80
    BANK2            80      0      80
    BANK3            80      2      41
    BANK4            80      0      64
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8             8      0       0
    BANK10           80      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    mfrc522_bal_read_reg_len$1	PTR unsigned char  size(1) Largest target is 0

    crc_append@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), comBuffer(BIGRAM[128]), uart1Buffer(ABS[80]), 

    crc_verify@message	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), bkupSystemData(CODE[72]), comBuffer(BIGRAM[128]), 
		 -> Main_flowCalibrationTable(CODE[124]), mainSystemData(CODE[72]), uart1Buffer(ABS[80]), 

    crc_sum@puchMsg	PTR unsigned char  size(2) Largest target is 128
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), bkupSystemData(CODE[72]), comBuffer(BIGRAM[128]), 
		 -> Main_flowCalibrationTable(CODE[124]), mainSystemData(CODE[72]), uart1Buffer(ABS[80]), 

    pcd_mifare_transceive@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), cardDecBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), 

    mifare_write@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 

    mifare_read@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> rdLen(BANK1[1]), __t8(BANK1[1]), 

    mifare_read@buffer	PTR unsigned char  size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    picc_authenticate@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_authenticate@key	PTR struct . size(2) Largest target is 6
		 -> userKeyB(BANK3[6]), defaultKeyA(CODE[6]), 

    picc_select@responseBuffer	PTR unsigned char  size(1) Largest target is 9
		 -> picc_select@buffer(BANK1[9]), 

    picc_select@uid	PTR struct __PICC_UID size(1) Largest target is 12
		 -> PiccUid(BANK3[12]), 

    picc_req_a_or_wakeup_a@bufferSize	PTR unsigned char  size(1) Largest target is 1
		 -> mfapi_is_new_card_present@bufferSize(BANK0[1]), 

    picc_req_a_or_wakeup_a@bufferATQA	PTR unsigned char  size(1) Largest target is 2
		 -> mfapi_is_new_card_present@bufferATQA(BANK0[2]), 

    pcd_comm_with_picc@rlen	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@cmdBufferSize(BANK0[1]), picc_select@responseLength(BANK1[1]), mfapi_is_new_card_present@bufferSize(BANK0[1]), rdLen(BANK1[1]), 
		 -> __t8(BANK1[1]), NULL(NULL[0]), 

    pcd_comm_with_picc@rbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    pcd_comm_with_picc@sbuf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), 
		 -> cardUidBlockBuf(BANK8[18]), 

    pcd_comm_with_picc@validBits	PTR unsigned char  size(1) Largest target is 1
		 -> pcd_mifare_transceive@validBits(BANK0[1]), picc_select@txLastBits(BANK1[1]), picc_req_a_or_wakeup_a@validBits(BANK0[1]), NULL(NULL[0]), 

    mfrc522_hal_calculate_crc@result	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), pcd_comm_with_picc@controlBuffer(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 

    mfrc522_hal_calculate_crc@data	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> NULL(NULL[0]), 

    mfrc522_bal_read_fifo_len_ex@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_select@buffer(BANK1[9]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), 
		 -> cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    mfrc522_bal_write_reg_len@buf	PTR unsigned char  size(2) Largest target is 18
		 -> pcd_mifare_transceive@cmdBuffer(BANK0[18]), picc_authenticate@sendData(BANK0[12]), picc_halt_a@buffer(BANK0[4]), picc_select@buffer(BANK1[9]), 
		 -> picc_req_a_or_wakeup_a@__cmd(BANK0[1]), mfapi_is_new_card_present@bufferATQA(BANK0[2]), cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), 
		 -> cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), NULL(NULL[0]), 

    adc_mcp3241_read_convert_16@sta	PTR unsigned char  size(1) Largest target is 1
		 -> flow_sampling_process@i(BANK0[1]), 

    lcd_disp_str@str	PTR unsigned char  size(2) Largest target is 9
		 -> STR_16(CODE[9]), STR_14(CODE[9]), STR_13(CODE[9]), STR_5(CODE[9]), 
		 -> lcdBuf(BANK2[9]), STR_1(CODE[9]), 

    lcd_set_com_seg@p	PTR unsigned char  size(1) Largest target is 24
		 -> pLCD(BANK2[24]), 

    pLcdReg	PTR unsigned char  size(2) Largest target is 1
		 -> LCDDATA0(SFR15[1]), 

    m_mem_cpy_len@s	PTR unsigned char  size(2) Largest target is 4096
		 -> mifare_write@cmdBuffer(BANK1[2]), mifare_two_Step_helper@data(COMMON[4]), mifare_two_Step_helper@cmdBuffer(COMMON[2]), pLCD(BANK2[24]), 
		 -> cardDecBuf(BANK8[18]), cardIncBuf(BANK8[18]), cardWriteBuf(BANK8[18]), cardUidBlockBuf(BANK8[18]), 
		 -> bkupSystemData(CODE[72]), RAM(DATA[4096]), comBuffer(BIGRAM[128]), Main_flowCalibrationTable(CODE[124]), 
		 -> flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), mainSystemData.flowRatio(CODE[2]), rtBalanceMoney(BANK1[4]), 
		 -> __q31(BANK1[4]), mainSystemData(CODE[72]), __t16(COMMON[2]), uart1Buffer(ABS[80]), 

    m_mem_cpy_len@d	PTR unsigned char  size(2) Largest target is 128
		 -> crc_verify@expected(BANK0[2]), pcd_mifare_transceive@cmdBuffer(BANK0[18]), LCDDATA0(SFR15[1]), cardWriteBuf(BANK8[18]), 
		 -> comBuffer(BIGRAM[128]), flashOpStr.buf(BANK2[16]), flashOpStr(BANK2[21]), uiAdjbuf(BANK2[8]), 
		 -> uart1Buffer(ABS[80]), 

    m_mem_set@buf	PTR unsigned char  size(2) Largest target is 128
		 -> pLCD(BANK2[24]), PiccUid(BANK3[12]), comBuffer(BIGRAM[128]), flashOpStr(BANK2[21]), 
		 -> lcdBuf(BANK2[9]), 

    rfid_comm_process_recharge@stpDec	PTR struct . size(1) Largest target is 18
		 -> cardDecBuf(BANK8[18]), 

    rfid_comm_process_recharge@stpInc	PTR struct . size(1) Largest target is 18
		 -> cardIncBuf(BANK8[18]), 

    rfid_comm_process_read_header@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    create_card_key_b@cckey	PTR unsigned char  size(2) Largest target is 72
		 -> mainSystemData.cardKeyCreateKey(CODE[6]), mainSystemData(CODE[72]), 

    create_card_key_b@uid	PTR unsigned char  size(1) Largest target is 18
		 -> cardUidBlockBuf(BANK8[18]), 

    create_card_key_b@keyb	PTR unsigned char  size(1) Largest target is 6
		 -> userKeyB(BANK3[6]), 

    data_api_calibration_table_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_rt_data_save@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_calibration_table_data_init@stp	PTR struct . size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_read_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    data_api_write_eeprom@buf	PTR unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    m_flash_copy@buf	PTR const unsigned char  size(2) Largest target is 128
		 -> comBuffer(BIGRAM[128]), 

    modbus_response_process@rbuf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_process@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_status_register@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_status_register@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_status_register@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_status_register@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_flash_data@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_read_flash_data@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_flash_clib@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_flash_clib@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_flash_sys@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_write_flash_sys@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_illgeal_function@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    modbus_response_illgeal_function@pmdbs	PTR struct . size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    key_process_up_down_variable_speed_ex@val	PTR int  size(1) Largest target is 8
		 -> uiAdjbuf(BANK2[8]), 

    ui_disp_str_dly@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_2(CODE[7]), 

    ui_disp_str_num_s@str	PTR unsigned char  size(2) Largest target is 7
		 -> STR_15(CODE[5]), STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[6]), 
		 -> STR_4(CODE[7]), STR_3(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@s	PTR unsigned char  size(2) Largest target is 7
		 -> STR_15(CODE[5]), STR_12(CODE[6]), STR_11(CODE[6]), STR_10(CODE[6]), 
		 -> STR_9(CODE[6]), STR_8(CODE[4]), STR_7(CODE[4]), STR_6(CODE[6]), 
		 -> STR_4(CODE[7]), STR_3(CODE[3]), STR_2(CODE[7]), 

    ui_mem_cpy@d	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_head_hide@str	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    ui_uint32_2_str@buf	PTR unsigned char  size(1) Largest target is 9
		 -> lcdBuf(BANK2[9]), 

    my_uart1_send_poll@buf	PTR unsigned char  size(1) Largest target is 80
		 -> uart1Buffer(ABS[80]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned int  size(1) Largest target is 64
		 -> flashBuffer(BANK4[64]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR1_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _ui_key_process->_ui_key_process_down
    _ui_key_set_process->___awdiv
    _ui_key_set_process->_m_mem_cpy_len
    _ui_disp_set_line->_lcd_clear_buffer
    _ui_disp_set_calib->___awdiv
    _ui_disp_set_calib->___awmod
    _ui_disp_set_calib->_lcd_clear_buffer
    _ui_disp_str_num_s->___lwdiv
    _ui_disp_str_num_s->___lwmod
    _ui_disp_str_num_s->_lcd_clear_buffer
    _ui_disp_str_num_s->_ui_mem_cpy
    _ui_disp_flow->_lcd_clear_buffer
    _ui_disp_totale_v->_lcd_clear_buffer
    _ui_key_process_enter->___aldiv
    _ui_key_process_enter->___awdiv
    _ui_key_process_enter->_m_mem_cpy_len
    _ui_key_waite_up->_get_globle_ticker
    _key_scan_call->_delay
    _ui_key_process_down->_m_mem_set
    _ui_disp_balance_and_volume->___aldiv
    _ui_disp_balance_and_volume->_lcd_clear_buffer
    _ui_uint32_2_str->___aldiv
    _m_math_pow->___lmul
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_code->_lcd_disp_code_0
    _lcd_disp_code->_lcd_disp_code_1
    _lcd_disp_code->_lcd_disp_code_2
    _lcd_disp_code->_lcd_disp_code_3
    _lcd_disp_code->_lcd_disp_code_4
    _lcd_disp_code->_lcd_disp_code_5
    _lcd_disp_code->_lcd_disp_code_6
    _lcd_disp_code->_lcd_disp_code_7
    _lcd_set_com_seg->___awdiv
    _lcd_clear_buffer->_m_mem_set
    _rfid_comm_process_recharge->_m_mem_cpy_len
    _rfid_comm_process_read_header->_create_card_key_b
    _rfid_comm_process_read_header->_m_mem_cpy_len
    _pcd_mifare_transceive->_m_mem_cpy_len
    _picc_select->___awdiv
    _picc_select->_mfrc522_bal_read_reg
    _picc_select->_mfrc522_bal_write_reg
    ___bmul->___awdiv
    _pcd_comm_with_picc->_mfrc522_bal_read_fifo_len_ex
    _pcd_comm_with_picc->_mfrc522_bal_read_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg
    _pcd_comm_with_picc->_mfrc522_bal_write_reg_len
    _mfrc522_hal_calculate_crc->_mfrc522_bal_read_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg
    _mfrc522_hal_calculate_crc->_mfrc522_bal_write_reg_len
    _mfrc522_bal_write_reg_len->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_fifo_len_ex->_mfrc522_bal_write_read_via_spi
    _modbus_response_process->_modbus_response_illgeal_function
    _modbus_response_write_status_register->_modbus_response_illgeal_function
    _modbus_response_write_flash_sys->_m_mem_cpy_len
    _modbus_response_write_flash_sys->_modbus_response_illgeal_function
    _modbus_response_write_flash_clib->_m_mem_cpy_len
    _modbus_response_write_flash_clib->_modbus_response_illgeal_function
    _data_api_rt_data_save->_data_api_write_eeprom
    _data_api_rt_data_save->_m_flash_copy
    _data_api_rt_data_save->_m_mem_cpy_len
    _data_api_calibration_table_data_save->_data_api_write_eeprom
    _data_api_calibration_table_data_save->_m_flash_copy
    _data_api_calibration_table_data_save->_m_mem_cpy_len
    _modbus_response_read_status_register->_m_mem_cpy_len
    _modbus_response_read_status_register->_modbus_response_illgeal_function
    _modbus_response_read_flash_data->_m_mem_cpy_len
    _modbus_response_read_flash_data->_modbus_response_illgeal_function
    _mfapi_pcd_init->_mfrc522_bal_read_reg
    _mfrc522_hal_init->_mfrc522_bal_write_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_write_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_write_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_write_reg
    _mfrc522_bal_write_reg->_mfrc522_bal_write_read_via_spi
    _mfrc522_bal_read_reg->_mfrc522_bal_write_read_via_spi
    _m_system_start_self_test->_lcd_disp_all
    _lcd_config->_lcd_disp_all
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _in_app_vavle_on->_valve_on
    _app_flow_rt_volume_cal->___lwdiv
    _app_flow_rt_volume_cal->___lwmod
    _app_flow_rt_balance_money_cal->___aldiv
    ___aldiv->___lmul
    _in_app_vavle_off->_valve_off
    _app_flow_adc_2_flow->___lwdiv
    ___lwdiv->___wmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _iic_start->_delay
    _iic_send_byte->_iic_waite_ack
    _iic_stop->_delay
    _iic_received_byte_if_ack->_iic_received_byte
    _data_api_system_data_init->_data_api_read_eeprom
    _data_api_system_data_init->_data_api_write_eeprom
    _data_api_system_data_init->_m_flash_copy
    _data_api_system_data_init->_m_mem_cpy_len
    _data_api_calibration_table_data_init->_data_api_read_eeprom
    _data_api_calibration_table_data_init->_data_api_write_eeprom
    _data_api_calibration_table_data_init->_m_flash_copy
    _m_flash_erase->_FLASH_EraseBlock
    _m_flash_copy->_FLASH_ReadWord
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _data_api_write_eeprom->_DATAEE_WriteByte
    _data_api_read_eeprom->_DATAEE_ReadByte
    _crc_verify->_m_mem_cpy_len
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_EUSART1_Receive_ISR

Critical Paths under _main in BANK0

    _ui_start_display->_ui_disp_str_dly
    _ui_disp_str_dly->_ui_disp_str_num_s
    _ui_disp_hello->_lcd_disp_str
    _ui_key_process->_ui_key_process_up_down
    _ui_key_set_process->_data_api_calibration_table_data_save
    _ui_key_process_up_down->_key_process_up_down_variable_speed_ex
    _key_process_up_down_variable_speed_ex->_ui_disp_menu
    _ui_disp_menu->_ui_disp_flow
    _ui_disp_menu->_ui_disp_set_line
    _ui_disp_small_flow_how_care->_ui_disp_str_num_s
    _ui_disp_set_transferMoneyLimit->_ui_disp_str_num_s
    _ui_disp_set_price->_lcd_disp_dp
    _ui_disp_set_line_reset->_ui_disp_str_num_s
    _ui_disp_set_line->_ui_uint32_2_str
    _ui_disp_set_calib->_ui_uint32_2_str
    _ui_disp_set_balanceWarning->_ui_disp_str_num_s
    _ui_disp_set_balanceOff->_ui_disp_str_num_s
    _ui_disp_recharge->_lcd_disp_str
    _ui_disp_modbus_id->_ui_disp_str_num_s
    _ui_disp_str_num_s->___lwdiv
    _ui_disp_flow->_ui_uint32_2_str
    _ui_disp_clear_totale->_ui_disp_totale_v
    _ui_disp_totale_v->_ui_uint32_2_str
    _ui_disp_clear_card_id->_lcd_disp_str
    _ui_disp_clear_balance->_ui_disp_balance_and_volume
    _ui_key_process_enter->___aldiv
    _ui_key_process_cancel->_data_api_calibration_table_data_save
    _rfid_comm_process->_rfid_comm_process_read_header
    _rfid_comm_process->_rfid_comm_process_recharge
    _ui_disp_balance_and_volume->_ui_uint32_2_str
    _ui_uint32_2_str->___aldiv
    _m_math_pow->___lmul
    _lcd_disp_str->_lcd_disp_refresh
    _lcd_disp_refresh->_m_mem_cpy_len
    _lcd_disp_dp->_lcd_set_com_seg
    _lcd_disp_cln->_lcd_set_com_seg
    _lcd_set_com_seg->___bmul
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_inc->_picc_authenticate
    _rfid_comm_process_read_header->_mifare_write
    _mifare_write->_pcd_mifare_transceive
    _pcd_mifare_transceive->_pcd_comm_with_picc
    _rfid_comm_process_read_dec->_picc_authenticate
    _picc_authenticate->_pcd_comm_with_picc
    _mifare_read->_pcd_comm_with_picc
    _picc_stop_cryptol->_mfrc522_bal_clr_bit_reg
    _picc_select->_pcd_comm_with_picc
    ___bmul->___awdiv
    _picc_halt_a->_pcd_comm_with_picc
    _mfapi_is_new_card_present->_picc_req_a_or_wakeup_a
    _picc_req_a_or_wakeup_a->_pcd_comm_with_picc
    _pcd_comm_with_picc->_mfrc522_hal_calculate_crc
    _mfrc522_hal_calculate_crc->_mfrc522_bal_set_bit_reg
    _modbus_response_process->_modbus_response_write_flash_clib
    _modbus_response_process->_modbus_response_write_flash_sys
    _modbus_response_write_status_register->_modbus_response_illgeal_function
    _modbus_response_write_flash_sys->_data_api_flash_process
    _modbus_response_write_flash_clib->_data_api_flash_process
    _data_api_flash_process->_data_api_calibration_table_data_save
    _data_api_rt_data_save->_crc_append
    _data_api_rt_data_save->_crc_verify
    _data_api_calibration_table_data_save->_crc_append
    _data_api_calibration_table_data_save->_crc_verify
    _modbus_response_read_status_register->_modbus_response_illgeal_function
    _modbus_response_read_flash_data->_modbus_response_illgeal_function
    _modbus_response_illgeal_function->_crc_append
    _mfapi_pcd_init->_mfrc522_hal_init
    _mfrc522_hal_init->_mfrc522_hal_set_antenna_gain
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_clr_bit_reg
    _mfrc522_hal_set_antenna_gain->_mfrc522_bal_set_bit_reg
    _mfrc522_hal_get_antenna_gain->_mfrc522_bal_read_reg
    _mfrc522_bal_set_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_bal_clr_bit_reg->_mfrc522_bal_read_reg
    _mfrc522_hal_reset_sf->_mfrc522_bal_read_reg
    _mfrc522_hal_antenna_on->_mfrc522_bal_read_reg
    _m_system_start_self_test->_lcd_disp_all
    _lcd_config->_lcd_disp_all
    _flow_sampling_process->_app_flow_adc_2_flow
    _flow_sampling_process->_app_flow_rt_balance_money_cal
    _app_flow_rt_volume_cal->___lldiv
    _app_flow_rt_balance_money_cal->___aldiv
    ___aldiv->___lmul
    _app_flow_adc_2_flow->___lldiv
    ___lwdiv->___wmul
    _adc_mcp3241_start_convert_16->_iic_send_byte
    _adc_mcp3241_read_convert_16->_iic_received_byte_if_ack
    _adc_mcp3241_read_convert_16->_iic_send_byte
    _data_api_system_data_init->_crc_append
    _data_api_system_data_init->_crc_verify
    _data_api_calibration_table_data_init->_crc_append
    _data_api_calibration_table_data_init->_crc_verify
    _m_flash_copy->_FLASH_WriteBlock
    _crc_verify->_crc_sum
    _crc_append->_crc_sum

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rfid_comm_process
    _rfid_comm_process->_picc_select
    _rfid_comm_process_recharge->_mifare_write
    _rfid_comm_process_read_header->_mifare_write

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_rfid_comm_process

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0 2657674
                                              1 BANK3      1     1      0
_data_api_calibration_table_data_ini
             _data_api_flash_process
              _data_api_rt_data_save
          _data_api_system_data_init
              _flow_sampling_process
                    _in_app_vavle_on
                      _m_system_init
           _m_system_start_self_test
                     _mfapi_pcd_init
            _modbus_response_process
            _my_uart1_received_ready
                  _rfid_comm_process
                _timer0_irq_callback
                _timer1_irq_callback
                       _ui_disp_menu
                     _ui_key_process
                   _ui_start_display
 ---------------------------------------------------------------------------------
 (1) _ui_start_display                                     1     1      0   61999
                                             20 BANK0      1     1      0
                      _ui_disp_hello
                    _ui_disp_str_dly
 ---------------------------------------------------------------------------------
 (2) _ui_disp_str_dly                                      5     2      3   39913
                                             15 BANK0      5     2      3
                              _delay
                       _lcd_disp_all
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (2) _ui_disp_hello                                        0     0      0   22086
                              _delay
                       _lcd_disp_all
                   _lcd_disp_refresh
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (1) _ui_key_process                                       1     1      0 1157649
                                             59 BANK0      1     1      0
                      _key_scan_call
                       _ui_disp_menu
              _ui_key_process_cancel
                _ui_key_process_down
               _ui_key_process_enter
             _ui_key_process_up_down
                 _ui_key_set_process
                    _ui_key_waite_up
 ---------------------------------------------------------------------------------
 (2) _ui_key_set_process                                   1     1      0   37308
                                             32 BANK0      1     1      0
                            ___awdiv
                             ___wmul
_data_api_calibration_table_data_sav
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_up_down                               2     2      0  538555
                                             57 BANK0      2     2      0
_key_process_up_down_variable_speed_
        _ui_key_process_up_down_main
 ---------------------------------------------------------------------------------
 (3) _ui_key_process_up_down_main                          2     2      0      22
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _key_process_up_down_variable_speed_ex               16    11      5  538223
                                             41 BANK0     16    11      5
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
                       _ui_disp_menu
 ---------------------------------------------------------------------------------
 (4) _ui_disp_menu                                         2     2      0  531114
                                             39 BANK0      2     2      0
                   _lcd_disp_refresh
         _ui_disp_balance_and_volume
              _ui_disp_clear_balance
              _ui_disp_clear_card_id
               _ui_disp_clear_totale
                       _ui_disp_flow
                  _ui_disp_modbus_id
                   _ui_disp_recharge
             _ui_disp_set_balanceOff
         _ui_disp_set_balanceWarning
                  _ui_disp_set_calib
                   _ui_disp_set_line
             _ui_disp_set_line_reset
                  _ui_disp_set_price
     _ui_disp_set_transferMoneyLimit
        _ui_disp_small_flow_how_care
                  _ui_disp_str_num_s
                   _ui_disp_totale_v
 ---------------------------------------------------------------------------------
 (5) _ui_disp_small_flow_how_care                          2     2      0   36236
                                             15 BANK0      2     2      0
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_transferMoneyLimit                       0     0      0   36236
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_price                                    0     0      0   41768
                        _lcd_disp_dp
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_line_reset                               0     0      0   36236
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_line                                     7     7      0   31278
                                             32 BANK0      7     7      0
                            ___lldiv
                             ___lmul
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_calib                                    4     4      0   31729
                                             32 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            ___lbmod
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceWarning                           0     0      0   36236
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_set_balanceOff                               0     0      0   36236
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (5) _ui_disp_recharge                                     0     0      0   11023
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_modbus_id                                    2     2      0   36236
                                             15 BANK0      2     2      0
                   _lcd_disp_refresh
                  _ui_disp_str_num_s
 ---------------------------------------------------------------------------------
 (3) _ui_disp_str_num_s                                    6     2      4   28574
                                              9 BANK0      6     2      4
                            ___lwdiv
                            ___lwmod
                   _lcd_clear_buffer
                   _lcd_disp_refresh
                       _lcd_disp_str
                          _m_mem_set
                         _ui_mem_cpy
 ---------------------------------------------------------------------------------
 (4) _ui_mem_cpy                                           5     3      2     201
                                              3 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 (5) _ui_disp_flow                                         7     7      0   28853
                                             32 BANK0      7     7      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_totale                                 0     0      0   28819
                   _ui_disp_totale_v
 ---------------------------------------------------------------------------------
 (5) _ui_disp_totale_v                                     3     3      0   28819
                                             32 BANK0      3     3      0
                   _lcd_clear_buffer
                        _lcd_disp_dp
                       _lcd_disp_str
                          _m_mem_set
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_card_id                                4     4      0   11023
                                              7 BANK0      4     4      0
                       _lcd_disp_str
 ---------------------------------------------------------------------------------
 (5) _ui_disp_clear_balance                                0     0      0   32075
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_enter                                 6     6      0   14476
                                             22 BANK0      6     6      0
                            ___aldiv
                            ___awdiv
                      _m_mem_cpy_len
                    _ui_key_waite_up
 ---------------------------------------------------------------------------------
 (2) _ui_key_waite_up                                      4     2      2    3584
                                              0 BANK0      4     2      2
                  _get_globle_ticker
                      _key_scan_call
                  _set_globle_ticker
 ---------------------------------------------------------------------------------
 (3) _set_globle_ticker                                    2     0      2     211
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _key_scan_call                                        1     1      0    3271
                                              5 COMMON     1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _get_globle_ticker                                    4     2      2      34
                                              3 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_down                                  1     1      0    2796
                                              7 COMMON     1     1      0
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _ui_key_process_cancel                                8     8      0   26545
                                             32 BANK0      8     8      0
_data_api_calibration_table_data_sav
 ---------------------------------------------------------------------------------
 (1) _timer1_irq_callback                                  1     1      0       0
                                              3 COMMON     1     1      0
                         _valve_stop
 ---------------------------------------------------------------------------------
 (2) _valve_stop                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer0_irq_callback                                  1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _rfid_comm_process                                    3     3      0  541837
                                             36 BANK1      1     1      0
                                              0 BANK3      1     1      0
                              _delay
                       _lcd_disp_str
          _mfapi_is_new_card_present
                        _picc_halt_a
                        _picc_select
                  _picc_stop_cryptol
         _rfid_comm_process_read_dec
      _rfid_comm_process_read_header
         _rfid_comm_process_read_inc
         _rfid_comm_process_recharge
         _ui_disp_balance_and_volume
 ---------------------------------------------------------------------------------
 (6) _ui_disp_balance_and_volume                           2     2      0   32075
                                             32 BANK0      2     2      0
                            ___aldiv
                   _lcd_clear_buffer
                       _lcd_disp_cln
                        _lcd_disp_dp
                       _lcd_disp_str
                       _ui_head_hide
                    _ui_uint32_2_str
 ---------------------------------------------------------------------------------
 (6) _ui_uint32_2_str                                     10     5      5    5469
                                             22 BANK0     10     5      5
                            ___aldiv
                            ___almod
                         _m_math_pow
 ---------------------------------------------------------------------------------
 (7) _m_math_pow                                           9     4      5    1557
                                              8 BANK0      9     4      5
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___almod                                             11     3      8     613
                                              3 COMMON     3     3      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) _ui_head_hide                                         3     2      1    1104
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _lcd_disp_str                                         5     3      2   11023
                                              2 BANK0      5     3      2
                      _lcd_disp_code
                   _lcd_disp_refresh
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_refresh                                     1     1      0    7662
                                              1 BANK0      1     1      0
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (5) _lcd_disp_code                                        2     1      1    2105
                                              5 COMMON     2     1      1
                    _lcd_disp_code_0
                    _lcd_disp_code_1
                    _lcd_disp_code_2
                    _lcd_disp_code_3
                    _lcd_disp_code_4
                    _lcd_disp_code_5
                    _lcd_disp_code_6
                    _lcd_disp_code_7
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_7                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_6                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_5                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_4                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_3                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_2                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_1                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_code_0                                      2     2      0     217
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _lcd_disp_dp                                          4     3      1    5532
                                             18 BANK0      4     3      1
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_disp_cln                                         3     3      0    4806
                                             18 BANK0      3     3      0
                    _lcd_set_com_seg
 ---------------------------------------------------------------------------------
 (7) _lcd_set_com_seg                                     10     8      2    4744
                                              8 BANK0     10     8      2
                            ___awdiv
                             ___bmul
                            ___lbmod
 ---------------------------------------------------------------------------------
 (8) ___lbmod                                              6     5      1     412
                                              3 COMMON     3     2      1
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _lcd_clear_buffer                                     1     1      0    2796
                                              7 COMMON     1     1      0
                          _m_mem_set
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_recharge                          11    11      0  121414
                                             77 BANK0      3     3      0
                                              4 BANK1      8     8      0
                         _crc_append
             _data_api_flash_process
                      _m_mem_cpy_len
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_inc                           4     4      0   59503
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_header                       11    11      0  162753
                                             77 BANK0      3     3      0
                                              4 BANK1      8     8      0
                         _crc_append
                         _crc_verify
                  _create_card_key_b
             _data_api_flash_process
                      _m_mem_cpy_len
                          _m_mem_set
                        _mifare_read
                       _mifare_write
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _mifare_write                                         8     6      2   36826
                                             73 BANK0      4     2      2
                                              0 BANK1      4     4      0
              _pcd_mifare_transceive
 ---------------------------------------------------------------------------------
 (4) _pcd_mifare_transceive                               31    27      4   35927
                                             42 BANK0     31    27      4
                      _m_mem_cpy_len
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _create_card_key_b                                    7     4      3     386
                                              3 COMMON     5     2      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _rfid_comm_process_read_dec                           4     4      0   59503
                                             64 BANK0      4     4      0
                         _crc_verify
                        _mifare_read
                  _picc_authenticate
 ---------------------------------------------------------------------------------
 (3) _picc_authenticate                                   22    18      4   21315
                                             42 BANK0     22    18      4
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (3) _mifare_read                                          7     5      2   27446
                                             42 BANK0      7     5      2
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _picc_stop_cryptol                                    1     1      0    2707
                                              6 BANK0      1     1      0
            _mfrc522_bal_clr_bit_reg
 ---------------------------------------------------------------------------------
 (2) _picc_select                                         43    42      1   37305
                                             42 BANK0      7     6      1
                                              0 BANK1     36    36      0
                            ___awdiv
                             ___bmul
            _mfrc522_bal_clr_bit_reg
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (8) ___bmul                                               4     3      1     406
                                              4 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1885
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _picc_halt_a                                          8     8      0   26612
                                             42 BANK0      8     8      0
          _mfrc522_hal_calculate_crc
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (2) _mfapi_is_new_card_present                            8     8      0   25389
                                             52 BANK0      8     8      0
                          _m_mem_set
             _picc_req_a_or_wakeup_a
 ---------------------------------------------------------------------------------
 (3) _picc_req_a_or_wakeup_a                              10     8      2   22378
                                             42 BANK0     10     8      2
            _mfrc522_bal_clr_bit_reg
                 _pcd_comm_with_picc
 ---------------------------------------------------------------------------------
 (4) _pcd_comm_with_picc                                  25    15     10   19129
                                             17 BANK0     25    15     10
       _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
          _mfrc522_hal_calculate_crc
 ---------------------------------------------------------------------------------
 (5) _mfrc522_hal_calculate_crc                           11     6      5    7222
                                              6 BANK0     11     6      5
               _mfrc522_bal_read_reg
            _mfrc522_bal_set_bit_reg
              _mfrc522_bal_write_reg
          _mfrc522_bal_write_reg_len
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg_len                            6     3      3     635
                                              7 COMMON     1     1      0
                                              0 BANK0      5     2      3
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (5) _mfrc522_bal_read_fifo_len_ex                         8     4      4     706
                                              7 COMMON     1     1      0
                                              0 BANK0      7     3      4
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (4) _m_mem_set                                            4     0      4    2796
                                              3 COMMON     4     0      4
 ---------------------------------------------------------------------------------
 (1) _my_uart1_received_ready                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _modbus_response_process                              6     4      2  186102
                                             40 BANK0      6     4      2
                         _crc_verify
   _modbus_response_illgeal_function
    _modbus_response_read_flash_data
_modbus_response_read_status_registe
   _modbus_response_write_flash_clib
    _modbus_response_write_flash_sys
_modbus_response_write_status_regist
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_status_register                7     7      0    5286
                                             25 BANK0      7     7      0
   _modbus_response_illgeal_function
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_flash_sys                      7     7      0   65628
                                             33 BANK0      7     7      0
             _data_api_flash_process
                      _m_mem_cpy_len
   _modbus_response_illgeal_function
 ---------------------------------------------------------------------------------
 (2) _modbus_response_write_flash_clib                     7     7      0   65628
                                             33 BANK0      7     7      0
             _data_api_flash_process
                      _m_mem_cpy_len
   _modbus_response_illgeal_function
 ---------------------------------------------------------------------------------
 (3) _data_api_flash_process                               1     1      0   52463
                                             32 BANK0      1     1      0
_data_api_calibration_table_data_sav
              _data_api_rt_data_save
 ---------------------------------------------------------------------------------
 (4) _data_api_rt_data_save                                6     6      0   25918
                                             22 BANK0      6     6      0
                         _crc_append
                         _crc_verify
           _data_api_system_data_get
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (3) _data_api_calibration_table_data_save                10     9      1   26545
                                             22 BANK0     10     9      1
                         _crc_append
                         _crc_verify
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (2) _modbus_response_read_status_register                 7     7      0   16736
                                             25 BANK0      7     7      0
                         _crc_append
                      _m_mem_cpy_len
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (2) _modbus_response_read_flash_data                      7     7      0   16668
                                             25 BANK0      7     7      0
                         _crc_append
                      _m_mem_cpy_len
   _modbus_response_illgeal_function
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (3) _modbus_response_illgeal_function                     4     3      1    4913
                                              7 COMMON     1     1      0
                                             22 BANK0      3     2      1
                         _crc_append
                 _my_uart1_send_poll
 ---------------------------------------------------------------------------------
 (4) _my_uart1_send_poll                                   6     4      2     606
                                              3 COMMON     3     1      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _mfapi_pcd_init                                       2     2      0   15440
                                              9 BANK0      2     2      0
               _mfrc522_bal_read_reg
                   _mfrc522_hal_init
 ---------------------------------------------------------------------------------
 (2) _mfrc522_hal_init                                     1     1      0   15134
                                              8 BANK0      1     1      0
                              _delay
              _mfrc522_bal_write_reg
             _mfrc522_hal_antenna_on
               _mfrc522_hal_reset_sf
       _mfrc522_hal_set_antenna_gain
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_set_antenna_gain                         2     2      0    5636
                                              6 BANK0      2     2      0
            _mfrc522_bal_clr_bit_reg
            _mfrc522_bal_set_bit_reg
       _mfrc522_hal_get_antenna_gain
 ---------------------------------------------------------------------------------
 (4) _mfrc522_hal_get_antenna_gain                         2     2      0     250
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_set_bit_reg                              4     3      1    2617
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_bal_clr_bit_reg                              4     3      1    2707
                                              2 BANK0      4     3      1
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_reset_sf                                 1     1      0    2124
                                              2 BANK0      1     1      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (3) _mfrc522_hal_antenna_on                               2     2      0    2189
                                              2 BANK0      2     2      0
               _mfrc522_bal_read_reg
              _mfrc522_bal_write_reg
 ---------------------------------------------------------------------------------
 (6) _mfrc522_bal_write_reg                                2     1      1    1914
                                              7 COMMON     1     0      1
                                              0 BANK0      1     1      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_read_reg                                 3     3      0     210
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
     _mfrc522_bal_write_read_via_spi
 ---------------------------------------------------------------------------------
 (7) _mfrc522_bal_write_read_via_spi                       4     4      0     142
                                              3 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _m_system_start_self_test                             0     0      0    3401
                              _delay
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (1) _m_system_init                                        0     0      0     326
                  _SYSTEM_Initialize
                           _lcd_init
                      _led_port_init
               _other_gpio_port_init
 ---------------------------------------------------------------------------------
 (2) _other_gpio_port_init                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _led_port_init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcd_init                                             0     0      0     130
                         _lcd_config
 ---------------------------------------------------------------------------------
 (3) _lcd_config                                           0     0      0     130
                       _lcd_disp_all
 ---------------------------------------------------------------------------------
 (3) _lcd_disp_all                                         6     6      0     130
                                              3 COMMON     4     4      0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _SYSTEM_Initialize                                    0     0      0     196
                 _EUSART1_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (3) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
                    _TMR1_StartTimer
 ---------------------------------------------------------------------------------
 (4) _TMR1_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _TMR1_SetInterruptHandler                             2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _TMR0_Initialize                                      1     1      0      98
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (4) _TMR0_SetInterruptHandler                             2     0      2      98
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _in_app_vavle_on                                      0     0      0       0
                           _valve_on
 ---------------------------------------------------------------------------------
 (2) _valve_on                                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _flow_sampling_process                                2     2      0   32828
                                             30 BANK0      2     2      0
        _adc_mcp3241_read_convert_16
       _adc_mcp3241_start_convert_16
                _app_flow_adc_2_flow
                    _app_flow_lookup
                 _app_flow_money_off
             _app_flow_money_warning
      _app_flow_rt_balance_money_cal
             _app_flow_rt_volume_cal
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_volume_cal                               0     0      0    4411
                            ___lldiv
                             ___lmul
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4    1132
                                              3 COMMON     5     1      4
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_rt_balance_money_cal                        8     8      0    2561
                                             22 BANK0      8     8      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             15     7      8    1345
                                              7 COMMON     1     1      0
                                              8 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_warning                               2     2      0       0
                                              3 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_money_off                                   2     2      0       0
                                              4 COMMON     2     2      0
                   _in_app_vavle_off
 ---------------------------------------------------------------------------------
 (3) _in_app_vavle_off                                     0     0      0       0
                          _valve_off
 ---------------------------------------------------------------------------------
 (4) _valve_off                                            1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_lookup                                     13    11      2     298
                                              3 COMMON     3     1      2
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (2) _app_flow_adc_2_flow                                 17    15      2    4953
                                             13 BANK0     17    15      2
                            ___lldiv
                             ___lmul
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     922
                                              7 COMMON     1     1      0
                                              2 BANK0      7     3      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (8) ___lmul                                              12     4      8    1216
                                              3 COMMON     4     4      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8    1141
                                              3 COMMON     1     1      0
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_start_convert_16                         4     3      1   10206
                                              2 BANK0      4     3      1
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (2) _adc_mcp3241_read_convert_16                          7     5      2   10297
                                              2 BANK0      7     5      2
           _iic_received_byte_if_ack
                      _iic_send_byte
                          _iic_start
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_start                                            0     0      0    3271
                              _delay
 ---------------------------------------------------------------------------------
 (3) _iic_send_byte                                        3     3      0    3438
                                              7 COMMON     1     1      0
                                              0 BANK0      2     2      0
                      _iic_waite_ack
 ---------------------------------------------------------------------------------
 (4) _iic_waite_ack                                        2     2      0    3336
                                              5 COMMON     2     2      0
                           _iic_stop
 ---------------------------------------------------------------------------------
 (3) _iic_stop                                             0     0      0    3271
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                2     0      2    3271
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (3) _iic_received_byte_if_ack                             3     3      0     207
                                              6 COMMON     1     1      0
                                              0 BANK0      2     2      0
                  _iic_received_byte
                       _iic_send_ack
 ---------------------------------------------------------------------------------
 (4) _iic_send_ack                                         1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _iic_received_byte                                    3     3      0     108
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _data_api_system_data_init                            2     2      0   27348
                                             22 BANK0      2     2      0
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
           _data_api_system_data_get
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_flash_erase
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (5) _data_api_system_data_get                             1     1      0       0
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _data_api_calibration_table_data_init                10    10      0   21249
                                             22 BANK0     10    10      0
                             ___wmul
                         _crc_append
                         _crc_verify
               _data_api_read_eeprom
              _data_api_write_eeprom
                       _m_flash_copy
                      _m_flash_erase
 ---------------------------------------------------------------------------------
 (2) _m_flash_erase                                        3     0      3     738
                                              0 BANK0      3     0      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (4) _m_flash_copy                                        12     7      5    3066
                                              6 COMMON     2     2      0
                                             10 BANK0     10     5      5
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_WriteBlock                                    10     7      3    1085
                                              0 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (6) _FLASH_EraseBlock                                     3     1      2     276
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (5) _FLASH_ReadWord                                       3     1      2     276
                                              3 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (4) _data_api_write_eeprom                                6     2      4    1495
                                              6 COMMON     2     2      0
                                              0 BANK0      4     0      4
                   _DATAEE_WriteByte
 ---------------------------------------------------------------------------------
 (5) _DATAEE_WriteByte                                     3     2      1     279
                                              3 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _data_api_read_eeprom                                 6     2      4     707
                                              4 COMMON     4     0      4
                                              0 BANK0      2     2      0
                    _DATAEE_ReadByte
 ---------------------------------------------------------------------------------
 (3) _DATAEE_ReadByte                                      1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_verify                                          11     7      4   10708
                                             11 BANK0     11     7      4
                            _crc_sum
                      _m_mem_cpy_len
 ---------------------------------------------------------------------------------
 (6) _m_mem_cpy_len                                        6     1      5    7662
                                              3 COMMON     5     0      5
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _crc_append                                          11     7      4    2891
                                             11 BANK0     11     7      4
                            _crc_sum
 ---------------------------------------------------------------------------------
 (5) _crc_sum                                             15    11      4     660
                                              3 COMMON     4     0      4
                                              0 BANK0     11    11      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1216
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTERRUPT_InterruptManager                          1     1      0      23
                                              2 COMMON     1     1      0
                _EUSART1_Receive_ISR
               _EUSART1_Transmit_ISR
                           _TMR0_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (11) _TMR1_ISR                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _TMR0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Transmit_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _EUSART1_Receive_ISR                                 2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _data_api_calibration_table_data_init
     ___wmul
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_flash_copy
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _m_flash_erase
       _FLASH_EraseBlock
   _data_api_flash_process
     _data_api_calibration_table_data_save
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_flash_copy
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
       _m_mem_cpy_len
     _data_api_rt_data_save
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _data_api_system_data_get
       _data_api_write_eeprom
         _DATAEE_WriteByte
       _m_flash_copy
         _FLASH_ReadWord
         _FLASH_WriteBlock
           _FLASH_EraseBlock
       _m_mem_cpy_len
   _data_api_rt_data_save
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_system_data_get
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_flash_copy
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _m_mem_cpy_len
   _data_api_system_data_init
     _crc_append
       _crc_sum
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _data_api_read_eeprom
       _DATAEE_ReadByte
     _data_api_system_data_get
     _data_api_write_eeprom
       _DATAEE_WriteByte
     _m_flash_copy
       _FLASH_ReadWord
       _FLASH_WriteBlock
         _FLASH_EraseBlock
     _m_flash_erase
       _FLASH_EraseBlock
     _m_mem_cpy_len
   _flow_sampling_process
     _adc_mcp3241_read_convert_16
       _iic_received_byte_if_ack
         _iic_received_byte
         _iic_send_ack
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _adc_mcp3241_start_convert_16
       _iic_send_byte
         _iic_waite_ack
           _iic_stop
             _delay
       _iic_start
         _delay
       _iic_stop
         _delay
     _app_flow_adc_2_flow
       ___lldiv
       ___lmul
       ___lwdiv
         ___wmul (ARG)
       ___wmul
     _app_flow_lookup
     _app_flow_money_off
       _in_app_vavle_off
         _valve_off
     _app_flow_money_warning
     _app_flow_rt_balance_money_cal
       ___aldiv
         ___lmul (ARG)
       ___lmul
     _app_flow_rt_volume_cal
       ___lldiv
       ___lmul
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
   _in_app_vavle_on
     _valve_on
   _m_system_init
     _SYSTEM_Initialize
       _EUSART1_Initialize
       _OSCILLATOR_Initialize
       _PIN_MANAGER_Initialize
       _TMR0_Initialize
         _TMR0_SetInterruptHandler
       _TMR1_Initialize
         _TMR1_SetInterruptHandler
         _TMR1_StartTimer
       _WDT_Initialize
     _lcd_init
       _lcd_config
         _lcd_disp_all
     _led_port_init
     _other_gpio_port_init
   _m_system_start_self_test
     _delay
     _lcd_disp_all
   _mfapi_pcd_init
     _mfrc522_bal_read_reg
       _mfrc522_bal_write_read_via_spi
     _mfrc522_hal_init
       _delay
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_antenna_on
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_reset_sf
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_set_antenna_gain
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_get_antenna_gain
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
   _modbus_response_process
     _crc_verify
       _crc_sum
       _m_mem_cpy_len
     _modbus_response_illgeal_function
       _crc_append
         _crc_sum
       _my_uart1_send_poll
     _modbus_response_read_flash_data
       _crc_append
         _crc_sum
       _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_read_status_register
       _crc_append
         _crc_sum
       _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
       _my_uart1_send_poll
     _modbus_response_write_flash_clib
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
       _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
     _modbus_response_write_flash_sys
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
       _m_mem_cpy_len
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
     _modbus_response_write_status_register
       _modbus_response_illgeal_function
         _crc_append
           _crc_sum
         _my_uart1_send_poll
   _my_uart1_received_ready
   _rfid_comm_process
     _delay
     _lcd_disp_str
       _lcd_disp_code
         _lcd_disp_code_0
         _lcd_disp_code_1
         _lcd_disp_code_2
         _lcd_disp_code_3
         _lcd_disp_code_4
         _lcd_disp_code_5
         _lcd_disp_code_6
         _lcd_disp_code_7
       _lcd_disp_refresh
         _m_mem_cpy_len
     _mfapi_is_new_card_present
       _m_mem_set
       _picc_req_a_or_wakeup_a
         _mfrc522_bal_clr_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _picc_halt_a
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_select
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_read_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_bal_write_reg
         _mfrc522_bal_write_read_via_spi
       _mfrc522_hal_calculate_crc
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
       _pcd_comm_with_picc
         _mfrc522_bal_read_fifo_len_ex
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_set_bit_reg
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg_len
           _mfrc522_bal_write_read_via_spi
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
     _picc_stop_cryptol
       _mfrc522_bal_clr_bit_reg
         _mfrc522_bal_read_reg
           _mfrc522_bal_write_read_via_spi
         _mfrc522_bal_write_reg
           _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_dec
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_header
       _crc_append
         _crc_sum
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _create_card_key_b
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
       _m_mem_cpy_len
       _m_mem_set
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_read_inc
       _crc_verify
         _crc_sum
         _m_mem_cpy_len
       _mifare_read
         _mfrc522_hal_calculate_crc
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _rfid_comm_process_recharge
       _crc_append
         _crc_sum
       _data_api_flash_process
         _data_api_calibration_table_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
         _data_api_rt_data_save
           _crc_append
             _crc_sum
           _crc_verify
             _crc_sum
             _m_mem_cpy_len
           _data_api_system_data_get
           _data_api_write_eeprom
             _DATAEE_WriteByte
           _m_flash_copy
             _FLASH_ReadWord
             _FLASH_WriteBlock
               _FLASH_EraseBlock
           _m_mem_cpy_len
       _m_mem_cpy_len
       _mifare_write
         _pcd_mifare_transceive
           _m_mem_cpy_len
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
           _pcd_comm_with_picc
             _mfrc522_bal_read_fifo_len_ex
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
             _mfrc522_hal_calculate_crc
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_set_bit_reg
                 _mfrc522_bal_read_reg
                   _mfrc522_bal_write_read_via_spi
                 _mfrc522_bal_write_reg
                   _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg_len
                 _mfrc522_bal_write_read_via_spi
       _picc_authenticate
         _pcd_comm_with_picc
           _mfrc522_bal_read_fifo_len_ex
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_read_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_set_bit_reg
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg
             _mfrc522_bal_write_read_via_spi
           _mfrc522_bal_write_reg_len
             _mfrc522_bal_write_read_via_spi
           _mfrc522_hal_calculate_crc
             _mfrc522_bal_read_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_set_bit_reg
               _mfrc522_bal_read_reg
                 _mfrc522_bal_write_read_via_spi
               _mfrc522_bal_write_reg
                 _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg
               _mfrc522_bal_write_read_via_spi
             _mfrc522_bal_write_reg_len
               _mfrc522_bal_write_read_via_spi
     _ui_disp_balance_and_volume
       ___aldiv
         ___lmul (ARG)
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
   _timer0_irq_callback
   _timer1_irq_callback
     _valve_stop
   _ui_disp_menu
     _lcd_disp_refresh
       _m_mem_cpy_len
     _ui_disp_balance_and_volume
       ___aldiv
         ___lmul (ARG)
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_cln
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_clear_balance
       _ui_disp_balance_and_volume
         ___aldiv
           ___lmul (ARG)
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_clear_card_id
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
     _ui_disp_clear_totale
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
     _ui_disp_flow
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_modbus_id
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_recharge
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
     _ui_disp_set_balanceOff
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_balanceWarning
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_calib
       ___awdiv
       ___awmod
       ___lbmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_line
       ___lldiv
       ___lmul
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
     _ui_disp_set_line_reset
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_price
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_set_transferMoneyLimit
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_small_flow_how_care
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
     _ui_disp_str_num_s
       ___lwdiv
         ___wmul (ARG)
       ___lwmod
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_refresh
         _m_mem_cpy_len
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_mem_cpy
     _ui_disp_totale_v
       _lcd_clear_buffer
         _m_mem_set
       _lcd_disp_dp
         _lcd_set_com_seg
           ___awdiv
           ___bmul
             ___awdiv (ARG)
           ___lbmod
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
       _m_mem_set
       _ui_head_hide
       _ui_uint32_2_str
         ___aldiv
           ___lmul (ARG)
         ___almod
         _m_math_pow
           ___lmul
   _ui_key_process
     _key_scan_call
       _delay
     _ui_disp_menu
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_balance_and_volume
         ___aldiv
           ___lmul (ARG)
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_cln
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_clear_balance
         _ui_disp_balance_and_volume
           ___aldiv
             ___lmul (ARG)
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_cln
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
               ___lmul (ARG)
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_clear_card_id
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_disp_clear_totale
         _ui_disp_totale_v
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_dp
             _lcd_set_com_seg
               ___awdiv
               ___bmul
                 ___awdiv (ARG)
               ___lbmod
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_head_hide
           _ui_uint32_2_str
             ___aldiv
               ___lmul (ARG)
             ___almod
             _m_math_pow
               ___lmul
       _ui_disp_flow
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_modbus_id
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_recharge
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
       _ui_disp_set_balanceOff
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_balanceWarning
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_calib
         ___awdiv
         ___awmod
         ___lbmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_line
         ___lldiv
         ___lmul
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
       _ui_disp_set_line_reset
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_price
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_set_transferMoneyLimit
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_small_flow_how_care
         _lcd_disp_refresh
           _m_mem_cpy_len
         _ui_disp_str_num_s
           ___lwdiv
             ___wmul (ARG)
           ___lwmod
           _lcd_clear_buffer
             _m_mem_set
           _lcd_disp_refresh
             _m_mem_cpy_len
           _lcd_disp_str
             _lcd_disp_code
               _lcd_disp_code_0
               _lcd_disp_code_1
               _lcd_disp_code_2
               _lcd_disp_code_3
               _lcd_disp_code_4
               _lcd_disp_code_5
               _lcd_disp_code_6
               _lcd_disp_code_7
             _lcd_disp_refresh
               _m_mem_cpy_len
           _m_mem_set
           _ui_mem_cpy
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy
       _ui_disp_totale_v
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_dp
           _lcd_set_com_seg
             ___awdiv
             ___bmul
               ___awdiv (ARG)
             ___lbmod
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_head_hide
         _ui_uint32_2_str
           ___aldiv
             ___lmul (ARG)
           ___almod
           _m_math_pow
             ___lmul
     _ui_key_process_cancel
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_flash_copy
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
         _m_mem_cpy_len
     _ui_key_process_down
       _m_mem_set
     _ui_key_process_enter
       ___aldiv
         ___lmul (ARG)
       ___awdiv
       _m_mem_cpy_len
       _ui_key_waite_up
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
     _ui_key_process_up_down
       _key_process_up_down_variable_speed_ex
         _get_globle_ticker
         _key_scan_call
           _delay
         _set_globle_ticker
         _ui_disp_menu
           _lcd_disp_refresh
             _m_mem_cpy_len
           _ui_disp_balance_and_volume
             ___aldiv
               ___lmul (ARG)
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_cln
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
                 ___lmul (ARG)
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_clear_balance
             _ui_disp_balance_and_volume
               ___aldiv
                 ___lmul (ARG)
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_cln
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                   ___lmul (ARG)
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_clear_card_id
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_disp_clear_totale
             _ui_disp_totale_v
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_dp
                 _lcd_set_com_seg
                   ___awdiv
                   ___bmul
                     ___awdiv (ARG)
                   ___lbmod
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_head_hide
               _ui_uint32_2_str
                 ___aldiv
                   ___lmul (ARG)
                 ___almod
                 _m_math_pow
                   ___lmul
           _ui_disp_flow
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
                 ___lmul (ARG)
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_modbus_id
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_recharge
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
           _ui_disp_set_balanceOff
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_balanceWarning
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_calib
             ___awdiv
             ___awmod
             ___lbmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
                 ___lmul (ARG)
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_line
             ___lldiv
             ___lmul
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
                 ___lmul (ARG)
               ___almod
               _m_math_pow
                 ___lmul
           _ui_disp_set_line_reset
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_price
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_set_transferMoneyLimit
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_small_flow_how_care
             _lcd_disp_refresh
               _m_mem_cpy_len
             _ui_disp_str_num_s
               ___lwdiv
                 ___wmul (ARG)
               ___lwmod
               _lcd_clear_buffer
                 _m_mem_set
               _lcd_disp_refresh
                 _m_mem_cpy_len
               _lcd_disp_str
                 _lcd_disp_code
                   _lcd_disp_code_0
                   _lcd_disp_code_1
                   _lcd_disp_code_2
                   _lcd_disp_code_3
                   _lcd_disp_code_4
                   _lcd_disp_code_5
                   _lcd_disp_code_6
                   _lcd_disp_code_7
                 _lcd_disp_refresh
                   _m_mem_cpy_len
               _m_mem_set
               _ui_mem_cpy
           _ui_disp_str_num_s
             ___lwdiv
               ___wmul (ARG)
             ___lwmod
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_refresh
               _m_mem_cpy_len
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_mem_cpy
           _ui_disp_totale_v
             _lcd_clear_buffer
               _m_mem_set
             _lcd_disp_dp
               _lcd_set_com_seg
                 ___awdiv
                 ___bmul
                   ___awdiv (ARG)
                 ___lbmod
             _lcd_disp_str
               _lcd_disp_code
                 _lcd_disp_code_0
                 _lcd_disp_code_1
                 _lcd_disp_code_2
                 _lcd_disp_code_3
                 _lcd_disp_code_4
                 _lcd_disp_code_5
                 _lcd_disp_code_6
                 _lcd_disp_code_7
               _lcd_disp_refresh
                 _m_mem_cpy_len
             _m_mem_set
             _ui_head_hide
             _ui_uint32_2_str
               ___aldiv
                 ___lmul (ARG)
               ___almod
               _m_math_pow
                 ___lmul
       _ui_key_process_up_down_main
     _ui_key_set_process
       ___awdiv
       ___wmul
       _data_api_calibration_table_data_save
         _crc_append
           _crc_sum
         _crc_verify
           _crc_sum
           _m_mem_cpy_len
         _data_api_write_eeprom
           _DATAEE_WriteByte
         _m_flash_copy
           _FLASH_ReadWord
           _FLASH_WriteBlock
             _FLASH_EraseBlock
         _m_mem_cpy_len
       _m_mem_cpy_len
     _ui_key_waite_up
       _get_globle_ticker
       _key_scan_call
         _delay
       _set_globle_ticker
   _ui_start_display
     _ui_disp_hello
       _delay
       _lcd_disp_all
       _lcd_disp_refresh
         _m_mem_cpy_len
       _lcd_disp_str
         _lcd_disp_code
           _lcd_disp_code_0
           _lcd_disp_code_1
           _lcd_disp_code_2
           _lcd_disp_code_3
           _lcd_disp_code_4
           _lcd_disp_code_5
           _lcd_disp_code_6
           _lcd_disp_code_7
         _lcd_disp_refresh
           _m_mem_cpy_len
     _ui_disp_str_dly
       _delay
       _lcd_disp_all
       _lcd_disp_refresh
         _m_mem_cpy_len
       _ui_disp_str_num_s
         ___lwdiv
           ___wmul (ARG)
         ___lwmod
         _lcd_clear_buffer
           _m_mem_set
         _lcd_disp_refresh
           _m_mem_cpy_len
         _lcd_disp_str
           _lcd_disp_code
             _lcd_disp_code_0
             _lcd_disp_code_1
             _lcd_disp_code_2
             _lcd_disp_code_3
             _lcd_disp_code_4
             _lcd_disp_code_5
             _lcd_disp_code_6
             _lcd_disp_code_7
           _lcd_disp_refresh
             _m_mem_cpy_len
         _m_mem_set
         _ui_mem_cpy

 _INTERRUPT_InterruptManager (ROOT)
   _EUSART1_Receive_ISR
   _EUSART1_Transmit_ISR
   _TMR0_ISR
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     25      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      2      29      11       51.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      40      13       80.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     164      20        0.0%
BITBANK8             8      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8                8      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK10           50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK10              50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK11           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK11               0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
DATA                 0      0     164      27        0.0%
BITBANK12           30      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12               0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.37 build -260352376 
Symbol Table                                                                                   Wed Mar 29 13:32:00 2017

                   mfrc522_bal_set_bit_reg@bits 0022                         ?_picc_req_a_or_wakeup_a 004A  
                                ?_iic_waite_ack 0070             __end_of_ui_key_process_up_down_main 2800  
                   _ui_key_process_up_down_main 27E5                                               pc 0002  
      key_process_up_down_variable_speed_ex@t32 0056                                ui_uint32_2_str@x 0036  
                                ___bmul@product 0026        key_process_up_down_variable_speed_ex@max 004B  
      key_process_up_down_variable_speed_ex@key 0052        key_process_up_down_variable_speed_ex@min 0049  
                                   __CFG_CP$OFF 0000        key_process_up_down_variable_speed_ex@val 0058  
                                  ___awdiv@sign 0021                             ___wmul@multiplicand 0075  
                       _mfrc522_bal_set_bit_reg 1DF0                                _picc_select$3210 00C8  
                              _picc_select$3213 00CA                                _picc_select$3206 00D1  
                              _picc_select$3214 00CC                                _picc_select$3207 00D2  
               __end_of_mfrc522_bal_clr_bit_reg 1E56                                 _timer0ReloadVal 01C6  
                                 ?_m_flash_copy 002A                  __end_of_ui_key_process_up_down 211B  
                          _data_api_read_eeprom 1485                                             l310 064E  
                                           l303 0633                                             l305 0646  
                                           l253 360C                                             l246 37DA  
                                           l443 09CD                                             l435 24D8  
                                           l700 2E78                                             l439 091D  
                                           l609 201A                                             l564 2298  
                                           l653 211A                                             l709 2FFF  
                                           l751 066E                                             l685 2D53  
                    _flowCalibrationPointSingle 016F                                    __CFG_CPD$OFF 0000  
          __size_of_ui_disp_small_flow_how_care 0012                          ?_ui_disp_clear_balance 0070  
                               _timer1ReloadVal 00ED                                 _ui_key_waite_up 2009  
                        ?_ui_disp_clear_card_id 0070                                    ___awmod@sign 0021  
                    __size_of_picc_authenticate 0059                                    __CFG_BORV$LO 0000  
                                           wreg 0009                                    __CFG_IESO$ON 0000  
                                  __CFG_FOSC$HS 0000                              ui_uint32_2_str@buf 003F  
                            ui_uint32_2_str@len 003A                               ??_app_flow_lookup 0020  
                           lcd_disp_code_0@code 0074                                  ?_m_flash_erase 0020  
                           lcd_disp_code_1@code 0074                             lcd_disp_code_2@code 0074  
                           lcd_disp_code_3@code 0074                             lcd_disp_code_4@code 0074  
                           lcd_disp_code_5@code 0074                             lcd_disp_code_6@code 0074  
                FLASH_WriteBlock@flashWordArray 0022                                   _led_port_init 2BEC  
                   mfrc522_hal_calculate_crc@t8 002E                             lcd_disp_code_7@code 0074  
                                  __CFG_LVP$OFF 0000      key_process_up_down_variable_speed_ex@speed 0054  
                                          l1014 03FB                                            l1009 0426  
                                          l2021 1DD6                                            l2032 1DEC  
                                          l2027 1DDC                                            l1172 1A22  
                                          l2029 1DDD                                            l2053 1E20  
                                          l2080 1E88                                            l2511 129D  
                                          l1712 016A                                            l1288 2687  
                                          l1810 0146                                            l2258 0DCB  
                                          l2506 129E                                            l2284 0E8F  
                                          l1709 0169                                            l1750 019D  
                                          l2607 13F8                                            l1744 0191  
                                          l1763 00EB                                            l1772 00F0  
                                          l2662 0AF1                                            l2494 125D  
                                          l2495 1266                                            l1776 00F2  
                                          l1952 3661                                            l2498 126A  
                                          l2675 3722                                            l1896 3689  
                                          l2876 2748                                            l8121 1F84  
                                          l8131 1F9F                                            l8127 1F96  
                                          l8119 1F79                                            l8055 3617  
                                          l9035 35D3                                            l9401 27FB  
                                          l9281 2C0F                                            l9439 0429  
                                          l9395 27F2                                            l8845 2C3A  
                                          l8847 2C2E                                            l9399 27F9  
                                          STR_1 2A79                                            STR_2 2AA4  
                                          STR_3 2AD6                                            STR_4 2A9D  
                                          STR_5 2A94                                            STR_6 2AC3  
                                          STR_7 2ACE                                            STR_8 2AD2  
                                          STR_9 2AAB                                            _LATA 010C  
                                          _LATB 010D                                            _LATC 010E  
                                          _LATD 010F                                            _LATE 0110  
                                          _LATF 038C                                            _LATG 038D  
                                          u6215 1F85                                            u6225 1F8F  
                                          u6235 1F97                                            u6195 1F7C  
                                          u8205 0378                                            u8215 0396  
                                          u8303 03F4                                            u8225 03C5  
                                          u8185 035B                                            u8293 0421  
                                 _m_mem_cpy_len 1778                                            _TMR0 0015  
                                ??_lcd_disp_all 0073                                  ??_lcd_disp_cln 0032  
                                          _WPUB 020D                                            _WPUG 048D  
                                ??_lcd_disp_str 0024                                    __CFG_WRT$OFF 0000  
                                 __CFG_FCMEN$ON 0000                                            _pLCD 012F  
                                          ___t8 00C6                    __end_of_LCDDigitalIndexTable 2A29  
                     __size_of_lcd_disp_refresh 000F                                            _main 1245  
                                          _flow 00B0                                            _menu 0078  
                            ui_key_waite_up@now 0022        modbus_response_read_flash_data@startAddr 003B  
                                          fsr0h 0005                                            fsr1h 0007  
                                          fsr0l 0004                                            indf0 0000  
                                          indf1 0001                                            fsr1l 0006  
                                          btemp 007E                               ?_FLASH_WriteBlock 0020  
                                 __CFG_BOREN$ON 0000                          ??_mfrc522_bal_read_reg 0077  
                                          ltemp 007E                  ??_adc_mcp3241_start_convert_16 0023  
                             _rfid_comm_process 0801                  __size_of_pcd_mifare_transceive 006B  
                                 _globlTickerms 01AA                                  picc_select@uid 00E5  
                                          start 0037                                  ??_iic_send_ack 0073  
                        create_card_key_b@cckey 0074                                            ttemp 007E  
                 __end_of_pcd_mifare_transceive 1D5A                __size_of_my_uart1_received_ready 0009  
                                          wtemp 007E                         ?_app_flow_rt_volume_cal 0070  
                          ui_disp_str_num_s@num 002B                            ui_disp_str_num_s@str 0029  
                            ??_FLASH_WriteBlock 0023                       data_api_write_eeprom@addr 0022  
              __end_of_iic_received_byte_if_ack 00B7                      ??_TMR1_SetInterruptHandler 0075  
                __end_of_picc_req_a_or_wakeup_a 0BF6                               ___bmul@multiplier 0027  
                            ?_rfid_comm_process 0070                                   __CFG_MCLRE$ON 0000  
                      __end_of_ui_start_display 3698                                ?_lcd_set_com_seg 0028  
  __end_of_modbus_response_read_status_register 062A   __size_of_modbus_response_read_status_register 0098  
        ??_modbus_response_read_status_register 0039           ?_modbus_response_read_status_register 0070  
          _modbus_response_read_status_register 0592                                           S15567 3000  
                                         S15569 3010     key_process_up_down_variable_speed_ex@change 0053  
               pcd_comm_with_picc@errorRegValue 0044                         app_flow_lookup@adcValue 0073  
               ??_rfid_comm_process_read_header 00CC                       __size_of_DATAEE_WriteByte 001C  
                                 lcd_disp_all@i 0021                                   lcd_disp_all@x 0020  
                       __end_of_TMR0_Initialize 2C2E                       ??_modbus_response_process 004A  
                                  ?_mifare_read 004A                                  ??_m_flash_copy 0076  
                          _mfrc522_hal_reset_sf 1E23             mfapi_is_new_card_present@bufferATQA 0058  
                __size_of_OSCILLATOR_Initialize 0005                             ??_rfid_comm_process 00EC  
                 __end_of_OSCILLATOR_Initialize 2B9C                                           l10215 35E6  
                                         l12001 0F07                                           l10235 0362  
                                         l12021 0EBF                                           l12005 0F0C  
                                         l11231 3701                                           l11223 36EB  
                                         l10249 03CE                                           l12121 2D64  
                                         l12027 0EC9                                           l12131 2D6E  
                                         l12123 2D66                                           l12053 0EFF  
                                         l12045 0EEE                                           l12037 0ED1  
                                         l12061 2736                                           l12125 2D68  
                                         l12117 2D60                                           l12221 375C  
                                         l11253 367C                                           l11261 3688  
                                         l11245 366D                                           l12039 0EDC  
                                         l12127 2D6A                                           l12119 2D62  
                                         l12215 3737                                           l12049 0EF7  
                                         l12321 2688                                           l12129 2D6C  
                                         l12305 1FE4                                           l12313 1FC0  
                                         l12217 3744                                           l12225 3767  
                                         l12209 372F                                           l12081 0FAB  
                                         l12171 0B01                                           l13211 1125  
                                         l12091 1FA4                                           l13027 18BB  
                                         l12331 26B4                                           l12323 2690  
                                         l12315 1FFF                                           l13131 228C  
                                         l13123 226F                                           l13115 2266  
                                         l13107 225F                                           l14003 2E59  
                                         l12181 0B1A                                           l12093 1FA5  
                                         l12333 26BD                                           l12325 2699  
                                         l12309 1FF6                                           l12229 3775  
                                         l13141 2291                                           l13133 228D  
                                         l14021 2E90                                           l13063 18F2  
                                         l13047 18D0                                           l12327 26A2  
                                         l13151 2296                                           l13143 2292  
                                         l13135 228E                                           l14031 2EA7  
                                         l11617 1778                                           l12193 0B45  
                                         l13217 1147                                           l12097 1FAF  
                                         l12329 26AB                                           l12089 1E9D  
                                         l12281 0A20                                           l12513 1F3C  
                                         l13153 2297                                           l13145 2293  
                                         l13137 228F                                           l13129 228B  
                                         l14121 2FBC                                           l15001 2065  
                                         l11627 1778                                           l12179 0B0D  
                                         l13147 2294                                           l13139 2290  
                                         l14043 2EC3                                           l15011 2075  
                                         l12437 37A3                                           l12197 0B53  
                                         l12189 0B3A                                           l12381 1F62  
                                         l13245 106A                                           l12605 1E71  
                                         l12357 1E0C                                           l13421 1D4F  
                                         l12269 0A90                                           l12277 0ADB  
                                         l13149 2295                                           l14109 2F96  
                                         l15005 206C                                           l15013 2080  
                                         l15111 11EC                                           l13263 017B  
                                         l12711 2646                                           l12375 1F4B  
                                         l14231 06CF                                           l15031 044B  
                                         l12631 1D83                                           l13415 1D4A  
                                         l12287 0A31                                           l13503 2163  
                                         l13511 218D                                           l14135 2FDF  
                                         l15007 206F                                           l12449 37C6  
                                         l15105 11C9                                           l12377 1F56  
                                         l12385 1F6B                                           l14161 0554  
                                         l15041 047E                                           l12633 1D95  
                                         l12297 1FCC                                           l12289 1FBD  
                                         l12553 0936                                           l12561 095D  
                                         l12545 08FA                                           l12801 2371  
                                         l14065 2F0E                                           l12651 141F  
                                         l14331 1532                                           l12723 2671  
                                         l15131 0058                                           l14227 06CA  
                                         l14315 0734                                           l15043 0481  
                                         l15035 0475                                           l13603 1C6B  
                                         l12571 09B0                                           l12555 093C  
                                         l12547 0900                                           l15211 0876  
                                         l15203 085E                                           l13099 2257  
                                         l13507 2181                                           l14075 2F25  
                                         l12661 1446                                           l12901 14F5  
                                         l12485 1A19                                           l12709 2639  
                                         l14253 05C2                                           l14157 054F  
                                         l15045 0484                                           l15037 0478  
                                         l13621 1CA2                                           l14501 15ED  
                                         l15221 0889                                           l15213 0878  
                                         l13453 2009                                           l12821 2347  
                                         l13509 218B                                           l14093 2F68  
                                         l14343 1487                                           l12487 1A19  
                                         l12719 2666                                           l15039 047B  
                                         l13615 1C8B                                           l15231 08A7  
                                         l13463 2016                                           l12735 2483  
                                         l12815 232A                                           l13527 21B4  
                                         l14329 154A                                           l15081 1397  
                                         l13297 0194                                           l13721 010B  
                                         l14353 01B0                                           l15129 0055  
                                         l13609 1C86                                           l12577 09E6  
                                         l12585 0A0C                                           l12569 09AA  
                                         l15233 08AC                                           l12761 22A7  
                                         l12753 22D8                                           l12833 2312  
                                         l12673 2759                                           l12809 238C  
                         ?_data_api_read_eeprom 0074                                           l12659 1416  
                                         l12923 151F                                           l15075 135F  
                                         l12931 17F1                                           l13299 0198  
                                         l14363 0220                                           l14267 05F2  
                                         l14195 04CC                                           l13643 17DA  
                                         l12579 09EC                                           l13475 202F  
                                         l12843 22C4                                           l12827 22F5  
                                         l12691 277D                                           l13491 2136  
                                         l12909 14FD                                           l15069 1317  
                                         l14381 0343                                           l14365 0262  
                                         l13397 1D1D                                           l12757 2299  
                                         l12749 22CB                                           l12685 2766  
                                         l12677 2760                                           l12845 2522  
                                         l12765 235F                                           l13901 20D7  
                                         l13813 191B                                           l15421 127C  
                                         l15413 1270                                           l15405 1258  
                                         l12943 14AB                                           l11991 0FE3  
                                         l14287 0624                                           l14199 04D1  
                                         l14631 1B1D                                           l12839 22AC  
                                         l12687 2771                                           l12695 2786  
                                         l12775 25A8                                           l12767 2590  
                                         l13903 20E3                                           l15431 128C  
                                         l12929 14CB                                           l13569 17A3  
                                         l13665 1CDB                                           l14625 1AD1  
                                         l13833 2794                                           l13921 2C71  
                                         l13913 2C63                                           l13905 20F0  
                                         l15425 1282                                           l15417 1276  
                                         l11987 0FD8                                           l13771 1E2A  
                                         l12955 1810                                           l14571 1767  
                                         l14539 1672                                           l14635 1B22  
                                         l13931 2CAA                                           l12699 278E  
                                         l12795 23A2                                           l12957 1819  
                                         l13757 0BEC                                           l14733 0C24  
                                         l14557 16F4                                           l14549 16B2  
                                         l15197 084E                                           l13861 27C6  
                                         l13941 2CCE                                           l13933 2CAF  
                                         l13925 2C84                                           l13917 2C6A  
                                         l12797 22EE                                           l13909 20FD  
                                         l13829 191E                                           l15453 12C1  
                                         l15445 12B6                                           l12895 14DA  
                                         l12975 185D                                           l14815 0D25  
                                         l14823 0D32                                           l14735 0C27  
                                         l14575 176C                                           l14567 1714  
                                         l14487 15A4                                           l14639 1B4F  
                                         l13847 27AD                                           l12799 22DC  
                                         l15447 12B9                                           l13785 13F1  
                                         l14497 15E5                                           l14665 1BEB  
                                         l13881 27D9                                           l13953 2D17  
                                         l13945 2CEF                                           l13937 2CBD  
                                         l15571 061C                                           l12995 1862  
                                         l14907 0E3B                                           l14763 0C71  
                                         l14747 0C45                                           l13875 27D8  
                                         l13955 2D1C                                           l13963 2D4E  
                                         l13891 209A                                           l15459 12C9  
                                         l12997 187A                                           l14941 0EA1  
                                         l14925 0E77                                           l14909 0E5B  
                                         l14781 0CBE                                           l14773 0C98  
                                         l14765 0C81                                           l14749 0C4C  
                                         l15565 2D27                                           l13949 2D09  
                                         l13893 20A8                                           l14871 0E0D  
                                         l14759 0C5B                                           l13959 2D21  
                                         l13895 20B4                                           l14793 0CCF  
                                         l14785 0CCE                                           l13897 20BF  
                                         l13889 208F                                           l14891 0E26  
                                         l14883 0E1A                                           l14795 0CEF  
                                         l14939 0C08                                           l13979 2B08  
                                         l13899 20CA                                           l14885 0CF8  
                                         l13989 2B48                                           l13997 2B72  
                                         l14887 0E20                                           l14879 0E13  
                                         l14799 0CF7                                           l14897 0E33  
                                         l14993 204E                                           l14987 2041  
                                         l14989 2045                                 __end_of___aldiv 0B5C  
                __size_of_flow_sampling_process 0040                                 __end_of___almod 377E  
          mfrc522_bal_read_fifo_len_ex@rx_align 0023                                           ?_main 0070  
           mfapi_is_new_card_present@bufferSize 005B                                 __end_of___awdiv 0F04  
                                         STR_10 2AB7                                           STR_11 2AB1  
                                         STR_12 2ABD                                           STR_13 2A82  
                                         STR_14 2A8B                                           STR_15 2AC9  
                                         STR_16 2A70                                   __CFG_WDTE$OFF 0000  
                               __end_of___awmod 2793                   __end_of_flow_sampling_process 0079  
                               __end_of___lbmod 274E                                 _TMR1_StartTimer 2C3A  
                               __end_of___lldiv 267A                                           u11015 1F4E  
                                         u11035 1F5C                                           u11045 1F63  
                                         u11065 378F                                           u11305 2769  
                               ___awdiv@divisor 0073                                           u11405 265B  
                                         u10445 0FE4                                           u10525 0ED4  
                                         u11325 2777                                           u11415 2667  
                                         u10455 0FEB                                           u11335 277E  
                                         u11440 22D6                                           _T1CON 0018  
                                         u10545 0EDD                                           u13113 1B41  
                                         u12145 2130                                           u10555 0EE7  
                                         u13123 1BBD                                           u11460 22A5  
                                         u11525 13EB                                           u10565 0EEF  
                                         u11375 263C                                           u10735 0B10  
                                         u11615 181F                                           u13055 16ED  
                                         u12175 2157                                           u13065 173B  
                                         u10905 0A79                                           u12185 2175  
                                         u11395 2647                                           u10755 0B1B  
                                         u13075 1765                                           u10595 2739  
                                         u10835 373A                                           u10684 2716  
                                         u10765 0B2F                                           u13245 0C6C  
                                         u13085 1A8A                                           u10685 2715  
                                         u13270 0CB0                                           u10694 2724  
                                         u14070 129C                                           u10775 0B3B  
                                         u13255 0C76                                           u10695 2723  
                                         u10855 3752                                           u13440 0DF1  
                                         u13280 0CB1                                           u10865 375D  
                                         u12625 2B33                                           u13450 0DF2  
                                         u13370 0D61                                           u12555 13F9  
                                         u13380 0D62                                           u12565 13FE  
                                         u12725 0699                                           u12645 051E  
                                         u13365 0D51                                           u11855 0639  
                                         u13464 0E00                                           _LCDRL 0795  
                                         u12905 008C                                           u13465 0DFF  
                                         u13395 0D7C                                           u12765 05A4  
                                         u12685 049B                                           u12875 020F  
                                         u12795 070E                                           u12885 033D  
                                         u13890 0887                      pcd_comm_with_picc@checkCRC 003A  
                               __end_of___lwdiv 1FA4                                           i1l161 001C  
                                         i1l163 0028                                           i1l167 0032  
                                         i1l159 0010                                 __end_of___lwmod 1F70  
                               ___awdiv@counter 0020                                           _TMR1H 0017  
                                         _TMR1L 0016  modbus_response_write_status_register@startAddr 003B  
                                         _PORTB 000D                                 ??_lcd_disp_code 0076  
                                         _TRISA 008C                                           _TRISB 008D  
                                         _TRISC 008E                                           _TRISD 008F  
                                         _TRISE 0090                                           _TRISF 030C  
                                         _TRISG 030D                         _pcd_comm_with_picc$3170 003F  
                             _adcSamplingBuffer 01A0                                     m_math_pow@x 0028  
                                   m_math_pow@y 002C               __size_of_TMR0_SetInterruptHandler 0006  
                           ___lmul@multiplicand 0024                       ?_TMR0_SetInterruptHandler 0073  
                                         _Event 00B6                            _EUSART1_Transmit_ISR 2006  
                                         ___q31 00BE                                           ___q15 00A8  
                                         ___t32 00A0                                           ___t16 0079  
                               __end_of_crc_sum 1455                                __end_of_TMR0_ISR 35C2  
                              __end_of_TMR1_ISR 35D3                                  ?_led_port_init 0070  
                              ?_ui_disp_str_dly 002F                                 _DATAEE_ReadByte 149F  
                                         _delay 1A19                                           _fl_t8 0129  
                                  ?_picc_halt_a 0070                                           _rdLen 00C7  
                                _WDT_Initialize 2BE8                     __size_of_pcd_comm_with_picc 0113  
                              _lcd_clear_buffer 1FB4                 mfrc522_hal_get_antenna_gain@ret 0023  
                                ?_m_mem_cpy_len 0073                         ?_ui_disp_set_balanceOff 0070  
                    __size_of_create_card_key_b 0025                                    ?_picc_select 004A  
                  ?_adc_mcp3241_read_convert_16 0022                         __end_of_TMR1_Initialize 2BE8  
                        ??_ui_key_process_enter 0036                                           ltemp0 007E  
                                         ltemp1 0082                                           ltemp2 0086  
                                         ltemp3 0080                       __end_of_rfid_comm_process 08B9  
                       __size_of_mfapi_pcd_init 000A                                           ttemp0 007E  
                                         ttemp1 0081                                           ttemp2 0084  
                                         ttemp3 0087                                           ttemp4 007F  
                            crc_verify@expected 0034                                           status 0003  
               __size_of_mfrc522_hal_antenna_on 0011                rfid_comm_process_read_header@ret 006D  
              rfid_comm_process_read_header@stp 006E                                           wtemp0 007E  
                                         wtemp1 0080                                           wtemp2 0082  
                                         wtemp3 0084                                           wtemp4 0086  
                                         wtemp5 0088                                           wtemp6 007F  
                __end_of_app_flow_rt_volume_cal 246B                                 ??_iic_send_byte 0077  
            __size_of_mfrc522_hal_calculate_crc 005F                    pcd_comm_with_picc@txLastBits 003D  
          __end_of_mfrc522_hal_get_antenna_gain 1E62           __size_of_mfrc522_hal_get_antenna_gain 000C  
                  _mfrc522_hal_get_antenna_gain 1E56                     ??_mfapi_is_new_card_present 0054  
                               _systemTickerSec 012C                                 ??_iic_waite_ack 0075  
                             ?_mfrc522_hal_init 0070                                 __initialization 11ED  
                    __end_of_my_uart1_send_poll 0651                       ??_mfrc522_bal_set_bit_reg 0023  
                    __end_of_EUSART1_Initialize 2C1E                                    __end_of_main 12D7  
                            ??_mfrc522_hal_init 0028                         __end_of_ui_key_waite_up 2035  
                 pcd_mifare_transceive@sendData 004A                           ?_mfrc522_hal_reset_sf 0070  
                          iic_received_byte@ret 0074                     ?_INTERRUPT_InterruptManager 0070  
           modbus_response_illgeal_function@buf 0038                        picc_select@useCascadeTag 00E0  
                                        ??_main 01C8                                  lcd_disp_dp@dec 0035  
            __size_of_data_api_system_data_init 0072                     modbus_response_process@rbuf 004D  
                       __size_of_FLASH_ReadWord 001A                     modbus_response_process@rlen 0048  
                   modbus_response_process@resp 004B                                  __CFG_PLLEN$OFF 0000  
                               ??_m_flash_erase 0076                                  _mainSystemData 3F00  
                         ?_EUSART1_Transmit_ISR 0070                          __end_of_WDT_Initialize 2BEC  
                                 ?_mifare_write 0069             __end_of_adc_mcp3241_read_convert_16 00AA  
                   _adc_mcp3241_read_convert_16 0079              modbus_response_write_flash_sys@buf 0046  
            modbus_response_write_flash_sys@len 0047                          _mainSystemData_absaddr 3F00  
                __end_of_ui_disp_set_balanceOff 232A                                          ?_delay 0073  
                      _data_api_system_data_get 17F1                       FLASH_WriteBlock@writeAddr 0020  
                                        _EEADRH 0192                                          _EEADRL 0191  
                                        _EEDATH 0194                                          _EEDATL 0193  
                                        _EECON2 0196                             pcd_comm_with_picc@i 0046  
                              ___awdiv@dividend 0075                                          _APFCON 011D  
                                        _ANSELA 018C                                          _ANSELE 0190  
                                        _ANSELF 040C                                          _ANSELG 040D  
                                        _T1GCON 0019                                          _LCDCON 0791  
                                        _LCDSE0 0798                                          _LCDSE1 0799  
                                        _LCDSE2 079A                                          _LCDSE3 079B  
                                        _LCDSE4 079C                                          _LCDSE5 079D  
                                        _LCDREF 0793                 __end_of_modbus_response_process 0489  
                                        _RC1REG 0199                                          _RC1STA 019D  
                       ??_mfrc522_bal_write_reg 0078                               ?_ui_disp_recharge 0070  
              ??_mfrc522_bal_write_read_via_spi 0073                 ?_mfrc522_bal_write_read_via_spi 0070  
                     __size_of_FLASH_EraseBlock 001D                                          _OSCCON 0099  
                  __size_of_timer0_irq_callback 0049                                          _TX1REG 019A  
                 ??_adc_mcp3241_read_convert_16 0024                                          _WDTCON 0097  
                                        _TX1STA 019E                                    m_mem_set@buf 0073  
                                  m_mem_set@len 0076                              ??_ui_disp_recharge 0078  
                      ??_app_flow_money_warning 0073                               ?_ui_disp_set_line 0070  
                        __size_of_key_scan_call 0023                                  __CFG_PWRTE$OFF 0000  
                            _ui_key_set_process 2E58               __end_of_mfrc522_hal_calculate_crc 1DB9  
                 ?_mfrc522_hal_get_antenna_gain 0070   __end_of_modbus_response_write_status_register 0740  
__size_of_modbus_response_write_status_register 0044         ??_modbus_response_write_status_register 0039  
        ?_modbus_response_write_status_register 0070           _modbus_response_write_status_register 06FC  
                            ??_ui_disp_set_line 0040    __end_of_data_api_calibration_table_data_init 13BD  
 __size_of_data_api_calibration_table_data_init 00DD          ??_data_api_calibration_table_data_init 0036  
         ?_data_api_calibration_table_data_init 0070            _data_api_calibration_table_data_init 12E0  
                        ui_disp_set_line@decnum 0046                    _TMR1_DefaultInterruptHandler 0000  
  __end_of_data_api_calibration_table_data_save 117B   __size_of_data_api_calibration_table_data_save 00DB  
        ??_data_api_calibration_table_data_save 0037           ?_data_api_calibration_table_data_save 0036  
          _data_api_calibration_table_data_save 10A0                                __end_of_hexTable 2A62  
                          __size_of_lcd_disp_dp 004A                                __end_of_lcd_init 2C41  
                          mifare_read@blockAddr 004F                                __end_of_iic_stop 015F  
                                        ___bmul 0F04                               ?_ui_disp_totale_v 0070  
                                        ___lmul 0FD3                         __end_of_TMR1_StartTimer 2C3D  
                                     ??___aldiv 0077                                       ??___almod 0073  
                                        ___wmul 13EE                                       ??___awdiv 0077  
                                __CFG_STVREN$ON 0000                                       ??___awmod 0077  
                                     ??___lbmod 0074                                          _fl_t16 0120  
                                        _fl_t32 00A4                                       ??___lldiv 0073  
                  __end_of_other_gpio_port_init 2C0F                                          _lcdBuf 015C  
                                     ??___lwdiv 0077                     ?_ui_disp_balance_and_volume 0070  
                                     ??___lwmod 0077                             ?_ui_key_set_process 0070  
                           _app_flow_adc_2_flow 01A0                           EUSART1_Receive_ISR@t8 0071  
       __end_of_modbus_response_read_flash_data 06FC        __size_of_modbus_response_read_flash_data 0075  
             ??_modbus_response_read_flash_data 0039                ?_modbus_response_read_flash_data 0070  
               _modbus_response_read_flash_data 0687                              ??_ui_disp_totale_v 0040  
                               _ui_uint32_2_str 0A36                          ??_data_api_read_eeprom 0020  
                                 m_flash_copy@i 0033                              _app_flow_money_off 03D0  
                              ?_TMR0_Initialize 0070                                          delay@t 0073  
                              ___awdiv@quotient 0022                                 ___awmod@divisor 0073  
                          __end_of_lcd_disp_all 1A42                            __end_of_lcd_disp_cln 0F9C  
                        _mfrc522_hal_antenna_on 1A42                                 ___awmod@counter 0020  
                          __end_of_lcd_disp_str 2000                          __end_of_mainSystemData 3F48  
                                     ??_crc_sum 0020                mfrc522_hal_set_antenna_gain@gain 0027  
                       __end_of_DATAEE_ReadByte 14AA                  pcd_mifare_transceive@cmdBuffer 0053  
                          _LCDDigitalIndexTable 2A00                         ??_ui_key_process_cancel 0040  
                         data_api_read_eeprom@i 0021                        __size_of_lcd_disp_code_0 001D  
                      __size_of_lcd_disp_code_1 001D                        __size_of_lcd_disp_code_2 001D  
                      __size_of_lcd_disp_code_3 001D                        __size_of_lcd_disp_code_4 001D  
                      __size_of_lcd_disp_code_5 001D                        __size_of_lcd_disp_code_6 001D  
                      __size_of_lcd_disp_code_7 001D           __end_of_rfid_comm_process_read_header 1778  
        __size_of_rfid_comm_process_read_header 022C                   _rfid_comm_process_read_header 154C  
                __size_of_data_api_write_eeprom 001C                         FLASH_ReadWord@flashAddr 0073  
                               _in_app_vavle_on 17FA                   mfrc522_bal_read_fifo_len_ex@i 0026  
                               ??_led_port_init 0073                                  ??_mifare_write 006B  
                 __end_of_data_api_write_eeprom 14C6                    __size_of_ui_key_process_down 0052  
        __end_of_ui_disp_set_transferMoneyLimit 23A2         __size_of_ui_disp_set_transferMoneyLimit 0016  
                _ui_disp_set_transferMoneyLimit 238C               __end_of_data_api_system_data_init 11ED  
                     _mfapi_is_new_card_present 0B8C                             ?_app_flow_money_off 0070  
                          __end_of_iic_send_ack 017B                                __end_of_valve_on 35F9  
                                  _cardWriteBuf 0432                                 ?_WDT_Initialize 0070  
                              picc_select@count 00E9                                picc_select@index 00EA  
             __size_of_iic_received_byte_if_ack 000D                       ?_iic_received_byte_if_ack 0070  
                               ??_m_mem_cpy_len 0020                         ?_ui_disp_set_line_reset 0070  
               __end_of_mfrc522_bal_set_bit_reg 1E00                           __end_of_ui_disp_hello 36C8  
                      data_api_write_eeprom@buf 0020                        data_api_write_eeprom@len 0023  
      TMR0_SetInterruptHandler@InterruptHandler 0073        TMR1_SetInterruptHandler@InterruptHandler 0073  
                          ??_ui_key_set_process 0040                            ?_app_flow_adc_2_flow 002D  
                   ??_mfrc522_bal_write_reg_len 0077        __end_of_modbus_response_illgeal_function 0687  
     __size_of_modbus_response_illgeal_function 0036               ?_modbus_response_illgeal_function 0036  
            ??_modbus_response_illgeal_function 0077                _modbus_response_illgeal_function 0651  
                              ?_TMR1_Initialize 0070                               _SYSTEM_Initialize 2B8C  
                               ___lbmod@divisor 0073                      __size_of_rfid_comm_process 00B8  
                            ui_disp_str_dly@dly 0031                                _lcd_disp_refresh 1E9D  
                          __end_of_m_flash_copy 1532                         __end_of__initialization 1242  
                            ui_disp_str_dly@str 002F                                 ___lbmod@counter 0021  
                     __size_of_in_app_vavle_off 0006                         _my_uart1_received_ready 12D7  
                            ?_SYSTEM_Initialize 0070                     pcd_comm_with_picc@validBits 0038  
                             lcd_disp_code@code 0076                            ??_app_flow_money_off 0074  
                  ??_ui_disp_set_balanceWarning 0078                             ___bmul@multiplicand 0024  
          modbus_response_write_flash_sys@pmdbs 0045                            create_card_key_b@uid 0073  
                              app_flow_lookup@i 0075                                  iic_send_byte@i 0021  
                                iic_send_byte@x 0020                                  __pcstackCOMMON 0070  
                                  __pidataBANK1 0000                                    __pidataBANK2 0000  
                                  __pidataBANK3 1802                          ??_mfrc522_hal_reset_sf 0022  
                           ??_SYSTEM_Initialize 0076                      mfrc522_bal_write_reg_len@i 0024  
                                     ?_TMR0_ISR 0070                                       ?_TMR1_ISR 0070  
                                 __end_of_delay 1A27                             ui_disp_set_line@flw 0042  
                              _DATAEE_WriteByte 35F9                                 _app_flow_lookup 034C  
                              ?_ui_key_waite_up 0020                         ??_ui_disp_clear_balance 0078  
                       ??_ui_disp_clear_card_id 0027                          __size_of_m_system_init 0011  
           modbus_response_write_flash_clib@buf 0046             modbus_response_write_flash_clib@len 0047  
                          __size_of_mifare_read 0048                          ??_EUSART1_Transmit_ISR 0070  
                                 _key_scan_call 21DF                                      _cardDecBuf 0456  
                         _data_api_rt_data_save 1001                    __end_of_ui_disp_clear_totale 22DC  
                                _OPTION_REGbits 0095                  __end_of_ui_disp_set_line_reset 2371  
                                    _cardIncBuf 0444                  pcd_mifare_transceive@validBits 0066  
                   __end_of_EUSART1_Receive_ISR 365B                     FLASH_WriteBlock@GIEBitValue 0028  
                            __size_of_iic_start 0016                                         ??_delay 0075  
                             crc_append@message 002B                        ?_mfrc522_bal_clr_bit_reg 0022  
                         ??_app_flow_adc_2_flow 002F                       __end_of_SYSTEM_Initialize 2B97  
                            __size_of_m_mem_set 0010             __size_of_ui_disp_set_balanceWarning 0035  
                               lcd_disp_dp@show 0032                                      __pbssBANK1 00A0  
                                    __pbssBANK2 0120                                      __pbssBANK3 01A0  
                                    __pbssBANK4 0220                            __size_of_picc_halt_a 0030  
               mfrc522_bal_write_read_via_spi@i 0076                 mfrc522_bal_write_read_via_spi@x 0074  
                                _mfapi_pcd_init 07F5                              create_card_key_b@i 0021  
                       __size_of_ui_key_process 0052                    __size_of_timer1_irq_callback 002E  
           __end_of_ui_disp_small_flow_how_care 23B4                     _ui_disp_small_flow_how_care 23A2  
                               __CFG_VCAPEN$OFF 0000                        _m_system_start_self_test 19C6  
                          __size_of_picc_select 02BE                 __size_of_app_flow_money_warning 002C  
                       __end_of_ui_uint32_2_str 0AE0                                      __pmaintext 1245  
                 mfrc522_hal_calculate_crc@data 0026                                 lcd_disp_str@loc 0025  
                                       ?___bmul 0024                               ?_ui_start_display 0070  
                               lcd_disp_str@str 0022                __end_of_TMR0_SetInterruptHandler 2C34  
                                       ?___lmul 0020                                         ?___wmul 0073  
               picc_req_a_or_wakeup_a@validBits 0053                                ?_TMR1_StartTimer 0070  
                                    ??_TMR0_ISR 0070                        __end_of_lcd_clear_buffer 1FBD  
                                    ??_TMR1_ISR 0070                       _mfrc522_bal_write_reg_len 1E00  
               mfrc522_hal_calculate_crc@length 0028                                 mfapi_pcd_init@v 002A  
                                    __pintentry 0004                         __end_of_in_app_vavle_on 1800  
                            ??_ui_start_display 0034                  ??_mfrc522_hal_get_antenna_gain 0022  
                             lcd_disp_str@index 0026                 mfrc522_hal_calculate_crc@result 0029  
                                ___lmul@product 0073                                      _crc_append 1455  
                     __size_of_FLASH_WriteBlock 0065                                  ?_key_scan_call 0070  
                              ?_DATAEE_ReadByte 0070                                  _FLASH_ReadWord 2ADA  
                                    _crc_verify 13BD                              __size_of_valve_off 0013  
                             _ui_disp_modbus_id 22DC                                         i1l10921 363D  
                                       i1l10927 3655                                      _flashOpStr 0147  
                                    _lcd_config 2C41                                         _SP1BRGH 019C  
                                       _SP1BRGL 019B                              ?_ui_disp_modbus_id 0070  
                                 ?_ui_head_hide 0073                                         _OSCTUNE 0098  
                                 _calibLocation 00B9           modbus_response_illgeal_function@pmdbs 0037  
                             _ui_disp_set_calib 2522                  ?_rfid_comm_process_read_header 0070  
                             ??_lcd_disp_code_0 0073                               ??_lcd_disp_code_1 0073  
                             ??_lcd_disp_code_2 0073                               ??_lcd_disp_code_3 0073  
                             ??_lcd_disp_code_4 0073                               ??_lcd_disp_code_5 0073  
                             ??_lcd_disp_code_6 0073                               ??_lcd_disp_code_7 0073  
                        __end_of_mfapi_pcd_init 07FF                                       ?_lcd_init 0070  
                                     ?_iic_stop 0070                               _ui_disp_set_price 2371  
                     ??_my_uart1_received_ready 0073                              ?_ui_disp_set_calib 0070  
                          _other_gpio_port_init 2C05                                   m_math_pow@ret 002D  
                             __end_of_auchCRCHi 2900                               __end_of_auchCRCLo 2A00  
                           ??_ui_disp_modbus_id 002F                                _FLASH_EraseBlock 37E3  
                                    _m_math_pow 0F9C                                   _m_system_init 2B7B  
                          DATAEE_WriteByte@bAdd 0074                              ?_ui_disp_set_price 0070  
                  ??_rfid_comm_process_read_dec 0060                    ??_rfid_comm_process_read_inc 0060  
                                 ?_ui_disp_flow 0070                                   ?_ui_disp_menu 0070  
                  ??_rfid_comm_process_recharge 00CC                                    _deviceStatus 00BA  
         data_api_calibration_table_data_init@i 003F           data_api_calibration_table_data_save@i 003C  
                                       _PiccUid 01B0                         __end_of_app_flow_lookup 03D0  
                           ??_ui_disp_set_calib 0040                         picc_select@cascadeLevel 00E1  
                        pcd_comm_with_picc@rbuf 0035                          pcd_comm_with_picc@tmp8 0049  
                        pcd_comm_with_picc@sbuf 0032                            __end_of_mifare_write 1CEF  
                        pcd_comm_with_picc@rlen 0037                          pcd_comm_with_picc@slen 0034  
                 __size_of_mfrc522_bal_read_reg 0016           __end_of_app_flow_rt_balance_money_cal 07D0  
        __size_of_app_flow_rt_balance_money_cal 0090                   _app_flow_rt_balance_money_cal 0740  
                           ??_ui_disp_set_price 0078                           _pcd_mifare_transceive 1CEF  
                                     ?_valve_on 0070                           __size_of_lcd_disp_all 001B  
                         __size_of_lcd_disp_cln 0015                               _picc_stop_cryptol 0F15  
                         __size_of_lcd_disp_str 0043                                         ___aldiv 0AE0  
                             __end_of_iic_start 0122                                 __size_of___bmul 0011  
             _Main_flowCalibrationTable_absaddr 3F80                                         ___almod 3711  
                             _ui_disp_str_num_s 1EAC                                         ___awdiv 0EB4  
                         picc_select@bufferUsed 00D0                                 __size_of___lmul 002D  
                                       ___awmod 274E                                         ___lbmod 2730  
                             m_flash_erase@addr 0020                                         ___lldiv 262C  
                               __size_of___wmul 001E                                         ___lwdiv 1F70  
                       mfrc522_bal_read_reg@reg 0020                                         ___lwmod 1F44  
                                       _pLcdReg 016D                              ?_picc_stop_cryptol 0070  
                             __end_of_m_mem_set 1FB4               __p_Main_flowCalibrationTable_text 3F80  
                          __end_of_TablerxAlign 2A6A                              ?_ui_disp_str_num_s 0029  
                                    _piccResult 00BB                          __end_of_FLASH_ReadWord 2AF4  
                         __size_of_iic_send_ack 001C                       __end_of_ui_disp_modbus_id 22EE  
                           _timer0_irq_callback 36C8                      ??_data_api_system_data_get 0073  
                             _noKeyEventTimeOut 00EF                                         __ptext1 368D  
                                       __ptext2 191B                                         __ptext3 3698  
                                       __ptext4 2035                                         __ptext5 2E58  
                                       __ptext6 2087                                         __ptext7 27E5  
                                       __ptext8 211B                                         __ptext9 221A  
                        ?_data_api_rt_data_save 0070                                         _crc_sum 140C  
                      __size_of_lcd_set_com_seg 006C                                       _T1CONbits 0018  
                        _app_flow_money_warning 03FD                             lcd_set_com_seg@addr 002E  
                         _OSCILLATOR_Initialize 2B97        modbus_response_write_status_register@buf 003E  
      modbus_response_write_status_register@len 003D                             lcd_set_com_seg@bloc 0031  
          __end_of_adc_mcp3241_start_convert_16 00DF           __size_of_adc_mcp3241_start_convert_16 0028  
                  _adc_mcp3241_start_convert_16 00B7                              _my_uart1_send_poll 062A  
                           ??_picc_stop_cryptol 0026                                lcd_set_com_seg@p 0030  
                           lcd_set_com_seg@show 0029                                ___awmod@dividend 0075  
                     __end_of_ui_disp_set_calib 2590               __size_of_TMR1_SetInterruptHandler 0006  
                         _flow_sampling_process 0039                      __end_of_pcd_comm_with_picc 191B  
                     __size_of_mfrc522_hal_init 0064                             ??_ui_disp_str_num_s 002D  
                              ___aldiv@dividend 002C                              _EUSART1_Initialize 2C0F  
                                     _LCDPSbits 0792                        ??_PIN_MANAGER_Initialize 0073  
                     ?_TMR1_SetInterruptHandler 0073                                  ??_ui_head_hide 0074  
           __size_of_rfid_comm_process_read_dec 0036             __size_of_rfid_comm_process_read_inc 0036  
                         __end_of_lcd_disp_code 2D70                       __end_of_ui_disp_set_price 238C  
           __size_of_rfid_comm_process_recharge 0208                           mifare_read@bufferSize 004B  
                         __size_of_m_flash_copy 006C                        ??_data_api_flash_process 0040  
                                   ui_mem_cpy@d 0077                                     ui_mem_cpy@s 0073  
       __end_of_modbus_response_write_flash_sys 0592        __size_of_modbus_response_write_flash_sys 0086  
             ??_modbus_response_write_flash_sys 0041                ?_modbus_response_write_flash_sys 0070  
               _modbus_response_write_flash_sys 050C                      __size_of_SYSTEM_Initialize 000B  
                                       clrloop0 35A6                                      ??_lcd_init 0077  
                               ?_mfapi_pcd_init 0070                                      ??_iic_stop 0075  
                           ?_my_uart1_send_poll 0073                           ?_other_gpio_port_init 0070  
                          end_of_initialization 1242                             set_globle_ticker@tk 0073  
                                ?_m_system_init 0070                             ?_EUSART1_Initialize 0070  
                                ??_ui_disp_flow 0040                                  ??_ui_disp_menu 0047  
                          ?_timer0_irq_callback 0070              __size_of_mfapi_is_new_card_present 0027  
                                  _lcd_disp_all 1A27                                    _lcd_disp_cln 0F87  
                __size_of_mfrc522_bal_write_reg 000F                                _in_app_vavle_off 0429  
                                  _lcd_disp_str 1FBD                   __end_of_mfrc522_bal_write_reg 19C6  
                 __size_of_ui_key_process_enter 00F2                        __size_of_ui_disp_str_dly 0038  
            __end_of_ui_disp_set_balanceWarning 235F                      _ui_disp_set_balanceWarning 232A  
                             __end_of_valve_off 35E6                             _ui_key_process_down 2793  
                               ___lldiv@divisor 0020                           __end_of_iic_send_byte 010C  
                     __end_of_picc_stop_cryptol 0F1B                            _ui_disp_clear_totale 22CB  
                             picc_select@buffer 00D6                                 ___lldiv@counter 002C  
                              ?_ui_uint32_2_str 0036                       __end_of_ui_disp_str_num_s 1F44  
                               ui_head_hide@loc 0073                                    _iic_send_ack 015F  
                               ui_head_hide@str 0075                                      _ui_mem_cpy 3615  
                      ?_modbus_response_process 0048                          mfrc522_bal_write_reg@x 0077  
                      ??_ui_key_process_up_down 0059                                      ??_valve_on 0073  
                             picc_select@result 00E8                                ___aldiv@quotient 0032  
                         __end_of_iic_waite_ack 01A0                         ?_mfrc522_hal_antenna_on 0070  
                                    _valveTimer 00BD                            ??_my_uart1_send_poll 0075  
                                  __pstringtext 2800                 __end_of_my_uart1_received_ready 12E0  
                     FLASH_ReadWord@GIEBitValue 0075                       __size_of_ui_disp_recharge 0007  
                                    _rtVolume_L 00B2                            ??_EUSART1_Initialize 0073  
                              ?_in_app_vavle_on 0070                                 ??_key_scan_call 0075  
                                    _valve_stop 3689                        picc_authenticate@command 005D  
                                   ?_crc_append 002B                              _uart1ReceivedCount 0126  
                               ?_FLASH_ReadWord 0073                              _uart1ReceivedTimer 012D  
                              ??_WDT_Initialize 0073                        __end_of_lcd_disp_refresh 1EAC  
                      _TMR0_SetInterruptHandler 2C2E                                       _PORTAbits 000C  
                                     _PORTBbits 000D                                       _PORTCbits 000E  
                                  _m_flash_copy 14C6                                       _PORTDbits 000F  
                     __size_of_ui_disp_set_line 009C                                     ?_crc_verify 002B  
                      picc_authenticate@waitIRQ 005E                           picc_select@selectDone 00CF  
                          ?_ui_key_process_down 0070                  __size_of_ui_key_process_cancel 0087  
                                    crc_sum@len 0025                                     ?_lcd_config 0070  
                              ___lbmod@dividend 0020                   __end_of_ui_key_process_cancel 2B7B  
                          rfid_comm_process@ret 01C7                                       _TRISAbits 008C  
              rfid_comm_process_recharge@stpDec 006F                                       _TRISBbits 008D  
                                     _TRISCbits 008E                                       _TRISDbits 008F  
              rfid_comm_process_recharge@stpInc 006E                            ui_disp_set_calib@loc 0043  
                                     _TRISFbits 030C                       __size_of_ui_disp_totale_v 0065  
                         __end_of_m_flash_erase 154C                      mfrc522_bal_set_bit_reg@reg 0025  
                    mfrc522_bal_set_bit_reg@tmp 0024                     iic_received_byte_if_ack@ack 0020  
                   iic_received_byte_if_ack@ret 0021                        __end_of_DATAEE_WriteByte 3615  
                         ??_timer0_irq_callback 0073              modbus_response_read_flash_data@buf 003E  
            modbus_response_read_flash_data@len 003F                                  _ui_key_process 2035  
                                     _CardError 0128                                     ?_m_math_pow 0028  
      modbus_response_write_flash_sys@startAddr 0043                                     ___lbmod@rem 0022  
                      ??_picc_req_a_or_wakeup_a 004C                           picc_select@txLastBits 00E7  
                               iic_send_ack@ack 0073                             __end_of_defaultKeyA 2A70  
                    mfrc522_hal_calculate_crc@i 002F                                   ??_lcd_disp_dp 0033  
             __end_of_mfapi_is_new_card_present 0BB3                        ?_mfrc522_bal_set_bit_reg 0022  
                         ?_ui_disp_clear_totale 0070                               mifare_read@buffer 004A  
                              ?_app_flow_lookup 0073                               FLASH_WriteBlock@i 0029  
                        ?_pcd_mifare_transceive 004A                           create_card_key_b@keyb 0020  
                __end_of_mfrc522_hal_antenna_on 1A53                               mifare_read@result 0050  
                                 _systemTikerms 01AC                              iic_received_byte@i 0075  
                    ?_mfrc522_hal_calculate_crc 0026                                  __end_of___bmul 0F15  
                  ?_ui_key_process_up_down_main 0070                                  __end_of___lmul 1000  
                                __end_of___wmul 140C                     picc_req_a_or_wakeup_a@__cmd 0051  
                                    m_mem_set@x 0075                  ?_app_flow_rt_balance_money_cal 0070  
          __end_of_mfrc522_bal_read_fifo_len_ex 1E9D           __size_of_mfrc522_bal_read_fifo_len_ex 003B  
                  _mfrc522_bal_read_fifo_len_ex 1E62                      __size_of_ui_disp_modbus_id 0012  
                             __size_of_TMR0_ISR 0011                               __size_of_TMR1_ISR 0011  
                              _adcSamplingTimer 00AC                                _FLASH_WriteBlock 377E  
                           _timer1_irq_callback 365B                          ?_OSCILLATOR_Initialize 0070  
                __size_of_ui_disp_clear_balance 0013                   __size_of_data_api_read_eeprom 001A  
                 __end_of_ui_disp_clear_balance 22AC                  __size_of_ui_disp_clear_card_id 001F  
                         ??_ui_key_process_down 0077                   __end_of_ui_disp_clear_card_id 22CB  
                        ?_flow_sampling_process 0070                   adc_mcp3241_start_convert_16@b 0024  
                 adc_mcp3241_start_convert_16@g 0022                          data_api_write_eeprom@i 0077  
                             crc_verify@message 002B              __size_of_mfrc522_bal_write_reg_len 0023  
                    __size_of_ui_disp_set_calib 006E                             start_initialization 11ED  
                     picc_authenticate@sendData 0051                        __size_of_TMR0_Initialize 0010  
                    ??_m_system_start_self_test 0077                 __size_of_PIN_MANAGER_Initialize 0033  
                         __end_of_led_port_init 2C05                      ?_data_api_system_data_init 0070  
                    __size_of_ui_disp_set_price 001B                           _data_api_write_eeprom 14AA  
                               _LCDDigitalTable 2A29                          ??_other_gpio_port_init 0073  
                               ??_m_system_init 0077                        ??_app_flow_rt_volume_cal 0078  
                  pcd_mifare_transceive@sendLen 004C                 __size_of_data_api_flash_process 0016  
                        __end_of_ui_key_process 2087                               ??_lcd_set_com_seg 002A  
                  pcd_mifare_transceive@waitIRq 0065                           __end_of_m_mem_cpy_len 1793  
                   __size_of_ui_key_set_process 01A8              __end_of_rfid_comm_process_read_dec 0F51  
                    _rfid_comm_process_read_dec 0F1B                    data_api_system_data_init@sta 0037  
            __end_of_rfid_comm_process_read_inc 0F87                      _rfid_comm_process_read_inc 0F51  
            __end_of_rfid_comm_process_recharge 1C5B                      _rfid_comm_process_recharge 1A53  
              picc_req_a_or_wakeup_a@bufferATQA 004A                           __size_of_mifare_write 003B  
                          ?_timer1_irq_callback 0070                             __size_of_crc_append 0030  
              picc_req_a_or_wakeup_a@bufferSize 004B                             DATAEE_ReadByte@bAdd 0073  
                      pcd_comm_with_picc@status 0045                             __size_of_crc_verify 0031  
                    __size_of_picc_stop_cryptol 0006                     __size_of_app_flow_money_off 002D  
            pcd_mifare_transceive@acceptTimeout 004D                      __size_of_ui_disp_str_num_s 0098  
              __size_of_mfrc522_bal_clr_bit_reg 0010                        __size_of_TMR1_Initialize 0019  
                                   ?_ui_mem_cpy 0073                             __size_of_lcd_config 0021  
                          __end_of_ui_head_hide 0A36                           mfrc522_bal_read_reg@x 0021  
                                      ??___bmul 0025                                        ??___lmul 0073  
               __size_of_ui_key_process_up_down 0094                                        ??___wmul 0077  
                             ??_ui_disp_str_dly 0032                           m_flash_copy@startAddr 0031  
                           __end_of_lcd_disp_dp 26C4                          __size_of_ui_disp_hello 0030  
                             ?_lcd_clear_buffer 0070                                     __pdataBANK1 00EF  
                                   __pdataBANK2 016D                                     __pdataBANK3 01BC  
                                 ??_mifare_read 004C                                     ?_valve_stop 0070  
                 __size_of_mfrc522_hal_reset_sf 000E                     FLASH_EraseBlock@GIEBitValue 0075  
              __end_of_data_api_system_data_get 17FA                              mifare_write@buffer 0069  
                      __end_of_FLASH_EraseBlock 3800                                 _lcd_disp_code_0 2D70  
                               _lcd_disp_code_1 2D8D                                 _lcd_disp_code_2 2DAA  
                               _lcd_disp_code_3 2DC7                   ??_ui_key_process_up_down_main 0073  
                               _lcd_disp_code_4 2DE4                                 _lcd_disp_code_5 2E01  
                               _lcd_disp_code_6 2E1E                                 _lcd_disp_code_7 2E3B  
                            ??_lcd_clear_buffer 0077                            __end_of_ui_disp_flow 24BD  
                          __end_of_ui_disp_menu 2299                             __size_of_m_math_pow 0037  
                      ??_ui_disp_set_balanceOff 0078                   ?_mfrc522_bal_read_fifo_len_ex 0020  
                      _iic_received_byte_if_ack 00AA                              mifare_write@result 00CB  
                      app_flow_adc_2_flow@index 003D            __end_of_mfrc522_hal_set_antenna_gain 1E46  
         __size_of_mfrc522_hal_set_antenna_gain 0015                    _mfrc522_hal_set_antenna_gain 1E31  
                   __end_of_app_flow_adc_2_flow 034C                                     __pbssBIGRAM 2370  
                               _cardUidBlockBuf 0420                                     __pbssCOMMON 0078  
                              _mfrc522_hal_init 1953                                lcd_disp_cln@show 0034  
              mfrc522_bal_write_read_via_spi@rb 0075                                lcd_disp_code@loc 0075  
                                     ___latbits 0003                        __size_of_ui_key_waite_up 002C  
                 __size_of_EUSART1_Transmit_ISR 0003                                   __pcstackBANK0 0020  
                                 __pcstackBANK1 00C8                                   __pcstackBANK3 01C7  
                                  _mifare_write 1CB4                       __size_of_ui_start_display 000B  
             __end_of_mfrc522_bal_write_reg_len 1E23                                     _defaultKeyA 2A6A  
                                 ??_picc_halt_a 004A                                 ?_ui_key_process 0070  
                                 ??_picc_select 004B                               _get_globle_ticker 2202  
                             _set_globle_ticker 2210            modbus_response_read_flash_data@pmdbs 003D  
                                  _TablerxAlign 2A62                           ??_timer1_irq_callback 0073  
                  __size_of_EUSART1_Receive_ISR 0024                               __size_of_lcd_init 0004  
                             __size_of_iic_stop 0015                               picc_halt_a@buffer 004D  
                            ?_get_globle_ticker 0073                 __size_of_picc_req_a_or_wakeup_a 0043  
                            ?_set_globle_ticker 0073                          app_flow_adc_2_flow@ad1 003B  
                        app_flow_adc_2_flow@ad2 0039                          ??_ui_disp_clear_totale 0078  
                        app_flow_adc_2_flow@fl1 0037                          app_flow_adc_2_flow@fl2 0035  
       modbus_response_illgeal_function@errcode 0036                         picc_select@collisionPos 00DF  
                         _TMR0_InterruptHandler 01C2                                       __pnvBANK1 00ED  
                                     __pnvBANK3 01C2                               picc_halt_a@result 0051  
                                     _auchCRCHi 2800                                       _auchCRCLo 2900  
                                _rtBalanceMoney 00C2                                ___lwdiv@dividend 0024  
                        _PIN_MANAGER_Initialize 2B9C               __end_of_Main_flowCalibrationTable 3FFC  
                                     _comBuffer 2370                             ??_get_globle_ticker 0075  
                           ??_set_globle_ticker 0075                          _data_api_flash_process 1793  
              __end_of_TMR1_SetInterruptHandler 2C3A                      picc_authenticate@blockAddr 004A  
                                      ?___aldiv 0028                                        ?___almod 0020  
                                      ?___awdiv 0073                                       __ptext100 1A42  
                                     __ptext101 19B7                                       __ptext110 1A27  
                                     __ptext102 1DB9                                       __ptext111 2B8C  
                                     __ptext103 1DCF                                       __ptext120 2C0F  
                                     __ptext112 2BE8                                       __ptext104 19C6  
                                     __ptext121 17FA                                       __ptext113 2BCF  
                                     __ptext105 2B7B                                       __ptext130 0429  
                                     __ptext122 35E6                                       __ptext114 2C3A  
                                     __ptext106 2C05                                       __ptext131 35D3  
                                     __ptext123 0039                                       __ptext115 2C34  
                                     __ptext107 2BEC                                       __ptext140 00DF  
                                     __ptext132 034C                                       __ptext124 23B4  
                                     __ptext116 2C1E                                       __ptext108 2C3D  
                                     __ptext141 017B                                       __ptext133 01A0  
                                     __ptext125 1F44                                       __ptext117 2C2E  
                                     __ptext109 2C41                                       __ptext150 1532  
                                     __ptext142 014A                                       __ptext134 1F70  
                                     __ptext126 0740                                       __ptext118 2B9C  
                                     __ptext151 14C6                                       __ptext143 1A19  
                                     __ptext135 0FD3                                       __ptext127 0AE0  
                                     __ptext119 2B97                                       __ptext160 1778  
                                     __ptext152 377E                                       __ptext144 00AA  
                                     __ptext136 262C                                       __ptext128 03FD  
                                     __ptext161 1455                                       __ptext153 37E3  
                                     __ptext145 015F                                       __ptext137 00B7  
                                     __ptext129 03D0                                       __ptext162 140C  
                                     __ptext154 2ADA                                       __ptext146 0122  
                                     __ptext138 0079                                       __ptext163 13EE  
                                     __ptext155 14AA                                       __ptext147 117B  
                                     __ptext139 010C                                       __ptext156 35F9  
                                     __ptext148 17F1                                       __ptext165 35C2  
                                     __ptext157 1485                                       __ptext149 12E0  
                                     __ptext166 35B1                                       __ptext158 149F  
                                     __ptext167 2006                                       __ptext159 13BD  
                                     __ptext168 3637                                        ?___awmod 0073  
                                      ?___lbmod 0073                         ??_data_api_rt_data_save 0036  
                                      ?___lldiv 0020                   ui_key_process_up_down_main@up 0074  
                                      ?___lwdiv 0022                                        ?___lwmod 0073  
                              _ui_disp_recharge 22EE                               __size_of_valve_on 0013  
                       ?_app_flow_money_warning 0070                    mfrc522_bal_write_reg_len@buf 0020  
                  mfrc522_bal_write_reg_len@len 0022                    mfrc522_bal_write_reg_len@reg 0023  
                  ??_INTERRUPT_InterruptManager 0072                                ___almod@dividend 0024  
                                     _iic_start 010C                                       __pswtext1 3000  
                                     __pswtext2 3010                                        ?_crc_sum 0073  
                              _ui_disp_set_line 2590                        __end_of_in_app_vavle_off 042F  
                       __end_of_LCDDigitalTable 2A51                                        _BAUD1CON 019F  
                                     _m_mem_set 1FA4                        __size_of_TMR1_StartTimer 0003  
                              ??_mfapi_pcd_init 0029                    __end_of_mfrc522_bal_read_reg 1DCF  
                           __end_of_mifare_read 17F1                          ?_data_api_write_eeprom 0020  
                         pcd_comm_with_picc@cmd 0041                   ?_mfrc522_hal_set_antenna_gain 0070  
                              _ui_disp_totale_v 24BD                    picc_req_a_or_wakeup_a@status 0052  
              picc_select@currentLevelKnownBits 00EB                          _ui_key_process_up_down 2087  
                              m_flash_copy@addr 002A                       __end_of_get_globle_ticker 2210  
                     __end_of_set_globle_ticker 221A                                m_flash_erase@len 0022  
                              ___lwdiv@quotient 0026                                  __size_of_delay 000E  
                           __size_of_ui_mem_cpy 0022      modbus_response_write_status_register@pmdbs 003F  
                                      _LCDDATA0 07A0                                m_flash_copy@wlen 0030  
                adc_mcp3241_start_convert_16@t8 0025                 __size_of_app_flow_rt_volume_cal 00B7  
                                 _ui_disp_hello 3698                        __size_of_DATAEE_ReadByte 000B  
       key_process_up_down_variable_speed_ex@up 004D            __size_of_ui_key_process_up_down_main 001B  
                            lcd_set_com_seg@com 002F                  FLASH_WriteBlock@blockStartAddr 0026  
                                   _flashBuffer 0220                              lcd_set_com_seg@seg 0028  
                               ___aldiv@divisor 0028                             __size_of_valve_stop 0004  
                             ??_TMR0_Initialize 0075                 mfapi_is_new_card_present@result 005A  
                               ___aldiv@counter 0030                                  ___wmul@product 0020  
                                      _LATAbits 010C                                        _LATBbits 010D  
                                      _LATCbits 010E                             __end_of_picc_halt_a 0B8C  
                                      _LATDbits 010F                                        _LATFbits 038C  
                            _pcd_comm_with_picc 1808                               _iic_received_byte 0122  
                                     clear_ram0 35A5                                  m_mem_cpy_len@d 0073  
                                m_mem_cpy_len@s 0075                                        _PIE1bits 0091  
                                   _lcd_disp_dp 267A                     ?_ui_disp_set_balanceWarning 0070  
                           __end_of_picc_select 0EB4             __size_of_INTERRUPT_InterruptManager 0033  
                    ??_TMR0_SetInterruptHandler 0075                              ?_iic_received_byte 0070  
                                      _PIR1bits 0011                       FLASH_EraseBlock@startAddr 0073  
                              ??_FLASH_ReadWord 0075                         __end_of_lcd_disp_code_0 2D8D  
                       __end_of_lcd_disp_code_1 2DAA                         __end_of_lcd_disp_code_2 2DC7  
                       __end_of_lcd_disp_code_3 2DE4                         __end_of_lcd_disp_code_4 2E01  
                       __end_of_lcd_disp_code_5 2E1E                         __end_of_lcd_disp_code_6 2E3B  
                       __end_of_lcd_disp_code_7 2E58                                crc_sum@usDataLen 0075  
                           ?_pcd_comm_with_picc 0031                                       _valve_off 35D3  
                __end_of_app_flow_money_warning 0429                        ui_key_process_up_down@up 005A  
                                      _TMR0_ISR 35B1                                        _TMR1_ISR 35C2  
       data_api_calibration_table_data_init@sta 003C         data_api_calibration_table_data_init@stp 003D  
                               ui_disp_flow@flw 0042                                    ??_crc_append 002F  
                  ??_ui_disp_balance_and_volume 0040                        ??_ui_disp_set_line_reset 0078  
                                 _findCardTimer 01A8                             ??_iic_received_byte 0073  
                          picc_select@validBits 004A                          _picc_req_a_or_wakeup_a 0BB3  
       data_api_calibration_table_data_save@loc 003F                                   ui_mem_cpy@len 0076  
                  __end_of_ui_key_process_enter 2D54                               ??_TMR1_Initialize 0075  
       data_api_calibration_table_data_save@stp 003D                                      ?_iic_start 0070  
                             ___wmul@multiplier 0073                               ?_lcd_disp_refresh 0070  
                                  ??_crc_verify 002F                 __size_of_ui_disp_set_balanceOff 0035  
                                    ?_m_mem_set 0073                       picc_select@valueOfCollReg 00D5  
                                  ??_lcd_config 0077                __size_of_modbus_response_process 005A  
                            ??_lcd_disp_refresh 0021                __end_of_m_system_start_self_test 1A19  
                      ?_my_uart1_received_ready 0070                           DATAEE_WriteByte@bData 0073  
                     pcd_comm_with_picc@rxAlign 0039                       pcd_comm_with_picc@waitIRQ 0031  
                ??_mfrc522_bal_read_fifo_len_ex 0077                            ??_pcd_comm_with_picc 003B  
                                ?_ui_disp_hello 0070                               ___lmul@multiplier 0020  
                              crc_verify@crccal 0032                        data_api_read_eeprom@addr 0076  
                             ?_DATAEE_WriteByte 0073                                    ??_m_math_pow 0077  
                                      _KeyValue 00B7               __size_of_data_api_system_data_get 0009  
                             ??_ui_key_waite_up 0077                       __end_of_iic_received_byte 014A  
                     ?_data_api_system_data_get 0070                         ??_pcd_mifare_transceive 004E  
                      data_api_rt_data_save@stp 003A                        __end_of_FLASH_WriteBlock 37E3  
                         __size_of_ui_head_hide 0018                              ??_DATAEE_WriteByte 0074  
                                _bkupSystemData 3E80                              __end_of_crc_append 1485  
                                    _EECON1bits 0195             __size_of_ui_disp_balance_and_volume 0165  
                       _mfrc522_bal_clr_bit_reg 1E46                           _mfrc522_bal_write_reg 19B7  
                            __end_of_crc_verify 13EE              pcd_mifare_transceive@cmdBufferSize 0067  
                            __end_of_lcd_config 2C62                     ??_mfrc522_hal_calculate_crc 002B  
                         __size_of_ui_disp_flow 0052                          _app_flow_rt_volume_cal 23B4  
                                    ?_valve_off 0070                           __size_of_ui_disp_menu 007F  
                        __size_of_lcd_disp_code 001C                         ??_OSCILLATOR_Initialize 0073  
                              __size_of___aldiv 007C                     __size_of_my_uart1_send_poll 0027  
                              __size_of___almod 006D                                __size_of___awdiv 0050  
                              __size_of___awmod 0045                                __size_of___lbmod 001E  
                              __size_of___lldiv 004E                         ??_flow_sampling_process 003E  
                   __size_of_EUSART1_Initialize 000F                                     _mifare_read 17A9  
                              __size_of___lwdiv 0034                                __size_of___lwmod 002C  
     modbus_response_write_flash_clib@startAddr 0043                                 _lcd_set_com_seg 26C4  
                      __size_of_ui_uint32_2_str 00AA                        _TMR1_SetInterruptHandler 2C34  
                         __end_of_key_scan_call 2202                __size_of_mfrc522_bal_set_bit_reg 0010  
                            m_flash_copy@offset 002F                                      _ANSELAbits 018C  
                                    _ANSELFbits 040C                              __end_of_m_math_pow 0FD3  
                                      _adcvalue 00AE                           _TMR1_InterruptHandler 01C4  
                              __size_of_crc_sum 0049                          __p_mainSystemData_text 3F00  
                                 crc_append@crc 0034                          ui_disp_totale_v@decnum 0042  
                   __end_of_timer0_irq_callback 3711                        __size_of_in_app_vavle_on 0006  
                              _ui_start_display 368D                          __size_of_iic_send_byte 002D  
                        _bkupSystemData_absaddr 3E80                                 ___lwdiv@divisor 0022  
                               ___lwdiv@counter 0028                     ??_data_api_system_data_init 0036  
                    __size_of_get_globle_ticker 000E                                    _ui_head_hide 0A1E  
                    __size_of_set_globle_ticker 000A                                        __ptext10 23A2  
                                      __ptext11 238C                                        __ptext20 22DC  
                                      __ptext12 2371                                        __ptext21 1EAC  
                                      __ptext13 235F                                      _T1GCONbits 0019  
                                      __ptext30 2210                                        __ptext22 3615  
                                      __ptext14 2590                                        __ptext31 21DF  
                                      __ptext23 246B                                        __ptext15 2522  
                                      __ptext40 0A36                                        __ptext32 2202  
                                      __ptext24 22CB                                        __ptext16 274E  
                                      __ptext41 0F9C                                        __ptext33 2793  
                                      __ptext25 24BD                                        __ptext17 232A  
                                      __ptext50 2DE4                                        __ptext42 3711  
                                      __ptext34 2AF4                                        __ptext26 22AC  
                                      __ptext18 22F5                                        __ptext51 2DC7  
                                      __ptext43 0A1E                                        __ptext35 365B  
                                      __ptext27 2299                                        __ptext19 22EE  
                                      __ptext60 1A53                                        __ptext52 2DAA  
                                      __ptext44 1FBD                                        __ptext36 3689  
                                      __ptext28 2C62                                        __ptext61 0F51  
                                      __ptext53 2D8D                                        __ptext45 1E9D  
                                      __ptext37 36C8                                        __ptext29 2009  
                                      __ptext70 0BF6                                        __ptext62 154C  
                                      __ptext54 2D70                                        __ptext46 2D54  
                                      __ptext38 0801                                        __ptext71 0F04  
                                      __ptext63 1CB4                                        __ptext55 267A  
                                      __ptext47 2E3B                                        __ptext39 08B9  
                                      __ptext80 1FA4                                        __ptext72 0EB4  
                                      __ptext64 1CEF                                        __ptext56 0F87  
                                      __ptext48 2E1E                                        __ptext81 12D7  
                                      __ptext73 0B5C                                        __ptext65 07D0  
                                      __ptext57 26C4                                        __ptext49 2E01  
                                      __ptext90 0687                                        __ptext82 042F  
                                      __ptext74 0B8C                                        __ptext66 0F1B  
                                      __ptext58 2730                                        __ptext91 0651  
                                      __ptext83 06FC                                        __ptext75 0BB3  
                                      __ptext67 1C5B                                        __ptext59 1FB4  
                                      __ptext92 062A                                        __ptext84 050C  
                                      __ptext76 1808                                        __ptext68 17A9  
                                      __ptext93 07F5                                        __ptext85 0489  
                                      __ptext77 1D5A                                        __ptext69 0F15  
                                      __ptext94 1953                                        __ptext86 1793  
                                      __ptext78 1E00                                        __ptext95 1E31  
                                      __ptext87 1001                                        __ptext79 1E62  
                                      __ptext96 1E56                                        __ptext88 10A0  
                             _picc_authenticate 1C5B                                        __ptext97 1DF0  
                                      __ptext89 0592                                        __ptext98 1E46  
                                      __ptext99 1E23                                        _bkupMenu 00B8  
                                   _picc_halt_a 0B5C                           _ui_key_process_cancel 2AF4  
                                      _hexTable 2A51                                        _lcd_init 2C3D  
                     picc_req_a_or_wakeup_a@cmd 0050                 ??_app_flow_rt_balance_money_cal 0036  
                                      _iic_stop 014A                                 ___almod@divisor 0020  
                             ??_TMR1_StartTimer 0073                          __size_of_iic_waite_ack 0025  
                                   _picc_select 0BF6                  ??_mfrc522_hal_set_antenna_gain 0026  
                            ?_picc_authenticate 004A                                 ___almod@counter 0074  
                   DATAEE_WriteByte@GIEBitValue 0075                          __end_of_bkupSystemData 3EC8  
                        mifare_write@bufferSize 006A                     ?_rfid_comm_process_read_dec 0070  
                   ?_rfid_comm_process_read_inc 0070                                        _uiAdjbuf 0165  
                  __end_of_data_api_read_eeprom 149F                                 _ui_disp_str_dly 191B  
                   ?_rfid_comm_process_recharge 0070                                 m_flash_copy@buf 002C  
                               m_flash_copy@len 002E                                   __size_of_main 0092  
                                  _ui_disp_flow 246B                                _smallFlowNotCare 012B  
                                  _ui_disp_menu 221A                          _ui_disp_set_balanceOff 22F5  
                               crc_sum@uchCRCHi 0029                                 crc_sum@uchCRCLo 002A  
                  ?_ui_disp_small_flow_how_care 0070                             picc_select@maxBytes 00D4  
                  _TMR0_DefaultInterruptHandler 0000                        mfrc522_hal_antenna_on@t8 0023  
                             ??_DATAEE_ReadByte 0073                                        _tmTemp16 0124  
                           ??_picc_authenticate 004E                      ?_mfapi_is_new_card_present 0070  
                                      _password 0122                        __end_of_mfrc522_hal_init 19B7  
                          _mfrc522_bal_read_reg 1DB9                                      _RC1STAbits 019D  
                                  ??_ui_mem_cpy 0075                 pcd_comm_with_picc@controlBuffer 0042  
                    ??_iic_received_byte_if_ack 0076                                ?_lcd_disp_code_0 0070  
                              ?_lcd_disp_code_1 0070                                        _valve_on 35E6  
                              ?_lcd_disp_code_2 0070                                ?_lcd_disp_code_3 0070  
                              ?_lcd_disp_code_4 0070                                ?_lcd_disp_code_5 0070  
                              ?_lcd_disp_code_6 0070                                ?_lcd_disp_code_7 0070  
          __size_of_adc_mcp3241_read_convert_16 0031                             picc_select@uidIndex 00E2  
     modbus_response_read_status_register@pmdbs 003D                        mfrc522_bal_write_reg@reg 0020  
                        __size_of_m_flash_erase 001A                                        int$flags 007E  
                   __end_of_ui_key_process_down 27E5        __end_of_modbus_response_write_flash_clib 050C  
     __size_of_modbus_response_write_flash_clib 0083              ??_modbus_response_write_flash_clib 0041  
             ?_modbus_response_write_flash_clib 0070                _modbus_response_write_flash_clib 0489  
                                  ??_valve_stop 0073                                        _userKeyB 01BC  
            __end_of_INTERRUPT_InterruptManager 0037                      _INTERRUPT_InterruptManager 0004  
                      __size_of_app_flow_lookup 0084                   rfid_comm_process_read_dec@ret 0063  
               __size_of_ui_disp_set_line_reset 0012                            get_globle_ticker@ret 0075  
                           _EUSART1_Receive_ISR 3637                                     ??_iic_start 0075  
                             ?_FLASH_EraseBlock 0073          __end_of_mfrc522_bal_write_read_via_spi 1DF0  
       __size_of_mfrc522_bal_write_read_via_spi 0021                  _mfrc522_bal_write_read_via_spi 1DCF  
                  mfapi_is_new_card_present@cmd 0057                         data_api_read_eeprom@buf 0074  
                                   ??_m_mem_set 0077                         data_api_read_eeprom@len 0077  
                                   _uart1Buffer 04A0                                ??_ui_key_process 005B  
                 rfid_comm_process_read_inc@ret 0063                         _flowCalibrationLocation 012A  
                         mifare_write@cmdBuffer 00C9                              ??_FLASH_EraseBlock 0075  
                                    _INTCONbits 000B                       __end_of_picc_authenticate 1CB4  
                               ??_ui_disp_hello 0078                           _ui_disp_clear_balance 2299  
                     picc_select@responseBuffer 00E6                                m_mem_cpy_len@len 0077  
                         _ui_disp_clear_card_id 22AC                       picc_select@responseLength 00E4  
                          iic_waite_ack@timeout 0076                      __end_of_ui_key_set_process 3000  
                     _mfrc522_hal_calculate_crc 1D5A                                   _lcd_disp_code 2D54  
                        picc_select@bytesToCopy 00E3                       __size_of_lcd_clear_buffer 0009  
               mfrc522_bal_read_fifo_len_ex@adr 0025                 mfrc522_bal_read_fifo_len_ex@buf 0020  
                  modbus_response_process@pmdbs 004C                 mfrc522_bal_read_fifo_len_ex@len 0022  
               mfrc522_bal_read_fifo_len_ex@reg 0024                         __size_of_WDT_Initialize 0004  
                         mifare_write@blockAddr 00C8                              __end_of_ui_mem_cpy 3637  
                  __end_of_mfrc522_hal_reset_sf 1E31                   ?_adc_mcp3241_start_convert_16 0022  
                        __p_bkupSystemData_text 3E80                        __end_of_ui_disp_recharge 22F5  
                         __end_of_m_system_init 2B8C                                        intlevel1 0000  
                 __size_of_other_gpio_port_init 000A                      __size_of_iic_received_byte 0028  
                          ?_EUSART1_Receive_ISR 0070                       ??_mfrc522_bal_clr_bit_reg 0023  
                              ___lwmod@dividend 0075                               _create_card_key_b 07D0  
         modbus_response_write_flash_clib@pmdbs 0045                                ___lldiv@dividend 0024  
                       ?_PIN_MANAGER_Initialize 0070                              __end_of_valve_stop 368D  
                    __end_of_app_flow_money_off 03FD                        __end_of_ui_disp_set_line 262C  
                          _ui_key_process_enter 2C62                               __CFG_CLKOUTEN$OFF 0000  
                        ?_mfrc522_bal_write_reg 0077                         ?_data_api_flash_process 0070  
                            ?_create_card_key_b 0073                    __end_of_EUSART1_Transmit_ISR 2009  
                         ?_mfrc522_bal_read_reg 0070                                 _adcAverageValue 00AA  
                adc_mcp3241_read_convert_16@t16 0027                   ??_ui_disp_small_flow_how_care 002F  
             __size_of_m_system_start_self_test 0053                                   _iic_send_byte 00DF  
                     ?_m_system_start_self_test 0070                  adc_mcp3241_read_convert_16@sta 0026  
              ??_ui_disp_set_transferMoneyLimit 0078                 ?_ui_disp_set_transferMoneyLimit 0070  
                     _data_api_system_data_init 117B                        __end_of_ui_disp_totale_v 2522  
                       __end_of_lcd_set_com_seg 2730                              picc_select@rxAlign 00D3  
                          _uart1ReceivedTimeout 01AE                                  crc_sum@puchMsg 0073  
                 rfid_comm_process_recharge@ret 006D                                     ??_valve_off 0073  
                        __size_of_led_port_init 0019              __end_of_ui_disp_balance_and_volume 0A1E  
                    _ui_disp_balance_and_volume 08B9                             ??_create_card_key_b 0076  
                                 _iic_waite_ack 017B                          __size_of_m_mem_cpy_len 001B  
                __size_of_data_api_rt_data_save 009F                   __end_of_data_api_rt_data_save 10A0  
                                   _valveStatus 00BC                         ??_data_api_write_eeprom 0076  
                                 _warningStatus 012E                                      _OPTION_REG 0095  
                       _modbus_response_process 042F                                     _rtVolume_m3 00B4  
                             ?_in_app_vavle_off 0070                         ?_ui_key_process_up_down 0070  
                                   crc_append@n 002D                              ui_disp_flow@decnum 0046  
    data_api_calibration_table_data_save@single 0036                                ___lldiv@quotient 0028  
                     _Main_flowCalibrationTable 3F80                                 ___lwmod@divisor 0073  
                               _TMR0_Initialize 2C1E                                   crc_sum@uIndex 0027  
                   mfrc522_bal_clr_bit_reg@bits 0022                                 ___lwmod@counter 0020  
                  pcd_comm_with_picc@bitFraming 003E                              ??_in_app_vavle_off 0074  
                                  ___aldiv@sign 0031                          picc_select@uidComplete 00CE  
                        ?_ui_key_process_cancel 0070         modbus_response_read_status_register@buf 003E  
                   __end_of_timer1_irq_callback 3689         modbus_response_read_status_register@len 003F  
                                ?_lcd_disp_code 0075                            picc_authenticate@key 004B  
                       __end_of_ui_disp_str_dly 1953                               ??_ui_uint32_2_str 003B  
                          picc_authenticate@uid 004D                           my_uart1_send_poll@buf 0022  
                         my_uart1_send_poll@len 0073                                   _m_flash_erase 1532  
                    ?_mfrc522_bal_write_reg_len 0020   modbus_response_read_status_register@startAddr 003B  
                     __end_of_create_card_key_b 07F5                    __size_of_app_flow_adc_2_flow 01AC  
                         ??_EUSART1_Receive_ISR 0070                  __end_of_PIN_MANAGER_Initialize 2BCF  
                        _ui_disp_set_line_reset 235F                      mfrc522_bal_clr_bit_reg@reg 0025  
                                  ___almod@sign 0075                      mfrc522_bal_clr_bit_reg@tmp 0024  
                             ??_in_app_vavle_on 0074                        ??_mfrc522_hal_antenna_on 0022  
                                 ?_lcd_disp_all 0070                                   ?_lcd_disp_cln 0070  
                  pcd_comm_with_picc@_validBits 0048                                   ?_lcd_disp_str 0022  
                __end_of_data_api_flash_process 17A9                           ?_ui_key_process_enter 0070  
                            picc_authenticate@i 005F                                    ?_lcd_disp_dp 0032  
                           my_uart1_send_poll@i 0020   __end_of_key_process_up_down_variable_speed_ex 21DF  
__size_of_key_process_up_down_variable_speed_ex 00C4         ??_key_process_up_down_variable_speed_ex 004E  
        ?_key_process_up_down_variable_speed_ex 0049           _key_process_up_down_variable_speed_ex 211B  
                                   crc_verify@n 002D                     pcd_mifare_transceive@result 0068  
                                ?_iic_send_byte 0070                                 _TMR1_Initialize 2BCF  
                 __size_of_ui_disp_clear_totale 0011                                   ?_iic_send_ack 0070  
                        flow_sampling_process@i 003F  
